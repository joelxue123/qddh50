ARM GAS  /tmp/ccXaLNW9.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"mc_tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.OFFSET_TAB_CCMRx,"a"
  18              		.align	2
  21              	OFFSET_TAB_CCMRx:
  22 0000 00000000 		.ascii	"\000\000\000\000\004\004\004\00488"
  22      04040404 
  22      3838
  23              		.section	.rodata.SHIFT_TAB_OCxx,"a"
  24              		.align	2
  27              	SHIFT_TAB_OCxx:
  28 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\010"
  28      00000800 
  28      0008
  29              		.section	.rodata.SHIFT_TAB_ICxx,"a"
  30              		.align	2
  33              	SHIFT_TAB_ICxx:
  34 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\000"
  34      00000800 
  34      0000
  35              		.section	.rodata.SHIFT_TAB_CCxP,"a"
  36              		.align	2
  39              	SHIFT_TAB_CCxP:
  40 0000 00020406 		.ascii	"\000\002\004\006\010\012\014\016\020\024"
  40      080A0C0E 
  40      1014
  41              		.section	.rodata.SHIFT_TAB_OISx,"a"
  42              		.align	2
  45              	SHIFT_TAB_OISx:
  46 0000 00010203 		.ascii	"\000\001\002\003\004\005\006\007\010\012"
  46      04050607 
  46      080A
  47              		.section	.text.LL_GPIO_LockPin,"ax",%progbits
  48              		.align	1
  49              		.arch armv7e-m
  50              		.syntax unified
  51              		.thumb
  52              		.thumb_func
  53              		.fpu fpv4-sp-d16
  55              	LL_GPIO_LockPin:
  56              	.LFB862:
  57              		.file 1 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h"
   1:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
ARM GAS  /tmp/ccXaLNW9.s 			page 2


   2:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   ******************************************************************************
   3:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @file    stm32g4xx_ll_gpio.h
   4:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @author  MCD Application Team
   5:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief   Header file of GPIO LL module.
   6:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   ******************************************************************************
   7:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @attention
   8:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *
   9:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * Copyright (c) 2019 STMicroelectronics.
  10:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * All rights reserved.
  11:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *
  12:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * in the root directory of this software component.
  14:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *
  16:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   ******************************************************************************
  17:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  18:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  19:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #ifndef STM32G4xx_LL_GPIO_H
  21:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define STM32G4xx_LL_GPIO_H
  22:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  23:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #ifdef __cplusplus
  24:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** extern "C" {
  25:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #endif
  26:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  27:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #include "stm32g4xx.h"
  29:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  30:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @addtogroup STM32G4xx_LL_Driver
  31:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
  32:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  33:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  34:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #if defined (GPIOA) || defined (GPIOB) || defined (GPIOC) || defined (GPIOD) || defined (GPIOE) || 
  35:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  36:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL GPIO
  37:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
  38:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  39:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** MISRA C:2012 deviation rule has been granted for following rules:
  40:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * Rule-18.1_d - Medium: Array pointer `GPIOx' is accessed with index [..,..]
  41:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * which may be out of array bounds [..,UNKNOWN] in following APIs:
  42:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * LL_GPIO_GetAFPin_0_7
  43:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * LL_GPIO_SetAFPin_0_7
  44:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * LL_GPIO_SetAFPin_8_15
  45:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * LL_GPIO_GetAFPin_8_15
  46:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  47:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  48:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Private types -------------------------------------------------------------*/
  49:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Private variables ---------------------------------------------------------*/
  50:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Private constants ---------------------------------------------------------*/
  51:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Private macros ------------------------------------------------------------*/
  52:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #if defined(USE_FULL_LL_DRIVER)
  53:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Private_Macros GPIO Private Macros
  54:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
  55:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  56:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  57:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
  58:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
ARM GAS  /tmp/ccXaLNW9.s 			page 3


  59:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  60:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #endif /*USE_FULL_LL_DRIVER*/
  61:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  62:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Exported types ------------------------------------------------------------*/
  63:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #if defined(USE_FULL_LL_DRIVER)
  64:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_ES_INIT GPIO Exported Init structures
  65:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
  66:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  67:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  68:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
  69:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief LL GPIO Init Structure definition
  70:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  71:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** typedef struct
  72:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
  73:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Pin;          /*!< Specifies the GPIO pins to be configured.
  74:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be any value of @ref GPIO_LL_EC_PIN */
  75:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  76:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Mode;         /*!< Specifies the operating mode for the selected pins.
  77:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_MODE.
  78:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  79:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  80:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  81:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Speed;        /*!< Specifies the speed for the selected pins.
  82:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_SPEED.
  83:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  84:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  85:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  86:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t OutputType;   /*!< Specifies the operating output type for the selected pins.
  87:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_OUTPUT.
  88:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  89:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  90:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  91:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Pull;         /*!< Specifies the operating Pull-up/Pull down for the selected pins.
  92:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_PULL.
  93:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  94:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  95:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  96:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Alternate;    /*!< Specifies the Peripheral to be connected to the selected pins.
  97:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_AF.
  98:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  99:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
 100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** } LL_GPIO_InitTypeDef;
 101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #endif /* USE_FULL_LL_DRIVER */
 106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Exported constants --------------------------------------------------------*/
 108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Constants GPIO Exported Constants
 109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_PIN PIN
 113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_0                      GPIO_BSRR_BS0 /*!< Select pin 0 */
ARM GAS  /tmp/ccXaLNW9.s 			page 4


 116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_1                      GPIO_BSRR_BS1 /*!< Select pin 1 */
 117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_2                      GPIO_BSRR_BS2 /*!< Select pin 2 */
 118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_3                      GPIO_BSRR_BS3 /*!< Select pin 3 */
 119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_4                      GPIO_BSRR_BS4 /*!< Select pin 4 */
 120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_5                      GPIO_BSRR_BS5 /*!< Select pin 5 */
 121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_6                      GPIO_BSRR_BS6 /*!< Select pin 6 */
 122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_7                      GPIO_BSRR_BS7 /*!< Select pin 7 */
 123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_8                      GPIO_BSRR_BS8 /*!< Select pin 8 */
 124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_9                      GPIO_BSRR_BS9 /*!< Select pin 9 */
 125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_10                     GPIO_BSRR_BS10 /*!< Select pin 10 */
 126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_11                     GPIO_BSRR_BS11 /*!< Select pin 11 */
 127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_12                     GPIO_BSRR_BS12 /*!< Select pin 12 */
 128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_13                     GPIO_BSRR_BS13 /*!< Select pin 13 */
 129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_14                     GPIO_BSRR_BS14 /*!< Select pin 14 */
 130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_15                     GPIO_BSRR_BS15 /*!< Select pin 15 */
 131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_ALL                    (GPIO_BSRR_BS0 | GPIO_BSRR_BS1  | GPIO_BSRR_BS2  | \
 132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS3  | GPIO_BSRR_BS4  | GPIO_BSRR_BS5  | \
 133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS6  | GPIO_BSRR_BS7  | GPIO_BSRR_BS8  | \
 134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS9  | GPIO_BSRR_BS10 | GPIO_BSRR_BS11 | \
 135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS12 | GPIO_BSRR_BS13 | GPIO_BSRR_BS14 | \
 136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS15) /*!< Select all pins */
 137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_MODE Mode
 142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_MODE_INPUT                 (0x00000000U) /*!< Select input mode */
 145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_MODE_OUTPUT                GPIO_MODER_MODE0_0  /*!< Select output mode */
 146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_MODE_ALTERNATE             GPIO_MODER_MODE0_1  /*!< Select alternate function mode 
 147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_MODE_ANALOG                GPIO_MODER_MODE0    /*!< Select analog mode */
 148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_OUTPUT Output Type
 153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_OUTPUT_PUSHPULL            (0x00000000U) /*!< Select push-pull as output type */
 156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_OUTPUT_OPENDRAIN           GPIO_OTYPER_OT0 /*!< Select open-drain as output type */
 157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_SPEED Output Speed
 162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_LOW             (0x00000000U) /*!< Select I/O low output speed    */
 165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_MEDIUM          GPIO_OSPEEDR_OSPEED0_0 /*!< Select I/O medium output spe
 166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_HIGH            GPIO_OSPEEDR_OSPEED0_1 /*!< Select I/O fast output speed
 167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_VERY_HIGH       GPIO_OSPEEDR_OSPEED0   /*!< Select I/O high output speed
 168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_LOW                  LL_GPIO_SPEED_FREQ_LOW
 172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_MEDIUM               LL_GPIO_SPEED_FREQ_MEDIUM
ARM GAS  /tmp/ccXaLNW9.s 			page 5


 173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FAST                 LL_GPIO_SPEED_FREQ_HIGH
 174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_HIGH                 LL_GPIO_SPEED_FREQ_VERY_HIGH
 175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_PULL Pull Up Pull Down
 177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PULL_NO                    (0x00000000U) /*!< Select I/O no pull */
 180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PULL_UP                    GPIO_PUPDR_PUPD0_0 /*!< Select I/O pull up */
 181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PULL_DOWN                  GPIO_PUPDR_PUPD0_1 /*!< Select I/O pull down */
 182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_AF Alternate Function
 187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_0                       (0x0000000U) /*!< Select alternate function 0 */
 190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_1                       (0x0000001U) /*!< Select alternate function 1 */
 191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_2                       (0x0000002U) /*!< Select alternate function 2 */
 192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_3                       (0x0000003U) /*!< Select alternate function 3 */
 193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_4                       (0x0000004U) /*!< Select alternate function 4 */
 194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_5                       (0x0000005U) /*!< Select alternate function 5 */
 195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_6                       (0x0000006U) /*!< Select alternate function 6 */
 196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_7                       (0x0000007U) /*!< Select alternate function 7 */
 197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_8                       (0x0000008U) /*!< Select alternate function 8 */
 198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_9                       (0x0000009U) /*!< Select alternate function 9 */
 199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_10                      (0x000000AU) /*!< Select alternate function 10 */
 200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_11                      (0x000000BU) /*!< Select alternate function 11 */
 201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_12                      (0x000000CU) /*!< Select alternate function 12 */
 202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_13                      (0x000000DU) /*!< Select alternate function 13 */
 203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_14                      (0x000000EU) /*!< Select alternate function 14 */
 204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_15                      (0x000000FU) /*!< Select alternate function 15 */
 205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Exported macro ------------------------------------------------------------*/
 214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Macros GPIO Exported Macros
 215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EM_WRITE_READ Common Write and read registers Macros
 219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Write a value in GPIO register
 224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __INSTANCE__ GPIO Instance
 225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __REG__ Register to be written
 226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __VALUE__ Value to be written in the register
 227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALU
ARM GAS  /tmp/ccXaLNW9.s 			page 6


 230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Read a value in GPIO register
 233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __INSTANCE__ GPIO Instance
 234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __REG__ Register to be read
 235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Register value
 236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Exported functions --------------------------------------------------------*/
 247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Functions GPIO Exported Functions
 248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EF_Port_Configuration Port Configuration
 252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio mode for a dedicated pin on dedicated port.
 257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   I/O mode can be Input mode, General purpose output, Alternate function mode or Analog.
 258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll MODER        MODEy         LL_GPIO_SetPinMode
 260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Mode This parameter can be one of the following values:
 279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_INPUT
 280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_OUTPUT
 281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ALTERNATE
 282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ANALOG
 283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
 286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
ARM GAS  /tmp/ccXaLNW9.s 			page 7


 287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(P
 288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio mode for a dedicated pin on dedicated port.
 292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   I/O mode can be Input mode, General purpose output, Alternate function mode or Analog.
 293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll MODER        MODEy         LL_GPIO_GetPinMode
 295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_INPUT
 315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_OUTPUT
 316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ALTERNATE
 317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ANALOG
 318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin)
 320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->MODER,
 322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(Pin) 
 323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio output type for several pins on dedicated port.
 327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Output type as to be set when gpio pin is in output or
 328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         alternate modes. Possible type are Push-pull or Open-drain.
 329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll OTYPER       OTy           LL_GPIO_SetPinOutputType
 330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
ARM GAS  /tmp/ccXaLNW9.s 			page 8


 344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  OutputType This parameter can be one of the following values:
 350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
 351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
 352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t Outpu
 355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio output type for several pins on dedicated port.
 361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Output type as to be set when gpio pin is in output or
 362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         alternate modes. Possible type are Push-pull or Open-drain.
 363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll OTYPER       OTy           LL_GPIO_GetPinOutputType
 365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
 386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
 387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin)
 389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->OTYPER, Pin) >> POSITION_VAL(Pin));
 391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio speed for a dedicated pin on dedicated port.
 395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   I/O speed can be Low, Medium, Fast or High speed.
 396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Refer to datasheet for frequency specifications and the power
 398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         supply and load conditions for each speed.
 399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll OSPEEDR      OSPEEDy       LL_GPIO_SetPinSpeed
 400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
ARM GAS  /tmp/ccXaLNW9.s 			page 9


 401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Speed This parameter can be one of the following values:
 419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_LOW
 420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
 421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
 422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
 423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****              (Speed << (POSITION_VAL(Pin) * 2U)));
 429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio speed for a dedicated pin on dedicated port.
 433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   I/O speed can be Low, Medium, Fast or High speed.
 434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Refer to datasheet for frequency specifications and the power
 436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         supply and load conditions for each speed.
 437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll OSPEEDR      OSPEEDy       LL_GPIO_GetPinSpeed
 438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_LOW
ARM GAS  /tmp/ccXaLNW9.s 			page 10


 458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
 459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
 460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
 461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin)
 463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->OSPEEDR,
 465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(P
 466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio pull-up or pull-down for a dedicated pin on a dedicated port.
 470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll PUPDR        PUPDy         LL_GPIO_SetPinPull
 472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pull This parameter can be one of the following values:
 491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_NO
 492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_UP
 493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_DOWN
 494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
 497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(P
 499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio pull-up or pull-down for a dedicated pin on a dedicated port
 503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll PUPDR        PUPDy         LL_GPIO_GetPinPull
 505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
ARM GAS  /tmp/ccXaLNW9.s 			page 11


 515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_NO
 525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_UP
 526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_DOWN
 527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin)
 529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->PUPDR,
 531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(Pin) 
 532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio alternate function of a dedicated pin from 0 to 7 for a dedicated port.
 536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF15 depending on target.
 537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll AFRL         AFSELy        LL_GPIO_SetAFPin_0_7
 539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Alternate This parameter can be one of the following values:
 550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
 569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****              (Alternate << (POSITION_VAL(Pin) * 4U)));
ARM GAS  /tmp/ccXaLNW9.s 			page 12


 572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio alternate function of a dedicated pin from 0 to 7 for a dedicated port.
 576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll AFRL         AFSELy        LL_GPIO_GetAFPin_0_7
 577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin)
 606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->AFR[0],
 608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U))) >> (POSITION_VAL(Pin) 
 609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio alternate function of a dedicated pin from 8 to 15 for a dedicated port.
 613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF15 depending on target.
 614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll AFRH         AFSELy        LL_GPIO_SetAFPin_8_15
 616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Alternate This parameter can be one of the following values:
 627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
ARM GAS  /tmp/ccXaLNW9.s 			page 13


 629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
 646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****              (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
 649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio alternate function of a dedicated pin from 8 to 15 for a dedicated port.
 653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF15 depending on target.
 654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll AFRH         AFSELy        LL_GPIO_GetAFPin_8_15
 655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin)
 684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->AFR[1],
ARM GAS  /tmp/ccXaLNW9.s 			page 14


 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U))) >> (POSITION_VAL
 687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Lock configuration of several pins for a dedicated port.
 692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   When the lock sequence has been applied on a port bit, the
 693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         value of this port bit can no longer be modified until the
 694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         next reset.
 695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Each lock bit freezes a specific configuration register
 696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         (control and alternate function registers).
 697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll LCKR         LCKK          LL_GPIO_LockPin
 698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
  58              		.loc 1 720 1
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 16
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63 0000 80B4     		push	{r7}
  64              	.LCFI0:
  65              		.cfi_def_cfa_offset 4
  66              		.cfi_offset 7, -4
  67 0002 85B0     		sub	sp, sp, #20
  68              	.LCFI1:
  69              		.cfi_def_cfa_offset 24
  70 0004 00AF     		add	r7, sp, #0
  71              	.LCFI2:
  72              		.cfi_def_cfa_register 7
  73 0006 7860     		str	r0, [r7, #4]
  74 0008 3960     		str	r1, [r7]
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   __IO uint32_t temp;
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
  75              		.loc 1 722 3
  76 000a 3B68     		ldr	r3, [r7]
  77 000c 43F48032 		orr	r2, r3, #65536
ARM GAS  /tmp/ccXaLNW9.s 			page 15


  78 0010 7B68     		ldr	r3, [r7, #4]
  79 0012 DA61     		str	r2, [r3, #28]
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
  80              		.loc 1 723 3
  81 0014 7B68     		ldr	r3, [r7, #4]
  82 0016 3A68     		ldr	r2, [r7]
  83 0018 DA61     		str	r2, [r3, #28]
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
  84              		.loc 1 724 3
  85 001a 3B68     		ldr	r3, [r7]
  86 001c 43F48032 		orr	r2, r3, #65536
  87 0020 7B68     		ldr	r3, [r7, #4]
  88 0022 DA61     		str	r2, [r3, #28]
 725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   temp = READ_REG(GPIOx->LCKR);
  89              		.loc 1 726 10
  90 0024 7B68     		ldr	r3, [r7, #4]
  91 0026 DB69     		ldr	r3, [r3, #28]
  92              		.loc 1 726 8
  93 0028 FB60     		str	r3, [r7, #12]
 727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
  94              		.loc 1 727 3
  95 002a FB68     		ldr	r3, [r7, #12]
 728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
  96              		.loc 1 728 1
  97 002c 00BF     		nop
  98 002e 1437     		adds	r7, r7, #20
  99              	.LCFI3:
 100              		.cfi_def_cfa_offset 4
 101 0030 BD46     		mov	sp, r7
 102              	.LCFI4:
 103              		.cfi_def_cfa_register 13
 104              		@ sp needed
 105 0032 5DF8047B 		ldr	r7, [sp], #4
 106              	.LCFI5:
 107              		.cfi_restore 7
 108              		.cfi_def_cfa_offset 0
 109 0036 7047     		bx	lr
 110              		.cfi_endproc
 111              	.LFE862:
 113              		.section	.rodata.USART_PRESCALER_TAB,"a"
 114              		.align	2
 117              	USART_PRESCALER_TAB:
 118 0000 01000000 		.word	1
 119 0004 02000000 		.word	2
 120 0008 04000000 		.word	4
 121 000c 06000000 		.word	6
 122 0010 08000000 		.word	8
 123 0014 0A000000 		.word	10
 124 0018 0C000000 		.word	12
 125 001c 10000000 		.word	16
 126 0020 20000000 		.word	32
 127 0024 40000000 		.word	64
 128 0028 80000000 		.word	128
 129 002c 00010000 		.word	256
 130              		.section	.rodata.CHANNEL_OFFSET_TAB,"a"
 131              		.align	2
ARM GAS  /tmp/ccXaLNW9.s 			page 16


 134              	CHANNEL_OFFSET_TAB:
 135 0000 081C3044 		.ascii	"\010\0340DXl"
 135      586C
 136              		.section	.text.MC_Perf_Measure_Start,"ax",%progbits
 137              		.align	1
 138              		.syntax unified
 139              		.thumb
 140              		.thumb_func
 141              		.fpu fpv4-sp-d16
 143              	MC_Perf_Measure_Start:
 144              	.LFB1456:
 145              		.file 2 "Inc/mc_perf.h"
   1:Inc/mc_perf.h **** /**
   2:Inc/mc_perf.h ****   ******************************************************************************
   3:Inc/mc_perf.h ****   * @file    mc_perf.h
   4:Inc/mc_perf.h ****   * @author  Motor Control SDK Team, ST Microelectronics
   5:Inc/mc_perf.h ****   * @brief   Execution time measurement definitions
   6:Inc/mc_perf.h ****   ******************************************************************************
   7:Inc/mc_perf.h ****   * @attention
   8:Inc/mc_perf.h ****   *
   9:Inc/mc_perf.h ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  10:Inc/mc_perf.h ****   * All rights reserved.</center></h2>
  11:Inc/mc_perf.h ****   *
  12:Inc/mc_perf.h ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Inc/mc_perf.h ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Inc/mc_perf.h ****   * the License. You may obtain a copy of the License at:
  15:Inc/mc_perf.h ****   *                             www.st.com/SLA0044
  16:Inc/mc_perf.h ****   *
  17:Inc/mc_perf.h ****   ******************************************************************************
  18:Inc/mc_perf.h ****   */
  19:Inc/mc_perf.h **** #ifndef MC_PERF_H
  20:Inc/mc_perf.h **** #define MC_PERF_H
  21:Inc/mc_perf.h **** 
  22:Inc/mc_perf.h **** typedef enum
  23:Inc/mc_perf.h **** {
  24:Inc/mc_perf.h ****   MEASURE_TSK_HighFrequencyTaskM1,
  25:Inc/mc_perf.h ****   MEASURE_TSK_MediumFrequencyTaskM1,
  26:Inc/mc_perf.h **** /*  Others functions to measure to be added here. */
  27:Inc/mc_perf.h **** } MC_PERF_FUNCTIONS_LIST_t;
  28:Inc/mc_perf.h **** 
  29:Inc/mc_perf.h **** /* Define max number of traces according to the list defined in MC_PERF_FUNCTIONS_LIST_t */
  30:Inc/mc_perf.h **** #define  MC_PERF_NB_TRACES  2U
  31:Inc/mc_perf.h **** 
  32:Inc/mc_perf.h **** /* DWT (Data Watchpoint and Trace) registers, only exists on ARM Cortex with a DWT unit */
  33:Inc/mc_perf.h **** /* The DWT is usually implemented in Cortex-M3 or higher, but not on Cortex-M0(+) (ie not present o
  34:Inc/mc_perf.h **** 
  35:Inc/mc_perf.h **** typedef struct
  36:Inc/mc_perf.h **** {
  37:Inc/mc_perf.h ****     uint32_t  StartMeasure;
  38:Inc/mc_perf.h ****     uint32_t  DeltaTimeInCycle;
  39:Inc/mc_perf.h ****     uint32_t  min;
  40:Inc/mc_perf.h ****     uint32_t  max;
  41:Inc/mc_perf.h **** } Perf_Handle_t;
  42:Inc/mc_perf.h **** 
  43:Inc/mc_perf.h **** typedef struct
  44:Inc/mc_perf.h **** {
  45:Inc/mc_perf.h ****     bool   BG_Task_OnGoing;
ARM GAS  /tmp/ccXaLNW9.s 			page 17


  46:Inc/mc_perf.h ****     uint32_t  AccHighFreqTasksCnt;
  47:Inc/mc_perf.h ****     Perf_Handle_t MC_Perf_TraceLog[MC_PERF_NB_TRACES];
  48:Inc/mc_perf.h **** } MC_Perf_Handle_t;
  49:Inc/mc_perf.h **** 
  50:Inc/mc_perf.h **** void MC_Perf_Measure_Init(MC_Perf_Handle_t *pHandle);
  51:Inc/mc_perf.h **** void MC_Perf_Clear(MC_Perf_Handle_t *pHandle,uint8_t bMotor);
  52:Inc/mc_perf.h **** void MC_BG_Perf_Measure_Start(MC_Perf_Handle_t *pHandle, uint8_t i);
  53:Inc/mc_perf.h **** void MC_Perf_Measure_Stop(MC_Perf_Handle_t *pHandle, uint8_t i);
  54:Inc/mc_perf.h **** void MC_BG_Perf_Measure_Stop(MC_Perf_Handle_t *pHandle, uint8_t i);
  55:Inc/mc_perf.h **** 
  56:Inc/mc_perf.h **** float_t MC_Perf_GetCPU_Load(const MC_Perf_Handle_t *pHandle);
  57:Inc/mc_perf.h **** float_t MC_Perf_GetMaxCPU_Load(const MC_Perf_Handle_t *pHandle);
  58:Inc/mc_perf.h **** float_t MC_Perf_GetMinCPU_Load(const MC_Perf_Handle_t *pHandle);
  59:Inc/mc_perf.h **** 
  60:Inc/mc_perf.h **** /**
  61:Inc/mc_perf.h ****  * @brief  Start the measure of a code section called in foreground.
  62:Inc/mc_perf.h ****  * @param  pHandle: handler of the performance measurement component.
  63:Inc/mc_perf.h ****  * @param  CodeSection: code section to measure.
  64:Inc/mc_perf.h ****  */
  65:Inc/mc_perf.h **** static inline void MC_Perf_Measure_Start(MC_Perf_Handle_t *pHandle, uint8_t CodeSection)
  66:Inc/mc_perf.h **** {
 146              		.loc 2 66 1
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 16
 149              		@ frame_needed = 1, uses_anonymous_args = 0
 150              		@ link register save eliminated.
 151 0000 80B4     		push	{r7}
 152              	.LCFI6:
 153              		.cfi_def_cfa_offset 4
 154              		.cfi_offset 7, -4
 155 0002 85B0     		sub	sp, sp, #20
 156              	.LCFI7:
 157              		.cfi_def_cfa_offset 24
 158 0004 00AF     		add	r7, sp, #0
 159              	.LCFI8:
 160              		.cfi_def_cfa_register 7
 161 0006 7860     		str	r0, [r7, #4]
 162 0008 0B46     		mov	r3, r1
 163 000a FB70     		strb	r3, [r7, #3]
  67:Inc/mc_perf.h **** #ifdef NULL_PTR_CHECK_MC_PERF
  68:Inc/mc_perf.h ****   if (MC_NULL == pHandle)
  69:Inc/mc_perf.h ****   {
  70:Inc/mc_perf.h ****     /* Nothing to do */
  71:Inc/mc_perf.h ****   }
  72:Inc/mc_perf.h ****   else
  73:Inc/mc_perf.h ****   {
  74:Inc/mc_perf.h **** #endif
  75:Inc/mc_perf.h ****     uint32_t StartMeasure = DWT->CYCCNT;
 164              		.loc 2 75 32
 165 000c 074B     		ldr	r3, .L3
 166              		.loc 2 75 14
 167 000e 5B68     		ldr	r3, [r3, #4]
 168 0010 FB60     		str	r3, [r7, #12]
  76:Inc/mc_perf.h ****     pHandle->MC_Perf_TraceLog[CodeSection].StartMeasure = StartMeasure;
 169              		.loc 2 76 43
 170 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 171              		.loc 2 76 57
ARM GAS  /tmp/ccXaLNW9.s 			page 18


 172 0014 7A68     		ldr	r2, [r7, #4]
 173 0016 1B01     		lsls	r3, r3, #4
 174 0018 1344     		add	r3, r3, r2
 175 001a 0833     		adds	r3, r3, #8
 176 001c FA68     		ldr	r2, [r7, #12]
 177 001e 1A60     		str	r2, [r3]
  77:Inc/mc_perf.h **** #ifdef NULL_PTR_CHECK_MC_PERF
  78:Inc/mc_perf.h ****   }
  79:Inc/mc_perf.h **** #endif
  80:Inc/mc_perf.h **** }
 178              		.loc 2 80 1
 179 0020 00BF     		nop
 180 0022 1437     		adds	r7, r7, #20
 181              	.LCFI9:
 182              		.cfi_def_cfa_offset 4
 183 0024 BD46     		mov	sp, r7
 184              	.LCFI10:
 185              		.cfi_def_cfa_register 13
 186              		@ sp needed
 187 0026 5DF8047B 		ldr	r7, [sp], #4
 188              	.LCFI11:
 189              		.cfi_restore 7
 190              		.cfi_def_cfa_offset 0
 191 002a 7047     		bx	lr
 192              	.L4:
 193              		.align	2
 194              	.L3:
 195 002c 001000E0 		.word	-536866816
 196              		.cfi_endproc
 197              	.LFE1456:
 199              		.section	.bss.hMFTaskCounterM1,"aw",%nobits
 200              		.align	1
 203              	hMFTaskCounterM1:
 204 0000 0000     		.space	2
 205              		.section	.bss.hBootCapDelayCounterM1,"aw",%nobits
 206              		.align	1
 209              	hBootCapDelayCounterM1:
 210 0000 0000     		.space	2
 211              		.section	.bss.hStopPermanencyCounterM1,"aw",%nobits
 212              		.align	1
 215              	hStopPermanencyCounterM1:
 216 0000 0000     		.space	2
 217              		.section	.bss.bMCBootCompleted,"aw",%nobits
 220              	bMCBootCompleted:
 221 0000 00       		.space	1
 222              		.section	.rodata
 223              		.align	2
 224              	.LC0:
 225 0000 03       		.byte	3
 226 0001 01       		.byte	1
 227 0002 00       		.byte	0
 228 0003 00       		.align	2
 229              	.LC1:
 230 0004 01       		.byte	1
 231 0005 01       		.byte	1
 232              		.section	.text.MCboot,"ax",%progbits
 233              		.align	1
ARM GAS  /tmp/ccXaLNW9.s 			page 19


 234              		.weak	MCboot
 235              		.syntax unified
 236              		.thumb
 237              		.thumb_func
 238              		.fpu fpv4-sp-d16
 240              	MCboot:
 241              	.LFB1872:
 242              		.file 3 "Src/mc_tasks.c"
   1:Src/mc_tasks.c **** 
   2:Src/mc_tasks.c **** /**
   3:Src/mc_tasks.c ****   ******************************************************************************
   4:Src/mc_tasks.c ****   * @file    mc_tasks.c
   5:Src/mc_tasks.c ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/mc_tasks.c ****   * @brief   This file implements tasks definition
   7:Src/mc_tasks.c ****   *
   8:Src/mc_tasks.c ****   ******************************************************************************
   9:Src/mc_tasks.c ****   * @attention
  10:Src/mc_tasks.c ****   *
  11:Src/mc_tasks.c ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  12:Src/mc_tasks.c ****   * All rights reserved.</center></h2>
  13:Src/mc_tasks.c ****   *
  14:Src/mc_tasks.c ****   * This software component is licensed by ST under Ultimate Liberty license
  15:Src/mc_tasks.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  16:Src/mc_tasks.c ****   * the License. You may obtain a copy of the License at:
  17:Src/mc_tasks.c ****   *                             www.st.com/SLA0044
  18:Src/mc_tasks.c ****   *
  19:Src/mc_tasks.c ****   ******************************************************************************
  20:Src/mc_tasks.c ****   */
  21:Src/mc_tasks.c **** 
  22:Src/mc_tasks.c **** /* Includes ------------------------------------------------------------------*/
  23:Src/mc_tasks.c **** //cstat -MISRAC2012-Rule-21.1
  24:Src/mc_tasks.c **** #include "main.h"
  25:Src/mc_tasks.c **** //cstat +MISRAC2012-Rule-21.1
  26:Src/mc_tasks.c **** #include "mc_type.h"
  27:Src/mc_tasks.c **** #include "mc_math.h"
  28:Src/mc_tasks.c **** #include "motorcontrol.h"
  29:Src/mc_tasks.c **** #include "regular_conversion_manager.h"
  30:Src/mc_tasks.c **** #include "cmsis_os.h"
  31:Src/mc_tasks.c **** #include "mc_interface.h"
  32:Src/mc_tasks.c **** #include "digital_output.h"
  33:Src/mc_tasks.c **** #include "pwm_common.h"
  34:Src/mc_tasks.c **** #include "mc_tasks.h"
  35:Src/mc_tasks.c **** #include "parameters_conversion.h"
  36:Src/mc_tasks.c **** #include "mcp_config.h"
  37:Src/mc_tasks.c **** #include "mc_app_hooks.h"
  38:Src/mc_tasks.c **** #include "freertos_vars.h"
  39:Src/mc_tasks.c **** 
  40:Src/mc_tasks.c **** /* USER CODE BEGIN Includes */
  41:Src/mc_tasks.c **** 
  42:Src/mc_tasks.c **** /* USER CODE END Includes */
  43:Src/mc_tasks.c **** 
  44:Src/mc_tasks.c **** /* USER CODE BEGIN Private define */
  45:Src/mc_tasks.c **** /* Private define ------------------------------------------------------------*/
  46:Src/mc_tasks.c **** /* Un-Comment this macro define in order to activate the smooth
  47:Src/mc_tasks.c ****    braking action on over voltage */
  48:Src/mc_tasks.c **** /* #define  MC.SMOOTH_BRAKING_ACTION_ON_OVERVOLTAGE */
  49:Src/mc_tasks.c **** 
ARM GAS  /tmp/ccXaLNW9.s 			page 20


  50:Src/mc_tasks.c **** /* USER CODE END Private define */
  51:Src/mc_tasks.c **** 
  52:Src/mc_tasks.c **** #define VBUS_TEMP_ERR_MASK (MC_OVER_VOLT| MC_UNDER_VOLT| MC_OVER_TEMP)
  53:Src/mc_tasks.c **** /* Private variables----------------------------------------------------------*/
  54:Src/mc_tasks.c **** 
  55:Src/mc_tasks.c **** static uint16_t hMFTaskCounterM1 = 0; //cstat !MISRAC2012-Rule-8.9_a
  56:Src/mc_tasks.c **** static volatile uint16_t hBootCapDelayCounterM1 = ((uint16_t)0);
  57:Src/mc_tasks.c **** static volatile uint16_t hStopPermanencyCounterM1 = ((uint16_t)0);
  58:Src/mc_tasks.c **** static volatile uint8_t bMCBootCompleted = ((uint8_t)0);
  59:Src/mc_tasks.c **** 
  60:Src/mc_tasks.c **** #define M1_CHARGE_BOOT_CAP_TICKS          (((uint16_t)SYS_TICK_FREQUENCY * (uint16_t)10) / 1000U)
  61:Src/mc_tasks.c **** #define M1_CHARGE_BOOT_CAP_DUTY_CYCLES ((uint32_t)0.000\
  62:Src/mc_tasks.c ****                                       * ((uint32_t)PWM_PERIOD_CYCLES / 2U))
  63:Src/mc_tasks.c **** #define M2_CHARGE_BOOT_CAP_TICKS         (((uint16_t)SYS_TICK_FREQUENCY * (uint16_t)10) / 1000U)
  64:Src/mc_tasks.c **** #define M2_CHARGE_BOOT_CAP_DUTY_CYCLES ((uint32_t)0\
  65:Src/mc_tasks.c ****                                       * ((uint32_t)PWM_PERIOD_CYCLES2 / 2U))
  66:Src/mc_tasks.c **** 
  67:Src/mc_tasks.c **** /* USER CODE BEGIN Private Variables */
  68:Src/mc_tasks.c **** 
  69:Src/mc_tasks.c **** /* USER CODE END Private Variables */
  70:Src/mc_tasks.c **** 
  71:Src/mc_tasks.c **** /* Private functions ---------------------------------------------------------*/
  72:Src/mc_tasks.c **** void TSK_MediumFrequencyTaskM1(void);
  73:Src/mc_tasks.c **** void TSK_MF_StopProcessing(uint8_t motor);
  74:Src/mc_tasks.c **** MCI_Handle_t *GetMCI(uint8_t bMotor);
  75:Src/mc_tasks.c **** void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount);
  76:Src/mc_tasks.c **** bool TSK_ChargeBootCapDelayHasElapsedM1(void);
  77:Src/mc_tasks.c **** void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount);
  78:Src/mc_tasks.c **** bool TSK_StopPermanencyTimeHasElapsedM1(void);
  79:Src/mc_tasks.c **** void TSK_SafetyTask_PWMOFF(uint8_t motor);
  80:Src/mc_tasks.c **** 
  81:Src/mc_tasks.c **** /* USER CODE BEGIN Private Functions */
  82:Src/mc_tasks.c **** 
  83:Src/mc_tasks.c **** /* USER CODE END Private Functions */
  84:Src/mc_tasks.c **** /**
  85:Src/mc_tasks.c ****   * @brief  It initializes the whole MC core according to user defined
  86:Src/mc_tasks.c ****   *         parameters.
  87:Src/mc_tasks.c ****   * @param  pMCIList pointer to the vector of MCInterface objects that will be
  88:Src/mc_tasks.c ****   *         created and initialized. The vector must have length equal to the
  89:Src/mc_tasks.c ****   *         number of motor drives.
  90:Src/mc_tasks.c ****   */
  91:Src/mc_tasks.c **** __weak void MCboot( MCI_Handle_t* pMCIList[NBR_OF_MOTORS] )
  92:Src/mc_tasks.c **** {
 243              		.loc 3 92 1
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 16
 246              		@ frame_needed = 1, uses_anonymous_args = 0
 247 0000 80B5     		push	{r7, lr}
 248              	.LCFI12:
 249              		.cfi_def_cfa_offset 8
 250              		.cfi_offset 7, -8
 251              		.cfi_offset 14, -4
 252 0002 84B0     		sub	sp, sp, #16
 253              	.LCFI13:
 254              		.cfi_def_cfa_offset 24
 255 0004 00AF     		add	r7, sp, #0
 256              	.LCFI14:
ARM GAS  /tmp/ccXaLNW9.s 			page 21


 257              		.cfi_def_cfa_register 7
 258 0006 7860     		str	r0, [r7, #4]
  93:Src/mc_tasks.c ****   /* USER CODE BEGIN MCboot 0 */
  94:Src/mc_tasks.c **** 
  95:Src/mc_tasks.c ****   /* USER CODE END MCboot 0 */
  96:Src/mc_tasks.c **** 
  97:Src/mc_tasks.c ****   if (MC_NULL == pMCIList)
 259              		.loc 3 97 6
 260 0008 7B68     		ldr	r3, [r7, #4]
 261 000a 002B     		cmp	r3, #0
 262 000c 41D0     		beq	.L7
 263              	.LBB2:
  98:Src/mc_tasks.c ****   {
  99:Src/mc_tasks.c ****     /* Nothing to do */
 100:Src/mc_tasks.c ****   }
 101:Src/mc_tasks.c ****   else
 102:Src/mc_tasks.c ****   {
 103:Src/mc_tasks.c **** 
 104:Src/mc_tasks.c ****     bMCBootCompleted = (uint8_t )0;
 264              		.loc 3 104 22
 265 000e 234B     		ldr	r3, .L8
 266 0010 0022     		movs	r2, #0
 267 0012 1A70     		strb	r2, [r3]
 105:Src/mc_tasks.c **** 
 106:Src/mc_tasks.c ****     /*************************************************/
 107:Src/mc_tasks.c ****     /*    FOC initialization         */
 108:Src/mc_tasks.c ****     /*************************************************/
 109:Src/mc_tasks.c ****     pMCIList[M1] = &Mci[M1];
 268              		.loc 3 109 18
 269 0014 7B68     		ldr	r3, [r7, #4]
 270 0016 224A     		ldr	r2, .L8+4
 271 0018 1A60     		str	r2, [r3]
 110:Src/mc_tasks.c ****     FOC_Init();
 272              		.loc 3 110 5
 273 001a FFF7FEFF 		bl	FOC_Init
 111:Src/mc_tasks.c **** 
 112:Src/mc_tasks.c ****     //ASPEP_start(&aspepOverUartA);
 113:Src/mc_tasks.c ****     /* USER CODE BEGIN MCboot 1 */
 114:Src/mc_tasks.c **** 
 115:Src/mc_tasks.c ****     /* USER CODE END MCboot 1 */
 116:Src/mc_tasks.c **** 
 117:Src/mc_tasks.c ****     /******************************************************/
 118:Src/mc_tasks.c ****     /*   PID component initialization: speed regulation   */
 119:Src/mc_tasks.c ****     /******************************************************/
 120:Src/mc_tasks.c ****     PID_HandleInit(&PIDSpeedHandle_M1);
 274              		.loc 3 120 5
 275 001e 2148     		ldr	r0, .L8+8
 276 0020 FFF7FEFF 		bl	PID_HandleInit
 121:Src/mc_tasks.c **** 
 122:Src/mc_tasks.c ****     /****************************************************/
 123:Src/mc_tasks.c ****     /*   Virtual speed sensor component initialization  */
 124:Src/mc_tasks.c ****     /****************************************************/
 125:Src/mc_tasks.c ****     VSS_Init(&VirtualSpeedSensorM1);
 277              		.loc 3 125 5
 278 0024 2048     		ldr	r0, .L8+12
 279 0026 FFF7FEFF 		bl	VSS_Init
 126:Src/mc_tasks.c **** 
ARM GAS  /tmp/ccXaLNW9.s 			page 22


 127:Src/mc_tasks.c ****     /********************************************************/
 128:Src/mc_tasks.c ****     /*   Bus voltage sensor component initialization        */
 129:Src/mc_tasks.c ****     /********************************************************/
 130:Src/mc_tasks.c ****     (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 280              		.loc 3 130 5
 281 002a 2048     		ldr	r0, .L8+16
 282 002c FFF7FEFF 		bl	RCM_RegisterRegConv
 131:Src/mc_tasks.c ****     RVBS_Init(&BusVoltageSensor_M1);
 283              		.loc 3 131 5
 284 0030 1F48     		ldr	r0, .L8+20
 285 0032 FFF7FEFF 		bl	RVBS_Init
 132:Src/mc_tasks.c **** 
 133:Src/mc_tasks.c ****     /*******************************************************/
 134:Src/mc_tasks.c ****     /*   Temperature measurement component initialization  */
 135:Src/mc_tasks.c ****     /*******************************************************/
 136:Src/mc_tasks.c ****     (void)RCM_RegisterRegConv(&TempRegConv_M1);
 286              		.loc 3 136 5
 287 0036 1F48     		ldr	r0, .L8+24
 288 0038 FFF7FEFF 		bl	RCM_RegisterRegConv
 137:Src/mc_tasks.c ****     NTC_Init(&TempSensor_M1);
 289              		.loc 3 137 5
 290 003c 1E48     		ldr	r0, .L8+28
 291 003e FFF7FEFF 		bl	NTC_Init
 138:Src/mc_tasks.c **** 
 139:Src/mc_tasks.c ****     Mci[M1].pPerfMeasure = &PerfTraces;
 292              		.loc 3 139 26
 293 0042 174B     		ldr	r3, .L8+4
 294 0044 1D4A     		ldr	r2, .L8+32
 295 0046 9A62     		str	r2, [r3, #40]
 140:Src/mc_tasks.c ****     MC_Perf_Measure_Init(&PerfTraces);
 296              		.loc 3 140 5
 297 0048 1C48     		ldr	r0, .L8+32
 298 004a FFF7FEFF 		bl	MC_Perf_Measure_Init
 141:Src/mc_tasks.c **** 
 142:Src/mc_tasks.c ****     /*************************************************/
 143:Src/mc_tasks.c ****     /*   STSPIN32G4 driver component initialization  */
 144:Src/mc_tasks.c ****     /*************************************************/
 145:Src/mc_tasks.c ****     STSPIN32G4_init(&HdlSTSPING4);
 299              		.loc 3 145 5
 300 004e 1C48     		ldr	r0, .L8+36
 301 0050 FFF7FEFF 		bl	STSPIN32G4_init
 146:Src/mc_tasks.c ****     STSPIN32G4_reset(&HdlSTSPING4);
 302              		.loc 3 146 5
 303 0054 1A48     		ldr	r0, .L8+36
 304 0056 FFF7FEFF 		bl	STSPIN32G4_reset
 147:Src/mc_tasks.c ****     STSPIN32G4_setVCC(&HdlSTSPING4, (STSPIN32G4_confVCC){.voltage = _12V,
 305              		.loc 3 147 57
 306 005a 1A4A     		ldr	r2, .L8+40
 307 005c 07F10C03 		add	r3, r7, #12
 308 0060 1268     		ldr	r2, [r2]
 309 0062 1146     		mov	r1, r2	@ movhi
 310 0064 1980     		strh	r1, [r3]	@ movhi
 311 0066 0233     		adds	r3, r3, #2
 312 0068 120C     		lsrs	r2, r2, #16
 313 006a 1A70     		strb	r2, [r3]
 314              		.loc 3 147 5
 315 006c F968     		ldr	r1, [r7, #12]
ARM GAS  /tmp/ccXaLNW9.s 			page 23


 316 006e 1448     		ldr	r0, .L8+36
 317 0070 FFF7FEFF 		bl	STSPIN32G4_setVCC
 148:Src/mc_tasks.c ****                                                          .useNFAULT = true,
 149:Src/mc_tasks.c ****                                                          .useREADY = false });
 150:Src/mc_tasks.c ****     STSPIN32G4_setVDSP(&HdlSTSPING4, (STSPIN32G4_confVDSP){.deglitchTime = _4us,
 318              		.loc 3 150 59
 319 0074 144B     		ldr	r3, .L8+44
 320 0076 1B88     		ldrh	r3, [r3]	@ movhi
 321 0078 3B81     		strh	r3, [r7, #8]	@ movhi
 322              		.loc 3 150 5
 323 007a B968     		ldr	r1, [r7, #8]
 324 007c 1048     		ldr	r0, .L8+36
 325 007e FFF7FEFF 		bl	STSPIN32G4_setVDSP
 151:Src/mc_tasks.c ****                                                            .useNFAULT = true });
 152:Src/mc_tasks.c ****     STSPIN32G4_clearFaults(&HdlSTSPING4);
 326              		.loc 3 152 5
 327 0082 0F48     		ldr	r0, .L8+36
 328 0084 FFF7FEFF 		bl	STSPIN32G4_clearFaults
 153:Src/mc_tasks.c **** 
 154:Src/mc_tasks.c ****     /* Applicative hook in MCBoot() */
 155:Src/mc_tasks.c ****     MC_APP_BootHook();
 329              		.loc 3 155 5
 330 0088 FFF7FEFF 		bl	MC_APP_BootHook
 156:Src/mc_tasks.c **** 
 157:Src/mc_tasks.c ****     /* USER CODE BEGIN MCboot 2 */
 158:Src/mc_tasks.c **** 
 159:Src/mc_tasks.c ****     /* USER CODE END MCboot 2 */
 160:Src/mc_tasks.c **** 
 161:Src/mc_tasks.c ****     bMCBootCompleted = 1U;
 331              		.loc 3 161 22
 332 008c 034B     		ldr	r3, .L8
 333 008e 0122     		movs	r2, #1
 334 0090 1A70     		strb	r2, [r3]
 335              	.L7:
 336              	.LBE2:
 162:Src/mc_tasks.c ****   }
 163:Src/mc_tasks.c **** }
 337              		.loc 3 163 1
 338 0092 00BF     		nop
 339 0094 1037     		adds	r7, r7, #16
 340              	.LCFI15:
 341              		.cfi_def_cfa_offset 8
 342 0096 BD46     		mov	sp, r7
 343              	.LCFI16:
 344              		.cfi_def_cfa_register 13
 345              		@ sp needed
 346 0098 80BD     		pop	{r7, pc}
 347              	.L9:
 348 009a 00BF     		.align	2
 349              	.L8:
 350 009c 00000000 		.word	bMCBootCompleted
 351 00a0 00000000 		.word	Mci
 352 00a4 00000000 		.word	PIDSpeedHandle_M1
 353 00a8 00000000 		.word	VirtualSpeedSensorM1
 354 00ac 00000000 		.word	VbusRegConv_M1
 355 00b0 00000000 		.word	BusVoltageSensor_M1
 356 00b4 00000000 		.word	TempRegConv_M1
ARM GAS  /tmp/ccXaLNW9.s 			page 24


 357 00b8 00000000 		.word	TempSensor_M1
 358 00bc 00000000 		.word	PerfTraces
 359 00c0 00000000 		.word	HdlSTSPING4
 360 00c4 00000000 		.word	.LC0
 361 00c8 04000000 		.word	.LC1
 362              		.cfi_endproc
 363              	.LFE1872:
 365              		.section	.text.MC_StartMotorOpenLoop,"ax",%progbits
 366              		.align	1
 367              		.global	MC_StartMotorOpenLoop
 368              		.syntax unified
 369              		.thumb
 370              		.thumb_func
 371              		.fpu fpv4-sp-d16
 373              	MC_StartMotorOpenLoop:
 374              	.LFB1873:
 164:Src/mc_tasks.c **** 
 165:Src/mc_tasks.c **** 
 166:Src/mc_tasks.c **** 
 167:Src/mc_tasks.c **** 
 168:Src/mc_tasks.c **** 
 169:Src/mc_tasks.c **** 
 170:Src/mc_tasks.c **** /**
 171:Src/mc_tasks.c ****  * @brief  Starts motor in open-loop mode with specified voltage
 172:Src/mc_tasks.c ****  * @param  voltage_q Q-axis voltage (0-16000, typical start ~5000)
 173:Src/mc_tasks.c ****  * @param  voltage_d D-axis voltage (normally 0)
 174:Src/mc_tasks.c ****  * @param  frequency_hz Electrical frequency in Hz
 175:Src/mc_tasks.c ****  * @retval true if command accepted, false otherwise
 176:Src/mc_tasks.c ****  */
 177:Src/mc_tasks.c **** bool MC_StartMotorOpenLoop(int16_t voltage_q, int16_t voltage_d, uint16_t frequency_hz)
 178:Src/mc_tasks.c **** {
 375              		.loc 3 178 1
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 24
 378              		@ frame_needed = 1, uses_anonymous_args = 0
 379 0000 80B5     		push	{r7, lr}
 380              	.LCFI17:
 381              		.cfi_def_cfa_offset 8
 382              		.cfi_offset 7, -8
 383              		.cfi_offset 14, -4
 384 0002 86B0     		sub	sp, sp, #24
 385              	.LCFI18:
 386              		.cfi_def_cfa_offset 32
 387 0004 00AF     		add	r7, sp, #0
 388              	.LCFI19:
 389              		.cfi_def_cfa_register 7
 390 0006 0346     		mov	r3, r0
 391 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 392 000a 0B46     		mov	r3, r1	@ movhi
 393 000c BB80     		strh	r3, [r7, #4]	@ movhi
 394 000e 1346     		mov	r3, r2	@ movhi
 395 0010 7B80     		strh	r3, [r7, #2]	@ movhi
 179:Src/mc_tasks.c ****   MCI_Handle_t *pMCI = &Mci[M1];
 396              		.loc 3 179 17
 397 0012 104B     		ldr	r3, .L13
 398 0014 3B61     		str	r3, [r7, #16]
 180:Src/mc_tasks.c ****   bool ret = false;
ARM GAS  /tmp/ccXaLNW9.s 			page 25


 399              		.loc 3 180 8
 400 0016 0023     		movs	r3, #0
 401 0018 FB75     		strb	r3, [r7, #23]
 181:Src/mc_tasks.c ****   PWMC_Handle_t *pHandle =  pwmcHandle[M1];
 402              		.loc 3 181 18
 403 001a 0F4B     		ldr	r3, .L13+4
 404 001c 1B68     		ldr	r3, [r3]
 405 001e FB60     		str	r3, [r7, #12]
 182:Src/mc_tasks.c **** 
 183:Src/mc_tasks.c **** 
 184:Src/mc_tasks.c ****   if (IDLE == MCI_GetSTMState(pMCI))
 406              		.loc 3 184 15
 407 0020 3869     		ldr	r0, [r7, #16]
 408 0022 FFF7FEFF 		bl	MCI_GetSTMState
 409 0026 0346     		mov	r3, r0
 410              		.loc 3 184 6
 411 0028 002B     		cmp	r3, #0
 412 002a 0DD1     		bne	.L11
 185:Src/mc_tasks.c ****   {
 186:Src/mc_tasks.c ****     
 187:Src/mc_tasks.c ****     // Start motor (triggers state transitions)
 188:Src/mc_tasks.c ****     ret = MCI_StartMotor(pMCI);
 413              		.loc 3 188 11
 414 002c 3869     		ldr	r0, [r7, #16]
 415 002e FFF7FEFF 		bl	MCI_StartMotor
 416 0032 0346     		mov	r3, r0
 417 0034 FB75     		strb	r3, [r7, #23]
 189:Src/mc_tasks.c ****     
 190:Src/mc_tasks.c ****     if (ret)
 418              		.loc 3 190 8
 419 0036 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 420 0038 002B     		cmp	r3, #0
 421 003a 05D0     		beq	.L11
 191:Src/mc_tasks.c ****     {
 192:Src/mc_tasks.c **** 
 193:Src/mc_tasks.c ****       FOCVars[M1].Vqd.q = voltage_q;
 422              		.loc 3 193 25
 423 003c 074A     		ldr	r2, .L13+8
 424 003e FB88     		ldrh	r3, [r7, #6]	@ movhi
 425 0040 D382     		strh	r3, [r2, #22]	@ movhi
 194:Src/mc_tasks.c ****       FOCVars[M1].Vqd.d = voltage_d;
 426              		.loc 3 194 25
 427 0042 064A     		ldr	r2, .L13+8
 428 0044 BB88     		ldrh	r3, [r7, #4]	@ movhi
 429 0046 1383     		strh	r3, [r2, #24]	@ movhi
 430              	.L11:
 195:Src/mc_tasks.c **** 
 196:Src/mc_tasks.c ****     }
 197:Src/mc_tasks.c ****   }
 198:Src/mc_tasks.c ****   
 199:Src/mc_tasks.c ****   return ret;
 431              		.loc 3 199 10
 432 0048 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 200:Src/mc_tasks.c **** }
 433              		.loc 3 200 1
 434 004a 1846     		mov	r0, r3
 435 004c 1837     		adds	r7, r7, #24
ARM GAS  /tmp/ccXaLNW9.s 			page 26


 436              	.LCFI20:
 437              		.cfi_def_cfa_offset 8
 438 004e BD46     		mov	sp, r7
 439              	.LCFI21:
 440              		.cfi_def_cfa_register 13
 441              		@ sp needed
 442 0050 80BD     		pop	{r7, pc}
 443              	.L14:
 444 0052 00BF     		.align	2
 445              	.L13:
 446 0054 00000000 		.word	Mci
 447 0058 00000000 		.word	pwmcHandle
 448 005c 00000000 		.word	FOCVars
 449              		.cfi_endproc
 450              	.LFE1873:
 452              		.section	.text.MC_RunMotorControlTasks,"ax",%progbits
 453              		.align	1
 454              		.weak	MC_RunMotorControlTasks
 455              		.syntax unified
 456              		.thumb
 457              		.thumb_func
 458              		.fpu fpv4-sp-d16
 460              	MC_RunMotorControlTasks:
 461              	.LFB1874:
 201:Src/mc_tasks.c **** 
 202:Src/mc_tasks.c **** 
 203:Src/mc_tasks.c **** 
 204:Src/mc_tasks.c **** 
 205:Src/mc_tasks.c **** 
 206:Src/mc_tasks.c **** /**
 207:Src/mc_tasks.c ****  * @brief Runs all the Tasks of the Motor Control cockpit
 208:Src/mc_tasks.c ****  *
 209:Src/mc_tasks.c ****  * This function is to be called periodically at least at the Medium Frequency task
 210:Src/mc_tasks.c ****  * rate (It is typically called on the Systick interrupt). Exact invokation rate is
 211:Src/mc_tasks.c ****  * the Speed regulator execution rate set in the Motor Contorl Workbench.
 212:Src/mc_tasks.c ****  *
 213:Src/mc_tasks.c ****  * The following tasks are executed in this order:
 214:Src/mc_tasks.c ****  *
 215:Src/mc_tasks.c ****  * - Medium Frequency Tasks of each motors.
 216:Src/mc_tasks.c ****  * - Safety Task.
 217:Src/mc_tasks.c ****  * - Power Factor Correction Task (if enabled).
 218:Src/mc_tasks.c ****  * - User Interface task.
 219:Src/mc_tasks.c ****  */
 220:Src/mc_tasks.c **** __weak void MC_RunMotorControlTasks(void)
 221:Src/mc_tasks.c **** {
 462              		.loc 3 221 1
 463              		.cfi_startproc
 464              		@ args = 0, pretend = 0, frame = 0
 465              		@ frame_needed = 1, uses_anonymous_args = 0
 466 0000 98B5     		push	{r3, r4, r7, lr}
 467              	.LCFI22:
 468              		.cfi_def_cfa_offset 16
 469              		.cfi_offset 3, -16
 470              		.cfi_offset 4, -12
 471              		.cfi_offset 7, -8
 472              		.cfi_offset 14, -4
 473 0002 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccXaLNW9.s 			page 27


 474              	.LCFI23:
 475              		.cfi_def_cfa_register 7
 222:Src/mc_tasks.c ****   if (0U == bMCBootCompleted)
 476              		.loc 3 222 10
 477 0004 314B     		ldr	r3, .L22
 478 0006 1B78     		ldrb	r3, [r3]
 479 0008 DBB2     		uxtb	r3, r3
 480              		.loc 3 222 6
 481 000a 002B     		cmp	r3, #0
 482 000c 5CD0     		beq	.L21
 223:Src/mc_tasks.c ****   {
 224:Src/mc_tasks.c ****     /* Nothing to do */
 225:Src/mc_tasks.c ****   }
 226:Src/mc_tasks.c ****   else
 227:Src/mc_tasks.c ****   {
 228:Src/mc_tasks.c ****     /* ** Medium Frequency Tasks ** */
 229:Src/mc_tasks.c **** /* USER CODE BEGIN MC_Scheduler 0 */
 230:Src/mc_tasks.c **** 
 231:Src/mc_tasks.c **** /* USER CODE END MC_Scheduler 0 */
 232:Src/mc_tasks.c **** 
 233:Src/mc_tasks.c ****     if(hMFTaskCounterM1 > 0u)
 483              		.loc 3 233 25
 484 000e 304B     		ldr	r3, .L22+4
 485 0010 1B88     		ldrh	r3, [r3]
 486              		.loc 3 233 7
 487 0012 002B     		cmp	r3, #0
 488 0014 06D0     		beq	.L17
 234:Src/mc_tasks.c ****     {
 235:Src/mc_tasks.c ****       hMFTaskCounterM1--;
 489              		.loc 3 235 23
 490 0016 2E4B     		ldr	r3, .L22+4
 491 0018 1B88     		ldrh	r3, [r3]
 492 001a 013B     		subs	r3, r3, #1
 493 001c 9AB2     		uxth	r2, r3
 494 001e 2C4B     		ldr	r3, .L22+4
 495 0020 1A80     		strh	r2, [r3]	@ movhi
 496 0022 39E0     		b	.L18
 497              	.L17:
 236:Src/mc_tasks.c ****     }
 237:Src/mc_tasks.c ****     else
 238:Src/mc_tasks.c ****     {
 239:Src/mc_tasks.c **** 
 240:Src/mc_tasks.c ****       MC_BG_Perf_Measure_Start(&PerfTraces, MEASURE_TSK_MediumFrequencyTaskM1);
 498              		.loc 3 240 7
 499 0024 0121     		movs	r1, #1
 500 0026 2B48     		ldr	r0, .L22+8
 501 0028 FFF7FEFF 		bl	MC_BG_Perf_Measure_Start
 241:Src/mc_tasks.c ****       TSK_MediumFrequencyTaskM1();
 502              		.loc 3 241 7
 503 002c FFF7FEFF 		bl	TSK_MediumFrequencyTaskM1
 242:Src/mc_tasks.c **** 
 243:Src/mc_tasks.c ****   MC_BG_Perf_Measure_Stop(&PerfTraces, MEASURE_TSK_MediumFrequencyTaskM1);
 504              		.loc 3 243 3
 505 0030 0121     		movs	r1, #1
 506 0032 2848     		ldr	r0, .L22+8
 507 0034 FFF7FEFF 		bl	MC_BG_Perf_Measure_Stop
 244:Src/mc_tasks.c ****       /* Applicative hook at end of Medium Frequency for Motor 1 */
ARM GAS  /tmp/ccXaLNW9.s 			page 28


 245:Src/mc_tasks.c ****       MC_APP_PostMediumFrequencyHook_M1();
 508              		.loc 3 245 7
 509 0038 FFF7FEFF 		bl	MC_APP_PostMediumFrequencyHook_M1
 246:Src/mc_tasks.c **** 
 247:Src/mc_tasks.c ****       MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTr
 510              		.loc 3 247 47
 511 003c 264B     		ldr	r3, .L22+12
 512 003e 1B68     		ldr	r3, [r3]
 513              		.loc 3 247 63
 514 0040 9B68     		ldr	r3, [r3, #8]
 515              		.loc 3 247 33
 516 0042 254A     		ldr	r2, .L22+12
 517 0044 1268     		ldr	r2, [r2]
 518 0046 2549     		ldr	r1, .L22+16
 519 0048 1046     		mov	r0, r2
 520 004a 9847     		blx	r3
 521              	.LVL0:
 522 004c 0346     		mov	r3, r0
 523              		.loc 3 247 31
 524 004e 224A     		ldr	r2, .L22+12
 525 0050 5360     		str	r3, [r2, #4]
 248:Src/mc_tasks.c ****                                                                                 &MCP_Over_UartA.rxL
 249:Src/mc_tasks.c ****       if ( 0U == MCP_Over_UartA.rxBuffer)
 526              		.loc 3 249 32
 527 0052 214B     		ldr	r3, .L22+12
 528 0054 5B68     		ldr	r3, [r3, #4]
 529              		.loc 3 249 10
 530 0056 002B     		cmp	r3, #0
 531 0058 1BD0     		beq	.L19
 250:Src/mc_tasks.c ****       {
 251:Src/mc_tasks.c ****         /* Nothing to do */
 252:Src/mc_tasks.c ****       }
 253:Src/mc_tasks.c ****       else
 254:Src/mc_tasks.c ****       {
 255:Src/mc_tasks.c ****         /* Synchronous answer */
 256:Src/mc_tasks.c ****         if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 532              		.loc 3 256 33
 533 005a 1F4B     		ldr	r3, .L22+12
 534 005c 1B68     		ldr	r3, [r3]
 535              		.loc 3 256 49
 536 005e 1B68     		ldr	r3, [r3]
 537              		.loc 3 256 19
 538 0060 1D4A     		ldr	r2, .L22+12
 539 0062 1068     		ldr	r0, [r2]
 540 0064 0A22     		movs	r2, #10
 541 0066 1E49     		ldr	r1, .L22+20
 542 0068 9847     		blx	r3
 543              	.LVL1:
 544 006a 0346     		mov	r3, r0
 545              		.loc 3 256 16
 546 006c 83F00103 		eor	r3, r3, #1
 547 0070 DBB2     		uxtb	r3, r3
 548              		.loc 3 256 12
 549 0072 002B     		cmp	r3, #0
 550 0074 0DD1     		bne	.L19
 257:Src/mc_tasks.c ****                                                      (void **) &MCP_Over_UartA.txBuffer, //cstat !M
 258:Src/mc_tasks.c ****                                                      MCTL_SYNC))
ARM GAS  /tmp/ccXaLNW9.s 			page 29


 259:Src/mc_tasks.c ****         {
 260:Src/mc_tasks.c ****           /* No buffer available to build the answer ... should not occur */
 261:Src/mc_tasks.c ****         }
 262:Src/mc_tasks.c ****         else
 263:Src/mc_tasks.c ****         {
 264:Src/mc_tasks.c ****           MCP_ReceivedPacket(&MCP_Over_UartA);
 551              		.loc 3 264 11
 552 0076 1848     		ldr	r0, .L22+12
 553 0078 FFF7FEFF 		bl	MCP_ReceivedPacket
 265:Src/mc_tasks.c ****           MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_Uart
 554              		.loc 3 265 25
 555 007c 164B     		ldr	r3, .L22+12
 556 007e 1B68     		ldr	r3, [r3]
 557              		.loc 3 265 41
 558 0080 5C68     		ldr	r4, [r3, #4]
 559              		.loc 3 265 11
 560 0082 154B     		ldr	r3, .L22+12
 561 0084 1868     		ldr	r0, [r3]
 562              		.loc 3 265 101
 563 0086 144B     		ldr	r3, .L22+12
 564 0088 9968     		ldr	r1, [r3, #8]
 565              		.loc 3 265 11
 566 008a 134B     		ldr	r3, .L22+12
 567 008c DA89     		ldrh	r2, [r3, #14]
 568 008e 0A23     		movs	r3, #10
 569 0090 A047     		blx	r4
 570              	.LVL2:
 571              	.L19:
 266:Src/mc_tasks.c ****                                                       MCP_Over_UartA.txLength, MCTL_SYNC);
 267:Src/mc_tasks.c ****           /* No buffer available to build the answer ... should not occur */
 268:Src/mc_tasks.c ****         }
 269:Src/mc_tasks.c ****       }
 270:Src/mc_tasks.c **** 
 271:Src/mc_tasks.c ****       /* USER CODE BEGIN MC_Scheduler 1 */
 272:Src/mc_tasks.c **** 
 273:Src/mc_tasks.c ****       /* USER CODE END MC_Scheduler 1 */
 274:Src/mc_tasks.c **** 
 275:Src/mc_tasks.c ****       hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 572              		.loc 3 275 24
 573 0092 0F4B     		ldr	r3, .L22+4
 574 0094 0122     		movs	r2, #1
 575 0096 1A80     		strh	r2, [r3]	@ movhi
 576              	.L18:
 276:Src/mc_tasks.c ****     }
 277:Src/mc_tasks.c ****     if(hBootCapDelayCounterM1 > 0U)
 577              		.loc 3 277 31
 578 0098 124B     		ldr	r3, .L22+24
 579 009a 1B88     		ldrh	r3, [r3]	@ movhi
 580 009c 9BB2     		uxth	r3, r3
 581              		.loc 3 277 7
 582 009e 002B     		cmp	r3, #0
 583 00a0 06D0     		beq	.L20
 278:Src/mc_tasks.c ****     {
 279:Src/mc_tasks.c ****       hBootCapDelayCounterM1--;
 584              		.loc 3 279 29
 585 00a2 104B     		ldr	r3, .L22+24
 586 00a4 1B88     		ldrh	r3, [r3]	@ movhi
ARM GAS  /tmp/ccXaLNW9.s 			page 30


 587 00a6 9BB2     		uxth	r3, r3
 588 00a8 013B     		subs	r3, r3, #1
 589 00aa 9AB2     		uxth	r2, r3
 590 00ac 0D4B     		ldr	r3, .L22+24
 591 00ae 1A80     		strh	r2, [r3]	@ movhi
 592              	.L20:
 280:Src/mc_tasks.c ****     }
 281:Src/mc_tasks.c ****     else
 282:Src/mc_tasks.c ****     {
 283:Src/mc_tasks.c ****       /* Nothing to do */
 284:Src/mc_tasks.c ****     }
 285:Src/mc_tasks.c ****     if(hStopPermanencyCounterM1 > 0U)
 593              		.loc 3 285 33
 594 00b0 0D4B     		ldr	r3, .L22+28
 595 00b2 1B88     		ldrh	r3, [r3]	@ movhi
 596 00b4 9BB2     		uxth	r3, r3
 597              		.loc 3 285 7
 598 00b6 002B     		cmp	r3, #0
 599 00b8 06D0     		beq	.L21
 286:Src/mc_tasks.c ****     {
 287:Src/mc_tasks.c ****       hStopPermanencyCounterM1--;
 600              		.loc 3 287 31
 601 00ba 0B4B     		ldr	r3, .L22+28
 602 00bc 1B88     		ldrh	r3, [r3]	@ movhi
 603 00be 9BB2     		uxth	r3, r3
 604 00c0 013B     		subs	r3, r3, #1
 605 00c2 9AB2     		uxth	r2, r3
 606 00c4 084B     		ldr	r3, .L22+28
 607 00c6 1A80     		strh	r2, [r3]	@ movhi
 608              	.L21:
 288:Src/mc_tasks.c ****     }
 289:Src/mc_tasks.c ****     else
 290:Src/mc_tasks.c ****     {
 291:Src/mc_tasks.c ****       /* Nothing to do */
 292:Src/mc_tasks.c ****     }
 293:Src/mc_tasks.c **** 
 294:Src/mc_tasks.c ****   /* USER CODE BEGIN MC_Scheduler 2 */
 295:Src/mc_tasks.c **** 
 296:Src/mc_tasks.c ****   /* USER CODE END MC_Scheduler 2 */
 297:Src/mc_tasks.c ****   }
 298:Src/mc_tasks.c **** }
 609              		.loc 3 298 1
 610 00c8 00BF     		nop
 611 00ca 98BD     		pop	{r3, r4, r7, pc}
 612              	.L23:
 613              		.align	2
 614              	.L22:
 615 00cc 00000000 		.word	bMCBootCompleted
 616 00d0 00000000 		.word	hMFTaskCounterM1
 617 00d4 00000000 		.word	PerfTraces
 618 00d8 00000000 		.word	MCP_Over_UartA
 619 00dc 0C000000 		.word	MCP_Over_UartA+12
 620 00e0 08000000 		.word	MCP_Over_UartA+8
 621 00e4 00000000 		.word	hBootCapDelayCounterM1
 622 00e8 00000000 		.word	hStopPermanencyCounterM1
 623              		.cfi_endproc
 624              	.LFE1874:
ARM GAS  /tmp/ccXaLNW9.s 			page 31


 626              		.section	.text.TSK_SetChargeBootCapDelayM1,"ax",%progbits
 627              		.align	1
 628              		.weak	TSK_SetChargeBootCapDelayM1
 629              		.syntax unified
 630              		.thumb
 631              		.thumb_func
 632              		.fpu fpv4-sp-d16
 634              	TSK_SetChargeBootCapDelayM1:
 635              	.LFB1875:
 299:Src/mc_tasks.c **** 
 300:Src/mc_tasks.c **** /**
 301:Src/mc_tasks.c ****   * @brief  It set a counter intended to be used for counting the delay required
 302:Src/mc_tasks.c ****   *         for drivers boot capacitors charging of motor 1.
 303:Src/mc_tasks.c ****   * @param  hTickCount number of ticks to be counted.
 304:Src/mc_tasks.c ****   * @retval void
 305:Src/mc_tasks.c ****   */
 306:Src/mc_tasks.c **** __weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
 307:Src/mc_tasks.c **** {
 636              		.loc 3 307 1
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 8
 639              		@ frame_needed = 1, uses_anonymous_args = 0
 640              		@ link register save eliminated.
 641 0000 80B4     		push	{r7}
 642              	.LCFI24:
 643              		.cfi_def_cfa_offset 4
 644              		.cfi_offset 7, -4
 645 0002 83B0     		sub	sp, sp, #12
 646              	.LCFI25:
 647              		.cfi_def_cfa_offset 16
 648 0004 00AF     		add	r7, sp, #0
 649              	.LCFI26:
 650              		.cfi_def_cfa_register 7
 651 0006 0346     		mov	r3, r0
 652 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 308:Src/mc_tasks.c ****    hBootCapDelayCounterM1 = hTickCount;
 653              		.loc 3 308 27
 654 000a 044A     		ldr	r2, .L25
 655 000c FB88     		ldrh	r3, [r7, #6]	@ movhi
 656 000e 1380     		strh	r3, [r2]	@ movhi
 309:Src/mc_tasks.c **** }
 657              		.loc 3 309 1
 658 0010 00BF     		nop
 659 0012 0C37     		adds	r7, r7, #12
 660              	.LCFI27:
 661              		.cfi_def_cfa_offset 4
 662 0014 BD46     		mov	sp, r7
 663              	.LCFI28:
 664              		.cfi_def_cfa_register 13
 665              		@ sp needed
 666 0016 5DF8047B 		ldr	r7, [sp], #4
 667              	.LCFI29:
 668              		.cfi_restore 7
 669              		.cfi_def_cfa_offset 0
 670 001a 7047     		bx	lr
 671              	.L26:
 672              		.align	2
ARM GAS  /tmp/ccXaLNW9.s 			page 32


 673              	.L25:
 674 001c 00000000 		.word	hBootCapDelayCounterM1
 675              		.cfi_endproc
 676              	.LFE1875:
 678              		.section	.text.TSK_ChargeBootCapDelayHasElapsedM1,"ax",%progbits
 679              		.align	1
 680              		.weak	TSK_ChargeBootCapDelayHasElapsedM1
 681              		.syntax unified
 682              		.thumb
 683              		.thumb_func
 684              		.fpu fpv4-sp-d16
 686              	TSK_ChargeBootCapDelayHasElapsedM1:
 687              	.LFB1876:
 310:Src/mc_tasks.c **** 
 311:Src/mc_tasks.c **** /**
 312:Src/mc_tasks.c ****   * @brief  Use this function to know whether the time required to charge boot
 313:Src/mc_tasks.c ****   *         capacitors of motor 1 has elapsed.
 314:Src/mc_tasks.c ****   * @param  none
 315:Src/mc_tasks.c ****   * @retval bool true if time has elapsed, false otherwise.
 316:Src/mc_tasks.c ****   */
 317:Src/mc_tasks.c **** __weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
 318:Src/mc_tasks.c **** {
 688              		.loc 3 318 1
 689              		.cfi_startproc
 690              		@ args = 0, pretend = 0, frame = 8
 691              		@ frame_needed = 1, uses_anonymous_args = 0
 692              		@ link register save eliminated.
 693 0000 80B4     		push	{r7}
 694              	.LCFI30:
 695              		.cfi_def_cfa_offset 4
 696              		.cfi_offset 7, -4
 697 0002 83B0     		sub	sp, sp, #12
 698              	.LCFI31:
 699              		.cfi_def_cfa_offset 16
 700 0004 00AF     		add	r7, sp, #0
 701              	.LCFI32:
 702              		.cfi_def_cfa_register 7
 319:Src/mc_tasks.c ****   bool retVal = false;
 703              		.loc 3 319 8
 704 0006 0023     		movs	r3, #0
 705 0008 FB71     		strb	r3, [r7, #7]
 320:Src/mc_tasks.c ****   if (((uint16_t)0) == hBootCapDelayCounterM1)
 706              		.loc 3 320 21
 707 000a 074B     		ldr	r3, .L30
 708 000c 1B88     		ldrh	r3, [r3]	@ movhi
 709 000e 9BB2     		uxth	r3, r3
 710              		.loc 3 320 6
 711 0010 002B     		cmp	r3, #0
 712 0012 01D1     		bne	.L28
 321:Src/mc_tasks.c ****   {
 322:Src/mc_tasks.c ****     retVal = true;
 713              		.loc 3 322 12
 714 0014 0123     		movs	r3, #1
 715 0016 FB71     		strb	r3, [r7, #7]
 716              	.L28:
 323:Src/mc_tasks.c ****   }
 324:Src/mc_tasks.c ****   return (retVal);
ARM GAS  /tmp/ccXaLNW9.s 			page 33


 717              		.loc 3 324 10
 718 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 325:Src/mc_tasks.c **** }
 719              		.loc 3 325 1
 720 001a 1846     		mov	r0, r3
 721 001c 0C37     		adds	r7, r7, #12
 722              	.LCFI33:
 723              		.cfi_def_cfa_offset 4
 724 001e BD46     		mov	sp, r7
 725              	.LCFI34:
 726              		.cfi_def_cfa_register 13
 727              		@ sp needed
 728 0020 5DF8047B 		ldr	r7, [sp], #4
 729              	.LCFI35:
 730              		.cfi_restore 7
 731              		.cfi_def_cfa_offset 0
 732 0024 7047     		bx	lr
 733              	.L31:
 734 0026 00BF     		.align	2
 735              	.L30:
 736 0028 00000000 		.word	hBootCapDelayCounterM1
 737              		.cfi_endproc
 738              	.LFE1876:
 740              		.section	.text.TSK_SetStopPermanencyTimeM1,"ax",%progbits
 741              		.align	1
 742              		.weak	TSK_SetStopPermanencyTimeM1
 743              		.syntax unified
 744              		.thumb
 745              		.thumb_func
 746              		.fpu fpv4-sp-d16
 748              	TSK_SetStopPermanencyTimeM1:
 749              	.LFB1877:
 326:Src/mc_tasks.c **** 
 327:Src/mc_tasks.c **** /**
 328:Src/mc_tasks.c ****   * @brief  It set a counter intended to be used for counting the permanency
 329:Src/mc_tasks.c ****   *         time in STOP state of motor 1.
 330:Src/mc_tasks.c ****   * @param  hTickCount number of ticks to be counted.
 331:Src/mc_tasks.c ****   * @retval void
 332:Src/mc_tasks.c ****   */
 333:Src/mc_tasks.c **** __weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
 334:Src/mc_tasks.c **** {
 750              		.loc 3 334 1
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 8
 753              		@ frame_needed = 1, uses_anonymous_args = 0
 754              		@ link register save eliminated.
 755 0000 80B4     		push	{r7}
 756              	.LCFI36:
 757              		.cfi_def_cfa_offset 4
 758              		.cfi_offset 7, -4
 759 0002 83B0     		sub	sp, sp, #12
 760              	.LCFI37:
 761              		.cfi_def_cfa_offset 16
 762 0004 00AF     		add	r7, sp, #0
 763              	.LCFI38:
 764              		.cfi_def_cfa_register 7
 765 0006 0346     		mov	r3, r0
ARM GAS  /tmp/ccXaLNW9.s 			page 34


 766 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 335:Src/mc_tasks.c ****   hStopPermanencyCounterM1 = hTickCount;
 767              		.loc 3 335 28
 768 000a 044A     		ldr	r2, .L33
 769 000c FB88     		ldrh	r3, [r7, #6]	@ movhi
 770 000e 1380     		strh	r3, [r2]	@ movhi
 336:Src/mc_tasks.c **** }
 771              		.loc 3 336 1
 772 0010 00BF     		nop
 773 0012 0C37     		adds	r7, r7, #12
 774              	.LCFI39:
 775              		.cfi_def_cfa_offset 4
 776 0014 BD46     		mov	sp, r7
 777              	.LCFI40:
 778              		.cfi_def_cfa_register 13
 779              		@ sp needed
 780 0016 5DF8047B 		ldr	r7, [sp], #4
 781              	.LCFI41:
 782              		.cfi_restore 7
 783              		.cfi_def_cfa_offset 0
 784 001a 7047     		bx	lr
 785              	.L34:
 786              		.align	2
 787              	.L33:
 788 001c 00000000 		.word	hStopPermanencyCounterM1
 789              		.cfi_endproc
 790              	.LFE1877:
 792              		.section	.text.TSK_StopPermanencyTimeHasElapsedM1,"ax",%progbits
 793              		.align	1
 794              		.weak	TSK_StopPermanencyTimeHasElapsedM1
 795              		.syntax unified
 796              		.thumb
 797              		.thumb_func
 798              		.fpu fpv4-sp-d16
 800              	TSK_StopPermanencyTimeHasElapsedM1:
 801              	.LFB1878:
 337:Src/mc_tasks.c **** 
 338:Src/mc_tasks.c **** /**
 339:Src/mc_tasks.c ****   * @brief  Use this function to know whether the permanency time in STOP state
 340:Src/mc_tasks.c ****   *         of motor 1 has elapsed.
 341:Src/mc_tasks.c ****   * @param  none
 342:Src/mc_tasks.c ****   * @retval bool true if time is elapsed, false otherwise.
 343:Src/mc_tasks.c ****   */
 344:Src/mc_tasks.c **** __weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
 345:Src/mc_tasks.c **** {
 802              		.loc 3 345 1
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 8
 805              		@ frame_needed = 1, uses_anonymous_args = 0
 806              		@ link register save eliminated.
 807 0000 80B4     		push	{r7}
 808              	.LCFI42:
 809              		.cfi_def_cfa_offset 4
 810              		.cfi_offset 7, -4
 811 0002 83B0     		sub	sp, sp, #12
 812              	.LCFI43:
 813              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccXaLNW9.s 			page 35


 814 0004 00AF     		add	r7, sp, #0
 815              	.LCFI44:
 816              		.cfi_def_cfa_register 7
 346:Src/mc_tasks.c ****   bool retVal = false;
 817              		.loc 3 346 8
 818 0006 0023     		movs	r3, #0
 819 0008 FB71     		strb	r3, [r7, #7]
 347:Src/mc_tasks.c ****   if (((uint16_t)0) == hStopPermanencyCounterM1)
 820              		.loc 3 347 21
 821 000a 074B     		ldr	r3, .L38
 822 000c 1B88     		ldrh	r3, [r3]	@ movhi
 823 000e 9BB2     		uxth	r3, r3
 824              		.loc 3 347 6
 825 0010 002B     		cmp	r3, #0
 826 0012 01D1     		bne	.L36
 348:Src/mc_tasks.c ****   {
 349:Src/mc_tasks.c ****     retVal = true;
 827              		.loc 3 349 12
 828 0014 0123     		movs	r3, #1
 829 0016 FB71     		strb	r3, [r7, #7]
 830              	.L36:
 350:Src/mc_tasks.c ****   }
 351:Src/mc_tasks.c ****   return (retVal);
 831              		.loc 3 351 10
 832 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 352:Src/mc_tasks.c **** }
 833              		.loc 3 352 1
 834 001a 1846     		mov	r0, r3
 835 001c 0C37     		adds	r7, r7, #12
 836              	.LCFI45:
 837              		.cfi_def_cfa_offset 4
 838 001e BD46     		mov	sp, r7
 839              	.LCFI46:
 840              		.cfi_def_cfa_register 13
 841              		@ sp needed
 842 0020 5DF8047B 		ldr	r7, [sp], #4
 843              	.LCFI47:
 844              		.cfi_restore 7
 845              		.cfi_def_cfa_offset 0
 846 0024 7047     		bx	lr
 847              	.L39:
 848 0026 00BF     		.align	2
 849              	.L38:
 850 0028 00000000 		.word	hStopPermanencyCounterM1
 851              		.cfi_endproc
 852              	.LFE1878:
 854              		.section	.text.TSK_HighFrequencyTask,"ax",%progbits
 855              		.align	1
 856              		.weak	TSK_HighFrequencyTask
 857              		.syntax unified
 858              		.thumb
 859              		.thumb_func
 860              		.fpu fpv4-sp-d16
 862              	TSK_HighFrequencyTask:
 863              	.LFB1879:
 353:Src/mc_tasks.c **** 
 354:Src/mc_tasks.c **** #if defined (CCMRAM)
ARM GAS  /tmp/ccXaLNW9.s 			page 36


 355:Src/mc_tasks.c **** #if defined (__ICCARM__)
 356:Src/mc_tasks.c **** #pragma location = ".ccmram"
 357:Src/mc_tasks.c **** #elif defined (__CC_ARM) || defined(__GNUC__)
 358:Src/mc_tasks.c **** __attribute__((section (".ccmram")))
 359:Src/mc_tasks.c **** #endif
 360:Src/mc_tasks.c **** #endif
 361:Src/mc_tasks.c **** 
 362:Src/mc_tasks.c **** /**
 363:Src/mc_tasks.c ****   * @brief  Executes the Motor Control duties that require a high frequency rate and a precise timi
 364:Src/mc_tasks.c ****   *
 365:Src/mc_tasks.c ****   *  This is mainly the FOC current control loop. It is executed depending on the state of the Moto
 366:Src/mc_tasks.c ****   * subsystem (see the state machine(s)).
 367:Src/mc_tasks.c ****   *
 368:Src/mc_tasks.c ****   * @retval Number of the  motor instance which FOC loop was executed.
 369:Src/mc_tasks.c ****   */
 370:Src/mc_tasks.c **** __weak uint8_t TSK_HighFrequencyTask(void)
 371:Src/mc_tasks.c **** {
 864              		.loc 3 371 1
 865              		.cfi_startproc
 866              		@ args = 0, pretend = 0, frame = 8
 867              		@ frame_needed = 1, uses_anonymous_args = 0
 868 0000 80B5     		push	{r7, lr}
 869              	.LCFI48:
 870              		.cfi_def_cfa_offset 8
 871              		.cfi_offset 7, -8
 872              		.cfi_offset 14, -4
 873 0002 82B0     		sub	sp, sp, #8
 874              	.LCFI49:
 875              		.cfi_def_cfa_offset 16
 876 0004 00AF     		add	r7, sp, #0
 877              	.LCFI50:
 878              		.cfi_def_cfa_register 7
 372:Src/mc_tasks.c ****   uint8_t bMotorNbr;
 373:Src/mc_tasks.c ****   bMotorNbr = 0;
 879              		.loc 3 373 13
 880 0006 0023     		movs	r3, #0
 881 0008 FB71     		strb	r3, [r7, #7]
 374:Src/mc_tasks.c **** 
 375:Src/mc_tasks.c ****   MC_Perf_Measure_Start(&PerfTraces, MEASURE_TSK_HighFrequencyTaskM1);
 882              		.loc 3 375 3
 883 000a 0021     		movs	r1, #0
 884 000c 0848     		ldr	r0, .L42
 885 000e FFF7FEFF 		bl	MC_Perf_Measure_Start
 376:Src/mc_tasks.c ****   /* USER CODE BEGIN HighFrequencyTask 0 */
 377:Src/mc_tasks.c **** 
 378:Src/mc_tasks.c ****   /* USER CODE END HighFrequencyTask 0 */
 379:Src/mc_tasks.c ****   FOC_HighFrequencyTask(bMotorNbr);
 886              		.loc 3 379 3
 887 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 888 0014 1846     		mov	r0, r3
 889 0016 FFF7FEFF 		bl	FOC_HighFrequencyTask
 380:Src/mc_tasks.c **** 
 381:Src/mc_tasks.c ****   /* USER CODE BEGIN HighFrequencyTask 1 */
 382:Src/mc_tasks.c **** 
 383:Src/mc_tasks.c ****   /* USER CODE END HighFrequencyTask 1 */
 384:Src/mc_tasks.c **** 
 385:Src/mc_tasks.c ****   GLOBAL_TIMESTAMP++;
ARM GAS  /tmp/ccXaLNW9.s 			page 37


 890              		.loc 3 385 19
 891 001a 064B     		ldr	r3, .L42+4
 892 001c 1B68     		ldr	r3, [r3]
 893 001e 0133     		adds	r3, r3, #1
 894 0020 044A     		ldr	r2, .L42+4
 895 0022 1360     		str	r3, [r2]
 386:Src/mc_tasks.c ****   if (0U == MCPA_UART_A.Mark)
 387:Src/mc_tasks.c ****   {
 388:Src/mc_tasks.c ****     /* Nothing to do */
 389:Src/mc_tasks.c ****   }
 390:Src/mc_tasks.c ****   else
 391:Src/mc_tasks.c ****   {
 392:Src/mc_tasks.c ****    // MCPA_dataLog (&MCPA_UART_A);
 393:Src/mc_tasks.c ****   }
 394:Src/mc_tasks.c **** 
 395:Src/mc_tasks.c ****  // MC_Perf_Measure_Stop(&PerfTraces, MEASURE_TSK_HighFrequencyTaskM1);
 396:Src/mc_tasks.c ****   return (bMotorNbr);
 896              		.loc 3 396 10
 897 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 397:Src/mc_tasks.c **** 
 398:Src/mc_tasks.c **** }
 898              		.loc 3 398 1
 899 0026 1846     		mov	r0, r3
 900 0028 0837     		adds	r7, r7, #8
 901              	.LCFI51:
 902              		.cfi_def_cfa_offset 8
 903 002a BD46     		mov	sp, r7
 904              	.LCFI52:
 905              		.cfi_def_cfa_register 13
 906              		@ sp needed
 907 002c 80BD     		pop	{r7, pc}
 908              	.L43:
 909 002e 00BF     		.align	2
 910              	.L42:
 911 0030 00000000 		.word	PerfTraces
 912 0034 00000000 		.word	GLOBAL_TIMESTAMP
 913              		.cfi_endproc
 914              	.LFE1879:
 916              		.section	.text.TSK_SafetyTask,"ax",%progbits
 917              		.align	1
 918              		.weak	TSK_SafetyTask
 919              		.syntax unified
 920              		.thumb
 921              		.thumb_func
 922              		.fpu fpv4-sp-d16
 924              	TSK_SafetyTask:
 925              	.LFB1880:
 399:Src/mc_tasks.c **** 
 400:Src/mc_tasks.c **** /**
 401:Src/mc_tasks.c ****   * @brief  Executes safety checks (e.g. bus voltage and temperature) for all drive instances.
 402:Src/mc_tasks.c ****   *
 403:Src/mc_tasks.c ****   * Faults flags are updated here.
 404:Src/mc_tasks.c ****   */
 405:Src/mc_tasks.c **** __weak void TSK_SafetyTask(void)
 406:Src/mc_tasks.c **** {
 926              		.loc 3 406 1
 927              		.cfi_startproc
ARM GAS  /tmp/ccXaLNW9.s 			page 38


 928              		@ args = 0, pretend = 0, frame = 0
 929              		@ frame_needed = 1, uses_anonymous_args = 0
 930 0000 80B5     		push	{r7, lr}
 931              	.LCFI53:
 932              		.cfi_def_cfa_offset 8
 933              		.cfi_offset 7, -8
 934              		.cfi_offset 14, -4
 935 0002 00AF     		add	r7, sp, #0
 936              	.LCFI54:
 937              		.cfi_def_cfa_register 7
 407:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask 0 */
 408:Src/mc_tasks.c **** 
 409:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask 0 */
 410:Src/mc_tasks.c ****   if (1U == bMCBootCompleted)
 938              		.loc 3 410 10
 939 0004 044B     		ldr	r3, .L47
 940 0006 1B78     		ldrb	r3, [r3]
 941 0008 DBB2     		uxtb	r3, r3
 942              		.loc 3 410 6
 943 000a 012B     		cmp	r3, #1
 944 000c 02D1     		bne	.L46
 411:Src/mc_tasks.c ****   {
 412:Src/mc_tasks.c ****     SCC_CheckOC_RL(&SCC);
 945              		.loc 3 412 5
 946 000e 0348     		ldr	r0, .L47+4
 947 0010 FFF7FEFF 		bl	SCC_CheckOC_RL
 948              	.L46:
 413:Src/mc_tasks.c ****    // TSK_SafetyTask_PWMOFF(M1);
 414:Src/mc_tasks.c ****     /* User conversion execution */
 415:Src/mc_tasks.c **** //    RCM_ExecUserConv();
 416:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask 1 */
 417:Src/mc_tasks.c **** 
 418:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask 1 */
 419:Src/mc_tasks.c ****   }
 420:Src/mc_tasks.c ****   else
 421:Src/mc_tasks.c ****   {
 422:Src/mc_tasks.c ****     /* Nothing to do */
 423:Src/mc_tasks.c ****   }
 424:Src/mc_tasks.c **** }
 949              		.loc 3 424 1
 950 0014 00BF     		nop
 951 0016 80BD     		pop	{r7, pc}
 952              	.L48:
 953              		.align	2
 954              	.L47:
 955 0018 00000000 		.word	bMCBootCompleted
 956 001c 00000000 		.word	SCC
 957              		.cfi_endproc
 958              	.LFE1880:
 960              		.section	.text.TSK_SafetyTask_PWMOFF,"ax",%progbits
 961              		.align	1
 962              		.weak	TSK_SafetyTask_PWMOFF
 963              		.syntax unified
 964              		.thumb
 965              		.thumb_func
 966              		.fpu fpv4-sp-d16
 968              	TSK_SafetyTask_PWMOFF:
ARM GAS  /tmp/ccXaLNW9.s 			page 39


 969              	.LFB1881:
 425:Src/mc_tasks.c **** 
 426:Src/mc_tasks.c **** /**
 427:Src/mc_tasks.c ****   * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
 428:Src/mc_tasks.c ****   * @param  bMotor Motor reference number defined
 429:Src/mc_tasks.c ****   *         \link Motors_reference_number here \endlink.
 430:Src/mc_tasks.c ****   */
 431:Src/mc_tasks.c **** __weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
 432:Src/mc_tasks.c **** {
 970              		.loc 3 432 1
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 24
 973              		@ frame_needed = 1, uses_anonymous_args = 0
 974 0000 90B5     		push	{r4, r7, lr}
 975              	.LCFI55:
 976              		.cfi_def_cfa_offset 12
 977              		.cfi_offset 4, -12
 978              		.cfi_offset 7, -8
 979              		.cfi_offset 14, -4
 980 0002 87B0     		sub	sp, sp, #28
 981              	.LCFI56:
 982              		.cfi_def_cfa_offset 40
 983 0004 00AF     		add	r7, sp, #0
 984              	.LCFI57:
 985              		.cfi_def_cfa_register 7
 986 0006 0346     		mov	r3, r0
 987 0008 FB71     		strb	r3, [r7, #7]
 433:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 0 */
 434:Src/mc_tasks.c **** 
 435:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
 436:Src/mc_tasks.c ****   uint16_t CodeReturn = MC_NO_ERROR;
 988              		.loc 3 436 12
 989 000a 0023     		movs	r3, #0
 990 000c FB82     		strh	r3, [r7, #22]	@ movhi
 437:Src/mc_tasks.c ****   uint8_t lbmotor = M1;
 991              		.loc 3 437 11
 992 000e 0023     		movs	r3, #0
 993 0010 7B75     		strb	r3, [r7, #21]
 438:Src/mc_tasks.c ****   const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
 994              		.loc 3 438 18
 995 0012 0E23     		movs	r3, #14
 996 0014 BB81     		strh	r3, [r7, #12]	@ movhi
 439:Src/mc_tasks.c ****   /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 440:Src/mc_tasks.c ****   if (M1 == bMotor)
 997              		.loc 3 440 6
 998 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 999 0018 002B     		cmp	r3, #0
 1000 001a 19D1     		bne	.L50
 1001              	.LBB3:
 441:Src/mc_tasks.c ****   {
 442:Src/mc_tasks.c ****     uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 1002              		.loc 3 442 27
 1003 001c 3C48     		ldr	r0, .L55
 1004 001e FFF7FEFF 		bl	RCM_ExecRegularConv
 1005 0022 0346     		mov	r3, r0
 1006 0024 7B82     		strh	r3, [r7, #18]	@ movhi
 443:Src/mc_tasks.c ****     CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
ARM GAS  /tmp/ccXaLNW9.s 			page 40


 1007              		.loc 3 443 26
 1008 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1009 0028 5B00     		lsls	r3, r3, #1
 1010 002a 07F11802 		add	r2, r7, #24
 1011 002e 1344     		add	r3, r3, r2
 1012 0030 33F80C4C 		ldrh	r4, [r3, #-12]
 1013              		.loc 3 443 37
 1014 0034 7B8A     		ldrh	r3, [r7, #18]
 1015 0036 1946     		mov	r1, r3
 1016 0038 3648     		ldr	r0, .L55+4
 1017 003a FFF7FEFF 		bl	NTC_CalcAvTemp
 1018 003e 0346     		mov	r3, r0
 1019              		.loc 3 443 35
 1020 0040 2340     		ands	r3, r3, r4
 1021 0042 9BB2     		uxth	r3, r3
 1022              		.loc 3 443 16
 1023 0044 1AB2     		sxth	r2, r3
 1024 0046 B7F91630 		ldrsh	r3, [r7, #22]
 1025 004a 1343     		orrs	r3, r3, r2
 1026 004c 1BB2     		sxth	r3, r3
 1027 004e FB82     		strh	r3, [r7, #22]	@ movhi
 1028              	.L50:
 1029              	.LBE3:
 444:Src/mc_tasks.c ****   }
 445:Src/mc_tasks.c ****   else
 446:Src/mc_tasks.c ****   {
 447:Src/mc_tasks.c ****     /* Nothing to do */
 448:Src/mc_tasks.c ****   }
 449:Src/mc_tasks.c **** 
 450:Src/mc_tasks.c **** /* Due to warning array subscript 1 is above array bounds of PWMC_Handle_t *[1] [-Warray-bounds] */
 451:Src/mc_tasks.c ****    CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OV
 1030              		.loc 3 451 18
 1031 0050 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 1032 0052 314A     		ldr	r2, .L55+8
 1033 0054 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1034 0058 1846     		mov	r0, r3
 1035 005a FFF7FEFF 		bl	PWMC_IsFaultOccurred
 1036 005e 0346     		mov	r3, r0
 1037 0060 1A46     		mov	r2, r3
 1038              		.loc 3 451 15
 1039 0062 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 1040 0064 1343     		orrs	r3, r3, r2
 1041 0066 FB82     		strh	r3, [r7, #22]	@ movhi
 452:Src/mc_tasks.c ****                                                      (for STM32F30x can return MC_OVER_VOLT in case
 453:Src/mc_tasks.c **** 
 454:Src/mc_tasks.c ****   if (M1 == bMotor)
 1042              		.loc 3 454 6
 1043 0068 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1044 006a 002B     		cmp	r3, #0
 1045 006c 19D1     		bne	.L51
 1046              	.LBB4:
 455:Src/mc_tasks.c ****   {
 456:Src/mc_tasks.c ****     uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 1047              		.loc 3 456 28
 1048 006e 2B48     		ldr	r0, .L55+12
 1049 0070 FFF7FEFF 		bl	RCM_ExecRegularConv
 1050 0074 0346     		mov	r3, r0
ARM GAS  /tmp/ccXaLNW9.s 			page 41


 1051 0076 3B82     		strh	r3, [r7, #16]	@ movhi
 457:Src/mc_tasks.c ****     CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 1052              		.loc 3 457 26
 1053 0078 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1054 007a 5B00     		lsls	r3, r3, #1
 1055 007c 07F11802 		add	r2, r7, #24
 1056 0080 1344     		add	r3, r3, r2
 1057 0082 33F80C4C 		ldrh	r4, [r3, #-12]
 1058              		.loc 3 457 37
 1059 0086 3B8A     		ldrh	r3, [r7, #16]
 1060 0088 1946     		mov	r1, r3
 1061 008a 2548     		ldr	r0, .L55+16
 1062 008c FFF7FEFF 		bl	RVBS_CalcAvVbus
 1063 0090 0346     		mov	r3, r0
 1064              		.loc 3 457 35
 1065 0092 2340     		ands	r3, r3, r4
 1066 0094 9BB2     		uxth	r3, r3
 1067              		.loc 3 457 16
 1068 0096 1AB2     		sxth	r2, r3
 1069 0098 B7F91630 		ldrsh	r3, [r7, #22]
 1070 009c 1343     		orrs	r3, r3, r2
 1071 009e 1BB2     		sxth	r3, r3
 1072 00a0 FB82     		strh	r3, [r7, #22]	@ movhi
 1073              	.L51:
 1074              	.LBE4:
 458:Src/mc_tasks.c ****   }
 459:Src/mc_tasks.c ****   else
 460:Src/mc_tasks.c ****   {
 461:Src/mc_tasks.c ****     /* Nothing to do */
 462:Src/mc_tasks.c ****   }
 463:Src/mc_tasks.c ****   MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 1075              		.loc 3 463 27
 1076 00a2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1077              		.loc 3 463 3
 1078 00a4 2C22     		movs	r2, #44
 1079 00a6 02FB03F3 		mul	r3, r2, r3
 1080 00aa 1E4A     		ldr	r2, .L55+20
 1081 00ac 9818     		adds	r0, r3, r2
 1082 00ae FB8A     		ldrh	r3, [r7, #22]	@ movhi
 1083 00b0 DB43     		mvns	r3, r3
 1084 00b2 9AB2     		uxth	r2, r3
 1085 00b4 FB8A     		ldrh	r3, [r7, #22]
 1086 00b6 1946     		mov	r1, r3
 1087 00b8 FFF7FEFF 		bl	MCI_FaultProcessing
 464:Src/mc_tasks.c **** 
 465:Src/mc_tasks.c ****   if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 1088              		.loc 3 465 29
 1089 00bc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1090              		.loc 3 465 7
 1091 00be 2C22     		movs	r2, #44
 1092 00c0 02FB03F3 		mul	r3, r2, r3
 1093 00c4 174A     		ldr	r2, .L55+20
 1094 00c6 1344     		add	r3, r3, r2
 1095 00c8 1846     		mov	r0, r3
 1096 00ca FFF7FEFF 		bl	MCI_GetFaultState
 1097 00ce 0346     		mov	r3, r0
 1098              		.loc 3 465 6
ARM GAS  /tmp/ccXaLNW9.s 			page 42


 1099 00d0 002B     		cmp	r3, #0
 1100 00d2 18D0     		beq	.L54
 466:Src/mc_tasks.c ****   {
 467:Src/mc_tasks.c ****       SCC_Stop(&SCC);
 1101              		.loc 3 467 7
 1102 00d4 1448     		ldr	r0, .L55+24
 1103 00d6 FFF7FEFF 		bl	SCC_Stop
 468:Src/mc_tasks.c ****       OTT_Stop(&OTT);
 1104              		.loc 3 468 7
 1105 00da 1448     		ldr	r0, .L55+28
 1106 00dc FFF7FEFF 		bl	OTT_Stop
 469:Src/mc_tasks.c ****     PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 1107              		.loc 3 469 5
 1108 00e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1109 00e2 0D4A     		ldr	r2, .L55+8
 1110 00e4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1111 00e8 1846     		mov	r0, r3
 1112 00ea FFF7FEFF 		bl	PWMC_SwitchOffPWM
 470:Src/mc_tasks.c ****     if (MCPA_UART_A.Mark != 0U)
 1113              		.loc 3 470 20
 1114 00ee 104B     		ldr	r3, .L55+32
 1115 00f0 93F82930 		ldrb	r3, [r3, #41]	@ zero_extendqisi2
 1116              		.loc 3 470 8
 1117 00f4 002B     		cmp	r3, #0
 1118 00f6 02D0     		beq	.L53
 471:Src/mc_tasks.c ****     {
 472:Src/mc_tasks.c ****       MCPA_flushDataLog (&MCPA_UART_A);
 1119              		.loc 3 472 7
 1120 00f8 0D48     		ldr	r0, .L55+32
 1121 00fa FFF7FEFF 		bl	MCPA_flushDataLog
 1122              	.L53:
 473:Src/mc_tasks.c ****     }
 474:Src/mc_tasks.c ****     else
 475:Src/mc_tasks.c ****     {
 476:Src/mc_tasks.c ****       /* Nothing to do */
 477:Src/mc_tasks.c ****     }
 478:Src/mc_tasks.c ****     FOC_Clear(bMotor);
 1123              		.loc 3 478 5
 1124 00fe FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1125 0100 1846     		mov	r0, r3
 1126 0102 FFF7FEFF 		bl	FOC_Clear
 1127              	.L54:
 479:Src/mc_tasks.c ****     /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */
 480:Src/mc_tasks.c **** 
 481:Src/mc_tasks.c ****     /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
 482:Src/mc_tasks.c ****   }
 483:Src/mc_tasks.c ****   else
 484:Src/mc_tasks.c ****   {
 485:Src/mc_tasks.c ****     /* No errors */
 486:Src/mc_tasks.c ****   }
 487:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */
 488:Src/mc_tasks.c **** 
 489:Src/mc_tasks.c ****   /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
 490:Src/mc_tasks.c **** }
 1128              		.loc 3 490 1
 1129 0106 00BF     		nop
 1130 0108 1C37     		adds	r7, r7, #28
ARM GAS  /tmp/ccXaLNW9.s 			page 43


 1131              	.LCFI58:
 1132              		.cfi_def_cfa_offset 12
 1133 010a BD46     		mov	sp, r7
 1134              	.LCFI59:
 1135              		.cfi_def_cfa_register 13
 1136              		@ sp needed
 1137 010c 90BD     		pop	{r4, r7, pc}
 1138              	.L56:
 1139 010e 00BF     		.align	2
 1140              	.L55:
 1141 0110 00000000 		.word	TempRegConv_M1
 1142 0114 00000000 		.word	TempSensor_M1
 1143 0118 00000000 		.word	pwmcHandle
 1144 011c 00000000 		.word	VbusRegConv_M1
 1145 0120 00000000 		.word	BusVoltageSensor_M1
 1146 0124 00000000 		.word	Mci
 1147 0128 00000000 		.word	SCC
 1148 012c 00000000 		.word	OTT
 1149 0130 00000000 		.word	MCPA_UART_A
 1150              		.cfi_endproc
 1151              	.LFE1881:
 1153              		.section	.text.TSK_HardwareFaultTask,"ax",%progbits
 1154              		.align	1
 1155              		.weak	TSK_HardwareFaultTask
 1156              		.syntax unified
 1157              		.thumb
 1158              		.thumb_func
 1159              		.fpu fpv4-sp-d16
 1161              	TSK_HardwareFaultTask:
 1162              	.LFB1882:
 491:Src/mc_tasks.c **** 
 492:Src/mc_tasks.c **** /**
 493:Src/mc_tasks.c ****   * @brief  Puts the Motor Control subsystem in in safety conditions on a Hard Fault
 494:Src/mc_tasks.c ****   *
 495:Src/mc_tasks.c ****   *  This function is to be executed when a general hardware failure has been detected
 496:Src/mc_tasks.c ****   * by the microcontroller and is used to put the system in safety condition.
 497:Src/mc_tasks.c ****   */
 498:Src/mc_tasks.c **** __weak void TSK_HardwareFaultTask(void)
 499:Src/mc_tasks.c **** {
 1163              		.loc 3 499 1
 1164              		.cfi_startproc
 1165              		@ args = 0, pretend = 0, frame = 0
 1166              		@ frame_needed = 1, uses_anonymous_args = 0
 1167 0000 80B5     		push	{r7, lr}
 1168              	.LCFI60:
 1169              		.cfi_def_cfa_offset 8
 1170              		.cfi_offset 7, -8
 1171              		.cfi_offset 14, -4
 1172 0002 00AF     		add	r7, sp, #0
 1173              	.LCFI61:
 1174              		.cfi_def_cfa_register 7
 500:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_HardwareFaultTask 0 */
 501:Src/mc_tasks.c **** 
 502:Src/mc_tasks.c ****   /* USER CODE END TSK_HardwareFaultTask 0 */
 503:Src/mc_tasks.c ****   SCC_Stop(&SCC);
 1175              		.loc 3 503 3
 1176 0004 0748     		ldr	r0, .L58
ARM GAS  /tmp/ccXaLNW9.s 			page 44


 1177 0006 FFF7FEFF 		bl	SCC_Stop
 504:Src/mc_tasks.c ****   OTT_Stop(&OTT);
 1178              		.loc 3 504 3
 1179 000a 0748     		ldr	r0, .L58+4
 1180 000c FFF7FEFF 		bl	OTT_Stop
 505:Src/mc_tasks.c ****    FOC_Clear(M1);
 1181              		.loc 3 505 4
 1182 0010 0020     		movs	r0, #0
 1183 0012 FFF7FEFF 		bl	FOC_Clear
 506:Src/mc_tasks.c ****   MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 1184              		.loc 3 506 3
 1185 0016 0022     		movs	r2, #0
 1186 0018 8021     		movs	r1, #128
 1187 001a 0448     		ldr	r0, .L58+8
 1188 001c FFF7FEFF 		bl	MCI_FaultProcessing
 507:Src/mc_tasks.c **** 
 508:Src/mc_tasks.c ****   /* USER CODE BEGIN TSK_HardwareFaultTask 1 */
 509:Src/mc_tasks.c **** 
 510:Src/mc_tasks.c ****   /* USER CODE END TSK_HardwareFaultTask 1 */
 511:Src/mc_tasks.c **** }
 1189              		.loc 3 511 1
 1190 0020 00BF     		nop
 1191 0022 80BD     		pop	{r7, pc}
 1192              	.L59:
 1193              		.align	2
 1194              	.L58:
 1195 0024 00000000 		.word	SCC
 1196 0028 00000000 		.word	OTT
 1197 002c 00000000 		.word	Mci
 1198              		.cfi_endproc
 1199              	.LFE1882:
 1201              		.section	.text.startMediumFrequencyTask,"ax",%progbits
 1202              		.align	1
 1203              		.global	startMediumFrequencyTask
 1204              		.syntax unified
 1205              		.thumb
 1206              		.thumb_func
 1207              		.fpu fpv4-sp-d16
 1209              	startMediumFrequencyTask:
 1210              	.LFB1883:
 512:Src/mc_tasks.c **** 
 513:Src/mc_tasks.c **** /* startMediumFrequencyTask function */
 514:Src/mc_tasks.c **** void startMediumFrequencyTask(void const * argument)
 515:Src/mc_tasks.c **** {
 1211              		.loc 3 515 1
 1212              		.cfi_startproc
 1213              		@ args = 0, pretend = 0, frame = 8
 1214              		@ frame_needed = 1, uses_anonymous_args = 0
 1215 0000 80B5     		push	{r7, lr}
 1216              	.LCFI62:
 1217              		.cfi_def_cfa_offset 8
 1218              		.cfi_offset 7, -8
 1219              		.cfi_offset 14, -4
 1220 0002 82B0     		sub	sp, sp, #8
 1221              	.LCFI63:
 1222              		.cfi_def_cfa_offset 16
 1223 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccXaLNW9.s 			page 45


 1224              	.LCFI64:
 1225              		.cfi_def_cfa_register 7
 1226 0006 7860     		str	r0, [r7, #4]
 516:Src/mc_tasks.c ****   /* USER CODE BEGIN MF task 1 */
 517:Src/mc_tasks.c ****   MX_FREERTOS_Init();
 1227              		.loc 3 517 3
 1228 0008 FFF7FEFF 		bl	MX_FREERTOS_Init
 518:Src/mc_tasks.c **** 
 519:Src/mc_tasks.c ****   vTaskDelay(100);
 1229              		.loc 3 519 3
 1230 000c 6420     		movs	r0, #100
 1231 000e FFF7FEFF 		bl	vTaskDelay
 520:Src/mc_tasks.c ****   MC_StartMotorOpenLoop(5000, 0, 30); // Higher voltage and frequency for reliable start
 1232              		.loc 3 520 3
 1233 0012 1E22     		movs	r2, #30
 1234 0014 0021     		movs	r1, #0
 1235 0016 41F28830 		movw	r0, #5000
 1236 001a FFF7FEFF 		bl	MC_StartMotorOpenLoop
 1237              	.L61:
 521:Src/mc_tasks.c **** 
 522:Src/mc_tasks.c ****   /* Infinite loop */
 523:Src/mc_tasks.c ****   for(;;)
 524:Src/mc_tasks.c ****   {
 525:Src/mc_tasks.c ****     /* Delay of 500us */
 526:Src/mc_tasks.c ****     vTaskDelay(1);
 1238              		.loc 3 526 5 discriminator 1
 1239 001e 0120     		movs	r0, #1
 1240 0020 FFF7FEFF 		bl	vTaskDelay
 527:Src/mc_tasks.c **** 
 528:Src/mc_tasks.c ****     /* Buffer is ready by the HW layer to be processed */
 529:Src/mc_tasks.c ****     /* NO DMA interrupt */
 530:Src/mc_tasks.c ****     // if (LL_DMA_IsActiveFlag_TC(DMA_RX_A, DMACH_RX_A))
 531:Src/mc_tasks.c ****     // {
 532:Src/mc_tasks.c ****     //   LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
 533:Src/mc_tasks.c ****     //   ASPEP_HWDataReceivedIT(&aspepOverUartA);
 534:Src/mc_tasks.c ****     // }
 535:Src/mc_tasks.c ****     // else
 536:Src/mc_tasks.c ****     // {
 537:Src/mc_tasks.c ****     //   /* Nothing to do */
 538:Src/mc_tasks.c ****     // }
 539:Src/mc_tasks.c **** 
 540:Src/mc_tasks.c **** 
 541:Src/mc_tasks.c ****                 /* Process packet */
 542:Src/mc_tasks.c ****     
 543:Src/mc_tasks.c ****     MC_RunMotorControlTasks();
 1241              		.loc 3 543 5 discriminator 1
 1242 0024 FFF7FEFF 		bl	MC_RunMotorControlTasks
 526:Src/mc_tasks.c **** 
 1243              		.loc 3 526 5 discriminator 1
 1244 0028 F9E7     		b	.L61
 1245              		.cfi_endproc
 1246              	.LFE1883:
 1248              		.section	.text.StartSafetyTask,"ax",%progbits
 1249              		.align	1
 1250              		.global	StartSafetyTask
 1251              		.syntax unified
 1252              		.thumb
ARM GAS  /tmp/ccXaLNW9.s 			page 46


 1253              		.thumb_func
 1254              		.fpu fpv4-sp-d16
 1256              	StartSafetyTask:
 1257              	.LFB1884:
 544:Src/mc_tasks.c ****   }
 545:Src/mc_tasks.c ****   /* USER CODE END MF task 1 */
 546:Src/mc_tasks.c **** }
 547:Src/mc_tasks.c **** 
 548:Src/mc_tasks.c **** /* startSafetyTask function */
 549:Src/mc_tasks.c **** void StartSafetyTask(void const * argument)
 550:Src/mc_tasks.c **** {
 1258              		.loc 3 550 1
 1259              		.cfi_startproc
 1260              		@ args = 0, pretend = 0, frame = 8
 1261              		@ frame_needed = 1, uses_anonymous_args = 0
 1262 0000 80B5     		push	{r7, lr}
 1263              	.LCFI65:
 1264              		.cfi_def_cfa_offset 8
 1265              		.cfi_offset 7, -8
 1266              		.cfi_offset 14, -4
 1267 0002 82B0     		sub	sp, sp, #8
 1268              	.LCFI66:
 1269              		.cfi_def_cfa_offset 16
 1270 0004 00AF     		add	r7, sp, #0
 1271              	.LCFI67:
 1272              		.cfi_def_cfa_register 7
 1273 0006 7860     		str	r0, [r7, #4]
 1274              	.L63:
 551:Src/mc_tasks.c ****   /* USER CODE BEGIN SF task 1 */
 552:Src/mc_tasks.c ****   /* Infinite loop */
 553:Src/mc_tasks.c ****   for(;;)
 554:Src/mc_tasks.c ****   {
 555:Src/mc_tasks.c ****     /* Delay of 500us */
 556:Src/mc_tasks.c ****     vTaskDelay(1);
 1275              		.loc 3 556 5 discriminator 1
 1276 0008 0120     		movs	r0, #1
 1277 000a FFF7FEFF 		bl	vTaskDelay
 557:Src/mc_tasks.c ****     TSK_SafetyTask();
 1278              		.loc 3 557 5 discriminator 1
 1279 000e FFF7FEFF 		bl	TSK_SafetyTask
 556:Src/mc_tasks.c ****     TSK_SafetyTask();
 1280              		.loc 3 556 5 discriminator 1
 1281 0012 F9E7     		b	.L63
 1282              		.cfi_endproc
 1283              	.LFE1884:
 1285              		.section	.text.UI_HandleStartStopButton_cb,"ax",%progbits
 1286              		.align	1
 1287              		.weak	UI_HandleStartStopButton_cb
 1288              		.syntax unified
 1289              		.thumb
 1290              		.thumb_func
 1291              		.fpu fpv4-sp-d16
 1293              	UI_HandleStartStopButton_cb:
 1294              	.LFB1885:
 558:Src/mc_tasks.c ****   }
 559:Src/mc_tasks.c ****   /* USER CODE END SF task 1 */
 560:Src/mc_tasks.c **** }
ARM GAS  /tmp/ccXaLNW9.s 			page 47


 561:Src/mc_tasks.c **** 
 562:Src/mc_tasks.c **** __weak void UI_HandleStartStopButton_cb (void)
 563:Src/mc_tasks.c **** {
 1295              		.loc 3 563 1
 1296              		.cfi_startproc
 1297              		@ args = 0, pretend = 0, frame = 0
 1298              		@ frame_needed = 1, uses_anonymous_args = 0
 1299 0000 80B5     		push	{r7, lr}
 1300              	.LCFI68:
 1301              		.cfi_def_cfa_offset 8
 1302              		.cfi_offset 7, -8
 1303              		.cfi_offset 14, -4
 1304 0002 00AF     		add	r7, sp, #0
 1305              	.LCFI69:
 1306              		.cfi_def_cfa_register 7
 564:Src/mc_tasks.c **** /* USER CODE BEGIN START_STOP_BTN */
 565:Src/mc_tasks.c ****   if (IDLE == MC_GetSTMStateMotor1())
 1307              		.loc 3 565 15
 1308 0004 FFF7FEFF 		bl	MC_GetSTMStateMotor1
 1309 0008 0346     		mov	r3, r0
 1310              		.loc 3 565 6
 1311 000a 002B     		cmp	r3, #0
 1312 000c 02D1     		bne	.L65
 566:Src/mc_tasks.c ****   {
 567:Src/mc_tasks.c ****     /* Ramp parameters should be tuned for the actual motor */
 568:Src/mc_tasks.c ****     (void)MC_StartMotor1();
 1313              		.loc 3 568 11
 1314 000e FFF7FEFF 		bl	MC_StartMotor1
 569:Src/mc_tasks.c ****   }
 570:Src/mc_tasks.c ****   else
 571:Src/mc_tasks.c ****   {
 572:Src/mc_tasks.c ****     (void)MC_StopMotor1();
 573:Src/mc_tasks.c ****   }
 574:Src/mc_tasks.c **** /* USER CODE END START_STOP_BTN */
 575:Src/mc_tasks.c **** }
 1315              		.loc 3 575 1
 1316 0012 01E0     		b	.L67
 1317              	.L65:
 572:Src/mc_tasks.c ****   }
 1318              		.loc 3 572 11
 1319 0014 FFF7FEFF 		bl	MC_StopMotor1
 1320              	.L67:
 1321              		.loc 3 575 1
 1322 0018 00BF     		nop
 1323 001a 80BD     		pop	{r7, pc}
 1324              		.cfi_endproc
 1325              	.LFE1885:
 1327              		.section	.text.mc_lock_pins,"ax",%progbits
 1328              		.align	1
 1329              		.weak	mc_lock_pins
 1330              		.syntax unified
 1331              		.thumb
 1332              		.thumb_func
 1333              		.fpu fpv4-sp-d16
 1335              	mc_lock_pins:
 1336              	.LFB1886:
 576:Src/mc_tasks.c **** 
ARM GAS  /tmp/ccXaLNW9.s 			page 48


 577:Src/mc_tasks.c ****  /**
 578:Src/mc_tasks.c ****   * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
 579:Src/mc_tasks.c ****   */
 580:Src/mc_tasks.c **** __weak void mc_lock_pins (void)
 581:Src/mc_tasks.c **** {
 1337              		.loc 3 581 1
 1338              		.cfi_startproc
 1339              		@ args = 0, pretend = 0, frame = 0
 1340              		@ frame_needed = 1, uses_anonymous_args = 0
 1341 0000 80B5     		push	{r7, lr}
 1342              	.LCFI70:
 1343              		.cfi_def_cfa_offset 8
 1344              		.cfi_offset 7, -8
 1345              		.cfi_offset 14, -4
 1346 0002 00AF     		add	r7, sp, #0
 1347              	.LCFI71:
 1348              		.cfi_def_cfa_register 7
 582:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
 1349              		.loc 3 582 1
 1350 0004 1021     		movs	r1, #16
 1351 0006 2448     		ldr	r0, .L69
 1352 0008 FFF7FEFF 		bl	LL_GPIO_LockPin
 583:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 1353              		.loc 3 583 1
 1354 000c 0121     		movs	r1, #1
 1355 000e 4FF09040 		mov	r0, #1207959552
 1356 0012 FFF7FEFF 		bl	LL_GPIO_LockPin
 584:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_CURR_SHUNT_V_GPIO_Port, M1_CURR_SHUNT_V_Pin);
 1357              		.loc 3 584 1
 1358 0016 8021     		movs	r1, #128
 1359 0018 4FF09040 		mov	r0, #1207959552
 1360 001c FFF7FEFF 		bl	LL_GPIO_LockPin
 585:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_CURR_SHUNT_U_GPIO_Port, M1_CURR_SHUNT_U_Pin);
 1361              		.loc 3 585 1
 1362 0020 0221     		movs	r1, #2
 1363 0022 4FF09040 		mov	r0, #1207959552
 1364 0026 FFF7FEFF 		bl	LL_GPIO_LockPin
 586:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_OPAMP1_EXT_GAIN_GPIO_Port, M1_OPAMP1_EXT_GAIN_Pin);
 1365              		.loc 3 586 1
 1366 002a 0821     		movs	r1, #8
 1367 002c 4FF09040 		mov	r0, #1207959552
 1368 0030 FFF7FEFF 		bl	LL_GPIO_LockPin
 587:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_OPAMP1_OUT_GPIO_Port, M1_OPAMP1_OUT_Pin);
 1369              		.loc 3 587 1
 1370 0034 0421     		movs	r1, #4
 1371 0036 4FF09040 		mov	r0, #1207959552
 1372 003a FFF7FEFF 		bl	LL_GPIO_LockPin
 588:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_OPAMP2_OUT_GPIO_Port, M1_OPAMP2_OUT_Pin);
 1373              		.loc 3 588 1
 1374 003e 4021     		movs	r1, #64
 1375 0040 4FF09040 		mov	r0, #1207959552
 1376 0044 FFF7FEFF 		bl	LL_GPIO_LockPin
 589:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_OPAMP2_EXT_GAIN_GPIO_Port, M1_OPAMP2_EXT_GAIN_Pin);
 1377              		.loc 3 589 1
 1378 0048 2021     		movs	r1, #32
 1379 004a 1348     		ldr	r0, .L69
 1380 004c FFF7FEFF 		bl	LL_GPIO_LockPin
ARM GAS  /tmp/ccXaLNW9.s 			page 49


 590:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_CURR_SHUNT_W_GPIO_Port, M1_CURR_SHUNT_W_Pin);
 1381              		.loc 3 590 1
 1382 0050 0121     		movs	r1, #1
 1383 0052 1248     		ldr	r0, .L69+4
 1384 0054 FFF7FEFF 		bl	LL_GPIO_LockPin
 591:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_UH_GPIO_Port, M1_PWM_UH_Pin);
 1385              		.loc 3 591 1
 1386 0058 4FF40071 		mov	r1, #512
 1387 005c 1048     		ldr	r0, .L69+8
 1388 005e FFF7FEFF 		bl	LL_GPIO_LockPin
 592:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
 1389              		.loc 3 592 1
 1390 0062 4FF40061 		mov	r1, #2048
 1391 0066 0E48     		ldr	r0, .L69+8
 1392 0068 FFF7FEFF 		bl	LL_GPIO_LockPin
 593:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
 1393              		.loc 3 593 1
 1394 006c 4FF48061 		mov	r1, #1024
 1395 0070 0B48     		ldr	r0, .L69+8
 1396 0072 FFF7FEFF 		bl	LL_GPIO_LockPin
 594:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
 1397              		.loc 3 594 1
 1398 0076 4FF40051 		mov	r1, #8192
 1399 007a 0948     		ldr	r0, .L69+8
 1400 007c FFF7FEFF 		bl	LL_GPIO_LockPin
 595:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
 1401              		.loc 3 595 1
 1402 0080 4FF48051 		mov	r1, #4096
 1403 0084 0648     		ldr	r0, .L69+8
 1404 0086 FFF7FEFF 		bl	LL_GPIO_LockPin
 596:Src/mc_tasks.c **** LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
 1405              		.loc 3 596 1
 1406 008a 4FF48071 		mov	r1, #256
 1407 008e 0448     		ldr	r0, .L69+8
 1408 0090 FFF7FEFF 		bl	LL_GPIO_LockPin
 597:Src/mc_tasks.c **** }
 1409              		.loc 3 597 1
 1410 0094 00BF     		nop
 1411 0096 80BD     		pop	{r7, pc}
 1412              	.L70:
 1413              		.align	2
 1414              	.L69:
 1415 0098 00080048 		.word	1207961600
 1416 009c 00040048 		.word	1207960576
 1417 00a0 00100048 		.word	1207963648
 1418              		.cfi_endproc
 1419              	.LFE1886:
 1421              		.text
 1422              	.Letext0:
 1423              		.file 4 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_type
 1424              		.file 5 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 1425              		.file 6 "Drivers/CMSIS/Include/core_cm4.h"
 1426              		.file 7 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 1427              		.file 8 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 1428              		.file 9 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 1429              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 1430              		.file 11 "Inc/mc_type.h"
ARM GAS  /tmp/ccXaLNW9.s 			page 50


 1431              		.file 12 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/pid_regulator.h"
 1432              		.file 13 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
 1433              		.file 14 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h"
 1434              		.file 15 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/virtual_speed_sensor.h"
 1435              		.file 16 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_speed_pos_fdbk.h"
 1436              		.file 17 "Inc/pwm_curr_fdbk.h"
 1437              		.file 18 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/revup_ctrl.h"
 1438              		.file 19 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/ntc_temperature_sensor.h"
 1439              		.file 20 "Inc/mc_interface.h"
 1440              		.file 21 "Inc/regular_conversion_manager.h"
 1441              		.file 22 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h"
 1442              		.file 23 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/r_divider_bus_voltage_sensor.h"
 1443              		.file 24 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/G4xx/Inc/stspin32g4.h"
 1444              		.file 25 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h"
 1445              		.file 26 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/ramp_ext_mngr.h"
 1446              		.file 27 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/mp_one_touch_tuning.h"
 1447              		.file 28 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/circle_limitation.h"
 1448              		.file 29 "Inc/hall_speed_pos_fdbk.h"
 1449              		.file 30 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/mp_hall_tuning.h"
 1450              		.file 31 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/mp_self_com_ctrl.h"
 1451              		.file 32 "Inc/mc_config_common.h"
 1452              		.file 33 "Inc/mc_config.h"
 1453              		.file 34 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcptl.h"
 1454              		.file 35 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcp.h"
 1455              		.file 36 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcpa.h"
 1456              		.file 37 "Inc/mcp_config.h"
ARM GAS  /tmp/ccXaLNW9.s 			page 51


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mc_tasks.c
     /tmp/ccXaLNW9.s:18     .rodata.OFFSET_TAB_CCMRx:0000000000000000 $d
     /tmp/ccXaLNW9.s:21     .rodata.OFFSET_TAB_CCMRx:0000000000000000 OFFSET_TAB_CCMRx
     /tmp/ccXaLNW9.s:24     .rodata.SHIFT_TAB_OCxx:0000000000000000 $d
     /tmp/ccXaLNW9.s:27     .rodata.SHIFT_TAB_OCxx:0000000000000000 SHIFT_TAB_OCxx
     /tmp/ccXaLNW9.s:30     .rodata.SHIFT_TAB_ICxx:0000000000000000 $d
     /tmp/ccXaLNW9.s:33     .rodata.SHIFT_TAB_ICxx:0000000000000000 SHIFT_TAB_ICxx
     /tmp/ccXaLNW9.s:36     .rodata.SHIFT_TAB_CCxP:0000000000000000 $d
     /tmp/ccXaLNW9.s:39     .rodata.SHIFT_TAB_CCxP:0000000000000000 SHIFT_TAB_CCxP
     /tmp/ccXaLNW9.s:42     .rodata.SHIFT_TAB_OISx:0000000000000000 $d
     /tmp/ccXaLNW9.s:45     .rodata.SHIFT_TAB_OISx:0000000000000000 SHIFT_TAB_OISx
     /tmp/ccXaLNW9.s:48     .text.LL_GPIO_LockPin:0000000000000000 $t
     /tmp/ccXaLNW9.s:55     .text.LL_GPIO_LockPin:0000000000000000 LL_GPIO_LockPin
     /tmp/ccXaLNW9.s:114    .rodata.USART_PRESCALER_TAB:0000000000000000 $d
     /tmp/ccXaLNW9.s:117    .rodata.USART_PRESCALER_TAB:0000000000000000 USART_PRESCALER_TAB
     /tmp/ccXaLNW9.s:131    .rodata.CHANNEL_OFFSET_TAB:0000000000000000 $d
     /tmp/ccXaLNW9.s:134    .rodata.CHANNEL_OFFSET_TAB:0000000000000000 CHANNEL_OFFSET_TAB
     /tmp/ccXaLNW9.s:137    .text.MC_Perf_Measure_Start:0000000000000000 $t
     /tmp/ccXaLNW9.s:143    .text.MC_Perf_Measure_Start:0000000000000000 MC_Perf_Measure_Start
     /tmp/ccXaLNW9.s:195    .text.MC_Perf_Measure_Start:000000000000002c $d
     /tmp/ccXaLNW9.s:200    .bss.hMFTaskCounterM1:0000000000000000 $d
     /tmp/ccXaLNW9.s:203    .bss.hMFTaskCounterM1:0000000000000000 hMFTaskCounterM1
     /tmp/ccXaLNW9.s:206    .bss.hBootCapDelayCounterM1:0000000000000000 $d
     /tmp/ccXaLNW9.s:209    .bss.hBootCapDelayCounterM1:0000000000000000 hBootCapDelayCounterM1
     /tmp/ccXaLNW9.s:212    .bss.hStopPermanencyCounterM1:0000000000000000 $d
     /tmp/ccXaLNW9.s:215    .bss.hStopPermanencyCounterM1:0000000000000000 hStopPermanencyCounterM1
     /tmp/ccXaLNW9.s:220    .bss.bMCBootCompleted:0000000000000000 bMCBootCompleted
     /tmp/ccXaLNW9.s:221    .bss.bMCBootCompleted:0000000000000000 $d
     /tmp/ccXaLNW9.s:223    .rodata:0000000000000000 $d
     /tmp/ccXaLNW9.s:233    .text.MCboot:0000000000000000 $t
     /tmp/ccXaLNW9.s:240    .text.MCboot:0000000000000000 MCboot
     /tmp/ccXaLNW9.s:350    .text.MCboot:000000000000009c $d
     /tmp/ccXaLNW9.s:366    .text.MC_StartMotorOpenLoop:0000000000000000 $t
     /tmp/ccXaLNW9.s:373    .text.MC_StartMotorOpenLoop:0000000000000000 MC_StartMotorOpenLoop
     /tmp/ccXaLNW9.s:446    .text.MC_StartMotorOpenLoop:0000000000000054 $d
     /tmp/ccXaLNW9.s:453    .text.MC_RunMotorControlTasks:0000000000000000 $t
     /tmp/ccXaLNW9.s:460    .text.MC_RunMotorControlTasks:0000000000000000 MC_RunMotorControlTasks
     /tmp/ccXaLNW9.s:615    .text.MC_RunMotorControlTasks:00000000000000cc $d
     /tmp/ccXaLNW9.s:627    .text.TSK_SetChargeBootCapDelayM1:0000000000000000 $t
     /tmp/ccXaLNW9.s:634    .text.TSK_SetChargeBootCapDelayM1:0000000000000000 TSK_SetChargeBootCapDelayM1
     /tmp/ccXaLNW9.s:674    .text.TSK_SetChargeBootCapDelayM1:000000000000001c $d
     /tmp/ccXaLNW9.s:679    .text.TSK_ChargeBootCapDelayHasElapsedM1:0000000000000000 $t
     /tmp/ccXaLNW9.s:686    .text.TSK_ChargeBootCapDelayHasElapsedM1:0000000000000000 TSK_ChargeBootCapDelayHasElapsedM1
     /tmp/ccXaLNW9.s:736    .text.TSK_ChargeBootCapDelayHasElapsedM1:0000000000000028 $d
     /tmp/ccXaLNW9.s:741    .text.TSK_SetStopPermanencyTimeM1:0000000000000000 $t
     /tmp/ccXaLNW9.s:748    .text.TSK_SetStopPermanencyTimeM1:0000000000000000 TSK_SetStopPermanencyTimeM1
     /tmp/ccXaLNW9.s:788    .text.TSK_SetStopPermanencyTimeM1:000000000000001c $d
     /tmp/ccXaLNW9.s:793    .text.TSK_StopPermanencyTimeHasElapsedM1:0000000000000000 $t
     /tmp/ccXaLNW9.s:800    .text.TSK_StopPermanencyTimeHasElapsedM1:0000000000000000 TSK_StopPermanencyTimeHasElapsedM1
     /tmp/ccXaLNW9.s:850    .text.TSK_StopPermanencyTimeHasElapsedM1:0000000000000028 $d
     /tmp/ccXaLNW9.s:855    .text.TSK_HighFrequencyTask:0000000000000000 $t
     /tmp/ccXaLNW9.s:862    .text.TSK_HighFrequencyTask:0000000000000000 TSK_HighFrequencyTask
     /tmp/ccXaLNW9.s:911    .text.TSK_HighFrequencyTask:0000000000000030 $d
     /tmp/ccXaLNW9.s:917    .text.TSK_SafetyTask:0000000000000000 $t
     /tmp/ccXaLNW9.s:924    .text.TSK_SafetyTask:0000000000000000 TSK_SafetyTask
     /tmp/ccXaLNW9.s:955    .text.TSK_SafetyTask:0000000000000018 $d
ARM GAS  /tmp/ccXaLNW9.s 			page 52


     /tmp/ccXaLNW9.s:961    .text.TSK_SafetyTask_PWMOFF:0000000000000000 $t
     /tmp/ccXaLNW9.s:968    .text.TSK_SafetyTask_PWMOFF:0000000000000000 TSK_SafetyTask_PWMOFF
     /tmp/ccXaLNW9.s:1141   .text.TSK_SafetyTask_PWMOFF:0000000000000110 $d
     /tmp/ccXaLNW9.s:1154   .text.TSK_HardwareFaultTask:0000000000000000 $t
     /tmp/ccXaLNW9.s:1161   .text.TSK_HardwareFaultTask:0000000000000000 TSK_HardwareFaultTask
     /tmp/ccXaLNW9.s:1195   .text.TSK_HardwareFaultTask:0000000000000024 $d
     /tmp/ccXaLNW9.s:1202   .text.startMediumFrequencyTask:0000000000000000 $t
     /tmp/ccXaLNW9.s:1209   .text.startMediumFrequencyTask:0000000000000000 startMediumFrequencyTask
     /tmp/ccXaLNW9.s:1249   .text.StartSafetyTask:0000000000000000 $t
     /tmp/ccXaLNW9.s:1256   .text.StartSafetyTask:0000000000000000 StartSafetyTask
     /tmp/ccXaLNW9.s:1286   .text.UI_HandleStartStopButton_cb:0000000000000000 $t
     /tmp/ccXaLNW9.s:1293   .text.UI_HandleStartStopButton_cb:0000000000000000 UI_HandleStartStopButton_cb
     /tmp/ccXaLNW9.s:1328   .text.mc_lock_pins:0000000000000000 $t
     /tmp/ccXaLNW9.s:1335   .text.mc_lock_pins:0000000000000000 mc_lock_pins
     /tmp/ccXaLNW9.s:1415   .text.mc_lock_pins:0000000000000098 $d

UNDEFINED SYMBOLS
FOC_Init
PID_HandleInit
VSS_Init
RCM_RegisterRegConv
RVBS_Init
NTC_Init
MC_Perf_Measure_Init
STSPIN32G4_init
STSPIN32G4_reset
STSPIN32G4_setVCC
STSPIN32G4_setVDSP
STSPIN32G4_clearFaults
MC_APP_BootHook
Mci
PIDSpeedHandle_M1
VirtualSpeedSensorM1
VbusRegConv_M1
BusVoltageSensor_M1
TempRegConv_M1
TempSensor_M1
PerfTraces
HdlSTSPING4
MCI_GetSTMState
MCI_StartMotor
pwmcHandle
FOCVars
MC_BG_Perf_Measure_Start
TSK_MediumFrequencyTaskM1
MC_BG_Perf_Measure_Stop
MC_APP_PostMediumFrequencyHook_M1
MCP_ReceivedPacket
MCP_Over_UartA
FOC_HighFrequencyTask
GLOBAL_TIMESTAMP
SCC_CheckOC_RL
SCC
RCM_ExecRegularConv
NTC_CalcAvTemp
PWMC_IsFaultOccurred
RVBS_CalcAvVbus
ARM GAS  /tmp/ccXaLNW9.s 			page 53


MCI_FaultProcessing
MCI_GetFaultState
SCC_Stop
OTT_Stop
PWMC_SwitchOffPWM
MCPA_flushDataLog
FOC_Clear
OTT
MCPA_UART_A
MX_FREERTOS_Init
vTaskDelay
MC_GetSTMStateMotor1
MC_StartMotor1
MC_StopMotor1
