ARM GAS  /tmp/ccv2gsms.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	pxCurrentTCB
  18              		.section	.bss.pxCurrentTCB,"aw",%nobits
  19              		.align	2
  22              	pxCurrentTCB:
  23 0000 00000000 		.space	4
  24              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  25              		.align	2
  28              	pxReadyTasksLists:
  29 0000 00000000 		.space	140
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  31              		.align	2
  34              	xDelayedTaskList1:
  35 0000 00000000 		.space	20
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  37              		.align	2
  40              	xDelayedTaskList2:
  41 0000 00000000 		.space	20
  41      00000000 
  41      00000000 
  41      00000000 
  41      00000000 
  42              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  43              		.align	2
  46              	pxDelayedTaskList:
  47 0000 00000000 		.space	4
  48              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  49              		.align	2
  52              	pxOverflowDelayedTaskList:
  53 0000 00000000 		.space	4
  54              		.section	.bss.xPendingReadyList,"aw",%nobits
  55              		.align	2
  58              	xPendingReadyList:
  59 0000 00000000 		.space	20
ARM GAS  /tmp/ccv2gsms.s 			page 2


  59      00000000 
  59      00000000 
  59      00000000 
  59      00000000 
  60              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  61              		.align	2
  64              	xTasksWaitingTermination:
  65 0000 00000000 		.space	20
  65      00000000 
  65      00000000 
  65      00000000 
  65      00000000 
  66              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  67              		.align	2
  70              	uxDeletedTasksWaitingCleanUp:
  71 0000 00000000 		.space	4
  72              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  73              		.align	2
  76              	xSuspendedTaskList:
  77 0000 00000000 		.space	20
  77      00000000 
  77      00000000 
  77      00000000 
  77      00000000 
  78              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  79              		.align	2
  82              	uxCurrentNumberOfTasks:
  83 0000 00000000 		.space	4
  84              		.section	.bss.xTickCount,"aw",%nobits
  85              		.align	2
  88              	xTickCount:
  89 0000 00000000 		.space	4
  90              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  91              		.align	2
  94              	uxTopReadyPriority:
  95 0000 00000000 		.space	4
  96              		.section	.bss.xSchedulerRunning,"aw",%nobits
  97              		.align	2
 100              	xSchedulerRunning:
 101 0000 00000000 		.space	4
 102              		.section	.bss.xPendedTicks,"aw",%nobits
 103              		.align	2
 106              	xPendedTicks:
 107 0000 00000000 		.space	4
 108              		.section	.bss.xYieldPending,"aw",%nobits
 109              		.align	2
 112              	xYieldPending:
 113 0000 00000000 		.space	4
 114              		.section	.bss.xNumOfOverflows,"aw",%nobits
 115              		.align	2
 118              	xNumOfOverflows:
 119 0000 00000000 		.space	4
 120              		.section	.bss.uxTaskNumber,"aw",%nobits
 121              		.align	2
 124              	uxTaskNumber:
 125 0000 00000000 		.space	4
 126              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
ARM GAS  /tmp/ccv2gsms.s 			page 3


 127              		.align	2
 130              	xNextTaskUnblockTime:
 131 0000 00000000 		.space	4
 132              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 133              		.align	2
 136              	xIdleTaskHandle:
 137 0000 00000000 		.space	4
 138              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 139              		.align	2
 142              	uxSchedulerSuspended:
 143 0000 00000000 		.space	4
 144              		.section	.text.xTaskCreate,"ax",%progbits
 145              		.align	1
 146              		.global	xTaskCreate
 147              		.arch armv7e-m
 148              		.syntax unified
 149              		.thumb
 150              		.thumb_func
 151              		.fpu fpv4-sp-d16
 153              	xTaskCreate:
 154              	.LFB5:
 155              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
ARM GAS  /tmp/ccv2gsms.s 			page 4


  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
ARM GAS  /tmp/ccv2gsms.s 			page 5


  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv2gsms.s 			page 6


 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
ARM GAS  /tmp/ccv2gsms.s 			page 7


 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
ARM GAS  /tmp/ccv2gsms.s 			page 8


 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv2gsms.s 			page 9


 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
ARM GAS  /tmp/ccv2gsms.s 			page 10


 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
ARM GAS  /tmp/ccv2gsms.s 			page 11


 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
ARM GAS  /tmp/ccv2gsms.s 			page 12


 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
ARM GAS  /tmp/ccv2gsms.s 			page 13


 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv2gsms.s 			page 14


 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
ARM GAS  /tmp/ccv2gsms.s 			page 15


 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv2gsms.s 			page 16


 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 156              		.loc 1 739 2
 157              		.cfi_startproc
 158              		@ args = 8, pretend = 0, frame = 32
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 160 0000 80B5     		push	{r7, lr}
 161              	.LCFI0:
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 7, -8
 164              		.cfi_offset 14, -4
 165 0002 8CB0     		sub	sp, sp, #48
 166              	.LCFI1:
 167              		.cfi_def_cfa_offset 56
 168 0004 04AF     		add	r7, sp, #16
 169              	.LCFI2:
 170              		.cfi_def_cfa 7, 40
 171 0006 F860     		str	r0, [r7, #12]
 172 0008 B960     		str	r1, [r7, #8]
 173 000a 3B60     		str	r3, [r7]
 174 000c 1346     		mov	r3, r2	@ movhi
 175 000e FB80     		strh	r3, [r7, #6]	@ movhi
 176              	.LBB100:
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
ARM GAS  /tmp/ccv2gsms.s 			page 17


 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 177              		.loc 1 773 32
 178 0010 FB88     		ldrh	r3, [r7, #6]
 179              		.loc 1 773 14
 180 0012 9B00     		lsls	r3, r3, #2
 181 0014 1846     		mov	r0, r3
 182 0016 FFF7FEFF 		bl	pvPortMalloc
 183 001a 7861     		str	r0, [r7, #20]
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 184              		.loc 1 775 6
 185 001c 7B69     		ldr	r3, [r7, #20]
 186 001e 002B     		cmp	r3, #0
 187 0020 0ED0     		beq	.L2
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 188              		.loc 1 778 28
 189 0022 5420     		movs	r0, #84
 190 0024 FFF7FEFF 		bl	pvPortMalloc
 191 0028 F861     		str	r0, [r7, #28]
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 192              		.loc 1 780 7
 193 002a FB69     		ldr	r3, [r7, #28]
 194 002c 002B     		cmp	r3, #0
 195 002e 03D0     		beq	.L3
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 196              		.loc 1 783 24
 197 0030 FB69     		ldr	r3, [r7, #28]
 198 0032 7A69     		ldr	r2, [r7, #20]
 199 0034 1A63     		str	r2, [r3, #48]
 200 0036 05E0     		b	.L4
 201              	.L3:
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
ARM GAS  /tmp/ccv2gsms.s 			page 18


 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 202              		.loc 1 789 6
 203 0038 7869     		ldr	r0, [r7, #20]
 204 003a FFF7FEFF 		bl	vPortFree
 205 003e 01E0     		b	.L4
 206              	.L2:
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 207              		.loc 1 794 14
 208 0040 0023     		movs	r3, #0
 209 0042 FB61     		str	r3, [r7, #28]
 210              	.L4:
 211              	.LBE100:
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 212              		.loc 1 799 5
 213 0044 FB69     		ldr	r3, [r7, #28]
 214 0046 002B     		cmp	r3, #0
 215 0048 13D0     		beq	.L5
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 216              		.loc 1 809 4
 217 004a FA88     		ldrh	r2, [r7, #6]
 218 004c 0023     		movs	r3, #0
 219 004e 0393     		str	r3, [sp, #12]
 220 0050 FB69     		ldr	r3, [r7, #28]
 221 0052 0293     		str	r3, [sp, #8]
 222 0054 FB6A     		ldr	r3, [r7, #44]
 223 0056 0193     		str	r3, [sp, #4]
 224 0058 BB6A     		ldr	r3, [r7, #40]
 225 005a 0093     		str	r3, [sp]
 226 005c 3B68     		ldr	r3, [r7]
 227 005e B968     		ldr	r1, [r7, #8]
 228 0060 F868     		ldr	r0, [r7, #12]
 229 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 230              		.loc 1 810 4
 231 0066 F869     		ldr	r0, [r7, #28]
 232 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 233              		.loc 1 811 12
 234 006c 0123     		movs	r3, #1
ARM GAS  /tmp/ccv2gsms.s 			page 19


 235 006e BB61     		str	r3, [r7, #24]
 236 0070 02E0     		b	.L6
 237              	.L5:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 238              		.loc 1 815 12
 239 0072 4FF0FF33 		mov	r3, #-1
 240 0076 BB61     		str	r3, [r7, #24]
 241              	.L6:
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 242              		.loc 1 818 10
 243 0078 BB69     		ldr	r3, [r7, #24]
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 244              		.loc 1 819 2
 245 007a 1846     		mov	r0, r3
 246 007c 2037     		adds	r7, r7, #32
 247              	.LCFI3:
 248              		.cfi_def_cfa_offset 8
 249 007e BD46     		mov	sp, r7
 250              	.LCFI4:
 251              		.cfi_def_cfa_register 13
 252              		@ sp needed
 253 0080 80BD     		pop	{r7, pc}
 254              		.cfi_endproc
 255              	.LFE5:
 257              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 258              		.align	1
 259              		.syntax unified
 260              		.thumb
 261              		.thumb_func
 262              		.fpu fpv4-sp-d16
 264              	prvInitialiseNewTask:
 265              	.LFB6:
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 266              		.loc 1 832 1
 267              		.cfi_startproc
 268              		@ args = 16, pretend = 0, frame = 32
 269              		@ frame_needed = 1, uses_anonymous_args = 0
 270 0000 80B5     		push	{r7, lr}
 271              	.LCFI5:
 272              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccv2gsms.s 			page 20


 273              		.cfi_offset 7, -8
 274              		.cfi_offset 14, -4
 275 0002 88B0     		sub	sp, sp, #32
 276              	.LCFI6:
 277              		.cfi_def_cfa_offset 40
 278 0004 00AF     		add	r7, sp, #0
 279              	.LCFI7:
 280              		.cfi_def_cfa_register 7
 281 0006 F860     		str	r0, [r7, #12]
 282 0008 B960     		str	r1, [r7, #8]
 283 000a 7A60     		str	r2, [r7, #4]
 284 000c 3B60     		str	r3, [r7]
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 285              		.loc 1 864 29
 286 000e 3B6B     		ldr	r3, [r7, #48]
 287 0010 1A6B     		ldr	r2, [r3, #48]
 288              		.loc 1 864 38
 289 0012 7B68     		ldr	r3, [r7, #4]
 290 0014 03F18043 		add	r3, r3, #1073741824
 291 0018 013B     		subs	r3, r3, #1
 292 001a 9B00     		lsls	r3, r3, #2
 293              		.loc 1 864 16
 294 001c 1344     		add	r3, r3, r2
 295 001e BB61     		str	r3, [r7, #24]
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 296              		.loc 1 865 40
ARM GAS  /tmp/ccv2gsms.s 			page 21


 297 0020 BB69     		ldr	r3, [r7, #24]
 298              		.loc 1 865 81
 299 0022 23F00703 		bic	r3, r3, #7
 300              		.loc 1 865 16
 301 0026 BB61     		str	r3, [r7, #24]
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 302              		.loc 1 868 3
 303 0028 BB69     		ldr	r3, [r7, #24]
 304 002a 03F00703 		and	r3, r3, #7
 305 002e 002B     		cmp	r3, #0
 306 0030 0AD0     		beq	.L9
 307              	.LBB101:
 308              	.LBB102:
 309              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
ARM GAS  /tmp/ccv2gsms.s 			page 22


  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
ARM GAS  /tmp/ccv2gsms.s 			page 23


  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
ARM GAS  /tmp/ccv2gsms.s 			page 24


 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 310              		.loc 2 195 2
 311              		.syntax unified
 312              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 313 0032 4FF05003 			mov r3, #80												
 314 0036 83F31188 		msr basepri, r3											
 315 003a BFF36F8F 		isb														
 316 003e BFF34F8F 		dsb														
 317              	
 318              	@ 0 "" 2
 319              		.thumb
 320              		.syntax unified
 321 0042 7B61     		str	r3, [r7, #20]
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
ARM GAS  /tmp/ccv2gsms.s 			page 25


 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 322              		.loc 2 203 1
 323 0044 00BF     		nop
 324              	.L10:
 325              	.LBE102:
 326              	.LBE101:
 327              		.loc 1 868 3 discriminator 1
 328 0046 FEE7     		b	.L10
 329              	.L9:
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 330              		.loc 1 892 4
 331 0048 BB68     		ldr	r3, [r7, #8]
 332 004a 002B     		cmp	r3, #0
 333 004c 1FD0     		beq	.L11
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 334              		.loc 1 894 10
 335 004e 0023     		movs	r3, #0
 336 0050 FB61     		str	r3, [r7, #28]
 337              		.loc 1 894 3
 338 0052 12E0     		b	.L12
 339              	.L15:
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 340              		.loc 1 896 38
 341 0054 BA68     		ldr	r2, [r7, #8]
 342 0056 FB69     		ldr	r3, [r7, #28]
 343 0058 1344     		add	r3, r3, r2
 344 005a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 345              		.loc 1 896 30
 346 005c 3A6B     		ldr	r2, [r7, #48]
 347 005e FB69     		ldr	r3, [r7, #28]
ARM GAS  /tmp/ccv2gsms.s 			page 26


 348 0060 1344     		add	r3, r3, r2
 349 0062 3433     		adds	r3, r3, #52
 350 0064 0A46     		mov	r2, r1
 351 0066 1A70     		strb	r2, [r3]
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 352              		.loc 1 901 14
 353 0068 BA68     		ldr	r2, [r7, #8]
 354 006a FB69     		ldr	r3, [r7, #28]
 355 006c 1344     		add	r3, r3, r2
 356 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 357              		.loc 1 901 6
 358 0070 002B     		cmp	r3, #0
 359 0072 06D0     		beq	.L19
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 360              		.loc 1 894 77 discriminator 2
 361 0074 FB69     		ldr	r3, [r7, #28]
 362 0076 0133     		adds	r3, r3, #1
 363 0078 FB61     		str	r3, [r7, #28]
 364              	.L12:
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 365              		.loc 1 894 3 discriminator 1
 366 007a FB69     		ldr	r3, [r7, #28]
 367 007c 0F2B     		cmp	r3, #15
 368 007e E9D9     		bls	.L15
 369 0080 00E0     		b	.L14
 370              	.L19:
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 371              		.loc 1 903 5
 372 0082 00BF     		nop
 373              	.L14:
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 374              		.loc 1 913 55
 375 0084 3B6B     		ldr	r3, [r7, #48]
 376 0086 0022     		movs	r2, #0
 377 0088 83F84320 		strb	r2, [r3, #67]
 378 008c 03E0     		b	.L16
 379              	.L11:
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
ARM GAS  /tmp/ccv2gsms.s 			page 27


 380              		.loc 1 919 29
 381 008e 3B6B     		ldr	r3, [r7, #48]
 382 0090 0022     		movs	r2, #0
 383 0092 83F83420 		strb	r2, [r3, #52]
 384              	.L16:
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 385              		.loc 1 924 4
 386 0096 BB6A     		ldr	r3, [r7, #40]
 387 0098 062B     		cmp	r3, #6
 388 009a 01D9     		bls	.L17
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 389              		.loc 1 926 14
 390 009c 0623     		movs	r3, #6
 391 009e BB62     		str	r3, [r7, #40]
 392              	.L17:
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 393              		.loc 1 933 23
 394 00a0 3B6B     		ldr	r3, [r7, #48]
 395 00a2 BA6A     		ldr	r2, [r7, #40]
 396 00a4 DA62     		str	r2, [r3, #44]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 397              		.loc 1 936 28
 398 00a6 3B6B     		ldr	r3, [r7, #48]
 399 00a8 BA6A     		ldr	r2, [r7, #40]
 400 00aa 5A64     		str	r2, [r3, #68]
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 401              		.loc 1 937 27
 402 00ac 3B6B     		ldr	r3, [r7, #48]
 403 00ae 0022     		movs	r2, #0
 404 00b0 9A64     		str	r2, [r3, #72]
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 405              		.loc 1 941 2
 406 00b2 3B6B     		ldr	r3, [r7, #48]
 407 00b4 0433     		adds	r3, r3, #4
 408 00b6 1846     		mov	r0, r3
 409 00b8 FFF7FEFF 		bl	vListInitialiseItem
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 410              		.loc 1 942 2
 411 00bc 3B6B     		ldr	r3, [r7, #48]
 412 00be 1833     		adds	r3, r3, #24
 413 00c0 1846     		mov	r0, r3
ARM GAS  /tmp/ccv2gsms.s 			page 28


 414 00c2 FFF7FEFF 		bl	vListInitialiseItem
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 415              		.loc 1 946 2
 416 00c6 3B6B     		ldr	r3, [r7, #48]
 417 00c8 3A6B     		ldr	r2, [r7, #48]
 418 00ca 1A61     		str	r2, [r3, #16]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 419              		.loc 1 949 2
 420 00cc BB6A     		ldr	r3, [r7, #40]
 421 00ce C3F10702 		rsb	r2, r3, #7
 422 00d2 3B6B     		ldr	r3, [r7, #48]
 423 00d4 9A61     		str	r2, [r3, #24]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 424              		.loc 1 950 2
 425 00d6 3B6B     		ldr	r3, [r7, #48]
 426 00d8 3A6B     		ldr	r2, [r7, #48]
 427 00da 5A62     		str	r2, [r3, #36]
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
ARM GAS  /tmp/ccv2gsms.s 			page 29


 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 428              		.loc 1 992 29
 429 00dc 3B6B     		ldr	r3, [r7, #48]
 430 00de 0022     		movs	r2, #0
 431 00e0 DA64     		str	r2, [r3, #76]
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 432              		.loc 1 993 27
 433 00e2 3B6B     		ldr	r3, [r7, #48]
 434 00e4 0022     		movs	r2, #0
 435 00e6 83F85020 		strb	r2, [r3, #80]
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccv2gsms.s 			page 30


1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 436              		.loc 1 1058 29
 437 00ea 3A68     		ldr	r2, [r7]
 438 00ec F968     		ldr	r1, [r7, #12]
 439 00ee B869     		ldr	r0, [r7, #24]
 440 00f0 FFF7FEFF 		bl	pxPortInitialiseStack
 441 00f4 0246     		mov	r2, r0
 442              		.loc 1 1058 27
 443 00f6 3B6B     		ldr	r3, [r7, #48]
 444 00f8 1A60     		str	r2, [r3]
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
 445              		.loc 1 1064 4
 446 00fa FB6A     		ldr	r3, [r7, #44]
 447 00fc 002B     		cmp	r3, #0
 448 00fe 02D0     		beq	.L20
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 449              		.loc 1 1068 18
 450 0100 FB6A     		ldr	r3, [r7, #44]
 451 0102 3A6B     		ldr	r2, [r7, #48]
 452 0104 1A60     		str	r2, [r3]
 453              	.L20:
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccv2gsms.s 			page 31


1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 454              		.loc 1 1074 1
 455 0106 00BF     		nop
 456 0108 2037     		adds	r7, r7, #32
 457              	.LCFI8:
 458              		.cfi_def_cfa_offset 8
 459 010a BD46     		mov	sp, r7
 460              	.LCFI9:
 461              		.cfi_def_cfa_register 13
 462              		@ sp needed
 463 010c 80BD     		pop	{r7, pc}
 464              		.cfi_endproc
 465              	.LFE6:
 467              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 468              		.align	1
 469              		.syntax unified
 470              		.thumb
 471              		.thumb_func
 472              		.fpu fpv4-sp-d16
 474              	prvAddNewTaskToReadyList:
 475              	.LFB7:
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 476              		.loc 1 1078 1
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 8
 479              		@ frame_needed = 1, uses_anonymous_args = 0
 480 0000 80B5     		push	{r7, lr}
 481              	.LCFI10:
 482              		.cfi_def_cfa_offset 8
 483              		.cfi_offset 7, -8
 484              		.cfi_offset 14, -4
 485 0002 82B0     		sub	sp, sp, #8
 486              	.LCFI11:
 487              		.cfi_def_cfa_offset 16
 488 0004 00AF     		add	r7, sp, #0
 489              	.LCFI12:
 490              		.cfi_def_cfa_register 7
 491 0006 7860     		str	r0, [r7, #4]
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 492              		.loc 1 1081 2
 493 0008 FFF7FEFF 		bl	vPortEnterCritical
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 494              		.loc 1 1083 25
 495 000c 2A4B     		ldr	r3, .L26
 496 000e 1B68     		ldr	r3, [r3]
 497 0010 0133     		adds	r3, r3, #1
 498 0012 294A     		ldr	r2, .L26
 499 0014 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 500              		.loc 1 1084 20
 501 0016 294B     		ldr	r3, .L26+4
ARM GAS  /tmp/ccv2gsms.s 			page 32


 502 0018 1B68     		ldr	r3, [r3]
 503              		.loc 1 1084 5
 504 001a 002B     		cmp	r3, #0
 505 001c 09D1     		bne	.L22
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 506              		.loc 1 1088 17
 507 001e 274A     		ldr	r2, .L26+4
 508 0020 7B68     		ldr	r3, [r7, #4]
 509 0022 1360     		str	r3, [r2]
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 510              		.loc 1 1090 31
 511 0024 244B     		ldr	r3, .L26
 512 0026 1B68     		ldr	r3, [r3]
 513              		.loc 1 1090 6
 514 0028 012B     		cmp	r3, #1
 515 002a 10D1     		bne	.L23
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 516              		.loc 1 1095 5
 517 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 518 0030 0DE0     		b	.L23
 519              	.L22:
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 520              		.loc 1 1107 26
 521 0032 234B     		ldr	r3, .L26+8
 522 0034 1B68     		ldr	r3, [r3]
 523              		.loc 1 1107 6
 524 0036 002B     		cmp	r3, #0
 525 0038 09D1     		bne	.L23
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 526              		.loc 1 1109 21
 527 003a 204B     		ldr	r3, .L26+4
 528 003c 1B68     		ldr	r3, [r3]
 529 003e DA6A     		ldr	r2, [r3, #44]
 530              		.loc 1 1109 45
 531 0040 7B68     		ldr	r3, [r7, #4]
 532 0042 DB6A     		ldr	r3, [r3, #44]
 533              		.loc 1 1109 7
ARM GAS  /tmp/ccv2gsms.s 			page 33


 534 0044 9A42     		cmp	r2, r3
 535 0046 02D8     		bhi	.L23
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 536              		.loc 1 1111 19
 537 0048 1C4A     		ldr	r2, .L26+4
 538 004a 7B68     		ldr	r3, [r7, #4]
 539 004c 1360     		str	r3, [r2]
 540              	.L23:
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 541              		.loc 1 1124 15
 542 004e 1D4B     		ldr	r3, .L26+12
 543 0050 1B68     		ldr	r3, [r3]
 544 0052 0133     		adds	r3, r3, #1
 545 0054 1B4A     		ldr	r2, .L26+12
 546 0056 1360     		str	r3, [r2]
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 547              		.loc 1 1134 3
 548 0058 7B68     		ldr	r3, [r7, #4]
 549 005a DB6A     		ldr	r3, [r3, #44]
 550 005c 0122     		movs	r2, #1
 551 005e 9A40     		lsls	r2, r2, r3
 552 0060 194B     		ldr	r3, .L26+16
 553 0062 1B68     		ldr	r3, [r3]
 554 0064 1343     		orrs	r3, r3, r2
 555 0066 184A     		ldr	r2, .L26+16
 556 0068 1360     		str	r3, [r2]
 557 006a 7B68     		ldr	r3, [r7, #4]
 558 006c DA6A     		ldr	r2, [r3, #44]
 559 006e 1346     		mov	r3, r2
 560 0070 9B00     		lsls	r3, r3, #2
 561 0072 1344     		add	r3, r3, r2
 562 0074 9B00     		lsls	r3, r3, #2
 563 0076 154A     		ldr	r2, .L26+20
 564 0078 1A44     		add	r2, r2, r3
 565 007a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccv2gsms.s 			page 34


 566 007c 0433     		adds	r3, r3, #4
 567 007e 1946     		mov	r1, r3
 568 0080 1046     		mov	r0, r2
 569 0082 FFF7FEFF 		bl	vListInsertEnd
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 570              		.loc 1 1138 2
 571 0086 FFF7FEFF 		bl	vPortExitCritical
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 572              		.loc 1 1140 24
 573 008a 0D4B     		ldr	r3, .L26+8
 574 008c 1B68     		ldr	r3, [r3]
 575              		.loc 1 1140 4
 576 008e 002B     		cmp	r3, #0
 577 0090 0ED0     		beq	.L25
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 578              		.loc 1 1144 19
 579 0092 0A4B     		ldr	r3, .L26+4
 580 0094 1B68     		ldr	r3, [r3]
 581 0096 DA6A     		ldr	r2, [r3, #44]
 582              		.loc 1 1144 42
 583 0098 7B68     		ldr	r3, [r7, #4]
 584 009a DB6A     		ldr	r3, [r3, #44]
 585              		.loc 1 1144 5
 586 009c 9A42     		cmp	r2, r3
 587 009e 07D2     		bcs	.L25
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 588              		.loc 1 1146 4
 589 00a0 0B4B     		ldr	r3, .L26+24
 590 00a2 4FF08052 		mov	r2, #268435456
 591 00a6 1A60     		str	r2, [r3]
 592              		.syntax unified
 593              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 594 00a8 BFF34F8F 		dsb
 595              	@ 0 "" 2
 596              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 597 00ac BFF36F8F 		isb
 598              	@ 0 "" 2
 599              		.thumb
 600              		.syntax unified
 601              	.L25:
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccv2gsms.s 			page 35


1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 602              		.loc 1 1157 1
 603 00b0 00BF     		nop
 604 00b2 0837     		adds	r7, r7, #8
 605              	.LCFI13:
 606              		.cfi_def_cfa_offset 8
 607 00b4 BD46     		mov	sp, r7
 608              	.LCFI14:
 609              		.cfi_def_cfa_register 13
 610              		@ sp needed
 611 00b6 80BD     		pop	{r7, pc}
 612              	.L27:
 613              		.align	2
 614              	.L26:
 615 00b8 00000000 		.word	uxCurrentNumberOfTasks
 616 00bc 00000000 		.word	pxCurrentTCB
 617 00c0 00000000 		.word	xSchedulerRunning
 618 00c4 00000000 		.word	uxTaskNumber
 619 00c8 00000000 		.word	uxTopReadyPriority
 620 00cc 00000000 		.word	pxReadyTasksLists
 621 00d0 04ED00E0 		.word	-536810236
 622              		.cfi_endproc
 623              	.LFE7:
 625              		.section	.text.vTaskDelete,"ax",%progbits
 626              		.align	1
 627              		.global	vTaskDelete
 628              		.syntax unified
 629              		.thumb
 630              		.thumb_func
 631              		.fpu fpv4-sp-d16
 633              	vTaskDelete:
 634              	.LFB8:
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 635              		.loc 1 1163 2
 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 16
 638              		@ frame_needed = 1, uses_anonymous_args = 0
 639 0000 80B5     		push	{r7, lr}
 640              	.LCFI15:
 641              		.cfi_def_cfa_offset 8
 642              		.cfi_offset 7, -8
 643              		.cfi_offset 14, -4
 644 0002 84B0     		sub	sp, sp, #16
 645              	.LCFI16:
 646              		.cfi_def_cfa_offset 24
 647 0004 00AF     		add	r7, sp, #0
 648              	.LCFI17:
 649              		.cfi_def_cfa_register 7
 650 0006 7860     		str	r0, [r7, #4]
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv2gsms.s 			page 36


1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 651              		.loc 1 1166 3
 652 0008 FFF7FEFF 		bl	vPortEnterCritical
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 653              		.loc 1 1170 12
 654 000c 7B68     		ldr	r3, [r7, #4]
 655 000e 002B     		cmp	r3, #0
 656 0010 02D1     		bne	.L29
 657              		.loc 1 1170 12 is_stmt 0 discriminator 1
 658 0012 394B     		ldr	r3, .L39
 659 0014 1B68     		ldr	r3, [r3]
 660 0016 00E0     		b	.L30
 661              	.L29:
 662              		.loc 1 1170 12 discriminator 2
 663 0018 7B68     		ldr	r3, [r7, #4]
 664              	.L30:
 665              		.loc 1 1170 10 is_stmt 1 discriminator 4
 666 001a FB60     		str	r3, [r7, #12]
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list. */
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 667              		.loc 1 1173 8 discriminator 4
 668 001c FB68     		ldr	r3, [r7, #12]
 669 001e 0433     		adds	r3, r3, #4
 670 0020 1846     		mov	r0, r3
 671 0022 FFF7FEFF 		bl	uxListRemove
 672 0026 0346     		mov	r3, r0
 673              		.loc 1 1173 6 discriminator 4
 674 0028 002B     		cmp	r3, #0
 675 002a 15D1     		bne	.L31
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 676              		.loc 1 1175 5
 677 002c FB68     		ldr	r3, [r7, #12]
 678 002e DA6A     		ldr	r2, [r3, #44]
 679 0030 3249     		ldr	r1, .L39+4
 680 0032 1346     		mov	r3, r2
 681 0034 9B00     		lsls	r3, r3, #2
 682 0036 1344     		add	r3, r3, r2
 683 0038 9B00     		lsls	r3, r3, #2
 684 003a 0B44     		add	r3, r3, r1
 685 003c 1B68     		ldr	r3, [r3]
 686 003e 002B     		cmp	r3, #0
 687 0040 0AD1     		bne	.L31
 688              		.loc 1 1175 5 is_stmt 0 discriminator 1
 689 0042 FB68     		ldr	r3, [r7, #12]
 690 0044 DB6A     		ldr	r3, [r3, #44]
 691 0046 0122     		movs	r2, #1
 692 0048 02FA03F3 		lsl	r3, r2, r3
 693 004c DA43     		mvns	r2, r3
 694 004e 2C4B     		ldr	r3, .L39+8
 695 0050 1B68     		ldr	r3, [r3]
 696 0052 1340     		ands	r3, r3, r2
 697 0054 2A4A     		ldr	r2, .L39+8
ARM GAS  /tmp/ccv2gsms.s 			page 37


 698 0056 1360     		str	r3, [r2]
 699              	.L31:
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 700              		.loc 1 1183 8 is_stmt 1
 701 0058 FB68     		ldr	r3, [r7, #12]
 702 005a 9B6A     		ldr	r3, [r3, #40]
 703              		.loc 1 1183 6
 704 005c 002B     		cmp	r3, #0
 705 005e 04D0     		beq	.L32
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 706              		.loc 1 1185 14
 707 0060 FB68     		ldr	r3, [r7, #12]
 708 0062 1833     		adds	r3, r3, #24
 709 0064 1846     		mov	r0, r3
 710 0066 FFF7FEFF 		bl	uxListRemove
 711              	.L32:
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 712              		.loc 1 1196 16
 713 006a 264B     		ldr	r3, .L39+12
 714 006c 1B68     		ldr	r3, [r3]
 715 006e 0133     		adds	r3, r3, #1
 716 0070 244A     		ldr	r2, .L39+12
 717 0072 1360     		str	r3, [r2]
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 718              		.loc 1 1198 14
 719 0074 204B     		ldr	r3, .L39
 720 0076 1B68     		ldr	r3, [r3]
 721              		.loc 1 1198 6
 722 0078 FA68     		ldr	r2, [r7, #12]
 723 007a 9A42     		cmp	r2, r3
 724 007c 0BD1     		bne	.L33
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
ARM GAS  /tmp/ccv2gsms.s 			page 38


 725              		.loc 1 1205 5
 726 007e FB68     		ldr	r3, [r7, #12]
 727 0080 0433     		adds	r3, r3, #4
 728 0082 1946     		mov	r1, r3
 729 0084 2048     		ldr	r0, .L39+16
 730 0086 FFF7FEFF 		bl	vListInsertEnd
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 731              		.loc 1 1210 5
 732 008a 204B     		ldr	r3, .L39+20
 733 008c 1B68     		ldr	r3, [r3]
 734 008e 0133     		adds	r3, r3, #1
 735 0090 1E4A     		ldr	r2, .L39+20
 736 0092 1360     		str	r3, [r2]
 737 0094 09E0     		b	.L34
 738              	.L33:
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 739              		.loc 1 1225 5
 740 0096 1E4B     		ldr	r3, .L39+24
 741 0098 1B68     		ldr	r3, [r3]
 742 009a 013B     		subs	r3, r3, #1
 743 009c 1C4A     		ldr	r2, .L39+24
 744 009e 1360     		str	r3, [r2]
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 745              		.loc 1 1227 5
 746 00a0 F868     		ldr	r0, [r7, #12]
 747 00a2 FFF7FEFF 		bl	prvDeleteTCB
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 748              		.loc 1 1231 5
 749 00a6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 750              	.L34:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 751              		.loc 1 1234 3
 752 00aa FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/ccv2gsms.s 			page 39


1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 753              		.loc 1 1238 25
 754 00ae 194B     		ldr	r3, .L39+28
 755 00b0 1B68     		ldr	r3, [r3]
 756              		.loc 1 1238 5
 757 00b2 002B     		cmp	r3, #0
 758 00b4 1BD0     		beq	.L38
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 759              		.loc 1 1240 14
 760 00b6 104B     		ldr	r3, .L39
 761 00b8 1B68     		ldr	r3, [r3]
 762              		.loc 1 1240 6
 763 00ba FA68     		ldr	r2, [r7, #12]
 764 00bc 9A42     		cmp	r2, r3
 765 00be 16D1     		bne	.L38
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 766              		.loc 1 1242 5
 767 00c0 154B     		ldr	r3, .L39+32
 768 00c2 1B68     		ldr	r3, [r3]
 769 00c4 002B     		cmp	r3, #0
 770 00c6 0AD0     		beq	.L36
 771              	.LBB103:
 772              	.LBB104:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 773              		.loc 2 195 2
 774              		.syntax unified
 775              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 776 00c8 4FF05003 			mov r3, #80												
 777 00cc 83F31188 		msr basepri, r3											
 778 00d0 BFF36F8F 		isb														
 779 00d4 BFF34F8F 		dsb														
 780              	
 781              	@ 0 "" 2
 782              		.thumb
 783              		.syntax unified
 784 00d8 BB60     		str	r3, [r7, #8]
 785              		.loc 2 203 1
 786 00da 00BF     		nop
 787              	.L37:
 788              	.LBE104:
 789              	.LBE103:
 790              		.loc 1 1242 5 discriminator 1
 791 00dc FEE7     		b	.L37
 792              	.L36:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 793              		.loc 1 1243 5
 794 00de 0F4B     		ldr	r3, .L39+36
 795 00e0 4FF08052 		mov	r2, #268435456
 796 00e4 1A60     		str	r2, [r3]
 797              		.syntax unified
 798              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 799 00e6 BFF34F8F 		dsb
ARM GAS  /tmp/ccv2gsms.s 			page 40


 800              	@ 0 "" 2
 801              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 802 00ea BFF36F8F 		isb
 803              	@ 0 "" 2
 804              		.thumb
 805              		.syntax unified
 806              	.L38:
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 807              		.loc 1 1250 2
 808 00ee 00BF     		nop
 809 00f0 1037     		adds	r7, r7, #16
 810              	.LCFI18:
 811              		.cfi_def_cfa_offset 8
 812 00f2 BD46     		mov	sp, r7
 813              	.LCFI19:
 814              		.cfi_def_cfa_register 13
 815              		@ sp needed
 816 00f4 80BD     		pop	{r7, pc}
 817              	.L40:
 818 00f6 00BF     		.align	2
 819              	.L39:
 820 00f8 00000000 		.word	pxCurrentTCB
 821 00fc 00000000 		.word	pxReadyTasksLists
 822 0100 00000000 		.word	uxTopReadyPriority
 823 0104 00000000 		.word	uxTaskNumber
 824 0108 00000000 		.word	xTasksWaitingTermination
 825 010c 00000000 		.word	uxDeletedTasksWaitingCleanUp
 826 0110 00000000 		.word	uxCurrentNumberOfTasks
 827 0114 00000000 		.word	xSchedulerRunning
 828 0118 00000000 		.word	uxSchedulerSuspended
 829 011c 04ED00E0 		.word	-536810236
 830              		.cfi_endproc
 831              	.LFE8:
 833              		.section	.text.vTaskDelay,"ax",%progbits
 834              		.align	1
 835              		.global	vTaskDelay
 836              		.syntax unified
 837              		.thumb
 838              		.thumb_func
 839              		.fpu fpv4-sp-d16
 841              	vTaskDelay:
 842              	.LFB9:
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
ARM GAS  /tmp/ccv2gsms.s 			page 41


1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccv2gsms.s 			page 42


1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 843              		.loc 1 1342 2
 844              		.cfi_startproc
 845              		@ args = 0, pretend = 0, frame = 16
 846              		@ frame_needed = 1, uses_anonymous_args = 0
 847 0000 80B5     		push	{r7, lr}
 848              	.LCFI20:
 849              		.cfi_def_cfa_offset 8
 850              		.cfi_offset 7, -8
 851              		.cfi_offset 14, -4
 852 0002 84B0     		sub	sp, sp, #16
 853              	.LCFI21:
 854              		.cfi_def_cfa_offset 24
 855 0004 00AF     		add	r7, sp, #0
 856              	.LCFI22:
 857              		.cfi_def_cfa_register 7
 858 0006 7860     		str	r0, [r7, #4]
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 859              		.loc 1 1343 13
 860 0008 0023     		movs	r3, #0
 861 000a FB60     		str	r3, [r7, #12]
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 862              		.loc 1 1346 5
 863 000c 7B68     		ldr	r3, [r7, #4]
 864 000e 002B     		cmp	r3, #0
 865 0010 17D0     		beq	.L42
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 866              		.loc 1 1348 4
 867 0012 134B     		ldr	r3, .L47
ARM GAS  /tmp/ccv2gsms.s 			page 43


 868 0014 1B68     		ldr	r3, [r3]
 869 0016 002B     		cmp	r3, #0
 870 0018 0AD0     		beq	.L43
 871              	.LBB105:
 872              	.LBB106:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 873              		.loc 2 195 2
 874              		.syntax unified
 875              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 876 001a 4FF05003 			mov r3, #80												
 877 001e 83F31188 		msr basepri, r3											
 878 0022 BFF36F8F 		isb														
 879 0026 BFF34F8F 		dsb														
 880              	
 881              	@ 0 "" 2
 882              		.thumb
 883              		.syntax unified
 884 002a BB60     		str	r3, [r7, #8]
 885              		.loc 2 203 1
 886 002c 00BF     		nop
 887              	.L44:
 888              	.LBE106:
 889              	.LBE105:
 890              		.loc 1 1348 4 discriminator 1
 891 002e FEE7     		b	.L44
 892              	.L43:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 893              		.loc 1 1349 4
 894 0030 FFF7FEFF 		bl	vTaskSuspendAll
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 895              		.loc 1 1360 5
 896 0034 0021     		movs	r1, #0
 897 0036 7868     		ldr	r0, [r7, #4]
 898 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 899              		.loc 1 1362 22
 900 003c FFF7FEFF 		bl	xTaskResumeAll
 901 0040 F860     		str	r0, [r7, #12]
 902              	.L42:
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
ARM GAS  /tmp/ccv2gsms.s 			page 44


1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 903              		.loc 1 1371 5
 904 0042 FB68     		ldr	r3, [r7, #12]
 905 0044 002B     		cmp	r3, #0
 906 0046 07D1     		bne	.L46
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 907              		.loc 1 1373 4
 908 0048 064B     		ldr	r3, .L47+4
 909 004a 4FF08052 		mov	r2, #268435456
 910 004e 1A60     		str	r2, [r3]
 911              		.syntax unified
 912              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 913 0050 BFF34F8F 		dsb
 914              	@ 0 "" 2
 915              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 916 0054 BFF36F8F 		isb
 917              	@ 0 "" 2
 918              		.thumb
 919              		.syntax unified
 920              	.L46:
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921              		.loc 1 1379 2
 922 0058 00BF     		nop
 923 005a 1037     		adds	r7, r7, #16
 924              	.LCFI23:
 925              		.cfi_def_cfa_offset 8
 926 005c BD46     		mov	sp, r7
 927              	.LCFI24:
 928              		.cfi_def_cfa_register 13
 929              		@ sp needed
 930 005e 80BD     		pop	{r7, pc}
 931              	.L48:
 932              		.align	2
 933              	.L47:
 934 0060 00000000 		.word	uxSchedulerSuspended
 935 0064 04ED00E0 		.word	-536810236
 936              		.cfi_endproc
 937              	.LFE9:
 939              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 940              		.align	1
 941              		.global	uxTaskPriorityGet
 942              		.syntax unified
 943              		.thumb
 944              		.thumb_func
 945              		.fpu fpv4-sp-d16
 947              	uxTaskPriorityGet:
 948              	.LFB10:
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccv2gsms.s 			page 45


1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
ARM GAS  /tmp/ccv2gsms.s 			page 46


1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 949              		.loc 1 1479 2
 950              		.cfi_startproc
 951              		@ args = 0, pretend = 0, frame = 16
 952              		@ frame_needed = 1, uses_anonymous_args = 0
 953 0000 80B5     		push	{r7, lr}
 954              	.LCFI25:
 955              		.cfi_def_cfa_offset 8
 956              		.cfi_offset 7, -8
 957              		.cfi_offset 14, -4
 958 0002 84B0     		sub	sp, sp, #16
 959              	.LCFI26:
 960              		.cfi_def_cfa_offset 24
 961 0004 00AF     		add	r7, sp, #0
 962              	.LCFI27:
 963              		.cfi_def_cfa_register 7
 964 0006 7860     		str	r0, [r7, #4]
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
ARM GAS  /tmp/ccv2gsms.s 			page 47


1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 965              		.loc 1 1483 3
 966 0008 FFF7FEFF 		bl	vPortEnterCritical
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 967              		.loc 1 1487 12
 968 000c 7B68     		ldr	r3, [r7, #4]
 969 000e 002B     		cmp	r3, #0
 970 0010 02D1     		bne	.L50
 971              		.loc 1 1487 12 is_stmt 0 discriminator 1
 972 0012 074B     		ldr	r3, .L53
 973 0014 1B68     		ldr	r3, [r3]
 974 0016 00E0     		b	.L51
 975              	.L50:
 976              		.loc 1 1487 12 discriminator 2
 977 0018 7B68     		ldr	r3, [r7, #4]
 978              	.L51:
 979              		.loc 1 1487 10 is_stmt 1 discriminator 4
 980 001a FB60     		str	r3, [r7, #12]
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 981              		.loc 1 1488 13 discriminator 4
 982 001c FB68     		ldr	r3, [r7, #12]
 983 001e DB6A     		ldr	r3, [r3, #44]
 984 0020 BB60     		str	r3, [r7, #8]
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 985              		.loc 1 1490 3 discriminator 4
 986 0022 FFF7FEFF 		bl	vPortExitCritical
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 987              		.loc 1 1492 10 discriminator 4
 988 0026 BB68     		ldr	r3, [r7, #8]
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 989              		.loc 1 1493 2 discriminator 4
 990 0028 1846     		mov	r0, r3
 991 002a 1037     		adds	r7, r7, #16
 992              	.LCFI28:
 993              		.cfi_def_cfa_offset 8
 994 002c BD46     		mov	sp, r7
 995              	.LCFI29:
 996              		.cfi_def_cfa_register 13
 997              		@ sp needed
 998 002e 80BD     		pop	{r7, pc}
 999              	.L54:
 1000              		.align	2
 1001              	.L53:
 1002 0030 00000000 		.word	pxCurrentTCB
 1003              		.cfi_endproc
 1004              	.LFE10:
 1006              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1007              		.align	1
 1008              		.global	uxTaskPriorityGetFromISR
 1009              		.syntax unified
ARM GAS  /tmp/ccv2gsms.s 			page 48


 1010              		.thumb
 1011              		.thumb_func
 1012              		.fpu fpv4-sp-d16
 1014              	uxTaskPriorityGetFromISR:
 1015              	.LFB11:
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1016              		.loc 1 1501 2
 1017              		.cfi_startproc
 1018              		@ args = 0, pretend = 0, frame = 32
 1019              		@ frame_needed = 1, uses_anonymous_args = 0
 1020 0000 80B5     		push	{r7, lr}
 1021              	.LCFI30:
 1022              		.cfi_def_cfa_offset 8
 1023              		.cfi_offset 7, -8
 1024              		.cfi_offset 14, -4
 1025 0002 88B0     		sub	sp, sp, #32
 1026              	.LCFI31:
 1027              		.cfi_def_cfa_offset 40
 1028 0004 00AF     		add	r7, sp, #0
 1029              	.LCFI32:
 1030              		.cfi_def_cfa_register 7
 1031 0006 7860     		str	r0, [r7, #4]
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1032              		.loc 1 1521 3
 1033 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1034              	.LBB107:
 1035              	.LBB108:
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
ARM GAS  /tmp/ccv2gsms.s 			page 49


 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1036              		.loc 2 211 2
 1037              		.syntax unified
 1038              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1039 000c EFF31182 			mrs r2, basepri											
 1040 0010 4FF05003 		mov r3, #80												
 1041 0014 83F31188 		msr basepri, r3											
 1042 0018 BFF36F8F 		isb														
 1043 001c BFF34F8F 		dsb														
 1044              	
 1045              	@ 0 "" 2
 1046              		.thumb
 1047              		.syntax unified
 1048 0020 3A61     		str	r2, [r7, #16]
 1049 0022 FB60     		str	r3, [r7, #12]
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1050              		.loc 2 223 9
 1051 0024 3B69     		ldr	r3, [r7, #16]
 1052              	.LBE108:
 1053              	.LBE107:
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1054              		.loc 1 1523 27
 1055 0026 FB61     		str	r3, [r7, #28]
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1056              		.loc 1 1527 12
 1057 0028 7B68     		ldr	r3, [r7, #4]
 1058 002a 002B     		cmp	r3, #0
 1059 002c 02D1     		bne	.L57
 1060              		.loc 1 1527 12 is_stmt 0 discriminator 1
 1061 002e 094B     		ldr	r3, .L60
 1062 0030 1B68     		ldr	r3, [r3]
 1063 0032 00E0     		b	.L58
 1064              	.L57:
 1065              		.loc 1 1527 12 discriminator 2
 1066 0034 7B68     		ldr	r3, [r7, #4]
 1067              	.L58:
 1068              		.loc 1 1527 10 is_stmt 1 discriminator 4
 1069 0036 BB61     		str	r3, [r7, #24]
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
ARM GAS  /tmp/ccv2gsms.s 			page 50


 1070              		.loc 1 1528 13 discriminator 4
 1071 0038 BB69     		ldr	r3, [r7, #24]
 1072 003a DB6A     		ldr	r3, [r3, #44]
 1073 003c 7B61     		str	r3, [r7, #20]
 1074 003e FB69     		ldr	r3, [r7, #28]
 1075 0040 BB60     		str	r3, [r7, #8]
 1076              	.LBB109:
 1077              	.LBB110:
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1078              		.loc 2 229 2 discriminator 4
 1079 0042 BB68     		ldr	r3, [r7, #8]
 1080              		.syntax unified
 1081              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1082 0044 83F31188 			msr basepri, r3	
 1083              	@ 0 "" 2
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1084              		.loc 2 233 1 discriminator 4
 1085              		.thumb
 1086              		.syntax unified
 1087 0048 00BF     		nop
 1088              	.LBE110:
 1089              	.LBE109:
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1090              		.loc 1 1532 10 discriminator 4
 1091 004a 7B69     		ldr	r3, [r7, #20]
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1092              		.loc 1 1533 2 discriminator 4
 1093 004c 1846     		mov	r0, r3
 1094 004e 2037     		adds	r7, r7, #32
 1095              	.LCFI33:
 1096              		.cfi_def_cfa_offset 8
 1097 0050 BD46     		mov	sp, r7
 1098              	.LCFI34:
 1099              		.cfi_def_cfa_register 13
 1100              		@ sp needed
 1101 0052 80BD     		pop	{r7, pc}
 1102              	.L61:
 1103              		.align	2
 1104              	.L60:
 1105 0054 00000000 		.word	pxCurrentTCB
 1106              		.cfi_endproc
 1107              	.LFE11:
 1109              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1110              		.align	1
 1111              		.global	vTaskPrioritySet
 1112              		.syntax unified
ARM GAS  /tmp/ccv2gsms.s 			page 51


 1113              		.thumb
 1114              		.thumb_func
 1115              		.fpu fpv4-sp-d16
 1117              	vTaskPrioritySet:
 1118              	.LFB12:
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1119              		.loc 1 1541 2
 1120              		.cfi_startproc
 1121              		@ args = 0, pretend = 0, frame = 32
 1122              		@ frame_needed = 1, uses_anonymous_args = 0
 1123 0000 80B5     		push	{r7, lr}
 1124              	.LCFI35:
 1125              		.cfi_def_cfa_offset 8
 1126              		.cfi_offset 7, -8
 1127              		.cfi_offset 14, -4
 1128 0002 88B0     		sub	sp, sp, #32
 1129              	.LCFI36:
 1130              		.cfi_def_cfa_offset 40
 1131 0004 00AF     		add	r7, sp, #0
 1132              	.LCFI37:
 1133              		.cfi_def_cfa_register 7
 1134 0006 7860     		str	r0, [r7, #4]
 1135 0008 3960     		str	r1, [r7]
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1136              		.loc 1 1544 13
 1137 000a 0023     		movs	r3, #0
 1138 000c FB61     		str	r3, [r7, #28]
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1139              		.loc 1 1546 3
 1140 000e 3B68     		ldr	r3, [r7]
 1141 0010 062B     		cmp	r3, #6
 1142 0012 0AD9     		bls	.L63
 1143              	.LBB111:
 1144              	.LBB112:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1145              		.loc 2 195 2
 1146              		.syntax unified
 1147              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1148 0014 4FF05003 			mov r3, #80												
 1149 0018 83F31188 		msr basepri, r3											
 1150 001c BFF36F8F 		isb														
 1151 0020 BFF34F8F 		dsb														
 1152              	
 1153              	@ 0 "" 2
 1154              		.thumb
 1155              		.syntax unified
 1156 0024 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccv2gsms.s 			page 52


 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1157              		.loc 2 203 1
 1158 0026 00BF     		nop
 1159              	.L64:
 1160              	.LBE112:
 1161              	.LBE111:
 1162              		.loc 1 1546 3 discriminator 1
 1163 0028 FEE7     		b	.L64
 1164              	.L63:
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1165              		.loc 1 1549 5
 1166 002a 3B68     		ldr	r3, [r7]
 1167 002c 062B     		cmp	r3, #6
 1168 002e 01D9     		bls	.L65
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1169              		.loc 1 1551 18
 1170 0030 0623     		movs	r3, #6
 1171 0032 3B60     		str	r3, [r7]
 1172              	.L65:
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1173              		.loc 1 1558 3
 1174 0034 FFF7FEFF 		bl	vPortEnterCritical
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1175              		.loc 1 1562 12
 1176 0038 7B68     		ldr	r3, [r7, #4]
 1177 003a 002B     		cmp	r3, #0
 1178 003c 02D1     		bne	.L66
 1179              		.loc 1 1562 12 is_stmt 0 discriminator 1
 1180 003e 414B     		ldr	r3, .L75
 1181 0040 1B68     		ldr	r3, [r3]
 1182 0042 00E0     		b	.L67
 1183              	.L66:
 1184              		.loc 1 1562 12 discriminator 2
 1185 0044 7B68     		ldr	r3, [r7, #4]
 1186              	.L67:
 1187              		.loc 1 1562 10 is_stmt 1 discriminator 4
 1188 0046 BB61     		str	r3, [r7, #24]
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1189              		.loc 1 1568 27 discriminator 4
 1190 0048 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/ccv2gsms.s 			page 53


 1191 004a 5B6C     		ldr	r3, [r3, #68]
 1192 004c 7B61     		str	r3, [r7, #20]
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1193              		.loc 1 1576 6 discriminator 4
 1194 004e 7A69     		ldr	r2, [r7, #20]
 1195 0050 3B68     		ldr	r3, [r7]
 1196 0052 9A42     		cmp	r2, r3
 1197 0054 6FD0     		beq	.L68
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1198              		.loc 1 1580 7
 1199 0056 3A68     		ldr	r2, [r7]
 1200 0058 7B69     		ldr	r3, [r7, #20]
 1201 005a 9A42     		cmp	r2, r3
 1202 005c 0DD9     		bls	.L69
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1203              		.loc 1 1582 16
 1204 005e 394B     		ldr	r3, .L75
 1205 0060 1B68     		ldr	r3, [r3]
 1206              		.loc 1 1582 8
 1207 0062 BA69     		ldr	r2, [r7, #24]
 1208 0064 9A42     		cmp	r2, r3
 1209 0066 0FD0     		beq	.L70
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1210              		.loc 1 1587 40
 1211 0068 364B     		ldr	r3, .L75
 1212 006a 1B68     		ldr	r3, [r3]
 1213 006c DB6A     		ldr	r3, [r3, #44]
 1214              		.loc 1 1587 9
 1215 006e 3A68     		ldr	r2, [r7]
 1216 0070 9A42     		cmp	r2, r3
 1217 0072 09D3     		bcc	.L70
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1218              		.loc 1 1589 23
 1219 0074 0123     		movs	r3, #1
 1220 0076 FB61     		str	r3, [r7, #28]
 1221 0078 06E0     		b	.L70
 1222              	.L69:
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccv2gsms.s 			page 54


1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1223              		.loc 1 1603 20
 1224 007a 324B     		ldr	r3, .L75
 1225 007c 1B68     		ldr	r3, [r3]
 1226              		.loc 1 1603 12
 1227 007e BA69     		ldr	r2, [r7, #24]
 1228 0080 9A42     		cmp	r2, r3
 1229 0082 01D1     		bne	.L70
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1230              		.loc 1 1608 21
 1231 0084 0123     		movs	r3, #1
 1232 0086 FB61     		str	r3, [r7, #28]
 1233              	.L70:
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1234              		.loc 1 1620 27
 1235 0088 BB69     		ldr	r3, [r7, #24]
 1236 008a DB6A     		ldr	r3, [r3, #44]
 1237 008c 3B61     		str	r3, [r7, #16]
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1238              		.loc 1 1626 15
 1239 008e BB69     		ldr	r3, [r7, #24]
 1240 0090 5A6C     		ldr	r2, [r3, #68]
 1241              		.loc 1 1626 40
 1242 0092 BB69     		ldr	r3, [r7, #24]
 1243 0094 DB6A     		ldr	r3, [r3, #44]
 1244              		.loc 1 1626 8
 1245 0096 9A42     		cmp	r2, r3
 1246 0098 02D1     		bne	.L71
ARM GAS  /tmp/ccv2gsms.s 			page 55


1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1247              		.loc 1 1628 25
 1248 009a BB69     		ldr	r3, [r7, #24]
 1249 009c 3A68     		ldr	r2, [r7]
 1250 009e DA62     		str	r2, [r3, #44]
 1251              	.L71:
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1252              		.loc 1 1636 28
 1253 00a0 BB69     		ldr	r3, [r7, #24]
 1254 00a2 3A68     		ldr	r2, [r7]
 1255 00a4 5A64     		str	r2, [r3, #68]
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1256              		.loc 1 1646 11
 1257 00a6 BB69     		ldr	r3, [r7, #24]
 1258 00a8 9B69     		ldr	r3, [r3, #24]
 1259              		.loc 1 1646 7
 1260 00aa 002B     		cmp	r3, #0
 1261 00ac 04DB     		blt	.L72
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1262              		.loc 1 1648 6
 1263 00ae 3B68     		ldr	r3, [r7]
 1264 00b0 C3F10702 		rsb	r2, r3, #7
 1265 00b4 BB69     		ldr	r3, [r7, #24]
 1266 00b6 9A61     		str	r2, [r3, #24]
 1267              	.L72:
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1268              		.loc 1 1659 9
 1269 00b8 BB69     		ldr	r3, [r7, #24]
 1270 00ba 5969     		ldr	r1, [r3, #20]
ARM GAS  /tmp/ccv2gsms.s 			page 56


 1271 00bc 3A69     		ldr	r2, [r7, #16]
 1272 00be 1346     		mov	r3, r2
 1273 00c0 9B00     		lsls	r3, r3, #2
 1274 00c2 1344     		add	r3, r3, r2
 1275 00c4 9B00     		lsls	r3, r3, #2
 1276 00c6 204A     		ldr	r2, .L75+4
 1277 00c8 1344     		add	r3, r3, r2
 1278              		.loc 1 1659 7
 1279 00ca 9942     		cmp	r1, r3
 1280 00cc 28D1     		bne	.L73
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1281              		.loc 1 1664 10
 1282 00ce BB69     		ldr	r3, [r7, #24]
 1283 00d0 0433     		adds	r3, r3, #4
 1284 00d2 1846     		mov	r0, r3
 1285 00d4 FFF7FEFF 		bl	uxListRemove
 1286 00d8 0346     		mov	r3, r0
 1287              		.loc 1 1664 8
 1288 00da 002B     		cmp	r3, #0
 1289 00dc 09D1     		bne	.L74
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1290              		.loc 1 1669 7
 1291 00de 0122     		movs	r2, #1
 1292 00e0 3B69     		ldr	r3, [r7, #16]
 1293 00e2 02FA03F3 		lsl	r3, r2, r3
 1294 00e6 DA43     		mvns	r2, r3
 1295 00e8 184B     		ldr	r3, .L75+8
 1296 00ea 1B68     		ldr	r3, [r3]
 1297 00ec 1340     		ands	r3, r3, r2
 1298 00ee 174A     		ldr	r2, .L75+8
 1299 00f0 1360     		str	r3, [r2]
 1300              	.L74:
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1301              		.loc 1 1675 6
 1302 00f2 BB69     		ldr	r3, [r7, #24]
 1303 00f4 DB6A     		ldr	r3, [r3, #44]
 1304 00f6 0122     		movs	r2, #1
 1305 00f8 9A40     		lsls	r2, r2, r3
 1306 00fa 144B     		ldr	r3, .L75+8
 1307 00fc 1B68     		ldr	r3, [r3]
 1308 00fe 1343     		orrs	r3, r3, r2
 1309 0100 124A     		ldr	r2, .L75+8
 1310 0102 1360     		str	r3, [r2]
 1311 0104 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/ccv2gsms.s 			page 57


 1312 0106 DA6A     		ldr	r2, [r3, #44]
 1313 0108 1346     		mov	r3, r2
 1314 010a 9B00     		lsls	r3, r3, #2
 1315 010c 1344     		add	r3, r3, r2
 1316 010e 9B00     		lsls	r3, r3, #2
 1317 0110 0D4A     		ldr	r2, .L75+4
 1318 0112 1A44     		add	r2, r2, r3
 1319 0114 BB69     		ldr	r3, [r7, #24]
 1320 0116 0433     		adds	r3, r3, #4
 1321 0118 1946     		mov	r1, r3
 1322 011a 1046     		mov	r0, r2
 1323 011c FFF7FEFF 		bl	vListInsertEnd
 1324              	.L73:
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1325              		.loc 1 1682 7
 1326 0120 FB69     		ldr	r3, [r7, #28]
 1327 0122 002B     		cmp	r3, #0
 1328 0124 07D0     		beq	.L68
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1329              		.loc 1 1684 6
 1330 0126 0A4B     		ldr	r3, .L75+12
 1331 0128 4FF08052 		mov	r2, #268435456
 1332 012c 1A60     		str	r2, [r3]
 1333              		.syntax unified
 1334              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1335 012e BFF34F8F 		dsb
 1336              	@ 0 "" 2
 1337              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1338 0132 BFF36F8F 		isb
 1339              	@ 0 "" 2
 1340              		.thumb
 1341              		.syntax unified
 1342              	.L68:
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1343              		.loc 1 1696 3
 1344 0136 FFF7FEFF 		bl	vPortExitCritical
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1345              		.loc 1 1697 2
 1346 013a 00BF     		nop
ARM GAS  /tmp/ccv2gsms.s 			page 58


 1347 013c 2037     		adds	r7, r7, #32
 1348              	.LCFI38:
 1349              		.cfi_def_cfa_offset 8
 1350 013e BD46     		mov	sp, r7
 1351              	.LCFI39:
 1352              		.cfi_def_cfa_register 13
 1353              		@ sp needed
 1354 0140 80BD     		pop	{r7, pc}
 1355              	.L76:
 1356 0142 00BF     		.align	2
 1357              	.L75:
 1358 0144 00000000 		.word	pxCurrentTCB
 1359 0148 00000000 		.word	pxReadyTasksLists
 1360 014c 00000000 		.word	uxTopReadyPriority
 1361 0150 04ED00E0 		.word	-536810236
 1362              		.cfi_endproc
 1363              	.LFE12:
 1365              		.section	.text.vTaskSuspend,"ax",%progbits
 1366              		.align	1
 1367              		.global	vTaskSuspend
 1368              		.syntax unified
 1369              		.thumb
 1370              		.thumb_func
 1371              		.fpu fpv4-sp-d16
 1373              	vTaskSuspend:
 1374              	.LFB13:
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1375              		.loc 1 1705 2
 1376              		.cfi_startproc
 1377              		@ args = 0, pretend = 0, frame = 16
 1378              		@ frame_needed = 1, uses_anonymous_args = 0
 1379 0000 80B5     		push	{r7, lr}
 1380              	.LCFI40:
 1381              		.cfi_def_cfa_offset 8
 1382              		.cfi_offset 7, -8
 1383              		.cfi_offset 14, -4
 1384 0002 84B0     		sub	sp, sp, #16
 1385              	.LCFI41:
 1386              		.cfi_def_cfa_offset 24
 1387 0004 00AF     		add	r7, sp, #0
 1388              	.LCFI42:
 1389              		.cfi_def_cfa_register 7
 1390 0006 7860     		str	r0, [r7, #4]
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1391              		.loc 1 1708 3
 1392 0008 FFF7FEFF 		bl	vPortEnterCritical
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
ARM GAS  /tmp/ccv2gsms.s 			page 59


1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1393              		.loc 1 1712 12
 1394 000c 7B68     		ldr	r3, [r7, #4]
 1395 000e 002B     		cmp	r3, #0
 1396 0010 02D1     		bne	.L78
 1397              		.loc 1 1712 12 is_stmt 0 discriminator 1
 1398 0012 3C4B     		ldr	r3, .L90
 1399 0014 1B68     		ldr	r3, [r3]
 1400 0016 00E0     		b	.L79
 1401              	.L78:
 1402              		.loc 1 1712 12 discriminator 2
 1403 0018 7B68     		ldr	r3, [r7, #4]
 1404              	.L79:
 1405              		.loc 1 1712 10 is_stmt 1 discriminator 4
 1406 001a FB60     		str	r3, [r7, #12]
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1407              		.loc 1 1718 8 discriminator 4
 1408 001c FB68     		ldr	r3, [r7, #12]
 1409 001e 0433     		adds	r3, r3, #4
 1410 0020 1846     		mov	r0, r3
 1411 0022 FFF7FEFF 		bl	uxListRemove
 1412 0026 0346     		mov	r3, r0
 1413              		.loc 1 1718 6 discriminator 4
 1414 0028 002B     		cmp	r3, #0
 1415 002a 15D1     		bne	.L80
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1416              		.loc 1 1720 5
 1417 002c FB68     		ldr	r3, [r7, #12]
 1418 002e DA6A     		ldr	r2, [r3, #44]
 1419 0030 3549     		ldr	r1, .L90+4
 1420 0032 1346     		mov	r3, r2
 1421 0034 9B00     		lsls	r3, r3, #2
 1422 0036 1344     		add	r3, r3, r2
 1423 0038 9B00     		lsls	r3, r3, #2
 1424 003a 0B44     		add	r3, r3, r1
 1425 003c 1B68     		ldr	r3, [r3]
 1426 003e 002B     		cmp	r3, #0
 1427 0040 0AD1     		bne	.L80
 1428              		.loc 1 1720 5 is_stmt 0 discriminator 1
 1429 0042 FB68     		ldr	r3, [r7, #12]
 1430 0044 DB6A     		ldr	r3, [r3, #44]
 1431 0046 0122     		movs	r2, #1
 1432 0048 02FA03F3 		lsl	r3, r2, r3
 1433 004c DA43     		mvns	r2, r3
 1434 004e 2F4B     		ldr	r3, .L90+8
 1435 0050 1B68     		ldr	r3, [r3]
 1436 0052 1340     		ands	r3, r3, r2
 1437 0054 2D4A     		ldr	r2, .L90+8
 1438 0056 1360     		str	r3, [r2]
 1439              	.L80:
ARM GAS  /tmp/ccv2gsms.s 			page 60


1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1440              		.loc 1 1728 8 is_stmt 1
 1441 0058 FB68     		ldr	r3, [r7, #12]
 1442 005a 9B6A     		ldr	r3, [r3, #40]
 1443              		.loc 1 1728 6
 1444 005c 002B     		cmp	r3, #0
 1445 005e 04D0     		beq	.L81
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1446              		.loc 1 1730 14
 1447 0060 FB68     		ldr	r3, [r7, #12]
 1448 0062 1833     		adds	r3, r3, #24
 1449 0064 1846     		mov	r0, r3
 1450 0066 FFF7FEFF 		bl	uxListRemove
 1451              	.L81:
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1452              		.loc 1 1737 4
 1453 006a FB68     		ldr	r3, [r7, #12]
 1454 006c 0433     		adds	r3, r3, #4
 1455 006e 1946     		mov	r1, r3
 1456 0070 2748     		ldr	r0, .L90+12
 1457 0072 FFF7FEFF 		bl	vListInsertEnd
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1458              		.loc 1 1741 14
 1459 0076 FB68     		ldr	r3, [r7, #12]
 1460 0078 93F85030 		ldrb	r3, [r3, #80]
 1461 007c DBB2     		uxtb	r3, r3
 1462              		.loc 1 1741 7
 1463 007e 012B     		cmp	r3, #1
 1464 0080 03D1     		bne	.L82
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1465              		.loc 1 1745 27
 1466 0082 FB68     		ldr	r3, [r7, #12]
 1467 0084 0022     		movs	r2, #0
 1468 0086 83F85020 		strb	r2, [r3, #80]
 1469              	.L82:
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccv2gsms.s 			page 61


1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1470              		.loc 1 1750 3
 1471 008a FFF7FEFF 		bl	vPortExitCritical
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1472              		.loc 1 1752 25
 1473 008e 214B     		ldr	r3, .L90+16
 1474 0090 1B68     		ldr	r3, [r3]
 1475              		.loc 1 1752 5
 1476 0092 002B     		cmp	r3, #0
 1477 0094 05D0     		beq	.L83
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1478              		.loc 1 1756 4
 1479 0096 FFF7FEFF 		bl	vPortEnterCritical
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1480              		.loc 1 1758 5
 1481 009a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1482              		.loc 1 1760 4
 1483 009e FFF7FEFF 		bl	vPortExitCritical
 1484              	.L83:
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1485              		.loc 1 1767 13
 1486 00a2 184B     		ldr	r3, .L90
 1487 00a4 1B68     		ldr	r3, [r3]
 1488              		.loc 1 1767 5
 1489 00a6 FA68     		ldr	r2, [r7, #12]
 1490 00a8 9A42     		cmp	r2, r3
 1491 00aa 27D1     		bne	.L89
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1492              		.loc 1 1769 26
 1493 00ac 194B     		ldr	r3, .L90+16
 1494 00ae 1B68     		ldr	r3, [r3]
 1495              		.loc 1 1769 6
 1496 00b0 002B     		cmp	r3, #0
 1497 00b2 17D0     		beq	.L85
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1498              		.loc 1 1772 5
 1499 00b4 184B     		ldr	r3, .L90+20
 1500 00b6 1B68     		ldr	r3, [r3]
 1501 00b8 002B     		cmp	r3, #0
ARM GAS  /tmp/ccv2gsms.s 			page 62


 1502 00ba 0AD0     		beq	.L86
 1503              	.LBB113:
 1504              	.LBB114:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1505              		.loc 2 195 2
 1506              		.syntax unified
 1507              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1508 00bc 4FF05003 			mov r3, #80												
 1509 00c0 83F31188 		msr basepri, r3											
 1510 00c4 BFF36F8F 		isb														
 1511 00c8 BFF34F8F 		dsb														
 1512              	
 1513              	@ 0 "" 2
 1514              		.thumb
 1515              		.syntax unified
 1516 00cc BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1517              		.loc 2 203 1
 1518 00ce 00BF     		nop
 1519              	.L87:
 1520              	.LBE114:
 1521              	.LBE113:
 1522              		.loc 1 1772 5 discriminator 1
 1523 00d0 FEE7     		b	.L87
 1524              	.L86:
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1525              		.loc 1 1773 5
 1526 00d2 124B     		ldr	r3, .L90+24
 1527 00d4 4FF08052 		mov	r2, #268435456
 1528 00d8 1A60     		str	r2, [r3]
 1529              		.syntax unified
 1530              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1531 00da BFF34F8F 		dsb
 1532              	@ 0 "" 2
 1533              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1534 00de BFF36F8F 		isb
 1535              	@ 0 "" 2
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccv2gsms.s 			page 63


1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1536              		.loc 1 1798 2
 1537              		.thumb
 1538              		.syntax unified
 1539 00e2 0BE0     		b	.L89
 1540              	.L85:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1541              		.loc 1 1780 9
 1542 00e4 0A4B     		ldr	r3, .L90+12
 1543 00e6 1A68     		ldr	r2, [r3]
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1544              		.loc 1 1780 56
 1545 00e8 0D4B     		ldr	r3, .L90+28
 1546 00ea 1B68     		ldr	r3, [r3]
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1547              		.loc 1 1780 7
 1548 00ec 9A42     		cmp	r2, r3
 1549 00ee 03D1     		bne	.L88
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1550              		.loc 1 1786 19
 1551 00f0 044B     		ldr	r3, .L90
 1552 00f2 0022     		movs	r2, #0
 1553 00f4 1A60     		str	r2, [r3]
 1554              		.loc 1 1798 2
 1555 00f6 01E0     		b	.L89
 1556              	.L88:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1557              		.loc 1 1790 6
 1558 00f8 FFF7FEFF 		bl	vTaskSwitchContext
 1559              	.L89:
 1560              		.loc 1 1798 2
 1561 00fc 00BF     		nop
 1562 00fe 1037     		adds	r7, r7, #16
 1563              	.LCFI43:
 1564              		.cfi_def_cfa_offset 8
 1565 0100 BD46     		mov	sp, r7
 1566              	.LCFI44:
 1567              		.cfi_def_cfa_register 13
 1568              		@ sp needed
 1569 0102 80BD     		pop	{r7, pc}
 1570              	.L91:
 1571              		.align	2
 1572              	.L90:
 1573 0104 00000000 		.word	pxCurrentTCB
 1574 0108 00000000 		.word	pxReadyTasksLists
 1575 010c 00000000 		.word	uxTopReadyPriority
 1576 0110 00000000 		.word	xSuspendedTaskList
 1577 0114 00000000 		.word	xSchedulerRunning
 1578 0118 00000000 		.word	uxSchedulerSuspended
 1579 011c 04ED00E0 		.word	-536810236
 1580 0120 00000000 		.word	uxCurrentNumberOfTasks
 1581              		.cfi_endproc
 1582              	.LFE13:
ARM GAS  /tmp/ccv2gsms.s 			page 64


 1584              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1585              		.align	1
 1586              		.syntax unified
 1587              		.thumb
 1588              		.thumb_func
 1589              		.fpu fpv4-sp-d16
 1591              	prvTaskIsTaskSuspended:
 1592              	.LFB14:
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1593              		.loc 1 1806 2
 1594              		.cfi_startproc
 1595              		@ args = 0, pretend = 0, frame = 24
 1596              		@ frame_needed = 1, uses_anonymous_args = 0
 1597              		@ link register save eliminated.
 1598 0000 80B4     		push	{r7}
 1599              	.LCFI45:
 1600              		.cfi_def_cfa_offset 4
 1601              		.cfi_offset 7, -4
 1602 0002 87B0     		sub	sp, sp, #28
 1603              	.LCFI46:
 1604              		.cfi_def_cfa_offset 32
 1605 0004 00AF     		add	r7, sp, #0
 1606              	.LCFI47:
 1607              		.cfi_def_cfa_register 7
 1608 0006 7860     		str	r0, [r7, #4]
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1609              		.loc 1 1807 13
 1610 0008 0023     		movs	r3, #0
 1611 000a 7B61     		str	r3, [r7, #20]
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1612              		.loc 1 1808 22
 1613 000c 7B68     		ldr	r3, [r7, #4]
 1614 000e 3B61     		str	r3, [r7, #16]
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 1615              		.loc 1 1814 3
 1616 0010 7B68     		ldr	r3, [r7, #4]
 1617 0012 002B     		cmp	r3, #0
 1618 0014 0AD1     		bne	.L93
 1619              	.LBB115:
 1620              	.LBB116:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1621              		.loc 2 195 2
 1622              		.syntax unified
 1623              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1624 0016 4FF05003 			mov r3, #80												
ARM GAS  /tmp/ccv2gsms.s 			page 65


 1625 001a 83F31188 		msr basepri, r3											
 1626 001e BFF36F8F 		isb														
 1627 0022 BFF34F8F 		dsb														
 1628              	
 1629              	@ 0 "" 2
 1630              		.thumb
 1631              		.syntax unified
 1632 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1633              		.loc 2 203 1
 1634 0028 00BF     		nop
 1635              	.L94:
 1636              	.LBE116:
 1637              	.LBE115:
 1638              		.loc 1 1814 3 discriminator 1
 1639 002a FEE7     		b	.L94
 1640              	.L93:
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1641              		.loc 1 1817 7
 1642 002c 3B69     		ldr	r3, [r7, #16]
 1643 002e 5B69     		ldr	r3, [r3, #20]
 1644              		.loc 1 1817 5
 1645 0030 0A4A     		ldr	r2, .L97
 1646 0032 9342     		cmp	r3, r2
 1647 0034 0AD1     		bne	.L95
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1648              		.loc 1 1820 8
 1649 0036 3B69     		ldr	r3, [r7, #16]
 1650 0038 9B6A     		ldr	r3, [r3, #40]
 1651              		.loc 1 1820 6
 1652 003a 094A     		ldr	r2, .L97+4
 1653 003c 9342     		cmp	r3, r2
 1654 003e 05D0     		beq	.L95
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 1655              		.loc 1 1824 9
 1656 0040 3B69     		ldr	r3, [r7, #16]
 1657 0042 9B6A     		ldr	r3, [r3, #40]
 1658              		.loc 1 1824 7
 1659 0044 002B     		cmp	r3, #0
 1660 0046 01D1     		bne	.L95
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 1661              		.loc 1 1826 14
 1662 0048 0123     		movs	r3, #1
 1663 004a 7B61     		str	r3, [r7, #20]
 1664              	.L95:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccv2gsms.s 			page 66


1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 1665              		.loc 1 1843 10
 1666 004c 7B69     		ldr	r3, [r7, #20]
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1667              		.loc 1 1844 2
 1668 004e 1846     		mov	r0, r3
 1669 0050 1C37     		adds	r7, r7, #28
 1670              	.LCFI48:
 1671              		.cfi_def_cfa_offset 4
 1672 0052 BD46     		mov	sp, r7
 1673              	.LCFI49:
 1674              		.cfi_def_cfa_register 13
 1675              		@ sp needed
 1676 0054 5DF8047B 		ldr	r7, [sp], #4
 1677              	.LCFI50:
 1678              		.cfi_restore 7
 1679              		.cfi_def_cfa_offset 0
 1680 0058 7047     		bx	lr
 1681              	.L98:
 1682 005a 00BF     		.align	2
 1683              	.L97:
 1684 005c 00000000 		.word	xSuspendedTaskList
 1685 0060 00000000 		.word	xPendingReadyList
 1686              		.cfi_endproc
 1687              	.LFE14:
 1689              		.section	.text.vTaskResume,"ax",%progbits
 1690              		.align	1
 1691              		.global	vTaskResume
 1692              		.syntax unified
 1693              		.thumb
 1694              		.thumb_func
 1695              		.fpu fpv4-sp-d16
 1697              	vTaskResume:
 1698              	.LFB15:
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1699              		.loc 1 1852 2
 1700              		.cfi_startproc
 1701              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccv2gsms.s 			page 67


 1702              		@ frame_needed = 1, uses_anonymous_args = 0
 1703 0000 80B5     		push	{r7, lr}
 1704              	.LCFI51:
 1705              		.cfi_def_cfa_offset 8
 1706              		.cfi_offset 7, -8
 1707              		.cfi_offset 14, -4
 1708 0002 84B0     		sub	sp, sp, #16
 1709              	.LCFI52:
 1710              		.cfi_def_cfa_offset 24
 1711 0004 00AF     		add	r7, sp, #0
 1712              	.LCFI53:
 1713              		.cfi_def_cfa_register 7
 1714 0006 7860     		str	r0, [r7, #4]
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1715              		.loc 1 1853 16
 1716 0008 7B68     		ldr	r3, [r7, #4]
 1717 000a FB60     		str	r3, [r7, #12]
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 1718              		.loc 1 1856 3
 1719 000c 7B68     		ldr	r3, [r7, #4]
 1720 000e 002B     		cmp	r3, #0
 1721 0010 0AD1     		bne	.L100
 1722              	.LBB117:
 1723              	.LBB118:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1724              		.loc 2 195 2
 1725              		.syntax unified
 1726              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1727 0012 4FF05003 			mov r3, #80												
 1728 0016 83F31188 		msr basepri, r3											
 1729 001a BFF36F8F 		isb														
 1730 001e BFF34F8F 		dsb														
 1731              	
 1732              	@ 0 "" 2
 1733              		.thumb
 1734              		.syntax unified
 1735 0022 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1736              		.loc 2 203 1
 1737 0024 00BF     		nop
 1738              	.L101:
 1739              	.LBE118:
 1740              	.LBE117:
 1741              		.loc 1 1856 3 discriminator 1
 1742 0026 FEE7     		b	.L101
 1743              	.L100:
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 1744              		.loc 1 1860 15
 1745 0028 204B     		ldr	r3, .L105
 1746 002a 1B68     		ldr	r3, [r3]
 1747              		.loc 1 1860 5
 1748 002c FA68     		ldr	r2, [r7, #12]
ARM GAS  /tmp/ccv2gsms.s 			page 68


 1749 002e 9A42     		cmp	r2, r3
 1750 0030 37D0     		beq	.L104
 1751              		.loc 1 1860 33 discriminator 1
 1752 0032 FB68     		ldr	r3, [r7, #12]
 1753 0034 002B     		cmp	r3, #0
 1754 0036 34D0     		beq	.L104
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1755              		.loc 1 1862 4
 1756 0038 FFF7FEFF 		bl	vPortEnterCritical
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1757              		.loc 1 1864 9
 1758 003c F868     		ldr	r0, [r7, #12]
 1759 003e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1760 0042 0346     		mov	r3, r0
 1761              		.loc 1 1864 7
 1762 0044 002B     		cmp	r3, #0
 1763 0046 2AD0     		beq	.L103
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1764              		.loc 1 1870 15
 1765 0048 FB68     		ldr	r3, [r7, #12]
 1766 004a 0433     		adds	r3, r3, #4
 1767 004c 1846     		mov	r0, r3
 1768 004e FFF7FEFF 		bl	uxListRemove
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1769              		.loc 1 1871 6
 1770 0052 FB68     		ldr	r3, [r7, #12]
 1771 0054 DB6A     		ldr	r3, [r3, #44]
 1772 0056 0122     		movs	r2, #1
 1773 0058 9A40     		lsls	r2, r2, r3
 1774 005a 154B     		ldr	r3, .L105+4
 1775 005c 1B68     		ldr	r3, [r3]
 1776 005e 1343     		orrs	r3, r3, r2
 1777 0060 134A     		ldr	r2, .L105+4
 1778 0062 1360     		str	r3, [r2]
 1779 0064 FB68     		ldr	r3, [r7, #12]
 1780 0066 DA6A     		ldr	r2, [r3, #44]
 1781 0068 1346     		mov	r3, r2
 1782 006a 9B00     		lsls	r3, r3, #2
 1783 006c 1344     		add	r3, r3, r2
 1784 006e 9B00     		lsls	r3, r3, #2
 1785 0070 104A     		ldr	r2, .L105+8
 1786 0072 1A44     		add	r2, r2, r3
 1787 0074 FB68     		ldr	r3, [r7, #12]
 1788 0076 0433     		adds	r3, r3, #4
 1789 0078 1946     		mov	r1, r3
 1790 007a 1046     		mov	r0, r2
 1791 007c FFF7FEFF 		bl	vListInsertEnd
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
ARM GAS  /tmp/ccv2gsms.s 			page 69


 1792              		.loc 1 1874 15
 1793 0080 FB68     		ldr	r3, [r7, #12]
 1794 0082 DA6A     		ldr	r2, [r3, #44]
 1795              		.loc 1 1874 43
 1796 0084 094B     		ldr	r3, .L105
 1797 0086 1B68     		ldr	r3, [r3]
 1798 0088 DB6A     		ldr	r3, [r3, #44]
 1799              		.loc 1 1874 8
 1800 008a 9A42     		cmp	r2, r3
 1801 008c 07D3     		bcc	.L103
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1802              		.loc 1 1879 7
 1803 008e 0A4B     		ldr	r3, .L105+12
 1804 0090 4FF08052 		mov	r2, #268435456
 1805 0094 1A60     		str	r2, [r3]
 1806              		.syntax unified
 1807              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1808 0096 BFF34F8F 		dsb
 1809              	@ 0 "" 2
 1810              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1811 009a BFF36F8F 		isb
 1812              	@ 0 "" 2
 1813              		.thumb
 1814              		.syntax unified
 1815              	.L103:
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1816              		.loc 1 1891 4
 1817 009e FFF7FEFF 		bl	vPortExitCritical
 1818              	.L104:
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1819              		.loc 1 1897 2
 1820 00a2 00BF     		nop
 1821 00a4 1037     		adds	r7, r7, #16
 1822              	.LCFI54:
 1823              		.cfi_def_cfa_offset 8
 1824 00a6 BD46     		mov	sp, r7
 1825              	.LCFI55:
ARM GAS  /tmp/ccv2gsms.s 			page 70


 1826              		.cfi_def_cfa_register 13
 1827              		@ sp needed
 1828 00a8 80BD     		pop	{r7, pc}
 1829              	.L106:
 1830 00aa 00BF     		.align	2
 1831              	.L105:
 1832 00ac 00000000 		.word	pxCurrentTCB
 1833 00b0 00000000 		.word	uxTopReadyPriority
 1834 00b4 00000000 		.word	pxReadyTasksLists
 1835 00b8 04ED00E0 		.word	-536810236
 1836              		.cfi_endproc
 1837              	.LFE15:
 1839              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1840              		.align	1
 1841              		.global	xTaskResumeFromISR
 1842              		.syntax unified
 1843              		.thumb
 1844              		.thumb_func
 1845              		.fpu fpv4-sp-d16
 1847              	xTaskResumeFromISR:
 1848              	.LFB16:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1849              		.loc 1 1906 2
 1850              		.cfi_startproc
 1851              		@ args = 0, pretend = 0, frame = 40
 1852              		@ frame_needed = 1, uses_anonymous_args = 0
 1853 0000 80B5     		push	{r7, lr}
 1854              	.LCFI56:
 1855              		.cfi_def_cfa_offset 8
 1856              		.cfi_offset 7, -8
 1857              		.cfi_offset 14, -4
 1858 0002 8AB0     		sub	sp, sp, #40
 1859              	.LCFI57:
 1860              		.cfi_def_cfa_offset 48
 1861 0004 00AF     		add	r7, sp, #0
 1862              	.LCFI58:
 1863              		.cfi_def_cfa_register 7
 1864 0006 7860     		str	r0, [r7, #4]
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1865              		.loc 1 1907 13
 1866 0008 0023     		movs	r3, #0
 1867 000a 7B62     		str	r3, [r7, #36]
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1868              		.loc 1 1908 16
 1869 000c 7B68     		ldr	r3, [r7, #4]
 1870 000e 3B62     		str	r3, [r7, #32]
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
ARM GAS  /tmp/ccv2gsms.s 			page 71


 1871              		.loc 1 1911 3
 1872 0010 7B68     		ldr	r3, [r7, #4]
 1873 0012 002B     		cmp	r3, #0
 1874 0014 0AD1     		bne	.L108
 1875              	.LBB119:
 1876              	.LBB120:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1877              		.loc 2 195 2
 1878              		.syntax unified
 1879              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1880 0016 4FF05003 			mov r3, #80												
 1881 001a 83F31188 		msr basepri, r3											
 1882 001e BFF36F8F 		isb														
 1883 0022 BFF34F8F 		dsb														
 1884              	
 1885              	@ 0 "" 2
 1886              		.thumb
 1887              		.syntax unified
 1888 0026 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1889              		.loc 2 203 1
 1890 0028 00BF     		nop
 1891              	.L109:
 1892              	.LBE120:
 1893              	.LBE119:
 1894              		.loc 1 1911 3 discriminator 1
 1895 002a FEE7     		b	.L109
 1896              	.L108:
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1897              		.loc 1 1929 3
 1898 002c FFF7FEFF 		bl	vPortValidateInterruptPriority
 1899              	.LBB121:
 1900              	.LBB122:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1901              		.loc 2 211 2
 1902              		.syntax unified
 1903              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1904 0030 EFF31182 			mrs r2, basepri											
 1905 0034 4FF05003 		mov r3, #80												
 1906 0038 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccv2gsms.s 			page 72


 1907 003c BFF36F8F 		isb														
 1908 0040 BFF34F8F 		dsb														
 1909              	
 1910              	@ 0 "" 2
 1911              		.thumb
 1912              		.syntax unified
 1913 0044 7A61     		str	r2, [r7, #20]
 1914 0046 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1915              		.loc 2 223 9
 1916 0048 7B69     		ldr	r3, [r7, #20]
 1917              	.LBE122:
 1918              	.LBE121:
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1919              		.loc 1 1931 28
 1920 004a FB61     		str	r3, [r7, #28]
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1921              		.loc 1 1933 8
 1922 004c 386A     		ldr	r0, [r7, #32]
 1923 004e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1924 0052 0346     		mov	r3, r0
 1925              		.loc 1 1933 6
 1926 0054 002B     		cmp	r3, #0
 1927 0056 2FD0     		beq	.L111
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1928              		.loc 1 1938 30
 1929 0058 1D4B     		ldr	r3, .L115
 1930 005a 1B68     		ldr	r3, [r3]
 1931              		.loc 1 1938 7
 1932 005c 002B     		cmp	r3, #0
 1933 005e 25D1     		bne	.L112
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1934              		.loc 1 1942 15
 1935 0060 3B6A     		ldr	r3, [r7, #32]
 1936 0062 DA6A     		ldr	r2, [r3, #44]
 1937              		.loc 1 1942 43
 1938 0064 1B4B     		ldr	r3, .L115+4
 1939 0066 1B68     		ldr	r3, [r3]
 1940 0068 DB6A     		ldr	r3, [r3, #44]
 1941              		.loc 1 1942 8
 1942 006a 9A42     		cmp	r2, r3
 1943 006c 01D3     		bcc	.L113
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1944              		.loc 1 1944 22
 1945 006e 0123     		movs	r3, #1
 1946 0070 7B62     		str	r3, [r7, #36]
 1947              	.L113:
ARM GAS  /tmp/ccv2gsms.s 			page 73


1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1948              		.loc 1 1951 15
 1949 0072 3B6A     		ldr	r3, [r7, #32]
 1950 0074 0433     		adds	r3, r3, #4
 1951 0076 1846     		mov	r0, r3
 1952 0078 FFF7FEFF 		bl	uxListRemove
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1953              		.loc 1 1952 6
 1954 007c 3B6A     		ldr	r3, [r7, #32]
 1955 007e DB6A     		ldr	r3, [r3, #44]
 1956 0080 0122     		movs	r2, #1
 1957 0082 9A40     		lsls	r2, r2, r3
 1958 0084 144B     		ldr	r3, .L115+8
 1959 0086 1B68     		ldr	r3, [r3]
 1960 0088 1343     		orrs	r3, r3, r2
 1961 008a 134A     		ldr	r2, .L115+8
 1962 008c 1360     		str	r3, [r2]
 1963 008e 3B6A     		ldr	r3, [r7, #32]
 1964 0090 DA6A     		ldr	r2, [r3, #44]
 1965 0092 1346     		mov	r3, r2
 1966 0094 9B00     		lsls	r3, r3, #2
 1967 0096 1344     		add	r3, r3, r2
 1968 0098 9B00     		lsls	r3, r3, #2
 1969 009a 104A     		ldr	r2, .L115+12
 1970 009c 1A44     		add	r2, r2, r3
 1971 009e 3B6A     		ldr	r3, [r7, #32]
 1972 00a0 0433     		adds	r3, r3, #4
 1973 00a2 1946     		mov	r1, r3
 1974 00a4 1046     		mov	r0, r2
 1975 00a6 FFF7FEFF 		bl	vListInsertEnd
 1976 00aa 05E0     		b	.L111
 1977              	.L112:
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1978              		.loc 1 1959 6
 1979 00ac 3B6A     		ldr	r3, [r7, #32]
 1980 00ae 1833     		adds	r3, r3, #24
 1981 00b0 1946     		mov	r1, r3
 1982 00b2 0B48     		ldr	r0, .L115+16
 1983 00b4 FFF7FEFF 		bl	vListInsertEnd
 1984              	.L111:
 1985 00b8 FB69     		ldr	r3, [r7, #28]
 1986 00ba FB60     		str	r3, [r7, #12]
 1987              	.LBB123:
 1988              	.LBB124:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /tmp/ccv2gsms.s 			page 74


 1989              		.loc 2 229 2
 1990 00bc FB68     		ldr	r3, [r7, #12]
 1991              		.syntax unified
 1992              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1993 00be 83F31188 			msr basepri, r3	
 1994              	@ 0 "" 2
 1995              		.loc 2 233 1
 1996              		.thumb
 1997              		.syntax unified
 1998 00c2 00BF     		nop
 1999              	.LBE124:
 2000              	.LBE123:
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 2001              		.loc 1 1969 10
 2002 00c4 7B6A     		ldr	r3, [r7, #36]
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2003              		.loc 1 1970 2
 2004 00c6 1846     		mov	r0, r3
 2005 00c8 2837     		adds	r7, r7, #40
 2006              	.LCFI59:
 2007              		.cfi_def_cfa_offset 8
 2008 00ca BD46     		mov	sp, r7
 2009              	.LCFI60:
 2010              		.cfi_def_cfa_register 13
 2011              		@ sp needed
 2012 00cc 80BD     		pop	{r7, pc}
 2013              	.L116:
 2014 00ce 00BF     		.align	2
 2015              	.L115:
 2016 00d0 00000000 		.word	uxSchedulerSuspended
 2017 00d4 00000000 		.word	pxCurrentTCB
 2018 00d8 00000000 		.word	uxTopReadyPriority
 2019 00dc 00000000 		.word	pxReadyTasksLists
 2020 00e0 00000000 		.word	xPendingReadyList
 2021              		.cfi_endproc
 2022              	.LFE16:
 2024              		.section	.rodata
 2025              		.align	2
 2026              	.LC0:
 2027 0000 49444C45 		.ascii	"IDLE\000"
 2027      00
 2028              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2029              		.align	1
 2030              		.global	vTaskStartScheduler
 2031              		.syntax unified
 2032              		.thumb
 2033              		.thumb_func
 2034              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccv2gsms.s 			page 75


 2036              	vTaskStartScheduler:
 2037              	.LFB17:
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2038              		.loc 1 1976 1
 2039              		.cfi_startproc
 2040              		@ args = 0, pretend = 0, frame = 16
 2041              		@ frame_needed = 1, uses_anonymous_args = 0
 2042 0000 80B5     		push	{r7, lr}
 2043              	.LCFI61:
 2044              		.cfi_def_cfa_offset 8
 2045              		.cfi_offset 7, -8
 2046              		.cfi_offset 14, -4
 2047 0002 86B0     		sub	sp, sp, #24
 2048              	.LCFI62:
 2049              		.cfi_def_cfa_offset 32
 2050 0004 02AF     		add	r7, sp, #8
 2051              	.LCFI63:
 2052              		.cfi_def_cfa 7, 24
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
 2053              		.loc 1 2009 13
ARM GAS  /tmp/ccv2gsms.s 			page 76


 2054 0006 1C4B     		ldr	r3, .L122
 2055 0008 0193     		str	r3, [sp, #4]
 2056 000a 0023     		movs	r3, #0
 2057 000c 0093     		str	r3, [sp]
 2058 000e 0023     		movs	r3, #0
 2059 0010 4FF48072 		mov	r2, #256
 2060 0014 1949     		ldr	r1, .L122+4
 2061 0016 1A48     		ldr	r0, .L122+8
 2062 0018 FFF7FEFF 		bl	xTaskCreate
 2063 001c F860     		str	r0, [r7, #12]
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2064              		.loc 1 2031 4
 2065 001e FB68     		ldr	r3, [r7, #12]
 2066 0020 012B     		cmp	r3, #1
 2067 0022 16D1     		bne	.L118
 2068              	.LBB125:
 2069              	.LBB126:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2070              		.loc 2 195 2
 2071              		.syntax unified
 2072              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2073 0024 4FF05003 			mov r3, #80												
 2074 0028 83F31188 		msr basepri, r3											
 2075 002c BFF36F8F 		isb														
 2076 0030 BFF34F8F 		dsb														
 2077              	
 2078              	@ 0 "" 2
 2079              		.thumb
 2080              		.syntax unified
 2081 0034 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2082              		.loc 2 203 1
 2083 0036 00BF     		nop
 2084              	.LBE126:
 2085              	.LBE125:
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccv2gsms.s 			page 77


2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first.
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2086              		.loc 1 2059 24
 2087 0038 124B     		ldr	r3, .L122+12
 2088 003a 4FF0FF32 		mov	r2, #-1
 2089 003e 1A60     		str	r2, [r3]
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2090              		.loc 1 2060 21
 2091 0040 114B     		ldr	r3, .L122+16
 2092 0042 0122     		movs	r2, #1
 2093 0044 1A60     		str	r2, [r3]
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2094              		.loc 1 2061 14
 2095 0046 114B     		ldr	r3, .L122+20
 2096 0048 0022     		movs	r2, #0
 2097 004a 1A60     		str	r2, [r3]
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2098              		.loc 1 2075 7
 2099 004c FFF7FEFF 		bl	xPortStartScheduler
ARM GAS  /tmp/ccv2gsms.s 			page 78


2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2100              		.loc 1 2096 1
 2101 0050 0EE0     		b	.L121
 2102              	.L118:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2103              		.loc 1 2090 3
 2104 0052 FB68     		ldr	r3, [r7, #12]
 2105 0054 B3F1FF3F 		cmp	r3, #-1
 2106 0058 0AD1     		bne	.L121
 2107              	.LBB127:
 2108              	.LBB128:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2109              		.loc 2 195 2
 2110              		.syntax unified
 2111              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2112 005a 4FF05003 			mov r3, #80												
 2113 005e 83F31188 		msr basepri, r3											
 2114 0062 BFF36F8F 		isb														
 2115 0066 BFF34F8F 		dsb														
 2116              	
 2117              	@ 0 "" 2
 2118              		.thumb
 2119              		.syntax unified
 2120 006a 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2121              		.loc 2 203 1
 2122 006c 00BF     		nop
 2123              	.L120:
 2124              	.LBE128:
 2125              	.LBE127:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2126              		.loc 1 2090 3 discriminator 2
 2127 006e FEE7     		b	.L120
 2128              	.L121:
 2129              		.loc 1 2096 1
 2130 0070 00BF     		nop
 2131 0072 1037     		adds	r7, r7, #16
ARM GAS  /tmp/ccv2gsms.s 			page 79


 2132              	.LCFI64:
 2133              		.cfi_def_cfa_offset 8
 2134 0074 BD46     		mov	sp, r7
 2135              	.LCFI65:
 2136              		.cfi_def_cfa_register 13
 2137              		@ sp needed
 2138 0076 80BD     		pop	{r7, pc}
 2139              	.L123:
 2140              		.align	2
 2141              	.L122:
 2142 0078 00000000 		.word	xIdleTaskHandle
 2143 007c 00000000 		.word	.LC0
 2144 0080 00000000 		.word	prvIdleTask
 2145 0084 00000000 		.word	xNextTaskUnblockTime
 2146 0088 00000000 		.word	xSchedulerRunning
 2147 008c 00000000 		.word	xTickCount
 2148              		.cfi_endproc
 2149              	.LFE17:
 2151              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2152              		.align	1
 2153              		.global	vTaskEndScheduler
 2154              		.syntax unified
 2155              		.thumb
 2156              		.thumb_func
 2157              		.fpu fpv4-sp-d16
 2159              	vTaskEndScheduler:
 2160              	.LFB18:
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2161              		.loc 1 2100 1
 2162              		.cfi_startproc
 2163              		@ args = 0, pretend = 0, frame = 8
 2164              		@ frame_needed = 1, uses_anonymous_args = 0
 2165 0000 80B5     		push	{r7, lr}
 2166              	.LCFI66:
 2167              		.cfi_def_cfa_offset 8
 2168              		.cfi_offset 7, -8
 2169              		.cfi_offset 14, -4
 2170 0002 82B0     		sub	sp, sp, #8
 2171              	.LCFI67:
 2172              		.cfi_def_cfa_offset 16
 2173 0004 00AF     		add	r7, sp, #0
 2174              	.LCFI68:
 2175              		.cfi_def_cfa_register 7
 2176              	.LBB129:
 2177              	.LBB130:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2178              		.loc 2 195 2
 2179              		.syntax unified
 2180              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2181 0006 4FF05003 			mov r3, #80												
 2182 000a 83F31188 		msr basepri, r3											
 2183 000e BFF36F8F 		isb														
 2184 0012 BFF34F8F 		dsb														
 2185              	
ARM GAS  /tmp/ccv2gsms.s 			page 80


 2186              	@ 0 "" 2
 2187              		.thumb
 2188              		.syntax unified
 2189 0016 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2190              		.loc 2 203 1
 2191 0018 00BF     		nop
 2192              	.LBE130:
 2193              	.LBE129:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2194              		.loc 1 2105 20
 2195 001a 044B     		ldr	r3, .L125
 2196 001c 0022     		movs	r2, #0
 2197 001e 1A60     		str	r2, [r3]
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2198              		.loc 1 2106 2
 2199 0020 FFF7FEFF 		bl	vPortEndScheduler
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2200              		.loc 1 2107 1
 2201 0024 00BF     		nop
 2202 0026 0837     		adds	r7, r7, #8
 2203              	.LCFI69:
 2204              		.cfi_def_cfa_offset 8
 2205 0028 BD46     		mov	sp, r7
 2206              	.LCFI70:
 2207              		.cfi_def_cfa_register 13
 2208              		@ sp needed
 2209 002a 80BD     		pop	{r7, pc}
 2210              	.L126:
 2211              		.align	2
 2212              	.L125:
 2213 002c 00000000 		.word	xSchedulerRunning
 2214              		.cfi_endproc
 2215              	.LFE18:
 2217              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2218              		.align	1
 2219              		.global	vTaskSuspendAll
 2220              		.syntax unified
 2221              		.thumb
 2222              		.thumb_func
 2223              		.fpu fpv4-sp-d16
 2225              	vTaskSuspendAll:
 2226              	.LFB19:
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2227              		.loc 1 2111 1
 2228              		.cfi_startproc
 2229              		@ args = 0, pretend = 0, frame = 0
 2230              		@ frame_needed = 1, uses_anonymous_args = 0
 2231              		@ link register save eliminated.
 2232 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccv2gsms.s 			page 81


 2233              	.LCFI71:
 2234              		.cfi_def_cfa_offset 4
 2235              		.cfi_offset 7, -4
 2236 0002 00AF     		add	r7, sp, #0
 2237              	.LCFI72:
 2238              		.cfi_def_cfa_register 7
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSOFTWARE_BARRIER();
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 2239              		.loc 1 2123 2
 2240 0004 044B     		ldr	r3, .L128
 2241 0006 1B68     		ldr	r3, [r3]
 2242 0008 0133     		adds	r3, r3, #1
 2243 000a 034A     		ldr	r2, .L128
 2244 000c 1360     		str	r3, [r2]
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the above increment elsewhere. */
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2245              		.loc 1 2127 2
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2246              		.loc 1 2128 1
 2247 000e 00BF     		nop
 2248 0010 BD46     		mov	sp, r7
 2249              	.LCFI73:
 2250              		.cfi_def_cfa_register 13
 2251              		@ sp needed
 2252 0012 5DF8047B 		ldr	r7, [sp], #4
 2253              	.LCFI74:
 2254              		.cfi_restore 7
 2255              		.cfi_def_cfa_offset 0
 2256 0016 7047     		bx	lr
 2257              	.L129:
 2258              		.align	2
 2259              	.L128:
 2260 0018 00000000 		.word	uxSchedulerSuspended
 2261              		.cfi_endproc
 2262              	.LFE19:
 2264              		.section	.text.xTaskResumeAll,"ax",%progbits
 2265              		.align	1
 2266              		.global	xTaskResumeAll
 2267              		.syntax unified
 2268              		.thumb
 2269              		.thumb_func
 2270              		.fpu fpv4-sp-d16
 2272              	xTaskResumeAll:
 2273              	.LFB20:
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
ARM GAS  /tmp/ccv2gsms.s 			page 82


2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccv2gsms.s 			page 83


2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2274              		.loc 1 2195 1
 2275              		.cfi_startproc
 2276              		@ args = 0, pretend = 0, frame = 16
 2277              		@ frame_needed = 1, uses_anonymous_args = 0
 2278 0000 80B5     		push	{r7, lr}
 2279              	.LCFI75:
 2280              		.cfi_def_cfa_offset 8
 2281              		.cfi_offset 7, -8
 2282              		.cfi_offset 14, -4
 2283 0002 84B0     		sub	sp, sp, #16
 2284              	.LCFI76:
 2285              		.cfi_def_cfa_offset 24
 2286 0004 00AF     		add	r7, sp, #0
 2287              	.LCFI77:
 2288              		.cfi_def_cfa_register 7
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2289              		.loc 1 2196 8
 2290 0006 0023     		movs	r3, #0
 2291 0008 FB60     		str	r3, [r7, #12]
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2292              		.loc 1 2197 12
 2293 000a 0023     		movs	r3, #0
 2294 000c BB60     		str	r3, [r7, #8]
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2295              		.loc 1 2201 2
 2296 000e 414B     		ldr	r3, .L141
 2297 0010 1B68     		ldr	r3, [r3]
 2298 0012 002B     		cmp	r3, #0
 2299 0014 0AD1     		bne	.L131
 2300              	.LBB131:
 2301              	.LBB132:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2302              		.loc 2 195 2
 2303              		.syntax unified
 2304              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2305 0016 4FF05003 			mov r3, #80												
 2306 001a 83F31188 		msr basepri, r3											
 2307 001e BFF36F8F 		isb														
 2308 0022 BFF34F8F 		dsb														
 2309              	
 2310              	@ 0 "" 2
 2311              		.thumb
 2312              		.syntax unified
 2313 0026 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccv2gsms.s 			page 84


 2314              		.loc 2 203 1
 2315 0028 00BF     		nop
 2316              	.L132:
 2317              	.LBE132:
 2318              	.LBE131:
 2319              		.loc 1 2201 2 discriminator 1
 2320 002a FEE7     		b	.L132
 2321              	.L131:
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2322              		.loc 1 2208 2
 2323 002c FFF7FEFF 		bl	vPortEnterCritical
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 2324              		.loc 1 2210 3
 2325 0030 384B     		ldr	r3, .L141
 2326 0032 1B68     		ldr	r3, [r3]
 2327 0034 013B     		subs	r3, r3, #1
 2328 0036 374A     		ldr	r2, .L141
 2329 0038 1360     		str	r3, [r2]
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2330              		.loc 1 2212 28
 2331 003a 364B     		ldr	r3, .L141
 2332 003c 1B68     		ldr	r3, [r3]
 2333              		.loc 1 2212 5
 2334 003e 002B     		cmp	r3, #0
 2335 0040 61D1     		bne	.L133
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2336              		.loc 1 2214 31
 2337 0042 354B     		ldr	r3, .L141+4
 2338 0044 1B68     		ldr	r3, [r3]
 2339              		.loc 1 2214 6
 2340 0046 002B     		cmp	r3, #0
 2341 0048 5DD0     		beq	.L133
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2342              		.loc 1 2218 10
 2343 004a 2EE0     		b	.L134
 2344              	.L135:
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 2345              		.loc 1 2220 14
 2346 004c 334B     		ldr	r3, .L141+8
 2347 004e DB68     		ldr	r3, [r3, #12]
 2348              		.loc 1 2220 12
 2349 0050 DB68     		ldr	r3, [r3, #12]
 2350 0052 FB60     		str	r3, [r7, #12]
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
ARM GAS  /tmp/ccv2gsms.s 			page 85


 2351              		.loc 1 2221 15
 2352 0054 FB68     		ldr	r3, [r7, #12]
 2353 0056 1833     		adds	r3, r3, #24
 2354 0058 1846     		mov	r0, r3
 2355 005a FFF7FEFF 		bl	uxListRemove
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2356              		.loc 1 2222 15
 2357 005e FB68     		ldr	r3, [r7, #12]
 2358 0060 0433     		adds	r3, r3, #4
 2359 0062 1846     		mov	r0, r3
 2360 0064 FFF7FEFF 		bl	uxListRemove
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2361              		.loc 1 2223 6
 2362 0068 FB68     		ldr	r3, [r7, #12]
 2363 006a DB6A     		ldr	r3, [r3, #44]
 2364 006c 0122     		movs	r2, #1
 2365 006e 9A40     		lsls	r2, r2, r3
 2366 0070 2B4B     		ldr	r3, .L141+12
 2367 0072 1B68     		ldr	r3, [r3]
 2368 0074 1343     		orrs	r3, r3, r2
 2369 0076 2A4A     		ldr	r2, .L141+12
 2370 0078 1360     		str	r3, [r2]
 2371 007a FB68     		ldr	r3, [r7, #12]
 2372 007c DA6A     		ldr	r2, [r3, #44]
 2373 007e 1346     		mov	r3, r2
 2374 0080 9B00     		lsls	r3, r3, #2
 2375 0082 1344     		add	r3, r3, r2
 2376 0084 9B00     		lsls	r3, r3, #2
 2377 0086 274A     		ldr	r2, .L141+16
 2378 0088 1A44     		add	r2, r2, r3
 2379 008a FB68     		ldr	r3, [r7, #12]
 2380 008c 0433     		adds	r3, r3, #4
 2381 008e 1946     		mov	r1, r3
 2382 0090 1046     		mov	r0, r2
 2383 0092 FFF7FEFF 		bl	vListInsertEnd
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2384              		.loc 1 2227 15
 2385 0096 FB68     		ldr	r3, [r7, #12]
 2386 0098 DA6A     		ldr	r2, [r3, #44]
 2387              		.loc 1 2227 43
 2388 009a 234B     		ldr	r3, .L141+20
 2389 009c 1B68     		ldr	r3, [r3]
 2390 009e DB6A     		ldr	r3, [r3, #44]
 2391              		.loc 1 2227 8
 2392 00a0 9A42     		cmp	r2, r3
 2393 00a2 02D3     		bcc	.L134
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2394              		.loc 1 2229 21
 2395 00a4 214B     		ldr	r3, .L141+24
 2396 00a6 0122     		movs	r2, #1
 2397 00a8 1A60     		str	r2, [r3]
 2398              	.L134:
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccv2gsms.s 			page 86


 2399              		.loc 1 2218 12
 2400 00aa 1C4B     		ldr	r3, .L141+8
 2401 00ac 1B68     		ldr	r3, [r3]
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2402              		.loc 1 2218 10
 2403 00ae 002B     		cmp	r3, #0
 2404 00b0 CCD1     		bne	.L135
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 2405              		.loc 1 2237 7
 2406 00b2 FB68     		ldr	r3, [r7, #12]
 2407 00b4 002B     		cmp	r3, #0
 2408 00b6 01D0     		beq	.L136
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2409              		.loc 1 2245 6
 2410 00b8 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2411              	.L136:
 2412              	.LBB133:
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 2413              		.loc 1 2253 17
 2414 00bc 1C4B     		ldr	r3, .L141+28
 2415 00be 1B68     		ldr	r3, [r3]
 2416 00c0 7B60     		str	r3, [r7, #4]
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
 2417              		.loc 1 2255 8
 2418 00c2 7B68     		ldr	r3, [r7, #4]
 2419 00c4 002B     		cmp	r3, #0
 2420 00c6 10D0     		beq	.L137
 2421              	.L139:
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2422              		.loc 1 2259 12
 2423 00c8 FFF7FEFF 		bl	xTaskIncrementTick
 2424 00cc 0346     		mov	r3, r0
ARM GAS  /tmp/ccv2gsms.s 			page 87


 2425              		.loc 1 2259 10
 2426 00ce 002B     		cmp	r3, #0
 2427 00d0 02D0     		beq	.L138
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
 2428              		.loc 1 2261 23
 2429 00d2 164B     		ldr	r3, .L141+24
 2430 00d4 0122     		movs	r2, #1
 2431 00d6 1A60     		str	r2, [r3]
 2432              	.L138:
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--xPendedCounts;
 2433              		.loc 1 2267 8
 2434 00d8 7B68     		ldr	r3, [r7, #4]
 2435 00da 013B     		subs	r3, r3, #1
 2436 00dc 7B60     		str	r3, [r7, #4]
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
 2437              		.loc 1 2268 7
 2438 00de 7B68     		ldr	r3, [r7, #4]
 2439 00e0 002B     		cmp	r3, #0
 2440 00e2 F1D1     		bne	.L139
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xPendedTicks = 0;
 2441              		.loc 1 2270 20
 2442 00e4 124B     		ldr	r3, .L141+28
 2443 00e6 0022     		movs	r2, #0
 2444 00e8 1A60     		str	r2, [r3]
 2445              	.L137:
 2446              	.LBE133:
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2447              		.loc 1 2278 23
 2448 00ea 104B     		ldr	r3, .L141+24
 2449 00ec 1B68     		ldr	r3, [r3]
 2450              		.loc 1 2278 7
 2451 00ee 002B     		cmp	r3, #0
 2452 00f0 09D0     		beq	.L133
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2453              		.loc 1 2282 23
 2454 00f2 0123     		movs	r3, #1
 2455 00f4 BB60     		str	r3, [r7, #8]
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
ARM GAS  /tmp/ccv2gsms.s 			page 88


 2456              		.loc 1 2285 6
 2457 00f6 0F4B     		ldr	r3, .L141+32
 2458 00f8 4FF08052 		mov	r2, #268435456
 2459 00fc 1A60     		str	r2, [r3]
 2460              		.syntax unified
 2461              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2462 00fe BFF34F8F 		dsb
 2463              	@ 0 "" 2
 2464              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2465 0102 BFF36F8F 		isb
 2466              	@ 0 "" 2
 2467              		.thumb
 2468              		.syntax unified
 2469              	.L133:
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2470              		.loc 1 2298 2
 2471 0106 FFF7FEFF 		bl	vPortExitCritical
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 2472              		.loc 1 2300 9
 2473 010a BB68     		ldr	r3, [r7, #8]
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2474              		.loc 1 2301 1
 2475 010c 1846     		mov	r0, r3
 2476 010e 1037     		adds	r7, r7, #16
 2477              	.LCFI78:
 2478              		.cfi_def_cfa_offset 8
 2479 0110 BD46     		mov	sp, r7
 2480              	.LCFI79:
 2481              		.cfi_def_cfa_register 13
 2482              		@ sp needed
 2483 0112 80BD     		pop	{r7, pc}
 2484              	.L142:
 2485              		.align	2
 2486              	.L141:
 2487 0114 00000000 		.word	uxSchedulerSuspended
 2488 0118 00000000 		.word	uxCurrentNumberOfTasks
 2489 011c 00000000 		.word	xPendingReadyList
 2490 0120 00000000 		.word	uxTopReadyPriority
 2491 0124 00000000 		.word	pxReadyTasksLists
 2492 0128 00000000 		.word	pxCurrentTCB
 2493 012c 00000000 		.word	xYieldPending
 2494 0130 00000000 		.word	xPendedTicks
 2495 0134 04ED00E0 		.word	-536810236
 2496              		.cfi_endproc
ARM GAS  /tmp/ccv2gsms.s 			page 89


 2497              	.LFE20:
 2499              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2500              		.align	1
 2501              		.global	xTaskGetTickCount
 2502              		.syntax unified
 2503              		.thumb
 2504              		.thumb_func
 2505              		.fpu fpv4-sp-d16
 2507              	xTaskGetTickCount:
 2508              	.LFB21:
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2509              		.loc 1 2305 1
 2510              		.cfi_startproc
 2511              		@ args = 0, pretend = 0, frame = 8
 2512              		@ frame_needed = 1, uses_anonymous_args = 0
 2513              		@ link register save eliminated.
 2514 0000 80B4     		push	{r7}
 2515              	.LCFI80:
 2516              		.cfi_def_cfa_offset 4
 2517              		.cfi_offset 7, -4
 2518 0002 83B0     		sub	sp, sp, #12
 2519              	.LCFI81:
 2520              		.cfi_def_cfa_offset 16
 2521 0004 00AF     		add	r7, sp, #0
 2522              	.LCFI82:
 2523              		.cfi_def_cfa_register 7
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 2524              		.loc 1 2311 10
 2525 0006 054B     		ldr	r3, .L145
 2526 0008 1B68     		ldr	r3, [r3]
 2527 000a 7B60     		str	r3, [r7, #4]
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 2528              		.loc 1 2315 9
 2529 000c 7B68     		ldr	r3, [r7, #4]
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2530              		.loc 1 2316 1
 2531 000e 1846     		mov	r0, r3
 2532 0010 0C37     		adds	r7, r7, #12
 2533              	.LCFI83:
 2534              		.cfi_def_cfa_offset 4
 2535 0012 BD46     		mov	sp, r7
 2536              	.LCFI84:
 2537              		.cfi_def_cfa_register 13
 2538              		@ sp needed
 2539 0014 5DF8047B 		ldr	r7, [sp], #4
 2540              	.LCFI85:
ARM GAS  /tmp/ccv2gsms.s 			page 90


 2541              		.cfi_restore 7
 2542              		.cfi_def_cfa_offset 0
 2543 0018 7047     		bx	lr
 2544              	.L146:
 2545 001a 00BF     		.align	2
 2546              	.L145:
 2547 001c 00000000 		.word	xTickCount
 2548              		.cfi_endproc
 2549              	.LFE21:
 2551              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2552              		.align	1
 2553              		.global	xTaskGetTickCountFromISR
 2554              		.syntax unified
 2555              		.thumb
 2556              		.thumb_func
 2557              		.fpu fpv4-sp-d16
 2559              	xTaskGetTickCountFromISR:
 2560              	.LFB22:
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2561              		.loc 1 2320 1
 2562              		.cfi_startproc
 2563              		@ args = 0, pretend = 0, frame = 8
 2564              		@ frame_needed = 1, uses_anonymous_args = 0
 2565 0000 80B5     		push	{r7, lr}
 2566              	.LCFI86:
 2567              		.cfi_def_cfa_offset 8
 2568              		.cfi_offset 7, -8
 2569              		.cfi_offset 14, -4
 2570 0002 82B0     		sub	sp, sp, #8
 2571              	.LCFI87:
 2572              		.cfi_def_cfa_offset 16
 2573 0004 00AF     		add	r7, sp, #0
 2574              	.LCFI88:
 2575              		.cfi_def_cfa_register 7
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2576              		.loc 1 2338 2
 2577 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
ARM GAS  /tmp/ccv2gsms.s 			page 91


2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2578              		.loc 1 2340 25
 2579 000a 0023     		movs	r3, #0
 2580 000c 7B60     		str	r3, [r7, #4]
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 2581              		.loc 1 2342 11
 2582 000e 044B     		ldr	r3, .L149
 2583 0010 1B68     		ldr	r3, [r3]
 2584 0012 3B60     		str	r3, [r7]
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 2585              		.loc 1 2346 9
 2586 0014 3B68     		ldr	r3, [r7]
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2587              		.loc 1 2347 1
 2588 0016 1846     		mov	r0, r3
 2589 0018 0837     		adds	r7, r7, #8
 2590              	.LCFI89:
 2591              		.cfi_def_cfa_offset 8
 2592 001a BD46     		mov	sp, r7
 2593              	.LCFI90:
 2594              		.cfi_def_cfa_register 13
 2595              		@ sp needed
 2596 001c 80BD     		pop	{r7, pc}
 2597              	.L150:
 2598 001e 00BF     		.align	2
 2599              	.L149:
 2600 0020 00000000 		.word	xTickCount
 2601              		.cfi_endproc
 2602              	.LFE22:
 2604              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2605              		.align	1
 2606              		.global	uxTaskGetNumberOfTasks
 2607              		.syntax unified
 2608              		.thumb
 2609              		.thumb_func
 2610              		.fpu fpv4-sp-d16
 2612              	uxTaskGetNumberOfTasks:
 2613              	.LFB23:
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2614              		.loc 1 2351 1
 2615              		.cfi_startproc
 2616              		@ args = 0, pretend = 0, frame = 0
 2617              		@ frame_needed = 1, uses_anonymous_args = 0
 2618              		@ link register save eliminated.
 2619 0000 80B4     		push	{r7}
 2620              	.LCFI91:
 2621              		.cfi_def_cfa_offset 4
 2622              		.cfi_offset 7, -4
 2623 0002 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccv2gsms.s 			page 92


 2624              	.LCFI92:
 2625              		.cfi_def_cfa_register 7
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 2626              		.loc 1 2354 9
 2627 0004 034B     		ldr	r3, .L153
 2628 0006 1B68     		ldr	r3, [r3]
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2629              		.loc 1 2355 1
 2630 0008 1846     		mov	r0, r3
 2631 000a BD46     		mov	sp, r7
 2632              	.LCFI93:
 2633              		.cfi_def_cfa_register 13
 2634              		@ sp needed
 2635 000c 5DF8047B 		ldr	r7, [sp], #4
 2636              	.LCFI94:
 2637              		.cfi_restore 7
 2638              		.cfi_def_cfa_offset 0
 2639 0010 7047     		bx	lr
 2640              	.L154:
 2641 0012 00BF     		.align	2
 2642              	.L153:
 2643 0014 00000000 		.word	uxCurrentNumberOfTasks
 2644              		.cfi_endproc
 2645              	.LFE23:
 2647              		.section	.text.pcTaskGetName,"ax",%progbits
 2648              		.align	1
 2649              		.global	pcTaskGetName
 2650              		.syntax unified
 2651              		.thumb
 2652              		.thumb_func
 2653              		.fpu fpv4-sp-d16
 2655              	pcTaskGetName:
 2656              	.LFB24:
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2657              		.loc 1 2359 1
 2658              		.cfi_startproc
 2659              		@ args = 0, pretend = 0, frame = 16
 2660              		@ frame_needed = 1, uses_anonymous_args = 0
 2661              		@ link register save eliminated.
 2662 0000 80B4     		push	{r7}
 2663              	.LCFI95:
 2664              		.cfi_def_cfa_offset 4
 2665              		.cfi_offset 7, -4
 2666 0002 85B0     		sub	sp, sp, #20
 2667              	.LCFI96:
 2668              		.cfi_def_cfa_offset 24
 2669 0004 00AF     		add	r7, sp, #0
 2670              	.LCFI97:
 2671              		.cfi_def_cfa_register 7
 2672 0006 7860     		str	r0, [r7, #4]
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv2gsms.s 			page 93


2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2673              		.loc 1 2364 10
 2674 0008 7B68     		ldr	r3, [r7, #4]
 2675 000a 002B     		cmp	r3, #0
 2676 000c 02D1     		bne	.L156
 2677              		.loc 1 2364 10 is_stmt 0 discriminator 1
 2678 000e 0D4B     		ldr	r3, .L161
 2679 0010 1B68     		ldr	r3, [r3]
 2680 0012 00E0     		b	.L157
 2681              	.L156:
 2682              		.loc 1 2364 10 discriminator 2
 2683 0014 7B68     		ldr	r3, [r7, #4]
 2684              	.L157:
 2685              		.loc 1 2364 8 is_stmt 1 discriminator 4
 2686 0016 FB60     		str	r3, [r7, #12]
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2687              		.loc 1 2365 2 discriminator 4
 2688 0018 FB68     		ldr	r3, [r7, #12]
 2689 001a 002B     		cmp	r3, #0
 2690 001c 0AD1     		bne	.L158
 2691              	.LBB134:
 2692              	.LBB135:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2693              		.loc 2 195 2
 2694              		.syntax unified
 2695              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2696 001e 4FF05003 			mov r3, #80												
 2697 0022 83F31188 		msr basepri, r3											
 2698 0026 BFF36F8F 		isb														
 2699 002a BFF34F8F 		dsb														
 2700              	
 2701              	@ 0 "" 2
 2702              		.thumb
 2703              		.syntax unified
 2704 002e BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2705              		.loc 2 203 1
 2706 0030 00BF     		nop
 2707              	.L159:
 2708              	.LBE135:
 2709              	.LBE134:
 2710              		.loc 1 2365 2 discriminator 1
 2711 0032 FEE7     		b	.L159
 2712              	.L158:
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2713              		.loc 1 2366 9
 2714 0034 FB68     		ldr	r3, [r7, #12]
 2715 0036 3433     		adds	r3, r3, #52
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2716              		.loc 1 2367 1
 2717 0038 1846     		mov	r0, r3
 2718 003a 1437     		adds	r7, r7, #20
 2719              	.LCFI98:
 2720              		.cfi_def_cfa_offset 4
 2721 003c BD46     		mov	sp, r7
ARM GAS  /tmp/ccv2gsms.s 			page 94


 2722              	.LCFI99:
 2723              		.cfi_def_cfa_register 13
 2724              		@ sp needed
 2725 003e 5DF8047B 		ldr	r7, [sp], #4
 2726              	.LCFI100:
 2727              		.cfi_restore 7
 2728              		.cfi_def_cfa_offset 0
 2729 0042 7047     		bx	lr
 2730              	.L162:
 2731              		.align	2
 2732              	.L161:
 2733 0044 00000000 		.word	pxCurrentTCB
 2734              		.cfi_endproc
 2735              	.LFE24:
 2737              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 2738              		.align	1
 2739              		.global	xTaskCatchUpTicks
 2740              		.syntax unified
 2741              		.thumb
 2742              		.thumb_func
 2743              		.fpu fpv4-sp-d16
 2745              	xTaskCatchUpTicks:
 2746              	.LFB25:
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
ARM GAS  /tmp/ccv2gsms.s 			page 95


2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
ARM GAS  /tmp/ccv2gsms.s 			page 96


2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
ARM GAS  /tmp/ccv2gsms.s 			page 97


2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccv2gsms.s 			page 98


2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2747              		.loc 1 2610 1
 2748              		.cfi_startproc
 2749              		@ args = 0, pretend = 0, frame = 16
 2750              		@ frame_needed = 1, uses_anonymous_args = 0
 2751 0000 80B5     		push	{r7, lr}
 2752              	.LCFI101:
 2753              		.cfi_def_cfa_offset 8
 2754              		.cfi_offset 7, -8
 2755              		.cfi_offset 14, -4
 2756 0002 84B0     		sub	sp, sp, #16
 2757              	.LCFI102:
 2758              		.cfi_def_cfa_offset 24
 2759 0004 00AF     		add	r7, sp, #0
 2760              	.LCFI103:
 2761              		.cfi_def_cfa_register 7
 2762 0006 7860     		str	r0, [r7, #4]
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 2763              		.loc 1 2611 12
 2764 0008 0023     		movs	r3, #0
ARM GAS  /tmp/ccv2gsms.s 			page 99


 2765 000a FB60     		str	r3, [r7, #12]
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
 2766              		.loc 1 2615 2
 2767 000c 0F4B     		ldr	r3, .L167
 2768 000e 1B68     		ldr	r3, [r3]
 2769 0010 002B     		cmp	r3, #0
 2770 0012 0AD0     		beq	.L164
 2771              	.LBB136:
 2772              	.LBB137:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2773              		.loc 2 195 2
 2774              		.syntax unified
 2775              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2776 0014 4FF05003 			mov r3, #80												
 2777 0018 83F31188 		msr basepri, r3											
 2778 001c BFF36F8F 		isb														
 2779 0020 BFF34F8F 		dsb														
 2780              	
 2781              	@ 0 "" 2
 2782              		.thumb
 2783              		.syntax unified
 2784 0024 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2785              		.loc 2 203 1
 2786 0026 00BF     		nop
 2787              	.L165:
 2788              	.LBE137:
 2789              	.LBE136:
 2790              		.loc 1 2615 2 discriminator 1
 2791 0028 FEE7     		b	.L165
 2792              	.L164:
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vTaskSuspendAll();
 2793              		.loc 1 2619 2
 2794 002a FFF7FEFF 		bl	vTaskSuspendAll
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 2795              		.loc 1 2620 15
 2796 002e 084B     		ldr	r3, .L167+4
 2797 0030 1A68     		ldr	r2, [r3]
 2798 0032 7B68     		ldr	r3, [r7, #4]
 2799 0034 1344     		add	r3, r3, r2
 2800 0036 064A     		ldr	r2, .L167+4
 2801 0038 1360     		str	r3, [r2]
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 2802              		.loc 1 2621 19
 2803 003a FFF7FEFF 		bl	xTaskResumeAll
 2804 003e F860     		str	r0, [r7, #12]
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xYieldRequired;
 2805              		.loc 1 2623 9
 2806 0040 FB68     		ldr	r3, [r7, #12]
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccv2gsms.s 			page 100


 2807              		.loc 1 2624 1
 2808 0042 1846     		mov	r0, r3
 2809 0044 1037     		adds	r7, r7, #16
 2810              	.LCFI104:
 2811              		.cfi_def_cfa_offset 8
 2812 0046 BD46     		mov	sp, r7
 2813              	.LCFI105:
 2814              		.cfi_def_cfa_register 13
 2815              		@ sp needed
 2816 0048 80BD     		pop	{r7, pc}
 2817              	.L168:
 2818 004a 00BF     		.align	2
 2819              	.L167:
 2820 004c 00000000 		.word	uxSchedulerSuspended
 2821 0050 00000000 		.word	xPendedTicks
 2822              		.cfi_endproc
 2823              	.LFE25:
 2825              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2826              		.align	1
 2827              		.global	xTaskIncrementTick
 2828              		.syntax unified
 2829              		.thumb
 2830              		.thumb_func
 2831              		.fpu fpv4-sp-d16
 2833              	xTaskIncrementTick:
 2834              	.LFB26:
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
ARM GAS  /tmp/ccv2gsms.s 			page 101


2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						then block again. */
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2835              		.loc 1 2708 1
 2836              		.cfi_startproc
 2837              		@ args = 0, pretend = 0, frame = 24
 2838              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccv2gsms.s 			page 102


 2839 0000 80B5     		push	{r7, lr}
 2840              	.LCFI106:
 2841              		.cfi_def_cfa_offset 8
 2842              		.cfi_offset 7, -8
 2843              		.cfi_offset 14, -4
 2844 0002 86B0     		sub	sp, sp, #24
 2845              	.LCFI107:
 2846              		.cfi_def_cfa_offset 32
 2847 0004 00AF     		add	r7, sp, #0
 2848              	.LCFI108:
 2849              		.cfi_def_cfa_register 7
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2850              		.loc 1 2711 12
 2851 0006 0023     		movs	r3, #0
 2852 0008 7B61     		str	r3, [r7, #20]
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2853              		.loc 1 2717 27
 2854 000a 4E4B     		ldr	r3, .L183
 2855 000c 1B68     		ldr	r3, [r3]
 2856              		.loc 1 2717 4
 2857 000e 002B     		cmp	r3, #0
 2858 0010 40F08E80 		bne	.L170
 2859              	.LBB138:
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 2860              		.loc 1 2721 49
 2861 0014 4C4B     		ldr	r3, .L183+4
 2862 0016 1B68     		ldr	r3, [r3]
 2863              		.loc 1 2721 20
 2864 0018 0133     		adds	r3, r3, #1
 2865 001a 3B61     		str	r3, [r7, #16]
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 2866              		.loc 1 2725 14
 2867 001c 4A4A     		ldr	r2, .L183+4
 2868 001e 3B69     		ldr	r3, [r7, #16]
 2869 0020 1360     		str	r3, [r2]
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 2870              		.loc 1 2727 5
 2871 0022 3B69     		ldr	r3, [r7, #16]
 2872 0024 002B     		cmp	r3, #0
 2873 0026 20D1     		bne	.L171
 2874              	.LBB139:
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
ARM GAS  /tmp/ccv2gsms.s 			page 103


 2875              		.loc 1 2729 4
 2876 0028 484B     		ldr	r3, .L183+8
 2877 002a 1B68     		ldr	r3, [r3]
 2878 002c 1B68     		ldr	r3, [r3]
 2879 002e 002B     		cmp	r3, #0
 2880 0030 0AD0     		beq	.L172
 2881              	.LBB140:
 2882              	.LBB141:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2883              		.loc 2 195 2
 2884              		.syntax unified
 2885              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2886 0032 4FF05003 			mov r3, #80												
 2887 0036 83F31188 		msr basepri, r3											
 2888 003a BFF36F8F 		isb														
 2889 003e BFF34F8F 		dsb														
 2890              	
 2891              	@ 0 "" 2
 2892              		.thumb
 2893              		.syntax unified
 2894 0042 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2895              		.loc 2 203 1
 2896 0044 00BF     		nop
 2897              	.L173:
 2898              	.LBE141:
 2899              	.LBE140:
 2900              		.loc 1 2729 4 discriminator 1
 2901 0046 FEE7     		b	.L173
 2902              	.L172:
 2903              		.loc 1 2729 4 is_stmt 0 discriminator 2
 2904 0048 404B     		ldr	r3, .L183+8
 2905 004a 1B68     		ldr	r3, [r3]
 2906 004c FB60     		str	r3, [r7, #12]
 2907 004e 404B     		ldr	r3, .L183+12
 2908 0050 1B68     		ldr	r3, [r3]
 2909 0052 3E4A     		ldr	r2, .L183+8
 2910 0054 1360     		str	r3, [r2]
 2911 0056 3E4A     		ldr	r2, .L183+12
 2912 0058 FB68     		ldr	r3, [r7, #12]
 2913 005a 1360     		str	r3, [r2]
 2914 005c 3D4B     		ldr	r3, .L183+16
 2915 005e 1B68     		ldr	r3, [r3]
 2916 0060 0133     		adds	r3, r3, #1
 2917 0062 3C4A     		ldr	r2, .L183+16
 2918 0064 1360     		str	r3, [r2]
 2919 0066 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2920              	.L171:
 2921              	.LBE139:
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
ARM GAS  /tmp/ccv2gsms.s 			page 104


2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 2922              		.loc 1 2740 23 is_stmt 1
 2923 006a 3B4B     		ldr	r3, .L183+20
 2924 006c 1B68     		ldr	r3, [r3]
 2925              		.loc 1 2740 5
 2926 006e 3A69     		ldr	r2, [r7, #16]
 2927 0070 9A42     		cmp	r2, r3
 2928 0072 48D3     		bcc	.L174
 2929              	.L179:
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2930              		.loc 1 2744 9
 2931 0074 354B     		ldr	r3, .L183+8
 2932 0076 1B68     		ldr	r3, [r3]
 2933 0078 1B68     		ldr	r3, [r3]
 2934              		.loc 1 2744 7
 2935 007a 002B     		cmp	r3, #0
 2936 007c 04D1     		bne	.L175
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 2937              		.loc 1 2751 27
 2938 007e 364B     		ldr	r3, .L183+20
 2939 0080 4FF0FF32 		mov	r2, #-1
 2940 0084 1A60     		str	r2, [r3]
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2941              		.loc 1 2752 6
 2942 0086 3EE0     		b	.L174
 2943              	.L175:
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 2944              		.loc 1 2760 14
 2945 0088 304B     		ldr	r3, .L183+8
 2946 008a 1B68     		ldr	r3, [r3]
 2947 008c DB68     		ldr	r3, [r3, #12]
 2948              		.loc 1 2760 12
 2949 008e DB68     		ldr	r3, [r3, #12]
 2950 0090 BB60     		str	r3, [r7, #8]
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2951              		.loc 1 2761 17
 2952 0092 BB68     		ldr	r3, [r7, #8]
 2953 0094 5B68     		ldr	r3, [r3, #4]
 2954 0096 7B60     		str	r3, [r7, #4]
ARM GAS  /tmp/ccv2gsms.s 			page 105


2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 2955              		.loc 1 2763 8
 2956 0098 3A69     		ldr	r2, [r7, #16]
 2957 009a 7B68     		ldr	r3, [r7, #4]
 2958 009c 9A42     		cmp	r2, r3
 2959 009e 03D2     		bcs	.L176
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 2960              		.loc 1 2770 28
 2961 00a0 2D4A     		ldr	r2, .L183+20
 2962 00a2 7B68     		ldr	r3, [r7, #4]
 2963 00a4 1360     		str	r3, [r2]
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2964              		.loc 1 2771 7
 2965 00a6 2EE0     		b	.L174
 2966              	.L176:
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2967              		.loc 1 2779 15
 2968 00a8 BB68     		ldr	r3, [r7, #8]
 2969 00aa 0433     		adds	r3, r3, #4
 2970 00ac 1846     		mov	r0, r3
 2971 00ae FFF7FEFF 		bl	uxListRemove
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2972              		.loc 1 2783 10
 2973 00b2 BB68     		ldr	r3, [r7, #8]
 2974 00b4 9B6A     		ldr	r3, [r3, #40]
 2975              		.loc 1 2783 8
 2976 00b6 002B     		cmp	r3, #0
 2977 00b8 04D0     		beq	.L177
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2978              		.loc 1 2785 16
 2979 00ba BB68     		ldr	r3, [r7, #8]
 2980 00bc 1833     		adds	r3, r3, #24
 2981 00be 1846     		mov	r0, r3
 2982 00c0 FFF7FEFF 		bl	uxListRemove
 2983              	.L177:
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccv2gsms.s 			page 106


2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2984              		.loc 1 2794 6
 2985 00c4 BB68     		ldr	r3, [r7, #8]
 2986 00c6 DB6A     		ldr	r3, [r3, #44]
 2987 00c8 0122     		movs	r2, #1
 2988 00ca 9A40     		lsls	r2, r2, r3
 2989 00cc 234B     		ldr	r3, .L183+24
 2990 00ce 1B68     		ldr	r3, [r3]
 2991 00d0 1343     		orrs	r3, r3, r2
 2992 00d2 224A     		ldr	r2, .L183+24
 2993 00d4 1360     		str	r3, [r2]
 2994 00d6 BB68     		ldr	r3, [r7, #8]
 2995 00d8 DA6A     		ldr	r2, [r3, #44]
 2996 00da 1346     		mov	r3, r2
 2997 00dc 9B00     		lsls	r3, r3, #2
 2998 00de 1344     		add	r3, r3, r2
 2999 00e0 9B00     		lsls	r3, r3, #2
 3000 00e2 1F4A     		ldr	r2, .L183+28
 3001 00e4 1A44     		add	r2, r2, r3
 3002 00e6 BB68     		ldr	r3, [r7, #8]
 3003 00e8 0433     		adds	r3, r3, #4
 3004 00ea 1946     		mov	r1, r3
 3005 00ec 1046     		mov	r0, r2
 3006 00ee FFF7FEFF 		bl	vListInsertEnd
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3007              		.loc 1 2804 16
 3008 00f2 BB68     		ldr	r3, [r7, #8]
 3009 00f4 DA6A     		ldr	r2, [r3, #44]
 3010              		.loc 1 2804 44
 3011 00f6 1B4B     		ldr	r3, .L183+32
 3012 00f8 1B68     		ldr	r3, [r3]
 3013 00fa DB6A     		ldr	r3, [r3, #44]
 3014              		.loc 1 2804 9
 3015 00fc 9A42     		cmp	r2, r3
 3016 00fe B9D3     		bcc	.L179
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 3017              		.loc 1 2806 24
 3018 0100 0123     		movs	r3, #1
 3019 0102 7B61     		str	r3, [r7, #20]
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3020              		.loc 1 2744 7
 3021 0104 B6E7     		b	.L179
 3022              	.L174:
ARM GAS  /tmp/ccv2gsms.s 			page 107


2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 3023              		.loc 1 2823 8
 3024 0106 174B     		ldr	r3, .L183+32
 3025 0108 1B68     		ldr	r3, [r3]
 3026 010a DA6A     		ldr	r2, [r3, #44]
 3027 010c 1449     		ldr	r1, .L183+28
 3028 010e 1346     		mov	r3, r2
 3029 0110 9B00     		lsls	r3, r3, #2
 3030 0112 1344     		add	r3, r3, r2
 3031 0114 9B00     		lsls	r3, r3, #2
 3032 0116 0B44     		add	r3, r3, r1
 3033 0118 1B68     		ldr	r3, [r3]
 3034              		.loc 1 2823 6
 3035 011a 012B     		cmp	r3, #1
 3036 011c 01D9     		bls	.L180
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3037              		.loc 1 2825 21
 3038 011e 0123     		movs	r3, #1
 3039 0120 7B61     		str	r3, [r7, #20]
 3040              	.L180:
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccv2gsms.s 			page 108


2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xYieldPending != pdFALSE )
 3041              		.loc 1 2851 22
 3042 0122 114B     		ldr	r3, .L183+36
 3043 0124 1B68     		ldr	r3, [r3]
 3044              		.loc 1 2851 6
 3045 0126 002B     		cmp	r3, #0
 3046 0128 07D0     		beq	.L181
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3047              		.loc 1 2853 21
 3048 012a 0123     		movs	r3, #1
 3049 012c 7B61     		str	r3, [r7, #20]
 3050 012e 04E0     		b	.L181
 3051              	.L170:
 3052              	.LBE138:
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++xPendedTicks;
 3053              		.loc 1 2864 3
 3054 0130 0E4B     		ldr	r3, .L183+40
 3055 0132 1B68     		ldr	r3, [r3]
 3056 0134 0133     		adds	r3, r3, #1
 3057 0136 0D4A     		ldr	r2, .L183+40
 3058 0138 1360     		str	r3, [r2]
 3059              	.L181:
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 3060              		.loc 1 2875 9
 3061 013a 7B69     		ldr	r3, [r7, #20]
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3062              		.loc 1 2876 1
 3063 013c 1846     		mov	r0, r3
 3064 013e 1837     		adds	r7, r7, #24
 3065              	.LCFI109:
 3066              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccv2gsms.s 			page 109


 3067 0140 BD46     		mov	sp, r7
 3068              	.LCFI110:
 3069              		.cfi_def_cfa_register 13
 3070              		@ sp needed
 3071 0142 80BD     		pop	{r7, pc}
 3072              	.L184:
 3073              		.align	2
 3074              	.L183:
 3075 0144 00000000 		.word	uxSchedulerSuspended
 3076 0148 00000000 		.word	xTickCount
 3077 014c 00000000 		.word	pxDelayedTaskList
 3078 0150 00000000 		.word	pxOverflowDelayedTaskList
 3079 0154 00000000 		.word	xNumOfOverflows
 3080 0158 00000000 		.word	xNextTaskUnblockTime
 3081 015c 00000000 		.word	uxTopReadyPriority
 3082 0160 00000000 		.word	pxReadyTasksLists
 3083 0164 00000000 		.word	pxCurrentTCB
 3084 0168 00000000 		.word	xYieldPending
 3085 016c 00000000 		.word	xPendedTicks
 3086              		.cfi_endproc
 3087              	.LFE26:
 3089              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3090              		.align	1
 3091              		.global	vTaskSwitchContext
 3092              		.syntax unified
 3093              		.thumb
 3094              		.thumb_func
 3095              		.fpu fpv4-sp-d16
 3097              	vTaskSwitchContext:
 3098              	.LFB27:
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccv2gsms.s 			page 110


2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccv2gsms.s 			page 111


2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3099              		.loc 1 2990 1
 3100              		.cfi_startproc
 3101              		@ args = 0, pretend = 0, frame = 24
 3102              		@ frame_needed = 1, uses_anonymous_args = 0
 3103              		@ link register save eliminated.
 3104 0000 80B4     		push	{r7}
 3105              	.LCFI111:
 3106              		.cfi_def_cfa_offset 4
 3107              		.cfi_offset 7, -4
 3108 0002 87B0     		sub	sp, sp, #28
 3109              	.LCFI112:
 3110              		.cfi_def_cfa_offset 32
 3111 0004 00AF     		add	r7, sp, #0
 3112              	.LCFI113:
 3113              		.cfi_def_cfa_register 7
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3114              		.loc 1 2991 27
 3115 0006 274B     		ldr	r3, .L193
 3116 0008 1B68     		ldr	r3, [r3]
 3117              		.loc 1 2991 4
 3118 000a 002B     		cmp	r3, #0
 3119 000c 03D0     		beq	.L186
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3120              		.loc 1 2995 17
ARM GAS  /tmp/ccv2gsms.s 			page 112


 3121 000e 264B     		ldr	r3, .L193+4
 3122 0010 0122     		movs	r2, #1
 3123 0012 1A60     		str	r2, [r3]
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
ARM GAS  /tmp/ccv2gsms.s 			page 113


3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task.
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3124              		.loc 1 3061 1
 3125 0014 3FE0     		b	.L192
 3126              	.L186:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3127              		.loc 1 2999 17
 3128 0016 244B     		ldr	r3, .L193+4
 3129 0018 0022     		movs	r2, #0
 3130 001a 1A60     		str	r2, [r3]
 3131              	.LBB142:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3132              		.loc 1 3041 3
 3133 001c 234B     		ldr	r3, .L193+8
 3134 001e 1B68     		ldr	r3, [r3]
 3135 0020 FB60     		str	r3, [r7, #12]
 3136              	.LBB143:
 3137              	.LBB144:
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 3138              		.loc 2 134 3
 3139 0022 FB68     		ldr	r3, [r7, #12]
 3140              		.syntax unified
 3141              	@ 134 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3142 0024 B3FA83F3 		clz r3, r3
 3143              	@ 0 "" 2
 3144              		.thumb
 3145              		.syntax unified
 3146 0028 FB72     		strb	r3, [r7, #11]
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 3147              		.loc 2 135 10
 3148 002a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3149              	.LBE144:
 3150              	.LBE143:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3151              		.loc 1 3041 3
 3152 002c C3F11F03 		rsb	r3, r3, #31
 3153 0030 7B61     		str	r3, [r7, #20]
 3154 0032 1F49     		ldr	r1, .L193+12
 3155 0034 7A69     		ldr	r2, [r7, #20]
 3156 0036 1346     		mov	r3, r2
 3157 0038 9B00     		lsls	r3, r3, #2
 3158 003a 1344     		add	r3, r3, r2
 3159 003c 9B00     		lsls	r3, r3, #2
 3160 003e 0B44     		add	r3, r3, r1
 3161 0040 1B68     		ldr	r3, [r3]
 3162 0042 002B     		cmp	r3, #0
 3163 0044 0AD1     		bne	.L189
ARM GAS  /tmp/ccv2gsms.s 			page 114


 3164              	.LBB145:
 3165              	.LBB146:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3166              		.loc 2 195 2
 3167              		.syntax unified
 3168              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3169 0046 4FF05003 			mov r3, #80												
 3170 004a 83F31188 		msr basepri, r3											
 3171 004e BFF36F8F 		isb														
 3172 0052 BFF34F8F 		dsb														
 3173              	
 3174              	@ 0 "" 2
 3175              		.thumb
 3176              		.syntax unified
 3177 0056 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3178              		.loc 2 203 1
 3179 0058 00BF     		nop
 3180              	.L190:
 3181              	.LBE146:
 3182              	.LBE145:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3183              		.loc 1 3041 3 discriminator 1
 3184 005a FEE7     		b	.L190
 3185              	.L189:
 3186              	.LBB147:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3187              		.loc 1 3041 3 is_stmt 0 discriminator 2
 3188 005c 7A69     		ldr	r2, [r7, #20]
 3189 005e 1346     		mov	r3, r2
 3190 0060 9B00     		lsls	r3, r3, #2
 3191 0062 1344     		add	r3, r3, r2
 3192 0064 9B00     		lsls	r3, r3, #2
 3193 0066 124A     		ldr	r2, .L193+12
 3194 0068 1344     		add	r3, r3, r2
 3195 006a 3B61     		str	r3, [r7, #16]
 3196 006c 3B69     		ldr	r3, [r7, #16]
 3197 006e 5B68     		ldr	r3, [r3, #4]
 3198 0070 5A68     		ldr	r2, [r3, #4]
 3199 0072 3B69     		ldr	r3, [r7, #16]
 3200 0074 5A60     		str	r2, [r3, #4]
 3201 0076 3B69     		ldr	r3, [r7, #16]
 3202 0078 5A68     		ldr	r2, [r3, #4]
 3203 007a 3B69     		ldr	r3, [r7, #16]
 3204 007c 0833     		adds	r3, r3, #8
 3205 007e 9A42     		cmp	r2, r3
 3206 0080 04D1     		bne	.L191
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3207              		.loc 1 3041 3 discriminator 3
 3208 0082 3B69     		ldr	r3, [r7, #16]
 3209 0084 5B68     		ldr	r3, [r3, #4]
 3210 0086 5A68     		ldr	r2, [r3, #4]
 3211 0088 3B69     		ldr	r3, [r7, #16]
 3212 008a 5A60     		str	r2, [r3, #4]
 3213              	.L191:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3214              		.loc 1 3041 3 discriminator 5
ARM GAS  /tmp/ccv2gsms.s 			page 115


 3215 008c 3B69     		ldr	r3, [r7, #16]
 3216 008e 5B68     		ldr	r3, [r3, #4]
 3217 0090 DB68     		ldr	r3, [r3, #12]
 3218 0092 084A     		ldr	r2, .L193+16
 3219 0094 1360     		str	r3, [r2]
 3220              	.L192:
 3221              	.LBE147:
 3222              	.LBE142:
 3223              		.loc 1 3061 1 is_stmt 1
 3224 0096 00BF     		nop
 3225 0098 1C37     		adds	r7, r7, #28
 3226              	.LCFI114:
 3227              		.cfi_def_cfa_offset 4
 3228 009a BD46     		mov	sp, r7
 3229              	.LCFI115:
 3230              		.cfi_def_cfa_register 13
 3231              		@ sp needed
 3232 009c 5DF8047B 		ldr	r7, [sp], #4
 3233              	.LCFI116:
 3234              		.cfi_restore 7
 3235              		.cfi_def_cfa_offset 0
 3236 00a0 7047     		bx	lr
 3237              	.L194:
 3238 00a2 00BF     		.align	2
 3239              	.L193:
 3240 00a4 00000000 		.word	uxSchedulerSuspended
 3241 00a8 00000000 		.word	xYieldPending
 3242 00ac 00000000 		.word	uxTopReadyPriority
 3243 00b0 00000000 		.word	pxReadyTasksLists
 3244 00b4 00000000 		.word	pxCurrentTCB
 3245              		.cfi_endproc
 3246              	.LFE27:
 3248              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3249              		.align	1
 3250              		.global	vTaskPlaceOnEventList
 3251              		.syntax unified
 3252              		.thumb
 3253              		.thumb_func
 3254              		.fpu fpv4-sp-d16
 3256              	vTaskPlaceOnEventList:
 3257              	.LFB28:
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3258              		.loc 1 3065 1
 3259              		.cfi_startproc
 3260              		@ args = 0, pretend = 0, frame = 16
 3261              		@ frame_needed = 1, uses_anonymous_args = 0
 3262 0000 80B5     		push	{r7, lr}
 3263              	.LCFI117:
 3264              		.cfi_def_cfa_offset 8
 3265              		.cfi_offset 7, -8
 3266              		.cfi_offset 14, -4
 3267 0002 84B0     		sub	sp, sp, #16
 3268              	.LCFI118:
 3269              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccv2gsms.s 			page 116


 3270 0004 00AF     		add	r7, sp, #0
 3271              	.LCFI119:
 3272              		.cfi_def_cfa_register 7
 3273 0006 7860     		str	r0, [r7, #4]
 3274 0008 3960     		str	r1, [r7]
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3275              		.loc 1 3066 2
 3276 000a 7B68     		ldr	r3, [r7, #4]
 3277 000c 002B     		cmp	r3, #0
 3278 000e 0AD1     		bne	.L196
 3279              	.LBB148:
 3280              	.LBB149:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3281              		.loc 2 195 2
 3282              		.syntax unified
 3283              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3284 0010 4FF05003 			mov r3, #80												
 3285 0014 83F31188 		msr basepri, r3											
 3286 0018 BFF36F8F 		isb														
 3287 001c BFF34F8F 		dsb														
 3288              	
 3289              	@ 0 "" 2
 3290              		.thumb
 3291              		.syntax unified
 3292 0020 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3293              		.loc 2 203 1
 3294 0022 00BF     		nop
 3295              	.L197:
 3296              	.LBE149:
 3297              	.LBE148:
 3298              		.loc 1 3066 2 discriminator 1
 3299 0024 FEE7     		b	.L197
 3300              	.L196:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3301              		.loc 1 3075 43
 3302 0026 074B     		ldr	r3, .L198
 3303 0028 1B68     		ldr	r3, [r3]
 3304              		.loc 1 3075 2
 3305 002a 1833     		adds	r3, r3, #24
 3306 002c 1946     		mov	r1, r3
 3307 002e 7868     		ldr	r0, [r7, #4]
 3308 0030 FFF7FEFF 		bl	vListInsert
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3309              		.loc 1 3077 2
 3310 0034 0121     		movs	r1, #1
 3311 0036 3868     		ldr	r0, [r7]
 3312 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
ARM GAS  /tmp/ccv2gsms.s 			page 117


3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3313              		.loc 1 3078 1
 3314 003c 00BF     		nop
 3315 003e 1037     		adds	r7, r7, #16
 3316              	.LCFI120:
 3317              		.cfi_def_cfa_offset 8
 3318 0040 BD46     		mov	sp, r7
 3319              	.LCFI121:
 3320              		.cfi_def_cfa_register 13
 3321              		@ sp needed
 3322 0042 80BD     		pop	{r7, pc}
 3323              	.L199:
 3324              		.align	2
 3325              	.L198:
 3326 0044 00000000 		.word	pxCurrentTCB
 3327              		.cfi_endproc
 3328              	.LFE28:
 3330              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3331              		.align	1
 3332              		.global	vTaskPlaceOnUnorderedEventList
 3333              		.syntax unified
 3334              		.thumb
 3335              		.thumb_func
 3336              		.fpu fpv4-sp-d16
 3338              	vTaskPlaceOnUnorderedEventList:
 3339              	.LFB29:
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3340              		.loc 1 3082 1
 3341              		.cfi_startproc
 3342              		@ args = 0, pretend = 0, frame = 24
 3343              		@ frame_needed = 1, uses_anonymous_args = 0
 3344 0000 80B5     		push	{r7, lr}
 3345              	.LCFI122:
 3346              		.cfi_def_cfa_offset 8
 3347              		.cfi_offset 7, -8
 3348              		.cfi_offset 14, -4
 3349 0002 86B0     		sub	sp, sp, #24
 3350              	.LCFI123:
 3351              		.cfi_def_cfa_offset 32
 3352 0004 00AF     		add	r7, sp, #0
 3353              	.LCFI124:
 3354              		.cfi_def_cfa_register 7
 3355 0006 F860     		str	r0, [r7, #12]
 3356 0008 B960     		str	r1, [r7, #8]
 3357 000a 7A60     		str	r2, [r7, #4]
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3358              		.loc 1 3083 2
 3359 000c FB68     		ldr	r3, [r7, #12]
 3360 000e 002B     		cmp	r3, #0
 3361 0010 0AD1     		bne	.L201
 3362              	.LBB150:
 3363              	.LBB151:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3364              		.loc 2 195 2
ARM GAS  /tmp/ccv2gsms.s 			page 118


 3365              		.syntax unified
 3366              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3367 0012 4FF05003 			mov r3, #80												
 3368 0016 83F31188 		msr basepri, r3											
 3369 001a BFF36F8F 		isb														
 3370 001e BFF34F8F 		dsb														
 3371              	
 3372              	@ 0 "" 2
 3373              		.thumb
 3374              		.syntax unified
 3375 0022 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3376              		.loc 2 203 1
 3377 0024 00BF     		nop
 3378              	.L202:
 3379              	.LBE151:
 3380              	.LBE150:
 3381              		.loc 1 3083 2 discriminator 1
 3382 0026 FEE7     		b	.L202
 3383              	.L201:
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 3384              		.loc 1 3087 2
 3385 0028 114B     		ldr	r3, .L205
 3386 002a 1B68     		ldr	r3, [r3]
 3387 002c 002B     		cmp	r3, #0
 3388 002e 0AD1     		bne	.L203
 3389              	.LBB152:
 3390              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3391              		.loc 2 195 2
 3392              		.syntax unified
 3393              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3394 0030 4FF05003 			mov r3, #80												
 3395 0034 83F31188 		msr basepri, r3											
 3396 0038 BFF36F8F 		isb														
 3397 003c BFF34F8F 		dsb														
 3398              	
 3399              	@ 0 "" 2
 3400              		.thumb
 3401              		.syntax unified
 3402 0040 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3403              		.loc 2 203 1
 3404 0042 00BF     		nop
 3405              	.L204:
 3406              	.LBE153:
 3407              	.LBE152:
 3408              		.loc 1 3087 2 discriminator 2
 3409 0044 FEE7     		b	.L204
 3410              	.L203:
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
ARM GAS  /tmp/ccv2gsms.s 			page 119


3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 3411              		.loc 1 3092 2
 3412 0046 0B4B     		ldr	r3, .L205+4
 3413 0048 1B68     		ldr	r3, [r3]
 3414 004a BA68     		ldr	r2, [r7, #8]
 3415 004c 42F00042 		orr	r2, r2, #-2147483648
 3416 0050 9A61     		str	r2, [r3, #24]
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3417              		.loc 1 3099 46
 3418 0052 084B     		ldr	r3, .L205+4
 3419 0054 1B68     		ldr	r3, [r3]
 3420              		.loc 1 3099 2
 3421 0056 1833     		adds	r3, r3, #24
 3422 0058 1946     		mov	r1, r3
 3423 005a F868     		ldr	r0, [r7, #12]
 3424 005c FFF7FEFF 		bl	vListInsertEnd
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3425              		.loc 1 3101 2
 3426 0060 0121     		movs	r1, #1
 3427 0062 7868     		ldr	r0, [r7, #4]
 3428 0064 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3429              		.loc 1 3102 1
 3430 0068 00BF     		nop
 3431 006a 1837     		adds	r7, r7, #24
 3432              	.LCFI125:
 3433              		.cfi_def_cfa_offset 8
 3434 006c BD46     		mov	sp, r7
 3435              	.LCFI126:
 3436              		.cfi_def_cfa_register 13
 3437              		@ sp needed
 3438 006e 80BD     		pop	{r7, pc}
 3439              	.L206:
 3440              		.align	2
 3441              	.L205:
 3442 0070 00000000 		.word	uxSchedulerSuspended
 3443 0074 00000000 		.word	pxCurrentTCB
 3444              		.cfi_endproc
 3445              	.LFE29:
 3447              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3448              		.align	1
 3449              		.global	xTaskRemoveFromEventList
 3450              		.syntax unified
 3451              		.thumb
 3452              		.thumb_func
 3453              		.fpu fpv4-sp-d16
 3455              	xTaskRemoveFromEventList:
 3456              	.LFB30:
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv2gsms.s 			page 120


3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3457              		.loc 1 3139 1
 3458              		.cfi_startproc
 3459              		@ args = 0, pretend = 0, frame = 24
 3460              		@ frame_needed = 1, uses_anonymous_args = 0
 3461 0000 80B5     		push	{r7, lr}
 3462              	.LCFI127:
 3463              		.cfi_def_cfa_offset 8
 3464              		.cfi_offset 7, -8
 3465              		.cfi_offset 14, -4
 3466 0002 86B0     		sub	sp, sp, #24
 3467              	.LCFI128:
 3468              		.cfi_def_cfa_offset 32
 3469 0004 00AF     		add	r7, sp, #0
 3470              	.LCFI129:
 3471              		.cfi_def_cfa_register 7
 3472 0006 7860     		str	r0, [r7, #4]
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv2gsms.s 			page 121


3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 3473              		.loc 1 3156 19
 3474 0008 7B68     		ldr	r3, [r7, #4]
 3475 000a DB68     		ldr	r3, [r3, #12]
 3476              		.loc 1 3156 17
 3477 000c DB68     		ldr	r3, [r3, #12]
 3478 000e 3B61     		str	r3, [r7, #16]
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3479              		.loc 1 3157 2
 3480 0010 3B69     		ldr	r3, [r7, #16]
 3481 0012 002B     		cmp	r3, #0
 3482 0014 0AD1     		bne	.L208
 3483              	.LBB154:
 3484              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3485              		.loc 2 195 2
 3486              		.syntax unified
 3487              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3488 0016 4FF05003 			mov r3, #80												
 3489 001a 83F31188 		msr basepri, r3											
 3490 001e BFF36F8F 		isb														
 3491 0022 BFF34F8F 		dsb														
 3492              	
 3493              	@ 0 "" 2
 3494              		.thumb
 3495              		.syntax unified
 3496 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3497              		.loc 2 203 1
 3498 0028 00BF     		nop
 3499              	.L209:
 3500              	.LBE155:
 3501              	.LBE154:
 3502              		.loc 1 3157 2 discriminator 1
 3503 002a FEE7     		b	.L209
 3504              	.L208:
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3505              		.loc 1 3158 11
 3506 002c 3B69     		ldr	r3, [r7, #16]
 3507 002e 1833     		adds	r3, r3, #24
 3508 0030 1846     		mov	r0, r3
 3509 0032 FFF7FEFF 		bl	uxListRemove
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3510              		.loc 1 3160 27
 3511 0036 1D4B     		ldr	r3, .L215
 3512 0038 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccv2gsms.s 			page 122


 3513              		.loc 1 3160 4
 3514 003a 002B     		cmp	r3, #0
 3515 003c 1CD1     		bne	.L210
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3516              		.loc 1 3162 12
 3517 003e 3B69     		ldr	r3, [r7, #16]
 3518 0040 0433     		adds	r3, r3, #4
 3519 0042 1846     		mov	r0, r3
 3520 0044 FFF7FEFF 		bl	uxListRemove
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3521              		.loc 1 3163 3
 3522 0048 3B69     		ldr	r3, [r7, #16]
 3523 004a DB6A     		ldr	r3, [r3, #44]
 3524 004c 0122     		movs	r2, #1
 3525 004e 9A40     		lsls	r2, r2, r3
 3526 0050 174B     		ldr	r3, .L215+4
 3527 0052 1B68     		ldr	r3, [r3]
 3528 0054 1343     		orrs	r3, r3, r2
 3529 0056 164A     		ldr	r2, .L215+4
 3530 0058 1360     		str	r3, [r2]
 3531 005a 3B69     		ldr	r3, [r7, #16]
 3532 005c DA6A     		ldr	r2, [r3, #44]
 3533 005e 1346     		mov	r3, r2
 3534 0060 9B00     		lsls	r3, r3, #2
 3535 0062 1344     		add	r3, r3, r2
 3536 0064 9B00     		lsls	r3, r3, #2
 3537 0066 134A     		ldr	r2, .L215+8
 3538 0068 1A44     		add	r2, r2, r3
 3539 006a 3B69     		ldr	r3, [r7, #16]
 3540 006c 0433     		adds	r3, r3, #4
 3541 006e 1946     		mov	r1, r3
 3542 0070 1046     		mov	r0, r2
 3543 0072 FFF7FEFF 		bl	vListInsertEnd
 3544 0076 05E0     		b	.L211
 3545              	.L210:
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3546              		.loc 1 3183 3
ARM GAS  /tmp/ccv2gsms.s 			page 123


 3547 0078 3B69     		ldr	r3, [r7, #16]
 3548 007a 1833     		adds	r3, r3, #24
 3549 007c 1946     		mov	r1, r3
 3550 007e 0E48     		ldr	r0, .L215+12
 3551 0080 FFF7FEFF 		bl	vListInsertEnd
 3552              	.L211:
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3553              		.loc 1 3186 20
 3554 0084 3B69     		ldr	r3, [r7, #16]
 3555 0086 DA6A     		ldr	r2, [r3, #44]
 3556              		.loc 1 3186 47
 3557 0088 0C4B     		ldr	r3, .L215+16
 3558 008a 1B68     		ldr	r3, [r3]
 3559 008c DB6A     		ldr	r3, [r3, #44]
 3560              		.loc 1 3186 4
 3561 008e 9A42     		cmp	r2, r3
 3562 0090 05D9     		bls	.L212
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 3563              		.loc 1 3191 11
 3564 0092 0123     		movs	r3, #1
 3565 0094 7B61     		str	r3, [r7, #20]
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3566              		.loc 1 3195 17
 3567 0096 0A4B     		ldr	r3, .L215+20
 3568 0098 0122     		movs	r2, #1
 3569 009a 1A60     		str	r2, [r3]
 3570 009c 01E0     		b	.L213
 3571              	.L212:
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 3572              		.loc 1 3199 11
 3573 009e 0023     		movs	r3, #0
 3574 00a0 7B61     		str	r3, [r7, #20]
 3575              	.L213:
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3576              		.loc 1 3202 9
 3577 00a2 7B69     		ldr	r3, [r7, #20]
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3578              		.loc 1 3203 1
 3579 00a4 1846     		mov	r0, r3
 3580 00a6 1837     		adds	r7, r7, #24
 3581              	.LCFI130:
 3582              		.cfi_def_cfa_offset 8
 3583 00a8 BD46     		mov	sp, r7
ARM GAS  /tmp/ccv2gsms.s 			page 124


 3584              	.LCFI131:
 3585              		.cfi_def_cfa_register 13
 3586              		@ sp needed
 3587 00aa 80BD     		pop	{r7, pc}
 3588              	.L216:
 3589              		.align	2
 3590              	.L215:
 3591 00ac 00000000 		.word	uxSchedulerSuspended
 3592 00b0 00000000 		.word	uxTopReadyPriority
 3593 00b4 00000000 		.word	pxReadyTasksLists
 3594 00b8 00000000 		.word	xPendingReadyList
 3595 00bc 00000000 		.word	pxCurrentTCB
 3596 00c0 00000000 		.word	xYieldPending
 3597              		.cfi_endproc
 3598              	.LFE30:
 3600              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3601              		.align	1
 3602              		.global	vTaskRemoveFromUnorderedEventList
 3603              		.syntax unified
 3604              		.thumb
 3605              		.thumb_func
 3606              		.fpu fpv4-sp-d16
 3608              	vTaskRemoveFromUnorderedEventList:
 3609              	.LFB31:
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3610              		.loc 1 3207 1
 3611              		.cfi_startproc
 3612              		@ args = 0, pretend = 0, frame = 24
 3613              		@ frame_needed = 1, uses_anonymous_args = 0
 3614 0000 80B5     		push	{r7, lr}
 3615              	.LCFI132:
 3616              		.cfi_def_cfa_offset 8
 3617              		.cfi_offset 7, -8
 3618              		.cfi_offset 14, -4
 3619 0002 86B0     		sub	sp, sp, #24
 3620              	.LCFI133:
 3621              		.cfi_def_cfa_offset 32
 3622 0004 00AF     		add	r7, sp, #0
 3623              	.LCFI134:
 3624              		.cfi_def_cfa_register 7
 3625 0006 7860     		str	r0, [r7, #4]
 3626 0008 3960     		str	r1, [r7]
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 3627              		.loc 1 3212 2
 3628 000a 294B     		ldr	r3, .L224
 3629 000c 1B68     		ldr	r3, [r3]
 3630 000e 002B     		cmp	r3, #0
 3631 0010 0AD1     		bne	.L218
 3632              	.LBB156:
 3633              	.LBB157:
ARM GAS  /tmp/ccv2gsms.s 			page 125


 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3634              		.loc 2 195 2
 3635              		.syntax unified
 3636              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3637 0012 4FF05003 			mov r3, #80												
 3638 0016 83F31188 		msr basepri, r3											
 3639 001a BFF36F8F 		isb														
 3640 001e BFF34F8F 		dsb														
 3641              	
 3642              	@ 0 "" 2
 3643              		.thumb
 3644              		.syntax unified
 3645 0022 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3646              		.loc 2 203 1
 3647 0024 00BF     		nop
 3648              	.L219:
 3649              	.LBE157:
 3650              	.LBE156:
 3651              		.loc 1 3212 2 discriminator 1
 3652 0026 FEE7     		b	.L219
 3653              	.L218:
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3654              		.loc 1 3215 2
 3655 0028 3B68     		ldr	r3, [r7]
 3656 002a 43F00042 		orr	r2, r3, #-2147483648
 3657 002e 7B68     		ldr	r3, [r7, #4]
 3658 0030 1A60     		str	r2, [r3]
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 3659              		.loc 1 3219 17
 3660 0032 7B68     		ldr	r3, [r7, #4]
 3661 0034 DB68     		ldr	r3, [r3, #12]
 3662 0036 7B61     		str	r3, [r7, #20]
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3663              		.loc 1 3220 2
 3664 0038 7B69     		ldr	r3, [r7, #20]
 3665 003a 002B     		cmp	r3, #0
 3666 003c 0AD1     		bne	.L220
 3667              	.LBB158:
 3668              	.LBB159:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3669              		.loc 2 195 2
 3670              		.syntax unified
 3671              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3672 003e 4FF05003 			mov r3, #80												
 3673 0042 83F31188 		msr basepri, r3											
 3674 0046 BFF36F8F 		isb														
 3675 004a BFF34F8F 		dsb														
 3676              	
 3677              	@ 0 "" 2
 3678              		.thumb
 3679              		.syntax unified
ARM GAS  /tmp/ccv2gsms.s 			page 126


 3680 004e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3681              		.loc 2 203 1
 3682 0050 00BF     		nop
 3683              	.L221:
 3684              	.LBE159:
 3685              	.LBE158:
 3686              		.loc 1 3220 2 discriminator 2
 3687 0052 FEE7     		b	.L221
 3688              	.L220:
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3689              		.loc 1 3221 11
 3690 0054 7868     		ldr	r0, [r7, #4]
 3691 0056 FFF7FEFF 		bl	uxListRemove
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3692              		.loc 1 3240 11
 3693 005a 7B69     		ldr	r3, [r7, #20]
 3694 005c 0433     		adds	r3, r3, #4
 3695 005e 1846     		mov	r0, r3
 3696 0060 FFF7FEFF 		bl	uxListRemove
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3697              		.loc 1 3241 2
 3698 0064 7B69     		ldr	r3, [r7, #20]
 3699 0066 DB6A     		ldr	r3, [r3, #44]
 3700 0068 0122     		movs	r2, #1
 3701 006a 9A40     		lsls	r2, r2, r3
 3702 006c 114B     		ldr	r3, .L224+4
 3703 006e 1B68     		ldr	r3, [r3]
 3704 0070 1343     		orrs	r3, r3, r2
 3705 0072 104A     		ldr	r2, .L224+4
 3706 0074 1360     		str	r3, [r2]
 3707 0076 7B69     		ldr	r3, [r7, #20]
 3708 0078 DA6A     		ldr	r2, [r3, #44]
 3709 007a 1346     		mov	r3, r2
 3710 007c 9B00     		lsls	r3, r3, #2
 3711 007e 1344     		add	r3, r3, r2
 3712 0080 9B00     		lsls	r3, r3, #2
 3713 0082 0D4A     		ldr	r2, .L224+8
 3714 0084 1A44     		add	r2, r2, r3
ARM GAS  /tmp/ccv2gsms.s 			page 127


 3715 0086 7B69     		ldr	r3, [r7, #20]
 3716 0088 0433     		adds	r3, r3, #4
 3717 008a 1946     		mov	r1, r3
 3718 008c 1046     		mov	r0, r2
 3719 008e FFF7FEFF 		bl	vListInsertEnd
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3720              		.loc 1 3243 20
 3721 0092 7B69     		ldr	r3, [r7, #20]
 3722 0094 DA6A     		ldr	r2, [r3, #44]
 3723              		.loc 1 3243 47
 3724 0096 094B     		ldr	r3, .L224+12
 3725 0098 1B68     		ldr	r3, [r3]
 3726 009a DB6A     		ldr	r3, [r3, #44]
 3727              		.loc 1 3243 4
 3728 009c 9A42     		cmp	r2, r3
 3729 009e 02D9     		bls	.L223
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3730              		.loc 1 3249 17
 3731 00a0 074B     		ldr	r3, .L224+16
 3732 00a2 0122     		movs	r2, #1
 3733 00a4 1A60     		str	r2, [r3]
 3734              	.L223:
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3735              		.loc 1 3251 1
 3736 00a6 00BF     		nop
 3737 00a8 1837     		adds	r7, r7, #24
 3738              	.LCFI135:
 3739              		.cfi_def_cfa_offset 8
 3740 00aa BD46     		mov	sp, r7
 3741              	.LCFI136:
 3742              		.cfi_def_cfa_register 13
 3743              		@ sp needed
 3744 00ac 80BD     		pop	{r7, pc}
 3745              	.L225:
 3746 00ae 00BF     		.align	2
 3747              	.L224:
 3748 00b0 00000000 		.word	uxSchedulerSuspended
 3749 00b4 00000000 		.word	uxTopReadyPriority
 3750 00b8 00000000 		.word	pxReadyTasksLists
 3751 00bc 00000000 		.word	pxCurrentTCB
 3752 00c0 00000000 		.word	xYieldPending
 3753              		.cfi_endproc
 3754              	.LFE31:
 3756              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3757              		.align	1
 3758              		.global	vTaskSetTimeOutState
 3759              		.syntax unified
 3760              		.thumb
 3761              		.thumb_func
 3762              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccv2gsms.s 			page 128


 3764              	vTaskSetTimeOutState:
 3765              	.LFB32:
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3766              		.loc 1 3255 1
 3767              		.cfi_startproc
 3768              		@ args = 0, pretend = 0, frame = 16
 3769              		@ frame_needed = 1, uses_anonymous_args = 0
 3770 0000 80B5     		push	{r7, lr}
 3771              	.LCFI137:
 3772              		.cfi_def_cfa_offset 8
 3773              		.cfi_offset 7, -8
 3774              		.cfi_offset 14, -4
 3775 0002 84B0     		sub	sp, sp, #16
 3776              	.LCFI138:
 3777              		.cfi_def_cfa_offset 24
 3778 0004 00AF     		add	r7, sp, #0
 3779              	.LCFI139:
 3780              		.cfi_def_cfa_register 7
 3781 0006 7860     		str	r0, [r7, #4]
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3782              		.loc 1 3256 2
 3783 0008 7B68     		ldr	r3, [r7, #4]
 3784 000a 002B     		cmp	r3, #0
 3785 000c 0AD1     		bne	.L227
 3786              	.LBB160:
 3787              	.LBB161:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3788              		.loc 2 195 2
 3789              		.syntax unified
 3790              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3791 000e 4FF05003 			mov r3, #80												
 3792 0012 83F31188 		msr basepri, r3											
 3793 0016 BFF36F8F 		isb														
 3794 001a BFF34F8F 		dsb														
 3795              	
 3796              	@ 0 "" 2
 3797              		.thumb
 3798              		.syntax unified
 3799 001e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3800              		.loc 2 203 1
 3801 0020 00BF     		nop
 3802              	.L228:
 3803              	.LBE161:
 3804              	.LBE160:
 3805              		.loc 1 3256 2 discriminator 1
 3806 0022 FEE7     		b	.L228
 3807              	.L227:
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3808              		.loc 1 3257 2
 3809 0024 FFF7FEFF 		bl	vPortEnterCritical
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 3810              		.loc 1 3259 29
ARM GAS  /tmp/ccv2gsms.s 			page 129


 3811 0028 064B     		ldr	r3, .L229
 3812 002a 1A68     		ldr	r2, [r3]
 3813 002c 7B68     		ldr	r3, [r7, #4]
 3814 002e 1A60     		str	r2, [r3]
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3815              		.loc 1 3260 30
 3816 0030 054B     		ldr	r3, .L229+4
 3817 0032 1A68     		ldr	r2, [r3]
 3818 0034 7B68     		ldr	r3, [r7, #4]
 3819 0036 5A60     		str	r2, [r3, #4]
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 3820              		.loc 1 3262 2
 3821 0038 FFF7FEFF 		bl	vPortExitCritical
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3822              		.loc 1 3263 1
 3823 003c 00BF     		nop
 3824 003e 1037     		adds	r7, r7, #16
 3825              	.LCFI140:
 3826              		.cfi_def_cfa_offset 8
 3827 0040 BD46     		mov	sp, r7
 3828              	.LCFI141:
 3829              		.cfi_def_cfa_register 13
 3830              		@ sp needed
 3831 0042 80BD     		pop	{r7, pc}
 3832              	.L230:
 3833              		.align	2
 3834              	.L229:
 3835 0044 00000000 		.word	xNumOfOverflows
 3836 0048 00000000 		.word	xTickCount
 3837              		.cfi_endproc
 3838              	.LFE32:
 3840              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3841              		.align	1
 3842              		.global	vTaskInternalSetTimeOutState
 3843              		.syntax unified
 3844              		.thumb
 3845              		.thumb_func
 3846              		.fpu fpv4-sp-d16
 3848              	vTaskInternalSetTimeOutState:
 3849              	.LFB33:
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3850              		.loc 1 3267 1
 3851              		.cfi_startproc
 3852              		@ args = 0, pretend = 0, frame = 8
 3853              		@ frame_needed = 1, uses_anonymous_args = 0
 3854              		@ link register save eliminated.
 3855 0000 80B4     		push	{r7}
 3856              	.LCFI142:
 3857              		.cfi_def_cfa_offset 4
 3858              		.cfi_offset 7, -4
 3859 0002 83B0     		sub	sp, sp, #12
 3860              	.LCFI143:
 3861              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccv2gsms.s 			page 130


 3862 0004 00AF     		add	r7, sp, #0
 3863              	.LCFI144:
 3864              		.cfi_def_cfa_register 7
 3865 0006 7860     		str	r0, [r7, #4]
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3866              		.loc 1 3269 28
 3867 0008 064B     		ldr	r3, .L232
 3868 000a 1A68     		ldr	r2, [r3]
 3869 000c 7B68     		ldr	r3, [r7, #4]
 3870 000e 1A60     		str	r2, [r3]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3871              		.loc 1 3270 29
 3872 0010 054B     		ldr	r3, .L232+4
 3873 0012 1A68     		ldr	r2, [r3]
 3874 0014 7B68     		ldr	r3, [r7, #4]
 3875 0016 5A60     		str	r2, [r3, #4]
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3876              		.loc 1 3271 1
 3877 0018 00BF     		nop
 3878 001a 0C37     		adds	r7, r7, #12
 3879              	.LCFI145:
 3880              		.cfi_def_cfa_offset 4
 3881 001c BD46     		mov	sp, r7
 3882              	.LCFI146:
 3883              		.cfi_def_cfa_register 13
 3884              		@ sp needed
 3885 001e 5DF8047B 		ldr	r7, [sp], #4
 3886              	.LCFI147:
 3887              		.cfi_restore 7
 3888              		.cfi_def_cfa_offset 0
 3889 0022 7047     		bx	lr
 3890              	.L233:
 3891              		.align	2
 3892              	.L232:
 3893 0024 00000000 		.word	xNumOfOverflows
 3894 0028 00000000 		.word	xTickCount
 3895              		.cfi_endproc
 3896              	.LFE33:
 3898              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3899              		.align	1
 3900              		.global	xTaskCheckForTimeOut
 3901              		.syntax unified
 3902              		.thumb
 3903              		.thumb_func
 3904              		.fpu fpv4-sp-d16
 3906              	xTaskCheckForTimeOut:
 3907              	.LFB34:
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3908              		.loc 1 3275 1
 3909              		.cfi_startproc
 3910              		@ args = 0, pretend = 0, frame = 32
 3911              		@ frame_needed = 1, uses_anonymous_args = 0
 3912 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccv2gsms.s 			page 131


 3913              	.LCFI148:
 3914              		.cfi_def_cfa_offset 8
 3915              		.cfi_offset 7, -8
 3916              		.cfi_offset 14, -4
 3917 0002 88B0     		sub	sp, sp, #32
 3918              	.LCFI149:
 3919              		.cfi_def_cfa_offset 40
 3920 0004 00AF     		add	r7, sp, #0
 3921              	.LCFI150:
 3922              		.cfi_def_cfa_register 7
 3923 0006 7860     		str	r0, [r7, #4]
 3924 0008 3960     		str	r1, [r7]
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3925              		.loc 1 3278 2
 3926 000a 7B68     		ldr	r3, [r7, #4]
 3927 000c 002B     		cmp	r3, #0
 3928 000e 0AD1     		bne	.L235
 3929              	.LBB162:
 3930              	.LBB163:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3931              		.loc 2 195 2
 3932              		.syntax unified
 3933              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3934 0010 4FF05003 			mov r3, #80												
 3935 0014 83F31188 		msr basepri, r3											
 3936 0018 BFF36F8F 		isb														
 3937 001c BFF34F8F 		dsb														
 3938              	
 3939              	@ 0 "" 2
 3940              		.thumb
 3941              		.syntax unified
 3942 0020 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3943              		.loc 2 203 1
 3944 0022 00BF     		nop
 3945              	.L236:
 3946              	.LBE163:
 3947              	.LBE162:
 3948              		.loc 1 3278 2 discriminator 1
 3949 0024 FEE7     		b	.L236
 3950              	.L235:
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3951              		.loc 1 3279 2
 3952 0026 3B68     		ldr	r3, [r7]
 3953 0028 002B     		cmp	r3, #0
 3954 002a 0AD1     		bne	.L237
 3955              	.LBB164:
 3956              	.LBB165:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3957              		.loc 2 195 2
 3958              		.syntax unified
 3959              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3960 002c 4FF05003 			mov r3, #80												
 3961 0030 83F31188 		msr basepri, r3											
 3962 0034 BFF36F8F 		isb														
ARM GAS  /tmp/ccv2gsms.s 			page 132


 3963 0038 BFF34F8F 		dsb														
 3964              	
 3965              	@ 0 "" 2
 3966              		.thumb
 3967              		.syntax unified
 3968 003c FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3969              		.loc 2 203 1
 3970 003e 00BF     		nop
 3971              	.L238:
 3972              	.LBE165:
 3973              	.LBE164:
 3974              		.loc 1 3279 2 discriminator 2
 3975 0040 FEE7     		b	.L238
 3976              	.L237:
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3977              		.loc 1 3281 2
 3978 0042 FFF7FEFF 		bl	vPortEnterCritical
 3979              	.LBB166:
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 3980              		.loc 1 3284 20
 3981 0046 1D4B     		ldr	r3, .L244
 3982 0048 1B68     		ldr	r3, [r3]
 3983 004a BB61     		str	r3, [r7, #24]
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3984              		.loc 1 3285 62
 3985 004c 7B68     		ldr	r3, [r7, #4]
 3986 004e 5B68     		ldr	r3, [r3, #4]
 3987              		.loc 1 3285 20
 3988 0050 BA69     		ldr	r2, [r7, #24]
 3989 0052 D31A     		subs	r3, r2, r3
 3990 0054 7B61     		str	r3, [r7, #20]
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 3991              		.loc 1 3299 8
 3992 0056 3B68     		ldr	r3, [r7]
 3993 0058 1B68     		ldr	r3, [r3]
 3994              		.loc 1 3299 6
 3995 005a B3F1FF3F 		cmp	r3, #-1
 3996 005e 02D1     		bne	.L239
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
ARM GAS  /tmp/ccv2gsms.s 			page 133


3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 3997              		.loc 1 3304 13
 3998 0060 0023     		movs	r3, #0
 3999 0062 FB61     		str	r3, [r7, #28]
 4000 0064 23E0     		b	.L240
 4001              	.L239:
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 4002              		.loc 1 3309 37
 4003 0066 7B68     		ldr	r3, [r7, #4]
 4004 0068 1A68     		ldr	r2, [r3]
 4005              		.loc 1 3309 25
 4006 006a 154B     		ldr	r3, .L244+4
 4007 006c 1B68     		ldr	r3, [r3]
 4008              		.loc 1 3309 5
 4009 006e 9A42     		cmp	r2, r3
 4010 0070 07D0     		beq	.L241
 4011              		.loc 1 3309 89 discriminator 1
 4012 0072 7B68     		ldr	r3, [r7, #4]
 4013 0074 5B68     		ldr	r3, [r3, #4]
 4014              		.loc 1 3309 56 discriminator 1
 4015 0076 BA69     		ldr	r2, [r7, #24]
 4016 0078 9A42     		cmp	r2, r3
 4017 007a 02D3     		bcc	.L241
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4018              		.loc 1 3316 12
 4019 007c 0123     		movs	r3, #1
 4020 007e FB61     		str	r3, [r7, #28]
 4021 0080 15E0     		b	.L240
 4022              	.L241:
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 4023              		.loc 1 3318 27
 4024 0082 3B68     		ldr	r3, [r7]
 4025 0084 1B68     		ldr	r3, [r3]
 4026              		.loc 1 3318 10
 4027 0086 7A69     		ldr	r2, [r7, #20]
 4028 0088 9A42     		cmp	r2, r3
 4029 008a 0BD2     		bcs	.L242
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 4030              		.loc 1 3321 19
 4031 008c 3B68     		ldr	r3, [r7]
 4032 008e 1A68     		ldr	r2, [r3]
 4033 0090 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/ccv2gsms.s 			page 134


 4034 0092 D21A     		subs	r2, r2, r3
 4035 0094 3B68     		ldr	r3, [r7]
 4036 0096 1A60     		str	r2, [r3]
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4037              		.loc 1 3322 4
 4038 0098 7868     		ldr	r0, [r7, #4]
 4039 009a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4040              		.loc 1 3323 12
 4041 009e 0023     		movs	r3, #0
 4042 00a0 FB61     		str	r3, [r7, #28]
 4043 00a2 04E0     		b	.L240
 4044              	.L242:
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
 4045              		.loc 1 3327 19
 4046 00a4 3B68     		ldr	r3, [r7]
 4047 00a6 0022     		movs	r2, #0
 4048 00a8 1A60     		str	r2, [r3]
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4049              		.loc 1 3328 12
 4050 00aa 0123     		movs	r3, #1
 4051 00ac FB61     		str	r3, [r7, #28]
 4052              	.L240:
 4053              	.LBE166:
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4054              		.loc 1 3331 2
 4055 00ae FFF7FEFF 		bl	vPortExitCritical
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4056              		.loc 1 3333 9
 4057 00b2 FB69     		ldr	r3, [r7, #28]
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4058              		.loc 1 3334 1
 4059 00b4 1846     		mov	r0, r3
 4060 00b6 2037     		adds	r7, r7, #32
 4061              	.LCFI151:
 4062              		.cfi_def_cfa_offset 8
 4063 00b8 BD46     		mov	sp, r7
 4064              	.LCFI152:
 4065              		.cfi_def_cfa_register 13
 4066              		@ sp needed
 4067 00ba 80BD     		pop	{r7, pc}
 4068              	.L245:
 4069              		.align	2
 4070              	.L244:
 4071 00bc 00000000 		.word	xTickCount
 4072 00c0 00000000 		.word	xNumOfOverflows
 4073              		.cfi_endproc
 4074              	.LFE34:
 4076              		.section	.text.vTaskMissedYield,"ax",%progbits
 4077              		.align	1
 4078              		.global	vTaskMissedYield
ARM GAS  /tmp/ccv2gsms.s 			page 135


 4079              		.syntax unified
 4080              		.thumb
 4081              		.thumb_func
 4082              		.fpu fpv4-sp-d16
 4084              	vTaskMissedYield:
 4085              	.LFB35:
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4086              		.loc 1 3338 1
 4087              		.cfi_startproc
 4088              		@ args = 0, pretend = 0, frame = 0
 4089              		@ frame_needed = 1, uses_anonymous_args = 0
 4090              		@ link register save eliminated.
 4091 0000 80B4     		push	{r7}
 4092              	.LCFI153:
 4093              		.cfi_def_cfa_offset 4
 4094              		.cfi_offset 7, -4
 4095 0002 00AF     		add	r7, sp, #0
 4096              	.LCFI154:
 4097              		.cfi_def_cfa_register 7
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4098              		.loc 1 3339 16
 4099 0004 034B     		ldr	r3, .L247
 4100 0006 0122     		movs	r2, #1
 4101 0008 1A60     		str	r2, [r3]
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4102              		.loc 1 3340 1
 4103 000a 00BF     		nop
 4104 000c BD46     		mov	sp, r7
 4105              	.LCFI155:
 4106              		.cfi_def_cfa_register 13
 4107              		@ sp needed
 4108 000e 5DF8047B 		ldr	r7, [sp], #4
 4109              	.LCFI156:
 4110              		.cfi_restore 7
 4111              		.cfi_def_cfa_offset 0
 4112 0012 7047     		bx	lr
 4113              	.L248:
 4114              		.align	2
 4115              	.L247:
 4116 0014 00000000 		.word	xYieldPending
 4117              		.cfi_endproc
 4118              	.LFE35:
 4120              		.section	.text.prvIdleTask,"ax",%progbits
 4121              		.align	1
 4122              		.syntax unified
 4123              		.thumb
 4124              		.thumb_func
 4125              		.fpu fpv4-sp-d16
 4127              	prvIdleTask:
 4128              	.LFB36:
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv2gsms.s 			page 136


3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4129              		.loc 1 3393 1
 4130              		.cfi_startproc
 4131              		@ args = 0, pretend = 0, frame = 8
 4132              		@ frame_needed = 1, uses_anonymous_args = 0
 4133 0000 80B5     		push	{r7, lr}
 4134              	.LCFI157:
 4135              		.cfi_def_cfa_offset 8
 4136              		.cfi_offset 7, -8
ARM GAS  /tmp/ccv2gsms.s 			page 137


 4137              		.cfi_offset 14, -4
 4138 0002 82B0     		sub	sp, sp, #8
 4139              	.LCFI158:
 4140              		.cfi_def_cfa_offset 16
 4141 0004 00AF     		add	r7, sp, #0
 4142              	.LCFI159:
 4143              		.cfi_def_cfa_register 7
 4144 0006 7860     		str	r0, [r7, #4]
 4145              	.L251:
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 4146              		.loc 1 3409 3
 4147 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 4148              		.loc 1 3432 8
 4149 000c 064B     		ldr	r3, .L252
 4150 000e 1B68     		ldr	r3, [r3]
 4151              		.loc 1 3432 6
 4152 0010 012B     		cmp	r3, #1
 4153 0012 F9D9     		bls	.L251
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccv2gsms.s 			page 138


3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 4154              		.loc 1 3434 5
 4155 0014 054B     		ldr	r3, .L252+4
 4156 0016 4FF08052 		mov	r2, #268435456
 4157 001a 1A60     		str	r2, [r3]
 4158              		.syntax unified
 4159              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4160 001c BFF34F8F 		dsb
 4161              	@ 0 "" 2
 4162              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4163 0020 BFF36F8F 		isb
 4164              	@ 0 "" 2
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4165              		.loc 1 3409 3
 4166              		.thumb
 4167              		.syntax unified
 4168 0024 F0E7     		b	.L251
 4169              	.L253:
 4170 0026 00BF     		.align	2
 4171              	.L252:
 4172 0028 00000000 		.word	pxReadyTasksLists
 4173 002c 04ED00E0 		.word	-536810236
 4174              		.cfi_endproc
 4175              	.LFE36:
 4177              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 4178              		.align	1
 4179              		.syntax unified
 4180              		.thumb
 4181              		.thumb_func
 4182              		.fpu fpv4-sp-d16
 4184              	prvInitialiseTaskLists:
 4185              	.LFB37:
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
ARM GAS  /tmp/ccv2gsms.s 			page 139


3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv2gsms.s 			page 140


3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function must be called from a critical section. */
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/ccv2gsms.s 			page 141


3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4186              		.loc 1 3608 1
 4187              		.cfi_startproc
 4188              		@ args = 0, pretend = 0, frame = 8
 4189              		@ frame_needed = 1, uses_anonymous_args = 0
 4190 0000 80B5     		push	{r7, lr}
 4191              	.LCFI160:
 4192              		.cfi_def_cfa_offset 8
 4193              		.cfi_offset 7, -8
 4194              		.cfi_offset 14, -4
 4195 0002 82B0     		sub	sp, sp, #8
 4196              	.LCFI161:
 4197              		.cfi_def_cfa_offset 16
 4198 0004 00AF     		add	r7, sp, #0
 4199              	.LCFI162:
 4200              		.cfi_def_cfa_register 7
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 4201              		.loc 1 3611 18
 4202 0006 0023     		movs	r3, #0
 4203 0008 7B60     		str	r3, [r7, #4]
 4204              		.loc 1 3611 2
ARM GAS  /tmp/ccv2gsms.s 			page 142


 4205 000a 0CE0     		b	.L255
 4206              	.L256:
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 4207              		.loc 1 3613 3 discriminator 3
 4208 000c 7A68     		ldr	r2, [r7, #4]
 4209 000e 1346     		mov	r3, r2
 4210 0010 9B00     		lsls	r3, r3, #2
 4211 0012 1344     		add	r3, r3, r2
 4212 0014 9B00     		lsls	r3, r3, #2
 4213 0016 124A     		ldr	r2, .L257
 4214 0018 1344     		add	r3, r3, r2
 4215 001a 1846     		mov	r0, r3
 4216 001c FFF7FEFF 		bl	vListInitialise
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4217              		.loc 1 3611 101 discriminator 3
 4218 0020 7B68     		ldr	r3, [r7, #4]
 4219 0022 0133     		adds	r3, r3, #1
 4220 0024 7B60     		str	r3, [r7, #4]
 4221              	.L255:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4222              		.loc 1 3611 2 discriminator 1
 4223 0026 7B68     		ldr	r3, [r7, #4]
 4224 0028 062B     		cmp	r3, #6
 4225 002a EFD9     		bls	.L256
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 4226              		.loc 1 3616 2
 4227 002c 0D48     		ldr	r0, .L257+4
 4228 002e FFF7FEFF 		bl	vListInitialise
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 4229              		.loc 1 3617 2
 4230 0032 0D48     		ldr	r0, .L257+8
 4231 0034 FFF7FEFF 		bl	vListInitialise
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 4232              		.loc 1 3618 2
 4233 0038 0C48     		ldr	r0, .L257+12
 4234 003a FFF7FEFF 		bl	vListInitialise
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 4235              		.loc 1 3622 3
 4236 003e 0C48     		ldr	r0, .L257+16
 4237 0040 FFF7FEFF 		bl	vListInitialise
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 4238              		.loc 1 3628 3
 4239 0044 0B48     		ldr	r0, .L257+20
 4240 0046 FFF7FEFF 		bl	vListInitialise
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
ARM GAS  /tmp/ccv2gsms.s 			page 143


3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 4241              		.loc 1 3634 20
 4242 004a 0B4B     		ldr	r3, .L257+24
 4243 004c 054A     		ldr	r2, .L257+4
 4244 004e 1A60     		str	r2, [r3]
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 4245              		.loc 1 3635 28
 4246 0050 0A4B     		ldr	r3, .L257+28
 4247 0052 054A     		ldr	r2, .L257+8
 4248 0054 1A60     		str	r2, [r3]
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4249              		.loc 1 3636 1
 4250 0056 00BF     		nop
 4251 0058 0837     		adds	r7, r7, #8
 4252              	.LCFI163:
 4253              		.cfi_def_cfa_offset 8
 4254 005a BD46     		mov	sp, r7
 4255              	.LCFI164:
 4256              		.cfi_def_cfa_register 13
 4257              		@ sp needed
 4258 005c 80BD     		pop	{r7, pc}
 4259              	.L258:
 4260 005e 00BF     		.align	2
 4261              	.L257:
 4262 0060 00000000 		.word	pxReadyTasksLists
 4263 0064 00000000 		.word	xDelayedTaskList1
 4264 0068 00000000 		.word	xDelayedTaskList2
 4265 006c 00000000 		.word	xPendingReadyList
 4266 0070 00000000 		.word	xTasksWaitingTermination
 4267 0074 00000000 		.word	xSuspendedTaskList
 4268 0078 00000000 		.word	pxDelayedTaskList
 4269 007c 00000000 		.word	pxOverflowDelayedTaskList
 4270              		.cfi_endproc
 4271              	.LFE37:
 4273              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 4274              		.align	1
 4275              		.syntax unified
 4276              		.thumb
 4277              		.thumb_func
 4278              		.fpu fpv4-sp-d16
 4280              	prvCheckTasksWaitingTermination:
 4281              	.LFB38:
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4282              		.loc 1 3640 1
 4283              		.cfi_startproc
 4284              		@ args = 0, pretend = 0, frame = 8
 4285              		@ frame_needed = 1, uses_anonymous_args = 0
 4286 0000 80B5     		push	{r7, lr}
 4287              	.LCFI165:
 4288              		.cfi_def_cfa_offset 8
 4289              		.cfi_offset 7, -8
ARM GAS  /tmp/ccv2gsms.s 			page 144


 4290              		.cfi_offset 14, -4
 4291 0002 82B0     		sub	sp, sp, #8
 4292              	.LCFI166:
 4293              		.cfi_def_cfa_offset 16
 4294 0004 00AF     		add	r7, sp, #0
 4295              	.LCFI167:
 4296              		.cfi_def_cfa_register 7
 4297              	.LBB167:
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 4298              		.loc 1 3650 8
 4299 0006 19E0     		b	.L260
 4300              	.L261:
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 4301              		.loc 1 3652 4
 4302 0008 FFF7FEFF 		bl	vPortEnterCritical
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 4303              		.loc 1 3654 13
 4304 000c 104B     		ldr	r3, .L262
 4305 000e DB68     		ldr	r3, [r3, #12]
 4306              		.loc 1 3654 11
 4307 0010 DB68     		ldr	r3, [r3, #12]
 4308 0012 7B60     		str	r3, [r7, #4]
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4309              		.loc 1 3655 14
 4310 0014 7B68     		ldr	r3, [r7, #4]
 4311 0016 0433     		adds	r3, r3, #4
 4312 0018 1846     		mov	r0, r3
 4313 001a FFF7FEFF 		bl	uxListRemove
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 4314              		.loc 1 3656 5
 4315 001e 0D4B     		ldr	r3, .L262+4
 4316 0020 1B68     		ldr	r3, [r3]
 4317 0022 013B     		subs	r3, r3, #1
 4318 0024 0B4A     		ldr	r2, .L262+4
 4319 0026 1360     		str	r3, [r2]
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 4320              		.loc 1 3657 5
 4321 0028 0B4B     		ldr	r3, .L262+8
 4322 002a 1B68     		ldr	r3, [r3]
 4323 002c 013B     		subs	r3, r3, #1
 4324 002e 0A4A     		ldr	r2, .L262+8
 4325 0030 1360     		str	r3, [r2]
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 4326              		.loc 1 3659 4
 4327 0032 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/ccv2gsms.s 			page 145


3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 4328              		.loc 1 3661 4
 4329 0036 7868     		ldr	r0, [r7, #4]
 4330 0038 FFF7FEFF 		bl	prvDeleteTCB
 4331              	.L260:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4332              		.loc 1 3650 39
 4333 003c 064B     		ldr	r3, .L262+8
 4334 003e 1B68     		ldr	r3, [r3]
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4335              		.loc 1 3650 8
 4336 0040 002B     		cmp	r3, #0
 4337 0042 E1D1     		bne	.L261
 4338              	.LBE167:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4339              		.loc 1 3665 1
 4340 0044 00BF     		nop
 4341 0046 00BF     		nop
 4342 0048 0837     		adds	r7, r7, #8
 4343              	.LCFI168:
 4344              		.cfi_def_cfa_offset 8
 4345 004a BD46     		mov	sp, r7
 4346              	.LCFI169:
 4347              		.cfi_def_cfa_register 13
 4348              		@ sp needed
 4349 004c 80BD     		pop	{r7, pc}
 4350              	.L263:
 4351 004e 00BF     		.align	2
 4352              	.L262:
 4353 0050 00000000 		.word	xTasksWaitingTermination
 4354 0054 00000000 		.word	uxCurrentNumberOfTasks
 4355 0058 00000000 		.word	uxDeletedTasksWaitingCleanUp
 4356              		.cfi_endproc
 4357              	.LFE38:
 4359              		.section	.text.prvDeleteTCB,"ax",%progbits
 4360              		.align	1
 4361              		.syntax unified
 4362              		.thumb
 4363              		.thumb_func
 4364              		.fpu fpv4-sp-d16
 4366              	prvDeleteTCB:
 4367              	.LFB39:
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv2gsms.s 			page 146


3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
ARM GAS  /tmp/ccv2gsms.s 			page 147


3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv2gsms.s 			page 148


3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
ARM GAS  /tmp/ccv2gsms.s 			page 149


3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4368              		.loc 1 3888 2
 4369              		.cfi_startproc
 4370              		@ args = 0, pretend = 0, frame = 8
 4371              		@ frame_needed = 1, uses_anonymous_args = 0
 4372 0000 80B5     		push	{r7, lr}
 4373              	.LCFI170:
 4374              		.cfi_def_cfa_offset 8
 4375              		.cfi_offset 7, -8
 4376              		.cfi_offset 14, -4
 4377 0002 82B0     		sub	sp, sp, #8
 4378              	.LCFI171:
 4379              		.cfi_def_cfa_offset 16
 4380 0004 00AF     		add	r7, sp, #0
 4381              	.LCFI172:
 4382              		.cfi_def_cfa_register 7
 4383 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccv2gsms.s 			page 150


3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
 4384              		.loc 1 3908 20
 4385 0008 7B68     		ldr	r3, [r7, #4]
 4386 000a 1B6B     		ldr	r3, [r3, #48]
 4387              		.loc 1 3908 4
 4388 000c 1846     		mov	r0, r3
 4389 000e FFF7FEFF 		bl	vPortFree
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 4390              		.loc 1 3909 4
 4391 0012 7868     		ldr	r0, [r7, #4]
 4392 0014 FFF7FEFF 		bl	vPortFree
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccv2gsms.s 			page 151


3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4393              		.loc 1 3938 2
 4394 0018 00BF     		nop
 4395 001a 0837     		adds	r7, r7, #8
 4396              	.LCFI173:
 4397              		.cfi_def_cfa_offset 8
 4398 001c BD46     		mov	sp, r7
 4399              	.LCFI174:
 4400              		.cfi_def_cfa_register 13
 4401              		@ sp needed
 4402 001e 80BD     		pop	{r7, pc}
 4403              		.cfi_endproc
 4404              	.LFE39:
 4406              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 4407              		.align	1
 4408              		.syntax unified
 4409              		.thumb
 4410              		.thumb_func
 4411              		.fpu fpv4-sp-d16
 4413              	prvResetNextTaskUnblockTime:
 4414              	.LFB40:
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4415              		.loc 1 3944 1
 4416              		.cfi_startproc
 4417              		@ args = 0, pretend = 0, frame = 8
 4418              		@ frame_needed = 1, uses_anonymous_args = 0
 4419              		@ link register save eliminated.
 4420 0000 80B4     		push	{r7}
 4421              	.LCFI175:
 4422              		.cfi_def_cfa_offset 4
 4423              		.cfi_offset 7, -4
 4424 0002 83B0     		sub	sp, sp, #12
 4425              	.LCFI176:
 4426              		.cfi_def_cfa_offset 16
 4427 0004 00AF     		add	r7, sp, #0
 4428              	.LCFI177:
 4429              		.cfi_def_cfa_register 7
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4430              		.loc 1 3947 6
 4431 0006 0C4B     		ldr	r3, .L269
 4432 0008 1B68     		ldr	r3, [r3]
 4433 000a 1B68     		ldr	r3, [r3]
 4434              		.loc 1 3947 4
 4435 000c 002B     		cmp	r3, #0
 4436 000e 04D1     		bne	.L266
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
ARM GAS  /tmp/ccv2gsms.s 			page 152


3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 4437              		.loc 1 3953 24
 4438 0010 0A4B     		ldr	r3, .L269+4
 4439 0012 4FF0FF32 		mov	r2, #-1
 4440 0016 1A60     		str	r2, [r3]
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4441              		.loc 1 3964 1
 4442 0018 08E0     		b	.L268
 4443              	.L266:
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 4444              		.loc 1 3961 15
 4445 001a 074B     		ldr	r3, .L269
 4446 001c 1B68     		ldr	r3, [r3]
 4447 001e DB68     		ldr	r3, [r3, #12]
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 4448              		.loc 1 3961 13
 4449 0020 DB68     		ldr	r3, [r3, #12]
 4450 0022 7B60     		str	r3, [r7, #4]
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4451              		.loc 1 3962 26
 4452 0024 7B68     		ldr	r3, [r7, #4]
 4453 0026 5B68     		ldr	r3, [r3, #4]
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4454              		.loc 1 3962 24
 4455 0028 044A     		ldr	r2, .L269+4
 4456 002a 1360     		str	r3, [r2]
 4457              	.L268:
 4458              		.loc 1 3964 1
 4459 002c 00BF     		nop
 4460 002e 0C37     		adds	r7, r7, #12
 4461              	.LCFI178:
 4462              		.cfi_def_cfa_offset 4
 4463 0030 BD46     		mov	sp, r7
 4464              	.LCFI179:
 4465              		.cfi_def_cfa_register 13
 4466              		@ sp needed
 4467 0032 5DF8047B 		ldr	r7, [sp], #4
 4468              	.LCFI180:
 4469              		.cfi_restore 7
 4470              		.cfi_def_cfa_offset 0
 4471 0036 7047     		bx	lr
 4472              	.L270:
 4473              		.align	2
 4474              	.L269:
 4475 0038 00000000 		.word	pxDelayedTaskList
 4476 003c 00000000 		.word	xNextTaskUnblockTime
ARM GAS  /tmp/ccv2gsms.s 			page 153


 4477              		.cfi_endproc
 4478              	.LFE40:
 4480              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4481              		.align	1
 4482              		.global	xTaskGetCurrentTaskHandle
 4483              		.syntax unified
 4484              		.thumb
 4485              		.thumb_func
 4486              		.fpu fpv4-sp-d16
 4488              	xTaskGetCurrentTaskHandle:
 4489              	.LFB41:
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4490              		.loc 1 3970 2
 4491              		.cfi_startproc
 4492              		@ args = 0, pretend = 0, frame = 8
 4493              		@ frame_needed = 1, uses_anonymous_args = 0
 4494              		@ link register save eliminated.
 4495 0000 80B4     		push	{r7}
 4496              	.LCFI181:
 4497              		.cfi_def_cfa_offset 4
 4498              		.cfi_offset 7, -4
 4499 0002 83B0     		sub	sp, sp, #12
 4500              	.LCFI182:
 4501              		.cfi_def_cfa_offset 16
 4502 0004 00AF     		add	r7, sp, #0
 4503              	.LCFI183:
 4504              		.cfi_def_cfa_register 7
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 4505              		.loc 1 3976 11
 4506 0006 054B     		ldr	r3, .L273
 4507 0008 1B68     		ldr	r3, [r3]
 4508 000a 7B60     		str	r3, [r7, #4]
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4509              		.loc 1 3978 10
 4510 000c 7B68     		ldr	r3, [r7, #4]
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4511              		.loc 1 3979 2
 4512 000e 1846     		mov	r0, r3
 4513 0010 0C37     		adds	r7, r7, #12
 4514              	.LCFI184:
 4515              		.cfi_def_cfa_offset 4
 4516 0012 BD46     		mov	sp, r7
 4517              	.LCFI185:
 4518              		.cfi_def_cfa_register 13
 4519              		@ sp needed
 4520 0014 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccv2gsms.s 			page 154


 4521              	.LCFI186:
 4522              		.cfi_restore 7
 4523              		.cfi_def_cfa_offset 0
 4524 0018 7047     		bx	lr
 4525              	.L274:
 4526 001a 00BF     		.align	2
 4527              	.L273:
 4528 001c 00000000 		.word	pxCurrentTCB
 4529              		.cfi_endproc
 4530              	.LFE41:
 4532              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4533              		.align	1
 4534              		.global	xTaskGetSchedulerState
 4535              		.syntax unified
 4536              		.thumb
 4537              		.thumb_func
 4538              		.fpu fpv4-sp-d16
 4540              	xTaskGetSchedulerState:
 4541              	.LFB42:
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4542              		.loc 1 3987 2
 4543              		.cfi_startproc
 4544              		@ args = 0, pretend = 0, frame = 8
 4545              		@ frame_needed = 1, uses_anonymous_args = 0
 4546              		@ link register save eliminated.
 4547 0000 80B4     		push	{r7}
 4548              	.LCFI187:
 4549              		.cfi_def_cfa_offset 4
 4550              		.cfi_offset 7, -4
 4551 0002 83B0     		sub	sp, sp, #12
 4552              	.LCFI188:
 4553              		.cfi_def_cfa_offset 16
 4554 0004 00AF     		add	r7, sp, #0
 4555              	.LCFI189:
 4556              		.cfi_def_cfa_register 7
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 4557              		.loc 1 3990 25
 4558 0006 0B4B     		ldr	r3, .L280
 4559 0008 1B68     		ldr	r3, [r3]
 4560              		.loc 1 3990 5
 4561 000a 002B     		cmp	r3, #0
 4562 000c 02D1     		bne	.L276
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 4563              		.loc 1 3992 12
 4564 000e 0123     		movs	r3, #1
 4565 0010 7B60     		str	r3, [r7, #4]
 4566 0012 08E0     		b	.L277
ARM GAS  /tmp/ccv2gsms.s 			page 155


 4567              	.L276:
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4568              		.loc 1 3996 29
 4569 0014 084B     		ldr	r3, .L280+4
 4570 0016 1B68     		ldr	r3, [r3]
 4571              		.loc 1 3996 6
 4572 0018 002B     		cmp	r3, #0
 4573 001a 02D1     		bne	.L278
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 4574              		.loc 1 3998 13
 4575 001c 0223     		movs	r3, #2
 4576 001e 7B60     		str	r3, [r7, #4]
 4577 0020 01E0     		b	.L277
 4578              	.L278:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 4579              		.loc 1 4002 13
 4580 0022 0023     		movs	r3, #0
 4581 0024 7B60     		str	r3, [r7, #4]
 4582              	.L277:
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4583              		.loc 1 4006 10
 4584 0026 7B68     		ldr	r3, [r7, #4]
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4585              		.loc 1 4007 2
 4586 0028 1846     		mov	r0, r3
 4587 002a 0C37     		adds	r7, r7, #12
 4588              	.LCFI190:
 4589              		.cfi_def_cfa_offset 4
 4590 002c BD46     		mov	sp, r7
 4591              	.LCFI191:
 4592              		.cfi_def_cfa_register 13
 4593              		@ sp needed
 4594 002e 5DF8047B 		ldr	r7, [sp], #4
 4595              	.LCFI192:
 4596              		.cfi_restore 7
 4597              		.cfi_def_cfa_offset 0
 4598 0032 7047     		bx	lr
 4599              	.L281:
 4600              		.align	2
 4601              	.L280:
 4602 0034 00000000 		.word	xSchedulerRunning
 4603 0038 00000000 		.word	uxSchedulerSuspended
 4604              		.cfi_endproc
 4605              	.LFE42:
 4607              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4608              		.align	1
 4609              		.global	xTaskPriorityInherit
ARM GAS  /tmp/ccv2gsms.s 			page 156


 4610              		.syntax unified
 4611              		.thumb
 4612              		.thumb_func
 4613              		.fpu fpv4-sp-d16
 4615              	xTaskPriorityInherit:
 4616              	.LFB43:
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4617              		.loc 1 4015 2
 4618              		.cfi_startproc
 4619              		@ args = 0, pretend = 0, frame = 16
 4620              		@ frame_needed = 1, uses_anonymous_args = 0
 4621 0000 80B5     		push	{r7, lr}
 4622              	.LCFI193:
 4623              		.cfi_def_cfa_offset 8
 4624              		.cfi_offset 7, -8
 4625              		.cfi_offset 14, -4
 4626 0002 84B0     		sub	sp, sp, #16
 4627              	.LCFI194:
 4628              		.cfi_def_cfa_offset 24
 4629 0004 00AF     		add	r7, sp, #0
 4630              	.LCFI195:
 4631              		.cfi_def_cfa_register 7
 4632 0006 7860     		str	r0, [r7, #4]
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4633              		.loc 1 4016 16
 4634 0008 7B68     		ldr	r3, [r7, #4]
 4635 000a BB60     		str	r3, [r7, #8]
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 4636              		.loc 1 4017 13
 4637 000c 0023     		movs	r3, #0
 4638 000e FB60     		str	r3, [r7, #12]
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4639              		.loc 1 4022 5
 4640 0010 7B68     		ldr	r3, [r7, #4]
 4641 0012 002B     		cmp	r3, #0
 4642 0014 5ED0     		beq	.L283
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 4643              		.loc 1 4027 24
 4644 0016 BB68     		ldr	r3, [r7, #8]
 4645 0018 DA6A     		ldr	r2, [r3, #44]
 4646              		.loc 1 4027 51
 4647 001a 314B     		ldr	r3, .L290
ARM GAS  /tmp/ccv2gsms.s 			page 157


 4648 001c 1B68     		ldr	r3, [r3]
 4649 001e DB6A     		ldr	r3, [r3, #44]
 4650              		.loc 1 4027 6
 4651 0020 9A42     		cmp	r2, r3
 4652 0022 4ED2     		bcs	.L284
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 4653              		.loc 1 4032 11
 4654 0024 BB68     		ldr	r3, [r7, #8]
 4655 0026 9B69     		ldr	r3, [r3, #24]
 4656              		.loc 1 4032 7
 4657 0028 002B     		cmp	r3, #0
 4658 002a 06DB     		blt	.L285
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 4659              		.loc 1 4034 6
 4660 002c 2C4B     		ldr	r3, .L290
 4661 002e 1B68     		ldr	r3, [r3]
 4662 0030 DB6A     		ldr	r3, [r3, #44]
 4663 0032 C3F10702 		rsb	r2, r3, #7
 4664 0036 BB68     		ldr	r3, [r7, #8]
 4665 0038 9A61     		str	r2, [r3, #24]
 4666              	.L285:
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 4667              		.loc 1 4043 9
 4668 003a BB68     		ldr	r3, [r7, #8]
 4669 003c 5969     		ldr	r1, [r3, #20]
 4670 003e BB68     		ldr	r3, [r7, #8]
 4671 0040 DA6A     		ldr	r2, [r3, #44]
 4672 0042 1346     		mov	r3, r2
 4673 0044 9B00     		lsls	r3, r3, #2
 4674 0046 1344     		add	r3, r3, r2
 4675 0048 9B00     		lsls	r3, r3, #2
 4676 004a 264A     		ldr	r2, .L290+4
 4677 004c 1344     		add	r3, r3, r2
 4678              		.loc 1 4043 7
 4679 004e 9942     		cmp	r1, r3
 4680 0050 2FD1     		bne	.L286
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4681              		.loc 1 4045 10
 4682 0052 BB68     		ldr	r3, [r7, #8]
 4683 0054 0433     		adds	r3, r3, #4
 4684 0056 1846     		mov	r0, r3
 4685 0058 FFF7FEFF 		bl	uxListRemove
 4686 005c 0346     		mov	r3, r0
ARM GAS  /tmp/ccv2gsms.s 			page 158


 4687              		.loc 1 4045 8
 4688 005e 002B     		cmp	r3, #0
 4689 0060 0AD1     		bne	.L287
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 4690              		.loc 1 4050 7
 4691 0062 BB68     		ldr	r3, [r7, #8]
 4692 0064 DB6A     		ldr	r3, [r3, #44]
 4693 0066 0122     		movs	r2, #1
 4694 0068 02FA03F3 		lsl	r3, r2, r3
 4695 006c DA43     		mvns	r2, r3
 4696 006e 1E4B     		ldr	r3, .L290+8
 4697 0070 1B68     		ldr	r3, [r3]
 4698 0072 1340     		ands	r3, r3, r2
 4699 0074 1C4A     		ldr	r2, .L290+8
 4700 0076 1360     		str	r3, [r2]
 4701              	.L287:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 4702              		.loc 1 4058 49
 4703 0078 194B     		ldr	r3, .L290
 4704 007a 1B68     		ldr	r3, [r3]
 4705 007c DA6A     		ldr	r2, [r3, #44]
 4706              		.loc 1 4058 35
 4707 007e BB68     		ldr	r3, [r7, #8]
 4708 0080 DA62     		str	r2, [r3, #44]
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4709              		.loc 1 4059 6
 4710 0082 BB68     		ldr	r3, [r7, #8]
 4711 0084 DB6A     		ldr	r3, [r3, #44]
 4712 0086 0122     		movs	r2, #1
 4713 0088 9A40     		lsls	r2, r2, r3
 4714 008a 174B     		ldr	r3, .L290+8
 4715 008c 1B68     		ldr	r3, [r3]
 4716 008e 1343     		orrs	r3, r3, r2
 4717 0090 154A     		ldr	r2, .L290+8
 4718 0092 1360     		str	r3, [r2]
 4719 0094 BB68     		ldr	r3, [r7, #8]
 4720 0096 DA6A     		ldr	r2, [r3, #44]
 4721 0098 1346     		mov	r3, r2
 4722 009a 9B00     		lsls	r3, r3, #2
 4723 009c 1344     		add	r3, r3, r2
 4724 009e 9B00     		lsls	r3, r3, #2
 4725 00a0 104A     		ldr	r2, .L290+4
 4726 00a2 1A44     		add	r2, r2, r3
 4727 00a4 BB68     		ldr	r3, [r7, #8]
 4728 00a6 0433     		adds	r3, r3, #4
 4729 00a8 1946     		mov	r1, r3
ARM GAS  /tmp/ccv2gsms.s 			page 159


 4730 00aa 1046     		mov	r0, r2
 4731 00ac FFF7FEFF 		bl	vListInsertEnd
 4732 00b0 04E0     		b	.L288
 4733              	.L286:
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 4734              		.loc 1 4064 49
 4735 00b2 0B4B     		ldr	r3, .L290
 4736 00b4 1B68     		ldr	r3, [r3]
 4737 00b6 DA6A     		ldr	r2, [r3, #44]
 4738              		.loc 1 4064 35
 4739 00b8 BB68     		ldr	r3, [r7, #8]
 4740 00ba DA62     		str	r2, [r3, #44]
 4741              	.L288:
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 4742              		.loc 1 4070 13
 4743 00bc 0123     		movs	r3, #1
 4744 00be FB60     		str	r3, [r7, #12]
 4745 00c0 08E0     		b	.L283
 4746              	.L284:
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 4747              		.loc 1 4074 25
 4748 00c2 BB68     		ldr	r3, [r7, #8]
 4749 00c4 5A6C     		ldr	r2, [r3, #68]
 4750              		.loc 1 4074 56
 4751 00c6 064B     		ldr	r3, .L290
 4752 00c8 1B68     		ldr	r3, [r3]
 4753 00ca DB6A     		ldr	r3, [r3, #44]
 4754              		.loc 1 4074 7
 4755 00cc 9A42     		cmp	r2, r3
 4756 00ce 01D2     		bcs	.L283
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 4757              		.loc 1 4083 14
 4758 00d0 0123     		movs	r3, #1
 4759 00d2 FB60     		str	r3, [r7, #12]
 4760              	.L283:
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  /tmp/ccv2gsms.s 			page 160


4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4761              		.loc 1 4096 10
 4762 00d4 FB68     		ldr	r3, [r7, #12]
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4763              		.loc 1 4097 2
 4764 00d6 1846     		mov	r0, r3
 4765 00d8 1037     		adds	r7, r7, #16
 4766              	.LCFI196:
 4767              		.cfi_def_cfa_offset 8
 4768 00da BD46     		mov	sp, r7
 4769              	.LCFI197:
 4770              		.cfi_def_cfa_register 13
 4771              		@ sp needed
 4772 00dc 80BD     		pop	{r7, pc}
 4773              	.L291:
 4774 00de 00BF     		.align	2
 4775              	.L290:
 4776 00e0 00000000 		.word	pxCurrentTCB
 4777 00e4 00000000 		.word	pxReadyTasksLists
 4778 00e8 00000000 		.word	uxTopReadyPriority
 4779              		.cfi_endproc
 4780              	.LFE43:
 4782              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4783              		.align	1
 4784              		.global	xTaskPriorityDisinherit
 4785              		.syntax unified
 4786              		.thumb
 4787              		.thumb_func
 4788              		.fpu fpv4-sp-d16
 4790              	xTaskPriorityDisinherit:
 4791              	.LFB44:
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4792              		.loc 1 4105 2
 4793              		.cfi_startproc
 4794              		@ args = 0, pretend = 0, frame = 24
 4795              		@ frame_needed = 1, uses_anonymous_args = 0
 4796 0000 80B5     		push	{r7, lr}
 4797              	.LCFI198:
 4798              		.cfi_def_cfa_offset 8
 4799              		.cfi_offset 7, -8
ARM GAS  /tmp/ccv2gsms.s 			page 161


 4800              		.cfi_offset 14, -4
 4801 0002 86B0     		sub	sp, sp, #24
 4802              	.LCFI199:
 4803              		.cfi_def_cfa_offset 32
 4804 0004 00AF     		add	r7, sp, #0
 4805              	.LCFI200:
 4806              		.cfi_def_cfa_register 7
 4807 0006 7860     		str	r0, [r7, #4]
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4808              		.loc 1 4106 16
 4809 0008 7B68     		ldr	r3, [r7, #4]
 4810 000a 3B61     		str	r3, [r7, #16]
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 4811              		.loc 1 4107 13
 4812 000c 0023     		movs	r3, #0
 4813 000e 7B61     		str	r3, [r7, #20]
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4814              		.loc 1 4109 5
 4815 0010 7B68     		ldr	r3, [r7, #4]
 4816 0012 002B     		cmp	r3, #0
 4817 0014 6ED0     		beq	.L293
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 4818              		.loc 1 4115 4
 4819 0016 3A4B     		ldr	r3, .L300
 4820 0018 1B68     		ldr	r3, [r3]
 4821 001a 3A69     		ldr	r2, [r7, #16]
 4822 001c 9A42     		cmp	r2, r3
 4823 001e 0AD0     		beq	.L294
 4824              	.LBB168:
 4825              	.LBB169:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4826              		.loc 2 195 2
 4827              		.syntax unified
 4828              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4829 0020 4FF05003 			mov r3, #80												
 4830 0024 83F31188 		msr basepri, r3											
 4831 0028 BFF36F8F 		isb														
 4832 002c BFF34F8F 		dsb														
 4833              	
 4834              	@ 0 "" 2
 4835              		.thumb
 4836              		.syntax unified
 4837 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4838              		.loc 2 203 1
 4839 0032 00BF     		nop
 4840              	.L295:
 4841              	.LBE169:
 4842              	.LBE168:
 4843              		.loc 1 4115 4 discriminator 1
 4844 0034 FEE7     		b	.L295
ARM GAS  /tmp/ccv2gsms.s 			page 162


 4845              	.L294:
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4846              		.loc 1 4116 4
 4847 0036 3B69     		ldr	r3, [r7, #16]
 4848 0038 9B6C     		ldr	r3, [r3, #72]
 4849 003a 002B     		cmp	r3, #0
 4850 003c 0AD1     		bne	.L296
 4851              	.LBB170:
 4852              	.LBB171:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4853              		.loc 2 195 2
 4854              		.syntax unified
 4855              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4856 003e 4FF05003 			mov r3, #80												
 4857 0042 83F31188 		msr basepri, r3											
 4858 0046 BFF36F8F 		isb														
 4859 004a BFF34F8F 		dsb														
 4860              	
 4861              	@ 0 "" 2
 4862              		.thumb
 4863              		.syntax unified
 4864 004e BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4865              		.loc 2 203 1
 4866 0050 00BF     		nop
 4867              	.L297:
 4868              	.LBE171:
 4869              	.LBE170:
 4870              		.loc 1 4116 4 discriminator 2
 4871 0052 FEE7     		b	.L297
 4872              	.L296:
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4873              		.loc 1 4117 11
 4874 0054 3B69     		ldr	r3, [r7, #16]
 4875 0056 9B6C     		ldr	r3, [r3, #72]
 4876              		.loc 1 4117 28
 4877 0058 5A1E     		subs	r2, r3, #1
 4878 005a 3B69     		ldr	r3, [r7, #16]
 4879 005c 9A64     		str	r2, [r3, #72]
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 4880              		.loc 1 4121 13
 4881 005e 3B69     		ldr	r3, [r7, #16]
 4882 0060 DA6A     		ldr	r2, [r3, #44]
 4883              		.loc 1 4121 34
 4884 0062 3B69     		ldr	r3, [r7, #16]
 4885 0064 5B6C     		ldr	r3, [r3, #68]
 4886              		.loc 1 4121 6
 4887 0066 9A42     		cmp	r2, r3
 4888 0068 44D0     		beq	.L293
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 4889              		.loc 1 4124 14
 4890 006a 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccv2gsms.s 			page 163


 4891 006c 9B6C     		ldr	r3, [r3, #72]
 4892              		.loc 1 4124 7
 4893 006e 002B     		cmp	r3, #0
 4894 0070 40D1     		bne	.L293
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready/delayed list. */
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4895              		.loc 1 4131 10
 4896 0072 3B69     		ldr	r3, [r7, #16]
 4897 0074 0433     		adds	r3, r3, #4
 4898 0076 1846     		mov	r0, r3
 4899 0078 FFF7FEFF 		bl	uxListRemove
 4900 007c 0346     		mov	r3, r0
 4901              		.loc 1 4131 8
 4902 007e 002B     		cmp	r3, #0
 4903 0080 15D1     		bne	.L298
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4904              		.loc 1 4133 7
 4905 0082 3B69     		ldr	r3, [r7, #16]
 4906 0084 DA6A     		ldr	r2, [r3, #44]
 4907 0086 1F49     		ldr	r1, .L300+4
 4908 0088 1346     		mov	r3, r2
 4909 008a 9B00     		lsls	r3, r3, #2
 4910 008c 1344     		add	r3, r3, r2
 4911 008e 9B00     		lsls	r3, r3, #2
 4912 0090 0B44     		add	r3, r3, r1
 4913 0092 1B68     		ldr	r3, [r3]
 4914 0094 002B     		cmp	r3, #0
 4915 0096 0AD1     		bne	.L298
 4916              		.loc 1 4133 7 is_stmt 0 discriminator 1
 4917 0098 3B69     		ldr	r3, [r7, #16]
 4918 009a DB6A     		ldr	r3, [r3, #44]
 4919 009c 0122     		movs	r2, #1
 4920 009e 02FA03F3 		lsl	r3, r2, r3
 4921 00a2 DA43     		mvns	r2, r3
 4922 00a4 184B     		ldr	r3, .L300+8
 4923 00a6 1B68     		ldr	r3, [r3]
 4924 00a8 1340     		ands	r3, r3, r2
 4925 00aa 174A     		ldr	r2, .L300+8
 4926 00ac 1360     		str	r3, [r2]
 4927              	.L298:
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 4928              		.loc 1 4143 31 is_stmt 1
ARM GAS  /tmp/ccv2gsms.s 			page 164


 4929 00ae 3B69     		ldr	r3, [r7, #16]
 4930 00b0 5A6C     		ldr	r2, [r3, #68]
 4931              		.loc 1 4143 24
 4932 00b2 3B69     		ldr	r3, [r7, #16]
 4933 00b4 DA62     		str	r2, [r3, #44]
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 4934              		.loc 1 4148 6
 4935 00b6 3B69     		ldr	r3, [r7, #16]
 4936 00b8 DB6A     		ldr	r3, [r3, #44]
 4937 00ba C3F10702 		rsb	r2, r3, #7
 4938 00be 3B69     		ldr	r3, [r7, #16]
 4939 00c0 9A61     		str	r2, [r3, #24]
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4940              		.loc 1 4149 6
 4941 00c2 3B69     		ldr	r3, [r7, #16]
 4942 00c4 DB6A     		ldr	r3, [r3, #44]
 4943 00c6 0122     		movs	r2, #1
 4944 00c8 9A40     		lsls	r2, r2, r3
 4945 00ca 0F4B     		ldr	r3, .L300+8
 4946 00cc 1B68     		ldr	r3, [r3]
 4947 00ce 1343     		orrs	r3, r3, r2
 4948 00d0 0D4A     		ldr	r2, .L300+8
 4949 00d2 1360     		str	r3, [r2]
 4950 00d4 3B69     		ldr	r3, [r7, #16]
 4951 00d6 DA6A     		ldr	r2, [r3, #44]
 4952 00d8 1346     		mov	r3, r2
 4953 00da 9B00     		lsls	r3, r3, #2
 4954 00dc 1344     		add	r3, r3, r2
 4955 00de 9B00     		lsls	r3, r3, #2
 4956 00e0 084A     		ldr	r2, .L300+4
 4957 00e2 1A44     		add	r2, r2, r3
 4958 00e4 3B69     		ldr	r3, [r7, #16]
 4959 00e6 0433     		adds	r3, r3, #4
 4960 00e8 1946     		mov	r1, r3
 4961 00ea 1046     		mov	r0, r2
 4962 00ec FFF7FEFF 		bl	vListInsertEnd
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 4963              		.loc 1 4159 14
 4964 00f0 0123     		movs	r3, #1
 4965 00f2 7B61     		str	r3, [r7, #20]
 4966              	.L293:
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccv2gsms.s 			page 165


4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4967              		.loc 1 4176 10
 4968 00f4 7B69     		ldr	r3, [r7, #20]
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4969              		.loc 1 4177 2
 4970 00f6 1846     		mov	r0, r3
 4971 00f8 1837     		adds	r7, r7, #24
 4972              	.LCFI201:
 4973              		.cfi_def_cfa_offset 8
 4974 00fa BD46     		mov	sp, r7
 4975              	.LCFI202:
 4976              		.cfi_def_cfa_register 13
 4977              		@ sp needed
 4978 00fc 80BD     		pop	{r7, pc}
 4979              	.L301:
 4980 00fe 00BF     		.align	2
 4981              	.L300:
 4982 0100 00000000 		.word	pxCurrentTCB
 4983 0104 00000000 		.word	pxReadyTasksLists
 4984 0108 00000000 		.word	uxTopReadyPriority
 4985              		.cfi_endproc
 4986              	.LFE44:
 4988              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4989              		.align	1
 4990              		.global	vTaskPriorityDisinheritAfterTimeout
 4991              		.syntax unified
 4992              		.thumb
 4993              		.thumb_func
 4994              		.fpu fpv4-sp-d16
 4996              	vTaskPriorityDisinheritAfterTimeout:
 4997              	.LFB45:
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4998              		.loc 1 4185 2
 4999              		.cfi_startproc
 5000              		@ args = 0, pretend = 0, frame = 32
 5001              		@ frame_needed = 1, uses_anonymous_args = 0
 5002 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccv2gsms.s 			page 166


 5003              	.LCFI203:
 5004              		.cfi_def_cfa_offset 8
 5005              		.cfi_offset 7, -8
 5006              		.cfi_offset 14, -4
 5007 0002 88B0     		sub	sp, sp, #32
 5008              	.LCFI204:
 5009              		.cfi_def_cfa_offset 40
 5010 0004 00AF     		add	r7, sp, #0
 5011              	.LCFI205:
 5012              		.cfi_def_cfa_register 7
 5013 0006 7860     		str	r0, [r7, #4]
 5014 0008 3960     		str	r1, [r7]
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5015              		.loc 1 4186 16
 5016 000a 7B68     		ldr	r3, [r7, #4]
 5017 000c BB61     		str	r3, [r7, #24]
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 5018              		.loc 1 4188 20
 5019 000e 0123     		movs	r3, #1
 5020 0010 7B61     		str	r3, [r7, #20]
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 5021              		.loc 1 4190 5
 5022 0012 7B68     		ldr	r3, [r7, #4]
 5023 0014 002B     		cmp	r3, #0
 5024 0016 77D0     		beq	.L312
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5025              		.loc 1 4194 4
 5026 0018 BB69     		ldr	r3, [r7, #24]
 5027 001a 9B6C     		ldr	r3, [r3, #72]
 5028 001c 002B     		cmp	r3, #0
 5029 001e 0AD1     		bne	.L304
 5030              	.LBB172:
 5031              	.LBB173:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5032              		.loc 2 195 2
 5033              		.syntax unified
 5034              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5035 0020 4FF05003 			mov r3, #80												
 5036 0024 83F31188 		msr basepri, r3											
 5037 0028 BFF36F8F 		isb														
 5038 002c BFF34F8F 		dsb														
 5039              	
 5040              	@ 0 "" 2
 5041              		.thumb
 5042              		.syntax unified
 5043 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5044              		.loc 2 203 1
 5045 0032 00BF     		nop
 5046              	.L305:
 5047              	.LBE173:
 5048              	.LBE172:
ARM GAS  /tmp/ccv2gsms.s 			page 167


 5049              		.loc 1 4194 4 discriminator 1
 5050 0034 FEE7     		b	.L305
 5051              	.L304:
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 5052              		.loc 1 4200 13
 5053 0036 BB69     		ldr	r3, [r7, #24]
 5054 0038 5B6C     		ldr	r3, [r3, #68]
 5055              		.loc 1 4200 6
 5056 003a 3A68     		ldr	r2, [r7]
 5057 003c 9A42     		cmp	r2, r3
 5058 003e 02D9     		bls	.L306
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 5059              		.loc 1 4202 21
 5060 0040 3B68     		ldr	r3, [r7]
 5061 0042 FB61     		str	r3, [r7, #28]
 5062 0044 02E0     		b	.L307
 5063              	.L306:
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 5064              		.loc 1 4206 21
 5065 0046 BB69     		ldr	r3, [r7, #24]
 5066 0048 5B6C     		ldr	r3, [r3, #68]
 5067 004a FB61     		str	r3, [r7, #28]
 5068              	.L307:
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 5069              		.loc 1 4210 13
 5070 004c BB69     		ldr	r3, [r7, #24]
 5071 004e DB6A     		ldr	r3, [r3, #44]
 5072              		.loc 1 4210 6
 5073 0050 FA69     		ldr	r2, [r7, #28]
 5074 0052 9A42     		cmp	r2, r3
 5075 0054 58D0     		beq	.L312
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 5076              		.loc 1 4216 14
 5077 0056 BB69     		ldr	r3, [r7, #24]
 5078 0058 9B6C     		ldr	r3, [r3, #72]
 5079              		.loc 1 4216 7
 5080 005a 7A69     		ldr	r2, [r7, #20]
 5081 005c 9A42     		cmp	r2, r3
 5082 005e 53D1     		bne	.L312
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccv2gsms.s 			page 168


4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
 5083              		.loc 1 4221 6
 5084 0060 2B4B     		ldr	r3, .L313
 5085 0062 1B68     		ldr	r3, [r3]
 5086 0064 BA69     		ldr	r2, [r7, #24]
 5087 0066 9A42     		cmp	r2, r3
 5088 0068 0AD1     		bne	.L308
 5089              	.LBB174:
 5090              	.LBB175:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5091              		.loc 2 195 2
 5092              		.syntax unified
 5093              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5094 006a 4FF05003 			mov r3, #80												
 5095 006e 83F31188 		msr basepri, r3											
 5096 0072 BFF36F8F 		isb														
 5097 0076 BFF34F8F 		dsb														
 5098              	
 5099              	@ 0 "" 2
 5100              		.thumb
 5101              		.syntax unified
 5102 007a BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5103              		.loc 2 203 1
 5104 007c 00BF     		nop
 5105              	.L309:
 5106              	.LBE175:
 5107              	.LBE174:
 5108              		.loc 1 4221 6 discriminator 2
 5109 007e FEE7     		b	.L309
 5110              	.L308:
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 5111              		.loc 1 4227 28
 5112 0080 BB69     		ldr	r3, [r7, #24]
 5113 0082 DB6A     		ldr	r3, [r3, #44]
 5114 0084 3B61     		str	r3, [r7, #16]
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 5115              		.loc 1 4228 24
 5116 0086 BB69     		ldr	r3, [r7, #24]
 5117 0088 FA69     		ldr	r2, [r7, #28]
 5118 008a DA62     		str	r2, [r3, #44]
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 5119              		.loc 1 4232 12
 5120 008c BB69     		ldr	r3, [r7, #24]
 5121 008e 9B69     		ldr	r3, [r3, #24]
 5122              		.loc 1 4232 8
ARM GAS  /tmp/ccv2gsms.s 			page 169


 5123 0090 002B     		cmp	r3, #0
 5124 0092 04DB     		blt	.L310
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 5125              		.loc 1 4234 7
 5126 0094 FB69     		ldr	r3, [r7, #28]
 5127 0096 C3F10702 		rsb	r2, r3, #7
 5128 009a BB69     		ldr	r3, [r7, #24]
 5129 009c 9A61     		str	r2, [r3, #24]
 5130              	.L310:
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 5131              		.loc 1 4247 10
 5132 009e BB69     		ldr	r3, [r7, #24]
 5133 00a0 5969     		ldr	r1, [r3, #20]
 5134 00a2 3A69     		ldr	r2, [r7, #16]
 5135 00a4 1346     		mov	r3, r2
 5136 00a6 9B00     		lsls	r3, r3, #2
 5137 00a8 1344     		add	r3, r3, r2
 5138 00aa 9B00     		lsls	r3, r3, #2
 5139 00ac 194A     		ldr	r2, .L313+4
 5140 00ae 1344     		add	r3, r3, r2
 5141              		.loc 1 4247 8
 5142 00b0 9942     		cmp	r1, r3
 5143 00b2 29D1     		bne	.L312
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5144              		.loc 1 4249 11
 5145 00b4 BB69     		ldr	r3, [r7, #24]
 5146 00b6 0433     		adds	r3, r3, #4
 5147 00b8 1846     		mov	r0, r3
 5148 00ba FFF7FEFF 		bl	uxListRemove
 5149 00be 0346     		mov	r3, r0
 5150              		.loc 1 4249 9
 5151 00c0 002B     		cmp	r3, #0
 5152 00c2 0AD1     		bne	.L311
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* It is known that the task is in its ready list so
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							there is no need to check again and the port level
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							reset macro can be called directly. */
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 5153              		.loc 1 4254 8
 5154 00c4 BB69     		ldr	r3, [r7, #24]
 5155 00c6 DB6A     		ldr	r3, [r3, #44]
 5156 00c8 0122     		movs	r2, #1
 5157 00ca 02FA03F3 		lsl	r3, r2, r3
ARM GAS  /tmp/ccv2gsms.s 			page 170


 5158 00ce DA43     		mvns	r2, r3
 5159 00d0 114B     		ldr	r3, .L313+8
 5160 00d2 1B68     		ldr	r3, [r3]
 5161 00d4 1340     		ands	r3, r3, r2
 5162 00d6 104A     		ldr	r2, .L313+8
 5163 00d8 1360     		str	r3, [r2]
 5164              	.L311:
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 5165              		.loc 1 4261 7
 5166 00da BB69     		ldr	r3, [r7, #24]
 5167 00dc DB6A     		ldr	r3, [r3, #44]
 5168 00de 0122     		movs	r2, #1
 5169 00e0 9A40     		lsls	r2, r2, r3
 5170 00e2 0D4B     		ldr	r3, .L313+8
 5171 00e4 1B68     		ldr	r3, [r3]
 5172 00e6 1343     		orrs	r3, r3, r2
 5173 00e8 0B4A     		ldr	r2, .L313+8
 5174 00ea 1360     		str	r3, [r2]
 5175 00ec BB69     		ldr	r3, [r7, #24]
 5176 00ee DA6A     		ldr	r2, [r3, #44]
 5177 00f0 1346     		mov	r3, r2
 5178 00f2 9B00     		lsls	r3, r3, #2
 5179 00f4 1344     		add	r3, r3, r2
 5180 00f6 9B00     		lsls	r3, r3, #2
 5181 00f8 064A     		ldr	r2, .L313+4
 5182 00fa 1A44     		add	r2, r2, r3
 5183 00fc BB69     		ldr	r3, [r7, #24]
 5184 00fe 0433     		adds	r3, r3, #4
 5185 0100 1946     		mov	r1, r3
 5186 0102 1046     		mov	r0, r2
 5187 0104 FFF7FEFF 		bl	vListInsertEnd
 5188              	.L312:
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccv2gsms.s 			page 171


4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5189              		.loc 1 4282 2
 5190 0108 00BF     		nop
 5191 010a 2037     		adds	r7, r7, #32
 5192              	.LCFI206:
 5193              		.cfi_def_cfa_offset 8
 5194 010c BD46     		mov	sp, r7
 5195              	.LCFI207:
 5196              		.cfi_def_cfa_register 13
 5197              		@ sp needed
 5198 010e 80BD     		pop	{r7, pc}
 5199              	.L314:
 5200              		.align	2
 5201              	.L313:
 5202 0110 00000000 		.word	pxCurrentTCB
 5203 0114 00000000 		.word	pxReadyTasksLists
 5204 0118 00000000 		.word	uxTopReadyPriority
 5205              		.cfi_endproc
 5206              	.LFE45:
 5208              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5209              		.align	1
 5210              		.global	uxTaskResetEventItemValue
 5211              		.syntax unified
 5212              		.thumb
 5213              		.thumb_func
 5214              		.fpu fpv4-sp-d16
 5216              	uxTaskResetEventItemValue:
 5217              	.LFB46:
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccv2gsms.s 			page 172


4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
ARM GAS  /tmp/ccv2gsms.s 			page 173


4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
ARM GAS  /tmp/ccv2gsms.s 			page 174


4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
ARM GAS  /tmp/ccv2gsms.s 			page 175


4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
ARM GAS  /tmp/ccv2gsms.s 			page 176


4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccv2gsms.s 			page 177


4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5218              		.loc 1 4603 1
 5219              		.cfi_startproc
 5220              		@ args = 0, pretend = 0, frame = 8
 5221              		@ frame_needed = 1, uses_anonymous_args = 0
 5222              		@ link register save eliminated.
 5223 0000 80B4     		push	{r7}
 5224              	.LCFI208:
 5225              		.cfi_def_cfa_offset 4
 5226              		.cfi_offset 7, -4
 5227 0002 83B0     		sub	sp, sp, #12
 5228              	.LCFI209:
 5229              		.cfi_def_cfa_offset 16
 5230 0004 00AF     		add	r7, sp, #0
 5231              	.LCFI210:
 5232              		.cfi_def_cfa_register 7
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 5233              		.loc 1 4606 13
 5234 0006 094B     		ldr	r3, .L317
 5235 0008 1B68     		ldr	r3, [r3]
 5236              		.loc 1 4606 11
 5237 000a 9B69     		ldr	r3, [r3, #24]
 5238 000c 7B60     		str	r3, [r7, #4]
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 5239              		.loc 1 4610 2
 5240 000e 074B     		ldr	r3, .L317
 5241 0010 1B68     		ldr	r3, [r3]
 5242 0012 DA6A     		ldr	r2, [r3, #44]
 5243 0014 054B     		ldr	r3, .L317
 5244 0016 1B68     		ldr	r3, [r3]
 5245 0018 C2F10702 		rsb	r2, r2, #7
 5246 001c 9A61     		str	r2, [r3, #24]
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 5247              		.loc 1 4612 9
 5248 001e 7B68     		ldr	r3, [r7, #4]
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5249              		.loc 1 4613 1
 5250 0020 1846     		mov	r0, r3
 5251 0022 0C37     		adds	r7, r7, #12
 5252              	.LCFI211:
 5253              		.cfi_def_cfa_offset 4
 5254 0024 BD46     		mov	sp, r7
 5255              	.LCFI212:
 5256              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccv2gsms.s 			page 178


 5257              		@ sp needed
 5258 0026 5DF8047B 		ldr	r7, [sp], #4
 5259              	.LCFI213:
 5260              		.cfi_restore 7
 5261              		.cfi_def_cfa_offset 0
 5262 002a 7047     		bx	lr
 5263              	.L318:
 5264              		.align	2
 5265              	.L317:
 5266 002c 00000000 		.word	pxCurrentTCB
 5267              		.cfi_endproc
 5268              	.LFE46:
 5270              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5271              		.align	1
 5272              		.global	pvTaskIncrementMutexHeldCount
 5273              		.syntax unified
 5274              		.thumb
 5275              		.thumb_func
 5276              		.fpu fpv4-sp-d16
 5278              	pvTaskIncrementMutexHeldCount:
 5279              	.LFB47:
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5280              		.loc 1 4619 2
 5281              		.cfi_startproc
 5282              		@ args = 0, pretend = 0, frame = 0
 5283              		@ frame_needed = 1, uses_anonymous_args = 0
 5284              		@ link register save eliminated.
 5285 0000 80B4     		push	{r7}
 5286              	.LCFI214:
 5287              		.cfi_def_cfa_offset 4
 5288              		.cfi_offset 7, -4
 5289 0002 00AF     		add	r7, sp, #0
 5290              	.LCFI215:
 5291              		.cfi_def_cfa_register 7
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 5292              		.loc 1 4622 20
 5293 0004 074B     		ldr	r3, .L322
 5294 0006 1B68     		ldr	r3, [r3]
 5295              		.loc 1 4622 5
 5296 0008 002B     		cmp	r3, #0
 5297 000a 04D0     		beq	.L320
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 5298              		.loc 1 4624 18
 5299 000c 054B     		ldr	r3, .L322
 5300 000e 1B68     		ldr	r3, [r3]
 5301 0010 9A6C     		ldr	r2, [r3, #72]
 5302              		.loc 1 4624 35
 5303 0012 0132     		adds	r2, r2, #1
 5304 0014 9A64     		str	r2, [r3, #72]
ARM GAS  /tmp/ccv2gsms.s 			page 179


 5305              	.L320:
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 5306              		.loc 1 4627 10
 5307 0016 034B     		ldr	r3, .L322
 5308 0018 1B68     		ldr	r3, [r3]
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5309              		.loc 1 4628 2
 5310 001a 1846     		mov	r0, r3
 5311 001c BD46     		mov	sp, r7
 5312              	.LCFI216:
 5313              		.cfi_def_cfa_register 13
 5314              		@ sp needed
 5315 001e 5DF8047B 		ldr	r7, [sp], #4
 5316              	.LCFI217:
 5317              		.cfi_restore 7
 5318              		.cfi_def_cfa_offset 0
 5319 0022 7047     		bx	lr
 5320              	.L323:
 5321              		.align	2
 5322              	.L322:
 5323 0024 00000000 		.word	pxCurrentTCB
 5324              		.cfi_endproc
 5325              	.LFE47:
 5327              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5328              		.align	1
 5329              		.global	ulTaskNotifyTake
 5330              		.syntax unified
 5331              		.thumb
 5332              		.thumb_func
 5333              		.fpu fpv4-sp-d16
 5335              	ulTaskNotifyTake:
 5336              	.LFB48:
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5337              		.loc 1 4636 2
 5338              		.cfi_startproc
 5339              		@ args = 0, pretend = 0, frame = 16
 5340              		@ frame_needed = 1, uses_anonymous_args = 0
 5341 0000 80B5     		push	{r7, lr}
 5342              	.LCFI218:
 5343              		.cfi_def_cfa_offset 8
 5344              		.cfi_offset 7, -8
 5345              		.cfi_offset 14, -4
 5346 0002 84B0     		sub	sp, sp, #16
 5347              	.LCFI219:
 5348              		.cfi_def_cfa_offset 24
 5349 0004 00AF     		add	r7, sp, #0
 5350              	.LCFI220:
 5351              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccv2gsms.s 			page 180


 5352 0006 7860     		str	r0, [r7, #4]
 5353 0008 3960     		str	r1, [r7]
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5354              		.loc 1 4639 3
 5355 000a FFF7FEFF 		bl	vPortEnterCritical
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 5356              		.loc 1 4642 20
 5357 000e 1E4B     		ldr	r3, .L329
 5358 0010 1B68     		ldr	r3, [r3]
 5359 0012 DB6C     		ldr	r3, [r3, #76]
 5360              		.loc 1 4642 6
 5361 0014 002B     		cmp	r3, #0
 5362 0016 13D1     		bne	.L325
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 5363              		.loc 1 4645 17
 5364 0018 1B4B     		ldr	r3, .L329
 5365 001a 1B68     		ldr	r3, [r3]
 5366              		.loc 1 4645 33
 5367 001c 0122     		movs	r2, #1
 5368 001e 83F85020 		strb	r2, [r3, #80]
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5369              		.loc 1 4647 7
 5370 0022 3B68     		ldr	r3, [r7]
 5371 0024 002B     		cmp	r3, #0
 5372 0026 0BD0     		beq	.L325
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 5373              		.loc 1 4649 6
 5374 0028 0121     		movs	r1, #1
 5375 002a 3868     		ldr	r0, [r7]
 5376 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 5377              		.loc 1 4656 6
 5378 0030 164B     		ldr	r3, .L329+4
 5379 0032 4FF08052 		mov	r2, #268435456
 5380 0036 1A60     		str	r2, [r3]
 5381              		.syntax unified
 5382              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5383 0038 BFF34F8F 		dsb
 5384              	@ 0 "" 2
 5385              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5386 003c BFF36F8F 		isb
 5387              	@ 0 "" 2
 5388              		.thumb
ARM GAS  /tmp/ccv2gsms.s 			page 181


 5389              		.syntax unified
 5390              	.L325:
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5391              		.loc 1 4668 3
 5392 0040 FFF7FEFF 		bl	vPortExitCritical
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5393              		.loc 1 4670 3
 5394 0044 FFF7FEFF 		bl	vPortEnterCritical
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 5395              		.loc 1 4673 27
 5396 0048 0F4B     		ldr	r3, .L329
 5397 004a 1B68     		ldr	r3, [r3]
 5398              		.loc 1 4673 13
 5399 004c DB6C     		ldr	r3, [r3, #76]
 5400 004e FB60     		str	r3, [r7, #12]
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 5401              		.loc 1 4675 6
 5402 0050 FB68     		ldr	r3, [r7, #12]
 5403 0052 002B     		cmp	r3, #0
 5404 0054 0CD0     		beq	.L326
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 5405              		.loc 1 4677 7
 5406 0056 7B68     		ldr	r3, [r7, #4]
 5407 0058 002B     		cmp	r3, #0
 5408 005a 04D0     		beq	.L327
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 5409              		.loc 1 4679 18
 5410 005c 0A4B     		ldr	r3, .L329
 5411 005e 1B68     		ldr	r3, [r3]
 5412              		.loc 1 4679 36
 5413 0060 0022     		movs	r2, #0
 5414 0062 DA64     		str	r2, [r3, #76]
 5415 0064 04E0     		b	.L326
 5416              	.L327:
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 5417              		.loc 1 4683 18
 5418 0066 084B     		ldr	r3, .L329
ARM GAS  /tmp/ccv2gsms.s 			page 182


 5419 0068 1B68     		ldr	r3, [r3]
 5420              		.loc 1 4683 47
 5421 006a FA68     		ldr	r2, [r7, #12]
 5422 006c 013A     		subs	r2, r2, #1
 5423              		.loc 1 4683 36
 5424 006e DA64     		str	r2, [r3, #76]
 5425              	.L326:
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5426              		.loc 1 4691 16
 5427 0070 054B     		ldr	r3, .L329
 5428 0072 1B68     		ldr	r3, [r3]
 5429              		.loc 1 4691 32
 5430 0074 0022     		movs	r2, #0
 5431 0076 83F85020 		strb	r2, [r3, #80]
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5432              		.loc 1 4693 3
 5433 007a FFF7FEFF 		bl	vPortExitCritical
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 5434              		.loc 1 4695 10
 5435 007e FB68     		ldr	r3, [r7, #12]
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5436              		.loc 1 4696 2
 5437 0080 1846     		mov	r0, r3
 5438 0082 1037     		adds	r7, r7, #16
 5439              	.LCFI221:
 5440              		.cfi_def_cfa_offset 8
 5441 0084 BD46     		mov	sp, r7
 5442              	.LCFI222:
 5443              		.cfi_def_cfa_register 13
 5444              		@ sp needed
 5445 0086 80BD     		pop	{r7, pc}
 5446              	.L330:
 5447              		.align	2
 5448              	.L329:
 5449 0088 00000000 		.word	pxCurrentTCB
 5450 008c 04ED00E0 		.word	-536810236
 5451              		.cfi_endproc
 5452              	.LFE48:
 5454              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5455              		.align	1
 5456              		.global	xTaskNotifyWait
 5457              		.syntax unified
 5458              		.thumb
 5459              		.thumb_func
 5460              		.fpu fpv4-sp-d16
 5462              	xTaskNotifyWait:
 5463              	.LFB49:
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv2gsms.s 			page 183


4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5464              		.loc 1 4704 2
 5465              		.cfi_startproc
 5466              		@ args = 0, pretend = 0, frame = 24
 5467              		@ frame_needed = 1, uses_anonymous_args = 0
 5468 0000 80B5     		push	{r7, lr}
 5469              	.LCFI223:
 5470              		.cfi_def_cfa_offset 8
 5471              		.cfi_offset 7, -8
 5472              		.cfi_offset 14, -4
 5473 0002 86B0     		sub	sp, sp, #24
 5474              	.LCFI224:
 5475              		.cfi_def_cfa_offset 32
 5476 0004 00AF     		add	r7, sp, #0
 5477              	.LCFI225:
 5478              		.cfi_def_cfa_register 7
 5479 0006 F860     		str	r0, [r7, #12]
 5480 0008 B960     		str	r1, [r7, #8]
 5481 000a 7A60     		str	r2, [r7, #4]
 5482 000c 3B60     		str	r3, [r7]
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5483              		.loc 1 4707 3
 5484 000e FFF7FEFF 		bl	vPortEnterCritical
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 5485              		.loc 1 4710 20
 5486 0012 264B     		ldr	r3, .L337
 5487 0014 1B68     		ldr	r3, [r3]
 5488 0016 93F85030 		ldrb	r3, [r3, #80]
 5489 001a DBB2     		uxtb	r3, r3
 5490              		.loc 1 4710 6
 5491 001c 022B     		cmp	r3, #2
 5492 001e 1AD0     		beq	.L332
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 5493              		.loc 1 4715 35
 5494 0020 224B     		ldr	r3, .L337
 5495 0022 1B68     		ldr	r3, [r3]
 5496 0024 D96C     		ldr	r1, [r3, #76]
 5497              		.loc 1 4715 38
 5498 0026 FA68     		ldr	r2, [r7, #12]
 5499 0028 D243     		mvns	r2, r2
 5500              		.loc 1 4715 35
 5501 002a 0A40     		ands	r2, r2, r1
 5502 002c DA64     		str	r2, [r3, #76]
ARM GAS  /tmp/ccv2gsms.s 			page 184


4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 5503              		.loc 1 4718 17
 5504 002e 1F4B     		ldr	r3, .L337
 5505 0030 1B68     		ldr	r3, [r3]
 5506              		.loc 1 4718 33
 5507 0032 0122     		movs	r2, #1
 5508 0034 83F85020 		strb	r2, [r3, #80]
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5509              		.loc 1 4720 7
 5510 0038 3B68     		ldr	r3, [r7]
 5511 003a 002B     		cmp	r3, #0
 5512 003c 0BD0     		beq	.L332
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 5513              		.loc 1 4722 6
 5514 003e 0121     		movs	r1, #1
 5515 0040 3868     		ldr	r0, [r7]
 5516 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 5517              		.loc 1 4729 6
 5518 0046 1A4B     		ldr	r3, .L337+4
 5519 0048 4FF08052 		mov	r2, #268435456
 5520 004c 1A60     		str	r2, [r3]
 5521              		.syntax unified
 5522              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5523 004e BFF34F8F 		dsb
 5524              	@ 0 "" 2
 5525              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5526 0052 BFF36F8F 		isb
 5527              	@ 0 "" 2
 5528              		.thumb
 5529              		.syntax unified
 5530              	.L332:
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5531              		.loc 1 4741 3
 5532 0056 FFF7FEFF 		bl	vPortExitCritical
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv2gsms.s 			page 185


4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5533              		.loc 1 4743 3
 5534 005a FFF7FEFF 		bl	vPortEnterCritical
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 5535              		.loc 1 4747 6
 5536 005e 7B68     		ldr	r3, [r7, #4]
 5537 0060 002B     		cmp	r3, #0
 5538 0062 04D0     		beq	.L333
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 5539              		.loc 1 4751 41
 5540 0064 114B     		ldr	r3, .L337
 5541 0066 1B68     		ldr	r3, [r3]
 5542 0068 DA6C     		ldr	r2, [r3, #76]
 5543              		.loc 1 4751 27
 5544 006a 7B68     		ldr	r3, [r7, #4]
 5545 006c 1A60     		str	r2, [r3]
 5546              	.L333:
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 5547              		.loc 1 4758 20
 5548 006e 0F4B     		ldr	r3, .L337
 5549 0070 1B68     		ldr	r3, [r3]
 5550 0072 93F85030 		ldrb	r3, [r3, #80]
 5551 0076 DBB2     		uxtb	r3, r3
 5552              		.loc 1 4758 6
 5553 0078 022B     		cmp	r3, #2
 5554 007a 02D0     		beq	.L334
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 5555              		.loc 1 4761 13
 5556 007c 0023     		movs	r3, #0
 5557 007e 7B61     		str	r3, [r7, #20]
 5558 0080 08E0     		b	.L335
 5559              	.L334:
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 5560              		.loc 1 4767 35
 5561 0082 0A4B     		ldr	r3, .L337
 5562 0084 1B68     		ldr	r3, [r3]
 5563 0086 D96C     		ldr	r1, [r3, #76]
 5564              		.loc 1 4767 38
ARM GAS  /tmp/ccv2gsms.s 			page 186


 5565 0088 BA68     		ldr	r2, [r7, #8]
 5566 008a D243     		mvns	r2, r2
 5567              		.loc 1 4767 35
 5568 008c 0A40     		ands	r2, r2, r1
 5569 008e DA64     		str	r2, [r3, #76]
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5570              		.loc 1 4768 13
 5571 0090 0123     		movs	r3, #1
 5572 0092 7B61     		str	r3, [r7, #20]
 5573              	.L335:
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5574              		.loc 1 4771 16
 5575 0094 054B     		ldr	r3, .L337
 5576 0096 1B68     		ldr	r3, [r3]
 5577              		.loc 1 4771 32
 5578 0098 0022     		movs	r2, #0
 5579 009a 83F85020 		strb	r2, [r3, #80]
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5580              		.loc 1 4773 3
 5581 009e FFF7FEFF 		bl	vPortExitCritical
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5582              		.loc 1 4775 10
 5583 00a2 7B69     		ldr	r3, [r7, #20]
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5584              		.loc 1 4776 2
 5585 00a4 1846     		mov	r0, r3
 5586 00a6 1837     		adds	r7, r7, #24
 5587              	.LCFI226:
 5588              		.cfi_def_cfa_offset 8
 5589 00a8 BD46     		mov	sp, r7
 5590              	.LCFI227:
 5591              		.cfi_def_cfa_register 13
 5592              		@ sp needed
 5593 00aa 80BD     		pop	{r7, pc}
 5594              	.L338:
 5595              		.align	2
 5596              	.L337:
 5597 00ac 00000000 		.word	pxCurrentTCB
 5598 00b0 04ED00E0 		.word	-536810236
 5599              		.cfi_endproc
 5600              	.LFE49:
 5602              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5603              		.align	1
 5604              		.global	xTaskGenericNotify
 5605              		.syntax unified
 5606              		.thumb
 5607              		.thumb_func
 5608              		.fpu fpv4-sp-d16
 5610              	xTaskGenericNotify:
 5611              	.LFB50:
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccv2gsms.s 			page 187


4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5612              		.loc 1 4784 2
 5613              		.cfi_startproc
 5614              		@ args = 0, pretend = 0, frame = 40
 5615              		@ frame_needed = 1, uses_anonymous_args = 0
 5616 0000 80B5     		push	{r7, lr}
 5617              	.LCFI228:
 5618              		.cfi_def_cfa_offset 8
 5619              		.cfi_offset 7, -8
 5620              		.cfi_offset 14, -4
 5621 0002 8AB0     		sub	sp, sp, #40
 5622              	.LCFI229:
 5623              		.cfi_def_cfa_offset 48
 5624 0004 00AF     		add	r7, sp, #0
 5625              	.LCFI230:
 5626              		.cfi_def_cfa_register 7
 5627 0006 F860     		str	r0, [r7, #12]
 5628 0008 B960     		str	r1, [r7, #8]
 5629 000a 3B60     		str	r3, [r7]
 5630 000c 1346     		mov	r3, r2
 5631 000e FB71     		strb	r3, [r7, #7]
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5632              		.loc 1 4786 13
 5633 0010 0123     		movs	r3, #1
 5634 0012 7B62     		str	r3, [r7, #36]
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5635              		.loc 1 4789 3
 5636 0014 FB68     		ldr	r3, [r7, #12]
 5637 0016 002B     		cmp	r3, #0
 5638 0018 0AD1     		bne	.L340
 5639              	.LBB176:
 5640              	.LBB177:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5641              		.loc 2 195 2
 5642              		.syntax unified
 5643              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5644 001a 4FF05003 			mov r3, #80												
 5645 001e 83F31188 		msr basepri, r3											
 5646 0022 BFF36F8F 		isb														
 5647 0026 BFF34F8F 		dsb														
 5648              	
 5649              	@ 0 "" 2
 5650              		.thumb
 5651              		.syntax unified
 5652 002a BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5653              		.loc 2 203 1
 5654 002c 00BF     		nop
 5655              	.L341:
 5656              	.LBE177:
ARM GAS  /tmp/ccv2gsms.s 			page 188


 5657              	.LBE176:
 5658              		.loc 1 4789 3 discriminator 1
 5659 002e FEE7     		b	.L341
 5660              	.L340:
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 5661              		.loc 1 4790 9
 5662 0030 FB68     		ldr	r3, [r7, #12]
 5663 0032 3B62     		str	r3, [r7, #32]
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 5664              		.loc 1 4792 3
 5665 0034 FFF7FEFF 		bl	vPortEnterCritical
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5666              		.loc 1 4794 6
 5667 0038 3B68     		ldr	r3, [r7]
 5668 003a 002B     		cmp	r3, #0
 5669 003c 03D0     		beq	.L342
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5670              		.loc 1 4796 42
 5671 003e 3B6A     		ldr	r3, [r7, #32]
 5672 0040 DA6C     		ldr	r2, [r3, #76]
 5673              		.loc 1 4796 35
 5674 0042 3B68     		ldr	r3, [r7]
 5675 0044 1A60     		str	r2, [r3]
 5676              	.L342:
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5677              		.loc 1 4799 26
 5678 0046 3B6A     		ldr	r3, [r7, #32]
 5679 0048 93F85030 		ldrb	r3, [r3, #80]
 5680 004c FB77     		strb	r3, [r7, #31]
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5681              		.loc 1 4801 25
 5682 004e 3B6A     		ldr	r3, [r7, #32]
 5683 0050 0222     		movs	r2, #2
 5684 0052 83F85020 		strb	r2, [r3, #80]
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 5685              		.loc 1 4803 4
 5686 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5687 0058 042B     		cmp	r3, #4
 5688 005a 28D8     		bhi	.L343
 5689 005c 01A2     		adr	r2, .L345
 5690 005e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5691 0062 00BF     		.p2align 2
 5692              	.L345:
 5693 0064 CF000000 		.word	.L359+1
 5694 0068 79000000 		.word	.L348+1
 5695 006c 87000000 		.word	.L347+1
 5696 0070 93000000 		.word	.L346+1
 5697 0074 9B000000 		.word	.L344+1
 5698              		.p2align 1
 5699              	.L348:
ARM GAS  /tmp/ccv2gsms.s 			page 189


4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 5700              		.loc 1 4806 29
 5701 0078 3B6A     		ldr	r3, [r7, #32]
 5702 007a DA6C     		ldr	r2, [r3, #76]
 5703 007c BB68     		ldr	r3, [r7, #8]
 5704 007e 1A43     		orrs	r2, r2, r3
 5705 0080 3B6A     		ldr	r3, [r7, #32]
 5706 0082 DA64     		str	r2, [r3, #76]
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5707              		.loc 1 4807 6
 5708 0084 26E0     		b	.L350
 5709              	.L347:
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 5710              		.loc 1 4810 13
 5711 0086 3B6A     		ldr	r3, [r7, #32]
 5712 0088 DB6C     		ldr	r3, [r3, #76]
 5713              		.loc 1 4810 32
 5714 008a 5A1C     		adds	r2, r3, #1
 5715 008c 3B6A     		ldr	r3, [r7, #32]
 5716 008e DA64     		str	r2, [r3, #76]
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5717              		.loc 1 4811 6
 5718 0090 20E0     		b	.L350
 5719              	.L346:
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 5720              		.loc 1 4814 29
 5721 0092 3B6A     		ldr	r3, [r7, #32]
 5722 0094 BA68     		ldr	r2, [r7, #8]
 5723 0096 DA64     		str	r2, [r3, #76]
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5724              		.loc 1 4815 6
 5725 0098 1CE0     		b	.L350
 5726              	.L344:
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 5727              		.loc 1 4818 8
 5728 009a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5729 009c 022B     		cmp	r3, #2
 5730 009e 03D0     		beq	.L351
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 5731              		.loc 1 4820 30
 5732 00a0 3B6A     		ldr	r3, [r7, #32]
 5733 00a2 BA68     		ldr	r2, [r7, #8]
 5734 00a4 DA64     		str	r2, [r3, #76]
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
ARM GAS  /tmp/ccv2gsms.s 			page 190


4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5735              		.loc 1 4827 6
 5736 00a6 15E0     		b	.L350
 5737              	.L351:
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5738              		.loc 1 4825 15
 5739 00a8 0023     		movs	r3, #0
 5740 00aa 7B62     		str	r3, [r7, #36]
 5741              		.loc 1 4827 6
 5742 00ac 12E0     		b	.L350
 5743              	.L343:
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 5744              		.loc 1 4838 6
 5745 00ae 3B6A     		ldr	r3, [r7, #32]
 5746 00b0 DB6C     		ldr	r3, [r3, #76]
 5747 00b2 B3F1FF3F 		cmp	r3, #-1
 5748 00b6 0CD0     		beq	.L360
 5749              	.LBB178:
 5750              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5751              		.loc 2 195 2
 5752              		.syntax unified
 5753              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5754 00b8 4FF05003 			mov r3, #80												
 5755 00bc 83F31188 		msr basepri, r3											
 5756 00c0 BFF36F8F 		isb														
 5757 00c4 BFF34F8F 		dsb														
 5758              	
 5759              	@ 0 "" 2
 5760              		.thumb
 5761              		.syntax unified
 5762 00c8 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5763              		.loc 2 203 1
 5764 00ca 00BF     		nop
 5765              	.L354:
 5766              	.LBE179:
 5767              	.LBE178:
 5768              		.loc 1 4838 6 discriminator 2
 5769 00cc FEE7     		b	.L354
 5770              	.L359:
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5771              		.loc 1 4832 6
 5772 00ce 00BF     		nop
 5773 00d0 00E0     		b	.L350
 5774              	.L360:
ARM GAS  /tmp/ccv2gsms.s 			page 191


4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5775              		.loc 1 4840 6
 5776 00d2 00BF     		nop
 5777              	.L350:
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5778              		.loc 1 4847 6
 5779 00d4 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5780 00d6 012B     		cmp	r3, #1
 5781 00d8 39D1     		bne	.L355
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5782              		.loc 1 4849 14
 5783 00da 3B6A     		ldr	r3, [r7, #32]
 5784 00dc 0433     		adds	r3, r3, #4
 5785 00de 1846     		mov	r0, r3
 5786 00e0 FFF7FEFF 		bl	uxListRemove
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5787              		.loc 1 4850 5
 5788 00e4 3B6A     		ldr	r3, [r7, #32]
 5789 00e6 DB6A     		ldr	r3, [r3, #44]
 5790 00e8 0122     		movs	r2, #1
 5791 00ea 9A40     		lsls	r2, r2, r3
 5792 00ec 1B4B     		ldr	r3, .L361
 5793 00ee 1B68     		ldr	r3, [r3]
 5794 00f0 1343     		orrs	r3, r3, r2
 5795 00f2 1A4A     		ldr	r2, .L361
 5796 00f4 1360     		str	r3, [r2]
 5797 00f6 3B6A     		ldr	r3, [r7, #32]
 5798 00f8 DA6A     		ldr	r2, [r3, #44]
 5799 00fa 1346     		mov	r3, r2
 5800 00fc 9B00     		lsls	r3, r3, #2
 5801 00fe 1344     		add	r3, r3, r2
 5802 0100 9B00     		lsls	r3, r3, #2
 5803 0102 174A     		ldr	r2, .L361+4
 5804 0104 1A44     		add	r2, r2, r3
 5805 0106 3B6A     		ldr	r3, [r7, #32]
 5806 0108 0433     		adds	r3, r3, #4
 5807 010a 1946     		mov	r1, r3
 5808 010c 1046     		mov	r0, r2
 5809 010e FFF7FEFF 		bl	vListInsertEnd
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5810              		.loc 1 4853 5
 5811 0112 3B6A     		ldr	r3, [r7, #32]
 5812 0114 9B6A     		ldr	r3, [r3, #40]
 5813 0116 002B     		cmp	r3, #0
 5814 0118 0AD0     		beq	.L356
 5815              	.LBB180:
 5816              	.LBB181:
ARM GAS  /tmp/ccv2gsms.s 			page 192


 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5817              		.loc 2 195 2
 5818              		.syntax unified
 5819              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5820 011a 4FF05003 			mov r3, #80												
 5821 011e 83F31188 		msr basepri, r3											
 5822 0122 BFF36F8F 		isb														
 5823 0126 BFF34F8F 		dsb														
 5824              	
 5825              	@ 0 "" 2
 5826              		.thumb
 5827              		.syntax unified
 5828 012a 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5829              		.loc 2 203 1
 5830 012c 00BF     		nop
 5831              	.L357:
 5832              	.LBE181:
 5833              	.LBE180:
 5834              		.loc 1 4853 5 discriminator 3
 5835 012e FEE7     		b	.L357
 5836              	.L356:
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5837              		.loc 1 4871 14
 5838 0130 3B6A     		ldr	r3, [r7, #32]
 5839 0132 DA6A     		ldr	r2, [r3, #44]
 5840              		.loc 1 4871 41
 5841 0134 0B4B     		ldr	r3, .L361+8
 5842 0136 1B68     		ldr	r3, [r3]
 5843 0138 DB6A     		ldr	r3, [r3, #44]
 5844              		.loc 1 4871 7
 5845 013a 9A42     		cmp	r2, r3
 5846 013c 07D9     		bls	.L355
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 5847              		.loc 1 4875 6
 5848 013e 0A4B     		ldr	r3, .L361+12
 5849 0140 4FF08052 		mov	r2, #268435456
ARM GAS  /tmp/ccv2gsms.s 			page 193


 5850 0144 1A60     		str	r2, [r3]
 5851              		.syntax unified
 5852              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5853 0146 BFF34F8F 		dsb
 5854              	@ 0 "" 2
 5855              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5856 014a BFF36F8F 		isb
 5857              	@ 0 "" 2
 5858              		.thumb
 5859              		.syntax unified
 5860              	.L355:
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 5861              		.loc 1 4887 3
 5862 014e FFF7FEFF 		bl	vPortExitCritical
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5863              		.loc 1 4889 10
 5864 0152 7B6A     		ldr	r3, [r7, #36]
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5865              		.loc 1 4890 2
 5866 0154 1846     		mov	r0, r3
 5867 0156 2837     		adds	r7, r7, #40
 5868              	.LCFI231:
 5869              		.cfi_def_cfa_offset 8
 5870 0158 BD46     		mov	sp, r7
 5871              	.LCFI232:
 5872              		.cfi_def_cfa_register 13
 5873              		@ sp needed
 5874 015a 80BD     		pop	{r7, pc}
 5875              	.L362:
 5876              		.align	2
 5877              	.L361:
 5878 015c 00000000 		.word	uxTopReadyPriority
 5879 0160 00000000 		.word	pxReadyTasksLists
 5880 0164 00000000 		.word	pxCurrentTCB
 5881 0168 04ED00E0 		.word	-536810236
 5882              		.cfi_endproc
 5883              	.LFE50:
 5885              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5886              		.align	1
 5887              		.global	xTaskGenericNotifyFromISR
 5888              		.syntax unified
 5889              		.thumb
 5890              		.thumb_func
 5891              		.fpu fpv4-sp-d16
 5893              	xTaskGenericNotifyFromISR:
ARM GAS  /tmp/ccv2gsms.s 			page 194


 5894              	.LFB51:
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5895              		.loc 1 4898 2
 5896              		.cfi_startproc
 5897              		@ args = 4, pretend = 0, frame = 56
 5898              		@ frame_needed = 1, uses_anonymous_args = 0
 5899 0000 80B5     		push	{r7, lr}
 5900              	.LCFI233:
 5901              		.cfi_def_cfa_offset 8
 5902              		.cfi_offset 7, -8
 5903              		.cfi_offset 14, -4
 5904 0002 8EB0     		sub	sp, sp, #56
 5905              	.LCFI234:
 5906              		.cfi_def_cfa_offset 64
 5907 0004 00AF     		add	r7, sp, #0
 5908              	.LCFI235:
 5909              		.cfi_def_cfa_register 7
 5910 0006 F860     		str	r0, [r7, #12]
 5911 0008 B960     		str	r1, [r7, #8]
 5912 000a 3B60     		str	r3, [r7]
 5913 000c 1346     		mov	r3, r2
 5914 000e FB71     		strb	r3, [r7, #7]
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5915              		.loc 1 4901 13
 5916 0010 0123     		movs	r3, #1
 5917 0012 7B63     		str	r3, [r7, #52]
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5918              		.loc 1 4904 3
 5919 0014 FB68     		ldr	r3, [r7, #12]
 5920 0016 002B     		cmp	r3, #0
 5921 0018 0AD1     		bne	.L364
 5922              	.LBB182:
 5923              	.LBB183:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5924              		.loc 2 195 2
 5925              		.syntax unified
 5926              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5927 001a 4FF05003 			mov r3, #80												
 5928 001e 83F31188 		msr basepri, r3											
 5929 0022 BFF36F8F 		isb														
 5930 0026 BFF34F8F 		dsb														
 5931              	
 5932              	@ 0 "" 2
 5933              		.thumb
 5934              		.syntax unified
 5935 002a 7B62     		str	r3, [r7, #36]
ARM GAS  /tmp/ccv2gsms.s 			page 195


 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5936              		.loc 2 203 1
 5937 002c 00BF     		nop
 5938              	.L365:
 5939              	.LBE183:
 5940              	.LBE182:
 5941              		.loc 1 4904 3 discriminator 1
 5942 002e FEE7     		b	.L365
 5943              	.L364:
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 5944              		.loc 1 4922 3
 5945 0030 FFF7FEFF 		bl	vPortValidateInterruptPriority
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 5946              		.loc 1 4924 9
 5947 0034 FB68     		ldr	r3, [r7, #12]
 5948 0036 3B63     		str	r3, [r7, #48]
 5949              	.LBB184:
 5950              	.LBB185:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5951              		.loc 2 211 2
 5952              		.syntax unified
 5953              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5954 0038 EFF31182 			mrs r2, basepri											
 5955 003c 4FF05003 		mov r3, #80												
 5956 0040 83F31188 		msr basepri, r3											
 5957 0044 BFF36F8F 		isb														
 5958 0048 BFF34F8F 		dsb														
 5959              	
 5960              	@ 0 "" 2
 5961              		.thumb
 5962              		.syntax unified
 5963 004c 3A62     		str	r2, [r7, #32]
 5964 004e FB61     		str	r3, [r7, #28]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 5965              		.loc 2 223 9
 5966 0050 3B6A     		ldr	r3, [r7, #32]
 5967              	.LBE185:
 5968              	.LBE184:
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv2gsms.s 			page 196


4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 5969              		.loc 1 4926 28
 5970 0052 FB62     		str	r3, [r7, #44]
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5971              		.loc 1 4928 6
 5972 0054 3B68     		ldr	r3, [r7]
 5973 0056 002B     		cmp	r3, #0
 5974 0058 03D0     		beq	.L367
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5975              		.loc 1 4930 42
 5976 005a 3B6B     		ldr	r3, [r7, #48]
 5977 005c DA6C     		ldr	r2, [r3, #76]
 5978              		.loc 1 4930 35
 5979 005e 3B68     		ldr	r3, [r7]
 5980 0060 1A60     		str	r2, [r3]
 5981              	.L367:
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5982              		.loc 1 4933 26
 5983 0062 3B6B     		ldr	r3, [r7, #48]
 5984 0064 93F85030 		ldrb	r3, [r3, #80]
 5985 0068 87F82B30 		strb	r3, [r7, #43]
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5986              		.loc 1 4934 25
 5987 006c 3B6B     		ldr	r3, [r7, #48]
 5988 006e 0222     		movs	r2, #2
 5989 0070 83F85020 		strb	r2, [r3, #80]
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 5990              		.loc 1 4936 4
 5991 0074 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5992 0076 042B     		cmp	r3, #4
 5993 0078 28D8     		bhi	.L368
 5994 007a 01A2     		adr	r2, .L370
 5995 007c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5996              		.p2align 2
 5997              	.L370:
 5998 0080 ED000000 		.word	.L387+1
 5999 0084 95000000 		.word	.L373+1
 6000 0088 A3000000 		.word	.L372+1
 6001 008c AF000000 		.word	.L371+1
 6002 0090 B7000000 		.word	.L369+1
 6003              		.p2align 1
 6004              	.L373:
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 6005              		.loc 1 4939 29
 6006 0094 3B6B     		ldr	r3, [r7, #48]
 6007 0096 DA6C     		ldr	r2, [r3, #76]
 6008 0098 BB68     		ldr	r3, [r7, #8]
 6009 009a 1A43     		orrs	r2, r2, r3
 6010 009c 3B6B     		ldr	r3, [r7, #48]
 6011 009e DA64     		str	r2, [r3, #76]
ARM GAS  /tmp/ccv2gsms.s 			page 197


4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6012              		.loc 1 4940 6
 6013 00a0 27E0     		b	.L375
 6014              	.L372:
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 6015              		.loc 1 4943 13
 6016 00a2 3B6B     		ldr	r3, [r7, #48]
 6017 00a4 DB6C     		ldr	r3, [r3, #76]
 6018              		.loc 1 4943 32
 6019 00a6 5A1C     		adds	r2, r3, #1
 6020 00a8 3B6B     		ldr	r3, [r7, #48]
 6021 00aa DA64     		str	r2, [r3, #76]
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6022              		.loc 1 4944 6
 6023 00ac 21E0     		b	.L375
 6024              	.L371:
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 6025              		.loc 1 4947 29
 6026 00ae 3B6B     		ldr	r3, [r7, #48]
 6027 00b0 BA68     		ldr	r2, [r7, #8]
 6028 00b2 DA64     		str	r2, [r3, #76]
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6029              		.loc 1 4948 6
 6030 00b4 1DE0     		b	.L375
 6031              	.L369:
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 6032              		.loc 1 4951 8
 6033 00b6 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 6034 00ba 022B     		cmp	r3, #2
 6035 00bc 03D0     		beq	.L376
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 6036              		.loc 1 4953 30
 6037 00be 3B6B     		ldr	r3, [r7, #48]
 6038 00c0 BA68     		ldr	r2, [r7, #8]
 6039 00c2 DA64     		str	r2, [r3, #76]
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6040              		.loc 1 4960 6
 6041 00c4 15E0     		b	.L375
 6042              	.L376:
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6043              		.loc 1 4958 15
 6044 00c6 0023     		movs	r3, #0
 6045 00c8 7B63     		str	r3, [r7, #52]
 6046              		.loc 1 4960 6
ARM GAS  /tmp/ccv2gsms.s 			page 198


 6047 00ca 12E0     		b	.L375
 6048              	.L368:
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 6049              		.loc 1 4971 6
 6050 00cc 3B6B     		ldr	r3, [r7, #48]
 6051 00ce DB6C     		ldr	r3, [r3, #76]
 6052 00d0 B3F1FF3F 		cmp	r3, #-1
 6053 00d4 0CD0     		beq	.L388
 6054              	.LBB186:
 6055              	.LBB187:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6056              		.loc 2 195 2
 6057              		.syntax unified
 6058              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6059 00d6 4FF05003 			mov r3, #80												
 6060 00da 83F31188 		msr basepri, r3											
 6061 00de BFF36F8F 		isb														
 6062 00e2 BFF34F8F 		dsb														
 6063              	
 6064              	@ 0 "" 2
 6065              		.thumb
 6066              		.syntax unified
 6067 00e6 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6068              		.loc 2 203 1
 6069 00e8 00BF     		nop
 6070              	.L379:
 6071              	.LBE187:
 6072              	.LBE186:
 6073              		.loc 1 4971 6 discriminator 2
 6074 00ea FEE7     		b	.L379
 6075              	.L387:
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6076              		.loc 1 4965 6
 6077 00ec 00BF     		nop
 6078 00ee 00E0     		b	.L375
 6079              	.L388:
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6080              		.loc 1 4972 6
 6081 00f0 00BF     		nop
 6082              	.L375:
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
ARM GAS  /tmp/ccv2gsms.s 			page 199


4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 6083              		.loc 1 4979 6
 6084 00f2 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 6085 00f6 012B     		cmp	r3, #1
 6086 00f8 45D1     		bne	.L380
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6087              		.loc 1 4982 5
 6088 00fa 3B6B     		ldr	r3, [r7, #48]
 6089 00fc 9B6A     		ldr	r3, [r3, #40]
 6090 00fe 002B     		cmp	r3, #0
 6091 0100 0AD0     		beq	.L381
 6092              	.LBB188:
 6093              	.LBB189:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6094              		.loc 2 195 2
 6095              		.syntax unified
 6096              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6097 0102 4FF05003 			mov r3, #80												
 6098 0106 83F31188 		msr basepri, r3											
 6099 010a BFF36F8F 		isb														
 6100 010e BFF34F8F 		dsb														
 6101              	
 6102              	@ 0 "" 2
 6103              		.thumb
 6104              		.syntax unified
 6105 0112 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6106              		.loc 2 203 1
 6107 0114 00BF     		nop
 6108              	.L382:
 6109              	.LBE189:
 6110              	.LBE188:
 6111              		.loc 1 4982 5 discriminator 3
 6112 0116 FEE7     		b	.L382
 6113              	.L381:
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6114              		.loc 1 4984 30
 6115 0118 204B     		ldr	r3, .L389
 6116 011a 1B68     		ldr	r3, [r3]
 6117              		.loc 1 4984 7
 6118 011c 002B     		cmp	r3, #0
 6119 011e 1CD1     		bne	.L383
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 6120              		.loc 1 4986 15
 6121 0120 3B6B     		ldr	r3, [r7, #48]
 6122 0122 0433     		adds	r3, r3, #4
 6123 0124 1846     		mov	r0, r3
 6124 0126 FFF7FEFF 		bl	uxListRemove
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6125              		.loc 1 4987 6
 6126 012a 3B6B     		ldr	r3, [r7, #48]
 6127 012c DB6A     		ldr	r3, [r3, #44]
 6128 012e 0122     		movs	r2, #1
ARM GAS  /tmp/ccv2gsms.s 			page 200


 6129 0130 9A40     		lsls	r2, r2, r3
 6130 0132 1B4B     		ldr	r3, .L389+4
 6131 0134 1B68     		ldr	r3, [r3]
 6132 0136 1343     		orrs	r3, r3, r2
 6133 0138 194A     		ldr	r2, .L389+4
 6134 013a 1360     		str	r3, [r2]
 6135 013c 3B6B     		ldr	r3, [r7, #48]
 6136 013e DA6A     		ldr	r2, [r3, #44]
 6137 0140 1346     		mov	r3, r2
 6138 0142 9B00     		lsls	r3, r3, #2
 6139 0144 1344     		add	r3, r3, r2
 6140 0146 9B00     		lsls	r3, r3, #2
 6141 0148 164A     		ldr	r2, .L389+8
 6142 014a 1A44     		add	r2, r2, r3
 6143 014c 3B6B     		ldr	r3, [r7, #48]
 6144 014e 0433     		adds	r3, r3, #4
 6145 0150 1946     		mov	r1, r3
 6146 0152 1046     		mov	r0, r2
 6147 0154 FFF7FEFF 		bl	vListInsertEnd
 6148 0158 05E0     		b	.L384
 6149              	.L383:
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 6150              		.loc 1 4993 6
 6151 015a 3B6B     		ldr	r3, [r7, #48]
 6152 015c 1833     		adds	r3, r3, #24
 6153 015e 1946     		mov	r1, r3
 6154 0160 1148     		ldr	r0, .L389+12
 6155 0162 FFF7FEFF 		bl	vListInsertEnd
 6156              	.L384:
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6157              		.loc 1 4996 14
 6158 0166 3B6B     		ldr	r3, [r7, #48]
 6159 0168 DA6A     		ldr	r2, [r3, #44]
 6160              		.loc 1 4996 41
 6161 016a 104B     		ldr	r3, .L389+16
 6162 016c 1B68     		ldr	r3, [r3]
 6163 016e DB6A     		ldr	r3, [r3, #44]
 6164              		.loc 1 4996 7
 6165 0170 9A42     		cmp	r2, r3
 6166 0172 08D9     		bls	.L380
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 6167              		.loc 1 5000 8
 6168 0174 3B6C     		ldr	r3, [r7, #64]
 6169 0176 002B     		cmp	r3, #0
 6170 0178 02D0     		beq	.L385
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
ARM GAS  /tmp/ccv2gsms.s 			page 201


 6171              		.loc 1 5002 34
 6172 017a 3B6C     		ldr	r3, [r7, #64]
 6173 017c 0122     		movs	r2, #1
 6174 017e 1A60     		str	r2, [r3]
 6175              	.L385:
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 6176              		.loc 1 5008 20
 6177 0180 0B4B     		ldr	r3, .L389+20
 6178 0182 0122     		movs	r2, #1
 6179 0184 1A60     		str	r2, [r3]
 6180              	.L380:
 6181 0186 FB6A     		ldr	r3, [r7, #44]
 6182 0188 3B61     		str	r3, [r7, #16]
 6183              	.LBB190:
 6184              	.LBB191:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6185              		.loc 2 229 2
 6186 018a 3B69     		ldr	r3, [r7, #16]
 6187              		.syntax unified
 6188              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6189 018c 83F31188 			msr basepri, r3	
 6190              	@ 0 "" 2
 6191              		.loc 2 233 1
 6192              		.thumb
 6193              		.syntax unified
 6194 0190 00BF     		nop
 6195              	.LBE191:
 6196              	.LBE190:
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6197              		.loc 1 5018 10
 6198 0192 7B6B     		ldr	r3, [r7, #52]
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6199              		.loc 1 5019 2
 6200 0194 1846     		mov	r0, r3
 6201 0196 3837     		adds	r7, r7, #56
 6202              	.LCFI236:
 6203              		.cfi_def_cfa_offset 8
 6204 0198 BD46     		mov	sp, r7
 6205              	.LCFI237:
 6206              		.cfi_def_cfa_register 13
 6207              		@ sp needed
 6208 019a 80BD     		pop	{r7, pc}
 6209              	.L390:
ARM GAS  /tmp/ccv2gsms.s 			page 202


 6210              		.align	2
 6211              	.L389:
 6212 019c 00000000 		.word	uxSchedulerSuspended
 6213 01a0 00000000 		.word	uxTopReadyPriority
 6214 01a4 00000000 		.word	pxReadyTasksLists
 6215 01a8 00000000 		.word	xPendingReadyList
 6216 01ac 00000000 		.word	pxCurrentTCB
 6217 01b0 00000000 		.word	xYieldPending
 6218              		.cfi_endproc
 6219              	.LFE51:
 6221              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 6222              		.align	1
 6223              		.global	vTaskNotifyGiveFromISR
 6224              		.syntax unified
 6225              		.thumb
 6226              		.thumb_func
 6227              		.fpu fpv4-sp-d16
 6229              	vTaskNotifyGiveFromISR:
 6230              	.LFB52:
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6231              		.loc 1 5027 2
 6232              		.cfi_startproc
 6233              		@ args = 0, pretend = 0, frame = 40
 6234              		@ frame_needed = 1, uses_anonymous_args = 0
 6235 0000 80B5     		push	{r7, lr}
 6236              	.LCFI238:
 6237              		.cfi_def_cfa_offset 8
 6238              		.cfi_offset 7, -8
 6239              		.cfi_offset 14, -4
 6240 0002 8AB0     		sub	sp, sp, #40
 6241              	.LCFI239:
 6242              		.cfi_def_cfa_offset 48
 6243 0004 00AF     		add	r7, sp, #0
 6244              	.LCFI240:
 6245              		.cfi_def_cfa_register 7
 6246 0006 7860     		str	r0, [r7, #4]
 6247 0008 3960     		str	r1, [r7]
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 6248              		.loc 1 5032 3
 6249 000a 7B68     		ldr	r3, [r7, #4]
 6250 000c 002B     		cmp	r3, #0
 6251 000e 0AD1     		bne	.L392
 6252              	.LBB192:
 6253              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6254              		.loc 2 195 2
ARM GAS  /tmp/ccv2gsms.s 			page 203


 6255              		.syntax unified
 6256              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6257 0010 4FF05003 			mov r3, #80												
 6258 0014 83F31188 		msr basepri, r3											
 6259 0018 BFF36F8F 		isb														
 6260 001c BFF34F8F 		dsb														
 6261              	
 6262              	@ 0 "" 2
 6263              		.thumb
 6264              		.syntax unified
 6265 0020 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6266              		.loc 2 203 1
 6267 0022 00BF     		nop
 6268              	.L393:
 6269              	.LBE193:
 6270              	.LBE192:
 6271              		.loc 1 5032 3 discriminator 1
 6272 0024 FEE7     		b	.L393
 6273              	.L392:
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 6274              		.loc 1 5050 3
 6275 0026 FFF7FEFF 		bl	vPortValidateInterruptPriority
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 6276              		.loc 1 5052 9
 6277 002a 7B68     		ldr	r3, [r7, #4]
 6278 002c 7B62     		str	r3, [r7, #36]
 6279              	.LBB194:
 6280              	.LBB195:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6281              		.loc 2 211 2
 6282              		.syntax unified
 6283              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6284 002e EFF31182 			mrs r2, basepri											
 6285 0032 4FF05003 		mov r3, #80												
 6286 0036 83F31188 		msr basepri, r3											
 6287 003a BFF36F8F 		isb														
 6288 003e BFF34F8F 		dsb														
 6289              	
ARM GAS  /tmp/ccv2gsms.s 			page 204


 6290              	@ 0 "" 2
 6291              		.thumb
 6292              		.syntax unified
 6293 0042 7A61     		str	r2, [r7, #20]
 6294 0044 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 6295              		.loc 2 223 9
 6296 0046 7B69     		ldr	r3, [r7, #20]
 6297              	.LBE195:
 6298              	.LBE194:
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 6299              		.loc 1 5054 28
 6300 0048 3B62     		str	r3, [r7, #32]
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 6301              		.loc 1 5056 26
 6302 004a 7B6A     		ldr	r3, [r7, #36]
 6303 004c 93F85030 		ldrb	r3, [r3, #80]
 6304 0050 FB77     		strb	r3, [r7, #31]
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6305              		.loc 1 5057 25
 6306 0052 7B6A     		ldr	r3, [r7, #36]
 6307 0054 0222     		movs	r2, #2
 6308 0056 83F85020 		strb	r2, [r3, #80]
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 6309              		.loc 1 5061 11
 6310 005a 7B6A     		ldr	r3, [r7, #36]
 6311 005c DB6C     		ldr	r3, [r3, #76]
 6312              		.loc 1 5061 30
 6313 005e 5A1C     		adds	r2, r3, #1
 6314 0060 7B6A     		ldr	r3, [r7, #36]
 6315 0062 DA64     		str	r2, [r3, #76]
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 6316              		.loc 1 5067 6
 6317 0064 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6318 0066 012B     		cmp	r3, #1
 6319 0068 45D1     		bne	.L395
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6320              		.loc 1 5070 5
 6321 006a 7B6A     		ldr	r3, [r7, #36]
 6322 006c 9B6A     		ldr	r3, [r3, #40]
 6323 006e 002B     		cmp	r3, #0
 6324 0070 0AD0     		beq	.L396
 6325              	.LBB196:
 6326              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /tmp/ccv2gsms.s 			page 205


 6327              		.loc 2 195 2
 6328              		.syntax unified
 6329              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6330 0072 4FF05003 			mov r3, #80												
 6331 0076 83F31188 		msr basepri, r3											
 6332 007a BFF36F8F 		isb														
 6333 007e BFF34F8F 		dsb														
 6334              	
 6335              	@ 0 "" 2
 6336              		.thumb
 6337              		.syntax unified
 6338 0082 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6339              		.loc 2 203 1
 6340 0084 00BF     		nop
 6341              	.L397:
 6342              	.LBE197:
 6343              	.LBE196:
 6344              		.loc 1 5070 5 discriminator 2
 6345 0086 FEE7     		b	.L397
 6346              	.L396:
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6347              		.loc 1 5072 30
 6348 0088 204B     		ldr	r3, .L401
 6349 008a 1B68     		ldr	r3, [r3]
 6350              		.loc 1 5072 7
 6351 008c 002B     		cmp	r3, #0
 6352 008e 1CD1     		bne	.L398
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 6353              		.loc 1 5074 15
 6354 0090 7B6A     		ldr	r3, [r7, #36]
 6355 0092 0433     		adds	r3, r3, #4
 6356 0094 1846     		mov	r0, r3
 6357 0096 FFF7FEFF 		bl	uxListRemove
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6358              		.loc 1 5075 6
 6359 009a 7B6A     		ldr	r3, [r7, #36]
 6360 009c DB6A     		ldr	r3, [r3, #44]
 6361 009e 0122     		movs	r2, #1
 6362 00a0 9A40     		lsls	r2, r2, r3
 6363 00a2 1B4B     		ldr	r3, .L401+4
 6364 00a4 1B68     		ldr	r3, [r3]
 6365 00a6 1343     		orrs	r3, r3, r2
 6366 00a8 194A     		ldr	r2, .L401+4
 6367 00aa 1360     		str	r3, [r2]
 6368 00ac 7B6A     		ldr	r3, [r7, #36]
 6369 00ae DA6A     		ldr	r2, [r3, #44]
 6370 00b0 1346     		mov	r3, r2
 6371 00b2 9B00     		lsls	r3, r3, #2
 6372 00b4 1344     		add	r3, r3, r2
 6373 00b6 9B00     		lsls	r3, r3, #2
 6374 00b8 164A     		ldr	r2, .L401+8
 6375 00ba 1A44     		add	r2, r2, r3
 6376 00bc 7B6A     		ldr	r3, [r7, #36]
 6377 00be 0433     		adds	r3, r3, #4
ARM GAS  /tmp/ccv2gsms.s 			page 206


 6378 00c0 1946     		mov	r1, r3
 6379 00c2 1046     		mov	r0, r2
 6380 00c4 FFF7FEFF 		bl	vListInsertEnd
 6381 00c8 05E0     		b	.L399
 6382              	.L398:
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 6383              		.loc 1 5081 6
 6384 00ca 7B6A     		ldr	r3, [r7, #36]
 6385 00cc 1833     		adds	r3, r3, #24
 6386 00ce 1946     		mov	r1, r3
 6387 00d0 1148     		ldr	r0, .L401+12
 6388 00d2 FFF7FEFF 		bl	vListInsertEnd
 6389              	.L399:
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6390              		.loc 1 5084 14
 6391 00d6 7B6A     		ldr	r3, [r7, #36]
 6392 00d8 DA6A     		ldr	r2, [r3, #44]
 6393              		.loc 1 5084 41
 6394 00da 104B     		ldr	r3, .L401+16
 6395 00dc 1B68     		ldr	r3, [r3]
 6396 00de DB6A     		ldr	r3, [r3, #44]
 6397              		.loc 1 5084 7
 6398 00e0 9A42     		cmp	r2, r3
 6399 00e2 08D9     		bls	.L395
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 6400              		.loc 1 5088 8
 6401 00e4 3B68     		ldr	r3, [r7]
 6402 00e6 002B     		cmp	r3, #0
 6403 00e8 02D0     		beq	.L400
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 6404              		.loc 1 5090 34
 6405 00ea 3B68     		ldr	r3, [r7]
 6406 00ec 0122     		movs	r2, #1
 6407 00ee 1A60     		str	r2, [r3]
 6408              	.L400:
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 6409              		.loc 1 5096 20
 6410 00f0 0B4B     		ldr	r3, .L401+20
 6411 00f2 0122     		movs	r2, #1
 6412 00f4 1A60     		str	r2, [r3]
 6413              	.L395:
ARM GAS  /tmp/ccv2gsms.s 			page 207


 6414 00f6 3B6A     		ldr	r3, [r7, #32]
 6415 00f8 BB60     		str	r3, [r7, #8]
 6416              	.LBB198:
 6417              	.LBB199:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6418              		.loc 2 229 2
 6419 00fa BB68     		ldr	r3, [r7, #8]
 6420              		.syntax unified
 6421              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6422 00fc 83F31188 			msr basepri, r3	
 6423              	@ 0 "" 2
 6424              		.loc 2 233 1
 6425              		.thumb
 6426              		.syntax unified
 6427 0100 00BF     		nop
 6428              	.LBE199:
 6429              	.LBE198:
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6430              		.loc 1 5105 2
 6431 0102 00BF     		nop
 6432 0104 2837     		adds	r7, r7, #40
 6433              	.LCFI241:
 6434              		.cfi_def_cfa_offset 8
 6435 0106 BD46     		mov	sp, r7
 6436              	.LCFI242:
 6437              		.cfi_def_cfa_register 13
 6438              		@ sp needed
 6439 0108 80BD     		pop	{r7, pc}
 6440              	.L402:
 6441 010a 00BF     		.align	2
 6442              	.L401:
 6443 010c 00000000 		.word	uxSchedulerSuspended
 6444 0110 00000000 		.word	uxTopReadyPriority
 6445 0114 00000000 		.word	pxReadyTasksLists
 6446 0118 00000000 		.word	xPendingReadyList
 6447 011c 00000000 		.word	pxCurrentTCB
 6448 0120 00000000 		.word	xYieldPending
 6449              		.cfi_endproc
 6450              	.LFE52:
 6452              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6453              		.align	1
 6454              		.global	xTaskNotifyStateClear
 6455              		.syntax unified
 6456              		.thumb
 6457              		.thumb_func
 6458              		.fpu fpv4-sp-d16
 6460              	xTaskNotifyStateClear:
 6461              	.LFB53:
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv2gsms.s 			page 208


5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6462              		.loc 1 5113 2
 6463              		.cfi_startproc
 6464              		@ args = 0, pretend = 0, frame = 16
 6465              		@ frame_needed = 1, uses_anonymous_args = 0
 6466 0000 80B5     		push	{r7, lr}
 6467              	.LCFI243:
 6468              		.cfi_def_cfa_offset 8
 6469              		.cfi_offset 7, -8
 6470              		.cfi_offset 14, -4
 6471 0002 84B0     		sub	sp, sp, #16
 6472              	.LCFI244:
 6473              		.cfi_def_cfa_offset 24
 6474 0004 00AF     		add	r7, sp, #0
 6475              	.LCFI245:
 6476              		.cfi_def_cfa_register 7
 6477 0006 7860     		str	r0, [r7, #4]
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 6478              		.loc 1 5119 11
 6479 0008 7B68     		ldr	r3, [r7, #4]
 6480 000a 002B     		cmp	r3, #0
 6481 000c 02D1     		bne	.L404
 6482              		.loc 1 5119 11 is_stmt 0 discriminator 1
 6483 000e 0E4B     		ldr	r3, .L409
 6484 0010 1B68     		ldr	r3, [r3]
 6485 0012 00E0     		b	.L405
 6486              	.L404:
 6487              		.loc 1 5119 11 discriminator 2
 6488 0014 7B68     		ldr	r3, [r7, #4]
 6489              	.L405:
 6490              		.loc 1 5119 9 is_stmt 1 discriminator 4
 6491 0016 BB60     		str	r3, [r7, #8]
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6492              		.loc 1 5121 3 discriminator 4
 6493 0018 FFF7FEFF 		bl	vPortEnterCritical
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 6494              		.loc 1 5123 13 discriminator 4
 6495 001c BB68     		ldr	r3, [r7, #8]
 6496 001e 93F85030 		ldrb	r3, [r3, #80]
 6497 0022 DBB2     		uxtb	r3, r3
 6498              		.loc 1 5123 6 discriminator 4
 6499 0024 022B     		cmp	r3, #2
 6500 0026 06D1     		bne	.L406
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccv2gsms.s 			page 209


5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6501              		.loc 1 5125 26
 6502 0028 BB68     		ldr	r3, [r7, #8]
 6503 002a 0022     		movs	r2, #0
 6504 002c 83F85020 		strb	r2, [r3, #80]
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 6505              		.loc 1 5126 13
 6506 0030 0123     		movs	r3, #1
 6507 0032 FB60     		str	r3, [r7, #12]
 6508 0034 01E0     		b	.L407
 6509              	.L406:
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 6510              		.loc 1 5130 13
 6511 0036 0023     		movs	r3, #0
 6512 0038 FB60     		str	r3, [r7, #12]
 6513              	.L407:
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6514              		.loc 1 5133 3
 6515 003a FFF7FEFF 		bl	vPortExitCritical
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6516              		.loc 1 5135 10
 6517 003e FB68     		ldr	r3, [r7, #12]
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6518              		.loc 1 5136 2
 6519 0040 1846     		mov	r0, r3
 6520 0042 1037     		adds	r7, r7, #16
 6521              	.LCFI246:
 6522              		.cfi_def_cfa_offset 8
 6523 0044 BD46     		mov	sp, r7
 6524              	.LCFI247:
 6525              		.cfi_def_cfa_register 13
 6526              		@ sp needed
 6527 0046 80BD     		pop	{r7, pc}
 6528              	.L410:
 6529              		.align	2
 6530              	.L409:
 6531 0048 00000000 		.word	pxCurrentTCB
 6532              		.cfi_endproc
 6533              	.LFE53:
 6535              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 6536              		.align	1
 6537              		.global	ulTaskNotifyValueClear
 6538              		.syntax unified
 6539              		.thumb
 6540              		.thumb_func
 6541              		.fpu fpv4-sp-d16
 6543              	ulTaskNotifyValueClear:
 6544              	.LFB54:
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccv2gsms.s 			page 210


5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6545              		.loc 1 5144 2
 6546              		.cfi_startproc
 6547              		@ args = 0, pretend = 0, frame = 16
 6548              		@ frame_needed = 1, uses_anonymous_args = 0
 6549 0000 80B5     		push	{r7, lr}
 6550              	.LCFI248:
 6551              		.cfi_def_cfa_offset 8
 6552              		.cfi_offset 7, -8
 6553              		.cfi_offset 14, -4
 6554 0002 84B0     		sub	sp, sp, #16
 6555              	.LCFI249:
 6556              		.cfi_def_cfa_offset 24
 6557 0004 00AF     		add	r7, sp, #0
 6558              	.LCFI250:
 6559              		.cfi_def_cfa_register 7
 6560 0006 7860     		str	r0, [r7, #4]
 6561 0008 3960     		str	r1, [r7]
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 6562              		.loc 1 5150 11
 6563 000a 7B68     		ldr	r3, [r7, #4]
 6564 000c 002B     		cmp	r3, #0
 6565 000e 02D1     		bne	.L412
 6566              		.loc 1 5150 11 is_stmt 0 discriminator 1
 6567 0010 0C4B     		ldr	r3, .L415
 6568 0012 1B68     		ldr	r3, [r3]
 6569 0014 00E0     		b	.L413
 6570              	.L412:
 6571              		.loc 1 5150 11 discriminator 2
 6572 0016 7B68     		ldr	r3, [r7, #4]
 6573              	.L413:
 6574              		.loc 1 5150 9 is_stmt 1 discriminator 4
 6575 0018 FB60     		str	r3, [r7, #12]
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6576              		.loc 1 5152 3 discriminator 4
 6577 001a FFF7FEFF 		bl	vPortEnterCritical
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then clear the bit mask. */
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 6578              		.loc 1 5156 27 discriminator 4
 6579 001e 094B     		ldr	r3, .L415
 6580 0020 1B68     		ldr	r3, [r3]
 6581              		.loc 1 5156 13 discriminator 4
 6582 0022 DB6C     		ldr	r3, [r3, #76]
 6583 0024 BB60     		str	r3, [r7, #8]
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
ARM GAS  /tmp/ccv2gsms.s 			page 211


 6584              		.loc 1 5157 27 discriminator 4
 6585 0026 FB68     		ldr	r3, [r7, #12]
 6586 0028 DA6C     		ldr	r2, [r3, #76]
 6587              		.loc 1 5157 30 discriminator 4
 6588 002a 3B68     		ldr	r3, [r7]
 6589 002c DB43     		mvns	r3, r3
 6590              		.loc 1 5157 27 discriminator 4
 6591 002e 1A40     		ands	r2, r2, r3
 6592 0030 FB68     		ldr	r3, [r7, #12]
 6593 0032 DA64     		str	r2, [r3, #76]
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6594              		.loc 1 5159 3 discriminator 4
 6595 0034 FFF7FEFF 		bl	vPortExitCritical
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 6596              		.loc 1 5161 10 discriminator 4
 6597 0038 BB68     		ldr	r3, [r7, #8]
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6598              		.loc 1 5162 2 discriminator 4
 6599 003a 1846     		mov	r0, r3
 6600 003c 1037     		adds	r7, r7, #16
 6601              	.LCFI251:
 6602              		.cfi_def_cfa_offset 8
 6603 003e BD46     		mov	sp, r7
 6604              	.LCFI252:
 6605              		.cfi_def_cfa_register 13
 6606              		@ sp needed
 6607 0040 80BD     		pop	{r7, pc}
 6608              	.L416:
 6609 0042 00BF     		.align	2
 6610              	.L415:
 6611 0044 00000000 		.word	pxCurrentTCB
 6612              		.cfi_endproc
 6613              	.LFE54:
 6615              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 6616              		.align	1
 6617              		.syntax unified
 6618              		.thumb
 6619              		.thumb_func
 6620              		.fpu fpv4-sp-d16
 6622              	prvAddCurrentTaskToDelayedList:
 6623              	.LFB55:
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccv2gsms.s 			page 212


5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 6624              		.loc 1 5178 1
 6625              		.cfi_startproc
 6626              		@ args = 0, pretend = 0, frame = 16
 6627              		@ frame_needed = 1, uses_anonymous_args = 0
 6628 0000 80B5     		push	{r7, lr}
 6629              	.LCFI253:
 6630              		.cfi_def_cfa_offset 8
 6631              		.cfi_offset 7, -8
 6632              		.cfi_offset 14, -4
 6633 0002 84B0     		sub	sp, sp, #16
 6634              	.LCFI254:
 6635              		.cfi_def_cfa_offset 24
 6636 0004 00AF     		add	r7, sp, #0
 6637              	.LCFI255:
 6638              		.cfi_def_cfa_register 7
 6639 0006 7860     		str	r0, [r7, #4]
 6640 0008 3960     		str	r1, [r7]
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 6641              		.loc 1 5180 18
 6642 000a 294B     		ldr	r3, .L423
 6643 000c 1B68     		ldr	r3, [r3]
 6644 000e FB60     		str	r3, [r7, #12]
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6645              		.loc 1 5193 35
 6646 0010 284B     		ldr	r3, .L423+4
 6647 0012 1B68     		ldr	r3, [r3]
 6648              		.loc 1 5193 6
 6649 0014 0433     		adds	r3, r3, #4
 6650 0016 1846     		mov	r0, r3
 6651 0018 FFF7FEFF 		bl	uxListRemove
 6652 001c 0346     		mov	r3, r0
 6653              		.loc 1 5193 4
 6654 001e 002B     		cmp	r3, #0
 6655 0020 0BD1     		bne	.L418
5194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 6656              		.loc 1 5197 3
 6657 0022 244B     		ldr	r3, .L423+4
 6658 0024 1B68     		ldr	r3, [r3]
 6659 0026 DB6A     		ldr	r3, [r3, #44]
ARM GAS  /tmp/ccv2gsms.s 			page 213


 6660 0028 0122     		movs	r2, #1
 6661 002a 02FA03F3 		lsl	r3, r2, r3
 6662 002e DA43     		mvns	r2, r3
 6663 0030 214B     		ldr	r3, .L423+8
 6664 0032 1B68     		ldr	r3, [r3]
 6665 0034 1340     		ands	r3, r3, r2
 6666 0036 204A     		ldr	r2, .L423+8
 6667 0038 1360     		str	r3, [r2]
 6668              	.L418:
5198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 6669              		.loc 1 5206 5
 6670 003a 7B68     		ldr	r3, [r7, #4]
 6671 003c B3F1FF3F 		cmp	r3, #-1
 6672 0040 0AD1     		bne	.L419
 6673              		.loc 1 5206 41 discriminator 1
 6674 0042 3B68     		ldr	r3, [r7]
 6675 0044 002B     		cmp	r3, #0
 6676 0046 07D0     		beq	.L419
5207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 6677              		.loc 1 5211 56
 6678 0048 1A4B     		ldr	r3, .L423+4
 6679 004a 1B68     		ldr	r3, [r3]
 6680              		.loc 1 5211 4
 6681 004c 0433     		adds	r3, r3, #4
 6682 004e 1946     		mov	r1, r3
 6683 0050 1A48     		ldr	r0, .L423+12
 6684 0052 FFF7FEFF 		bl	vListInsertEnd
5212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/ccv2gsms.s 			page 214


5230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccv2gsms.s 			page 215


 6685              		.loc 1 5286 1
 6686 0056 26E0     		b	.L422
 6687              	.L419:
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6688              		.loc 1 5218 16
 6689 0058 FA68     		ldr	r2, [r7, #12]
 6690 005a 7B68     		ldr	r3, [r7, #4]
 6691 005c 1344     		add	r3, r3, r2
 6692 005e BB60     		str	r3, [r7, #8]
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6693              		.loc 1 5221 4
 6694 0060 144B     		ldr	r3, .L423+4
 6695 0062 1B68     		ldr	r3, [r3]
 6696 0064 BA68     		ldr	r2, [r7, #8]
 6697 0066 5A60     		str	r2, [r3, #4]
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6698              		.loc 1 5223 6
 6699 0068 BA68     		ldr	r2, [r7, #8]
 6700 006a FB68     		ldr	r3, [r7, #12]
 6701 006c 9A42     		cmp	r2, r3
 6702 006e 09D2     		bcs	.L421
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6703              		.loc 1 5227 5
 6704 0070 134B     		ldr	r3, .L423+16
 6705 0072 1A68     		ldr	r2, [r3]
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6706              		.loc 1 5227 60
 6707 0074 0F4B     		ldr	r3, .L423+4
 6708 0076 1B68     		ldr	r3, [r3]
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6709              		.loc 1 5227 5
 6710 0078 0433     		adds	r3, r3, #4
 6711 007a 1946     		mov	r1, r3
 6712 007c 1046     		mov	r0, r2
 6713 007e FFF7FEFF 		bl	vListInsert
 6714              		.loc 1 5286 1
 6715 0082 10E0     		b	.L422
 6716              	.L421:
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6717              		.loc 1 5233 5
 6718 0084 0F4B     		ldr	r3, .L423+20
 6719 0086 1A68     		ldr	r2, [r3]
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6720              		.loc 1 5233 52
 6721 0088 0A4B     		ldr	r3, .L423+4
 6722 008a 1B68     		ldr	r3, [r3]
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6723              		.loc 1 5233 5
 6724 008c 0433     		adds	r3, r3, #4
 6725 008e 1946     		mov	r1, r3
 6726 0090 1046     		mov	r0, r2
 6727 0092 FFF7FEFF 		bl	vListInsert
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6728              		.loc 1 5238 21
 6729 0096 0C4B     		ldr	r3, .L423+24
 6730 0098 1B68     		ldr	r3, [r3]
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccv2gsms.s 			page 216


 6731              		.loc 1 5238 7
 6732 009a BA68     		ldr	r2, [r7, #8]
 6733 009c 9A42     		cmp	r2, r3
 6734 009e 02D2     		bcs	.L422
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6735              		.loc 1 5240 27
 6736 00a0 094A     		ldr	r2, .L423+24
 6737 00a2 BB68     		ldr	r3, [r7, #8]
 6738 00a4 1360     		str	r3, [r2]
 6739              	.L422:
 6740              		.loc 1 5286 1
 6741 00a6 00BF     		nop
 6742 00a8 1037     		adds	r7, r7, #16
 6743              	.LCFI256:
 6744              		.cfi_def_cfa_offset 8
 6745 00aa BD46     		mov	sp, r7
 6746              	.LCFI257:
 6747              		.cfi_def_cfa_register 13
 6748              		@ sp needed
 6749 00ac 80BD     		pop	{r7, pc}
 6750              	.L424:
 6751 00ae 00BF     		.align	2
 6752              	.L423:
 6753 00b0 00000000 		.word	xTickCount
 6754 00b4 00000000 		.word	pxCurrentTCB
 6755 00b8 00000000 		.word	uxTopReadyPriority
 6756 00bc 00000000 		.word	xSuspendedTaskList
 6757 00c0 00000000 		.word	pxOverflowDelayedTaskList
 6758 00c4 00000000 		.word	pxDelayedTaskList
 6759 00c8 00000000 		.word	xNextTaskUnblockTime
 6760              		.cfi_endproc
 6761              	.LFE55:
 6763              		.text
 6764              	.Letext0:
 6765              		.file 3 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/lib/gcc/arm-none-eabi/10.2.1/include/stddef
 6766              		.file 4 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_type
 6767              		.file 5 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 6768              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 6769              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6770              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/ccv2gsms.s 			page 217


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccv2gsms.s:22     .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccv2gsms.s:19     .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccv2gsms.s:25     .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccv2gsms.s:28     .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccv2gsms.s:31     .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccv2gsms.s:34     .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccv2gsms.s:37     .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccv2gsms.s:40     .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccv2gsms.s:43     .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccv2gsms.s:46     .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccv2gsms.s:49     .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccv2gsms.s:52     .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccv2gsms.s:55     .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccv2gsms.s:58     .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccv2gsms.s:61     .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccv2gsms.s:64     .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccv2gsms.s:67     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccv2gsms.s:70     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccv2gsms.s:73     .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccv2gsms.s:76     .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccv2gsms.s:79     .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccv2gsms.s:82     .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccv2gsms.s:85     .bss.xTickCount:0000000000000000 $d
     /tmp/ccv2gsms.s:88     .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccv2gsms.s:91     .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccv2gsms.s:94     .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccv2gsms.s:97     .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccv2gsms.s:100    .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccv2gsms.s:103    .bss.xPendedTicks:0000000000000000 $d
     /tmp/ccv2gsms.s:106    .bss.xPendedTicks:0000000000000000 xPendedTicks
     /tmp/ccv2gsms.s:109    .bss.xYieldPending:0000000000000000 $d
     /tmp/ccv2gsms.s:112    .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccv2gsms.s:115    .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccv2gsms.s:118    .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccv2gsms.s:121    .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccv2gsms.s:124    .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccv2gsms.s:127    .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccv2gsms.s:130    .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccv2gsms.s:133    .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/ccv2gsms.s:136    .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/ccv2gsms.s:139    .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccv2gsms.s:142    .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccv2gsms.s:145    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccv2gsms.s:153    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccv2gsms.s:264    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccv2gsms.s:474    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccv2gsms.s:258    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccv2gsms.s:468    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccv2gsms.s:4184   .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccv2gsms.s:615    .text.prvAddNewTaskToReadyList:00000000000000b8 $d
     /tmp/ccv2gsms.s:626    .text.vTaskDelete:0000000000000000 $t
     /tmp/ccv2gsms.s:633    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccv2gsms.s:4366   .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccv2gsms.s:4413   .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccv2gsms.s:820    .text.vTaskDelete:00000000000000f8 $d
ARM GAS  /tmp/ccv2gsms.s 			page 218


     /tmp/ccv2gsms.s:834    .text.vTaskDelay:0000000000000000 $t
     /tmp/ccv2gsms.s:841    .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccv2gsms.s:2225   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccv2gsms.s:6622   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccv2gsms.s:2272   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccv2gsms.s:934    .text.vTaskDelay:0000000000000060 $d
     /tmp/ccv2gsms.s:940    .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccv2gsms.s:947    .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccv2gsms.s:1002   .text.uxTaskPriorityGet:0000000000000030 $d
     /tmp/ccv2gsms.s:1007   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccv2gsms.s:1014   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccv2gsms.s:1105   .text.uxTaskPriorityGetFromISR:0000000000000054 $d
     /tmp/ccv2gsms.s:1110   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccv2gsms.s:1117   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccv2gsms.s:1358   .text.vTaskPrioritySet:0000000000000144 $d
     /tmp/ccv2gsms.s:1366   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccv2gsms.s:1373   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccv2gsms.s:3097   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccv2gsms.s:1573   .text.vTaskSuspend:0000000000000104 $d
     /tmp/ccv2gsms.s:1585   .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccv2gsms.s:1591   .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccv2gsms.s:1684   .text.prvTaskIsTaskSuspended:000000000000005c $d
     /tmp/ccv2gsms.s:1690   .text.vTaskResume:0000000000000000 $t
     /tmp/ccv2gsms.s:1697   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccv2gsms.s:1832   .text.vTaskResume:00000000000000ac $d
     /tmp/ccv2gsms.s:1840   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccv2gsms.s:1847   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccv2gsms.s:2016   .text.xTaskResumeFromISR:00000000000000d0 $d
     /tmp/ccv2gsms.s:2025   .rodata:0000000000000000 $d
     /tmp/ccv2gsms.s:2029   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccv2gsms.s:2036   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccv2gsms.s:2142   .text.vTaskStartScheduler:0000000000000078 $d
     /tmp/ccv2gsms.s:4127   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccv2gsms.s:2152   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccv2gsms.s:2159   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccv2gsms.s:2213   .text.vTaskEndScheduler:000000000000002c $d
     /tmp/ccv2gsms.s:2218   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccv2gsms.s:2260   .text.vTaskSuspendAll:0000000000000018 $d
     /tmp/ccv2gsms.s:2265   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccv2gsms.s:2833   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccv2gsms.s:2487   .text.xTaskResumeAll:0000000000000114 $d
     /tmp/ccv2gsms.s:2500   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccv2gsms.s:2507   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccv2gsms.s:2547   .text.xTaskGetTickCount:000000000000001c $d
     /tmp/ccv2gsms.s:2552   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccv2gsms.s:2559   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccv2gsms.s:2600   .text.xTaskGetTickCountFromISR:0000000000000020 $d
     /tmp/ccv2gsms.s:2605   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccv2gsms.s:2612   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccv2gsms.s:2643   .text.uxTaskGetNumberOfTasks:0000000000000014 $d
     /tmp/ccv2gsms.s:2648   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccv2gsms.s:2655   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccv2gsms.s:2733   .text.pcTaskGetName:0000000000000044 $d
     /tmp/ccv2gsms.s:2738   .text.xTaskCatchUpTicks:0000000000000000 $t
     /tmp/ccv2gsms.s:2745   .text.xTaskCatchUpTicks:0000000000000000 xTaskCatchUpTicks
     /tmp/ccv2gsms.s:2820   .text.xTaskCatchUpTicks:000000000000004c $d
     /tmp/ccv2gsms.s:2826   .text.xTaskIncrementTick:0000000000000000 $t
ARM GAS  /tmp/ccv2gsms.s 			page 219


     /tmp/ccv2gsms.s:3075   .text.xTaskIncrementTick:0000000000000144 $d
     /tmp/ccv2gsms.s:3090   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccv2gsms.s:3240   .text.vTaskSwitchContext:00000000000000a4 $d
     /tmp/ccv2gsms.s:3249   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccv2gsms.s:3256   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccv2gsms.s:3326   .text.vTaskPlaceOnEventList:0000000000000044 $d
     /tmp/ccv2gsms.s:3331   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccv2gsms.s:3338   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccv2gsms.s:3442   .text.vTaskPlaceOnUnorderedEventList:0000000000000070 $d
     /tmp/ccv2gsms.s:3448   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccv2gsms.s:3455   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccv2gsms.s:3591   .text.xTaskRemoveFromEventList:00000000000000ac $d
     /tmp/ccv2gsms.s:3601   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccv2gsms.s:3608   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/ccv2gsms.s:3748   .text.vTaskRemoveFromUnorderedEventList:00000000000000b0 $d
     /tmp/ccv2gsms.s:3757   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccv2gsms.s:3764   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccv2gsms.s:3835   .text.vTaskSetTimeOutState:0000000000000044 $d
     /tmp/ccv2gsms.s:3841   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/ccv2gsms.s:3848   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/ccv2gsms.s:3893   .text.vTaskInternalSetTimeOutState:0000000000000024 $d
     /tmp/ccv2gsms.s:3899   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccv2gsms.s:3906   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccv2gsms.s:4071   .text.xTaskCheckForTimeOut:00000000000000bc $d
     /tmp/ccv2gsms.s:4077   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccv2gsms.s:4084   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccv2gsms.s:4116   .text.vTaskMissedYield:0000000000000014 $d
     /tmp/ccv2gsms.s:4121   .text.prvIdleTask:0000000000000000 $t
     /tmp/ccv2gsms.s:4280   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccv2gsms.s:4172   .text.prvIdleTask:0000000000000028 $d
     /tmp/ccv2gsms.s:4178   .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccv2gsms.s:4262   .text.prvInitialiseTaskLists:0000000000000060 $d
     /tmp/ccv2gsms.s:4274   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccv2gsms.s:4353   .text.prvCheckTasksWaitingTermination:0000000000000050 $d
     /tmp/ccv2gsms.s:4360   .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccv2gsms.s:4407   .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccv2gsms.s:4475   .text.prvResetNextTaskUnblockTime:0000000000000038 $d
     /tmp/ccv2gsms.s:4481   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccv2gsms.s:4488   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccv2gsms.s:4528   .text.xTaskGetCurrentTaskHandle:000000000000001c $d
     /tmp/ccv2gsms.s:4533   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccv2gsms.s:4540   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccv2gsms.s:4602   .text.xTaskGetSchedulerState:0000000000000034 $d
     /tmp/ccv2gsms.s:4608   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/ccv2gsms.s:4615   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/ccv2gsms.s:4776   .text.xTaskPriorityInherit:00000000000000e0 $d
     /tmp/ccv2gsms.s:4783   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccv2gsms.s:4790   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccv2gsms.s:4982   .text.xTaskPriorityDisinherit:0000000000000100 $d
     /tmp/ccv2gsms.s:4989   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/ccv2gsms.s:4996   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccv2gsms.s:5202   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000110 $d
     /tmp/ccv2gsms.s:5209   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccv2gsms.s:5216   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccv2gsms.s:5266   .text.uxTaskResetEventItemValue:000000000000002c $d
     /tmp/ccv2gsms.s:5271   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccv2gsms.s:5278   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
ARM GAS  /tmp/ccv2gsms.s 			page 220


     /tmp/ccv2gsms.s:5323   .text.pvTaskIncrementMutexHeldCount:0000000000000024 $d
     /tmp/ccv2gsms.s:5328   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccv2gsms.s:5335   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccv2gsms.s:5449   .text.ulTaskNotifyTake:0000000000000088 $d
     /tmp/ccv2gsms.s:5455   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccv2gsms.s:5462   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccv2gsms.s:5597   .text.xTaskNotifyWait:00000000000000ac $d
     /tmp/ccv2gsms.s:5603   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccv2gsms.s:5610   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccv2gsms.s:5693   .text.xTaskGenericNotify:0000000000000064 $d
     /tmp/ccv2gsms.s:5698   .text.xTaskGenericNotify:0000000000000078 $t
     /tmp/ccv2gsms.s:5878   .text.xTaskGenericNotify:000000000000015c $d
     /tmp/ccv2gsms.s:5886   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccv2gsms.s:5893   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccv2gsms.s:5998   .text.xTaskGenericNotifyFromISR:0000000000000080 $d
     /tmp/ccv2gsms.s:6003   .text.xTaskGenericNotifyFromISR:0000000000000094 $t
     /tmp/ccv2gsms.s:6212   .text.xTaskGenericNotifyFromISR:000000000000019c $d
     /tmp/ccv2gsms.s:6222   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccv2gsms.s:6229   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccv2gsms.s:6443   .text.vTaskNotifyGiveFromISR:000000000000010c $d
     /tmp/ccv2gsms.s:6453   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccv2gsms.s:6460   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccv2gsms.s:6531   .text.xTaskNotifyStateClear:0000000000000048 $d
     /tmp/ccv2gsms.s:6536   .text.ulTaskNotifyValueClear:0000000000000000 $t
     /tmp/ccv2gsms.s:6543   .text.ulTaskNotifyValueClear:0000000000000000 ulTaskNotifyValueClear
     /tmp/ccv2gsms.s:6611   .text.ulTaskNotifyValueClear:0000000000000044 $d
     /tmp/ccv2gsms.s:6616   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccv2gsms.s:6753   .text.prvAddCurrentTaskToDelayedList:00000000000000b0 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
xPortStartScheduler
vPortEndScheduler
vListInsert
vListInitialise
