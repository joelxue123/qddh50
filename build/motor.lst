ARM GAS  /tmp/ccATuxCb.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"motor.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._ZSt3absf,"axG",%progbits,_ZSt3absf,comdat
  18              		.align	1
  19              		.weak	_ZSt3absf
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	_ZSt3absf:
  27              	.LFB376:
  28              		.file 1 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_a
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // -*- C++ -*- C library enhancements header.
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // Copyright (C) 2016-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** /** @file include/bits/std_abs.h
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****  *  Do not attempt to use it directly. @headername{cmath, cstdlib}
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****  */
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifndef _GLIBCXX_BITS_STD_ABS_H
ARM GAS  /tmp/ccATuxCb.s 			page 2


  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #define _GLIBCXX_BITS_STD_ABS_H
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #pragma GCC system_header
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #include <bits/c++config.h>
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #include_next <stdlib.h>
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifdef __CORRECT_ISO_CPP_MATH_H_PROTO
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** # include_next <math.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #endif
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #undef abs
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** extern "C++"
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** {
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** namespace std _GLIBCXX_VISIBILITY(default)
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** {
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   using ::abs;
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   inline long
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   abs(long __i) { return __builtin_labs(__i); }
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #endif
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifdef _GLIBCXX_USE_LONG_LONG
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   inline long long
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   abs(long long __x) { return __builtin_llabs (__x); }
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #endif
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // _GLIBCXX_RESOLVE_LIB_DEFECTS
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // 2192. Validity and return type of std::abs(0u) is unclear
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // 2294. <cstdlib> should declare abs(double)
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // 2735. std::abs(short), std::abs(signed char) and others should return int
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   inline _GLIBCXX_CONSTEXPR double
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   abs(double __x)
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   { return __builtin_fabs(__x); }
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   inline _GLIBCXX_CONSTEXPR float
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   abs(float __x)
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   { return __builtin_fabsf(__x); }
  29              		.loc 1 76 3
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 7, -4
  38 0002 83B0     		sub	sp, sp, #12
  39              	.LCFI1:
ARM GAS  /tmp/ccATuxCb.s 			page 3


  40              		.cfi_def_cfa_offset 16
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 87ED010A 		vstr.32	s0, [r7, #4]
  45              		.loc 1 76 31
  46 000a D7ED017A 		vldr.32	s15, [r7, #4]
  47 000e F0EEE77A 		vabs.f32	s15, s15
  48              		.loc 1 76 34
  49 0012 B0EE670A 		vmov.f32	s0, s15
  50 0016 0C37     		adds	r7, r7, #12
  51              	.LCFI3:
  52              		.cfi_def_cfa_offset 4
  53 0018 BD46     		mov	sp, r7
  54              	.LCFI4:
  55              		.cfi_def_cfa_register 13
  56              		@ sp needed
  57 001a 5DF8047B 		ldr	r7, [sp], #4
  58              	.LCFI5:
  59              		.cfi_restore 7
  60              		.cfi_def_cfa_offset 0
  61 001e 7047     		bx	lr
  62              		.cfi_endproc
  63              	.LFE376:
  65              		.section	.text._ZnwjPv,"axG",%progbits,_ZnwjPv,comdat
  66              		.align	1
  67              		.weak	_ZnwjPv
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu fpv4-sp-d16
  73              	_ZnwjPv:
  74              	.LFB450:
  75              		.file 2 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // The -*- C++ -*- dynamic memory management header.
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // Copyright (C) 1994-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // This file is part of GCC.
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** //
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // GCC is free software; you can redistribute it and/or modify
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // it under the terms of the GNU General Public License as published by
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // any later version.
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // 
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // GCC is distributed in the hope that it will be useful,
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // GNU General Public License for more details.
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // 
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // 3.1, as published by the Free Software Foundation.
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // You should have received a copy of the GNU General Public License and
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
ARM GAS  /tmp/ccATuxCb.s 			page 4


  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // <http://www.gnu.org/licenses/>.
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** /** @file new
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  This is a Standard C++ Library header.
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  handling memory allocation errors; see
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/dynamic_memory.html
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  for more.
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  */
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #ifndef _NEW
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #define _NEW
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #pragma GCC system_header
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #include <bits/c++config.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #include <exception>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #pragma GCC visibility push(default)
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** extern "C++" {
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** namespace std 
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** {
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /**
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  @brief  Exception possibly thrown by @c new.
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  @ingroup exceptions
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  errors from the throwing forms of @c new.  */
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   class bad_alloc : public exception 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   {
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   public:
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_alloc() throw() { }
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_alloc(const bad_alloc&) = default;
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_alloc& operator=(const bad_alloc&) = default;
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // This declaration is not useless:
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual ~bad_alloc() throw();
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // See comment in eh_exception.cc.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual const char* what() const throw();
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   };
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   class bad_array_new_length : public bad_alloc
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   {
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   public:
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_array_new_length() throw() { }
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // This declaration is not useless:
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
ARM GAS  /tmp/ccATuxCb.s 			page 5


  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual ~bad_array_new_length() throw();
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // See comment in eh_exception.cc.
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual const char* what() const throw();
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   };
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_aligned_new
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   enum class align_val_t: size_t {};
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   struct nothrow_t
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   {
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     explicit nothrow_t() = default;
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   };
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   extern const nothrow_t nothrow;
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /** If you write your own error handler to be called by @c new, it must
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  be of this type.  */
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   typedef void (*new_handler)();
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /// Takes a replacement handler as the argument, returns the
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /// previous handler.
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   new_handler set_new_handler(new_handler) throw();
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /// Return the current new handler.
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   new_handler get_new_handler() noexcept;
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** } // namespace std
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** //@{
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** /** These are replaceable signatures:
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - normal array new and delete (same)
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *    @c NULL on error)
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - @c nothrow array new and delete (same)
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  Placement new and delete signatures (take a memory address argument,
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  does nothing) may not be replaced by a user's program.
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** */
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_sized_deallocation
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
ARM GAS  /tmp/ccATuxCb.s 			page 6


 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__, __malloc__));
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__, __malloc__));
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_aligned_new
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::align_val_t)
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::align_val_t, const std::nothrow_t&)
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::align_val_t)
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_sized_deallocation
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::size_t, std::align_val_t)
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::size_t, std::align_val_t)
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif // __cpp_sized_deallocation
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif // __cpp_aligned_new
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // Default placement versions of operator new.
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** { return __p; }
  76              		.loc 2 175 1
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 8
  79              		@ frame_needed = 1, uses_anonymous_args = 0
  80              		@ link register save eliminated.
  81 0000 80B4     		push	{r7}
  82              	.LCFI6:
  83              		.cfi_def_cfa_offset 4
  84              		.cfi_offset 7, -4
  85 0002 83B0     		sub	sp, sp, #12
  86              	.LCFI7:
  87              		.cfi_def_cfa_offset 16
  88 0004 00AF     		add	r7, sp, #0
  89              	.LCFI8:
  90              		.cfi_def_cfa_register 7
  91 0006 7860     		str	r0, [r7, #4]
  92 0008 3960     		str	r1, [r7]
  93              		.loc 2 175 10
  94 000a 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccATuxCb.s 			page 7


  95              		.loc 2 175 15
  96 000c 1846     		mov	r0, r3
  97 000e 0C37     		adds	r7, r7, #12
  98              	.LCFI9:
  99              		.cfi_def_cfa_offset 4
 100 0010 BD46     		mov	sp, r7
 101              	.LCFI10:
 102              		.cfi_def_cfa_register 13
 103              		@ sp needed
 104 0012 5DF8047B 		ldr	r7, [sp], #4
 105              	.LCFI11:
 106              		.cfi_restore 7
 107              		.cfi_def_cfa_offset 0
 108 0016 7047     		bx	lr
 109              		.cfi_endproc
 110              	.LFE450:
 112              		.section	.rodata._ZN6__pstl9execution2v1L3seqE,"a"
 113              		.align	2
 116              	_ZN6__pstl9execution2v1L3seqE:
 117 0000 00       		.space	1
 118              		.section	.rodata._ZN6__pstl9execution2v1L3parE,"a"
 119              		.align	2
 122              	_ZN6__pstl9execution2v1L3parE:
 123 0000 00       		.space	1
 124              		.section	.rodata._ZN6__pstl9execution2v1L9par_unseqE,"a"
 125              		.align	2
 128              	_ZN6__pstl9execution2v1L9par_unseqE:
 129 0000 00       		.space	1
 130              		.section	.rodata._ZN6__pstl9execution2v1L5unseqE,"a"
 131              		.align	2
 134              	_ZN6__pstl9execution2v1L5unseqE:
 135 0000 00       		.space	1
 136              		.section	.text._ZSt26__throw_bad_variant_accessPKc,"axG",%progbits,_ZSt26__throw_bad_variant_acces
 137              		.align	1
 138              		.weak	_ZSt26__throw_bad_variant_accessPKc
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 142              		.fpu fpv4-sp-d16
 144              	_ZSt26__throw_bad_variant_accessPKc:
 145              	.LFB2484:
 146              		.file 3 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // <variant> -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // Copyright (C) 2016-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccATuxCb.s 			page 8


  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** /** @file variant
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****  *  This is the <variant> C++ Library header.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****  */
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #ifndef _GLIBCXX_VARIANT
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define _GLIBCXX_VARIANT 1
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #pragma GCC system_header
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #if __cplusplus >= 201703L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <type_traits>
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <utility>
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/enable_special_members.h>
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/functexcept.h>
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/move.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/functional_hash.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/invoke.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <ext/aligned_buffer.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/parse_numbers.h>
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/stl_iterator_base_types.h>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/stl_iterator_base_funcs.h>
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/stl_construct.h>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #if __cplusplus > 201703L
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** # include <compare>
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #endif
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __detail
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __variant
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Nth_type;
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _First, typename... _Rest>
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Nth_type<_Np, _First, _Rest...>
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _Nth_type<_Np-1, _Rest...> { };
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _First, typename... _Rest>
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Nth_type<0, _First, _Rest...>
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = _First; };
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __variant
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __detail
ARM GAS  /tmp/ccATuxCb.s 			page 9


  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define __cpp_lib_variant 201606L
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types> class tuple;
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types> class variant;
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename> struct hash;
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size;
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<const _Variant> : variant_size<_Variant> {};
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<volatile _Variant> : variant_size<_Variant> {};
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<const volatile _Variant> : variant_size<_Variant> {};
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<variant<_Types...>>
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : std::integral_constant<size_t, sizeof...(_Types)> {};
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr size_t variant_size_v = variant_size<_Variant>::value;
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative;
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _First, typename... _Rest>
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, variant<_First, _Rest...>>
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : variant_alternative<_Np-1, variant<_Rest...>> {};
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _First, typename... _Rest>
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<0, variant<_First, _Rest...>>
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = _First; };
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using variant_alternative_t =
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       typename variant_alternative<_Np, _Variant>::type;
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, const _Variant>
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = add_const_t<variant_alternative_t<_Np, _Variant>>; };
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, volatile _Variant>
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = add_volatile_t<variant_alternative_t<_Np, _Variant>>; };
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, const volatile _Variant>
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = add_cv_t<variant_alternative_t<_Np, _Variant>>; };
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   inline constexpr size_t variant_npos = -1;
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&
ARM GAS  /tmp/ccATuxCb.s 			page 10


 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(variant<_Types...>&);
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&&
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(variant<_Types...>&&);
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>> const&
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(const variant<_Types...>&);
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>> const&&
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(const variant<_Types...>&&);
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants>
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __do_visit(_Visitor&& __visitor, _Variants&&... __variants);
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename... _Types, typename _Tp>
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     decltype(auto)
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __variant_cast(_Tp&& __rhs)
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if constexpr (is_lvalue_reference_v<_Tp>)
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (is_const_v<remove_reference_t<_Tp>>)
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return static_cast<const variant<_Types...>&>(__rhs);
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return static_cast<variant<_Types...>&>(__rhs);
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       else
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         return static_cast<variant<_Types...>&&>(__rhs);
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __detail
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __variant
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns the first appearence of _Tp in _Types.
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns sizeof...(_Types) if _Tp is not in _Types.
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __index_of : std::integral_constant<size_t, 0> {};
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr size_t __index_of_v = __index_of<_Tp, _Types...>::value;
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _First, typename... _Rest>
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __index_of<_Tp, _First, _Rest...> :
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       std::integral_constant<size_t, is_same_v<_Tp, _First>
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	? 0 : __index_of_v<_Tp, _Rest...> + 1> {};
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // used for raw visitation
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   struct __variant_cookie {};
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // used for raw visitation with indices passed in
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   struct __variant_idx_cookie { using type = __variant_idx_cookie; };
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Used to enable deduction (and same-type checking) for std::visit:
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename> struct __deduce_visit_result { };
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccATuxCb.s 			page 11


 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Visit variants that might be valueless.
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Visitor, typename... _Variants>
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr void
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __raw_visit(_Visitor&& __visitor, _Variants&&... __variants)
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       std::__do_visit<__variant_cookie>(std::forward<_Visitor>(__visitor),
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				        std::forward<_Variants>(__variants)...);
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Visit variants that might be valueless, passing indices to the visitor.
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Visitor, typename... _Variants>
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr void
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __raw_idx_visit(_Visitor&& __visitor, _Variants&&... __variants)
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       std::__do_visit<__variant_idx_cookie>(std::forward<_Visitor>(__visitor),
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  std::forward<_Variants>(__variants)...);
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // _Uninitialized<T> is guaranteed to be a trivially destructible type,
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // even if T is not.
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Type, bool = std::is_trivially_destructible_v<_Type>>
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Uninitialized;
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Type>
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Uninitialized<_Type, true>
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr const _Type& _M_get() const & noexcept
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr _Type& _M_get() & noexcept
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr const _Type&& _M_get() const && noexcept
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(_M_storage); }
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr _Type&& _M_get() && noexcept
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(_M_storage); }
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Type _M_storage;
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Type>
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Uninitialized<_Type, false>
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  ::new ((void*)std::addressof(_M_storage))
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    _Type(std::forward<_Args>(__args)...);
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
ARM GAS  /tmp/ccATuxCb.s 			page 12


 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       const _Type& _M_get() const & noexcept
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return *_M_storage._M_ptr(); }
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Type& _M_get() & noexcept
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return *_M_storage._M_ptr(); }
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       const _Type&& _M_get() const && noexcept
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(*_M_storage._M_ptr()); }
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Type&& _M_get() && noexcept
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(*_M_storage._M_ptr()); }
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __gnu_cxx::__aligned_membuf<_Type> _M_storage;
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Union>
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __get(in_place_index_t<0>, _Union&& __u) noexcept
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Union>
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __variant::__get(in_place_index<_Np-1>,
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns the typed storage for __v.
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __get(_Variant&& __v) noexcept
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __variant::__get(std::in_place_index<_Np>,
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Variant>(__v)._M_u);
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Traits
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_default_ctor =
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  is_default_constructible_v<typename _Nth_type<0, _Types...>::type>;
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_copy_ctor =
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_copy_constructible_v<_Types> && ...);
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_move_ctor =
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_move_constructible_v<_Types> && ...);
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_copy_assign =
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_copy_ctor
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_copy_assignable_v<_Types> && ...);
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_move_assign =
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_move_ctor
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_move_assignable_v<_Types> && ...);
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_dtor =
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_trivially_destructible_v<_Types> && ...);
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_copy_ctor =
ARM GAS  /tmp/ccATuxCb.s 			page 13


 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_trivially_copy_constructible_v<_Types> && ...);
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_move_ctor =
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_trivially_move_constructible_v<_Types> && ...);
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_copy_assign =
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_trivial_dtor && _S_trivial_copy_ctor
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_trivially_copy_assignable_v<_Types> && ...);
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_move_assign =
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_trivial_dtor && _S_trivial_move_ctor
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_trivially_move_assignable_v<_Types> && ...);
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // The following nothrow traits are for non-trivial SMFs. Trivial SMFs
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // are always nothrow.
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_default_ctor =
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  is_nothrow_default_constructible_v<
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      typename _Nth_type<0, _Types...>::type>;
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_copy_ctor = false;
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_move_ctor =
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_nothrow_move_constructible_v<_Types> && ...);
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_copy_assign = false;
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_move_assign =
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_nothrow_move_ctor
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_nothrow_move_assignable_v<_Types> && ...);
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Defines members and ctors.
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     union _Variadic_union { };
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _First, typename... _Rest>
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     union _Variadic_union<_First, _Rest...>
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr _Variadic_union() : _M_rest() { }
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Uninitialized<_First> _M_first;
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variadic_union<_Rest...> _M_rest;
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // _Never_valueless_alt is true for variant alternatives that can
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // always be placed in a variant without it becoming valueless.
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // For suitably-small, trivially copyable types we can create temporaries
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // on the stack and then memcpy them into place.
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp>
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Never_valueless_alt
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : __and_<bool_constant<sizeof(_Tp) <= 256>, is_trivially_copyable<_Tp>>
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { };
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccATuxCb.s 			page 14


 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Specialize _Never_valueless_alt for other types which have a
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // non-throwing and cheap move construction and move assignment operator,
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // so that emplacing the type will provide the strong exception-safety
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // guarantee, by creating and moving a temporary.
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Whether _Never_valueless_alt<T> is true or not affects the ABI of a
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // variant using that alternative, so we can't change the value later!
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // True if every alternative in _Types... can be emplaced in a variant
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // without it becoming valueless. If this is true, variant<_Types...>
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // can never be valueless, which enables some minor optimizations.
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename... _Types>
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr bool __never_valueless()
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return _Traits<_Types...>::_S_move_assign
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	&& (_Never_valueless_alt<_Types>::value && ...);
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Defines index and the dtor, possibly trivial.
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool __trivially_destructible, typename... _Types>
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_storage;
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename... _Types>
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using __select_index =
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       typename __select_int::_Select_int_base<sizeof...(_Types),
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					      unsigned char,
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					      unsigned short>::type::value_type;
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_storage<false, _Types...>
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_storage()
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       : _M_index(static_cast<__index_type>(variant_npos))
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { }
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_index{_Np}
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void _M_reset()
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if (!_M_valid()) [[unlikely]]
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return;
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::__do_visit<void>([](auto&& __this_mem) mutable
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::_Destroy(std::__addressof(__this_mem));
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __variant_cast<_Types...>(*this));
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_index = static_cast<__index_type>(variant_npos);
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ~_Variant_storage()
 414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { _M_reset(); }
ARM GAS  /tmp/ccATuxCb.s 			page 15


 415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void*
 417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_storage() const noexcept
 418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return const_cast<void*>(static_cast<const void*>(
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::addressof(_M_u)));
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr bool
 424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_valid() const noexcept
 425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (__variant::__never_valueless<_Types...>())
 427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return true;
 428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return this->_M_index != __index_type(variant_npos);
 429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variadic_union<_Types...> _M_u;
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using __index_type = __select_index<_Types...>;
 433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __index_type _M_index;
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_storage<true, _Types...>
 438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr
 440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_storage()
 441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       : _M_index(static_cast<__index_type>(variant_npos))
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { }
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_index{_Np}
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void _M_reset() noexcept
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { _M_index = static_cast<__index_type>(variant_npos); }
 453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void*
 455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_storage() const noexcept
 456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return const_cast<void*>(static_cast<const void*>(
 458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::addressof(_M_u)));
 459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr bool
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_valid() const noexcept
 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (__variant::__never_valueless<_Types...>())
 465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return true;
 466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return this->_M_index != static_cast<__index_type>(variant_npos);
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variadic_union<_Types...> _M_u;
 470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using __index_type = __select_index<_Types...>;
 471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __index_type _M_index;
ARM GAS  /tmp/ccATuxCb.s 			page 16


 472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Variant_storage_alias =
 476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_storage<_Traits<_Types...>::_S_trivial_dtor, _Types...>;
 477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Up>
 479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void* __storage = std::addressof(__lhs._M_u);
 482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Type = remove_reference_t<decltype(__rhs_mem)>;
 483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if constexpr (!is_same_v<_Type, __variant_cookie>)
 484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         ::new (__storage)
 485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types, typename _Tp, typename _Up>
 489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void __variant_construct(_Tp&& __lhs, _Up&& __rhs)
 490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __lhs._M_index = __rhs._M_index;
 492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
 493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(std::forward<_Tp>(__lhs),
 495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      std::forward<decltype(__rhs_mem)>(__rhs_mem));
 496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}, __variant_cast<_Types...>(std::forward<_Up>(__rhs)));
 497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The following are (Copy|Move) (ctor|assign) layers for forwarding
 500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // triviality and handling non-trivial SMF behaviors.
 501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
 504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Variant_storage_alias<_Types...>;
 506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base(const _Copy_ctor_base& __rhs)
 509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_copy_ctor)
 510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant_construct<_Types...>(*this, __rhs);
 512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base(_Copy_ctor_base&&) = default;
 515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base& operator=(const _Copy_ctor_base&) = default;
 516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base& operator=(_Copy_ctor_base&&) = default;
 517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_ctor_base<true, _Types...> : _Variant_storage_alias<_Types...>
 521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Variant_storage_alias<_Types...>;
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Copy_ctor_alias =
 528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Copy_ctor_base<_Traits<_Types...>::_S_trivial_copy_ctor, _Types...>;
ARM GAS  /tmp/ccATuxCb.s 			page 17


 529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
 532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_ctor_alias<_Types...>;
 534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base(_Move_ctor_base&& __rhs)
 537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_move_ctor)
 538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant_construct<_Types...>(*this, std::move(__rhs));
 540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
 544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, std::forward<_Up>(__rhs));
 547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, __rhs);
 555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base(const _Move_ctor_base&) = default;
 559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base& operator=(const _Move_ctor_base&) = default;
 560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base& operator=(_Move_ctor_base&&) = default;
 561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_ctor_base<true, _Types...> : _Copy_ctor_alias<_Types...>
 565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_ctor_alias<_Types...>;
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
 571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, std::forward<_Up>(__rhs));
 574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, __rhs);
 582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccATuxCb.s 			page 18


 586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Move_ctor_alias =
 588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Move_ctor_base<_Traits<_Types...>::_S_trivial_move_ctor, _Types...>;
 589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_assign_base : _Move_ctor_alias<_Types...>
 592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Move_ctor_alias<_Types...>;
 594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base&
 597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       operator=(const _Copy_assign_base& __rhs)
 598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_copy_assign)
 599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant::__raw_idx_visit(
 601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
 604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
 605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (this->_M_index == __rhs_index)
 606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		else
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
 609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    using __rhs_type = __remove_cvref_t<decltype(__rhs_mem)>;
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    if constexpr (is_nothrow_copy_constructible_v<__rhs_type>
 611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			|| !is_nothrow_move_constructible_v<__rhs_type>)
 612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // The standard says this->emplace<__rhs_type>(__rhs_mem)
 613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // should be used here, but _M_destructive_copy is
 614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // equivalent in this case. Either copy construction
 615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // doesn't throw, so _M_destructive_copy gives strong
 616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // exception safety guarantee, or both copy construction
 617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // and move construction can throw, so emplace only gives
 618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // basic exception safety anyway.
 619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      this->_M_destructive_copy(__rhs_index, __rhs_mem);
 620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    else
 621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      __variant_cast<_Types...>(*this)
 622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			= variant<_Types...>(std::in_place_index<__rhs_index>,
 623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					     __rhs_mem);
 624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
 625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
 626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    else
 627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
 628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __variant_cast<_Types...>(__rhs));
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return *this;
 630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base(const _Copy_assign_base&) = default;
 633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base(_Copy_assign_base&&) = default;
 634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base& operator=(_Copy_assign_base&&) = default;
 635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_assign_base<true, _Types...> : _Move_ctor_alias<_Types...>
 639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Move_ctor_alias<_Types...>;
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
ARM GAS  /tmp/ccATuxCb.s 			page 19


 643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Copy_assign_alias =
 646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base<_Traits<_Types...>::_S_trivial_copy_assign, _Types...>;
 647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_assign_base : _Copy_assign_alias<_Types...>
 650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_assign_alias<_Types...>;
 652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base&
 655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       operator=(_Move_assign_base&& __rhs)
 656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_move_assign)
 657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant::__raw_idx_visit(
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
 661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
 662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
 663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (this->_M_index == __rhs_index)
 664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		else
 666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant_cast<_Types...>(*this)
 667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
 669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    else
 670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
 671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __variant_cast<_Types...>(__rhs));
 672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return *this;
 673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base(const _Move_assign_base&) = default;
 676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base(_Move_assign_base&&) = default;
 677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base& operator=(const _Move_assign_base&) = default;
 678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_assign_base<true, _Types...> : _Copy_assign_alias<_Types...>
 682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_assign_alias<_Types...>;
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Move_assign_alias =
 689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base<_Traits<_Types...>::_S_trivial_move_assign, _Types...>;
 690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_base : _Move_assign_alias<_Types...>
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Move_assign_alias<_Types...>;
 695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base()
 698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       : _Variant_base(in_place_index<0>) { }
ARM GAS  /tmp/ccATuxCb.s 			page 20


 700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 706:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 707:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base(const _Variant_base&) = default;
 708:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base(_Variant_base&&) = default;
 709:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base& operator=(const _Variant_base&) = default;
 710:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base& operator=(_Variant_base&&) = default;
 711:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 712:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 713:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // For how many times does _Tp appear in _Tuple?
 714:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Tuple>
 715:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __tuple_count;
 716:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 717:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Tuple>
 718:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr size_t __tuple_count_v =
 719:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __tuple_count<_Tp, _Tuple>::value;
 720:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 721:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 722:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __tuple_count<_Tp, tuple<_Types...>>
 723:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : integral_constant<size_t, 0> { };
 724:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 725:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _First, typename... _Rest>
 726:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __tuple_count<_Tp, tuple<_First, _Rest...>>
 727:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : integral_constant<
 728:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	size_t,
 729:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__tuple_count_v<_Tp, tuple<_Rest...>> + is_same_v<_Tp, _First>> { };
 730:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 731:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // TODO: Reuse this in <tuple> ?
 732:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 733:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr bool __exactly_once =
 734:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __tuple_count_v<_Tp, tuple<_Types...>> == 1;
 735:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 736:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Helper used to check for valid conversions that don't involve narrowing.
 737:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Ti> struct _Arr { _Ti _M_x[1]; };
 738:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 739:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Build an imaginary function FUN(Ti) for each alternative type Ti
 740:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti,
 741:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   bool _Ti_is_cv_bool = is_same_v<remove_cv_t<_Ti>, bool>,
 742:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename = void>
 743:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUN
 744:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 745:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // This function means 'using _Build_FUN<I, T, Ti>::_S_fun;' is valid,
 746:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // but only static functions will be considered in the call below.
 747:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void _S_fun();
 748:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 749:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 750:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // ... for which Ti x[] = {std::forward<T>(t)}; is well-formed,
 751:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti>
 752:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUN<_Ind, _Tp, _Ti, false,
 753:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      void_t<decltype(_Arr<_Ti>{{std::declval<_Tp>()}})>>
 754:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 755:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // This is the FUN function for type _Ti, with index _Ind
 756:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static integral_constant<size_t, _Ind> _S_fun(_Ti);
ARM GAS  /tmp/ccATuxCb.s 			page 21


 757:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 758:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 759:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // ... and if Ti is cv bool, remove_cvref_t<T> is bool.
 760:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti>
 761:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUN<_Ind, _Tp, _Ti, true,
 762:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      enable_if_t<is_same_v<__remove_cvref_t<_Tp>, bool>>>
 763:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 764:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // This is the FUN function for when _Ti is cv bool, with index _Ind
 765:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static integral_constant<size_t, _Ind> _S_fun(_Ti);
 766:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 767:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 768:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant,
 769:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename = make_index_sequence<variant_size_v<_Variant>>>
 770:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUNs;
 771:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 772:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Ti, size_t... _Ind>
 773:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUNs<_Tp, variant<_Ti...>, index_sequence<_Ind...>>
 774:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _Build_FUN<_Ind, _Tp, _Ti>...
 775:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Build_FUN<_Ind, _Tp, _Ti>::_S_fun...;
 777:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The index j of the overload FUN(Tj) selected by overload resolution
 780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // for FUN(std::forward<_Tp>(t))
 781:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant>
 782:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _FUN_type
 783:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       = decltype(_Build_FUNs<_Tp, _Variant>::_S_fun(std::declval<_Tp>()));
 784:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 785:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The index selected for FUN(std::forward<T>(t)), or variant_npos if none.
 786:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant, typename = void>
 787:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __accepted_index
 788:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : integral_constant<size_t, variant_npos>
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { };
 790:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant>
 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __accepted_index<_Tp, _Variant, void_t<_FUN_type<_Tp, _Variant>>>
 793:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _FUN_type<_Tp, _Variant>
 794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { };
 795:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns the raw storage for __v.
 797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
 798:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void* __get_storage(_Variant&& __v) noexcept
 799:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return __v._M_storage(); }
 800:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 801:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename _Maybe_variant_cookie, typename _Variant>
 802:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Extra_visit_slot_needed
 803:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 804:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename> struct _Variant_never_valueless;
 805:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 806:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Types>
 807:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct _Variant_never_valueless<variant<_Types...>>
 808:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: bool_constant<__variant::__never_valueless<_Types...>()> {};
 809:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 810:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool value =
 811:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	(is_same_v<_Maybe_variant_cookie, __variant_cookie>
 812:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	 || is_same_v<_Maybe_variant_cookie, __variant_idx_cookie>)
 813:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	&& !_Variant_never_valueless<__remove_cvref_t<_Variant>>::value;
ARM GAS  /tmp/ccATuxCb.s 			page 22


 814:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 815:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 816:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Used for storing a multi-dimensional vtable.
 817:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, size_t... _Dimensions>
 818:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Multi_array;
 819:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 820:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Partial specialization with rank zero, stores a single _Tp element.
 821:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp>
 822:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Multi_array<_Tp>
 823:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 824:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename>
 825:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result
 826:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 827:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = _Tp; };
 828:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 829:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Args>
 830:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<const void(*)(_Args...)>
 831:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 832:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = void(*)(_Args...); };
 833:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 834:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Args>
 835:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<__variant_cookie(*)(_Args...)>
 836:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 837:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = void(*)(_Args...); };
 838:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 839:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Args>
 840:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<__variant_idx_cookie(*)(_Args...)>
 841:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 842:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = void(*)(_Args...); };
 843:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 844:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename _Res, typename... _Args>
 845:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<__deduce_visit_result<_Res>(*)(_Args...)>
 846:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: true_type
 847:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = _Res(*)(_Args...); };
 848:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 849:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using __result_is_deduced = __untag_result<_Tp>;
 850:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 851:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr const typename __untag_result<_Tp>::element_type&
 852:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_access() const
 853:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_data; }
 854:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 855:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       typename __untag_result<_Tp>::element_type _M_data;
 856:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 857:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 858:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Partial specialization with rank >= 1.
 859:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Ret,
 860:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename _Visitor,
 861:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename... _Variants,
 862:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   size_t __first, size_t... __rest>
 863:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Multi_array<_Ret(*)(_Visitor, _Variants...), __first, __rest...>
 864:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 865:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr size_t __index =
 866:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	sizeof...(_Variants) - sizeof...(__rest) - 1;
 867:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 868:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Variant = typename _Nth_type<__index, _Variants...>::type;
 869:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 870:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr int __do_cookie =
ARM GAS  /tmp/ccATuxCb.s 			page 23


 871:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Extra_visit_slot_needed<_Ret, _Variant>::value ? 1 : 0;
 872:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 873:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Tp = _Ret(*)(_Visitor, _Variants...);
 874:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 875:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 876:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr decltype(auto)
 877:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_access(size_t __first_index, _Args... __rest_indices) const
 878:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 879:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return _M_arr[__first_index + __do_cookie]
 880:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    ._M_access(__rest_indices...);
 881:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 882:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 883:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Multi_array<_Tp, __rest...> _M_arr[__first + __do_cookie];
 884:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 885:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 886:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Creates a multi-dimensional vtable recursively.
 887:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //
 888:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // For example,
 889:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // visit([](auto, auto){},
 890:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //       variant<int, char>(),  // typedef'ed as V1
 891:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //       variant<float, double, long double>())  // typedef'ed as V2
 892:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // will trigger instantiations of:
 893:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 2, 3>,
 894:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                   tuple<V1&&, V2&&>, std::index_sequence<>>
 895:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //   __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 3>,
 896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                     tuple<V1&&, V2&&>, std::index_sequence<0>>
 897:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 898:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 0>>
 899:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 900:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 1>>
 901:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 902:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 2>>
 903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //   __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 3>,
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                     tuple<V1&&, V2&&>, std::index_sequence<1>>
 905:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 906:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 0>>
 907:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 1>>
 909:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 910:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 2>>
 911:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The returned multi-dimensional vtable can be fast accessed by the visitor
 912:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // using index calculation.
 913:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Array_type, typename _Index_seq>
 914:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable_impl;
 915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 916:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Defines the _S_apply() member that returns a _Multi_array populated
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // with function pointers that perform the visitation expressions e(m)
 918:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // for each valid pack of indexes into the variant types _Variants.
 919:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //
 920:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // This partial specialization builds up the index sequences by recursively
 921:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // calling _S_apply() on the next specialization of __gen_vtable_impl.
 922:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The base case of the recursion defines the actual function pointers.
 923:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, size_t... __dimensions,
 924:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename... _Variants, size_t... __indices>
 925:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable_impl<
 926:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Multi_array<_Result_type (*)(_Visitor, _Variants...), __dimensions...>,
 927:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::index_sequence<__indices...>>
ARM GAS  /tmp/ccATuxCb.s 			page 24


 928:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 929:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Next =
 930:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  remove_reference_t<typename _Nth_type<sizeof...(__indices),
 931:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			     _Variants...>::type>;
 932:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Array_type =
 933:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...),
 934:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		       __dimensions...>;
 935:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 936:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr _Array_type
 937:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _S_apply()
 938:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 939:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Array_type __vtable{};
 940:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_S_apply_all_alts(
 941:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __vtable, make_index_sequence<variant_size_v<_Next>>());
 942:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return __vtable;
 943:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 944:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 945:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t... __var_indices>
 946:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr void
 947:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_S_apply_all_alts(_Array_type& __vtable,
 948:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			  std::index_sequence<__var_indices...>)
 949:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 950:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (_Extra_visit_slot_needed<_Result_type, _Next>::value)
 951:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    (_S_apply_single_alt<true, __var_indices>(
 952:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __vtable._M_arr[__var_indices + 1],
 953:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      &(__vtable._M_arr[0])), ...);
 954:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 955:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    (_S_apply_single_alt<false, __var_indices>(
 956:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __vtable._M_arr[__var_indices]), ...);
 957:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 958:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 959:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<bool __do_cookie, size_t __index, typename _Tp>
 960:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr void
 961:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_S_apply_single_alt(_Tp& __element, _Tp* __cookie_element = nullptr)
 962:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 963:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__do_cookie)
 964:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
 965:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element = __gen_vtable_impl<
 966:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Tp,
 967:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::index_sequence<__indices..., __index>>::_S_apply();
 968:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      *__cookie_element = __gen_vtable_impl<
 969:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Tp,
 970:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::index_sequence<__indices..., variant_npos>>::_S_apply();
 971:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
 972:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 973:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
 974:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element = __gen_vtable_impl<
 975:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		remove_reference_t<decltype(__element)>,
 976:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::index_sequence<__indices..., __index>>::_S_apply();
 977:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
 978:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 979:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 980:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 981:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // This partial specialization is the base case for the recursion.
 982:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // It populates a _Multi_array element with the address of a function
 983:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // that invokes the visitor with the alternatives specified by __indices.
 984:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants,
ARM GAS  /tmp/ccATuxCb.s 			page 25


 985:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   size_t... __indices>
 986:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable_impl<
 987:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Multi_array<_Result_type (*)(_Visitor, _Variants...)>,
 988:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		   std::index_sequence<__indices...>>
 989:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 990:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Array_type =
 991:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...)>;
 992:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 993:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t __index, typename _Variant>
 994:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr decltype(auto)
 995:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__element_by_index_or_cookie(_Variant&& __var) noexcept
 996:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 997:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__index != variant_npos)
 998:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 999:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1000:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return __variant_cookie{};
1001:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1002:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1003:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr decltype(auto)
1004:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
1005:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
1006:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
1007:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // For raw visitation using indices, pass the indices to the visitor
1008:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // and discard the return value:
1009:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  std::__invoke(std::forward<_Visitor>(__visitor),
1010:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1011:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::forward<_Variants>(__vars))...,
1012:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      integral_constant<size_t, __indices>()...);
1013:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
1014:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // For raw visitation without indices, and discard the return value:
1015:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  std::__invoke(std::forward<_Visitor>(__visitor),
1016:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1017:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::forward<_Variants>(__vars))...);
1018:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (_Array_type::__result_is_deduced::value)
1019:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // For the usual std::visit case deduce the return value:
1020:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::__invoke(std::forward<_Visitor>(__visitor),
1021:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1022:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::forward<_Variants>(__vars))...);
1023:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else // for std::visit<R> use INVOKE<R>
1024:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::__invoke_r<_Result_type>(
1025:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      std::forward<_Visitor>(__visitor),
1026:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
1027:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
1028:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1029:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr auto
1030:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _S_apply()
1031:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _Array_type{&__visit_invoke}; }
1032:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
1033:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1034:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants>
1035:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable
1036:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1037:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Array_type =
1038:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...),
1039:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		       variant_size_v<remove_reference_t<_Variants>>...>;
1040:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1041:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr _Array_type _S_vtable
ARM GAS  /tmp/ccATuxCb.s 			page 26


1042:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	= __gen_vtable_impl<_Array_type, std::index_sequence<>>::_S_apply();
1043:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
1044:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1045:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Tp>
1046:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Base_dedup : public _Tp { };
1047:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1048:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant, typename __indices>
1049:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_hash_base;
1050:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1051:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types, size_t... __indices>
1052:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_hash_base<variant<_Types...>,
1053:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::index_sequence<__indices...>>
1054:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _Base_dedup<__indices, __poison_hash<remove_const_t<_Types>>>... { };
1055:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1056:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __variant
1057:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __detail
1058:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1059:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant, typename... _Args>
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
1061:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __v._M_index = _Np;
1063:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ::new ((void*)std::addressof(__storage))
1065:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
1066:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (std::forward<_Args>(__args)...);
1067:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1068:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1069:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1070:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr bool
1071:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     holds_alternative(const variant<_Types...>& __v) noexcept
1072:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1073:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1074:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1075:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
1076:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1077:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1078:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1079:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr _Tp& get(variant<_Types...>& __v)
1080:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1081:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1082:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1083:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1084:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
1085:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1086:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1087:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1088:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr _Tp&& get(variant<_Types...>&& __v)
1089:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1090:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1091:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1092:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1093:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1094:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::move(__v));
1095:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1096:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1097:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1098:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr const _Tp& get(const variant<_Types...>& __v)
ARM GAS  /tmp/ccATuxCb.s 			page 27


1099:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
1104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr const _Tp&& get(const variant<_Types...>&& __v)
1108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::move(__v));
1114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
1117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr add_pointer_t<variant_alternative_t<_Np, variant<_Types...>>>
1118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(variant<_Types...>* __ptr) noexcept
1119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
1121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(_Np < sizeof...(_Types),
1122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "The index must be in [0, number of alternatives)");
1123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
1124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if (__ptr && __ptr->index() == _Np)
1125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
1126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return nullptr;
1127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
1130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr
1131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     add_pointer_t<const variant_alternative_t<_Np, variant<_Types...>>>
1132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(const variant<_Types...>* __ptr) noexcept
1133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
1135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(_Np < sizeof...(_Types),
1136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "The index must be in [0, number of alternatives)");
1137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
1138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if (__ptr && __ptr->index() == _Np)
1139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
1140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return nullptr;
1141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr add_pointer_t<_Tp>
1145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(variant<_Types...>* __ptr) noexcept
1146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __ptr);
1152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr add_pointer_t<const _Tp>
ARM GAS  /tmp/ccATuxCb.s 			page 28


1156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(const variant<_Types...>* __ptr) noexcept
1157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __ptr);
1163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   struct monostate { };
1166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP, __NAME) \
1168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types> \
1169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr bool operator __OP(const variant<_Types...>& __lhs, \
1170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				 const variant<_Types...>& __rhs) \
1171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { \
1172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       bool __ret = true; \
1173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __detail::__variant::__raw_idx_visit( \
1174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         [&__ret, &__lhs] (auto&& __rhs_mem, auto __rhs_index) mutable \
1175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         { \
1176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__rhs_index != variant_npos) \
1177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    { \
1178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      if (__lhs.index() == __rhs_index) \
1179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	        { \
1180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  auto& __this_mem = std::get<__rhs_index>(__lhs);	\
1181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****                   __ret = __this_mem __OP __rhs_mem; \
1182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****                 } \
1183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      else \
1184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		__ret = (__lhs.index() + 1) __OP (__rhs_index + 1); \
1185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****             } \
1186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****           else \
1187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****             __ret = (__lhs.index() + 1) __OP (__rhs_index + 1); \
1188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}, __rhs); \
1189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __ret; \
1190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)
1193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)
1194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(==, equal)
1195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(!=, not_equal)
1196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(>=, greater_equal)
1197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(>, greater)
1198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #undef _VARIANT_RELATION_FUNCTION_TEMPLATE
1200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator==(monostate, monostate) noexcept { return true; }
1202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #ifdef __cpp_lib_three_way_comparison
1204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     requires (three_way_comparable<_Types> && ...)
1206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr
1207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     common_comparison_category_t<compare_three_way_result_t<_Types>...>
1208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     operator<=>(const variant<_Types...>& __v, const variant<_Types...>& __w)
1209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       common_comparison_category_t<compare_three_way_result_t<_Types>...> __ret
1211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	= strong_ordering::equal;
1212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccATuxCb.s 			page 29


1213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __detail::__variant::__raw_idx_visit(
1214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	[&__ret, &__v] (auto&& __w_mem, auto __w_index) mutable
1215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__w_index != variant_npos)
1217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      if (__v.index() == __w_index)
1219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  auto& __this_mem = std::get<__w_index>(__v);
1221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __ret = __this_mem <=> __w_mem;
1222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  return;
1223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __ret = (__v.index() + 1) <=> (__w_index + 1);
1226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}, __w);
1227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __ret;
1228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr strong_ordering
1231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   operator<=>(monostate, monostate) noexcept { return strong_ordering::equal; }
1232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #else
1233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator!=(monostate, monostate) noexcept { return false; }
1234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator<(monostate, monostate) noexcept { return false; }
1235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator>(monostate, monostate) noexcept { return false; }
1236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator<=(monostate, monostate) noexcept { return true; }
1237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator>=(monostate, monostate) noexcept { return true; }
1238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #endif
1239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Visitor, typename... _Variants>
1241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto) visit(_Visitor&&, _Variants&&...);
1242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline enable_if_t<(is_move_constructible_v<_Types> && ...)
1245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			&& (is_swappable_v<_Types> && ...)>
1246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     swap(variant<_Types...>& __lhs, variant<_Types...>& __rhs)
1247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     noexcept(noexcept(__lhs.swap(__rhs)))
1248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { __lhs.swap(__rhs); }
1249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     enable_if_t<!((is_move_constructible_v<_Types> && ...)
1252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		   && (is_swappable_v<_Types> && ...))>
1253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     swap(variant<_Types...>&, variant<_Types...>&) = delete;
1254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   class bad_variant_access : public exception
1256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   {
1257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   public:
1258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     bad_variant_access() noexcept { }
1259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     const char* what() const noexcept override
1261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return _M_reason; }
1262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   private:
1264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     bad_variant_access(const char* __reason) noexcept : _M_reason(__reason) { }
1265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     // Must point to a string with static storage duration:
1267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     const char* _M_reason = "bad variant access";
1268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     friend void __throw_bad_variant_access(const char* __what);
ARM GAS  /tmp/ccATuxCb.s 			page 30


1270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   };
1271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Must only be called with a string literal
1273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   inline void
1274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   __throw_bad_variant_access(const char* __what)
1275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 147              		.loc 3 1275 3
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 8
 150              		@ frame_needed = 1, uses_anonymous_args = 0
 151 0000 80B5     		push	{r7, lr}
 152              	.LCFI12:
 153              		.cfi_def_cfa_offset 8
 154              		.cfi_offset 7, -8
 155              		.cfi_offset 14, -4
 156 0002 82B0     		sub	sp, sp, #8
 157              	.LCFI13:
 158              		.cfi_def_cfa_offset 16
 159 0004 00AF     		add	r7, sp, #0
 160              	.LCFI14:
 161              		.cfi_def_cfa_register 7
 162 0006 7860     		str	r0, [r7, #4]
 163              		.loc 3 1275 5
 164 0008 FFF7FEFF 		bl	abort
 165              		.cfi_endproc
 166              	.LFE2484:
 168              		.section	.rodata
 169              		.align	2
 170              	.LC2:
 171 0000 7374643A 		.ascii	"std::get: variant is valueless\000"
 171      3A676574 
 171      3A207661 
 171      7269616E 
 171      74206973 
 172 001f 00       		.align	2
 173              	.LC3:
 174 0020 7374643A 		.ascii	"std::get: wrong index for variant\000"
 174      3A676574 
 174      3A207772 
 174      6F6E6720 
 174      696E6465 
 175              		.section	.text._ZSt26__throw_bad_variant_accessb,"axG",%progbits,_ZSt26__throw_bad_variant_accessb
 176              		.align	1
 177              		.weak	_ZSt26__throw_bad_variant_accessb
 178              		.syntax unified
 179              		.thumb
 180              		.thumb_func
 181              		.fpu fpv4-sp-d16
 183              	_ZSt26__throw_bad_variant_accessb:
 184              	.LFB2485:
1276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   inline void
1278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   __throw_bad_variant_access(bool __valueless)
1279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   {
 185              		.loc 3 1279 3
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccATuxCb.s 			page 31


 188              		@ frame_needed = 1, uses_anonymous_args = 0
 189 0000 80B5     		push	{r7, lr}
 190              	.LCFI15:
 191              		.cfi_def_cfa_offset 8
 192              		.cfi_offset 7, -8
 193              		.cfi_offset 14, -4
 194 0002 82B0     		sub	sp, sp, #8
 195              	.LCFI16:
 196              		.cfi_def_cfa_offset 16
 197 0004 00AF     		add	r7, sp, #0
 198              	.LCFI17:
 199              		.cfi_def_cfa_register 7
 200 0006 0346     		mov	r3, r0
 201 0008 FB71     		strb	r3, [r7, #7]
1280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     if (__valueless) [[__unlikely__]]
 202              		.loc 3 1280 5
 203 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 204 000c 002B     		cmp	r3, #0
 205 000e 03D0     		beq	.L7
1281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __throw_bad_variant_access("std::get: variant is valueless");
 206              		.loc 3 1281 33 discriminator 1
 207 0010 0548     		ldr	r0, .L10
 208 0012 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessPKc
1282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     else
1283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __throw_bad_variant_access("std::get: wrong index for variant");
1284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   }
 209              		.loc 3 1284 3 discriminator 1
 210 0016 02E0     		b	.L9
 211              	.L7:
1283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   }
 212              		.loc 3 1283 33
 213 0018 0448     		ldr	r0, .L10+4
 214 001a FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessPKc
 215              	.L9:
 216              		.loc 3 1284 3
 217 001e 00BF     		nop
 218 0020 0837     		adds	r7, r7, #8
 219              	.LCFI18:
 220              		.cfi_def_cfa_offset 8
 221 0022 BD46     		mov	sp, r7
 222              	.LCFI19:
 223              		.cfi_def_cfa_register 13
 224              		@ sp needed
 225 0024 80BD     		pop	{r7, pc}
 226              	.L11:
 227 0026 00BF     		.align	2
 228              	.L10:
 229 0028 00000000 		.word	.LC2
 230 002c 20000000 		.word	.LC3
 231              		.cfi_endproc
 232              	.LFE2485:
 234              		.section	.rodata._ZL16OFFSET_TAB_CCMRx,"a"
 235              		.align	2
 238              	_ZL16OFFSET_TAB_CCMRx:
 239 0000 00000000 		.ascii	"\000\000\000\000\004\004\004\00488"
 239      04040404 
 239      3838
ARM GAS  /tmp/ccATuxCb.s 			page 32


 240              		.section	.rodata._ZL14SHIFT_TAB_OCxx,"a"
 241              		.align	2
 244              	_ZL14SHIFT_TAB_OCxx:
 245 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\010"
 245      00000800 
 245      0008
 246              		.section	.rodata._ZL14SHIFT_TAB_ICxx,"a"
 247              		.align	2
 250              	_ZL14SHIFT_TAB_ICxx:
 251 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\000"
 251      00000800 
 251      0000
 252              		.section	.rodata._ZL14SHIFT_TAB_CCxP,"a"
 253              		.align	2
 256              	_ZL14SHIFT_TAB_CCxP:
 257 0000 00020406 		.ascii	"\000\002\004\006\010\012\014\016\020\024"
 257      080A0C0E 
 257      1014
 258              		.section	.rodata._ZL14SHIFT_TAB_OISx,"a"
 259              		.align	2
 262              	_ZL14SHIFT_TAB_OISx:
 263 0000 00010203 		.ascii	"\000\001\002\003\004\005\006\007\010\012"
 263      04050607 
 263      080A
 264              		.section	.rodata._ZL19USART_PRESCALER_TAB,"a"
 265              		.align	2
 268              	_ZL19USART_PRESCALER_TAB:
 269 0000 01000000 		.word	1
 270 0004 02000000 		.word	2
 271 0008 04000000 		.word	4
 272 000c 06000000 		.word	6
 273 0010 08000000 		.word	8
 274 0014 0A000000 		.word	10
 275 0018 0C000000 		.word	12
 276 001c 10000000 		.word	16
 277 0020 20000000 		.word	32
 278 0024 40000000 		.word	64
 279 0028 80000000 		.word	128
 280 002c 00010000 		.word	256
 281              		.section	.rodata._ZL18CHANNEL_OFFSET_TAB,"a"
 282              		.align	2
 285              	_ZL18CHANNEL_OFFSET_TAB:
 286 0000 081C3044 		.ascii	"\010\0340DXl"
 286      586C
 287              		.section	.text._ZSt4sqrtf,"axG",%progbits,_ZSt4sqrtf,comdat
 288              		.align	1
 289              		.weak	_ZSt4sqrtf
 290              		.syntax unified
 291              		.thumb
 292              		.thumb_func
 293              		.fpu fpv4-sp-d16
 295              	_ZSt4sqrtf:
 296              	.LFB4208:
 297              		.file 4 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // -*- C++ -*- C forwarding header.
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
ARM GAS  /tmp/ccATuxCb.s 			page 33


   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** /** @file include/cmath
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  This is a Standard C++ Library file.  You should @c \#include this file
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  in your programs, rather than any of the @a *.h implementation files.
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  This is the C++ version of the Standard C Library header @c math.h,
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  and its contents are (mostly) the same as that header, but are all
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  contained in the namespace @c std (except for names which are defined
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  as macros in C).
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  */
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** //
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // ISO C++ 14882: 26.5  C library
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** //
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #pragma GCC system_header
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <bits/c++config.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <bits/cpp_type_traits.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <ext/type_traits.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include_next <math.h>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <bits/std_abs.h>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef _GLIBCXX_CMATH
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #define _GLIBCXX_CMATH 1
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Get rid of those macros defined in <math.h> in lieu of real functions.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef div
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef acos
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef asin
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef atan
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef atan2
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef ceil
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef cos
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef cosh
ARM GAS  /tmp/ccATuxCb.s 			page 34


  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef exp
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef fabs
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef floor
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef fmod
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef frexp
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef ldexp
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef log
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef log10
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef modf
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef pow
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef sin
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef sinh
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef sqrt
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef tan
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef tanh
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** extern "C++"
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** {
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** {
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::acos;
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   acos(float __x)
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_acosf(__x); }
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   acos(long double __x)
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_acosl(__x); }
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     acos(_Tp __x)
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_acos(__x); }
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::asin;
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   asin(float __x)
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_asinf(__x); }
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   asin(long double __x)
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_asinl(__x); }
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
ARM GAS  /tmp/ccATuxCb.s 			page 35


 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     asin(_Tp __x)
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_asin(__x); }
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::atan;
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan(float __x)
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atanf(__x); }
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan(long double __x)
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atanl(__x); }
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     atan(_Tp __x)
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_atan(__x); }
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::atan2;
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan2(float __y, float __x)
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atan2f(__y, __x); }
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan2(long double __y, long double __x)
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atan2l(__y, __x); }
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp, typename _Up>
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     atan2(_Tp __y, _Up __x)
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     {
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       return atan2(__type(__y), __type(__x));
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     }
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::ceil;
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ceil(float __x)
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ceilf(__x); }
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ceil(long double __x)
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ceill(__x); }
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
ARM GAS  /tmp/ccATuxCb.s 			page 36


 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     ceil(_Tp __x)
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_ceil(__x); }
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::cos;
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cos(float __x)
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_cosf(__x); }
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cos(long double __x)
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_cosl(__x); }
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     cos(_Tp __x)
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_cos(__x); }
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::cosh;
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cosh(float __x)
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_coshf(__x); }
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cosh(long double __x)
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_coshl(__x); }
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     cosh(_Tp __x)
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_cosh(__x); }
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::exp;
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   exp(float __x)
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_expf(__x); }
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   exp(long double __x)
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_expl(__x); }
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
ARM GAS  /tmp/ccATuxCb.s 			page 37


 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     exp(_Tp __x)
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_exp(__x); }
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::fabs;
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fabs(float __x)
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fabsf(__x); }
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fabs(long double __x)
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fabsl(__x); }
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     fabs(_Tp __x)
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_fabs(__x); }
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::floor;
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   floor(float __x)
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_floorf(__x); }
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   floor(long double __x)
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_floorl(__x); }
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     floor(_Tp __x)
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_floor(__x); }
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::fmod;
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fmod(float __x, float __y)
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fmodf(__x, __y); }
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fmod(long double __x, long double __y)
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fmodl(__x, __y); }
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp, typename _Up>
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
ARM GAS  /tmp/ccATuxCb.s 			page 38


 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     fmod(_Tp __x, _Up __y)
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     {
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       return fmod(__type(__x), __type(__y));
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     }
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::frexp;
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline float
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   frexp(float __x, int* __exp)
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_frexpf(__x, __exp); }
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline long double
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   frexp(long double __x, int* __exp)
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_frexpl(__x, __exp); }
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     frexp(_Tp __x, int* __exp)
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_frexp(__x, __exp); }
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::ldexp;
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ldexp(float __x, int __exp)
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ldexpf(__x, __exp); }
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ldexp(long double __x, int __exp)
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ldexpl(__x, __exp); }
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     ldexp(_Tp __x, int __exp)
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_ldexp(__x, __exp); }
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::log;
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   log(float __x)
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_logf(__x); }
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   log(long double __x)
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_logl(__x); }
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
ARM GAS  /tmp/ccATuxCb.s 			page 39


 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     log(_Tp __x)
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_log(__x); }
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::log10;
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   log10(float __x)
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_log10f(__x); }
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   log10(long double __x)
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_log10l(__x); }
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     log10(_Tp __x)
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_log10(__x); }
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::modf;
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline float
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   modf(float __x, float* __iptr)
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_modff(__x, __iptr); }
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline long double
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   modf(long double __x, long double* __iptr)
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_modfl(__x, __iptr); }
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::pow;
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(float __x, float __y)
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powf(__x, __y); }
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(long double __x, long double __y)
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powl(__x, __y); }
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #if __cplusplus < 201103L
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   // DR 550. What should the return type of pow(float,int) be?
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline double
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(double __x, int __i)
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powi(__x, __i); }
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline float
ARM GAS  /tmp/ccATuxCb.s 			page 40


 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(float __x, int __n)
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powif(__x, __n); }
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline long double
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(long double __x, int __n)
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powil(__x, __n); }
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp, typename _Up>
 413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     pow(_Tp __x, _Up __y)
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     {
 417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       return pow(__type(__x), __type(__y));
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     }
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::sin;
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sin(float __x)
 426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sinf(__x); }
 427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sin(long double __x)
 430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sinl(__x); }
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     sin(_Tp __x)
 438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_sin(__x); }
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::sinh;
 441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sinh(float __x)
 445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sinhf(__x); }
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sinh(long double __x)
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sinhl(__x); }
 450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     sinh(_Tp __x)
 457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_sinh(__x); }
 458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::sqrt;
ARM GAS  /tmp/ccATuxCb.s 			page 41


 460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sqrt(float __x)
 464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sqrtf(__x); }
 298              		.loc 4 464 3
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 8
 301              		@ frame_needed = 1, uses_anonymous_args = 0
 302 0000 80B5     		push	{r7, lr}
 303              	.LCFI20:
 304              		.cfi_def_cfa_offset 8
 305              		.cfi_offset 7, -8
 306              		.cfi_offset 14, -4
 307 0002 82B0     		sub	sp, sp, #8
 308              	.LCFI21:
 309              		.cfi_def_cfa_offset 16
 310 0004 00AF     		add	r7, sp, #0
 311              	.LCFI22:
 312              		.cfi_def_cfa_register 7
 313 0006 87ED010A 		vstr.32	s0, [r7, #4]
 314              		.loc 4 464 27
 315 000a 97ED010A 		vldr.32	s0, [r7, #4]
 316 000e FFF7FEFF 		bl	sqrtf
 317 0012 F0EE407A 		vmov.f32	s15, s0
 318              		.loc 4 464 34
 319 0016 B0EE670A 		vmov.f32	s0, s15
 320 001a 0837     		adds	r7, r7, #8
 321              	.LCFI23:
 322              		.cfi_def_cfa_offset 8
 323 001c BD46     		mov	sp, r7
 324              	.LCFI24:
 325              		.cfi_def_cfa_register 13
 326              		@ sp needed
 327 001e 80BD     		pop	{r7, pc}
 328              		.cfi_endproc
 329              	.LFE4208:
 331              		.section	.text._ZN5MotorUt_ixEj,"axG",%progbits,_ZN5MotorUt_ixEj,comdat
 332              		.align	1
 333              		.weak	_ZN5MotorUt_ixEj
 334              		.syntax unified
 335              		.thumb
 336              		.thumb_func
 337              		.fpu fpv4-sp-d16
 339              	_ZN5MotorUt_ixEj:
 340              	.LFB4789:
 341              		.file 5 "Inc/motor.hpp"
   1:Inc/motor.hpp **** #ifndef __MOTOR_HPP
   2:Inc/motor.hpp **** #define __MOTOR_HPP
   3:Inc/motor.hpp **** 
   4:Inc/motor.hpp **** 
   5:Inc/motor.hpp **** #include <cstdint>  // Add this for uint32_t
   6:Inc/motor.hpp **** #include "component.hpp"
   7:Inc/motor.hpp **** 
   8:Inc/motor.hpp **** #include "interfaces.hpp"
   9:Inc/motor.hpp **** #include "phase_control_law.hpp"
  10:Inc/motor.hpp **** #include "main.h"
ARM GAS  /tmp/ccATuxCb.s 			page 42


  11:Inc/motor.hpp **** #include "current_limiter.hpp"
  12:Inc/motor.hpp **** #include "foc.hpp"
  13:Inc/motor.hpp **** 
  14:Inc/motor.hpp **** 
  15:Inc/motor.hpp **** class FieldOrientedController;
  16:Inc/motor.hpp **** class Axis;
  17:Inc/motor.hpp **** 
  18:Inc/motor.hpp **** class Motor : public ODriveIntf::MotorIntf{
  19:Inc/motor.hpp **** public:
  20:Inc/motor.hpp ****     struct Iph_BC_t {
  21:Inc/motor.hpp ****         float phA;
  22:Inc/motor.hpp ****         float phB;
  23:Inc/motor.hpp ****         float phC;
  24:Inc/motor.hpp ****     };
  25:Inc/motor.hpp **** 
  26:Inc/motor.hpp ****     enum MotorType {
  27:Inc/motor.hpp ****         MOTOR_TYPE_HIGH_CURRENT          = 0,
  28:Inc/motor.hpp ****         MOTOR_TYPE_GIMBAL                = 2,
  29:Inc/motor.hpp ****         MOTOR_TYPE_ACIM                  = 3,
  30:Inc/motor.hpp ****     };
  31:Inc/motor.hpp **** 
  32:Inc/motor.hpp ****     struct CurrentControl_t{
  33:Inc/motor.hpp ****         float p_gain; // [V/A]
  34:Inc/motor.hpp ****         float i_gain; // [V/As]
  35:Inc/motor.hpp ****         float v_current_control_integral_d; // [V]
  36:Inc/motor.hpp ****         float v_current_control_integral_q; // [V]
  37:Inc/motor.hpp ****         float Ibus; // DC bus current [A]
  38:Inc/motor.hpp ****         // Voltage applied at end of cycle:
  39:Inc/motor.hpp ****         float final_v_alpha; // [V]
  40:Inc/motor.hpp ****         float final_v_beta; // [V]
  41:Inc/motor.hpp **** 
  42:Inc/motor.hpp ****         float final_v_d; // [V]
  43:Inc/motor.hpp ****         float final_v_q; // [V]
  44:Inc/motor.hpp **** 
  45:Inc/motor.hpp ****         float Id_setpoint; // [A]
  46:Inc/motor.hpp ****         float Iq_setpoint; // [A]
  47:Inc/motor.hpp ****         float Iq_measured; // [A]
  48:Inc/motor.hpp ****         float Id_measured; // [A]
  49:Inc/motor.hpp ****         float I_measured_report_filter_k;
  50:Inc/motor.hpp ****         float max_allowed_current; // [A]
  51:Inc/motor.hpp ****         float overcurrent_trip_level; // [A]
  52:Inc/motor.hpp ****         float acim_rotor_flux; // [A]
  53:Inc/motor.hpp ****         float async_phase_vel; // [rad/s electrical]
  54:Inc/motor.hpp ****         float async_phase_offset; // [rad electrical]
  55:Inc/motor.hpp ****     };
  56:Inc/motor.hpp ****     static constexpr int32_t NUM_LINEARITY_SEG = 60;
  57:Inc/motor.hpp ****     static constexpr float CALIBRATION_INCREMENT = 1;
  58:Inc/motor.hpp ****     // NOTE: for gimbal motors, all units of Nm are instead V.
  59:Inc/motor.hpp ****     // example: vel_gain is [V/(turn/s)] instead of [Nm/(turn/s)]
  60:Inc/motor.hpp ****     // example: current_lim and calibration_current will instead determine the maximum voltage appl
  61:Inc/motor.hpp ****     struct Config_t {
  62:Inc/motor.hpp ****         bool pre_calibrated = false; // can be set to true to indicate that all values here are val
  63:Inc/motor.hpp ****         int32_t pole_pairs = 21;
  64:Inc/motor.hpp ****         int32_t gear_ratio = 16;
  65:Inc/motor.hpp ****         float motor_torque_base = 60.0f; // [Nm]
  66:Inc/motor.hpp ****         float calibration_current = 10.0f;    // [A]
  67:Inc/motor.hpp ****         float resistance_calib_max_voltage = 2.0f; // [V] - You may need to increase this if this v
ARM GAS  /tmp/ccATuxCb.s 			page 43


  68:Inc/motor.hpp ****         float phase_inductance = 0.000055f;        // to be set by measure_phase_inductance
  69:Inc/motor.hpp ****         float phase_resistance = 0.07f;        // to be set by measure_phase_resistance
  70:Inc/motor.hpp ****         float torque_constant = 0.087f;         // [Nm/A] for PM motors, [Nm/A^2] for induction mot
  71:Inc/motor.hpp ****         int32_t direction = 1;                // 1 or -1 (0 = unspecified)
  72:Inc/motor.hpp ****         MotorType motor_type = MOTOR_TYPE_HIGH_CURRENT;
  73:Inc/motor.hpp ****         // Read out max_allowed_current to see max supported value for current_lim.
  74:Inc/motor.hpp ****         // float current_lim = 70.0f; //[A]
  75:Inc/motor.hpp ****         float current_lim = 10.0f;          //[A]
  76:Inc/motor.hpp ****         float current_lim_margin = 8.0f;    // Maximum violation of current_lim
  77:Inc/motor.hpp ****         float torque_lim = std::numeric_limits<float>::infinity();           //[Nm]. 
  78:Inc/motor.hpp ****         // Value used to compute shunt amplifier gains
  79:Inc/motor.hpp ****         float requested_current_range = 60.0f; // [A]
  80:Inc/motor.hpp ****         float current_control_bandwidth = 3000.0f;  // [rad/s]
  81:Inc/motor.hpp ****         float inverter_temp_limit_lower = 100;
  82:Inc/motor.hpp ****         float inverter_temp_limit_upper = 120;
  83:Inc/motor.hpp ****         float acim_slip_velocity = 14.706f; // [rad/s electrical] = 1/rotor_tau
  84:Inc/motor.hpp ****         float acim_gain_min_flux = 10; // [A]
  85:Inc/motor.hpp ****         float acim_autoflux_min_Id = 10; // [A]
  86:Inc/motor.hpp ****         bool acim_autoflux_enable = false;
  87:Inc/motor.hpp ****         float acim_autoflux_attack_gain = 10.0f;
  88:Inc/motor.hpp ****         float acim_autoflux_decay_gain = 1.0f;
  89:Inc/motor.hpp **** 
  90:Inc/motor.hpp ****         float Torque_LINEARITY_[NUM_LINEARITY_SEG];
  91:Inc/motor.hpp ****         float CURRENT_LINEARITY_[NUM_LINEARITY_SEG];
  92:Inc/motor.hpp **** 
  93:Inc/motor.hpp ****         float CURRENT2TORQUE_COEFF[2*NUM_LINEARITY_SEG];
  94:Inc/motor.hpp **** 
  95:Inc/motor.hpp ****         bool R_wL_FF_enable = false; // Enable feedforwards for R*I and w*L*I terms
  96:Inc/motor.hpp ****         bool bEMF_FF_enable = false; // Enable feedforward for bEMF
  97:Inc/motor.hpp **** 
  98:Inc/motor.hpp ****         float I_bus_hard_min = -INFINITY;
  99:Inc/motor.hpp ****         float I_bus_hard_max = INFINITY;
 100:Inc/motor.hpp ****         // custom property setters
 101:Inc/motor.hpp ****         Motor* parent = nullptr;
 102:Inc/motor.hpp ****         void set_pre_calibrated(bool value) {
 103:Inc/motor.hpp ****             pre_calibrated = value;
 104:Inc/motor.hpp ****             parent->is_calibrated_ = parent->is_calibrated_ || parent->config_.pre_calibrated;
 105:Inc/motor.hpp ****         }
 106:Inc/motor.hpp ****         void set_phase_inductance(float value) { phase_inductance = value; parent->update_current_c
 107:Inc/motor.hpp ****         void set_phase_resistance(float value) { phase_resistance = value; parent->update_current_c
 108:Inc/motor.hpp ****         void set_current_control_bandwidth(float value) { current_control_bandwidth = value; parent
 109:Inc/motor.hpp ****     };
 110:Inc/motor.hpp **** 
 111:Inc/motor.hpp ****     Motor(const MotorHardwareConfig_t& hw_config,
 112:Inc/motor.hpp ****          Config_t& config);
 113:Inc/motor.hpp **** 
 114:Inc/motor.hpp **** 
 115:Inc/motor.hpp ****     bool arm(PhaseControlLaw<3>* control_law);
 116:Inc/motor.hpp ****     bool disarm();
 117:Inc/motor.hpp **** 
 118:Inc/motor.hpp ****     void current_meas_cb(uint32_t timestamp);
 119:Inc/motor.hpp ****     void pwm_update_cb(uint32_t output_timestamp);
 120:Inc/motor.hpp **** 
 121:Inc/motor.hpp ****     void setup() {
 122:Inc/motor.hpp ****         int32_t index = 0;
 123:Inc/motor.hpp ****         DRV8301_setup();
 124:Inc/motor.hpp ****         for( index = 0;index < NUM_LINEARITY_SEG;index++)
ARM GAS  /tmp/ccATuxCb.s 			page 44


 125:Inc/motor.hpp ****         {
 126:Inc/motor.hpp ****             L_Slop_Array_P_[index] = config_.Torque_LINEARITY_[index];
 127:Inc/motor.hpp ****             L_Slop_Array_N_[index] = config_.CURRENT_LINEARITY_[index];
 128:Inc/motor.hpp ****         }
 129:Inc/motor.hpp **** 
 130:Inc/motor.hpp ****     }
 131:Inc/motor.hpp ****     void reset_current_control();
 132:Inc/motor.hpp **** 
 133:Inc/motor.hpp ****     void update_current_controller_gains();
 134:Inc/motor.hpp ****     void DRV8301_setup();
 135:Inc/motor.hpp **** 
 136:Inc/motor.hpp ****     bool check_DRV_fault();
 137:Inc/motor.hpp ****     void set_error(ODriveIntf::MotorIntf::Error error);
 138:Inc/motor.hpp ****     bool do_checks();
 139:Inc/motor.hpp ****     float effective_current_lim();
 140:Inc/motor.hpp ****     float max_available_torque();
 141:Inc/motor.hpp ****     void log_timing(ODriveIntf::TimingLog_t log_idx);
 142:Inc/motor.hpp ****     float phase_current_from_adcval(int32_t ADCValue, float phase_current_gain_coeff);
 143:Inc/motor.hpp ****     bool check_for_current_saturation(const uint32_t ADCValue);
 144:Inc/motor.hpp ****     bool measure_phase_resistance(float test_current, float max_voltage);
 145:Inc/motor.hpp ****     bool measure_phase_inductance(float test_voltage);
 146:Inc/motor.hpp ****     bool run_calibration();
 147:Inc/motor.hpp ****     bool enqueue_modulation_timings(float mod_alpha, float mod_beta);
 148:Inc/motor.hpp ****     bool enqueue_voltage_timings(float v_alpha, float v_beta);
 149:Inc/motor.hpp ****     bool FOC_voltage(float v_d, float v_q, float pwm_phase);
 150:Inc/motor.hpp ****     bool FOC_current(float Id_des, float Iq_des, float I_phase, float pwm_phase);
 151:Inc/motor.hpp ****     bool update(float current_setpoint, float phase, float phase_vel);
 152:Inc/motor.hpp ****     void update(uint32_t timestamp);
 153:Inc/motor.hpp ****     void pos_linearity_ini(void);
 154:Inc/motor.hpp ****     float current_Correct(int32_t Torque_Org);
 155:Inc/motor.hpp ****     void abc_sign_calculation(float phase , int32_t *a, int32_t *b, int32_t *c);
 156:Inc/motor.hpp ****     void apply_pwm_timings(uint16_t timings[3], bool tentative);
 157:Inc/motor.hpp ****     const MotorHardwareConfig_t& hw_config_;
 158:Inc/motor.hpp ****     Config_t& config_;
 159:Inc/motor.hpp ****     Axis* axis_ = nullptr; // set by Axis constructor
 160:Inc/motor.hpp **** 
 161:Inc/motor.hpp **** //private:
 162:Inc/motor.hpp **** 
 163:Inc/motor.hpp ****     uint16_t next_timings_[3] = {
 164:Inc/motor.hpp ****         TIM_1_8_PERIOD_CLOCKS / 2,
 165:Inc/motor.hpp ****         TIM_1_8_PERIOD_CLOCKS / 2,
 166:Inc/motor.hpp ****         TIM_1_8_PERIOD_CLOCKS / 2
 167:Inc/motor.hpp ****     };
 168:Inc/motor.hpp ****     bool next_timings_valid_ = false;
 169:Inc/motor.hpp ****     uint16_t last_cpu_time_ = 0;
 170:Inc/motor.hpp ****     int timing_log_index_ = 0;
 171:Inc/motor.hpp ****     struct {
 172:Inc/motor.hpp ****         uint16_t& operator[](size_t idx) { return content[idx]; }
 342              		.loc 5 172 19
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 8
 345              		@ frame_needed = 1, uses_anonymous_args = 0
 346              		@ link register save eliminated.
 347 0000 80B4     		push	{r7}
 348              	.LCFI25:
 349              		.cfi_def_cfa_offset 4
 350              		.cfi_offset 7, -4
ARM GAS  /tmp/ccATuxCb.s 			page 45


 351 0002 83B0     		sub	sp, sp, #12
 352              	.LCFI26:
 353              		.cfi_def_cfa_offset 16
 354 0004 00AF     		add	r7, sp, #0
 355              	.LCFI27:
 356              		.cfi_def_cfa_register 7
 357 0006 7860     		str	r0, [r7, #4]
 358 0008 3960     		str	r1, [r7]
 359              		.loc 5 172 62
 360 000a 3B68     		ldr	r3, [r7]
 361 000c 5B00     		lsls	r3, r3, #1
 362 000e 7A68     		ldr	r2, [r7, #4]
 363 0010 1344     		add	r3, r3, r2
 364              		.loc 5 172 65
 365 0012 1846     		mov	r0, r3
 366 0014 0C37     		adds	r7, r7, #12
 367              	.LCFI28:
 368              		.cfi_def_cfa_offset 4
 369 0016 BD46     		mov	sp, r7
 370              	.LCFI29:
 371              		.cfi_def_cfa_register 13
 372              		@ sp needed
 373 0018 5DF8047B 		ldr	r7, [sp], #4
 374              	.LCFI30:
 375              		.cfi_restore 7
 376              		.cfi_def_cfa_offset 0
 377 001c 7047     		bx	lr
 378              		.cfi_endproc
 379              	.LFE4789:
 381              		.section	.rodata._ZL12one_by_sqrt3,"a"
 382              		.align	2
 385              	_ZL12one_by_sqrt3:
 386 0000 3ACD133F 		.word	1058262330
 387              		.section	.rodata._ZL12two_by_sqrt3,"a"
 388              		.align	2
 391              	_ZL12two_by_sqrt3:
 392 0000 3ACD933F 		.word	1066650938
 393              		.section	.rodata._ZL10sqrt3_by_2,"a"
 394              		.align	2
 397              	_ZL10sqrt3_by_2:
 398 0000 D7B35D3F 		.word	1063105495
 399              		.section	.text.fmodf_pos,"ax",%progbits
 400              		.align	1
 401              		.syntax unified
 402              		.thumb
 403              		.thumb_func
 404              		.fpu fpv4-sp-d16
 406              	fmodf_pos:
 407              	.LFB4792:
 408              		.file 6 "Inc/utils.hpp"
   1:Inc/utils.hpp **** 
   2:Inc/utils.hpp **** #ifndef __UTILS_H
   3:Inc/utils.hpp **** #define __UTILS_H
   4:Inc/utils.hpp **** 
   5:Inc/utils.hpp **** #include <stdint.h>
   6:Inc/utils.hpp **** #include <math.h>
   7:Inc/utils.hpp **** 
ARM GAS  /tmp/ccATuxCb.s 			page 46


   8:Inc/utils.hpp **** /**
   9:Inc/utils.hpp ****  * @brief Flash size register address
  10:Inc/utils.hpp ****  */
  11:Inc/utils.hpp **** #define ID_FLASH_ADDRESS (0x1FFF7A22)
  12:Inc/utils.hpp **** 
  13:Inc/utils.hpp **** /**
  14:Inc/utils.hpp ****  * @brief Device ID register address
  15:Inc/utils.hpp ****  */
  16:Inc/utils.hpp **** #define ID_DBGMCU_IDCODE (0xE0042000)
  17:Inc/utils.hpp **** 
  18:Inc/utils.hpp **** /**
  19:Inc/utils.hpp ****  * "Returns" the device signature
  20:Inc/utils.hpp ****  *
  21:Inc/utils.hpp ****  * Possible returns:
  22:Inc/utils.hpp ****  *    - 0x0413: STM32F405xx/07xx and STM32F415xx/17xx)
  23:Inc/utils.hpp ****  *    - 0x0419: STM32F42xxx and STM32F43xxx
  24:Inc/utils.hpp ****  *    - 0x0423: STM32F401xB/C
  25:Inc/utils.hpp ****  *    - 0x0433: STM32F401xD/E
  26:Inc/utils.hpp ****  *    - 0x0431: STM32F411xC/E
  27:Inc/utils.hpp ****  *
  28:Inc/utils.hpp ****  * Returned data is in 16-bit mode, but only bits 11:0 are valid, bits 15:12 are always 0.
  29:Inc/utils.hpp ****  * Defined as macro
  30:Inc/utils.hpp ****  */
  31:Inc/utils.hpp **** #define STM_ID_GetSignature() ((*(uint16_t *)(ID_DBGMCU_IDCODE)) & 0x0FFF)
  32:Inc/utils.hpp **** 
  33:Inc/utils.hpp **** /**
  34:Inc/utils.hpp ****  * "Returns" the device revision
  35:Inc/utils.hpp ****  *
  36:Inc/utils.hpp ****  * Revisions possible:
  37:Inc/utils.hpp ****  *    - 0x1000: Revision A
  38:Inc/utils.hpp ****  *    - 0x1001: Revision Z
  39:Inc/utils.hpp ****  *    - 0x1003: Revision Y
  40:Inc/utils.hpp ****  *    - 0x1007: Revision 1
  41:Inc/utils.hpp ****  *    - 0x2001: Revision 3
  42:Inc/utils.hpp ****  *
  43:Inc/utils.hpp ****  * Returned data is in 16-bit mode.
  44:Inc/utils.hpp ****  */
  45:Inc/utils.hpp **** #define STM_ID_GetRevision() (*(uint16_t *)(ID_DBGMCU_IDCODE + 2))
  46:Inc/utils.hpp **** 
  47:Inc/utils.hpp **** /**
  48:Inc/utils.hpp **** * "Returns" the Flash size
  49:Inc/utils.hpp **** *
  50:Inc/utils.hpp **** * Returned data is in 16-bit mode, returned value is flash size in kB (kilo bytes).
  51:Inc/utils.hpp **** */
  52:Inc/utils.hpp **** #define STM_ID_GetFlashSize() (*(uint16_t *)(ID_FLASH_ADDRESS))
  53:Inc/utils.hpp **** 
  54:Inc/utils.hpp **** #ifdef M_PI
  55:Inc/utils.hpp **** #undef M_PI
  56:Inc/utils.hpp **** #endif
  57:Inc/utils.hpp **** #define M_PI (3.14159265358979323846f)
  58:Inc/utils.hpp **** 
  59:Inc/utils.hpp **** #define MACRO_MAX(x, y) (((x) > (y)) ? (x) : (y))
  60:Inc/utils.hpp **** #define MACRO_MIN(x, y) (((x) < (y)) ? (x) : (y))
  61:Inc/utils.hpp **** 
  62:Inc/utils.hpp **** #define SQ(x) ((x) * (x))
  63:Inc/utils.hpp **** 
  64:Inc/utils.hpp **** #ifdef __cplusplus
ARM GAS  /tmp/ccATuxCb.s 			page 47


  65:Inc/utils.hpp **** 
  66:Inc/utils.hpp **** #include <array>
  67:Inc/utils.hpp **** 
  68:Inc/utils.hpp **** /**
  69:Inc/utils.hpp ****  * @brief Small helper to make array with known size
  70:Inc/utils.hpp ****  * in contrast to initializer lists the number of arguments
  71:Inc/utils.hpp ****  * has to match exactly. Whereas initializer lists allow
  72:Inc/utils.hpp ****  * less arguments.
  73:Inc/utils.hpp ****  */
  74:Inc/utils.hpp **** template<class T, class... Tail>
  75:Inc/utils.hpp **** std::array<T, 1 + sizeof...(Tail)> make_array(T head, Tail... tail)
  76:Inc/utils.hpp **** {
  77:Inc/utils.hpp ****     return std::array<T, 1 + sizeof...(Tail)>({ head, tail ... });
  78:Inc/utils.hpp **** }
  79:Inc/utils.hpp **** 
  80:Inc/utils.hpp **** extern "C" {
  81:Inc/utils.hpp **** #endif
  82:Inc/utils.hpp **** 
  83:Inc/utils.hpp **** static const float one_by_sqrt3 = 0.57735026919f;
  84:Inc/utils.hpp **** static const float two_by_sqrt3 = 1.15470053838f;
  85:Inc/utils.hpp **** static const float sqrt3_by_2 = 0.86602540378f;
  86:Inc/utils.hpp **** 
  87:Inc/utils.hpp **** // like fmodf, but always positive
  88:Inc/utils.hpp **** static inline float fmodf_pos(float x, float y) {
 409              		.loc 6 88 49
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 16
 412              		@ frame_needed = 1, uses_anonymous_args = 0
 413 0000 80B5     		push	{r7, lr}
 414              	.LCFI31:
 415              		.cfi_def_cfa_offset 8
 416              		.cfi_offset 7, -8
 417              		.cfi_offset 14, -4
 418 0002 84B0     		sub	sp, sp, #16
 419              	.LCFI32:
 420              		.cfi_def_cfa_offset 24
 421 0004 00AF     		add	r7, sp, #0
 422              	.LCFI33:
 423              		.cfi_def_cfa_register 7
 424 0006 87ED010A 		vstr.32	s0, [r7, #4]
 425 000a C7ED000A 		vstr.32	s1, [r7]
  89:Inc/utils.hpp ****     float out = fmodf(x, y);
 426              		.loc 6 89 22
 427 000e D7ED000A 		vldr.32	s1, [r7]
 428 0012 97ED010A 		vldr.32	s0, [r7, #4]
 429 0016 FFF7FEFF 		bl	fmodf
 430 001a 87ED030A 		vstr.32	s0, [r7, #12]
  90:Inc/utils.hpp ****     if (out < 0.0f)
 431              		.loc 6 90 5
 432 001e D7ED037A 		vldr.32	s15, [r7, #12]
 433 0022 F5EEC07A 		vcmpe.f32	s15, #0
 434 0026 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 435 002a 07D5     		bpl	.L17
  91:Inc/utils.hpp ****         out += y;
 436              		.loc 6 91 13
 437 002c 97ED037A 		vldr.32	s14, [r7, #12]
 438 0030 D7ED007A 		vldr.32	s15, [r7]
ARM GAS  /tmp/ccATuxCb.s 			page 48


 439 0034 77EE277A 		vadd.f32	s15, s14, s15
 440 0038 C7ED037A 		vstr.32	s15, [r7, #12]
 441              	.L17:
  92:Inc/utils.hpp ****     return out;
 442              		.loc 6 92 12
 443 003c FB68     		ldr	r3, [r7, #12]	@ float
 444 003e 07EE903A 		vmov	s15, r3
  93:Inc/utils.hpp **** }
 445              		.loc 6 93 1
 446 0042 B0EE670A 		vmov.f32	s0, s15
 447 0046 1037     		adds	r7, r7, #16
 448              	.LCFI34:
 449              		.cfi_def_cfa_offset 8
 450 0048 BD46     		mov	sp, r7
 451              	.LCFI35:
 452              		.cfi_def_cfa_register 13
 453              		@ sp needed
 454 004a 80BD     		pop	{r7, pc}
 455              		.cfi_endproc
 456              	.LFE4792:
 458              		.section	.text.wrap_pm,"ax",%progbits
 459              		.align	1
 460              		.syntax unified
 461              		.thumb
 462              		.thumb_func
 463              		.fpu fpv4-sp-d16
 465              	wrap_pm:
 466              	.LFB4793:
  94:Inc/utils.hpp **** 
  95:Inc/utils.hpp **** /**
  96:Inc/utils.hpp ****  * @brief Similar to modulo operator, except that the output range is centered
  97:Inc/utils.hpp ****  * around zero.
  98:Inc/utils.hpp ****  * The returned value is always in the range [-pm_range, pm_range).
  99:Inc/utils.hpp ****  */
 100:Inc/utils.hpp **** static inline float wrap_pm(float x, float pm_range) {
 467              		.loc 6 100 54
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 8
 470              		@ frame_needed = 1, uses_anonymous_args = 0
 471 0000 80B5     		push	{r7, lr}
 472              	.LCFI36:
 473              		.cfi_def_cfa_offset 8
 474              		.cfi_offset 7, -8
 475              		.cfi_offset 14, -4
 476 0002 82B0     		sub	sp, sp, #8
 477              	.LCFI37:
 478              		.cfi_def_cfa_offset 16
 479 0004 00AF     		add	r7, sp, #0
 480              	.LCFI38:
 481              		.cfi_def_cfa_register 7
 482 0006 87ED010A 		vstr.32	s0, [r7, #4]
 483 000a C7ED000A 		vstr.32	s1, [r7]
 101:Inc/utils.hpp ****     return fmodf_pos(x + pm_range, 2.0f * pm_range) - pm_range;
 484              		.loc 6 101 21
 485 000e 97ED017A 		vldr.32	s14, [r7, #4]
 486 0012 D7ED007A 		vldr.32	s15, [r7]
 487 0016 37EE277A 		vadd.f32	s14, s14, s15
ARM GAS  /tmp/ccATuxCb.s 			page 49


 488 001a D7ED007A 		vldr.32	s15, [r7]
 489 001e 77EEA77A 		vadd.f32	s15, s15, s15
 490 0022 F0EE670A 		vmov.f32	s1, s15
 491 0026 B0EE470A 		vmov.f32	s0, s14
 492 002a FFF7FEFF 		bl	fmodf_pos
 493 002e B0EE407A 		vmov.f32	s14, s0
 494              		.loc 6 101 55
 495 0032 D7ED007A 		vldr.32	s15, [r7]
 496 0036 77EE677A 		vsub.f32	s15, s14, s15
 102:Inc/utils.hpp **** }
 497              		.loc 6 102 1
 498 003a B0EE670A 		vmov.f32	s0, s15
 499 003e 0837     		adds	r7, r7, #8
 500              	.LCFI39:
 501              		.cfi_def_cfa_offset 8
 502 0040 BD46     		mov	sp, r7
 503              	.LCFI40:
 504              		.cfi_def_cfa_register 13
 505              		@ sp needed
 506 0042 80BD     		pop	{r7, pc}
 507              		.cfi_endproc
 508              	.LFE4793:
 510              		.section	.text.wrap_pm_pi,"ax",%progbits
 511              		.align	1
 512              		.syntax unified
 513              		.thumb
 514              		.thumb_func
 515              		.fpu fpv4-sp-d16
 517              	wrap_pm_pi:
 518              	.LFB4794:
 103:Inc/utils.hpp **** 
 104:Inc/utils.hpp **** static inline float wrap_pm_pi(float theta) {
 519              		.loc 6 104 45
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 8
 522              		@ frame_needed = 1, uses_anonymous_args = 0
 523 0000 80B5     		push	{r7, lr}
 524              	.LCFI41:
 525              		.cfi_def_cfa_offset 8
 526              		.cfi_offset 7, -8
 527              		.cfi_offset 14, -4
 528 0002 82B0     		sub	sp, sp, #8
 529              	.LCFI42:
 530              		.cfi_def_cfa_offset 16
 531 0004 00AF     		add	r7, sp, #0
 532              	.LCFI43:
 533              		.cfi_def_cfa_register 7
 534 0006 87ED010A 		vstr.32	s0, [r7, #4]
 105:Inc/utils.hpp ****     return wrap_pm(theta, M_PI);
 535              		.loc 6 105 19
 536 000a DFED060A 		vldr.32	s1, .L25
 537 000e 97ED010A 		vldr.32	s0, [r7, #4]
 538 0012 FFF7FEFF 		bl	wrap_pm
 539 0016 F0EE407A 		vmov.f32	s15, s0
 106:Inc/utils.hpp **** }
 540              		.loc 6 106 1
 541 001a B0EE670A 		vmov.f32	s0, s15
ARM GAS  /tmp/ccATuxCb.s 			page 50


 542 001e 0837     		adds	r7, r7, #8
 543              	.LCFI44:
 544              		.cfi_def_cfa_offset 8
 545 0020 BD46     		mov	sp, r7
 546              	.LCFI45:
 547              		.cfi_def_cfa_register 13
 548              		@ sp needed
 549 0022 80BD     		pop	{r7, pc}
 550              	.L26:
 551              		.align	2
 552              	.L25:
 553 0024 DB0F4940 		.word	1078530011
 554              		.cfi_endproc
 555              	.LFE4794:
 557              		.section	.text._Z6is_nanf,"axG",%progbits,_Z6is_nanf,comdat
 558              		.align	1
 559              		.weak	_Z6is_nanf
 560              		.syntax unified
 561              		.thumb
 562              		.thumb_func
 563              		.fpu fpv4-sp-d16
 565              	_Z6is_nanf:
 566              	.LFB4795:
 107:Inc/utils.hpp **** 
 108:Inc/utils.hpp **** // Compute rising edge timings (0.0 - 1.0) as a function of alpha-beta
 109:Inc/utils.hpp **** // as per the magnitude invariant clarke transform
 110:Inc/utils.hpp **** // The magnitude of the alpha-beta vector may not be larger than sqrt(3)/2
 111:Inc/utils.hpp **** // Returns 0 on success, and -1 if the input was out of range
 112:Inc/utils.hpp **** int SVM(float alpha, float beta, float* tA, float* tB, float* tC);
 113:Inc/utils.hpp **** 
 114:Inc/utils.hpp **** float fast_atan2(float y, float x);
 115:Inc/utils.hpp **** float horner_fma(float x, const float *coeffs, size_t count);
 116:Inc/utils.hpp **** int mod(int dividend, int divisor);
 117:Inc/utils.hpp **** 
 118:Inc/utils.hpp **** uint32_t deadline_to_timeout(uint32_t deadline_ms);
 119:Inc/utils.hpp **** uint32_t timeout_to_deadline(uint32_t timeout_ms);
 120:Inc/utils.hpp **** int is_in_the_future(uint32_t time_ms);
 121:Inc/utils.hpp **** 
 122:Inc/utils.hpp **** uint32_t micros(void);
 123:Inc/utils.hpp **** void delay_us(uint32_t us);
 124:Inc/utils.hpp **** 
 125:Inc/utils.hpp **** float our_arm_sin_f32(float x);
 126:Inc/utils.hpp **** float our_arm_cos_f32(float x);
 127:Inc/utils.hpp **** uint8_t calcCRC(uint8_t * buffer, uint8_t length);
 128:Inc/utils.hpp **** int32_t fsgn(float num);
 129:Inc/utils.hpp **** int32_t saturation(int32_t num, int32_t min, int32_t max);
 130:Inc/utils.hpp **** typedef struct {
 131:Inc/utils.hpp ****     float w0;  // Notch frequency
 132:Inc/utils.hpp ****     float r;   // Notch width parameter
 133:Inc/utils.hpp ****     float a1, a2, b1, b2;  // Filter coefficients
 134:Inc/utils.hpp ****     float x1, x2, y1, y2;  // State variables
 135:Inc/utils.hpp **** } NotchFilter;
 136:Inc/utils.hpp **** void initNotchFilter(NotchFilter* filter, float frequency, float sampleRate, float bandwidth);
 137:Inc/utils.hpp **** float applyNotchFilter(NotchFilter* filter, float input);
 138:Inc/utils.hpp **** 
 139:Inc/utils.hpp **** void test_svm(float mod_q, float mod_d, float *theta, float *ta, float *tb, float *tc) ;
 140:Inc/utils.hpp **** 
ARM GAS  /tmp/ccATuxCb.s 			page 51


 141:Inc/utils.hpp **** #ifdef __cplusplus
 142:Inc/utils.hpp **** }
 143:Inc/utils.hpp **** #endif
 144:Inc/utils.hpp **** 
 145:Inc/utils.hpp **** 
 146:Inc/utils.hpp **** __attribute__((optimize("-fno-finite-math-only")))
 147:Inc/utils.hpp **** inline bool is_nan(float x) {
 567              		.loc 6 147 29
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 8
 570              		@ frame_needed = 1, uses_anonymous_args = 0
 571              		@ link register save eliminated.
 572 0000 80B4     		push	{r7}
 573              	.LCFI46:
 574              		.cfi_def_cfa_offset 4
 575              		.cfi_offset 7, -4
 576 0002 83B0     		sub	sp, sp, #12
 577              	.LCFI47:
 578              		.cfi_def_cfa_offset 16
 579 0004 00AF     		add	r7, sp, #0
 580              	.LCFI48:
 581              		.cfi_def_cfa_register 7
 582 0006 87ED010A 		vstr.32	s0, [r7, #4]
 148:Inc/utils.hpp ****     return __builtin_isnan(x);
 583              		.loc 6 148 27
 584 000a 97ED017A 		vldr.32	s14, [r7, #4]
 585 000e D7ED017A 		vldr.32	s15, [r7, #4]
 586 0012 B4EE677A 		vcmp.f32	s14, s15
 587 0016 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 588 001a 6CBF     		ite	vs
 589 001c 0123     		movvs	r3, #1
 590 001e 0023     		movvc	r3, #0
 591 0020 DBB2     		uxtb	r3, r3
 592              		.loc 6 148 29
 593 0022 002B     		cmp	r3, #0
 594 0024 14BF     		ite	ne
 595 0026 0123     		movne	r3, #1
 596 0028 0023     		moveq	r3, #0
 597 002a DBB2     		uxtb	r3, r3
 149:Inc/utils.hpp **** }
 598              		.loc 6 149 1
 599 002c 1846     		mov	r0, r3
 600 002e 0C37     		adds	r7, r7, #12
 601              	.LCFI49:
 602              		.cfi_def_cfa_offset 4
 603 0030 BD46     		mov	sp, r7
 604              	.LCFI50:
 605              		.cfi_def_cfa_register 13
 606              		@ sp needed
 607 0032 5DF8047B 		ldr	r7, [sp], #4
 608              	.LCFI51:
 609              		.cfi_restore 7
 610              		.cfi_def_cfa_offset 0
 611 0036 7047     		bx	lr
 612              		.cfi_endproc
 613              	.LFE4795:
 615              		.section	.text._Z12sample_TIM13v,"axG",%progbits,_Z12sample_TIM13v,comdat
ARM GAS  /tmp/ccATuxCb.s 			page 52


 616              		.align	1
 617              		.weak	_Z12sample_TIM13v
 618              		.syntax unified
 619              		.thumb
 620              		.thumb_func
 621              		.fpu fpv4-sp-d16
 623              	_Z12sample_TIM13v:
 624              	.LFB4796:
 625              		.file 7 "Inc/task_timer.hpp"
   1:Inc/task_timer.hpp **** #ifndef __TASK_TIMER_HPP
   2:Inc/task_timer.hpp **** #define __TASK_TIMER_HPP
   3:Inc/task_timer.hpp **** 
   4:Inc/task_timer.hpp **** #include <stdint.h>
   5:Inc/task_timer.hpp **** #include "main.h"
   6:Inc/task_timer.hpp **** 
   7:Inc/task_timer.hpp **** #define MEASURE_START_TIME
   8:Inc/task_timer.hpp **** #define MEASURE_END_TIME
   9:Inc/task_timer.hpp **** #define MEASURE_LENGTH
  10:Inc/task_timer.hpp **** #define MEASURE_MAX_LENGTH
  11:Inc/task_timer.hpp **** 
  12:Inc/task_timer.hpp **** inline uint16_t sample_TIM13() {
 626              		.loc 7 12 32
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 8
 629              		@ frame_needed = 1, uses_anonymous_args = 0
 630              		@ link register save eliminated.
 631 0000 80B4     		push	{r7}
 632              	.LCFI52:
 633              		.cfi_def_cfa_offset 4
 634              		.cfi_offset 7, -4
 635 0002 83B0     		sub	sp, sp, #12
 636              	.LCFI53:
 637              		.cfi_def_cfa_offset 16
 638 0004 00AF     		add	r7, sp, #0
 639              	.LCFI54:
 640              		.cfi_def_cfa_register 7
  13:Inc/task_timer.hpp ****     constexpr uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLOCK_
 641              		.loc 7 13 24
 642 0006 0223     		movs	r3, #2
 643 0008 FB80     		strh	r3, [r7, #6]	@ movhi
  14:Inc/task_timer.hpp ****     return clocks_per_cnt * TIM15->CNT;  // TODO: Use a hw_config
 644              		.loc 7 14 36
 645 000a 054B     		ldr	r3, .L31
 646 000c 5B6A     		ldr	r3, [r3, #36]
 647 000e 9BB2     		uxth	r3, r3
 648 0010 5B00     		lsls	r3, r3, #1
 649 0012 9BB2     		uxth	r3, r3
  15:Inc/task_timer.hpp **** }
 650              		.loc 7 15 1
 651 0014 1846     		mov	r0, r3
 652 0016 0C37     		adds	r7, r7, #12
 653              	.LCFI55:
 654              		.cfi_def_cfa_offset 4
 655 0018 BD46     		mov	sp, r7
 656              	.LCFI56:
 657              		.cfi_def_cfa_register 13
 658              		@ sp needed
ARM GAS  /tmp/ccATuxCb.s 			page 53


 659 001a 5DF8047B 		ldr	r7, [sp], #4
 660              	.LCFI57:
 661              		.cfi_restore 7
 662              		.cfi_def_cfa_offset 0
 663 001e 7047     		bx	lr
 664              	.L32:
 665              		.align	2
 666              	.L31:
 667 0020 00400140 		.word	1073823744
 668              		.cfi_endproc
 669              	.LFE4796:
 671              		.section	.text._ZN9TaskTimer5startEv,"axG",%progbits,_ZN9TaskTimer5startEv,comdat
 672              		.align	1
 673              		.weak	_ZN9TaskTimer5startEv
 674              		.syntax unified
 675              		.thumb
 676              		.thumb_func
 677              		.fpu fpv4-sp-d16
 679              	_ZN9TaskTimer5startEv:
 680              	.LFB4797:
  16:Inc/task_timer.hpp **** 
  17:Inc/task_timer.hpp **** struct TaskTimer {
  18:Inc/task_timer.hpp ****     uint32_t start_time_ = 0;
  19:Inc/task_timer.hpp ****     uint32_t end_time_ = 0;
  20:Inc/task_timer.hpp ****     uint32_t length_ = 0;
  21:Inc/task_timer.hpp ****     uint32_t max_length_ = 0;
  22:Inc/task_timer.hpp **** 
  23:Inc/task_timer.hpp ****     static bool enabled ;
  24:Inc/task_timer.hpp **** 
  25:Inc/task_timer.hpp ****     uint32_t start() {
 681              		.loc 7 25 14
 682              		.cfi_startproc
 683              		@ args = 0, pretend = 0, frame = 8
 684              		@ frame_needed = 1, uses_anonymous_args = 0
 685 0000 80B5     		push	{r7, lr}
 686              	.LCFI58:
 687              		.cfi_def_cfa_offset 8
 688              		.cfi_offset 7, -8
 689              		.cfi_offset 14, -4
 690 0002 82B0     		sub	sp, sp, #8
 691              	.LCFI59:
 692              		.cfi_def_cfa_offset 16
 693 0004 00AF     		add	r7, sp, #0
 694              	.LCFI60:
 695              		.cfi_def_cfa_register 7
 696 0006 7860     		str	r0, [r7, #4]
  26:Inc/task_timer.hpp ****         return sample_TIM13();
 697              		.loc 7 26 28
 698 0008 FFF7FEFF 		bl	_Z12sample_TIM13v
 699 000c 0346     		mov	r3, r0
  27:Inc/task_timer.hpp ****     }
 700              		.loc 7 27 5
 701 000e 1846     		mov	r0, r3
 702 0010 0837     		adds	r7, r7, #8
 703              	.LCFI61:
 704              		.cfi_def_cfa_offset 8
 705 0012 BD46     		mov	sp, r7
ARM GAS  /tmp/ccATuxCb.s 			page 54


 706              	.LCFI62:
 707              		.cfi_def_cfa_register 13
 708              		@ sp needed
 709 0014 80BD     		pop	{r7, pc}
 710              		.cfi_endproc
 711              	.LFE4797:
 713              		.section	.text._ZN9TaskTimer4stopEm,"axG",%progbits,_ZN9TaskTimer4stopEm,comdat
 714              		.align	1
 715              		.weak	_ZN9TaskTimer4stopEm
 716              		.syntax unified
 717              		.thumb
 718              		.thumb_func
 719              		.fpu fpv4-sp-d16
 721              	_ZN9TaskTimer4stopEm:
 722              	.LFB4798:
  28:Inc/task_timer.hpp **** 
  29:Inc/task_timer.hpp ****     void stop(uint32_t start_time) {
 723              		.loc 7 29 10
 724              		.cfi_startproc
 725              		@ args = 0, pretend = 0, frame = 16
 726              		@ frame_needed = 1, uses_anonymous_args = 0
 727 0000 80B5     		push	{r7, lr}
 728              	.LCFI63:
 729              		.cfi_def_cfa_offset 8
 730              		.cfi_offset 7, -8
 731              		.cfi_offset 14, -4
 732 0002 84B0     		sub	sp, sp, #16
 733              	.LCFI64:
 734              		.cfi_def_cfa_offset 24
 735 0004 00AF     		add	r7, sp, #0
 736              	.LCFI65:
 737              		.cfi_def_cfa_register 7
 738 0006 7860     		str	r0, [r7, #4]
 739 0008 3960     		str	r1, [r7]
  30:Inc/task_timer.hpp ****         uint32_t end_time = sample_TIM13();
 740              		.loc 7 30 41
 741 000a FFF7FEFF 		bl	_Z12sample_TIM13v
 742 000e 0346     		mov	r3, r0
 743              		.loc 7 30 42
 744 0010 FB60     		str	r3, [r7, #12]
  31:Inc/task_timer.hpp ****         uint32_t length = end_time - start_time;
 745              		.loc 7 31 36
 746 0012 FA68     		ldr	r2, [r7, #12]
 747 0014 3B68     		ldr	r3, [r7]
 748 0016 D31A     		subs	r3, r2, r3
 749              		.loc 7 31 18
 750 0018 BB60     		str	r3, [r7, #8]
  32:Inc/task_timer.hpp **** 
  33:Inc/task_timer.hpp ****         if (enabled) {
 751              		.loc 7 33 9
 752 001a 0E4B     		ldr	r3, .L37
 753 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 754 001e 002B     		cmp	r3, #0
 755 0020 08D0     		beq	.L36
  34:Inc/task_timer.hpp **** #ifdef MEASURE_START_TIME
  35:Inc/task_timer.hpp ****             start_time_ = start_time;
 756              		.loc 7 35 25
ARM GAS  /tmp/ccATuxCb.s 			page 55


 757 0022 7B68     		ldr	r3, [r7, #4]
 758 0024 3A68     		ldr	r2, [r7]
 759 0026 1A60     		str	r2, [r3]
  36:Inc/task_timer.hpp **** #endif
  37:Inc/task_timer.hpp **** #ifdef MEASURE_END_TIME
  38:Inc/task_timer.hpp ****             end_time_ = end_time;
 760              		.loc 7 38 23
 761 0028 7B68     		ldr	r3, [r7, #4]
 762 002a FA68     		ldr	r2, [r7, #12]
 763 002c 5A60     		str	r2, [r3, #4]
  39:Inc/task_timer.hpp **** #endif
  40:Inc/task_timer.hpp **** #ifdef MEASURE_LENGTH
  41:Inc/task_timer.hpp ****             length_ = length;
 764              		.loc 7 41 21
 765 002e BA68     		ldr	r2, [r7, #8]
 766 0030 7B68     		ldr	r3, [r7, #4]
 767 0032 9A60     		str	r2, [r3, #8]
 768              	.L36:
  42:Inc/task_timer.hpp **** #endif
  43:Inc/task_timer.hpp ****         }
  44:Inc/task_timer.hpp **** #ifdef MEASURE_MAX_LENGTH
  45:Inc/task_timer.hpp ****         max_length_ = std::max(max_length_, length);
 769              		.loc 7 45 32
 770 0034 7B68     		ldr	r3, [r7, #4]
 771 0036 0C33     		adds	r3, r3, #12
 772              		.loc 7 45 51
 773 0038 07F10802 		add	r2, r7, #8
 774 003c 1146     		mov	r1, r2
 775 003e 1846     		mov	r0, r3
 776 0040 FFF7FEFF 		bl	_ZSt3maxImERKT_S2_S2_
 777 0044 0346     		mov	r3, r0
 778              		.loc 7 45 31
 779 0046 1A68     		ldr	r2, [r3]
 780              		.loc 7 45 21
 781 0048 7B68     		ldr	r3, [r7, #4]
 782 004a DA60     		str	r2, [r3, #12]
  46:Inc/task_timer.hpp **** #endif
  47:Inc/task_timer.hpp ****     }
 783              		.loc 7 47 5
 784 004c 00BF     		nop
 785 004e 1037     		adds	r7, r7, #16
 786              	.LCFI66:
 787              		.cfi_def_cfa_offset 8
 788 0050 BD46     		mov	sp, r7
 789              	.LCFI67:
 790              		.cfi_def_cfa_register 13
 791              		@ sp needed
 792 0052 80BD     		pop	{r7, pc}
 793              	.L38:
 794              		.align	2
 795              	.L37:
 796 0054 00000000 		.word	_ZN9TaskTimer7enabledE
 797              		.cfi_endproc
 798              	.LFE4798:
 800              		.section	.text._ZN16TaskTimerContextC2ER9TaskTimer,"axG",%progbits,_ZN16TaskTimerContextC5ER9TaskT
 801              		.align	1
 802              		.weak	_ZN16TaskTimerContextC2ER9TaskTimer
ARM GAS  /tmp/ccATuxCb.s 			page 56


 803              		.syntax unified
 804              		.thumb
 805              		.thumb_func
 806              		.fpu fpv4-sp-d16
 808              	_ZN16TaskTimerContextC2ER9TaskTimer:
 809              	.LFB4800:
  48:Inc/task_timer.hpp **** };
  49:Inc/task_timer.hpp **** 
  50:Inc/task_timer.hpp **** struct TaskTimerContext {
  51:Inc/task_timer.hpp ****     TaskTimerContext(const TaskTimerContext&) = delete;
  52:Inc/task_timer.hpp ****     TaskTimerContext(const TaskTimerContext&&) = delete;
  53:Inc/task_timer.hpp ****     void operator=(const TaskTimerContext&) = delete;
  54:Inc/task_timer.hpp ****     void operator=(const TaskTimerContext&&) = delete;
  55:Inc/task_timer.hpp ****     TaskTimerContext(TaskTimer& timer) : timer_(timer), start_time(timer.start()) {}
 810              		.loc 7 55 5
 811              		.cfi_startproc
 812              		@ args = 0, pretend = 0, frame = 8
 813              		@ frame_needed = 1, uses_anonymous_args = 0
 814 0000 80B5     		push	{r7, lr}
 815              	.LCFI68:
 816              		.cfi_def_cfa_offset 8
 817              		.cfi_offset 7, -8
 818              		.cfi_offset 14, -4
 819 0002 82B0     		sub	sp, sp, #8
 820              	.LCFI69:
 821              		.cfi_def_cfa_offset 16
 822 0004 00AF     		add	r7, sp, #0
 823              	.LCFI70:
 824              		.cfi_def_cfa_register 7
 825 0006 7860     		str	r0, [r7, #4]
 826 0008 3960     		str	r1, [r7]
 827              	.LBB8:
 828              		.loc 7 55 81
 829 000a 7B68     		ldr	r3, [r7, #4]
 830 000c 3A68     		ldr	r2, [r7]
 831 000e 1A60     		str	r2, [r3]
 832              		.loc 7 55 79
 833 0010 3868     		ldr	r0, [r7]
 834 0012 FFF7FEFF 		bl	_ZN9TaskTimer5startEv
 835 0016 0246     		mov	r2, r0
 836              		.loc 7 55 81
 837 0018 7B68     		ldr	r3, [r7, #4]
 838 001a 5A60     		str	r2, [r3, #4]
 839 001c 7B68     		ldr	r3, [r7, #4]
 840 001e 0022     		movs	r2, #0
 841 0020 1A72     		strb	r2, [r3, #8]
 842              	.LBE8:
 843              		.loc 7 55 84
 844 0022 7B68     		ldr	r3, [r7, #4]
 845 0024 1846     		mov	r0, r3
 846 0026 0837     		adds	r7, r7, #8
 847              	.LCFI71:
 848              		.cfi_def_cfa_offset 8
 849 0028 BD46     		mov	sp, r7
 850              	.LCFI72:
 851              		.cfi_def_cfa_register 13
 852              		@ sp needed
ARM GAS  /tmp/ccATuxCb.s 			page 57


 853 002a 80BD     		pop	{r7, pc}
 854              		.cfi_endproc
 855              	.LFE4800:
 857              		.weak	_ZN16TaskTimerContextC1ER9TaskTimer
 858              		.thumb_set _ZN16TaskTimerContextC1ER9TaskTimer,_ZN16TaskTimerContextC2ER9TaskTimer
 859              		.section	.text._ZN16TaskTimerContextD2Ev,"axG",%progbits,_ZN16TaskTimerContextD5Ev,comdat
 860              		.align	1
 861              		.weak	_ZN16TaskTimerContextD2Ev
 862              		.syntax unified
 863              		.thumb
 864              		.thumb_func
 865              		.fpu fpv4-sp-d16
 867              	_ZN16TaskTimerContextD2Ev:
 868              	.LFB4803:
  56:Inc/task_timer.hpp ****     ~TaskTimerContext() { timer_.stop(start_time); }
 869              		.loc 7 56 5
 870              		.cfi_startproc
 871              		@ args = 0, pretend = 0, frame = 8
 872              		@ frame_needed = 1, uses_anonymous_args = 0
 873 0000 80B5     		push	{r7, lr}
 874              	.LCFI73:
 875              		.cfi_def_cfa_offset 8
 876              		.cfi_offset 7, -8
 877              		.cfi_offset 14, -4
 878 0002 82B0     		sub	sp, sp, #8
 879              	.LCFI74:
 880              		.cfi_def_cfa_offset 16
 881 0004 00AF     		add	r7, sp, #0
 882              	.LCFI75:
 883              		.cfi_def_cfa_register 7
 884 0006 7860     		str	r0, [r7, #4]
 885              	.LBB9:
 886              		.loc 7 56 27
 887 0008 7B68     		ldr	r3, [r7, #4]
 888 000a 1A68     		ldr	r2, [r3]
 889              		.loc 7 56 38
 890 000c 7B68     		ldr	r3, [r7, #4]
 891 000e 5B68     		ldr	r3, [r3, #4]
 892 0010 1946     		mov	r1, r3
 893 0012 1046     		mov	r0, r2
 894 0014 FFF7FEFF 		bl	_ZN9TaskTimer4stopEm
 895              	.LBE9:
 896              		.loc 7 56 52
 897 0018 7B68     		ldr	r3, [r7, #4]
 898 001a 1846     		mov	r0, r3
 899 001c 0837     		adds	r7, r7, #8
 900              	.LCFI76:
 901              		.cfi_def_cfa_offset 8
 902 001e BD46     		mov	sp, r7
 903              	.LCFI77:
 904              		.cfi_def_cfa_register 13
 905              		@ sp needed
 906 0020 80BD     		pop	{r7, pc}
 907              		.cfi_endproc
 908              	.LFE4803:
 910              		.weak	_ZN16TaskTimerContextD1Ev
 911              		.thumb_set _ZN16TaskTimerContextD1Ev,_ZN16TaskTimerContextD2Ev
ARM GAS  /tmp/ccATuxCb.s 			page 58


 912              		.section	.text.cpu_enter_critical,"axG",%progbits,cpu_enter_critical,comdat
 913              		.align	1
 914              		.weak	cpu_enter_critical
 915              		.syntax unified
 916              		.thumb
 917              		.thumb_func
 918              		.fpu fpv4-sp-d16
 920              	cpu_enter_critical:
 921              	.LFB4810:
 922              		.file 8 "Inc/low_level.h"
   1:Inc/low_level.h **** /* Define to prevent recursive inclusion -------------------------------------*/
   2:Inc/low_level.h **** #ifndef __LOW_LEVEL_H
   3:Inc/low_level.h **** #define __LOW_LEVEL_H
   4:Inc/low_level.h **** 
   5:Inc/low_level.h **** 
   6:Inc/low_level.h **** #ifdef __cplusplus
   7:Inc/low_level.h **** // Forward declare Motor class before extern "C" block
   8:Inc/low_level.h **** class Motor;
   9:Inc/low_level.h **** 
  10:Inc/low_level.h **** extern "C" {
  11:Inc/low_level.h **** #endif
  12:Inc/low_level.h **** 
  13:Inc/low_level.h **** /* Includes ------------------------------------------------------------------*/
  14:Inc/low_level.h **** #include <cmsis_os.h>
  15:Inc/low_level.h **** #include <stdbool.h>
  16:Inc/low_level.h **** #include "stm32g4xx_hal.h"  // Add this for ADC_HandleTypeDef and TIM_HandleTypeDef
  17:Inc/low_level.h **** #include "stm32g4xx_hal_adc.h" // Add this for TIM_HandleTypeDef
  18:Inc/low_level.h **** 
  19:Inc/low_level.h **** 
  20:Inc/low_level.h **** /* Exported types ------------------------------------------------------------*/
  21:Inc/low_level.h **** /* Exported constants --------------------------------------------------------*/
  22:Inc/low_level.h **** #define ADC_CHANNEL_COUNT 16
  23:Inc/low_level.h **** extern const float adc_full_scale;
  24:Inc/low_level.h **** extern const float adc_ref_voltage;
  25:Inc/low_level.h **** /* Exported variables --------------------------------------------------------*/
  26:Inc/low_level.h **** extern float vbus_voltage;
  27:Inc/low_level.h **** extern float ibus_;
  28:Inc/low_level.h **** extern bool brake_resistor_armed;
  29:Inc/low_level.h **** extern bool brake_resistor_saturated;
  30:Inc/low_level.h **** extern uint16_t adc_measurements_[ADC_CHANNEL_COUNT];
  31:Inc/low_level.h **** /* Exported macro ------------------------------------------------------------*/
  32:Inc/low_level.h **** /* Exported functions --------------------------------------------------------*/
  33:Inc/low_level.h **** 
  34:Inc/low_level.h **** void safety_critical_arm_motor_pwm(Motor& motor);
  35:Inc/low_level.h **** bool safety_critical_disarm_motor_pwm(Motor& motor);
  36:Inc/low_level.h **** void safety_critical_apply_motor_pwm_timings(Motor& motor, uint16_t timings[3]);
  37:Inc/low_level.h **** void safety_critical_arm_brake_resistor();
  38:Inc/low_level.h **** void safety_critical_disarm_brake_resistor();
  39:Inc/low_level.h **** void safety_critical_apply_brake_resistor_timings(uint32_t low_off, uint32_t high_on);
  40:Inc/low_level.h **** 
  41:Inc/low_level.h **** // called from STM platform code
  42:Inc/low_level.h **** extern "C" {
  43:Inc/low_level.h **** void pwm_trig_adc_cb(ADC_TypeDef* hadc, bool injected);
  44:Inc/low_level.h **** void vbus_sense_adc_cb(ADC_HandleTypeDef* hadc, bool injected);
  45:Inc/low_level.h **** void tim_update_cb(TIM_HandleTypeDef* htim);
  46:Inc/low_level.h **** void pwm_in_cb(int channel, uint32_t timestamp);
  47:Inc/low_level.h **** void send_notification(void);
ARM GAS  /tmp/ccATuxCb.s 			page 59


  48:Inc/low_level.h **** }
  49:Inc/low_level.h **** 
  50:Inc/low_level.h **** // Initalisation
  51:Inc/low_level.h **** void start_adc_pwm();
  52:Inc/low_level.h **** void start_pwm(TIM_HandleTypeDef* htim);
  53:Inc/low_level.h **** void sync_timers(TIM_HandleTypeDef* htim_a, TIM_HandleTypeDef* htim_b,
  54:Inc/low_level.h ****                  uint16_t TIM_CLOCKSOURCE_ITRx, uint16_t count_offset,
  55:Inc/low_level.h ****                  TIM_HandleTypeDef* htim_refbase = nullptr);
  56:Inc/low_level.h **** void start_general_purpose_adc();
  57:Inc/low_level.h **** float get_adc_voltage(const GPIO_TypeDef* const GPIO_port, uint16_t GPIO_pin);
  58:Inc/low_level.h **** uint16_t channel_from_gpio(const GPIO_TypeDef* const GPIO_port, uint16_t GPIO_pin);
  59:Inc/low_level.h **** float get_adc_voltage_channel(uint16_t channel);
  60:Inc/low_level.h **** void pwm_in_init();
  61:Inc/low_level.h **** void start_analog_thread();
  62:Inc/low_level.h **** 
  63:Inc/low_level.h **** void update_brake_current();
  64:Inc/low_level.h **** 
  65:Inc/low_level.h **** inline uint32_t cpu_enter_critical() {
 923              		.loc 8 65 38
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 8
 926              		@ frame_needed = 1, uses_anonymous_args = 0
 927              		@ link register save eliminated.
 928 0000 80B4     		push	{r7}
 929              	.LCFI78:
 930              		.cfi_def_cfa_offset 4
 931              		.cfi_offset 7, -4
 932 0002 83B0     		sub	sp, sp, #12
 933              	.LCFI79:
 934              		.cfi_def_cfa_offset 16
 935 0004 00AF     		add	r7, sp, #0
 936              	.LCFI80:
 937              		.cfi_def_cfa_register 7
 938              	.LBB10:
 939              	.LBB11:
 940              		.file 9 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
ARM GAS  /tmp/ccATuxCb.s 			page 60


  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
ARM GAS  /tmp/ccATuxCb.s 			page 61


  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
ARM GAS  /tmp/ccATuxCb.s 			page 62


 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
ARM GAS  /tmp/ccATuxCb.s 			page 63


 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccATuxCb.s 			page 64


 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 260:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccATuxCb.s 			page 65


 307:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccATuxCb.s 			page 66


 364:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 402:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 419:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
ARM GAS  /tmp/ccATuxCb.s 			page 67


 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 941              		.loc 9 453 3
 942              		.syntax unified
 943              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 944 0006 EFF31083 		MRS r3, primask
 945              	@ 0 "" 2
 946              		.thumb
 947              		.syntax unified
 948 000a 3B60     		str	r3, [r7]
 454:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 949              		.loc 9 454 16
 950 000c 3B68     		ldr	r3, [r7]
 951              	.LBE11:
 952              	.LBE10:
  66:Inc/low_level.h ****     uint32_t primask = __get_PRIMASK();
 953              		.loc 8 66 37
 954 000e 7B60     		str	r3, [r7, #4]
 955              	.LBB12:
 956              	.LBB13:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 957              		.loc 9 209 3
 958              		.syntax unified
 959              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 960 0010 72B6     		cpsid i
 961              	@ 0 "" 2
ARM GAS  /tmp/ccATuxCb.s 			page 68


 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 962              		.loc 9 210 1
 963              		.thumb
 964              		.syntax unified
 965 0012 00BF     		nop
 966              	.LBE13:
 967              	.LBE12:
  67:Inc/low_level.h ****     __disable_irq();
  68:Inc/low_level.h ****     return primask;
 968              		.loc 8 68 12
 969 0014 7B68     		ldr	r3, [r7, #4]
  69:Inc/low_level.h **** }
 970              		.loc 8 69 1
 971 0016 1846     		mov	r0, r3
 972 0018 0C37     		adds	r7, r7, #12
 973              	.LCFI81:
 974              		.cfi_def_cfa_offset 4
 975 001a BD46     		mov	sp, r7
 976              	.LCFI82:
 977              		.cfi_def_cfa_register 13
 978              		@ sp needed
 979 001c 5DF8047B 		ldr	r7, [sp], #4
 980              	.LCFI83:
 981              		.cfi_restore 7
 982              		.cfi_def_cfa_offset 0
 983 0020 7047     		bx	lr
 984              		.cfi_endproc
 985              	.LFE4810:
 987              		.section	.text.cpu_exit_critical,"axG",%progbits,cpu_exit_critical,comdat
 988              		.align	1
 989              		.weak	cpu_exit_critical
 990              		.syntax unified
 991              		.thumb
 992              		.thumb_func
 993              		.fpu fpv4-sp-d16
 995              	cpu_exit_critical:
 996              	.LFB4811:
  70:Inc/low_level.h **** 
  71:Inc/low_level.h **** inline void cpu_exit_critical(uint32_t priority_mask) {
 997              		.loc 8 71 55
 998              		.cfi_startproc
 999              		@ args = 0, pretend = 0, frame = 16
 1000              		@ frame_needed = 1, uses_anonymous_args = 0
 1001              		@ link register save eliminated.
 1002 0000 80B4     		push	{r7}
 1003              	.LCFI84:
 1004              		.cfi_def_cfa_offset 4
 1005              		.cfi_offset 7, -4
 1006 0002 85B0     		sub	sp, sp, #20
 1007              	.LCFI85:
 1008              		.cfi_def_cfa_offset 24
 1009 0004 00AF     		add	r7, sp, #0
 1010              	.LCFI86:
 1011              		.cfi_def_cfa_register 7
 1012 0006 7860     		str	r0, [r7, #4]
 1013 0008 7B68     		ldr	r3, [r7, #4]
 1014 000a FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccATuxCb.s 			page 69


 1015              	.LBB14:
 1016              	.LBB15:
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1017              		.loc 9 481 3
 1018 000c FB68     		ldr	r3, [r7, #12]
 1019              		.syntax unified
 1020              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1021 000e 83F31088 		MSR primask, r3
 1022              	@ 0 "" 2
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1023              		.loc 9 482 1
 1024              		.thumb
 1025              		.syntax unified
 1026 0012 00BF     		nop
 1027              	.LBE15:
 1028              	.LBE14:
  72:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
  73:Inc/low_level.h **** }
 1029              		.loc 8 73 1
 1030 0014 00BF     		nop
 1031 0016 1437     		adds	r7, r7, #20
 1032              	.LCFI87:
 1033              		.cfi_def_cfa_offset 4
 1034 0018 BD46     		mov	sp, r7
 1035              	.LCFI88:
 1036              		.cfi_def_cfa_register 13
 1037              		@ sp needed
 1038 001a 5DF8047B 		ldr	r7, [sp], #4
 1039              	.LCFI89:
 1040              		.cfi_restore 7
 1041              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccATuxCb.s 			page 70


 1042 001e 7047     		bx	lr
 1043              		.cfi_endproc
 1044              	.LFE4811:
 1046              		.section	.text._ZSt5clampIfERKT_S2_S2_S2_,"axG",%progbits,_ZSt5clampIfERKT_S2_S2_S2_,comdat
 1047              		.align	1
 1048              		.weak	_ZSt5clampIfERKT_S2_S2_S2_
 1049              		.syntax unified
 1050              		.thumb
 1051              		.thumb_func
 1052              		.fpu fpv4-sp-d16
 1054              	_ZSt5clampIfERKT_S2_S2_S2_:
 1055              	.LFB4819:
 1056              		.file 10 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // Algorithm implementation -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** /*
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  *
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * Copyright (c) 1994
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * Hewlett-Packard Company
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  *
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * representations about the suitability of this software for any
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  *
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  *
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * Copyright (c) 1996
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  *
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * provided that the above copyright notice appear in all copies and
ARM GAS  /tmp/ccATuxCb.s 			page 71


  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * representations about the suitability of this software for any
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  */
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** /** @file bits/stl_algo.h
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  */
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #ifndef _STL_ALGO_H
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #define _STL_ALGO_H 1
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #include <cstdlib>	     // for rand
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #include <bits/algorithmfwd.h>
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #include <bits/stl_heap.h>
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #include <bits/stl_tempbuf.h>  // for _Temporary_buffer
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #include <bits/predefined_ops.h>
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #if __cplusplus >= 201103L
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #include <bits/uniform_int_dist.h>
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #endif
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // See concept_check.h for the __glibcxx_*_requires macros.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** namespace std _GLIBCXX_VISIBILITY(default)
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** {
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// Swaps the median value of *__a, *__b and *__c under __comp to *__result
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Iterator, typename _Compare>
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _Iterator __c, _Compare __comp)
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__comp(__a, __b))
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__b, __c))
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::iter_swap(__result, __b);
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else if (__comp(__a, __c))
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::iter_swap(__result, __c);
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::iter_swap(__result, __a);
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else if (__comp(__a, __c))
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::iter_swap(__result, __a);
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else if (__comp(__b, __c))
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::iter_swap(__result, __c);
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::iter_swap(__result, __b);
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// Provided for stable_partition to use.
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
ARM GAS  /tmp/ccATuxCb.s 			page 72


 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _InputIterator
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __find_if_not(_InputIterator __first, _InputIterator __last,
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _Predicate __pred)
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__find_if(__first, __last,
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			    __gnu_cxx::__ops::__negate(__pred),
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			    std::__iterator_category(__first));
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// Like find_if_not(), but uses and updates a count of the
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// remaining range length instead of comparing against an end
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// iterator.
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate, typename _Distance>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _InputIterator
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __find_if_not_n(_InputIterator __first, _Distance& __len, _Predicate __pred)
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (; __len; --__len,  (void) ++__first)
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (!__pred(__first))
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  break;
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __first;
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // set_difference
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // set_intersection
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // set_symmetric_difference
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // set_union
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // for_each
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // find
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // find_if
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // find_first_of
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // adjacent_find
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // count
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // count_if
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // search
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator1
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _BinaryPredicate  __predicate)
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // Test for empty ranges
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first1 == __last1 || __first2 == __last2)
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __first1;
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // Test for a pattern of length 1.
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator2 __p1(__first2);
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (++__p1 == __last2)
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return std::__find_if(__first1, __last1,
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // General case.
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator1 __current = __first1;
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
ARM GAS  /tmp/ccATuxCb.s 			page 73


 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (;;)
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __first1 =
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::__find_if(__first1, __last1,
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__first1 == __last1)
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return __last1;
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _ForwardIterator2 __p = __p1;
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __current = __first1;
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (++__current == __last1)
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return __last1;
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  while (__predicate(__current, __p))
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (++__p == __last2)
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		return __first1;
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (++__current == __last1)
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		return __last1;
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first1;
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __first1;
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // search_n
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is an helper function for search_n overloaded for forward iterators.
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Integer,
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _UnaryPredicate>
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __search_n_aux(_ForwardIterator __first, _ForwardIterator __last,
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _Integer __count, _UnaryPredicate __unary_pred,
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   std::forward_iterator_tag)
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __first = std::__find_if(__first, __last, __unary_pred);
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first != __last)
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::difference_type
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __n = __count;
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _ForwardIterator __i = __first;
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__i;
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  while (__i != __last && __n != 1 && __unary_pred(__i))
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__i;
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      --__n;
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__n == 1)
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return __first;
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__i == __last)
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return __last;
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __first = std::__find_if(++__i, __last, __unary_pred);
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
ARM GAS  /tmp/ccATuxCb.s 			page 74


 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __last;
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is an helper function for search_n overloaded for random access
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  iterators.
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIter, typename _Integer,
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _UnaryPredicate>
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _RandomAccessIter
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last,
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _Integer __count, _UnaryPredicate __unary_pred,
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   std::random_access_iterator_tag)
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_DistanceType;
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _DistanceType __tailSize = __last - __first;
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _DistanceType __remainder = __count;
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__remainder <= __tailSize) // the main loop...
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __first += __remainder;
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __tailSize -= __remainder;
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  // __first here is always pointing to one past the last element of
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  // next possible match.
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _RandomAccessIter __backTrack = __first; 
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  while (__unary_pred(--__backTrack))
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (--__remainder == 0)
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		return (__first - __count); // Success
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __remainder = __count + 1 - (__first - __backTrack);
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __last; // Failure
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Integer,
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _UnaryPredicate>
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __search_n(_ForwardIterator __first, _ForwardIterator __last,
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _Integer __count,
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _UnaryPredicate __unary_pred)
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__count <= 0)
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __first;
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__count == 1)
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return std::__find_if(__first, __last, __unary_pred);
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__search_n_aux(__first, __last, __count, __unary_pred,
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				 std::__iterator_category(__first));
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // find_end for forward iterators.
ARM GAS  /tmp/ccATuxCb.s 			page 75


 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator1
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _ForwardIterator2 __first2, _ForwardIterator2 __last2,
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       forward_iterator_tag, forward_iterator_tag,
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _BinaryPredicate __comp)
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first2 == __last2)
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __last1;
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator1 __result = __last1;
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (1)
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _ForwardIterator1 __new_result
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    = std::__search(__first1, __last1, __first2, __last2, __comp);
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__new_result == __last1)
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return __result;
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __result = __new_result;
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __first1 = __new_result;
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__first1;
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // find_end for bidirectional iterators (much faster).
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _BidirectionalIterator1
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __find_end(_BidirectionalIterator1 __first1,
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _BidirectionalIterator1 __last1,
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _BidirectionalIterator2 __first2,
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _BidirectionalIterator2 __last2,
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       bidirectional_iterator_tag, bidirectional_iterator_tag,
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _BinaryPredicate __comp)
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _BidirectionalIterator1>)
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _BidirectionalIterator2>)
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _RevIterator1 __rlast1(__first1);
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _RevIterator2 __rlast2(__first2);
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _RevIterator1 __rresult = std::__search(_RevIterator1(__last1), __rlast1,
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					      _RevIterator2(__last2), __rlast2,
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					      __comp);
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__rresult == __rlast1)
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __last1;
ARM GAS  /tmp/ccATuxCb.s 			page 76


 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _BidirectionalIterator1 __result = __rresult.base();
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::advance(__result, -std::distance(__first2, __last2));
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return __result;
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Find last matching subsequence in a sequence.
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first1  Start of range to search.
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last1   End of range to search.
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first2  Start of sequence to match.
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last2   End of sequence to match.
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   The last iterator @c i in the range
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__first1,__last1-(__last2-__first2)) such that @c *(i+N) ==
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p *(__first2+N) for each @c N in the range @p
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [0,__last2-__first2), or @p __last1 if no such iterator exists.
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Searches the range @p [__first1,__last1) for a sub-sequence that
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  compares equal value-by-value with the sequence given by @p
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first2,__last2) and returns an iterator to the __first
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  element of the sub-sequence, or @p __last1 if the sub-sequence
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  is not found.  The sub-sequence will be the last such
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  subsequence contained in [__first1,__last1).
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Because the sub-sequence must lie completely within the range @p
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first1,__last1) it must start at a position less than @p
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  __last1-(__last2-__first2) where @p __last2-__first2 is the
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  length of the sub-sequence.  This means that the returned
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  iterator @c i will be in the range @p
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first1,__last1-(__last2-__first2))
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator1
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _ForwardIterator2 __first2, _ForwardIterator2 __last2)
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator1>::value_type,
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator2>::value_type>)
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__find_end(__first1, __last1, __first2, __last2,
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     std::__iterator_category(__first1),
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     std::__iterator_category(__first2),
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_equal_to_iter());
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Find last matching subsequence in a sequence using a predicate.
ARM GAS  /tmp/ccATuxCb.s 			page 77


 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first1  Start of range to search.
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last1   End of range to search.
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first2  Start of sequence to match.
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last2   End of sequence to match.
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    The predicate to use.
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return The last iterator @c i in the range @p
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first1,__last1-(__last2-__first2)) such that @c
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  predicate(*(i+N), @p (__first2+N)) is true for each @c N in the
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  range @p [0,__last2-__first2), or @p __last1 if no such iterator
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  exists.
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Searches the range @p [__first1,__last1) for a sub-sequence that
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  compares equal value-by-value with the sequence given by @p
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first2,__last2) using comp as a predicate and returns an
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  iterator to the first element of the sub-sequence, or @p __last1
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  if the sub-sequence is not found.  The sub-sequence will be the
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  last such subsequence contained in [__first,__last1).
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Because the sub-sequence must lie completely within the range @p
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first1,__last1) it must start at a position less than @p
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  __last1-(__last2-__first2) where @p __last2-__first2 is the
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  length of the sub-sequence.  This means that the returned
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  iterator @c i will be in the range @p
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first1,__last1-(__last2-__first2))
 412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
 414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator1
 417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _BinaryPredicate __comp)
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
 424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
 425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator1>::value_type,
 426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator2>::value_type>)
 427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
 429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__find_end(__first1, __last1, __first2, __last2,
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     std::__iterator_category(__first1),
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     std::__iterator_category(__first2),
 433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_comp_iter(__comp));
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #if __cplusplus >= 201103L
 437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Checks that a predicate is true for all the elements
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          of a sequence.
 440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
ARM GAS  /tmp/ccATuxCb.s 			page 78


 444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  True if the check is true, false otherwise.
 445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Returns true if @p __pred is true for each element in the range
 447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__first,__last), and false otherwise.
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return __last == std::find_if_not(__first, __last, __pred); }
 454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Checks that a predicate is false for all the elements
 457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          of a sequence.
 458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  True if the check is true, false otherwise.
 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Returns true if @p __pred is false for each element in the range
 465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__first,__last), and false otherwise.
 466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
 470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return __last == _GLIBCXX_STD_A::find_if(__first, __last, __pred); }
 472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Checks that a predicate is true for at least one element
 475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          of a sequence.
 476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  True if the check is true, false otherwise.
 481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Returns true if an element exists in the range @p
 483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first,__last) such that @p __pred is true, and false
 484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  otherwise.
 485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
 489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return !std::none_of(__first, __last, __pred); }
 491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Find the first element in a sequence for which a
 494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          predicate is false.
 495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   An input iterator.
 498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred   A predicate.
 499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   The first iterator @c i in the range @p [__first,__last)
 500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  such that @p __pred(*i) is false, or @p __last if no such iterator exists.
ARM GAS  /tmp/ccATuxCb.s 			page 79


 501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _InputIterator
 505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     find_if_not(_InputIterator __first, _InputIterator __last,
 506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		_Predicate __pred)
 507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      typename iterator_traits<_InputIterator>::value_type>)
 512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__find_if_not(__first, __last,
 514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__pred_iter(__pred));
 515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Checks whether the sequence is partitioned.
 519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   An input iterator.
 522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred   A predicate.
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  True if the range @p [__first,__last) is partioned by @p __pred,
 524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  i.e. if all elements that satisfy @p __pred appear before those that
 525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  do not.
 526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
 530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     is_partitioned(_InputIterator __first, _InputIterator __last,
 531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _Predicate __pred)
 532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __first = std::find_if_not(__first, __last, __pred);
 534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
 535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return true;
 536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       ++__first;
 537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::none_of(__first, __last, __pred);
 538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Find the partition point of a partitioned range.
 542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
 544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
 545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An iterator @p mid such that @p all_of(__first, mid, __pred)
 547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           and @p none_of(mid, __last, __pred) are both true.
 548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
 550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
 552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     partition_point(_ForwardIterator __first, _ForwardIterator __last,
 553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		    _Predicate __pred)
 554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
 557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
ARM GAS  /tmp/ccATuxCb.s 			page 80


 558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      typename iterator_traits<_ForwardIterator>::value_type>)
 559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // A specific debug-mode test will be necessary...
 561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
 564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_DistanceType;
 565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _DistanceType __len = std::distance(__first, __last);
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__len > 0)
 569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
 570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _DistanceType __half = __len >> 1;
 571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _ForwardIterator __middle = __first;
 572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::advance(__middle, __half);
 573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__pred(*__middle))
 574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
 575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __first = __middle;
 576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__first;
 577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __len = __len - __half - 1;
 578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
 579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
 580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __len = __half;
 581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
 582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __first;
 583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #endif
 585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
 587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Predicate>
 588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _OutputIterator
 590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __remove_copy_if(_InputIterator __first, _InputIterator __last,
 591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _OutputIterator __result, _Predicate __pred)
 592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (!__pred(__first))
 595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
 596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    *__result = *__first;
 597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__result;
 598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
 599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __result;
 600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy a sequence, removing elements of a given value.
 604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result  An output iterator.
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __value   The value to be removed.
 609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) not equal
 612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  to @p __value to the range beginning at @p __result.
 613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  remove_copy() is stable, so the relative order of elements that
 614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  are copied is unchanged.
ARM GAS  /tmp/ccATuxCb.s 			page 81


 615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator, typename _Tp>
 617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _OutputIterator
 619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     remove_copy(_InputIterator __first, _InputIterator __last,
 620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		_OutputIterator __result, const _Tp& __value)
 621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
 627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type, _Tp>)
 628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__remove_copy_if(__first, __last, __result,
 631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	__gnu_cxx::__ops::__iter_equals_val(__value));
 632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy a sequence, removing elements for which a predicate is true.
 636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result  An output iterator.
 640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) for which
 644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p __pred returns false to the range beginning at @p __result.
 645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  remove_copy_if() is stable, so the relative order of elements that are
 647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  copied is unchanged.
 648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
 650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Predicate>
 651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _OutputIterator
 653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     remove_copy_if(_InputIterator __first, _InputIterator __last,
 654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _OutputIterator __result, _Predicate __pred)
 655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__remove_copy_if(__first, __last, __result,
 665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__pred_iter(__pred));
 666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #if __cplusplus >= 201103L
 669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy the elements of a sequence for which a predicate is true.
 671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
ARM GAS  /tmp/ccATuxCb.s 			page 82


 672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result  An output iterator.
 675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) for which
 679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p __pred returns true to the range beginning at @p __result.
 680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  copy_if() is stable, so the relative order of elements that are
 682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  copied is unchanged.
 683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
 685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Predicate>
 686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _OutputIterator
 688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     copy_if(_InputIterator __first, _InputIterator __last,
 689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    _OutputIterator __result, _Predicate __pred)
 690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (__pred(*__first))
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    *__result = *__first;
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__result;
 704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
 705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __result;
 706:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 707:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 708:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Size, typename _OutputIterator>
 709:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 710:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _OutputIterator
 711:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __copy_n_a(_InputIterator __first, _Size __n, _OutputIterator __result)
 712:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 713:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__n > 0)
 714:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
 715:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  while (true)
 716:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
 717:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      *__result = *__first;
 718:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__result;
 719:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (--__n > 0)
 720:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		++__first;
 721:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      else
 722:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		break;
 723:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
 724:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
 725:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __result;
 726:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 727:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  
 728:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _CharT, typename _Size>
ARM GAS  /tmp/ccATuxCb.s 			page 83


 729:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __enable_if_t<__is_char<_CharT>::__value, _CharT*>
 730:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT>>,
 731:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _Size, _CharT*);
 732:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 733:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Size, typename _OutputIterator>
 734:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 735:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _OutputIterator
 736:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __copy_n(_InputIterator __first, _Size __n,
 737:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _OutputIterator __result, input_iterator_tag)
 738:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 739:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__niter_wrap(__result,
 740:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			       __copy_n_a(__first, __n,
 741:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					  std::__niter_base(__result)));
 742:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 743:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 744:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Size,
 745:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _OutputIterator>
 746:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 747:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _OutputIterator
 748:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __copy_n(_RandomAccessIterator __first, _Size __n,
 749:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _OutputIterator __result, random_access_iterator_tag)
 750:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return std::copy(__first, __first + __n, __result); }
 751:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 752:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 753:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copies the range [first,first+n) into [result,result+n).
 754:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 755:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 756:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __n      The number of elements to copy.
 757:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result An output iterator.
 758:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  result+n.
 759:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 760:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This inline function will boil down to a call to @c memmove whenever
 761:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 762:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  loop count will be known (and therefore a candidate for compiler
 763:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  optimizations such as unrolling).
 764:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 765:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Size, typename _OutputIterator>
 766:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 767:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _OutputIterator
 768:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
 769:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 770:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 771:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 772:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 773:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 774:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_can_increment(__first, __n);
 775:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_can_increment(__result, __n);
 776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 777:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__copy_n(__first, __n, __result,
 778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   std::__iterator_category(__first));
 779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 781:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 782:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy the elements of a sequence to separate output sequences
 783:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         depending on the truth value of a predicate.
 784:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 785:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
ARM GAS  /tmp/ccATuxCb.s 			page 84


 786:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 787:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __out_true   An output iterator.
 788:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __out_false  An output iterator.
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 790:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   A pair designating the ends of the resulting sequences.
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) for which
 793:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p __pred returns true to the range beginning at @p out_true
 794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  and each element for which @p __pred returns false to @p __out_false.
 795:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator1,
 797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _OutputIterator2, typename _Predicate>
 798:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 799:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     pair<_OutputIterator1, _OutputIterator2>
 800:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     partition_copy(_InputIterator __first, _InputIterator __last,
 801:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _OutputIterator1 __out_true, _OutputIterator2 __out_false,
 802:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _Predicate __pred)
 803:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 804:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 805:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 806:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator1,
 807:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 808:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator2,
 809:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 810:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 811:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 812:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 813:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       
 814:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 815:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (__pred(*__first))
 816:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
 817:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    *__out_true = *__first;
 818:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__out_true;
 819:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
 820:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	else
 821:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
 822:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    *__out_false = *__first;
 823:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__out_false;
 824:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
 825:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 826:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
 827:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 828:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #endif // C++11
 829:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 830:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
 831:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 832:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
 833:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __remove_if(_ForwardIterator __first, _ForwardIterator __last,
 834:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		_Predicate __pred)
 835:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 836:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __first = std::__find_if(__first, __last, __pred);
 837:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
 838:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __first;
 839:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __result = __first;
 840:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       ++__first;
 841:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 842:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (!__pred(__first))
ARM GAS  /tmp/ccATuxCb.s 			page 85


 843:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
 844:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    *__result = _GLIBCXX_MOVE(*__first);
 845:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__result;
 846:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
 847:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __result;
 848:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 849:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 850:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 851:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Remove elements from a sequence.
 852:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 853:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 854:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   An input iterator.
 855:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __value  The value to be removed.
 856:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 857:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 858:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  All elements equal to @p __value are removed from the range
 859:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__first,__last).
 860:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 861:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  remove() is stable, so the relative order of elements that are
 862:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  not removed is unchanged.
 863:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 864:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 865:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
 866:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 867:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
 868:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 869:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
 870:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     remove(_ForwardIterator __first, _ForwardIterator __last,
 871:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   const _Tp& __value)
 872:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 873:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 874:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 875:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _ForwardIterator>)
 876:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
 877:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
 878:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 879:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 880:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__remove_if(__first, __last,
 881:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_equals_val(__value));
 882:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 883:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 884:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 885:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Remove elements from a sequence using a predicate.
 886:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 887:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  A forward iterator.
 888:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   A forward iterator.
 889:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred   A predicate.
 890:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 891:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 892:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  All elements for which @p __pred returns true are removed from the range
 893:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__first,__last).
 894:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 895:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  remove_if() is stable, so the relative order of elements that are
 896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  not removed is unchanged.
 897:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 898:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 899:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
ARM GAS  /tmp/ccATuxCb.s 			page 86


 900:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 901:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
 902:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     remove_if(_ForwardIterator __first, _ForwardIterator __last,
 905:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _Predicate __pred)
 906:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 907:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 909:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _ForwardIterator>)
 910:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 911:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
 912:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 913:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 914:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__remove_if(__first, __last,
 915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			      __gnu_cxx::__ops::__pred_iter(__pred));
 916:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 918:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _BinaryPredicate>
 919:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 920:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
 921:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
 922:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		    _BinaryPredicate __binary_pred)
 923:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 924:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
 925:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __last;
 926:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __next = __first;
 927:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (++__next != __last)
 928:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
 929:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__binary_pred(__first, __next))
 930:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return __first;
 931:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __first = __next;
 932:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
 933:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __last;
 934:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 935:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 936:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _BinaryPredicate>
 937:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 938:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
 939:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __unique(_ForwardIterator __first, _ForwardIterator __last,
 940:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _BinaryPredicate __binary_pred)
 941:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 942:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // Skip the beginning, if already unique.
 943:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __first = std::__adjacent_find(__first, __last, __binary_pred);
 944:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
 945:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __last;
 946:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 947:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // Do the real copy work.
 948:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __dest = __first;
 949:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       ++__first;
 950:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (++__first != __last)
 951:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (!__binary_pred(__dest, __first))
 952:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  *++__dest = _GLIBCXX_MOVE(*__first);
 953:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return ++__dest;
 954:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 955:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 956:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
ARM GAS  /tmp/ccATuxCb.s 			page 87


 957:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Remove consecutive duplicate values from a sequence.
 958:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 959:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  A forward iterator.
 960:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   A forward iterator.
 961:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An iterator designating the end of the resulting sequence.
 962:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 963:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Removes all but the first element from each group of consecutive
 964:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  values that compare equal.
 965:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  unique() is stable, so the relative order of elements that are
 966:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  not removed is unchanged.
 967:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 968:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
 969:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 970:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator>
 971:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 972:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
 973:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     unique(_ForwardIterator __first, _ForwardIterator __last)
 974:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 975:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 976:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 977:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _ForwardIterator>)
 978:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualityComparableConcept<
 979:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     typename iterator_traits<_ForwardIterator>::value_type>)
 980:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 981:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 982:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__unique(__first, __last,
 983:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_equal_to_iter());
 984:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 985:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 986:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 987:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Remove consecutive values from a sequence using a predicate.
 988:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 989:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first        A forward iterator.
 990:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last         A forward iterator.
 991:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __binary_pred  A binary predicate.
 992:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An iterator designating the end of the resulting sequence.
 993:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 994:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Removes all but the first element from each group of consecutive
 995:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  values for which @p __binary_pred returns true.
 996:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  unique() is stable, so the relative order of elements that are
 997:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  not removed is unchanged.
 998:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 999:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
1000:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1001:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _BinaryPredicate>
1002:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1003:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
1004:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     unique(_ForwardIterator __first, _ForwardIterator __last,
1005:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   _BinaryPredicate __binary_pred)
1006:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1007:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
1008:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
1009:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _ForwardIterator>)
1010:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1011:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator>::value_type,
1012:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator>::value_type>)
1013:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
ARM GAS  /tmp/ccATuxCb.s 			page 88


1014:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1015:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__unique(__first, __last,
1016:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
1017:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1018:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1019:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1020:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is an uglified
1021:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
1022:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *              _BinaryPredicate)
1023:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  overloaded for forward iterators and output iterator as result.
1024:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1025:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _OutputIterator,
1026:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
1027:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1028:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _OutputIterator
1029:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
1030:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _OutputIterator __result, _BinaryPredicate __binary_pred,
1031:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  forward_iterator_tag, output_iterator_tag)
1032:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1033:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements -- iterators already checked
1034:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1035:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::value_type,
1036:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::value_type>)
1037:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1038:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __next = __first;
1039:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       *__result = *__first;
1040:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (++__next != __last)
1041:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (!__binary_pred(__first, __next))
1042:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
1043:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __first = __next;
1044:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    *++__result = *__first;
1045:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
1046:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return ++__result;
1047:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1048:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1049:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1050:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is an uglified
1051:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
1052:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *              _BinaryPredicate)
1053:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  overloaded for input iterators and output iterator as result.
1054:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1055:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
1056:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
1057:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1058:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _OutputIterator
1059:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __unique_copy(_InputIterator __first, _InputIterator __last,
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _OutputIterator __result, _BinaryPredicate __binary_pred,
1061:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  input_iterator_tag, output_iterator_tag)
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1063:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements -- iterators already checked
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1065:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  typename iterator_traits<_InputIterator>::value_type,
1066:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  typename iterator_traits<_InputIterator>::value_type>)
1067:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1068:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typename iterator_traits<_InputIterator>::value_type __value = *__first;
1069:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __decltype(__gnu_cxx::__ops::__iter_comp_val(__binary_pred))
1070:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	__rebound_pred
ARM GAS  /tmp/ccATuxCb.s 			page 89


1071:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	= __gnu_cxx::__ops::__iter_comp_val(__binary_pred);
1072:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       *__result = __value;
1073:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (++__first != __last)
1074:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (!__rebound_pred(__first, __value))
1075:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
1076:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __value = *__first;
1077:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    *++__result = __value;
1078:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
1079:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return ++__result;
1080:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1081:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1082:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1083:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is an uglified
1084:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
1085:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *              _BinaryPredicate)
1086:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  overloaded for input iterators and forward iterator as result.
1087:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1088:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _ForwardIterator,
1089:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
1090:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1091:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
1092:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __unique_copy(_InputIterator __first, _InputIterator __last,
1093:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _ForwardIterator __result, _BinaryPredicate __binary_pred,
1094:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  input_iterator_tag, forward_iterator_tag)
1095:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1096:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements -- iterators already checked
1097:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1098:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::value_type,
1099:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  typename iterator_traits<_InputIterator>::value_type>)
1100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       *__result = *__first;
1101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (++__first != __last)
1102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (!__binary_pred(__result, __first))
1103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  *++__result = *__first;
1104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return ++__result;
1105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is an uglified reverse(_BidirectionalIterator,
1109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *                              _BidirectionalIterator)
1110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  overloaded for bidirectional iterators.
1111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
1113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
1115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
1116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      bidirectional_iterator_tag)
1117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (true)
1119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (__first == __last || __first == --__last)
1120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return;
1121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	else
1122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
1123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::iter_swap(__first, __last);
1124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__first;
1125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
1126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
ARM GAS  /tmp/ccATuxCb.s 			page 90


1128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is an uglified reverse(_BidirectionalIterator,
1130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *                              _BidirectionalIterator)
1131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  overloaded for random access iterators.
1132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator>
1134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
1136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
1137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      random_access_iterator_tag)
1138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
1140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return;
1141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       --__last;
1142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first < __last)
1143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::iter_swap(__first, __last);
1145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
1146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  --__last;
1147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Reverse a sequence.
1152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  A bidirectional iterator.
1154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   A bidirectional iterator.
1155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   reverse() returns no value.
1156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
1157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Reverses the order of the elements in the range @p [__first,__last),
1158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  so that the first element becomes the last etc.
1159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  For every @c i such that @p 0<=i<=(__last-__first)/2), @p reverse()
1160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  swaps @p *(__first+i) and @p *(__last-(i+1))
1161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
1163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline void
1165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
1166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
1168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
1169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
1170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__reverse(__first, __last, std::__iterator_category(__first));
1172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy a sequence, reversing its elements.
1176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   A bidirectional iterator.
1178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    A bidirectional iterator.
1179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result  An output iterator.
1180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An iterator designating the end of the resulting sequence.
1181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
1182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies the elements in the range @p [__first,__last) to the
1183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  range @p [__result,__result+(__last-__first)) such that the
1184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  order of the elements is reversed.  For every @c i such that @p
ARM GAS  /tmp/ccATuxCb.s 			page 91


1185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  0<=i<=(__last-__first), @p reverse_copy() performs the
1186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  assignment @p *(__result+(__last-__first)-1-i) = *(__first+i).
1187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  The ranges @p [__first,__last) and @p
1188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__result,__result+(__last-__first)) must not overlap.
1189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _OutputIterator>
1191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _OutputIterator
1193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
1194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		 _OutputIterator __result)
1195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
1197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
1198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
1199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
1200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		typename iterator_traits<_BidirectionalIterator>::value_type>)
1201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first != __last)
1204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  --__last;
1206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  *__result = *__last;
1207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__result;
1208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __result;
1210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is a helper function for the rotate algorithm specialized on RAIs.
1214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  It returns the greatest common divisor of two integer values.
1215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _EuclideanRingElement>
1217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _EuclideanRingElement
1219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
1220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__n != 0)
1222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _EuclideanRingElement __t = __m % __n;
1224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __m = __n;
1225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __n = __t;
1226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __m;
1228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   inline namespace _V2
1231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   {
1232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the rotate algorithm.
1234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator>
1235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
1237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __rotate(_ForwardIterator __first,
1238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _ForwardIterator __middle,
1239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _ForwardIterator __last,
1240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     forward_iterator_tag)
1241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
ARM GAS  /tmp/ccATuxCb.s 			page 92


1242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __middle)
1243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __last;
1244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else if (__last == __middle)
1245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __first;
1246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __first2 = __middle;
1248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       do
1249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::iter_swap(__first, __first2);
1251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
1252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first2;
1253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__first == __middle)
1254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __middle = __first2;
1255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first2 != __last);
1257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __ret = __first;
1259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __first2 = __middle;
1261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first2 != __last)
1263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::iter_swap(__first, __first2);
1265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
1266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first2;
1267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__first == __middle)
1268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __middle = __first2;
1269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else if (__first2 == __last)
1270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __first2 = __middle;
1271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __ret;
1273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    /// This is a helper function for the rotate algorithm.
1276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
1277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _BidirectionalIterator
1279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __rotate(_BidirectionalIterator __first,
1280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _BidirectionalIterator __middle,
1281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _BidirectionalIterator __last,
1282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      bidirectional_iterator_tag)
1283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
1285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
1286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
1287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __middle)
1289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __last;
1290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else if (__last == __middle)
1291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __first;
1292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__reverse(__first,  __middle, bidirectional_iterator_tag());
1294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__reverse(__middle, __last,   bidirectional_iterator_tag());
1295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first != __middle && __middle != __last)
1297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::iter_swap(__first, --__last);
ARM GAS  /tmp/ccATuxCb.s 			page 93


1299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
1300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __middle)
1303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__reverse(__middle, __last,   bidirectional_iterator_tag());
1305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return __last;
1306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
1308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__reverse(__first,  __middle, bidirectional_iterator_tag());
1310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return __first;
1311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the rotate algorithm.
1315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator>
1316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _RandomAccessIterator
1318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __rotate(_RandomAccessIterator __first,
1319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _RandomAccessIterator __middle,
1320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _RandomAccessIterator __last,
1321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     random_access_iterator_tag)
1322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
1324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
1325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _RandomAccessIterator>)
1326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __middle)
1328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __last;
1329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else if (__last == __middle)
1330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __first;
1331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::difference_type
1333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_Distance;
1334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
1335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_ValueType;
1336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _Distance __n = __last   - __first;
1338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _Distance __k = __middle - __first;
1339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__k == __n - __k)
1341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::swap_ranges(__first, __middle, __middle);
1343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return __middle;
1344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _RandomAccessIterator __p = __first;
1347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _RandomAccessIterator __ret = __first + (__last - __middle);
1348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (;;)
1350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__k < __n - __k)
1352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
1353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (__is_pod(_ValueType) && __k == 1)
1354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		{
1355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _ValueType __t = _GLIBCXX_MOVE(*__p);
ARM GAS  /tmp/ccATuxCb.s 			page 94


1356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
1357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
1358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  return __ret;
1359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		}
1360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _RandomAccessIterator __q = __p + __k;
1361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
1362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		{
1363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  std::iter_swap(__p, __q);
1364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  ++__p;
1365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  ++__q;
1366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		}
1367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __n %= __k;
1368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (__n == 0)
1369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		return __ret;
1370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::swap(__n, __k);
1371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __k = __n - __k;
1372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
1373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
1374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
1375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __k = __n - __k;
1376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (__is_pod(_ValueType) && __k == 1)
1377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		{
1378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
1379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
1380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  *__p = _GLIBCXX_MOVE(__t);
1381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  return __ret;
1382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		}
1383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _RandomAccessIterator __q = __p + __n;
1384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __p = __q - __k;
1385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
1386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		{
1387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  --__p;
1388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  --__q;
1389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  std::iter_swap(__p, __q);
1390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		}
1391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __n %= __k;
1392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (__n == 0)
1393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		return __ret;
1394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::swap(__n, __k);
1395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
1396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
1400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    // DR 488. rotate throws away useful information
1401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Rotate the elements of a sequence.
1403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   A forward iterator.
1405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __middle  A forward iterator.
1406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    A forward iterator.
1407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  first + (last - middle).
1408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
1409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Rotates the elements of the range @p [__first,__last) by 
1410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p (__middle - __first) positions so that the element at @p __middle
1411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  is moved to @p __first, the element at @p __middle+1 is moved to
1412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p __first+1 and so on for each element in the range
ARM GAS  /tmp/ccATuxCb.s 			page 95


1413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__first,__last).
1414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
1415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This effectively swaps the ranges @p [__first,__middle) and
1416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__middle,__last).
1417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
1418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Performs
1419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *   @p *(__first+(n+(__last-__middle))%(__last-__first))=*(__first+n)
1420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  for each @p n in the range @p [0,__last-__first).
1421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator>
1423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
1425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     rotate(_ForwardIterator __first, _ForwardIterator __middle,
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   _ForwardIterator __last)
1427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
1429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
1430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _ForwardIterator>)
1431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __middle);
1432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__middle, __last);
1433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__rotate(__first, __middle, __last,
1435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   std::__iterator_category(__first));
1436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   } // namespace _V2
1439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy a sequence, rotating its elements.
1442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   A forward iterator.
1444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __middle  A forward iterator.
1445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    A forward iterator.
1446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result  An output iterator.
1447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
1448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
1449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies the elements of the range @p [__first,__last) to the
1450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  range beginning at @result, rotating the copied elements by 
1451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p (__middle-__first) positions so that the element at @p __middle
1452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  is moved to @p __result, the element at @p __middle+1 is moved
1453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  to @p __result+1 and so on for each element in the range @p
1454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first,__last).
1455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
1456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Performs 
1457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p *(__result+(n+(__last-__middle))%(__last-__first))=*(__first+n)
1458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  for each @p n in the range @p [0,__last-__first).
1459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _OutputIterator>
1461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _OutputIterator
1463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
1464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		_ForwardIterator __last, _OutputIterator __result)
1465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
1467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
1468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
1469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator>::value_type>)
ARM GAS  /tmp/ccATuxCb.s 			page 96


1470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __middle);
1471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__middle, __last);
1472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::copy(__first, __middle,
1474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		       std::copy(__middle, __last, __result));
1475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function...
1478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
1479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
1481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __partition(_ForwardIterator __first, _ForwardIterator __last,
1482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		_Predicate __pred, forward_iterator_tag)
1483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
1485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __first;
1486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__pred(*__first))
1488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (++__first == __last)
1489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return __first;
1490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __next = __first;
1492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (++__next != __last)
1494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (__pred(*__next))
1495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
1496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::iter_swap(__first, __next);
1497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__first;
1498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
1499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __first;
1501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function...
1504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Predicate>
1505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _BidirectionalIterator
1507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
1508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		_Predicate __pred, bidirectional_iterator_tag)
1509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (true)
1511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  while (true)
1513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    if (__first == __last)
1514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return __first;
1515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    else if (__pred(*__first))
1516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__first;
1517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    else
1518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      break;
1519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  --__last;
1520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  while (true)
1521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    if (__first == __last)
1522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return __first;
1523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    else if (!bool(__pred(*__last)))
1524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      --__last;
1525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    else
1526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      break;
ARM GAS  /tmp/ccATuxCb.s 			page 97


1527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::iter_swap(__first, __last);
1528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
1529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // partition
1533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function...
1535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// Requires __first != __last and !__pred(__first)
1536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// and __len == distance(__first, __last).
1537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   ///
1538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// !__pred(__first) allows us to guarantee that we don't
1539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// move-assign an element onto itself.
1540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
1541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Distance>
1542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
1543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __stable_partition_adaptive(_ForwardIterator __first,
1544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				_ForwardIterator __last,
1545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				_Predicate __pred, _Distance __len,
1546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				_Pointer __buffer,
1547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				_Distance __buffer_size)
1548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__len == 1)
1550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __first;
1551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__len <= __buffer_size)
1553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _ForwardIterator __result1 = __first;
1555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _Pointer __result2 = __buffer;
1556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  // The precondition guarantees that !__pred(__first), so
1558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  // move that element to the buffer before starting the loop.
1559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  // This ensures that we only call __pred once per element.
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  *__result2 = _GLIBCXX_MOVE(*__first);
1561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__result2;
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
1563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  for (; __first != __last; ++__first)
1564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    if (__pred(__first))
1565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      {
1566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		*__result1 = _GLIBCXX_MOVE(*__first);
1567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		++__result1;
1568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      }
1569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    else
1570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      {
1571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		*__result2 = _GLIBCXX_MOVE(*__first);
1572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		++__result2;
1573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      }
1574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _GLIBCXX_MOVE3(__buffer, __result2, __result1);
1576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return __result1;
1577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __middle = __first;
1580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::advance(__middle, __len / 2);
1581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __left_split =
1582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::__stable_partition_adaptive(__first, __middle, __pred,
1583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					 __len / 2, __buffer,
ARM GAS  /tmp/ccATuxCb.s 			page 98


1584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					 __buffer_size);
1585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // Advance past true-predicate values to satisfy this
1587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // function's preconditions.
1588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _Distance __right_len = __len - __len / 2;
1589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __right_split =
1590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::__find_if_not_n(__middle, __right_len, __pred);
1591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__right_len)
1593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	__right_split =
1594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__stable_partition_adaptive(__right_split, __last, __pred,
1595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					   __right_len,
1596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					   __buffer, __buffer_size);
1597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::rotate(__left_split, __middle, __right_split);
1599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
1602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
1603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __stable_partition(_ForwardIterator __first, _ForwardIterator __last,
1604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		       _Predicate __pred)
1605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __first = std::__find_if_not(__first, __last, __pred);
1607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
1609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __first;
1610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
1612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_ValueType;
1613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
1614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_DistanceType;
1615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _Temporary_buffer<_ForwardIterator, _ValueType>
1617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	__buf(__first, std::distance(__first, __last));
1618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return
1619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::__stable_partition_adaptive(__first, __last, __pred,
1620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					 _DistanceType(__buf.requested_size()),
1621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					 __buf.begin(),
1622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					 _DistanceType(__buf.size()));
1623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Move elements for which a predicate is true to the beginning
1627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         of a sequence, preserving relative ordering.
1628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   A forward iterator.
1630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    A forward iterator.
1631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A predicate functor.
1632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An iterator @p middle such that @p __pred(i) is true for each
1633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  iterator @p i in the range @p [first,middle) and false for each @p i
1634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  in the range @p [middle,last).
1635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
1636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Performs the same function as @p partition() with the additional
1637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  guarantee that the relative ordering of elements in each group is
1638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  preserved, so any two elements @p x and @p y in the range
1639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__first,__last) such that @p __pred(x)==__pred(y) will have the same
1640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  relative ordering after calling @p stable_partition().
ARM GAS  /tmp/ccATuxCb.s 			page 99


1641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
1643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
1644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     stable_partition(_ForwardIterator __first, _ForwardIterator __last,
1645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _Predicate __pred)
1646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
1648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
1649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _ForwardIterator>)
1650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
1651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__stable_partition(__first, __last,
1655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__pred_iter(__pred));
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the sort routines.
1659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
1662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __heap_select(_RandomAccessIterator __first,
1663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _RandomAccessIterator __middle,
1664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _RandomAccessIterator __last, _Compare __comp)
1665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__make_heap(__first, __middle, __comp);
1667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
1668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (__comp(__i, __first))
1669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__pop_heap(__first, __middle, __i, __comp);
1670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // partial_sort
1673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _RandomAccessIterator,
1675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Compare>
1676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _RandomAccessIterator
1678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __partial_sort_copy(_InputIterator __first, _InputIterator __last,
1679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			_RandomAccessIterator __result_first,
1680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			_RandomAccessIterator __result_last,
1681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			_Compare __comp)
1682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_InputValueType;
1685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef iterator_traits<_RandomAccessIterator> _RItTraits;
1686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename _RItTraits::difference_type _DistanceType;
1687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__result_first == __result_last)
1689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __result_last;
1690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _RandomAccessIterator __result_real_last = __result_first;
1691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first != __last && __result_real_last != __result_last)
1692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  *__result_real_last = *__first;
1694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__result_real_last;
1695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
1696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       
ARM GAS  /tmp/ccATuxCb.s 			page 100


1698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__make_heap(__result_first, __result_real_last, __comp);
1699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first != __last)
1700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__first, __result_first))
1702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::__adjust_heap(__result_first, _DistanceType(0),
1703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			       _DistanceType(__result_real_last
1704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					     - __result_first),
1705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			       _InputValueType(*__first), __comp);
1706:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
1707:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1708:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__sort_heap(__result_first, __result_real_last, __comp);
1709:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __result_real_last;
1710:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1711:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1712:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1713:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy the smallest elements of a sequence.
1714:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
1715:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
1716:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
1717:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result_first   A random-access iterator.
1718:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result_last    Another random-access iterator.
1719:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   An iterator indicating the end of the resulting sequence.
1720:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
1721:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies and sorts the smallest N values from the range @p [__first,__last)
1722:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  to the range beginning at @p __result_first, where the number of
1723:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  elements to be copied, @p N, is the smaller of @p (__last-__first) and
1724:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p (__result_last-__result_first).
1725:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  After the sort if @e i and @e j are iterators in the range
1726:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__result_first,__result_first+N) such that i precedes j then
1727:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  *j<*i is false.
1728:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  The value returned is @p __result_first+N.
1729:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1730:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _RandomAccessIterator>
1731:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1732:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _RandomAccessIterator
1733:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     partial_sort_copy(_InputIterator __first, _InputIterator __last,
1734:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _RandomAccessIterator __result_first,
1735:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _RandomAccessIterator __result_last)
1736:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1737:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
1738:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1739:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_InputValueType;
1740:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
1741:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_OutputValueType;
1742:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #endif
1743:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1744:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
1745:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
1746:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ConvertibleConcept<_InputValueType,
1747:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _OutputValueType>)
1748:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<_InputValueType,
1749:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 						     _OutputValueType>)
1750:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_OutputValueType>)
1751:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1752:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
1753:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__result_first, __result_last);
1754:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
ARM GAS  /tmp/ccATuxCb.s 			page 101


1755:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__partial_sort_copy(__first, __last,
1756:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				      __result_first, __result_last,
1757:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				      __gnu_cxx::__ops::__iter_less_iter());
1758:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1759:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1760:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1761:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy the smallest elements of a sequence using a predicate for
1762:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         comparison.
1763:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
1764:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
1765:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another input iterator.
1766:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result_first   A random-access iterator.
1767:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result_last    Another random-access iterator.
1768:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    A comparison functor.
1769:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   An iterator indicating the end of the resulting sequence.
1770:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
1771:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies and sorts the smallest N values from the range @p [__first,__last)
1772:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  to the range beginning at @p result_first, where the number of
1773:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  elements to be copied, @p N, is the smaller of @p (__last-__first) and
1774:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p (__result_last-__result_first).
1775:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  After the sort if @e i and @e j are iterators in the range
1776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__result_first,__result_first+N) such that i precedes j then
1777:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p __comp(*j,*i) is false.
1778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  The value returned is @p __result_first+N.
1779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _RandomAccessIterator,
1781:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Compare>
1782:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1783:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _RandomAccessIterator
1784:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     partial_sort_copy(_InputIterator __first, _InputIterator __last,
1785:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _RandomAccessIterator __result_first,
1786:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _RandomAccessIterator __result_last,
1787:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _Compare __comp)
1788:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
1790:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_InputValueType;
1792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
1793:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_OutputValueType;
1794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #endif
1795:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
1797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
1798:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
1799:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _RandomAccessIterator>)
1800:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ConvertibleConcept<_InputValueType,
1801:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _OutputValueType>)
1802:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
1803:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _InputValueType, _OutputValueType>)
1804:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
1805:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _OutputValueType, _OutputValueType>)
1806:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1807:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
1808:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__result_first, __result_last);
1809:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1810:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__partial_sort_copy(__first, __last,
1811:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				      __result_first, __result_last,
ARM GAS  /tmp/ccATuxCb.s 			page 102


1812:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_iter(__comp));
1813:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1814:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1815:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1816:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1817:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1818:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
1819:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __unguarded_linear_insert(_RandomAccessIterator __last,
1820:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			      _Compare __comp)
1821:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1822:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typename iterator_traits<_RandomAccessIterator>::value_type
1823:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	__val = _GLIBCXX_MOVE(*__last);
1824:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _RandomAccessIterator __next = __last;
1825:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       --__next;
1826:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__comp(__val, __next))
1827:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1828:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  *__last = _GLIBCXX_MOVE(*__next);
1829:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __last = __next;
1830:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  --__next;
1831:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1832:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       *__last = _GLIBCXX_MOVE(__val);
1833:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1834:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1835:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1836:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1837:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1838:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
1839:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __insertion_sort(_RandomAccessIterator __first,
1840:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _RandomAccessIterator __last, _Compare __comp)
1841:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1842:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last) return;
1843:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1844:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
1845:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1846:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__i, __first))
1847:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
1848:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      typename iterator_traits<_RandomAccessIterator>::value_type
1849:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__val = _GLIBCXX_MOVE(*__i);
1850:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
1851:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      *__first = _GLIBCXX_MOVE(__val);
1852:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
1853:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
1854:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::__unguarded_linear_insert(__i,
1855:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
1856:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1857:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1858:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1859:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1860:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1861:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1862:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline void
1863:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __unguarded_insertion_sort(_RandomAccessIterator __first,
1864:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			       _RandomAccessIterator __last, _Compare __comp)
1865:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1866:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
1867:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::__unguarded_linear_insert(__i,
1868:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
ARM GAS  /tmp/ccATuxCb.s 			page 103


1869:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1870:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1871:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1872:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @doctodo
1873:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This controls some aspect of the sort routines.
1874:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1875:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   enum { _S_threshold = 16 };
1876:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1877:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1878:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1879:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1880:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
1881:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __final_insertion_sort(_RandomAccessIterator __first,
1882:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _RandomAccessIterator __last, _Compare __comp)
1883:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1884:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__last - __first > int(_S_threshold))
1885:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1886:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
1887:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
1888:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					  __comp);
1889:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1890:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
1891:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::__insertion_sort(__first, __last, __comp);
1892:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1893:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1894:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function...
1895:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1897:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _RandomAccessIterator
1898:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __unguarded_partition(_RandomAccessIterator __first,
1899:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			  _RandomAccessIterator __last,
1900:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			  _RandomAccessIterator __pivot, _Compare __comp)
1901:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1902:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (true)
1903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  while (__comp(__first, __pivot))
1905:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__first;
1906:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  --__last;
1907:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  while (__comp(__pivot, __last))
1908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    --__last;
1909:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (!(__first < __last))
1910:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return __first;
1911:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::iter_swap(__first, __last);
1912:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
1913:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1914:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1916:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function...
1917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1918:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1919:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _RandomAccessIterator
1920:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __unguarded_partition_pivot(_RandomAccessIterator __first,
1921:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				_RandomAccessIterator __last, _Compare __comp)
1922:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1923:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _RandomAccessIterator __mid = __first + (__last - __first) / 2;
1924:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
1925:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  __comp);
ARM GAS  /tmp/ccATuxCb.s 			page 104


1926:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__unguarded_partition(__first + 1, __last, __first, __comp);
1927:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1928:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1929:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1930:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1931:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline void
1932:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __partial_sort(_RandomAccessIterator __first,
1933:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _RandomAccessIterator __middle,
1934:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _RandomAccessIterator __last,
1935:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _Compare __comp)
1936:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1937:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__heap_select(__first, __middle, __last, __comp);
1938:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__sort_heap(__first, __middle, __comp);
1939:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1940:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1941:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1942:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Size, typename _Compare>
1943:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1944:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
1945:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __introsort_loop(_RandomAccessIterator __first,
1946:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _RandomAccessIterator __last,
1947:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _Size __depth_limit, _Compare __comp)
1948:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1949:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__last - __first > int(_S_threshold))
1950:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1951:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__depth_limit == 0)
1952:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
1953:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::__partial_sort(__first, __last, __last, __comp);
1954:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return;
1955:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
1956:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  --__depth_limit;
1957:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _RandomAccessIterator __cut =
1958:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::__unguarded_partition_pivot(__first, __last, __comp);
1959:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
1960:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __last = __cut;
1961:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1962:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1963:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1964:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // sort
1965:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1966:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1967:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1968:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline void
1969:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
1970:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   _Compare __comp)
1971:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1972:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first != __last)
1973:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1974:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__introsort_loop(__first, __last,
1975:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				std::__lg(__last - __first) * 2,
1976:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__comp);
1977:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__final_insertion_sort(__first, __last, __comp);
1978:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1979:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1980:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1981:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Size, typename _Compare>
1982:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
ARM GAS  /tmp/ccATuxCb.s 			page 105


1983:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
1984:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
1985:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _RandomAccessIterator __last, _Size __depth_limit,
1986:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _Compare __comp)
1987:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1988:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__last - __first > 3)
1989:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1990:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__depth_limit == 0)
1991:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
1992:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::__heap_select(__first, __nth + 1, __last, __comp);
1993:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      // Place the nth largest element in its final position.
1994:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::iter_swap(__first, __nth);
1995:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return;
1996:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
1997:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  --__depth_limit;
1998:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _RandomAccessIterator __cut =
1999:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::__unguarded_partition_pivot(__first, __last, __comp);
2000:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__cut <= __nth)
2001:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __first = __cut;
2002:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
2003:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __last = __cut;
2004:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2005:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__insertion_sort(__first, __last, __comp);
2006:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2007:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2008:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // nth_element
2009:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2010:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // lower_bound moved to stl_algobase.h
2011:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2012:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2013:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Finds the first position in which @p __val could be inserted
2014:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         without changing the ordering.
2015:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2016:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2017:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2018:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2019:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2020:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return An iterator pointing to the first element <em>not less
2021:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           than</em> @p __val, or end() if every element is less
2022:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           than @p __val.
2023:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2024:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2025:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2026:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  the function used for the initial sort.
2027:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2028:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2029:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2030:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
2031:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     lower_bound(_ForwardIterator __first, _ForwardIterator __last,
2032:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		const _Tp& __val, _Compare __comp)
2033:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2034:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2035:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2036:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2037:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
2038:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower_pred(__first, __last,
2039:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 						__val, __comp);
ARM GAS  /tmp/ccATuxCb.s 			page 106


2040:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2041:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__lower_bound(__first, __last, __val,
2042:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_val(__comp));
2043:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2044:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2045:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2046:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2047:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
2048:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
2049:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  const _Tp& __val, _Compare __comp)
2050:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2051:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
2052:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_DistanceType;
2053:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2054:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _DistanceType __len = std::distance(__first, __last);
2055:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2056:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__len > 0)
2057:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2058:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _DistanceType __half = __len >> 1;
2059:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _ForwardIterator __middle = __first;
2060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::advance(__middle, __half);
2061:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__val, __middle))
2062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __len = __half;
2063:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
2064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2065:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __first = __middle;
2066:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__first;
2067:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __len = __len - __half - 1;
2068:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2069:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2070:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __first;
2071:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2072:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2073:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2074:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Finds the last position in which @p __val could be inserted
2075:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         without changing the ordering.
2076:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2077:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2078:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2079:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2080:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An iterator pointing to the first element greater than @p __val,
2081:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           or end() if no elements are greater than @p __val.
2082:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2083:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2084:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
2085:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2086:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
2087:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     upper_bound(_ForwardIterator __first, _ForwardIterator __last,
2088:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		const _Tp& __val)
2089:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2090:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2091:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2092:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2093:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2094:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper(__first, __last, __val);
2095:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2096:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__upper_bound(__first, __last, __val,
ARM GAS  /tmp/ccATuxCb.s 			page 107


2097:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_less_iter());
2098:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2099:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Finds the last position in which @p __val could be inserted
2102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         without changing the ordering.
2103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An iterator pointing to the first element greater than @p __val,
2109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           or end() if no elements are greater than @p __val.
2110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  the function used for the initial sort.
2114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
2118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     upper_bound(_ForwardIterator __first, _ForwardIterator __last,
2119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		const _Tp& __val, _Compare __comp)
2120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper_pred(__first, __last,
2126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 						__val, __comp);
2127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__upper_bound(__first, __last, __val,
2129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
2130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp,
2133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _CompareItTp, typename _CompareTpIt>
2134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     pair<_ForwardIterator, _ForwardIterator>
2136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __equal_range(_ForwardIterator __first, _ForwardIterator __last,
2137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  const _Tp& __val,
2138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _CompareItTp __comp_it_val, _CompareTpIt __comp_val_it)
2139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
2141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_DistanceType;
2142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _DistanceType __len = std::distance(__first, __last);
2144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__len > 0)
2146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _DistanceType __half = __len >> 1;
2148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _ForwardIterator __middle = __first;
2149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::advance(__middle, __half);
2150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp_it_val(__middle, __val))
2151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __first = __middle;
2153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__first;
ARM GAS  /tmp/ccATuxCb.s 			page 108


2154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __len = __len - __half - 1;
2155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else if (__comp_val_it(__val, __middle))
2157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __len = __half;
2158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
2159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _ForwardIterator __left
2161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		= std::__lower_bound(__first, __middle, __val, __comp_it_val);
2162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::advance(__first, __len);
2163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _ForwardIterator __right
2164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		= std::__upper_bound(++__middle, __first, __val, __comp_val_it);
2165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
2166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
2169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Finds the largest subrange in which @p __val could be inserted
2173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         at any place in it without changing the ordering.
2174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An pair of iterators defining the subrange.
2179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is equivalent to
2182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @code
2183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *    std::make_pair(lower_bound(__first, __last, __val),
2184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *                   upper_bound(__first, __last, __val))
2185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @endcode
2186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  but does not actually call those functions.
2187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
2189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
2191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     equal_range(_ForwardIterator __first, _ForwardIterator __last,
2192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		const _Tp& __val)
2193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
2198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower(__first, __last, __val);
2201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper(__first, __last, __val);
2202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__equal_range(__first, __last, __val,
2204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_less_val(),
2205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_less_iter());
2206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Finds the largest subrange in which @p __val could be inserted
2210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         at any place in it without changing the ordering.
ARM GAS  /tmp/ccATuxCb.s 			page 109


2211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An pair of iterators defining the subrange.
2216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is equivalent to
2219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @code
2220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *    std::make_pair(lower_bound(__first, __last, __val, __comp),
2221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *                   upper_bound(__first, __last, __val, __comp))
2222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @endcode
2223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  but does not actually call those functions.
2224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
2228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     equal_range(_ForwardIterator __first, _ForwardIterator __last,
2229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		const _Tp& __val, _Compare __comp)
2230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
2235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower_pred(__first, __last,
2238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 						__val, __comp);
2239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper_pred(__first, __last,
2240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 						__val, __comp);
2241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__equal_range(__first, __last, __val,
2243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_val(__comp),
2244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
2245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Determines whether an element exists in a range.
2249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return True if @p __val (or its equivalent) is in [@p
2254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  __first,@p __last ].
2255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Note that this does not actually return an iterator to @p __val.  For
2257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  that, use std::find or a container's specialized find member functions.
2258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
2260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     bool
2262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     binary_search(_ForwardIterator __first, _ForwardIterator __last,
2263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  const _Tp& __val)
2264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
ARM GAS  /tmp/ccATuxCb.s 			page 110


2268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower(__first, __last, __val);
2270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper(__first, __last, __val);
2271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __i
2273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	= std::__lower_bound(__first, __last, __val,
2274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_less_val());
2275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __i != __last && !(__val < *__i);
2276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Determines whether an element exists in a range.
2280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  True if @p __val (or its equivalent) is in @p [__first,__last].
2286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Note that this does not actually return an iterator to @p __val.  For
2288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  that, use std::find or a container's specialized find member functions.
2289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  the function used for the initial sort.
2292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     bool
2296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     binary_search(_ForwardIterator __first, _ForwardIterator __last,
2297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  const _Tp& __val, _Compare __comp)
2298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower_pred(__first, __last,
2304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 						__val, __comp);
2305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper_pred(__first, __last,
2306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 						__val, __comp);
2307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __i
2309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	= std::__lower_bound(__first, __last, __val,
2310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_comp_val(__comp));
2311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __i != __last && !bool(__comp(__val, *__i));
2312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // merge
2315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the __merge_adaptive routines.
2317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2,
2318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _OutputIterator, typename _Compare>
2319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
2321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			  _InputIterator2 __first2, _InputIterator2 __last2,
2322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			  _OutputIterator __result, _Compare __comp)
2323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first1 != __last1 && __first2 != __last2)
ARM GAS  /tmp/ccATuxCb.s 			page 111


2325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__first2, __first1))
2327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first2);
2329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__first2;
2330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
2332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first1);
2334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__first1;
2335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__result;
2337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first1 != __last1)
2339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_GLIBCXX_MOVE3(__first1, __last1, __result);
2340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the __merge_adaptive routines.
2343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
2344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BidirectionalIterator3, typename _Compare>
2345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
2347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   _BidirectionalIterator1 __last1,
2348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   _BidirectionalIterator2 __first2,
2349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   _BidirectionalIterator2 __last2,
2350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   _BidirectionalIterator3 __result,
2351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   _Compare __comp)
2352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first1 == __last1)
2354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _GLIBCXX_MOVE_BACKWARD3(__first2, __last2, __result);
2356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return;
2357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else if (__first2 == __last2)
2359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return;
2360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       --__last1;
2362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       --__last2;
2363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (true)
2364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__last2, __last1))
2366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      *--__result = _GLIBCXX_MOVE(*__last1);
2368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (__first1 == __last1)
2369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		{
2370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _GLIBCXX_MOVE_BACKWARD3(__first2, ++__last2, __result);
2371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  return;
2372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		}
2373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      --__last1;
2374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
2376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      *--__result = _GLIBCXX_MOVE(*__last2);
2378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (__first2 == __last2)
2379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		return;
2380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      --__last2;
2381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
ARM GAS  /tmp/ccATuxCb.s 			page 112


2382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the merge routines.
2386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
2387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Distance>
2388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _BidirectionalIterator1
2389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __rotate_adaptive(_BidirectionalIterator1 __first,
2390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _BidirectionalIterator1 __middle,
2391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _BidirectionalIterator1 __last,
2392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _Distance __len1, _Distance __len2,
2393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _BidirectionalIterator2 __buffer,
2394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _Distance __buffer_size)
2395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _BidirectionalIterator2 __buffer_end;
2397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__len1 > __len2 && __len2 <= __buffer_size)
2398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__len2)
2400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __buffer_end = _GLIBCXX_MOVE3(__middle, __last, __buffer);
2402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _GLIBCXX_MOVE_BACKWARD3(__first, __middle, __last);
2403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return _GLIBCXX_MOVE3(__buffer, __buffer_end, __first);
2404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
2406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return __first;
2407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else if (__len1 <= __buffer_size)
2409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__len1)
2411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);
2413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _GLIBCXX_MOVE3(__middle, __last, __first);
2414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return _GLIBCXX_MOVE_BACKWARD3(__buffer, __buffer_end, __last);
2415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
2417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return __last;
2418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
2420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return std::rotate(__first, __middle, __last);
2421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the merge routines.
2424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Distance, 
2425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Pointer, typename _Compare>
2426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __merge_adaptive(_BidirectionalIterator __first,
2428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _BidirectionalIterator __middle,
2429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _BidirectionalIterator __last,
2430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _Distance __len1, _Distance __len2,
2431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _Pointer __buffer, _Distance __buffer_size,
2432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _Compare __comp)
2433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__len1 <= __len2 && __len1 <= __buffer_size)
2435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _Pointer __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);
2437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
2438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				     __first, __comp);
ARM GAS  /tmp/ccATuxCb.s 			page 113


2439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else if (__len2 <= __buffer_size)
2441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _Pointer __buffer_end = _GLIBCXX_MOVE3(__middle, __last, __buffer);
2443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__move_merge_adaptive_backward(__first, __middle, __buffer,
2444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					      __buffer_end, __last, __comp);
2445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
2447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _BidirectionalIterator __first_cut = __first;
2449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _BidirectionalIterator __second_cut = __middle;
2450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _Distance __len11 = 0;
2451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _Distance __len22 = 0;
2452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__len1 > __len2)
2453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __len11 = __len1 / 2;
2455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::advance(__first_cut, __len11);
2456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __second_cut
2457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		= std::__lower_bound(__middle, __last, *__first_cut,
2458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__iter_comp_val(__comp));
2459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __len22 = std::distance(__middle, __second_cut);
2460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
2462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __len22 = __len2 / 2;
2464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::advance(__second_cut, __len22);
2465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __first_cut
2466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		= std::__upper_bound(__first, __middle, *__second_cut,
2467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__val_comp_iter(__comp));
2468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __len11 = std::distance(__first, __first_cut);
2469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _BidirectionalIterator __new_middle
2472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    = std::__rotate_adaptive(__first_cut, __middle, __second_cut,
2473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				     __len1 - __len11, __len22, __buffer,
2474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				     __buffer_size);
2475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
2476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__len22, __buffer, __buffer_size, __comp);
2477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__merge_adaptive(__new_middle, __second_cut, __last,
2478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__len1 - __len11,
2479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__len2 - __len22, __buffer,
2480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__buffer_size, __comp);
2481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the merge routines.
2485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Distance,
2486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Compare>
2487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __merge_without_buffer(_BidirectionalIterator __first,
2489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _BidirectionalIterator __middle,
2490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _BidirectionalIterator __last,
2491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _Distance __len1, _Distance __len2,
2492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _Compare __comp)
2493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__len1 == 0 || __len2 == 0)
2495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return;
ARM GAS  /tmp/ccATuxCb.s 			page 114


2496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__len1 + __len2 == 2)
2498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__middle, __first))
2500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::iter_swap(__first, __middle);
2501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return;
2502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _BidirectionalIterator __first_cut = __first;
2505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _BidirectionalIterator __second_cut = __middle;
2506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _Distance __len11 = 0;
2507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _Distance __len22 = 0;
2508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__len1 > __len2)
2509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __len11 = __len1 / 2;
2511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::advance(__first_cut, __len11);
2512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __second_cut
2513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    = std::__lower_bound(__middle, __last, *__first_cut,
2514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				 __gnu_cxx::__ops::__iter_comp_val(__comp));
2515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __len22 = std::distance(__middle, __second_cut);
2516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
2518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __len22 = __len2 / 2;
2520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::advance(__second_cut, __len22);
2521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __first_cut
2522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    = std::__upper_bound(__first, __middle, *__second_cut,
2523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				 __gnu_cxx::__ops::__val_comp_iter(__comp));
2524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __len11 = std::distance(__first, __first_cut);
2525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _BidirectionalIterator __new_middle
2528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	= std::rotate(__first_cut, __middle, __second_cut);
2529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__merge_without_buffer(__first, __first_cut, __new_middle,
2530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  __len11, __len22, __comp);
2531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__merge_without_buffer(__new_middle, __second_cut, __last,
2532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  __len1 - __len11, __len2 - __len22, __comp);
2533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
2536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __inplace_merge(_BidirectionalIterator __first,
2538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		    _BidirectionalIterator __middle,
2539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		    _BidirectionalIterator __last,
2540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		    _Compare __comp)
2541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_BidirectionalIterator>::value_type
2543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _ValueType;
2544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_BidirectionalIterator>::difference_type
2545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _DistanceType;
2546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __middle || __middle == __last)
2548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return;
2549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       const _DistanceType __len1 = std::distance(__first, __middle);
2551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       const _DistanceType __len2 = std::distance(__middle, __last);
2552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
ARM GAS  /tmp/ccATuxCb.s 			page 115


2553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef _Temporary_buffer<_BidirectionalIterator, _ValueType> _TmpBuf;
2554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _TmpBuf __buf(__first, __len1 + __len2);
2555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__buf.begin() == 0)
2557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::__merge_without_buffer
2558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  (__first, __middle, __last, __len1, __len2, __comp);
2559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
2560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::__merge_adaptive
2561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  (__first, __middle, __last, __len1, __len2, __buf.begin(),
2562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   _DistanceType(__buf.size()), __comp);
2563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Merges two sorted ranges in place.
2567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __middle  Another iterator.
2570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  Nothing.
2572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Merges two sorted and consecutive ranges, [__first,__middle) and
2574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__middle,__last), and puts the result in [__first,__last).  The
2575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  output will be sorted.  The sort is @e stable, that is, for
2576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  equivalent elements in the two ranges, elements from the first
2577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  range will always come before elements from the second.
2578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  If enough additional memory is available, this takes (__last-__first)-1
2580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  comparisons.  Otherwise an NlogN algorithm is used, where N is
2581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  distance(__first,__last).
2582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
2584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline void
2585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inplace_merge(_BidirectionalIterator __first,
2586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _BidirectionalIterator __middle,
2587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _BidirectionalIterator __last)
2588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
2591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    _BidirectionalIterator>)
2592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
2593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
2594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_sorted(__first, __middle);
2595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_sorted(__middle, __last);
2596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
2597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__inplace_merge(__first, __middle, __last,
2599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_less_iter());
2600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Merges two sorted ranges in place.
2604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __middle  Another iterator.
2607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  Nothing.
ARM GAS  /tmp/ccATuxCb.s 			page 116


2610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Merges two sorted and consecutive ranges, [__first,__middle) and
2612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [middle,last), and puts the result in [__first,__last).  The output will
2613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  be sorted.  The sort is @e stable, that is, for equivalent
2614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  elements in the two ranges, elements from the first range will always
2615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  come before elements from the second.
2616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  If enough additional memory is available, this takes (__last-__first)-1
2618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  comparisons.  Otherwise an NlogN algorithm is used, where N is
2619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  distance(__first,__last).
2620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  the function used for the initial sort.
2623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
2625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline void
2626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inplace_merge(_BidirectionalIterator __first,
2627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _BidirectionalIterator __middle,
2628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _BidirectionalIterator __last,
2629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _Compare __comp)
2630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
2633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    _BidirectionalIterator>)
2634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type,
2636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
2637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_sorted_pred(__first, __middle, __comp);
2638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_sorted_pred(__middle, __last, __comp);
2639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
2640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__inplace_merge(__first, __middle, __last,
2642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_comp_iter(__comp));
2643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the __merge_sort_loop routines.
2647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
2648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Compare>
2649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _OutputIterator
2650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __move_merge(_InputIterator __first1, _InputIterator __last1,
2651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		 _InputIterator __first2, _InputIterator __last2,
2652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		 _OutputIterator __result, _Compare __comp)
2653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first1 != __last1 && __first2 != __last2)
2655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__first2, __first1))
2657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first2);
2659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__first2;
2660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
2662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first1);
2664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__first1;
2665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__result;
ARM GAS  /tmp/ccATuxCb.s 			page 117


2667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return _GLIBCXX_MOVE3(__first2, __last2,
2669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			    _GLIBCXX_MOVE3(__first1, __last1,
2670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					   __result));
2671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
2674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Distance, typename _Compare>
2675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __merge_sort_loop(_RandomAccessIterator1 __first,
2677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _RandomAccessIterator1 __last,
2678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _RandomAccessIterator2 __result, _Distance __step_size,
2679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _Compare __comp)
2680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       const _Distance __two_step = 2 * __step_size;
2682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__last - __first >= __two_step)
2684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __result = std::__move_merge(__first, __first + __step_size,
2686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				       __first + __step_size,
2687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				       __first + __two_step,
2688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				       __result, __comp);
2689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __first += __two_step;
2690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __step_size = std::min(_Distance(__last - __first), __step_size);
2692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__move_merge(__first, __first + __step_size,
2694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			__first + __step_size, __last, __result, __comp);
2695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Distance,
2698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Compare>
2699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __chunk_insertion_sort(_RandomAccessIterator __first,
2702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _RandomAccessIterator __last,
2703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _Distance __chunk_size, _Compare __comp)
2704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__last - __first >= __chunk_size)
2706:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2707:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__insertion_sort(__first, __first + __chunk_size, __comp);
2708:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __first += __chunk_size;
2709:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2710:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__insertion_sort(__first, __last, __comp);
2711:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2712:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2713:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   enum { _S_chunk_size = 7 };
2714:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2715:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
2716:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2717:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __merge_sort_with_buffer(_RandomAccessIterator __first,
2718:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     _RandomAccessIterator __last,
2719:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     _Pointer __buffer, _Compare __comp)
2720:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2721:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::difference_type
2722:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_Distance;
2723:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
ARM GAS  /tmp/ccATuxCb.s 			page 118


2724:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       const _Distance __len = __last - __first;
2725:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       const _Pointer __buffer_last = __buffer + __len;
2726:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2727:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _Distance __step_size = _S_chunk_size;
2728:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__chunk_insertion_sort(__first, __last, __step_size, __comp);
2729:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2730:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__step_size < __len)
2731:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2732:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__merge_sort_loop(__first, __last, __buffer,
2733:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				 __step_size, __comp);
2734:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __step_size *= 2;
2735:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__merge_sort_loop(__buffer, __buffer_last, __first,
2736:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				 __step_size, __comp);
2737:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __step_size *= 2;
2738:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2739:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2740:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2741:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Pointer,
2742:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Distance, typename _Compare>
2743:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2744:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __stable_sort_adaptive(_RandomAccessIterator __first,
2745:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _RandomAccessIterator __last,
2746:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _Pointer __buffer, _Distance __buffer_size,
2747:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _Compare __comp)
2748:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2749:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       const _Distance __len = (__last - __first + 1) / 2;
2750:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       const _RandomAccessIterator __middle = __first + __len;
2751:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__len > __buffer_size)
2752:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2753:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__stable_sort_adaptive(__first, __middle, __buffer,
2754:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				      __buffer_size, __comp);
2755:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__stable_sort_adaptive(__middle, __last, __buffer,
2756:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				      __buffer_size, __comp);
2757:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2758:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
2759:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2760:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
2761:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
2762:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2763:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__merge_adaptive(__first, __middle, __last,
2764:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			    _Distance(__middle - __first),
2765:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			    _Distance(__last - __middle),
2766:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			    __buffer, __buffer_size,
2767:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			    __comp);
2768:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2769:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2770:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the stable sorting routines.
2771:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
2772:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2773:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __inplace_stable_sort(_RandomAccessIterator __first,
2774:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			  _RandomAccessIterator __last, _Compare __comp)
2775:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__last - __first < 15)
2777:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__insertion_sort(__first, __last, __comp);
2779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return;
2780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
ARM GAS  /tmp/ccATuxCb.s 			page 119


2781:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _RandomAccessIterator __middle = __first + (__last - __first) / 2;
2782:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__inplace_stable_sort(__first, __middle, __comp);
2783:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__inplace_stable_sort(__middle, __last, __comp);
2784:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__merge_without_buffer(__first, __middle, __last,
2785:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  __middle - __first,
2786:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  __last - __middle,
2787:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  __comp);
2788:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2790:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // stable_sort
2791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // Set algorithms: includes, set_union, set_intersection, set_difference,
2793:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // set_symmetric_difference.  All of these algorithms have the precondition
2794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // that their input ranges are sorted and the postcondition that their output
2795:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // ranges are sorted.
2796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2,
2798:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Compare>
2799:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2800:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     bool
2801:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __includes(_InputIterator1 __first1, _InputIterator1 __last1,
2802:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _InputIterator2 __first2, _InputIterator2 __last2,
2803:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _Compare __comp)
2804:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2805:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first1 != __last1 && __first2 != __last2)
2806:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (__comp(__first2, __first1))
2807:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return false;
2808:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	else if (__comp(__first1, __first2))
2809:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first1;
2810:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	else
2811:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
2812:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__first1;
2813:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__first2;
2814:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
2815:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2816:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __first2 == __last2;
2817:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2818:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2819:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2820:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Determines whether all elements of a sequence exists in a range.
2821:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first1  Start of search range.
2822:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last1   End of search range.
2823:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first2  Start of sequence
2824:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last2   End of sequence.
2825:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  True if each element in [__first2,__last2) is contained in order
2826:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  within [__first1,__last1).  False otherwise.
2827:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup set_algorithms
2828:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2829:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This operation expects both [__first1,__last1) and
2830:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first2,__last2) to be sorted.  Searches for the presence of
2831:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  each element in [__first2,__last2) within [__first1,__last1).
2832:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  The iterators over each range only move forward, so this is a
2833:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  linear algorithm.  If an element in [__first2,__last2) is not
2834:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  found before the search iterator reaches @p __last2, false is
2835:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  returned.
2836:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2837:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2>
ARM GAS  /tmp/ccATuxCb.s 			page 120


2838:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2839:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
2840:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     includes(_InputIterator1 __first1, _InputIterator1 __last1,
2841:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _InputIterator2 __first2, _InputIterator2 __last2)
2842:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2843:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2844:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
2845:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
2846:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2847:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type,
2848:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type>)
2849:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2850:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type,
2851:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type>)
2852:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_sorted_set(__first1, __last1, __first2);
2853:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_sorted_set(__first2, __last2, __first1);
2854:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive2(__first1, __last1);
2855:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive2(__first2, __last2);
2856:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2857:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__includes(__first1, __last1, __first2, __last2,
2858:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_less_iter());
2859:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2860:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2861:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2862:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Determines whether all elements of a sequence exists in a range
2863:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  using comparison.
2864:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup set_algorithms
2865:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first1  Start of search range.
2866:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last1   End of search range.
2867:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first2  Start of sequence
2868:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last2   End of sequence.
2869:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    Comparison function to use.
2870:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return True if each element in [__first2,__last2) is contained
2871:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  in order within [__first1,__last1) according to comp.  False
2872:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  otherwise.  @ingroup set_algorithms
2873:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2874:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This operation expects both [__first1,__last1) and
2875:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first2,__last2) to be sorted.  Searches for the presence of
2876:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  each element in [__first2,__last2) within [__first1,__last1),
2877:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  using comp to decide.  The iterators over each range only move
2878:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  forward, so this is a linear algorithm.  If an element in
2879:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first2,__last2) is not found before the search iterator
2880:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  reaches @p __last2, false is returned.
2881:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2882:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2,
2883:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Compare>
2884:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2885:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
2886:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     includes(_InputIterator1 __first1, _InputIterator1 __last1,
2887:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _InputIterator2 __first2, _InputIterator2 __last2,
2888:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _Compare __comp)
2889:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2890:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2891:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
2892:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
2893:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2894:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type,
ARM GAS  /tmp/ccATuxCb.s 			page 121


2895:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type>)
2896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2897:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type,
2898:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type>)
2899:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);
2900:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);
2901:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);
2902:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);
2903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__includes(__first1, __last1, __first2, __last2,
2905:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_comp_iter(__comp));
2906:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2907:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // nth_element
2909:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // merge
2910:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // set_difference
2911:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // set_intersection
2912:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // set_union
2913:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // stable_sort
2914:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // set_symmetric_difference
2915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // min_element
2916:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // max_element
2917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2918:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
2919:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2920:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     bool
2921:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __next_permutation(_BidirectionalIterator __first,
2922:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		       _BidirectionalIterator __last, _Compare __comp)
2923:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2924:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
2925:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return false;
2926:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _BidirectionalIterator __i = __first;
2927:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       ++__i;
2928:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__i == __last)
2929:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return false;
2930:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __i = __last;
2931:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       --__i;
2932:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2933:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for(;;)
2934:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2935:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _BidirectionalIterator __ii = __i;
2936:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  --__i;
2937:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__i, __ii))
2938:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2939:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _BidirectionalIterator __j = __last;
2940:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      while (!__comp(__i, --__j))
2941:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		{}
2942:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::iter_swap(__i, __j);
2943:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::__reverse(__ii, __last,
2944:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     std::__iterator_category(__first));
2945:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return true;
2946:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2947:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__i == __first)
2948:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2949:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::__reverse(__first, __last,
2950:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     std::__iterator_category(__first));
2951:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return false;
ARM GAS  /tmp/ccATuxCb.s 			page 122


2952:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2953:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2954:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2955:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2956:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2957:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Permute range into the next @e dictionary ordering.
2958:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2959:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  Start of range.
2960:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   End of range.
2961:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  False if wrapped to first permutation, true otherwise.
2962:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2963:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Treats all permutations of the range as a set of @e dictionary sorted
2964:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  sequences.  Permutes the current sequence into the next one of this set.
2965:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Returns true if there are more sequences to generate.  If the sequence
2966:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  is the largest of the set, the smallest is generated and false returned.
2967:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2968:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
2969:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2970:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
2971:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     next_permutation(_BidirectionalIterator __first,
2972:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _BidirectionalIterator __last)
2973:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2974:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2975:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
2976:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
2977:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
2978:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
2979:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
2980:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
2981:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2982:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__next_permutation
2983:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
2984:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2985:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2986:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2987:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Permute range into the next @e dictionary ordering using
2988:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          comparison functor.
2989:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2990:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  Start of range.
2991:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   End of range.
2992:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp   A comparison functor.
2993:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  False if wrapped to first permutation, true otherwise.
2994:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2995:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Treats all permutations of the range [__first,__last) as a set of
2996:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @e dictionary sorted sequences ordered by @p __comp.  Permutes the current
2997:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  sequence into the next one of this set.  Returns true if there are more
2998:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  sequences to generate.  If the sequence is the largest of the set, the
2999:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  smallest is generated and false returned.
3000:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3001:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
3002:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3003:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
3004:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     next_permutation(_BidirectionalIterator __first,
3005:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _BidirectionalIterator __last, _Compare __comp)
3006:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3007:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3008:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
ARM GAS  /tmp/ccATuxCb.s 			page 123


3009:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
3010:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
3011:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type,
3012:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
3013:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3014:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
3015:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3016:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__next_permutation
3017:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
3018:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3019:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3020:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
3021:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3022:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     bool
3023:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __prev_permutation(_BidirectionalIterator __first,
3024:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		       _BidirectionalIterator __last, _Compare __comp)
3025:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3026:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
3027:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return false;
3028:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _BidirectionalIterator __i = __first;
3029:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       ++__i;
3030:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__i == __last)
3031:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return false;
3032:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __i = __last;
3033:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       --__i;
3034:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3035:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for(;;)
3036:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
3037:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _BidirectionalIterator __ii = __i;
3038:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  --__i;
3039:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__ii, __i))
3040:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
3041:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _BidirectionalIterator __j = __last;
3042:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      while (!__comp(--__j, __i))
3043:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		{}
3044:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::iter_swap(__i, __j);
3045:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::__reverse(__ii, __last,
3046:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     std::__iterator_category(__first));
3047:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return true;
3048:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
3049:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__i == __first)
3050:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
3051:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::__reverse(__first, __last,
3052:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     std::__iterator_category(__first));
3053:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return false;
3054:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
3055:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
3056:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3057:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3058:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3059:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Permute range into the previous @e dictionary ordering.
3060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3061:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  Start of range.
3062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   End of range.
3063:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  False if wrapped to last permutation, true otherwise.
3064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
3065:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Treats all permutations of the range as a set of @e dictionary sorted
ARM GAS  /tmp/ccATuxCb.s 			page 124


3066:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  sequences.  Permutes the current sequence into the previous one of this
3067:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  set.  Returns true if there are more sequences to generate.  If the
3068:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  sequence is the smallest of the set, the largest is generated and false
3069:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  returned.
3070:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3071:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
3072:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3073:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
3074:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     prev_permutation(_BidirectionalIterator __first,
3075:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _BidirectionalIterator __last)
3076:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3077:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3078:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
3079:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
3080:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
3081:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
3082:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3083:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
3084:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3085:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__prev_permutation(__first, __last,
3086:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__iter_less_iter());
3087:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3088:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3089:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3090:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Permute range into the previous @e dictionary ordering using
3091:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          comparison functor.
3092:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3093:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  Start of range.
3094:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   End of range.
3095:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp   A comparison functor.
3096:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  False if wrapped to last permutation, true otherwise.
3097:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
3098:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Treats all permutations of the range [__first,__last) as a set of
3099:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @e dictionary sorted sequences ordered by @p __comp.  Permutes the current
3100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  sequence into the previous one of this set.  Returns true if there are
3101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  more sequences to generate.  If the sequence is the smallest of the set,
3102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  the largest is generated and false returned.
3103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
3105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
3107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     prev_permutation(_BidirectionalIterator __first,
3108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _BidirectionalIterator __last, _Compare __comp)
3109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
3112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
3113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
3114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type,
3115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
3116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
3118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__prev_permutation(__first, __last,
3120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_iter(__comp));
3121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
ARM GAS  /tmp/ccATuxCb.s 			page 125


3123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // replace
3124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // replace_if
3125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
3127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Predicate, typename _Tp>
3128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _OutputIterator
3130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __replace_copy_if(_InputIterator __first, _InputIterator __last,
3131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _OutputIterator __result,
3132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _Predicate __pred, const _Tp& __new_value)
3133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (; __first != __last; ++__first, (void)++__result)
3135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (__pred(__first))
3136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  *__result = __new_value;
3137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	else
3138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  *__result = *__first;
3139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __result;
3140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy a sequence, replacing each element of one value with another
3144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         value.
3145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first      An input iterator.
3146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last       An input iterator.
3147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result     An output iterator.
3148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __old_value  The value to be replaced.
3149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __new_value  The replacement value.
3150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   The end of the output sequence, @p result+(last-first).
3151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
3152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies each element in the input range @p [__first,__last) to the
3153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  output range @p [__result,__result+(__last-__first)) replacing elements
3154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  equal to @p __old_value with @p __new_value.
3155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator, typename _Tp>
3157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _OutputIterator
3159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     replace_copy(_InputIterator __first, _InputIterator __last,
3160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		 _OutputIterator __result,
3161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		 const _Tp& __old_value, const _Tp& __new_value)
3162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
3165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
3166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
3167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
3168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type, _Tp>)
3169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__replace_copy_if(__first, __last, __result,
3172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_equals_val(__old_value),
3173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					      __new_value);
3174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy a sequence, replacing each value for which a predicate
3178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         returns true with another value.
3179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
ARM GAS  /tmp/ccATuxCb.s 			page 126


3180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first      An input iterator.
3181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last       An input iterator.
3182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result     An output iterator.
3183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred       A predicate.
3184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __new_value  The replacement value.
3185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   The end of the output sequence, @p __result+(__last-__first).
3186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
3187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) to the range
3188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__result,__result+(__last-__first)) replacing elements for which
3189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p __pred returns true with @p __new_value.
3190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
3192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Predicate, typename _Tp>
3193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _OutputIterator
3195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     replace_copy_if(_InputIterator __first, _InputIterator __last,
3196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		    _OutputIterator __result,
3197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		    _Predicate __pred, const _Tp& __new_value)
3198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
3201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
3202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
3203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
3204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
3205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__replace_copy_if(__first, __last, __result,
3208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__pred_iter(__pred),
3209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					      __new_value);
3210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #if __cplusplus >= 201103L
3213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Determines whether the elements of a sequence are sorted.
3215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
3217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  True if the elements are sorted, false otherwise.
3219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator>
3221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
3223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     is_sorted(_ForwardIterator __first, _ForwardIterator __last)
3224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return std::is_sorted_until(__first, __last) == __last; }
3225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Determines whether the elements of a sequence are sorted
3228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          according to a comparison functor.
3229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
3231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    A comparison functor.
3233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  True if the elements are sorted, false otherwise.
3234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
ARM GAS  /tmp/ccATuxCb.s 			page 127


3237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
3238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     is_sorted(_ForwardIterator __first, _ForwardIterator __last,
3239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _Compare __comp)
3240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return std::is_sorted_until(__first, __last, __comp) == __last; }
3241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
3245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
3246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _Compare __comp)
3247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
3249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __last;
3250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __next = __first;
3252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (++__next; __next != __last; __first = __next, (void)++__next)
3253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (__comp(__next, __first))
3254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return __next;
3255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __next;
3256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Determines the end of a sorted sequence.
3260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
3262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An iterator pointing to the last iterator i in [__first, __last)
3264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           for which the range [__first, i) is sorted.
3265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator>
3267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
3269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)
3270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
3274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
3277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__is_sorted_until(__first, __last,
3279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				    __gnu_cxx::__ops::__iter_less_iter());
3280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Determines the end of a sorted sequence using comparison functor.
3284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
3286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    A comparison functor.
3288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An iterator pointing to the last iterator i in [__first, __last)
3289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           for which the range [__first, i) is sorted.
3290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
ARM GAS  /tmp/ccATuxCb.s 			page 128


3294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
3295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		    _Compare __comp)
3296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
3300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type,
3301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
3304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__is_sorted_until(__first, __last,
3306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				    __gnu_cxx::__ops::__iter_comp_iter(__comp));
3307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Determines min and max at once as an ordered pair.
3311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __a  A thing of arbitrary type.
3313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __b  Another thing of arbitrary type.
3314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return A pair(__b, __a) if __b is smaller than __a, pair(__a,
3315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  __b) otherwise.
3316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Tp>
3318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline pair<const _Tp&, const _Tp&>
3320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     minmax(const _Tp& __a, const _Tp& __b)
3321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
3324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)
3326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		       : pair<const _Tp&, const _Tp&>(__a, __b);
3327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Determines min and max at once as an ordered pair.
3331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __a  A thing of arbitrary type.
3333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __b  Another thing of arbitrary type.
3334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp  A @link comparison_functors comparison functor @endlink.
3335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return A pair(__b, __a) if __b is smaller than __a, pair(__a,
3336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  __b) otherwise.
3337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline pair<const _Tp&, const _Tp&>
3341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)
3342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)
3344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			      : pair<const _Tp&, const _Tp&>(__a, __b);
3345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     pair<_ForwardIterator, _ForwardIterator>
3350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __minmax_element(_ForwardIterator __first, _ForwardIterator __last,
ARM GAS  /tmp/ccATuxCb.s 			page 129


3351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _Compare __comp)
3352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __next = __first;
3354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last
3355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  || ++__next == __last)
3356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return std::make_pair(__first, __first);
3357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __min{}, __max{};
3359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__comp(__next, __first))
3360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
3361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __min = __next;
3362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __max = __first;
3363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
3364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
3365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
3366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __min = __first;
3367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __max = __next;
3368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
3369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __first = __next;
3371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       ++__first;
3372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first != __last)
3374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
3375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __next = __first;
3376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (++__next == __last)
3377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
3378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (__comp(__first, __min))
3379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__min = __first;
3380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      else if (!__comp(__first, __max))
3381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__max = __first;
3382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      break;
3383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
3384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__next, __first))
3386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
3387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (__comp(__next, __min))
3388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__min = __next;
3389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (!__comp(__first, __max))
3390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__max = __first;
3391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
3392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
3393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
3394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (__comp(__first, __min))
3395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__min = __first;
3396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (!__comp(__next, __max))
3397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__max = __next;
3398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
3399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __first = __next;
3401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
3402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
3403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::make_pair(__min, __max);
3405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
ARM GAS  /tmp/ccATuxCb.s 			page 130


3408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Return a pair of iterators pointing to the minimum and maximum
3409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          elements in a range.
3410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  Start of range.
3412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   End of range.
3413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  make_pair(m, M), where m is the first iterator i in 
3414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           [__first, __last) such that no other element in the range is
3415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           smaller, and where M is the last iterator i in [__first, __last)
3416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           such that no other element in the range is larger.
3417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator>
3419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
3421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     minmax_element(_ForwardIterator __first, _ForwardIterator __last)
3422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
3426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
3429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__minmax_element(__first, __last,
3431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_less_iter());
3432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Return a pair of iterators pointing to the minimum and maximum
3436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          elements in a range.
3437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  Start of range.
3439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   End of range.
3440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp   Comparison functor.
3441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  make_pair(m, M), where m is the first iterator i in 
3442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           [__first, __last) such that no other element in the range is
3443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           smaller, and where M is the last iterator i in [__first, __last)
3444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           such that no other element in the range is larger.
3445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
3449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     minmax_element(_ForwardIterator __first, _ForwardIterator __last,
3450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _Compare __comp)
3451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
3455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type,
3456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
3459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__minmax_element(__first, __last,
3461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_comp_iter(__comp));
3462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // N2722 + DR 915.
ARM GAS  /tmp/ccATuxCb.s 			page 131


3465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Tp>
3466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _Tp
3468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     min(initializer_list<_Tp> __l)
3469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return *std::min_element(__l.begin(), __l.end()); }
3470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _Tp
3474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     min(initializer_list<_Tp> __l, _Compare __comp)
3475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return *std::min_element(__l.begin(), __l.end(), __comp); }
3476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Tp>
3478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _Tp
3480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     max(initializer_list<_Tp> __l)
3481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return *std::max_element(__l.begin(), __l.end()); }
3482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _Tp
3486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     max(initializer_list<_Tp> __l, _Compare __comp)
3487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return *std::max_element(__l.begin(), __l.end(), __comp); }
3488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Tp>
3490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline pair<_Tp, _Tp>
3492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     minmax(initializer_list<_Tp> __l)
3493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       pair<const _Tp*, const _Tp*> __p =
3495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::minmax_element(__l.begin(), __l.end());
3496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::make_pair(*__p.first, *__p.second);
3497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline pair<_Tp, _Tp>
3502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     minmax(initializer_list<_Tp> __l, _Compare __comp)
3503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       pair<const _Tp*, const _Tp*> __p =
3505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::minmax_element(__l.begin(), __l.end(), __comp);
3506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::make_pair(*__p.first, *__p.second);
3507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Checks whether a permutation of the second sequence is equal
3511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          to the first sequence.
3512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first1  Start of first range.
3514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last1   End of first range.
3515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first2  Start of second range.
3516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A binary predicate.
3517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return true if there exists a permutation of the elements in
3518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          the range [__first2, __first2 + (__last1 - __first1)),
3519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          beginning with ForwardIterator2 begin, such that
3520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          equal(__first1, __last1, __begin, __pred) returns true;
3521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          otherwise, returns false.
ARM GAS  /tmp/ccATuxCb.s 			page 132


3522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
3524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
3525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
3527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _ForwardIterator2 __first2, _BinaryPredicate __pred)
3529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
3532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
3533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
3534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator1>::value_type,
3535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator2>::value_type>)
3536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
3537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__is_permutation(__first1, __last1, __first2,
3539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_comp_iter(__pred));
3540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #if __cplusplus > 201103L
3543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
3544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
3545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     bool
3547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
3549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _BinaryPredicate __pred)
3550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       using _Cat1
3552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	= typename iterator_traits<_ForwardIterator1>::iterator_category;
3553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       using _Cat2
3554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	= typename iterator_traits<_ForwardIterator2>::iterator_category;
3555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       using _It1_is_RA = is_same<_Cat1, random_access_iterator_tag>;
3556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       using _It2_is_RA = is_same<_Cat2, random_access_iterator_tag>;
3557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       constexpr bool __ra_iters = _It1_is_RA() && _It2_is_RA();
3558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__ra_iters)
3559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
3560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  auto __d1 = std::distance(__first1, __last1);
3561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  auto __d2 = std::distance(__first2, __last2);
3562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__d1 != __d2)
3563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return false;
3564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
3565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // Efficiently compare identical prefixes:  O(N) if sequences
3567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // have the same elements in the same order.
3568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (; __first1 != __last1 && __first2 != __last2;
3569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first1, (void)++__first2)
3570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (!__pred(__first1, __first2))
3571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  break;
3572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__ra_iters)
3574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
3575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__first1 == __last1)
3576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return true;
3577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
3578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
ARM GAS  /tmp/ccATuxCb.s 			page 133


3579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
3580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  auto __d1 = std::distance(__first1, __last1);
3581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  auto __d2 = std::distance(__first2, __last2);
3582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__d1 == 0 && __d2 == 0)
3583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return true;
3584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__d1 != __d2)
3585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return false;
3586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
3587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
3589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
3590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__scan != std::__find_if(__first1, __scan,
3591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
3592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    continue; // We've seen this one before.
3593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  auto __matches = std::__count_if(__first2, __last2,
3595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
3596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (0 == __matches
3597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      || std::__count_if(__scan, __last1,
3598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
3599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      != __matches)
3600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return false;
3601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
3602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return true;
3603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Checks whether a permutaion of the second sequence is equal
3607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          to the first sequence.
3608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first1  Start of first range.
3610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last1   End of first range.
3611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first2  Start of second range.
3612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last2   End of first range.
3613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return true if there exists a permutation of the elements in the range
3614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          [__first2, __last2), beginning with ForwardIterator2 begin,
3615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          such that equal(__first1, __last1, begin) returns true;
3616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          otherwise, returns false.
3617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
3619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
3621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _ForwardIterator2 __first2, _ForwardIterator2 __last2)
3623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
3625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
3626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return
3628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::__is_permutation(__first1, __last1, __first2, __last2,
3629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			      __gnu_cxx::__ops::__iter_equal_to_iter());
3630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Checks whether a permutation of the second sequence is equal
3634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          to the first sequence.
3635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
ARM GAS  /tmp/ccATuxCb.s 			page 134


3636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first1  Start of first range.
3637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last1   End of first range.
3638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first2  Start of second range.
3639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last2   End of first range.
3640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A binary predicate.
3641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return true if there exists a permutation of the elements in the range
3642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          [__first2, __last2), beginning with ForwardIterator2 begin,
3643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          such that equal(__first1, __last1, __begin, __pred) returns true;
3644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          otherwise, returns false.
3645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
3647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
3648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
3650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _ForwardIterator2 __first2, _ForwardIterator2 __last2,
3652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _BinaryPredicate __pred)
3653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
3655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
3656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__is_permutation(__first1, __last1, __first2, __last2,
3658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_comp_iter(__pred));
3659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #if __cplusplus > 201402L
3662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #define __cpp_lib_clamp 201603
3664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Returns the value clamped between lo and hi.
3667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __val  A value of arbitrary type.
3669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __lo   A lower limit of arbitrary type.
3670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __hi   An upper limit of arbitrary type.
3671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
3672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    */
3673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Tp>
3674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     constexpr const _Tp&
3675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 1057              		.loc 10 3675 5
 1058              		.cfi_startproc
 1059              		@ args = 0, pretend = 0, frame = 16
 1060              		@ frame_needed = 1, uses_anonymous_args = 0
 1061              		@ link register save eliminated.
 1062 0000 80B4     		push	{r7}
 1063              	.LCFI90:
 1064              		.cfi_def_cfa_offset 4
 1065              		.cfi_offset 7, -4
 1066 0002 85B0     		sub	sp, sp, #20
 1067              	.LCFI91:
 1068              		.cfi_def_cfa_offset 24
 1069 0004 00AF     		add	r7, sp, #0
 1070              	.LCFI92:
 1071              		.cfi_def_cfa_register 7
 1072 0006 F860     		str	r0, [r7, #12]
 1073 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/ccATuxCb.s 			page 135


 1074 000a 7A60     		str	r2, [r7, #4]
3676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_assert(!(__hi < __lo));
3678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 1075              		.loc 10 3678 21
 1076 000c FB68     		ldr	r3, [r7, #12]
 1077 000e 93ED007A 		vldr.32	s14, [r3]
 1078 0012 BB68     		ldr	r3, [r7, #8]
 1079 0014 D3ED007A 		vldr.32	s15, [r3]
 1080              		.loc 10 3678 29
 1081 0018 B4EEE77A 		vcmpe.f32	s14, s15
 1082 001c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1083 0020 01D5     		bpl	.L57
 1084              		.loc 10 3678 29 is_stmt 0 discriminator 1
 1085 0022 BB68     		ldr	r3, [r7, #8]
 1086              		.loc 10 3678 62 is_stmt 1 discriminator 1
 1087 0024 0DE0     		b	.L54
 1088              	.L57:
 1089              		.loc 10 3678 44 discriminator 2
 1090 0026 7B68     		ldr	r3, [r7, #4]
 1091 0028 93ED007A 		vldr.32	s14, [r3]
 1092 002c FB68     		ldr	r3, [r7, #12]
 1093 002e D3ED007A 		vldr.32	s15, [r3]
 1094              		.loc 10 3678 29 discriminator 2
 1095 0032 B4EEE77A 		vcmpe.f32	s14, s15
 1096 0036 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1097 003a 01D5     		bpl	.L58
 1098              		.loc 10 3678 29 is_stmt 0 discriminator 4
 1099 003c 7B68     		ldr	r3, [r7, #4]
 1100              		.loc 10 3678 62 is_stmt 1 discriminator 4
 1101 003e 00E0     		b	.L54
 1102              	.L58:
 1103              		.loc 10 3678 29 discriminator 5
 1104 0040 FB68     		ldr	r3, [r7, #12]
 1105              	.L54:
3679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 1106              		.loc 10 3679 5 discriminator 9
 1107 0042 1846     		mov	r0, r3
 1108 0044 1437     		adds	r7, r7, #20
 1109              	.LCFI93:
 1110              		.cfi_def_cfa_offset 4
 1111 0046 BD46     		mov	sp, r7
 1112              	.LCFI94:
 1113              		.cfi_def_cfa_register 13
 1114              		@ sp needed
 1115 0048 5DF8047B 		ldr	r7, [sp], #4
 1116              	.LCFI95:
 1117              		.cfi_restore 7
 1118              		.cfi_def_cfa_offset 0
 1119 004c 7047     		bx	lr
 1120              		.cfi_endproc
 1121              	.LFE4819:
 1123              		.section	.rodata._ZL23CURRENT_ADC_LOWER_BOUND,"a"
 1124              		.align	2
 1127              	_ZL23CURRENT_ADC_LOWER_BOUND:
 1128 0000 74010000 		.word	372
 1129              		.section	.rodata._ZL23CURRENT_ADC_UPPER_BOUND,"a"
ARM GAS  /tmp/ccATuxCb.s 			page 136


 1130              		.align	2
 1133              	_ZL23CURRENT_ADC_UPPER_BOUND:
 1134 0000 8B0E0000 		.word	3723
 1135              		.section	.text._ZN31ResistanceMeasurementControlLaw5resetEv,"axG",%progbits,_ZN31ResistanceMeasure
 1136              		.align	1
 1137              		.weak	_ZN31ResistanceMeasurementControlLaw5resetEv
 1138              		.syntax unified
 1139              		.thumb
 1140              		.thumb_func
 1141              		.fpu fpv4-sp-d16
 1143              	_ZN31ResistanceMeasurementControlLaw5resetEv:
 1144              	.LFB4823:
 1145              		.file 11 "Src/motor.cpp"
   1:Src/motor.cpp **** 
   2:Src/motor.cpp **** #include <algorithm>
   3:Src/motor.cpp **** 
   4:Src/motor.cpp **** #include "motor.hpp"
   5:Src/motor.cpp **** #include <optional>
   6:Src/motor.cpp **** #include <cmath>
   7:Src/motor.cpp **** #include "main.h"
   8:Src/motor.cpp **** #include "utils.hpp"
   9:Src/motor.cpp **** #include "task_timer.hpp"
  10:Src/motor.cpp **** #include "cmsis_os.h"  // Add this for osDelay
  11:Src/motor.cpp **** #include "low_level.h"
  12:Src/motor.cpp **** #include "tim.h"
  13:Src/motor.cpp **** #include "axis.hpp"
  14:Src/motor.cpp **** #include "controller.hpp"
  15:Src/motor.cpp **** 
  16:Src/motor.cpp **** static constexpr auto CURRENT_ADC_LOWER_BOUND =        (uint32_t)((float)(1 << 12) * CURRENT_SENSE_
  17:Src/motor.cpp **** static constexpr auto CURRENT_ADC_UPPER_BOUND =        (uint32_t)((float)(1 << 12) * CURRENT_SENSE_
  18:Src/motor.cpp **** /**
  19:Src/motor.cpp ****  * @brief This control law adjusts the output voltage such that a predefined
  20:Src/motor.cpp ****  * current is tracked. A hardcoded integrator gain is used for this.
  21:Src/motor.cpp ****  * 
  22:Src/motor.cpp ****  * TODO: this might as well be implemented using the FieldOrientedController.
  23:Src/motor.cpp ****  */
  24:Src/motor.cpp **** struct ResistanceMeasurementControlLaw : AlphaBetaFrameController {
  25:Src/motor.cpp ****     void reset() final {
 1146              		.loc 11 25 10
 1147              		.cfi_startproc
 1148              		@ args = 0, pretend = 0, frame = 8
 1149              		@ frame_needed = 1, uses_anonymous_args = 0
 1150 0000 80B5     		push	{r7, lr}
 1151              	.LCFI96:
 1152              		.cfi_def_cfa_offset 8
 1153              		.cfi_offset 7, -8
 1154              		.cfi_offset 14, -4
 1155 0002 82B0     		sub	sp, sp, #8
 1156              	.LCFI97:
 1157              		.cfi_def_cfa_offset 16
 1158 0004 00AF     		add	r7, sp, #0
 1159              	.LCFI98:
 1160              		.cfi_def_cfa_register 7
 1161 0006 7860     		str	r0, [r7, #4]
  26:Src/motor.cpp ****         test_voltage_ = 0.0f;
 1162              		.loc 11 26 23
 1163 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccATuxCb.s 			page 137


 1164 000a 4FF00002 		mov	r2, #0
 1165 000e 9A61     		str	r2, [r3, #24]	@ float
  27:Src/motor.cpp ****         test_mod_ = std::nullopt;
 1166              		.loc 11 27 26
 1167 0010 7B68     		ldr	r3, [r7, #4]
 1168 0012 2033     		adds	r3, r3, #32
 1169 0014 1846     		mov	r0, r3
 1170 0016 FFF7FEFF 		bl	_ZNSt8optionalIfEaSESt9nullopt_t
  28:Src/motor.cpp ****     }
 1171              		.loc 11 28 5
 1172 001a 00BF     		nop
 1173 001c 0837     		adds	r7, r7, #8
 1174              	.LCFI99:
 1175              		.cfi_def_cfa_offset 8
 1176 001e BD46     		mov	sp, r7
 1177              	.LCFI100:
 1178              		.cfi_def_cfa_register 13
 1179              		@ sp needed
 1180 0020 80BD     		pop	{r7, pc}
 1181              		.cfi_endproc
 1182              	.LFE4823:
 1184              		.section	.text._ZNSt8optionalISt4pairIffEEptEv,"axG",%progbits,_ZNSt8optionalISt4pairIffEEptEv,com
 1185              		.align	1
 1186              		.weak	_ZNSt8optionalISt4pairIffEEptEv
 1187              		.syntax unified
 1188              		.thumb
 1189              		.thumb_func
 1190              		.fpu fpv4-sp-d16
 1192              	_ZNSt8optionalISt4pairIffEEptEv:
 1193              	.LFB4825:
 1194              		.file 12 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // <optional> -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // Copyright (C) 2013-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** /** @file include/optional
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****  *  This is a Standard C++ Library header.
ARM GAS  /tmp/ccATuxCb.s 			page 138


  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****  */
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #ifndef _GLIBCXX_OPTIONAL
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #define _GLIBCXX_OPTIONAL 1
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #pragma GCC system_header
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #if __cplusplus >= 201703L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <utility>
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <type_traits>
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <exception>
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <new>
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <initializer_list>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <bits/exception_defines.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <bits/functional_hash.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <bits/enable_special_members.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #if __cplusplus > 201703L
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** # include <compare>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #endif
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** namespace std _GLIBCXX_VISIBILITY(default)
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** {
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @addtogroup utilities
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @{
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    */
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #define __cpp_lib_optional 201606L
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     class optional;
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /// Tag type to disengage optional objects.
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   struct nullopt_t
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   {
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // Do not user-declare default constructor at all for
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // optional_value = {} syntax to work.
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // nullopt_t() = delete;
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // Used for constructing nullopt.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     enum class _Construct { _Token };
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // Must be constexpr for nullopt_t to be literal.
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     explicit constexpr nullopt_t(_Construct) { }
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   };
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /// Tag to disengage optional objects.
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   inline constexpr nullopt_t nullopt { nullopt_t::_Construct::_Token };
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @brief Exception class thrown when a disengaged optional object is
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  dereferenced.
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @ingroup exceptions
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    */
ARM GAS  /tmp/ccATuxCb.s 			page 139


  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   class bad_optional_access : public exception
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   {
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   public:
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     bad_optional_access() { }
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     virtual const char* what() const noexcept override
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return "bad optional access"; }
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     virtual ~bad_optional_access() noexcept = default;
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   };
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   void
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   __throw_bad_optional_access()
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   __attribute__((__noreturn__));
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // XXX Does not belong here.
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   inline void
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   __throw_bad_optional_access()
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // This class template manages construction/destruction of
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // the contained value for a std::optional.
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload_base
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Stored_type = remove_const_t<_Tp>;
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base() = default;
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_engaged(true)
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args>
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_Optional_payload_base(std::initializer_list<_Up> __il,
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			       _Args&&... __args)
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__il, std::forward<_Args>(__args)...),
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_engaged(true)
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructor used by _Optional_base copy constructor when the
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // contained value is not trivially copy constructible.
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(bool __engaged,
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			     const _Optional_payload_base& __other)
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (__other._M_engaged)
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(__other._M_get());
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructor used by _Optional_base move constructor when the
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // contained value is not trivially move constructible.
ARM GAS  /tmp/ccATuxCb.s 			page 140


 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(bool __engaged,
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			     _Optional_payload_base&& __other)
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (__other._M_engaged)
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(std::move(__other._M_get()));
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy constructor is only used to when the contained value is
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // trivially copy constructible.
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(const _Optional_payload_base&) = default;
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Move constructor is only used to when the contained value is
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // trivially copy constructible.
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(_Optional_payload_base&&) = default;
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base&
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(const _Optional_payload_base&) = default;
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base&
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(_Optional_payload_base&&) = default;
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // used to perform non-trivial copy assignment.
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_copy_assign(const _Optional_payload_base& __other)
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         if (this->_M_engaged && __other._M_engaged)
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_get() = __other._M_get();
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         else
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    if (__other._M_engaged)
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_construct(__other._M_get());
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    else
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // used to perform non-trivial move assignment.
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_move_assign(_Optional_payload_base&& __other)
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (this->_M_engaged && __other._M_engaged)
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    if (__other._M_engaged)
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_construct(std::move(__other._M_get()));
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    else
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       struct _Empty_byte { };
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, bool = is_trivially_destructible_v<_Up>>
ARM GAS  /tmp/ccATuxCb.s 			page 141


 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	union _Storage
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  constexpr _Storage() noexcept : _M_empty() { }
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename... _Args>
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(in_place_t, _Args&&... __args)
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename _Vp, typename... _Args>
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(__il, std::forward<_Args>(__args)...)
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _Empty_byte _M_empty;
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           _Up _M_value;
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	};
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	union _Storage<_Up, false>
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  constexpr _Storage() noexcept : _M_empty() { }
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename... _Args>
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(in_place_t, _Args&&... __args)
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename _Vp, typename... _Args>
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(__il, std::forward<_Args>(__args)...)
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  // User-provided destructor is needed when _Up has non-trivial dtor.
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ~_Storage() { }
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _Empty_byte _M_empty;
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           _Up _M_value;
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	};
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Storage<_Stored_type> _M_payload;
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       bool _M_engaged = false;
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         void
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         _M_construct(_Args&&... __args)
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         {
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           ::new ((void *) std::__addressof(this->_M_payload))
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_engaged = true;
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         }
ARM GAS  /tmp/ccATuxCb.s 			page 142


 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_destroy() noexcept
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_engaged = false;
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_payload._M_value.~_Stored_type();
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // The _M_get() operations have _M_engaged as a precondition.
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // They exist to access the contained value with the appropriate
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // const-qualification, because _M_payload has had the const removed.
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() noexcept
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_payload._M_value; }
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() const noexcept
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_payload._M_value; }
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // _M_reset is a 'safe' operation with no precondition.
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_reset() noexcept
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (this->_M_engaged)
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_destroy();
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Class template that manages the payload for optionals.
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp,
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    bool /*_HasTrivialDestructor*/ =
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      is_trivially_destructible_v<_Tp>,
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    bool /*_HasTrivialCopy */ =
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      is_trivially_copy_assignable_v<_Tp>
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      && is_trivially_copy_constructible_v<_Tp>,
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    bool /*_HasTrivialMove */ =
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      is_trivially_move_assignable_v<_Tp>
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      && is_trivially_move_constructible_v<_Tp>>
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload;
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for potentially-constexpr optionals (trivial copy/move/destroy).
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, true, true>
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial copy construction/assignment.
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, false, true>
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
ARM GAS  /tmp/ccATuxCb.s 			page 143


 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(_Optional_payload&&) = default;
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial copy assignment.
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(const _Optional_payload& __other)
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_copy_assign(__other);
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial move construction/assignment.
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, true, false>
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(const _Optional_payload&) = default;
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial move assignment.
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(_Optional_payload&& __other)
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_move_assign(std::move(__other));
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial copy and move assignment.
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, false, false>
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial copy assignment.
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
ARM GAS  /tmp/ccATuxCb.s 			page 144


 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(const _Optional_payload& __other)
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_copy_assign(__other);
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial move assignment.
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(_Optional_payload&& __other)
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_move_assign(std::move(__other));
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial destructors.
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp, bool _Copy, bool _Move>
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, false, _Copy, _Move>
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload<_Tp, true, false, false>
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Base class implements all the constructors and assignment operators:
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload<_Tp, true, false, false>::_Optional_payload;
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(const _Optional_payload&) = default;
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(_Optional_payload&&) = default;
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Destructor needs to destroy the contained value:
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() { this->_M_reset(); }
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Common base class for _Optional_base<T> to avoid repeating these
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // member functions in each specialization.
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Dp>
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     class _Optional_base_impl
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     protected:
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Stored_type = remove_const_t<_Tp>;
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // The _M_construct operation has !_M_engaged as a precondition
 413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // while _M_destruct has _M_engaged as a precondition.
 414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	void
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_construct(_Args&&... __args)
 417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ::new
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Stored_type(std::forward<_Args>(__args)...);
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_cast<_Dp*>(this)->_M_payload._M_engaged = true;
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       void
ARM GAS  /tmp/ccATuxCb.s 			page 145


 426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_destruct() noexcept
 427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_destroy(); }
 428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // _M_reset is a 'safe' operation with no precondition.
 430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_reset() noexcept
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
 433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr bool _M_is_engaged() const noexcept
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // The _M_get operations have _M_engaged as a precondition.
 438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() noexcept
 440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__glibcxx_assert(this->_M_is_engaged());
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return static_cast<_Dp*>(this)->_M_payload._M_get();
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() const noexcept
 447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__glibcxx_assert(this->_M_is_engaged());
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return static_cast<const _Dp*>(this)->_M_payload._M_get();
 450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
 454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * @brief Class template that provides copy/move constructors of optional.
 455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * Such a separate base class template is necessary in order to
 457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * conditionally make copy/move constructors trivial.
 458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * When the contained value is trivially copy/move constructible,
 460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * the copy/move constructors of _Optional_base will invoke the
 461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * trivial copy/move constructor of _Optional_payload. Otherwise,
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * they will invoke _Optional_payload(bool, const _Optional_payload&)
 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * or _Optional_payload(bool, _Optional_payload&&) to initialize
 464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * the contained value, if copying/moving an engaged optional.
 465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * Whether the other special members are trivial is determined by the
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * _Optional_payload<_Tp> specialization used for the _M_payload member.
 468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * @see optional, _Enable_special_members
 470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     */
 471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp,
 472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	   bool = is_trivially_copy_constructible_v<_Tp>,
 473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	   bool = is_trivially_move_constructible_v<_Tp>>
 474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base
 475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
ARM GAS  /tmp/ccATuxCb.s 			page 146


 483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other)
 500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __other._M_payload)
 502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other)
 505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>)
 506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::move(__other._M_payload))
 508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base<_Tp, false, true>
 519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
ARM GAS  /tmp/ccATuxCb.s 			page 147


 540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other)
 544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __other._M_payload)
 546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other) = default;
 549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base<_Tp, true, false>
 559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other) = default;
 584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other)
 586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>)
 587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::move(__other._M_payload))
 589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
ARM GAS  /tmp/ccATuxCb.s 			page 148


 597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base<_Tp, true, true>
 600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other) = default;
 625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other) = default;
 626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   class optional;
 636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     using __converts_from_optional =
 639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       __or_<is_constructible<_Tp, const optional<_Up>&>,
 640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_constructible<_Tp, optional<_Up>&>,
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_constructible<_Tp, const optional<_Up>&&>,
 642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_constructible<_Tp, optional<_Up>&&>,
 643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<const optional<_Up>&, _Tp>,
 644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<optional<_Up>&, _Tp>,
 645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<const optional<_Up>&&, _Tp>,
 646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<optional<_Up>&&, _Tp>>;
 647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     using __assigns_from_optional =
 650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       __or_<is_assignable<_Tp&, const optional<_Up>&>,
 651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_assignable<_Tp&, optional<_Up>&>,
 652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_assignable<_Tp&, const optional<_Up>&&>,
 653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_assignable<_Tp&, optional<_Up>&&>>;
ARM GAS  /tmp/ccATuxCb.s 			page 149


 654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
 656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * @brief Class template for optional values.
 657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     */
 658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     class optional
 660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : private _Optional_base<_Tp>,
 661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       private _Enable_copy_move<
 662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Copy constructor.
 663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	is_copy_constructible_v<_Tp>,
 664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Copy assignment.
 665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__and_v<is_copy_constructible<_Tp>, is_copy_assignable<_Tp>>,
 666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Move constructor.
 667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	is_move_constructible_v<_Tp>,
 668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Move assignment.
 669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__and_v<is_move_constructible<_Tp>, is_move_assignable<_Tp>>,
 670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Unique tag type.
 671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional<_Tp>>
 672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       static_assert(!is_same_v<remove_cv_t<_Tp>, nullopt_t>);
 674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       static_assert(!is_same_v<remove_cv_t<_Tp>, in_place_t>);
 675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       static_assert(!is_reference_v<_Tp>);
 676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     private:
 678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Base = _Optional_base<_Tp>;
 679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // SFINAE helpers
 681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using __not_self = __not_<is_same<optional, __remove_cvref_t<_Up>>>;
 683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using __not_tag = __not_<is_same<in_place_t, __remove_cvref_t<_Up>>>;
 685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Cond>
 686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using _Requires = enable_if_t<__and_v<_Cond...>, bool>;
 687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     public:
 689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using value_type = _Tp;
 690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr optional() = default;
 692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr optional(nullopt_t) noexcept { }
 694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Converting constructors for engaged optionals.
 696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up = _Tp,
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_self<_Up>, __not_tag<_Up>,
 698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, _Up&&>,
 699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_convertible<_Up&&, _Tp>> = true>
 700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(_Up&& __t)
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up = _Tp,
 705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_self<_Up>, __not_tag<_Up>,
 706:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, _Up&&>,
 707:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<is_convertible<_Up&&, _Tp>>> = false>
 708:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 709:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(_Up&& __t)
 710:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _Base(std::in_place, std::forward<_Up>(__t)) { }
ARM GAS  /tmp/ccATuxCb.s 			page 150


 711:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 712:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up,
 713:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_<is_same<_Tp, _Up>>,
 714:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, const _Up&>,
 715:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_convertible<const _Up&, _Tp>,
 716:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<__converts_from_optional<_Tp, _Up>>> = true>
 717:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 718:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(const optional<_Up>& __t)
 719:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 720:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 721:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(*__t);
 722:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 723:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 724:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up,
 725:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_<is_same<_Tp, _Up>>,
 726:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, const _Up&>,
 727:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<is_convertible<const _Up&, _Tp>>,
 728:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<__converts_from_optional<_Tp, _Up>>> = false>
 729:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 730:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(const optional<_Up>& __t)
 731:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 732:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 733:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(*__t);
 734:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 735:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 736:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template <typename _Up,
 737:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		_Requires<__not_<is_same<_Tp, _Up>>,
 738:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  is_constructible<_Tp, _Up&&>,
 739:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  is_convertible<_Up&&, _Tp>,
 740:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  __not_<__converts_from_optional<_Tp, _Up>>> = true>
 741:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 742:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(optional<_Up>&& __t)
 743:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 744:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 745:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(std::move(*__t));
 746:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 747:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 748:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template <typename _Up,
 749:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		_Requires<__not_<is_same<_Tp, _Up>>,
 750:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  is_constructible<_Tp, _Up&&>,
 751:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  __not_<is_convertible<_Up&&, _Tp>>,
 752:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  __not_<__converts_from_optional<_Tp, _Up>>> = false>
 753:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 754:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(optional<_Up>&& __t)
 755:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 756:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 757:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(std::move(*__t));
 758:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 759:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 760:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 761:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<is_constructible<_Tp, _Args&&...>> = false>
 762:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 763:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(in_place_t, _Args&&... __args)
 764:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Args>(__args)...) { }
 765:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 766:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 767:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<is_constructible<_Tp,
ARM GAS  /tmp/ccATuxCb.s 			page 151


 768:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					  initializer_list<_Up>&,
 769:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					  _Args&&...>> = false>
 770:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 771:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(in_place_t, initializer_list<_Up> __il, _Args&&... __args)
 772:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, __il, std::forward<_Args>(__args)...) { }
 773:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 774:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 775:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       optional&
 776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(nullopt_t) noexcept
 777:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_reset();
 779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 781:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 782:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up = _Tp>
 783:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<__and_v<__not_self<_Up>,
 784:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__and_<is_scalar<_Tp>,
 785:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					  is_same<_Tp, decay_t<_Up>>>>,
 786:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_constructible<_Tp, _Up>,
 787:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_assignable<_Tp&, _Up>>,
 788:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		    optional&>
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	operator=(_Up&& __u)
 790:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (this->_M_is_engaged())
 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 793:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_construct(std::forward<_Up>(__u));
 795:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return *this;
 797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 798:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 799:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 800:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,
 801:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_constructible<_Tp, const _Up&>,
 802:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_assignable<_Tp&, _Up>,
 803:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__converts_from_optional<_Tp, _Up>>,
 804:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__assigns_from_optional<_Tp, _Up>>>,
 805:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		    optional&>
 806:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	operator=(const optional<_Up>& __u)
 807:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 808:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__u)
 809:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
 810:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      if (this->_M_is_engaged())
 811:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_get() = *__u;
 812:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      else
 813:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_construct(*__u);
 814:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 815:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 816:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
 817:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 818:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 819:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return *this;
 820:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 821:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 822:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 823:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         enable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,
 824:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_constructible<_Tp, _Up>,
ARM GAS  /tmp/ccATuxCb.s 			page 152


 825:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_assignable<_Tp&, _Up>,
 826:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__converts_from_optional<_Tp, _Up>>,
 827:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__assigns_from_optional<_Tp, _Up>>>,
 828:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		    optional&>
 829:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	operator=(optional<_Up>&& __u)
 830:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 831:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__u)
 832:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
 833:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      if (this->_M_is_engaged())
 834:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_get() = std::move(*__u);
 835:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      else
 836:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_construct(std::move(*__u));
 837:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 838:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 839:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
 840:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 841:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 842:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 843:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return *this;
 844:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 845:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 846:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 847:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<is_constructible_v<_Tp, _Args&&...>, _Tp&>
 848:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	emplace(_Args&&... __args)
 849:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 850:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_reset();
 851:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(std::forward<_Args>(__args)...);
 852:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_get();
 853:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 854:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 855:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args>
 856:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&,
 857:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 				       _Args&&...>, _Tp&>
 858:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
 859:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 860:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_reset();
 861:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(__il, std::forward<_Args>(__args)...);
 862:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_get();
 863:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 864:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 865:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Destructor is implicit, implemented in _Optional_base.
 866:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 867:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Swap.
 868:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       void
 869:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       swap(optional& __other)
 870:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>
 871:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       && is_nothrow_swappable_v<_Tp>)
 872:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 873:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using std::swap;
 874:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 875:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (this->_M_is_engaged() && __other._M_is_engaged())
 876:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  swap(this->_M_get(), __other._M_get());
 877:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else if (this->_M_is_engaged())
 878:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 879:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    __other._M_construct(std::move(this->_M_get()));
 880:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_destruct();
 881:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
ARM GAS  /tmp/ccATuxCb.s 			page 153


 882:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else if (__other._M_is_engaged())
 883:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 884:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_construct(std::move(__other._M_get()));
 885:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    __other._M_destruct();
 886:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 887:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 888:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 889:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Observers.
 890:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp*
 891:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator->() const
 892:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::__addressof(this->_M_get()); }
 893:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 894:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp*
 895:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator->()
 1195              		.loc 12 895 7
 1196              		.cfi_startproc
 1197              		@ args = 0, pretend = 0, frame = 8
 1198              		@ frame_needed = 1, uses_anonymous_args = 0
 1199 0000 80B5     		push	{r7, lr}
 1200              	.LCFI101:
 1201              		.cfi_def_cfa_offset 8
 1202              		.cfi_offset 7, -8
 1203              		.cfi_offset 14, -4
 1204 0002 82B0     		sub	sp, sp, #8
 1205              	.LCFI102:
 1206              		.cfi_def_cfa_offset 16
 1207 0004 00AF     		add	r7, sp, #0
 1208              	.LCFI103:
 1209              		.cfi_def_cfa_register 7
 1210 0006 7860     		str	r0, [r7, #4]
 896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::__addressof(this->_M_get()); }
 1211              		.loc 12 896 32
 1212 0008 7868     		ldr	r0, [r7, #4]
 1213 000a FFF7FEFF 		bl	_ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv
 1214 000e 0346     		mov	r3, r0
 1215 0010 1846     		mov	r0, r3
 1216 0012 FFF7FEFF 		bl	_ZSt11__addressofISt4pairIffEEPT_RS2_
 1217 0016 0346     		mov	r3, r0
 1218              		.loc 12 896 50
 1219 0018 1846     		mov	r0, r3
 1220 001a 0837     		adds	r7, r7, #8
 1221              	.LCFI104:
 1222              		.cfi_def_cfa_offset 8
 1223 001c BD46     		mov	sp, r7
 1224              	.LCFI105:
 1225              		.cfi_def_cfa_register 13
 1226              		@ sp needed
 1227 001e 80BD     		pop	{r7, pc}
 1228              		.cfi_endproc
 1229              	.LFE4825:
 1231              		.section	.text._ZSt11__addressofISt4pairIffEEPT_RS2_,"axG",%progbits,_ZSt11__addressofISt4pairIffE
 1232              		.align	1
 1233              		.weak	_ZSt11__addressofISt4pairIffEEPT_RS2_
 1234              		.syntax unified
 1235              		.thumb
 1236              		.thumb_func
 1237              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccATuxCb.s 			page 154


 1239              	_ZSt11__addressofISt4pairIffEEPT_RS2_:
 1240              	.LFB4826:
 1241              		.file 13 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Copyright (C) 2007-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** /** @file bits/move.h
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****  */
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #ifndef _MOVE_H
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #define _MOVE_H 1
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #include <bits/c++config.h>
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #if __cplusplus < 201103L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** # include <bits/concept_check.h>
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #endif
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** {
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief Same as C++11 std::addressof
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @ingroup utilities
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 1242              		.loc 13 49 5
 1243              		.cfi_startproc
 1244              		@ args = 0, pretend = 0, frame = 8
 1245              		@ frame_needed = 1, uses_anonymous_args = 0
 1246              		@ link register save eliminated.
ARM GAS  /tmp/ccATuxCb.s 			page 155


 1247 0000 80B4     		push	{r7}
 1248              	.LCFI106:
 1249              		.cfi_def_cfa_offset 4
 1250              		.cfi_offset 7, -4
 1251 0002 83B0     		sub	sp, sp, #12
 1252              	.LCFI107:
 1253              		.cfi_def_cfa_offset 16
 1254 0004 00AF     		add	r7, sp, #0
 1255              	.LCFI108:
 1256              		.cfi_def_cfa_register 7
 1257 0006 7860     		str	r0, [r7, #4]
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return __builtin_addressof(__r); }
 1258              		.loc 13 50 37
 1259 0008 7B68     		ldr	r3, [r7, #4]
 1260              		.loc 13 50 40
 1261 000a 1846     		mov	r0, r3
 1262 000c 0C37     		adds	r7, r7, #12
 1263              	.LCFI109:
 1264              		.cfi_def_cfa_offset 4
 1265 000e BD46     		mov	sp, r7
 1266              	.LCFI110:
 1267              		.cfi_def_cfa_register 13
 1268              		@ sp needed
 1269 0010 5DF8047B 		ldr	r7, [sp], #4
 1270              	.LCFI111:
 1271              		.cfi_restore 7
 1272              		.cfi_def_cfa_offset 0
 1273 0014 7047     		bx	lr
 1274              		.cfi_endproc
 1275              	.LFE4826:
 1277              		.section	.text._ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv,"ax
 1278              		.align	1
 1279              		.weak	_ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv
 1280              		.syntax unified
 1281              		.thumb
 1282              		.thumb_func
 1283              		.fpu fpv4-sp-d16
 1285              	_ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv:
 1286              	.LFB4827:
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 1287              		.loc 12 439 7
 1288              		.cfi_startproc
 1289              		@ args = 0, pretend = 0, frame = 8
 1290              		@ frame_needed = 1, uses_anonymous_args = 0
 1291 0000 80B5     		push	{r7, lr}
 1292              	.LCFI112:
 1293              		.cfi_def_cfa_offset 8
 1294              		.cfi_offset 7, -8
 1295              		.cfi_offset 14, -4
 1296 0002 82B0     		sub	sp, sp, #8
 1297              	.LCFI113:
 1298              		.cfi_def_cfa_offset 16
 1299 0004 00AF     		add	r7, sp, #0
 1300              	.LCFI114:
 1301              		.cfi_def_cfa_register 7
 1302 0006 7860     		str	r0, [r7, #4]
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
ARM GAS  /tmp/ccATuxCb.s 			page 156


 1303              		.loc 12 442 51
 1304 0008 7B68     		ldr	r3, [r7, #4]
 1305 000a 1846     		mov	r0, r3
 1306 000c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEE6_M_getEv
 1307 0010 0346     		mov	r3, r0
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1308              		.loc 12 443 7
 1309 0012 1846     		mov	r0, r3
 1310 0014 0837     		adds	r7, r7, #8
 1311              	.LCFI115:
 1312              		.cfi_def_cfa_offset 8
 1313 0016 BD46     		mov	sp, r7
 1314              	.LCFI116:
 1315              		.cfi_def_cfa_register 13
 1316              		@ sp needed
 1317 0018 80BD     		pop	{r7, pc}
 1318              		.cfi_endproc
 1319              	.LFE4827:
 1321              		.section	.text._ZNSt22_Optional_payload_baseISt4pairIffEE6_M_getEv,"axG",%progbits,_ZNSt22_Optiona
 1322              		.align	1
 1323              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEE6_M_getEv
 1324              		.syntax unified
 1325              		.thumb
 1326              		.thumb_func
 1327              		.fpu fpv4-sp-d16
 1329              	_ZNSt22_Optional_payload_baseISt4pairIffEE6_M_getEv:
 1330              	.LFB4828:
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_payload._M_value; }
 1331              		.loc 12 268 7
 1332              		.cfi_startproc
 1333              		@ args = 0, pretend = 0, frame = 8
 1334              		@ frame_needed = 1, uses_anonymous_args = 0
 1335              		@ link register save eliminated.
 1336 0000 80B4     		push	{r7}
 1337              	.LCFI117:
 1338              		.cfi_def_cfa_offset 4
 1339              		.cfi_offset 7, -4
 1340 0002 83B0     		sub	sp, sp, #12
 1341              	.LCFI118:
 1342              		.cfi_def_cfa_offset 16
 1343 0004 00AF     		add	r7, sp, #0
 1344              	.LCFI119:
 1345              		.cfi_def_cfa_register 7
 1346 0006 7860     		str	r0, [r7, #4]
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1347              		.loc 12 269 33
 1348 0008 7B68     		ldr	r3, [r7, #4]
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1349              		.loc 12 269 43
 1350 000a 1846     		mov	r0, r3
 1351 000c 0C37     		adds	r7, r7, #12
 1352              	.LCFI120:
 1353              		.cfi_def_cfa_offset 4
 1354 000e BD46     		mov	sp, r7
 1355              	.LCFI121:
 1356              		.cfi_def_cfa_register 13
 1357              		@ sp needed
ARM GAS  /tmp/ccATuxCb.s 			page 157


 1358 0010 5DF8047B 		ldr	r7, [sp], #4
 1359              	.LCFI122:
 1360              		.cfi_restore 7
 1361              		.cfi_def_cfa_offset 0
 1362 0014 7047     		bx	lr
 1363              		.cfi_endproc
 1364              	.LFE4828:
 1366              		.section	.text._ZNKSt8optionalIfE9has_valueEv,"axG",%progbits,_ZNKSt8optionalIfE9has_valueEv,comda
 1367              		.align	1
 1368              		.weak	_ZNKSt8optionalIfE9has_valueEv
 1369              		.syntax unified
 1370              		.thumb
 1371              		.thumb_func
 1372              		.fpu fpv4-sp-d16
 1374              	_ZNKSt8optionalIfE9has_valueEv:
 1375              	.LFB4829:
 897:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 898:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 899:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*() const&
 900:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_get(); }
 901:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 902:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*()&
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_get(); }
 905:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 906:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&&
 907:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*()&&
 908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::move(this->_M_get()); }
 909:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 910:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&&
 911:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*() const&&
 912:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::move(this->_M_get()); }
 913:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 914:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr explicit operator bool() const noexcept
 915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 916:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr bool has_value() const noexcept
 1376              		.loc 12 917 22
 1377              		.cfi_startproc
 1378              		@ args = 0, pretend = 0, frame = 8
 1379              		@ frame_needed = 1, uses_anonymous_args = 0
 1380 0000 80B5     		push	{r7, lr}
 1381              	.LCFI123:
 1382              		.cfi_def_cfa_offset 8
 1383              		.cfi_offset 7, -8
 1384              		.cfi_offset 14, -4
 1385 0002 82B0     		sub	sp, sp, #8
 1386              	.LCFI124:
 1387              		.cfi_def_cfa_offset 16
 1388 0004 00AF     		add	r7, sp, #0
 1389              	.LCFI125:
 1390              		.cfi_def_cfa_register 7
 1391 0006 7860     		str	r0, [r7, #4]
 918:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 1392              		.loc 12 918 35
 1393 0008 7868     		ldr	r0, [r7, #4]
 1394 000a FFF7FEFF 		bl	_ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv
ARM GAS  /tmp/ccATuxCb.s 			page 158


 1395 000e 0346     		mov	r3, r0
 1396              		.loc 12 918 39
 1397 0010 1846     		mov	r0, r3
 1398 0012 0837     		adds	r7, r7, #8
 1399              	.LCFI126:
 1400              		.cfi_def_cfa_offset 8
 1401 0014 BD46     		mov	sp, r7
 1402              	.LCFI127:
 1403              		.cfi_def_cfa_register 13
 1404              		@ sp needed
 1405 0016 80BD     		pop	{r7, pc}
 1406              		.cfi_endproc
 1407              	.LFE4829:
 1409              		.section	.text._ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv,"axG",
 1410              		.align	1
 1411              		.weak	_ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv
 1412              		.syntax unified
 1413              		.thumb
 1414              		.thumb_func
 1415              		.fpu fpv4-sp-d16
 1417              	_ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv:
 1418              	.LFB4830:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 1419              		.loc 12 434 22
 1420              		.cfi_startproc
 1421              		@ args = 0, pretend = 0, frame = 8
 1422              		@ frame_needed = 1, uses_anonymous_args = 0
 1423              		@ link register save eliminated.
 1424 0000 80B4     		push	{r7}
 1425              	.LCFI128:
 1426              		.cfi_def_cfa_offset 4
 1427              		.cfi_offset 7, -4
 1428 0002 83B0     		sub	sp, sp, #12
 1429              	.LCFI129:
 1430              		.cfi_def_cfa_offset 16
 1431 0004 00AF     		add	r7, sp, #0
 1432              	.LCFI130:
 1433              		.cfi_def_cfa_register 7
 1434 0006 7860     		str	r0, [r7, #4]
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1435              		.loc 12 435 58
 1436 0008 7B68     		ldr	r3, [r7, #4]
 1437 000a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1438              		.loc 12 435 70
 1439 000c 1846     		mov	r0, r3
 1440 000e 0C37     		adds	r7, r7, #12
 1441              	.LCFI131:
 1442              		.cfi_def_cfa_offset 4
 1443 0010 BD46     		mov	sp, r7
 1444              	.LCFI132:
 1445              		.cfi_def_cfa_register 13
 1446              		@ sp needed
 1447 0012 5DF8047B 		ldr	r7, [sp], #4
 1448              	.LCFI133:
 1449              		.cfi_restore 7
 1450              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccATuxCb.s 			page 159


 1451 0016 7047     		bx	lr
 1452              		.cfi_endproc
 1453              	.LFE4830:
 1455              		.section	.text._ZNRSt8optionalIfEdeEv,"axG",%progbits,_ZNRSt8optionalIfEdeEv,comdat
 1456              		.align	1
 1457              		.weak	_ZNRSt8optionalIfEdeEv
 1458              		.syntax unified
 1459              		.thumb
 1460              		.thumb_func
 1461              		.fpu fpv4-sp-d16
 1463              	_ZNRSt8optionalIfEdeEv:
 1464              	.LFB4831:
 903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_get(); }
 1465              		.loc 12 903 7
 1466              		.cfi_startproc
 1467              		@ args = 0, pretend = 0, frame = 8
 1468              		@ frame_needed = 1, uses_anonymous_args = 0
 1469 0000 80B5     		push	{r7, lr}
 1470              	.LCFI134:
 1471              		.cfi_def_cfa_offset 8
 1472              		.cfi_offset 7, -8
 1473              		.cfi_offset 14, -4
 1474 0002 82B0     		sub	sp, sp, #8
 1475              	.LCFI135:
 1476              		.cfi_def_cfa_offset 16
 1477 0004 00AF     		add	r7, sp, #0
 1478              	.LCFI136:
 1479              		.cfi_def_cfa_register 7
 1480 0006 7860     		str	r0, [r7, #4]
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1481              		.loc 12 904 28
 1482 0008 7868     		ldr	r0, [r7, #4]
 1483 000a FFF7FEFF 		bl	_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv
 1484 000e 0346     		mov	r3, r0
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1485              		.loc 12 904 32
 1486 0010 1846     		mov	r0, r3
 1487 0012 0837     		adds	r7, r7, #8
 1488              	.LCFI137:
 1489              		.cfi_def_cfa_offset 8
 1490 0014 BD46     		mov	sp, r7
 1491              	.LCFI138:
 1492              		.cfi_def_cfa_register 13
 1493              		@ sp needed
 1494 0016 80BD     		pop	{r7, pc}
 1495              		.cfi_endproc
 1496              	.LFE4831:
 1498              		.section	.text._ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv,"axG",%progbits
 1499              		.align	1
 1500              		.weak	_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv
 1501              		.syntax unified
 1502              		.thumb
 1503              		.thumb_func
 1504              		.fpu fpv4-sp-d16
 1506              	_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv:
 1507              	.LFB4832:
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
ARM GAS  /tmp/ccATuxCb.s 			page 160


 1508              		.loc 12 439 7
 1509              		.cfi_startproc
 1510              		@ args = 0, pretend = 0, frame = 8
 1511              		@ frame_needed = 1, uses_anonymous_args = 0
 1512 0000 80B5     		push	{r7, lr}
 1513              	.LCFI139:
 1514              		.cfi_def_cfa_offset 8
 1515              		.cfi_offset 7, -8
 1516              		.cfi_offset 14, -4
 1517 0002 82B0     		sub	sp, sp, #8
 1518              	.LCFI140:
 1519              		.cfi_def_cfa_offset 16
 1520 0004 00AF     		add	r7, sp, #0
 1521              	.LCFI141:
 1522              		.cfi_def_cfa_register 7
 1523 0006 7860     		str	r0, [r7, #4]
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 1524              		.loc 12 442 51
 1525 0008 7B68     		ldr	r3, [r7, #4]
 1526 000a 1846     		mov	r0, r3
 1527 000c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfE6_M_getEv
 1528 0010 0346     		mov	r3, r0
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1529              		.loc 12 443 7
 1530 0012 1846     		mov	r0, r3
 1531 0014 0837     		adds	r7, r7, #8
 1532              	.LCFI142:
 1533              		.cfi_def_cfa_offset 8
 1534 0016 BD46     		mov	sp, r7
 1535              	.LCFI143:
 1536              		.cfi_def_cfa_register 13
 1537              		@ sp needed
 1538 0018 80BD     		pop	{r7, pc}
 1539              		.cfi_endproc
 1540              	.LFE4832:
 1542              		.section	.text._ZNSt22_Optional_payload_baseIfE6_M_getEv,"axG",%progbits,_ZNSt22_Optional_payload_
 1543              		.align	1
 1544              		.weak	_ZNSt22_Optional_payload_baseIfE6_M_getEv
 1545              		.syntax unified
 1546              		.thumb
 1547              		.thumb_func
 1548              		.fpu fpv4-sp-d16
 1550              	_ZNSt22_Optional_payload_baseIfE6_M_getEv:
 1551              	.LFB4833:
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_payload._M_value; }
 1552              		.loc 12 268 7
 1553              		.cfi_startproc
 1554              		@ args = 0, pretend = 0, frame = 8
 1555              		@ frame_needed = 1, uses_anonymous_args = 0
 1556              		@ link register save eliminated.
 1557 0000 80B4     		push	{r7}
 1558              	.LCFI144:
 1559              		.cfi_def_cfa_offset 4
 1560              		.cfi_offset 7, -4
 1561 0002 83B0     		sub	sp, sp, #12
 1562              	.LCFI145:
 1563              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccATuxCb.s 			page 161


 1564 0004 00AF     		add	r7, sp, #0
 1565              	.LCFI146:
 1566              		.cfi_def_cfa_register 7
 1567 0006 7860     		str	r0, [r7, #4]
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1568              		.loc 12 269 33
 1569 0008 7B68     		ldr	r3, [r7, #4]
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1570              		.loc 12 269 43
 1571 000a 1846     		mov	r0, r3
 1572 000c 0C37     		adds	r7, r7, #12
 1573              	.LCFI147:
 1574              		.cfi_def_cfa_offset 4
 1575 000e BD46     		mov	sp, r7
 1576              	.LCFI148:
 1577              		.cfi_def_cfa_register 13
 1578              		@ sp needed
 1579 0010 5DF8047B 		ldr	r7, [sp], #4
 1580              	.LCFI149:
 1581              		.cfi_restore 7
 1582              		.cfi_def_cfa_offset 0
 1583 0014 7047     		bx	lr
 1584              		.cfi_endproc
 1585              	.LFE4833:
 1587              		.section	.text._ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEE
 1588              		.align	1
 1589              		.weak	_ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm
 1590              		.syntax unified
 1591              		.thumb
 1592              		.thumb_func
 1593              		.fpu fpv4-sp-d16
 1595              	_ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:
 1596              	.LFB4824:
  29:Src/motor.cpp **** 
  30:Src/motor.cpp ****     ODriveIntf::MotorIntf::Error on_measurement(
 1597              		.loc 11 30 34
 1598              		.cfi_startproc
 1599              		@ args = 20, pretend = 8, frame = 32
 1600              		@ frame_needed = 1, uses_anonymous_args = 0
 1601 0000 82B0     		sub	sp, sp, #8
 1602              	.LCFI150:
 1603              		.cfi_def_cfa_offset 8
 1604 0002 80B5     		push	{r7, lr}
 1605              	.LCFI151:
 1606              		.cfi_def_cfa_offset 16
 1607              		.cfi_offset 7, -16
 1608              		.cfi_offset 14, -12
 1609 0004 2DED028B 		vpush.64	{d8}
 1610              	.LCFI152:
 1611              		.cfi_def_cfa_offset 24
 1612              		.cfi_offset 80, -24
 1613              		.cfi_offset 81, -20
 1614 0008 88B0     		sub	sp, sp, #32
 1615              	.LCFI153:
 1616              		.cfi_def_cfa_offset 56
 1617 000a 00AF     		add	r7, sp, #0
 1618              	.LCFI154:
ARM GAS  /tmp/ccATuxCb.s 			page 162


 1619              		.cfi_def_cfa_register 7
 1620 000c F860     		str	r0, [r7, #12]
 1621 000e 381D     		adds	r0, r7, #4
 1622 0010 80E80600 		stm	r0, {r1, r2}
 1623 0014 7B63     		str	r3, [r7, #52]
  31:Src/motor.cpp ****             std::optional<float> vbus_voltage,
  32:Src/motor.cpp ****             std::optional<float2D> Ialpha_beta,
  33:Src/motor.cpp ****             uint32_t input_timestamp) final {
  34:Src/motor.cpp **** 
  35:Src/motor.cpp ****         if (Ialpha_beta.has_value()) {
 1624              		.loc 11 35 34
 1625 0016 07F13403 		add	r3, r7, #52
 1626 001a 1846     		mov	r0, r3
 1627 001c FFF7FEFF 		bl	_ZNKSt8optionalISt4pairIffEE9has_valueEv
 1628 0020 0346     		mov	r3, r0
 1629              		.loc 11 35 9
 1630 0022 002B     		cmp	r3, #0
 1631 0024 42D0     		beq	.L79
  36:Src/motor.cpp ****             actual_current_ = Ialpha_beta->first;
 1632              		.loc 11 36 42
 1633 0026 07F13403 		add	r3, r7, #52
 1634 002a 1846     		mov	r0, r3
 1635 002c FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEptEv
 1636 0030 0346     		mov	r3, r0
 1637              		.loc 11 36 44
 1638 0032 1A68     		ldr	r2, [r3]	@ float
 1639              		.loc 11 36 29
 1640 0034 FB68     		ldr	r3, [r7, #12]
 1641 0036 1A61     		str	r2, [r3, #16]	@ float
  37:Src/motor.cpp ****             test_voltage_ += (kI * current_meas_period) * (target_current_ - actual_current_);
 1642              		.loc 11 37 27
 1643 0038 FB68     		ldr	r3, [r7, #12]
 1644 003a 93ED067A 		vldr.32	s14, [r3, #24]
 1645              		.loc 11 37 31
 1646 003e FB68     		ldr	r3, [r7, #12]
 1647 0040 D3ED016A 		vldr.32	s13, [r3, #4]
 1648              		.loc 11 37 34
 1649 0044 4B4B     		ldr	r3, .L84
 1650 0046 D3ED007A 		vldr.32	s15, [r3]
 1651 004a 66EEA76A 		vmul.f32	s13, s13, s15
 1652              		.loc 11 37 60
 1653 004e FB68     		ldr	r3, [r7, #12]
 1654 0050 93ED056A 		vldr.32	s12, [r3, #20]
 1655              		.loc 11 37 78
 1656 0054 FB68     		ldr	r3, [r7, #12]
 1657 0056 D3ED047A 		vldr.32	s15, [r3, #16]
 1658              		.loc 11 37 76
 1659 005a 76EE677A 		vsub.f32	s15, s12, s15
 1660              		.loc 11 37 57
 1661 005e 66EEA77A 		vmul.f32	s15, s13, s15
 1662              		.loc 11 37 27
 1663 0062 77EE277A 		vadd.f32	s15, s14, s15
 1664 0066 FB68     		ldr	r3, [r7, #12]
 1665 0068 C3ED067A 		vstr.32	s15, [r3, #24]
  38:Src/motor.cpp ****             I_beta_ += (kIBetaFilt * current_meas_period) * (Ialpha_beta->second - I_beta_);
 1666              		.loc 11 38 25
 1667 006c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccATuxCb.s 			page 163


 1668 006e 93ED027A 		vldr.32	s14, [r3, #8]
 1669              		.loc 11 38 36
 1670 0072 404B     		ldr	r3, .L84
 1671 0074 D3ED007A 		vldr.32	s15, [r3]
 1672 0078 27EE278A 		vmul.f32	s16, s14, s15
 1673              		.loc 11 38 73
 1674 007c 07F13403 		add	r3, r7, #52
 1675 0080 1846     		mov	r0, r3
 1676 0082 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEptEv
 1677 0086 0346     		mov	r3, r0
 1678              		.loc 11 38 75
 1679 0088 93ED017A 		vldr.32	s14, [r3, #4]
 1680              		.loc 11 38 84
 1681 008c FB68     		ldr	r3, [r7, #12]
 1682 008e D3ED077A 		vldr.32	s15, [r3, #28]
 1683              		.loc 11 38 82
 1684 0092 77EE677A 		vsub.f32	s15, s14, s15
 1685              		.loc 11 38 59
 1686 0096 28EE277A 		vmul.f32	s14, s16, s15
 1687              		.loc 11 38 21
 1688 009a FB68     		ldr	r3, [r7, #12]
 1689 009c D3ED077A 		vldr.32	s15, [r3, #28]
 1690 00a0 77EE277A 		vadd.f32	s15, s14, s15
 1691 00a4 FB68     		ldr	r3, [r7, #12]
 1692 00a6 C3ED077A 		vstr.32	s15, [r3, #28]
 1693 00aa 07E0     		b	.L80
 1694              	.L79:
  39:Src/motor.cpp ****         } else {
  40:Src/motor.cpp ****             actual_current_ = 0.0f;
 1695              		.loc 11 40 29
 1696 00ac FB68     		ldr	r3, [r7, #12]
 1697 00ae 4FF00002 		mov	r2, #0
 1698 00b2 1A61     		str	r2, [r3, #16]	@ float
  41:Src/motor.cpp ****             test_voltage_ = 0.0f;
 1699              		.loc 11 41 27
 1700 00b4 FB68     		ldr	r3, [r7, #12]
 1701 00b6 4FF00002 		mov	r2, #0
 1702 00ba 9A61     		str	r2, [r3, #24]	@ float
 1703              	.L80:
 1704              	.LBB16:
  42:Src/motor.cpp ****         }
  43:Src/motor.cpp ****     
  44:Src/motor.cpp ****         if (std::abs(test_voltage_) > max_voltage_) {
 1705              		.loc 11 44 21
 1706 00bc FB68     		ldr	r3, [r7, #12]
 1707 00be D3ED067A 		vldr.32	s15, [r3, #24]
 1708 00c2 B0EE670A 		vmov.f32	s0, s15
 1709 00c6 FFF7FEFF 		bl	_ZSt3absf
 1710 00ca B0EE407A 		vmov.f32	s14, s0
 1711              		.loc 11 44 39
 1712 00ce FB68     		ldr	r3, [r7, #12]
 1713 00d0 D3ED037A 		vldr.32	s15, [r3, #12]
 1714              		.loc 11 44 37
 1715 00d4 B4EEE77A 		vcmpe.f32	s14, s15
 1716 00d8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1717 00dc CCBF     		ite	gt
 1718 00de 0123     		movgt	r3, #1
ARM GAS  /tmp/ccATuxCb.s 			page 164


 1719 00e0 0023     		movle	r3, #0
 1720 00e2 DBB2     		uxtb	r3, r3
 1721              		.loc 11 44 9
 1722 00e4 002B     		cmp	r3, #0
 1723 00e6 04D0     		beq	.L81
  45:Src/motor.cpp ****             test_voltage_ = NAN;
 1724              		.loc 11 45 27
 1725 00e8 FB68     		ldr	r3, [r7, #12]
 1726 00ea 234A     		ldr	r2, .L84+4
 1727 00ec 9A61     		str	r2, [r3, #24]	@ float
  46:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_PHASE_RESISTANCE_OUT_OF_RANGE; 
 1728              		.loc 11 46 43
 1729 00ee 0123     		movs	r3, #1
 1730 00f0 37E0     		b	.L82
 1731              	.L81:
 1732              	.LBB17:
 1733              	.LBB18:
  47:Src/motor.cpp ****         } else if (!vbus_voltage.has_value()) {
 1734              		.loc 11 47 43
 1735 00f2 3B1D     		adds	r3, r7, #4
 1736 00f4 1846     		mov	r0, r3
 1737 00f6 FFF7FEFF 		bl	_ZNKSt8optionalIfE9has_valueEv
 1738 00fa 0346     		mov	r3, r0
 1739              		.loc 11 47 20
 1740 00fc 83F00103 		eor	r3, r3, #1
 1741 0100 DBB2     		uxtb	r3, r3
 1742              		.loc 11 47 16
 1743 0102 002B     		cmp	r3, #0
 1744 0104 02D0     		beq	.L83
  48:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_UNKNOWN_VBUS_VOLTAGE;
 1745              		.loc 11 48 43
 1746 0106 4FF48023 		mov	r3, #262144
 1747 010a 2AE0     		b	.L82
 1748              	.L83:
 1749              	.LBB19:
  49:Src/motor.cpp ****         } else {
  50:Src/motor.cpp ****             float vfactor = 1.0f / ((2.0f / 3.0f) * *vbus_voltage);
 1750              		.loc 11 50 54
 1751 010c 3B1D     		adds	r3, r7, #4
 1752 010e 1846     		mov	r0, r3
 1753 0110 FFF7FEFF 		bl	_ZNRSt8optionalIfEdeEv
 1754 0114 0346     		mov	r3, r0
 1755              		.loc 11 50 53
 1756 0116 D3ED007A 		vldr.32	s15, [r3]
 1757              		.loc 11 50 51
 1758 011a 9FED187A 		vldr.32	s14, .L84+8
 1759 011e 27EE877A 		vmul.f32	s14, s15, s14
 1760              		.loc 11 50 66
 1761 0122 F7EE006A 		vmov.f32	s13, #1.0e+0
 1762 0126 C6EE877A 		vdiv.f32	s15, s13, s14
 1763 012a C7ED077A 		vstr.32	s15, [r7, #28]
  51:Src/motor.cpp ****             test_mod_ = test_voltage_ * vfactor;
 1764              		.loc 11 51 25
 1765 012e FB68     		ldr	r3, [r7, #12]
 1766 0130 93ED067A 		vldr.32	s14, [r3, #24]
 1767              		.loc 11 51 39
 1768 0134 D7ED077A 		vldr.32	s15, [r7, #28]
ARM GAS  /tmp/ccATuxCb.s 			page 165


 1769 0138 67EE277A 		vmul.f32	s15, s14, s15
 1770 013c C7ED067A 		vstr.32	s15, [r7, #24]
 1771              		.loc 11 51 41
 1772 0140 07F11802 		add	r2, r7, #24
 1773 0144 07F11003 		add	r3, r7, #16
 1774 0148 1146     		mov	r1, r2
 1775 014a 1846     		mov	r0, r3
 1776 014c FFF7FEFF 		bl	_ZNSt8optionalIfEC1IfLb1EEEOT_
 1777              		.loc 11 51 23
 1778 0150 FB68     		ldr	r3, [r7, #12]
 1779 0152 2033     		adds	r3, r3, #32
 1780 0154 07F11002 		add	r2, r7, #16
 1781 0158 92E80300 		ldm	r2, {r0, r1}
 1782 015c 83E80300 		stm	r3, {r0, r1}
  52:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_NONE;
 1783              		.loc 11 52 43
 1784 0160 0023     		movs	r3, #0
 1785              	.L82:
 1786              	.LBE19:
 1787              	.LBE18:
 1788              	.LBE17:
 1789              	.LBE16:
  53:Src/motor.cpp ****         }
  54:Src/motor.cpp ****     }
 1790              		.loc 11 54 5
 1791 0162 1846     		mov	r0, r3
 1792 0164 2037     		adds	r7, r7, #32
 1793              	.LCFI155:
 1794              		.cfi_def_cfa_offset 24
 1795 0166 BD46     		mov	sp, r7
 1796              	.LCFI156:
 1797              		.cfi_def_cfa_register 13
 1798              		@ sp needed
 1799 0168 BDEC028B 		vldm	sp!, {d8}
 1800              	.LCFI157:
 1801              		.cfi_restore 80
 1802              		.cfi_restore 81
 1803              		.cfi_def_cfa_offset 16
 1804 016c BDE88040 		pop	{r7, lr}
 1805              	.LCFI158:
 1806              		.cfi_restore 14
 1807              		.cfi_restore 7
 1808              		.cfi_def_cfa_offset 8
 1809 0170 02B0     		add	sp, sp, #8
 1810              	.LCFI159:
 1811              		.cfi_def_cfa_offset 0
 1812 0172 7047     		bx	lr
 1813              	.L85:
 1814              		.align	2
 1815              	.L84:
 1816 0174 00000000 		.word	current_meas_period
 1817 0178 0000C07F 		.word	2143289344
 1818 017c ABAA2A3F 		.word	1059760811
 1819              		.cfi_endproc
 1820              	.LFE4824:
 1822              		.section	.text._ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIf
 1823              		.align	1
ARM GAS  /tmp/ccATuxCb.s 			page 166


 1824              		.weak	_ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_If
 1825              		.syntax unified
 1826              		.thumb
 1827              		.thumb_func
 1828              		.fpu fpv4-sp-d16
 1830              	_ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:
 1831              	.LFB4834:
  55:Src/motor.cpp **** 
  56:Src/motor.cpp **** 
  57:Src/motor.cpp ****     ODriveIntf::MotorIntf::Error get_alpha_beta_output(
 1832              		.loc 11 57 34
 1833              		.cfi_startproc
 1834              		@ args = 0, pretend = 0, frame = 40
 1835              		@ frame_needed = 1, uses_anonymous_args = 0
 1836 0000 80B5     		push	{r7, lr}
 1837              	.LCFI160:
 1838              		.cfi_def_cfa_offset 8
 1839              		.cfi_offset 7, -8
 1840              		.cfi_offset 14, -4
 1841 0002 8AB0     		sub	sp, sp, #40
 1842              	.LCFI161:
 1843              		.cfi_def_cfa_offset 48
 1844 0004 00AF     		add	r7, sp, #0
 1845              	.LCFI162:
 1846              		.cfi_def_cfa_register 7
 1847 0006 F860     		str	r0, [r7, #12]
 1848 0008 B960     		str	r1, [r7, #8]
 1849 000a 7A60     		str	r2, [r7, #4]
 1850 000c 3B60     		str	r3, [r7]
  58:Src/motor.cpp ****             uint32_t output_timestamp,
  59:Src/motor.cpp ****             std::optional<float2D>* mod_alpha_beta,
  60:Src/motor.cpp ****             std::optional<float>* ibus) final {
  61:Src/motor.cpp ****         if (!test_mod_.has_value()) {
 1851              		.loc 11 61 33
 1852 000e FB68     		ldr	r3, [r7, #12]
 1853 0010 2033     		adds	r3, r3, #32
 1854 0012 1846     		mov	r0, r3
 1855 0014 FFF7FEFF 		bl	_ZNKSt8optionalIfE9has_valueEv
 1856 0018 0346     		mov	r3, r0
 1857              		.loc 11 61 13
 1858 001a 83F00103 		eor	r3, r3, #1
 1859 001e DBB2     		uxtb	r3, r3
 1860              		.loc 11 61 9
 1861 0020 002B     		cmp	r3, #0
 1862 0022 02D0     		beq	.L87
  62:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_CONTROLLER_INITIALIZING;
 1863              		.loc 11 62 43
 1864 0024 4FF08063 		mov	r3, #67108864
 1865 0028 35E0     		b	.L88
 1866              	.L87:
  63:Src/motor.cpp ****         } else {
  64:Src/motor.cpp ****             *mod_alpha_beta = {*test_mod_, 0.0f};
 1867              		.loc 11 64 48
 1868 002a FB68     		ldr	r3, [r7, #12]
 1869 002c 2033     		adds	r3, r3, #32
 1870 002e 1846     		mov	r0, r3
 1871 0030 FFF7FEFF 		bl	_ZNRSt8optionalIfEdeEv
ARM GAS  /tmp/ccATuxCb.s 			page 167


 1872 0034 0146     		mov	r1, r0
 1873              		.loc 11 64 44
 1874 0036 4FF00003 		mov	r3, #0
 1875 003a BB61     		str	r3, [r7, #24]	@ float
 1876              		.loc 11 64 48
 1877 003c 07F11802 		add	r2, r7, #24
 1878 0040 07F11003 		add	r3, r7, #16
 1879 0044 1846     		mov	r0, r3
 1880 0046 FFF7FEFF 		bl	_ZNSt4pairIffEC1IRffLb1EEEOT_OT0_
 1881 004a 07F11003 		add	r3, r7, #16
 1882 004e 1946     		mov	r1, r3
 1883 0050 7868     		ldr	r0, [r7, #4]
 1884 0052 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEaSIS1_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS2_NSt9remove_c
  65:Src/motor.cpp ****             *ibus = *test_mod_ * actual_current_;
 1885              		.loc 11 65 22
 1886 0056 FB68     		ldr	r3, [r7, #12]
 1887 0058 2033     		adds	r3, r3, #32
 1888 005a 1846     		mov	r0, r3
 1889 005c FFF7FEFF 		bl	_ZNRSt8optionalIfEdeEv
 1890 0060 0346     		mov	r3, r0
 1891              		.loc 11 65 21
 1892 0062 93ED007A 		vldr.32	s14, [r3]
 1893              		.loc 11 65 34
 1894 0066 FB68     		ldr	r3, [r7, #12]
 1895 0068 D3ED047A 		vldr.32	s15, [r3, #16]
 1896              		.loc 11 65 32
 1897 006c 67EE277A 		vmul.f32	s15, s14, s15
 1898 0070 C7ED097A 		vstr.32	s15, [r7, #36]
 1899              		.loc 11 65 34
 1900 0074 07F12402 		add	r2, r7, #36
 1901 0078 07F11C03 		add	r3, r7, #28
 1902 007c 1146     		mov	r1, r2
 1903 007e 1846     		mov	r0, r3
 1904 0080 FFF7FEFF 		bl	_ZNSt8optionalIfEC1IfLb1EEEOT_
 1905              		.loc 11 65 19
 1906 0084 3B68     		ldr	r3, [r7]
 1907 0086 1A46     		mov	r2, r3
 1908 0088 07F11C03 		add	r3, r7, #28
 1909 008c 93E80300 		ldm	r3, {r0, r1}
 1910 0090 82E80300 		stm	r2, {r0, r1}
  66:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_NONE;
 1911              		.loc 11 66 43
 1912 0094 0023     		movs	r3, #0
 1913              	.L88:
  67:Src/motor.cpp ****         }
  68:Src/motor.cpp ****     }
 1914              		.loc 11 68 5
 1915 0096 1846     		mov	r0, r3
 1916 0098 2837     		adds	r7, r7, #40
 1917              	.LCFI163:
 1918              		.cfi_def_cfa_offset 8
 1919 009a BD46     		mov	sp, r7
 1920              	.LCFI164:
 1921              		.cfi_def_cfa_register 13
 1922              		@ sp needed
 1923 009c 80BD     		pop	{r7, pc}
 1924              		.cfi_endproc
ARM GAS  /tmp/ccATuxCb.s 			page 168


 1925              	.LFE4834:
 1927              		.section	.text._ZN31ResistanceMeasurementControlLaw14get_resistanceEv,"axG",%progbits,_ZN31Resista
 1928              		.align	1
 1929              		.weak	_ZN31ResistanceMeasurementControlLaw14get_resistanceEv
 1930              		.syntax unified
 1931              		.thumb
 1932              		.thumb_func
 1933              		.fpu fpv4-sp-d16
 1935              	_ZN31ResistanceMeasurementControlLaw14get_resistanceEv:
 1936              	.LFB4840:
  69:Src/motor.cpp **** 
  70:Src/motor.cpp ****     float get_resistance() {
 1937              		.loc 11 70 11
 1938              		.cfi_startproc
 1939              		@ args = 0, pretend = 0, frame = 8
 1940              		@ frame_needed = 1, uses_anonymous_args = 0
 1941              		@ link register save eliminated.
 1942 0000 80B4     		push	{r7}
 1943              	.LCFI165:
 1944              		.cfi_def_cfa_offset 4
 1945              		.cfi_offset 7, -4
 1946 0002 83B0     		sub	sp, sp, #12
 1947              	.LCFI166:
 1948              		.cfi_def_cfa_offset 16
 1949 0004 00AF     		add	r7, sp, #0
 1950              	.LCFI167:
 1951              		.cfi_def_cfa_register 7
 1952 0006 7860     		str	r0, [r7, #4]
  71:Src/motor.cpp ****         return test_voltage_ / target_current_;
 1953              		.loc 11 71 16
 1954 0008 7B68     		ldr	r3, [r7, #4]
 1955 000a 93ED067A 		vldr.32	s14, [r3, #24]
 1956              		.loc 11 71 32
 1957 000e 7B68     		ldr	r3, [r7, #4]
 1958 0010 D3ED057A 		vldr.32	s15, [r3, #20]
 1959 0014 C7EE276A 		vdiv.f32	s13, s14, s15
 1960 0018 F0EE667A 		vmov.f32	s15, s13
  72:Src/motor.cpp ****     }
 1961              		.loc 11 72 5
 1962 001c B0EE670A 		vmov.f32	s0, s15
 1963 0020 0C37     		adds	r7, r7, #12
 1964              	.LCFI168:
 1965              		.cfi_def_cfa_offset 4
 1966 0022 BD46     		mov	sp, r7
 1967              	.LCFI169:
 1968              		.cfi_def_cfa_register 13
 1969              		@ sp needed
 1970 0024 5DF8047B 		ldr	r7, [sp], #4
 1971              	.LCFI170:
 1972              		.cfi_restore 7
 1973              		.cfi_def_cfa_offset 0
 1974 0028 7047     		bx	lr
 1975              		.cfi_endproc
 1976              	.LFE4840:
 1978              		.section	.text._ZN31ResistanceMeasurementControlLaw9get_IbetaEv,"axG",%progbits,_ZN31ResistanceMea
 1979              		.align	1
 1980              		.weak	_ZN31ResistanceMeasurementControlLaw9get_IbetaEv
ARM GAS  /tmp/ccATuxCb.s 			page 169


 1981              		.syntax unified
 1982              		.thumb
 1983              		.thumb_func
 1984              		.fpu fpv4-sp-d16
 1986              	_ZN31ResistanceMeasurementControlLaw9get_IbetaEv:
 1987              	.LFB4841:
  73:Src/motor.cpp **** 
  74:Src/motor.cpp ****     float get_Ibeta() {
 1988              		.loc 11 74 11
 1989              		.cfi_startproc
 1990              		@ args = 0, pretend = 0, frame = 8
 1991              		@ frame_needed = 1, uses_anonymous_args = 0
 1992              		@ link register save eliminated.
 1993 0000 80B4     		push	{r7}
 1994              	.LCFI171:
 1995              		.cfi_def_cfa_offset 4
 1996              		.cfi_offset 7, -4
 1997 0002 83B0     		sub	sp, sp, #12
 1998              	.LCFI172:
 1999              		.cfi_def_cfa_offset 16
 2000 0004 00AF     		add	r7, sp, #0
 2001              	.LCFI173:
 2002              		.cfi_def_cfa_register 7
 2003 0006 7860     		str	r0, [r7, #4]
  75:Src/motor.cpp ****         return I_beta_;
 2004              		.loc 11 75 16
 2005 0008 7B68     		ldr	r3, [r7, #4]
 2006 000a DB69     		ldr	r3, [r3, #28]	@ float
 2007 000c 07EE903A 		vmov	s15, r3
  76:Src/motor.cpp ****     }
 2008              		.loc 11 76 5
 2009 0010 B0EE670A 		vmov.f32	s0, s15
 2010 0014 0C37     		adds	r7, r7, #12
 2011              	.LCFI174:
 2012              		.cfi_def_cfa_offset 4
 2013 0016 BD46     		mov	sp, r7
 2014              	.LCFI175:
 2015              		.cfi_def_cfa_register 13
 2016              		@ sp needed
 2017 0018 5DF8047B 		ldr	r7, [sp], #4
 2018              	.LCFI176:
 2019              		.cfi_restore 7
 2020              		.cfi_def_cfa_offset 0
 2021 001c 7047     		bx	lr
 2022              		.cfi_endproc
 2023              	.LFE4841:
 2025              		.section	.text._ZN31InductanceMeasurementControlLaw5resetEv,"axG",%progbits,_ZN31InductanceMeasure
 2026              		.align	1
 2027              		.weak	_ZN31InductanceMeasurementControlLaw5resetEv
 2028              		.syntax unified
 2029              		.thumb
 2030              		.thumb_func
 2031              		.fpu fpv4-sp-d16
 2033              	_ZN31InductanceMeasurementControlLaw5resetEv:
 2034              	.LFB4842:
  77:Src/motor.cpp **** 
  78:Src/motor.cpp ****     const float kI = 1.0f; // [(V/s)/A]
ARM GAS  /tmp/ccATuxCb.s 			page 170


  79:Src/motor.cpp ****     const float kIBetaFilt = 80.0f;
  80:Src/motor.cpp ****     float max_voltage_ = 0.0f;
  81:Src/motor.cpp ****     float actual_current_ = 0.0f;
  82:Src/motor.cpp ****     float target_current_ = 0.0f;
  83:Src/motor.cpp ****     float test_voltage_ = 0.0f;
  84:Src/motor.cpp ****     float I_beta_ = 0.0f; // [A] low pass filtered Ibeta response
  85:Src/motor.cpp ****     std::optional<float> test_mod_ = NAN;
  86:Src/motor.cpp **** };
  87:Src/motor.cpp **** 
  88:Src/motor.cpp **** 
  89:Src/motor.cpp **** 
  90:Src/motor.cpp **** 
  91:Src/motor.cpp **** /**
  92:Src/motor.cpp ****  * @brief This control law toggles rapidly between positive and negative output
  93:Src/motor.cpp ****  * voltage. By measuring how large the current ripples are, the phase inductance
  94:Src/motor.cpp ****  * can be determined.
  95:Src/motor.cpp ****  * 
  96:Src/motor.cpp ****  * TODO: this method assumes a certain synchronization between current measurement and output appli
  97:Src/motor.cpp ****  */
  98:Src/motor.cpp **** struct InductanceMeasurementControlLaw : AlphaBetaFrameController {
  99:Src/motor.cpp ****     void reset() final {
 2035              		.loc 11 99 10
 2036              		.cfi_startproc
 2037              		@ args = 0, pretend = 0, frame = 8
 2038              		@ frame_needed = 1, uses_anonymous_args = 0
 2039              		@ link register save eliminated.
 2040 0000 80B4     		push	{r7}
 2041              	.LCFI177:
 2042              		.cfi_def_cfa_offset 4
 2043              		.cfi_offset 7, -4
 2044 0002 83B0     		sub	sp, sp, #12
 2045              	.LCFI178:
 2046              		.cfi_def_cfa_offset 16
 2047 0004 00AF     		add	r7, sp, #0
 2048              	.LCFI179:
 2049              		.cfi_def_cfa_register 7
 2050 0006 7860     		str	r0, [r7, #4]
 100:Src/motor.cpp ****         attached_ = false;
 2051              		.loc 11 100 19
 2052 0008 7B68     		ldr	r3, [r7, #4]
 2053 000a 0022     		movs	r2, #0
 2054 000c 1A72     		strb	r2, [r3, #8]
 101:Src/motor.cpp ****     }
 2055              		.loc 11 101 5
 2056 000e 00BF     		nop
 2057 0010 0C37     		adds	r7, r7, #12
 2058              	.LCFI180:
 2059              		.cfi_def_cfa_offset 4
 2060 0012 BD46     		mov	sp, r7
 2061              	.LCFI181:
 2062              		.cfi_def_cfa_register 13
 2063              		@ sp needed
 2064 0014 5DF8047B 		ldr	r7, [sp], #4
 2065              	.LCFI182:
 2066              		.cfi_restore 7
 2067              		.cfi_def_cfa_offset 0
 2068 0018 7047     		bx	lr
ARM GAS  /tmp/ccATuxCb.s 			page 171


 2069              		.cfi_endproc
 2070              	.LFE4842:
 2072              		.section	.text._ZNKSt8optionalISt4pairIffEE9has_valueEv,"axG",%progbits,_ZNKSt8optionalISt4pairIff
 2073              		.align	1
 2074              		.weak	_ZNKSt8optionalISt4pairIffEE9has_valueEv
 2075              		.syntax unified
 2076              		.thumb
 2077              		.thumb_func
 2078              		.fpu fpv4-sp-d16
 2080              	_ZNKSt8optionalISt4pairIffEE9has_valueEv:
 2081              	.LFB4844:
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 2082              		.loc 12 917 22
 2083              		.cfi_startproc
 2084              		@ args = 0, pretend = 0, frame = 8
 2085              		@ frame_needed = 1, uses_anonymous_args = 0
 2086 0000 80B5     		push	{r7, lr}
 2087              	.LCFI183:
 2088              		.cfi_def_cfa_offset 8
 2089              		.cfi_offset 7, -8
 2090              		.cfi_offset 14, -4
 2091 0002 82B0     		sub	sp, sp, #8
 2092              	.LCFI184:
 2093              		.cfi_def_cfa_offset 16
 2094 0004 00AF     		add	r7, sp, #0
 2095              	.LCFI185:
 2096              		.cfi_def_cfa_register 7
 2097 0006 7860     		str	r0, [r7, #4]
 2098              		.loc 12 918 35
 2099 0008 7868     		ldr	r0, [r7, #4]
 2100 000a FFF7FEFF 		bl	_ZNKSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv
 2101 000e 0346     		mov	r3, r0
 2102              		.loc 12 918 39
 2103 0010 1846     		mov	r0, r3
 2104 0012 0837     		adds	r7, r7, #8
 2105              	.LCFI186:
 2106              		.cfi_def_cfa_offset 8
 2107 0014 BD46     		mov	sp, r7
 2108              	.LCFI187:
 2109              		.cfi_def_cfa_register 13
 2110              		@ sp needed
 2111 0016 80BD     		pop	{r7, pc}
 2112              		.cfi_endproc
 2113              	.LFE4844:
 2115              		.section	.text._ZNKSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_enga
 2116              		.align	1
 2117              		.weak	_ZNKSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv
 2118              		.syntax unified
 2119              		.thumb
 2120              		.thumb_func
 2121              		.fpu fpv4-sp-d16
 2123              	_ZNKSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv:
 2124              	.LFB4845:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 2125              		.loc 12 434 22
 2126              		.cfi_startproc
 2127              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccATuxCb.s 			page 172


 2128              		@ frame_needed = 1, uses_anonymous_args = 0
 2129              		@ link register save eliminated.
 2130 0000 80B4     		push	{r7}
 2131              	.LCFI188:
 2132              		.cfi_def_cfa_offset 4
 2133              		.cfi_offset 7, -4
 2134 0002 83B0     		sub	sp, sp, #12
 2135              	.LCFI189:
 2136              		.cfi_def_cfa_offset 16
 2137 0004 00AF     		add	r7, sp, #0
 2138              	.LCFI190:
 2139              		.cfi_def_cfa_register 7
 2140 0006 7860     		str	r0, [r7, #4]
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2141              		.loc 12 435 58
 2142 0008 7B68     		ldr	r3, [r7, #4]
 2143 000a 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2144              		.loc 12 435 70
 2145 000c 1846     		mov	r0, r3
 2146 000e 0C37     		adds	r7, r7, #12
 2147              	.LCFI191:
 2148              		.cfi_def_cfa_offset 4
 2149 0010 BD46     		mov	sp, r7
 2150              	.LCFI192:
 2151              		.cfi_def_cfa_register 13
 2152              		@ sp needed
 2153 0012 5DF8047B 		ldr	r7, [sp], #4
 2154              	.LCFI193:
 2155              		.cfi_restore 7
 2156              		.cfi_def_cfa_offset 0
 2157 0016 7047     		bx	lr
 2158              		.cfi_endproc
 2159              	.LFE4845:
 2161              		.section	.text._ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEE
 2162              		.align	1
 2163              		.weak	_ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm
 2164              		.syntax unified
 2165              		.thumb
 2166              		.thumb_func
 2167              		.fpu fpv4-sp-d16
 2169              	_ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:
 2170              	.LFB4843:
 102:Src/motor.cpp **** 
 103:Src/motor.cpp ****     ODriveIntf::MotorIntf::Error on_measurement(
 2171              		.loc 11 103 34
 2172              		.cfi_startproc
 2173              		@ args = 20, pretend = 8, frame = 24
 2174              		@ frame_needed = 1, uses_anonymous_args = 0
 2175 0000 82B0     		sub	sp, sp, #8
 2176              	.LCFI194:
 2177              		.cfi_def_cfa_offset 8
 2178 0002 80B5     		push	{r7, lr}
 2179              	.LCFI195:
 2180              		.cfi_def_cfa_offset 16
 2181              		.cfi_offset 7, -16
 2182              		.cfi_offset 14, -12
ARM GAS  /tmp/ccATuxCb.s 			page 173


 2183 0004 86B0     		sub	sp, sp, #24
 2184              	.LCFI196:
 2185              		.cfi_def_cfa_offset 40
 2186 0006 00AF     		add	r7, sp, #0
 2187              	.LCFI197:
 2188              		.cfi_def_cfa_register 7
 2189 0008 F860     		str	r0, [r7, #12]
 2190 000a 381D     		adds	r0, r7, #4
 2191 000c 80E80600 		stm	r0, {r1, r2}
 2192 0010 7B62     		str	r3, [r7, #36]
 104:Src/motor.cpp ****             std::optional<float> vbus_voltage,
 105:Src/motor.cpp ****             std::optional<float2D> Ialpha_beta,
 106:Src/motor.cpp ****             uint32_t input_timestamp) final
 107:Src/motor.cpp ****     {
 108:Src/motor.cpp ****         if (!Ialpha_beta.has_value()) {
 2193              		.loc 11 108 35
 2194 0012 07F12403 		add	r3, r7, #36
 2195 0016 1846     		mov	r0, r3
 2196 0018 FFF7FEFF 		bl	_ZNKSt8optionalISt4pairIffEE9has_valueEv
 2197 001c 0346     		mov	r3, r0
 2198              		.loc 11 108 13
 2199 001e 83F00103 		eor	r3, r3, #1
 2200 0022 DBB2     		uxtb	r3, r3
 2201              		.loc 11 108 9
 2202 0024 002B     		cmp	r3, #0
 2203 0026 02D0     		beq	.L99
 109:Src/motor.cpp ****             return {ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_CURRENT_MEASUREMENT};
 2204              		.loc 11 109 84
 2205 0028 4FF40033 		mov	r3, #131072
 2206 002c 3BE0     		b	.L100
 2207              	.L99:
 110:Src/motor.cpp ****         }
 111:Src/motor.cpp **** 
 112:Src/motor.cpp ****         float Ialpha = Ialpha_beta->first;
 2208              		.loc 11 112 35
 2209 002e 07F12403 		add	r3, r7, #36
 2210 0032 1846     		mov	r0, r3
 2211 0034 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEptEv
 2212 0038 0346     		mov	r3, r0
 2213              		.loc 11 112 37
 2214 003a 1B68     		ldr	r3, [r3]	@ float
 2215 003c 7B61     		str	r3, [r7, #20]	@ float
 2216              	.LBB20:
 113:Src/motor.cpp **** 
 114:Src/motor.cpp ****         if (attached_) {
 2217              		.loc 11 114 13
 2218 003e FB68     		ldr	r3, [r7, #12]
 2219 0040 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 2220              		.loc 11 114 9
 2221 0042 002B     		cmp	r3, #0
 2222 0044 22D0     		beq	.L101
 2223              	.LBB21:
 115:Src/motor.cpp ****             float sign = test_voltage_ >= 0.0f ? 1.0f : -1.0f;
 2224              		.loc 11 115 26
 2225 0046 FB68     		ldr	r3, [r7, #12]
 2226 0048 D3ED017A 		vldr.32	s15, [r3, #4]
 2227              		.loc 11 115 48
ARM GAS  /tmp/ccATuxCb.s 			page 174


 2228 004c F5EEC07A 		vcmpe.f32	s15, #0
 2229 0050 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2230 0054 02DB     		blt	.L107
 2231              		.loc 11 115 48 is_stmt 0 discriminator 1
 2232 0056 4FF07E53 		mov	r3, #1065353216
 2233 005a 00E0     		b	.L104
 2234              	.L107:
 2235              		.loc 11 115 48 discriminator 2
 2236 005c 154B     		ldr	r3, .L108
 2237              	.L104:
 2238              		.loc 11 115 19 is_stmt 1 discriminator 4
 2239 005e 3B61     		str	r3, [r7, #16]	@ float
 116:Src/motor.cpp ****             deltaI_ += -sign * (Ialpha - last_Ialpha_);
 2240              		.loc 11 116 21 discriminator 4
 2241 0060 FB68     		ldr	r3, [r7, #12]
 2242 0062 93ED077A 		vldr.32	s14, [r3, #28]
 2243              		.loc 11 116 24 discriminator 4
 2244 0066 D7ED047A 		vldr.32	s15, [r7, #16]
 2245 006a F1EE676A 		vneg.f32	s13, s15
 2246              		.loc 11 116 42 discriminator 4
 2247 006e FB68     		ldr	r3, [r7, #12]
 2248 0070 D3ED057A 		vldr.32	s15, [r3, #20]
 2249              		.loc 11 116 40 discriminator 4
 2250 0074 97ED056A 		vldr.32	s12, [r7, #20]
 2251 0078 76EE677A 		vsub.f32	s15, s12, s15
 2252              		.loc 11 116 30 discriminator 4
 2253 007c 66EEA77A 		vmul.f32	s15, s13, s15
 2254              		.loc 11 116 21 discriminator 4
 2255 0080 77EE277A 		vadd.f32	s15, s14, s15
 2256 0084 FB68     		ldr	r3, [r7, #12]
 2257 0086 C3ED077A 		vstr.32	s15, [r3, #28]
 2258              	.LBE21:
 2259 008a 05E0     		b	.L105
 2260              	.L101:
 117:Src/motor.cpp ****         } else {
 118:Src/motor.cpp ****             start_timestamp_ = input_timestamp;
 2261              		.loc 11 118 30
 2262 008c FB68     		ldr	r3, [r7, #12]
 2263 008e 3A6B     		ldr	r2, [r7, #48]
 2264 0090 1A61     		str	r2, [r3, #16]
 119:Src/motor.cpp ****             attached_ = true;
 2265              		.loc 11 119 23
 2266 0092 FB68     		ldr	r3, [r7, #12]
 2267 0094 0122     		movs	r2, #1
 2268 0096 1A72     		strb	r2, [r3, #8]
 2269              	.L105:
 2270              	.LBE20:
 120:Src/motor.cpp ****         }
 121:Src/motor.cpp **** 
 122:Src/motor.cpp ****         last_Ialpha_ = Ialpha;
 2271              		.loc 11 122 22
 2272 0098 FB68     		ldr	r3, [r7, #12]
 2273 009a 7A69     		ldr	r2, [r7, #20]	@ float
 2274 009c 5A61     		str	r2, [r3, #20]	@ float
 123:Src/motor.cpp ****         last_input_timestamp_ = input_timestamp;
 2275              		.loc 11 123 31
 2276 009e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccATuxCb.s 			page 175


 2277 00a0 3A6B     		ldr	r2, [r7, #48]
 2278 00a2 9A61     		str	r2, [r3, #24]
 124:Src/motor.cpp **** 
 125:Src/motor.cpp ****         return ODriveIntf::MotorIntf::Error::ERROR_NONE;
 2279              		.loc 11 125 46
 2280 00a4 0023     		movs	r3, #0
 2281              	.L100:
 126:Src/motor.cpp ****     }
 2282              		.loc 11 126 5
 2283 00a6 1846     		mov	r0, r3
 2284 00a8 1837     		adds	r7, r7, #24
 2285              	.LCFI198:
 2286              		.cfi_def_cfa_offset 16
 2287 00aa BD46     		mov	sp, r7
 2288              	.LCFI199:
 2289              		.cfi_def_cfa_register 13
 2290              		@ sp needed
 2291 00ac BDE88040 		pop	{r7, lr}
 2292              	.LCFI200:
 2293              		.cfi_restore 14
 2294              		.cfi_restore 7
 2295              		.cfi_def_cfa_offset 8
 2296 00b0 02B0     		add	sp, sp, #8
 2297              	.LCFI201:
 2298              		.cfi_def_cfa_offset 0
 2299 00b2 7047     		bx	lr
 2300              	.L109:
 2301              		.align	2
 2302              	.L108:
 2303 00b4 000080BF 		.word	-1082130432
 2304              		.cfi_endproc
 2305              	.LFE4843:
 2307              		.section	.text._ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIf
 2308              		.align	1
 2309              		.weak	_ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_If
 2310              		.syntax unified
 2311              		.thumb
 2312              		.thumb_func
 2313              		.fpu fpv4-sp-d16
 2315              	_ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:
 2316              	.LFB4846:
 127:Src/motor.cpp **** 
 128:Src/motor.cpp ****     ODriveIntf::MotorIntf::Error get_alpha_beta_output(
 2317              		.loc 11 128 34
 2318              		.cfi_startproc
 2319              		@ args = 0, pretend = 0, frame = 48
 2320              		@ frame_needed = 1, uses_anonymous_args = 0
 2321 0000 80B5     		push	{r7, lr}
 2322              	.LCFI202:
 2323              		.cfi_def_cfa_offset 8
 2324              		.cfi_offset 7, -8
 2325              		.cfi_offset 14, -4
 2326 0002 8CB0     		sub	sp, sp, #48
 2327              	.LCFI203:
 2328              		.cfi_def_cfa_offset 56
 2329 0004 00AF     		add	r7, sp, #0
 2330              	.LCFI204:
ARM GAS  /tmp/ccATuxCb.s 			page 176


 2331              		.cfi_def_cfa_register 7
 2332 0006 F860     		str	r0, [r7, #12]
 2333 0008 B960     		str	r1, [r7, #8]
 2334 000a 7A60     		str	r2, [r7, #4]
 2335 000c 3B60     		str	r3, [r7]
 129:Src/motor.cpp ****             uint32_t output_timestamp, std::optional<float2D>* mod_alpha_beta,
 130:Src/motor.cpp ****             std::optional<float>* ibus) final
 131:Src/motor.cpp ****     {
 132:Src/motor.cpp ****         test_voltage_ *= -1.0f;
 2336              		.loc 11 132 23
 2337 000e FB68     		ldr	r3, [r7, #12]
 2338 0010 D3ED017A 		vldr.32	s15, [r3, #4]
 2339 0014 F1EE677A 		vneg.f32	s15, s15
 2340 0018 FB68     		ldr	r3, [r7, #12]
 2341 001a C3ED017A 		vstr.32	s15, [r3, #4]
 133:Src/motor.cpp ****         float vfactor = 1.0f / ((2.0f / 3.0f) * vbus_voltage);
 2342              		.loc 11 133 47
 2343 001e 204B     		ldr	r3, .L112
 2344 0020 D3ED007A 		vldr.32	s15, [r3]
 2345 0024 9FED1F7A 		vldr.32	s14, .L112+4
 2346 0028 27EE877A 		vmul.f32	s14, s15, s14
 2347              		.loc 11 133 15
 2348 002c F7EE006A 		vmov.f32	s13, #1.0e+0
 2349 0030 C6EE877A 		vdiv.f32	s15, s13, s14
 2350 0034 C7ED0B7A 		vstr.32	s15, [r7, #44]
 134:Src/motor.cpp ****         *mod_alpha_beta = {test_voltage_ * vfactor, 0.0f};
 2351              		.loc 11 134 28
 2352 0038 FB68     		ldr	r3, [r7, #12]
 2353 003a 93ED017A 		vldr.32	s14, [r3, #4]
 2354              		.loc 11 134 42
 2355 003e D7ED0B7A 		vldr.32	s15, [r7, #44]
 2356 0042 67EE277A 		vmul.f32	s15, s14, s15
 2357 0046 C7ED067A 		vstr.32	s15, [r7, #24]
 2358              		.loc 11 134 53
 2359 004a 4FF00003 		mov	r3, #0
 2360 004e FB61     		str	r3, [r7, #28]	@ float
 2361              		.loc 11 134 57
 2362 0050 07F11C02 		add	r2, r7, #28
 2363 0054 07F11801 		add	r1, r7, #24
 2364 0058 07F11003 		add	r3, r7, #16
 2365 005c 1846     		mov	r0, r3
 2366 005e FFF7FEFF 		bl	_ZNSt4pairIffEC1IffLb1EEEOT_OT0_
 2367 0062 07F11003 		add	r3, r7, #16
 2368 0066 1946     		mov	r1, r3
 2369 0068 7868     		ldr	r0, [r7, #4]
 2370 006a FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEaSIS1_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS2_NSt9remove_c
 135:Src/motor.cpp ****         *ibus = 0.0f;
 2371              		.loc 11 135 17
 2372 006e 4FF00003 		mov	r3, #0
 2373 0072 BB62     		str	r3, [r7, #40]	@ float
 2374 0074 07F12802 		add	r2, r7, #40
 2375 0078 07F12003 		add	r3, r7, #32
 2376 007c 1146     		mov	r1, r2
 2377 007e 1846     		mov	r0, r3
 2378 0080 FFF7FEFF 		bl	_ZNSt8optionalIfEC1IfLb1EEEOT_
 2379              		.loc 11 135 15
 2380 0084 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccATuxCb.s 			page 177


 2381 0086 1A46     		mov	r2, r3
 2382 0088 07F12003 		add	r3, r7, #32
 2383 008c 93E80300 		ldm	r3, {r0, r1}
 2384 0090 82E80300 		stm	r2, {r0, r1}
 136:Src/motor.cpp ****         return Motor::ERROR_NONE;
 2385              		.loc 11 136 23
 2386 0094 0023     		movs	r3, #0
 137:Src/motor.cpp ****     }
 2387              		.loc 11 137 5
 2388 0096 1846     		mov	r0, r3
 2389 0098 3037     		adds	r7, r7, #48
 2390              	.LCFI205:
 2391              		.cfi_def_cfa_offset 8
 2392 009a BD46     		mov	sp, r7
 2393              	.LCFI206:
 2394              		.cfi_def_cfa_register 13
 2395              		@ sp needed
 2396 009c 80BD     		pop	{r7, pc}
 2397              	.L113:
 2398 009e 00BF     		.align	2
 2399              	.L112:
 2400 00a0 00000000 		.word	vbus_voltage
 2401 00a4 ABAA2A3F 		.word	1059760811
 2402              		.cfi_endproc
 2403              	.LFE4846:
 2405              		.section	.text._ZN31InductanceMeasurementControlLaw14get_inductanceEv,"axG",%progbits,_ZN31Inducta
 2406              		.align	1
 2407              		.weak	_ZN31InductanceMeasurementControlLaw14get_inductanceEv
 2408              		.syntax unified
 2409              		.thumb
 2410              		.thumb_func
 2411              		.fpu fpv4-sp-d16
 2413              	_ZN31InductanceMeasurementControlLaw14get_inductanceEv:
 2414              	.LFB4847:
 138:Src/motor.cpp **** 
 139:Src/motor.cpp ****     float get_inductance() {
 2415              		.loc 11 139 11
 2416              		.cfi_startproc
 2417              		@ args = 0, pretend = 0, frame = 16
 2418              		@ frame_needed = 1, uses_anonymous_args = 0
 2419 0000 80B5     		push	{r7, lr}
 2420              	.LCFI207:
 2421              		.cfi_def_cfa_offset 8
 2422              		.cfi_offset 7, -8
 2423              		.cfi_offset 14, -4
 2424 0002 84B0     		sub	sp, sp, #16
 2425              	.LCFI208:
 2426              		.cfi_def_cfa_offset 24
 2427 0004 00AF     		add	r7, sp, #0
 2428              	.LCFI209:
 2429              		.cfi_def_cfa_register 7
 2430 0006 7860     		str	r0, [r7, #4]
 140:Src/motor.cpp ****         // Note: A more correct formula would also take into account that there is a finite timeste
 141:Src/motor.cpp ****         // However, the discretisation in the current control loop inverts the same discrepancy
 142:Src/motor.cpp ****         float dt = (float)(last_input_timestamp_ - start_timestamp_) / (float)TIM_1_8_CLOCK_HZ; // 
 2431              		.loc 11 142 28
 2432 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccATuxCb.s 			page 178


 2433 000a 9A69     		ldr	r2, [r3, #24]
 2434              		.loc 11 142 52
 2435 000c 7B68     		ldr	r3, [r7, #4]
 2436 000e 1B69     		ldr	r3, [r3, #16]
 2437              		.loc 11 142 50
 2438 0010 D31A     		subs	r3, r2, r3
 2439              		.loc 11 142 20
 2440 0012 07EE903A 		vmov	s15, r3	@ int
 2441 0016 B8EE677A 		vcvt.f32.u32	s14, s15
 2442              		.loc 11 142 15
 2443 001a DFED0F6A 		vldr.32	s13, .L116
 2444 001e C7EE267A 		vdiv.f32	s15, s14, s13
 2445 0022 C7ED037A 		vstr.32	s15, [r7, #12]
 143:Src/motor.cpp ****         return std::abs(test_voltage_) / (deltaI_ / dt);
 2446              		.loc 11 143 24
 2447 0026 7B68     		ldr	r3, [r7, #4]
 2448 0028 D3ED017A 		vldr.32	s15, [r3, #4]
 2449 002c B0EE670A 		vmov.f32	s0, s15
 2450 0030 FFF7FEFF 		bl	_ZSt3absf
 2451 0034 B0EE406A 		vmov.f32	s12, s0
 2452              		.loc 11 143 43
 2453 0038 7B68     		ldr	r3, [r7, #4]
 2454 003a D3ED076A 		vldr.32	s13, [r3, #28]
 2455              		.loc 11 143 51
 2456 003e 97ED037A 		vldr.32	s14, [r7, #12]
 2457 0042 C6EE877A 		vdiv.f32	s15, s13, s14
 2458              		.loc 11 143 55
 2459 0046 86EE277A 		vdiv.f32	s14, s12, s15
 2460 004a F0EE477A 		vmov.f32	s15, s14
 144:Src/motor.cpp ****     }
 2461              		.loc 11 144 5
 2462 004e B0EE670A 		vmov.f32	s0, s15
 2463 0052 1037     		adds	r7, r7, #16
 2464              	.LCFI210:
 2465              		.cfi_def_cfa_offset 8
 2466 0054 BD46     		mov	sp, r7
 2467              	.LCFI211:
 2468              		.cfi_def_cfa_register 13
 2469              		@ sp needed
 2470 0056 80BD     		pop	{r7, pc}
 2471              	.L117:
 2472              		.align	2
 2473              	.L116:
 2474 0058 E81F224D 		.word	1294082024
 2475              		.cfi_endproc
 2476              	.LFE4847:
 2478              		.section	.text._ZN15PhaseControlLawILj3EEC2Ev,"axG",%progbits,_ZN15PhaseControlLawILj3EEC5Ev,comda
 2479              		.align	1
 2480              		.weak	_ZN15PhaseControlLawILj3EEC2Ev
 2481              		.syntax unified
 2482              		.thumb
 2483              		.thumb_func
 2484              		.fpu fpv4-sp-d16
 2486              	_ZN15PhaseControlLawILj3EEC2Ev:
 2487              	.LFB4852:
 2488              		.file 14 "Inc/phase_control_law.hpp"
   1:Inc/phase_control_law.hpp **** #ifndef __PHASE_CONTROL_LAW_HPP
ARM GAS  /tmp/ccATuxCb.s 			page 179


   2:Inc/phase_control_law.hpp **** #define __PHASE_CONTROL_LAW_HPP
   3:Inc/phase_control_law.hpp **** 
   4:Inc/phase_control_law.hpp **** 
   5:Inc/phase_control_law.hpp **** #include <variant>
   6:Inc/phase_control_law.hpp **** #include "user_int.hpp"
   7:Inc/phase_control_law.hpp **** #include "interfaces.hpp"
   8:Inc/phase_control_law.hpp **** class Motor;
   9:Inc/phase_control_law.hpp **** 
  10:Inc/phase_control_law.hpp **** template<size_t N_PHASES>
  11:Inc/phase_control_law.hpp **** class PhaseControlLaw {
 2489              		.loc 14 11 7
 2490              		.cfi_startproc
 2491              		@ args = 0, pretend = 0, frame = 8
 2492              		@ frame_needed = 1, uses_anonymous_args = 0
 2493              		@ link register save eliminated.
 2494 0000 80B4     		push	{r7}
 2495              	.LCFI212:
 2496              		.cfi_def_cfa_offset 4
 2497              		.cfi_offset 7, -4
 2498 0002 83B0     		sub	sp, sp, #12
 2499              	.LCFI213:
 2500              		.cfi_def_cfa_offset 16
 2501 0004 00AF     		add	r7, sp, #0
 2502              	.LCFI214:
 2503              		.cfi_def_cfa_register 7
 2504 0006 7860     		str	r0, [r7, #4]
 2505              	.LBB22:
 2506              		.loc 14 11 7
 2507 0008 044A     		ldr	r2, .L120
 2508 000a 7B68     		ldr	r3, [r7, #4]
 2509 000c 1A60     		str	r2, [r3]
 2510              	.LBE22:
 2511 000e 7B68     		ldr	r3, [r7, #4]
 2512 0010 1846     		mov	r0, r3
 2513 0012 0C37     		adds	r7, r7, #12
 2514              	.LCFI215:
 2515              		.cfi_def_cfa_offset 4
 2516 0014 BD46     		mov	sp, r7
 2517              	.LCFI216:
 2518              		.cfi_def_cfa_register 13
 2519              		@ sp needed
 2520 0016 5DF8047B 		ldr	r7, [sp], #4
 2521              	.LCFI217:
 2522              		.cfi_restore 7
 2523              		.cfi_def_cfa_offset 0
 2524 001a 7047     		bx	lr
 2525              	.L121:
 2526              		.align	2
 2527              	.L120:
 2528 001c 08000000 		.word	_ZTV15PhaseControlLawILj3EE+8
 2529              		.cfi_endproc
 2530              	.LFE4852:
 2532              		.weak	_ZN15PhaseControlLawILj3EEC1Ev
 2533              		.thumb_set _ZN15PhaseControlLawILj3EEC1Ev,_ZN15PhaseControlLawILj3EEC2Ev
 2534              		.section	.text._ZN24AlphaBetaFrameControllerC2Ev,"axG",%progbits,_ZN24AlphaBetaFrameControllerC5Ev
 2535              		.align	1
 2536              		.weak	_ZN24AlphaBetaFrameControllerC2Ev
ARM GAS  /tmp/ccATuxCb.s 			page 180


 2537              		.syntax unified
 2538              		.thumb
 2539              		.thumb_func
 2540              		.fpu fpv4-sp-d16
 2542              	_ZN24AlphaBetaFrameControllerC2Ev:
 2543              	.LFB4854:
  12:Inc/phase_control_law.hpp **** public:
  13:Inc/phase_control_law.hpp ****     /**
  14:Inc/phase_control_law.hpp ****      * @brief Called when this controller becomes the active controller.
  15:Inc/phase_control_law.hpp ****      */
  16:Inc/phase_control_law.hpp ****     virtual void reset() = 0;
  17:Inc/phase_control_law.hpp **** 
  18:Inc/phase_control_law.hpp ****     /**
  19:Inc/phase_control_law.hpp ****      * @brief Informs the control law about a new set of measurements.
  20:Inc/phase_control_law.hpp ****      *
  21:Inc/phase_control_law.hpp ****      * This function gets called in a high priority interrupt context and should
  22:Inc/phase_control_law.hpp ****      * run fast.
  23:Inc/phase_control_law.hpp ****      *
  24:Inc/phase_control_law.hpp ****      * Beware that all inputs can be NAN.
  25:Inc/phase_control_law.hpp ****      *
  26:Inc/phase_control_law.hpp ****      * @param vbus_voltage: The most recently measured DC link voltage. Can be
  27:Inc/phase_control_law.hpp ****      *        std::nullopt if the measurement is not available or valid for any
  28:Inc/phase_control_law.hpp ****      *        reason.
  29:Inc/phase_control_law.hpp ****      * @param currents: The most recently measured (or inferred) phase currents
  30:Inc/phase_control_law.hpp ****      *        in Amps. Can be std::nullopt if no valid measurements are available
  31:Inc/phase_control_law.hpp ****      *        (e.g. because the opamp isn't started or because the sensors were
  32:Inc/phase_control_law.hpp ****      *        saturated).
  33:Inc/phase_control_law.hpp ****      * @param input_timestamp: The timestamp (in HCLK ticks) corresponding to
  34:Inc/phase_control_law.hpp ****      *        the vbus_voltage and current measurement.
  35:Inc/phase_control_law.hpp ****      */
  36:Inc/phase_control_law.hpp ****     virtual  ODriveIntf::MotorIntf::Error on_measurement(
  37:Inc/phase_control_law.hpp ****             std::optional<float> vbus_voltage,
  38:Inc/phase_control_law.hpp ****             std::optional<std::array<float, N_PHASES>> currents,
  39:Inc/phase_control_law.hpp ****             uint32_t input_timestamp) = 0;
  40:Inc/phase_control_law.hpp **** 
  41:Inc/phase_control_law.hpp ****     /**
  42:Inc/phase_control_law.hpp ****      * @brief Shall calculate the PWM timings for the specified target time.
  43:Inc/phase_control_law.hpp ****      *
  44:Inc/phase_control_law.hpp ****      * This function gets called in a high priority interrupt context and should
  45:Inc/phase_control_law.hpp ****      * run fast.
  46:Inc/phase_control_law.hpp ****      *
  47:Inc/phase_control_law.hpp ****      * Beware that this function can be called before a call to on_measurement().
  48:Inc/phase_control_law.hpp ****      * 
  49:Inc/phase_control_law.hpp ****      * @param output_timestamp: The timestamp (in HCLK ticks) corresponding to
  50:Inc/phase_control_law.hpp ****      *        the middle of the time span during which the output will be
  51:Inc/phase_control_law.hpp ****      *        active.
  52:Inc/phase_control_law.hpp ****      * @param pwm_timings: This array referenced by this argument shall be
  53:Inc/phase_control_law.hpp ****      *        filled with the desired PWM timings. Each item corresponds to one
  54:Inc/phase_control_law.hpp ****      *        phase and must lie in [0.0f, 1.0f].
  55:Inc/phase_control_law.hpp ****      *        The function is not required to return valid PWM timings in case
  56:Inc/phase_control_law.hpp ****      *        of an error.
  57:Inc/phase_control_law.hpp ****      * @param ibus: The variable pointed to by this argument is set to the
  58:Inc/phase_control_law.hpp ****      *        estimated DC current around the output timestamp when the desired
  59:Inc/phase_control_law.hpp ****      *        PWM timings get applied.
  60:Inc/phase_control_law.hpp ****      *        The function is not required to return a valid I_bus estimate in
  61:Inc/phase_control_law.hpp ****      *        case of an error.
  62:Inc/phase_control_law.hpp ****      * 
ARM GAS  /tmp/ccATuxCb.s 			page 181


  63:Inc/phase_control_law.hpp ****      * @returns: An error code or ERROR_NONE. If the function returns an error
  64:Inc/phase_control_law.hpp ****      *           the motor gets disarmed with one exception: If the controller
  65:Inc/phase_control_law.hpp ****      *           never returned valid PWM timings since it became active then it
  66:Inc/phase_control_law.hpp ****      *           is allowed to return ERROR_CONTROLLER_INITIALIZING without
  67:Inc/phase_control_law.hpp ****      *           triggering a motor disarm. In this phase the PWMs will not yet
  68:Inc/phase_control_law.hpp ****      *           be truly active.
  69:Inc/phase_control_law.hpp ****      */
  70:Inc/phase_control_law.hpp ****     virtual  ODriveIntf::MotorIntf::Error get_output(
  71:Inc/phase_control_law.hpp ****             uint32_t output_timestamp,
  72:Inc/phase_control_law.hpp ****             float (&pwm_timings)[N_PHASES],
  73:Inc/phase_control_law.hpp ****             std::optional<float>* ibus) = 0;
  74:Inc/phase_control_law.hpp **** };
  75:Inc/phase_control_law.hpp **** 
  76:Inc/phase_control_law.hpp **** class AlphaBetaFrameController : public PhaseControlLaw<3> {
 2544              		.loc 14 76 7
 2545              		.cfi_startproc
 2546              		@ args = 0, pretend = 0, frame = 8
 2547              		@ frame_needed = 1, uses_anonymous_args = 0
 2548 0000 80B5     		push	{r7, lr}
 2549              	.LCFI218:
 2550              		.cfi_def_cfa_offset 8
 2551              		.cfi_offset 7, -8
 2552              		.cfi_offset 14, -4
 2553 0002 82B0     		sub	sp, sp, #8
 2554              	.LCFI219:
 2555              		.cfi_def_cfa_offset 16
 2556 0004 00AF     		add	r7, sp, #0
 2557              	.LCFI220:
 2558              		.cfi_def_cfa_register 7
 2559 0006 7860     		str	r0, [r7, #4]
 2560              	.LBB23:
 2561              		.loc 14 76 7
 2562 0008 7B68     		ldr	r3, [r7, #4]
 2563 000a 1846     		mov	r0, r3
 2564 000c FFF7FEFF 		bl	_ZN15PhaseControlLawILj3EEC2Ev
 2565 0010 034A     		ldr	r2, .L124
 2566 0012 7B68     		ldr	r3, [r7, #4]
 2567 0014 1A60     		str	r2, [r3]
 2568              	.LBE23:
 2569 0016 7B68     		ldr	r3, [r7, #4]
 2570 0018 1846     		mov	r0, r3
 2571 001a 0837     		adds	r7, r7, #8
 2572              	.LCFI221:
 2573              		.cfi_def_cfa_offset 8
 2574 001c BD46     		mov	sp, r7
 2575              	.LCFI222:
 2576              		.cfi_def_cfa_register 13
 2577              		@ sp needed
 2578 001e 80BD     		pop	{r7, pc}
 2579              	.L125:
 2580              		.align	2
 2581              	.L124:
 2582 0020 08000000 		.word	_ZTV24AlphaBetaFrameController+8
 2583              		.cfi_endproc
 2584              	.LFE4854:
 2586              		.weak	_ZN24AlphaBetaFrameControllerC1Ev
 2587              		.thumb_set _ZN24AlphaBetaFrameControllerC1Ev,_ZN24AlphaBetaFrameControllerC2Ev
ARM GAS  /tmp/ccATuxCb.s 			page 182


 2588              		.section	.text._ZN13ComponentBaseC2Ev,"axG",%progbits,_ZN13ComponentBaseC5Ev,comdat
 2589              		.align	1
 2590              		.weak	_ZN13ComponentBaseC2Ev
 2591              		.syntax unified
 2592              		.thumb
 2593              		.thumb_func
 2594              		.fpu fpv4-sp-d16
 2596              	_ZN13ComponentBaseC2Ev:
 2597              	.LFB4857:
 2598              		.file 15 "Inc/component.hpp"
   1:Inc/component.hpp **** #ifndef __COMPONENT_HPP
   2:Inc/component.hpp **** #define __COMPONENT_HPP
   3:Inc/component.hpp **** 
   4:Inc/component.hpp **** #include <stdint.h>
   5:Inc/component.hpp **** #include <optional>
   6:Inc/component.hpp **** #include <variant>
   7:Inc/component.hpp **** #include "user_int.hpp"
   8:Inc/component.hpp **** class ComponentBase {
 2599              		.loc 15 8 7
 2600              		.cfi_startproc
 2601              		@ args = 0, pretend = 0, frame = 8
 2602              		@ frame_needed = 1, uses_anonymous_args = 0
 2603              		@ link register save eliminated.
 2604 0000 80B4     		push	{r7}
 2605              	.LCFI223:
 2606              		.cfi_def_cfa_offset 4
 2607              		.cfi_offset 7, -4
 2608 0002 83B0     		sub	sp, sp, #12
 2609              	.LCFI224:
 2610              		.cfi_def_cfa_offset 16
 2611 0004 00AF     		add	r7, sp, #0
 2612              	.LCFI225:
 2613              		.cfi_def_cfa_register 7
 2614 0006 7860     		str	r0, [r7, #4]
 2615              	.LBB24:
 2616              		.loc 15 8 7
 2617 0008 044A     		ldr	r2, .L128
 2618 000a 7B68     		ldr	r3, [r7, #4]
 2619 000c 1A60     		str	r2, [r3]
 2620              	.LBE24:
 2621 000e 7B68     		ldr	r3, [r7, #4]
 2622 0010 1846     		mov	r0, r3
 2623 0012 0C37     		adds	r7, r7, #12
 2624              	.LCFI226:
 2625              		.cfi_def_cfa_offset 4
 2626 0014 BD46     		mov	sp, r7
 2627              	.LCFI227:
 2628              		.cfi_def_cfa_register 13
 2629              		@ sp needed
 2630 0016 5DF8047B 		ldr	r7, [sp], #4
 2631              	.LCFI228:
 2632              		.cfi_restore 7
 2633              		.cfi_def_cfa_offset 0
 2634 001a 7047     		bx	lr
 2635              	.L129:
 2636              		.align	2
 2637              	.L128:
ARM GAS  /tmp/ccATuxCb.s 			page 183


 2638 001c 08000000 		.word	_ZTV13ComponentBase+8
 2639              		.cfi_endproc
 2640              	.LFE4857:
 2642              		.weak	_ZN13ComponentBaseC1Ev
 2643              		.thumb_set _ZN13ComponentBaseC1Ev,_ZN13ComponentBaseC2Ev
 2644              		.section	.text._ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1Ev,"axG",%progbits,_Z
 2645              		.align	1
 2646              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1Ev
 2647              		.syntax unified
 2648              		.thumb
 2649              		.thumb_func
 2650              		.fpu fpv4-sp-d16
 2652              	_ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1Ev:
 2653              	.LFB4865:
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2654              		.loc 12 200 14
 2655              		.cfi_startproc
 2656              		@ args = 0, pretend = 0, frame = 8
 2657              		@ frame_needed = 1, uses_anonymous_args = 0
 2658              		@ link register save eliminated.
 2659 0000 80B4     		push	{r7}
 2660              	.LCFI229:
 2661              		.cfi_def_cfa_offset 4
 2662              		.cfi_offset 7, -4
 2663 0002 83B0     		sub	sp, sp, #12
 2664              	.LCFI230:
 2665              		.cfi_def_cfa_offset 16
 2666 0004 00AF     		add	r7, sp, #0
 2667              	.LCFI231:
 2668              		.cfi_def_cfa_register 7
 2669 0006 7860     		str	r0, [r7, #4]
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2670              		.loc 12 200 49
 2671 0008 7B68     		ldr	r3, [r7, #4]
 2672 000a 1846     		mov	r0, r3
 2673 000c 0C37     		adds	r7, r7, #12
 2674              	.LCFI232:
 2675              		.cfi_def_cfa_offset 4
 2676 000e BD46     		mov	sp, r7
 2677              	.LCFI233:
 2678              		.cfi_def_cfa_register 13
 2679              		@ sp needed
 2680 0010 5DF8047B 		ldr	r7, [sp], #4
 2681              	.LCFI234:
 2682              		.cfi_restore 7
 2683              		.cfi_def_cfa_offset 0
 2684 0014 7047     		bx	lr
 2685              		.cfi_endproc
 2686              	.LFE4865:
 2688              		.section	.text._ZNSt22_Optional_payload_baseISt4pairIffEEC2Ev,"axG",%progbits,_ZNSt22_Optional_pay
 2689              		.align	1
 2690              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEEC2Ev
 2691              		.syntax unified
 2692              		.thumb
 2693              		.thumb_func
 2694              		.fpu fpv4-sp-d16
 2696              	_ZNSt22_Optional_payload_baseISt4pairIffEEC2Ev:
ARM GAS  /tmp/ccATuxCb.s 			page 184


 2697              	.LFB4866:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 2698              		.loc 12 111 7
 2699              		.cfi_startproc
 2700              		@ args = 0, pretend = 0, frame = 8
 2701              		@ frame_needed = 1, uses_anonymous_args = 0
 2702 0000 80B5     		push	{r7, lr}
 2703              	.LCFI235:
 2704              		.cfi_def_cfa_offset 8
 2705              		.cfi_offset 7, -8
 2706              		.cfi_offset 14, -4
 2707 0002 82B0     		sub	sp, sp, #8
 2708              	.LCFI236:
 2709              		.cfi_def_cfa_offset 16
 2710 0004 00AF     		add	r7, sp, #0
 2711              	.LCFI237:
 2712              		.cfi_def_cfa_register 7
 2713 0006 7860     		str	r0, [r7, #4]
 2714              	.LBB25:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 2715              		.loc 12 111 7
 2716 0008 7B68     		ldr	r3, [r7, #4]
 2717 000a 1846     		mov	r0, r3
 2718 000c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1Ev
 2719 0010 7B68     		ldr	r3, [r7, #4]
 2720 0012 0022     		movs	r2, #0
 2721 0014 1A72     		strb	r2, [r3, #8]
 2722              	.LBE25:
 2723 0016 7B68     		ldr	r3, [r7, #4]
 2724 0018 1846     		mov	r0, r3
 2725 001a 0837     		adds	r7, r7, #8
 2726              	.LCFI238:
 2727              		.cfi_def_cfa_offset 8
 2728 001c BD46     		mov	sp, r7
 2729              	.LCFI239:
 2730              		.cfi_def_cfa_register 13
 2731              		@ sp needed
 2732 001e 80BD     		pop	{r7, pc}
 2733              		.cfi_endproc
 2734              	.LFE4866:
 2736              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEEC1Ev
 2737              		.thumb_set _ZNSt22_Optional_payload_baseISt4pairIffEEC1Ev,_ZNSt22_Optional_payload_baseISt4pairIff
 2738              		.section	.text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC2Ev,"axG",%progbits,_ZNSt17_Optio
 2739              		.align	1
 2740              		.weak	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC2Ev
 2741              		.syntax unified
 2742              		.thumb
 2743              		.thumb_func
 2744              		.fpu fpv4-sp-d16
 2746              	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC2Ev:
 2747              	.LFB4868:
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 2748              		.loc 12 361 7
 2749              		.cfi_startproc
 2750              		@ args = 0, pretend = 0, frame = 8
 2751              		@ frame_needed = 1, uses_anonymous_args = 0
 2752 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccATuxCb.s 			page 185


 2753              	.LCFI240:
 2754              		.cfi_def_cfa_offset 8
 2755              		.cfi_offset 7, -8
 2756              		.cfi_offset 14, -4
 2757 0002 82B0     		sub	sp, sp, #8
 2758              	.LCFI241:
 2759              		.cfi_def_cfa_offset 16
 2760 0004 00AF     		add	r7, sp, #0
 2761              	.LCFI242:
 2762              		.cfi_def_cfa_register 7
 2763 0006 7860     		str	r0, [r7, #4]
 2764              	.LBB26:
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 2765              		.loc 12 361 7
 2766 0008 7B68     		ldr	r3, [r7, #4]
 2767 000a 1846     		mov	r0, r3
 2768 000c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEEC2Ev
 2769              	.LBE26:
 2770 0010 7B68     		ldr	r3, [r7, #4]
 2771 0012 1846     		mov	r0, r3
 2772 0014 0837     		adds	r7, r7, #8
 2773              	.LCFI243:
 2774              		.cfi_def_cfa_offset 8
 2775 0016 BD46     		mov	sp, r7
 2776              	.LCFI244:
 2777              		.cfi_def_cfa_register 13
 2778              		@ sp needed
 2779 0018 80BD     		pop	{r7, pc}
 2780              		.cfi_endproc
 2781              	.LFE4868:
 2783              		.weak	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC1Ev
 2784              		.thumb_set _ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC1Ev,_ZNSt17_Optional_payloadISt4pairI
 2785              		.section	.text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2Ev,"axG",%progbits,_ZNSt14_Optional_bas
 2786              		.align	1
 2787              		.weak	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2Ev
 2788              		.syntax unified
 2789              		.thumb
 2790              		.thumb_func
 2791              		.fpu fpv4-sp-d16
 2793              	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2Ev:
 2794              	.LFB4870:
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2795              		.loc 12 603 17
 2796              		.cfi_startproc
 2797              		@ args = 0, pretend = 0, frame = 8
 2798              		@ frame_needed = 1, uses_anonymous_args = 0
 2799 0000 80B5     		push	{r7, lr}
 2800              	.LCFI245:
 2801              		.cfi_def_cfa_offset 8
 2802              		.cfi_offset 7, -8
 2803              		.cfi_offset 14, -4
 2804 0002 82B0     		sub	sp, sp, #8
 2805              	.LCFI246:
 2806              		.cfi_def_cfa_offset 16
 2807 0004 00AF     		add	r7, sp, #0
 2808              	.LCFI247:
 2809              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccATuxCb.s 			page 186


 2810 0006 7860     		str	r0, [r7, #4]
 2811              	.LBB27:
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2812              		.loc 12 603 17
 2813 0008 7B68     		ldr	r3, [r7, #4]
 2814 000a 1846     		mov	r0, r3
 2815 000c FFF7FEFF 		bl	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC1Ev
 2816              	.LBE27:
 2817 0010 7B68     		ldr	r3, [r7, #4]
 2818 0012 1846     		mov	r0, r3
 2819 0014 0837     		adds	r7, r7, #8
 2820              	.LCFI248:
 2821              		.cfi_def_cfa_offset 8
 2822 0016 BD46     		mov	sp, r7
 2823              	.LCFI249:
 2824              		.cfi_def_cfa_register 13
 2825              		@ sp needed
 2826 0018 80BD     		pop	{r7, pc}
 2827              		.cfi_endproc
 2828              	.LFE4870:
 2830              		.weak	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC1Ev
 2831              		.thumb_set _ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC1Ev,_ZNSt14_Optional_baseISt4pairIffELb1ELb1
 2832              		.section	.text._ZNSt8optionalISt4pairIffEEC2Ev,"axG",%progbits,_ZNSt8optionalISt4pairIffEEC5Ev,com
 2833              		.align	1
 2834              		.weak	_ZNSt8optionalISt4pairIffEEC2Ev
 2835              		.syntax unified
 2836              		.thumb
 2837              		.thumb_func
 2838              		.fpu fpv4-sp-d16
 2840              	_ZNSt8optionalISt4pairIffEEC2Ev:
 2841              	.LFB4872:
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2842              		.loc 12 691 17
 2843              		.cfi_startproc
 2844              		@ args = 0, pretend = 0, frame = 8
 2845              		@ frame_needed = 1, uses_anonymous_args = 0
 2846 0000 80B5     		push	{r7, lr}
 2847              	.LCFI250:
 2848              		.cfi_def_cfa_offset 8
 2849              		.cfi_offset 7, -8
 2850              		.cfi_offset 14, -4
 2851 0002 82B0     		sub	sp, sp, #8
 2852              	.LCFI251:
 2853              		.cfi_def_cfa_offset 16
 2854 0004 00AF     		add	r7, sp, #0
 2855              	.LCFI252:
 2856              		.cfi_def_cfa_register 7
 2857 0006 7860     		str	r0, [r7, #4]
 2858              	.LBB28:
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2859              		.loc 12 691 17
 2860 0008 7B68     		ldr	r3, [r7, #4]
 2861 000a 1846     		mov	r0, r3
 2862 000c FFF7FEFF 		bl	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2Ev
 2863              	.LBE28:
 2864 0010 7B68     		ldr	r3, [r7, #4]
 2865 0012 1846     		mov	r0, r3
ARM GAS  /tmp/ccATuxCb.s 			page 187


 2866 0014 0837     		adds	r7, r7, #8
 2867              	.LCFI253:
 2868              		.cfi_def_cfa_offset 8
 2869 0016 BD46     		mov	sp, r7
 2870              	.LCFI254:
 2871              		.cfi_def_cfa_register 13
 2872              		@ sp needed
 2873 0018 80BD     		pop	{r7, pc}
 2874              		.cfi_endproc
 2875              	.LFE4872:
 2877              		.weak	_ZNSt8optionalISt4pairIffEEC1Ev
 2878              		.thumb_set _ZNSt8optionalISt4pairIffEEC1Ev,_ZNSt8optionalISt4pairIffEEC2Ev
 2879              		.section	.text._ZNSt8__detail9__variant14_UninitializedISt4pairIffELb1EEC1IJEEESt16in_place_index_
 2880              		.align	1
 2881              		.weak	_ZNSt8__detail9__variant14_UninitializedISt4pairIffELb1EEC1IJEEESt16in_place_index_tILj0EEDp
 2882              		.syntax unified
 2883              		.thumb
 2884              		.thumb_func
 2885              		.fpu fpv4-sp-d16
 2887              	_ZNSt8__detail9__variant14_UninitializedISt4pairIffELb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_:
 2888              	.LFB4886:
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 2889              		.loc 3 215 2
 2890              		.cfi_startproc
 2891              		@ args = 0, pretend = 0, frame = 8
 2892              		@ frame_needed = 1, uses_anonymous_args = 0
 2893 0000 80B5     		push	{r7, lr}
 2894              	.LCFI255:
 2895              		.cfi_def_cfa_offset 8
 2896              		.cfi_offset 7, -8
 2897              		.cfi_offset 14, -4
 2898 0002 82B0     		sub	sp, sp, #8
 2899              	.LCFI256:
 2900              		.cfi_def_cfa_offset 16
 2901 0004 00AF     		add	r7, sp, #0
 2902              	.LCFI257:
 2903              		.cfi_def_cfa_register 7
 2904 0006 7860     		str	r0, [r7, #4]
 2905 0008 3970     		strb	r1, [r7]
 2906              	.LBB29:
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 2907              		.loc 3 216 45
 2908 000a 7B68     		ldr	r3, [r7, #4]
 2909 000c 1846     		mov	r0, r3
 2910 000e FFF7FEFF 		bl	_ZNSt4pairIffEC1IffLb1EEEv
 2911              	.LBE29:
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 2912              		.loc 3 217 4
 2913 0012 7B68     		ldr	r3, [r7, #4]
 2914 0014 1846     		mov	r0, r3
 2915 0016 0837     		adds	r7, r7, #8
 2916              	.LCFI258:
 2917              		.cfi_def_cfa_offset 8
 2918 0018 BD46     		mov	sp, r7
 2919              	.LCFI259:
 2920              		.cfi_def_cfa_register 13
 2921              		@ sp needed
ARM GAS  /tmp/ccATuxCb.s 			page 188


 2922 001a 80BD     		pop	{r7, pc}
 2923              		.cfi_endproc
 2924              	.LFE4886:
 2926              		.section	.text._ZNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS3_P10OutputPortIS3_EEEC1IJE
 2927              		.align	1
 2928              		.weak	_ZNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS3_P10OutputPortIS3_EEEC1IJEEESt16in_
 2929              		.syntax unified
 2930              		.thumb
 2931              		.thumb_func
 2932              		.fpu fpv4-sp-d16
 2934              	_ZNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS3_P10OutputPortIS3_EEEC1IJEEESt16in_place_i
 2935              	.LFB4888:
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 2936              		.loc 3 335 12
 2937              		.cfi_startproc
 2938              		@ args = 0, pretend = 0, frame = 8
 2939              		@ frame_needed = 1, uses_anonymous_args = 0
 2940 0000 80B5     		push	{r7, lr}
 2941              	.LCFI260:
 2942              		.cfi_def_cfa_offset 8
 2943              		.cfi_offset 7, -8
 2944              		.cfi_offset 14, -4
 2945 0002 82B0     		sub	sp, sp, #8
 2946              	.LCFI261:
 2947              		.cfi_def_cfa_offset 16
 2948 0004 00AF     		add	r7, sp, #0
 2949              	.LCFI262:
 2950              		.cfi_def_cfa_register 7
 2951 0006 7860     		str	r0, [r7, #4]
 2952 0008 3970     		strb	r1, [r7]
 2953              	.LBB30:
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 2954              		.loc 3 336 62
 2955 000a 7B68     		ldr	r3, [r7, #4]
 2956 000c 1146     		mov	r1, r2
 2957 000e 1846     		mov	r0, r3
 2958 0010 FFF7FEFF 		bl	_ZNSt8__detail9__variant14_UninitializedISt4pairIffELb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_
 2959              	.LBE30:
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 2960              		.loc 3 337 4
 2961 0014 7B68     		ldr	r3, [r7, #4]
 2962 0016 1846     		mov	r0, r3
 2963 0018 0837     		adds	r7, r7, #8
 2964              	.LCFI263:
 2965              		.cfi_def_cfa_offset 8
 2966 001a BD46     		mov	sp, r7
 2967              	.LCFI264:
 2968              		.cfi_def_cfa_register 13
 2969              		@ sp needed
 2970 001c 80BD     		pop	{r7, pc}
 2971              		.cfi_endproc
 2972              	.LFE4888:
 2974              		.section	.text._ZNSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE
 2975              		.align	1
 2976              		.weak	_ZNSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEEC2ILj0EJE
 2977              		.syntax unified
 2978              		.thumb
ARM GAS  /tmp/ccATuxCb.s 			page 189


 2979              		.thumb_func
 2980              		.fpu fpv4-sp-d16
 2982              	_ZNSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEEC2ILj0EJEEESt16i
 2983              	.LFB4889:
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 2984              		.loc 3 446 2
 2985              		.cfi_startproc
 2986              		@ args = 0, pretend = 0, frame = 8
 2987              		@ frame_needed = 1, uses_anonymous_args = 0
 2988 0000 80B5     		push	{r7, lr}
 2989              	.LCFI265:
 2990              		.cfi_def_cfa_offset 8
 2991              		.cfi_offset 7, -8
 2992              		.cfi_offset 14, -4
 2993 0002 82B0     		sub	sp, sp, #8
 2994              	.LCFI266:
 2995              		.cfi_def_cfa_offset 16
 2996 0004 00AF     		add	r7, sp, #0
 2997              	.LCFI267:
 2998              		.cfi_def_cfa_register 7
 2999 0006 7860     		str	r0, [r7, #4]
 3000 0008 3970     		strb	r1, [r7]
 3001              	.LBB31:
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 3002              		.loc 3 448 14
 3003 000a 7B68     		ldr	r3, [r7, #4]
 3004 000c 1146     		mov	r1, r2
 3005 000e 1846     		mov	r0, r3
 3006 0010 FFF7FEFF 		bl	_ZNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS3_P10OutputPortIS3_EEEC1IJEEESt16in_pla
 3007 0014 7B68     		ldr	r3, [r7, #4]
 3008 0016 0022     		movs	r2, #0
 3009 0018 1A72     		strb	r2, [r3, #8]
 3010              	.LBE31:
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3011              		.loc 3 449 4
 3012 001a 7B68     		ldr	r3, [r7, #4]
 3013 001c 1846     		mov	r0, r3
 3014 001e 0837     		adds	r7, r7, #8
 3015              	.LCFI268:
 3016              		.cfi_def_cfa_offset 8
 3017 0020 BD46     		mov	sp, r7
 3018              	.LCFI269:
 3019              		.cfi_def_cfa_register 13
 3020              		@ sp needed
 3021 0022 80BD     		pop	{r7, pc}
 3022              		.cfi_endproc
 3023              	.LFE4889:
 3025              		.section	.text._ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEEC
 3026              		.align	1
 3027              		.weak	_ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_
 3028              		.syntax unified
 3029              		.thumb
 3030              		.thumb_func
 3031              		.fpu fpv4-sp-d16
 3033              	_ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Variant
 3034              	.LFB4891:
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
ARM GAS  /tmp/ccATuxCb.s 			page 190


 3035              		.loc 3 523 20
 3036              		.cfi_startproc
 3037              		@ args = 0, pretend = 0, frame = 8
 3038              		@ frame_needed = 1, uses_anonymous_args = 0
 3039 0000 80B5     		push	{r7, lr}
 3040              	.LCFI270:
 3041              		.cfi_def_cfa_offset 8
 3042              		.cfi_offset 7, -8
 3043              		.cfi_offset 14, -4
 3044 0002 82B0     		sub	sp, sp, #8
 3045              	.LCFI271:
 3046              		.cfi_def_cfa_offset 16
 3047 0004 00AF     		add	r7, sp, #0
 3048              	.LCFI272:
 3049              		.cfi_def_cfa_register 7
 3050 0006 7860     		str	r0, [r7, #4]
 3051 0008 3970     		strb	r1, [r7]
 3052              	.LBB32:
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 3053              		.loc 3 523 20
 3054 000a 7B68     		ldr	r3, [r7, #4]
 3055 000c 1146     		mov	r1, r2
 3056 000e 1846     		mov	r0, r3
 3057 0010 FFF7FEFF 		bl	_ZNSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEEC2ILj0EJEEES
 3058              	.LBE32:
 3059 0014 7B68     		ldr	r3, [r7, #4]
 3060 0016 1846     		mov	r0, r3
 3061 0018 0837     		adds	r7, r7, #8
 3062              	.LCFI273:
 3063              		.cfi_def_cfa_offset 8
 3064 001a BD46     		mov	sp, r7
 3065              	.LCFI274:
 3066              		.cfi_def_cfa_register 13
 3067              		@ sp needed
 3068 001c 80BD     		pop	{r7, pc}
 3069              		.cfi_endproc
 3070              	.LFE4891:
 3072              		.weak	_ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI1NS0_16_
 3073              		.thumb_set _ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI1NS
 3074              		.section	.text._ZNSt8__detail9__variant15_Move_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEEC
 3075              		.align	1
 3076              		.weak	_ZNSt8__detail9__variant15_Move_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_
 3077              		.syntax unified
 3078              		.thumb
 3079              		.thumb_func
 3080              		.fpu fpv4-sp-d16
 3082              	_ZNSt8__detail9__variant15_Move_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Variant
 3083              	.LFB4893:
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3084              		.loc 3 567 20
 3085              		.cfi_startproc
 3086              		@ args = 0, pretend = 0, frame = 8
 3087              		@ frame_needed = 1, uses_anonymous_args = 0
 3088 0000 80B5     		push	{r7, lr}
 3089              	.LCFI275:
 3090              		.cfi_def_cfa_offset 8
 3091              		.cfi_offset 7, -8
ARM GAS  /tmp/ccATuxCb.s 			page 191


 3092              		.cfi_offset 14, -4
 3093 0002 82B0     		sub	sp, sp, #8
 3094              	.LCFI276:
 3095              		.cfi_def_cfa_offset 16
 3096 0004 00AF     		add	r7, sp, #0
 3097              	.LCFI277:
 3098              		.cfi_def_cfa_register 7
 3099 0006 7860     		str	r0, [r7, #4]
 3100 0008 3970     		strb	r1, [r7]
 3101              	.LBB33:
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3102              		.loc 3 567 20
 3103 000a 7B68     		ldr	r3, [r7, #4]
 3104 000c 1146     		mov	r1, r2
 3105 000e 1846     		mov	r0, r3
 3106 0010 FFF7FEFF 		bl	_ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Var
 3107              	.LBE33:
 3108 0014 7B68     		ldr	r3, [r7, #4]
 3109 0016 1846     		mov	r0, r3
 3110 0018 0837     		adds	r7, r7, #8
 3111              	.LCFI278:
 3112              		.cfi_def_cfa_offset 8
 3113 001a BD46     		mov	sp, r7
 3114              	.LCFI279:
 3115              		.cfi_def_cfa_register 13
 3116              		@ sp needed
 3117 001c 80BD     		pop	{r7, pc}
 3118              		.cfi_endproc
 3119              	.LFE4893:
 3121              		.weak	_ZNSt8__detail9__variant15_Move_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI1NS0_16_
 3122              		.thumb_set _ZNSt8__detail9__variant15_Move_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI1NS
 3123              		.section	.text._ZNSt8__detail9__variant17_Copy_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EE
 3124              		.align	1
 3125              		.weak	_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_1
 3126              		.syntax unified
 3127              		.thumb
 3128              		.thumb_func
 3129              		.fpu fpv4-sp-d16
 3131              	_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Varia
 3132              	.LFB4895:
 594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3133              		.loc 3 594 20
 3134              		.cfi_startproc
 3135              		@ args = 0, pretend = 0, frame = 8
 3136              		@ frame_needed = 1, uses_anonymous_args = 0
 3137 0000 80B5     		push	{r7, lr}
 3138              	.LCFI280:
 3139              		.cfi_def_cfa_offset 8
 3140              		.cfi_offset 7, -8
 3141              		.cfi_offset 14, -4
 3142 0002 82B0     		sub	sp, sp, #8
 3143              	.LCFI281:
 3144              		.cfi_def_cfa_offset 16
 3145 0004 00AF     		add	r7, sp, #0
 3146              	.LCFI282:
 3147              		.cfi_def_cfa_register 7
 3148 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccATuxCb.s 			page 192


 3149 0008 3970     		strb	r1, [r7]
 3150              	.LBB34:
 594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3151              		.loc 3 594 20
 3152 000a 7B68     		ldr	r3, [r7, #4]
 3153 000c 1146     		mov	r1, r2
 3154 000e 1846     		mov	r0, r3
 3155 0010 FFF7FEFF 		bl	_ZNSt8__detail9__variant15_Move_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Var
 3156              	.LBE34:
 3157 0014 7B68     		ldr	r3, [r7, #4]
 3158 0016 1846     		mov	r0, r3
 3159 0018 0837     		adds	r7, r7, #8
 3160              	.LCFI283:
 3161              		.cfi_def_cfa_offset 8
 3162 001a BD46     		mov	sp, r7
 3163              	.LCFI284:
 3164              		.cfi_def_cfa_register 13
 3165              		@ sp needed
 3166 001c 80BD     		pop	{r7, pc}
 3167              		.cfi_endproc
 3168              	.LFE4895:
 3170              		.weak	_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI1NS0_1
 3171              		.thumb_set _ZNSt8__detail9__variant17_Copy_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI1
 3172              		.section	.text._ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EE
 3173              		.align	1
 3174              		.weak	_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_1
 3175              		.syntax unified
 3176              		.thumb
 3177              		.thumb_func
 3178              		.fpu fpv4-sp-d16
 3180              	_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Varia
 3181              	.LFB4897:
 652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3182              		.loc 3 652 20
 3183              		.cfi_startproc
 3184              		@ args = 0, pretend = 0, frame = 8
 3185              		@ frame_needed = 1, uses_anonymous_args = 0
 3186 0000 80B5     		push	{r7, lr}
 3187              	.LCFI285:
 3188              		.cfi_def_cfa_offset 8
 3189              		.cfi_offset 7, -8
 3190              		.cfi_offset 14, -4
 3191 0002 82B0     		sub	sp, sp, #8
 3192              	.LCFI286:
 3193              		.cfi_def_cfa_offset 16
 3194 0004 00AF     		add	r7, sp, #0
 3195              	.LCFI287:
 3196              		.cfi_def_cfa_register 7
 3197 0006 7860     		str	r0, [r7, #4]
 3198 0008 3970     		strb	r1, [r7]
 3199              	.LBB35:
 652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3200              		.loc 3 652 20
 3201 000a 7B68     		ldr	r3, [r7, #4]
 3202 000c 1146     		mov	r1, r2
 3203 000e 1846     		mov	r0, r3
 3204 0010 FFF7FEFF 		bl	_ZNSt8__detail9__variant17_Copy_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_V
ARM GAS  /tmp/ccATuxCb.s 			page 193


 3205              	.LBE35:
 3206 0014 7B68     		ldr	r3, [r7, #4]
 3207 0016 1846     		mov	r0, r3
 3208 0018 0837     		adds	r7, r7, #8
 3209              	.LCFI288:
 3210              		.cfi_def_cfa_offset 8
 3211 001a BD46     		mov	sp, r7
 3212              	.LCFI289:
 3213              		.cfi_def_cfa_register 13
 3214              		@ sp needed
 3215 001c 80BD     		pop	{r7, pc}
 3216              		.cfi_endproc
 3217              	.LFE4897:
 3219              		.weak	_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI1NS0_1
 3220              		.thumb_set _ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI1
 3221              		.section	.text._ZNSt8__detail9__variant13_Variant_baseIJSt4pairIffEPS3_P10OutputPortIS3_EEEC1ILj0E
 3222              		.align	1
 3223              		.weak	_ZNSt8__detail9__variant13_Variant_baseIJSt4pairIffEPS3_P10OutputPortIS3_EEEC1ILj0EJEEESt16i
 3224              		.syntax unified
 3225              		.thumb
 3226              		.thumb_func
 3227              		.fpu fpv4-sp-d16
 3229              	_ZNSt8__detail9__variant13_Variant_baseIJSt4pairIffEPS3_P10OutputPortIS3_EEEC1ILj0EJEEESt16in_place
 3230              	.LFB4900:
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 3231              		.loc 3 703 2
 3232              		.cfi_startproc
 3233              		@ args = 0, pretend = 0, frame = 8
 3234              		@ frame_needed = 1, uses_anonymous_args = 0
 3235 0000 80B5     		push	{r7, lr}
 3236              	.LCFI290:
 3237              		.cfi_def_cfa_offset 8
 3238              		.cfi_offset 7, -8
 3239              		.cfi_offset 14, -4
 3240 0002 82B0     		sub	sp, sp, #8
 3241              	.LCFI291:
 3242              		.cfi_def_cfa_offset 16
 3243 0004 00AF     		add	r7, sp, #0
 3244              	.LCFI292:
 3245              		.cfi_def_cfa_register 7
 3246 0006 7860     		str	r0, [r7, #4]
 3247 0008 3970     		strb	r1, [r7]
 3248              	.LBB36:
 704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 3249              		.loc 3 704 45
 3250 000a 7B68     		ldr	r3, [r7, #4]
 3251 000c 1146     		mov	r1, r2
 3252 000e 1846     		mov	r0, r3
 3253 0010 FFF7FEFF 		bl	_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_V
 3254              	.LBE36:
 705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3255              		.loc 3 705 4
 3256 0014 7B68     		ldr	r3, [r7, #4]
 3257 0016 1846     		mov	r0, r3
 3258 0018 0837     		adds	r7, r7, #8
 3259              	.LCFI293:
 3260              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccATuxCb.s 			page 194


 3261 001a BD46     		mov	sp, r7
 3262              	.LCFI294:
 3263              		.cfi_def_cfa_register 13
 3264              		@ sp needed
 3265 001c 80BD     		pop	{r7, pc}
 3266              		.cfi_endproc
 3267              	.LFE4900:
 3269              		.section	.text._ZNSt8__detail9__variant13_Variant_baseIJSt4pairIffEPS3_P10OutputPortIS3_EEEC2Ev,"a
 3270              		.align	1
 3271              		.weak	_ZNSt8__detail9__variant13_Variant_baseIJSt4pairIffEPS3_P10OutputPortIS3_EEEC2Ev
 3272              		.syntax unified
 3273              		.thumb
 3274              		.thumb_func
 3275              		.fpu fpv4-sp-d16
 3277              	_ZNSt8__detail9__variant13_Variant_baseIJSt4pairIffEPS3_P10OutputPortIS3_EEEC2Ev:
 3278              	.LFB4901:
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 3279              		.loc 3 697 7
 3280              		.cfi_startproc
 3281              		@ args = 0, pretend = 0, frame = 8
 3282              		@ frame_needed = 1, uses_anonymous_args = 0
 3283 0000 80B5     		push	{r7, lr}
 3284              	.LCFI295:
 3285              		.cfi_def_cfa_offset 8
 3286              		.cfi_offset 7, -8
 3287              		.cfi_offset 14, -4
 3288 0002 82B0     		sub	sp, sp, #8
 3289              	.LCFI296:
 3290              		.cfi_def_cfa_offset 16
 3291 0004 00AF     		add	r7, sp, #0
 3292              	.LCFI297:
 3293              		.cfi_def_cfa_register 7
 3294 0006 7860     		str	r0, [r7, #4]
 3295              	.LBB37:
 699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3296              		.loc 3 699 40
 3297 0008 1946     		mov	r1, r3
 3298 000a 7868     		ldr	r0, [r7, #4]
 3299 000c FFF7FEFF 		bl	_ZNSt8__detail9__variant13_Variant_baseIJSt4pairIffEPS3_P10OutputPortIS3_EEEC1ILj0EJEEESt16in_p
 3300              	.LBE37:
 699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3301              		.loc 3 699 44
 3302 0010 7B68     		ldr	r3, [r7, #4]
 3303 0012 1846     		mov	r0, r3
 3304 0014 0837     		adds	r7, r7, #8
 3305              	.LCFI298:
 3306              		.cfi_def_cfa_offset 8
 3307 0016 BD46     		mov	sp, r7
 3308              	.LCFI299:
 3309              		.cfi_def_cfa_register 13
 3310              		@ sp needed
 3311 0018 80BD     		pop	{r7, pc}
 3312              		.cfi_endproc
 3313              	.LFE4901:
 3315              		.section	.text._ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEEC2Ev,"axG",%progbits,_ZNSt7varian
 3316              		.align	1
 3317              		.weak	_ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEEC2Ev
ARM GAS  /tmp/ccATuxCb.s 			page 195


 3318              		.syntax unified
 3319              		.thumb
 3320              		.thumb_func
 3321              		.fpu fpv4-sp-d16
 3323              	_ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEEC2Ev:
 3324              	.LFB4903:
1285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     class variant
1288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : private __detail::__variant::_Variant_base<_Types...>,
1289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       private _Enable_default_constructor<
1290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_default_ctor,
1291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  variant<_Types...>>,
1292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       private _Enable_copy_move<
1293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_copy_ctor,
1294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_copy_assign,
1295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_move_ctor,
1296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_move_assign,
1297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant<_Types...>>
1298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     private:
1300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _UTypes, typename _Tp>
1301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend decltype(auto) __variant_cast(_Tp&&);
1302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Variant, typename... _Args>
1303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend void __variant_construct_by_index(_Variant& __v,
1304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						 _Args&&... __args);
1305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(sizeof...(_Types) > 0,
1307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "variant must have at least one alternative");
1308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!(std::is_reference_v<_Types> || ...),
1309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "variant must have no reference alternative");
1310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!(std::is_void_v<_Types> || ...),
1311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "variant must have no void alternative");
1312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = __detail::__variant::_Variant_base<_Types...>;
1314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Default_ctor_enabler =
1315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Enable_default_constructor<
1316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __detail::__variant::_Traits<_Types...>::_S_default_ctor,
1317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    variant<_Types...>>;
1318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr bool __not_self
1321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  = !is_same_v<__remove_cvref_t<_Tp>, variant>;
1322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr bool
1325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__exactly_once = __detail::__variant::__exactly_once<_Tp, _Types...>;
1326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr size_t __accepted_index
1329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  = __detail::__variant::__accepted_index<_Tp, variant>::value;
1330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename = enable_if_t<(_Np < sizeof...(_Types))>>
1332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	using __to_type = variant_alternative_t<_Np, variant>;
1333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename = enable_if_t<__not_self<_Tp>>>
1335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	using __accepted_type = __to_type<__accepted_index<_Tp>>;
ARM GAS  /tmp/ccATuxCb.s 			page 196


1336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr size_t __index_of =
1339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __detail::__variant::__index_of_v<_Tp, _Types...>;
1340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Traits = __detail::__variant::_Traits<_Types...>;
1342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __is_in_place_tag : false_type { };
1345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __is_in_place_tag<in_place_type_t<_Tp>> : true_type { };
1347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np>
1348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __is_in_place_tag<in_place_index_t<_Np>> : true_type { };
1349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr bool __not_in_place_tag
1352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  = !__is_in_place_tag<__remove_cvref_t<_Tp>>::value;
1353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     public:
1355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant() = default;
 3325              		.loc 3 1355 7
 3326              		.cfi_startproc
 3327              		@ args = 0, pretend = 0, frame = 8
 3328              		@ frame_needed = 1, uses_anonymous_args = 0
 3329 0000 80B5     		push	{r7, lr}
 3330              	.LCFI300:
 3331              		.cfi_def_cfa_offset 8
 3332              		.cfi_offset 7, -8
 3333              		.cfi_offset 14, -4
 3334 0002 82B0     		sub	sp, sp, #8
 3335              	.LCFI301:
 3336              		.cfi_def_cfa_offset 16
 3337 0004 00AF     		add	r7, sp, #0
 3338              	.LCFI302:
 3339              		.cfi_def_cfa_register 7
 3340 0006 7860     		str	r0, [r7, #4]
 3341              	.LBB38:
 3342              		.loc 3 1355 7
 3343 0008 7B68     		ldr	r3, [r7, #4]
 3344 000a 1846     		mov	r0, r3
 3345 000c FFF7FEFF 		bl	_ZNSt8__detail9__variant13_Variant_baseIJSt4pairIffEPS3_P10OutputPortIS3_EEEC2Ev
 3346              	.LBE38:
 3347 0010 7B68     		ldr	r3, [r7, #4]
 3348 0012 1846     		mov	r0, r3
 3349 0014 0837     		adds	r7, r7, #8
 3350              	.LCFI303:
 3351              		.cfi_def_cfa_offset 8
 3352 0016 BD46     		mov	sp, r7
 3353              	.LCFI304:
 3354              		.cfi_def_cfa_register 13
 3355              		@ sp needed
 3356 0018 80BD     		pop	{r7, pc}
 3357              		.cfi_endproc
 3358              	.LFE4903:
 3360              		.weak	_ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEEC1Ev
 3361              		.thumb_set _ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEEC1Ev,_ZNSt7variantIJSt4pairIffEPS1_P1
 3362              		.section	.text._ZN9InputPortISt4pairIffEEC2Ev,"axG",%progbits,_ZN9InputPortISt4pairIffEEC5Ev,comda
ARM GAS  /tmp/ccATuxCb.s 			page 197


 3363              		.align	1
 3364              		.weak	_ZN9InputPortISt4pairIffEEC2Ev
 3365              		.syntax unified
 3366              		.thumb
 3367              		.thumb_func
 3368              		.fpu fpv4-sp-d16
 3370              	_ZN9InputPortISt4pairIffEEC2Ev:
 3371              	.LFB4905:
   9:Inc/component.hpp **** public:
  10:Inc/component.hpp ****     /**
  11:Inc/component.hpp ****      * @brief Shall run the update action of this component.
  12:Inc/component.hpp ****      * 
  13:Inc/component.hpp ****      * This function gets called in a low priority interrupt context and is
  14:Inc/component.hpp ****      * allowed to call CMSIS functions.
  15:Inc/component.hpp ****      * 
  16:Inc/component.hpp ****      * @param timestamp: The timestamp (in HCLK ticks) for which this update
  17:Inc/component.hpp ****      * is run.
  18:Inc/component.hpp ****      */
  19:Inc/component.hpp ****     virtual void update(uint32_t timestamp) = 0;
  20:Inc/component.hpp **** };
  21:Inc/component.hpp **** 
  22:Inc/component.hpp **** 
  23:Inc/component.hpp **** template<typename T>
  24:Inc/component.hpp **** class InputPort;
  25:Inc/component.hpp **** 
  26:Inc/component.hpp **** /**
  27:Inc/component.hpp ****  * @brief An output port stores a value for consumption by a connecting input
  28:Inc/component.hpp ****  * port.
  29:Inc/component.hpp ****  * 
  30:Inc/component.hpp ****  * Output ports are supposed to be reset at the beginning of a control loop
  31:Inc/component.hpp ****  * iteration. This ensures that connecting input ports don't use an outdated
  32:Inc/component.hpp ****  * value and, more importantly, ensures proper handling if the producer of the
  33:Inc/component.hpp ****  * value is incapable of producing the value for any reason.
  34:Inc/component.hpp ****  * 
  35:Inc/component.hpp ****  * Member functions of this class are not thread-safe unless noted otherwise.
  36:Inc/component.hpp ****  */
  37:Inc/component.hpp **** template<typename T>
  38:Inc/component.hpp **** class OutputPort {
  39:Inc/component.hpp **** public:
  40:Inc/component.hpp ****     /**
  41:Inc/component.hpp ****      * @brief Initializes the output port with the specified value.
  42:Inc/component.hpp ****      * 
  43:Inc/component.hpp ****      * An initialization value is required for any() to work properly.
  44:Inc/component.hpp ****      * present() and previous() cannot be used to fetch the
  45:Inc/component.hpp ****      * initialization value.
  46:Inc/component.hpp ****      */
  47:Inc/component.hpp ****     OutputPort(T val) : content_(val) {}
  48:Inc/component.hpp ****     
  49:Inc/component.hpp ****     /**
  50:Inc/component.hpp ****      * @brief Updates the underlying value of this output port.
  51:Inc/component.hpp ****      */
  52:Inc/component.hpp ****     void operator=(T value) {
  53:Inc/component.hpp ****         content_ = value;
  54:Inc/component.hpp ****         age_ = 0;
  55:Inc/component.hpp ****     }
  56:Inc/component.hpp **** 
  57:Inc/component.hpp ****     /**
ARM GAS  /tmp/ccATuxCb.s 			page 198


  58:Inc/component.hpp ****      * @brief Marks the contained value as outdated. The value is not actually
  59:Inc/component.hpp ****      * deleted and can still be accessed through some of the member functions
  60:Inc/component.hpp ****      * of this class.
  61:Inc/component.hpp ****      */
  62:Inc/component.hpp ****     void reset() {
  63:Inc/component.hpp ****         // This will eventually overflow to 0 so present() could
  64:Inc/component.hpp ****         // theoretically return a very old value however it is very likely that
  65:Inc/component.hpp ****         // the motor will be long disarmed by then.
  66:Inc/component.hpp ****         age_++;
  67:Inc/component.hpp ****     }
  68:Inc/component.hpp **** 
  69:Inc/component.hpp ****     /**
  70:Inc/component.hpp ****      * @brief Returns the value from this control loop iteration or std::nullopt
  71:Inc/component.hpp ****      * if the value was not yet set during this control loop iteration.
  72:Inc/component.hpp ****      */
  73:Inc/component.hpp ****     std::optional<T> present() {
  74:Inc/component.hpp ****         if (age_ == 0) {
  75:Inc/component.hpp ****             return content_;
  76:Inc/component.hpp ****         } else {
  77:Inc/component.hpp ****             return std::nullopt;
  78:Inc/component.hpp ****         }
  79:Inc/component.hpp ****     }
  80:Inc/component.hpp **** 
  81:Inc/component.hpp ****     /**
  82:Inc/component.hpp ****      * @brief Returns the value from exactly the previous control loop iteration.
  83:Inc/component.hpp ****      * 
  84:Inc/component.hpp ****      * If during the last iteration no value was set or the value was already
  85:Inc/component.hpp ****      * overwritten during this control loop iteration then this function returns
  86:Inc/component.hpp ****      * std::nullopt.
  87:Inc/component.hpp ****      */
  88:Inc/component.hpp ****     std::optional<T> previous() {
  89:Inc/component.hpp ****         if (age_ == 1) {
  90:Inc/component.hpp ****             return content_;
  91:Inc/component.hpp ****         } else {
  92:Inc/component.hpp ****             return std::nullopt;
  93:Inc/component.hpp ****         }
  94:Inc/component.hpp ****     }
  95:Inc/component.hpp **** 
  96:Inc/component.hpp ****     /**
  97:Inc/component.hpp ****      * @brief Returns the value contained in this output port with disregard of
  98:Inc/component.hpp ****      * when the value was set.
  99:Inc/component.hpp ****      * 
 100:Inc/component.hpp ****      * This function is thread-safe if load/store operations of T are atomic.
 101:Inc/component.hpp ****      */
 102:Inc/component.hpp ****     std::optional<T> any() {
 103:Inc/component.hpp ****         return content_;
 104:Inc/component.hpp ****     }
 105:Inc/component.hpp ****     
 106:Inc/component.hpp **** private:
 107:Inc/component.hpp ****     uint32_t age_ = 2; // Age in number of control loop iterations
 108:Inc/component.hpp ****     T content_;
 109:Inc/component.hpp **** };
 110:Inc/component.hpp **** 
 111:Inc/component.hpp **** /**
 112:Inc/component.hpp ****  * @brief An input port provides a value from the source to which it's configured.
 113:Inc/component.hpp ****  * 
 114:Inc/component.hpp ****  * The source can be one of:
ARM GAS  /tmp/ccATuxCb.s 			page 199


 115:Inc/component.hpp ****  *  - an internally stored value
 116:Inc/component.hpp ****  *  - an externally stored value (referenced by a pointer)
 117:Inc/component.hpp ****  *  - an external OutputPort (referenced by a pointer)
 118:Inc/component.hpp ****  *  - none (all queries will return std::nullopt)
 119:Inc/component.hpp ****  * 
 120:Inc/component.hpp ****  * Member functions of this class are not thread-safe unless otherwise noted.
 121:Inc/component.hpp ****  */
 122:Inc/component.hpp **** template<typename T>
 123:Inc/component.hpp **** class InputPort {
 3372              		.loc 15 123 7
 3373              		.cfi_startproc
 3374              		@ args = 0, pretend = 0, frame = 8
 3375              		@ frame_needed = 1, uses_anonymous_args = 0
 3376 0000 80B5     		push	{r7, lr}
 3377              	.LCFI305:
 3378              		.cfi_def_cfa_offset 8
 3379              		.cfi_offset 7, -8
 3380              		.cfi_offset 14, -4
 3381 0002 82B0     		sub	sp, sp, #8
 3382              	.LCFI306:
 3383              		.cfi_def_cfa_offset 16
 3384 0004 00AF     		add	r7, sp, #0
 3385              	.LCFI307:
 3386              		.cfi_def_cfa_register 7
 3387 0006 7860     		str	r0, [r7, #4]
 3388              	.LBB39:
 3389              		.loc 15 123 7
 3390 0008 7B68     		ldr	r3, [r7, #4]
 3391 000a 1846     		mov	r0, r3
 3392 000c FFF7FEFF 		bl	_ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEEC1Ev
 3393              	.LBE39:
 3394 0010 7B68     		ldr	r3, [r7, #4]
 3395 0012 1846     		mov	r0, r3
 3396 0014 0837     		adds	r7, r7, #8
 3397              	.LCFI308:
 3398              		.cfi_def_cfa_offset 8
 3399 0016 BD46     		mov	sp, r7
 3400              	.LCFI309:
 3401              		.cfi_def_cfa_register 13
 3402              		@ sp needed
 3403 0018 80BD     		pop	{r7, pc}
 3404              		.cfi_endproc
 3405              	.LFE4905:
 3407              		.weak	_ZN9InputPortISt4pairIffEEC1Ev
 3408              		.thumb_set _ZN9InputPortISt4pairIffEEC1Ev,_ZN9InputPortISt4pairIffEEC2Ev
 3409              		.section	.text._ZNSt8__detail9__variant14_UninitializedIfLb1EEC1IJEEESt16in_place_index_tILj0EEDpO
 3410              		.align	1
 3411              		.weak	_ZNSt8__detail9__variant14_UninitializedIfLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_
 3412              		.syntax unified
 3413              		.thumb
 3414              		.thumb_func
 3415              		.fpu fpv4-sp-d16
 3417              	_ZNSt8__detail9__variant14_UninitializedIfLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_:
 3418              	.LFB4919:
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 3419              		.loc 3 215 2
 3420              		.cfi_startproc
ARM GAS  /tmp/ccATuxCb.s 			page 200


 3421              		@ args = 0, pretend = 0, frame = 8
 3422              		@ frame_needed = 1, uses_anonymous_args = 0
 3423              		@ link register save eliminated.
 3424 0000 80B4     		push	{r7}
 3425              	.LCFI310:
 3426              		.cfi_def_cfa_offset 4
 3427              		.cfi_offset 7, -4
 3428 0002 83B0     		sub	sp, sp, #12
 3429              	.LCFI311:
 3430              		.cfi_def_cfa_offset 16
 3431 0004 00AF     		add	r7, sp, #0
 3432              	.LCFI312:
 3433              		.cfi_def_cfa_register 7
 3434 0006 7860     		str	r0, [r7, #4]
 3435 0008 3970     		strb	r1, [r7]
 3436              	.LBB40:
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 3437              		.loc 3 216 45
 3438 000a 7B68     		ldr	r3, [r7, #4]
 3439 000c 4FF00002 		mov	r2, #0
 3440 0010 1A60     		str	r2, [r3]	@ float
 3441              	.LBE40:
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3442              		.loc 3 217 4
 3443 0012 7B68     		ldr	r3, [r7, #4]
 3444 0014 1846     		mov	r0, r3
 3445 0016 0C37     		adds	r7, r7, #12
 3446              	.LCFI313:
 3447              		.cfi_def_cfa_offset 4
 3448 0018 BD46     		mov	sp, r7
 3449              	.LCFI314:
 3450              		.cfi_def_cfa_register 13
 3451              		@ sp needed
 3452 001a 5DF8047B 		ldr	r7, [sp], #4
 3453              	.LCFI315:
 3454              		.cfi_restore 7
 3455              		.cfi_def_cfa_offset 0
 3456 001e 7047     		bx	lr
 3457              		.cfi_endproc
 3458              	.LFE4919:
 3460              		.section	.text._ZNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEC1IJEEESt16in_place
 3461              		.align	1
 3462              		.weak	_ZNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEC1IJEEESt16in_place_index_tI
 3463              		.syntax unified
 3464              		.thumb
 3465              		.thumb_func
 3466              		.fpu fpv4-sp-d16
 3468              	_ZNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEC1IJEEESt16in_place_index_tILj0EEDp
 3469              	.LFB4921:
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 3470              		.loc 3 335 12
 3471              		.cfi_startproc
 3472              		@ args = 0, pretend = 0, frame = 8
 3473              		@ frame_needed = 1, uses_anonymous_args = 0
 3474 0000 80B5     		push	{r7, lr}
 3475              	.LCFI316:
 3476              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccATuxCb.s 			page 201


 3477              		.cfi_offset 7, -8
 3478              		.cfi_offset 14, -4
 3479 0002 82B0     		sub	sp, sp, #8
 3480              	.LCFI317:
 3481              		.cfi_def_cfa_offset 16
 3482 0004 00AF     		add	r7, sp, #0
 3483              	.LCFI318:
 3484              		.cfi_def_cfa_register 7
 3485 0006 7860     		str	r0, [r7, #4]
 3486 0008 3970     		strb	r1, [r7]
 3487              	.LBB41:
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 3488              		.loc 3 336 62
 3489 000a 7B68     		ldr	r3, [r7, #4]
 3490 000c 1146     		mov	r1, r2
 3491 000e 1846     		mov	r0, r3
 3492 0010 FFF7FEFF 		bl	_ZNSt8__detail9__variant14_UninitializedIfLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_
 3493              	.LBE41:
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3494              		.loc 3 337 4
 3495 0014 7B68     		ldr	r3, [r7, #4]
 3496 0016 1846     		mov	r0, r3
 3497 0018 0837     		adds	r7, r7, #8
 3498              	.LCFI319:
 3499              		.cfi_def_cfa_offset 8
 3500 001a BD46     		mov	sp, r7
 3501              	.LCFI320:
 3502              		.cfi_def_cfa_register 13
 3503              		@ sp needed
 3504 001c 80BD     		pop	{r7, pc}
 3505              		.cfi_endproc
 3506              	.LFE4921:
 3508              		.section	.text._ZNSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEEC2ILj0EJEEESt1
 3509              		.align	1
 3510              		.weak	_ZNSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEEC2ILj0EJEEESt16in_place
 3511              		.syntax unified
 3512              		.thumb
 3513              		.thumb_func
 3514              		.fpu fpv4-sp-d16
 3516              	_ZNSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEEC2ILj0EJEEESt16in_place_index_
 3517              	.LFB4922:
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 3518              		.loc 3 446 2
 3519              		.cfi_startproc
 3520              		@ args = 0, pretend = 0, frame = 8
 3521              		@ frame_needed = 1, uses_anonymous_args = 0
 3522 0000 80B5     		push	{r7, lr}
 3523              	.LCFI321:
 3524              		.cfi_def_cfa_offset 8
 3525              		.cfi_offset 7, -8
 3526              		.cfi_offset 14, -4
 3527 0002 82B0     		sub	sp, sp, #8
 3528              	.LCFI322:
 3529              		.cfi_def_cfa_offset 16
 3530 0004 00AF     		add	r7, sp, #0
 3531              	.LCFI323:
 3532              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccATuxCb.s 			page 202


 3533 0006 7860     		str	r0, [r7, #4]
 3534 0008 3970     		strb	r1, [r7]
 3535              	.LBB42:
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 3536              		.loc 3 448 14
 3537 000a 7B68     		ldr	r3, [r7, #4]
 3538 000c 1146     		mov	r1, r2
 3539 000e 1846     		mov	r0, r3
 3540 0010 FFF7FEFF 		bl	_ZNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEC1IJEEESt16in_place_index_tILj0
 3541 0014 7B68     		ldr	r3, [r7, #4]
 3542 0016 0022     		movs	r2, #0
 3543 0018 1A71     		strb	r2, [r3, #4]
 3544              	.LBE42:
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3545              		.loc 3 449 4
 3546 001a 7B68     		ldr	r3, [r7, #4]
 3547 001c 1846     		mov	r0, r3
 3548 001e 0837     		adds	r7, r7, #8
 3549              	.LCFI324:
 3550              		.cfi_def_cfa_offset 8
 3551 0020 BD46     		mov	sp, r7
 3552              	.LCFI325:
 3553              		.cfi_def_cfa_register 13
 3554              		@ sp needed
 3555 0022 80BD     		pop	{r7, pc}
 3556              		.cfi_endproc
 3557              	.LFE4922:
 3559              		.section	.text._ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Varia
 3560              		.align	1
 3561              		.weak	_ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storag
 3562              		.syntax unified
 3563              		.thumb
 3564              		.thumb_func
 3565              		.fpu fpv4-sp-d16
 3567              	_ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1EJ
 3568              	.LFB4924:
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 3569              		.loc 3 523 20
 3570              		.cfi_startproc
 3571              		@ args = 0, pretend = 0, frame = 8
 3572              		@ frame_needed = 1, uses_anonymous_args = 0
 3573 0000 80B5     		push	{r7, lr}
 3574              	.LCFI326:
 3575              		.cfi_def_cfa_offset 8
 3576              		.cfi_offset 7, -8
 3577              		.cfi_offset 14, -4
 3578 0002 82B0     		sub	sp, sp, #8
 3579              	.LCFI327:
 3580              		.cfi_def_cfa_offset 16
 3581 0004 00AF     		add	r7, sp, #0
 3582              	.LCFI328:
 3583              		.cfi_def_cfa_register 7
 3584 0006 7860     		str	r0, [r7, #4]
 3585 0008 3970     		strb	r1, [r7]
 3586              	.LBB43:
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 3587              		.loc 3 523 20
ARM GAS  /tmp/ccATuxCb.s 			page 203


 3588 000a 7B68     		ldr	r3, [r7, #4]
 3589 000c 1146     		mov	r1, r2
 3590 000e 1846     		mov	r0, r3
 3591 0010 FFF7FEFF 		bl	_ZNSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEEC2ILj0EJEEESt16in_place_in
 3592              	.LBE43:
 3593 0014 7B68     		ldr	r3, [r7, #4]
 3594 0016 1846     		mov	r0, r3
 3595 0018 0837     		adds	r7, r7, #8
 3596              	.LCFI329:
 3597              		.cfi_def_cfa_offset 8
 3598 001a BD46     		mov	sp, r7
 3599              	.LCFI330:
 3600              		.cfi_def_cfa_register 13
 3601              		@ sp needed
 3602 001c 80BD     		pop	{r7, pc}
 3603              		.cfi_endproc
 3604              	.LFE4924:
 3606              		.weak	_ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJfPfP10OutputPortIfEEECI1NS0_16_Variant_storag
 3607              		.thumb_set _ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJfPfP10OutputPortIfEEECI1NS0_16_Variant_s
 3608              		.section	.text._ZNSt8__detail9__variant15_Move_ctor_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Varia
 3609              		.align	1
 3610              		.weak	_ZNSt8__detail9__variant15_Move_ctor_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storag
 3611              		.syntax unified
 3612              		.thumb
 3613              		.thumb_func
 3614              		.fpu fpv4-sp-d16
 3616              	_ZNSt8__detail9__variant15_Move_ctor_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1EJ
 3617              	.LFB4926:
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3618              		.loc 3 567 20
 3619              		.cfi_startproc
 3620              		@ args = 0, pretend = 0, frame = 8
 3621              		@ frame_needed = 1, uses_anonymous_args = 0
 3622 0000 80B5     		push	{r7, lr}
 3623              	.LCFI331:
 3624              		.cfi_def_cfa_offset 8
 3625              		.cfi_offset 7, -8
 3626              		.cfi_offset 14, -4
 3627 0002 82B0     		sub	sp, sp, #8
 3628              	.LCFI332:
 3629              		.cfi_def_cfa_offset 16
 3630 0004 00AF     		add	r7, sp, #0
 3631              	.LCFI333:
 3632              		.cfi_def_cfa_register 7
 3633 0006 7860     		str	r0, [r7, #4]
 3634 0008 3970     		strb	r1, [r7]
 3635              	.LBB44:
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3636              		.loc 3 567 20
 3637 000a 7B68     		ldr	r3, [r7, #4]
 3638 000c 1146     		mov	r1, r2
 3639 000e 1846     		mov	r0, r3
 3640 0010 FFF7FEFF 		bl	_ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageIL
 3641              	.LBE44:
 3642 0014 7B68     		ldr	r3, [r7, #4]
 3643 0016 1846     		mov	r0, r3
 3644 0018 0837     		adds	r7, r7, #8
ARM GAS  /tmp/ccATuxCb.s 			page 204


 3645              	.LCFI334:
 3646              		.cfi_def_cfa_offset 8
 3647 001a BD46     		mov	sp, r7
 3648              	.LCFI335:
 3649              		.cfi_def_cfa_register 13
 3650              		@ sp needed
 3651 001c 80BD     		pop	{r7, pc}
 3652              		.cfi_endproc
 3653              	.LFE4926:
 3655              		.weak	_ZNSt8__detail9__variant15_Move_ctor_baseILb1EJfPfP10OutputPortIfEEECI1NS0_16_Variant_storag
 3656              		.thumb_set _ZNSt8__detail9__variant15_Move_ctor_baseILb1EJfPfP10OutputPortIfEEECI1NS0_16_Variant_s
 3657              		.section	.text._ZNSt8__detail9__variant17_Copy_assign_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Var
 3658              		.align	1
 3659              		.weak	_ZNSt8__detail9__variant17_Copy_assign_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_stor
 3660              		.syntax unified
 3661              		.thumb
 3662              		.thumb_func
 3663              		.fpu fpv4-sp-d16
 3665              	_ZNSt8__detail9__variant17_Copy_assign_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1
 3666              	.LFB4928:
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 3667              		.loc 3 641 20
 3668              		.cfi_startproc
 3669              		@ args = 0, pretend = 0, frame = 8
 3670              		@ frame_needed = 1, uses_anonymous_args = 0
 3671 0000 80B5     		push	{r7, lr}
 3672              	.LCFI336:
 3673              		.cfi_def_cfa_offset 8
 3674              		.cfi_offset 7, -8
 3675              		.cfi_offset 14, -4
 3676 0002 82B0     		sub	sp, sp, #8
 3677              	.LCFI337:
 3678              		.cfi_def_cfa_offset 16
 3679 0004 00AF     		add	r7, sp, #0
 3680              	.LCFI338:
 3681              		.cfi_def_cfa_register 7
 3682 0006 7860     		str	r0, [r7, #4]
 3683 0008 3970     		strb	r1, [r7]
 3684              	.LBB45:
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 3685              		.loc 3 641 20
 3686 000a 7B68     		ldr	r3, [r7, #4]
 3687 000c 1146     		mov	r1, r2
 3688 000e 1846     		mov	r0, r3
 3689 0010 FFF7FEFF 		bl	_ZNSt8__detail9__variant15_Move_ctor_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageIL
 3690              	.LBE45:
 3691 0014 7B68     		ldr	r3, [r7, #4]
 3692 0016 1846     		mov	r0, r3
 3693 0018 0837     		adds	r7, r7, #8
 3694              	.LCFI339:
 3695              		.cfi_def_cfa_offset 8
 3696 001a BD46     		mov	sp, r7
 3697              	.LCFI340:
 3698              		.cfi_def_cfa_register 13
 3699              		@ sp needed
 3700 001c 80BD     		pop	{r7, pc}
 3701              		.cfi_endproc
ARM GAS  /tmp/ccATuxCb.s 			page 205


 3702              	.LFE4928:
 3704              		.weak	_ZNSt8__detail9__variant17_Copy_assign_baseILb1EJfPfP10OutputPortIfEEECI1NS0_16_Variant_stor
 3705              		.thumb_set _ZNSt8__detail9__variant17_Copy_assign_baseILb1EJfPfP10OutputPortIfEEECI1NS0_16_Variant
 3706              		.section	.text._ZNSt8__detail9__variant17_Move_assign_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Var
 3707              		.align	1
 3708              		.weak	_ZNSt8__detail9__variant17_Move_assign_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_stor
 3709              		.syntax unified
 3710              		.thumb
 3711              		.thumb_func
 3712              		.fpu fpv4-sp-d16
 3714              	_ZNSt8__detail9__variant17_Move_assign_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1
 3715              	.LFB4930:
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 3716              		.loc 3 684 20
 3717              		.cfi_startproc
 3718              		@ args = 0, pretend = 0, frame = 8
 3719              		@ frame_needed = 1, uses_anonymous_args = 0
 3720 0000 80B5     		push	{r7, lr}
 3721              	.LCFI341:
 3722              		.cfi_def_cfa_offset 8
 3723              		.cfi_offset 7, -8
 3724              		.cfi_offset 14, -4
 3725 0002 82B0     		sub	sp, sp, #8
 3726              	.LCFI342:
 3727              		.cfi_def_cfa_offset 16
 3728 0004 00AF     		add	r7, sp, #0
 3729              	.LCFI343:
 3730              		.cfi_def_cfa_register 7
 3731 0006 7860     		str	r0, [r7, #4]
 3732 0008 3970     		strb	r1, [r7]
 3733              	.LBB46:
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 3734              		.loc 3 684 20
 3735 000a 7B68     		ldr	r3, [r7, #4]
 3736 000c 1146     		mov	r1, r2
 3737 000e 1846     		mov	r0, r3
 3738 0010 FFF7FEFF 		bl	_ZNSt8__detail9__variant17_Copy_assign_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storage
 3739              	.LBE46:
 3740 0014 7B68     		ldr	r3, [r7, #4]
 3741 0016 1846     		mov	r0, r3
 3742 0018 0837     		adds	r7, r7, #8
 3743              	.LCFI344:
 3744              		.cfi_def_cfa_offset 8
 3745 001a BD46     		mov	sp, r7
 3746              	.LCFI345:
 3747              		.cfi_def_cfa_register 13
 3748              		@ sp needed
 3749 001c 80BD     		pop	{r7, pc}
 3750              		.cfi_endproc
 3751              	.LFE4930:
 3753              		.weak	_ZNSt8__detail9__variant17_Move_assign_baseILb1EJfPfP10OutputPortIfEEECI1NS0_16_Variant_stor
 3754              		.thumb_set _ZNSt8__detail9__variant17_Move_assign_baseILb1EJfPfP10OutputPortIfEEECI1NS0_16_Variant
 3755              		.section	.text._ZNSt8__detail9__variant13_Variant_baseIJfPfP10OutputPortIfEEEC1ILj0EJEEESt16in_pla
 3756              		.align	1
 3757              		.weak	_ZNSt8__detail9__variant13_Variant_baseIJfPfP10OutputPortIfEEEC1ILj0EJEEESt16in_place_index_
 3758              		.syntax unified
 3759              		.thumb
ARM GAS  /tmp/ccATuxCb.s 			page 206


 3760              		.thumb_func
 3761              		.fpu fpv4-sp-d16
 3763              	_ZNSt8__detail9__variant13_Variant_baseIJfPfP10OutputPortIfEEEC1ILj0EJEEESt16in_place_index_tIXT_EE
 3764              	.LFB4933:
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 3765              		.loc 3 703 2
 3766              		.cfi_startproc
 3767              		@ args = 0, pretend = 0, frame = 8
 3768              		@ frame_needed = 1, uses_anonymous_args = 0
 3769 0000 80B5     		push	{r7, lr}
 3770              	.LCFI346:
 3771              		.cfi_def_cfa_offset 8
 3772              		.cfi_offset 7, -8
 3773              		.cfi_offset 14, -4
 3774 0002 82B0     		sub	sp, sp, #8
 3775              	.LCFI347:
 3776              		.cfi_def_cfa_offset 16
 3777 0004 00AF     		add	r7, sp, #0
 3778              	.LCFI348:
 3779              		.cfi_def_cfa_register 7
 3780 0006 7860     		str	r0, [r7, #4]
 3781 0008 3970     		strb	r1, [r7]
 3782              	.LBB47:
 704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 3783              		.loc 3 704 45
 3784 000a 7B68     		ldr	r3, [r7, #4]
 3785 000c 1146     		mov	r1, r2
 3786 000e 1846     		mov	r0, r3
 3787 0010 FFF7FEFF 		bl	_ZNSt8__detail9__variant17_Move_assign_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storage
 3788              	.LBE47:
 705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3789              		.loc 3 705 4
 3790 0014 7B68     		ldr	r3, [r7, #4]
 3791 0016 1846     		mov	r0, r3
 3792 0018 0837     		adds	r7, r7, #8
 3793              	.LCFI349:
 3794              		.cfi_def_cfa_offset 8
 3795 001a BD46     		mov	sp, r7
 3796              	.LCFI350:
 3797              		.cfi_def_cfa_register 13
 3798              		@ sp needed
 3799 001c 80BD     		pop	{r7, pc}
 3800              		.cfi_endproc
 3801              	.LFE4933:
 3803              		.section	.text._ZNSt8__detail9__variant13_Variant_baseIJfPfP10OutputPortIfEEEC2Ev,"axG",%progbits,
 3804              		.align	1
 3805              		.weak	_ZNSt8__detail9__variant13_Variant_baseIJfPfP10OutputPortIfEEEC2Ev
 3806              		.syntax unified
 3807              		.thumb
 3808              		.thumb_func
 3809              		.fpu fpv4-sp-d16
 3811              	_ZNSt8__detail9__variant13_Variant_baseIJfPfP10OutputPortIfEEEC2Ev:
 3812              	.LFB4934:
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 3813              		.loc 3 697 7
 3814              		.cfi_startproc
 3815              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccATuxCb.s 			page 207


 3816              		@ frame_needed = 1, uses_anonymous_args = 0
 3817 0000 80B5     		push	{r7, lr}
 3818              	.LCFI351:
 3819              		.cfi_def_cfa_offset 8
 3820              		.cfi_offset 7, -8
 3821              		.cfi_offset 14, -4
 3822 0002 82B0     		sub	sp, sp, #8
 3823              	.LCFI352:
 3824              		.cfi_def_cfa_offset 16
 3825 0004 00AF     		add	r7, sp, #0
 3826              	.LCFI353:
 3827              		.cfi_def_cfa_register 7
 3828 0006 7860     		str	r0, [r7, #4]
 3829              	.LBB48:
 699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3830              		.loc 3 699 40
 3831 0008 1946     		mov	r1, r3
 3832 000a 7868     		ldr	r0, [r7, #4]
 3833 000c FFF7FEFF 		bl	_ZNSt8__detail9__variant13_Variant_baseIJfPfP10OutputPortIfEEEC1ILj0EJEEESt16in_place_index_tIX
 3834              	.LBE48:
 699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 3835              		.loc 3 699 44
 3836 0010 7B68     		ldr	r3, [r7, #4]
 3837 0012 1846     		mov	r0, r3
 3838 0014 0837     		adds	r7, r7, #8
 3839              	.LCFI354:
 3840              		.cfi_def_cfa_offset 8
 3841 0016 BD46     		mov	sp, r7
 3842              	.LCFI355:
 3843              		.cfi_def_cfa_register 13
 3844              		@ sp needed
 3845 0018 80BD     		pop	{r7, pc}
 3846              		.cfi_endproc
 3847              	.LFE4934:
 3849              		.section	.text._ZNSt7variantIJfPfP10OutputPortIfEEEC2Ev,"axG",%progbits,_ZNSt7variantIJfPfP10Outpu
 3850              		.align	1
 3851              		.weak	_ZNSt7variantIJfPfP10OutputPortIfEEEC2Ev
 3852              		.syntax unified
 3853              		.thumb
 3854              		.thumb_func
 3855              		.fpu fpv4-sp-d16
 3857              	_ZNSt7variantIJfPfP10OutputPortIfEEEC2Ev:
 3858              	.LFB4936:
 3859              		.loc 3 1355 7
 3860              		.cfi_startproc
 3861              		@ args = 0, pretend = 0, frame = 8
 3862              		@ frame_needed = 1, uses_anonymous_args = 0
 3863 0000 80B5     		push	{r7, lr}
 3864              	.LCFI356:
 3865              		.cfi_def_cfa_offset 8
 3866              		.cfi_offset 7, -8
 3867              		.cfi_offset 14, -4
 3868 0002 82B0     		sub	sp, sp, #8
 3869              	.LCFI357:
 3870              		.cfi_def_cfa_offset 16
 3871 0004 00AF     		add	r7, sp, #0
 3872              	.LCFI358:
ARM GAS  /tmp/ccATuxCb.s 			page 208


 3873              		.cfi_def_cfa_register 7
 3874 0006 7860     		str	r0, [r7, #4]
 3875              	.LBB49:
 3876              		.loc 3 1355 7
 3877 0008 7B68     		ldr	r3, [r7, #4]
 3878 000a 1846     		mov	r0, r3
 3879 000c FFF7FEFF 		bl	_ZNSt8__detail9__variant13_Variant_baseIJfPfP10OutputPortIfEEEC2Ev
 3880              	.LBE49:
 3881 0010 7B68     		ldr	r3, [r7, #4]
 3882 0012 1846     		mov	r0, r3
 3883 0014 0837     		adds	r7, r7, #8
 3884              	.LCFI359:
 3885              		.cfi_def_cfa_offset 8
 3886 0016 BD46     		mov	sp, r7
 3887              	.LCFI360:
 3888              		.cfi_def_cfa_register 13
 3889              		@ sp needed
 3890 0018 80BD     		pop	{r7, pc}
 3891              		.cfi_endproc
 3892              	.LFE4936:
 3894              		.weak	_ZNSt7variantIJfPfP10OutputPortIfEEEC1Ev
 3895              		.thumb_set _ZNSt7variantIJfPfP10OutputPortIfEEEC1Ev,_ZNSt7variantIJfPfP10OutputPortIfEEEC2Ev
 3896              		.section	.text._ZN9InputPortIfEC2Ev,"axG",%progbits,_ZN9InputPortIfEC5Ev,comdat
 3897              		.align	1
 3898              		.weak	_ZN9InputPortIfEC2Ev
 3899              		.syntax unified
 3900              		.thumb
 3901              		.thumb_func
 3902              		.fpu fpv4-sp-d16
 3904              	_ZN9InputPortIfEC2Ev:
 3905              	.LFB4938:
 3906              		.loc 15 123 7
 3907              		.cfi_startproc
 3908              		@ args = 0, pretend = 0, frame = 8
 3909              		@ frame_needed = 1, uses_anonymous_args = 0
 3910 0000 80B5     		push	{r7, lr}
 3911              	.LCFI361:
 3912              		.cfi_def_cfa_offset 8
 3913              		.cfi_offset 7, -8
 3914              		.cfi_offset 14, -4
 3915 0002 82B0     		sub	sp, sp, #8
 3916              	.LCFI362:
 3917              		.cfi_def_cfa_offset 16
 3918 0004 00AF     		add	r7, sp, #0
 3919              	.LCFI363:
 3920              		.cfi_def_cfa_register 7
 3921 0006 7860     		str	r0, [r7, #4]
 3922              	.LBB50:
 3923              		.loc 15 123 7
 3924 0008 7B68     		ldr	r3, [r7, #4]
 3925 000a 1846     		mov	r0, r3
 3926 000c FFF7FEFF 		bl	_ZNSt7variantIJfPfP10OutputPortIfEEEC1Ev
 3927              	.LBE50:
 3928 0010 7B68     		ldr	r3, [r7, #4]
 3929 0012 1846     		mov	r0, r3
 3930 0014 0837     		adds	r7, r7, #8
 3931              	.LCFI364:
ARM GAS  /tmp/ccATuxCb.s 			page 209


 3932              		.cfi_def_cfa_offset 8
 3933 0016 BD46     		mov	sp, r7
 3934              	.LCFI365:
 3935              		.cfi_def_cfa_register 13
 3936              		@ sp needed
 3937 0018 80BD     		pop	{r7, pc}
 3938              		.cfi_endproc
 3939              	.LFE4938:
 3941              		.weak	_ZN9InputPortIfEC1Ev
 3942              		.thumb_set _ZN9InputPortIfEC1Ev,_ZN9InputPortIfEC2Ev
 3943              		.section	.text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev,"axG",%progbits,_ZNSt22_Option
 3944              		.align	1
 3945              		.weak	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev
 3946              		.syntax unified
 3947              		.thumb
 3948              		.thumb_func
 3949              		.fpu fpv4-sp-d16
 3951              	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev:
 3952              	.LFB4946:
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3953              		.loc 12 200 14
 3954              		.cfi_startproc
 3955              		@ args = 0, pretend = 0, frame = 8
 3956              		@ frame_needed = 1, uses_anonymous_args = 0
 3957              		@ link register save eliminated.
 3958 0000 80B4     		push	{r7}
 3959              	.LCFI366:
 3960              		.cfi_def_cfa_offset 4
 3961              		.cfi_offset 7, -4
 3962 0002 83B0     		sub	sp, sp, #12
 3963              	.LCFI367:
 3964              		.cfi_def_cfa_offset 16
 3965 0004 00AF     		add	r7, sp, #0
 3966              	.LCFI368:
 3967              		.cfi_def_cfa_register 7
 3968 0006 7860     		str	r0, [r7, #4]
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 3969              		.loc 12 200 49
 3970 0008 7B68     		ldr	r3, [r7, #4]
 3971 000a 1846     		mov	r0, r3
 3972 000c 0C37     		adds	r7, r7, #12
 3973              	.LCFI369:
 3974              		.cfi_def_cfa_offset 4
 3975 000e BD46     		mov	sp, r7
 3976              	.LCFI370:
 3977              		.cfi_def_cfa_register 13
 3978              		@ sp needed
 3979 0010 5DF8047B 		ldr	r7, [sp], #4
 3980              	.LCFI371:
 3981              		.cfi_restore 7
 3982              		.cfi_def_cfa_offset 0
 3983 0014 7047     		bx	lr
 3984              		.cfi_endproc
 3985              	.LFE4946:
 3987              		.section	.text._ZNSt22_Optional_payload_baseIfEC2Ev,"axG",%progbits,_ZNSt22_Optional_payload_baseI
 3988              		.align	1
 3989              		.weak	_ZNSt22_Optional_payload_baseIfEC2Ev
ARM GAS  /tmp/ccATuxCb.s 			page 210


 3990              		.syntax unified
 3991              		.thumb
 3992              		.thumb_func
 3993              		.fpu fpv4-sp-d16
 3995              	_ZNSt22_Optional_payload_baseIfEC2Ev:
 3996              	.LFB4947:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 3997              		.loc 12 111 7
 3998              		.cfi_startproc
 3999              		@ args = 0, pretend = 0, frame = 8
 4000              		@ frame_needed = 1, uses_anonymous_args = 0
 4001 0000 80B5     		push	{r7, lr}
 4002              	.LCFI372:
 4003              		.cfi_def_cfa_offset 8
 4004              		.cfi_offset 7, -8
 4005              		.cfi_offset 14, -4
 4006 0002 82B0     		sub	sp, sp, #8
 4007              	.LCFI373:
 4008              		.cfi_def_cfa_offset 16
 4009 0004 00AF     		add	r7, sp, #0
 4010              	.LCFI374:
 4011              		.cfi_def_cfa_register 7
 4012 0006 7860     		str	r0, [r7, #4]
 4013              	.LBB51:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 4014              		.loc 12 111 7
 4015 0008 7B68     		ldr	r3, [r7, #4]
 4016 000a 1846     		mov	r0, r3
 4017 000c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev
 4018 0010 7B68     		ldr	r3, [r7, #4]
 4019 0012 0022     		movs	r2, #0
 4020 0014 1A71     		strb	r2, [r3, #4]
 4021              	.LBE51:
 4022 0016 7B68     		ldr	r3, [r7, #4]
 4023 0018 1846     		mov	r0, r3
 4024 001a 0837     		adds	r7, r7, #8
 4025              	.LCFI375:
 4026              		.cfi_def_cfa_offset 8
 4027 001c BD46     		mov	sp, r7
 4028              	.LCFI376:
 4029              		.cfi_def_cfa_register 13
 4030              		@ sp needed
 4031 001e 80BD     		pop	{r7, pc}
 4032              		.cfi_endproc
 4033              	.LFE4947:
 4035              		.weak	_ZNSt22_Optional_payload_baseIfEC1Ev
 4036              		.thumb_set _ZNSt22_Optional_payload_baseIfEC1Ev,_ZNSt22_Optional_payload_baseIfEC2Ev
 4037              		.section	.text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev,"axG",%progbits,_ZNSt17_Optional_payloa
 4038              		.align	1
 4039              		.weak	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev
 4040              		.syntax unified
 4041              		.thumb
 4042              		.thumb_func
 4043              		.fpu fpv4-sp-d16
 4045              	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev:
 4046              	.LFB4949:
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
ARM GAS  /tmp/ccATuxCb.s 			page 211


 4047              		.loc 12 303 7
 4048              		.cfi_startproc
 4049              		@ args = 0, pretend = 0, frame = 8
 4050              		@ frame_needed = 1, uses_anonymous_args = 0
 4051 0000 80B5     		push	{r7, lr}
 4052              	.LCFI377:
 4053              		.cfi_def_cfa_offset 8
 4054              		.cfi_offset 7, -8
 4055              		.cfi_offset 14, -4
 4056 0002 82B0     		sub	sp, sp, #8
 4057              	.LCFI378:
 4058              		.cfi_def_cfa_offset 16
 4059 0004 00AF     		add	r7, sp, #0
 4060              	.LCFI379:
 4061              		.cfi_def_cfa_register 7
 4062 0006 7860     		str	r0, [r7, #4]
 4063              	.LBB52:
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 4064              		.loc 12 303 7
 4065 0008 7B68     		ldr	r3, [r7, #4]
 4066 000a 1846     		mov	r0, r3
 4067 000c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfEC2Ev
 4068              	.LBE52:
 4069 0010 7B68     		ldr	r3, [r7, #4]
 4070 0012 1846     		mov	r0, r3
 4071 0014 0837     		adds	r7, r7, #8
 4072              	.LCFI380:
 4073              		.cfi_def_cfa_offset 8
 4074 0016 BD46     		mov	sp, r7
 4075              	.LCFI381:
 4076              		.cfi_def_cfa_register 13
 4077              		@ sp needed
 4078 0018 80BD     		pop	{r7, pc}
 4079              		.cfi_endproc
 4080              	.LFE4949:
 4082              		.weak	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC1Ev
 4083              		.thumb_set _ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC1Ev,_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev
 4084              		.section	.text._ZNSt14_Optional_baseIfLb1ELb1EEC2Ev,"axG",%progbits,_ZNSt14_Optional_baseIfLb1ELb1
 4085              		.align	1
 4086              		.weak	_ZNSt14_Optional_baseIfLb1ELb1EEC2Ev
 4087              		.syntax unified
 4088              		.thumb
 4089              		.thumb_func
 4090              		.fpu fpv4-sp-d16
 4092              	_ZNSt14_Optional_baseIfLb1ELb1EEC2Ev:
 4093              	.LFB4951:
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4094              		.loc 12 603 17
 4095              		.cfi_startproc
 4096              		@ args = 0, pretend = 0, frame = 8
 4097              		@ frame_needed = 1, uses_anonymous_args = 0
 4098 0000 80B5     		push	{r7, lr}
 4099              	.LCFI382:
 4100              		.cfi_def_cfa_offset 8
 4101              		.cfi_offset 7, -8
 4102              		.cfi_offset 14, -4
 4103 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccATuxCb.s 			page 212


 4104              	.LCFI383:
 4105              		.cfi_def_cfa_offset 16
 4106 0004 00AF     		add	r7, sp, #0
 4107              	.LCFI384:
 4108              		.cfi_def_cfa_register 7
 4109 0006 7860     		str	r0, [r7, #4]
 4110              	.LBB53:
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4111              		.loc 12 603 17
 4112 0008 7B68     		ldr	r3, [r7, #4]
 4113 000a 1846     		mov	r0, r3
 4114 000c FFF7FEFF 		bl	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC1Ev
 4115              	.LBE53:
 4116 0010 7B68     		ldr	r3, [r7, #4]
 4117 0012 1846     		mov	r0, r3
 4118 0014 0837     		adds	r7, r7, #8
 4119              	.LCFI385:
 4120              		.cfi_def_cfa_offset 8
 4121 0016 BD46     		mov	sp, r7
 4122              	.LCFI386:
 4123              		.cfi_def_cfa_register 13
 4124              		@ sp needed
 4125 0018 80BD     		pop	{r7, pc}
 4126              		.cfi_endproc
 4127              	.LFE4951:
 4129              		.weak	_ZNSt14_Optional_baseIfLb1ELb1EEC1Ev
 4130              		.thumb_set _ZNSt14_Optional_baseIfLb1ELb1EEC1Ev,_ZNSt14_Optional_baseIfLb1ELb1EEC2Ev
 4131              		.section	.text._ZNSt8optionalIfEC2Ev,"axG",%progbits,_ZNSt8optionalIfEC5Ev,comdat
 4132              		.align	1
 4133              		.weak	_ZNSt8optionalIfEC2Ev
 4134              		.syntax unified
 4135              		.thumb
 4136              		.thumb_func
 4137              		.fpu fpv4-sp-d16
 4139              	_ZNSt8optionalIfEC2Ev:
 4140              	.LFB4953:
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4141              		.loc 12 691 17
 4142              		.cfi_startproc
 4143              		@ args = 0, pretend = 0, frame = 8
 4144              		@ frame_needed = 1, uses_anonymous_args = 0
 4145 0000 80B5     		push	{r7, lr}
 4146              	.LCFI387:
 4147              		.cfi_def_cfa_offset 8
 4148              		.cfi_offset 7, -8
 4149              		.cfi_offset 14, -4
 4150 0002 82B0     		sub	sp, sp, #8
 4151              	.LCFI388:
 4152              		.cfi_def_cfa_offset 16
 4153 0004 00AF     		add	r7, sp, #0
 4154              	.LCFI389:
 4155              		.cfi_def_cfa_register 7
 4156 0006 7860     		str	r0, [r7, #4]
 4157              	.LBB54:
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4158              		.loc 12 691 17
 4159 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccATuxCb.s 			page 213


 4160 000a 1846     		mov	r0, r3
 4161 000c FFF7FEFF 		bl	_ZNSt14_Optional_baseIfLb1ELb1EEC2Ev
 4162              	.LBE54:
 4163 0010 7B68     		ldr	r3, [r7, #4]
 4164 0012 1846     		mov	r0, r3
 4165 0014 0837     		adds	r7, r7, #8
 4166              	.LCFI390:
 4167              		.cfi_def_cfa_offset 8
 4168 0016 BD46     		mov	sp, r7
 4169              	.LCFI391:
 4170              		.cfi_def_cfa_register 13
 4171              		@ sp needed
 4172 0018 80BD     		pop	{r7, pc}
 4173              		.cfi_endproc
 4174              	.LFE4953:
 4176              		.weak	_ZNSt8optionalIfEC1Ev
 4177              		.thumb_set _ZNSt8optionalIfEC1Ev,_ZNSt8optionalIfEC2Ev
 4178              		.section	.text._ZN23FieldOrientedControllerC2Ev,"axG",%progbits,_ZN23FieldOrientedControllerC5Ev,c
 4179              		.align	1
 4180              		.weak	_ZN23FieldOrientedControllerC2Ev
 4181              		.syntax unified
 4182              		.thumb
 4183              		.thumb_func
 4184              		.fpu fpv4-sp-d16
 4186              	_ZN23FieldOrientedControllerC2Ev:
 4187              	.LFB4955:
 4188              		.file 16 "Inc/foc.hpp"
   1:Inc/foc.hpp   **** #ifndef __FOC_HPP
   2:Inc/foc.hpp   **** #define __FOC_HPP
   3:Inc/foc.hpp   **** 
   4:Inc/foc.hpp   **** #include "user_int.hpp"
   5:Inc/foc.hpp   **** #include "interfaces.hpp"
   6:Inc/foc.hpp   **** #include <cstdint>  // Add this for uint32_t
   7:Inc/foc.hpp   **** #include "component.hpp"
   8:Inc/foc.hpp   **** #include "phase_control_law.hpp"
   9:Inc/foc.hpp   **** 
  10:Inc/foc.hpp   **** /**
  11:Inc/foc.hpp   ****  * @brief Field oriented controller.
  12:Inc/foc.hpp   ****  * 
  13:Inc/foc.hpp   ****  * This controller can run in either current control mode or voltage control
  14:Inc/foc.hpp   ****  * mode.
  15:Inc/foc.hpp   ****  */
  16:Inc/foc.hpp   **** class FieldOrientedController: public AlphaBetaFrameController, public ComponentBase {
 4189              		.loc 16 16 7
 4190              		.cfi_startproc
 4191              		@ args = 0, pretend = 0, frame = 8
 4192              		@ frame_needed = 1, uses_anonymous_args = 0
 4193 0000 80B5     		push	{r7, lr}
 4194              	.LCFI392:
 4195              		.cfi_def_cfa_offset 8
 4196              		.cfi_offset 7, -8
 4197              		.cfi_offset 14, -4
 4198 0002 82B0     		sub	sp, sp, #8
 4199              	.LCFI393:
 4200              		.cfi_def_cfa_offset 16
 4201 0004 00AF     		add	r7, sp, #0
 4202              	.LCFI394:
ARM GAS  /tmp/ccATuxCb.s 			page 214


 4203              		.cfi_def_cfa_register 7
 4204 0006 7860     		str	r0, [r7, #4]
 4205              	.LBB55:
 4206              		.loc 16 16 7
 4207 0008 7B68     		ldr	r3, [r7, #4]
 4208 000a 1846     		mov	r0, r3
 4209 000c FFF7FEFF 		bl	_ZN24AlphaBetaFrameControllerC2Ev
 4210 0010 7B68     		ldr	r3, [r7, #4]
 4211 0012 0433     		adds	r3, r3, #4
 4212 0014 1846     		mov	r0, r3
 4213 0016 FFF7FEFF 		bl	_ZN13ComponentBaseC2Ev
 4214 001a 384A     		ldr	r2, .L196
 4215 001c 7B68     		ldr	r3, [r7, #4]
 4216 001e 1A60     		str	r2, [r3]
 4217 0020 374A     		ldr	r2, .L196+4
 4218 0022 7B68     		ldr	r3, [r7, #4]
 4219 0024 5A60     		str	r2, [r3, #4]
 4220 0026 7B68     		ldr	r3, [r7, #4]
 4221 0028 0833     		adds	r3, r3, #8
 4222 002a 1846     		mov	r0, r3
 4223 002c FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEC1Ev
 4224 0030 7B68     		ldr	r3, [r7, #4]
 4225 0032 4FF07E52 		mov	r2, #1065353216
 4226 0036 5A61     		str	r2, [r3, #20]	@ float
 4227 0038 7B68     		ldr	r3, [r7, #4]
 4228 003a 0022     		movs	r2, #0
 4229 003c 1A76     		strb	r2, [r3, #24]
 4230 003e 7B68     		ldr	r3, [r7, #4]
 4231 0040 1C33     		adds	r3, r3, #28
 4232 0042 1846     		mov	r0, r3
 4233 0044 FFF7FEFF 		bl	_ZN9InputPortISt4pairIffEEC1Ev
 4234 0048 7B68     		ldr	r3, [r7, #4]
 4235 004a 2833     		adds	r3, r3, #40
 4236 004c 1846     		mov	r0, r3
 4237 004e FFF7FEFF 		bl	_ZN9InputPortISt4pairIffEEC1Ev
 4238 0052 7B68     		ldr	r3, [r7, #4]
 4239 0054 3433     		adds	r3, r3, #52
 4240 0056 1846     		mov	r0, r3
 4241 0058 FFF7FEFF 		bl	_ZN9InputPortIfEC1Ev
 4242 005c 7B68     		ldr	r3, [r7, #4]
 4243 005e 3C33     		adds	r3, r3, #60
 4244 0060 1846     		mov	r0, r3
 4245 0062 FFF7FEFF 		bl	_ZN9InputPortIfEC1Ev
 4246 0066 7B68     		ldr	r3, [r7, #4]
 4247 0068 0022     		movs	r2, #0
 4248 006a 83F84820 		strb	r2, [r3, #72]
 4249 006e 7B68     		ldr	r3, [r7, #4]
 4250 0070 4C33     		adds	r3, r3, #76
 4251 0072 1846     		mov	r0, r3
 4252 0074 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEC1Ev
 4253 0078 7B68     		ldr	r3, [r7, #4]
 4254 007a 5833     		adds	r3, r3, #88
 4255 007c 1846     		mov	r0, r3
 4256 007e FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEC1Ev
 4257 0082 7B68     		ldr	r3, [r7, #4]
 4258 0084 6433     		adds	r3, r3, #100
 4259 0086 1846     		mov	r0, r3
ARM GAS  /tmp/ccATuxCb.s 			page 215


 4260 0088 FFF7FEFF 		bl	_ZNSt8optionalIfEC1Ev
 4261 008c 7B68     		ldr	r3, [r7, #4]
 4262 008e 6C33     		adds	r3, r3, #108
 4263 0090 1846     		mov	r0, r3
 4264 0092 FFF7FEFF 		bl	_ZNSt8optionalIfEC1Ev
 4265 0096 7B68     		ldr	r3, [r7, #4]
 4266 0098 7833     		adds	r3, r3, #120
 4267 009a 1846     		mov	r0, r3
 4268 009c FFF7FEFF 		bl	_ZNSt8optionalIfEC1Ev
 4269 00a0 7B68     		ldr	r3, [r7, #4]
 4270 00a2 8033     		adds	r3, r3, #128
 4271 00a4 1846     		mov	r0, r3
 4272 00a6 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEC1Ev
 4273 00aa 7B68     		ldr	r3, [r7, #4]
 4274 00ac 4FF00002 		mov	r2, #0
 4275 00b0 C3F89420 		str	r2, [r3, #148]	@ float
 4276 00b4 7B68     		ldr	r3, [r7, #4]
 4277 00b6 4FF00002 		mov	r2, #0
 4278 00ba C3F89820 		str	r2, [r3, #152]	@ float
 4279 00be 7B68     		ldr	r3, [r7, #4]
 4280 00c0 4FF00002 		mov	r2, #0
 4281 00c4 C3F89C20 		str	r2, [r3, #156]	@ float
 4282 00c8 7B68     		ldr	r3, [r7, #4]
 4283 00ca 4FF00002 		mov	r2, #0
 4284 00ce C3F8A020 		str	r2, [r3, #160]	@ float
 4285 00d2 7B68     		ldr	r3, [r7, #4]
 4286 00d4 4FF00002 		mov	r2, #0
 4287 00d8 C3F8A420 		str	r2, [r3, #164]	@ float
 4288 00dc 7B68     		ldr	r3, [r7, #4]
 4289 00de 4FF00002 		mov	r2, #0
 4290 00e2 C3F8A820 		str	r2, [r3, #168]	@ float
 4291 00e6 7B68     		ldr	r3, [r7, #4]
 4292 00e8 4FF00002 		mov	r2, #0
 4293 00ec C3F8AC20 		str	r2, [r3, #172]	@ float
 4294              	.LBE55:
 4295 00f0 7B68     		ldr	r3, [r7, #4]
 4296 00f2 1846     		mov	r0, r3
 4297 00f4 0837     		adds	r7, r7, #8
 4298              	.LCFI395:
 4299              		.cfi_def_cfa_offset 8
 4300 00f6 BD46     		mov	sp, r7
 4301              	.LCFI396:
 4302              		.cfi_def_cfa_register 13
 4303              		@ sp needed
 4304 00f8 80BD     		pop	{r7, pc}
 4305              	.L197:
 4306 00fa 00BF     		.align	2
 4307              	.L196:
 4308 00fc 08000000 		.word	_ZTV23FieldOrientedController+8
 4309 0100 28000000 		.word	_ZTV23FieldOrientedController+40
 4310              		.cfi_endproc
 4311              	.LFE4955:
 4313              		.weak	_ZN23FieldOrientedControllerC1Ev
 4314              		.thumb_set _ZN23FieldOrientedControllerC1Ev,_ZN23FieldOrientedControllerC2Ev
 4315              		.section	.rodata
 4316 0042 0000     		.align	2
 4317              	.LC0:
ARM GAS  /tmp/ccATuxCb.s 			page 216


 4318 0044 4D08     		.short	2125
 4319 0046 4D08     		.short	2125
 4320 0048 4D08     		.short	2125
 4321              		.section	.text._ZN5MotorC2ERK21MotorHardwareConfig_tRNS_8Config_tE,"ax",%progbits
 4322              		.align	1
 4323              		.global	_ZN5MotorC2ERK21MotorHardwareConfig_tRNS_8Config_tE
 4324              		.syntax unified
 4325              		.thumb
 4326              		.thumb_func
 4327              		.fpu fpv4-sp-d16
 4329              	_ZN5MotorC2ERK21MotorHardwareConfig_tRNS_8Config_tE:
 4330              	.LFB4957:
 145:Src/motor.cpp **** 
 146:Src/motor.cpp ****     // Config
 147:Src/motor.cpp ****     float test_voltage_ = 0.0f;
 148:Src/motor.cpp **** 
 149:Src/motor.cpp ****     // State
 150:Src/motor.cpp ****     bool attached_ = false;
 151:Src/motor.cpp ****     float sign_ = 0;
 152:Src/motor.cpp **** 
 153:Src/motor.cpp ****     // Outputs
 154:Src/motor.cpp ****     uint32_t start_timestamp_ = 0;
 155:Src/motor.cpp ****     float last_Ialpha_ = NAN;
 156:Src/motor.cpp ****     uint32_t last_input_timestamp_ = 0;
 157:Src/motor.cpp ****     float deltaI_ = 0.0f;
 158:Src/motor.cpp **** };
 159:Src/motor.cpp **** 
 160:Src/motor.cpp **** 
 161:Src/motor.cpp **** 
 162:Src/motor.cpp **** 
 163:Src/motor.cpp **** Motor::Motor(const MotorHardwareConfig_t& hw_config,
 4331              		.loc 11 163 1
 4332              		.cfi_startproc
 4333              		@ args = 0, pretend = 0, frame = 48
 4334              		@ frame_needed = 1, uses_anonymous_args = 0
 4335 0000 90B5     		push	{r4, r7, lr}
 4336              	.LCFI397:
 4337              		.cfi_def_cfa_offset 12
 4338              		.cfi_offset 4, -12
 4339              		.cfi_offset 7, -8
 4340              		.cfi_offset 14, -4
 4341 0002 8DB0     		sub	sp, sp, #52
 4342              	.LCFI398:
 4343              		.cfi_def_cfa_offset 64
 4344 0004 00AF     		add	r7, sp, #0
 4345              	.LCFI399:
 4346              		.cfi_def_cfa_register 7
 4347 0006 F860     		str	r0, [r7, #12]
 4348 0008 B960     		str	r1, [r7, #8]
 4349 000a 7A60     		str	r2, [r7, #4]
 4350              	.LBB56:
 164:Src/motor.cpp ****              Config_t& config) :
 165:Src/motor.cpp ****         hw_config_(hw_config),
 166:Src/motor.cpp ****         config_(config)
 4351              		.loc 11 166 23
 4352 000c FB68     		ldr	r3, [r7, #12]
 4353 000e BA68     		ldr	r2, [r7, #8]
ARM GAS  /tmp/ccATuxCb.s 			page 217


 4354 0010 1A60     		str	r2, [r3]
 4355 0012 FB68     		ldr	r3, [r7, #12]
 4356 0014 7A68     		ldr	r2, [r7, #4]
 4357 0016 5A60     		str	r2, [r3, #4]
 4358 0018 FB68     		ldr	r3, [r7, #12]
 4359 001a 0022     		movs	r2, #0
 4360 001c 9A60     		str	r2, [r3, #8]
 4361 001e FB68     		ldr	r3, [r7, #12]
 4362 0020 B64A     		ldr	r2, .L200
 4363 0022 0C33     		adds	r3, r3, #12
 4364 0024 92E80300 		ldm	r2, {r0, r1}
 4365 0028 1860     		str	r0, [r3]
 4366 002a 0433     		adds	r3, r3, #4
 4367 002c 1980     		strh	r1, [r3]	@ movhi
 4368 002e FB68     		ldr	r3, [r7, #12]
 4369 0030 0022     		movs	r2, #0
 4370 0032 9A74     		strb	r2, [r3, #18]
 4371 0034 FB68     		ldr	r3, [r7, #12]
 4372 0036 0022     		movs	r2, #0
 4373 0038 9A82     		strh	r2, [r3, #20]	@ movhi
 4374 003a FB68     		ldr	r3, [r7, #12]
 4375 003c 0022     		movs	r2, #0
 4376 003e 9A61     		str	r2, [r3, #24]
 4377 0040 FB68     		ldr	r3, [r7, #12]
 4378 0042 0022     		movs	r2, #0
 4379 0044 5A63     		str	r2, [r3, #52]
 4380 0046 FB68     		ldr	r3, [r7, #12]
 4381 0048 0022     		movs	r2, #0
 4382 004a 83F83820 		strb	r2, [r3, #56]
 4383 004e FB68     		ldr	r3, [r7, #12]
 4384 0050 0022     		movs	r2, #0
 4385 0052 83F83920 		strb	r2, [r3, #57]
 4386 0056 FB68     		ldr	r3, [r7, #12]
 4387 0058 5B68     		ldr	r3, [r3, #4]
 4388 005a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4389 005c FB68     		ldr	r3, [r7, #12]
 4390 005e 83F83A20 		strb	r2, [r3, #58]
 4391 0062 FB68     		ldr	r3, [r7, #12]
 4392 0064 4FF00002 		mov	r2, #0
 4393 0068 9A64     		str	r2, [r3, #72]	@ float
 4394 006a FB68     		ldr	r3, [r7, #12]
 4395 006c 4FF00002 		mov	r2, #0
 4396 0070 DA64     		str	r2, [r3, #76]	@ float
 4397 0072 FB68     		ldr	r3, [r7, #12]
 4398 0074 4FF00002 		mov	r2, #0
 4399 0078 1A65     		str	r2, [r3, #80]	@ float
 4400 007a FB68     		ldr	r3, [r7, #12]
 4401 007c 4FF00002 		mov	r2, #0
 4402 0080 5A65     		str	r2, [r3, #84]	@ float
 4403 0082 FB68     		ldr	r3, [r7, #12]
 4404 0084 5833     		adds	r3, r3, #88
 4405 0086 4C22     		movs	r2, #76
 4406 0088 0021     		movs	r1, #0
 4407 008a 1846     		mov	r0, r3
 4408 008c FFF7FEFF 		bl	memset
 4409 0090 FB68     		ldr	r3, [r7, #12]
 4410 0092 4FF07E52 		mov	r2, #1065353216
ARM GAS  /tmp/ccATuxCb.s 			page 218


 4411 0096 C3F88C20 		str	r2, [r3, #140]	@ float
 4412 009a FB68     		ldr	r3, [r7, #12]
 4413 009c 984A     		ldr	r2, .L200+4
 4414 009e C3F8A420 		str	r2, [r3, #164]	@ float
 4415 00a2 FB68     		ldr	r3, [r7, #12]
 4416 00a4 0022     		movs	r2, #0
 4417 00a6 83F8A820 		strb	r2, [r3, #168]
 4418 00aa FB68     		ldr	r3, [r7, #12]
 4419 00ac 0022     		movs	r2, #0
 4420 00ae C3F8AC20 		str	r2, [r3, #172]
 4421 00b2 FB68     		ldr	r3, [r7, #12]
 4422 00b4 4FF00002 		mov	r2, #0
 4423 00b8 C3F8B020 		str	r2, [r3, #176]	@ float
 4424 00bc FB68     		ldr	r3, [r7, #12]
 4425 00be 4FF00002 		mov	r2, #0
 4426 00c2 C3F8B420 		str	r2, [r3, #180]	@ float
 4427 00c6 FB68     		ldr	r3, [r7, #12]
 4428 00c8 4FF00002 		mov	r2, #0
 4429 00cc C3F8B820 		str	r2, [r3, #184]	@ float
 4430 00d0 FB68     		ldr	r3, [r7, #12]
 4431 00d2 4FF00002 		mov	r2, #0
 4432 00d6 C3F8BC20 		str	r2, [r3, #188]	@ float
 4433 00da FB68     		ldr	r3, [r7, #12]
 4434 00dc 4FF00002 		mov	r2, #0
 4435 00e0 C3F8C020 		str	r2, [r3, #192]	@ float
 4436 00e4 FB68     		ldr	r3, [r7, #12]
 4437 00e6 874A     		ldr	r2, .L200+8
 4438 00e8 C3F8C420 		str	r2, [r3, #196]	@ float
 4439 00ec FB68     		ldr	r3, [r7, #12]
 4440 00ee 864A     		ldr	r2, .L200+12
 4441 00f0 C3F8C820 		str	r2, [r3, #200]	@ float
 4442 00f4 FB68     		ldr	r3, [r7, #12]
 4443 00f6 0122     		movs	r2, #1
 4444 00f8 83F8CC20 		strb	r2, [r3, #204]
 4445 00fc FB68     		ldr	r3, [r7, #12]
 4446 00fe D033     		adds	r3, r3, #208
 4447 0100 F022     		movs	r2, #240
 4448 0102 0021     		movs	r1, #0
 4449 0104 1846     		mov	r0, r3
 4450 0106 FFF7FEFF 		bl	memset
 4451 010a FB68     		ldr	r3, [r7, #12]
 4452 010c 7F4A     		ldr	r2, .L200+16
 4453 010e C3F8D020 		str	r2, [r3, #208]	@ float
 4454 0112 FB68     		ldr	r3, [r7, #12]
 4455 0114 7D4A     		ldr	r2, .L200+16
 4456 0116 C3F8D420 		str	r2, [r3, #212]	@ float
 4457 011a FB68     		ldr	r3, [r7, #12]
 4458 011c 7B4A     		ldr	r2, .L200+16
 4459 011e C3F8D820 		str	r2, [r3, #216]	@ float
 4460 0122 FB68     		ldr	r3, [r7, #12]
 4461 0124 794A     		ldr	r2, .L200+16
 4462 0126 C3F8DC20 		str	r2, [r3, #220]	@ float
 4463 012a FB68     		ldr	r3, [r7, #12]
 4464 012c 774A     		ldr	r2, .L200+16
 4465 012e C3F8E020 		str	r2, [r3, #224]	@ float
 4466 0132 FB68     		ldr	r3, [r7, #12]
 4467 0134 754A     		ldr	r2, .L200+16
ARM GAS  /tmp/ccATuxCb.s 			page 219


 4468 0136 C3F8E420 		str	r2, [r3, #228]	@ float
 4469 013a FB68     		ldr	r3, [r7, #12]
 4470 013c 734A     		ldr	r2, .L200+16
 4471 013e C3F8E820 		str	r2, [r3, #232]	@ float
 4472 0142 FB68     		ldr	r3, [r7, #12]
 4473 0144 714A     		ldr	r2, .L200+16
 4474 0146 C3F8EC20 		str	r2, [r3, #236]	@ float
 4475 014a FB68     		ldr	r3, [r7, #12]
 4476 014c 6F4A     		ldr	r2, .L200+16
 4477 014e C3F8F020 		str	r2, [r3, #240]	@ float
 4478 0152 FB68     		ldr	r3, [r7, #12]
 4479 0154 6D4A     		ldr	r2, .L200+16
 4480 0156 C3F8F420 		str	r2, [r3, #244]	@ float
 4481 015a FB68     		ldr	r3, [r7, #12]
 4482 015c 6B4A     		ldr	r2, .L200+16
 4483 015e C3F8F820 		str	r2, [r3, #248]	@ float
 4484 0162 FB68     		ldr	r3, [r7, #12]
 4485 0164 694A     		ldr	r2, .L200+16
 4486 0166 C3F8FC20 		str	r2, [r3, #252]	@ float
 4487 016a FB68     		ldr	r3, [r7, #12]
 4488 016c 674A     		ldr	r2, .L200+16
 4489 016e C3F80021 		str	r2, [r3, #256]	@ float
 4490 0172 FB68     		ldr	r3, [r7, #12]
 4491 0174 654A     		ldr	r2, .L200+16
 4492 0176 C3F80421 		str	r2, [r3, #260]	@ float
 4493 017a FB68     		ldr	r3, [r7, #12]
 4494 017c 634A     		ldr	r2, .L200+16
 4495 017e C3F80821 		str	r2, [r3, #264]	@ float
 4496 0182 FB68     		ldr	r3, [r7, #12]
 4497 0184 614A     		ldr	r2, .L200+16
 4498 0186 C3F80C21 		str	r2, [r3, #268]	@ float
 4499 018a FB68     		ldr	r3, [r7, #12]
 4500 018c 5F4A     		ldr	r2, .L200+16
 4501 018e C3F81021 		str	r2, [r3, #272]	@ float
 4502 0192 FB68     		ldr	r3, [r7, #12]
 4503 0194 5D4A     		ldr	r2, .L200+16
 4504 0196 C3F81421 		str	r2, [r3, #276]	@ float
 4505 019a FB68     		ldr	r3, [r7, #12]
 4506 019c 5B4A     		ldr	r2, .L200+16
 4507 019e C3F81821 		str	r2, [r3, #280]	@ float
 4508 01a2 FB68     		ldr	r3, [r7, #12]
 4509 01a4 594A     		ldr	r2, .L200+16
 4510 01a6 C3F81C21 		str	r2, [r3, #284]	@ float
 4511 01aa FB68     		ldr	r3, [r7, #12]
 4512 01ac 03F5E073 		add	r3, r3, #448
 4513 01b0 F022     		movs	r2, #240
 4514 01b2 0021     		movs	r1, #0
 4515 01b4 1846     		mov	r0, r3
 4516 01b6 FFF7FEFF 		bl	memset
 4517 01ba FB68     		ldr	r3, [r7, #12]
 4518 01bc 534A     		ldr	r2, .L200+16
 4519 01be C3F8C021 		str	r2, [r3, #448]	@ float
 4520 01c2 FB68     		ldr	r3, [r7, #12]
 4521 01c4 514A     		ldr	r2, .L200+16
 4522 01c6 C3F8C421 		str	r2, [r3, #452]	@ float
 4523 01ca FB68     		ldr	r3, [r7, #12]
 4524 01cc 4F4A     		ldr	r2, .L200+16
ARM GAS  /tmp/ccATuxCb.s 			page 220


 4525 01ce C3F8C821 		str	r2, [r3, #456]	@ float
 4526 01d2 FB68     		ldr	r3, [r7, #12]
 4527 01d4 4D4A     		ldr	r2, .L200+16
 4528 01d6 C3F8CC21 		str	r2, [r3, #460]	@ float
 4529 01da FB68     		ldr	r3, [r7, #12]
 4530 01dc 4B4A     		ldr	r2, .L200+16
 4531 01de C3F8D021 		str	r2, [r3, #464]	@ float
 4532 01e2 FB68     		ldr	r3, [r7, #12]
 4533 01e4 494A     		ldr	r2, .L200+16
 4534 01e6 C3F8D421 		str	r2, [r3, #468]	@ float
 4535 01ea FB68     		ldr	r3, [r7, #12]
 4536 01ec 474A     		ldr	r2, .L200+16
 4537 01ee C3F8D821 		str	r2, [r3, #472]	@ float
 4538 01f2 FB68     		ldr	r3, [r7, #12]
 4539 01f4 454A     		ldr	r2, .L200+16
 4540 01f6 C3F8DC21 		str	r2, [r3, #476]	@ float
 4541 01fa FB68     		ldr	r3, [r7, #12]
 4542 01fc 434A     		ldr	r2, .L200+16
 4543 01fe C3F8E021 		str	r2, [r3, #480]	@ float
 4544 0202 FB68     		ldr	r3, [r7, #12]
 4545 0204 414A     		ldr	r2, .L200+16
 4546 0206 C3F8E421 		str	r2, [r3, #484]	@ float
 4547 020a FB68     		ldr	r3, [r7, #12]
 4548 020c 3F4A     		ldr	r2, .L200+16
 4549 020e C3F8E821 		str	r2, [r3, #488]	@ float
 4550 0212 FB68     		ldr	r3, [r7, #12]
 4551 0214 3D4A     		ldr	r2, .L200+16
 4552 0216 C3F8EC21 		str	r2, [r3, #492]	@ float
 4553 021a FB68     		ldr	r3, [r7, #12]
 4554 021c 3B4A     		ldr	r2, .L200+16
 4555 021e C3F8F021 		str	r2, [r3, #496]	@ float
 4556 0222 FB68     		ldr	r3, [r7, #12]
 4557 0224 394A     		ldr	r2, .L200+16
 4558 0226 C3F8F421 		str	r2, [r3, #500]	@ float
 4559 022a FB68     		ldr	r3, [r7, #12]
 4560 022c 374A     		ldr	r2, .L200+16
 4561 022e C3F8F821 		str	r2, [r3, #504]	@ float
 4562 0232 FB68     		ldr	r3, [r7, #12]
 4563 0234 354A     		ldr	r2, .L200+16
 4564 0236 C3F8FC21 		str	r2, [r3, #508]	@ float
 4565 023a FB68     		ldr	r3, [r7, #12]
 4566 023c 334A     		ldr	r2, .L200+16
 4567 023e C3F80022 		str	r2, [r3, #512]	@ float
 4568 0242 FB68     		ldr	r3, [r7, #12]
 4569 0244 314A     		ldr	r2, .L200+16
 4570 0246 C3F80422 		str	r2, [r3, #516]	@ float
 4571 024a FB68     		ldr	r3, [r7, #12]
 4572 024c 2F4A     		ldr	r2, .L200+16
 4573 024e C3F80822 		str	r2, [r3, #520]	@ float
 4574 0252 FB68     		ldr	r3, [r7, #12]
 4575 0254 2D4A     		ldr	r2, .L200+16
 4576 0256 C3F80C22 		str	r2, [r3, #524]	@ float
 4577 025a FB68     		ldr	r3, [r7, #12]
 4578 025c 4FF00002 		mov	r2, #0
 4579 0260 C3F8C822 		str	r2, [r3, #712]	@ float
 4580 0264 FB68     		ldr	r3, [r7, #12]
 4581 0266 0022     		movs	r2, #0
ARM GAS  /tmp/ccATuxCb.s 			page 221


 4582 0268 A3F8CC22 		strh	r2, [r3, #716]	@ movhi
 4583 026c FB68     		ldr	r3, [r7, #12]
 4584 026e 0022     		movs	r2, #0
 4585 0270 A3F8CE22 		strh	r2, [r3, #718]	@ movhi
 4586 0274 FB68     		ldr	r3, [r7, #12]
 4587 0276 0022     		movs	r2, #0
 4588 0278 A3F8D022 		strh	r2, [r3, #720]	@ movhi
 4589 027c FB68     		ldr	r3, [r7, #12]
 4590 027e 4FF00002 		mov	r2, #0
 4591 0282 C3F8D422 		str	r2, [r3, #724]	@ float
 4592 0286 FB68     		ldr	r3, [r7, #12]
 4593 0288 4FF00002 		mov	r2, #0
 4594 028c C3F8D822 		str	r2, [r3, #728]	@ float
 4595 0290 FB68     		ldr	r3, [r7, #12]
 4596 0292 1F4A     		ldr	r2, .L200+20
 4597 0294 C3F8DC22 		str	r2, [r3, #732]	@ float
 4598 0298 FB68     		ldr	r3, [r7, #12]
 4599 029a 1E4A     		ldr	r2, .L200+24
 4600 029c C3F8E022 		str	r2, [r3, #736]	@ float
 4601 02a0 FB68     		ldr	r3, [r7, #12]
 4602 02a2 174A     		ldr	r2, .L200+4
 4603 02a4 C3F8E422 		str	r2, [r3, #740]	@ float
 4604 02a8 FB68     		ldr	r3, [r7, #12]
 4605 02aa 0022     		movs	r2, #0
 4606 02ac C3F8E822 		str	r2, [r3, #744]
 4607 02b0 FB68     		ldr	r3, [r7, #12]
 4608 02b2 4FF00002 		mov	r2, #0
 4609 02b6 C3F8EC22 		str	r2, [r3, #748]	@ float
 4610 02ba FB68     		ldr	r3, [r7, #12]
 4611 02bc 4FF00002 		mov	r2, #0
 4612 02c0 C3F8F022 		str	r2, [r3, #752]	@ float
 4613 02c4 FB68     		ldr	r3, [r7, #12]
 4614 02c6 4FF00002 		mov	r2, #0
 4615 02ca C3F8F422 		str	r2, [r3, #756]	@ float
 4616 02ce FB68     		ldr	r3, [r7, #12]
 4617 02d0 4FF00002 		mov	r2, #0
 4618 02d4 C3F8F822 		str	r2, [r3, #760]	@ float
 4619 02d8 FB68     		ldr	r3, [r7, #12]
 4620 02da 03F53F73 		add	r3, r3, #764
 4621 02de 1846     		mov	r0, r3
 4622 02e0 FFF7FEFF 		bl	_ZN23FieldOrientedControllerC1Ev
 4623 02e4 FB68     		ldr	r3, [r7, #12]
 4624 02e6 0022     		movs	r2, #0
 4625 02e8 C3F8AC23 		str	r2, [r3, #940]
 4626 02ec FB68     		ldr	r3, [r7, #12]
 4627 02ee 03F56C73 		add	r3, r3, #944
 4628 02f2 1846     		mov	r0, r3
 4629 02f4 FFF7FEFF 		bl	_ZN9InputPortIfEC1Ev
 4630 02f8 FB68     		ldr	r3, [r7, #12]
 4631 02fa 0DE0     		b	.L201
 4632              	.L202:
 4633              		.align	2
 4634              	.L200:
 4635 02fc 44000000 		.word	.LC0
 4636 0300 00002041 		.word	1092616192
 4637 0304 CDCCCC3E 		.word	1053609165
 4638 0308 0AD7233C 		.word	1008981770
ARM GAS  /tmp/ccATuxCb.s 			page 222


 4639 030c 00002040 		.word	1075838976
 4640 0310 00409C46 		.word	1184645120
 4641 0314 00004842 		.word	1112014848
 4642              	.L201:
 4643 0318 03F56E73 		add	r3, r3, #952
 4644 031c 1846     		mov	r0, r3
 4645 031e FFF7FEFF 		bl	_ZN9InputPortIfEC1Ev
 4646 0322 FB68     		ldr	r3, [r7, #12]
 4647 0324 4FF00002 		mov	r2, #0
 4648 0328 C3F8C023 		str	r2, [r3, #960]	@ float
 4649 032c FB68     		ldr	r3, [r7, #12]
 4650 032e 03F57174 		add	r4, r3, #964
 173:Inc/motor.hpp ****         uint16_t& get(size_t idx) { return content[idx]; }
 174:Inc/motor.hpp ****         uint16_t content[ODriveIntf::TIMING_LOG_NUM_SLOTS];
 175:Inc/motor.hpp ****     } timing_log_;
 176:Inc/motor.hpp **** 
 177:Inc/motor.hpp ****     
 178:Inc/motor.hpp ****     // variables exposed on protocol
 179:Inc/motor.hpp ****     ODriveIntf::MotorIntf::Error error_ = ODriveIntf::MotorIntf::ERROR_NONE;
 180:Inc/motor.hpp ****     // Do not write to this variable directly!
 181:Inc/motor.hpp ****     // It is for exclusive use by the safety_critical_... functions.
 182:Inc/motor.hpp ****     bool is_armed_ = false;
 183:Inc/motor.hpp ****     ArmedState armed_state_ = ARMED_STATE_DISARMED; 
 184:Inc/motor.hpp ****     bool is_calibrated_ = config_.pre_calibrated;
 185:Inc/motor.hpp ****     Iph_BC_t current_meas_ ;
 186:Inc/motor.hpp ****     Iph_BC_t DC_calib_ = {0.0f,0.0f, 0.0f};
 187:Inc/motor.hpp ****     float phase_current_rev_gain_ = 0.0f; // Reverse gain for ADC to Amps (to be set by DRV8301_set
 188:Inc/motor.hpp ****     CurrentControl_t current_control1_ = {
 189:Inc/motor.hpp ****         .p_gain = 0.0f,        // [V/A] should be auto set after resistance and inductance measurem
 190:Inc/motor.hpp ****         .i_gain = 0.0f,        // [V/As] should be auto set after resistance and inductance measure
 191:Inc/motor.hpp ****         .v_current_control_integral_d = 0.0f,
 192:Inc/motor.hpp ****         .v_current_control_integral_q = 0.0f,
 193:Inc/motor.hpp ****         .Ibus = 0.0f,
 194:Inc/motor.hpp ****         .final_v_alpha = 0.0f,
 195:Inc/motor.hpp ****         .final_v_beta = 0.0f,
 196:Inc/motor.hpp ****         .final_v_d = 0.0f,
 197:Inc/motor.hpp ****         .final_v_q = 0.0f,
 198:Inc/motor.hpp ****         .Id_setpoint = 0.0f,
 199:Inc/motor.hpp ****         .Iq_setpoint = 0.0f,
 200:Inc/motor.hpp ****         .Iq_measured = 0.0f,
 201:Inc/motor.hpp ****         .Id_measured = 0.0f,
 202:Inc/motor.hpp ****         .I_measured_report_filter_k = 1.0f,
 203:Inc/motor.hpp ****         .max_allowed_current = 0.0f,
 204:Inc/motor.hpp ****         .overcurrent_trip_level = 0.0f,
 205:Inc/motor.hpp ****         .acim_rotor_flux = 0.0f,
 206:Inc/motor.hpp ****         .async_phase_vel = 0.0f,
 207:Inc/motor.hpp ****         .async_phase_offset = 0.0f,
 208:Inc/motor.hpp ****     };
 209:Inc/motor.hpp **** 
 210:Inc/motor.hpp ****     float effective_current_lim_ = 10.0f;
 211:Inc/motor.hpp ****     bool capturing_ = false;
 212:Inc/motor.hpp ****     int32_t oscilloscope_div = 0;
 213:Inc/motor.hpp ****     float  m_speed_est_fast =0;
 214:Inc/motor.hpp ****     float Iq_filter = 0;
 215:Inc/motor.hpp ****     float Id_filter = 0;
 216:Inc/motor.hpp ****     float Iq_filter2 = 0;
 217:Inc/motor.hpp ****     float Id_filter2 = 0;
ARM GAS  /tmp/ccATuxCb.s 			page 223


 218:Inc/motor.hpp ****     float Idq_filter_k_ = 0.4f;
 219:Inc/motor.hpp ****     float Idq_filter_k2_ = 0.01f;
 220:Inc/motor.hpp ****     bool using_old_torque_constant_ = true;
 221:Inc/motor.hpp ****     float L_Slop_Array_P_[NUM_LINEARITY_SEG] = {2.5f,2.5f,2.5f,2.5f,2.5f,2.5f,2.5f,2.5f,2.5f,2.5f,2
 222:Inc/motor.hpp ****     float L_Slop_Array_N_[NUM_LINEARITY_SEG] = {2.5f,2.5f,2.5f,2.5f,2.5f,2.5f,2.5f,2.5f,2.5f,2.5f,2
 223:Inc/motor.hpp ****     int32_t sign_a_, sign_b_, sign_c_;
 224:Inc/motor.hpp ****     float total_phase_for_abc_sign_calculation_;
 225:Inc/motor.hpp ****     float I_phase_;
 226:Inc/motor.hpp ****     float I_phase2_;
 227:Inc/motor.hpp ****     float deadtime_compensation_coff_ = 0.0f;
 228:Inc/motor.hpp ****     int16_t Aphase_deadtime_compensation_ = 0;
 229:Inc/motor.hpp ****     int16_t Bphase_deadtime_compensation_ = 0;
 230:Inc/motor.hpp ****     int16_t Cphase_deadtime_compensation_ = 0;
 231:Inc/motor.hpp ****     float torque_setpoint_filterd_ = 0;
 232:Inc/motor.hpp ****     float torque_setpoint_notch_filterd_ = 0;
 233:Inc/motor.hpp **** 
 234:Inc/motor.hpp ****     float notch_filter_sample_rate_ = 20000.f;
 235:Inc/motor.hpp ****     float notch_filter_frequency_ = 50.f;
 236:Inc/motor.hpp ****     float notch_filter_bandwidth_ = 10.f;  
 237:Inc/motor.hpp ****     uint32_t notch_filter_enable_ = 0;
 238:Inc/motor.hpp **** 
 239:Inc/motor.hpp ****     float dec_bemf_ = 0;
 240:Inc/motor.hpp **** 
 241:Inc/motor.hpp ****     float I_bus_ = 0.0f; // this motors contribution to the bus current
 242:Inc/motor.hpp ****     float max_allowed_current_ = 0.0f; // [A] set in setup()
 243:Inc/motor.hpp ****     float max_dc_calib_ = 0.0f; // [A] set in setup()
 244:Inc/motor.hpp **** 
 245:Inc/motor.hpp **** 
 246:Inc/motor.hpp ****     FieldOrientedController current_control_;
 247:Inc/motor.hpp ****     PhaseControlLaw<3>* control_law_ = nullptr;
 248:Inc/motor.hpp **** 
 249:Inc/motor.hpp ****     InputPort<float> torque_setpoint_src_; // Usually points to the Controller object's output
 250:Inc/motor.hpp ****     InputPort<float> phase_vel_src_; // Usually points to the Encoder object's output
 251:Inc/motor.hpp ****     float direction_ = 0.0f; // if -1 then positive torque is converted to negative Iq
 252:Inc/motor.hpp **** 
 253:Inc/motor.hpp ****     OutputPort<float2D> Vdq_setpoint_ = {{0.0f, 0.0f}}; // fed to the FOC
 4651              		.loc 5 253 43
 4652 0332 4FF00003 		mov	r3, #0
 4653              		.loc 11 166 23
 4654 0336 BB61     		str	r3, [r7, #24]	@ float
 4655              		.loc 5 253 49
 4656 0338 4FF00003 		mov	r3, #0
 4657              		.loc 11 166 23
 4658 033c FB61     		str	r3, [r7, #28]	@ float
 4659 033e 07F11C02 		add	r2, r7, #28
 4660 0342 07F11801 		add	r1, r7, #24
 4661 0346 07F11003 		add	r3, r7, #16
 4662 034a 1846     		mov	r0, r3
 4663 034c FFF7FEFF 		bl	_ZNSt4pairIffEC1IffLb1EEEOT_OT0_
 4664 0350 97ED047A 		vldr.32	s14, [r7, #16]
 4665 0354 D7ED057A 		vldr.32	s15, [r7, #20]
 4666 0358 B0EE470A 		vmov.f32	s0, s14
 4667 035c F0EE670A 		vmov.f32	s1, s15
 4668 0360 2046     		mov	r0, r4
 4669 0362 FFF7FEFF 		bl	_ZN10OutputPortISt4pairIffEEC1ES1_
 4670 0366 FB68     		ldr	r3, [r7, #12]
 4671 0368 03F57474 		add	r4, r3, #976
ARM GAS  /tmp/ccATuxCb.s 			page 224


 254:Inc/motor.hpp ****     OutputPort<float2D> Idq_setpoint_ = {{0.0f, 0.0f}}; // fed to the FOC
 4672              		.loc 5 254 43
 4673 036c 4FF00003 		mov	r3, #0
 4674              		.loc 11 166 23
 4675 0370 BB62     		str	r3, [r7, #40]	@ float
 4676              		.loc 5 254 49
 4677 0372 4FF00003 		mov	r3, #0
 4678              		.loc 11 166 23
 4679 0376 FB62     		str	r3, [r7, #44]	@ float
 4680 0378 07F12C02 		add	r2, r7, #44
 4681 037c 07F12801 		add	r1, r7, #40
 4682 0380 07F12003 		add	r3, r7, #32
 4683 0384 1846     		mov	r0, r3
 4684 0386 FFF7FEFF 		bl	_ZNSt4pairIffEC1IffLb1EEEOT_OT0_
 4685 038a 97ED087A 		vldr.32	s14, [r7, #32]
 4686 038e D7ED097A 		vldr.32	s15, [r7, #36]
 4687 0392 B0EE470A 		vmov.f32	s0, s14
 4688 0396 F0EE670A 		vmov.f32	s1, s15
 4689 039a 2046     		mov	r0, r4
 4690 039c FFF7FEFF 		bl	_ZN10OutputPortISt4pairIffEEC1ES1_
 167:Src/motor.cpp ****         {
 168:Src/motor.cpp ****     update_current_controller_gains();
 4691              		.loc 11 168 36
 4692 03a0 F868     		ldr	r0, [r7, #12]
 4693 03a2 FFF7FEFF 		bl	_ZN5Motor31update_current_controller_gainsEv
 4694              	.LBE56:
 169:Src/motor.cpp **** }
 4695              		.loc 11 169 1
 4696 03a6 FB68     		ldr	r3, [r7, #12]
 4697 03a8 1846     		mov	r0, r3
 4698 03aa 3437     		adds	r7, r7, #52
 4699              	.LCFI400:
 4700              		.cfi_def_cfa_offset 12
 4701 03ac BD46     		mov	sp, r7
 4702              	.LCFI401:
 4703              		.cfi_def_cfa_register 13
 4704              		@ sp needed
 4705 03ae 90BD     		pop	{r4, r7, pc}
 4706              		.cfi_endproc
 4707              	.LFE4957:
 4709              		.global	_ZN5MotorC1ERK21MotorHardwareConfig_tRNS_8Config_tE
 4710              		.thumb_set _ZN5MotorC1ERK21MotorHardwareConfig_tRNS_8Config_tE,_ZN5MotorC2ERK21MotorHardwareConfig
 4711              		.section	.text._ZN5Motor17apply_pwm_timingsEPtb,"ax",%progbits
 4712              		.align	1
 4713              		.global	_ZN5Motor17apply_pwm_timingsEPtb
 4714              		.syntax unified
 4715              		.thumb
 4716              		.thumb_func
 4717              		.fpu fpv4-sp-d16
 4719              	_ZN5Motor17apply_pwm_timingsEPtb:
 4720              	.LFB4959:
 170:Src/motor.cpp **** 
 171:Src/motor.cpp **** 
 172:Src/motor.cpp **** /**
 173:Src/motor.cpp ****  * @brief Updates the phase PWM timings unless the motor is disarmed.
 174:Src/motor.cpp ****  *
 175:Src/motor.cpp ****  * If the motor is armed, the PWM timings come into effect at the next update
ARM GAS  /tmp/ccATuxCb.s 			page 225


 176:Src/motor.cpp ****  * event (and are enabled if they weren't already), unless the motor is disarmed
 177:Src/motor.cpp ****  * prior to that.
 178:Src/motor.cpp ****  * 
 179:Src/motor.cpp ****  * @param tentative: If true, the update is not counted as "refresh".
 180:Src/motor.cpp ****  */
 181:Src/motor.cpp **** void Motor::apply_pwm_timings(uint16_t timings[3], bool tentative) {
 4721              		.loc 11 181 68
 4722              		.cfi_startproc
 4723              		@ args = 0, pretend = 0, frame = 16
 4724              		@ frame_needed = 1, uses_anonymous_args = 0
 4725 0000 80B5     		push	{r7, lr}
 4726              	.LCFI402:
 4727              		.cfi_def_cfa_offset 8
 4728              		.cfi_offset 7, -8
 4729              		.cfi_offset 14, -4
 4730 0002 84B0     		sub	sp, sp, #16
 4731              	.LCFI403:
 4732              		.cfi_def_cfa_offset 24
 4733 0004 00AF     		add	r7, sp, #0
 4734              	.LCFI404:
 4735              		.cfi_def_cfa_register 7
 4736 0006 F860     		str	r0, [r7, #12]
 4737 0008 B960     		str	r1, [r7, #8]
 4738 000a 1346     		mov	r3, r2
 4739 000c FB71     		strb	r3, [r7, #7]
 182:Src/motor.cpp **** 
 183:Src/motor.cpp ****     (void)tentative;
 184:Src/motor.cpp ****     hw_config_.timer->Instance->CCR1 = timings[0];
 4740              		.loc 11 184 49
 4741 000e BB68     		ldr	r3, [r7, #8]
 4742 0010 1A88     		ldrh	r2, [r3]
 4743              		.loc 11 184 5
 4744 0012 FB68     		ldr	r3, [r7, #12]
 4745 0014 1B68     		ldr	r3, [r3]
 4746              		.loc 11 184 16
 4747 0016 1B68     		ldr	r3, [r3]
 4748              		.loc 11 184 23
 4749 0018 1B68     		ldr	r3, [r3]
 4750              		.loc 11 184 38
 4751 001a 5A63     		str	r2, [r3, #52]
 185:Src/motor.cpp ****     hw_config_.timer->Instance->CCR2 = timings[1];
 4752              		.loc 11 185 49
 4753 001c BB68     		ldr	r3, [r7, #8]
 4754 001e 0233     		adds	r3, r3, #2
 4755 0020 1A88     		ldrh	r2, [r3]
 4756              		.loc 11 185 5
 4757 0022 FB68     		ldr	r3, [r7, #12]
 4758 0024 1B68     		ldr	r3, [r3]
 4759              		.loc 11 185 16
 4760 0026 1B68     		ldr	r3, [r3]
 4761              		.loc 11 185 23
 4762 0028 1B68     		ldr	r3, [r3]
 4763              		.loc 11 185 38
 4764 002a 9A63     		str	r2, [r3, #56]
 186:Src/motor.cpp ****     hw_config_.timer->Instance->CCR3 = timings[2];
 4765              		.loc 11 186 49
 4766 002c BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccATuxCb.s 			page 226


 4767 002e 0433     		adds	r3, r3, #4
 4768 0030 1A88     		ldrh	r2, [r3]
 4769              		.loc 11 186 5
 4770 0032 FB68     		ldr	r3, [r7, #12]
 4771 0034 1B68     		ldr	r3, [r3]
 4772              		.loc 11 186 16
 4773 0036 1B68     		ldr	r3, [r3]
 4774              		.loc 11 186 23
 4775 0038 1B68     		ldr	r3, [r3]
 4776              		.loc 11 186 38
 4777 003a DA63     		str	r2, [r3, #60]
 187:Src/motor.cpp **** 
 188:Src/motor.cpp ****     if (armed_state_ == ARMED_STATE_WAITING_FOR_TIMINGS) {
 4778              		.loc 11 188 9
 4779 003c FB68     		ldr	r3, [r7, #12]
 4780 003e 93F83930 		ldrb	r3, [r3, #57]	@ zero_extendqisi2
 4781              		.loc 11 188 5
 4782 0042 012B     		cmp	r3, #1
 4783 0044 04D1     		bne	.L204
 189:Src/motor.cpp ****         // timings were just loaded into the timer registers
 190:Src/motor.cpp ****         // the timer register are buffered, so they won't have an effect
 191:Src/motor.cpp ****         // on the output just yet so we need to wait until the next
 192:Src/motor.cpp ****         // interrupt before we actually enable the output
 193:Src/motor.cpp ****         armed_state_ = ARMED_STATE_WAITING_FOR_UPDATE;
 4784              		.loc 11 193 22
 4785 0046 FB68     		ldr	r3, [r7, #12]
 4786 0048 0222     		movs	r2, #2
 4787 004a 83F83920 		strb	r2, [r3, #57]
 194:Src/motor.cpp ****     } else if (armed_state_ == ARMED_STATE_WAITING_FOR_UPDATE) {
 195:Src/motor.cpp ****         // now we waited long enough. Enter armed state and
 196:Src/motor.cpp ****         // enable the actual PWM outputs.
 197:Src/motor.cpp ****         armed_state_ = ARMED_STATE_ARMED;
 198:Src/motor.cpp ****         __HAL_TIM_MOE_ENABLE(hw_config_.timer);  // enable pwm outputs
 199:Src/motor.cpp ****     } else if (armed_state_ == Motor::ARMED_STATE_ARMED) {
 200:Src/motor.cpp ****         // nothing to do, PWM is running, all good
 201:Src/motor.cpp ****     } else {
 202:Src/motor.cpp ****         // unknown state oh no
 203:Src/motor.cpp ****        disarm();
 204:Src/motor.cpp ****     }
 205:Src/motor.cpp **** 
 206:Src/motor.cpp **** }
 4788              		.loc 11 206 1
 4789 004e 1DE0     		b	.L207
 4790              	.L204:
 194:Src/motor.cpp ****     } else if (armed_state_ == ARMED_STATE_WAITING_FOR_UPDATE) {
 4791              		.loc 11 194 16
 4792 0050 FB68     		ldr	r3, [r7, #12]
 4793 0052 93F83930 		ldrb	r3, [r3, #57]	@ zero_extendqisi2
 194:Src/motor.cpp ****     } else if (armed_state_ == ARMED_STATE_WAITING_FOR_UPDATE) {
 4794              		.loc 11 194 12
 4795 0056 022B     		cmp	r3, #2
 4796 0058 10D1     		bne	.L206
 197:Src/motor.cpp ****         __HAL_TIM_MOE_ENABLE(hw_config_.timer);  // enable pwm outputs
 4797              		.loc 11 197 22
 4798 005a FB68     		ldr	r3, [r7, #12]
 4799 005c 0322     		movs	r2, #3
 4800 005e 83F83920 		strb	r2, [r3, #57]
ARM GAS  /tmp/ccATuxCb.s 			page 227


 198:Src/motor.cpp ****     } else if (armed_state_ == Motor::ARMED_STATE_ARMED) {
 4801              		.loc 11 198 9
 4802 0062 FB68     		ldr	r3, [r7, #12]
 4803 0064 1B68     		ldr	r3, [r3]
 4804 0066 1B68     		ldr	r3, [r3]
 4805 0068 1B68     		ldr	r3, [r3]
 4806 006a 5A6C     		ldr	r2, [r3, #68]
 4807 006c FB68     		ldr	r3, [r7, #12]
 4808 006e 1B68     		ldr	r3, [r3]
 4809 0070 1B68     		ldr	r3, [r3]
 4810 0072 1B68     		ldr	r3, [r3]
 4811 0074 42F40042 		orr	r2, r2, #32768
 4812 0078 5A64     		str	r2, [r3, #68]
 4813              		.loc 11 206 1
 4814 007a 07E0     		b	.L207
 4815              	.L206:
 199:Src/motor.cpp ****         // nothing to do, PWM is running, all good
 4816              		.loc 11 199 16
 4817 007c FB68     		ldr	r3, [r7, #12]
 4818 007e 93F83930 		ldrb	r3, [r3, #57]	@ zero_extendqisi2
 199:Src/motor.cpp ****         // nothing to do, PWM is running, all good
 4819              		.loc 11 199 12
 4820 0082 032B     		cmp	r3, #3
 4821 0084 02D0     		beq	.L207
 203:Src/motor.cpp ****     }
 4822              		.loc 11 203 14
 4823 0086 F868     		ldr	r0, [r7, #12]
 4824 0088 FFF7FEFF 		bl	_ZN5Motor6disarmEv
 4825              	.L207:
 4826              		.loc 11 206 1
 4827 008c 00BF     		nop
 4828 008e 1037     		adds	r7, r7, #16
 4829              	.LCFI405:
 4830              		.cfi_def_cfa_offset 8
 4831 0090 BD46     		mov	sp, r7
 4832              	.LCFI406:
 4833              		.cfi_def_cfa_register 13
 4834              		@ sp needed
 4835 0092 80BD     		pop	{r7, pc}
 4836              		.cfi_endproc
 4837              	.LFE4959:
 4839              		.section	.text._ZN5Motor3armEP15PhaseControlLawILj3EE,"ax",%progbits
 4840              		.align	1
 4841              		.global	_ZN5Motor3armEP15PhaseControlLawILj3EE
 4842              		.syntax unified
 4843              		.thumb
 4844              		.thumb_func
 4845              		.fpu fpv4-sp-d16
 4847              	_ZN5Motor3armEP15PhaseControlLawILj3EE:
 4848              	.LFB4960:
 207:Src/motor.cpp **** 
 208:Src/motor.cpp **** /**
 209:Src/motor.cpp ****  * @brief Arms the PWM outputs that belong to this motor.
 210:Src/motor.cpp ****  *
 211:Src/motor.cpp ****  * Note that this does not activate the PWM outputs immediately, it just sets
 212:Src/motor.cpp ****  * a flag so they will be enabled later.
 213:Src/motor.cpp ****  * 
ARM GAS  /tmp/ccATuxCb.s 			page 228


 214:Src/motor.cpp ****  * The sequence goes like this:
 215:Src/motor.cpp ****  *  - Motor::arm() sets the is_armed_ flag.
 216:Src/motor.cpp ****  *  - On the next timer update event Motor::timer_update_cb() gets called in an
 217:Src/motor.cpp ****  *    interrupt context
 218:Src/motor.cpp ****  *  - Motor::timer_update_cb() runs specified control law to determine PWM values
 219:Src/motor.cpp ****  *  - Motor::timer_update_cb() calls Motor::apply_pwm_timings()
 220:Src/motor.cpp ****  *  - Motor::apply_pwm_timings() sets the output compare registers and the AOE
 221:Src/motor.cpp ****  *    (automatic output enable) bit.
 222:Src/motor.cpp ****  *  - On the next update event the timer latches the configured values into the
 223:Src/motor.cpp ****  *    active shadow register and enables the outputs at the same time.
 224:Src/motor.cpp ****  * 
 225:Src/motor.cpp ****  * The sequence can be aborted at any time by calling Motor::disarm().
 226:Src/motor.cpp ****  *
 227:Src/motor.cpp ****  * @param control_law: An control law that is called at the frequency of current
 228:Src/motor.cpp ****  *        measurements. The function must return as quickly as possible
 229:Src/motor.cpp ****  *        such that the resulting PWM timings are available before the next
 230:Src/motor.cpp ****  *        timer update event.
 231:Src/motor.cpp ****  * @returns: True on success, false otherwise
 232:Src/motor.cpp ****  */
 233:Src/motor.cpp **** bool Motor::arm(PhaseControlLaw<3>* control_law) {
 4849              		.loc 11 233 50
 4850              		.cfi_startproc
 4851              		@ args = 0, pretend = 0, frame = 16
 4852              		@ frame_needed = 1, uses_anonymous_args = 0
 4853 0000 80B5     		push	{r7, lr}
 4854              	.LCFI407:
 4855              		.cfi_def_cfa_offset 8
 4856              		.cfi_offset 7, -8
 4857              		.cfi_offset 14, -4
 4858 0002 84B0     		sub	sp, sp, #16
 4859              	.LCFI408:
 4860              		.cfi_def_cfa_offset 24
 4861 0004 00AF     		add	r7, sp, #0
 4862              	.LCFI409:
 4863              		.cfi_def_cfa_register 7
 4864 0006 7860     		str	r0, [r7, #4]
 4865 0008 3960     		str	r1, [r7]
 234:Src/motor.cpp **** 
 235:Src/motor.cpp ****     uint32_t mask = cpu_enter_critical();
 4866              		.loc 11 235 39
 4867 000a FFF7FEFF 		bl	cpu_enter_critical
 4868 000e F860     		str	r0, [r7, #12]
 236:Src/motor.cpp ****     
 237:Src/motor.cpp ****         control_law_ = control_law;
 4869              		.loc 11 237 22
 4870 0010 7B68     		ldr	r3, [r7, #4]
 4871 0012 3A68     		ldr	r2, [r7]
 4872 0014 C3F8AC23 		str	r2, [r3, #940]
 238:Src/motor.cpp **** 
 239:Src/motor.cpp ****         // Reset controller states, integrators, setpoints, etc.
 240:Src/motor.cpp ****         axis_->controller_.reset();
 4873              		.loc 11 240 9
 4874 0018 7B68     		ldr	r3, [r7, #4]
 4875 001a 9B68     		ldr	r3, [r3, #8]
 4876              		.loc 11 240 16
 4877 001c DB68     		ldr	r3, [r3, #12]
 4878              		.loc 11 240 33
ARM GAS  /tmp/ccATuxCb.s 			page 229


 4879 001e 1846     		mov	r0, r3
 4880 0020 FFF7FEFF 		bl	_ZN10Controller5resetEv
 241:Src/motor.cpp ****         if (control_law_) {
 4881              		.loc 11 241 13
 4882 0024 7B68     		ldr	r3, [r7, #4]
 4883 0026 D3F8AC33 		ldr	r3, [r3, #940]
 4884              		.loc 11 241 9
 4885 002a 002B     		cmp	r3, #0
 4886 002c 09D0     		beq	.L209
 242:Src/motor.cpp ****             control_law_->reset();
 4887              		.loc 11 242 13
 4888 002e 7B68     		ldr	r3, [r7, #4]
 4889 0030 D3F8AC33 		ldr	r3, [r3, #940]
 4890              		.loc 11 242 33
 4891 0034 1B68     		ldr	r3, [r3]
 4892 0036 1B68     		ldr	r3, [r3]
 4893              		.loc 11 242 13
 4894 0038 7A68     		ldr	r2, [r7, #4]
 4895 003a D2F8AC23 		ldr	r2, [r2, #940]
 4896              		.loc 11 242 32
 4897 003e 1046     		mov	r0, r2
 4898 0040 9847     		blx	r3
 4899              	.LVL0:
 4900              	.L209:
 243:Src/motor.cpp ****         }
 244:Src/motor.cpp ****         reset_current_control();
 4901              		.loc 11 244 30
 4902 0042 7868     		ldr	r0, [r7, #4]
 4903 0044 FFF7FEFF 		bl	_ZN5Motor21reset_current_controlEv
 245:Src/motor.cpp ****         armed_state_ = ODriveIntf::MotorIntf::ARMED_STATE_WAITING_FOR_TIMINGS;
 4904              		.loc 11 245 22
 4905 0048 7B68     		ldr	r3, [r7, #4]
 4906 004a 0122     		movs	r2, #1
 4907 004c 83F83920 		strb	r2, [r3, #57]
 246:Src/motor.cpp ****         is_armed_ = true;
 4908              		.loc 11 246 19
 4909 0050 7B68     		ldr	r3, [r7, #4]
 4910 0052 0122     		movs	r2, #1
 4911 0054 83F83820 		strb	r2, [r3, #56]
 247:Src/motor.cpp **** 
 248:Src/motor.cpp ****     cpu_exit_critical(mask);
 4912              		.loc 11 248 22
 4913 0058 F868     		ldr	r0, [r7, #12]
 4914 005a FFF7FEFF 		bl	cpu_exit_critical
 249:Src/motor.cpp **** 
 250:Src/motor.cpp ****     return true;
 4915              		.loc 11 250 12
 4916 005e 0123     		movs	r3, #1
 251:Src/motor.cpp **** }
 4917              		.loc 11 251 1
 4918 0060 1846     		mov	r0, r3
 4919 0062 1037     		adds	r7, r7, #16
 4920              	.LCFI410:
 4921              		.cfi_def_cfa_offset 8
 4922 0064 BD46     		mov	sp, r7
 4923              	.LCFI411:
 4924              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccATuxCb.s 			page 230


 4925              		@ sp needed
 4926 0066 80BD     		pop	{r7, pc}
 4927              		.cfi_endproc
 4928              	.LFE4960:
 4930              		.section	.text._ZN5Motor6disarmEv,"ax",%progbits
 4931              		.align	1
 4932              		.global	_ZN5Motor6disarmEv
 4933              		.syntax unified
 4934              		.thumb
 4935              		.thumb_func
 4936              		.fpu fpv4-sp-d16
 4938              	_ZN5Motor6disarmEv:
 4939              	.LFB4961:
 252:Src/motor.cpp **** 
 253:Src/motor.cpp **** bool Motor::disarm()
 254:Src/motor.cpp **** {
 4940              		.loc 11 254 1
 4941              		.cfi_startproc
 4942              		@ args = 0, pretend = 0, frame = 16
 4943              		@ frame_needed = 1, uses_anonymous_args = 0
 4944 0000 80B5     		push	{r7, lr}
 4945              	.LCFI412:
 4946              		.cfi_def_cfa_offset 8
 4947              		.cfi_offset 7, -8
 4948              		.cfi_offset 14, -4
 4949 0002 84B0     		sub	sp, sp, #16
 4950              	.LCFI413:
 4951              		.cfi_def_cfa_offset 24
 4952 0004 00AF     		add	r7, sp, #0
 4953              	.LCFI414:
 4954              		.cfi_def_cfa_register 7
 4955 0006 7860     		str	r0, [r7, #4]
 255:Src/motor.cpp ****     uint32_t mask = cpu_enter_critical();
 4956              		.loc 11 255 39
 4957 0008 FFF7FEFF 		bl	cpu_enter_critical
 4958 000c F860     		str	r0, [r7, #12]
 256:Src/motor.cpp ****     bool was_armed = armed_state_ != ODriveIntf::MotorIntf::ARMED_STATE_DISARMED;
 4959              		.loc 11 256 22
 4960 000e 7B68     		ldr	r3, [r7, #4]
 4961 0010 93F83930 		ldrb	r3, [r3, #57]	@ zero_extendqisi2
 4962              		.loc 11 256 10
 4963 0014 002B     		cmp	r3, #0
 4964 0016 14BF     		ite	ne
 4965 0018 0123     		movne	r3, #1
 4966 001a 0023     		moveq	r3, #0
 4967 001c FB72     		strb	r3, [r7, #11]
 257:Src/motor.cpp ****     armed_state_ = ODriveIntf::MotorIntf::ARMED_STATE_DISARMED;
 4968              		.loc 11 257 18
 4969 001e 7B68     		ldr	r3, [r7, #4]
 4970 0020 0022     		movs	r2, #0
 4971 0022 83F83920 		strb	r2, [r3, #57]
 258:Src/motor.cpp ****     __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(hw_config_.timer); 
 4972              		.loc 11 258 5
 4973 0026 7B68     		ldr	r3, [r7, #4]
 4974 0028 1B68     		ldr	r3, [r3]
 4975 002a 1B68     		ldr	r3, [r3]
 4976 002c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccATuxCb.s 			page 231


 4977 002e 5A6C     		ldr	r2, [r3, #68]
 4978 0030 7B68     		ldr	r3, [r7, #4]
 4979 0032 1B68     		ldr	r3, [r3]
 4980 0034 1B68     		ldr	r3, [r3]
 4981 0036 1B68     		ldr	r3, [r3]
 4982 0038 22F40042 		bic	r2, r2, #32768
 4983 003c 5A64     		str	r2, [r3, #68]
 259:Src/motor.cpp ****     control_law_ = nullptr;
 4984              		.loc 11 259 18
 4985 003e 7B68     		ldr	r3, [r7, #4]
 4986 0040 0022     		movs	r2, #0
 4987 0042 C3F8AC23 		str	r2, [r3, #940]
 260:Src/motor.cpp ****     is_armed_ = false;
 4988              		.loc 11 260 15
 4989 0046 7B68     		ldr	r3, [r7, #4]
 4990 0048 0022     		movs	r2, #0
 4991 004a 83F83820 		strb	r2, [r3, #56]
 261:Src/motor.cpp ****     cpu_exit_critical(mask);
 4992              		.loc 11 261 22
 4993 004e F868     		ldr	r0, [r7, #12]
 4994 0050 FFF7FEFF 		bl	cpu_exit_critical
 262:Src/motor.cpp ****     return was_armed;
 4995              		.loc 11 262 12
 4996 0054 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 263:Src/motor.cpp **** 
 264:Src/motor.cpp **** }
 4997              		.loc 11 264 1
 4998 0056 1846     		mov	r0, r3
 4999 0058 1037     		adds	r7, r7, #16
 5000              	.LCFI415:
 5001              		.cfi_def_cfa_offset 8
 5002 005a BD46     		mov	sp, r7
 5003              	.LCFI416:
 5004              		.cfi_def_cfa_register 13
 5005              		@ sp needed
 5006 005c 80BD     		pop	{r7, pc}
 5007              		.cfi_endproc
 5008              	.LFE4961:
 5010              		.section	.text._ZN5Motor21reset_current_controlEv,"ax",%progbits
 5011              		.align	1
 5012              		.global	_ZN5Motor21reset_current_controlEv
 5013              		.syntax unified
 5014              		.thumb
 5015              		.thumb_func
 5016              		.fpu fpv4-sp-d16
 5018              	_ZN5Motor21reset_current_controlEv:
 5019              	.LFB4962:
 265:Src/motor.cpp **** 
 266:Src/motor.cpp **** void Motor::reset_current_control() {
 5020              		.loc 11 266 37
 5021              		.cfi_startproc
 5022              		@ args = 0, pretend = 0, frame = 8
 5023              		@ frame_needed = 1, uses_anonymous_args = 0
 5024              		@ link register save eliminated.
 5025 0000 80B4     		push	{r7}
 5026              	.LCFI417:
 5027              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccATuxCb.s 			page 232


 5028              		.cfi_offset 7, -4
 5029 0002 83B0     		sub	sp, sp, #12
 5030              	.LCFI418:
 5031              		.cfi_def_cfa_offset 16
 5032 0004 00AF     		add	r7, sp, #0
 5033              	.LCFI419:
 5034              		.cfi_def_cfa_register 7
 5035 0006 7860     		str	r0, [r7, #4]
 267:Src/motor.cpp ****     current_control_.v_current_control_integral_d_ = 0.0f;
 5036              		.loc 11 267 52
 5037 0008 7B68     		ldr	r3, [r7, #4]
 5038 000a 4FF00002 		mov	r2, #0
 5039 000e C3F89023 		str	r2, [r3, #912]	@ float
 268:Src/motor.cpp ****     current_control_.v_current_control_integral_q_ = 0.0f;
 5040              		.loc 11 268 52
 5041 0012 7B68     		ldr	r3, [r7, #4]
 5042 0014 4FF00002 		mov	r2, #0
 5043 0018 C3F89423 		str	r2, [r3, #916]	@ float
 269:Src/motor.cpp ****     I_bus_ = 0.0f;
 5044              		.loc 11 269 12
 5045 001c 7B68     		ldr	r3, [r7, #4]
 5046 001e 4FF00002 		mov	r2, #0
 5047 0022 C3F8F022 		str	r2, [r3, #752]	@ float
 270:Src/motor.cpp **** }
 5048              		.loc 11 270 1
 5049 0026 00BF     		nop
 5050 0028 0C37     		adds	r7, r7, #12
 5051              	.LCFI420:
 5052              		.cfi_def_cfa_offset 4
 5053 002a BD46     		mov	sp, r7
 5054              	.LCFI421:
 5055              		.cfi_def_cfa_register 13
 5056              		@ sp needed
 5057 002c 5DF8047B 		ldr	r7, [sp], #4
 5058              	.LCFI422:
 5059              		.cfi_restore 7
 5060              		.cfi_def_cfa_offset 0
 5061 0030 7047     		bx	lr
 5062              		.cfi_endproc
 5063              	.LFE4962:
 5065              		.section	.text._ZN5Motor31update_current_controller_gainsEv,"ax",%progbits
 5066              		.align	1
 5067              		.global	_ZN5Motor31update_current_controller_gainsEv
 5068              		.syntax unified
 5069              		.thumb
 5070              		.thumb_func
 5071              		.fpu fpv4-sp-d16
 5073              	_ZN5Motor31update_current_controller_gainsEv:
 5074              	.LFB4963:
 271:Src/motor.cpp **** 
 272:Src/motor.cpp **** // @brief Tune the current controller based on phase resistance and inductance
 273:Src/motor.cpp **** // This should be invoked whenever one of these values changes.
 274:Src/motor.cpp **** // TODO: allow update on user-request or update automatically via hooks
 275:Src/motor.cpp **** void Motor::update_current_controller_gains() {
 5075              		.loc 11 275 47
 5076              		.cfi_startproc
 5077              		@ args = 0, pretend = 0, frame = 32
ARM GAS  /tmp/ccATuxCb.s 			page 233


 5078              		@ frame_needed = 1, uses_anonymous_args = 0
 5079 0000 80B5     		push	{r7, lr}
 5080              	.LCFI423:
 5081              		.cfi_def_cfa_offset 8
 5082              		.cfi_offset 7, -8
 5083              		.cfi_offset 14, -4
 5084 0002 88B0     		sub	sp, sp, #32
 5085              	.LCFI424:
 5086              		.cfi_def_cfa_offset 40
 5087 0004 00AF     		add	r7, sp, #0
 5088              	.LCFI425:
 5089              		.cfi_def_cfa_register 7
 5090 0006 7860     		str	r0, [r7, #4]
 276:Src/motor.cpp ****     // Calculate current control gains
 277:Src/motor.cpp ****     auto p_gain = config_.current_control_bandwidth * config_.phase_inductance;
 5091              		.loc 11 277 19
 5092 0008 7B68     		ldr	r3, [r7, #4]
 5093 000a 5B68     		ldr	r3, [r3, #4]
 5094              		.loc 11 277 27
 5095 000c 93ED0F7A 		vldr.32	s14, [r3, #60]
 5096              		.loc 11 277 55
 5097 0010 7B68     		ldr	r3, [r7, #4]
 5098 0012 5B68     		ldr	r3, [r3, #4]
 5099              		.loc 11 277 63
 5100 0014 D3ED067A 		vldr.32	s15, [r3, #24]
 5101              		.loc 11 277 53
 5102 0018 67EE277A 		vmul.f32	s15, s14, s15
 5103              		.loc 11 277 10
 5104 001c C7ED047A 		vstr.32	s15, [r7, #16]
 278:Src/motor.cpp ****     auto plant_pole = config_.phase_resistance / config_.phase_inductance;
 5105              		.loc 11 278 23
 5106 0020 7B68     		ldr	r3, [r7, #4]
 5107 0022 5B68     		ldr	r3, [r3, #4]
 5108              		.loc 11 278 31
 5109 0024 D3ED076A 		vldr.32	s13, [r3, #28]
 5110              		.loc 11 278 50
 5111 0028 7B68     		ldr	r3, [r7, #4]
 5112 002a 5B68     		ldr	r3, [r3, #4]
 5113              		.loc 11 278 58
 5114 002c 93ED067A 		vldr.32	s14, [r3, #24]
 5115              		.loc 11 278 10
 5116 0030 C6EE877A 		vdiv.f32	s15, s13, s14
 5117 0034 C7ED077A 		vstr.32	s15, [r7, #28]
 279:Src/motor.cpp ****     auto i_gain = plant_pole * p_gain;
 5118              		.loc 11 279 30
 5119 0038 97ED047A 		vldr.32	s14, [r7, #16]
 5120 003c D7ED077A 		vldr.32	s15, [r7, #28]
 5121 0040 67EE277A 		vmul.f32	s15, s14, s15
 5122              		.loc 11 279 10
 5123 0044 C7ED037A 		vstr.32	s15, [r7, #12]
 280:Src/motor.cpp ****     current_control_.pi_gains_ = {p_gain, i_gain};
 5124              		.loc 11 280 49
 5125 0048 07F10C02 		add	r2, r7, #12
 5126 004c 07F11001 		add	r1, r7, #16
 5127 0050 07F11403 		add	r3, r7, #20
 5128 0054 1846     		mov	r0, r3
 5129 0056 FFF7FEFF 		bl	_ZNSt4pairIffEC1IRfS2_Lb1EEEOT_OT0_
ARM GAS  /tmp/ccATuxCb.s 			page 234


 5130 005a 7B68     		ldr	r3, [r7, #4]
 5131 005c 03F54173 		add	r3, r3, #772
 5132 0060 07F11402 		add	r2, r7, #20
 5133 0064 1146     		mov	r1, r2
 5134 0066 1846     		mov	r0, r3
 5135 0068 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEaSIS1_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS2_NSt9remove_c
 281:Src/motor.cpp **** }
 5136              		.loc 11 281 1
 5137 006c 00BF     		nop
 5138 006e 2037     		adds	r7, r7, #32
 5139              	.LCFI426:
 5140              		.cfi_def_cfa_offset 8
 5141 0070 BD46     		mov	sp, r7
 5142              	.LCFI427:
 5143              		.cfi_def_cfa_register 13
 5144              		@ sp needed
 5145 0072 80BD     		pop	{r7, pc}
 5146              		.cfi_endproc
 5147              	.LFE4963:
 5149              		.section	.text._ZN5Motor13DRV8301_setupEv,"ax",%progbits
 5150              		.align	1
 5151              		.global	_ZN5Motor13DRV8301_setupEv
 5152              		.syntax unified
 5153              		.thumb
 5154              		.thumb_func
 5155              		.fpu fpv4-sp-d16
 5157              	_ZN5Motor13DRV8301_setupEv:
 5158              	.LFB4968:
 282:Src/motor.cpp **** 
 283:Src/motor.cpp **** // @brief Set up the gate drivers
 284:Src/motor.cpp **** void Motor::DRV8301_setup() {
 5159              		.loc 11 284 29
 5160              		.cfi_startproc
 5161              		@ args = 0, pretend = 0, frame = 24
 5162              		@ frame_needed = 1, uses_anonymous_args = 0
 5163              		@ link register save eliminated.
 5164 0000 80B4     		push	{r7}
 5165              	.LCFI428:
 5166              		.cfi_def_cfa_offset 4
 5167              		.cfi_offset 7, -4
 5168 0002 87B0     		sub	sp, sp, #28
 5169              	.LCFI429:
 5170              		.cfi_def_cfa_offset 32
 5171 0004 00AF     		add	r7, sp, #0
 5172              	.LCFI430:
 5173              		.cfi_def_cfa_register 7
 5174 0006 7860     		str	r0, [r7, #4]
 285:Src/motor.cpp ****     // for reference:
 286:Src/motor.cpp ****     // 20V/V on 500uOhm gives a range of +/- 150A
 287:Src/motor.cpp ****     // 40V/V on 500uOhm gives a range of +/- 75A
 288:Src/motor.cpp ****     // 20V/V on 666uOhm gives a range of +/- 110A
 289:Src/motor.cpp ****     // 40V/V on 666uOhm gives a range of +/- 55A
 290:Src/motor.cpp **** 
 291:Src/motor.cpp ****     // Solve for exact gain, then snap down to have equal or larger range as requested
 292:Src/motor.cpp ****     // or largest possible range otherwise
 293:Src/motor.cpp ****     constexpr float kMargin = 0.90f;
 5175              		.loc 11 293 21
ARM GAS  /tmp/ccATuxCb.s 			page 235


 5176 0008 134B     		ldr	r3, .L216
 5177 000a 7B61     		str	r3, [r7, #20]	@ float
 294:Src/motor.cpp **** 
 295:Src/motor.cpp ****     constexpr float max_output_swing = 1.35f; // [V] out of amplifier
 5178              		.loc 11 295 21
 5179 000c 134B     		ldr	r3, .L216+4
 5180 000e 3B61     		str	r3, [r7, #16]	@ float
 296:Src/motor.cpp ****     float max_unity_gain_current = kMargin * max_output_swing * hw_config_.shunt_conductance; // [A
 5181              		.loc 11 296 65
 5182 0010 7B68     		ldr	r3, [r7, #4]
 5183 0012 1B68     		ldr	r3, [r3]
 5184              		.loc 11 296 76
 5185 0014 D3ED027A 		vldr.32	s15, [r3, #8]
 5186              		.loc 11 296 11
 5187 0018 9FED117A 		vldr.32	s14, .L216+8
 5188 001c 67EE877A 		vmul.f32	s15, s15, s14
 5189 0020 C7ED037A 		vstr.32	s15, [r7, #12]
 297:Src/motor.cpp **** 
 298:Src/motor.cpp ****     // Clip all current control to actual usable range
 299:Src/motor.cpp ****     max_allowed_current_ = max_unity_gain_current * phase_current_rev_gain_;
 5190              		.loc 11 299 53
 5191 0024 7B68     		ldr	r3, [r7, #4]
 5192 0026 93ED157A 		vldr.32	s14, [r3, #84]
 5193              		.loc 11 299 51
 5194 002a D7ED037A 		vldr.32	s15, [r7, #12]
 5195 002e 67EE277A 		vmul.f32	s15, s14, s15
 5196              		.loc 11 299 26
 5197 0032 7B68     		ldr	r3, [r7, #4]
 5198 0034 C3EDBD7A 		vstr.32	s15, [r3, #756]
 300:Src/motor.cpp ****     // Set trip level
 301:Src/motor.cpp ****     max_dc_calib_ = 0.1f * max_allowed_current_;
 5199              		.loc 11 301 28
 5200 0038 7B68     		ldr	r3, [r7, #4]
 5201 003a D3EDBD7A 		vldr.32	s15, [r3, #756]
 5202              		.loc 11 301 26
 5203 003e 9FED097A 		vldr.32	s14, .L216+12
 5204 0042 67EE877A 		vmul.f32	s15, s15, s14
 5205              		.loc 11 301 19
 5206 0046 7B68     		ldr	r3, [r7, #4]
 5207 0048 C3EDBE7A 		vstr.32	s15, [r3, #760]
 302:Src/motor.cpp **** 
 303:Src/motor.cpp ****    
 304:Src/motor.cpp **** }
 5208              		.loc 11 304 1
 5209 004c 00BF     		nop
 5210 004e 1C37     		adds	r7, r7, #28
 5211              	.LCFI431:
 5212              		.cfi_def_cfa_offset 4
 5213 0050 BD46     		mov	sp, r7
 5214              	.LCFI432:
 5215              		.cfi_def_cfa_register 13
 5216              		@ sp needed
 5217 0052 5DF8047B 		ldr	r7, [sp], #4
 5218              	.LCFI433:
 5219              		.cfi_restore 7
 5220              		.cfi_def_cfa_offset 0
 5221 0056 7047     		bx	lr
ARM GAS  /tmp/ccATuxCb.s 			page 236


 5222              	.L217:
 5223              		.align	2
 5224              	.L216:
 5225 0058 6666663F 		.word	1063675494
 5226 005c CDCCAC3F 		.word	1068289229
 5227 0060 1F859B3F 		.word	1067156767
 5228 0064 CDCCCC3D 		.word	1036831949
 5229              		.cfi_endproc
 5230              	.LFE4968:
 5232              		.section	.text._ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE,"ax",%progbits
 5233              		.align	1
 5234              		.global	_ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE
 5235              		.syntax unified
 5236              		.thumb
 5237              		.thumb_func
 5238              		.fpu fpv4-sp-d16
 5240              	_ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE:
 5241              	.LFB4969:
 305:Src/motor.cpp **** 
 306:Src/motor.cpp **** void Motor::set_error(ODriveIntf::MotorIntf::Error error){
 5242              		.loc 11 306 58
 5243              		.cfi_startproc
 5244              		@ args = 0, pretend = 0, frame = 8
 5245              		@ frame_needed = 1, uses_anonymous_args = 0
 5246 0000 80B5     		push	{r7, lr}
 5247              	.LCFI434:
 5248              		.cfi_def_cfa_offset 8
 5249              		.cfi_offset 7, -8
 5250              		.cfi_offset 14, -4
 5251 0002 82B0     		sub	sp, sp, #8
 5252              	.LCFI435:
 5253              		.cfi_def_cfa_offset 16
 5254 0004 00AF     		add	r7, sp, #0
 5255              	.LCFI436:
 5256              		.cfi_def_cfa_register 7
 5257 0006 7860     		str	r0, [r7, #4]
 5258 0008 3960     		str	r1, [r7]
 307:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 5259              		.loc 11 307 78
 5260 000a 7B68     		ldr	r3, [r7, #4]
 5261 000c 5A6B     		ldr	r2, [r3, #52]
 5262              		.loc 11 307 86
 5263 000e 3B68     		ldr	r3, [r7]
 5264 0010 1A43     		orrs	r2, r2, r3
 5265              		.loc 11 307 12
 5266 0012 7B68     		ldr	r3, [r7, #4]
 5267 0014 5A63     		str	r2, [r3, #52]
 308:Src/motor.cpp **** 
 309:Src/motor.cpp ****     
 310:Src/motor.cpp ****     axis_->error_ = Axis::ERROR_MOTOR_FAILED;
 5268              		.loc 11 310 5
 5269 0016 7B68     		ldr	r3, [r7, #4]
 5270 0018 9B68     		ldr	r3, [r3, #8]
 5271              		.loc 11 310 19
 5272 001a 4022     		movs	r2, #64
 5273 001c C3F85C21 		str	r2, [r3, #348]
 311:Src/motor.cpp **** 
ARM GAS  /tmp/ccATuxCb.s 			page 237


 312:Src/motor.cpp ****     safety_critical_disarm_motor_pwm(*this);
 5274              		.loc 11 312 37
 5275 0020 7868     		ldr	r0, [r7, #4]
 5276 0022 FFF7FEFF 		bl	safety_critical_disarm_motor_pwm
 313:Src/motor.cpp ****     update_brake_current();
 5277              		.loc 11 313 25
 5278 0026 FFF7FEFF 		bl	update_brake_current
 314:Src/motor.cpp **** }
 5279              		.loc 11 314 1
 5280 002a 00BF     		nop
 5281 002c 0837     		adds	r7, r7, #8
 5282              	.LCFI437:
 5283              		.cfi_def_cfa_offset 8
 5284 002e BD46     		mov	sp, r7
 5285              	.LCFI438:
 5286              		.cfi_def_cfa_register 13
 5287              		@ sp needed
 5288 0030 80BD     		pop	{r7, pc}
 5289              		.cfi_endproc
 5290              	.LFE4969:
 5292              		.section	.text._ZN5Motor15check_DRV_faultEv,"ax",%progbits
 5293              		.align	1
 5294              		.global	_ZN5Motor15check_DRV_faultEv
 5295              		.syntax unified
 5296              		.thumb
 5297              		.thumb_func
 5298              		.fpu fpv4-sp-d16
 5300              	_ZN5Motor15check_DRV_faultEv:
 5301              	.LFB4970:
 315:Src/motor.cpp **** 
 316:Src/motor.cpp **** bool Motor::check_DRV_fault() {
 5302              		.loc 11 316 31
 5303              		.cfi_startproc
 5304              		@ args = 0, pretend = 0, frame = 8
 5305              		@ frame_needed = 1, uses_anonymous_args = 0
 5306              		@ link register save eliminated.
 5307 0000 80B4     		push	{r7}
 5308              	.LCFI439:
 5309              		.cfi_def_cfa_offset 4
 5310              		.cfi_offset 7, -4
 5311 0002 83B0     		sub	sp, sp, #12
 5312              	.LCFI440:
 5313              		.cfi_def_cfa_offset 16
 5314 0004 00AF     		add	r7, sp, #0
 5315              	.LCFI441:
 5316              		.cfi_def_cfa_register 7
 5317 0006 7860     		str	r0, [r7, #4]
 317:Src/motor.cpp ****     return false; //
 5318              		.loc 11 317 12
 5319 0008 0023     		movs	r3, #0
 318:Src/motor.cpp **** }
 5320              		.loc 11 318 1
 5321 000a 1846     		mov	r0, r3
 5322 000c 0C37     		adds	r7, r7, #12
 5323              	.LCFI442:
 5324              		.cfi_def_cfa_offset 4
 5325 000e BD46     		mov	sp, r7
ARM GAS  /tmp/ccATuxCb.s 			page 238


 5326              	.LCFI443:
 5327              		.cfi_def_cfa_register 13
 5328              		@ sp needed
 5329 0010 5DF8047B 		ldr	r7, [sp], #4
 5330              	.LCFI444:
 5331              		.cfi_restore 7
 5332              		.cfi_def_cfa_offset 0
 5333 0014 7047     		bx	lr
 5334              		.cfi_endproc
 5335              	.LFE4970:
 5337              		.section	.text._ZN5Motor9do_checksEv,"ax",%progbits
 5338              		.align	1
 5339              		.global	_ZN5Motor9do_checksEv
 5340              		.syntax unified
 5341              		.thumb
 5342              		.thumb_func
 5343              		.fpu fpv4-sp-d16
 5345              	_ZN5Motor9do_checksEv:
 5346              	.LFB4971:
 319:Src/motor.cpp **** 
 320:Src/motor.cpp **** bool Motor::do_checks() {
 5347              		.loc 11 320 25
 5348              		.cfi_startproc
 5349              		@ args = 0, pretend = 0, frame = 8
 5350              		@ frame_needed = 1, uses_anonymous_args = 0
 5351 0000 80B5     		push	{r7, lr}
 5352              	.LCFI445:
 5353              		.cfi_def_cfa_offset 8
 5354              		.cfi_offset 7, -8
 5355              		.cfi_offset 14, -4
 5356 0002 82B0     		sub	sp, sp, #8
 5357              	.LCFI446:
 5358              		.cfi_def_cfa_offset 16
 5359 0004 00AF     		add	r7, sp, #0
 5360              	.LCFI447:
 5361              		.cfi_def_cfa_register 7
 5362 0006 7860     		str	r0, [r7, #4]
 321:Src/motor.cpp ****     if (!check_DRV_fault()) {
 5363              		.loc 11 321 25
 5364 0008 7868     		ldr	r0, [r7, #4]
 5365 000a FFF7FEFF 		bl	_ZN5Motor15check_DRV_faultEv
 5366 000e 0346     		mov	r3, r0
 5367              		.loc 11 321 9
 5368 0010 83F00103 		eor	r3, r3, #1
 5369 0014 DBB2     		uxtb	r3, r3
 5370              		.loc 11 321 5
 5371 0016 002B     		cmp	r3, #0
 5372 0018 0AD0     		beq	.L222
 322:Src/motor.cpp ****         set_error(ODriveIntf::MotorIntf::ERROR_DRV_FAULT);
 5373              		.loc 11 322 18
 5374 001a 0821     		movs	r1, #8
 5375 001c 7868     		ldr	r0, [r7, #4]
 5376 001e FFF7FEFF 		bl	_ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE
 323:Src/motor.cpp ****         axis_->axis_state_.erro = Axis::ENCOS_ERRO::ENCOS_ERROR_DRV_FAULT;
 5377              		.loc 11 323 9
 5378 0022 7B68     		ldr	r3, [r7, #4]
 5379 0024 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/ccATuxCb.s 			page 239


 5380              		.loc 11 323 33
 5381 0026 0722     		movs	r2, #7
 5382 0028 83F89621 		strb	r2, [r3, #406]
 324:Src/motor.cpp ****         return false;
 5383              		.loc 11 324 16
 5384 002c 0023     		movs	r3, #0
 5385 002e 00E0     		b	.L223
 5386              	.L222:
 325:Src/motor.cpp ****     }
 326:Src/motor.cpp **** 
 327:Src/motor.cpp ****     return true;
 5387              		.loc 11 327 12
 5388 0030 0123     		movs	r3, #1
 5389              	.L223:
 328:Src/motor.cpp **** }
 5390              		.loc 11 328 1
 5391 0032 1846     		mov	r0, r3
 5392 0034 0837     		adds	r7, r7, #8
 5393              	.LCFI448:
 5394              		.cfi_def_cfa_offset 8
 5395 0036 BD46     		mov	sp, r7
 5396              	.LCFI449:
 5397              		.cfi_def_cfa_register 13
 5398              		@ sp needed
 5399 0038 80BD     		pop	{r7, pc}
 5400              		.cfi_endproc
 5401              	.LFE4971:
 5403              		.section	.text._ZN5Motor21effective_current_limEv,"ax",%progbits
 5404              		.align	1
 5405              		.global	_ZN5Motor21effective_current_limEv
 5406              		.syntax unified
 5407              		.thumb
 5408              		.thumb_func
 5409              		.fpu fpv4-sp-d16
 5411              	_ZN5Motor21effective_current_limEv:
 5412              	.LFB4972:
 329:Src/motor.cpp **** 
 330:Src/motor.cpp **** float Motor::effective_current_lim() {
 5413              		.loc 11 330 38
 5414              		.cfi_startproc
 5415              		@ args = 0, pretend = 0, frame = 40
 5416              		@ frame_needed = 1, uses_anonymous_args = 0
 5417 0000 80B5     		push	{r7, lr}
 5418              	.LCFI450:
 5419              		.cfi_def_cfa_offset 8
 5420              		.cfi_offset 7, -8
 5421              		.cfi_offset 14, -4
 5422 0002 8AB0     		sub	sp, sp, #40
 5423              	.LCFI451:
 5424              		.cfi_def_cfa_offset 48
 5425 0004 00AF     		add	r7, sp, #0
 5426              	.LCFI452:
 5427              		.cfi_def_cfa_register 7
 5428 0006 7860     		str	r0, [r7, #4]
 331:Src/motor.cpp ****     // Configured limit
 332:Src/motor.cpp ****     float current_lim = config_.current_lim;
 5429              		.loc 11 332 25
ARM GAS  /tmp/ccATuxCb.s 			page 240


 5430 0008 7B68     		ldr	r3, [r7, #4]
 5431 000a 5B68     		ldr	r3, [r3, #4]
 5432              		.loc 11 332 33
 5433 000c DB6A     		ldr	r3, [r3, #44]	@ float
 5434              		.loc 11 332 11
 5435 000e FB60     		str	r3, [r7, #12]	@ float
 333:Src/motor.cpp ****     // Hardware limit
 334:Src/motor.cpp ****     if (axis_->motor_.config_.motor_type == Motor::MOTOR_TYPE_GIMBAL) {
 5436              		.loc 11 334 9
 5437 0010 7B68     		ldr	r3, [r7, #4]
 5438 0012 9B68     		ldr	r3, [r3, #8]
 5439              		.loc 11 334 16
 5440 0014 DB6E     		ldr	r3, [r3, #108]
 5441              		.loc 11 334 23
 5442 0016 5B68     		ldr	r3, [r3, #4]
 5443              		.loc 11 334 31
 5444 0018 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 5445              		.loc 11 334 5
 5446 001c 022B     		cmp	r3, #2
 5447 001e 14D1     		bne	.L225
 335:Src/motor.cpp ****         current_lim = std::min(current_lim, 0.98f*one_by_sqrt3*vbus_voltage); //gimbal motor is vol
 5448              		.loc 11 335 63
 5449 0020 314B     		ldr	r3, .L230
 5450 0022 D3ED007A 		vldr.32	s15, [r3]
 5451 0026 9FED317A 		vldr.32	s14, .L230+4
 5452 002a 67EE877A 		vmul.f32	s15, s15, s14
 5453 002e C7ED047A 		vstr.32	s15, [r7, #16]
 5454              		.loc 11 335 76
 5455 0032 07F11002 		add	r2, r7, #16
 5456 0036 07F10C03 		add	r3, r7, #12
 5457 003a 1146     		mov	r1, r2
 5458 003c 1846     		mov	r0, r3
 5459 003e FFF7FEFF 		bl	_ZSt3minIfERKT_S2_S2_
 5460 0042 0346     		mov	r3, r0
 5461              		.loc 11 335 31
 5462 0044 1B68     		ldr	r3, [r3]	@ float
 5463              		.loc 11 335 21
 5464 0046 FB60     		str	r3, [r7, #12]	@ float
 5465 0048 0DE0     		b	.L226
 5466              	.L225:
 336:Src/motor.cpp ****     } else {
 337:Src/motor.cpp ****         current_lim = std::min(current_lim, axis_->motor_.max_allowed_current_);
 5467              		.loc 11 337 45
 5468 004a 7B68     		ldr	r3, [r7, #4]
 5469 004c 9B68     		ldr	r3, [r3, #8]
 5470              		.loc 11 337 52
 5471 004e DB6E     		ldr	r3, [r3, #108]
 5472              		.loc 11 337 59
 5473 0050 03F53D72 		add	r2, r3, #756
 5474              		.loc 11 337 79
 5475 0054 07F10C03 		add	r3, r7, #12
 5476 0058 1146     		mov	r1, r2
 5477 005a 1846     		mov	r0, r3
 5478 005c FFF7FEFF 		bl	_ZSt3minIfERKT_S2_S2_
 5479 0060 0346     		mov	r3, r0
 5480              		.loc 11 337 31
 5481 0062 1B68     		ldr	r3, [r3]	@ float
ARM GAS  /tmp/ccATuxCb.s 			page 241


 5482              		.loc 11 337 21
 5483 0064 FB60     		str	r3, [r7, #12]	@ float
 5484              	.L226:
 5485              	.LBB57:
 338:Src/motor.cpp ****     }
 339:Src/motor.cpp **** 
 340:Src/motor.cpp ****     // Apply axis current limiters
 341:Src/motor.cpp ****     for (const CurrentLimiter* const limiter : axis_->current_limiters_) {
 5486              		.loc 11 341 48
 5487 0066 7B68     		ldr	r3, [r7, #4]
 5488 0068 9B68     		ldr	r3, [r3, #8]
 5489              		.loc 11 341 55
 5490 006a 03F5A073 		add	r3, r3, #320
 5491 006e 3B62     		str	r3, [r7, #32]
 5492 0070 386A     		ldr	r0, [r7, #32]
 5493 0072 FFF7FEFF 		bl	_ZNSt5arrayIP14CurrentLimiterLj2EE5beginEv
 5494 0076 7862     		str	r0, [r7, #36]
 5495 0078 386A     		ldr	r0, [r7, #32]
 5496 007a FFF7FEFF 		bl	_ZNSt5arrayIP14CurrentLimiterLj2EE3endEv
 5497 007e F861     		str	r0, [r7, #28]
 5498              	.L228:
 5499              		.loc 11 341 55 is_stmt 0 discriminator 3
 5500 0080 7A6A     		ldr	r2, [r7, #36]
 5501 0082 FB69     		ldr	r3, [r7, #28]
 5502 0084 9A42     		cmp	r2, r3
 5503 0086 21D0     		beq	.L227
 5504              		.loc 11 341 38 is_stmt 1 discriminator 2
 5505 0088 7B6A     		ldr	r3, [r7, #36]
 5506 008a 1B68     		ldr	r3, [r3]
 5507 008c BB61     		str	r3, [r7, #24]
 342:Src/motor.cpp ****         current_lim = std::min(current_lim, limiter->get_current_limit(config_.current_lim));
 5508              		.loc 11 342 91 discriminator 2
 5509 008e BB69     		ldr	r3, [r7, #24]
 5510 0090 1B68     		ldr	r3, [r3]
 5511 0092 0833     		adds	r3, r3, #8
 5512 0094 1B68     		ldr	r3, [r3]
 5513              		.loc 11 342 72 discriminator 2
 5514 0096 7A68     		ldr	r2, [r7, #4]
 5515 0098 5268     		ldr	r2, [r2, #4]
 5516              		.loc 11 342 71 discriminator 2
 5517 009a D2ED0B7A 		vldr.32	s15, [r2, #44]
 5518 009e B0EE670A 		vmov.f32	s0, s15
 5519 00a2 B869     		ldr	r0, [r7, #24]
 5520 00a4 9847     		blx	r3
 5521              	.LVL1:
 5522 00a6 F0EE407A 		vmov.f32	s15, s0
 5523 00aa C7ED057A 		vstr.32	s15, [r7, #20]
 5524              		.loc 11 342 92 discriminator 2
 5525 00ae 07F11402 		add	r2, r7, #20
 5526 00b2 07F10C03 		add	r3, r7, #12
 5527 00b6 1146     		mov	r1, r2
 5528 00b8 1846     		mov	r0, r3
 5529 00ba FFF7FEFF 		bl	_ZSt3minIfERKT_S2_S2_
 5530 00be 0346     		mov	r3, r0
 5531              		.loc 11 342 31 discriminator 2
 5532 00c0 1B68     		ldr	r3, [r3]	@ float
 5533              		.loc 11 342 21 discriminator 2
ARM GAS  /tmp/ccATuxCb.s 			page 242


 5534 00c2 FB60     		str	r3, [r7, #12]	@ float
 341:Src/motor.cpp ****         current_lim = std::min(current_lim, limiter->get_current_limit(config_.current_lim));
 5535              		.loc 11 341 5 discriminator 2
 5536 00c4 7B6A     		ldr	r3, [r7, #36]
 5537 00c6 0433     		adds	r3, r3, #4
 5538 00c8 7B62     		str	r3, [r7, #36]
 5539 00ca D9E7     		b	.L228
 5540              	.L227:
 5541              	.LBE57:
 343:Src/motor.cpp ****     }
 344:Src/motor.cpp **** 
 345:Src/motor.cpp ****     effective_current_lim_ = current_lim;
 5542              		.loc 11 345 28
 5543 00cc FA68     		ldr	r2, [r7, #12]	@ float
 5544 00ce 7B68     		ldr	r3, [r7, #4]
 5545 00d0 C3F8A420 		str	r2, [r3, #164]	@ float
 346:Src/motor.cpp **** 
 347:Src/motor.cpp ****     return effective_current_lim_;
 5546              		.loc 11 347 12
 5547 00d4 7B68     		ldr	r3, [r7, #4]
 5548 00d6 D3F8A430 		ldr	r3, [r3, #164]	@ float
 5549 00da 07EE903A 		vmov	s15, r3
 348:Src/motor.cpp **** }
 5550              		.loc 11 348 1
 5551 00de B0EE670A 		vmov.f32	s0, s15
 5552 00e2 2837     		adds	r7, r7, #40
 5553              	.LCFI453:
 5554              		.cfi_def_cfa_offset 8
 5555 00e4 BD46     		mov	sp, r7
 5556              	.LCFI454:
 5557              		.cfi_def_cfa_register 13
 5558              		@ sp needed
 5559 00e6 80BD     		pop	{r7, pc}
 5560              	.L231:
 5561              		.align	2
 5562              	.L230:
 5563 00e8 00000000 		.word	vbus_voltage
 5564 00ec 7CD8103F 		.word	1058068604
 5565              		.cfi_endproc
 5566              	.LFE4972:
 5568              		.section	.text._ZN5Motor20max_available_torqueEv,"ax",%progbits
 5569              		.align	1
 5570              		.global	_ZN5Motor20max_available_torqueEv
 5571              		.syntax unified
 5572              		.thumb
 5573              		.thumb_func
 5574              		.fpu fpv4-sp-d16
 5576              	_ZN5Motor20max_available_torqueEv:
 5577              	.LFB4973:
 349:Src/motor.cpp **** 
 350:Src/motor.cpp **** //return the maximum available torque for the motor.
 351:Src/motor.cpp **** //Note - for ACIM motors, available torque is allowed to be 0.
 352:Src/motor.cpp **** float Motor::max_available_torque() {
 5578              		.loc 11 352 37
 5579              		.cfi_startproc
 5580              		@ args = 0, pretend = 0, frame = 16
 5581              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccATuxCb.s 			page 243


 5582 0000 80B5     		push	{r7, lr}
 5583              	.LCFI455:
 5584              		.cfi_def_cfa_offset 8
 5585              		.cfi_offset 7, -8
 5586              		.cfi_offset 14, -4
 5587 0002 84B0     		sub	sp, sp, #16
 5588              	.LCFI456:
 5589              		.cfi_def_cfa_offset 24
 5590 0004 00AF     		add	r7, sp, #0
 5591              	.LCFI457:
 5592              		.cfi_def_cfa_register 7
 5593 0006 7860     		str	r0, [r7, #4]
 353:Src/motor.cpp **** 
 354:Src/motor.cpp ****     float max_torque = effective_current_lim() * config_.torque_constant;
 5594              		.loc 11 354 45
 5595 0008 7868     		ldr	r0, [r7, #4]
 5596 000a FFF7FEFF 		bl	_ZN5Motor21effective_current_limEv
 5597 000e B0EE407A 		vmov.f32	s14, s0
 5598              		.loc 11 354 50
 5599 0012 7B68     		ldr	r3, [r7, #4]
 5600 0014 5B68     		ldr	r3, [r3, #4]
 5601              		.loc 11 354 58
 5602 0016 D3ED087A 		vldr.32	s15, [r3, #32]
 5603              		.loc 11 354 48
 5604 001a 67EE277A 		vmul.f32	s15, s14, s15
 5605              		.loc 11 354 58
 5606 001e C7ED027A 		vstr.32	s15, [r7, #8]
 355:Src/motor.cpp ****     max_torque = std::clamp(max_torque, 0.0f, config_.torque_lim);
 5607              		.loc 11 355 41
 5608 0022 4FF00003 		mov	r3, #0
 5609 0026 FB60     		str	r3, [r7, #12]	@ float
 5610              		.loc 11 355 47
 5611 0028 7B68     		ldr	r3, [r7, #4]
 5612 002a 5B68     		ldr	r3, [r3, #4]
 5613              		.loc 11 355 55
 5614 002c 03F13402 		add	r2, r3, #52
 5615              		.loc 11 355 65
 5616 0030 07F10C01 		add	r1, r7, #12
 5617 0034 07F10803 		add	r3, r7, #8
 5618 0038 1846     		mov	r0, r3
 5619 003a FFF7FEFF 		bl	_ZSt5clampIfERKT_S2_S2_S2_
 5620 003e 0346     		mov	r3, r0
 5621              		.loc 11 355 28
 5622 0040 1B68     		ldr	r3, [r3]	@ float
 5623              		.loc 11 355 16
 5624 0042 BB60     		str	r3, [r7, #8]	@ float
 356:Src/motor.cpp ****     return max_torque;
 5625              		.loc 11 356 12
 5626 0044 BB68     		ldr	r3, [r7, #8]	@ float
 5627 0046 07EE903A 		vmov	s15, r3
 357:Src/motor.cpp **** }
 5628              		.loc 11 357 1
 5629 004a B0EE670A 		vmov.f32	s0, s15
 5630 004e 1037     		adds	r7, r7, #16
 5631              	.LCFI458:
 5632              		.cfi_def_cfa_offset 8
 5633 0050 BD46     		mov	sp, r7
ARM GAS  /tmp/ccATuxCb.s 			page 244


 5634              	.LCFI459:
 5635              		.cfi_def_cfa_register 13
 5636              		@ sp needed
 5637 0052 80BD     		pop	{r7, pc}
 5638              		.cfi_endproc
 5639              	.LFE4973:
 5641              		.section	.rodata._ZZN5Motor10log_timingEN10ODriveIntf11TimingLog_tEE14clocks_per_cnt,"a"
 5642              		.align	1
 5645              	_ZZN5Motor10log_timingEN10ODriveIntf11TimingLog_tEE14clocks_per_cnt:
 5646 0000 0200     		.short	2
 5647              		.section	.text._ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE,"ax",%progbits
 5648              		.align	1
 5649              		.global	_ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE
 5650              		.syntax unified
 5651              		.thumb
 5652              		.thumb_func
 5653              		.fpu fpv4-sp-d16
 5655              	_ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE:
 5656              	.LFB4974:
 358:Src/motor.cpp **** 
 359:Src/motor.cpp **** void Motor::log_timing(ODriveIntf::TimingLog_t log_idx) {
 5657              		.loc 11 359 57
 5658              		.cfi_startproc
 5659              		@ args = 0, pretend = 0, frame = 16
 5660              		@ frame_needed = 1, uses_anonymous_args = 0
 5661 0000 90B5     		push	{r4, r7, lr}
 5662              	.LCFI460:
 5663              		.cfi_def_cfa_offset 12
 5664              		.cfi_offset 4, -12
 5665              		.cfi_offset 7, -8
 5666              		.cfi_offset 14, -4
 5667 0002 85B0     		sub	sp, sp, #20
 5668              	.LCFI461:
 5669              		.cfi_def_cfa_offset 32
 5670 0004 00AF     		add	r7, sp, #0
 5671              	.LCFI462:
 5672              		.cfi_def_cfa_register 7
 5673 0006 7860     		str	r0, [r7, #4]
 5674 0008 0B46     		mov	r3, r1
 5675 000a FB70     		strb	r3, [r7, #3]
 360:Src/motor.cpp ****     static const uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLO
 361:Src/motor.cpp ****     uint16_t timing = clocks_per_cnt * htim15.Instance->CNT; // TODO: Use a hw_config
 5676              		.loc 11 361 47
 5677 000c 0B4B     		ldr	r3, .L237
 5678 000e 1B68     		ldr	r3, [r3]
 5679              		.loc 11 361 57
 5680 0010 5B6A     		ldr	r3, [r3, #36]
 5681 0012 9BB2     		uxth	r3, r3
 5682 0014 5B00     		lsls	r3, r3, #1
 5683 0016 FB81     		strh	r3, [r7, #14]	@ movhi
 362:Src/motor.cpp **** 
 363:Src/motor.cpp ****     if (log_idx < ODriveIntf::TIMING_LOG_NUM_SLOTS) {
 5684              		.loc 11 363 5
 5685 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5686 001a 0B2B     		cmp	r3, #11
 5687 001c 0AD8     		bhi	.L236
 364:Src/motor.cpp ****         timing_log_[log_idx] = timing;
ARM GAS  /tmp/ccATuxCb.s 			page 245


 5688              		.loc 11 364 30
 5689 001e FC89     		ldrh	r4, [r7, #14]
 5690              		.loc 11 364 28
 5691 0020 7B68     		ldr	r3, [r7, #4]
 5692 0022 1C33     		adds	r3, r3, #28
 5693 0024 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 5694 0026 1146     		mov	r1, r2
 5695 0028 1846     		mov	r0, r3
 5696 002a FFF7FEFF 		bl	_ZN5MotorUt_ixEj
 5697 002e 0346     		mov	r3, r0
 5698              		.loc 11 364 30
 5699 0030 2246     		mov	r2, r4	@ movhi
 5700 0032 1A80     		strh	r2, [r3]	@ movhi
 5701              	.L236:
 365:Src/motor.cpp ****     }
 366:Src/motor.cpp **** }
 5702              		.loc 11 366 1
 5703 0034 00BF     		nop
 5704 0036 1437     		adds	r7, r7, #20
 5705              	.LCFI463:
 5706              		.cfi_def_cfa_offset 12
 5707 0038 BD46     		mov	sp, r7
 5708              	.LCFI464:
 5709              		.cfi_def_cfa_register 13
 5710              		@ sp needed
 5711 003a 90BD     		pop	{r4, r7, pc}
 5712              	.L238:
 5713              		.align	2
 5714              	.L237:
 5715 003c 00000000 		.word	htim15
 5716              		.cfi_endproc
 5717              	.LFE4974:
 5719              		.section	.text._ZN5Motor18pos_linearity_initEv,"ax",%progbits
 5720              		.align	1
 5721              		.global	_ZN5Motor18pos_linearity_initEv
 5722              		.syntax unified
 5723              		.thumb
 5724              		.thumb_func
 5725              		.fpu fpv4-sp-d16
 5727              	_ZN5Motor18pos_linearity_initEv:
 5728              	.LFB4975:
 367:Src/motor.cpp **** 
 368:Src/motor.cpp **** 
 369:Src/motor.cpp **** void Motor::pos_linearity_init(void)
 370:Src/motor.cpp **** {
 5729              		.loc 11 370 1
 5730              		.cfi_startproc
 5731              		@ args = 0, pretend = 0, frame = 8
 5732              		@ frame_needed = 1, uses_anonymous_args = 0
 5733              		@ link register save eliminated.
 5734 0000 80B4     		push	{r7}
 5735              	.LCFI465:
 5736              		.cfi_def_cfa_offset 4
 5737              		.cfi_offset 7, -4
 5738 0002 83B0     		sub	sp, sp, #12
 5739              	.LCFI466:
 5740              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccATuxCb.s 			page 246


 5741 0004 00AF     		add	r7, sp, #0
 5742              	.LCFI467:
 5743              		.cfi_def_cfa_register 7
 5744 0006 7860     		str	r0, [r7, #4]
 371:Src/motor.cpp **** /* 	int16_t i = 0;
 372:Src/motor.cpp **** 	for(i=0;i<NUM_LINEARITY_SEG-1;i++)
 373:Src/motor.cpp **** 	{
 374:Src/motor.cpp **** 		L_Slop_Array_[i] = (config_.CURRENT_LINEARITY_[i+1] - config_.CURRENT_LINEARITY_[i]) / (config_.T
 375:Src/motor.cpp **** 	} */
 376:Src/motor.cpp **** }
 5745              		.loc 11 376 1
 5746 0008 00BF     		nop
 5747 000a 0C37     		adds	r7, r7, #12
 5748              	.LCFI468:
 5749              		.cfi_def_cfa_offset 4
 5750 000c BD46     		mov	sp, r7
 5751              	.LCFI469:
 5752              		.cfi_def_cfa_register 13
 5753              		@ sp needed
 5754 000e 5DF8047B 		ldr	r7, [sp], #4
 5755              	.LCFI470:
 5756              		.cfi_restore 7
 5757              		.cfi_def_cfa_offset 0
 5758 0012 7047     		bx	lr
 5759              		.cfi_endproc
 5760              	.LFE4975:
 5762              		.section	.text._ZN5Motor15current_CorrectEl,"ax",%progbits
 5763              		.align	1
 5764              		.global	_ZN5Motor15current_CorrectEl
 5765              		.syntax unified
 5766              		.thumb
 5767              		.thumb_func
 5768              		.fpu fpv4-sp-d16
 5770              	_ZN5Motor15current_CorrectEl:
 5771              	.LFB4976:
 377:Src/motor.cpp **** 
 378:Src/motor.cpp **** float Motor::current_Correct(int32_t Torque_Org)
 379:Src/motor.cpp **** {
 5772              		.loc 11 379 1
 5773              		.cfi_startproc
 5774              		@ args = 0, pretend = 0, frame = 8
 5775              		@ frame_needed = 1, uses_anonymous_args = 0
 5776              		@ link register save eliminated.
 5777 0000 80B4     		push	{r7}
 5778              	.LCFI471:
 5779              		.cfi_def_cfa_offset 4
 5780              		.cfi_offset 7, -4
 5781 0002 83B0     		sub	sp, sp, #12
 5782              	.LCFI472:
 5783              		.cfi_def_cfa_offset 16
 5784 0004 00AF     		add	r7, sp, #0
 5785              	.LCFI473:
 5786              		.cfi_def_cfa_register 7
 5787 0006 7860     		str	r0, [r7, #4]
 5788 0008 3960     		str	r1, [r7]
 380:Src/motor.cpp **** /* 	float slopTotall = 0;
 381:Src/motor.cpp **** 	int32_t Index_A = 0,Index_B = NUM_LINEARITY_SEG-1;
ARM GAS  /tmp/ccATuxCb.s 			page 247


 382:Src/motor.cpp **** 	int32_t i = 0;
 383:Src/motor.cpp ****     float current_Corrected = 0;
 384:Src/motor.cpp **** 	if(Torque_Org>=config_.Torque_LINEARITY_[0] && Torque_Org<config_.Torque_LINEARITY_[NUM_LINEARITY_
 385:Src/motor.cpp **** 	{
 386:Src/motor.cpp **** 		while(1)
 387:Src/motor.cpp **** 		{
 388:Src/motor.cpp **** 			if(Index_B-Index_A == 1)
 389:Src/motor.cpp **** 			{
 390:Src/motor.cpp **** 				break;
 391:Src/motor.cpp **** 			}
 392:Src/motor.cpp **** 			i = (Index_A + Index_B)/2;
 393:Src/motor.cpp **** 			if(Torque_Org<=config_.Torque_LINEARITY_[i])
 394:Src/motor.cpp **** 			{
 395:Src/motor.cpp **** 				Index_B = i;
 396:Src/motor.cpp **** 			}
 397:Src/motor.cpp **** 			else
 398:Src/motor.cpp **** 			{
 399:Src/motor.cpp **** 				Index_A = i;
 400:Src/motor.cpp **** 			}
 401:Src/motor.cpp **** 		}
 402:Src/motor.cpp **** 		current_Corrected = ((Torque_Org - config_.Torque_LINEARITY_[Index_A])* L_Slop_Array_[Index_A]) +
 403:Src/motor.cpp **** 	}
 404:Src/motor.cpp **** 	else if(Torque_Org<config_.Torque_LINEARITY_[0])
 405:Src/motor.cpp **** 	{
 406:Src/motor.cpp **** 		current_Corrected = Torque_Org-config_.Torque_LINEARITY_[0]; 
 407:Src/motor.cpp **** 				if( current_Corrected < - 16384)
 408:Src/motor.cpp **** 		{
 409:Src/motor.cpp **** 			current_Corrected = -16384;
 410:Src/motor.cpp **** 		}
 411:Src/motor.cpp **** 	}	
 412:Src/motor.cpp **** 	else
 413:Src/motor.cpp **** 	{
 414:Src/motor.cpp **** 			slopTotall = (config_.CURRENT_LINEARITY_[NUM_LINEARITY_SEG-1] - config_.CURRENT_LINEARITY_[0])/(
 415:Src/motor.cpp **** 			current_Corrected = ((Torque_Org - config_.Torque_LINEARITY_[NUM_LINEARITY_SEG-1])* slopTotall) 
 416:Src/motor.cpp **** 			if( current_Corrected> 32767 )
 417:Src/motor.cpp **** 			{
 418:Src/motor.cpp **** 				current_Corrected = 32767;
 419:Src/motor.cpp **** 			}
 420:Src/motor.cpp **** 		
 421:Src/motor.cpp **** 	} */
 422:Src/motor.cpp ****     
 423:Src/motor.cpp ****     return 0;
 5789              		.loc 11 423 12
 5790 000a 4FF00003 		mov	r3, #0
 5791 000e 07EE903A 		vmov	s15, r3
 424:Src/motor.cpp **** }
 5792              		.loc 11 424 1
 5793 0012 B0EE670A 		vmov.f32	s0, s15
 5794 0016 0C37     		adds	r7, r7, #12
 5795              	.LCFI474:
 5796              		.cfi_def_cfa_offset 4
 5797 0018 BD46     		mov	sp, r7
 5798              	.LCFI475:
 5799              		.cfi_def_cfa_register 13
 5800              		@ sp needed
 5801 001a 5DF8047B 		ldr	r7, [sp], #4
 5802              	.LCFI476:
ARM GAS  /tmp/ccATuxCb.s 			page 248


 5803              		.cfi_restore 7
 5804              		.cfi_def_cfa_offset 0
 5805 001e 7047     		bx	lr
 5806              		.cfi_endproc
 5807              	.LFE4976:
 5809              		.section	.text._ZN5Motor31setting_motor_current_linearityEmf,"ax",%progbits
 5810              		.align	1
 5811              		.global	_ZN5Motor31setting_motor_current_linearityEmf
 5812              		.syntax unified
 5813              		.thumb
 5814              		.thumb_func
 5815              		.fpu fpv4-sp-d16
 5817              	_ZN5Motor31setting_motor_current_linearityEmf:
 5818              	.LFB4977:
 425:Src/motor.cpp **** 
 426:Src/motor.cpp **** 
 427:Src/motor.cpp **** 
 428:Src/motor.cpp **** 
 429:Src/motor.cpp **** void Motor::setting_motor_current_linearity(uint32_t index, float value)
 430:Src/motor.cpp **** {
 5819              		.loc 11 430 1
 5820              		.cfi_startproc
 5821              		@ args = 0, pretend = 0, frame = 16
 5822              		@ frame_needed = 1, uses_anonymous_args = 0
 5823              		@ link register save eliminated.
 5824 0000 80B4     		push	{r7}
 5825              	.LCFI477:
 5826              		.cfi_def_cfa_offset 4
 5827              		.cfi_offset 7, -4
 5828 0002 85B0     		sub	sp, sp, #20
 5829              	.LCFI478:
 5830              		.cfi_def_cfa_offset 24
 5831 0004 00AF     		add	r7, sp, #0
 5832              	.LCFI479:
 5833              		.cfi_def_cfa_register 7
 5834 0006 F860     		str	r0, [r7, #12]
 5835 0008 B960     		str	r1, [r7, #8]
 5836 000a 87ED010A 		vstr.32	s0, [r7, #4]
 431:Src/motor.cpp ****     if( index < NUM_LINEARITY_SEG )
 5837              		.loc 11 431 5
 5838 000e BB68     		ldr	r3, [r7, #8]
 5839 0010 3B2B     		cmp	r3, #59
 5840 0012 07D8     		bhi	.L244
 432:Src/motor.cpp ****     {
 433:Src/motor.cpp ****         config_.CURRENT_LINEARITY_[index] = value;
 5841              		.loc 11 433 9
 5842 0014 FB68     		ldr	r3, [r7, #12]
 5843 0016 5A68     		ldr	r2, [r3, #4]
 5844              		.loc 11 433 43
 5845 0018 BB68     		ldr	r3, [r7, #8]
 5846 001a 5433     		adds	r3, r3, #84
 5847 001c 9B00     		lsls	r3, r3, #2
 5848 001e 1344     		add	r3, r3, r2
 5849 0020 7A68     		ldr	r2, [r7, #4]	@ float
 5850 0022 1A60     		str	r2, [r3]	@ float
 5851              	.L244:
 434:Src/motor.cpp ****     }
ARM GAS  /tmp/ccATuxCb.s 			page 249


 435:Src/motor.cpp **** 	
 436:Src/motor.cpp **** }
 5852              		.loc 11 436 1
 5853 0024 00BF     		nop
 5854 0026 1437     		adds	r7, r7, #20
 5855              	.LCFI480:
 5856              		.cfi_def_cfa_offset 4
 5857 0028 BD46     		mov	sp, r7
 5858              	.LCFI481:
 5859              		.cfi_def_cfa_register 13
 5860              		@ sp needed
 5861 002a 5DF8047B 		ldr	r7, [sp], #4
 5862              	.LCFI482:
 5863              		.cfi_restore 7
 5864              		.cfi_def_cfa_offset 0
 5865 002e 7047     		bx	lr
 5866              		.cfi_endproc
 5867              	.LFE4977:
 5869              		.section	.text._ZN5Motor27get_motor_current_linearityEm,"ax",%progbits
 5870              		.align	1
 5871              		.global	_ZN5Motor27get_motor_current_linearityEm
 5872              		.syntax unified
 5873              		.thumb
 5874              		.thumb_func
 5875              		.fpu fpv4-sp-d16
 5877              	_ZN5Motor27get_motor_current_linearityEm:
 5878              	.LFB4978:
 437:Src/motor.cpp **** 
 438:Src/motor.cpp **** float Motor::get_motor_current_linearity(uint32_t index)
 439:Src/motor.cpp **** {
 5879              		.loc 11 439 1
 5880              		.cfi_startproc
 5881              		@ args = 0, pretend = 0, frame = 8
 5882              		@ frame_needed = 1, uses_anonymous_args = 0
 5883              		@ link register save eliminated.
 5884 0000 80B4     		push	{r7}
 5885              	.LCFI483:
 5886              		.cfi_def_cfa_offset 4
 5887              		.cfi_offset 7, -4
 5888 0002 83B0     		sub	sp, sp, #12
 5889              	.LCFI484:
 5890              		.cfi_def_cfa_offset 16
 5891 0004 00AF     		add	r7, sp, #0
 5892              	.LCFI485:
 5893              		.cfi_def_cfa_register 7
 5894 0006 7860     		str	r0, [r7, #4]
 5895 0008 3960     		str	r1, [r7]
 440:Src/motor.cpp ****     if( index < NUM_LINEARITY_SEG )
 5896              		.loc 11 440 5
 5897 000a 3B68     		ldr	r3, [r7]
 5898 000c 3B2B     		cmp	r3, #59
 5899 000e 07D8     		bhi	.L246
 441:Src/motor.cpp ****     {
 442:Src/motor.cpp ****         return config_.CURRENT_LINEARITY_[index];
 5900              		.loc 11 442 16
 5901 0010 7B68     		ldr	r3, [r7, #4]
 5902 0012 5A68     		ldr	r2, [r3, #4]
ARM GAS  /tmp/ccATuxCb.s 			page 250


 5903              		.loc 11 442 48
 5904 0014 3B68     		ldr	r3, [r7]
 5905 0016 5433     		adds	r3, r3, #84
 5906 0018 9B00     		lsls	r3, r3, #2
 5907 001a 1344     		add	r3, r3, r2
 5908 001c 1B68     		ldr	r3, [r3]	@ float
 5909 001e 01E0     		b	.L247
 5910              	.L246:
 443:Src/motor.cpp ****     }
 444:Src/motor.cpp ****     else
 445:Src/motor.cpp ****     {
 446:Src/motor.cpp ****         return 0;
 5911              		.loc 11 446 16
 5912 0020 4FF00003 		mov	r3, #0
 5913              	.L247:
 447:Src/motor.cpp ****     }
 448:Src/motor.cpp **** }
 5914              		.loc 11 448 1
 5915 0024 07EE903A 		vmov	s15, r3
 5916 0028 B0EE670A 		vmov.f32	s0, s15
 5917 002c 0C37     		adds	r7, r7, #12
 5918              	.LCFI486:
 5919              		.cfi_def_cfa_offset 4
 5920 002e BD46     		mov	sp, r7
 5921              	.LCFI487:
 5922              		.cfi_def_cfa_register 13
 5923              		@ sp needed
 5924 0030 5DF8047B 		ldr	r7, [sp], #4
 5925              	.LCFI488:
 5926              		.cfi_restore 7
 5927              		.cfi_def_cfa_offset 0
 5928 0034 7047     		bx	lr
 5929              		.cfi_endproc
 5930              	.LFE4978:
 5932              		.section	.text._ZN5Motor30setting_motor_torque_linearityEmf,"ax",%progbits
 5933              		.align	1
 5934              		.global	_ZN5Motor30setting_motor_torque_linearityEmf
 5935              		.syntax unified
 5936              		.thumb
 5937              		.thumb_func
 5938              		.fpu fpv4-sp-d16
 5940              	_ZN5Motor30setting_motor_torque_linearityEmf:
 5941              	.LFB4979:
 449:Src/motor.cpp **** 
 450:Src/motor.cpp **** void Motor::setting_motor_torque_linearity(uint32_t index, float value)
 451:Src/motor.cpp **** {
 5942              		.loc 11 451 1
 5943              		.cfi_startproc
 5944              		@ args = 0, pretend = 0, frame = 16
 5945              		@ frame_needed = 1, uses_anonymous_args = 0
 5946              		@ link register save eliminated.
 5947 0000 80B4     		push	{r7}
 5948              	.LCFI489:
 5949              		.cfi_def_cfa_offset 4
 5950              		.cfi_offset 7, -4
 5951 0002 85B0     		sub	sp, sp, #20
 5952              	.LCFI490:
ARM GAS  /tmp/ccATuxCb.s 			page 251


 5953              		.cfi_def_cfa_offset 24
 5954 0004 00AF     		add	r7, sp, #0
 5955              	.LCFI491:
 5956              		.cfi_def_cfa_register 7
 5957 0006 F860     		str	r0, [r7, #12]
 5958 0008 B960     		str	r1, [r7, #8]
 5959 000a 87ED010A 		vstr.32	s0, [r7, #4]
 452:Src/motor.cpp ****     if(index < NUM_LINEARITY_SEG )
 5960              		.loc 11 452 5
 5961 000e BB68     		ldr	r3, [r7, #8]
 5962 0010 3B2B     		cmp	r3, #59
 5963 0012 07D8     		bhi	.L250
 453:Src/motor.cpp ****     {
 454:Src/motor.cpp ****         config_.Torque_LINEARITY_[index] = value;
 5964              		.loc 11 454 9
 5965 0014 FB68     		ldr	r3, [r7, #12]
 5966 0016 5A68     		ldr	r2, [r3, #4]
 5967              		.loc 11 454 42
 5968 0018 BB68     		ldr	r3, [r7, #8]
 5969 001a 1833     		adds	r3, r3, #24
 5970 001c 9B00     		lsls	r3, r3, #2
 5971 001e 1344     		add	r3, r3, r2
 5972 0020 7A68     		ldr	r2, [r7, #4]	@ float
 5973 0022 1A60     		str	r2, [r3]	@ float
 5974              	.L250:
 455:Src/motor.cpp ****     }
 456:Src/motor.cpp **** 	
 457:Src/motor.cpp **** }
 5975              		.loc 11 457 1
 5976 0024 00BF     		nop
 5977 0026 1437     		adds	r7, r7, #20
 5978              	.LCFI492:
 5979              		.cfi_def_cfa_offset 4
 5980 0028 BD46     		mov	sp, r7
 5981              	.LCFI493:
 5982              		.cfi_def_cfa_register 13
 5983              		@ sp needed
 5984 002a 5DF8047B 		ldr	r7, [sp], #4
 5985              	.LCFI494:
 5986              		.cfi_restore 7
 5987              		.cfi_def_cfa_offset 0
 5988 002e 7047     		bx	lr
 5989              		.cfi_endproc
 5990              	.LFE4979:
 5992              		.section	.text._ZN5Motor26get_motor_torque_linearityEm,"ax",%progbits
 5993              		.align	1
 5994              		.global	_ZN5Motor26get_motor_torque_linearityEm
 5995              		.syntax unified
 5996              		.thumb
 5997              		.thumb_func
 5998              		.fpu fpv4-sp-d16
 6000              	_ZN5Motor26get_motor_torque_linearityEm:
 6001              	.LFB4980:
 458:Src/motor.cpp **** 
 459:Src/motor.cpp **** float Motor::get_motor_torque_linearity(uint32_t index)
 460:Src/motor.cpp **** {
 6002              		.loc 11 460 1
ARM GAS  /tmp/ccATuxCb.s 			page 252


 6003              		.cfi_startproc
 6004              		@ args = 0, pretend = 0, frame = 8
 6005              		@ frame_needed = 1, uses_anonymous_args = 0
 6006              		@ link register save eliminated.
 6007 0000 80B4     		push	{r7}
 6008              	.LCFI495:
 6009              		.cfi_def_cfa_offset 4
 6010              		.cfi_offset 7, -4
 6011 0002 83B0     		sub	sp, sp, #12
 6012              	.LCFI496:
 6013              		.cfi_def_cfa_offset 16
 6014 0004 00AF     		add	r7, sp, #0
 6015              	.LCFI497:
 6016              		.cfi_def_cfa_register 7
 6017 0006 7860     		str	r0, [r7, #4]
 6018 0008 3960     		str	r1, [r7]
 461:Src/motor.cpp ****     if( index < NUM_LINEARITY_SEG )
 6019              		.loc 11 461 5
 6020 000a 3B68     		ldr	r3, [r7]
 6021 000c 3B2B     		cmp	r3, #59
 6022 000e 07D8     		bhi	.L252
 462:Src/motor.cpp ****     {
 463:Src/motor.cpp ****         return config_.Torque_LINEARITY_[index];
 6023              		.loc 11 463 16
 6024 0010 7B68     		ldr	r3, [r7, #4]
 6025 0012 5A68     		ldr	r2, [r3, #4]
 6026              		.loc 11 463 47
 6027 0014 3B68     		ldr	r3, [r7]
 6028 0016 1833     		adds	r3, r3, #24
 6029 0018 9B00     		lsls	r3, r3, #2
 6030 001a 1344     		add	r3, r3, r2
 6031 001c 1B68     		ldr	r3, [r3]	@ float
 6032 001e 01E0     		b	.L253
 6033              	.L252:
 464:Src/motor.cpp ****     }
 465:Src/motor.cpp ****     else
 466:Src/motor.cpp ****     {
 467:Src/motor.cpp ****         return 0;
 6034              		.loc 11 467 16
 6035 0020 4FF00003 		mov	r3, #0
 6036              	.L253:
 468:Src/motor.cpp ****     }
 469:Src/motor.cpp **** }
 6037              		.loc 11 469 1
 6038 0024 07EE903A 		vmov	s15, r3
 6039 0028 B0EE670A 		vmov.f32	s0, s15
 6040 002c 0C37     		adds	r7, r7, #12
 6041              	.LCFI498:
 6042              		.cfi_def_cfa_offset 4
 6043 002e BD46     		mov	sp, r7
 6044              	.LCFI499:
 6045              		.cfi_def_cfa_register 13
 6046              		@ sp needed
 6047 0030 5DF8047B 		ldr	r7, [sp], #4
 6048              	.LCFI500:
 6049              		.cfi_restore 7
 6050              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccATuxCb.s 			page 253


 6051 0034 7047     		bx	lr
 6052              		.cfi_endproc
 6053              	.LFE4980:
 6055              		.section	.text._ZN5Motor25get_positive_torque_slopeEm,"ax",%progbits
 6056              		.align	1
 6057              		.global	_ZN5Motor25get_positive_torque_slopeEm
 6058              		.syntax unified
 6059              		.thumb
 6060              		.thumb_func
 6061              		.fpu fpv4-sp-d16
 6063              	_ZN5Motor25get_positive_torque_slopeEm:
 6064              	.LFB4981:
 470:Src/motor.cpp **** 
 471:Src/motor.cpp **** float Motor::get_positive_torque_slope(uint32_t index)
 472:Src/motor.cpp **** {
 6065              		.loc 11 472 1
 6066              		.cfi_startproc
 6067              		@ args = 0, pretend = 0, frame = 8
 6068              		@ frame_needed = 1, uses_anonymous_args = 0
 6069              		@ link register save eliminated.
 6070 0000 80B4     		push	{r7}
 6071              	.LCFI501:
 6072              		.cfi_def_cfa_offset 4
 6073              		.cfi_offset 7, -4
 6074 0002 83B0     		sub	sp, sp, #12
 6075              	.LCFI502:
 6076              		.cfi_def_cfa_offset 16
 6077 0004 00AF     		add	r7, sp, #0
 6078              	.LCFI503:
 6079              		.cfi_def_cfa_register 7
 6080 0006 7860     		str	r0, [r7, #4]
 6081 0008 3960     		str	r1, [r7]
 473:Src/motor.cpp ****     if(index < NUM_LINEARITY_SEG)
 6082              		.loc 11 473 5
 6083 000a 3B68     		ldr	r3, [r7]
 6084 000c 3B2B     		cmp	r3, #59
 6085 000e 06D8     		bhi	.L255
 474:Src/motor.cpp ****     {
 475:Src/motor.cpp ****         return L_Slop_Array_P_[index];
 6086              		.loc 11 475 37
 6087 0010 7A68     		ldr	r2, [r7, #4]
 6088 0012 3B68     		ldr	r3, [r7]
 6089 0014 3433     		adds	r3, r3, #52
 6090 0016 9B00     		lsls	r3, r3, #2
 6091 0018 1344     		add	r3, r3, r2
 6092 001a 1B68     		ldr	r3, [r3]	@ float
 6093 001c 01E0     		b	.L256
 6094              	.L255:
 476:Src/motor.cpp ****     }
 477:Src/motor.cpp ****     else
 478:Src/motor.cpp ****     {
 479:Src/motor.cpp ****         return 0;
 6095              		.loc 11 479 16
 6096 001e 4FF00003 		mov	r3, #0
 6097              	.L256:
 480:Src/motor.cpp ****     }
 481:Src/motor.cpp **** }
ARM GAS  /tmp/ccATuxCb.s 			page 254


 6098              		.loc 11 481 1
 6099 0022 07EE903A 		vmov	s15, r3
 6100 0026 B0EE670A 		vmov.f32	s0, s15
 6101 002a 0C37     		adds	r7, r7, #12
 6102              	.LCFI504:
 6103              		.cfi_def_cfa_offset 4
 6104 002c BD46     		mov	sp, r7
 6105              	.LCFI505:
 6106              		.cfi_def_cfa_register 13
 6107              		@ sp needed
 6108 002e 5DF8047B 		ldr	r7, [sp], #4
 6109              	.LCFI506:
 6110              		.cfi_restore 7
 6111              		.cfi_def_cfa_offset 0
 6112 0032 7047     		bx	lr
 6113              		.cfi_endproc
 6114              	.LFE4981:
 6116              		.section	.text._ZN5Motor25get_negative_torque_slopeEm,"ax",%progbits
 6117              		.align	1
 6118              		.global	_ZN5Motor25get_negative_torque_slopeEm
 6119              		.syntax unified
 6120              		.thumb
 6121              		.thumb_func
 6122              		.fpu fpv4-sp-d16
 6124              	_ZN5Motor25get_negative_torque_slopeEm:
 6125              	.LFB4982:
 482:Src/motor.cpp **** float Motor::get_negative_torque_slope(uint32_t index)
 483:Src/motor.cpp **** {
 6126              		.loc 11 483 1
 6127              		.cfi_startproc
 6128              		@ args = 0, pretend = 0, frame = 8
 6129              		@ frame_needed = 1, uses_anonymous_args = 0
 6130              		@ link register save eliminated.
 6131 0000 80B4     		push	{r7}
 6132              	.LCFI507:
 6133              		.cfi_def_cfa_offset 4
 6134              		.cfi_offset 7, -4
 6135 0002 83B0     		sub	sp, sp, #12
 6136              	.LCFI508:
 6137              		.cfi_def_cfa_offset 16
 6138 0004 00AF     		add	r7, sp, #0
 6139              	.LCFI509:
 6140              		.cfi_def_cfa_register 7
 6141 0006 7860     		str	r0, [r7, #4]
 6142 0008 3960     		str	r1, [r7]
 484:Src/motor.cpp ****     if(index < NUM_LINEARITY_SEG)
 6143              		.loc 11 484 5
 6144 000a 3B68     		ldr	r3, [r7]
 6145 000c 3B2B     		cmp	r3, #59
 6146 000e 06D8     		bhi	.L258
 485:Src/motor.cpp ****     {
 486:Src/motor.cpp ****         return L_Slop_Array_N_[index];
 6147              		.loc 11 486 37
 6148 0010 7A68     		ldr	r2, [r7, #4]
 6149 0012 3B68     		ldr	r3, [r7]
 6150 0014 7033     		adds	r3, r3, #112
 6151 0016 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccATuxCb.s 			page 255


 6152 0018 1344     		add	r3, r3, r2
 6153 001a 1B68     		ldr	r3, [r3]	@ float
 6154 001c 01E0     		b	.L259
 6155              	.L258:
 487:Src/motor.cpp ****     }
 488:Src/motor.cpp ****     else
 489:Src/motor.cpp ****     {
 490:Src/motor.cpp ****         return 0;
 6156              		.loc 11 490 16
 6157 001e 4FF00003 		mov	r3, #0
 6158              	.L259:
 491:Src/motor.cpp ****     }
 492:Src/motor.cpp **** }
 6159              		.loc 11 492 1
 6160 0022 07EE903A 		vmov	s15, r3
 6161 0026 B0EE670A 		vmov.f32	s0, s15
 6162 002a 0C37     		adds	r7, r7, #12
 6163              	.LCFI510:
 6164              		.cfi_def_cfa_offset 4
 6165 002c BD46     		mov	sp, r7
 6166              	.LCFI511:
 6167              		.cfi_def_cfa_register 13
 6168              		@ sp needed
 6169 002e 5DF8047B 		ldr	r7, [sp], #4
 6170              	.LCFI512:
 6171              		.cfi_restore 7
 6172              		.cfi_def_cfa_offset 0
 6173 0032 7047     		bx	lr
 6174              		.cfi_endproc
 6175              	.LFE4982:
 6177              		.section	.text._ZN5Motor29setting_positive_torque_slopeEmf,"ax",%progbits
 6178              		.align	1
 6179              		.global	_ZN5Motor29setting_positive_torque_slopeEmf
 6180              		.syntax unified
 6181              		.thumb
 6182              		.thumb_func
 6183              		.fpu fpv4-sp-d16
 6185              	_ZN5Motor29setting_positive_torque_slopeEmf:
 6186              	.LFB4983:
 493:Src/motor.cpp **** 
 494:Src/motor.cpp **** void  Motor::setting_positive_torque_slope(uint32_t index, float value)
 495:Src/motor.cpp **** {
 6187              		.loc 11 495 1
 6188              		.cfi_startproc
 6189              		@ args = 0, pretend = 0, frame = 16
 6190              		@ frame_needed = 1, uses_anonymous_args = 0
 6191              		@ link register save eliminated.
 6192 0000 80B4     		push	{r7}
 6193              	.LCFI513:
 6194              		.cfi_def_cfa_offset 4
 6195              		.cfi_offset 7, -4
 6196 0002 85B0     		sub	sp, sp, #20
 6197              	.LCFI514:
 6198              		.cfi_def_cfa_offset 24
 6199 0004 00AF     		add	r7, sp, #0
 6200              	.LCFI515:
 6201              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccATuxCb.s 			page 256


 6202 0006 F860     		str	r0, [r7, #12]
 6203 0008 B960     		str	r1, [r7, #8]
 6204 000a 87ED010A 		vstr.32	s0, [r7, #4]
 496:Src/motor.cpp ****     if(index < NUM_LINEARITY_SEG )
 6205              		.loc 11 496 5
 6206 000e BB68     		ldr	r3, [r7, #8]
 6207 0010 3B2B     		cmp	r3, #59
 6208 0012 0ED8     		bhi	.L262
 497:Src/motor.cpp ****     {
 498:Src/motor.cpp ****         L_Slop_Array_P_[index] = value;
 6209              		.loc 11 498 32
 6210 0014 FA68     		ldr	r2, [r7, #12]
 6211 0016 BB68     		ldr	r3, [r7, #8]
 6212 0018 3433     		adds	r3, r3, #52
 6213 001a 9B00     		lsls	r3, r3, #2
 6214 001c 1344     		add	r3, r3, r2
 6215 001e 7A68     		ldr	r2, [r7, #4]	@ float
 6216 0020 1A60     		str	r2, [r3]	@ float
 499:Src/motor.cpp ****         config_.Torque_LINEARITY_[index] = value;
 6217              		.loc 11 499 9
 6218 0022 FB68     		ldr	r3, [r7, #12]
 6219 0024 5A68     		ldr	r2, [r3, #4]
 6220              		.loc 11 499 42
 6221 0026 BB68     		ldr	r3, [r7, #8]
 6222 0028 1833     		adds	r3, r3, #24
 6223 002a 9B00     		lsls	r3, r3, #2
 6224 002c 1344     		add	r3, r3, r2
 6225 002e 7A68     		ldr	r2, [r7, #4]	@ float
 6226 0030 1A60     		str	r2, [r3]	@ float
 6227              	.L262:
 500:Src/motor.cpp ****     }
 501:Src/motor.cpp **** }
 6228              		.loc 11 501 1
 6229 0032 00BF     		nop
 6230 0034 1437     		adds	r7, r7, #20
 6231              	.LCFI516:
 6232              		.cfi_def_cfa_offset 4
 6233 0036 BD46     		mov	sp, r7
 6234              	.LCFI517:
 6235              		.cfi_def_cfa_register 13
 6236              		@ sp needed
 6237 0038 5DF8047B 		ldr	r7, [sp], #4
 6238              	.LCFI518:
 6239              		.cfi_restore 7
 6240              		.cfi_def_cfa_offset 0
 6241 003c 7047     		bx	lr
 6242              		.cfi_endproc
 6243              	.LFE4983:
 6245              		.section	.text._ZN5Motor29setting_negative_torque_slopeEmf,"ax",%progbits
 6246              		.align	1
 6247              		.global	_ZN5Motor29setting_negative_torque_slopeEmf
 6248              		.syntax unified
 6249              		.thumb
 6250              		.thumb_func
 6251              		.fpu fpv4-sp-d16
 6253              	_ZN5Motor29setting_negative_torque_slopeEmf:
 6254              	.LFB4984:
ARM GAS  /tmp/ccATuxCb.s 			page 257


 502:Src/motor.cpp **** void  Motor::setting_negative_torque_slope(uint32_t index, float value)
 503:Src/motor.cpp **** {
 6255              		.loc 11 503 1
 6256              		.cfi_startproc
 6257              		@ args = 0, pretend = 0, frame = 16
 6258              		@ frame_needed = 1, uses_anonymous_args = 0
 6259              		@ link register save eliminated.
 6260 0000 80B4     		push	{r7}
 6261              	.LCFI519:
 6262              		.cfi_def_cfa_offset 4
 6263              		.cfi_offset 7, -4
 6264 0002 85B0     		sub	sp, sp, #20
 6265              	.LCFI520:
 6266              		.cfi_def_cfa_offset 24
 6267 0004 00AF     		add	r7, sp, #0
 6268              	.LCFI521:
 6269              		.cfi_def_cfa_register 7
 6270 0006 F860     		str	r0, [r7, #12]
 6271 0008 B960     		str	r1, [r7, #8]
 6272 000a 87ED010A 		vstr.32	s0, [r7, #4]
 504:Src/motor.cpp ****     if(index < NUM_LINEARITY_SEG )
 6273              		.loc 11 504 5
 6274 000e BB68     		ldr	r3, [r7, #8]
 6275 0010 3B2B     		cmp	r3, #59
 6276 0012 0ED8     		bhi	.L265
 505:Src/motor.cpp ****     {
 506:Src/motor.cpp ****         L_Slop_Array_N_[index] = value;
 6277              		.loc 11 506 32
 6278 0014 FA68     		ldr	r2, [r7, #12]
 6279 0016 BB68     		ldr	r3, [r7, #8]
 6280 0018 7033     		adds	r3, r3, #112
 6281 001a 9B00     		lsls	r3, r3, #2
 6282 001c 1344     		add	r3, r3, r2
 6283 001e 7A68     		ldr	r2, [r7, #4]	@ float
 6284 0020 1A60     		str	r2, [r3]	@ float
 507:Src/motor.cpp ****         config_.CURRENT_LINEARITY_[index] = value;
 6285              		.loc 11 507 9
 6286 0022 FB68     		ldr	r3, [r7, #12]
 6287 0024 5A68     		ldr	r2, [r3, #4]
 6288              		.loc 11 507 43
 6289 0026 BB68     		ldr	r3, [r7, #8]
 6290 0028 5433     		adds	r3, r3, #84
 6291 002a 9B00     		lsls	r3, r3, #2
 6292 002c 1344     		add	r3, r3, r2
 6293 002e 7A68     		ldr	r2, [r7, #4]	@ float
 6294 0030 1A60     		str	r2, [r3]	@ float
 6295              	.L265:
 508:Src/motor.cpp ****     }
 509:Src/motor.cpp **** }
 6296              		.loc 11 509 1
 6297 0032 00BF     		nop
 6298 0034 1437     		adds	r7, r7, #20
 6299              	.LCFI522:
 6300              		.cfi_def_cfa_offset 4
 6301 0036 BD46     		mov	sp, r7
 6302              	.LCFI523:
 6303              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccATuxCb.s 			page 258


 6304              		@ sp needed
 6305 0038 5DF8047B 		ldr	r7, [sp], #4
 6306              	.LCFI524:
 6307              		.cfi_restore 7
 6308              		.cfi_def_cfa_offset 0
 6309 003c 7047     		bx	lr
 6310              		.cfi_endproc
 6311              	.LFE4984:
 6313              		.section	.text._ZN5Motor28setting_current2torque_slopeEmf,"ax",%progbits
 6314              		.align	1
 6315              		.global	_ZN5Motor28setting_current2torque_slopeEmf
 6316              		.syntax unified
 6317              		.thumb
 6318              		.thumb_func
 6319              		.fpu fpv4-sp-d16
 6321              	_ZN5Motor28setting_current2torque_slopeEmf:
 6322              	.LFB4985:
 510:Src/motor.cpp **** 
 511:Src/motor.cpp **** void  Motor::setting_current2torque_slope(uint32_t index, float value)
 512:Src/motor.cpp **** {
 6323              		.loc 11 512 1
 6324              		.cfi_startproc
 6325              		@ args = 0, pretend = 0, frame = 16
 6326              		@ frame_needed = 1, uses_anonymous_args = 0
 6327              		@ link register save eliminated.
 6328 0000 80B4     		push	{r7}
 6329              	.LCFI525:
 6330              		.cfi_def_cfa_offset 4
 6331              		.cfi_offset 7, -4
 6332 0002 85B0     		sub	sp, sp, #20
 6333              	.LCFI526:
 6334              		.cfi_def_cfa_offset 24
 6335 0004 00AF     		add	r7, sp, #0
 6336              	.LCFI527:
 6337              		.cfi_def_cfa_register 7
 6338 0006 F860     		str	r0, [r7, #12]
 6339 0008 B960     		str	r1, [r7, #8]
 6340 000a 87ED010A 		vstr.32	s0, [r7, #4]
 513:Src/motor.cpp ****     if(index < 2*NUM_LINEARITY_SEG )
 6341              		.loc 11 513 5
 6342 000e BB68     		ldr	r3, [r7, #8]
 6343 0010 772B     		cmp	r3, #119
 6344 0012 07D8     		bhi	.L268
 514:Src/motor.cpp ****     {
 515:Src/motor.cpp ****         config_.CURRENT2TORQUE_COEFF[index] = value;
 6345              		.loc 11 515 9
 6346 0014 FB68     		ldr	r3, [r7, #12]
 6347 0016 5A68     		ldr	r2, [r3, #4]
 6348              		.loc 11 515 45
 6349 0018 BB68     		ldr	r3, [r7, #8]
 6350 001a 9033     		adds	r3, r3, #144
 6351 001c 9B00     		lsls	r3, r3, #2
 6352 001e 1344     		add	r3, r3, r2
 6353 0020 7A68     		ldr	r2, [r7, #4]	@ float
 6354 0022 1A60     		str	r2, [r3]	@ float
 6355              	.L268:
 516:Src/motor.cpp ****     }
ARM GAS  /tmp/ccATuxCb.s 			page 259


 517:Src/motor.cpp **** }
 6356              		.loc 11 517 1
 6357 0024 00BF     		nop
 6358 0026 1437     		adds	r7, r7, #20
 6359              	.LCFI528:
 6360              		.cfi_def_cfa_offset 4
 6361 0028 BD46     		mov	sp, r7
 6362              	.LCFI529:
 6363              		.cfi_def_cfa_register 13
 6364              		@ sp needed
 6365 002a 5DF8047B 		ldr	r7, [sp], #4
 6366              	.LCFI530:
 6367              		.cfi_restore 7
 6368              		.cfi_def_cfa_offset 0
 6369 002e 7047     		bx	lr
 6370              		.cfi_endproc
 6371              	.LFE4985:
 6373              		.section	.text._ZN5Motor28getting_current2torque_slopeEm,"ax",%progbits
 6374              		.align	1
 6375              		.global	_ZN5Motor28getting_current2torque_slopeEm
 6376              		.syntax unified
 6377              		.thumb
 6378              		.thumb_func
 6379              		.fpu fpv4-sp-d16
 6381              	_ZN5Motor28getting_current2torque_slopeEm:
 6382              	.LFB4986:
 518:Src/motor.cpp **** 
 519:Src/motor.cpp **** 
 520:Src/motor.cpp **** float Motor::getting_current2torque_slope(uint32_t index)
 521:Src/motor.cpp **** {
 6383              		.loc 11 521 1
 6384              		.cfi_startproc
 6385              		@ args = 0, pretend = 0, frame = 8
 6386              		@ frame_needed = 1, uses_anonymous_args = 0
 6387              		@ link register save eliminated.
 6388 0000 80B4     		push	{r7}
 6389              	.LCFI531:
 6390              		.cfi_def_cfa_offset 4
 6391              		.cfi_offset 7, -4
 6392 0002 83B0     		sub	sp, sp, #12
 6393              	.LCFI532:
 6394              		.cfi_def_cfa_offset 16
 6395 0004 00AF     		add	r7, sp, #0
 6396              	.LCFI533:
 6397              		.cfi_def_cfa_register 7
 6398 0006 7860     		str	r0, [r7, #4]
 6399 0008 3960     		str	r1, [r7]
 522:Src/motor.cpp ****     if(index < 2*NUM_LINEARITY_SEG)
 6400              		.loc 11 522 5
 6401 000a 3B68     		ldr	r3, [r7]
 6402 000c 772B     		cmp	r3, #119
 6403 000e 07D8     		bhi	.L270
 523:Src/motor.cpp ****     {
 524:Src/motor.cpp ****         return config_.CURRENT2TORQUE_COEFF[index];
 6404              		.loc 11 524 16
 6405 0010 7B68     		ldr	r3, [r7, #4]
 6406 0012 5A68     		ldr	r2, [r3, #4]
ARM GAS  /tmp/ccATuxCb.s 			page 260


 6407              		.loc 11 524 50
 6408 0014 3B68     		ldr	r3, [r7]
 6409 0016 9033     		adds	r3, r3, #144
 6410 0018 9B00     		lsls	r3, r3, #2
 6411 001a 1344     		add	r3, r3, r2
 6412 001c 1B68     		ldr	r3, [r3]	@ float
 6413 001e 01E0     		b	.L271
 6414              	.L270:
 525:Src/motor.cpp ****     }
 526:Src/motor.cpp ****     else
 527:Src/motor.cpp ****     {
 528:Src/motor.cpp ****         return 0;
 6415              		.loc 11 528 16
 6416 0020 4FF00003 		mov	r3, #0
 6417              	.L271:
 529:Src/motor.cpp ****     }
 530:Src/motor.cpp **** }
 6418              		.loc 11 530 1
 6419 0024 07EE903A 		vmov	s15, r3
 6420 0028 B0EE670A 		vmov.f32	s0, s15
 6421 002c 0C37     		adds	r7, r7, #12
 6422              	.LCFI534:
 6423              		.cfi_def_cfa_offset 4
 6424 002e BD46     		mov	sp, r7
 6425              	.LCFI535:
 6426              		.cfi_def_cfa_register 13
 6427              		@ sp needed
 6428 0030 5DF8047B 		ldr	r7, [sp], #4
 6429              	.LCFI536:
 6430              		.cfi_restore 7
 6431              		.cfi_def_cfa_offset 0
 6432 0034 7047     		bx	lr
 6433              		.cfi_endproc
 6434              	.LFE4986:
 6436              		.section	.text._ZN5Motor27convert_torque_from_currentEfPfmf,"ax",%progbits
 6437              		.align	1
 6438              		.global	_ZN5Motor27convert_torque_from_currentEfPfmf
 6439              		.syntax unified
 6440              		.thumb
 6441              		.thumb_func
 6442              		.fpu fpv4-sp-d16
 6444              	_ZN5Motor27convert_torque_from_currentEfPfmf:
 6445              	.LFB4987:
 531:Src/motor.cpp **** float Motor::convert_torque_from_current(float current,float *current2torque_coeff,uint32_t coeff_s
 532:Src/motor.cpp **** {
 6446              		.loc 11 532 1
 6447              		.cfi_startproc
 6448              		@ args = 0, pretend = 0, frame = 32
 6449              		@ frame_needed = 1, uses_anonymous_args = 0
 6450              		@ link register save eliminated.
 6451 0000 80B4     		push	{r7}
 6452              	.LCFI537:
 6453              		.cfi_def_cfa_offset 4
 6454              		.cfi_offset 7, -4
 6455 0002 89B0     		sub	sp, sp, #36
 6456              	.LCFI538:
 6457              		.cfi_def_cfa_offset 40
ARM GAS  /tmp/ccATuxCb.s 			page 261


 6458 0004 00AF     		add	r7, sp, #0
 6459              	.LCFI539:
 6460              		.cfi_def_cfa_register 7
 6461 0006 7861     		str	r0, [r7, #20]
 6462 0008 87ED040A 		vstr.32	s0, [r7, #16]
 6463 000c F960     		str	r1, [r7, #12]
 6464 000e BA60     		str	r2, [r7, #8]
 6465 0010 C7ED010A 		vstr.32	s1, [r7, #4]
 533:Src/motor.cpp ****     uint32_t idex = (uint32_t)((fabsf(current) *current_step)); 
 6466              		.loc 11 533 38
 6467 0014 D7ED047A 		vldr.32	s15, [r7, #16]
 6468 0018 B0EEE77A 		vabs.f32	s14, s15
 6469              		.loc 11 533 48
 6470 001c D7ED017A 		vldr.32	s15, [r7, #4]
 6471 0020 67EE277A 		vmul.f32	s15, s14, s15
 6472              		.loc 11 533 14
 6473 0024 FCEEE77A 		vcvt.u32.f32	s15, s15
 6474 0028 17EE903A 		vmov	r3, s15	@ int
 6475 002c FB61     		str	r3, [r7, #28]
 534:Src/motor.cpp ****     float torque_constant = 0;
 6476              		.loc 11 534 11
 6477 002e 4FF00003 		mov	r3, #0
 6478 0032 BB61     		str	r3, [r7, #24]	@ float
 535:Src/motor.cpp **** 
 536:Src/motor.cpp ****     if(using_old_torque_constant_ == true)
 6479              		.loc 11 536 8
 6480 0034 7B69     		ldr	r3, [r7, #20]
 6481 0036 93F8CC30 		ldrb	r3, [r3, #204]	@ zero_extendqisi2
 6482              		.loc 11 536 5
 6483 003a 012B     		cmp	r3, #1
 6484 003c 02D1     		bne	.L273
 537:Src/motor.cpp ****     {
 538:Src/motor.cpp ****         return current;
 6485              		.loc 11 538 16
 6486 003e D7ED047A 		vldr.32	s15, [r7, #16]
 6487 0042 1FE0     		b	.L274
 6488              	.L273:
 539:Src/motor.cpp ****     }
 540:Src/motor.cpp ****     
 541:Src/motor.cpp ****     if( idex > (coeff_size -1) )
 6489              		.loc 11 541 28
 6490 0044 BB68     		ldr	r3, [r7, #8]
 6491 0046 013B     		subs	r3, r3, #1
 6492              		.loc 11 541 5
 6493 0048 FA69     		ldr	r2, [r7, #28]
 6494 004a 9A42     		cmp	r2, r3
 6495 004c 02D9     		bls	.L275
 542:Src/motor.cpp ****     {
 543:Src/motor.cpp ****         idex = coeff_size -1;
 6496              		.loc 11 543 14
 6497 004e BB68     		ldr	r3, [r7, #8]
 6498 0050 013B     		subs	r3, r3, #1
 6499 0052 FB61     		str	r3, [r7, #28]
 6500              	.L275:
 544:Src/motor.cpp ****     }
 545:Src/motor.cpp ****     
 546:Src/motor.cpp ****     torque_constant = current2torque_coeff[2*idex + (current < 0.0f)];
ARM GAS  /tmp/ccATuxCb.s 			page 262


 6501              		.loc 11 546 45
 6502 0054 FB69     		ldr	r3, [r7, #28]
 6503 0056 5B00     		lsls	r3, r3, #1
 6504              		.loc 11 546 62
 6505 0058 D7ED047A 		vldr.32	s15, [r7, #16]
 6506 005c F5EEC07A 		vcmpe.f32	s15, #0
 6507 0060 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 6508 0064 4CBF     		ite	mi
 6509 0066 0122     		movmi	r2, #1
 6510 0068 0022     		movpl	r2, #0
 6511 006a D2B2     		uxtb	r2, r2
 6512              		.loc 11 546 51
 6513 006c 1344     		add	r3, r3, r2
 6514              		.loc 11 546 69
 6515 006e 9B00     		lsls	r3, r3, #2
 6516 0070 FA68     		ldr	r2, [r7, #12]
 6517 0072 1344     		add	r3, r3, r2
 6518              		.loc 11 546 21
 6519 0074 1B68     		ldr	r3, [r3]	@ float
 6520 0076 BB61     		str	r3, [r7, #24]	@ float
 547:Src/motor.cpp ****     
 548:Src/motor.cpp ****     return current * torque_constant;
 6521              		.loc 11 548 22
 6522 0078 97ED047A 		vldr.32	s14, [r7, #16]
 6523 007c D7ED067A 		vldr.32	s15, [r7, #24]
 6524 0080 67EE277A 		vmul.f32	s15, s14, s15
 6525              	.L274:
 549:Src/motor.cpp **** }
 6526              		.loc 11 549 1
 6527 0084 B0EE670A 		vmov.f32	s0, s15
 6528 0088 2437     		adds	r7, r7, #36
 6529              	.LCFI540:
 6530              		.cfi_def_cfa_offset 4
 6531 008a BD46     		mov	sp, r7
 6532              	.LCFI541:
 6533              		.cfi_def_cfa_register 13
 6534              		@ sp needed
 6535 008c 5DF8047B 		ldr	r7, [sp], #4
 6536              	.LCFI542:
 6537              		.cfi_restore 7
 6538              		.cfi_def_cfa_offset 0
 6539 0090 7047     		bx	lr
 6540              		.cfi_endproc
 6541              	.LFE4987:
 6543              		.section	.text._ZN5Motor28check_for_current_saturationEm,"ax",%progbits
 6544              		.align	1
 6545              		.global	_ZN5Motor28check_for_current_saturationEm
 6546              		.syntax unified
 6547              		.thumb
 6548              		.thumb_func
 6549              		.fpu fpv4-sp-d16
 6551              	_ZN5Motor28check_for_current_saturationEm:
 6552              	.LFB4988:
 550:Src/motor.cpp **** 
 551:Src/motor.cpp **** 
 552:Src/motor.cpp **** bool Motor::check_for_current_saturation(const uint32_t ADCValue)
 553:Src/motor.cpp **** {
ARM GAS  /tmp/ccATuxCb.s 			page 263


 6553              		.loc 11 553 1
 6554              		.cfi_startproc
 6555              		@ args = 0, pretend = 0, frame = 8
 6556              		@ frame_needed = 1, uses_anonymous_args = 0
 6557              		@ link register save eliminated.
 6558 0000 80B4     		push	{r7}
 6559              	.LCFI543:
 6560              		.cfi_def_cfa_offset 4
 6561              		.cfi_offset 7, -4
 6562 0002 83B0     		sub	sp, sp, #12
 6563              	.LCFI544:
 6564              		.cfi_def_cfa_offset 16
 6565 0004 00AF     		add	r7, sp, #0
 6566              	.LCFI545:
 6567              		.cfi_def_cfa_register 7
 6568 0006 7860     		str	r0, [r7, #4]
 6569 0008 3960     		str	r1, [r7]
 554:Src/motor.cpp ****         // Make sure the measurements don't come too close to the current sensor's hardware limitat
 555:Src/motor.cpp ****     if (ADCValue < CURRENT_ADC_LOWER_BOUND || ADCValue > CURRENT_ADC_UPPER_BOUND) {
 6570              		.loc 11 555 5
 6571 000a 3B68     		ldr	r3, [r7]
 6572 000c B3F5BA7F 		cmp	r3, #372
 6573 0010 04D3     		bcc	.L277
 6574              		.loc 11 555 44 discriminator 1
 6575 0012 3B68     		ldr	r3, [r7]
 6576 0014 40F68B62 		movw	r2, #3723
 6577 0018 9342     		cmp	r3, r2
 6578 001a 0CD9     		bls	.L278
 6579              	.L277:
 556:Src/motor.cpp ****         error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_c
 6580              		.loc 11 556 82
 6581 001c 7B68     		ldr	r3, [r7, #4]
 6582 001e 5B6B     		ldr	r3, [r3, #52]
 6583              		.loc 11 556 90
 6584 0020 43F48062 		orr	r2, r3, #1024
 6585              		.loc 11 556 16
 6586 0024 7B68     		ldr	r3, [r7, #4]
 6587 0026 5A63     		str	r2, [r3, #52]
 557:Src/motor.cpp **** 
 558:Src/motor.cpp ****         axis_->axis_state_.erro = Axis::ENCOS_ERRO::ENCOS_ERROR_CURRENT_LIMIT_VIOLATION;
 6588              		.loc 11 558 9
 6589 0028 7B68     		ldr	r3, [r7, #4]
 6590 002a 9B68     		ldr	r3, [r3, #8]
 6591              		.loc 11 558 33
 6592 002c 0222     		movs	r2, #2
 6593 002e 83F89621 		strb	r2, [r3, #406]
 559:Src/motor.cpp ****         return false;
 6594              		.loc 11 559 16
 6595 0032 0023     		movs	r3, #0
 6596 0034 00E0     		b	.L279
 6597              	.L278:
 560:Src/motor.cpp ****     }
 561:Src/motor.cpp ****     return true;
 6598              		.loc 11 561 12
 6599 0036 0123     		movs	r3, #1
 6600              	.L279:
 562:Src/motor.cpp **** }
ARM GAS  /tmp/ccATuxCb.s 			page 264


 6601              		.loc 11 562 1
 6602 0038 1846     		mov	r0, r3
 6603 003a 0C37     		adds	r7, r7, #12
 6604              	.LCFI546:
 6605              		.cfi_def_cfa_offset 4
 6606 003c BD46     		mov	sp, r7
 6607              	.LCFI547:
 6608              		.cfi_def_cfa_register 13
 6609              		@ sp needed
 6610 003e 5DF8047B 		ldr	r7, [sp], #4
 6611              	.LCFI548:
 6612              		.cfi_restore 7
 6613              		.cfi_def_cfa_offset 0
 6614 0042 7047     		bx	lr
 6615              		.cfi_endproc
 6616              	.LFE4988:
 6618              		.section	.text._ZN5Motor25phase_current_from_adcvalElf,"ax",%progbits
 6619              		.align	1
 6620              		.global	_ZN5Motor25phase_current_from_adcvalElf
 6621              		.syntax unified
 6622              		.thumb
 6623              		.thumb_func
 6624              		.fpu fpv4-sp-d16
 6626              	_ZN5Motor25phase_current_from_adcvalElf:
 6627              	.LFB4989:
 563:Src/motor.cpp **** 
 564:Src/motor.cpp **** float Motor::phase_current_from_adcval(int32_t ADCValue, float phase_current_gain_coeff) {
 6628              		.loc 11 564 90
 6629              		.cfi_startproc
 6630              		@ args = 0, pretend = 0, frame = 32
 6631              		@ frame_needed = 1, uses_anonymous_args = 0
 6632              		@ link register save eliminated.
 6633 0000 80B4     		push	{r7}
 6634              	.LCFI549:
 6635              		.cfi_def_cfa_offset 4
 6636              		.cfi_offset 7, -4
 6637 0002 89B0     		sub	sp, sp, #36
 6638              	.LCFI550:
 6639              		.cfi_def_cfa_offset 40
 6640 0004 00AF     		add	r7, sp, #0
 6641              	.LCFI551:
 6642              		.cfi_def_cfa_register 7
 6643 0006 F860     		str	r0, [r7, #12]
 6644 0008 B960     		str	r1, [r7, #8]
 6645 000a 87ED010A 		vstr.32	s0, [r7, #4]
 565:Src/motor.cpp **** 
 566:Src/motor.cpp **** 
 567:Src/motor.cpp ****     float amp_out_volt = (3.3f / (float)(1 << 12)) * (float)ADCValue;
 6646              		.loc 11 567 54
 6647 000e BB68     		ldr	r3, [r7, #8]
 6648 0010 07EE903A 		vmov	s15, r3	@ int
 6649 0014 F8EEE77A 		vcvt.f32.s32	s15, s15
 6650              		.loc 11 567 11
 6651 0018 9FED137A 		vldr.32	s14, .L282
 6652 001c 67EE877A 		vmul.f32	s15, s15, s14
 6653 0020 C7ED077A 		vstr.32	s15, [r7, #28]
 568:Src/motor.cpp ****     float shunt_volt = amp_out_volt * phase_current_rev_gain_;
ARM GAS  /tmp/ccATuxCb.s 			page 265


 6654              		.loc 11 568 39
 6655 0024 FB68     		ldr	r3, [r7, #12]
 6656 0026 D3ED157A 		vldr.32	s15, [r3, #84]
 6657              		.loc 11 568 11
 6658 002a 97ED077A 		vldr.32	s14, [r7, #28]
 6659 002e 67EE277A 		vmul.f32	s15, s14, s15
 6660 0032 C7ED067A 		vstr.32	s15, [r7, #24]
 569:Src/motor.cpp ****     float current = shunt_volt * hw_config_.shunt_conductance * phase_current_gain_coeff;
 6661              		.loc 11 569 34
 6662 0036 FB68     		ldr	r3, [r7, #12]
 6663 0038 1B68     		ldr	r3, [r3]
 6664              		.loc 11 569 45
 6665 003a 93ED027A 		vldr.32	s14, [r3, #8]
 6666              		.loc 11 569 32
 6667 003e D7ED067A 		vldr.32	s15, [r7, #24]
 6668 0042 67EE277A 		vmul.f32	s15, s14, s15
 6669              		.loc 11 569 11
 6670 0046 97ED017A 		vldr.32	s14, [r7, #4]
 6671 004a 67EE277A 		vmul.f32	s15, s14, s15
 6672 004e C7ED057A 		vstr.32	s15, [r7, #20]
 570:Src/motor.cpp **** 
 571:Src/motor.cpp **** 
 572:Src/motor.cpp **** 
 573:Src/motor.cpp ****     return current;
 6673              		.loc 11 573 12
 6674 0052 7B69     		ldr	r3, [r7, #20]	@ float
 6675 0054 07EE903A 		vmov	s15, r3
 574:Src/motor.cpp **** }
 6676              		.loc 11 574 1
 6677 0058 B0EE670A 		vmov.f32	s0, s15
 6678 005c 2437     		adds	r7, r7, #36
 6679              	.LCFI552:
 6680              		.cfi_def_cfa_offset 4
 6681 005e BD46     		mov	sp, r7
 6682              	.LCFI553:
 6683              		.cfi_def_cfa_register 13
 6684              		@ sp needed
 6685 0060 5DF8047B 		ldr	r7, [sp], #4
 6686              	.LCFI554:
 6687              		.cfi_restore 7
 6688              		.cfi_def_cfa_offset 0
 6689 0064 7047     		bx	lr
 6690              	.L283:
 6691 0066 00BF     		.align	2
 6692              	.L282:
 6693 0068 3333533A 		.word	978531123
 6694              		.cfi_endproc
 6695              	.LFE4989:
 6697              		.section	.text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJfEEESt10in_place_tDpOT_,"axG",%
 6698              		.align	1
 6699              		.weak	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJfEEESt10in_place_tDpOT_
 6700              		.syntax unified
 6701              		.thumb
 6702              		.thumb_func
 6703              		.fpu fpv4-sp-d16
 6705              	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJfEEESt10in_place_tDpOT_:
 6706              	.LFB5000:
ARM GAS  /tmp/ccATuxCb.s 			page 266


 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 6707              		.loc 12 204 6
 6708              		.cfi_startproc
 6709              		@ args = 0, pretend = 0, frame = 16
 6710              		@ frame_needed = 1, uses_anonymous_args = 0
 6711 0000 80B5     		push	{r7, lr}
 6712              	.LCFI555:
 6713              		.cfi_def_cfa_offset 8
 6714              		.cfi_offset 7, -8
 6715              		.cfi_offset 14, -4
 6716 0002 84B0     		sub	sp, sp, #16
 6717              	.LCFI556:
 6718              		.cfi_def_cfa_offset 24
 6719 0004 00AF     		add	r7, sp, #0
 6720              	.LCFI557:
 6721              		.cfi_def_cfa_register 7
 6722 0006 F860     		str	r0, [r7, #12]
 6723 0008 3972     		strb	r1, [r7, #8]
 6724 000a 7A60     		str	r2, [r7, #4]
 6725              	.LBB58:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 6726              		.loc 12 205 36
 6727 000c 7868     		ldr	r0, [r7, #4]
 6728 000e FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 6729 0012 0346     		mov	r3, r0
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 6730              		.loc 12 205 47
 6731 0014 1A68     		ldr	r2, [r3]	@ float
 6732 0016 FB68     		ldr	r3, [r7, #12]
 6733 0018 1A60     		str	r2, [r3]	@ float
 6734              	.LBE58:
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6735              		.loc 12 206 8
 6736 001a FB68     		ldr	r3, [r7, #12]
 6737 001c 1846     		mov	r0, r3
 6738 001e 1037     		adds	r7, r7, #16
 6739              	.LCFI558:
 6740              		.cfi_def_cfa_offset 8
 6741 0020 BD46     		mov	sp, r7
 6742              	.LCFI559:
 6743              		.cfi_def_cfa_register 13
 6744              		@ sp needed
 6745 0022 80BD     		pop	{r7, pc}
 6746              		.cfi_endproc
 6747              	.LFE5000:
 6749              		.section	.text._ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE,"axG",%progbits,_ZSt7forwardIfE
 6750              		.align	1
 6751              		.weak	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 6752              		.syntax unified
 6753              		.thumb
 6754              		.thumb_func
 6755              		.fpu fpv4-sp-d16
 6757              	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE:
 6758              	.LFB5001:
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #if __cplusplus >= 201103L
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
ARM GAS  /tmp/ccATuxCb.s 			page 267


  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** } // namespace
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** {
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @addtogroup utilities
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @{
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief  Forward an lvalue.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @return The parameter cast to the specified type.
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     constexpr _Tp&&
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 6759              		.loc 13 76 5
 6760              		.cfi_startproc
 6761              		@ args = 0, pretend = 0, frame = 8
 6762              		@ frame_needed = 1, uses_anonymous_args = 0
 6763              		@ link register save eliminated.
 6764 0000 80B4     		push	{r7}
 6765              	.LCFI560:
 6766              		.cfi_def_cfa_offset 4
 6767              		.cfi_offset 7, -4
 6768 0002 83B0     		sub	sp, sp, #12
 6769              	.LCFI561:
 6770              		.cfi_def_cfa_offset 16
 6771 0004 00AF     		add	r7, sp, #0
 6772              	.LCFI562:
 6773              		.cfi_def_cfa_register 7
 6774 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 6775              		.loc 13 77 36
 6776 0008 7B68     		ldr	r3, [r7, #4]
 6777              		.loc 13 77 39
 6778 000a 1846     		mov	r0, r3
 6779 000c 0C37     		adds	r7, r7, #12
 6780              	.LCFI563:
 6781              		.cfi_def_cfa_offset 4
 6782 000e BD46     		mov	sp, r7
 6783              	.LCFI564:
 6784              		.cfi_def_cfa_register 13
 6785              		@ sp needed
 6786 0010 5DF8047B 		ldr	r7, [sp], #4
 6787              	.LCFI565:
 6788              		.cfi_restore 7
 6789              		.cfi_def_cfa_offset 0
 6790 0014 7047     		bx	lr
 6791              		.cfi_endproc
ARM GAS  /tmp/ccATuxCb.s 			page 268


 6792              	.LFE5001:
 6794              		.section	.text._ZNSt22_Optional_payload_baseIfEC2IJfEEESt10in_place_tDpOT_,"axG",%progbits,_ZNSt22
 6795              		.align	1
 6796              		.weak	_ZNSt22_Optional_payload_baseIfEC2IJfEEESt10in_place_tDpOT_
 6797              		.syntax unified
 6798              		.thumb
 6799              		.thumb_func
 6800              		.fpu fpv4-sp-d16
 6802              	_ZNSt22_Optional_payload_baseIfEC2IJfEEESt10in_place_tDpOT_:
 6803              	.LFB5002:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 6804              		.loc 12 116 2
 6805              		.cfi_startproc
 6806              		@ args = 0, pretend = 0, frame = 16
 6807              		@ frame_needed = 1, uses_anonymous_args = 0
 6808 0000 B0B5     		push	{r4, r5, r7, lr}
 6809              	.LCFI566:
 6810              		.cfi_def_cfa_offset 16
 6811              		.cfi_offset 4, -16
 6812              		.cfi_offset 5, -12
 6813              		.cfi_offset 7, -8
 6814              		.cfi_offset 14, -4
 6815 0002 84B0     		sub	sp, sp, #16
 6816              	.LCFI567:
 6817              		.cfi_def_cfa_offset 32
 6818 0004 00AF     		add	r7, sp, #0
 6819              	.LCFI568:
 6820              		.cfi_def_cfa_register 7
 6821 0006 F860     		str	r0, [r7, #12]
 6822 0008 3972     		strb	r1, [r7, #8]
 6823 000a 7A60     		str	r2, [r7, #4]
 6824              	.LBB59:
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 6825              		.loc 12 118 19
 6826 000c FC68     		ldr	r4, [r7, #12]
 6827 000e 7868     		ldr	r0, [r7, #4]
 6828 0010 FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 6829 0014 0346     		mov	r3, r0
 6830 0016 1A46     		mov	r2, r3
 6831 0018 2946     		mov	r1, r5
 6832 001a 2046     		mov	r0, r4
 6833 001c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJfEEESt10in_place_tDpOT_
 6834 0020 FB68     		ldr	r3, [r7, #12]
 6835 0022 0122     		movs	r2, #1
 6836 0024 1A71     		strb	r2, [r3, #4]
 6837              	.LBE59:
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6838              		.loc 12 119 4
 6839 0026 FB68     		ldr	r3, [r7, #12]
 6840 0028 1846     		mov	r0, r3
 6841 002a 1037     		adds	r7, r7, #16
 6842              	.LCFI569:
 6843              		.cfi_def_cfa_offset 16
 6844 002c BD46     		mov	sp, r7
 6845              	.LCFI570:
 6846              		.cfi_def_cfa_register 13
 6847              		@ sp needed
ARM GAS  /tmp/ccATuxCb.s 			page 269


 6848 002e B0BD     		pop	{r4, r5, r7, pc}
 6849              		.cfi_endproc
 6850              	.LFE5002:
 6852              		.section	.text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJfEEESt10in
 6853              		.align	1
 6854              		.weak	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJfEEESt10in_place_tD
 6855              		.syntax unified
 6856              		.thumb
 6857              		.thumb_func
 6858              		.fpu fpv4-sp-d16
 6860              	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJfEEESt10in_place_tDpOT_:
 6861              	.LFB5004:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6862              		.loc 12 301 42
 6863              		.cfi_startproc
 6864              		@ args = 0, pretend = 0, frame = 16
 6865              		@ frame_needed = 1, uses_anonymous_args = 0
 6866 0000 90B5     		push	{r4, r7, lr}
 6867              	.LCFI571:
 6868              		.cfi_def_cfa_offset 12
 6869              		.cfi_offset 4, -12
 6870              		.cfi_offset 7, -8
 6871              		.cfi_offset 14, -4
 6872 0002 85B0     		sub	sp, sp, #20
 6873              	.LCFI572:
 6874              		.cfi_def_cfa_offset 32
 6875 0004 00AF     		add	r7, sp, #0
 6876              	.LCFI573:
 6877              		.cfi_def_cfa_register 7
 6878 0006 F860     		str	r0, [r7, #12]
 6879 0008 3972     		strb	r1, [r7, #8]
 6880 000a 7A60     		str	r2, [r7, #4]
 6881              	.LBB60:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6882              		.loc 12 301 42
 6883 000c FB68     		ldr	r3, [r7, #12]
 6884 000e 7A68     		ldr	r2, [r7, #4]
 6885 0010 2146     		mov	r1, r4
 6886 0012 1846     		mov	r0, r3
 6887 0014 FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfEC2IJfEEESt10in_place_tDpOT_
 6888              	.LBE60:
 6889 0018 FB68     		ldr	r3, [r7, #12]
 6890 001a 1846     		mov	r0, r3
 6891 001c 1437     		adds	r7, r7, #20
 6892              	.LCFI574:
 6893              		.cfi_def_cfa_offset 12
 6894 001e BD46     		mov	sp, r7
 6895              	.LCFI575:
 6896              		.cfi_def_cfa_register 13
 6897              		@ sp needed
 6898 0020 90BD     		pop	{r4, r7, pc}
 6899              		.cfi_endproc
 6900              	.LFE5004:
 6902              		.weak	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJfEEESt10in_place_tD
 6903              		.thumb_set _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJfEEESt10in_pla
 6904              		.section	.text._ZNSt14_Optional_baseIfLb1ELb1EEC2IJfELb0EEESt10in_place_tDpOT_,"axG",%progbits,_ZN
 6905              		.align	1
ARM GAS  /tmp/ccATuxCb.s 			page 270


 6906              		.weak	_ZNSt14_Optional_baseIfLb1ELb1EEC2IJfELb0EEESt10in_place_tDpOT_
 6907              		.syntax unified
 6908              		.thumb
 6909              		.thumb_func
 6910              		.fpu fpv4-sp-d16
 6912              	_ZNSt14_Optional_baseIfLb1ELb1EEC2IJfELb0EEESt10in_place_tDpOT_:
 6913              	.LFB5006:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 6914              		.loc 12 608 28
 6915              		.cfi_startproc
 6916              		@ args = 0, pretend = 0, frame = 16
 6917              		@ frame_needed = 1, uses_anonymous_args = 0
 6918 0000 B0B5     		push	{r4, r5, r7, lr}
 6919              	.LCFI576:
 6920              		.cfi_def_cfa_offset 16
 6921              		.cfi_offset 4, -16
 6922              		.cfi_offset 5, -12
 6923              		.cfi_offset 7, -8
 6924              		.cfi_offset 14, -4
 6925 0002 84B0     		sub	sp, sp, #16
 6926              	.LCFI577:
 6927              		.cfi_def_cfa_offset 32
 6928 0004 00AF     		add	r7, sp, #0
 6929              	.LCFI578:
 6930              		.cfi_def_cfa_register 7
 6931 0006 F860     		str	r0, [r7, #12]
 6932 0008 3972     		strb	r1, [r7, #8]
 6933 000a 7A60     		str	r2, [r7, #4]
 6934              	.LBB61:
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6935              		.loc 12 610 38
 6936 000c FC68     		ldr	r4, [r7, #12]
 6937 000e 7868     		ldr	r0, [r7, #4]
 6938 0010 FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 6939 0014 0346     		mov	r3, r0
 6940 0016 1A46     		mov	r2, r3
 6941 0018 2946     		mov	r1, r5
 6942 001a 2046     		mov	r0, r4
 6943 001c FFF7FEFF 		bl	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJfEEESt10in_place_tDpOT
 6944              	.LBE61:
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6945              		.loc 12 610 42
 6946 0020 FB68     		ldr	r3, [r7, #12]
 6947 0022 1846     		mov	r0, r3
 6948 0024 1037     		adds	r7, r7, #16
 6949              	.LCFI579:
 6950              		.cfi_def_cfa_offset 16
 6951 0026 BD46     		mov	sp, r7
 6952              	.LCFI580:
 6953              		.cfi_def_cfa_register 13
 6954              		@ sp needed
 6955 0028 B0BD     		pop	{r4, r5, r7, pc}
 6956              		.cfi_endproc
 6957              	.LFE5006:
 6959              		.section	.text._ZNSt8optionalIfEC1IfLb1EEEOT_,"axG",%progbits,_ZNSt8optionalIfEC1IfLb1EEEOT_,comda
 6960              		.align	1
 6961              		.weak	_ZNSt8optionalIfEC1IfLb1EEEOT_
ARM GAS  /tmp/ccATuxCb.s 			page 271


 6962              		.syntax unified
 6963              		.thumb
 6964              		.thumb_func
 6965              		.fpu fpv4-sp-d16
 6967              	_ZNSt8optionalIfEC1IfLb1EEEOT_:
 6968              	.LFB5009:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 6969              		.loc 12 701 2
 6970              		.cfi_startproc
 6971              		@ args = 0, pretend = 0, frame = 8
 6972              		@ frame_needed = 1, uses_anonymous_args = 0
 6973 0000 B0B5     		push	{r4, r5, r7, lr}
 6974              	.LCFI581:
 6975              		.cfi_def_cfa_offset 16
 6976              		.cfi_offset 4, -16
 6977              		.cfi_offset 5, -12
 6978              		.cfi_offset 7, -8
 6979              		.cfi_offset 14, -4
 6980 0002 82B0     		sub	sp, sp, #8
 6981              	.LCFI582:
 6982              		.cfi_def_cfa_offset 24
 6983 0004 00AF     		add	r7, sp, #0
 6984              	.LCFI583:
 6985              		.cfi_def_cfa_register 7
 6986 0006 7860     		str	r0, [r7, #4]
 6987 0008 3960     		str	r1, [r7]
 6988              	.LBB62:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6989              		.loc 12 702 47
 6990 000a 7C68     		ldr	r4, [r7, #4]
 6991 000c 3868     		ldr	r0, [r7]
 6992 000e FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 6993 0012 0346     		mov	r3, r0
 6994 0014 1A46     		mov	r2, r3
 6995 0016 2946     		mov	r1, r5
 6996 0018 2046     		mov	r0, r4
 6997 001a FFF7FEFF 		bl	_ZNSt14_Optional_baseIfLb1ELb1EEC2IJfELb0EEESt10in_place_tDpOT_
 6998              	.LBE62:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6999              		.loc 12 702 51
 7000 001e 7B68     		ldr	r3, [r7, #4]
 7001 0020 1846     		mov	r0, r3
 7002 0022 0837     		adds	r7, r7, #8
 7003              	.LCFI584:
 7004              		.cfi_def_cfa_offset 16
 7005 0024 BD46     		mov	sp, r7
 7006              	.LCFI585:
 7007              		.cfi_def_cfa_register 13
 7008              		@ sp needed
 7009 0026 B0BD     		pop	{r4, r5, r7, pc}
 7010              		.cfi_endproc
 7011              	.LFE5009:
 7013              		.section	.text._ZN5Motor24measure_phase_resistanceEff,"ax",%progbits
 7014              		.align	1
 7015              		.global	_ZN5Motor24measure_phase_resistanceEff
 7016              		.syntax unified
 7017              		.thumb
ARM GAS  /tmp/ccATuxCb.s 			page 272


 7018              		.thumb_func
 7019              		.fpu fpv4-sp-d16
 7021              	_ZN5Motor24measure_phase_resistanceEff:
 7022              	.LFB4990:
 575:Src/motor.cpp **** 
 576:Src/motor.cpp **** //--------------------------------
 577:Src/motor.cpp **** // Measurement and calibration
 578:Src/motor.cpp **** //--------------------------------
 579:Src/motor.cpp **** 
 580:Src/motor.cpp **** // TODO check Ibeta balance to verify good motor connection
 581:Src/motor.cpp **** bool Motor::measure_phase_resistance(float test_current, float max_voltage) {
 7023              		.loc 11 581 77
 7024              		.cfi_startproc
 7025              		@ args = 0, pretend = 0, frame = 72
 7026              		@ frame_needed = 1, uses_anonymous_args = 0
 7027 0000 90B5     		push	{r4, r7, lr}
 7028              	.LCFI586:
 7029              		.cfi_def_cfa_offset 12
 7030              		.cfi_offset 4, -12
 7031              		.cfi_offset 7, -8
 7032              		.cfi_offset 14, -4
 7033 0002 93B0     		sub	sp, sp, #76
 7034              	.LCFI587:
 7035              		.cfi_def_cfa_offset 88
 7036 0004 00AF     		add	r7, sp, #0
 7037              	.LCFI588:
 7038              		.cfi_def_cfa_register 7
 7039 0006 F860     		str	r0, [r7, #12]
 7040 0008 87ED020A 		vstr.32	s0, [r7, #8]
 7041 000c C7ED010A 		vstr.32	s1, [r7, #4]
 582:Src/motor.cpp ****     ResistanceMeasurementControlLaw control_law;
 7042              		.loc 11 582 37
 7043 0010 07F11403 		add	r3, r7, #20
 7044 0014 2822     		movs	r2, #40
 7045 0016 0021     		movs	r1, #0
 7046 0018 1846     		mov	r0, r3
 7047 001a FFF7FEFF 		bl	memset
 7048 001e 454B     		ldr	r3, .L307
 7049 0020 7B61     		str	r3, [r7, #20]
 7050 0022 4FF07E53 		mov	r3, #1065353216
 7051 0026 BB61     		str	r3, [r7, #24]	@ float
 7052 0028 434B     		ldr	r3, .L307+4
 7053 002a FB61     		str	r3, [r7, #28]	@ float
 7054 002c 434B     		ldr	r3, .L307+8
 7055 002e 7B63     		str	r3, [r7, #52]	@ float
 7056 0030 0123     		movs	r3, #1
 7057 0032 87F83830 		strb	r3, [r7, #56]
 583:Src/motor.cpp ****     control_law.target_current_ = test_current;
 7058              		.loc 11 583 33
 7059 0036 BB68     		ldr	r3, [r7, #8]	@ float
 7060 0038 BB62     		str	r3, [r7, #40]	@ float
 584:Src/motor.cpp ****     control_law.max_voltage_ = max_voltage;
 7061              		.loc 11 584 30
 7062 003a 7B68     		ldr	r3, [r7, #4]	@ float
 7063 003c 3B62     		str	r3, [r7, #32]	@ float
 585:Src/motor.cpp **** 
 586:Src/motor.cpp ****     arm(&control_law);
ARM GAS  /tmp/ccATuxCb.s 			page 273


 7064              		.loc 11 586 8
 7065 003e 07F11403 		add	r3, r7, #20
 7066 0042 1946     		mov	r1, r3
 7067 0044 F868     		ldr	r0, [r7, #12]
 7068 0046 FFF7FEFF 		bl	_ZN5Motor3armEP15PhaseControlLawILj3EE
 7069              	.LBB63:
 587:Src/motor.cpp **** 
 588:Src/motor.cpp ****     for (size_t i = 0; i < 3000; ++i) {
 7070              		.loc 11 588 17
 7071 004a 0023     		movs	r3, #0
 7072 004c 7B64     		str	r3, [r7, #68]
 7073              	.L298:
 7074              		.loc 11 588 26 discriminator 1
 7075 004e 7B6C     		ldr	r3, [r7, #68]
 7076 0050 40F6B732 		movw	r2, #2999
 7077 0054 9342     		cmp	r3, r2
 7078 0056 16D8     		bhi	.L297
 589:Src/motor.cpp ****         if (!((axis_->requested_state_ == ODriveIntf::AxisIntf::AXIS_STATE_UNDEFINED) && axis_->mot
 7079              		.loc 11 589 16
 7080 0058 FB68     		ldr	r3, [r7, #12]
 7081 005a 9B68     		ldr	r3, [r3, #8]
 7082              		.loc 11 589 23
 7083 005c 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 7084              		.loc 11 589 9
 7085 0060 002B     		cmp	r3, #0
 7086 0062 10D1     		bne	.L297
 7087              		.loc 11 589 90 discriminator 1
 7088 0064 FB68     		ldr	r3, [r7, #12]
 7089 0066 9B68     		ldr	r3, [r3, #8]
 7090              		.loc 11 589 97 discriminator 1
 7091 0068 DB6E     		ldr	r3, [r3, #108]
 7092              		.loc 11 589 104 discriminator 1
 7093 006a 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 7094 006e 83F00103 		eor	r3, r3, #1
 7095 0072 DBB2     		uxtb	r3, r3
 7096              		.loc 11 589 13 discriminator 1
 7097 0074 002B     		cmp	r3, #0
 7098 0076 06D1     		bne	.L297
 590:Src/motor.cpp ****             break;
 591:Src/motor.cpp ****         }
 592:Src/motor.cpp ****         osDelay(1);
 7099              		.loc 11 592 16 discriminator 2
 7100 0078 0120     		movs	r0, #1
 7101 007a FFF7FEFF 		bl	osDelay
 588:Src/motor.cpp ****         if (!((axis_->requested_state_ == ODriveIntf::AxisIntf::AXIS_STATE_UNDEFINED) && axis_->mot
 7102              		.loc 11 588 5 discriminator 2
 7103 007e 7B6C     		ldr	r3, [r7, #68]
 7104 0080 0133     		adds	r3, r3, #1
 7105 0082 7B64     		str	r3, [r7, #68]
 7106 0084 E3E7     		b	.L298
 7107              	.L297:
 7108              	.LBE63:
 593:Src/motor.cpp ****     }
 594:Src/motor.cpp **** 
 595:Src/motor.cpp ****     bool success = is_armed_;
 7109              		.loc 11 595 10
 7110 0086 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccATuxCb.s 			page 274


 7111 0088 93F83830 		ldrb	r3, [r3, #56]
 7112 008c 87F84330 		strb	r3, [r7, #67]
 596:Src/motor.cpp **** 
 597:Src/motor.cpp ****     //// De-energize motor
 598:Src/motor.cpp ****     //if (!enqueue_voltage_timings(motor, 0.0f, 0.0f))
 599:Src/motor.cpp ****     //    return false; // error set inside enqueue_voltage_timings
 600:Src/motor.cpp **** 
 601:Src/motor.cpp ****     disarm();
 7113              		.loc 11 601 11
 7114 0090 F868     		ldr	r0, [r7, #12]
 7115 0092 FFF7FEFF 		bl	_ZN5Motor6disarmEv
 602:Src/motor.cpp **** 
 603:Src/motor.cpp ****     config_.phase_resistance = control_law.get_resistance();
 7116              		.loc 11 603 5
 7117 0096 FB68     		ldr	r3, [r7, #12]
 7118 0098 5C68     		ldr	r4, [r3, #4]
 7119              		.loc 11 603 58
 7120 009a 07F11403 		add	r3, r7, #20
 7121 009e 1846     		mov	r0, r3
 7122 00a0 FFF7FEFF 		bl	_ZN31ResistanceMeasurementControlLaw14get_resistanceEv
 7123 00a4 F0EE407A 		vmov.f32	s15, s0
 7124              		.loc 11 603 30
 7125 00a8 C4ED077A 		vstr.32	s15, [r4, #28]
 604:Src/motor.cpp ****     if (is_nan(config_.phase_resistance)) {
 7126              		.loc 11 604 16
 7127 00ac FB68     		ldr	r3, [r7, #12]
 7128 00ae 5B68     		ldr	r3, [r3, #4]
 7129              		.loc 11 604 15
 7130 00b0 D3ED077A 		vldr.32	s15, [r3, #28]
 7131 00b4 B0EE670A 		vmov.f32	s0, s15
 7132 00b8 FFF7FEFF 		bl	_Z6is_nanf
 7133 00bc 0346     		mov	r3, r0
 7134              		.loc 11 604 5
 7135 00be 002B     		cmp	r3, #0
 7136 00c0 06D0     		beq	.L299
 605:Src/motor.cpp ****         // TODO: the motor is already disarmed at this stage. This is an error
 606:Src/motor.cpp ****         // that only pretains to the measurement and its result so it should
 607:Src/motor.cpp ****         // just be a return value of this function.
 608:Src/motor.cpp ****         set_error(ODriveIntf::MotorIntf::ERROR_PHASE_RESISTANCE_OUT_OF_RANGE);
 7137              		.loc 11 608 18
 7138 00c2 0121     		movs	r1, #1
 7139 00c4 F868     		ldr	r0, [r7, #12]
 7140 00c6 FFF7FEFF 		bl	_ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE
 609:Src/motor.cpp ****         success = false;
 7141              		.loc 11 609 17
 7142 00ca 0023     		movs	r3, #0
 7143 00cc 87F84330 		strb	r3, [r7, #67]
 7144              	.L299:
 610:Src/motor.cpp ****     }
 611:Src/motor.cpp **** 
 612:Src/motor.cpp ****     float I_beta = control_law.get_Ibeta();
 7145              		.loc 11 612 41
 7146 00d0 07F11403 		add	r3, r7, #20
 7147 00d4 1846     		mov	r0, r3
 7148 00d6 FFF7FEFF 		bl	_ZN31ResistanceMeasurementControlLaw9get_IbetaEv
 7149 00da 87ED0F0A 		vstr.32	s0, [r7, #60]
 613:Src/motor.cpp ****     if (is_nan(I_beta) || (std::abs(I_beta) / test_current) > 0.2f) {
ARM GAS  /tmp/ccATuxCb.s 			page 275


 7150              		.loc 11 613 15
 7151 00de 97ED0F0A 		vldr.32	s0, [r7, #60]
 7152 00e2 FFF7FEFF 		bl	_Z6is_nanf
 7153 00e6 0346     		mov	r3, r0
 7154              		.loc 11 613 24
 7155 00e8 002B     		cmp	r3, #0
 7156 00ea 10D1     		bne	.L300
 7157              		.loc 11 613 36 discriminator 2
 7158 00ec 97ED0F0A 		vldr.32	s0, [r7, #60]
 7159 00f0 FFF7FEFF 		bl	_ZSt3absf
 7160 00f4 F0EE406A 		vmov.f32	s13, s0
 7161              		.loc 11 613 45 discriminator 2
 7162 00f8 97ED027A 		vldr.32	s14, [r7, #8]
 7163 00fc C6EE877A 		vdiv.f32	s15, s13, s14
 7164              		.loc 11 613 24 discriminator 2
 7165 0100 9FED0F7A 		vldr.32	s14, .L307+12
 7166 0104 F4EEC77A 		vcmpe.f32	s15, s14
 7167 0108 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 7168 010c 01DD     		ble	.L306
 7169              	.L300:
 7170              		.loc 11 613 24 is_stmt 0 discriminator 3
 7171 010e 0123     		movs	r3, #1
 7172 0110 00E0     		b	.L303
 7173              	.L306:
 7174              		.loc 11 613 24 discriminator 4
 7175 0112 0023     		movs	r3, #0
 7176              	.L303:
 7177              		.loc 11 613 5 is_stmt 1 discriminator 6
 7178 0114 002B     		cmp	r3, #0
 7179 0116 07D0     		beq	.L304
 614:Src/motor.cpp ****         set_error(ODriveIntf::MotorIntf::ERROR_UNBALANCED_PHASES);
 7180              		.loc 11 614 18
 7181 0118 4FF08051 		mov	r1, #268435456
 7182 011c F868     		ldr	r0, [r7, #12]
 7183 011e FFF7FEFF 		bl	_ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE
 615:Src/motor.cpp ****         success = false;
 7184              		.loc 11 615 17
 7185 0122 0023     		movs	r3, #0
 7186 0124 87F84330 		strb	r3, [r7, #67]
 7187              	.L304:
 616:Src/motor.cpp ****     }
 617:Src/motor.cpp **** 
 618:Src/motor.cpp ****     return success;
 7188              		.loc 11 618 12
 7189 0128 97F84330 		ldrb	r3, [r7, #67]	@ zero_extendqisi2
 619:Src/motor.cpp **** }
 7190              		.loc 11 619 1
 7191 012c 1846     		mov	r0, r3
 7192 012e 4C37     		adds	r7, r7, #76
 7193              	.LCFI589:
 7194              		.cfi_def_cfa_offset 12
 7195 0130 BD46     		mov	sp, r7
 7196              	.LCFI590:
 7197              		.cfi_def_cfa_register 13
 7198              		@ sp needed
 7199 0132 90BD     		pop	{r4, r7, pc}
 7200              	.L308:
ARM GAS  /tmp/ccATuxCb.s 			page 276


 7201              		.align	2
 7202              	.L307:
 7203 0134 08000000 		.word	_ZTV31ResistanceMeasurementControlLaw+8
 7204 0138 0000A042 		.word	1117782016
 7205 013c 0000C07F 		.word	2143289344
 7206 0140 CDCC4C3E 		.word	1045220557
 7207              		.cfi_endproc
 7208              	.LFE4990:
 7210              		.section	.text._ZN5Motor24measure_phase_inductanceEf,"ax",%progbits
 7211              		.align	1
 7212              		.global	_ZN5Motor24measure_phase_inductanceEf
 7213              		.syntax unified
 7214              		.thumb
 7215              		.thumb_func
 7216              		.fpu fpv4-sp-d16
 7218              	_ZN5Motor24measure_phase_inductanceEf:
 7219              	.LFB5010:
 620:Src/motor.cpp **** 
 621:Src/motor.cpp **** bool Motor::measure_phase_inductance(float test_voltage) {
 7220              		.loc 11 621 58
 7221              		.cfi_startproc
 7222              		@ args = 0, pretend = 0, frame = 48
 7223              		@ frame_needed = 1, uses_anonymous_args = 0
 7224 0000 90B5     		push	{r4, r7, lr}
 7225              	.LCFI591:
 7226              		.cfi_def_cfa_offset 12
 7227              		.cfi_offset 4, -12
 7228              		.cfi_offset 7, -8
 7229              		.cfi_offset 14, -4
 7230 0002 8DB0     		sub	sp, sp, #52
 7231              	.LCFI592:
 7232              		.cfi_def_cfa_offset 64
 7233 0004 00AF     		add	r7, sp, #0
 7234              	.LCFI593:
 7235              		.cfi_def_cfa_register 7
 7236 0006 7860     		str	r0, [r7, #4]
 7237 0008 87ED000A 		vstr.32	s0, [r7]
 622:Src/motor.cpp ****     InductanceMeasurementControlLaw control_law;
 7238              		.loc 11 622 37
 7239 000c 404B     		ldr	r3, .L315
 7240 000e BB60     		str	r3, [r7, #8]
 7241 0010 4FF00003 		mov	r3, #0
 7242 0014 FB60     		str	r3, [r7, #12]	@ float
 7243 0016 0023     		movs	r3, #0
 7244 0018 3B74     		strb	r3, [r7, #16]
 7245 001a 4FF00003 		mov	r3, #0
 7246 001e 7B61     		str	r3, [r7, #20]	@ float
 7247 0020 0023     		movs	r3, #0
 7248 0022 BB61     		str	r3, [r7, #24]
 7249 0024 3B4B     		ldr	r3, .L315+4
 7250 0026 FB61     		str	r3, [r7, #28]	@ float
 7251 0028 0023     		movs	r3, #0
 7252 002a 3B62     		str	r3, [r7, #32]
 7253 002c 4FF00003 		mov	r3, #0
 7254 0030 7B62     		str	r3, [r7, #36]	@ float
 623:Src/motor.cpp ****     control_law.test_voltage_ = test_voltage;
 7255              		.loc 11 623 31
ARM GAS  /tmp/ccATuxCb.s 			page 277


 7256 0032 3B68     		ldr	r3, [r7]	@ float
 7257 0034 FB60     		str	r3, [r7, #12]	@ float
 624:Src/motor.cpp **** 
 625:Src/motor.cpp ****     arm(&control_law);
 7258              		.loc 11 625 8
 7259 0036 07F10803 		add	r3, r7, #8
 7260 003a 1946     		mov	r1, r3
 7261 003c 7868     		ldr	r0, [r7, #4]
 7262 003e FFF7FEFF 		bl	_ZN5Motor3armEP15PhaseControlLawILj3EE
 7263              	.LBB64:
 626:Src/motor.cpp **** 
 627:Src/motor.cpp ****     for (size_t i = 0; i < 1250; ++i) {
 7264              		.loc 11 627 17
 7265 0042 0023     		movs	r3, #0
 7266 0044 FB62     		str	r3, [r7, #44]
 7267              	.L311:
 7268              		.loc 11 627 26 discriminator 1
 7269 0046 FB6A     		ldr	r3, [r7, #44]
 7270 0048 40F2E142 		movw	r2, #1249
 7271 004c 9342     		cmp	r3, r2
 7272 004e 16D8     		bhi	.L310
 628:Src/motor.cpp ****         if (!((axis_->requested_state_ == ODriveIntf::AxisIntf::AXIS_STATE_UNDEFINED) && axis_->mot
 7273              		.loc 11 628 16
 7274 0050 7B68     		ldr	r3, [r7, #4]
 7275 0052 9B68     		ldr	r3, [r3, #8]
 7276              		.loc 11 628 23
 7277 0054 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 7278              		.loc 11 628 9
 7279 0058 002B     		cmp	r3, #0
 7280 005a 10D1     		bne	.L310
 7281              		.loc 11 628 90 discriminator 1
 7282 005c 7B68     		ldr	r3, [r7, #4]
 7283 005e 9B68     		ldr	r3, [r3, #8]
 7284              		.loc 11 628 97 discriminator 1
 7285 0060 DB6E     		ldr	r3, [r3, #108]
 7286              		.loc 11 628 104 discriminator 1
 7287 0062 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 7288 0066 83F00103 		eor	r3, r3, #1
 7289 006a DBB2     		uxtb	r3, r3
 7290              		.loc 11 628 13 discriminator 1
 7291 006c 002B     		cmp	r3, #0
 7292 006e 06D1     		bne	.L310
 629:Src/motor.cpp ****             break;
 630:Src/motor.cpp ****         }
 631:Src/motor.cpp ****         osDelay(1);
 7293              		.loc 11 631 16 discriminator 2
 7294 0070 0120     		movs	r0, #1
 7295 0072 FFF7FEFF 		bl	osDelay
 627:Src/motor.cpp ****         if (!((axis_->requested_state_ == ODriveIntf::AxisIntf::AXIS_STATE_UNDEFINED) && axis_->mot
 7296              		.loc 11 627 5 discriminator 2
 7297 0076 FB6A     		ldr	r3, [r7, #44]
 7298 0078 0133     		adds	r3, r3, #1
 7299 007a FB62     		str	r3, [r7, #44]
 7300 007c E3E7     		b	.L311
 7301              	.L310:
 7302              	.LBE64:
 632:Src/motor.cpp ****     }
ARM GAS  /tmp/ccATuxCb.s 			page 278


 633:Src/motor.cpp **** 
 634:Src/motor.cpp ****     bool success = is_armed_;
 7303              		.loc 11 634 10
 7304 007e 7B68     		ldr	r3, [r7, #4]
 7305 0080 93F83830 		ldrb	r3, [r3, #56]
 7306 0084 87F82B30 		strb	r3, [r7, #43]
 635:Src/motor.cpp **** 
 636:Src/motor.cpp ****     //// De-energize motor
 637:Src/motor.cpp ****     //if (!enqueue_voltage_timings(motor, 0.0f, 0.0f))
 638:Src/motor.cpp ****     //    return false; // error set inside enqueue_voltage_timings
 639:Src/motor.cpp **** 
 640:Src/motor.cpp ****     disarm();
 7307              		.loc 11 640 11
 7308 0088 7868     		ldr	r0, [r7, #4]
 7309 008a FFF7FEFF 		bl	_ZN5Motor6disarmEv
 641:Src/motor.cpp **** 
 642:Src/motor.cpp ****     config_.phase_inductance = control_law.get_inductance();
 7310              		.loc 11 642 5
 7311 008e 7B68     		ldr	r3, [r7, #4]
 7312 0090 5C68     		ldr	r4, [r3, #4]
 7313              		.loc 11 642 58
 7314 0092 07F10803 		add	r3, r7, #8
 7315 0096 1846     		mov	r0, r3
 7316 0098 FFF7FEFF 		bl	_ZN31InductanceMeasurementControlLaw14get_inductanceEv
 7317 009c F0EE407A 		vmov.f32	s15, s0
 7318              		.loc 11 642 30
 7319 00a0 C4ED067A 		vstr.32	s15, [r4, #24]
 643:Src/motor.cpp ****     
 644:Src/motor.cpp ****     // TODO arbitrary values set for now
 645:Src/motor.cpp ****     if (!(config_.phase_inductance >= 2e-6f && config_.phase_inductance <= 4000e-6f)) {
 7320              		.loc 11 645 11
 7321 00a4 7B68     		ldr	r3, [r7, #4]
 7322 00a6 5B68     		ldr	r3, [r3, #4]
 7323              		.loc 11 645 19
 7324 00a8 D3ED067A 		vldr.32	s15, [r3, #24]
 7325              		.loc 11 645 36
 7326 00ac 9FED1A7A 		vldr.32	s14, .L315+8
 7327 00b0 F4EEC77A 		vcmpe.f32	s15, s14
 7328 00b4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 7329 00b8 ACBF     		ite	ge
 7330 00ba 0123     		movge	r3, #1
 7331 00bc 0023     		movlt	r3, #0
 7332 00be DBB2     		uxtb	r3, r3
 7333 00c0 83F00103 		eor	r3, r3, #1
 7334 00c4 DBB2     		uxtb	r3, r3
 7335              		.loc 11 645 5
 7336 00c6 002B     		cmp	r3, #0
 7337 00c8 12D1     		bne	.L312
 7338              		.loc 11 645 48 discriminator 1
 7339 00ca 7B68     		ldr	r3, [r7, #4]
 7340 00cc 5B68     		ldr	r3, [r3, #4]
 7341              		.loc 11 645 56 discriminator 1
 7342 00ce D3ED067A 		vldr.32	s15, [r3, #24]
 7343              		.loc 11 645 73 discriminator 1
 7344 00d2 9FED127A 		vldr.32	s14, .L315+12
 7345 00d6 F4EEC77A 		vcmpe.f32	s15, s14
 7346 00da F1EE10FA 		vmrs	APSR_nzcv, FPSCR
ARM GAS  /tmp/ccATuxCb.s 			page 279


 7347 00de 94BF     		ite	ls
 7348 00e0 0123     		movls	r3, #1
 7349 00e2 0023     		movhi	r3, #0
 7350 00e4 DBB2     		uxtb	r3, r3
 7351 00e6 83F00103 		eor	r3, r3, #1
 7352 00ea DBB2     		uxtb	r3, r3
 7353              		.loc 11 645 9 discriminator 1
 7354 00ec 002B     		cmp	r3, #0
 7355 00ee 08D0     		beq	.L313
 7356              	.L312:
 646:Src/motor.cpp ****         error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_c
 7357              		.loc 11 646 82
 7358 00f0 7B68     		ldr	r3, [r7, #4]
 7359 00f2 5B6B     		ldr	r3, [r3, #52]
 7360              		.loc 11 646 90
 7361 00f4 43F00202 		orr	r2, r3, #2
 7362              		.loc 11 646 16
 7363 00f8 7B68     		ldr	r3, [r7, #4]
 7364 00fa 5A63     		str	r2, [r3, #52]
 647:Src/motor.cpp ****         success = false;
 7365              		.loc 11 647 17
 7366 00fc 0023     		movs	r3, #0
 7367 00fe 87F82B30 		strb	r3, [r7, #43]
 7368              	.L313:
 648:Src/motor.cpp ****     }
 649:Src/motor.cpp **** 
 650:Src/motor.cpp ****     return success;
 7369              		.loc 11 650 12
 7370 0102 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 651:Src/motor.cpp **** }
 7371              		.loc 11 651 1
 7372 0106 1846     		mov	r0, r3
 7373 0108 3437     		adds	r7, r7, #52
 7374              	.LCFI594:
 7375              		.cfi_def_cfa_offset 12
 7376 010a BD46     		mov	sp, r7
 7377              	.LCFI595:
 7378              		.cfi_def_cfa_register 13
 7379              		@ sp needed
 7380 010c 90BD     		pop	{r4, r7, pc}
 7381              	.L316:
 7382 010e 00BF     		.align	2
 7383              	.L315:
 7384 0110 08000000 		.word	_ZTV31InductanceMeasurementControlLaw+8
 7385 0114 0000C07F 		.word	2143289344
 7386 0118 BD370636 		.word	906377149
 7387 011c 6F12833B 		.word	998445679
 7388              		.cfi_endproc
 7389              	.LFE5010:
 7391              		.section	.text._ZN5Motor15run_calibrationEv,"ax",%progbits
 7392              		.align	1
 7393              		.global	_ZN5Motor15run_calibrationEv
 7394              		.syntax unified
 7395              		.thumb
 7396              		.thumb_func
 7397              		.fpu fpv4-sp-d16
 7399              	_ZN5Motor15run_calibrationEv:
ARM GAS  /tmp/ccATuxCb.s 			page 280


 7400              	.LFB5014:
 652:Src/motor.cpp **** 
 653:Src/motor.cpp **** 
 654:Src/motor.cpp **** bool Motor::run_calibration() {
 7401              		.loc 11 654 31
 7402              		.cfi_startproc
 7403              		@ args = 0, pretend = 0, frame = 16
 7404              		@ frame_needed = 1, uses_anonymous_args = 0
 7405 0000 80B5     		push	{r7, lr}
 7406              	.LCFI596:
 7407              		.cfi_def_cfa_offset 8
 7408              		.cfi_offset 7, -8
 7409              		.cfi_offset 14, -4
 7410 0002 84B0     		sub	sp, sp, #16
 7411              	.LCFI597:
 7412              		.cfi_def_cfa_offset 24
 7413 0004 00AF     		add	r7, sp, #0
 7414              	.LCFI598:
 7415              		.cfi_def_cfa_register 7
 7416 0006 7860     		str	r0, [r7, #4]
 655:Src/motor.cpp ****     float R_calib_max_voltage = config_.resistance_calib_max_voltage;
 7417              		.loc 11 655 33
 7418 0008 7B68     		ldr	r3, [r7, #4]
 7419 000a 5B68     		ldr	r3, [r3, #4]
 7420              		.loc 11 655 11
 7421 000c 5B69     		ldr	r3, [r3, #20]	@ float
 7422 000e FB60     		str	r3, [r7, #12]	@ float
 656:Src/motor.cpp ****     if (config_.motor_type == MOTOR_TYPE_HIGH_CURRENT
 7423              		.loc 11 656 9
 7424 0010 7B68     		ldr	r3, [r7, #4]
 7425 0012 5B68     		ldr	r3, [r3, #4]
 7426              		.loc 11 656 17
 7427 0014 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 7428              		.loc 11 656 5
 7429 0018 002B     		cmp	r3, #0
 7430 001a 05D0     		beq	.L318
 657:Src/motor.cpp ****         || config_.motor_type == MOTOR_TYPE_ACIM) {
 7431              		.loc 11 657 12
 7432 001c 7B68     		ldr	r3, [r7, #4]
 7433 001e 5B68     		ldr	r3, [r3, #4]
 7434              		.loc 11 657 20
 7435 0020 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 7436              		.loc 11 657 9
 7437 0024 032B     		cmp	r3, #3
 7438 0026 1FD1     		bne	.L319
 7439              	.L318:
 658:Src/motor.cpp ****         if (!measure_phase_resistance(config_.calibration_current, R_calib_max_voltage))
 7440              		.loc 11 658 39
 7441 0028 7B68     		ldr	r3, [r7, #4]
 7442 002a 5B68     		ldr	r3, [r3, #4]
 7443              		.loc 11 658 38
 7444 002c D3ED047A 		vldr.32	s15, [r3, #16]
 7445 0030 D7ED030A 		vldr.32	s1, [r7, #12]
 7446 0034 B0EE670A 		vmov.f32	s0, s15
 7447 0038 7868     		ldr	r0, [r7, #4]
 7448 003a FFF7FEFF 		bl	_ZN5Motor24measure_phase_resistanceEff
 7449 003e 0346     		mov	r3, r0
ARM GAS  /tmp/ccATuxCb.s 			page 281


 7450              		.loc 11 658 13
 7451 0040 83F00103 		eor	r3, r3, #1
 7452 0044 DBB2     		uxtb	r3, r3
 7453              		.loc 11 658 9
 7454 0046 002B     		cmp	r3, #0
 7455 0048 01D0     		beq	.L320
 659:Src/motor.cpp ****             return false;
 7456              		.loc 11 659 20
 7457 004a 0023     		movs	r3, #0
 7458 004c 1CE0     		b	.L321
 7459              	.L320:
 660:Src/motor.cpp ****         if (!measure_phase_inductance(R_calib_max_voltage))
 7460              		.loc 11 660 38
 7461 004e 97ED030A 		vldr.32	s0, [r7, #12]
 7462 0052 7868     		ldr	r0, [r7, #4]
 7463 0054 FFF7FEFF 		bl	_ZN5Motor24measure_phase_inductanceEf
 7464 0058 0346     		mov	r3, r0
 7465              		.loc 11 660 13
 7466 005a 83F00103 		eor	r3, r3, #1
 7467 005e DBB2     		uxtb	r3, r3
 7468              		.loc 11 660 9
 7469 0060 002B     		cmp	r3, #0
 7470 0062 09D0     		beq	.L323
 661:Src/motor.cpp ****             return false;
 7471              		.loc 11 661 20
 7472 0064 0023     		movs	r3, #0
 7473 0066 0FE0     		b	.L321
 7474              	.L319:
 662:Src/motor.cpp ****     } else if (config_.motor_type == MOTOR_TYPE_GIMBAL) {
 7475              		.loc 11 662 16
 7476 0068 7B68     		ldr	r3, [r7, #4]
 7477 006a 5B68     		ldr	r3, [r3, #4]
 7478              		.loc 11 662 24
 7479 006c 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 7480              		.loc 11 662 12
 7481 0070 022B     		cmp	r3, #2
 7482 0072 01D0     		beq	.L323
 663:Src/motor.cpp ****         // no calibration needed
 664:Src/motor.cpp ****     } else {
 665:Src/motor.cpp ****         return false;
 7483              		.loc 11 665 16
 7484 0074 0023     		movs	r3, #0
 7485 0076 07E0     		b	.L321
 7486              	.L323:
 666:Src/motor.cpp ****     }
 667:Src/motor.cpp **** 
 668:Src/motor.cpp ****     update_current_controller_gains();
 7487              		.loc 11 668 36
 7488 0078 7868     		ldr	r0, [r7, #4]
 7489 007a FFF7FEFF 		bl	_ZN5Motor31update_current_controller_gainsEv
 669:Src/motor.cpp ****     
 670:Src/motor.cpp ****     is_calibrated_ = true;
 7490              		.loc 11 670 20
 7491 007e 7B68     		ldr	r3, [r7, #4]
 7492 0080 0122     		movs	r2, #1
 7493 0082 83F83A20 		strb	r2, [r3, #58]
 671:Src/motor.cpp ****     return true;
ARM GAS  /tmp/ccATuxCb.s 			page 282


 7494              		.loc 11 671 12
 7495 0086 0123     		movs	r3, #1
 7496              	.L321:
 672:Src/motor.cpp **** }
 7497              		.loc 11 672 1
 7498 0088 1846     		mov	r0, r3
 7499 008a 1037     		adds	r7, r7, #16
 7500              	.LCFI599:
 7501              		.cfi_def_cfa_offset 8
 7502 008c BD46     		mov	sp, r7
 7503              	.LCFI600:
 7504              		.cfi_def_cfa_register 13
 7505              		@ sp needed
 7506 008e 80BD     		pop	{r7, pc}
 7507              		.cfi_endproc
 7508              	.LFE5014:
 7510              		.section	.text._ZN5Motor26enqueue_modulation_timingsEff,"ax",%progbits
 7511              		.align	1
 7512              		.global	_ZN5Motor26enqueue_modulation_timingsEff
 7513              		.syntax unified
 7514              		.thumb
 7515              		.thumb_func
 7516              		.fpu fpv4-sp-d16
 7518              	_ZN5Motor26enqueue_modulation_timingsEff:
 7519              	.LFB5015:
 673:Src/motor.cpp **** 
 674:Src/motor.cpp **** bool Motor::enqueue_modulation_timings(float mod_alpha, float mod_beta) {
 7520              		.loc 11 674 73
 7521              		.cfi_startproc
 7522              		@ args = 0, pretend = 0, frame = 56
 7523              		@ frame_needed = 1, uses_anonymous_args = 0
 7524 0000 80B5     		push	{r7, lr}
 7525              	.LCFI601:
 7526              		.cfi_def_cfa_offset 8
 7527              		.cfi_offset 7, -8
 7528              		.cfi_offset 14, -4
 7529 0002 8EB0     		sub	sp, sp, #56
 7530              	.LCFI602:
 7531              		.cfi_def_cfa_offset 64
 7532 0004 00AF     		add	r7, sp, #0
 7533              	.LCFI603:
 7534              		.cfi_def_cfa_register 7
 7535 0006 F860     		str	r0, [r7, #12]
 7536 0008 87ED020A 		vstr.32	s0, [r7, #8]
 7537 000c C7ED010A 		vstr.32	s1, [r7, #4]
 675:Src/motor.cpp ****     float tA, tB, tC;
 676:Src/motor.cpp ****     if (SVM(mod_alpha, mod_beta, &tA, &tB, &tC) != 0)
 7538              		.loc 11 676 12
 7539 0010 07F11002 		add	r2, r7, #16
 7540 0014 07F11401 		add	r1, r7, #20
 7541 0018 07F11803 		add	r3, r7, #24
 7542 001c 1846     		mov	r0, r3
 7543 001e D7ED010A 		vldr.32	s1, [r7, #4]
 7544 0022 97ED020A 		vldr.32	s0, [r7, #8]
 7545 0026 FFF7FEFF 		bl	SVM
 7546 002a 0346     		mov	r3, r0
 7547              		.loc 11 676 49
ARM GAS  /tmp/ccATuxCb.s 			page 283


 7548 002c 002B     		cmp	r3, #0
 7549 002e 14BF     		ite	ne
 7550 0030 0123     		movne	r3, #1
 7551 0032 0023     		moveq	r3, #0
 7552 0034 DBB2     		uxtb	r3, r3
 7553              		.loc 11 676 5
 7554 0036 002B     		cmp	r3, #0
 7555 0038 05D0     		beq	.L325
 677:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 7556              		.loc 11 677 21
 7557 003a 8021     		movs	r1, #128
 7558 003c F868     		ldr	r0, [r7, #12]
 7559 003e FFF7FEFF 		bl	_ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE
 7560              		.loc 11 677 74
 7561 0042 0023     		movs	r3, #0
 7562 0044 5AE1     		b	.L330
 7563              	.L325:
 7564              	.LBB65:
 678:Src/motor.cpp **** 
 679:Src/motor.cpp **** 
 680:Src/motor.cpp **** if( deadtime_compensation_coff_ < 0.0f)
 7565              		.loc 11 680 5
 7566 0046 FB68     		ldr	r3, [r7, #12]
 7567 0048 D3EDB27A 		vldr.32	s15, [r3, #712]
 7568              		.loc 11 680 1
 7569 004c F5EEC07A 		vcmpe.f32	s15, #0
 7570 0050 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 7571 0054 40F10381 		bpl	.L332
 7572              	.LBB66:
 681:Src/motor.cpp **** {
 682:Src/motor.cpp ****     I_phase_ = wrap_pm_pi(I_phase_);
 7573              		.loc 11 682 26
 7574 0058 FB68     		ldr	r3, [r7, #12]
 7575 005a D3EDB07A 		vldr.32	s15, [r3, #704]
 7576 005e B0EE670A 		vmov.f32	s0, s15
 7577 0062 FFF7FEFF 		bl	wrap_pm_pi
 7578 0066 F0EE407A 		vmov.f32	s15, s0
 7579              		.loc 11 682 14
 7580 006a FB68     		ldr	r3, [r7, #12]
 7581 006c C3EDB07A 		vstr.32	s15, [r3, #704]
 683:Src/motor.cpp **** 
 684:Src/motor.cpp ****     float Ialpha = current_meas_.phA;
 7582              		.loc 11 684 11
 7583 0070 FB68     		ldr	r3, [r7, #12]
 7584 0072 DB6B     		ldr	r3, [r3, #60]	@ float
 7585 0074 7B63     		str	r3, [r7, #52]	@ float
 685:Src/motor.cpp ****     float Ibeta = one_by_sqrt3 * (current_meas_.phB - current_meas_.phC);
 7586              		.loc 11 685 49
 7587 0076 FB68     		ldr	r3, [r7, #12]
 7588 0078 93ED107A 		vldr.32	s14, [r3, #64]
 7589              		.loc 11 685 69
 7590 007c FB68     		ldr	r3, [r7, #12]
 7591 007e D3ED117A 		vldr.32	s15, [r3, #68]
 7592              		.loc 11 685 53
 7593 0082 77EE677A 		vsub.f32	s15, s14, s15
 7594              		.loc 11 685 11
 7595 0086 9FED9F7A 		vldr.32	s14, .L333
ARM GAS  /tmp/ccATuxCb.s 			page 284


 7596 008a 67EE877A 		vmul.f32	s15, s15, s14
 7597 008e C7ED0C7A 		vstr.32	s15, [r7, #48]
 686:Src/motor.cpp ****     
 687:Src/motor.cpp ****     // Park transform
 688:Src/motor.cpp ****     float c_I = our_arm_cos_f32(I_phase_);
 7598              		.loc 11 688 32
 7599 0092 FB68     		ldr	r3, [r7, #12]
 7600 0094 D3EDB07A 		vldr.32	s15, [r3, #704]
 7601 0098 B0EE670A 		vmov.f32	s0, s15
 7602 009c FFF7FEFF 		bl	our_arm_cos_f32
 7603 00a0 87ED0B0A 		vstr.32	s0, [r7, #44]
 689:Src/motor.cpp ****     float s_I = our_arm_sin_f32(I_phase_);
 7604              		.loc 11 689 32
 7605 00a4 FB68     		ldr	r3, [r7, #12]
 7606 00a6 D3EDB07A 		vldr.32	s15, [r3, #704]
 7607 00aa B0EE670A 		vmov.f32	s0, s15
 7608 00ae FFF7FEFF 		bl	our_arm_sin_f32
 7609 00b2 87ED0A0A 		vstr.32	s0, [r7, #40]
 690:Src/motor.cpp ****     float Id = c_I * Ialpha + s_I * Ibeta;
 7610              		.loc 11 690 20
 7611 00b6 97ED0B7A 		vldr.32	s14, [r7, #44]
 7612 00ba D7ED0D7A 		vldr.32	s15, [r7, #52]
 7613 00be 27EE277A 		vmul.f32	s14, s14, s15
 7614              		.loc 11 690 35
 7615 00c2 D7ED0A6A 		vldr.32	s13, [r7, #40]
 7616 00c6 D7ED0C7A 		vldr.32	s15, [r7, #48]
 7617 00ca 66EEA77A 		vmul.f32	s15, s13, s15
 7618              		.loc 11 690 11
 7619 00ce 77EE277A 		vadd.f32	s15, s14, s15
 7620 00d2 C7ED097A 		vstr.32	s15, [r7, #36]
 691:Src/motor.cpp ****     float Iq = c_I * Ibeta - s_I * Ialpha;
 7621              		.loc 11 691 20
 7622 00d6 97ED0B7A 		vldr.32	s14, [r7, #44]
 7623 00da D7ED0C7A 		vldr.32	s15, [r7, #48]
 7624 00de 27EE277A 		vmul.f32	s14, s14, s15
 7625              		.loc 11 691 34
 7626 00e2 D7ED0A6A 		vldr.32	s13, [r7, #40]
 7627 00e6 D7ED0D7A 		vldr.32	s15, [r7, #52]
 7628 00ea 66EEA77A 		vmul.f32	s15, s13, s15
 7629              		.loc 11 691 11
 7630 00ee 77EE677A 		vsub.f32	s15, s14, s15
 7631 00f2 C7ED087A 		vstr.32	s15, [r7, #32]
 692:Src/motor.cpp **** 
 693:Src/motor.cpp ****     Iq_filter2 += Idq_filter_k2_ * (Iq - Iq_filter2);
 7632              		.loc 11 693 16
 7633 00f6 FB68     		ldr	r3, [r7, #12]
 7634 00f8 93ED2F7A 		vldr.32	s14, [r3, #188]
 7635              		.loc 11 693 19
 7636 00fc FB68     		ldr	r3, [r7, #12]
 7637 00fe D3ED326A 		vldr.32	s13, [r3, #200]
 7638              		.loc 11 693 42
 7639 0102 FB68     		ldr	r3, [r7, #12]
 7640 0104 D3ED2F7A 		vldr.32	s15, [r3, #188]
 7641              		.loc 11 693 40
 7642 0108 97ED086A 		vldr.32	s12, [r7, #32]
 7643 010c 76EE677A 		vsub.f32	s15, s12, s15
 7644              		.loc 11 693 34
ARM GAS  /tmp/ccATuxCb.s 			page 285


 7645 0110 66EEA77A 		vmul.f32	s15, s13, s15
 7646              		.loc 11 693 16
 7647 0114 77EE277A 		vadd.f32	s15, s14, s15
 7648 0118 FB68     		ldr	r3, [r7, #12]
 7649 011a C3ED2F7A 		vstr.32	s15, [r3, #188]
 694:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 7650              		.loc 11 694 16
 7651 011e FB68     		ldr	r3, [r7, #12]
 7652 0120 93ED307A 		vldr.32	s14, [r3, #192]
 7653              		.loc 11 694 19
 7654 0124 FB68     		ldr	r3, [r7, #12]
 7655 0126 D3ED326A 		vldr.32	s13, [r3, #200]
 7656              		.loc 11 694 42
 7657 012a FB68     		ldr	r3, [r7, #12]
 7658 012c D3ED307A 		vldr.32	s15, [r3, #192]
 7659              		.loc 11 694 40
 7660 0130 97ED096A 		vldr.32	s12, [r7, #36]
 7661 0134 76EE677A 		vsub.f32	s15, s12, s15
 7662              		.loc 11 694 34
 7663 0138 66EEA77A 		vmul.f32	s15, s13, s15
 7664              		.loc 11 694 16
 7665 013c 77EE277A 		vadd.f32	s15, s14, s15
 7666 0140 FB68     		ldr	r3, [r7, #12]
 7667 0142 C3ED307A 		vstr.32	s15, [r3, #192]
 695:Src/motor.cpp **** 
 696:Src/motor.cpp ****     float offset_phase = fast_atan2(Iq_filter2, Id_filter2);
 7668              		.loc 11 696 36
 7669 0146 FB68     		ldr	r3, [r7, #12]
 7670 0148 D3ED2F7A 		vldr.32	s15, [r3, #188]
 7671 014c FB68     		ldr	r3, [r7, #12]
 7672 014e 93ED307A 		vldr.32	s14, [r3, #192]
 7673 0152 F0EE470A 		vmov.f32	s1, s14
 7674 0156 B0EE670A 		vmov.f32	s0, s15
 7675 015a FFF7FEFF 		bl	fast_atan2
 7676 015e 87ED070A 		vstr.32	s0, [r7, #28]
 697:Src/motor.cpp ****     total_phase_for_abc_sign_calculation_  = I_phase_ + offset_phase + M_PI;
 7677              		.loc 11 697 46
 7678 0162 FB68     		ldr	r3, [r7, #12]
 7679 0164 93EDB07A 		vldr.32	s14, [r3, #704]
 7680              		.loc 11 697 55
 7681 0168 D7ED077A 		vldr.32	s15, [r7, #28]
 7682 016c 77EE277A 		vadd.f32	s15, s14, s15
 7683              		.loc 11 697 70
 7684 0170 9FED657A 		vldr.32	s14, .L333+4
 7685 0174 77EE877A 		vadd.f32	s15, s15, s14
 7686              		.loc 11 697 44
 7687 0178 FB68     		ldr	r3, [r7, #12]
 7688 017a C3EDAF7A 		vstr.32	s15, [r3, #700]
 698:Src/motor.cpp ****     
 699:Src/motor.cpp ****     total_phase_for_abc_sign_calculation_ = wrap_pm_pi(total_phase_for_abc_sign_calculation_);
 7689              		.loc 11 699 55
 7690 017e FB68     		ldr	r3, [r7, #12]
 7691 0180 D3EDAF7A 		vldr.32	s15, [r3, #700]
 7692 0184 B0EE670A 		vmov.f32	s0, s15
 7693 0188 FFF7FEFF 		bl	wrap_pm_pi
 7694 018c F0EE407A 		vmov.f32	s15, s0
 7695              		.loc 11 699 43
ARM GAS  /tmp/ccATuxCb.s 			page 286


 7696 0190 FB68     		ldr	r3, [r7, #12]
 7697 0192 C3EDAF7A 		vstr.32	s15, [r3, #700]
 700:Src/motor.cpp ****     total_phase_for_abc_sign_calculation_ += M_PI;
 7698              		.loc 11 700 43
 7699 0196 FB68     		ldr	r3, [r7, #12]
 7700 0198 D3EDAF7A 		vldr.32	s15, [r3, #700]
 7701 019c 9FED5A7A 		vldr.32	s14, .L333+4
 7702 01a0 77EE877A 		vadd.f32	s15, s15, s14
 7703 01a4 FB68     		ldr	r3, [r7, #12]
 7704 01a6 C3EDAF7A 		vstr.32	s15, [r3, #700]
 701:Src/motor.cpp **** 
 702:Src/motor.cpp ****     abc_sign_calculation(total_phase_for_abc_sign_calculation_, &sign_a_, &sign_b_, &sign_c_);
 7705              		.loc 11 702 25
 7706 01aa FB68     		ldr	r3, [r7, #12]
 7707 01ac D3EDAF7A 		vldr.32	s15, [r3, #700]
 7708 01b0 FB68     		ldr	r3, [r7, #12]
 7709 01b2 03F52C71 		add	r1, r3, #688
 7710 01b6 FB68     		ldr	r3, [r7, #12]
 7711 01b8 03F52D72 		add	r2, r3, #692
 7712 01bc FB68     		ldr	r3, [r7, #12]
 7713 01be 03F52E73 		add	r3, r3, #696
 7714 01c2 B0EE670A 		vmov.f32	s0, s15
 7715 01c6 F868     		ldr	r0, [r7, #12]
 7716 01c8 FFF7FEFF 		bl	_ZN5Motor20abc_sign_calculationEfPlS0_S0_
 703:Src/motor.cpp ****     
 704:Src/motor.cpp **** 
 705:Src/motor.cpp ****      Aphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_* TIM_1_8_DEADTIME_CLOCK
 7717              		.loc 11 705 49
 7718 01cc FB68     		ldr	r3, [r7, #12]
 7719 01ce D3EDB27A 		vldr.32	s15, [r3, #712]
 7720              		.loc 11 705 76
 7721 01d2 9FED4E7A 		vldr.32	s14, .L333+8
 7722 01d6 67EE877A 		vmul.f32	s15, s15, s14
 7723              		.loc 11 705 39
 7724 01da FDEEE77A 		vcvt.s32.f32	s15, s15
 7725 01de 17EE903A 		vmov	r3, s15	@ int
 7726 01e2 1BB2     		sxth	r3, r3
 7727              		.loc 11 705 36
 7728 01e4 9AB2     		uxth	r2, r3
 7729              		.loc 11 705 104
 7730 01e6 FB68     		ldr	r3, [r7, #12]
 7731 01e8 D3F8B032 		ldr	r3, [r3, #688]
 7732              		.loc 11 705 36
 7733 01ec 9BB2     		uxth	r3, r3
 7734 01ee 12FB03F3 		smulbb	r3, r2, r3
 7735 01f2 9BB2     		uxth	r3, r3
 7736 01f4 1AB2     		sxth	r2, r3
 7737 01f6 FB68     		ldr	r3, [r7, #12]
 7738 01f8 A3F8CC22 		strh	r2, [r3, #716]	@ movhi
 706:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 7739              		.loc 11 706 49
 7740 01fc FB68     		ldr	r3, [r7, #12]
 7741 01fe D3EDB27A 		vldr.32	s15, [r3, #712]
 7742              		.loc 11 706 77
 7743 0202 9FED427A 		vldr.32	s14, .L333+8
 7744 0206 67EE877A 		vmul.f32	s15, s15, s14
 7745              		.loc 11 706 39
ARM GAS  /tmp/ccATuxCb.s 			page 287


 7746 020a FDEEE77A 		vcvt.s32.f32	s15, s15
 7747 020e 17EE903A 		vmov	r3, s15	@ int
 7748 0212 1BB2     		sxth	r3, r3
 7749              		.loc 11 706 36
 7750 0214 9AB2     		uxth	r2, r3
 7751              		.loc 11 706 105
 7752 0216 FB68     		ldr	r3, [r7, #12]
 7753 0218 D3F8B432 		ldr	r3, [r3, #692]
 7754              		.loc 11 706 36
 7755 021c 9BB2     		uxth	r3, r3
 7756 021e 12FB03F3 		smulbb	r3, r2, r3
 7757 0222 9BB2     		uxth	r3, r3
 7758 0224 1AB2     		sxth	r2, r3
 7759 0226 FB68     		ldr	r3, [r7, #12]
 7760 0228 A3F8CE22 		strh	r2, [r3, #718]	@ movhi
 707:Src/motor.cpp ****      Cphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 7761              		.loc 11 707 49
 7762 022c FB68     		ldr	r3, [r7, #12]
 7763 022e D3EDB27A 		vldr.32	s15, [r3, #712]
 7764              		.loc 11 707 77
 7765 0232 9FED367A 		vldr.32	s14, .L333+8
 7766 0236 67EE877A 		vmul.f32	s15, s15, s14
 7767              		.loc 11 707 39
 7768 023a FDEEE77A 		vcvt.s32.f32	s15, s15
 7769 023e 17EE903A 		vmov	r3, s15	@ int
 7770 0242 1BB2     		sxth	r3, r3
 7771              		.loc 11 707 36
 7772 0244 9AB2     		uxth	r2, r3
 7773              		.loc 11 707 105
 7774 0246 FB68     		ldr	r3, [r7, #12]
 7775 0248 D3F8B832 		ldr	r3, [r3, #696]
 7776              		.loc 11 707 36
 7777 024c 9BB2     		uxth	r3, r3
 7778 024e 12FB03F3 		smulbb	r3, r2, r3
 7779 0252 9BB2     		uxth	r3, r3
 7780 0254 1AB2     		sxth	r2, r3
 7781 0256 FB68     		ldr	r3, [r7, #12]
 7782 0258 A3F8D022 		strh	r2, [r3, #720]	@ movhi
 7783              	.LBE66:
 7784 025c 0BE0     		b	.L329
 7785              	.L332:
 708:Src/motor.cpp **** }
 709:Src/motor.cpp **** else
 710:Src/motor.cpp **** {
 711:Src/motor.cpp ****     Aphase_deadtime_compensation_ =0;
 7786              		.loc 11 711 35
 7787 025e FB68     		ldr	r3, [r7, #12]
 7788 0260 0022     		movs	r2, #0
 7789 0262 A3F8CC22 		strh	r2, [r3, #716]	@ movhi
 712:Src/motor.cpp ****     Bphase_deadtime_compensation_ =0;
 7790              		.loc 11 712 35
 7791 0266 FB68     		ldr	r3, [r7, #12]
 7792 0268 0022     		movs	r2, #0
 7793 026a A3F8CE22 		strh	r2, [r3, #718]	@ movhi
 713:Src/motor.cpp ****     Cphase_deadtime_compensation_ =0;
 7794              		.loc 11 713 35
 7795 026e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccATuxCb.s 			page 288


 7796 0270 0022     		movs	r2, #0
 7797 0272 A3F8D022 		strh	r2, [r3, #720]	@ movhi
 7798              	.L329:
 7799              	.LBE65:
 714:Src/motor.cpp **** }
 715:Src/motor.cpp **** 
 716:Src/motor.cpp **** 
 717:Src/motor.cpp ****     next_timings_[0] = (uint16_t)(tA * (float)TIM_1_8_PERIOD_CLOCKS) + Aphase_deadtime_compensation
 7800              		.loc 11 717 38
 7801 0276 D7ED067A 		vldr.32	s15, [r7, #24]
 7802 027a 9FED257A 		vldr.32	s14, .L333+12
 7803 027e 67EE877A 		vmul.f32	s15, s15, s14
 7804              		.loc 11 717 24
 7805 0282 FCEEE77A 		vcvt.u32.f32	s15, s15
 7806 0286 17EE903A 		vmov	r3, s15	@ int
 7807 028a 9AB2     		uxth	r2, r3
 7808              		.loc 11 717 72
 7809 028c FB68     		ldr	r3, [r7, #12]
 7810 028e B3F9CC32 		ldrsh	r3, [r3, #716]
 7811 0292 9BB2     		uxth	r3, r3
 7812              		.loc 11 717 70
 7813 0294 1344     		add	r3, r3, r2
 7814 0296 9AB2     		uxth	r2, r3
 7815              		.loc 11 717 22
 7816 0298 FB68     		ldr	r3, [r7, #12]
 7817 029a 9A81     		strh	r2, [r3, #12]	@ movhi
 718:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 7818              		.loc 11 718 38
 7819 029c D7ED057A 		vldr.32	s15, [r7, #20]
 7820 02a0 9FED1B7A 		vldr.32	s14, .L333+12
 7821 02a4 67EE877A 		vmul.f32	s15, s15, s14
 7822              		.loc 11 718 24
 7823 02a8 FCEEE77A 		vcvt.u32.f32	s15, s15
 7824 02ac 17EE903A 		vmov	r3, s15	@ int
 7825 02b0 9AB2     		uxth	r2, r3
 7826              		.loc 11 718 72
 7827 02b2 FB68     		ldr	r3, [r7, #12]
 7828 02b4 B3F9CE32 		ldrsh	r3, [r3, #718]
 7829 02b8 9BB2     		uxth	r3, r3
 7830              		.loc 11 718 70
 7831 02ba 1344     		add	r3, r3, r2
 7832 02bc 9AB2     		uxth	r2, r3
 7833              		.loc 11 718 22
 7834 02be FB68     		ldr	r3, [r7, #12]
 7835 02c0 DA81     		strh	r2, [r3, #14]	@ movhi
 719:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 7836              		.loc 11 719 38
 7837 02c2 D7ED047A 		vldr.32	s15, [r7, #16]
 7838 02c6 9FED127A 		vldr.32	s14, .L333+12
 7839 02ca 67EE877A 		vmul.f32	s15, s15, s14
 7840              		.loc 11 719 24
 7841 02ce FCEEE77A 		vcvt.u32.f32	s15, s15
 7842 02d2 17EE903A 		vmov	r3, s15	@ int
 7843 02d6 9AB2     		uxth	r2, r3
 7844              		.loc 11 719 72
 7845 02d8 FB68     		ldr	r3, [r7, #12]
 7846 02da B3F9D032 		ldrsh	r3, [r3, #720]
ARM GAS  /tmp/ccATuxCb.s 			page 289


 7847 02de 9BB2     		uxth	r3, r3
 7848              		.loc 11 719 70
 7849 02e0 1344     		add	r3, r3, r2
 7850 02e2 9AB2     		uxth	r2, r3
 7851              		.loc 11 719 22
 7852 02e4 FB68     		ldr	r3, [r7, #12]
 7853 02e6 1A82     		strh	r2, [r3, #16]	@ movhi
 720:Src/motor.cpp ****     next_timings_valid_ = true;
 7854              		.loc 11 720 25
 7855 02e8 FB68     		ldr	r3, [r7, #12]
 7856 02ea 0122     		movs	r2, #1
 7857 02ec 9A74     		strb	r2, [r3, #18]
 721:Src/motor.cpp ****     safety_critical_apply_motor_pwm_timings(
 722:Src/motor.cpp ****                 *this, next_timings_
 7858              		.loc 11 722 24
 7859 02ee FB68     		ldr	r3, [r7, #12]
 7860 02f0 0C33     		adds	r3, r3, #12
 721:Src/motor.cpp ****     safety_critical_apply_motor_pwm_timings(
 7861              		.loc 11 721 44
 7862 02f2 1946     		mov	r1, r3
 7863 02f4 F868     		ldr	r0, [r7, #12]
 7864 02f6 FFF7FEFF 		bl	safety_critical_apply_motor_pwm_timings
 723:Src/motor.cpp ****             );
 724:Src/motor.cpp ****     return true;
 7865              		.loc 11 724 12
 7866 02fa 0123     		movs	r3, #1
 7867              	.L330:
 725:Src/motor.cpp **** }
 7868              		.loc 11 725 1 discriminator 1
 7869 02fc 1846     		mov	r0, r3
 7870 02fe 3837     		adds	r7, r7, #56
 7871              	.LCFI604:
 7872              		.cfi_def_cfa_offset 8
 7873 0300 BD46     		mov	sp, r7
 7874              	.LCFI605:
 7875              		.cfi_def_cfa_register 13
 7876              		@ sp needed
 7877 0302 80BD     		pop	{r7, pc}
 7878              	.L334:
 7879              		.align	2
 7880              	.L333:
 7881 0304 3ACD133F 		.word	1058262330
 7882 0308 DB0F4940 		.word	1078530011
 7883 030c 00002042 		.word	1109393408
 7884 0310 00D08445 		.word	1166331904
 7885              		.cfi_endproc
 7886              	.LFE5015:
 7888              		.section	.text._ZN5Motor23enqueue_voltage_timingsEff,"ax",%progbits
 7889              		.align	1
 7890              		.global	_ZN5Motor23enqueue_voltage_timingsEff
 7891              		.syntax unified
 7892              		.thumb
 7893              		.thumb_func
 7894              		.fpu fpv4-sp-d16
 7896              	_ZN5Motor23enqueue_voltage_timingsEff:
 7897              	.LFB5016:
 726:Src/motor.cpp **** 
ARM GAS  /tmp/ccATuxCb.s 			page 290


 727:Src/motor.cpp **** bool Motor::enqueue_voltage_timings(float v_alpha, float v_beta) {
 7898              		.loc 11 727 66
 7899              		.cfi_startproc
 7900              		@ args = 0, pretend = 0, frame = 32
 7901              		@ frame_needed = 1, uses_anonymous_args = 0
 7902 0000 80B5     		push	{r7, lr}
 7903              	.LCFI606:
 7904              		.cfi_def_cfa_offset 8
 7905              		.cfi_offset 7, -8
 7906              		.cfi_offset 14, -4
 7907 0002 88B0     		sub	sp, sp, #32
 7908              	.LCFI607:
 7909              		.cfi_def_cfa_offset 40
 7910 0004 00AF     		add	r7, sp, #0
 7911              	.LCFI608:
 7912              		.cfi_def_cfa_register 7
 7913 0006 F860     		str	r0, [r7, #12]
 7914 0008 87ED020A 		vstr.32	s0, [r7, #8]
 7915 000c C7ED010A 		vstr.32	s1, [r7, #4]
 728:Src/motor.cpp ****     float vfactor = 1.0f / ((2.0f / 3.0f) * vbus_voltage);  // float vfactor = 1.0f / ((2.0f / 3.0f
 7916              		.loc 11 728 43
 7917 0010 1A4B     		ldr	r3, .L338
 7918 0012 D3ED007A 		vldr.32	s15, [r3]
 7919 0016 9FED1A7A 		vldr.32	s14, .L338+4
 7920 001a 27EE877A 		vmul.f32	s14, s15, s14
 7921              		.loc 11 728 11
 7922 001e F7EE006A 		vmov.f32	s13, #1.0e+0
 7923 0022 C6EE877A 		vdiv.f32	s15, s13, s14
 7924 0026 C7ED077A 		vstr.32	s15, [r7, #28]
 729:Src/motor.cpp ****     float mod_alpha = vfactor * v_alpha;
 7925              		.loc 11 729 11
 7926 002a 97ED077A 		vldr.32	s14, [r7, #28]
 7927 002e D7ED027A 		vldr.32	s15, [r7, #8]
 7928 0032 67EE277A 		vmul.f32	s15, s14, s15
 7929 0036 C7ED067A 		vstr.32	s15, [r7, #24]
 730:Src/motor.cpp ****     float mod_beta = vfactor * v_beta;
 7930              		.loc 11 730 11
 7931 003a 97ED077A 		vldr.32	s14, [r7, #28]
 7932 003e D7ED017A 		vldr.32	s15, [r7, #4]
 7933 0042 67EE277A 		vmul.f32	s15, s14, s15
 7934 0046 C7ED057A 		vstr.32	s15, [r7, #20]
 731:Src/motor.cpp **** 
 732:Src/motor.cpp ****     log_timing(ODriveIntf::TIMING_LOG_FOC_VOLTAGE);
 7935              		.loc 11 732 15
 7936 004a 0721     		movs	r1, #7
 7937 004c F868     		ldr	r0, [r7, #12]
 7938 004e FFF7FEFF 		bl	_ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE
 733:Src/motor.cpp **** 
 734:Src/motor.cpp ****     if (!enqueue_modulation_timings(mod_alpha, mod_beta))
 7939              		.loc 11 734 36
 7940 0052 D7ED050A 		vldr.32	s1, [r7, #20]
 7941 0056 97ED060A 		vldr.32	s0, [r7, #24]
 7942 005a F868     		ldr	r0, [r7, #12]
 7943 005c FFF7FEFF 		bl	_ZN5Motor26enqueue_modulation_timingsEff
 7944 0060 0346     		mov	r3, r0
 7945              		.loc 11 734 9
 7946 0062 83F00103 		eor	r3, r3, #1
ARM GAS  /tmp/ccATuxCb.s 			page 291


 7947 0066 DBB2     		uxtb	r3, r3
 7948              		.loc 11 734 5
 7949 0068 002B     		cmp	r3, #0
 7950 006a 01D0     		beq	.L336
 735:Src/motor.cpp ****         return false;
 7951              		.loc 11 735 16
 7952 006c 0023     		movs	r3, #0
 7953 006e 00E0     		b	.L337
 7954              	.L336:
 736:Src/motor.cpp ****     return true;
 7955              		.loc 11 736 12
 7956 0070 0123     		movs	r3, #1
 7957              	.L337:
 737:Src/motor.cpp **** }
 7958              		.loc 11 737 1
 7959 0072 1846     		mov	r0, r3
 7960 0074 2037     		adds	r7, r7, #32
 7961              	.LCFI609:
 7962              		.cfi_def_cfa_offset 8
 7963 0076 BD46     		mov	sp, r7
 7964              	.LCFI610:
 7965              		.cfi_def_cfa_register 13
 7966              		@ sp needed
 7967 0078 80BD     		pop	{r7, pc}
 7968              	.L339:
 7969 007a 00BF     		.align	2
 7970              	.L338:
 7971 007c 00000000 		.word	vbus_voltage
 7972 0080 ABAA2A3F 		.word	1059760811
 7973              		.cfi_endproc
 7974              	.LFE5016:
 7976              		.section	.text._ZN5Motor11FOC_voltageEfff,"ax",%progbits
 7977              		.align	1
 7978              		.global	_ZN5Motor11FOC_voltageEfff
 7979              		.syntax unified
 7980              		.thumb
 7981              		.thumb_func
 7982              		.fpu fpv4-sp-d16
 7984              	_ZN5Motor11FOC_voltageEfff:
 7985              	.LFB5017:
 738:Src/motor.cpp **** 
 739:Src/motor.cpp **** // We should probably make FOC Current call FOC Voltage to avoid duplication.
 740:Src/motor.cpp **** bool Motor::FOC_voltage(float v_d, float v_q, float pwm_phase) {
 7986              		.loc 11 740 64
 7987              		.cfi_startproc
 7988              		@ args = 0, pretend = 0, frame = 32
 7989              		@ frame_needed = 1, uses_anonymous_args = 0
 7990 0000 80B5     		push	{r7, lr}
 7991              	.LCFI611:
 7992              		.cfi_def_cfa_offset 8
 7993              		.cfi_offset 7, -8
 7994              		.cfi_offset 14, -4
 7995 0002 88B0     		sub	sp, sp, #32
 7996              	.LCFI612:
 7997              		.cfi_def_cfa_offset 40
 7998 0004 00AF     		add	r7, sp, #0
 7999              	.LCFI613:
ARM GAS  /tmp/ccATuxCb.s 			page 292


 8000              		.cfi_def_cfa_register 7
 8001 0006 F860     		str	r0, [r7, #12]
 8002 0008 87ED020A 		vstr.32	s0, [r7, #8]
 8003 000c C7ED010A 		vstr.32	s1, [r7, #4]
 8004 0010 87ED001A 		vstr.32	s2, [r7]
 741:Src/motor.cpp ****     float c = our_arm_cos_f32(pwm_phase);
 8005              		.loc 11 741 30
 8006 0014 97ED000A 		vldr.32	s0, [r7]
 8007 0018 FFF7FEFF 		bl	our_arm_cos_f32
 8008 001c 87ED070A 		vstr.32	s0, [r7, #28]
 742:Src/motor.cpp ****     float s = our_arm_sin_f32(pwm_phase);
 8009              		.loc 11 742 30
 8010 0020 97ED000A 		vldr.32	s0, [r7]
 8011 0024 FFF7FEFF 		bl	our_arm_sin_f32
 8012 0028 87ED060A 		vstr.32	s0, [r7, #24]
 743:Src/motor.cpp ****     float v_alpha = c*v_d - s*v_q;
 8013              		.loc 11 743 22
 8014 002c 97ED077A 		vldr.32	s14, [r7, #28]
 8015 0030 D7ED027A 		vldr.32	s15, [r7, #8]
 8016 0034 27EE277A 		vmul.f32	s14, s14, s15
 8017              		.loc 11 743 30
 8018 0038 D7ED066A 		vldr.32	s13, [r7, #24]
 8019 003c D7ED017A 		vldr.32	s15, [r7, #4]
 8020 0040 66EEA77A 		vmul.f32	s15, s13, s15
 8021              		.loc 11 743 11
 8022 0044 77EE677A 		vsub.f32	s15, s14, s15
 8023 0048 C7ED057A 		vstr.32	s15, [r7, #20]
 744:Src/motor.cpp ****     float v_beta = c*v_q + s*v_d;
 8024              		.loc 11 744 21
 8025 004c 97ED077A 		vldr.32	s14, [r7, #28]
 8026 0050 D7ED017A 		vldr.32	s15, [r7, #4]
 8027 0054 27EE277A 		vmul.f32	s14, s14, s15
 8028              		.loc 11 744 29
 8029 0058 D7ED066A 		vldr.32	s13, [r7, #24]
 8030 005c D7ED027A 		vldr.32	s15, [r7, #8]
 8031 0060 66EEA77A 		vmul.f32	s15, s13, s15
 8032              		.loc 11 744 11
 8033 0064 77EE277A 		vadd.f32	s15, s14, s15
 8034 0068 C7ED047A 		vstr.32	s15, [r7, #16]
 745:Src/motor.cpp **** 
 746:Src/motor.cpp ****     return enqueue_voltage_timings(v_alpha, v_beta);
 8035              		.loc 11 746 35
 8036 006c D7ED040A 		vldr.32	s1, [r7, #16]
 8037 0070 97ED050A 		vldr.32	s0, [r7, #20]
 8038 0074 F868     		ldr	r0, [r7, #12]
 8039 0076 FFF7FEFF 		bl	_ZN5Motor23enqueue_voltage_timingsEff
 8040 007a 0346     		mov	r3, r0
 747:Src/motor.cpp **** }
 8041              		.loc 11 747 1
 8042 007c 1846     		mov	r0, r3
 8043 007e 2037     		adds	r7, r7, #32
 8044              	.LCFI614:
 8045              		.cfi_def_cfa_offset 8
 8046 0080 BD46     		mov	sp, r7
 8047              	.LCFI615:
 8048              		.cfi_def_cfa_register 13
 8049              		@ sp needed
ARM GAS  /tmp/ccATuxCb.s 			page 293


 8050 0082 80BD     		pop	{r7, pc}
 8051              		.cfi_endproc
 8052              	.LFE5017:
 8054              		.section	.text._ZN5Motor20abc_sign_calculationEfPlS0_S0_,"ax",%progbits
 8055              		.align	1
 8056              		.global	_ZN5Motor20abc_sign_calculationEfPlS0_S0_
 8057              		.syntax unified
 8058              		.thumb
 8059              		.thumb_func
 8060              		.fpu fpv4-sp-d16
 8062              	_ZN5Motor20abc_sign_calculationEfPlS0_S0_:
 8063              	.LFB5018:
 748:Src/motor.cpp **** 
 749:Src/motor.cpp **** void Motor::abc_sign_calculation(float phase , int32_t *a, int32_t *b, int32_t *c)
 750:Src/motor.cpp **** {
 8064              		.loc 11 750 1
 8065              		.cfi_startproc
 8066              		@ args = 0, pretend = 0, frame = 24
 8067              		@ frame_needed = 1, uses_anonymous_args = 0
 8068              		@ link register save eliminated.
 8069 0000 80B4     		push	{r7}
 8070              	.LCFI616:
 8071              		.cfi_def_cfa_offset 4
 8072              		.cfi_offset 7, -4
 8073 0002 87B0     		sub	sp, sp, #28
 8074              	.LCFI617:
 8075              		.cfi_def_cfa_offset 32
 8076 0004 00AF     		add	r7, sp, #0
 8077              	.LCFI618:
 8078              		.cfi_def_cfa_register 7
 8079 0006 7861     		str	r0, [r7, #20]
 8080 0008 87ED040A 		vstr.32	s0, [r7, #16]
 8081 000c F960     		str	r1, [r7, #12]
 8082 000e BA60     		str	r2, [r7, #8]
 8083 0010 7B60     		str	r3, [r7, #4]
 751:Src/motor.cpp ****     if(phase > 0 && phase <= M_PI/6){
 8084              		.loc 11 751 5
 8085 0012 D7ED047A 		vldr.32	s15, [r7, #16]
 8086 0016 F5EEC07A 		vcmpe.f32	s15, #0
 8087 001a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8088 001e 14DD     		ble	.L343
 8089              		.loc 11 751 18 discriminator 1
 8090 0020 D7ED047A 		vldr.32	s15, [r7, #16]
 8091 0024 9FED697A 		vldr.32	s14, .L379
 8092 0028 F4EEC77A 		vcmpe.f32	s15, s14
 8093 002c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8094 0030 0BD8     		bhi	.L343
 752:Src/motor.cpp ****        *a = 1;
 8095              		.loc 11 752 11
 8096 0032 FB68     		ldr	r3, [r7, #12]
 8097 0034 0122     		movs	r2, #1
 8098 0036 1A60     		str	r2, [r3]
 753:Src/motor.cpp ****        *b = -1;
 8099              		.loc 11 753 11
 8100 0038 BB68     		ldr	r3, [r7, #8]
 8101 003a 4FF0FF32 		mov	r2, #-1
 8102 003e 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccATuxCb.s 			page 294


 754:Src/motor.cpp ****        *c = -1;
 8103              		.loc 11 754 11
 8104 0040 7B68     		ldr	r3, [r7, #4]
 8105 0042 4FF0FF32 		mov	r2, #-1
 8106 0046 1A60     		str	r2, [r3]
 8107 0048 BAE0     		b	.L346
 8108              	.L343:
 755:Src/motor.cpp ****     }
 756:Src/motor.cpp ****     else if(phase > M_PI/6 && phase <= 3*M_PI/6){
 8109              		.loc 11 756 10
 8110 004a D7ED047A 		vldr.32	s15, [r7, #16]
 8111 004e 9FED5F7A 		vldr.32	s14, .L379
 8112 0052 F4EEC77A 		vcmpe.f32	s15, s14
 8113 0056 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8114 005a 13DD     		ble	.L347
 8115              		.loc 11 756 28 discriminator 1
 8116 005c D7ED047A 		vldr.32	s15, [r7, #16]
 8117 0060 9FED5B7A 		vldr.32	s14, .L379+4
 8118 0064 F4EEC77A 		vcmpe.f32	s15, s14
 8119 0068 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8120 006c 0AD8     		bhi	.L347
 757:Src/motor.cpp ****        *a = 1;
 8121              		.loc 11 757 11
 8122 006e FB68     		ldr	r3, [r7, #12]
 8123 0070 0122     		movs	r2, #1
 8124 0072 1A60     		str	r2, [r3]
 758:Src/motor.cpp ****        *b = 1;
 8125              		.loc 11 758 11
 8126 0074 BB68     		ldr	r3, [r7, #8]
 8127 0076 0122     		movs	r2, #1
 8128 0078 1A60     		str	r2, [r3]
 759:Src/motor.cpp ****        *c = -1;
 8129              		.loc 11 759 11
 8130 007a 7B68     		ldr	r3, [r7, #4]
 8131 007c 4FF0FF32 		mov	r2, #-1
 8132 0080 1A60     		str	r2, [r3]
 8133 0082 9DE0     		b	.L346
 8134              	.L347:
 760:Src/motor.cpp ****     }
 761:Src/motor.cpp ****     else if(phase > 3*M_PI/6 && phase <= 5*M_PI/6){
 8135              		.loc 11 761 10
 8136 0084 D7ED047A 		vldr.32	s15, [r7, #16]
 8137 0088 9FED517A 		vldr.32	s14, .L379+4
 8138 008c F4EEC77A 		vcmpe.f32	s15, s14
 8139 0090 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8140 0094 14DD     		ble	.L350
 8141              		.loc 11 761 30 discriminator 1
 8142 0096 D7ED047A 		vldr.32	s15, [r7, #16]
 8143 009a 9FED4E7A 		vldr.32	s14, .L379+8
 8144 009e F4EEC77A 		vcmpe.f32	s15, s14
 8145 00a2 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8146 00a6 0BD8     		bhi	.L350
 762:Src/motor.cpp ****        *a = -1;
 8147              		.loc 11 762 11
 8148 00a8 FB68     		ldr	r3, [r7, #12]
 8149 00aa 4FF0FF32 		mov	r2, #-1
 8150 00ae 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccATuxCb.s 			page 295


 763:Src/motor.cpp ****        *b = 1;
 8151              		.loc 11 763 11
 8152 00b0 BB68     		ldr	r3, [r7, #8]
 8153 00b2 0122     		movs	r2, #1
 8154 00b4 1A60     		str	r2, [r3]
 764:Src/motor.cpp ****        *c = -1;
 8155              		.loc 11 764 11
 8156 00b6 7B68     		ldr	r3, [r7, #4]
 8157 00b8 4FF0FF32 		mov	r2, #-1
 8158 00bc 1A60     		str	r2, [r3]
 8159 00be 7FE0     		b	.L346
 8160              	.L350:
 765:Src/motor.cpp ****     }
 766:Src/motor.cpp ****     else if(phase > 5*M_PI/6 && phase <= 7*M_PI/6){
 8161              		.loc 11 766 10
 8162 00c0 D7ED047A 		vldr.32	s15, [r7, #16]
 8163 00c4 9FED437A 		vldr.32	s14, .L379+8
 8164 00c8 F4EEC77A 		vcmpe.f32	s15, s14
 8165 00cc F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8166 00d0 13DD     		ble	.L353
 8167              		.loc 11 766 30 discriminator 1
 8168 00d2 D7ED047A 		vldr.32	s15, [r7, #16]
 8169 00d6 9FED407A 		vldr.32	s14, .L379+12
 8170 00da F4EEC77A 		vcmpe.f32	s15, s14
 8171 00de F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8172 00e2 0AD8     		bhi	.L353
 767:Src/motor.cpp ****        *a = -1;
 8173              		.loc 11 767 11
 8174 00e4 FB68     		ldr	r3, [r7, #12]
 8175 00e6 4FF0FF32 		mov	r2, #-1
 8176 00ea 1A60     		str	r2, [r3]
 768:Src/motor.cpp ****        *b = 1;
 8177              		.loc 11 768 11
 8178 00ec BB68     		ldr	r3, [r7, #8]
 8179 00ee 0122     		movs	r2, #1
 8180 00f0 1A60     		str	r2, [r3]
 769:Src/motor.cpp ****        *c = 1;
 8181              		.loc 11 769 11
 8182 00f2 7B68     		ldr	r3, [r7, #4]
 8183 00f4 0122     		movs	r2, #1
 8184 00f6 1A60     		str	r2, [r3]
 8185 00f8 62E0     		b	.L346
 8186              	.L353:
 770:Src/motor.cpp ****     }
 771:Src/motor.cpp ****     else if(phase > 7*M_PI/6 && phase <= 3*M_PI/2){
 8187              		.loc 11 771 10
 8188 00fa D7ED047A 		vldr.32	s15, [r7, #16]
 8189 00fe 9FED367A 		vldr.32	s14, .L379+12
 8190 0102 F4EEC77A 		vcmpe.f32	s15, s14
 8191 0106 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8192 010a 14DD     		ble	.L356
 8193              		.loc 11 771 30 discriminator 1
 8194 010c D7ED047A 		vldr.32	s15, [r7, #16]
 8195 0110 9FED327A 		vldr.32	s14, .L379+16
 8196 0114 F4EEC77A 		vcmpe.f32	s15, s14
 8197 0118 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8198 011c 0BD8     		bhi	.L356
ARM GAS  /tmp/ccATuxCb.s 			page 296


 772:Src/motor.cpp ****        *a = -1;
 8199              		.loc 11 772 11
 8200 011e FB68     		ldr	r3, [r7, #12]
 8201 0120 4FF0FF32 		mov	r2, #-1
 8202 0124 1A60     		str	r2, [r3]
 773:Src/motor.cpp ****        *b = -1;
 8203              		.loc 11 773 11
 8204 0126 BB68     		ldr	r3, [r7, #8]
 8205 0128 4FF0FF32 		mov	r2, #-1
 8206 012c 1A60     		str	r2, [r3]
 774:Src/motor.cpp ****        *c = 1;
 8207              		.loc 11 774 11
 8208 012e 7B68     		ldr	r3, [r7, #4]
 8209 0130 0122     		movs	r2, #1
 8210 0132 1A60     		str	r2, [r3]
 8211 0134 44E0     		b	.L346
 8212              	.L356:
 775:Src/motor.cpp ****     }
 776:Src/motor.cpp ****     else if (phase > 3*M_PI/2 && phase <= 11*M_PI/6){
 8213              		.loc 11 776 10
 8214 0136 D7ED047A 		vldr.32	s15, [r7, #16]
 8215 013a 9FED287A 		vldr.32	s14, .L379+16
 8216 013e F4EEC77A 		vcmpe.f32	s15, s14
 8217 0142 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8218 0146 13DD     		ble	.L359
 8219              		.loc 11 776 31 discriminator 1
 8220 0148 D7ED047A 		vldr.32	s15, [r7, #16]
 8221 014c 9FED247A 		vldr.32	s14, .L379+20
 8222 0150 F4EEC77A 		vcmpe.f32	s15, s14
 8223 0154 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8224 0158 0AD8     		bhi	.L359
 777:Src/motor.cpp ****        *a = 1;
 8225              		.loc 11 777 11
 8226 015a FB68     		ldr	r3, [r7, #12]
 8227 015c 0122     		movs	r2, #1
 8228 015e 1A60     		str	r2, [r3]
 778:Src/motor.cpp ****        *b = -1;
 8229              		.loc 11 778 11
 8230 0160 BB68     		ldr	r3, [r7, #8]
 8231 0162 4FF0FF32 		mov	r2, #-1
 8232 0166 1A60     		str	r2, [r3]
 779:Src/motor.cpp ****        *c = 1;
 8233              		.loc 11 779 11
 8234 0168 7B68     		ldr	r3, [r7, #4]
 8235 016a 0122     		movs	r2, #1
 8236 016c 1A60     		str	r2, [r3]
 8237 016e 27E0     		b	.L346
 8238              	.L359:
 780:Src/motor.cpp ****     }
 781:Src/motor.cpp ****     else if (phase > 11*M_PI/6 && phase <= 2*M_PI){
 8239              		.loc 11 781 10
 8240 0170 D7ED047A 		vldr.32	s15, [r7, #16]
 8241 0174 9FED1A7A 		vldr.32	s14, .L379+20
 8242 0178 F4EEC77A 		vcmpe.f32	s15, s14
 8243 017c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8244 0180 14DD     		ble	.L362
 8245              		.loc 11 781 32 discriminator 1
ARM GAS  /tmp/ccATuxCb.s 			page 297


 8246 0182 D7ED047A 		vldr.32	s15, [r7, #16]
 8247 0186 9FED177A 		vldr.32	s14, .L379+24
 8248 018a F4EEC77A 		vcmpe.f32	s15, s14
 8249 018e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8250 0192 0BD8     		bhi	.L362
 782:Src/motor.cpp ****        *a = 1;
 8251              		.loc 11 782 11
 8252 0194 FB68     		ldr	r3, [r7, #12]
 8253 0196 0122     		movs	r2, #1
 8254 0198 1A60     		str	r2, [r3]
 783:Src/motor.cpp ****        *b = -1;
 8255              		.loc 11 783 11
 8256 019a BB68     		ldr	r3, [r7, #8]
 8257 019c 4FF0FF32 		mov	r2, #-1
 8258 01a0 1A60     		str	r2, [r3]
 784:Src/motor.cpp ****        *c = -1;
 8259              		.loc 11 784 11
 8260 01a2 7B68     		ldr	r3, [r7, #4]
 8261 01a4 4FF0FF32 		mov	r2, #-1
 8262 01a8 1A60     		str	r2, [r3]
 8263 01aa 09E0     		b	.L346
 8264              	.L362:
 785:Src/motor.cpp ****     }
 786:Src/motor.cpp ****     else{
 787:Src/motor.cpp ****        *a = 0;
 8265              		.loc 11 787 11
 8266 01ac FB68     		ldr	r3, [r7, #12]
 8267 01ae 0022     		movs	r2, #0
 8268 01b0 1A60     		str	r2, [r3]
 788:Src/motor.cpp ****        *b = 0;
 8269              		.loc 11 788 11
 8270 01b2 BB68     		ldr	r3, [r7, #8]
 8271 01b4 0022     		movs	r2, #0
 8272 01b6 1A60     		str	r2, [r3]
 789:Src/motor.cpp ****        *c = 0;
 8273              		.loc 11 789 11
 8274 01b8 7B68     		ldr	r3, [r7, #4]
 8275 01ba 0022     		movs	r2, #0
 8276 01bc 1A60     		str	r2, [r3]
 790:Src/motor.cpp ****     }
 791:Src/motor.cpp **** }
 8277              		.loc 11 791 1
 8278 01be 00BF     		nop
 8279              	.L346:
 8280 01c0 00BF     		nop
 8281 01c2 1C37     		adds	r7, r7, #28
 8282              	.LCFI619:
 8283              		.cfi_def_cfa_offset 4
 8284 01c4 BD46     		mov	sp, r7
 8285              	.LCFI620:
 8286              		.cfi_def_cfa_register 13
 8287              		@ sp needed
 8288 01c6 5DF8047B 		ldr	r7, [sp], #4
 8289              	.LCFI621:
 8290              		.cfi_restore 7
 8291              		.cfi_def_cfa_offset 0
 8292 01ca 7047     		bx	lr
ARM GAS  /tmp/ccATuxCb.s 			page 298


 8293              	.L380:
 8294              		.align	2
 8295              	.L379:
 8296 01cc 920A063F 		.word	1057360530
 8297 01d0 DB0FC93F 		.word	1070141403
 8298 01d4 378D2740 		.word	1076333879
 8299 01d8 80926A40 		.word	1080726144
 8300 01dc E4CB9640 		.word	1083624420
 8301 01e0 894EB840 		.word	1085820553
 8302 01e4 DB0FC940 		.word	1086918619
 8303              		.cfi_endproc
 8304              	.LFE5018:
 8306              		.section	.text._ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_,"axG",%progbits,
 8307              		.align	1
 8308              		.weak	_ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 8309              		.syntax unified
 8310              		.thumb
 8311              		.thumb_func
 8312              		.fpu fpv4-sp-d16
 8314              	_ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_:
 8315              	.LFB5020:
 8316              		.file 17 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // <utility> -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** /*
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  *
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * Copyright (c) 1994
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * Hewlett-Packard Company
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  *
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * provided that the above copyright notice appear in all copies and
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * that both that copyright notice and this permission notice appear
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * representations about the suitability of this software for any
ARM GAS  /tmp/ccATuxCb.s 			page 299


  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  *
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  *
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * Copyright (c) 1996,1997
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  *
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * provided that the above copyright notice appear in all copies and
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * that both that copyright notice and this permission notice appear
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * representations about the suitability of this software for any
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  */
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** /** @file include/utility
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  *  This is a Standard C++ Library header.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  */
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #ifndef _GLIBCXX_UTILITY
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #define _GLIBCXX_UTILITY 1
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #pragma GCC system_header
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** /**
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * @defgroup utilities Utilities
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  *
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * Components deemed generally useful. Includes pair, tuple,
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * forward/move helpers, ratio, function object, metaprogramming and
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  * type traits, time, date, and memory functions.
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****  */
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #include <bits/c++config.h>
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #include <bits/stl_relops.h>
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #include <bits/stl_pair.h>
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #if __cplusplus >= 201103L
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #include <type_traits>
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #include <bits/move.h>
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #include <initializer_list>
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #if __cplusplus > 201703L
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #include <ext/numeric_traits.h>
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #endif
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** namespace std _GLIBCXX_VISIBILITY(default)
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** {
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   /// Finds the size of a given tuple type.
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<typename _Tp>
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_size;
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   // 2313. tuple_size should always derive from integral_constant<size_t, N>
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   // 2770. tuple_size<const T> specialization is not SFINAE compatible
ARM GAS  /tmp/ccATuxCb.s 			page 300


  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<typename _Tp,
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 	   typename _Up = typename remove_cv<_Tp>::type,
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 	   typename = typename enable_if<is_same<_Tp, _Up>::value>::type,
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 	   size_t = tuple_size<_Tp>::value>
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     using __enable_if_has_tuple_size = _Tp;
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<typename _Tp>
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_size<const __enable_if_has_tuple_size<_Tp>>
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     : public tuple_size<_Tp> { };
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<typename _Tp>
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_size<volatile __enable_if_has_tuple_size<_Tp>>
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     : public tuple_size<_Tp> { };
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<typename _Tp>
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_size<const volatile __enable_if_has_tuple_size<_Tp>>
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     : public tuple_size<_Tp> { };
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   /// Gives the type of the ith element of a given tuple type.
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<std::size_t __i, typename _Tp>
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_element;
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   // Duplicate of C++14's tuple_element_t for internal use in C++11 mode
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<std::size_t __i, typename _Tp>
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     using __tuple_element_t = typename tuple_element<__i, _Tp>::type;
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<std::size_t __i, typename _Tp>
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_element<__i, const _Tp>
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     {
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     };
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<std::size_t __i, typename _Tp>
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_element<__i, volatile _Tp>
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     {
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     };
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<std::size_t __i, typename _Tp>
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_element<__i, const volatile _Tp>
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     {
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     };
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #if __cplusplus >= 201402L
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // The standard says this macro and alias template should be in <tuple>
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // but we define them here, to be available when the partial specializations
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** // of tuple_element<pair<T,U>> and tuple_element<array<T,N>> are defined.
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #define __cpp_lib_tuple_element_t 201402L
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<std::size_t __i, typename _Tp>
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     using tuple_element_t = typename tuple_element<__i, _Tp>::type;
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** #endif
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   // Various functions which give std::pair a tuple-like interface.
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
ARM GAS  /tmp/ccATuxCb.s 			page 301


 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   /// Partial specialization for std::pair
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<typename _T1, typename _T2>
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct __is_tuple_like_impl<std::pair<_T1, _T2>> : true_type
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     { };
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   /// Partial specialization for std::pair
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<class _Tp1, class _Tp2>
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_size<std::pair<_Tp1, _Tp2>>
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     : public integral_constant<std::size_t, 2> { };
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   /// Partial specialization for std::pair
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<class _Tp1, class _Tp2>
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_element<0, std::pair<_Tp1, _Tp2>>
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     { typedef _Tp1 type; };
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   /// Partial specialization for std::pair
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<class _Tp1, class _Tp2>
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct tuple_element<1, std::pair<_Tp1, _Tp2>>
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     { typedef _Tp2 type; };
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<std::size_t _Int>
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct __pair_get;
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<>
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct __pair_get<0>
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     {
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       template<typename _Tp1, typename _Tp2>
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         static constexpr _Tp1&
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return __pair.first; }
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       template<typename _Tp1, typename _Tp2>
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         static constexpr _Tp1&&
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return std::forward<_Tp1>(__pair.first); }
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       template<typename _Tp1, typename _Tp2>
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         static constexpr const _Tp1&
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return __pair.first; }
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       template<typename _Tp1, typename _Tp2>
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         static constexpr const _Tp1&&
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return std::forward<const _Tp1>(__pair.first); }
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     };
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<>
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     struct __pair_get<1>
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     {
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       template<typename _Tp1, typename _Tp2>
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         static constexpr _Tp2&
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return __pair.second; }
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       template<typename _Tp1, typename _Tp2>
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         static constexpr _Tp2&&
ARM GAS  /tmp/ccATuxCb.s 			page 302


 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return std::forward<_Tp2>(__pair.second); }
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       template<typename _Tp1, typename _Tp2>
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         static constexpr const _Tp2&
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return __pair.second; }
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****       template<typename _Tp1, typename _Tp2>
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         static constexpr const _Tp2&&
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return std::forward<const _Tp2>(__pair.second); }
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     };
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<std::size_t _Int, class _Tp1, class _Tp2>
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     get(std::pair<_Tp1, _Tp2>& __in) noexcept
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     { return __pair_get<_Int>::__get(__in); }
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****   template<std::size_t _Int, class _Tp1, class _Tp2>
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     get(std::pair<_Tp1, _Tp2>&& __in) noexcept
 8317              		.loc 17 228 5
 8318              		.cfi_startproc
 8319              		@ args = 0, pretend = 0, frame = 8
 8320              		@ frame_needed = 1, uses_anonymous_args = 0
 8321 0000 80B5     		push	{r7, lr}
 8322              	.LCFI622:
 8323              		.cfi_def_cfa_offset 8
 8324              		.cfi_offset 7, -8
 8325              		.cfi_offset 14, -4
 8326 0002 82B0     		sub	sp, sp, #8
 8327              	.LCFI623:
 8328              		.cfi_def_cfa_offset 16
 8329 0004 00AF     		add	r7, sp, #0
 8330              	.LCFI624:
 8331              		.cfi_def_cfa_register 7
 8332 0006 7860     		str	r0, [r7, #4]
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     { return __pair_get<_Int>::__move_get(std::move(__in)); }
 8333              		.loc 17 229 52
 8334 0008 7868     		ldr	r0, [r7, #4]
 8335 000a FFF7FEFF 		bl	_ZSt4moveIRSt4pairIffEEONSt16remove_referenceIT_E4typeEOS4_
 8336 000e 0346     		mov	r3, r0
 8337              		.loc 17 229 42
 8338 0010 1846     		mov	r0, r3
 8339 0012 FFF7FEFF 		bl	_ZNSt10__pair_getILj0EE10__move_getIffEEOT_OSt4pairIS2_T0_E
 8340 0016 0346     		mov	r3, r0
 8341              		.loc 17 229 61
 8342 0018 1846     		mov	r0, r3
 8343 001a 0837     		adds	r7, r7, #8
 8344              	.LCFI625:
 8345              		.cfi_def_cfa_offset 8
 8346 001c BD46     		mov	sp, r7
 8347              	.LCFI626:
 8348              		.cfi_def_cfa_register 13
 8349              		@ sp needed
 8350 001e 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccATuxCb.s 			page 303


 8351              		.cfi_endproc
 8352              	.LFE5020:
 8354              		.section	.text._ZNSt10__pair_getILj0EE10__move_getIffEEOT_OSt4pairIS2_T0_E,"axG",%progbits,_ZNSt10
 8355              		.align	1
 8356              		.weak	_ZNSt10__pair_getILj0EE10__move_getIffEEOT_OSt4pairIS2_T0_E
 8357              		.syntax unified
 8358              		.thumb
 8359              		.thumb_func
 8360              		.fpu fpv4-sp-d16
 8362              	_ZNSt10__pair_getILj0EE10__move_getIffEEOT_OSt4pairIS2_T0_E:
 8363              	.LFB5021:
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return std::forward<_Tp1>(__pair.first); }
 8364              		.loc 17 183 9
 8365              		.cfi_startproc
 8366              		@ args = 0, pretend = 0, frame = 8
 8367              		@ frame_needed = 1, uses_anonymous_args = 0
 8368 0000 80B5     		push	{r7, lr}
 8369              	.LCFI627:
 8370              		.cfi_def_cfa_offset 8
 8371              		.cfi_offset 7, -8
 8372              		.cfi_offset 14, -4
 8373 0002 82B0     		sub	sp, sp, #8
 8374              	.LCFI628:
 8375              		.cfi_def_cfa_offset 16
 8376 0004 00AF     		add	r7, sp, #0
 8377              	.LCFI629:
 8378              		.cfi_def_cfa_register 7
 8379 0006 7860     		str	r0, [r7, #4]
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 8380              		.loc 17 184 44
 8381 0008 7B68     		ldr	r3, [r7, #4]
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 8382              		.loc 17 184 36
 8383 000a 1846     		mov	r0, r3
 8384 000c FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 8385 0010 0346     		mov	r3, r0
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 8386              		.loc 17 184 52
 8387 0012 1846     		mov	r0, r3
 8388 0014 0837     		adds	r7, r7, #8
 8389              	.LCFI630:
 8390              		.cfi_def_cfa_offset 8
 8391 0016 BD46     		mov	sp, r7
 8392              	.LCFI631:
 8393              		.cfi_def_cfa_register 13
 8394              		@ sp needed
 8395 0018 80BD     		pop	{r7, pc}
 8396              		.cfi_endproc
 8397              	.LFE5021:
 8399              		.section	.text._ZSt4moveIRSt4pairIffEEONSt16remove_referenceIT_E4typeEOS4_,"axG",%progbits,_ZSt4mo
 8400              		.align	1
 8401              		.weak	_ZSt4moveIRSt4pairIffEEONSt16remove_referenceIT_E4typeEOS4_
 8402              		.syntax unified
 8403              		.thumb
 8404              		.thumb_func
 8405              		.fpu fpv4-sp-d16
 8407              	_ZSt4moveIRSt4pairIffEEONSt16remove_referenceIT_E4typeEOS4_:
ARM GAS  /tmp/ccATuxCb.s 			page 304


 8408              	.LFB5022:
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief  Forward an rvalue.
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @return The parameter cast to the specified type.
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     constexpr _Tp&&
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     {
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****       static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 		    " substituting _Tp is an lvalue reference type");
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****       return static_cast<_Tp&&>(__t);
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     }
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief  Convert a value to an rvalue.
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @param  __t  A thing of arbitrary type.
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @return The parameter cast to an rvalue-reference to allow moving it.
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   */
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     constexpr typename std::remove_reference<_Tp>::type&&
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     move(_Tp&& __t) noexcept
 8409              		.loc 13 101 5
 8410              		.cfi_startproc
 8411              		@ args = 0, pretend = 0, frame = 8
 8412              		@ frame_needed = 1, uses_anonymous_args = 0
 8413              		@ link register save eliminated.
 8414 0000 80B4     		push	{r7}
 8415              	.LCFI632:
 8416              		.cfi_def_cfa_offset 4
 8417              		.cfi_offset 7, -4
 8418 0002 83B0     		sub	sp, sp, #12
 8419              	.LCFI633:
 8420              		.cfi_def_cfa_offset 16
 8421 0004 00AF     		add	r7, sp, #0
 8422              	.LCFI634:
 8423              		.cfi_def_cfa_register 7
 8424 0006 7860     		str	r0, [r7, #4]
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8425              		.loc 13 102 74
 8426 0008 7B68     		ldr	r3, [r7, #4]
 8427              		.loc 13 102 77
 8428 000a 1846     		mov	r0, r3
 8429 000c 0C37     		adds	r7, r7, #12
 8430              	.LCFI635:
 8431              		.cfi_def_cfa_offset 4
 8432 000e BD46     		mov	sp, r7
 8433              	.LCFI636:
 8434              		.cfi_def_cfa_register 13
 8435              		@ sp needed
 8436 0010 5DF8047B 		ldr	r7, [sp], #4
 8437              	.LCFI637:
 8438              		.cfi_restore 7
 8439              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccATuxCb.s 			page 305


 8440 0014 7047     		bx	lr
 8441              		.cfi_endproc
 8442              	.LFE5022:
 8444              		.section	.text._ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_,"axG",%progbits,
 8445              		.align	1
 8446              		.weak	_ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 8447              		.syntax unified
 8448              		.thumb
 8449              		.thumb_func
 8450              		.fpu fpv4-sp-d16
 8452              	_ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_:
 8453              	.LFB5023:
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****     { return __pair_get<_Int>::__move_get(std::move(__in)); }
 8454              		.loc 17 228 5
 8455              		.cfi_startproc
 8456              		@ args = 0, pretend = 0, frame = 8
 8457              		@ frame_needed = 1, uses_anonymous_args = 0
 8458 0000 80B5     		push	{r7, lr}
 8459              	.LCFI638:
 8460              		.cfi_def_cfa_offset 8
 8461              		.cfi_offset 7, -8
 8462              		.cfi_offset 14, -4
 8463 0002 82B0     		sub	sp, sp, #8
 8464              	.LCFI639:
 8465              		.cfi_def_cfa_offset 16
 8466 0004 00AF     		add	r7, sp, #0
 8467              	.LCFI640:
 8468              		.cfi_def_cfa_register 7
 8469 0006 7860     		str	r0, [r7, #4]
 8470              		.loc 17 229 52
 8471 0008 7868     		ldr	r0, [r7, #4]
 8472 000a FFF7FEFF 		bl	_ZSt4moveIRSt4pairIffEEONSt16remove_referenceIT_E4typeEOS4_
 8473 000e 0346     		mov	r3, r0
 8474              		.loc 17 229 42
 8475 0010 1846     		mov	r0, r3
 8476 0012 FFF7FEFF 		bl	_ZNSt10__pair_getILj1EE10__move_getIffEEOT0_OSt4pairIT_S2_E
 8477 0016 0346     		mov	r3, r0
 8478              		.loc 17 229 61
 8479 0018 1846     		mov	r0, r3
 8480 001a 0837     		adds	r7, r7, #8
 8481              	.LCFI641:
 8482              		.cfi_def_cfa_offset 8
 8483 001c BD46     		mov	sp, r7
 8484              	.LCFI642:
 8485              		.cfi_def_cfa_register 13
 8486              		@ sp needed
 8487 001e 80BD     		pop	{r7, pc}
 8488              		.cfi_endproc
 8489              	.LFE5023:
 8491              		.section	.text._ZNSt10__pair_getILj1EE10__move_getIffEEOT0_OSt4pairIT_S2_E,"axG",%progbits,_ZNSt10
 8492              		.align	1
 8493              		.weak	_ZNSt10__pair_getILj1EE10__move_getIffEEOT0_OSt4pairIT_S2_E
 8494              		.syntax unified
 8495              		.thumb
 8496              		.thumb_func
 8497              		.fpu fpv4-sp-d16
 8499              	_ZNSt10__pair_getILj1EE10__move_getIffEEOT0_OSt4pairIT_S2_E:
ARM GAS  /tmp/ccATuxCb.s 			page 306


 8500              	.LFB5024:
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility ****         { return std::forward<_Tp2>(__pair.second); }
 8501              		.loc 17 207 9
 8502              		.cfi_startproc
 8503              		@ args = 0, pretend = 0, frame = 8
 8504              		@ frame_needed = 1, uses_anonymous_args = 0
 8505 0000 80B5     		push	{r7, lr}
 8506              	.LCFI643:
 8507              		.cfi_def_cfa_offset 8
 8508              		.cfi_offset 7, -8
 8509              		.cfi_offset 14, -4
 8510 0002 82B0     		sub	sp, sp, #8
 8511              	.LCFI644:
 8512              		.cfi_def_cfa_offset 16
 8513 0004 00AF     		add	r7, sp, #0
 8514              	.LCFI645:
 8515              		.cfi_def_cfa_register 7
 8516 0006 7860     		str	r0, [r7, #4]
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 8517              		.loc 17 208 44
 8518 0008 7B68     		ldr	r3, [r7, #4]
 8519 000a 0433     		adds	r3, r3, #4
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 8520              		.loc 17 208 36
 8521 000c 1846     		mov	r0, r3
 8522 000e FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 8523 0012 0346     		mov	r3, r0
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility **** 
 8524              		.loc 17 208 53
 8525 0014 1846     		mov	r0, r3
 8526 0016 0837     		adds	r7, r7, #8
 8527              	.LCFI646:
 8528              		.cfi_def_cfa_offset 8
 8529 0018 BD46     		mov	sp, r7
 8530              	.LCFI647:
 8531              		.cfi_def_cfa_register 13
 8532              		@ sp needed
 8533 001a 80BD     		pop	{r7, pc}
 8534              		.cfi_endproc
 8535              	.LFE5024:
 8537              		.section	.text._ZN5Motor11FOC_currentEffff,"ax",%progbits
 8538              		.align	1
 8539              		.global	_ZN5Motor11FOC_currentEffff
 8540              		.syntax unified
 8541              		.thumb
 8542              		.thumb_func
 8543              		.fpu fpv4-sp-d16
 8545              	_ZN5Motor11FOC_currentEffff:
 8546              	.LFB5019:
 792:Src/motor.cpp **** 
 793:Src/motor.cpp **** 
 794:Src/motor.cpp **** bool Motor::FOC_current(float Id_des, float Iq_des, float I_phase, float pwm_phase) {
 8547              		.loc 11 794 85
 8548              		.cfi_startproc
 8549              		@ args = 0, pretend = 0, frame = 144
 8550              		@ frame_needed = 1, uses_anonymous_args = 0
 8551 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccATuxCb.s 			page 307


 8552              	.LCFI648:
 8553              		.cfi_def_cfa_offset 8
 8554              		.cfi_offset 7, -8
 8555              		.cfi_offset 14, -4
 8556 0002 A4B0     		sub	sp, sp, #144
 8557              	.LCFI649:
 8558              		.cfi_def_cfa_offset 152
 8559 0004 00AF     		add	r7, sp, #0
 8560              	.LCFI650:
 8561              		.cfi_def_cfa_register 7
 8562 0006 7861     		str	r0, [r7, #20]
 8563 0008 87ED040A 		vstr.32	s0, [r7, #16]
 8564 000c C7ED030A 		vstr.32	s1, [r7, #12]
 8565 0010 87ED021A 		vstr.32	s2, [r7, #8]
 8566 0014 C7ED011A 		vstr.32	s3, [r7, #4]
 795:Src/motor.cpp ****     // Syntactic sugar
 796:Src/motor.cpp ****     FieldOrientedController& ictrl = current_control_;
 8567              		.loc 11 796 30
 8568 0018 7B69     		ldr	r3, [r7, #20]
 8569 001a 03F53F73 		add	r3, r3, #764
 8570 001e C7F88430 		str	r3, [r7, #132]
 797:Src/motor.cpp **** 
 798:Src/motor.cpp ****     // For Reporting
 799:Src/motor.cpp ****     ictrl.Idq_setpoint_ = {Id_des,Iq_des};
 8571              		.loc 11 799 41
 8572 0022 07F10C02 		add	r2, r7, #12
 8573 0026 07F11001 		add	r1, r7, #16
 8574 002a 07F12003 		add	r3, r7, #32
 8575 002e 1846     		mov	r0, r3
 8576 0030 FFF7FEFF 		bl	_ZNSt4pairIffEC1IRfS2_Lb1EEEOT_OT0_
 8577 0034 D7F88430 		ldr	r3, [r7, #132]
 8578 0038 4C33     		adds	r3, r3, #76
 8579 003a 07F12002 		add	r2, r7, #32
 8580 003e 1146     		mov	r1, r2
 8581 0040 1846     		mov	r0, r3
 8582 0042 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEaSIS1_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS2_NSt9remove_c
 800:Src/motor.cpp **** 
 801:Src/motor.cpp ****     // Clarke transform
 802:Src/motor.cpp ****     // float Ialpha = -current_meas_.phB - current_meas_.phC;
 803:Src/motor.cpp ****     // float Ibeta = one_by_sqrt3 * (current_meas_.phB - current_meas_.phC);
 804:Src/motor.cpp ****     float Ialpha = current_meas_.phA;
 8583              		.loc 11 804 11
 8584 0046 7B69     		ldr	r3, [r7, #20]
 8585 0048 DB6B     		ldr	r3, [r3, #60]	@ float
 8586 004a C7F88030 		str	r3, [r7, #128]	@ float
 805:Src/motor.cpp ****     float Ibeta = one_by_sqrt3 * (current_meas_.phB - current_meas_.phC);
 8587              		.loc 11 805 49
 8588 004e 7B69     		ldr	r3, [r7, #20]
 8589 0050 93ED107A 		vldr.32	s14, [r3, #64]
 8590              		.loc 11 805 69
 8591 0054 7B69     		ldr	r3, [r7, #20]
 8592 0056 D3ED117A 		vldr.32	s15, [r3, #68]
 8593              		.loc 11 805 53
 8594 005a 77EE677A 		vsub.f32	s15, s14, s15
 8595              		.loc 11 805 11
 8596 005e 9FEDE37A 		vldr.32	s14, .L404
 8597 0062 67EE877A 		vmul.f32	s15, s15, s14
ARM GAS  /tmp/ccATuxCb.s 			page 308


 8598 0066 C7ED1F7A 		vstr.32	s15, [r7, #124]
 806:Src/motor.cpp ****   //  float Ibeta = one_by_sqrt3 * (-current_meas_.phA - current_meas_.phC  - current_meas_.phC);
 807:Src/motor.cpp **** 
 808:Src/motor.cpp ****     // Park transform
 809:Src/motor.cpp ****     float c_I = our_arm_cos_f32(I_phase);
 8599              		.loc 11 809 32
 8600 006a 97ED020A 		vldr.32	s0, [r7, #8]
 8601 006e FFF7FEFF 		bl	our_arm_cos_f32
 8602 0072 87ED1E0A 		vstr.32	s0, [r7, #120]
 810:Src/motor.cpp ****     float s_I = our_arm_sin_f32(I_phase);
 8603              		.loc 11 810 32
 8604 0076 97ED020A 		vldr.32	s0, [r7, #8]
 8605 007a FFF7FEFF 		bl	our_arm_sin_f32
 8606 007e 87ED1D0A 		vstr.32	s0, [r7, #116]
 811:Src/motor.cpp ****     float Id = c_I * Ialpha + s_I * Ibeta;
 8607              		.loc 11 811 20
 8608 0082 97ED1E7A 		vldr.32	s14, [r7, #120]
 8609 0086 D7ED207A 		vldr.32	s15, [r7, #128]
 8610 008a 27EE277A 		vmul.f32	s14, s14, s15
 8611              		.loc 11 811 35
 8612 008e D7ED1D6A 		vldr.32	s13, [r7, #116]
 8613 0092 D7ED1F7A 		vldr.32	s15, [r7, #124]
 8614 0096 66EEA77A 		vmul.f32	s15, s13, s15
 8615              		.loc 11 811 11
 8616 009a 77EE277A 		vadd.f32	s15, s14, s15
 8617 009e C7ED1C7A 		vstr.32	s15, [r7, #112]
 812:Src/motor.cpp ****     float Iq = c_I * Ibeta - s_I * Ialpha;
 8618              		.loc 11 812 20
 8619 00a2 97ED1E7A 		vldr.32	s14, [r7, #120]
 8620 00a6 D7ED1F7A 		vldr.32	s15, [r7, #124]
 8621 00aa 27EE277A 		vmul.f32	s14, s14, s15
 8622              		.loc 11 812 34
 8623 00ae D7ED1D6A 		vldr.32	s13, [r7, #116]
 8624 00b2 D7ED207A 		vldr.32	s15, [r7, #128]
 8625 00b6 66EEA77A 		vmul.f32	s15, s13, s15
 8626              		.loc 11 812 11
 8627 00ba 77EE677A 		vsub.f32	s15, s14, s15
 8628 00be C7ED1B7A 		vstr.32	s15, [r7, #108]
 813:Src/motor.cpp ****     ictrl.Iq_measured_ += ictrl.I_measured_report_filter_k_ * (Iq - ictrl.Iq_measured_);
 8629              		.loc 11 813 24
 8630 00c2 D7F88430 		ldr	r3, [r7, #132]
 8631 00c6 93ED247A 		vldr.32	s14, [r3, #144]
 8632              		.loc 11 813 33
 8633 00ca D7F88430 		ldr	r3, [r7, #132]
 8634 00ce D3ED056A 		vldr.32	s13, [r3, #20]
 8635              		.loc 11 813 75
 8636 00d2 D7F88430 		ldr	r3, [r7, #132]
 8637 00d6 D3ED247A 		vldr.32	s15, [r3, #144]
 8638              		.loc 11 813 67
 8639 00da 97ED1B6A 		vldr.32	s12, [r7, #108]
 8640 00de 76EE677A 		vsub.f32	s15, s12, s15
 8641              		.loc 11 813 61
 8642 00e2 66EEA77A 		vmul.f32	s15, s13, s15
 8643              		.loc 11 813 24
 8644 00e6 77EE277A 		vadd.f32	s15, s14, s15
 8645 00ea D7F88430 		ldr	r3, [r7, #132]
 8646 00ee C3ED247A 		vstr.32	s15, [r3, #144]
ARM GAS  /tmp/ccATuxCb.s 			page 309


 814:Src/motor.cpp ****     ictrl.Id_measured_ += ictrl.I_measured_report_filter_k_ * (Id - ictrl.Id_measured_);
 8647              		.loc 11 814 24
 8648 00f2 D7F88430 		ldr	r3, [r7, #132]
 8649 00f6 93ED237A 		vldr.32	s14, [r3, #140]
 8650              		.loc 11 814 33
 8651 00fa D7F88430 		ldr	r3, [r7, #132]
 8652 00fe D3ED056A 		vldr.32	s13, [r3, #20]
 8653              		.loc 11 814 75
 8654 0102 D7F88430 		ldr	r3, [r7, #132]
 8655 0106 D3ED237A 		vldr.32	s15, [r3, #140]
 8656              		.loc 11 814 67
 8657 010a 97ED1C6A 		vldr.32	s12, [r7, #112]
 8658 010e 76EE677A 		vsub.f32	s15, s12, s15
 8659              		.loc 11 814 61
 8660 0112 66EEA77A 		vmul.f32	s15, s13, s15
 8661              		.loc 11 814 24
 8662 0116 77EE277A 		vadd.f32	s15, s14, s15
 8663 011a D7F88430 		ldr	r3, [r7, #132]
 8664 011e C3ED237A 		vstr.32	s15, [r3, #140]
 815:Src/motor.cpp **** 
 816:Src/motor.cpp ****     Iq_filter += Idq_filter_k_ * (Iq - Iq_filter);
 8665              		.loc 11 816 15
 8666 0122 7B69     		ldr	r3, [r7, #20]
 8667 0124 93ED2D7A 		vldr.32	s14, [r3, #180]
 8668              		.loc 11 816 18
 8669 0128 7B69     		ldr	r3, [r7, #20]
 8670 012a D3ED316A 		vldr.32	s13, [r3, #196]
 8671              		.loc 11 816 40
 8672 012e 7B69     		ldr	r3, [r7, #20]
 8673 0130 D3ED2D7A 		vldr.32	s15, [r3, #180]
 8674              		.loc 11 816 38
 8675 0134 97ED1B6A 		vldr.32	s12, [r7, #108]
 8676 0138 76EE677A 		vsub.f32	s15, s12, s15
 8677              		.loc 11 816 32
 8678 013c 66EEA77A 		vmul.f32	s15, s13, s15
 8679              		.loc 11 816 15
 8680 0140 77EE277A 		vadd.f32	s15, s14, s15
 8681 0144 7B69     		ldr	r3, [r7, #20]
 8682 0146 C3ED2D7A 		vstr.32	s15, [r3, #180]
 817:Src/motor.cpp ****     Id_filter += Idq_filter_k_ * (Id - Id_filter);
 8683              		.loc 11 817 15
 8684 014a 7B69     		ldr	r3, [r7, #20]
 8685 014c 93ED2E7A 		vldr.32	s14, [r3, #184]
 8686              		.loc 11 817 18
 8687 0150 7B69     		ldr	r3, [r7, #20]
 8688 0152 D3ED316A 		vldr.32	s13, [r3, #196]
 8689              		.loc 11 817 40
 8690 0156 7B69     		ldr	r3, [r7, #20]
 8691 0158 D3ED2E7A 		vldr.32	s15, [r3, #184]
 8692              		.loc 11 817 38
 8693 015c 97ED1C6A 		vldr.32	s12, [r7, #112]
 8694 0160 76EE677A 		vsub.f32	s15, s12, s15
 8695              		.loc 11 817 32
 8696 0164 66EEA77A 		vmul.f32	s15, s13, s15
 8697              		.loc 11 817 15
 8698 0168 77EE277A 		vadd.f32	s15, s14, s15
 8699 016c 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/ccATuxCb.s 			page 310


 8700 016e C3ED2E7A 		vstr.32	s15, [r3, #184]
 818:Src/motor.cpp ****     
 819:Src/motor.cpp ****     float dec_vd=0, dec_vq=0,pm_flux_linkage=0;
 8701              		.loc 11 819 11
 8702 0172 4FF00003 		mov	r3, #0
 8703 0176 BB66     		str	r3, [r7, #104]	@ float
 8704              		.loc 11 819 21
 8705 0178 4FF00003 		mov	r3, #0
 8706 017c 7B66     		str	r3, [r7, #100]	@ float
 8707              		.loc 11 819 30
 8708 017e 4FF00003 		mov	r3, #0
 8709 0182 3B66     		str	r3, [r7, #96]	@ float
 820:Src/motor.cpp ****     pm_flux_linkage =  0.444444f*config_.torque_constant/ (config_.pole_pairs);
 8710              		.loc 11 820 34
 8711 0184 7B69     		ldr	r3, [r7, #20]
 8712 0186 5B68     		ldr	r3, [r3, #4]
 8713              		.loc 11 820 42
 8714 0188 D3ED087A 		vldr.32	s15, [r3, #32]
 8715              		.loc 11 820 33
 8716 018c 9FED987A 		vldr.32	s14, .L404+4
 8717 0190 67EE876A 		vmul.f32	s13, s15, s14
 8718              		.loc 11 820 60
 8719 0194 7B69     		ldr	r3, [r7, #20]
 8720 0196 5B68     		ldr	r3, [r3, #4]
 8721              		.loc 11 820 68
 8722 0198 5B68     		ldr	r3, [r3, #4]
 8723              		.loc 11 820 57
 8724 019a 07EE903A 		vmov	s15, r3	@ int
 8725 019e B8EEE77A 		vcvt.f32.s32	s14, s15
 8726              		.loc 11 820 21
 8727 01a2 C6EE877A 		vdiv.f32	s15, s13, s14
 8728 01a6 C7ED187A 		vstr.32	s15, [r7, #96]
 821:Src/motor.cpp ****     dec_vd = Iq_filter * m_speed_est_fast * config_.phase_inductance;
 8729              		.loc 11 821 14
 8730 01aa 7B69     		ldr	r3, [r7, #20]
 8731 01ac 93ED2D7A 		vldr.32	s14, [r3, #180]
 8732              		.loc 11 821 26
 8733 01b0 7B69     		ldr	r3, [r7, #20]
 8734 01b2 D3ED2C7A 		vldr.32	s15, [r3, #176]
 8735              		.loc 11 821 24
 8736 01b6 27EE277A 		vmul.f32	s14, s14, s15
 8737              		.loc 11 821 45
 8738 01ba 7B69     		ldr	r3, [r7, #20]
 8739 01bc 5B68     		ldr	r3, [r3, #4]
 8740              		.loc 11 821 53
 8741 01be D3ED067A 		vldr.32	s15, [r3, #24]
 8742              		.loc 11 821 12
 8743 01c2 67EE277A 		vmul.f32	s15, s14, s15
 8744 01c6 C7ED1A7A 		vstr.32	s15, [r7, #104]
 822:Src/motor.cpp ****     dec_vq = Id_filter * m_speed_est_fast * config_.phase_inductance;
 8745              		.loc 11 822 14
 8746 01ca 7B69     		ldr	r3, [r7, #20]
 8747 01cc 93ED2E7A 		vldr.32	s14, [r3, #184]
 8748              		.loc 11 822 26
 8749 01d0 7B69     		ldr	r3, [r7, #20]
 8750 01d2 D3ED2C7A 		vldr.32	s15, [r3, #176]
 8751              		.loc 11 822 24
ARM GAS  /tmp/ccATuxCb.s 			page 311


 8752 01d6 27EE277A 		vmul.f32	s14, s14, s15
 8753              		.loc 11 822 45
 8754 01da 7B69     		ldr	r3, [r7, #20]
 8755 01dc 5B68     		ldr	r3, [r3, #4]
 8756              		.loc 11 822 53
 8757 01de D3ED067A 		vldr.32	s15, [r3, #24]
 8758              		.loc 11 822 12
 8759 01e2 67EE277A 		vmul.f32	s15, s14, s15
 8760 01e6 C7ED197A 		vstr.32	s15, [r7, #100]
 823:Src/motor.cpp ****     dec_bemf_ = m_speed_est_fast * pm_flux_linkage;
 8761              		.loc 11 823 17
 8762 01ea 7B69     		ldr	r3, [r7, #20]
 8763 01ec 93ED2C7A 		vldr.32	s14, [r3, #176]
 8764              		.loc 11 823 34
 8765 01f0 D7ED187A 		vldr.32	s15, [r7, #96]
 8766 01f4 67EE277A 		vmul.f32	s15, s14, s15
 8767              		.loc 11 823 15
 8768 01f8 7B69     		ldr	r3, [r7, #20]
 8769 01fa C3EDBB7A 		vstr.32	s15, [r3, #748]
 824:Src/motor.cpp **** 
 825:Src/motor.cpp ****     // Check for violation of current limit
 826:Src/motor.cpp ****     float I_trip = effective_current_lim() + config_.current_lim_margin;
 8770              		.loc 11 826 41
 8771 01fe 7869     		ldr	r0, [r7, #20]
 8772 0200 FFF7FEFF 		bl	_ZN5Motor21effective_current_limEv
 8773 0204 B0EE407A 		vmov.f32	s14, s0
 8774              		.loc 11 826 46
 8775 0208 7B69     		ldr	r3, [r7, #20]
 8776 020a 5B68     		ldr	r3, [r3, #4]
 8777              		.loc 11 826 54
 8778 020c D3ED0C7A 		vldr.32	s15, [r3, #48]
 8779 0210 77EE277A 		vadd.f32	s15, s14, s15
 8780 0214 C7ED177A 		vstr.32	s15, [r7, #92]
 827:Src/motor.cpp ****     if (SQ(Id) + SQ(Iq) > SQ(I_trip)) {
 8781              		.loc 11 827 9
 8782 0218 D7ED1C7A 		vldr.32	s15, [r7, #112]
 8783 021c 27EEA77A 		vmul.f32	s14, s15, s15
 8784              		.loc 11 827 18
 8785 0220 D7ED1B7A 		vldr.32	s15, [r7, #108]
 8786 0224 67EEA77A 		vmul.f32	s15, s15, s15
 8787              		.loc 11 827 16
 8788 0228 37EE277A 		vadd.f32	s14, s14, s15
 8789              		.loc 11 827 27
 8790 022c D7ED177A 		vldr.32	s15, [r7, #92]
 8791 0230 67EEA77A 		vmul.f32	s15, s15, s15
 8792              		.loc 11 827 5
 8793 0234 B4EEE77A 		vcmpe.f32	s14, s15
 8794 0238 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8795 023c 06DD     		ble	.L402
 828:Src/motor.cpp ****         set_error(ODriveIntf::MotorIntf::ERROR_CURRENT_LIMIT_VIOLATION);
 8796              		.loc 11 828 18
 8797 023e 4FF48051 		mov	r1, #4096
 8798 0242 7869     		ldr	r0, [r7, #20]
 8799 0244 FFF7FEFF 		bl	_ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE
 829:Src/motor.cpp ****         return false;
 8800              		.loc 11 829 16
 8801 0248 0023     		movs	r3, #0
ARM GAS  /tmp/ccATuxCb.s 			page 312


 8802 024a 6CE1     		b	.L399
 8803              	.L402:
 830:Src/motor.cpp ****     }
 831:Src/motor.cpp **** 
 832:Src/motor.cpp ****     auto [p_gain, i_gain] = *(ictrl.pi_gains_);
 8804              		.loc 11 832 46
 8805 024c D7F88430 		ldr	r3, [r7, #132]
 8806 0250 0833     		adds	r3, r3, #8
 8807 0252 1846     		mov	r0, r3
 8808 0254 FFF7FEFF 		bl	_ZNRSt8optionalISt4pairIffEEdeEv
 8809 0258 0246     		mov	r2, r0
 8810 025a 07F11803 		add	r3, r7, #24
 8811 025e 92E80300 		ldm	r2, {r0, r1}
 8812 0262 83E80300 		stm	r3, {r0, r1}
 8813              		.loc 11 832 11
 8814 0266 07F11803 		add	r3, r7, #24
 8815 026a 1846     		mov	r0, r3
 8816 026c FFF7FEFF 		bl	_ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 8817 0270 B865     		str	r0, [r7, #88]
 8818              		.loc 11 832 19
 8819 0272 07F11803 		add	r3, r7, #24
 8820 0276 1846     		mov	r0, r3
 8821 0278 FFF7FEFF 		bl	_ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 8822 027c 7865     		str	r0, [r7, #84]
 833:Src/motor.cpp **** 
 834:Src/motor.cpp ****     // Current error
 835:Src/motor.cpp ****     float Ierr_d = Id_des - Id;
 8823              		.loc 11 835 27
 8824 027e 97ED047A 		vldr.32	s14, [r7, #16]
 8825              		.loc 11 835 11
 8826 0282 D7ED1C7A 		vldr.32	s15, [r7, #112]
 8827 0286 77EE677A 		vsub.f32	s15, s14, s15
 8828 028a C7ED147A 		vstr.32	s15, [r7, #80]
 836:Src/motor.cpp ****     float Ierr_q = Iq_des - Iq;
 8829              		.loc 11 836 27
 8830 028e 97ED037A 		vldr.32	s14, [r7, #12]
 8831              		.loc 11 836 11
 8832 0292 D7ED1B7A 		vldr.32	s15, [r7, #108]
 8833 0296 77EE677A 		vsub.f32	s15, s14, s15
 8834 029a C7ED137A 		vstr.32	s15, [r7, #76]
 837:Src/motor.cpp **** 
 838:Src/motor.cpp ****     // TODO look into feed forward terms (esp omega, since PI pole maps to RL tau)
 839:Src/motor.cpp ****     // Apply PI control
 840:Src/motor.cpp ****     float Vd = ictrl.v_current_control_integral_d_ + Ierr_d * p_gain;
 8835              		.loc 11 840 22
 8836 029e D7F88430 		ldr	r3, [r7, #132]
 8837 02a2 93ED257A 		vldr.32	s14, [r3, #148]
 8838              		.loc 11 840 63
 8839 02a6 BB6D     		ldr	r3, [r7, #88]
 8840 02a8 D3ED006A 		vldr.32	s13, [r3]
 8841              		.loc 11 840 61
 8842 02ac D7ED147A 		vldr.32	s15, [r7, #80]
 8843 02b0 66EEA77A 		vmul.f32	s15, s13, s15
 8844              		.loc 11 840 11
 8845 02b4 77EE277A 		vadd.f32	s15, s14, s15
 8846 02b8 C7ED127A 		vstr.32	s15, [r7, #72]
 841:Src/motor.cpp ****     float Vq = ictrl.v_current_control_integral_q_ + Ierr_q * p_gain;
ARM GAS  /tmp/ccATuxCb.s 			page 313


 8847              		.loc 11 841 22
 8848 02bc D7F88430 		ldr	r3, [r7, #132]
 8849 02c0 93ED267A 		vldr.32	s14, [r3, #152]
 8850              		.loc 11 841 63
 8851 02c4 BB6D     		ldr	r3, [r7, #88]
 8852 02c6 D3ED006A 		vldr.32	s13, [r3]
 8853              		.loc 11 841 61
 8854 02ca D7ED137A 		vldr.32	s15, [r7, #76]
 8855 02ce 66EEA77A 		vmul.f32	s15, s13, s15
 8856              		.loc 11 841 11
 8857 02d2 77EE277A 		vadd.f32	s15, s14, s15
 8858 02d6 C7ED117A 		vstr.32	s15, [r7, #68]
 842:Src/motor.cpp **** 
 843:Src/motor.cpp ****     Vd -=  dec_vd;
 8859              		.loc 11 843 8
 8860 02da 97ED127A 		vldr.32	s14, [r7, #72]
 8861 02de D7ED1A7A 		vldr.32	s15, [r7, #104]
 8862 02e2 77EE677A 		vsub.f32	s15, s14, s15
 8863 02e6 C7ED127A 		vstr.32	s15, [r7, #72]
 844:Src/motor.cpp ****     Vq +=  dec_vq + dec_bemf_;  
 8864              		.loc 11 844 21
 8865 02ea 7B69     		ldr	r3, [r7, #20]
 8866 02ec 93EDBB7A 		vldr.32	s14, [r3, #748]
 8867              		.loc 11 844 19
 8868 02f0 D7ED197A 		vldr.32	s15, [r7, #100]
 8869 02f4 77EE277A 		vadd.f32	s15, s14, s15
 8870              		.loc 11 844 8
 8871 02f8 97ED117A 		vldr.32	s14, [r7, #68]
 8872 02fc 77EE277A 		vadd.f32	s15, s14, s15
 8873 0300 C7ED117A 		vstr.32	s15, [r7, #68]
 845:Src/motor.cpp **** 
 846:Src/motor.cpp **** 
 847:Src/motor.cpp ****     ictrl.final_v_d_ = Vd;
 8874              		.loc 11 847 22
 8875 0304 D7F88430 		ldr	r3, [r7, #132]
 8876 0308 BA6C     		ldr	r2, [r7, #72]	@ float
 8877 030a C3F8A420 		str	r2, [r3, #164]	@ float
 848:Src/motor.cpp ****     ictrl.final_v_q_ = Vq;
 8878              		.loc 11 848 22
 8879 030e D7F88430 		ldr	r3, [r7, #132]
 8880 0312 7A6C     		ldr	r2, [r7, #68]	@ float
 8881 0314 C3F8A820 		str	r2, [r3, #168]	@ float
 849:Src/motor.cpp **** 
 850:Src/motor.cpp ****     float mod_to_V = (2.0f / 3.0f) * vbus_voltage;
 8882              		.loc 11 850 36
 8883 0318 364B     		ldr	r3, .L404+8
 8884 031a D3ED007A 		vldr.32	s15, [r3]
 8885              		.loc 11 850 11
 8886 031e 9FED367A 		vldr.32	s14, .L404+12
 8887 0322 67EE877A 		vmul.f32	s15, s15, s14
 8888 0326 C7ED107A 		vstr.32	s15, [r7, #64]
 851:Src/motor.cpp ****     float V_to_mod = 1.0f / mod_to_V;
 8889              		.loc 11 851 11
 8890 032a F7EE006A 		vmov.f32	s13, #1.0e+0
 8891 032e 97ED107A 		vldr.32	s14, [r7, #64]
 8892 0332 C6EE877A 		vdiv.f32	s15, s13, s14
 8893 0336 C7ED0F7A 		vstr.32	s15, [r7, #60]
ARM GAS  /tmp/ccATuxCb.s 			page 314


 852:Src/motor.cpp ****     float mod_d = V_to_mod * Vd;
 8894              		.loc 11 852 11
 8895 033a 97ED0F7A 		vldr.32	s14, [r7, #60]
 8896 033e D7ED127A 		vldr.32	s15, [r7, #72]
 8897 0342 67EE277A 		vmul.f32	s15, s14, s15
 8898 0346 C7ED237A 		vstr.32	s15, [r7, #140]
 853:Src/motor.cpp ****     float mod_q = V_to_mod * Vq;
 8899              		.loc 11 853 11
 8900 034a 97ED0F7A 		vldr.32	s14, [r7, #60]
 8901 034e D7ED117A 		vldr.32	s15, [r7, #68]
 8902 0352 67EE277A 		vmul.f32	s15, s14, s15
 8903 0356 C7ED227A 		vstr.32	s15, [r7, #136]
 854:Src/motor.cpp **** 
 855:Src/motor.cpp ****     // Vector modulation saturation, lock integrator if saturated
 856:Src/motor.cpp ****     // TODO make maximum modulation configurable
 857:Src/motor.cpp ****     float mod_scalefactor = 0.80f * sqrt3_by_2 * 1.0f / sqrtf(mod_d * mod_d + mod_q * mod_q);
 8904              		.loc 11 857 69
 8905 035a D7ED237A 		vldr.32	s15, [r7, #140]
 8906 035e 27EEA77A 		vmul.f32	s14, s15, s15
 8907              		.loc 11 857 85
 8908 0362 D7ED227A 		vldr.32	s15, [r7, #136]
 8909 0366 67EEA77A 		vmul.f32	s15, s15, s15
 8910              		.loc 11 857 62
 8911 036a 77EE277A 		vadd.f32	s15, s14, s15
 8912 036e B0EE670A 		vmov.f32	s0, s15
 8913 0372 FFF7FEFF 		bl	sqrtf
 8914 0376 B0EE407A 		vmov.f32	s14, s0
 8915              		.loc 11 857 92
 8916 037a DFED206A 		vldr.32	s13, .L404+16
 8917 037e C6EE877A 		vdiv.f32	s15, s13, s14
 8918 0382 C7ED0E7A 		vstr.32	s15, [r7, #56]
 858:Src/motor.cpp ****     if (mod_scalefactor < 1.0f) {
 8919              		.loc 11 858 5
 8920 0386 D7ED0E7A 		vldr.32	s15, [r7, #56]
 8921 038a B7EE007A 		vmov.f32	s14, #1.0e+0
 8922 038e F4EEC77A 		vcmpe.f32	s15, s14
 8923 0392 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8924 0396 35D5     		bpl	.L403
 859:Src/motor.cpp ****         mod_d *= mod_scalefactor;
 8925              		.loc 11 859 15
 8926 0398 97ED237A 		vldr.32	s14, [r7, #140]
 8927 039c D7ED0E7A 		vldr.32	s15, [r7, #56]
 8928 03a0 67EE277A 		vmul.f32	s15, s14, s15
 8929 03a4 C7ED237A 		vstr.32	s15, [r7, #140]
 860:Src/motor.cpp ****         mod_q *= mod_scalefactor;
 8930              		.loc 11 860 15
 8931 03a8 97ED227A 		vldr.32	s14, [r7, #136]
 8932 03ac D7ED0E7A 		vldr.32	s15, [r7, #56]
 8933 03b0 67EE277A 		vmul.f32	s15, s14, s15
 8934 03b4 C7ED227A 		vstr.32	s15, [r7, #136]
 861:Src/motor.cpp ****         // TODO make decayfactor configurable
 862:Src/motor.cpp ****         ictrl.v_current_control_integral_d_ *= 0.99f;
 8935              		.loc 11 862 45
 8936 03b8 D7F88430 		ldr	r3, [r7, #132]
 8937 03bc D3ED257A 		vldr.32	s15, [r3, #148]
 8938 03c0 9FED0F7A 		vldr.32	s14, .L404+20
 8939 03c4 67EE877A 		vmul.f32	s15, s15, s14
ARM GAS  /tmp/ccATuxCb.s 			page 315


 8940 03c8 D7F88430 		ldr	r3, [r7, #132]
 8941 03cc C3ED257A 		vstr.32	s15, [r3, #148]
 863:Src/motor.cpp ****         ictrl.v_current_control_integral_q_ *= 0.99f;
 8942              		.loc 11 863 45
 8943 03d0 D7F88430 		ldr	r3, [r7, #132]
 8944 03d4 D3ED267A 		vldr.32	s15, [r3, #152]
 8945 03d8 9FED097A 		vldr.32	s14, .L404+20
 8946 03dc 67EE877A 		vmul.f32	s15, s15, s14
 8947 03e0 D7F88430 		ldr	r3, [r7, #132]
 8948 03e4 C3ED267A 		vstr.32	s15, [r3, #152]
 8949 03e8 38E0     		b	.L397
 8950              	.L405:
 8951 03ea 00BF     		.align	2
 8952              	.L404:
 8953 03ec 3ACD133F 		.word	1058262330
 8954 03f0 2A8EE33E 		.word	1055100458
 8955 03f4 00000000 		.word	vbus_voltage
 8956 03f8 ABAA2A3F 		.word	1059760811
 8957 03fc AC5C313F 		.word	1060199596
 8958 0400 A4707D3F 		.word	1065185444
 8959              	.L403:
 864:Src/motor.cpp ****     } else {
 865:Src/motor.cpp ****         ictrl.v_current_control_integral_d_ += Ierr_d * (i_gain * current_meas_period);
 8960              		.loc 11 865 45
 8961 0404 D7F88430 		ldr	r3, [r7, #132]
 8962 0408 93ED257A 		vldr.32	s14, [r3, #148]
 8963              		.loc 11 865 58
 8964 040c 7B6D     		ldr	r3, [r7, #84]
 8965 040e D3ED006A 		vldr.32	s13, [r3]
 8966              		.loc 11 865 65
 8967 0412 474B     		ldr	r3, .L406
 8968 0414 D3ED007A 		vldr.32	s15, [r3]
 8969 0418 66EEA76A 		vmul.f32	s13, s13, s15
 8970              		.loc 11 865 55
 8971 041c D7ED147A 		vldr.32	s15, [r7, #80]
 8972 0420 66EEA77A 		vmul.f32	s15, s13, s15
 8973              		.loc 11 865 45
 8974 0424 77EE277A 		vadd.f32	s15, s14, s15
 8975 0428 D7F88430 		ldr	r3, [r7, #132]
 8976 042c C3ED257A 		vstr.32	s15, [r3, #148]
 866:Src/motor.cpp ****         ictrl.v_current_control_integral_q_ += Ierr_q * (i_gain * current_meas_period);
 8977              		.loc 11 866 45
 8978 0430 D7F88430 		ldr	r3, [r7, #132]
 8979 0434 93ED267A 		vldr.32	s14, [r3, #152]
 8980              		.loc 11 866 58
 8981 0438 7B6D     		ldr	r3, [r7, #84]
 8982 043a D3ED006A 		vldr.32	s13, [r3]
 8983              		.loc 11 866 65
 8984 043e 3C4B     		ldr	r3, .L406
 8985 0440 D3ED007A 		vldr.32	s15, [r3]
 8986 0444 66EEA76A 		vmul.f32	s13, s13, s15
 8987              		.loc 11 866 55
 8988 0448 D7ED137A 		vldr.32	s15, [r7, #76]
 8989 044c 66EEA77A 		vmul.f32	s15, s13, s15
 8990              		.loc 11 866 45
 8991 0450 77EE277A 		vadd.f32	s15, s14, s15
 8992 0454 D7F88430 		ldr	r3, [r7, #132]
ARM GAS  /tmp/ccATuxCb.s 			page 316


 8993 0458 C3ED267A 		vstr.32	s15, [r3, #152]
 8994              	.L397:
 867:Src/motor.cpp ****     }
 868:Src/motor.cpp **** 
 869:Src/motor.cpp ****     // Compute estimated bus current
 870:Src/motor.cpp ****     I_bus_ = mod_d * Id + mod_q * Iq;
 8995              		.loc 11 870 20
 8996 045c 97ED237A 		vldr.32	s14, [r7, #140]
 8997 0460 D7ED1C7A 		vldr.32	s15, [r7, #112]
 8998 0464 27EE277A 		vmul.f32	s14, s14, s15
 8999              		.loc 11 870 33
 9000 0468 D7ED226A 		vldr.32	s13, [r7, #136]
 9001 046c D7ED1B7A 		vldr.32	s15, [r7, #108]
 9002 0470 66EEA77A 		vmul.f32	s15, s13, s15
 9003              		.loc 11 870 25
 9004 0474 77EE277A 		vadd.f32	s15, s14, s15
 9005              		.loc 11 870 12
 9006 0478 7B69     		ldr	r3, [r7, #20]
 9007 047a C3EDBC7A 		vstr.32	s15, [r3, #752]
 871:Src/motor.cpp **** 
 872:Src/motor.cpp ****     // Inverse park transform
 873:Src/motor.cpp ****     float c_p = our_arm_cos_f32(pwm_phase);
 9008              		.loc 11 873 32
 9009 047e 97ED010A 		vldr.32	s0, [r7, #4]
 9010 0482 FFF7FEFF 		bl	our_arm_cos_f32
 9011 0486 87ED0D0A 		vstr.32	s0, [r7, #52]
 874:Src/motor.cpp ****     float s_p = our_arm_sin_f32(pwm_phase);
 9012              		.loc 11 874 32
 9013 048a 97ED010A 		vldr.32	s0, [r7, #4]
 9014 048e FFF7FEFF 		bl	our_arm_sin_f32
 9015 0492 87ED0C0A 		vstr.32	s0, [r7, #48]
 875:Src/motor.cpp ****     float mod_alpha = c_p * mod_d - s_p * mod_q;
 9016              		.loc 11 875 27
 9017 0496 97ED0D7A 		vldr.32	s14, [r7, #52]
 9018 049a D7ED237A 		vldr.32	s15, [r7, #140]
 9019 049e 27EE277A 		vmul.f32	s14, s14, s15
 9020              		.loc 11 875 41
 9021 04a2 D7ED0C6A 		vldr.32	s13, [r7, #48]
 9022 04a6 D7ED227A 		vldr.32	s15, [r7, #136]
 9023 04aa 66EEA77A 		vmul.f32	s15, s13, s15
 9024              		.loc 11 875 11
 9025 04ae 77EE677A 		vsub.f32	s15, s14, s15
 9026 04b2 C7ED0B7A 		vstr.32	s15, [r7, #44]
 876:Src/motor.cpp ****     float mod_beta = c_p * mod_q + s_p * mod_d;
 9027              		.loc 11 876 26
 9028 04b6 97ED0D7A 		vldr.32	s14, [r7, #52]
 9029 04ba D7ED227A 		vldr.32	s15, [r7, #136]
 9030 04be 27EE277A 		vmul.f32	s14, s14, s15
 9031              		.loc 11 876 40
 9032 04c2 D7ED0C6A 		vldr.32	s13, [r7, #48]
 9033 04c6 D7ED237A 		vldr.32	s15, [r7, #140]
 9034 04ca 66EEA77A 		vmul.f32	s15, s13, s15
 9035              		.loc 11 876 11
 9036 04ce 77EE277A 		vadd.f32	s15, s14, s15
 9037 04d2 C7ED0A7A 		vstr.32	s15, [r7, #40]
 877:Src/motor.cpp **** 
 878:Src/motor.cpp ****     // Report final applied voltage in stationary frame (for sensorles estimator)
ARM GAS  /tmp/ccATuxCb.s 			page 317


 879:Src/motor.cpp ****     ictrl.final_v_alpha_ = mod_to_V * mod_alpha;
 9038              		.loc 11 879 37
 9039 04d6 97ED107A 		vldr.32	s14, [r7, #64]
 9040 04da D7ED0B7A 		vldr.32	s15, [r7, #44]
 9041 04de 67EE277A 		vmul.f32	s15, s14, s15
 9042              		.loc 11 879 26
 9043 04e2 D7F88430 		ldr	r3, [r7, #132]
 9044 04e6 C3ED277A 		vstr.32	s15, [r3, #156]
 880:Src/motor.cpp ****     ictrl.final_v_beta_ = mod_to_V * mod_beta;
 9045              		.loc 11 880 36
 9046 04ea 97ED107A 		vldr.32	s14, [r7, #64]
 9047 04ee D7ED0A7A 		vldr.32	s15, [r7, #40]
 9048 04f2 67EE277A 		vmul.f32	s15, s14, s15
 9049              		.loc 11 880 25
 9050 04f6 D7F88430 		ldr	r3, [r7, #132]
 9051 04fa C3ED287A 		vstr.32	s15, [r3, #160]
 881:Src/motor.cpp **** 
 882:Src/motor.cpp ****     // Apply SVM
 883:Src/motor.cpp ****     if (!enqueue_modulation_timings(mod_alpha, mod_beta))
 9052              		.loc 11 883 36
 9053 04fe D7ED0A0A 		vldr.32	s1, [r7, #40]
 9054 0502 97ED0B0A 		vldr.32	s0, [r7, #44]
 9055 0506 7869     		ldr	r0, [r7, #20]
 9056 0508 FFF7FEFF 		bl	_ZN5Motor26enqueue_modulation_timingsEff
 9057 050c 0346     		mov	r3, r0
 9058              		.loc 11 883 9
 9059 050e 83F00103 		eor	r3, r3, #1
 9060 0512 DBB2     		uxtb	r3, r3
 9061              		.loc 11 883 5
 9062 0514 002B     		cmp	r3, #0
 9063 0516 01D0     		beq	.L398
 884:Src/motor.cpp ****         return false; // error set inside enqueue_modulation_timings
 9064              		.loc 11 884 16
 9065 0518 0023     		movs	r3, #0
 9066 051a 04E0     		b	.L399
 9067              	.L398:
 885:Src/motor.cpp ****     
 886:Src/motor.cpp ****     log_timing(ODriveIntf::TIMING_LOG_FOC_CURRENT);
 9068              		.loc 11 886 15
 9069 051c 0821     		movs	r1, #8
 9070 051e 7869     		ldr	r0, [r7, #20]
 9071 0520 FFF7FEFF 		bl	_ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE
 887:Src/motor.cpp ****     return true;
 9072              		.loc 11 887 12
 9073 0524 0123     		movs	r3, #1
 9074              	.L399:
 888:Src/motor.cpp **** }
 9075              		.loc 11 888 1 discriminator 1
 9076 0526 1846     		mov	r0, r3
 9077 0528 9037     		adds	r7, r7, #144
 9078              	.LCFI651:
 9079              		.cfi_def_cfa_offset 8
 9080 052a BD46     		mov	sp, r7
 9081              	.LCFI652:
 9082              		.cfi_def_cfa_register 13
 9083              		@ sp needed
 9084 052c 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccATuxCb.s 			page 318


 9085              	.L407:
 9086 052e 00BF     		.align	2
 9087              	.L406:
 9088 0530 00000000 		.word	current_meas_period
 9089              		.cfi_endproc
 9090              	.LFE5019:
 9092              		.section	.text._ZN5Motor6updateEfff,"ax",%progbits
 9093              		.align	1
 9094              		.global	_ZN5Motor6updateEfff
 9095              		.syntax unified
 9096              		.thumb
 9097              		.thumb_func
 9098              		.fpu fpv4-sp-d16
 9100              	_ZN5Motor6updateEfff:
 9101              	.LFB5025:
 889:Src/motor.cpp **** 
 890:Src/motor.cpp **** 
 891:Src/motor.cpp **** 
 892:Src/motor.cpp **** 
 893:Src/motor.cpp **** 
 894:Src/motor.cpp **** // torque_setpoint [Nm]
 895:Src/motor.cpp **** // phase [rad electrical]
 896:Src/motor.cpp **** // phase_vel [rad/s electrical]
 897:Src/motor.cpp **** bool Motor::update(float torque_setpoint, float phase, float phase_vel) {
 9102              		.loc 11 897 73
 9103              		.cfi_startproc
 9104              		@ args = 0, pretend = 0, frame = 80
 9105              		@ frame_needed = 1, uses_anonymous_args = 0
 9106 0000 80B5     		push	{r7, lr}
 9107              	.LCFI653:
 9108              		.cfi_def_cfa_offset 8
 9109              		.cfi_offset 7, -8
 9110              		.cfi_offset 14, -4
 9111 0002 94B0     		sub	sp, sp, #80
 9112              	.LCFI654:
 9113              		.cfi_def_cfa_offset 88
 9114 0004 00AF     		add	r7, sp, #0
 9115              	.LCFI655:
 9116              		.cfi_def_cfa_register 7
 9117 0006 F860     		str	r0, [r7, #12]
 9118 0008 87ED020A 		vstr.32	s0, [r7, #8]
 9119 000c C7ED010A 		vstr.32	s1, [r7, #4]
 9120 0010 87ED001A 		vstr.32	s2, [r7]
 898:Src/motor.cpp ****     float current_setpoint = 0.0f;
 9121              		.loc 11 898 11
 9122 0014 4FF00003 		mov	r3, #0
 9123 0018 FB61     		str	r3, [r7, #28]	@ float
 899:Src/motor.cpp ****     float torque_constant = 0.12f;
 9124              		.loc 11 899 11
 9125 001a A34B     		ldr	r3, .L425
 9126 001c FB64     		str	r3, [r7, #76]	@ float
 900:Src/motor.cpp ****     phase *= config_.direction;
 9127              		.loc 11 900 14
 9128 001e FB68     		ldr	r3, [r7, #12]
 9129 0020 5B68     		ldr	r3, [r3, #4]
 9130              		.loc 11 900 22
 9131 0022 5B6A     		ldr	r3, [r3, #36]
ARM GAS  /tmp/ccATuxCb.s 			page 319


 9132              		.loc 11 900 11
 9133 0024 07EE903A 		vmov	s15, r3	@ int
 9134 0028 F8EEE77A 		vcvt.f32.s32	s15, s15
 9135 002c 97ED017A 		vldr.32	s14, [r7, #4]
 9136 0030 67EE277A 		vmul.f32	s15, s14, s15
 9137 0034 C7ED017A 		vstr.32	s15, [r7, #4]
 901:Src/motor.cpp ****     phase_vel *= config_.direction;
 9138              		.loc 11 901 18
 9139 0038 FB68     		ldr	r3, [r7, #12]
 9140 003a 5B68     		ldr	r3, [r3, #4]
 9141              		.loc 11 901 26
 9142 003c 5B6A     		ldr	r3, [r3, #36]
 9143              		.loc 11 901 15
 9144 003e 07EE903A 		vmov	s15, r3	@ int
 9145 0042 F8EEE77A 		vcvt.f32.s32	s15, s15
 9146 0046 97ED007A 		vldr.32	s14, [r7]
 9147 004a 67EE277A 		vmul.f32	s15, s14, s15
 9148 004e C7ED007A 		vstr.32	s15, [r7]
 902:Src/motor.cpp ****     m_speed_est_fast =  phase_vel; 
 9149              		.loc 11 902 22
 9150 0052 FB68     		ldr	r3, [r7, #12]
 9151 0054 3A68     		ldr	r2, [r7]	@ float
 9152 0056 C3F8B020 		str	r2, [r3, #176]	@ float
 903:Src/motor.cpp **** 
 904:Src/motor.cpp ****     // if (config_.motor_type == MOTOR_TYPE_ACIM) {
 905:Src/motor.cpp ****     //     current_setpoint = torque_setpoint / (config_.torque_constant * fmax(current_control_.ac
 906:Src/motor.cpp ****     // }
 907:Src/motor.cpp ****     // else {
 908:Src/motor.cpp ****     //     current_setpoint = torque_setpoint / config_.torque_constant;
 909:Src/motor.cpp ****     // }
 910:Src/motor.cpp ****     
 911:Src/motor.cpp **** 
 912:Src/motor.cpp ****     torque_setpoint_notch_filterd_ = torque_setpoint;
 9153              		.loc 11 912 36
 9154 005a FB68     		ldr	r3, [r7, #12]
 9155 005c BA68     		ldr	r2, [r7, #8]	@ float
 9156 005e C3F8D822 		str	r2, [r3, #728]	@ float
 9157              	.LBB67:
 913:Src/motor.cpp **** 
 914:Src/motor.cpp **** 
 915:Src/motor.cpp ****     if( using_old_torque_constant_ ==  true)
 9158              		.loc 11 915 9
 9159 0062 FB68     		ldr	r3, [r7, #12]
 9160 0064 93F8CC30 		ldrb	r3, [r3, #204]	@ zero_extendqisi2
 9161              		.loc 11 915 5
 9162 0068 012B     		cmp	r3, #1
 9163 006a 0BD1     		bne	.L409
 916:Src/motor.cpp ****     {
 917:Src/motor.cpp ****         current_setpoint = torque_setpoint_notch_filterd_ / (config_.torque_constant );
 9164              		.loc 11 917 28
 9165 006c FB68     		ldr	r3, [r7, #12]
 9166 006e D3EDB66A 		vldr.32	s13, [r3, #728]
 9167              		.loc 11 917 62
 9168 0072 FB68     		ldr	r3, [r7, #12]
 9169 0074 5B68     		ldr	r3, [r3, #4]
 9170              		.loc 11 917 70
 9171 0076 93ED087A 		vldr.32	s14, [r3, #32]
ARM GAS  /tmp/ccATuxCb.s 			page 320


 9172              		.loc 11 917 59
 9173 007a C6EE877A 		vdiv.f32	s15, s13, s14
 9174              		.loc 11 917 26
 9175 007e C7ED077A 		vstr.32	s15, [r7, #28]
 9176 0082 5EE0     		b	.L410
 9177              	.L409:
 9178              	.LBB68:
 918:Src/motor.cpp ****     }
 919:Src/motor.cpp ****     else
 920:Src/motor.cpp ****     {
 921:Src/motor.cpp ****         float torque_setpoint_abs = fabsf(torque_setpoint_notch_filterd_);
 9179              		.loc 11 921 43
 9180 0084 FB68     		ldr	r3, [r7, #12]
 9181 0086 D3EDB67A 		vldr.32	s15, [r3, #728]
 9182              		.loc 11 921 15
 9183 008a F0EEE77A 		vabs.f32	s15, s15
 9184 008e C7ED117A 		vstr.32	s15, [r7, #68]
 922:Src/motor.cpp ****         uint32_t idex = (uint32_t)((torque_setpoint_abs*CALIBRATION_INCREMENT)); 
 9185              		.loc 11 922 18
 9186 0092 D7ED117A 		vldr.32	s15, [r7, #68]
 9187 0096 FCEEE77A 		vcvt.u32.f32	s15, s15
 9188 009a 17EE903A 		vmov	r3, s15	@ int
 9189 009e 3B64     		str	r3, [r7, #64]
 923:Src/motor.cpp ****         const float* torque_constant_array  = torque_setpoint_notch_filterd_ > 0.0f ? L_Slop_Array_
 9190              		.loc 11 923 47
 9191 00a0 FB68     		ldr	r3, [r7, #12]
 9192 00a2 D3EDB67A 		vldr.32	s15, [r3, #728]
 9193              		.loc 11 923 22
 9194 00a6 F5EEC07A 		vcmpe.f32	s15, #0
 9195 00aa F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 9196 00ae 02DD     		ble	.L424
 9197              		.loc 11 923 22 is_stmt 0 discriminator 1
 9198 00b0 FB68     		ldr	r3, [r7, #12]
 9199 00b2 D033     		adds	r3, r3, #208
 9200 00b4 02E0     		b	.L413
 9201              	.L424:
 9202              		.loc 11 923 22 discriminator 2
 9203 00b6 FB68     		ldr	r3, [r7, #12]
 9204 00b8 03F5E073 		add	r3, r3, #448
 9205              	.L413:
 9206              		.loc 11 923 22 discriminator 4
 9207 00bc FB63     		str	r3, [r7, #60]
 924:Src/motor.cpp ****         if( idex > (NUM_LINEARITY_SEG -2) )
 9208              		.loc 11 924 9 is_stmt 1 discriminator 4
 9209 00be 3B6C     		ldr	r3, [r7, #64]
 9210 00c0 3A2B     		cmp	r3, #58
 9211 00c2 08D9     		bls	.L414
 925:Src/motor.cpp ****         {
 926:Src/motor.cpp ****             idex = NUM_LINEARITY_SEG -1;
 9212              		.loc 11 926 18
 9213 00c4 3B23     		movs	r3, #59
 9214 00c6 3B64     		str	r3, [r7, #64]
 927:Src/motor.cpp ****             torque_constant = torque_constant_array [idex];
 9215              		.loc 11 927 58
 9216 00c8 3B6C     		ldr	r3, [r7, #64]
 9217 00ca 9B00     		lsls	r3, r3, #2
 9218 00cc FA6B     		ldr	r2, [r7, #60]
ARM GAS  /tmp/ccATuxCb.s 			page 321


 9219 00ce 1344     		add	r3, r3, r2
 9220              		.loc 11 927 29
 9221 00d0 1B68     		ldr	r3, [r3]	@ float
 9222 00d2 FB64     		str	r3, [r7, #76]	@ float
 9223 00d4 2CE0     		b	.L415
 9224              	.L414:
 928:Src/motor.cpp ****         }
 929:Src/motor.cpp ****         else
 930:Src/motor.cpp ****         {
 931:Src/motor.cpp ****             torque_constant = torque_constant_array [idex]*( 1.0f - torque_setpoint_abs+ (uint32_t)
 9225              		.loc 11 931 58
 9226 00d6 3B6C     		ldr	r3, [r7, #64]
 9227 00d8 9B00     		lsls	r3, r3, #2
 9228 00da FA6B     		ldr	r2, [r7, #60]
 9229 00dc 1344     		add	r3, r3, r2
 9230 00de 93ED007A 		vldr.32	s14, [r3]
 9231              		.loc 11 931 67
 9232 00e2 F7EE006A 		vmov.f32	s13, #1.0e+0
 9233 00e6 D7ED117A 		vldr.32	s15, [r7, #68]
 9234 00ea 76EEE76A 		vsub.f32	s13, s13, s15
 9235              		.loc 11 931 90
 9236 00ee D7ED117A 		vldr.32	s15, [r7, #68]
 9237 00f2 FCEEE77A 		vcvt.u32.f32	s15, s15
 9238              		.loc 11 931 88
 9239 00f6 F8EE677A 		vcvt.f32.u32	s15, s15
 9240 00fa 76EEA77A 		vadd.f32	s15, s13, s15
 9241              		.loc 11 931 59
 9242 00fe 27EE277A 		vmul.f32	s14, s14, s15
 9243              		.loc 11 931 153
 9244 0102 3B6C     		ldr	r3, [r7, #64]
 9245 0104 0133     		adds	r3, r3, #1
 9246 0106 9B00     		lsls	r3, r3, #2
 9247 0108 FA6B     		ldr	r2, [r7, #60]
 9248 010a 1344     		add	r3, r3, r2
 9249 010c D3ED006A 		vldr.32	s13, [r3]
 9250              		.loc 11 931 178
 9251 0110 D7ED117A 		vldr.32	s15, [r7, #68]
 9252 0114 FCEEE77A 		vcvt.u32.f32	s15, s15
 9253              		.loc 11 931 176
 9254 0118 F8EE677A 		vcvt.f32.u32	s15, s15
 9255 011c 97ED116A 		vldr.32	s12, [r7, #68]
 9256 0120 76EE677A 		vsub.f32	s15, s12, s15
 9257              		.loc 11 931 154
 9258 0124 66EEA77A 		vmul.f32	s15, s13, s15
 9259              		.loc 11 931 29
 9260 0128 77EE277A 		vadd.f32	s15, s14, s15
 9261 012c C7ED137A 		vstr.32	s15, [r7, #76]
 9262              	.L415:
 932:Src/motor.cpp ****         }
 933:Src/motor.cpp **** 
 934:Src/motor.cpp ****         current_setpoint = torque_setpoint_notch_filterd_ / torque_constant;
 9263              		.loc 11 934 28
 9264 0130 FB68     		ldr	r3, [r7, #12]
 9265 0132 D3EDB66A 		vldr.32	s13, [r3, #728]
 9266              		.loc 11 934 59
 9267 0136 97ED137A 		vldr.32	s14, [r7, #76]
 9268 013a C6EE877A 		vdiv.f32	s15, s13, s14
ARM GAS  /tmp/ccATuxCb.s 			page 322


 9269              		.loc 11 934 26
 9270 013e C7ED077A 		vstr.32	s15, [r7, #28]
 9271              	.L410:
 9272              	.LBE68:
 9273              	.LBE67:
 935:Src/motor.cpp **** 
 936:Src/motor.cpp **** 
 937:Src/motor.cpp ****     }
 938:Src/motor.cpp ****     current_setpoint *= config_.direction;
 9274              		.loc 11 938 25
 9275 0142 FB68     		ldr	r3, [r7, #12]
 9276 0144 5B68     		ldr	r3, [r3, #4]
 9277              		.loc 11 938 33
 9278 0146 5B6A     		ldr	r3, [r3, #36]
 9279              		.loc 11 938 22
 9280 0148 07EE903A 		vmov	s15, r3	@ int
 9281 014c B8EEE77A 		vcvt.f32.s32	s14, s15
 9282 0150 D7ED077A 		vldr.32	s15, [r7, #28]
 9283 0154 67EE277A 		vmul.f32	s15, s14, s15
 9284 0158 C7ED077A 		vstr.32	s15, [r7, #28]
 939:Src/motor.cpp **** 
 940:Src/motor.cpp ****     auto [id_setpoint,iq_setpoint] = *(current_control_.Idq_setpoint_);
 9285              		.loc 11 940 70
 9286 015c FB68     		ldr	r3, [r7, #12]
 9287 015e 03F55273 		add	r3, r3, #840
 9288 0162 1846     		mov	r0, r3
 9289 0164 FFF7FEFF 		bl	_ZNRSt8optionalISt4pairIffEEdeEv
 9290 0168 0246     		mov	r2, r0
 9291 016a 07F11403 		add	r3, r7, #20
 9292 016e 92E80300 		ldm	r2, {r0, r1}
 9293 0172 83E80300 		stm	r3, {r0, r1}
 9294              		.loc 11 940 11
 9295 0176 07F11403 		add	r3, r7, #20
 9296 017a 1846     		mov	r0, r3
 9297 017c FFF7FEFF 		bl	_ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 9298 0180 B863     		str	r0, [r7, #56]
 9299              		.loc 11 940 23
 9300 0182 07F11403 		add	r3, r7, #20
 9301 0186 1846     		mov	r0, r3
 9302 0188 FFF7FEFF 		bl	_ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
 9303 018c 7863     		str	r0, [r7, #52]
 941:Src/motor.cpp ****     (void )iq_setpoint;
 942:Src/motor.cpp ****     // TODO: 2-norm vs independent clamping (current could be sqrt(2) bigger)
 943:Src/motor.cpp ****     float ilim = effective_current_lim();
 9304              		.loc 11 943 39
 9305 018e F868     		ldr	r0, [r7, #12]
 9306 0190 FFF7FEFF 		bl	_ZN5Motor21effective_current_limEv
 9307 0194 F0EE407A 		vmov.f32	s15, s0
 9308              		.loc 11 943 40
 9309 0198 C7ED047A 		vstr.32	s15, [r7, #16]
 944:Src/motor.cpp ****     float id = std::clamp(id_setpoint, -ilim, ilim);
 9310              		.loc 11 944 40
 9311 019c D7ED047A 		vldr.32	s15, [r7, #16]
 9312 01a0 F1EE677A 		vneg.f32	s15, s15
 9313 01a4 C7ED087A 		vstr.32	s15, [r7, #32]
 9314              		.loc 11 944 51
 9315 01a8 07F11002 		add	r2, r7, #16
ARM GAS  /tmp/ccATuxCb.s 			page 323


 9316 01ac 07F12003 		add	r3, r7, #32
 9317 01b0 1946     		mov	r1, r3
 9318 01b2 B86B     		ldr	r0, [r7, #56]
 9319 01b4 FFF7FEFF 		bl	_ZSt5clampIfERKT_S2_S2_S2_
 9320 01b8 0346     		mov	r3, r0
 9321 01ba 1B68     		ldr	r3, [r3]	@ float
 9322 01bc 3B63     		str	r3, [r7, #48]	@ float
 945:Src/motor.cpp ****     float iq = std::clamp(current_setpoint, -ilim, ilim);
 9323              		.loc 11 945 45
 9324 01be D7ED047A 		vldr.32	s15, [r7, #16]
 9325 01c2 F1EE677A 		vneg.f32	s15, s15
 9326 01c6 C7ED097A 		vstr.32	s15, [r7, #36]
 9327              		.loc 11 945 56
 9328 01ca 07F11002 		add	r2, r7, #16
 9329 01ce 07F12401 		add	r1, r7, #36
 9330 01d2 07F11C03 		add	r3, r7, #28
 9331 01d6 1846     		mov	r0, r3
 9332 01d8 FFF7FEFF 		bl	_ZSt5clampIfERKT_S2_S2_S2_
 9333 01dc 0346     		mov	r3, r0
 9334 01de 1B68     		ldr	r3, [r3]	@ float
 9335 01e0 FB62     		str	r3, [r7, #44]	@ float
 946:Src/motor.cpp **** 
 947:Src/motor.cpp **** 
 948:Src/motor.cpp ****     float pwm_phase = phase + 1.5f * current_meas_period * phase_vel;
 9336              		.loc 11 948 36
 9337 01e2 324B     		ldr	r3, .L425+4
 9338 01e4 D3ED007A 		vldr.32	s15, [r3]
 9339 01e8 B7EE087A 		vmov.f32	s14, #1.5e+0
 9340 01ec 27EE877A 		vmul.f32	s14, s15, s14
 9341              		.loc 11 948 58
 9342 01f0 D7ED007A 		vldr.32	s15, [r7]
 9343 01f4 67EE277A 		vmul.f32	s15, s14, s15
 9344              		.loc 11 948 11
 9345 01f8 97ED017A 		vldr.32	s14, [r7, #4]
 9346 01fc 77EE277A 		vadd.f32	s15, s14, s15
 9347 0200 C7ED0A7A 		vstr.32	s15, [r7, #40]
 949:Src/motor.cpp ****     pwm_phase = wrap_pm_pi(pwm_phase);
 9348              		.loc 11 949 27
 9349 0204 97ED0A0A 		vldr.32	s0, [r7, #40]
 9350 0208 FFF7FEFF 		bl	wrap_pm_pi
 9351 020c 87ED0A0A 		vstr.32	s0, [r7, #40]
 950:Src/motor.cpp ****     I_phase_ = pwm_phase;
 9352              		.loc 11 950 14
 9353 0210 FB68     		ldr	r3, [r7, #12]
 9354 0212 BA6A     		ldr	r2, [r7, #40]	@ float
 9355 0214 C3F8C022 		str	r2, [r3, #704]	@ float
 951:Src/motor.cpp ****     // Clarke transform
 952:Src/motor.cpp **** 
 953:Src/motor.cpp **** 
 954:Src/motor.cpp ****     bool res = true;
 9356              		.loc 11 954 10
 9357 0218 0123     		movs	r3, #1
 9358 021a 87F84B30 		strb	r3, [r7, #75]
 955:Src/motor.cpp ****     // Execute current command
 956:Src/motor.cpp ****     switch(config_.motor_type){
 9359              		.loc 11 956 12
 9360 021e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccATuxCb.s 			page 324


 9361 0220 5B68     		ldr	r3, [r3, #4]
 9362              		.loc 11 956 20
 9363 0222 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 9364              		.loc 11 956 5
 9365 0226 032B     		cmp	r3, #3
 9366 0228 15D0     		beq	.L416
 9367 022a 032B     		cmp	r3, #3
 9368 022c 2FDC     		bgt	.L417
 9369 022e 002B     		cmp	r3, #0
 9370 0230 02D0     		beq	.L418
 9371 0232 022B     		cmp	r3, #2
 9372 0234 1ED0     		beq	.L419
 9373 0236 2AE0     		b	.L417
 9374              	.L418:
 957:Src/motor.cpp ****         case MOTOR_TYPE_HIGH_CURRENT: res =  FOC_current(id, iq, phase, pwm_phase); break;
 9375              		.loc 11 957 57
 9376 0238 D7ED0A1A 		vldr.32	s3, [r7, #40]
 9377 023c 97ED011A 		vldr.32	s2, [r7, #4]
 9378 0240 D7ED0B0A 		vldr.32	s1, [r7, #44]
 9379 0244 97ED0C0A 		vldr.32	s0, [r7, #48]
 9380 0248 F868     		ldr	r0, [r7, #12]
 9381 024a FFF7FEFF 		bl	_ZN5Motor11FOC_currentEffff
 9382 024e 0346     		mov	r3, r0
 9383 0250 87F84B30 		strb	r3, [r7, #75]
 9384              		.loc 11 957 85
 9385 0254 21E0     		b	.L420
 9386              	.L416:
 958:Src/motor.cpp ****         case MOTOR_TYPE_ACIM: res = FOC_current(id, iq, phase, pwm_phase); break;
 9387              		.loc 11 958 48
 9388 0256 D7ED0A1A 		vldr.32	s3, [r7, #40]
 9389 025a 97ED011A 		vldr.32	s2, [r7, #4]
 9390 025e D7ED0B0A 		vldr.32	s1, [r7, #44]
 9391 0262 97ED0C0A 		vldr.32	s0, [r7, #48]
 9392 0266 F868     		ldr	r0, [r7, #12]
 9393 0268 FFF7FEFF 		bl	_ZN5Motor11FOC_currentEffff
 9394 026c 0346     		mov	r3, r0
 9395 026e 87F84B30 		strb	r3, [r7, #75]
 9396              		.loc 11 958 76
 9397 0272 12E0     		b	.L420
 9398              	.L419:
 959:Src/motor.cpp ****         case MOTOR_TYPE_GIMBAL: res =FOC_voltage(id, iq, pwm_phase); break;
 9399              		.loc 11 959 49
 9400 0274 97ED0A1A 		vldr.32	s2, [r7, #40]
 9401 0278 D7ED0B0A 		vldr.32	s1, [r7, #44]
 9402 027c 97ED0C0A 		vldr.32	s0, [r7, #48]
 9403 0280 F868     		ldr	r0, [r7, #12]
 9404 0282 FFF7FEFF 		bl	_ZN5Motor11FOC_voltageEfff
 9405 0286 0346     		mov	r3, r0
 9406 0288 87F84B30 		strb	r3, [r7, #75]
 9407              		.loc 11 959 70
 9408 028c 05E0     		b	.L420
 9409              	.L417:
 960:Src/motor.cpp ****         default: set_error(ODriveIntf::MotorIntf::ERROR_NOT_IMPLEMENTED_MOTOR_TYPE); return false; 
 9410              		.loc 11 960 27
 9411 028e 2021     		movs	r1, #32
 9412 0290 F868     		ldr	r0, [r7, #12]
 9413 0292 FFF7FEFF 		bl	_ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE
ARM GAS  /tmp/ccATuxCb.s 			page 325


 9414              		.loc 11 960 93
 9415 0296 0023     		movs	r3, #0
 9416 0298 01E0     		b	.L422
 9417              	.L420:
 961:Src/motor.cpp ****     }
 962:Src/motor.cpp ****     return res;
 9418              		.loc 11 962 12
 9419 029a 97F84B30 		ldrb	r3, [r7, #75]	@ zero_extendqisi2
 9420              	.L422:
 963:Src/motor.cpp **** }
 9421              		.loc 11 963 1 discriminator 1
 9422 029e 1846     		mov	r0, r3
 9423 02a0 5037     		adds	r7, r7, #80
 9424              	.LCFI656:
 9425              		.cfi_def_cfa_offset 8
 9426 02a2 BD46     		mov	sp, r7
 9427              	.LCFI657:
 9428              		.cfi_def_cfa_register 13
 9429              		@ sp needed
 9430 02a4 80BD     		pop	{r7, pc}
 9431              	.L426:
 9432 02a6 00BF     		.align	2
 9433              	.L425:
 9434 02a8 8FC2F53D 		.word	1039516303
 9435 02ac 00000000 		.word	current_meas_period
 9436              		.cfi_endproc
 9437              	.LFE5025:
 9439              		.section	.text._ZN5Motor6updateEm,"ax",%progbits
 9440              		.align	1
 9441              		.global	_ZN5Motor6updateEm
 9442              		.syntax unified
 9443              		.thumb
 9444              		.thumb_func
 9445              		.fpu fpv4-sp-d16
 9447              	_ZN5Motor6updateEm:
 9448              	.LFB5026:
 964:Src/motor.cpp **** 
 965:Src/motor.cpp **** 
 966:Src/motor.cpp **** 
 967:Src/motor.cpp **** 
 968:Src/motor.cpp **** 
 969:Src/motor.cpp **** 
 970:Src/motor.cpp **** void Motor::update(uint32_t timestamp) {
 9449              		.loc 11 970 40
 9450              		.cfi_startproc
 9451              		@ args = 0, pretend = 0, frame = 96
 9452              		@ frame_needed = 1, uses_anonymous_args = 0
 9453 0000 80B5     		push	{r7, lr}
 9454              	.LCFI658:
 9455              		.cfi_def_cfa_offset 8
 9456              		.cfi_offset 7, -8
 9457              		.cfi_offset 14, -4
 9458 0002 2DED028B 		vpush.64	{d8}
 9459              	.LCFI659:
 9460              		.cfi_def_cfa_offset 16
 9461              		.cfi_offset 80, -16
 9462              		.cfi_offset 81, -12
ARM GAS  /tmp/ccATuxCb.s 			page 326


 9463 0006 98B0     		sub	sp, sp, #96
 9464              	.LCFI660:
 9465              		.cfi_def_cfa_offset 112
 9466 0008 00AF     		add	r7, sp, #0
 9467              	.LCFI661:
 9468              		.cfi_def_cfa_register 7
 9469 000a 7860     		str	r0, [r7, #4]
 9470 000c 3960     		str	r1, [r7]
 971:Src/motor.cpp ****     // Load torque setpoint, convert to motor direction
 972:Src/motor.cpp ****     std::optional<float> maybe_torque = torque_setpoint_src_.present();
 9471              		.loc 11 972 70
 9472 000e 7B68     		ldr	r3, [r7, #4]
 9473 0010 03F56C72 		add	r2, r3, #944
 9474 0014 07F13003 		add	r3, r7, #48
 9475 0018 1146     		mov	r1, r2
 9476 001a 1846     		mov	r0, r3
 9477 001c FFF7FEFF 		bl	_ZN9InputPortIfE7presentEv
 973:Src/motor.cpp ****     if (!maybe_torque.has_value()) {
 9478              		.loc 11 973 32
 9479 0020 07F13003 		add	r3, r7, #48
 9480 0024 1846     		mov	r0, r3
 9481 0026 FFF7FEFF 		bl	_ZNKSt8optionalIfE9has_valueEv
 9482 002a 0346     		mov	r3, r0
 9483              		.loc 11 973 9
 9484 002c 83F00103 		eor	r3, r3, #1
 9485 0030 DBB2     		uxtb	r3, r3
 9486              		.loc 11 973 5
 9487 0032 002B     		cmp	r3, #0
 9488 0034 06D0     		beq	.L428
 974:Src/motor.cpp ****         error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_c
 9489              		.loc 11 974 82
 9490 0036 7B68     		ldr	r3, [r7, #4]
 9491 0038 5B6B     		ldr	r3, [r3, #52]
 9492              		.loc 11 974 90
 9493 003a 43F48002 		orr	r2, r3, #4194304
 9494              		.loc 11 974 16
 9495 003e 7B68     		ldr	r3, [r7, #4]
 9496 0040 5A63     		str	r2, [r3, #52]
 975:Src/motor.cpp **** 
 976:Src/motor.cpp ****         return;
 9497              		.loc 11 976 9
 9498 0042 7AE1     		b	.L427
 9499              	.L428:
 977:Src/motor.cpp ****     }
 978:Src/motor.cpp ****     float torque = direction_ * *maybe_torque;
 9500              		.loc 11 978 20
 9501 0044 7B68     		ldr	r3, [r7, #4]
 9502 0046 93EDF08A 		vldr.32	s16, [r3, #960]
 9503              		.loc 11 978 34
 9504 004a 07F13003 		add	r3, r7, #48
 9505 004e 1846     		mov	r0, r3
 9506 0050 FFF7FEFF 		bl	_ZNRSt8optionalIfEdeEv
 9507 0054 0346     		mov	r3, r0
 9508              		.loc 11 978 33
 9509 0056 D3ED007A 		vldr.32	s15, [r3]
 9510              		.loc 11 978 34
 9511 005a 68EE277A 		vmul.f32	s15, s16, s15
ARM GAS  /tmp/ccATuxCb.s 			page 327


 9512 005e C7ED177A 		vstr.32	s15, [r7, #92]
 9513              	.LBB69:
 979:Src/motor.cpp **** 
 980:Src/motor.cpp ****     // Load setpoints from previous iteration.
 981:Src/motor.cpp ****     float id, iq;
 982:Src/motor.cpp ****     if (auto prev = Idq_setpoint_.previous()) {
 9514              		.loc 11 982 44
 9515 0062 7B68     		ldr	r3, [r7, #4]
 9516 0064 03F57472 		add	r2, r3, #976
 9517 0068 07F10803 		add	r3, r7, #8
 9518 006c 1146     		mov	r1, r2
 9519 006e 1846     		mov	r0, r3
 9520 0070 FFF7FEFF 		bl	_ZN10OutputPortISt4pairIffEE8previousEv
 9521              		.loc 11 982 45
 9522 0074 07F10803 		add	r3, r7, #8
 9523 0078 1846     		mov	r0, r3
 9524 007a FFF7FEFF 		bl	_ZNKSt8optionalISt4pairIffEEcvbEv
 9525 007e 0346     		mov	r3, r0
 9526              		.loc 11 982 5
 9527 0080 002B     		cmp	r3, #0
 9528 0082 10D0     		beq	.L430
 983:Src/motor.cpp ****         id = prev->first;
 9529              		.loc 11 983 18
 9530 0084 07F10803 		add	r3, r7, #8
 9531 0088 1846     		mov	r0, r3
 9532 008a FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEptEv
 9533 008e 0346     		mov	r3, r0
 9534              		.loc 11 983 20
 9535 0090 1B68     		ldr	r3, [r3]	@ float
 9536              		.loc 11 983 12
 9537 0092 FB62     		str	r3, [r7, #44]	@ float
 984:Src/motor.cpp ****         iq = prev->second;
 9538              		.loc 11 984 18
 9539 0094 07F10803 		add	r3, r7, #8
 9540 0098 1846     		mov	r0, r3
 9541 009a FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEptEv
 9542 009e 0346     		mov	r3, r0
 9543              		.loc 11 984 20
 9544 00a0 5B68     		ldr	r3, [r3, #4]	@ float
 9545              		.loc 11 984 12
 9546 00a2 BB62     		str	r3, [r7, #40]	@ float
 9547 00a4 05E0     		b	.L431
 9548              	.L430:
 985:Src/motor.cpp ****     } else {
 986:Src/motor.cpp ****         id = 0.0f;
 9549              		.loc 11 986 12
 9550 00a6 4FF00003 		mov	r3, #0
 9551 00aa FB62     		str	r3, [r7, #44]	@ float
 987:Src/motor.cpp ****         iq = 0.0f;
 9552              		.loc 11 987 12
 9553 00ac 4FF00003 		mov	r3, #0
 9554 00b0 BB62     		str	r3, [r7, #40]	@ float
 9555              	.L431:
 9556              	.LBE69:
 988:Src/motor.cpp **** }
 989:Src/motor.cpp ****     // Load effective current limit
 990:Src/motor.cpp ****     float ilim = axis_->motor_.effective_current_lim_;
ARM GAS  /tmp/ccATuxCb.s 			page 328


 9557              		.loc 11 990 18
 9558 00b2 7B68     		ldr	r3, [r7, #4]
 9559 00b4 9B68     		ldr	r3, [r3, #8]
 9560              		.loc 11 990 25
 9561 00b6 DB6E     		ldr	r3, [r3, #108]
 9562              		.loc 11 990 11
 9563 00b8 D3F8A430 		ldr	r3, [r3, #164]	@ float
 9564 00bc BB65     		str	r3, [r7, #88]	@ float
 991:Src/motor.cpp **** 
 992:Src/motor.cpp **** 
 993:Src/motor.cpp ****     id = std::clamp(id, -ilim*0.99f, ilim*0.99f); // 1% space reserved for Iq to avoid numerical is
 9565              		.loc 11 993 25
 9566 00be D7ED167A 		vldr.32	s15, [r7, #88]
 9567 00c2 F1EE677A 		vneg.f32	s15, s15
 9568              		.loc 11 993 30
 9569 00c6 9FED9F7A 		vldr.32	s14, .L443
 9570 00ca 67EE877A 		vmul.f32	s15, s15, s14
 9571 00ce C7ED0E7A 		vstr.32	s15, [r7, #56]
 9572              		.loc 11 993 42
 9573 00d2 D7ED167A 		vldr.32	s15, [r7, #88]
 9574 00d6 9FED9B7A 		vldr.32	s14, .L443
 9575 00da 67EE877A 		vmul.f32	s15, s15, s14
 9576 00de C7ED0F7A 		vstr.32	s15, [r7, #60]
 9577              		.loc 11 993 48
 9578 00e2 07F13C02 		add	r2, r7, #60
 9579 00e6 07F13801 		add	r1, r7, #56
 9580 00ea 07F12C03 		add	r3, r7, #44
 9581 00ee 1846     		mov	r0, r3
 9582 00f0 FFF7FEFF 		bl	_ZSt5clampIfERKT_S2_S2_S2_
 9583 00f4 0346     		mov	r3, r0
 9584              		.loc 11 993 20
 9585 00f6 1B68     		ldr	r3, [r3]	@ float
 9586              		.loc 11 993 8
 9587 00f8 FB62     		str	r3, [r7, #44]	@ float
 994:Src/motor.cpp **** 
 995:Src/motor.cpp **** 
 996:Src/motor.cpp ****     // Convert requested torque to current
 997:Src/motor.cpp **** 
 998:Src/motor.cpp ****     iq = torque / axis_->motor_.config_.torque_constant;
 9588              		.loc 11 998 19
 9589 00fa 7B68     		ldr	r3, [r7, #4]
 9590 00fc 9B68     		ldr	r3, [r3, #8]
 9591              		.loc 11 998 26
 9592 00fe DB6E     		ldr	r3, [r3, #108]
 9593              		.loc 11 998 33
 9594 0100 5B68     		ldr	r3, [r3, #4]
 9595              		.loc 11 998 41
 9596 0102 93ED087A 		vldr.32	s14, [r3, #32]
 9597              		.loc 11 998 17
 9598 0106 D7ED176A 		vldr.32	s13, [r7, #92]
 9599 010a C6EE877A 		vdiv.f32	s15, s13, s14
 9600              		.loc 11 998 8
 9601 010e C7ED0A7A 		vstr.32	s15, [r7, #40]
 999:Src/motor.cpp ****     
1000:Src/motor.cpp **** 
1001:Src/motor.cpp ****     // 2-norm clamping where Id takes priority
1002:Src/motor.cpp ****     float iq_lim_sqr = SQ(ilim) - SQ(id);
ARM GAS  /tmp/ccATuxCb.s 			page 329


 9602              		.loc 11 1002 24
 9603 0112 D7ED167A 		vldr.32	s15, [r7, #88]
 9604 0116 27EEA77A 		vmul.f32	s14, s15, s15
 9605              		.loc 11 1002 35
 9606 011a D7ED0B6A 		vldr.32	s13, [r7, #44]
 9607 011e D7ED0B7A 		vldr.32	s15, [r7, #44]
 9608 0122 66EEA77A 		vmul.f32	s15, s13, s15
 9609              		.loc 11 1002 11
 9610 0126 77EE677A 		vsub.f32	s15, s14, s15
 9611 012a C7ED157A 		vstr.32	s15, [r7, #84]
1003:Src/motor.cpp ****     float Iq_lim = (iq_lim_sqr <= 0.0f) ? 0.0f : sqrt(iq_lim_sqr);
 9612              		.loc 11 1003 41
 9613 012e D7ED157A 		vldr.32	s15, [r7, #84]
 9614 0132 F5EEC07A 		vcmpe.f32	s15, #0
 9615 0136 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 9616 013a 02D8     		bhi	.L442
 9617              		.loc 11 1003 41 is_stmt 0 discriminator 1
 9618 013c DFED827A 		vldr.32	s15, .L443+4
 9619 0140 05E0     		b	.L434
 9620              	.L442:
 9621              		.loc 11 1003 54 is_stmt 1 discriminator 2
 9622 0142 97ED150A 		vldr.32	s0, [r7, #84]
 9623 0146 FFF7FEFF 		bl	_ZSt4sqrtf
 9624 014a F0EE407A 		vmov.f32	s15, s0
 9625              	.L434:
 9626              		.loc 11 1003 65 discriminator 4
 9627 014e C7ED097A 		vstr.32	s15, [r7, #36]
1004:Src/motor.cpp ****     iq = std::clamp(iq, -Iq_lim, Iq_lim);
 9628              		.loc 11 1004 25 discriminator 4
 9629 0152 D7ED097A 		vldr.32	s15, [r7, #36]
 9630 0156 F1EE677A 		vneg.f32	s15, s15
 9631 015a C7ED107A 		vstr.32	s15, [r7, #64]
 9632              		.loc 11 1004 40 discriminator 4
 9633 015e 07F12402 		add	r2, r7, #36
 9634 0162 07F14001 		add	r1, r7, #64
 9635 0166 07F12803 		add	r3, r7, #40
 9636 016a 1846     		mov	r0, r3
 9637 016c FFF7FEFF 		bl	_ZSt5clampIfERKT_S2_S2_S2_
 9638 0170 0346     		mov	r3, r0
 9639              		.loc 11 1004 20 discriminator 4
 9640 0172 1B68     		ldr	r3, [r3]	@ float
 9641              		.loc 11 1004 8 discriminator 4
 9642 0174 BB62     		str	r3, [r7, #40]	@ float
1005:Src/motor.cpp **** 
1006:Src/motor.cpp ****     if (axis_->motor_.config_.motor_type != Motor::MOTOR_TYPE_GIMBAL) {
 9643              		.loc 11 1006 9 discriminator 4
 9644 0176 7B68     		ldr	r3, [r7, #4]
 9645 0178 9B68     		ldr	r3, [r3, #8]
 9646              		.loc 11 1006 16 discriminator 4
 9647 017a DB6E     		ldr	r3, [r3, #108]
 9648              		.loc 11 1006 23 discriminator 4
 9649 017c 5B68     		ldr	r3, [r3, #4]
 9650              		.loc 11 1006 31 discriminator 4
 9651 017e 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 9652              		.loc 11 1006 5 discriminator 4
 9653 0182 022B     		cmp	r3, #2
 9654 0184 16D0     		beq	.L435
ARM GAS  /tmp/ccATuxCb.s 			page 330


1007:Src/motor.cpp ****         Idq_setpoint_ = {id, iq};
 9655              		.loc 11 1007 32
 9656 0186 07F12802 		add	r2, r7, #40
 9657 018a 07F12C01 		add	r1, r7, #44
 9658 018e 07F14403 		add	r3, r7, #68
 9659 0192 1846     		mov	r0, r3
 9660 0194 FFF7FEFF 		bl	_ZNSt4pairIffEC1IRfS2_Lb1EEEOT_OT0_
 9661              		.loc 11 1007 23
 9662 0198 7B68     		ldr	r3, [r7, #4]
 9663 019a 03F57473 		add	r3, r3, #976
 9664 019e 97ED117A 		vldr.32	s14, [r7, #68]
 9665 01a2 D7ED127A 		vldr.32	s15, [r7, #72]
 9666 01a6 B0EE470A 		vmov.f32	s0, s14
 9667 01aa F0EE670A 		vmov.f32	s1, s15
 9668 01ae 1846     		mov	r0, r3
 9669 01b0 FFF7FEFF 		bl	_ZN10OutputPortISt4pairIffEEaSES1_
 9670              	.L435:
1008:Src/motor.cpp ****     }
1009:Src/motor.cpp **** 
1010:Src/motor.cpp ****     // This update call is in bit a weird position because it depends on the
1011:Src/motor.cpp ****     // Id,q setpoint but outputs the phase velocity that we depend on later
1012:Src/motor.cpp ****     // in this function.
1013:Src/motor.cpp ****     // A cleaner fix would be to take the feedforward calculation out of here
1014:Src/motor.cpp ****     // and turn it into a separate component.
1015:Src/motor.cpp **** 
1016:Src/motor.cpp **** 
1017:Src/motor.cpp ****     float vd = 0.0f;
 9671              		.loc 11 1017 11
 9672 01b4 4FF00003 		mov	r3, #0
 9673 01b8 3B62     		str	r3, [r7, #32]	@ float
1018:Src/motor.cpp ****     float vq = 0.0f;
 9674              		.loc 11 1018 11
 9675 01ba 4FF00003 		mov	r3, #0
 9676 01be FB61     		str	r3, [r7, #28]	@ float
1019:Src/motor.cpp **** 
1020:Src/motor.cpp ****     std::optional<float> phase_vel = phase_vel_src_.present();
 9677              		.loc 11 1020 61
 9678 01c0 7B68     		ldr	r3, [r7, #4]
 9679 01c2 03F56E72 		add	r2, r3, #952
 9680 01c6 07F11403 		add	r3, r7, #20
 9681 01ca 1146     		mov	r1, r2
 9682 01cc 1846     		mov	r0, r3
 9683 01ce FFF7FEFF 		bl	_ZN9InputPortIfE7presentEv
1021:Src/motor.cpp **** 
1022:Src/motor.cpp ****     if (config_.R_wL_FF_enable) {
 9684              		.loc 11 1022 9
 9685 01d2 7B68     		ldr	r3, [r7, #4]
 9686 01d4 5B68     		ldr	r3, [r3, #4]
 9687              		.loc 11 1022 17
 9688 01d6 93F82034 		ldrb	r3, [r3, #1056]	@ zero_extendqisi2
 9689              		.loc 11 1022 5
 9690 01da 002B     		cmp	r3, #0
 9691 01dc 5DD0     		beq	.L436
1023:Src/motor.cpp ****         if (!phase_vel.has_value()) {
 9692              		.loc 11 1023 33
 9693 01de 07F11403 		add	r3, r7, #20
 9694 01e2 1846     		mov	r0, r3
ARM GAS  /tmp/ccATuxCb.s 			page 331


 9695 01e4 FFF7FEFF 		bl	_ZNKSt8optionalIfE9has_valueEv
 9696 01e8 0346     		mov	r3, r0
 9697              		.loc 11 1023 13
 9698 01ea 83F00103 		eor	r3, r3, #1
 9699 01ee DBB2     		uxtb	r3, r3
 9700              		.loc 11 1023 9
 9701 01f0 002B     		cmp	r3, #0
 9702 01f2 06D0     		beq	.L437
1024:Src/motor.cpp ****             error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | stat
 9703              		.loc 11 1024 86
 9704 01f4 7B68     		ldr	r3, [r7, #4]
 9705 01f6 5B6B     		ldr	r3, [r3, #52]
 9706              		.loc 11 1024 94
 9707 01f8 43F40002 		orr	r2, r3, #8388608
 9708              		.loc 11 1024 20
 9709 01fc 7B68     		ldr	r3, [r7, #4]
 9710 01fe 5A63     		str	r2, [r3, #52]
1025:Src/motor.cpp ****             return;
 9711              		.loc 11 1025 13
 9712 0200 9BE0     		b	.L427
 9713              	.L437:
1026:Src/motor.cpp ****         }
1027:Src/motor.cpp **** 
1028:Src/motor.cpp ****         vd -= *phase_vel * config_.phase_inductance * iq;
 9714              		.loc 11 1028 16
 9715 0202 07F11403 		add	r3, r7, #20
 9716 0206 1846     		mov	r0, r3
 9717 0208 FFF7FEFF 		bl	_ZNRSt8optionalIfEdeEv
 9718 020c 0346     		mov	r3, r0
 9719              		.loc 11 1028 15
 9720 020e 93ED007A 		vldr.32	s14, [r3]
 9721              		.loc 11 1028 28
 9722 0212 7B68     		ldr	r3, [r7, #4]
 9723 0214 5B68     		ldr	r3, [r3, #4]
 9724              		.loc 11 1028 36
 9725 0216 D3ED067A 		vldr.32	s15, [r3, #24]
 9726              		.loc 11 1028 26
 9727 021a 27EE277A 		vmul.f32	s14, s14, s15
 9728              		.loc 11 1028 53
 9729 021e D7ED0A7A 		vldr.32	s15, [r7, #40]
 9730 0222 67EE277A 		vmul.f32	s15, s14, s15
 9731              		.loc 11 1028 12
 9732 0226 97ED087A 		vldr.32	s14, [r7, #32]
 9733 022a 77EE677A 		vsub.f32	s15, s14, s15
 9734 022e C7ED087A 		vstr.32	s15, [r7, #32]
1029:Src/motor.cpp ****         vq += *phase_vel * config_.phase_inductance * id;
 9735              		.loc 11 1029 16
 9736 0232 07F11403 		add	r3, r7, #20
 9737 0236 1846     		mov	r0, r3
 9738 0238 FFF7FEFF 		bl	_ZNRSt8optionalIfEdeEv
 9739 023c 0346     		mov	r3, r0
 9740              		.loc 11 1029 15
 9741 023e 93ED007A 		vldr.32	s14, [r3]
 9742              		.loc 11 1029 28
 9743 0242 7B68     		ldr	r3, [r7, #4]
 9744 0244 5B68     		ldr	r3, [r3, #4]
 9745              		.loc 11 1029 36
ARM GAS  /tmp/ccATuxCb.s 			page 332


 9746 0246 D3ED067A 		vldr.32	s15, [r3, #24]
 9747              		.loc 11 1029 26
 9748 024a 27EE277A 		vmul.f32	s14, s14, s15
 9749              		.loc 11 1029 53
 9750 024e D7ED0B7A 		vldr.32	s15, [r7, #44]
 9751 0252 27EE277A 		vmul.f32	s14, s14, s15
 9752              		.loc 11 1029 12
 9753 0256 D7ED077A 		vldr.32	s15, [r7, #28]
 9754 025a 77EE277A 		vadd.f32	s15, s14, s15
 9755 025e C7ED077A 		vstr.32	s15, [r7, #28]
1030:Src/motor.cpp ****         vd += config_.phase_resistance * id;
 9756              		.loc 11 1030 15
 9757 0262 7B68     		ldr	r3, [r7, #4]
 9758 0264 5B68     		ldr	r3, [r3, #4]
 9759              		.loc 11 1030 23
 9760 0266 93ED077A 		vldr.32	s14, [r3, #28]
 9761              		.loc 11 1030 40
 9762 026a D7ED0B7A 		vldr.32	s15, [r7, #44]
 9763 026e 27EE277A 		vmul.f32	s14, s14, s15
 9764              		.loc 11 1030 12
 9765 0272 D7ED087A 		vldr.32	s15, [r7, #32]
 9766 0276 77EE277A 		vadd.f32	s15, s14, s15
 9767 027a C7ED087A 		vstr.32	s15, [r7, #32]
1031:Src/motor.cpp ****         vq += config_.phase_resistance * iq;
 9768              		.loc 11 1031 15
 9769 027e 7B68     		ldr	r3, [r7, #4]
 9770 0280 5B68     		ldr	r3, [r3, #4]
 9771              		.loc 11 1031 23
 9772 0282 93ED077A 		vldr.32	s14, [r3, #28]
 9773              		.loc 11 1031 40
 9774 0286 D7ED0A7A 		vldr.32	s15, [r7, #40]
 9775 028a 27EE277A 		vmul.f32	s14, s14, s15
 9776              		.loc 11 1031 12
 9777 028e D7ED077A 		vldr.32	s15, [r7, #28]
 9778 0292 77EE277A 		vadd.f32	s15, s14, s15
 9779 0296 C7ED077A 		vstr.32	s15, [r7, #28]
 9780              	.L436:
1032:Src/motor.cpp ****     }
1033:Src/motor.cpp **** 
1034:Src/motor.cpp ****     if (config_.bEMF_FF_enable) {
 9781              		.loc 11 1034 9
 9782 029a 7B68     		ldr	r3, [r7, #4]
 9783 029c 5B68     		ldr	r3, [r3, #4]
 9784              		.loc 11 1034 17
 9785 029e 93F82134 		ldrb	r3, [r3, #1057]	@ zero_extendqisi2
 9786              		.loc 11 1034 5
 9787 02a2 002B     		cmp	r3, #0
 9788 02a4 32D0     		beq	.L438
1035:Src/motor.cpp ****         if (!phase_vel.has_value()) {
 9789              		.loc 11 1035 33
 9790 02a6 07F11403 		add	r3, r7, #20
 9791 02aa 1846     		mov	r0, r3
 9792 02ac FFF7FEFF 		bl	_ZNKSt8optionalIfE9has_valueEv
 9793 02b0 0346     		mov	r3, r0
 9794              		.loc 11 1035 13
 9795 02b2 83F00103 		eor	r3, r3, #1
 9796 02b6 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccATuxCb.s 			page 333


 9797              		.loc 11 1035 9
 9798 02b8 002B     		cmp	r3, #0
 9799 02ba 06D0     		beq	.L439
1036:Src/motor.cpp ****             error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | stat
 9800              		.loc 11 1036 86
 9801 02bc 7B68     		ldr	r3, [r7, #4]
 9802 02be 5B6B     		ldr	r3, [r3, #52]
 9803              		.loc 11 1036 94
 9804 02c0 43F40002 		orr	r2, r3, #8388608
 9805              		.loc 11 1036 20
 9806 02c4 7B68     		ldr	r3, [r7, #4]
 9807 02c6 5A63     		str	r2, [r3, #52]
1037:Src/motor.cpp ****             return;
 9808              		.loc 11 1037 13
 9809 02c8 37E0     		b	.L427
 9810              	.L439:
1038:Src/motor.cpp ****         }
1039:Src/motor.cpp **** 
1040:Src/motor.cpp ****         vq += *phase_vel * 0.4444444f * (config_.torque_constant / config_.pole_pairs);
 9811              		.loc 11 1040 16
 9812 02ca 07F11403 		add	r3, r7, #20
 9813 02ce 1846     		mov	r0, r3
 9814 02d0 FFF7FEFF 		bl	_ZNRSt8optionalIfEdeEv
 9815 02d4 0346     		mov	r3, r0
 9816              		.loc 11 1040 15
 9817 02d6 D3ED007A 		vldr.32	s15, [r3]
 9818              		.loc 11 1040 26
 9819 02da 9FED1C7A 		vldr.32	s14, .L443+8
 9820 02de 27EE877A 		vmul.f32	s14, s15, s14
 9821              		.loc 11 1040 42
 9822 02e2 7B68     		ldr	r3, [r7, #4]
 9823 02e4 5B68     		ldr	r3, [r3, #4]
 9824              		.loc 11 1040 50
 9825 02e6 93ED086A 		vldr.32	s12, [r3, #32]
 9826              		.loc 11 1040 68
 9827 02ea 7B68     		ldr	r3, [r7, #4]
 9828 02ec 5B68     		ldr	r3, [r3, #4]
 9829              		.loc 11 1040 76
 9830 02ee 5B68     		ldr	r3, [r3, #4]
 9831              		.loc 11 1040 66
 9832 02f0 07EE903A 		vmov	s15, r3	@ int
 9833 02f4 F8EEE76A 		vcvt.f32.s32	s13, s15
 9834 02f8 C6EE267A 		vdiv.f32	s15, s12, s13
 9835              		.loc 11 1040 39
 9836 02fc 27EE277A 		vmul.f32	s14, s14, s15
 9837              		.loc 11 1040 12
 9838 0300 D7ED077A 		vldr.32	s15, [r7, #28]
 9839 0304 77EE277A 		vadd.f32	s15, s14, s15
 9840 0308 C7ED077A 		vstr.32	s15, [r7, #28]
 9841              	.L438:
1041:Src/motor.cpp ****     }
1042:Src/motor.cpp **** 
1043:Src/motor.cpp ****     Vdq_setpoint_ = {vd, vq};
 9842              		.loc 11 1043 28
 9843 030c 07F11C02 		add	r2, r7, #28
 9844 0310 07F12001 		add	r1, r7, #32
 9845 0314 07F14C03 		add	r3, r7, #76
ARM GAS  /tmp/ccATuxCb.s 			page 334


 9846 0318 1846     		mov	r0, r3
 9847 031a FFF7FEFF 		bl	_ZNSt4pairIffEC1IRfS2_Lb1EEEOT_OT0_
 9848              		.loc 11 1043 19
 9849 031e 7B68     		ldr	r3, [r7, #4]
 9850 0320 03F57173 		add	r3, r3, #964
 9851 0324 97ED137A 		vldr.32	s14, [r7, #76]
 9852 0328 D7ED147A 		vldr.32	s15, [r7, #80]
 9853 032c B0EE470A 		vmov.f32	s0, s14
 9854 0330 F0EE670A 		vmov.f32	s1, s15
 9855 0334 1846     		mov	r0, r3
 9856 0336 FFF7FEFF 		bl	_ZN10OutputPortISt4pairIffEEaSES1_
 9857              	.L427:
1044:Src/motor.cpp **** 
1045:Src/motor.cpp **** }
 9858              		.loc 11 1045 1
 9859 033a 6037     		adds	r7, r7, #96
 9860              	.LCFI662:
 9861              		.cfi_def_cfa_offset 16
 9862 033c BD46     		mov	sp, r7
 9863              	.LCFI663:
 9864              		.cfi_def_cfa_register 13
 9865              		@ sp needed
 9866 033e BDEC028B 		vldm	sp!, {d8}
 9867              	.LCFI664:
 9868              		.cfi_restore 80
 9869              		.cfi_restore 81
 9870              		.cfi_def_cfa_offset 8
 9871 0342 80BD     		pop	{r7, pc}
 9872              	.L444:
 9873              		.align	2
 9874              	.L443:
 9875 0344 A4707D3F 		.word	1065185444
 9876 0348 00000000 		.word	0
 9877 034c 378EE33E 		.word	1055100471
 9878              		.cfi_endproc
 9879              	.LFE5026:
 9881              		.section	.text._ZN5Motor15current_meas_cbEm,"ax",%progbits
 9882              		.align	1
 9883              		.global	_ZN5Motor15current_meas_cbEm
 9884              		.syntax unified
 9885              		.thumb
 9886              		.thumb_func
 9887              		.fpu fpv4-sp-d16
 9889              	_ZN5Motor15current_meas_cbEm:
 9890              	.LFB5027:
1046:Src/motor.cpp **** 
1047:Src/motor.cpp **** 
1048:Src/motor.cpp **** 
1049:Src/motor.cpp **** /**
1050:Src/motor.cpp ****  * @brief Called when the underlying hardware timer triggers an update event.
1051:Src/motor.cpp ****  */
1052:Src/motor.cpp **** void Motor::current_meas_cb(uint32_t timestamp) {
 9891              		.loc 11 1052 49
 9892              		.cfi_startproc
 9893              		@ args = 0, pretend = 0, frame = 64
 9894              		@ frame_needed = 1, uses_anonymous_args = 0
 9895 0000 F0B5     		push	{r4, r5, r6, r7, lr}
ARM GAS  /tmp/ccATuxCb.s 			page 335


 9896              	.LCFI665:
 9897              		.cfi_def_cfa_offset 20
 9898              		.cfi_offset 4, -20
 9899              		.cfi_offset 5, -16
 9900              		.cfi_offset 6, -12
 9901              		.cfi_offset 7, -8
 9902              		.cfi_offset 14, -4
 9903 0002 95B0     		sub	sp, sp, #84
 9904              	.LCFI666:
 9905              		.cfi_def_cfa_offset 104
 9906 0004 04AF     		add	r7, sp, #16
 9907              	.LCFI667:
 9908              		.cfi_def_cfa 7, 88
 9909 0006 7860     		str	r0, [r7, #4]
 9910 0008 3960     		str	r1, [r7]
1053:Src/motor.cpp ****     // TODO: this is platform specific
1054:Src/motor.cpp ****     //const float current_meas_period = static_cast<float>(2 * TIM_1_8_PERIOD_CLOCKS * (TIM_1_8_RCR
1055:Src/motor.cpp ****     TaskTimerContext tmr{axis_->task_times_.current_sense};
 9911              		.loc 11 1055 26
 9912 000a 7B68     		ldr	r3, [r7, #4]
 9913 000c 9B68     		ldr	r3, [r3, #8]
 9914              		.loc 11 1055 45
 9915 000e 03F59072 		add	r2, r3, #288
 9916              		.loc 11 1055 58
 9917 0012 07F10C03 		add	r3, r7, #12
 9918 0016 1146     		mov	r1, r2
 9919 0018 1846     		mov	r0, r3
 9920 001a FFF7FEFF 		bl	_ZN16TaskTimerContextC1ER9TaskTimer
 9921              	.LBB70:
1056:Src/motor.cpp **** 
1057:Src/motor.cpp **** 
1058:Src/motor.cpp **** 
1059:Src/motor.cpp ****     if (control_law_) {
 9922              		.loc 11 1059 9
 9923 001e 7B68     		ldr	r3, [r7, #4]
 9924 0020 D3F8AC33 		ldr	r3, [r3, #940]
 9925              		.loc 11 1059 5
 9926 0024 002B     		cmp	r3, #0
 9927 0026 36D0     		beq	.L446
 9928              	.LBB71:
1060:Src/motor.cpp ****         ODriveIntf::MotorIntf::Error err = control_law_->on_measurement(vbus_voltage,
 9929              		.loc 11 1060 44
 9930 0028 7B68     		ldr	r3, [r7, #4]
 9931 002a D3F8AC33 		ldr	r3, [r3, #940]
1061:Src/motor.cpp ****                                 std::make_optional(std::array<float, 3>{current_meas_.phA, current_
1062:Src/motor.cpp ****                             timestamp);
 9932              		.loc 11 1062 38
 9933 002e 1B68     		ldr	r3, [r3]
 9934 0030 0433     		adds	r3, r3, #4
 9935 0032 1D68     		ldr	r5, [r3]
1060:Src/motor.cpp ****         ODriveIntf::MotorIntf::Error err = control_law_->on_measurement(vbus_voltage,
 9936              		.loc 11 1060 44
 9937 0034 7B68     		ldr	r3, [r7, #4]
 9938 0036 D3F8AC63 		ldr	r6, [r3, #940]
 9939              		.loc 11 1062 38
 9940 003a 07F11803 		add	r3, r7, #24
 9941 003e 1A49     		ldr	r1, .L447
ARM GAS  /tmp/ccATuxCb.s 			page 336


 9942 0040 1846     		mov	r0, r3
 9943 0042 FFF7FEFF 		bl	_ZNSt8optionalIfEC1IRfLb1EEEOT_
1061:Src/motor.cpp ****                                 std::make_optional(std::array<float, 3>{current_meas_.phA, current_
 9944              		.loc 11 1061 87
 9945 0046 7B68     		ldr	r3, [r7, #4]
 9946 0048 DB6B     		ldr	r3, [r3, #60]	@ float
1061:Src/motor.cpp ****                                 std::make_optional(std::array<float, 3>{current_meas_.phA, current_
 9947              		.loc 11 1061 57
 9948 004a 3B62     		str	r3, [r7, #32]	@ float
1061:Src/motor.cpp ****                                 std::make_optional(std::array<float, 3>{current_meas_.phA, current_
 9949              		.loc 11 1061 106
 9950 004c 7B68     		ldr	r3, [r7, #4]
 9951 004e 1B6C     		ldr	r3, [r3, #64]	@ float
1061:Src/motor.cpp ****                                 std::make_optional(std::array<float, 3>{current_meas_.phA, current_
 9952              		.loc 11 1061 57
 9953 0050 7B62     		str	r3, [r7, #36]	@ float
1061:Src/motor.cpp ****                                 std::make_optional(std::array<float, 3>{current_meas_.phA, current_
 9954              		.loc 11 1061 125
 9955 0052 7B68     		ldr	r3, [r7, #4]
 9956 0054 5B6C     		ldr	r3, [r3, #68]	@ float
1061:Src/motor.cpp ****                                 std::make_optional(std::array<float, 3>{current_meas_.phA, current_
 9957              		.loc 11 1061 57
 9958 0056 BB62     		str	r3, [r7, #40]	@ float
1060:Src/motor.cpp ****         ODriveIntf::MotorIntf::Error err = control_law_->on_measurement(vbus_voltage,
 9959              		.loc 11 1060 72
 9960 0058 07F12C03 		add	r3, r7, #44
 9961 005c 07F12002 		add	r2, r7, #32
 9962 0060 1146     		mov	r1, r2
 9963 0062 1846     		mov	r0, r3
 9964 0064 FFF7FEFF 		bl	_ZSt13make_optionalISt5arrayIfLj3EEESt8optionalINSt5decayIT_E4typeEEOS4_
 9965 0068 3B68     		ldr	r3, [r7]
 9966 006a 0393     		str	r3, [sp, #12]
 9967 006c 6C46     		mov	r4, sp
 9968 006e 07F13003 		add	r3, r7, #48
 9969 0072 93E80700 		ldm	r3, {r0, r1, r2}
 9970 0076 84E80700 		stm	r4, {r0, r1, r2}
 9971 007a FB6A     		ldr	r3, [r7, #44]
 9972 007c 07F11802 		add	r2, r7, #24
 9973 0080 06CA     		ldm	r2, {r1, r2}
 9974 0082 3046     		mov	r0, r6
 9975 0084 A847     		blx	r5
 9976              	.LVL2:
 9977 0086 F863     		str	r0, [r7, #60]
1063:Src/motor.cpp ****         if (err != ODriveIntf::MotorIntf::ERROR_NONE) {
 9978              		.loc 11 1063 9
 9979 0088 FB6B     		ldr	r3, [r7, #60]
 9980 008a 002B     		cmp	r3, #0
 9981 008c 03D0     		beq	.L446
1064:Src/motor.cpp ****             set_error(err);
 9982              		.loc 11 1064 22
 9983 008e F96B     		ldr	r1, [r7, #60]
 9984 0090 7868     		ldr	r0, [r7, #4]
 9985 0092 FFF7FEFF 		bl	_ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE
 9986              	.L446:
 9987              	.LBE71:
 9988              	.LBE70:
1055:Src/motor.cpp **** 
ARM GAS  /tmp/ccATuxCb.s 			page 337


 9989              		.loc 11 1055 58
 9990 0096 07F10C03 		add	r3, r7, #12
 9991 009a 1846     		mov	r0, r3
 9992 009c FFF7FEFF 		bl	_ZN16TaskTimerContextD1Ev
1065:Src/motor.cpp ****         }
1066:Src/motor.cpp ****     }
1067:Src/motor.cpp **** }
 9993              		.loc 11 1067 1
 9994 00a0 00BF     		nop
 9995 00a2 4437     		adds	r7, r7, #68
 9996              	.LCFI668:
 9997              		.cfi_def_cfa_offset 20
 9998 00a4 BD46     		mov	sp, r7
 9999              	.LCFI669:
 10000              		.cfi_def_cfa_register 13
 10001              		@ sp needed
 10002 00a6 F0BD     		pop	{r4, r5, r6, r7, pc}
 10003              	.L448:
 10004              		.align	2
 10005              	.L447:
 10006 00a8 00000000 		.word	vbus_voltage
 10007              		.cfi_endproc
 10008              	.LFE5027:
 10010              		.section	.rodata
 10011 004a 0000     		.align	2
 10012              	.LC1:
 10013 004c 0000C07F 		.word	2143289344
 10014 0050 0000C07F 		.word	2143289344
 10015 0054 0000C07F 		.word	2143289344
 10016              		.section	.text._ZN5Motor13pwm_update_cbEm,"ax",%progbits
 10017              		.align	1
 10018              		.global	_ZN5Motor13pwm_update_cbEm
 10019              		.syntax unified
 10020              		.thumb
 10021              		.thumb_func
 10022              		.fpu fpv4-sp-d16
 10024              	_ZN5Motor13pwm_update_cbEm:
 10025              	.LFB5029:
1068:Src/motor.cpp **** 
1069:Src/motor.cpp **** 
1070:Src/motor.cpp **** 
1071:Src/motor.cpp **** void Motor::pwm_update_cb(uint32_t output_timestamp) {
 10026              		.loc 11 1071 54
 10027              		.cfi_startproc
 10028              		@ args = 0, pretend = 0, frame = 88
 10029              		@ frame_needed = 1, uses_anonymous_args = 0
 10030 0000 90B5     		push	{r4, r7, lr}
 10031              	.LCFI670:
 10032              		.cfi_def_cfa_offset 12
 10033              		.cfi_offset 4, -12
 10034              		.cfi_offset 7, -8
 10035              		.cfi_offset 14, -4
 10036 0002 97B0     		sub	sp, sp, #92
 10037              	.LCFI671:
 10038              		.cfi_def_cfa_offset 104
 10039 0004 00AF     		add	r7, sp, #0
 10040              	.LCFI672:
ARM GAS  /tmp/ccATuxCb.s 			page 338


 10041              		.cfi_def_cfa_register 7
 10042 0006 7860     		str	r0, [r7, #4]
 10043 0008 3960     		str	r1, [r7]
1072:Src/motor.cpp ****     TaskTimerContext tmr{axis_->task_times_.pwm_update};
 10044              		.loc 11 1072 26
 10045 000a 7B68     		ldr	r3, [r7, #4]
 10046 000c 9B68     		ldr	r3, [r3, #8]
 10047              		.loc 11 1072 45
 10048 000e 03F59872 		add	r2, r3, #304
 10049              		.loc 11 1072 55
 10050 0012 07F12403 		add	r3, r7, #36
 10051 0016 1146     		mov	r1, r2
 10052 0018 1846     		mov	r0, r3
 10053 001a FFF7FEFF 		bl	_ZN16TaskTimerContextC1ER9TaskTimer
1073:Src/motor.cpp **** 
1074:Src/motor.cpp ****     ODriveIntf::MotorIntf::Error control_law_status =  ODriveIntf::MotorIntf::ERROR_CONTROLLER_FAIL
 10054              		.loc 11 1074 34
 10055 001e 4FF00073 		mov	r3, #33554432
 10056 0022 7B65     		str	r3, [r7, #84]
1075:Src/motor.cpp ****     float pwm_timings[3] = {NAN, NAN, NAN};
 10057              		.loc 11 1075 11
 10058 0024 874A     		ldr	r2, .L466
 10059 0026 07F11803 		add	r3, r7, #24
 10060 002a 07CA     		ldm	r2, {r0, r1, r2}
 10061 002c 83E80700 		stm	r3, {r0, r1, r2}
1076:Src/motor.cpp ****     std::optional<float> i_bus;
 10062              		.loc 11 1076 26
 10063 0030 07F11003 		add	r3, r7, #16
 10064 0034 0022     		movs	r2, #0
 10065 0036 1A60     		str	r2, [r3]
 10066 0038 5A60     		str	r2, [r3, #4]
1077:Src/motor.cpp **** 
1078:Src/motor.cpp ****     if (control_law_) {
 10067              		.loc 11 1078 9
 10068 003a 7B68     		ldr	r3, [r7, #4]
 10069 003c D3F8AC33 		ldr	r3, [r3, #940]
 10070              		.loc 11 1078 5
 10071 0040 002B     		cmp	r3, #0
 10072 0042 0FD0     		beq	.L450
1079:Src/motor.cpp ****         control_law_status = control_law_->get_output(
 10073              		.loc 11 1079 30
 10074 0044 7B68     		ldr	r3, [r7, #4]
 10075 0046 D3F8AC33 		ldr	r3, [r3, #940]
1080:Src/motor.cpp ****             output_timestamp, pwm_timings, &i_bus);
 10076              		.loc 11 1080 50
 10077 004a 1B68     		ldr	r3, [r3]
 10078 004c 0833     		adds	r3, r3, #8
 10079 004e 1C68     		ldr	r4, [r3]
1079:Src/motor.cpp ****         control_law_status = control_law_->get_output(
 10080              		.loc 11 1079 30
 10081 0050 7B68     		ldr	r3, [r7, #4]
 10082 0052 D3F8AC03 		ldr	r0, [r3, #940]
1079:Src/motor.cpp ****         control_law_status = control_law_->get_output(
 10083              		.loc 11 1079 54
 10084 0056 07F11003 		add	r3, r7, #16
 10085 005a 07F11802 		add	r2, r7, #24
 10086 005e 3968     		ldr	r1, [r7]
ARM GAS  /tmp/ccATuxCb.s 			page 339


 10087 0060 A047     		blx	r4
 10088              	.LVL3:
 10089 0062 7865     		str	r0, [r7, #84]
 10090              	.L450:
 10091              	.LBB72:
1081:Src/motor.cpp ****     }
1082:Src/motor.cpp **** 
1083:Src/motor.cpp ****     // Apply control law to calculate PWM duty cycles
1084:Src/motor.cpp ****     if (is_armed_ && control_law_status == ODriveIntf::MotorIntf::ERROR_NONE) {
 10092              		.loc 11 1084 9
 10093 0064 7B68     		ldr	r3, [r7, #4]
 10094 0066 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 10095              		.loc 11 1084 5
 10096 006a 002B     		cmp	r3, #0
 10097 006c 2ED0     		beq	.L451
 10098              		.loc 11 1084 19 discriminator 1
 10099 006e 7B6D     		ldr	r3, [r7, #84]
 10100 0070 002B     		cmp	r3, #0
 10101 0072 2BD1     		bne	.L451
 10102              	.LBB73:
1085:Src/motor.cpp ****         uint16_t next_timings[] = {
1086:Src/motor.cpp ****             (uint16_t)(pwm_timings[0] * (float)TIM_1_8_PERIOD_CLOCKS),
 10103              		.loc 11 1086 37
 10104 0074 D7ED067A 		vldr.32	s15, [r7, #24]
 10105              		.loc 11 1086 39
 10106 0078 9FED737A 		vldr.32	s14, .L466+4
 10107 007c 67EE877A 		vmul.f32	s15, s15, s14
 10108              		.loc 11 1086 13
 10109 0080 FCEEE77A 		vcvt.u32.f32	s15, s15
 10110 0084 17EE903A 		vmov	r3, s15	@ int
 10111 0088 9BB2     		uxth	r3, r3
1087:Src/motor.cpp ****             (uint16_t)(pwm_timings[1] * (float)TIM_1_8_PERIOD_CLOCKS),
1088:Src/motor.cpp ****             (uint16_t)(pwm_timings[2] * (float)TIM_1_8_PERIOD_CLOCKS)
1089:Src/motor.cpp ****         };
 10112              		.loc 11 1089 9
 10113 008a 3B81     		strh	r3, [r7, #8]	@ movhi
1087:Src/motor.cpp ****             (uint16_t)(pwm_timings[1] * (float)TIM_1_8_PERIOD_CLOCKS),
 10114              		.loc 11 1087 37
 10115 008c D7ED077A 		vldr.32	s15, [r7, #28]
1087:Src/motor.cpp ****             (uint16_t)(pwm_timings[1] * (float)TIM_1_8_PERIOD_CLOCKS),
 10116              		.loc 11 1087 39
 10117 0090 9FED6D7A 		vldr.32	s14, .L466+4
 10118 0094 67EE877A 		vmul.f32	s15, s15, s14
1087:Src/motor.cpp ****             (uint16_t)(pwm_timings[1] * (float)TIM_1_8_PERIOD_CLOCKS),
 10119              		.loc 11 1087 13
 10120 0098 FCEEE77A 		vcvt.u32.f32	s15, s15
 10121 009c 17EE903A 		vmov	r3, s15	@ int
 10122 00a0 9BB2     		uxth	r3, r3
 10123              		.loc 11 1089 9
 10124 00a2 7B81     		strh	r3, [r7, #10]	@ movhi
1088:Src/motor.cpp ****         };
 10125              		.loc 11 1088 37
 10126 00a4 D7ED087A 		vldr.32	s15, [r7, #32]
1088:Src/motor.cpp ****         };
 10127              		.loc 11 1088 39
 10128 00a8 9FED677A 		vldr.32	s14, .L466+4
 10129 00ac 67EE877A 		vmul.f32	s15, s15, s14
ARM GAS  /tmp/ccATuxCb.s 			page 340


1088:Src/motor.cpp ****         };
 10130              		.loc 11 1088 13
 10131 00b0 FCEEE77A 		vcvt.u32.f32	s15, s15
 10132 00b4 17EE903A 		vmov	r3, s15	@ int
 10133 00b8 9BB2     		uxth	r3, r3
 10134              		.loc 11 1089 9
 10135 00ba BB81     		strh	r3, [r7, #12]	@ movhi
1090:Src/motor.cpp ****         apply_pwm_timings(next_timings, false);
 10136              		.loc 11 1090 26
 10137 00bc 07F10803 		add	r3, r7, #8
 10138 00c0 0022     		movs	r2, #0
 10139 00c2 1946     		mov	r1, r3
 10140 00c4 7868     		ldr	r0, [r7, #4]
 10141 00c6 FFF7FEFF 		bl	_ZN5Motor17apply_pwm_timingsEPtb
 10142              	.LBE73:
 10143              		.loc 11 1090 47
 10144 00ca 2EE0     		b	.L452
 10145              	.L451:
1091:Src/motor.cpp ****     } else if (is_armed_) {
 10146              		.loc 11 1091 16
 10147 00cc 7B68     		ldr	r3, [r7, #4]
 10148 00ce 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 10149              		.loc 11 1091 12
 10150 00d2 002B     		cmp	r3, #0
 10151 00d4 29D0     		beq	.L452
1092:Src/motor.cpp ****         if (!( hw_config_.timer->Instance->BDTR & TIM_BDTR_MOE) && (control_law_status == ODriveInt
 10152              		.loc 11 1092 16
 10153 00d6 7B68     		ldr	r3, [r7, #4]
 10154 00d8 1B68     		ldr	r3, [r3]
 10155              		.loc 11 1092 27
 10156 00da 1B68     		ldr	r3, [r3]
 10157              		.loc 11 1092 34
 10158 00dc 1B68     		ldr	r3, [r3]
 10159              		.loc 11 1092 44
 10160 00de 5B6C     		ldr	r3, [r3, #68]
 10161              		.loc 11 1092 49
 10162 00e0 03F40043 		and	r3, r3, #32768
 10163              		.loc 11 1092 65
 10164 00e4 002B     		cmp	r3, #0
 10165 00e6 05D1     		bne	.L453
 10166              		.loc 11 1092 65 is_stmt 0 discriminator 1
 10167 00e8 7B6D     		ldr	r3, [r7, #84]
 10168 00ea B3F1806F 		cmp	r3, #67108864
 10169 00ee 01D1     		bne	.L453
 10170              		.loc 11 1092 65 discriminator 3
 10171 00f0 0123     		movs	r3, #1
 10172 00f2 00E0     		b	.L454
 10173              	.L453:
 10174              		.loc 11 1092 65 discriminator 4
 10175 00f4 0023     		movs	r3, #0
 10176              	.L454:
 10177              		.loc 11 1092 9 is_stmt 1 discriminator 6
 10178 00f6 002B     		cmp	r3, #0
 10179 00f8 13D0     		beq	.L455
1093:Src/motor.cpp ****             // If the PWM output is armed in software but not yet in
1094:Src/motor.cpp ****             // hardware we tolerate the "initializing" error.
1095:Src/motor.cpp ****             i_bus = 0.0f;
ARM GAS  /tmp/ccATuxCb.s 			page 341


 10180              		.loc 11 1095 21
 10181 00fa 4FF00003 		mov	r3, #0
 10182 00fe BB63     		str	r3, [r7, #56]	@ float
 10183 0100 07F13802 		add	r2, r7, #56
 10184 0104 07F13003 		add	r3, r7, #48
 10185 0108 1146     		mov	r1, r2
 10186 010a 1846     		mov	r0, r3
 10187 010c FFF7FEFF 		bl	_ZNSt8optionalIfEC1IfLb1EEEOT_
 10188              		.loc 11 1095 19
 10189 0110 07F11003 		add	r3, r7, #16
 10190 0114 07F13002 		add	r2, r7, #48
 10191 0118 92E80300 		ldm	r2, {r0, r1}
 10192 011c 83E80300 		stm	r3, {r0, r1}
 10193 0120 03E0     		b	.L452
 10194              	.L455:
1096:Src/motor.cpp ****         } else {
1097:Src/motor.cpp ****             set_error(control_law_status);
 10195              		.loc 11 1097 22
 10196 0122 796D     		ldr	r1, [r7, #84]
 10197 0124 7868     		ldr	r0, [r7, #4]
 10198 0126 FFF7FEFF 		bl	_ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE
 10199              	.L452:
 10200              	.LBE72:
1098:Src/motor.cpp ****         }
1099:Src/motor.cpp ****     }
1100:Src/motor.cpp **** 
1101:Src/motor.cpp ****     if (!is_armed_) {
 10201              		.loc 11 1101 10
 10202 012a 7B68     		ldr	r3, [r7, #4]
 10203 012c 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 10204              		.loc 11 1101 9
 10205 0130 83F00103 		eor	r3, r3, #1
 10206 0134 DBB2     		uxtb	r3, r3
 10207              		.loc 11 1101 5
 10208 0136 002B     		cmp	r3, #0
 10209 0138 13D0     		beq	.L456
1102:Src/motor.cpp ****         // If something above failed, reset I_bus to 0A.
1103:Src/motor.cpp ****         i_bus = 0.0f;
 10210              		.loc 11 1103 17
 10211 013a 4FF00003 		mov	r3, #0
 10212 013e 7B64     		str	r3, [r7, #68]	@ float
 10213 0140 07F14402 		add	r2, r7, #68
 10214 0144 07F13C03 		add	r3, r7, #60
 10215 0148 1146     		mov	r1, r2
 10216 014a 1846     		mov	r0, r3
 10217 014c FFF7FEFF 		bl	_ZNSt8optionalIfEC1IfLb1EEEOT_
 10218              		.loc 11 1103 15
 10219 0150 07F11003 		add	r3, r7, #16
 10220 0154 07F13C02 		add	r2, r7, #60
 10221 0158 92E80300 		ldm	r2, {r0, r1}
 10222 015c 83E80300 		stm	r3, {r0, r1}
 10223 0160 2CE0     		b	.L457
 10224              	.L456:
1104:Src/motor.cpp ****     } else if (is_armed_ && !i_bus.has_value()) {
 10225              		.loc 11 1104 16
 10226 0162 7B68     		ldr	r3, [r7, #4]
 10227 0164 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
ARM GAS  /tmp/ccATuxCb.s 			page 342


 10228              		.loc 11 1104 26
 10229 0168 002B     		cmp	r3, #0
 10230 016a 0CD0     		beq	.L458
 10231              		.loc 11 1104 45 discriminator 1
 10232 016c 07F11003 		add	r3, r7, #16
 10233 0170 1846     		mov	r0, r3
 10234 0172 FFF7FEFF 		bl	_ZNKSt8optionalIfE9has_valueEv
 10235 0176 0346     		mov	r3, r0
 10236              		.loc 11 1104 29 discriminator 1
 10237 0178 83F00103 		eor	r3, r3, #1
 10238 017c DBB2     		uxtb	r3, r3
 10239              		.loc 11 1104 26 discriminator 1
 10240 017e 002B     		cmp	r3, #0
 10241 0180 01D0     		beq	.L458
 10242              		.loc 11 1104 26 is_stmt 0 discriminator 3
 10243 0182 0123     		movs	r3, #1
 10244 0184 00E0     		b	.L459
 10245              	.L458:
 10246              		.loc 11 1104 26 discriminator 4
 10247 0186 0023     		movs	r3, #0
 10248              	.L459:
 10249              		.loc 11 1104 12 is_stmt 1 discriminator 6
 10250 0188 002B     		cmp	r3, #0
 10251 018a 17D0     		beq	.L457
1105:Src/motor.cpp ****         // If the motor is armed then i_bus must be known
1106:Src/motor.cpp ****         set_error(ODriveIntf::MotorIntf::ERROR_UNKNOWN_CURRENT_MEASUREMENT);
 10252              		.loc 11 1106 18
 10253 018c 4FF40031 		mov	r1, #131072
 10254 0190 7868     		ldr	r0, [r7, #4]
 10255 0192 FFF7FEFF 		bl	_ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE
1107:Src/motor.cpp ****         i_bus = 0.0f;
 10256              		.loc 11 1107 17
 10257 0196 4FF00003 		mov	r3, #0
 10258 019a 3B65     		str	r3, [r7, #80]	@ float
 10259 019c 07F15002 		add	r2, r7, #80
 10260 01a0 07F14803 		add	r3, r7, #72
 10261 01a4 1146     		mov	r1, r2
 10262 01a6 1846     		mov	r0, r3
 10263 01a8 FFF7FEFF 		bl	_ZNSt8optionalIfEC1IfLb1EEEOT_
 10264              		.loc 11 1107 15
 10265 01ac 07F11003 		add	r3, r7, #16
 10266 01b0 07F14802 		add	r2, r7, #72
 10267 01b4 92E80300 		ldm	r2, {r0, r1}
 10268 01b8 83E80300 		stm	r3, {r0, r1}
 10269              	.L457:
1108:Src/motor.cpp ****     }
1109:Src/motor.cpp **** 
1110:Src/motor.cpp ****     I_bus_ = *i_bus;
 10270              		.loc 11 1110 15
 10271 01bc 07F11003 		add	r3, r7, #16
 10272 01c0 1846     		mov	r0, r3
 10273 01c2 FFF7FEFF 		bl	_ZNRSt8optionalIfEdeEv
 10274 01c6 0346     		mov	r3, r0
 10275              		.loc 11 1110 14
 10276 01c8 1A68     		ldr	r2, [r3]	@ float
 10277              		.loc 11 1110 12
 10278 01ca 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccATuxCb.s 			page 343


 10279 01cc C3F8F022 		str	r2, [r3, #752]	@ float
1111:Src/motor.cpp **** 
1112:Src/motor.cpp ****     if (*i_bus < config_.I_bus_hard_min || *i_bus > config_.I_bus_hard_max) {
 10280              		.loc 11 1112 10
 10281 01d0 07F11003 		add	r3, r7, #16
 10282 01d4 1846     		mov	r0, r3
 10283 01d6 FFF7FEFF 		bl	_ZNRSt8optionalIfEdeEv
 10284 01da 0346     		mov	r3, r0
 10285              		.loc 11 1112 9
 10286 01dc 93ED007A 		vldr.32	s14, [r3]
 10287              		.loc 11 1112 18
 10288 01e0 7B68     		ldr	r3, [r7, #4]
 10289 01e2 5B68     		ldr	r3, [r3, #4]
 10290              		.loc 11 1112 26
 10291 01e4 03F22443 		addw	r3, r3, #1060
 10292 01e8 D3ED007A 		vldr.32	s15, [r3]
 10293              		.loc 11 1112 41
 10294 01ec B4EEE77A 		vcmpe.f32	s14, s15
 10295 01f0 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 10296 01f4 12D4     		bmi	.L460
 10297              		.loc 11 1112 45 discriminator 2
 10298 01f6 07F11003 		add	r3, r7, #16
 10299 01fa 1846     		mov	r0, r3
 10300 01fc FFF7FEFF 		bl	_ZNRSt8optionalIfEdeEv
 10301 0200 0346     		mov	r3, r0
 10302              		.loc 11 1112 44 discriminator 2
 10303 0202 93ED007A 		vldr.32	s14, [r3]
 10304              		.loc 11 1112 53 discriminator 2
 10305 0206 7B68     		ldr	r3, [r7, #4]
 10306 0208 5B68     		ldr	r3, [r3, #4]
 10307              		.loc 11 1112 61 discriminator 2
 10308 020a 03F58563 		add	r3, r3, #1064
 10309 020e D3ED007A 		vldr.32	s15, [r3]
 10310              		.loc 11 1112 41 discriminator 2
 10311 0212 B4EEE77A 		vcmpe.f32	s14, s15
 10312 0216 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 10313 021a 01DD     		ble	.L465
 10314              	.L460:
 10315              		.loc 11 1112 41 is_stmt 0 discriminator 3
 10316 021c 0123     		movs	r3, #1
 10317 021e 00E0     		b	.L463
 10318              	.L465:
 10319              		.loc 11 1112 41 discriminator 4
 10320 0220 0023     		movs	r3, #0
 10321              	.L463:
 10322              		.loc 11 1112 5 is_stmt 1 discriminator 6
 10323 0222 002B     		cmp	r3, #0
 10324 0224 04D0     		beq	.L464
1113:Src/motor.cpp ****         set_error(ODriveIntf::MotorIntf::ERROR_I_BUS_OUT_OF_RANGE);
 10325              		.loc 11 1113 18
 10326 0226 4FF00061 		mov	r1, #134217728
 10327 022a 7868     		ldr	r0, [r7, #4]
 10328 022c FFF7FEFF 		bl	_ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE
 10329              	.L464:
1072:Src/motor.cpp **** 
 10330              		.loc 11 1072 55
 10331 0230 07F12403 		add	r3, r7, #36
ARM GAS  /tmp/ccATuxCb.s 			page 344


 10332 0234 1846     		mov	r0, r3
 10333 0236 FFF7FEFF 		bl	_ZN16TaskTimerContextD1Ev
1114:Src/motor.cpp ****     }
1115:Src/motor.cpp **** 
1116:Src/motor.cpp **** 
1117:Src/motor.cpp **** }...
 10334              		.loc 11 1117 1
 10335 023a 00BF     		nop
 10336 023c 5C37     		adds	r7, r7, #92
 10337              	.LCFI673:
 10338              		.cfi_def_cfa_offset 12
 10339 023e BD46     		mov	sp, r7
 10340              	.LCFI674:
 10341              		.cfi_def_cfa_register 13
 10342              		@ sp needed
 10343 0240 90BD     		pop	{r4, r7, pc}
 10344              	.L467:
 10345 0242 00BF     		.align	2
 10346              	.L466:
 10347 0244 4C000000 		.word	.LC1
 10348 0248 00D08445 		.word	1166331904
 10349              		.cfi_endproc
 10350              	.LFE5029:
 10352              		.section	.text._ZNSt4pairIffEC2IffLb1EEEOT_OT0_,"axG",%progbits,_ZNSt4pairIffEC5IffLb1EEEOT_OT0_,c
 10353              		.align	1
 10354              		.weak	_ZNSt4pairIffEC2IffLb1EEEOT_OT0_
 10355              		.syntax unified
 10356              		.thumb
 10357              		.thumb_func
 10358              		.fpu fpv4-sp-d16
 10360              	_ZNSt4pairIffEC2IffLb1EEEOT_OT0_:
 10361              	.LFB5087:
 10362              		.file 18 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
ARM GAS  /tmp/ccATuxCb.s 			page 345


  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** /*
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  */
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  */
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** # include <type_traits> // for std::__decay_and_strip, std::is_reference_v
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus > 201703L
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** # include <compare>
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** # define __cpp_lib_constexpr_utility 201811L
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** {
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /**
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @addtogroup utilities
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @{
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    */
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// Tag type for piecewise construction of std::pair objects.
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   struct piecewise_construct_t { explicit piecewise_construct_t() = default; };
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
ARM GAS  /tmp/ccATuxCb.s 			page 346


  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// Tag for piecewise construction of std::pair objects.
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     piecewise_construct_t();
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// @cond undocumented
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // Forward declarations.
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<typename...>
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     class tuple;
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<std::size_t...>
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct _Index_tuple;
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // Concept utility functions, reused in conditionally-explicit
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // constructors.
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // See PR 70437, don't look at is_constructible or
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // is_convertible if the types are the same to
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // avoid querying those properties for incomplete types.
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template <bool, typename _T1, typename _T2>
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct _PCC
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     {
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&>>::value;
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_convertible<const _U1&, _T1>,
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_convertible<const _U2&, _T2>>::value;
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>>::value;
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_convertible<_U1&&, _T1>,
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_convertible<_U2&&, _T2>>::value;
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _CopyMovePair()
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<const _U1&, _T1>,
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				  is_convertible<_U2&&, _T2>>;
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __do_converts,
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
ARM GAS  /tmp/ccATuxCb.s 			page 347


 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>,
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      __converts
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      >::value;
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _MoveCopyPair()
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<_U1&&, _T1>,
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				  is_convertible<const _U2&, _T2>>;
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __do_converts,
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&&>,
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      __converts
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      >::value;
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   };
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template <typename _T1, typename _T2>
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct _PCC<false, _T1, _T2>
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     {
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   };
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif // C++11
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<typename _U1, typename _U2> class __pair_base
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   {
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     template<typename _T1, typename _T2> friend struct pair;
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     __pair_base() = default;
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     ~__pair_base() = default;
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     __pair_base(const __pair_base&) = default;
ARM GAS  /tmp/ccATuxCb.s 			page 348


 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     __pair_base& operator=(const __pair_base&) = delete;
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif // C++11
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   };
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// @endcond
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  /**
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    */
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct pair
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     : private __pair_base<_T1, _T2>
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     {
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       typedef _T1 first_type;    ///< The type of the `first` member
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       typedef _T2 second_type;   ///< The type of the `second` member
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _T1 first;                 ///< The first member
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _T2 second;                ///< The second member
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // 265.  std::pair::pair() effects overly restrictive
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /** The default constructor creates @c first and @c second using their
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        *  respective default constructors.  */
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename _U2 = _T2,
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U1>,
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U2>>
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                    ::value, bool>::type = true>
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _GLIBCXX_CONSTEXPR pair()
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(), second() { }
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename _U2 = _T2,
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                        is_default_constructible<_U1>,
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                        is_default_constructible<_U2>,
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                        __not_<
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          __and_<__is_implicitly_default_constructible<_U1>,
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                 __is_implicitly_default_constructible<_U2>>>>
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                    ::value, bool>::type = false>
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       explicit constexpr pair()
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(), second() { }
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// Two objects may be passed to a @c pair constructor to be copied.
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       pair(const _T1& __a, const _T2& __b)
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
ARM GAS  /tmp/ccATuxCb.s 			page 349


 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #else
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that don't take pairs.
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @cond undocumented
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       using _PCCP = _PCC<true, _T1, _T2>;
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @endcond
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// Construct from two const lvalues, allowing implicit conversions.
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1 = _T1, typename _U2=_T2, typename
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	                 && _PCCP::template
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       constexpr pair(const _T1& __a, const _T2& __b)
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// Construct from two const lvalues, disallowing implicit conversions.
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        template<typename _U1 = _T1, typename _U2=_T2, typename
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		enable_if<_PCCP::template
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    _ConstructiblePair<_U1, _U2>()
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	                  && !_PCCP::template
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    _ImplicitlyConvertiblePair<_U1, _U2>(),
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       explicit constexpr pair(const _T1& __a, const _T2& __b)
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// There is also a templated constructor to convert from other pairs.
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2>
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	pair(const pair<_U1, _U2>& __p)
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #else
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that take pairs.
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @cond undocumented
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         using _PCCFP = _PCC<!is_same<_T1, _U1>::value
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    || !is_same<_T2, _U2>::value,
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    _T1, _T2>;
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @endcond
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	                 && _PCCFP<_U1, _U2>::template
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  bool>::type=true>
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         constexpr pair(const pair<_U1, _U2>& __p)
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         : first(__p.first), second(__p.second) { }
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			 && !_PCCFP<_U1, _U2>::template
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	explicit constexpr pair(const pair<_U1, _U2>& __p)
ARM GAS  /tmp/ccATuxCb.s 			page 350


 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       constexpr pair(const pair&) = default;	///< Copy constructor
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       constexpr pair(pair&&) = default;		///< Move constructor
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // DR 811.
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveCopyPair<true, _U1, _T2>(),
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        constexpr pair(_U1&& __x, const _T2& __y)
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveCopyPair<false, _U1, _T2>(),
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        explicit constexpr pair(_U1&& __x, const _T2& __y)
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U2, typename
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _CopyMovePair<true, _T1, _U2>(),
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        constexpr pair(const _T1& __x, _U2&& __y)
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U2, typename
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _CopyMovePair<false, _T1, _U2>(),
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        explicit pair(const _T1& __x, _U2&& __y)
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && _PCCP::template
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	constexpr pair(_U1&& __x, _U2&& __y)
 10363              		.loc 18 352 12
 10364              		.cfi_startproc
 10365              		@ args = 0, pretend = 0, frame = 16
 10366              		@ frame_needed = 1, uses_anonymous_args = 0
 10367 0000 80B5     		push	{r7, lr}
 10368              	.LCFI675:
 10369              		.cfi_def_cfa_offset 8
 10370              		.cfi_offset 7, -8
 10371              		.cfi_offset 14, -4
 10372 0002 84B0     		sub	sp, sp, #16
 10373              	.LCFI676:
 10374              		.cfi_def_cfa_offset 24
 10375 0004 00AF     		add	r7, sp, #0
 10376              	.LCFI677:
ARM GAS  /tmp/ccATuxCb.s 			page 351


 10377              		.cfi_def_cfa_register 7
 10378 0006 F860     		str	r0, [r7, #12]
 10379 0008 B960     		str	r1, [r7, #8]
 10380 000a 7A60     		str	r2, [r7, #4]
 10381              	.LBB74:
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 10382              		.loc 18 353 27
 10383 000c B868     		ldr	r0, [r7, #8]
 10384 000e FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 10385 0012 0346     		mov	r3, r0
 10386              		.loc 18 353 64
 10387 0014 1A68     		ldr	r2, [r3]	@ float
 10388 0016 FB68     		ldr	r3, [r7, #12]
 10389 0018 1A60     		str	r2, [r3]	@ float
 10390              		.loc 18 353 59
 10391 001a 7868     		ldr	r0, [r7, #4]
 10392 001c FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 10393 0020 0346     		mov	r3, r0
 10394              		.loc 18 353 64
 10395 0022 1A68     		ldr	r2, [r3]	@ float
 10396 0024 FB68     		ldr	r3, [r7, #12]
 10397 0026 5A60     		str	r2, [r3, #4]	@ float
 10398              	.LBE74:
 10399              		.loc 18 353 68
 10400 0028 FB68     		ldr	r3, [r7, #12]
 10401 002a 1846     		mov	r0, r3
 10402 002c 1037     		adds	r7, r7, #16
 10403              	.LCFI678:
 10404              		.cfi_def_cfa_offset 8
 10405 002e BD46     		mov	sp, r7
 10406              	.LCFI679:
 10407              		.cfi_def_cfa_register 13
 10408              		@ sp needed
 10409 0030 80BD     		pop	{r7, pc}
 10410              		.cfi_endproc
 10411              	.LFE5087:
 10413              		.weak	_ZNSt4pairIffEC1IffLb1EEEOT_OT0_
 10414              		.thumb_set _ZNSt4pairIffEC1IffLb1EEEOT_OT0_,_ZNSt4pairIffEC2IffLb1EEEOT_OT0_
 10415              		.section	.text._ZN10OutputPortISt4pairIffEEC2ES1_,"axG",%progbits,_ZN10OutputPortISt4pairIffEEC5ES
 10416              		.align	1
 10417              		.weak	_ZN10OutputPortISt4pairIffEEC2ES1_
 10418              		.syntax unified
 10419              		.thumb
 10420              		.thumb_func
 10421              		.fpu fpv4-sp-d16
 10423              	_ZN10OutputPortISt4pairIffEEC2ES1_:
 10424              	.LFB5090:
  47:Inc/component.hpp ****     
 10425              		.loc 15 47 5
 10426              		.cfi_startproc
 10427              		@ args = 0, pretend = 0, frame = 16
 10428              		@ frame_needed = 1, uses_anonymous_args = 0
 10429              		@ link register save eliminated.
 10430 0000 80B4     		push	{r7}
 10431              	.LCFI680:
 10432              		.cfi_def_cfa_offset 4
 10433              		.cfi_offset 7, -4
ARM GAS  /tmp/ccATuxCb.s 			page 352


 10434 0002 85B0     		sub	sp, sp, #20
 10435              	.LCFI681:
 10436              		.cfi_def_cfa_offset 24
 10437 0004 00AF     		add	r7, sp, #0
 10438              	.LCFI682:
 10439              		.cfi_def_cfa_register 7
 10440 0006 F860     		str	r0, [r7, #12]
 10441 0008 B0EE407A 		vmov.f32	s14, s0
 10442 000c F0EE607A 		vmov.f32	s15, s1
 10443 0010 87ED017A 		vstr.32	s14, [r7, #4]
 10444 0014 C7ED027A 		vstr.32	s15, [r7, #8]
 10445              	.LBB75:
  47:Inc/component.hpp ****     
 10446              		.loc 15 47 37
 10447 0018 FB68     		ldr	r3, [r7, #12]
 10448 001a 0222     		movs	r2, #2
 10449 001c 1A60     		str	r2, [r3]
 10450 001e FB68     		ldr	r3, [r7, #12]
 10451 0020 0433     		adds	r3, r3, #4
 10452 0022 3A1D     		adds	r2, r7, #4
 10453 0024 92E80300 		ldm	r2, {r0, r1}
 10454 0028 83E80300 		stm	r3, {r0, r1}
 10455              	.LBE75:
  47:Inc/component.hpp ****     
 10456              		.loc 15 47 40
 10457 002c FB68     		ldr	r3, [r7, #12]
 10458 002e 1846     		mov	r0, r3
 10459 0030 1437     		adds	r7, r7, #20
 10460              	.LCFI683:
 10461              		.cfi_def_cfa_offset 4
 10462 0032 BD46     		mov	sp, r7
 10463              	.LCFI684:
 10464              		.cfi_def_cfa_register 13
 10465              		@ sp needed
 10466 0034 5DF8047B 		ldr	r7, [sp], #4
 10467              	.LCFI685:
 10468              		.cfi_restore 7
 10469              		.cfi_def_cfa_offset 0
 10470 0038 7047     		bx	lr
 10471              		.cfi_endproc
 10472              	.LFE5090:
 10474              		.weak	_ZN10OutputPortISt4pairIffEEC1ES1_
 10475              		.thumb_set _ZN10OutputPortISt4pairIffEEC1ES1_,_ZN10OutputPortISt4pairIffEEC2ES1_
 10476              		.section	.text._ZSt3maxImERKT_S2_S2_,"axG",%progbits,_ZSt3maxImERKT_S2_S2_,comdat
 10477              		.align	1
 10478              		.weak	_ZSt3maxImERKT_S2_S2_
 10479              		.syntax unified
 10480              		.thumb
 10481              		.thumb_func
 10482              		.fpu fpv4-sp-d16
 10484              	_ZSt3maxImERKT_S2_S2_:
 10485              	.LFB5092:
 10486              		.file 19 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** //
ARM GAS  /tmp/ccATuxCb.s 			page 353


   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** /*
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  */
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  */
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
ARM GAS  /tmp/ccATuxCb.s 			page 354


  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** # include <type_traits>
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** # include <compare>
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** {
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /*
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    */
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline int
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return 0;
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       else
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __iter_swap
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static void
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
ARM GAS  /tmp/ccATuxCb.s 			page 355


 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<>
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static void
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif // C++03
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline void
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
ARM GAS  /tmp/ccATuxCb.s 			page 356


 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #else
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __first2;
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Tp>
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline const _Tp&
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
ARM GAS  /tmp/ccATuxCb.s 			page 357


 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       if (__b < __a)
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __a;
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  preprocessor macro.
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Tp>
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline const _Tp&
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 10487              		.loc 19 254 5
 10488              		.cfi_startproc
 10489              		@ args = 0, pretend = 0, frame = 8
 10490              		@ frame_needed = 1, uses_anonymous_args = 0
 10491              		@ link register save eliminated.
 10492 0000 80B4     		push	{r7}
 10493              	.LCFI686:
 10494              		.cfi_def_cfa_offset 4
 10495              		.cfi_offset 7, -4
 10496 0002 83B0     		sub	sp, sp, #12
 10497              	.LCFI687:
 10498              		.cfi_def_cfa_offset 16
 10499 0004 00AF     		add	r7, sp, #0
 10500              	.LCFI688:
 10501              		.cfi_def_cfa_register 7
 10502 0006 7860     		str	r0, [r7, #4]
 10503 0008 3960     		str	r1, [r7]
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       if (__a < __b)
 10504              		.loc 19 259 15
 10505 000a 7B68     		ldr	r3, [r7, #4]
 10506 000c 1A68     		ldr	r2, [r3]
 10507 000e 3B68     		ldr	r3, [r7]
 10508 0010 1B68     		ldr	r3, [r3]
 10509              		.loc 19 259 7
 10510 0012 9A42     		cmp	r2, r3
 10511 0014 01D2     		bcs	.L473
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 10512              		.loc 19 260 9
 10513 0016 3B68     		ldr	r3, [r7]
 10514 0018 00E0     		b	.L474
 10515              	.L473:
ARM GAS  /tmp/ccATuxCb.s 			page 358


 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __a;
 10516              		.loc 19 261 14
 10517 001a 7B68     		ldr	r3, [r7, #4]
 10518              	.L474:
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 10519              		.loc 19 262 5
 10520 001c 1846     		mov	r0, r3
 10521 001e 0C37     		adds	r7, r7, #12
 10522              	.LCFI689:
 10523              		.cfi_def_cfa_offset 4
 10524 0020 BD46     		mov	sp, r7
 10525              	.LCFI690:
 10526              		.cfi_def_cfa_register 13
 10527              		@ sp needed
 10528 0022 5DF8047B 		ldr	r7, [sp], #4
 10529              	.LCFI691:
 10530              		.cfi_restore 7
 10531              		.cfi_def_cfa_offset 0
 10532 0026 7047     		bx	lr
 10533              		.cfi_endproc
 10534              	.LFE5092:
 10536              		.section	.text._ZNSt8optionalIfEaSESt9nullopt_t,"axG",%progbits,_ZNSt8optionalIfEaSESt9nullopt_t,c
 10537              		.align	1
 10538              		.weak	_ZNSt8optionalIfEaSESt9nullopt_t
 10539              		.syntax unified
 10540              		.thumb
 10541              		.thumb_func
 10542              		.fpu fpv4-sp-d16
 10544              	_ZNSt8optionalIfEaSESt9nullopt_t:
 10545              	.LFB5097:
 776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 10546              		.loc 12 776 7
 10547              		.cfi_startproc
 10548              		@ args = 0, pretend = 0, frame = 8
 10549              		@ frame_needed = 1, uses_anonymous_args = 0
 10550 0000 80B5     		push	{r7, lr}
 10551              	.LCFI692:
 10552              		.cfi_def_cfa_offset 8
 10553              		.cfi_offset 7, -8
 10554              		.cfi_offset 14, -4
 10555 0002 82B0     		sub	sp, sp, #8
 10556              	.LCFI693:
 10557              		.cfi_def_cfa_offset 16
 10558 0004 00AF     		add	r7, sp, #0
 10559              	.LCFI694:
 10560              		.cfi_def_cfa_register 7
 10561 0006 7860     		str	r0, [r7, #4]
 10562 0008 3970     		strb	r1, [r7]
 778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 10563              		.loc 12 778 16
 10564 000a 7868     		ldr	r0, [r7, #4]
 10565 000c FFF7FEFF 		bl	_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE8_M_resetEv
 779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 10566              		.loc 12 779 10
 10567 0010 7B68     		ldr	r3, [r7, #4]
 780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 10568              		.loc 12 780 7
ARM GAS  /tmp/ccATuxCb.s 			page 359


 10569 0012 1846     		mov	r0, r3
 10570 0014 0837     		adds	r7, r7, #8
 10571              	.LCFI695:
 10572              		.cfi_def_cfa_offset 8
 10573 0016 BD46     		mov	sp, r7
 10574              	.LCFI696:
 10575              		.cfi_def_cfa_register 13
 10576              		@ sp needed
 10577 0018 80BD     		pop	{r7, pc}
 10578              		.cfi_endproc
 10579              	.LFE5097:
 10581              		.section	.text._ZNSt4pairIffEC2IRffLb1EEEOT_OT0_,"axG",%progbits,_ZNSt4pairIffEC5IRffLb1EEEOT_OT0_
 10582              		.align	1
 10583              		.weak	_ZNSt4pairIffEC2IRffLb1EEEOT_OT0_
 10584              		.syntax unified
 10585              		.thumb
 10586              		.thumb_func
 10587              		.fpu fpv4-sp-d16
 10589              	_ZNSt4pairIffEC2IRffLb1EEEOT_OT0_:
 10590              	.LFB5099:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 10591              		.loc 18 352 12
 10592              		.cfi_startproc
 10593              		@ args = 0, pretend = 0, frame = 16
 10594              		@ frame_needed = 1, uses_anonymous_args = 0
 10595 0000 80B5     		push	{r7, lr}
 10596              	.LCFI697:
 10597              		.cfi_def_cfa_offset 8
 10598              		.cfi_offset 7, -8
 10599              		.cfi_offset 14, -4
 10600 0002 84B0     		sub	sp, sp, #16
 10601              	.LCFI698:
 10602              		.cfi_def_cfa_offset 24
 10603 0004 00AF     		add	r7, sp, #0
 10604              	.LCFI699:
 10605              		.cfi_def_cfa_register 7
 10606 0006 F860     		str	r0, [r7, #12]
 10607 0008 B960     		str	r1, [r7, #8]
 10608 000a 7A60     		str	r2, [r7, #4]
 10609              	.LBB76:
 10610              		.loc 18 353 27
 10611 000c B868     		ldr	r0, [r7, #8]
 10612 000e FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 10613 0012 0346     		mov	r3, r0
 10614              		.loc 18 353 64
 10615 0014 1A68     		ldr	r2, [r3]	@ float
 10616 0016 FB68     		ldr	r3, [r7, #12]
 10617 0018 1A60     		str	r2, [r3]	@ float
 10618              		.loc 18 353 59
 10619 001a 7868     		ldr	r0, [r7, #4]
 10620 001c FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 10621 0020 0346     		mov	r3, r0
 10622              		.loc 18 353 64
 10623 0022 1A68     		ldr	r2, [r3]	@ float
 10624 0024 FB68     		ldr	r3, [r7, #12]
 10625 0026 5A60     		str	r2, [r3, #4]	@ float
 10626              	.LBE76:
ARM GAS  /tmp/ccATuxCb.s 			page 360


 10627              		.loc 18 353 68
 10628 0028 FB68     		ldr	r3, [r7, #12]
 10629 002a 1846     		mov	r0, r3
 10630 002c 1037     		adds	r7, r7, #16
 10631              	.LCFI700:
 10632              		.cfi_def_cfa_offset 8
 10633 002e BD46     		mov	sp, r7
 10634              	.LCFI701:
 10635              		.cfi_def_cfa_register 13
 10636              		@ sp needed
 10637 0030 80BD     		pop	{r7, pc}
 10638              		.cfi_endproc
 10639              	.LFE5099:
 10641              		.weak	_ZNSt4pairIffEC1IRffLb1EEEOT_OT0_
 10642              		.thumb_set _ZNSt4pairIffEC1IRffLb1EEEOT_OT0_,_ZNSt4pairIffEC2IRffLb1EEEOT_OT0_
 10643              		.section	.text._ZNSt8optionalISt4pairIffEEaSIS1_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS2_
 10644              		.align	1
 10645              		.weak	_ZNSt8optionalISt4pairIffEEaSIS1_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS2_NSt9remov
 10646              		.syntax unified
 10647              		.thumb
 10648              		.thumb_func
 10649              		.fpu fpv4-sp-d16
 10651              	_ZNSt8optionalISt4pairIffEEaSIS1_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS2_NSt9remove_cvINS
 10652              	.LFB5101:
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 10653              		.loc 12 789 2
 10654              		.cfi_startproc
 10655              		@ args = 0, pretend = 0, frame = 8
 10656              		@ frame_needed = 1, uses_anonymous_args = 0
 10657 0000 90B5     		push	{r4, r7, lr}
 10658              	.LCFI702:
 10659              		.cfi_def_cfa_offset 12
 10660              		.cfi_offset 4, -12
 10661              		.cfi_offset 7, -8
 10662              		.cfi_offset 14, -4
 10663 0002 83B0     		sub	sp, sp, #12
 10664              	.LCFI703:
 10665              		.cfi_def_cfa_offset 24
 10666 0004 00AF     		add	r7, sp, #0
 10667              	.LCFI704:
 10668              		.cfi_def_cfa_register 7
 10669 0006 7860     		str	r0, [r7, #4]
 10670 0008 3960     		str	r1, [r7]
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 10671              		.loc 12 791 27
 10672 000a 7868     		ldr	r0, [r7, #4]
 10673 000c FFF7FEFF 		bl	_ZNKSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv
 10674 0010 0346     		mov	r3, r0
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 10675              		.loc 12 791 4
 10676 0012 002B     		cmp	r3, #0
 10677 0014 0CD0     		beq	.L480
 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 10678              		.loc 12 792 40
 10679 0016 3868     		ldr	r0, [r7]
 10680 0018 FFF7FEFF 		bl	_ZSt7forwardISt4pairIffEEOT_RNSt16remove_referenceIS2_E4typeE
 10681 001c 0446     		mov	r4, r0
ARM GAS  /tmp/ccATuxCb.s 			page 361


 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 10682              		.loc 12 792 18
 10683 001e 7868     		ldr	r0, [r7, #4]
 10684 0020 FFF7FEFF 		bl	_ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv
 10685 0024 0346     		mov	r3, r0
 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 10686              		.loc 12 792 21
 10687 0026 2146     		mov	r1, r4
 10688 0028 1846     		mov	r0, r3
 10689 002a FFF7FEFF 		bl	_ZNSt4pairIffEaSEOS0_
 10690 002e 07E0     		b	.L481
 10691              	.L480:
 794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 10692              		.loc 12 794 24
 10693 0030 3868     		ldr	r0, [r7]
 10694 0032 FFF7FEFF 		bl	_ZSt7forwardISt4pairIffEEOT_RNSt16remove_referenceIS2_E4typeE
 10695 0036 0346     		mov	r3, r0
 10696 0038 1946     		mov	r1, r3
 10697 003a 7868     		ldr	r0, [r7, #4]
 10698 003c FFF7FEFF 		bl	_ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE12_M_constructIJS1_EEEvDp
 10699              	.L481:
 796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 10700              		.loc 12 796 12
 10701 0040 7B68     		ldr	r3, [r7, #4]
 797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 10702              		.loc 12 797 2
 10703 0042 1846     		mov	r0, r3
 10704 0044 0C37     		adds	r7, r7, #12
 10705              	.LCFI705:
 10706              		.cfi_def_cfa_offset 12
 10707 0046 BD46     		mov	sp, r7
 10708              	.LCFI706:
 10709              		.cfi_def_cfa_register 13
 10710              		@ sp needed
 10711 0048 90BD     		pop	{r4, r7, pc}
 10712              		.cfi_endproc
 10713              	.LFE5101:
 10715              		.section	.text._ZNSt4pairIffEC2IffLb1EEEv,"axG",%progbits,_ZNSt4pairIffEC5IffLb1EEEv,comdat
 10716              		.align	1
 10717              		.weak	_ZNSt4pairIffEC2IffLb1EEEv
 10718              		.syntax unified
 10719              		.thumb
 10720              		.thumb_func
 10721              		.fpu fpv4-sp-d16
 10723              	_ZNSt4pairIffEC2IffLb1EEEv:
 10724              	.LFB5103:
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(), second() { }
 10725              		.loc 18 232 26
 10726              		.cfi_startproc
 10727              		@ args = 0, pretend = 0, frame = 8
 10728              		@ frame_needed = 1, uses_anonymous_args = 0
 10729              		@ link register save eliminated.
 10730 0000 80B4     		push	{r7}
 10731              	.LCFI707:
 10732              		.cfi_def_cfa_offset 4
 10733              		.cfi_offset 7, -4
 10734 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccATuxCb.s 			page 362


 10735              	.LCFI708:
 10736              		.cfi_def_cfa_offset 16
 10737 0004 00AF     		add	r7, sp, #0
 10738              	.LCFI709:
 10739              		.cfi_def_cfa_register 7
 10740 0006 7860     		str	r0, [r7, #4]
 10741              	.LBB77:
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 10742              		.loc 18 233 25
 10743 0008 7B68     		ldr	r3, [r7, #4]
 10744 000a 4FF00002 		mov	r2, #0
 10745 000e 1A60     		str	r2, [r3]	@ float
 10746 0010 7B68     		ldr	r3, [r7, #4]
 10747 0012 4FF00002 		mov	r2, #0
 10748 0016 5A60     		str	r2, [r3, #4]	@ float
 10749              	.LBE77:
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 10750              		.loc 18 233 29
 10751 0018 7B68     		ldr	r3, [r7, #4]
 10752 001a 1846     		mov	r0, r3
 10753 001c 0C37     		adds	r7, r7, #12
 10754              	.LCFI710:
 10755              		.cfi_def_cfa_offset 4
 10756 001e BD46     		mov	sp, r7
 10757              	.LCFI711:
 10758              		.cfi_def_cfa_register 13
 10759              		@ sp needed
 10760 0020 5DF8047B 		ldr	r7, [sp], #4
 10761              	.LCFI712:
 10762              		.cfi_restore 7
 10763              		.cfi_def_cfa_offset 0
 10764 0024 7047     		bx	lr
 10765              		.cfi_endproc
 10766              	.LFE5103:
 10768              		.weak	_ZNSt4pairIffEC1IffLb1EEEv
 10769              		.thumb_set _ZNSt4pairIffEC1IffLb1EEEv,_ZNSt4pairIffEC2IffLb1EEEv
 10770              		.section	.text._ZNSt4pairIffEC2IRfS2_Lb1EEEOT_OT0_,"axG",%progbits,_ZNSt4pairIffEC5IRfS2_Lb1EEEOT_
 10771              		.align	1
 10772              		.weak	_ZNSt4pairIffEC2IRfS2_Lb1EEEOT_OT0_
 10773              		.syntax unified
 10774              		.thumb
 10775              		.thumb_func
 10776              		.fpu fpv4-sp-d16
 10778              	_ZNSt4pairIffEC2IRfS2_Lb1EEEOT_OT0_:
 10779              	.LFB5106:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 10780              		.loc 18 352 12
 10781              		.cfi_startproc
 10782              		@ args = 0, pretend = 0, frame = 16
 10783              		@ frame_needed = 1, uses_anonymous_args = 0
 10784 0000 80B5     		push	{r7, lr}
 10785              	.LCFI713:
 10786              		.cfi_def_cfa_offset 8
 10787              		.cfi_offset 7, -8
 10788              		.cfi_offset 14, -4
 10789 0002 84B0     		sub	sp, sp, #16
 10790              	.LCFI714:
ARM GAS  /tmp/ccATuxCb.s 			page 363


 10791              		.cfi_def_cfa_offset 24
 10792 0004 00AF     		add	r7, sp, #0
 10793              	.LCFI715:
 10794              		.cfi_def_cfa_register 7
 10795 0006 F860     		str	r0, [r7, #12]
 10796 0008 B960     		str	r1, [r7, #8]
 10797 000a 7A60     		str	r2, [r7, #4]
 10798              	.LBB78:
 10799              		.loc 18 353 27
 10800 000c B868     		ldr	r0, [r7, #8]
 10801 000e FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 10802 0012 0346     		mov	r3, r0
 10803              		.loc 18 353 64
 10804 0014 1A68     		ldr	r2, [r3]	@ float
 10805 0016 FB68     		ldr	r3, [r7, #12]
 10806 0018 1A60     		str	r2, [r3]	@ float
 10807              		.loc 18 353 59
 10808 001a 7868     		ldr	r0, [r7, #4]
 10809 001c FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 10810 0020 0346     		mov	r3, r0
 10811              		.loc 18 353 64
 10812 0022 1A68     		ldr	r2, [r3]	@ float
 10813 0024 FB68     		ldr	r3, [r7, #12]
 10814 0026 5A60     		str	r2, [r3, #4]	@ float
 10815              	.LBE78:
 10816              		.loc 18 353 68
 10817 0028 FB68     		ldr	r3, [r7, #12]
 10818 002a 1846     		mov	r0, r3
 10819 002c 1037     		adds	r7, r7, #16
 10820              	.LCFI716:
 10821              		.cfi_def_cfa_offset 8
 10822 002e BD46     		mov	sp, r7
 10823              	.LCFI717:
 10824              		.cfi_def_cfa_register 13
 10825              		@ sp needed
 10826 0030 80BD     		pop	{r7, pc}
 10827              		.cfi_endproc
 10828              	.LFE5106:
 10830              		.weak	_ZNSt4pairIffEC1IRfS2_Lb1EEEOT_OT0_
 10831              		.thumb_set _ZNSt4pairIffEC1IRfS2_Lb1EEEOT_OT0_,_ZNSt4pairIffEC2IRfS2_Lb1EEEOT_OT0_
 10832              		.section	.text._ZSt3minIfERKT_S2_S2_,"axG",%progbits,_ZSt3minIfERKT_S2_S2_,comdat
 10833              		.align	1
 10834              		.weak	_ZSt3minIfERKT_S2_S2_
 10835              		.syntax unified
 10836              		.thumb
 10837              		.thumb_func
 10838              		.fpu fpv4-sp-d16
 10840              	_ZSt3minIfERKT_S2_S2_:
 10841              	.LFB5108:
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 10842              		.loc 19 230 5
 10843              		.cfi_startproc
 10844              		@ args = 0, pretend = 0, frame = 8
 10845              		@ frame_needed = 1, uses_anonymous_args = 0
 10846              		@ link register save eliminated.
 10847 0000 80B4     		push	{r7}
 10848              	.LCFI718:
ARM GAS  /tmp/ccATuxCb.s 			page 364


 10849              		.cfi_def_cfa_offset 4
 10850              		.cfi_offset 7, -4
 10851 0002 83B0     		sub	sp, sp, #12
 10852              	.LCFI719:
 10853              		.cfi_def_cfa_offset 16
 10854 0004 00AF     		add	r7, sp, #0
 10855              	.LCFI720:
 10856              		.cfi_def_cfa_register 7
 10857 0006 7860     		str	r0, [r7, #4]
 10858 0008 3960     		str	r1, [r7]
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 10859              		.loc 19 235 15
 10860 000a 3B68     		ldr	r3, [r7]
 10861 000c 93ED007A 		vldr.32	s14, [r3]
 10862 0010 7B68     		ldr	r3, [r7, #4]
 10863 0012 D3ED007A 		vldr.32	s15, [r3]
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 10864              		.loc 19 235 7
 10865 0016 B4EEE77A 		vcmpe.f32	s14, s15
 10866 001a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 10867 001e 01D5     		bpl	.L492
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __a;
 10868              		.loc 19 236 9
 10869 0020 3B68     		ldr	r3, [r7]
 10870 0022 00E0     		b	.L490
 10871              	.L492:
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 10872              		.loc 19 237 14
 10873 0024 7B68     		ldr	r3, [r7, #4]
 10874              	.L490:
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 10875              		.loc 19 238 5
 10876 0026 1846     		mov	r0, r3
 10877 0028 0C37     		adds	r7, r7, #12
 10878              	.LCFI721:
 10879              		.cfi_def_cfa_offset 4
 10880 002a BD46     		mov	sp, r7
 10881              	.LCFI722:
 10882              		.cfi_def_cfa_register 13
 10883              		@ sp needed
 10884 002c 5DF8047B 		ldr	r7, [sp], #4
 10885              	.LCFI723:
 10886              		.cfi_restore 7
 10887              		.cfi_def_cfa_offset 0
 10888 0030 7047     		bx	lr
 10889              		.cfi_endproc
 10890              	.LFE5108:
 10892              		.section	.text._ZNSt5arrayIP14CurrentLimiterLj2EE5beginEv,"axG",%progbits,_ZNSt5arrayIP14CurrentLi
 10893              		.align	1
 10894              		.weak	_ZNSt5arrayIP14CurrentLimiterLj2EE5beginEv
 10895              		.syntax unified
 10896              		.thumb
 10897              		.thumb_func
 10898              		.fpu fpv4-sp-d16
 10900              	_ZNSt5arrayIP14CurrentLimiterLj2EE5beginEv:
 10901              	.LFB5109:
 10902              		.file 20 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array"
ARM GAS  /tmp/ccATuxCb.s 			page 365


   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // <array> -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // Copyright (C) 2007-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** /** @file include/array
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****  *  This is a Standard C++ Library header.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****  */
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #ifndef _GLIBCXX_ARRAY
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #define _GLIBCXX_ARRAY 1
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #pragma GCC system_header
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #if __cplusplus < 201103L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** # include <bits/c++0x_warning.h>
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #else
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #include <utility>
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #include <bits/functexcept.h>
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #include <bits/stl_algobase.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #include <bits/range_access.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** namespace std _GLIBCXX_VISIBILITY(default)
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** {
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****   template<typename _Tp, std::size_t _Nm>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****     struct __array_traits
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****     {
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef _Tp _Type[_Nm];
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef __is_swappable<_Tp> _Is_swappable;
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       static constexpr _Tp&
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _S_ref(const _Type& __t, std::size_t __n) noexcept
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_cast<_Tp&>(__t[__n]); }
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
ARM GAS  /tmp/ccATuxCb.s 			page 366


  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       static constexpr _Tp*
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _S_ptr(const _Type& __t) noexcept
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_cast<_Tp*>(__t); }
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****     };
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****  template<typename _Tp>
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    struct __array_traits<_Tp, 0>
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    {
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      struct _Type { };
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      typedef true_type _Is_swappable;
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      typedef true_type _Is_nothrow_swappable;
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      static constexpr _Tp&
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      _S_ref(const _Type&, std::size_t) noexcept
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      { return *static_cast<_Tp*>(nullptr); }
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      static constexpr _Tp*
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      _S_ptr(const _Type&) noexcept
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      { return nullptr; }
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    };
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****   /**
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  @brief A standard container for storing a fixed size sequence of elements.
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  @ingroup sequences
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  <a href="tables.html#66">reversible container</a>, and a
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  <a href="tables.html#67">sequence</a>.
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  Sets support random access iterators.
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  @tparam  Tp  Type of element. Required to be a complete type.
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  @tparam  Nm  Number of elements.
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****   */
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****   template<typename _Tp, std::size_t _Nm>
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****     struct array
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****     {
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef _Tp 	    			      value_type;
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef value_type*			      pointer;
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef const value_type*                       const_pointer;
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef value_type&                   	      reference;
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef const value_type&             	      const_reference;
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef value_type*          		      iterator;
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef const value_type*			      const_iterator;
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef std::size_t                    	      size_type;
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef std::ptrdiff_t                   	      difference_type;
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef std::reverse_iterator<iterator>	      reverse_iterator;
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef std::reverse_iterator<const_iterator>   const_reverse_iterator;
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       // Support for zero-sized arrays mandatory.
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef _GLIBCXX_STD_C::__array_traits<_Tp, _Nm> _AT_Type;
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typename _AT_Type::_Type                         _M_elems;
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       // No explicit construct/copy/destroy for aggregate type.
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       // DR 776.
ARM GAS  /tmp/ccATuxCb.s 			page 367


 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX20_CONSTEXPR void
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       fill(const value_type& __u)
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { std::fill_n(begin(), size(), __u); }
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX20_CONSTEXPR void
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       swap(array& __other)
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       noexcept(_AT_Type::_Is_nothrow_swappable::value)
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { std::swap_ranges(begin(), end(), __other.begin()); }
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       // Iterators.
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR iterator
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       begin() noexcept
 10903              		.loc 20 126 7
 10904              		.cfi_startproc
 10905              		@ args = 0, pretend = 0, frame = 8
 10906              		@ frame_needed = 1, uses_anonymous_args = 0
 10907 0000 80B5     		push	{r7, lr}
 10908              	.LCFI724:
 10909              		.cfi_def_cfa_offset 8
 10910              		.cfi_offset 7, -8
 10911              		.cfi_offset 14, -4
 10912 0002 82B0     		sub	sp, sp, #8
 10913              	.LCFI725:
 10914              		.cfi_def_cfa_offset 16
 10915 0004 00AF     		add	r7, sp, #0
 10916              	.LCFI726:
 10917              		.cfi_def_cfa_register 7
 10918 0006 7860     		str	r0, [r7, #4]
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return iterator(data()); }
 10919              		.loc 20 127 29
 10920 0008 7868     		ldr	r0, [r7, #4]
 10921 000a FFF7FEFF 		bl	_ZNSt5arrayIP14CurrentLimiterLj2EE4dataEv
 10922 000e 0346     		mov	r3, r0
 10923              		.loc 20 127 34
 10924 0010 1846     		mov	r0, r3
 10925 0012 0837     		adds	r7, r7, #8
 10926              	.LCFI727:
 10927              		.cfi_def_cfa_offset 8
 10928 0014 BD46     		mov	sp, r7
 10929              	.LCFI728:
 10930              		.cfi_def_cfa_register 13
 10931              		@ sp needed
 10932 0016 80BD     		pop	{r7, pc}
 10933              		.cfi_endproc
 10934              	.LFE5109:
 10936              		.section	.text._ZNSt5arrayIP14CurrentLimiterLj2EE3endEv,"axG",%progbits,_ZNSt5arrayIP14CurrentLimi
 10937              		.align	1
 10938              		.weak	_ZNSt5arrayIP14CurrentLimiterLj2EE3endEv
 10939              		.syntax unified
 10940              		.thumb
 10941              		.thumb_func
 10942              		.fpu fpv4-sp-d16
 10944              	_ZNSt5arrayIP14CurrentLimiterLj2EE3endEv:
 10945              	.LFB5110:
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       begin() const noexcept
ARM GAS  /tmp/ccATuxCb.s 			page 368


 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_iterator(data()); }
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR iterator
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       end() noexcept
 10946              		.loc 20 134 7
 10947              		.cfi_startproc
 10948              		@ args = 0, pretend = 0, frame = 8
 10949              		@ frame_needed = 1, uses_anonymous_args = 0
 10950 0000 80B5     		push	{r7, lr}
 10951              	.LCFI729:
 10952              		.cfi_def_cfa_offset 8
 10953              		.cfi_offset 7, -8
 10954              		.cfi_offset 14, -4
 10955 0002 82B0     		sub	sp, sp, #8
 10956              	.LCFI730:
 10957              		.cfi_def_cfa_offset 16
 10958 0004 00AF     		add	r7, sp, #0
 10959              	.LCFI731:
 10960              		.cfi_def_cfa_register 7
 10961 0006 7860     		str	r0, [r7, #4]
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return iterator(data() + _Nm); }
 10962              		.loc 20 135 29
 10963 0008 7868     		ldr	r0, [r7, #4]
 10964 000a FFF7FEFF 		bl	_ZNSt5arrayIP14CurrentLimiterLj2EE4dataEv
 10965 000e 0346     		mov	r3, r0
 10966              		.loc 20 135 37
 10967 0010 0833     		adds	r3, r3, #8
 10968              		.loc 20 135 40
 10969 0012 1846     		mov	r0, r3
 10970 0014 0837     		adds	r7, r7, #8
 10971              	.LCFI732:
 10972              		.cfi_def_cfa_offset 8
 10973 0016 BD46     		mov	sp, r7
 10974              	.LCFI733:
 10975              		.cfi_def_cfa_register 13
 10976              		@ sp needed
 10977 0018 80BD     		pop	{r7, pc}
 10978              		.cfi_endproc
 10979              	.LFE5110:
 10981              		.section	.text._ZNRSt8optionalISt4pairIffEEdeEv,"axG",%progbits,_ZNRSt8optionalISt4pairIffEEdeEv,c
 10982              		.align	1
 10983              		.weak	_ZNRSt8optionalISt4pairIffEEdeEv
 10984              		.syntax unified
 10985              		.thumb
 10986              		.thumb_func
 10987              		.fpu fpv4-sp-d16
 10989              	_ZNRSt8optionalISt4pairIffEEdeEv:
 10990              	.LFB5111:
 903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_get(); }
 10991              		.loc 12 903 7
 10992              		.cfi_startproc
 10993              		@ args = 0, pretend = 0, frame = 8
 10994              		@ frame_needed = 1, uses_anonymous_args = 0
 10995 0000 80B5     		push	{r7, lr}
 10996              	.LCFI734:
 10997              		.cfi_def_cfa_offset 8
 10998              		.cfi_offset 7, -8
ARM GAS  /tmp/ccATuxCb.s 			page 369


 10999              		.cfi_offset 14, -4
 11000 0002 82B0     		sub	sp, sp, #8
 11001              	.LCFI735:
 11002              		.cfi_def_cfa_offset 16
 11003 0004 00AF     		add	r7, sp, #0
 11004              	.LCFI736:
 11005              		.cfi_def_cfa_register 7
 11006 0006 7860     		str	r0, [r7, #4]
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 11007              		.loc 12 904 28
 11008 0008 7868     		ldr	r0, [r7, #4]
 11009 000a FFF7FEFF 		bl	_ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv
 11010 000e 0346     		mov	r3, r0
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 11011              		.loc 12 904 32
 11012 0010 1846     		mov	r0, r3
 11013 0012 0837     		adds	r7, r7, #8
 11014              	.LCFI737:
 11015              		.cfi_def_cfa_offset 8
 11016 0014 BD46     		mov	sp, r7
 11017              	.LCFI738:
 11018              		.cfi_def_cfa_register 13
 11019              		@ sp needed
 11020 0016 80BD     		pop	{r7, pc}
 11021              		.cfi_endproc
 11022              	.LFE5111:
 11024              		.section	.text._ZN9InputPortIfE7presentEv,"axG",%progbits,_ZN9InputPortIfE7presentEv,comdat
 11025              		.align	1
 11026              		.weak	_ZN9InputPortIfE7presentEv
 11027              		.syntax unified
 11028              		.thumb
 11029              		.thumb_func
 11030              		.fpu fpv4-sp-d16
 11032              	_ZN9InputPortIfE7presentEv:
 11033              	.LFB5112:
 124:Inc/component.hpp **** public:
 125:Inc/component.hpp ****     void connect_to(OutputPort<T>* input_port) {
 126:Inc/component.hpp ****         content_ = input_port;
 127:Inc/component.hpp ****     }
 128:Inc/component.hpp **** 
 129:Inc/component.hpp ****     void connect_to(T* input_ptr) {
 130:Inc/component.hpp ****         content_ = input_ptr;
 131:Inc/component.hpp ****     }
 132:Inc/component.hpp **** 
 133:Inc/component.hpp ****     void disconnect() {
 134:Inc/component.hpp ****         content_ = (OutputPort<T>*)nullptr;
 135:Inc/component.hpp ****     }
 136:Inc/component.hpp **** 
 137:Inc/component.hpp ****     std::optional<T> present() {
 11034              		.loc 15 137 22
 11035              		.cfi_startproc
 11036              		@ args = 0, pretend = 0, frame = 16
 11037              		@ frame_needed = 1, uses_anonymous_args = 0
 11038 0000 B0B5     		push	{r4, r5, r7, lr}
 11039              	.LCFI739:
 11040              		.cfi_def_cfa_offset 16
 11041              		.cfi_offset 4, -16
ARM GAS  /tmp/ccATuxCb.s 			page 370


 11042              		.cfi_offset 5, -12
 11043              		.cfi_offset 7, -8
 11044              		.cfi_offset 14, -4
 11045 0002 84B0     		sub	sp, sp, #16
 11046              	.LCFI740:
 11047              		.cfi_def_cfa_offset 32
 11048 0004 00AF     		add	r7, sp, #0
 11049              	.LCFI741:
 11050              		.cfi_def_cfa_register 7
 11051 0006 7860     		str	r0, [r7, #4]
 11052 0008 3960     		str	r1, [r7]
 11053              	.LBB79:
 138:Inc/component.hpp ****         if (content_.index() == 2) {
 11054              		.loc 15 138 27
 11055 000a 3B68     		ldr	r3, [r7]
 11056 000c 1846     		mov	r0, r3
 11057 000e FFF7FEFF 		bl	_ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv
 11058 0012 0346     		mov	r3, r0
 11059              		.loc 15 138 30
 11060 0014 022B     		cmp	r3, #2
 11061 0016 0CBF     		ite	eq
 11062 0018 0123     		moveq	r3, #1
 11063 001a 0023     		movne	r3, #0
 11064 001c DBB2     		uxtb	r3, r3
 11065              		.loc 15 138 9
 11066 001e 002B     		cmp	r3, #0
 11067 0020 14D0     		beq	.L500
 11068              	.LBB80:
 139:Inc/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 11069              		.loc 15 139 46
 11070 0022 3B68     		ldr	r3, [r7]
 11071              		.loc 15 139 45
 11072 0024 1846     		mov	r0, r3
 11073 0026 FFF7FEFF 		bl	_ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_
 11074 002a 0346     		mov	r3, r0
 11075              		.loc 15 139 28
 11076 002c 1B68     		ldr	r3, [r3]
 11077 002e BB60     		str	r3, [r7, #8]
 140:Inc/component.hpp ****             return ptr ? ptr->present() : std::nullopt;
 11078              		.loc 15 140 48
 11079 0030 BB68     		ldr	r3, [r7, #8]
 11080 0032 002B     		cmp	r3, #0
 11081 0034 05D0     		beq	.L501
 11082              		.loc 15 140 38 discriminator 1
 11083 0036 7B68     		ldr	r3, [r7, #4]
 11084 0038 B968     		ldr	r1, [r7, #8]
 11085 003a 1846     		mov	r0, r3
 11086 003c FFF7FEFF 		bl	_ZN10OutputPortIfE7presentEv
 11087              		.loc 15 140 48 discriminator 1
 11088 0040 2EE0     		b	.L503
 11089              	.L501:
 11090              		.loc 15 140 48 is_stmt 0 discriminator 2
 11091 0042 2946     		mov	r1, r5
 11092 0044 7868     		ldr	r0, [r7, #4]
 11093 0046 FFF7FEFF 		bl	_ZNSt8optionalIfEC1ESt9nullopt_t
 11094 004a 29E0     		b	.L503
 11095              	.L500:
ARM GAS  /tmp/ccATuxCb.s 			page 371


 11096              	.LBE80:
 11097              	.LBB81:
 11098              	.LBB82:
 141:Inc/component.hpp ****         } else if (content_.index() == 1) {
 11099              		.loc 15 141 34 is_stmt 1
 11100 004c 3B68     		ldr	r3, [r7]
 11101 004e 1846     		mov	r0, r3
 11102 0050 FFF7FEFF 		bl	_ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv
 11103 0054 0346     		mov	r3, r0
 11104              		.loc 15 141 37
 11105 0056 012B     		cmp	r3, #1
 11106 0058 0CBF     		ite	eq
 11107 005a 0123     		moveq	r3, #1
 11108 005c 0023     		movne	r3, #0
 11109 005e DBB2     		uxtb	r3, r3
 11110              		.loc 15 141 16
 11111 0060 002B     		cmp	r3, #0
 11112 0062 14D0     		beq	.L504
 11113              	.LBB83:
 142:Inc/component.hpp ****             T* ptr = std::get<1>(content_);
 11114              		.loc 15 142 34
 11115 0064 3B68     		ldr	r3, [r7]
 11116              		.loc 15 142 33
 11117 0066 1846     		mov	r0, r3
 11118 0068 FFF7FEFF 		bl	_ZSt3getILj1EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_
 11119 006c 0346     		mov	r3, r0
 11120              		.loc 15 142 16
 11121 006e 1B68     		ldr	r3, [r3]
 11122 0070 FB60     		str	r3, [r7, #12]
 143:Inc/component.hpp ****             return ptr ? std::make_optional(*ptr) : std::nullopt;
 11123              		.loc 15 143 58
 11124 0072 FB68     		ldr	r3, [r7, #12]
 11125 0074 002B     		cmp	r3, #0
 11126 0076 05D0     		beq	.L505
 11127              		.loc 15 143 44 discriminator 1
 11128 0078 7B68     		ldr	r3, [r7, #4]
 11129 007a F968     		ldr	r1, [r7, #12]
 11130 007c 1846     		mov	r0, r3
 11131 007e FFF7FEFF 		bl	_ZSt13make_optionalIRfESt8optionalINSt5decayIT_E4typeEEOS3_
 11132              		.loc 15 143 58 discriminator 1
 11133 0082 0DE0     		b	.L503
 11134              	.L505:
 11135              		.loc 15 143 58 is_stmt 0 discriminator 2
 11136 0084 2146     		mov	r1, r4
 11137 0086 7868     		ldr	r0, [r7, #4]
 11138 0088 FFF7FEFF 		bl	_ZNSt8optionalIfEC1ESt9nullopt_t
 11139 008c 08E0     		b	.L503
 11140              	.L504:
 11141              	.LBE83:
 144:Inc/component.hpp ****         } else {
 145:Inc/component.hpp ****             return std::get<0>(content_);
 11142              		.loc 15 145 32 is_stmt 1
 11143 008e 3B68     		ldr	r3, [r7]
 11144              		.loc 15 145 31
 11145 0090 1846     		mov	r0, r3
 11146 0092 FFF7FEFF 		bl	_ZSt3getILj0EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_
 11147 0096 0346     		mov	r3, r0
ARM GAS  /tmp/ccATuxCb.s 			page 372


 11148              		.loc 15 145 40
 11149 0098 1946     		mov	r1, r3
 11150 009a 7868     		ldr	r0, [r7, #4]
 11151 009c FFF7FEFF 		bl	_ZNSt8optionalIfEC1IRfLb1EEEOT_
 11152              	.L503:
 11153              	.LBE82:
 11154              	.LBE81:
 11155              	.LBE79:
 146:Inc/component.hpp ****         }
 147:Inc/component.hpp ****     }
 11156              		.loc 15 147 5 discriminator 1
 11157 00a0 7868     		ldr	r0, [r7, #4]
 11158 00a2 1037     		adds	r7, r7, #16
 11159              	.LCFI742:
 11160              		.cfi_def_cfa_offset 16
 11161 00a4 BD46     		mov	sp, r7
 11162              	.LCFI743:
 11163              		.cfi_def_cfa_register 13
 11164              		@ sp needed
 11165 00a6 B0BD     		pop	{r4, r5, r7, pc}
 11166              		.cfi_endproc
 11167              	.LFE5112:
 11169              		.section	.text._ZN10OutputPortISt4pairIffEE8previousEv,"axG",%progbits,_ZN10OutputPortISt4pairIffE
 11170              		.align	1
 11171              		.weak	_ZN10OutputPortISt4pairIffEE8previousEv
 11172              		.syntax unified
 11173              		.thumb
 11174              		.thumb_func
 11175              		.fpu fpv4-sp-d16
 11177              	_ZN10OutputPortISt4pairIffEE8previousEv:
 11178              	.LFB5113:
  88:Inc/component.hpp ****         if (age_ == 1) {
 11179              		.loc 15 88 22
 11180              		.cfi_startproc
 11181              		@ args = 0, pretend = 0, frame = 8
 11182              		@ frame_needed = 1, uses_anonymous_args = 0
 11183 0000 80B5     		push	{r7, lr}
 11184              	.LCFI744:
 11185              		.cfi_def_cfa_offset 8
 11186              		.cfi_offset 7, -8
 11187              		.cfi_offset 14, -4
 11188 0002 82B0     		sub	sp, sp, #8
 11189              	.LCFI745:
 11190              		.cfi_def_cfa_offset 16
 11191 0004 00AF     		add	r7, sp, #0
 11192              	.LCFI746:
 11193              		.cfi_def_cfa_register 7
 11194 0006 7860     		str	r0, [r7, #4]
 11195 0008 3960     		str	r1, [r7]
  89:Inc/component.hpp ****             return content_;
 11196              		.loc 15 89 13
 11197 000a 3B68     		ldr	r3, [r7]
 11198 000c 1B68     		ldr	r3, [r3]
  89:Inc/component.hpp ****             return content_;
 11199              		.loc 15 89 9
 11200 000e 012B     		cmp	r3, #1
 11201 0010 06D1     		bne	.L508
ARM GAS  /tmp/ccATuxCb.s 			page 373


  90:Inc/component.hpp ****         } else {
 11202              		.loc 15 90 20
 11203 0012 3B68     		ldr	r3, [r7]
 11204 0014 0433     		adds	r3, r3, #4
 11205 0016 1946     		mov	r1, r3
 11206 0018 7868     		ldr	r0, [r7, #4]
 11207 001a FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEC1IRS1_Lb1EEEOT_
 11208 001e 03E0     		b	.L509
 11209              	.L508:
  92:Inc/component.hpp ****         }
 11210              		.loc 15 92 25
 11211 0020 1146     		mov	r1, r2
 11212 0022 7868     		ldr	r0, [r7, #4]
 11213 0024 FFF7FEFF 		bl	_ZNSt8optionalISt4pairIffEEC1ESt9nullopt_t
 11214              	.L509:
  94:Inc/component.hpp **** 
 11215              		.loc 15 94 5
 11216 0028 7868     		ldr	r0, [r7, #4]
 11217 002a 0837     		adds	r7, r7, #8
 11218              	.LCFI747:
 11219              		.cfi_def_cfa_offset 8
 11220 002c BD46     		mov	sp, r7
 11221              	.LCFI748:
 11222              		.cfi_def_cfa_register 13
 11223              		@ sp needed
 11224 002e 80BD     		pop	{r7, pc}
 11225              		.cfi_endproc
 11226              	.LFE5113:
 11228              		.section	.text._ZNKSt8optionalISt4pairIffEEcvbEv,"axG",%progbits,_ZNKSt8optionalISt4pairIffEEcvbEv
 11229              		.align	1
 11230              		.weak	_ZNKSt8optionalISt4pairIffEEcvbEv
 11231              		.syntax unified
 11232              		.thumb
 11233              		.thumb_func
 11234              		.fpu fpv4-sp-d16
 11236              	_ZNKSt8optionalISt4pairIffEEcvbEv:
 11237              	.LFB5114:
 914:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 11238              		.loc 12 914 26
 11239              		.cfi_startproc
 11240              		@ args = 0, pretend = 0, frame = 8
 11241              		@ frame_needed = 1, uses_anonymous_args = 0
 11242 0000 80B5     		push	{r7, lr}
 11243              	.LCFI749:
 11244              		.cfi_def_cfa_offset 8
 11245              		.cfi_offset 7, -8
 11246              		.cfi_offset 14, -4
 11247 0002 82B0     		sub	sp, sp, #8
 11248              	.LCFI750:
 11249              		.cfi_def_cfa_offset 16
 11250 0004 00AF     		add	r7, sp, #0
 11251              	.LCFI751:
 11252              		.cfi_def_cfa_register 7
 11253 0006 7860     		str	r0, [r7, #4]
 915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 11254              		.loc 12 915 35
 11255 0008 7868     		ldr	r0, [r7, #4]
ARM GAS  /tmp/ccATuxCb.s 			page 374


 11256 000a FFF7FEFF 		bl	_ZNKSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv
 11257 000e 0346     		mov	r3, r0
 915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 11258              		.loc 12 915 39
 11259 0010 1846     		mov	r0, r3
 11260 0012 0837     		adds	r7, r7, #8
 11261              	.LCFI752:
 11262              		.cfi_def_cfa_offset 8
 11263 0014 BD46     		mov	sp, r7
 11264              	.LCFI753:
 11265              		.cfi_def_cfa_register 13
 11266              		@ sp needed
 11267 0016 80BD     		pop	{r7, pc}
 11268              		.cfi_endproc
 11269              	.LFE5114:
 11271              		.section	.text._ZN10OutputPortISt4pairIffEEaSES1_,"axG",%progbits,_ZN10OutputPortISt4pairIffEEaSES
 11272              		.align	1
 11273              		.weak	_ZN10OutputPortISt4pairIffEEaSES1_
 11274              		.syntax unified
 11275              		.thumb
 11276              		.thumb_func
 11277              		.fpu fpv4-sp-d16
 11279              	_ZN10OutputPortISt4pairIffEEaSES1_:
 11280              	.LFB5115:
  52:Inc/component.hpp ****         content_ = value;
 11281              		.loc 15 52 10
 11282              		.cfi_startproc
 11283              		@ args = 0, pretend = 0, frame = 16
 11284              		@ frame_needed = 1, uses_anonymous_args = 0
 11285 0000 80B5     		push	{r7, lr}
 11286              	.LCFI754:
 11287              		.cfi_def_cfa_offset 8
 11288              		.cfi_offset 7, -8
 11289              		.cfi_offset 14, -4
 11290 0002 84B0     		sub	sp, sp, #16
 11291              	.LCFI755:
 11292              		.cfi_def_cfa_offset 24
 11293 0004 00AF     		add	r7, sp, #0
 11294              	.LCFI756:
 11295              		.cfi_def_cfa_register 7
 11296 0006 F860     		str	r0, [r7, #12]
 11297 0008 B0EE407A 		vmov.f32	s14, s0
 11298 000c F0EE607A 		vmov.f32	s15, s1
 11299 0010 87ED017A 		vstr.32	s14, [r7, #4]
 11300 0014 C7ED027A 		vstr.32	s15, [r7, #8]
  53:Inc/component.hpp ****         age_ = 0;
 11301              		.loc 15 53 18
 11302 0018 FB68     		ldr	r3, [r7, #12]
 11303 001a 0433     		adds	r3, r3, #4
 11304 001c 3A1D     		adds	r2, r7, #4
 11305 001e 1146     		mov	r1, r2
 11306 0020 1846     		mov	r0, r3
 11307 0022 FFF7FEFF 		bl	_ZNSt4pairIffEaSERKS0_
  54:Inc/component.hpp ****     }
 11308              		.loc 15 54 14
 11309 0026 FB68     		ldr	r3, [r7, #12]
 11310 0028 0022     		movs	r2, #0
ARM GAS  /tmp/ccATuxCb.s 			page 375


 11311 002a 1A60     		str	r2, [r3]
  55:Inc/component.hpp **** 
 11312              		.loc 15 55 5
 11313 002c 00BF     		nop
 11314 002e 1037     		adds	r7, r7, #16
 11315              	.LCFI757:
 11316              		.cfi_def_cfa_offset 8
 11317 0030 BD46     		mov	sp, r7
 11318              	.LCFI758:
 11319              		.cfi_def_cfa_register 13
 11320              		@ sp needed
 11321 0032 80BD     		pop	{r7, pc}
 11322              		.cfi_endproc
 11323              	.LFE5115:
 11325              		.section	.text._ZSt13make_optionalISt5arrayIfLj3EEESt8optionalINSt5decayIT_E4typeEEOS4_,"axG",%pro
 11326              		.align	1
 11327              		.weak	_ZSt13make_optionalISt5arrayIfLj3EEESt8optionalINSt5decayIT_E4typeEEOS4_
 11328              		.syntax unified
 11329              		.thumb
 11330              		.thumb_func
 11331              		.fpu fpv4-sp-d16
 11333              	_ZSt13make_optionalISt5arrayIfLj3EEESt8optionalINSt5decayIT_E4typeEEOS4_:
 11334              	.LFB5116:
 919:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 920:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 921:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value() const&
 922:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 923:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 924:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? this->_M_get()
 925:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), this->_M_get());
 926:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 927:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 928:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 929:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value()&
 930:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 931:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 932:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? this->_M_get()
 933:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), this->_M_get());
 934:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 935:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 936:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&&
 937:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value()&&
 938:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 939:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 940:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? std::move(this->_M_get())
 941:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 942:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 943:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 944:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&&
 945:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value() const&&
 946:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 947:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 948:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? std::move(this->_M_get())
 949:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 950:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 951:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 952:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
ARM GAS  /tmp/ccATuxCb.s 			page 376


 953:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr _Tp
 954:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	value_or(_Up&& __u) const&
 955:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 956:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_copy_constructible_v<_Tp>);
 957:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_convertible_v<_Up&&, _Tp>);
 958:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 959:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_is_engaged()
 960:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    ? this->_M_get() : static_cast<_Tp>(std::forward<_Up>(__u));
 961:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 962:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 963:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 964:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr _Tp
 965:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	value_or(_Up&& __u) &&
 966:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 967:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_move_constructible_v<_Tp>);
 968:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_convertible_v<_Up&&, _Tp>);
 969:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 970:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_is_engaged()
 971:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    ? std::move(this->_M_get())
 972:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : static_cast<_Tp>(std::forward<_Up>(__u));
 973:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 974:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 975:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       void reset() noexcept { this->_M_reset(); }
 976:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 977:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 978:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 979:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     using __optional_relop_t =
 980:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       enable_if_t<is_convertible<_Tp, bool>::value, bool>;
 981:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 982:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Comparisons between optional values.
 983:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 984:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
 985:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
 986:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() == declval<_Up>())>
 987:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 988:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return static_cast<bool>(__lhs) == static_cast<bool>(__rhs)
 989:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	     && (!__lhs || *__lhs == *__rhs);
 990:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
 991:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 992:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 993:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
 994:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
 995:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() != declval<_Up>())>
 996:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 997:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return static_cast<bool>(__lhs) != static_cast<bool>(__rhs)
 998:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	|| (static_cast<bool>(__lhs) && *__lhs != *__rhs);
 999:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1000:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1001:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1002:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1003:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1004:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() < declval<_Up>())>
1005:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1006:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return static_cast<bool>(__rhs) && (!__lhs || *__lhs < *__rhs);
1007:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1008:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1009:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
ARM GAS  /tmp/ccATuxCb.s 			page 377


1010:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1011:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1012:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() > declval<_Up>())>
1013:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1014:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return static_cast<bool>(__lhs) && (!__rhs || *__lhs > *__rhs);
1015:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1016:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1017:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1018:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1019:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1020:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() <= declval<_Up>())>
1021:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1022:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return !__lhs || (static_cast<bool>(__rhs) && *__lhs <= *__rhs);
1023:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1024:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1025:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1026:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1027:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1028:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() >= declval<_Up>())>
1029:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1030:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return !__rhs || (static_cast<bool>(__lhs) && *__lhs >= *__rhs);
1031:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1032:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1033:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #ifdef __cpp_lib_three_way_comparison
1034:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, three_way_comparable_with<_Tp> _Up>
1035:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr compare_three_way_result_t<_Tp, _Up>
1036:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=>(const optional<_Tp>& __x, const optional<_Up>& __y)
1037:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1038:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return __x && __y ? *__x <=> *__y : bool(__x) <=> bool(__y);
1039:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1040:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #endif
1041:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1042:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Comparisons with nullopt.
1043:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1044:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1045:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(const optional<_Tp>& __lhs, nullopt_t) noexcept
1046:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs; }
1047:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1048:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #ifdef __cpp_lib_three_way_comparison
1049:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1050:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr strong_ordering
1051:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=>(const optional<_Tp>& __x, nullopt_t) noexcept
1052:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return bool(__x) <=> false; }
1053:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #else
1054:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1055:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1056:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(nullopt_t, const optional<_Tp>& __rhs) noexcept
1057:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs; }
1058:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1059:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1061:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(const optional<_Tp>& __lhs, nullopt_t) noexcept
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return static_cast<bool>(__lhs); }
1063:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1065:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1066:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(nullopt_t, const optional<_Tp>& __rhs) noexcept
ARM GAS  /tmp/ccATuxCb.s 			page 378


1067:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return static_cast<bool>(__rhs); }
1068:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1069:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1070:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1071:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(const optional<_Tp>& /* __lhs */, nullopt_t) noexcept
1072:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return false; }
1073:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1074:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1075:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1076:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(nullopt_t, const optional<_Tp>& __rhs) noexcept
1077:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return static_cast<bool>(__rhs); }
1078:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1079:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1080:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1081:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(const optional<_Tp>& __lhs, nullopt_t) noexcept
1082:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return static_cast<bool>(__lhs); }
1083:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1084:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1085:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1086:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(nullopt_t, const optional<_Tp>& /* __rhs */) noexcept
1087:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return false; }
1088:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1089:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1090:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1091:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(const optional<_Tp>& __lhs, nullopt_t) noexcept
1092:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs; }
1093:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1094:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1095:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1096:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(nullopt_t, const optional<_Tp>& /* __rhs */) noexcept
1097:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return true; }
1098:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1099:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(const optional<_Tp>& /* __lhs */, nullopt_t) noexcept
1102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return true; }
1103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(nullopt_t, const optional<_Tp>& __rhs) noexcept
1107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs; }
1108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #endif // three-way-comparison
1109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Comparisons with value type.
1111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(const optional<_Tp>& __lhs, const _Up& __rhs)
1114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() == declval<_Up>())>
1115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __lhs && *__lhs == __rhs; }
1116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(const _Up& __lhs, const optional<_Tp>& __rhs)
1120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() == declval<_Tp>())>
1121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __rhs && __lhs == *__rhs; }
1122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
ARM GAS  /tmp/ccATuxCb.s 			page 379


1124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(const optional<_Tp>& __lhs, const _Up& __rhs)
1126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() != declval<_Up>())>
1127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs || *__lhs != __rhs; }
1128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(const _Up& __lhs, const optional<_Tp>& __rhs)
1132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() != declval<_Tp>())>
1133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs || __lhs != *__rhs; }
1134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(const optional<_Tp>& __lhs, const _Up& __rhs)
1138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() < declval<_Up>())>
1139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs || *__lhs < __rhs; }
1140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(const _Up& __lhs, const optional<_Tp>& __rhs)
1144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() < declval<_Tp>())>
1145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __rhs && __lhs < *__rhs; }
1146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(const optional<_Tp>& __lhs, const _Up& __rhs)
1150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() > declval<_Up>())>
1151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __lhs && *__lhs > __rhs; }
1152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(const _Up& __lhs, const optional<_Tp>& __rhs)
1156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() > declval<_Tp>())>
1157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs || __lhs > *__rhs; }
1158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(const optional<_Tp>& __lhs, const _Up& __rhs)
1162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() <= declval<_Up>())>
1163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs || *__lhs <= __rhs; }
1164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(const _Up& __lhs, const optional<_Tp>& __rhs)
1168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() <= declval<_Tp>())>
1169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __rhs && __lhs <= *__rhs; }
1170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(const optional<_Tp>& __lhs, const _Up& __rhs)
1174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() >= declval<_Up>())>
1175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __lhs && *__lhs >= __rhs; }
1176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(const _Up& __lhs, const optional<_Tp>& __rhs)
1180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() >= declval<_Tp>())>
ARM GAS  /tmp/ccATuxCb.s 			page 380


1181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs || __lhs >= *__rhs; }
1182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #ifdef __cpp_lib_three_way_comparison
1184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr compare_three_way_result_t<_Tp, _Up>
1186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=>(const optional<_Tp>& __x, const _Up& __v)
1187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return bool(__x) ? *__x <=> __v : strong_ordering::less; }
1188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #endif
1189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Swap and creation functions.
1191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // 2748. swappable traits for optionals
1194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     inline enable_if_t<is_move_constructible_v<_Tp> && is_swappable_v<_Tp>>
1196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     swap(optional<_Tp>& __lhs, optional<_Tp>& __rhs)
1197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     noexcept(noexcept(__lhs.swap(__rhs)))
1198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { __lhs.swap(__rhs); }
1199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     enable_if_t<!(is_move_constructible_v<_Tp> && is_swappable_v<_Tp>)>
1202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     swap(optional<_Tp>&, optional<_Tp>&) = delete;
1203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr optional<decay_t<_Tp>>
1206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     make_optional(_Tp&& __t)
 11335              		.loc 12 1206 5
 11336              		.cfi_startproc
 11337              		@ args = 0, pretend = 0, frame = 8
 11338              		@ frame_needed = 1, uses_anonymous_args = 0
 11339 0000 80B5     		push	{r7, lr}
 11340              	.LCFI759:
 11341              		.cfi_def_cfa_offset 8
 11342              		.cfi_offset 7, -8
 11343              		.cfi_offset 14, -4
 11344 0002 82B0     		sub	sp, sp, #8
 11345              	.LCFI760:
 11346              		.cfi_def_cfa_offset 16
 11347 0004 00AF     		add	r7, sp, #0
 11348              	.LCFI761:
 11349              		.cfi_def_cfa_register 7
 11350 0006 7860     		str	r0, [r7, #4]
 11351 0008 3960     		str	r1, [r7]
1207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return optional<decay_t<_Tp>> { std::forward<_Tp>(__t) }; }
 11352              		.loc 12 1207 62
 11353 000a 3868     		ldr	r0, [r7]
 11354 000c FFF7FEFF 		bl	_ZSt7forwardISt5arrayIfLj3EEEOT_RNSt16remove_referenceIS2_E4typeE
 11355 0010 0346     		mov	r3, r0
 11356 0012 1946     		mov	r1, r3
 11357 0014 7868     		ldr	r0, [r7, #4]
 11358 0016 FFF7FEFF 		bl	_ZNSt8optionalISt5arrayIfLj3EEEC1IS1_Lb1EEEOT_
 11359              		.loc 12 1207 65
 11360 001a 7868     		ldr	r0, [r7, #4]
 11361 001c 0837     		adds	r7, r7, #8
 11362              	.LCFI762:
 11363              		.cfi_def_cfa_offset 8
 11364 001e BD46     		mov	sp, r7
ARM GAS  /tmp/ccATuxCb.s 			page 381


 11365              	.LCFI763:
 11366              		.cfi_def_cfa_register 13
 11367              		@ sp needed
 11368 0020 80BD     		pop	{r7, pc}
 11369              		.cfi_endproc
 11370              	.LFE5116:
 11372              		.section	.text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_,"axG",
 11373              		.align	1
 11374              		.weak	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_
 11375              		.syntax unified
 11376              		.thumb
 11377              		.thumb_func
 11378              		.fpu fpv4-sp-d16
 11380              	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_:
 11381              	.LFB5122:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 11382              		.loc 12 204 6
 11383              		.cfi_startproc
 11384              		@ args = 0, pretend = 0, frame = 16
 11385              		@ frame_needed = 1, uses_anonymous_args = 0
 11386 0000 80B5     		push	{r7, lr}
 11387              	.LCFI764:
 11388              		.cfi_def_cfa_offset 8
 11389              		.cfi_offset 7, -8
 11390              		.cfi_offset 14, -4
 11391 0002 84B0     		sub	sp, sp, #16
 11392              	.LCFI765:
 11393              		.cfi_def_cfa_offset 24
 11394 0004 00AF     		add	r7, sp, #0
 11395              	.LCFI766:
 11396              		.cfi_def_cfa_register 7
 11397 0006 F860     		str	r0, [r7, #12]
 11398 0008 3972     		strb	r1, [r7, #8]
 11399 000a 7A60     		str	r2, [r7, #4]
 11400              	.LBB84:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 11401              		.loc 12 205 36
 11402 000c 7868     		ldr	r0, [r7, #4]
 11403 000e FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 11404 0012 0346     		mov	r3, r0
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 11405              		.loc 12 205 47
 11406 0014 1A68     		ldr	r2, [r3]	@ float
 11407 0016 FB68     		ldr	r3, [r7, #12]
 11408 0018 1A60     		str	r2, [r3]	@ float
 11409              	.LBE84:
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 11410              		.loc 12 206 8
 11411 001a FB68     		ldr	r3, [r7, #12]
 11412 001c 1846     		mov	r0, r3
 11413 001e 1037     		adds	r7, r7, #16
 11414              	.LCFI767:
 11415              		.cfi_def_cfa_offset 8
 11416 0020 BD46     		mov	sp, r7
 11417              	.LCFI768:
 11418              		.cfi_def_cfa_register 13
 11419              		@ sp needed
ARM GAS  /tmp/ccATuxCb.s 			page 382


 11420 0022 80BD     		pop	{r7, pc}
 11421              		.cfi_endproc
 11422              	.LFE5122:
 11424              		.weak	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJRfEEESt10in_place_tDpOT_
 11425              		.thumb_set _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJRfEEESt10in_place_tDpOT_,_ZNSt22_Op
 11426              		.section	.text._ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE,"axG",%progbits,_ZSt7forwardIR
 11427              		.align	1
 11428              		.weak	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 11429              		.syntax unified
 11430              		.thumb
 11431              		.thumb_func
 11432              		.fpu fpv4-sp-d16
 11434              	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE:
 11435              	.LFB5124:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 11436              		.loc 13 76 5
 11437              		.cfi_startproc
 11438              		@ args = 0, pretend = 0, frame = 8
 11439              		@ frame_needed = 1, uses_anonymous_args = 0
 11440              		@ link register save eliminated.
 11441 0000 80B4     		push	{r7}
 11442              	.LCFI769:
 11443              		.cfi_def_cfa_offset 4
 11444              		.cfi_offset 7, -4
 11445 0002 83B0     		sub	sp, sp, #12
 11446              	.LCFI770:
 11447              		.cfi_def_cfa_offset 16
 11448 0004 00AF     		add	r7, sp, #0
 11449              	.LCFI771:
 11450              		.cfi_def_cfa_register 7
 11451 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 11452              		.loc 13 77 36
 11453 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 11454              		.loc 13 77 39
 11455 000a 1846     		mov	r0, r3
 11456 000c 0C37     		adds	r7, r7, #12
 11457              	.LCFI772:
 11458              		.cfi_def_cfa_offset 4
 11459 000e BD46     		mov	sp, r7
 11460              	.LCFI773:
 11461              		.cfi_def_cfa_register 13
 11462              		@ sp needed
 11463 0010 5DF8047B 		ldr	r7, [sp], #4
 11464              	.LCFI774:
 11465              		.cfi_restore 7
 11466              		.cfi_def_cfa_offset 0
 11467 0014 7047     		bx	lr
 11468              		.cfi_endproc
 11469              	.LFE5124:
 11471              		.section	.text._ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_,"axG",%progbits,_ZNSt2
 11472              		.align	1
 11473              		.weak	_ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_
 11474              		.syntax unified
 11475              		.thumb
 11476              		.thumb_func
ARM GAS  /tmp/ccATuxCb.s 			page 383


 11477              		.fpu fpv4-sp-d16
 11479              	_ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_:
 11480              	.LFB5125:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 11481              		.loc 12 116 2
 11482              		.cfi_startproc
 11483              		@ args = 0, pretend = 0, frame = 16
 11484              		@ frame_needed = 1, uses_anonymous_args = 0
 11485 0000 B0B5     		push	{r4, r5, r7, lr}
 11486              	.LCFI775:
 11487              		.cfi_def_cfa_offset 16
 11488              		.cfi_offset 4, -16
 11489              		.cfi_offset 5, -12
 11490              		.cfi_offset 7, -8
 11491              		.cfi_offset 14, -4
 11492 0002 84B0     		sub	sp, sp, #16
 11493              	.LCFI776:
 11494              		.cfi_def_cfa_offset 32
 11495 0004 00AF     		add	r7, sp, #0
 11496              	.LCFI777:
 11497              		.cfi_def_cfa_register 7
 11498 0006 F860     		str	r0, [r7, #12]
 11499 0008 3972     		strb	r1, [r7, #8]
 11500 000a 7A60     		str	r2, [r7, #4]
 11501              	.LBB85:
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 11502              		.loc 12 118 19
 11503 000c FC68     		ldr	r4, [r7, #12]
 11504 000e 7868     		ldr	r0, [r7, #4]
 11505 0010 FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 11506 0014 0346     		mov	r3, r0
 11507 0016 1A46     		mov	r2, r3
 11508 0018 2946     		mov	r1, r5
 11509 001a 2046     		mov	r0, r4
 11510 001c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJRfEEESt10in_place_tDpOT_
 11511 0020 FB68     		ldr	r3, [r7, #12]
 11512 0022 0122     		movs	r2, #1
 11513 0024 1A71     		strb	r2, [r3, #4]
 11514              	.LBE85:
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 11515              		.loc 12 119 4
 11516 0026 FB68     		ldr	r3, [r7, #12]
 11517 0028 1846     		mov	r0, r3
 11518 002a 1037     		adds	r7, r7, #16
 11519              	.LCFI778:
 11520              		.cfi_def_cfa_offset 16
 11521 002c BD46     		mov	sp, r7
 11522              	.LCFI779:
 11523              		.cfi_def_cfa_register 13
 11524              		@ sp needed
 11525 002e B0BD     		pop	{r4, r5, r7, pc}
 11526              		.cfi_endproc
 11527              	.LFE5125:
 11529              		.weak	_ZNSt22_Optional_payload_baseIfEC1IJRfEEESt10in_place_tDpOT_
 11530              		.thumb_set _ZNSt22_Optional_payload_baseIfEC1IJRfEEESt10in_place_tDpOT_,_ZNSt22_Optional_payload_b
 11531              		.section	.text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10i
 11532              		.align	1
ARM GAS  /tmp/ccATuxCb.s 			page 384


 11533              		.weak	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10in_place_t
 11534              		.syntax unified
 11535              		.thumb
 11536              		.thumb_func
 11537              		.fpu fpv4-sp-d16
 11539              	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_:
 11540              	.LFB5127:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 11541              		.loc 12 301 42
 11542              		.cfi_startproc
 11543              		@ args = 0, pretend = 0, frame = 16
 11544              		@ frame_needed = 1, uses_anonymous_args = 0
 11545 0000 90B5     		push	{r4, r7, lr}
 11546              	.LCFI780:
 11547              		.cfi_def_cfa_offset 12
 11548              		.cfi_offset 4, -12
 11549              		.cfi_offset 7, -8
 11550              		.cfi_offset 14, -4
 11551 0002 85B0     		sub	sp, sp, #20
 11552              	.LCFI781:
 11553              		.cfi_def_cfa_offset 32
 11554 0004 00AF     		add	r7, sp, #0
 11555              	.LCFI782:
 11556              		.cfi_def_cfa_register 7
 11557 0006 F860     		str	r0, [r7, #12]
 11558 0008 3972     		strb	r1, [r7, #8]
 11559 000a 7A60     		str	r2, [r7, #4]
 11560              	.LBB86:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 11561              		.loc 12 301 42
 11562 000c FB68     		ldr	r3, [r7, #12]
 11563 000e 7A68     		ldr	r2, [r7, #4]
 11564 0010 2146     		mov	r1, r4
 11565 0012 1846     		mov	r0, r3
 11566 0014 FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_
 11567              	.LBE86:
 11568 0018 FB68     		ldr	r3, [r7, #12]
 11569 001a 1846     		mov	r0, r3
 11570 001c 1437     		adds	r7, r7, #20
 11571              	.LCFI783:
 11572              		.cfi_def_cfa_offset 12
 11573 001e BD46     		mov	sp, r7
 11574              	.LCFI784:
 11575              		.cfi_def_cfa_register 13
 11576              		@ sp needed
 11577 0020 90BD     		pop	{r4, r7, pc}
 11578              		.cfi_endproc
 11579              	.LFE5127:
 11581              		.weak	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJRfEEESt10in_place_t
 11582              		.thumb_set _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJRfEEESt10in_pl
 11583              		.section	.text._ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_,"axG",%progbits,_Z
 11584              		.align	1
 11585              		.weak	_ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_
 11586              		.syntax unified
 11587              		.thumb
 11588              		.thumb_func
 11589              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccATuxCb.s 			page 385


 11591              	_ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_:
 11592              	.LFB5129:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 11593              		.loc 12 608 28
 11594              		.cfi_startproc
 11595              		@ args = 0, pretend = 0, frame = 16
 11596              		@ frame_needed = 1, uses_anonymous_args = 0
 11597 0000 B0B5     		push	{r4, r5, r7, lr}
 11598              	.LCFI785:
 11599              		.cfi_def_cfa_offset 16
 11600              		.cfi_offset 4, -16
 11601              		.cfi_offset 5, -12
 11602              		.cfi_offset 7, -8
 11603              		.cfi_offset 14, -4
 11604 0002 84B0     		sub	sp, sp, #16
 11605              	.LCFI786:
 11606              		.cfi_def_cfa_offset 32
 11607 0004 00AF     		add	r7, sp, #0
 11608              	.LCFI787:
 11609              		.cfi_def_cfa_register 7
 11610 0006 F860     		str	r0, [r7, #12]
 11611 0008 3972     		strb	r1, [r7, #8]
 11612 000a 7A60     		str	r2, [r7, #4]
 11613              	.LBB87:
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 11614              		.loc 12 610 38
 11615 000c FC68     		ldr	r4, [r7, #12]
 11616 000e 7868     		ldr	r0, [r7, #4]
 11617 0010 FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 11618 0014 0346     		mov	r3, r0
 11619 0016 1A46     		mov	r2, r3
 11620 0018 2946     		mov	r1, r5
 11621 001a 2046     		mov	r0, r4
 11622 001c FFF7FEFF 		bl	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpO
 11623              	.LBE87:
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 11624              		.loc 12 610 42
 11625 0020 FB68     		ldr	r3, [r7, #12]
 11626 0022 1846     		mov	r0, r3
 11627 0024 1037     		adds	r7, r7, #16
 11628              	.LCFI788:
 11629              		.cfi_def_cfa_offset 16
 11630 0026 BD46     		mov	sp, r7
 11631              	.LCFI789:
 11632              		.cfi_def_cfa_register 13
 11633              		@ sp needed
 11634 0028 B0BD     		pop	{r4, r5, r7, pc}
 11635              		.cfi_endproc
 11636              	.LFE5129:
 11638              		.weak	_ZNSt14_Optional_baseIfLb1ELb1EEC1IJRfELb0EEESt10in_place_tDpOT_
 11639              		.thumb_set _ZNSt14_Optional_baseIfLb1ELb1EEC1IJRfELb0EEESt10in_place_tDpOT_,_ZNSt14_Optional_baseI
 11640              		.section	.text._ZNSt8optionalIfEC2IRfLb1EEEOT_,"axG",%progbits,_ZNSt8optionalIfEC5IRfLb1EEEOT_,com
 11641              		.align	1
 11642              		.weak	_ZNSt8optionalIfEC2IRfLb1EEEOT_
 11643              		.syntax unified
 11644              		.thumb
 11645              		.thumb_func
ARM GAS  /tmp/ccATuxCb.s 			page 386


 11646              		.fpu fpv4-sp-d16
 11648              	_ZNSt8optionalIfEC2IRfLb1EEEOT_:
 11649              	.LFB5131:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 11650              		.loc 12 701 2
 11651              		.cfi_startproc
 11652              		@ args = 0, pretend = 0, frame = 8
 11653              		@ frame_needed = 1, uses_anonymous_args = 0
 11654 0000 B0B5     		push	{r4, r5, r7, lr}
 11655              	.LCFI790:
 11656              		.cfi_def_cfa_offset 16
 11657              		.cfi_offset 4, -16
 11658              		.cfi_offset 5, -12
 11659              		.cfi_offset 7, -8
 11660              		.cfi_offset 14, -4
 11661 0002 82B0     		sub	sp, sp, #8
 11662              	.LCFI791:
 11663              		.cfi_def_cfa_offset 24
 11664 0004 00AF     		add	r7, sp, #0
 11665              	.LCFI792:
 11666              		.cfi_def_cfa_register 7
 11667 0006 7860     		str	r0, [r7, #4]
 11668 0008 3960     		str	r1, [r7]
 11669              	.LBB88:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 11670              		.loc 12 702 47
 11671 000a 7C68     		ldr	r4, [r7, #4]
 11672 000c 3868     		ldr	r0, [r7]
 11673 000e FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 11674 0012 0346     		mov	r3, r0
 11675 0014 1A46     		mov	r2, r3
 11676 0016 2946     		mov	r1, r5
 11677 0018 2046     		mov	r0, r4
 11678 001a FFF7FEFF 		bl	_ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_
 11679              	.LBE88:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 11680              		.loc 12 702 51
 11681 001e 7B68     		ldr	r3, [r7, #4]
 11682 0020 1846     		mov	r0, r3
 11683 0022 0837     		adds	r7, r7, #8
 11684              	.LCFI793:
 11685              		.cfi_def_cfa_offset 16
 11686 0024 BD46     		mov	sp, r7
 11687              	.LCFI794:
 11688              		.cfi_def_cfa_register 13
 11689              		@ sp needed
 11690 0026 B0BD     		pop	{r4, r5, r7, pc}
 11691              		.cfi_endproc
 11692              	.LFE5131:
 11694              		.weak	_ZNSt8optionalIfEC1IRfLb1EEEOT_
 11695              		.thumb_set _ZNSt8optionalIfEC1IRfLb1EEEOT_,_ZNSt8optionalIfEC2IRfLb1EEEOT_
 11696              		.section	.text._ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE8_M_resetEv,"axG",%progbi
 11697              		.align	1
 11698              		.weak	_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE8_M_resetEv
 11699              		.syntax unified
 11700              		.thumb
 11701              		.thumb_func
ARM GAS  /tmp/ccATuxCb.s 			page 387


 11702              		.fpu fpv4-sp-d16
 11704              	_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE8_M_resetEv:
 11705              	.LFB5174:
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
 11706              		.loc 12 431 7
 11707              		.cfi_startproc
 11708              		@ args = 0, pretend = 0, frame = 8
 11709              		@ frame_needed = 1, uses_anonymous_args = 0
 11710 0000 80B5     		push	{r7, lr}
 11711              	.LCFI795:
 11712              		.cfi_def_cfa_offset 8
 11713              		.cfi_offset 7, -8
 11714              		.cfi_offset 14, -4
 11715 0002 82B0     		sub	sp, sp, #8
 11716              	.LCFI796:
 11717              		.cfi_def_cfa_offset 16
 11718 0004 00AF     		add	r7, sp, #0
 11719              	.LCFI797:
 11720              		.cfi_def_cfa_register 7
 11721 0006 7860     		str	r0, [r7, #4]
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 11722              		.loc 12 432 53
 11723 0008 7B68     		ldr	r3, [r7, #4]
 11724 000a 1846     		mov	r0, r3
 11725 000c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfE8_M_resetEv
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 11726              		.loc 12 432 57
 11727 0010 00BF     		nop
 11728 0012 0837     		adds	r7, r7, #8
 11729              	.LCFI798:
 11730              		.cfi_def_cfa_offset 8
 11731 0014 BD46     		mov	sp, r7
 11732              	.LCFI799:
 11733              		.cfi_def_cfa_register 13
 11734              		@ sp needed
 11735 0016 80BD     		pop	{r7, pc}
 11736              		.cfi_endproc
 11737              	.LFE5174:
 11739              		.section	.text._ZSt7forwardISt4pairIffEEOT_RNSt16remove_referenceIS2_E4typeE,"axG",%progbits,_ZSt7
 11740              		.align	1
 11741              		.weak	_ZSt7forwardISt4pairIffEEOT_RNSt16remove_referenceIS2_E4typeE
 11742              		.syntax unified
 11743              		.thumb
 11744              		.thumb_func
 11745              		.fpu fpv4-sp-d16
 11747              	_ZSt7forwardISt4pairIffEEOT_RNSt16remove_referenceIS2_E4typeE:
 11748              	.LFB5175:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 11749              		.loc 13 76 5
 11750              		.cfi_startproc
 11751              		@ args = 0, pretend = 0, frame = 8
 11752              		@ frame_needed = 1, uses_anonymous_args = 0
 11753              		@ link register save eliminated.
 11754 0000 80B4     		push	{r7}
 11755              	.LCFI800:
 11756              		.cfi_def_cfa_offset 4
 11757              		.cfi_offset 7, -4
ARM GAS  /tmp/ccATuxCb.s 			page 388


 11758 0002 83B0     		sub	sp, sp, #12
 11759              	.LCFI801:
 11760              		.cfi_def_cfa_offset 16
 11761 0004 00AF     		add	r7, sp, #0
 11762              	.LCFI802:
 11763              		.cfi_def_cfa_register 7
 11764 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 11765              		.loc 13 77 36
 11766 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 11767              		.loc 13 77 39
 11768 000a 1846     		mov	r0, r3
 11769 000c 0C37     		adds	r7, r7, #12
 11770              	.LCFI803:
 11771              		.cfi_def_cfa_offset 4
 11772 000e BD46     		mov	sp, r7
 11773              	.LCFI804:
 11774              		.cfi_def_cfa_register 13
 11775              		@ sp needed
 11776 0010 5DF8047B 		ldr	r7, [sp], #4
 11777              	.LCFI805:
 11778              		.cfi_restore 7
 11779              		.cfi_def_cfa_offset 0
 11780 0014 7047     		bx	lr
 11781              		.cfi_endproc
 11782              	.LFE5175:
 11784              		.section	.text._ZNSt4pairIffEaSEOS0_,"axG",%progbits,_ZNSt4pairIffEaSEOS0_,comdat
 11785              		.align	1
 11786              		.weak	_ZNSt4pairIffEaSEOS0_
 11787              		.syntax unified
 11788              		.thumb
 11789              		.thumb_func
 11790              		.fpu fpv4-sp-d16
 11792              	_ZNSt4pairIffEaSEOS0_:
 11793              	.LFB5176:
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && !_PCCP::template
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	explicit constexpr pair(_U1&& __x, _U2&& __y)
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && _PCCFP<_U1, _U2>::template
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	constexpr pair(pair<_U1, _U2>&& __p)
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	  second(std::forward<_U2>(__p.second)) { }
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
ARM GAS  /tmp/ccATuxCb.s 			page 389


 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && !_PCCFP<_U1, _U2>::template
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	explicit constexpr pair(pair<_U1, _U2>&& __p)
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	  second(std::forward<_U2>(__p.second)) { }
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename... _Args1, typename... _Args2>
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	_GLIBCXX20_CONSTEXPR
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _GLIBCXX20_CONSTEXPR pair&
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       operator=(typename conditional<
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		       is_copy_assignable<_T2>>::value,
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		const pair&, const __nonesuch&>::type __p)
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	first = __p.first;
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = __p.second;
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _GLIBCXX20_CONSTEXPR pair&
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       operator=(typename conditional<
 11794              		.loc 18 401 7
 11795              		.cfi_startproc
 11796              		@ args = 0, pretend = 0, frame = 8
 11797              		@ frame_needed = 1, uses_anonymous_args = 0
 11798 0000 80B5     		push	{r7, lr}
 11799              	.LCFI806:
 11800              		.cfi_def_cfa_offset 8
 11801              		.cfi_offset 7, -8
 11802              		.cfi_offset 14, -4
 11803 0002 82B0     		sub	sp, sp, #8
 11804              	.LCFI807:
 11805              		.cfi_def_cfa_offset 16
 11806 0004 00AF     		add	r7, sp, #0
 11807              	.LCFI808:
 11808              		.cfi_def_cfa_register 7
 11809 0006 7860     		str	r0, [r7, #4]
 11810 0008 3960     		str	r1, [r7]
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_move_assignable<_T1>,
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		       is_move_assignable<_T2>>::value,
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		pair&&, __nonesuch&&>::type __p)
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       noexcept(__and_<is_nothrow_move_assignable<_T1>,
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_nothrow_move_assignable<_T2>>::value)
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	first = std::forward<first_type>(__p.first);
 11811              		.loc 18 408 39
 11812 000a 3B68     		ldr	r3, [r7]
 11813              		.loc 18 408 34
 11814 000c 1846     		mov	r0, r3
 11815 000e FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 11816 0012 0346     		mov	r3, r0
ARM GAS  /tmp/ccATuxCb.s 			page 390


 11817              		.loc 18 408 8
 11818 0014 1A68     		ldr	r2, [r3]	@ float
 11819 0016 7B68     		ldr	r3, [r7, #4]
 11820 0018 1A60     		str	r2, [r3]	@ float
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 11821              		.loc 18 409 41
 11822 001a 3B68     		ldr	r3, [r7]
 11823 001c 0433     		adds	r3, r3, #4
 11824              		.loc 18 409 36
 11825 001e 1846     		mov	r0, r3
 11826 0020 FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 11827 0024 0346     		mov	r3, r0
 11828              		.loc 18 409 9
 11829 0026 1A68     		ldr	r2, [r3]	@ float
 11830 0028 7B68     		ldr	r3, [r7, #4]
 11831 002a 5A60     		str	r2, [r3, #4]	@ float
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 11832              		.loc 18 410 10
 11833 002c 7B68     		ldr	r3, [r7, #4]
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 11834              		.loc 18 411 7
 11835 002e 1846     		mov	r0, r3
 11836 0030 0837     		adds	r7, r7, #8
 11837              	.LCFI809:
 11838              		.cfi_def_cfa_offset 8
 11839 0032 BD46     		mov	sp, r7
 11840              	.LCFI810:
 11841              		.cfi_def_cfa_register 13
 11842              		@ sp needed
 11843 0034 80BD     		pop	{r7, pc}
 11844              		.cfi_endproc
 11845              	.LFE5176:
 11847              		.section	.text._ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE12_M_construc
 11848              		.align	1
 11849              		.weak	_ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE12_M_constructIJS1_EEE
 11850              		.syntax unified
 11851              		.thumb
 11852              		.thumb_func
 11853              		.fpu fpv4-sp-d16
 11855              	_ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE12_M_constructIJS1_EEEvDpOT_:
 11856              	.LFB5177:
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 11857              		.loc 12 416 2
 11858              		.cfi_startproc
 11859              		@ args = 0, pretend = 0, frame = 8
 11860              		@ frame_needed = 1, uses_anonymous_args = 0
 11861 0000 90B5     		push	{r4, r7, lr}
 11862              	.LCFI811:
 11863              		.cfi_def_cfa_offset 12
 11864              		.cfi_offset 4, -12
 11865              		.cfi_offset 7, -8
 11866              		.cfi_offset 14, -4
 11867 0002 83B0     		sub	sp, sp, #12
 11868              	.LCFI812:
 11869              		.cfi_def_cfa_offset 24
 11870 0004 00AF     		add	r7, sp, #0
 11871              	.LCFI813:
ARM GAS  /tmp/ccATuxCb.s 			page 391


 11872              		.cfi_def_cfa_register 7
 11873 0006 7860     		str	r0, [r7, #4]
 11874 0008 3960     		str	r1, [r7]
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_cast<_Dp*>(this)->_M_payload._M_engaged = true;
 11875              		.loc 12 421 38
 11876 000a 3868     		ldr	r0, [r7]
 11877 000c FFF7FEFF 		bl	_ZSt7forwardISt4pairIffEEOT_RNSt16remove_referenceIS2_E4typeE
 11878 0010 0446     		mov	r4, r0
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Stored_type(std::forward<_Args>(__args)...);
 11879              		.loc 12 420 60
 11880 0012 7B68     		ldr	r3, [r7, #4]
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Stored_type(std::forward<_Args>(__args)...);
 11881              		.loc 12 420 23
 11882 0014 1846     		mov	r0, r3
 11883 0016 FFF7FEFF 		bl	_ZSt11__addressofINSt22_Optional_payload_baseISt4pairIffEE8_StorageIS2_Lb1EEEEPT_RS6_
 11884 001a 0346     		mov	r3, r0
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 11885              		.loc 12 419 4
 11886 001c 1946     		mov	r1, r3
 11887 001e 0820     		movs	r0, #8
 11888 0020 FFF7FEFF 		bl	_ZnwjPv
 11889 0024 0346     		mov	r3, r0
 11890 0026 2246     		mov	r2, r4
 11891 0028 92E80300 		ldm	r2, {r0, r1}
 11892 002c 83E80300 		stm	r3, {r0, r1}
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 11893              		.loc 12 422 51
 11894 0030 7B68     		ldr	r3, [r7, #4]
 11895 0032 0122     		movs	r2, #1
 11896 0034 1A72     		strb	r2, [r3, #8]
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 11897              		.loc 12 423 2
 11898 0036 00BF     		nop
 11899 0038 0C37     		adds	r7, r7, #12
 11900              	.LCFI814:
 11901              		.cfi_def_cfa_offset 12
 11902 003a BD46     		mov	sp, r7
 11903              	.LCFI815:
 11904              		.cfi_def_cfa_register 13
 11905              		@ sp needed
 11906 003c 90BD     		pop	{r4, r7, pc}
 11907              		.cfi_endproc
 11908              	.LFE5177:
 11910              		.section	.text._ZNSt5arrayIP14CurrentLimiterLj2EE4dataEv,"axG",%progbits,_ZNSt5arrayIP14CurrentLim
 11911              		.align	1
 11912              		.weak	_ZNSt5arrayIP14CurrentLimiterLj2EE4dataEv
 11913              		.syntax unified
 11914              		.thumb
 11915              		.thumb_func
 11916              		.fpu fpv4-sp-d16
 11918              	_ZNSt5arrayIP14CurrentLimiterLj2EE4dataEv:
 11919              	.LFB5178:
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       end() const noexcept
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_iterator(data() + _Nm); }
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
ARM GAS  /tmp/ccATuxCb.s 			page 392


 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       rbegin() noexcept
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return reverse_iterator(end()); }
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       rbegin() const noexcept
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_reverse_iterator(end()); }
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       rend() noexcept
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return reverse_iterator(begin()); }
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       rend() const noexcept
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_reverse_iterator(begin()); }
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       cbegin() const noexcept
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_iterator(data()); }
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       cend() const noexcept
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_iterator(data() + _Nm); }
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       crbegin() const noexcept
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_reverse_iterator(end()); }
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       crend() const noexcept
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_reverse_iterator(begin()); }
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       // Capacity.
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       constexpr size_type
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       size() const noexcept { return _Nm; }
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       constexpr size_type
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       max_size() const noexcept { return _Nm; }
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX_NODISCARD constexpr bool
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       empty() const noexcept { return size() == 0; }
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       // Element access.
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR reference
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       operator[](size_type __n) noexcept
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return _AT_Type::_S_ref(_M_elems, __n); }
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       constexpr const_reference
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       operator[](size_type __n) const noexcept
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return _AT_Type::_S_ref(_M_elems, __n); }
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR reference
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       at(size_type __n)
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       {
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 	if (__n >= _Nm)
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 	  std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 					    ">= _Nm (which is %zu)"),
ARM GAS  /tmp/ccATuxCb.s 			page 393


 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 					__n, _Nm);
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 	return _AT_Type::_S_ref(_M_elems, __n);
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       }
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       constexpr const_reference
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       at(size_type __n) const
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       {
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 	// Result of conditional expression must be an lvalue so use
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 	// boolean ? lvalue : (throw-expr, lvalue)
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 	return __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 	  : (std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 					       ">= _Nm (which is %zu)"),
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 					   __n, _Nm),
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 	     _AT_Type::_S_ref(_M_elems, 0));
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       }
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR reference
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       front() noexcept
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return *begin(); }
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       constexpr const_reference
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       front() const noexcept
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return _AT_Type::_S_ref(_M_elems, 0); }
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR reference
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       back() noexcept
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return _Nm ? *(end() - 1) : *end(); }
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       constexpr const_reference
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       back() const noexcept
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       {
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****  	           : _AT_Type::_S_ref(_M_elems, 0);
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       }
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR pointer
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       data() noexcept
 11920              		.loc 20 234 7
 11921              		.cfi_startproc
 11922              		@ args = 0, pretend = 0, frame = 8
 11923              		@ frame_needed = 1, uses_anonymous_args = 0
 11924 0000 80B5     		push	{r7, lr}
 11925              	.LCFI816:
 11926              		.cfi_def_cfa_offset 8
 11927              		.cfi_offset 7, -8
 11928              		.cfi_offset 14, -4
 11929 0002 82B0     		sub	sp, sp, #8
 11930              	.LCFI817:
 11931              		.cfi_def_cfa_offset 16
 11932 0004 00AF     		add	r7, sp, #0
 11933              	.LCFI818:
 11934              		.cfi_def_cfa_register 7
 11935 0006 7860     		str	r0, [r7, #4]
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return _AT_Type::_S_ptr(_M_elems); }
 11936              		.loc 20 235 33
 11937 0008 7B68     		ldr	r3, [r7, #4]
 11938              		.loc 20 235 32
ARM GAS  /tmp/ccATuxCb.s 			page 394


 11939 000a 1846     		mov	r0, r3
 11940 000c FFF7FEFF 		bl	_ZNSt14__array_traitsIP14CurrentLimiterLj2EE6_S_ptrERA2_KS1_
 11941 0010 0346     		mov	r3, r0
 11942              		.loc 20 235 44
 11943 0012 1846     		mov	r0, r3
 11944 0014 0837     		adds	r7, r7, #8
 11945              	.LCFI819:
 11946              		.cfi_def_cfa_offset 8
 11947 0016 BD46     		mov	sp, r7
 11948              	.LCFI820:
 11949              		.cfi_def_cfa_register 13
 11950              		@ sp needed
 11951 0018 80BD     		pop	{r7, pc}
 11952              		.cfi_endproc
 11953              	.LFE5178:
 11955              		.section	.text._ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv,"axG",%progbits,_ZNKSt7variantIJfPfP1
 11956              		.align	1
 11957              		.weak	_ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv
 11958              		.syntax unified
 11959              		.thumb
 11960              		.thumb_func
 11961              		.fpu fpv4-sp-d16
 11963              	_ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv:
 11964              	.LFB5179:
1356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant(const variant& __rhs) = default;
1357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant(variant&&) = default;
1358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant& operator=(const variant&) = default;
1359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant& operator=(variant&&) = default;
1360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ~variant() = default;
1361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp,
1363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<sizeof...(_Types) != 0>,
1364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__not_in_place_tag<_Tp>>,
1365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename _Tj = __accepted_type<_Tp&&>,
1366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tj>
1367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				      && is_constructible_v<_Tj, _Tp>>>
1368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
1369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(_Tp&& __t)
1370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	noexcept(is_nothrow_constructible_v<_Tj, _Tp>)
1371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: variant(in_place_index<__accepted_index<_Tp>>,
1372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Tp>(__t))
1373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename... _Args,
1376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tp>
1377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				      && is_constructible_v<_Tp, _Args...>>>
1378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_type_t<_Tp>, _Args&&... __args)
1380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: variant(in_place_index<__index_of<_Tp>>,
1381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...)
1382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename _Up, typename... _Args,
1385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tp>
1386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				      && is_constructible_v<_Tp,
1387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					   initializer_list<_Up>&, _Args...>>>
1388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
ARM GAS  /tmp/ccATuxCb.s 			page 395


1389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_type_t<_Tp>, initializer_list<_Up> __il,
1390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Args&&... __args)
1391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: variant(in_place_index<__index_of<_Tp>>, __il,
1392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...)
1393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args,
1396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename _Tp = __to_type<_Np>,
1397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<is_constructible_v<_Tp, _Args...>>>
1398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_index_t<_Np>, _Args&&... __args)
1400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(in_place_index<_Np>, std::forward<_Args>(__args)...),
1401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Default_ctor_enabler(_Enable_default_constructor_tag{})
1402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Up, typename... _Args,
1405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename _Tp = __to_type<_Np>,
1406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<is_constructible_v<_Tp,
1407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 							 initializer_list<_Up>&,
1408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 							 _Args...>>>
1409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_index_t<_Np>, initializer_list<_Up> __il,
1411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Args&&... __args)
1412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(in_place_index<_Np>, __il, std::forward<_Args>(__args)...),
1413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Default_ctor_enabler(_Enable_default_constructor_tag{})
1414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<__exactly_once<__accepted_type<_Tp&&>>
1418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    && is_constructible_v<__accepted_type<_Tp&&>, _Tp>
1419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    && is_assignable_v<__accepted_type<_Tp&&>&, _Tp>,
1420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    variant&>
1421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	operator=(_Tp&& __rhs)
1422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	noexcept(is_nothrow_assignable_v<__accepted_type<_Tp&&>&, _Tp>
1423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		 && is_nothrow_constructible_v<__accepted_type<_Tp&&>, _Tp>)
1424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  constexpr auto __index = __accepted_index<_Tp>;
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if (index() == __index)
1427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
1428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      using _Tj = __accepted_type<_Tp&&>;
1431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      if constexpr (is_nothrow_constructible_v<_Tj, _Tp>
1432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			    || !is_nothrow_move_constructible_v<_Tj>)
1433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		this->emplace<__index>(std::forward<_Tp>(__rhs));
1434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      else
1435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		operator=(variant(std::forward<_Tp>(__rhs)));
1436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return *this;
1438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename... _Args>
1441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<_Tp, _Args...> && __exactly_once<_Tp>,
1442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    _Tp&>
1443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(_Args&&... __args)
1444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  constexpr size_t __index = __index_of<_Tp>;
ARM GAS  /tmp/ccATuxCb.s 			page 396


1446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return this->emplace<__index>(std::forward<_Args>(__args)...);
1447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename _Up, typename... _Args>
1450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>
1451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    && __exactly_once<_Tp>,
1452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    _Tp&>
1453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
1454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  constexpr size_t __index = __index_of<_Tp>;
1456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return this->emplace<__index>(__il, std::forward<_Args>(__args)...);
1457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
1460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,
1461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				       _Args...>,
1462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    variant_alternative_t<_Np, variant>&>
1463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(_Args&&... __args)
1464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  static_assert(_Np < sizeof...(_Types),
1466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			"The index must be in [0, number of alternatives)");
1467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  using type = variant_alternative_t<_Np, variant>;
1468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // Provide the strong exception-safety guarantee when possible,
1469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // to avoid becoming valueless.
1470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (is_nothrow_constructible_v<type, _Args...>)
1471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this,
1474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...);
1475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else if constexpr (is_scalar_v<type>)
1477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This might invoke a potentially-throwing conversion operator:
1479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      const type __tmp(std::forward<_Args>(__args)...);
1480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // But these steps won't throw:
1481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this, __tmp);
1483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
1485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      && _Traits::_S_move_assign)
1486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This construction might throw:
1488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      variant __tmp(in_place_index<_Np>,
1489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			    std::forward<_Args>(__args)...);
1490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // But _Never_valueless_alt<type> means this won't:
1491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      *this = std::move(__tmp);
1492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This case only provides the basic exception-safety guarantee,
1496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // i.e. the variant can become valueless.
1497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __try
1499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant_construct_by_index<_Np>(*this,
1501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    std::forward<_Args>(__args)...);
1502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
ARM GAS  /tmp/ccATuxCb.s 			page 397


1503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __catch (...)
1504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  this->_M_index = variant_npos;
1506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __throw_exception_again;
1507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::get<_Np>(*this);
1510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Up, typename... _Args>
1513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,
1514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				       initializer_list<_Up>&, _Args...>,
1515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    variant_alternative_t<_Np, variant>&>
1516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
1517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  static_assert(_Np < sizeof...(_Types),
1519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			"The index must be in [0, number of alternatives)");
1520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  using type = variant_alternative_t<_Np, variant>;
1521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // Provide the strong exception-safety guarantee when possible,
1522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // to avoid becoming valueless.
1523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (is_nothrow_constructible_v<type,
1524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						   initializer_list<_Up>&,
1525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						   _Args...>)
1526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this, __il,
1529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...);
1530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
1532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      && _Traits::_S_move_assign)
1533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This construction might throw:
1535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      variant __tmp(in_place_index<_Np>, __il,
1536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			    std::forward<_Args>(__args)...);
1537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // But _Never_valueless_alt<type> means this won't:
1538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      *this = std::move(__tmp);
1539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This case only provides the basic exception-safety guarantee,
1543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // i.e. the variant can become valueless.
1544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __try
1546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant_construct_by_index<_Np>(*this, __il,
1548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    std::forward<_Args>(__args)...);
1549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __catch (...)
1551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  this->_M_index = variant_npos;
1553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __throw_exception_again;
1554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::get<_Np>(*this);
1557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr bool valueless_by_exception() const noexcept
ARM GAS  /tmp/ccATuxCb.s 			page 398


1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return !this->_M_valid(); }
1561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr size_t index() const noexcept
 11965              		.loc 3 1562 24
 11966              		.cfi_startproc
 11967              		@ args = 0, pretend = 0, frame = 8
 11968              		@ frame_needed = 1, uses_anonymous_args = 0
 11969              		@ link register save eliminated.
 11970 0000 80B4     		push	{r7}
 11971              	.LCFI821:
 11972              		.cfi_def_cfa_offset 4
 11973              		.cfi_offset 7, -4
 11974 0002 83B0     		sub	sp, sp, #12
 11975              	.LCFI822:
 11976              		.cfi_def_cfa_offset 16
 11977 0004 00AF     		add	r7, sp, #0
 11978              	.LCFI823:
 11979              		.cfi_def_cfa_register 7
 11980 0006 7860     		str	r0, [r7, #4]
1563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
1564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	using __index_type = typename _Base::__index_type;
1565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (__detail::__variant::__never_valueless<_Types...>())
1566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return this->_M_index;
 11981              		.loc 3 1566 17
 11982 0008 7B68     		ldr	r3, [r7, #4]
 11983 000a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
1567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
1568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return make_signed_t<__index_type>(this->_M_index);
1569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else
1570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return size_t(__index_type(this->_M_index + 1)) - 1;
1571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 11984              		.loc 3 1571 7
 11985 000c 1846     		mov	r0, r3
 11986 000e 0C37     		adds	r7, r7, #12
 11987              	.LCFI824:
 11988              		.cfi_def_cfa_offset 4
 11989 0010 BD46     		mov	sp, r7
 11990              	.LCFI825:
 11991              		.cfi_def_cfa_register 13
 11992              		@ sp needed
 11993 0012 5DF8047B 		ldr	r7, [sp], #4
 11994              	.LCFI826:
 11995              		.cfi_restore 7
 11996              		.cfi_def_cfa_offset 0
 11997 0016 7047     		bx	lr
 11998              		.cfi_endproc
 11999              	.LFE5179:
 12001              		.section	.text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16i
 12002              		.align	1
 12003              		.weak	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16in_place_i
 12004              		.syntax unified
 12005              		.thumb
 12006              		.thumb_func
 12007              		.fpu fpv4-sp-d16
 12009              	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16in_place_index_tI
 12010              	.LFB5185:
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
ARM GAS  /tmp/ccATuxCb.s 			page 399


 12011              		.loc 3 262 5
 12012              		.cfi_startproc
 12013              		@ args = 0, pretend = 0, frame = 8
 12014              		@ frame_needed = 1, uses_anonymous_args = 0
 12015 0000 80B5     		push	{r7, lr}
 12016              	.LCFI827:
 12017              		.cfi_def_cfa_offset 8
 12018              		.cfi_offset 7, -8
 12019              		.cfi_offset 14, -4
 12020 0002 82B0     		sub	sp, sp, #8
 12021              	.LCFI828:
 12022              		.cfi_def_cfa_offset 16
 12023 0004 00AF     		add	r7, sp, #0
 12024              	.LCFI829:
 12025              		.cfi_def_cfa_register 7
 12026 0006 3871     		strb	r0, [r7, #4]
 12027 0008 3960     		str	r1, [r7]
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 12028              		.loc 3 263 34
 12029 000a 3868     		ldr	r0, [r7]
 12030 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt16remove_refe
 12031 0010 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 12032              		.loc 3 263 55
 12033 0012 1846     		mov	r0, r3
 12034 0014 FFF7FEFF 		bl	_ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv
 12035 0018 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 12036              		.loc 3 263 59
 12037 001a 1846     		mov	r0, r3
 12038 001c 0837     		adds	r7, r7, #8
 12039              	.LCFI830:
 12040              		.cfi_def_cfa_offset 8
 12041 001e BD46     		mov	sp, r7
 12042              	.LCFI831:
 12043              		.cfi_def_cfa_register 13
 12044              		@ sp needed
 12045 0020 80BD     		pop	{r7, pc}
 12046              		.cfi_endproc
 12047              	.LFE5185:
 12049              		.section	.text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEED
 12050              		.align	1
 12051              		.weak	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_p
 12052              		.syntax unified
 12053              		.thumb
 12054              		.thumb_func
 12055              		.fpu fpv4-sp-d16
 12057              	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_in
 12058              	.LFB5184:
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 12059              		.loc 3 267 5
 12060              		.cfi_startproc
 12061              		@ args = 0, pretend = 0, frame = 8
 12062              		@ frame_needed = 1, uses_anonymous_args = 0
 12063 0000 90B5     		push	{r4, r7, lr}
 12064              	.LCFI832:
 12065              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccATuxCb.s 			page 400


 12066              		.cfi_offset 4, -12
 12067              		.cfi_offset 7, -8
 12068              		.cfi_offset 14, -4
 12069 0002 83B0     		sub	sp, sp, #12
 12070              	.LCFI833:
 12071              		.cfi_def_cfa_offset 24
 12072 0004 00AF     		add	r7, sp, #0
 12073              	.LCFI834:
 12074              		.cfi_def_cfa_register 7
 12075 0006 3871     		strb	r0, [r7, #4]
 12076 0008 3960     		str	r1, [r7]
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 12077              		.loc 3 270 30
 12078 000a 3868     		ldr	r0, [r7]
 12079 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove_re
 12080 0010 0346     		mov	r3, r0
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 12081              		.loc 3 269 30
 12082 0012 1946     		mov	r1, r3
 12083 0014 2046     		mov	r0, r4
 12084 0016 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16in_place_inde
 12085 001a 0346     		mov	r3, r0
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 12086              		.loc 3 271 5
 12087 001c 1846     		mov	r0, r3
 12088 001e 0C37     		adds	r7, r7, #12
 12089              	.LCFI835:
 12090              		.cfi_def_cfa_offset 12
 12091 0020 BD46     		mov	sp, r7
 12092              	.LCFI836:
 12093              		.cfi_def_cfa_register 13
 12094              		@ sp needed
 12095 0022 90BD     		pop	{r4, r7, pc}
 12096              		.cfi_endproc
 12097              	.LFE5184:
 12099              		.section	.text._ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEE
 12100              		.align	1
 12101              		.weak	_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_
 12102              		.syntax unified
 12103              		.thumb
 12104              		.thumb_func
 12105              		.fpu fpv4-sp-d16
 12107              	_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_i
 12108              	.LFB5183:
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 12109              		.loc 3 267 5
 12110              		.cfi_startproc
 12111              		@ args = 0, pretend = 0, frame = 8
 12112              		@ frame_needed = 1, uses_anonymous_args = 0
 12113 0000 90B5     		push	{r4, r7, lr}
 12114              	.LCFI837:
 12115              		.cfi_def_cfa_offset 12
 12116              		.cfi_offset 4, -12
 12117              		.cfi_offset 7, -8
 12118              		.cfi_offset 14, -4
 12119 0002 83B0     		sub	sp, sp, #12
 12120              	.LCFI838:
ARM GAS  /tmp/ccATuxCb.s 			page 401


 12121              		.cfi_def_cfa_offset 24
 12122 0004 00AF     		add	r7, sp, #0
 12123              	.LCFI839:
 12124              		.cfi_def_cfa_register 7
 12125 0006 3871     		strb	r0, [r7, #4]
 12126 0008 3960     		str	r1, [r7]
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 12127              		.loc 3 270 30
 12128 000a 3868     		ldr	r0, [r7]
 12129 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remove_r
 12130 0010 0346     		mov	r3, r0
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 12131              		.loc 3 269 30
 12132 0012 1946     		mov	r1, r3
 12133 0014 2046     		mov	r0, r4
 12134 0016 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_plac
 12135 001a 0346     		mov	r3, r0
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 12136              		.loc 3 271 5
 12137 001c 1846     		mov	r0, r3
 12138 001e 0C37     		adds	r7, r7, #12
 12139              	.LCFI840:
 12140              		.cfi_def_cfa_offset 12
 12141 0020 BD46     		mov	sp, r7
 12142              	.LCFI841:
 12143              		.cfi_def_cfa_register 13
 12144              		@ sp needed
 12145 0022 90BD     		pop	{r4, r7, pc}
 12146              		.cfi_endproc
 12147              	.LFE5183:
 12149              		.section	.text._ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_,"axG"
 12150              		.align	1
 12151              		.weak	_ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
 12152              		.syntax unified
 12153              		.thumb
 12154              		.thumb_func
 12155              		.fpu fpv4-sp-d16
 12157              	_ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:
 12158              	.LFB5182:
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 12159              		.loc 3 276 5
 12160              		.cfi_startproc
 12161              		@ args = 0, pretend = 0, frame = 8
 12162              		@ frame_needed = 1, uses_anonymous_args = 0
 12163 0000 90B5     		push	{r4, r7, lr}
 12164              	.LCFI842:
 12165              		.cfi_def_cfa_offset 12
 12166              		.cfi_offset 4, -12
 12167              		.cfi_offset 7, -8
 12168              		.cfi_offset 14, -4
 12169 0002 83B0     		sub	sp, sp, #12
 12170              	.LCFI843:
 12171              		.cfi_def_cfa_offset 24
 12172 0004 00AF     		add	r7, sp, #0
 12173              	.LCFI844:
 12174              		.cfi_def_cfa_register 7
 12175 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccATuxCb.s 			page 402


 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 12176              		.loc 3 279 32
 12177 0008 7868     		ldr	r0, [r7, #4]
 12178 000a FFF7FEFF 		bl	_ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE
 12179 000e 0346     		mov	r3, r0
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Variant>(__v)._M_u);
 12180              		.loc 3 278 30
 12181 0010 1946     		mov	r1, r3
 12182 0012 2046     		mov	r0, r4
 12183 0014 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_pla
 12184 0018 0346     		mov	r3, r0
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 12185              		.loc 3 280 5
 12186 001a 1846     		mov	r0, r3
 12187 001c 0C37     		adds	r7, r7, #12
 12188              	.LCFI845:
 12189              		.cfi_def_cfa_offset 12
 12190 001e BD46     		mov	sp, r7
 12191              	.LCFI846:
 12192              		.cfi_def_cfa_register 13
 12193              		@ sp needed
 12194 0020 90BD     		pop	{r4, r7, pc}
 12195              		.cfi_endproc
 12196              	.LFE5182:
 12198              		.section	.text._ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_E
 12199              		.align	1
 12200              		.weak	_ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeER
 12201              		.syntax unified
 12202              		.thumb
 12203              		.thumb_func
 12204              		.fpu fpv4-sp-d16
 12206              	_ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:
 12207              	.LFB5181:
1572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void
1574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       swap(variant& __rhs)
1575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       noexcept((__is_nothrow_swappable<_Types>::value && ...)
1576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       && is_nothrow_move_constructible_v<variant>)
1577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
1578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::__raw_idx_visit(
1579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
1580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
1581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
1582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
1583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (this->index() == __rhs_index)
1584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
1585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    auto& __this_mem =
1586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      std::get<__rhs_index>(*this);
1587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    using std::swap;
1588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    swap(__this_mem, __rhs_mem);
1589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
1590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		else
1591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
1592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    if (!this->valueless_by_exception()) [[__likely__]]
1593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      {
1594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			auto __tmp(std::move(__rhs_mem));
1595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			__rhs = std::move(*this);
ARM GAS  /tmp/ccATuxCb.s 			page 403


1596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			this->_M_destructive_move(__rhs_index,
1597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						  std::move(__tmp));
1598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      }
1599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    else
1600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      {
1601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			this->_M_destructive_move(__rhs_index,
1602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						  std::move(__rhs_mem));
1603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			__rhs._M_reset();
1604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      }
1605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
1606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
1607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    else
1608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
1609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (!this->valueless_by_exception()) [[__likely__]]
1610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
1611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    __rhs = std::move(*this);
1612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    this->_M_reset();
1613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
1614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
1615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __rhs);
1616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
1617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     private:
1619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #if defined(__clang__) && __clang_major__ <= 7
1621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     public:
1622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_M_u; // See https://bugs.llvm.org/show_bug.cgi?id=31852
1623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     private:
1624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #endif
1625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Vp>
1627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend constexpr decltype(auto)
1628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::__get(_Vp&& __v) noexcept;
1629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Vp>
1631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend void*
1632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::__get_storage(_Vp&& __v) noexcept;
1633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP) \
1635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Tp> \
1636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend constexpr bool \
1637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	operator __OP(const variant<_Tp...>& __lhs, \
1638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      const variant<_Tp...>& __rhs);
1639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(<)
1641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(<=)
1642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(==)
1643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(!=)
1644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(>=)
1645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(>)
1646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #undef _VARIANT_RELATION_FUNCTION_TEMPLATE
1648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
1649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
1651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(variant<_Types...>& __v)
ARM GAS  /tmp/ccATuxCb.s 			page 404


 12208              		.loc 3 1652 5
 12209              		.cfi_startproc
 12210              		@ args = 0, pretend = 0, frame = 8
 12211              		@ frame_needed = 1, uses_anonymous_args = 0
 12212 0000 80B5     		push	{r7, lr}
 12213              	.LCFI847:
 12214              		.cfi_def_cfa_offset 8
 12215              		.cfi_offset 7, -8
 12216              		.cfi_offset 14, -4
 12217 0002 82B0     		sub	sp, sp, #8
 12218              	.LCFI848:
 12219              		.cfi_def_cfa_offset 16
 12220 0004 00AF     		add	r7, sp, #0
 12221              	.LCFI849:
 12222              		.cfi_def_cfa_register 7
 12223 0006 7860     		str	r0, [r7, #4]
1653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(_Np < sizeof...(_Types),
1655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "The index must be in [0, number of alternatives)");
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if (__v.index() != _Np)
 12224              		.loc 3 1656 20
 12225 0008 7868     		ldr	r0, [r7, #4]
 12226 000a FFF7FEFF 		bl	_ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv
 12227 000e 0346     		mov	r3, r0
 12228              		.loc 3 1656 23
 12229 0010 022B     		cmp	r3, #2
 12230 0012 14BF     		ite	ne
 12231 0014 0123     		movne	r3, #1
 12232 0016 0023     		moveq	r3, #0
 12233 0018 DBB2     		uxtb	r3, r3
 12234              		.loc 3 1656 7
 12235 001a 002B     		cmp	r3, #0
 12236 001c 06D0     		beq	.L546
1657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 12237              		.loc 3 1657 28
 12238 001e 7868     		ldr	r0, [r7, #4]
 12239 0020 FFF7FEFF 		bl	_ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv
 12240 0024 0346     		mov	r3, r0
 12241 0026 1846     		mov	r0, r3
 12242 0028 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessb
 12243              	.L546:
1658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __detail::__variant::__get<_Np>(__v);
 12244              		.loc 3 1658 45
 12245 002c 7868     		ldr	r0, [r7, #4]
 12246 002e FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
 12247 0032 0346     		mov	r3, r0
1659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 12248              		.loc 3 1659 5
 12249 0034 1846     		mov	r0, r3
 12250 0036 0837     		adds	r7, r7, #8
 12251              	.LCFI850:
 12252              		.cfi_def_cfa_offset 8
 12253 0038 BD46     		mov	sp, r7
 12254              	.LCFI851:
 12255              		.cfi_def_cfa_register 13
 12256              		@ sp needed
 12257 003a 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccATuxCb.s 			page 405


 12258              		.cfi_endproc
 12259              	.LFE5181:
 12261              		.section	.text._ZN10OutputPortIfE7presentEv,"axG",%progbits,_ZN10OutputPortIfE7presentEv,comdat
 12262              		.align	1
 12263              		.weak	_ZN10OutputPortIfE7presentEv
 12264              		.syntax unified
 12265              		.thumb
 12266              		.thumb_func
 12267              		.fpu fpv4-sp-d16
 12269              	_ZN10OutputPortIfE7presentEv:
 12270              	.LFB5186:
  73:Inc/component.hpp ****         if (age_ == 0) {
 12271              		.loc 15 73 22
 12272              		.cfi_startproc
 12273              		@ args = 0, pretend = 0, frame = 8
 12274              		@ frame_needed = 1, uses_anonymous_args = 0
 12275 0000 80B5     		push	{r7, lr}
 12276              	.LCFI852:
 12277              		.cfi_def_cfa_offset 8
 12278              		.cfi_offset 7, -8
 12279              		.cfi_offset 14, -4
 12280 0002 82B0     		sub	sp, sp, #8
 12281              	.LCFI853:
 12282              		.cfi_def_cfa_offset 16
 12283 0004 00AF     		add	r7, sp, #0
 12284              	.LCFI854:
 12285              		.cfi_def_cfa_register 7
 12286 0006 7860     		str	r0, [r7, #4]
 12287 0008 3960     		str	r1, [r7]
  74:Inc/component.hpp ****             return content_;
 12288              		.loc 15 74 13
 12289 000a 3B68     		ldr	r3, [r7]
 12290 000c 1B68     		ldr	r3, [r3]
  74:Inc/component.hpp ****             return content_;
 12291              		.loc 15 74 9
 12292 000e 002B     		cmp	r3, #0
 12293 0010 06D1     		bne	.L549
  75:Inc/component.hpp ****         } else {
 12294              		.loc 15 75 20
 12295 0012 3B68     		ldr	r3, [r7]
 12296 0014 0433     		adds	r3, r3, #4
 12297 0016 1946     		mov	r1, r3
 12298 0018 7868     		ldr	r0, [r7, #4]
 12299 001a FFF7FEFF 		bl	_ZNSt8optionalIfEC1IRfLb1EEEOT_
 12300 001e 03E0     		b	.L550
 12301              	.L549:
  77:Inc/component.hpp ****         }
 12302              		.loc 15 77 25
 12303 0020 1146     		mov	r1, r2
 12304 0022 7868     		ldr	r0, [r7, #4]
 12305 0024 FFF7FEFF 		bl	_ZNSt8optionalIfEC1ESt9nullopt_t
 12306              	.L550:
  79:Inc/component.hpp **** 
 12307              		.loc 15 79 5
 12308 0028 7868     		ldr	r0, [r7, #4]
 12309 002a 0837     		adds	r7, r7, #8
 12310              	.LCFI855:
ARM GAS  /tmp/ccATuxCb.s 			page 406


 12311              		.cfi_def_cfa_offset 8
 12312 002c BD46     		mov	sp, r7
 12313              	.LCFI856:
 12314              		.cfi_def_cfa_register 13
 12315              		@ sp needed
 12316 002e 80BD     		pop	{r7, pc}
 12317              		.cfi_endproc
 12318              	.LFE5186:
 12320              		.section	.text._ZNSt8optionalIfEC2ESt9nullopt_t,"axG",%progbits,_ZNSt8optionalIfEC5ESt9nullopt_t,c
 12321              		.align	1
 12322              		.weak	_ZNSt8optionalIfEC2ESt9nullopt_t
 12323              		.syntax unified
 12324              		.thumb
 12325              		.thumb_func
 12326              		.fpu fpv4-sp-d16
 12328              	_ZNSt8optionalIfEC2ESt9nullopt_t:
 12329              	.LFB5188:
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 12330              		.loc 12 693 17
 12331              		.cfi_startproc
 12332              		@ args = 0, pretend = 0, frame = 8
 12333              		@ frame_needed = 1, uses_anonymous_args = 0
 12334 0000 80B5     		push	{r7, lr}
 12335              	.LCFI857:
 12336              		.cfi_def_cfa_offset 8
 12337              		.cfi_offset 7, -8
 12338              		.cfi_offset 14, -4
 12339 0002 82B0     		sub	sp, sp, #8
 12340              	.LCFI858:
 12341              		.cfi_def_cfa_offset 16
 12342 0004 00AF     		add	r7, sp, #0
 12343              	.LCFI859:
 12344              		.cfi_def_cfa_register 7
 12345 0006 7860     		str	r0, [r7, #4]
 12346 0008 3970     		strb	r1, [r7]
 12347              	.LBB89:
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 12348              		.loc 12 693 46
 12349 000a 7B68     		ldr	r3, [r7, #4]
 12350 000c 1846     		mov	r0, r3
 12351 000e FFF7FEFF 		bl	_ZNSt14_Optional_baseIfLb1ELb1EEC2Ev
 12352              	.LBE89:
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 12353              		.loc 12 693 48
 12354 0012 7B68     		ldr	r3, [r7, #4]
 12355 0014 1846     		mov	r0, r3
 12356 0016 0837     		adds	r7, r7, #8
 12357              	.LCFI860:
 12358              		.cfi_def_cfa_offset 8
 12359 0018 BD46     		mov	sp, r7
 12360              	.LCFI861:
 12361              		.cfi_def_cfa_register 13
 12362              		@ sp needed
 12363 001a 80BD     		pop	{r7, pc}
 12364              		.cfi_endproc
 12365              	.LFE5188:
 12367              		.weak	_ZNSt8optionalIfEC1ESt9nullopt_t
ARM GAS  /tmp/ccATuxCb.s 			page 407


 12368              		.thumb_set _ZNSt8optionalIfEC1ESt9nullopt_t,_ZNSt8optionalIfEC2ESt9nullopt_t
 12369              		.section	.text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt1
 12370              		.align	1
 12371              		.weak	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place
 12372              		.syntax unified
 12373              		.thumb
 12374              		.thumb_func
 12375              		.fpu fpv4-sp-d16
 12377              	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_index_
 12378              	.LFB5193:
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 12379              		.loc 3 262 5
 12380              		.cfi_startproc
 12381              		@ args = 0, pretend = 0, frame = 8
 12382              		@ frame_needed = 1, uses_anonymous_args = 0
 12383 0000 80B5     		push	{r7, lr}
 12384              	.LCFI862:
 12385              		.cfi_def_cfa_offset 8
 12386              		.cfi_offset 7, -8
 12387              		.cfi_offset 14, -4
 12388 0002 82B0     		sub	sp, sp, #8
 12389              	.LCFI863:
 12390              		.cfi_def_cfa_offset 16
 12391 0004 00AF     		add	r7, sp, #0
 12392              	.LCFI864:
 12393              		.cfi_def_cfa_register 7
 12394 0006 3871     		strb	r0, [r7, #4]
 12395 0008 3960     		str	r1, [r7]
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 12396              		.loc 3 263 34
 12397 000a 3868     		ldr	r0, [r7]
 12398 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove_re
 12399 0010 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 12400              		.loc 3 263 55
 12401 0012 1846     		mov	r0, r3
 12402 0014 FFF7FEFF 		bl	_ZNRSt8__detail9__variant14_UninitializedIPfLb1EE6_M_getEv
 12403 0018 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 12404              		.loc 3 263 59
 12405 001a 1846     		mov	r0, r3
 12406 001c 0837     		adds	r7, r7, #8
 12407              	.LCFI865:
 12408              		.cfi_def_cfa_offset 8
 12409 001e BD46     		mov	sp, r7
 12410              	.LCFI866:
 12411              		.cfi_def_cfa_register 13
 12412              		@ sp needed
 12413 0020 80BD     		pop	{r7, pc}
 12414              		.cfi_endproc
 12415              	.LFE5193:
 12417              		.section	.text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEE
 12418              		.align	1
 12419              		.weak	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_
 12420              		.syntax unified
 12421              		.thumb
 12422              		.thumb_func
ARM GAS  /tmp/ccATuxCb.s 			page 408


 12423              		.fpu fpv4-sp-d16
 12425              	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_i
 12426              	.LFB5192:
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 12427              		.loc 3 267 5
 12428              		.cfi_startproc
 12429              		@ args = 0, pretend = 0, frame = 8
 12430              		@ frame_needed = 1, uses_anonymous_args = 0
 12431 0000 90B5     		push	{r4, r7, lr}
 12432              	.LCFI867:
 12433              		.cfi_def_cfa_offset 12
 12434              		.cfi_offset 4, -12
 12435              		.cfi_offset 7, -8
 12436              		.cfi_offset 14, -4
 12437 0002 83B0     		sub	sp, sp, #12
 12438              	.LCFI868:
 12439              		.cfi_def_cfa_offset 24
 12440 0004 00AF     		add	r7, sp, #0
 12441              	.LCFI869:
 12442              		.cfi_def_cfa_register 7
 12443 0006 3871     		strb	r0, [r7, #4]
 12444 0008 3960     		str	r1, [r7]
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 12445              		.loc 3 270 30
 12446 000a 3868     		ldr	r0, [r7]
 12447 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remove_r
 12448 0010 0346     		mov	r3, r0
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 12449              		.loc 3 269 30
 12450 0012 1946     		mov	r1, r3
 12451 0014 2046     		mov	r0, r4
 12452 0016 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_in
 12453 001a 0346     		mov	r3, r0
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 12454              		.loc 3 271 5
 12455 001c 1846     		mov	r0, r3
 12456 001e 0C37     		adds	r7, r7, #12
 12457              	.LCFI870:
 12458              		.cfi_def_cfa_offset 12
 12459 0020 BD46     		mov	sp, r7
 12460              	.LCFI871:
 12461              		.cfi_def_cfa_register 13
 12462              		@ sp needed
 12463 0022 90BD     		pop	{r4, r7, pc}
 12464              		.cfi_endproc
 12465              	.LFE5192:
 12467              		.section	.text._ZNSt8__detail9__variant5__getILj1ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_,"axG"
 12468              		.align	1
 12469              		.weak	_ZNSt8__detail9__variant5__getILj1ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
 12470              		.syntax unified
 12471              		.thumb
 12472              		.thumb_func
 12473              		.fpu fpv4-sp-d16
 12475              	_ZNSt8__detail9__variant5__getILj1ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:
 12476              	.LFB5191:
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 12477              		.loc 3 276 5
ARM GAS  /tmp/ccATuxCb.s 			page 409


 12478              		.cfi_startproc
 12479              		@ args = 0, pretend = 0, frame = 8
 12480              		@ frame_needed = 1, uses_anonymous_args = 0
 12481 0000 90B5     		push	{r4, r7, lr}
 12482              	.LCFI872:
 12483              		.cfi_def_cfa_offset 12
 12484              		.cfi_offset 4, -12
 12485              		.cfi_offset 7, -8
 12486              		.cfi_offset 14, -4
 12487 0002 83B0     		sub	sp, sp, #12
 12488              	.LCFI873:
 12489              		.cfi_def_cfa_offset 24
 12490 0004 00AF     		add	r7, sp, #0
 12491              	.LCFI874:
 12492              		.cfi_def_cfa_register 7
 12493 0006 7860     		str	r0, [r7, #4]
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 12494              		.loc 3 279 32
 12495 0008 7868     		ldr	r0, [r7, #4]
 12496 000a FFF7FEFF 		bl	_ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE
 12497 000e 0346     		mov	r3, r0
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Variant>(__v)._M_u);
 12498              		.loc 3 278 30
 12499 0010 1946     		mov	r1, r3
 12500 0012 2046     		mov	r0, r4
 12501 0014 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_pla
 12502 0018 0346     		mov	r3, r0
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 12503              		.loc 3 280 5
 12504 001a 1846     		mov	r0, r3
 12505 001c 0C37     		adds	r7, r7, #12
 12506              	.LCFI875:
 12507              		.cfi_def_cfa_offset 12
 12508 001e BD46     		mov	sp, r7
 12509              	.LCFI876:
 12510              		.cfi_def_cfa_register 13
 12511              		@ sp needed
 12512 0020 90BD     		pop	{r4, r7, pc}
 12513              		.cfi_endproc
 12514              	.LFE5191:
 12516              		.section	.text._ZSt3getILj1EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_E
 12517              		.align	1
 12518              		.weak	_ZSt3getILj1EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeER
 12519              		.syntax unified
 12520              		.thumb
 12521              		.thumb_func
 12522              		.fpu fpv4-sp-d16
 12524              	_ZSt3getILj1EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:
 12525              	.LFB5190:
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 12526              		.loc 3 1652 5
 12527              		.cfi_startproc
 12528              		@ args = 0, pretend = 0, frame = 8
 12529              		@ frame_needed = 1, uses_anonymous_args = 0
 12530 0000 80B5     		push	{r7, lr}
 12531              	.LCFI877:
 12532              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccATuxCb.s 			page 410


 12533              		.cfi_offset 7, -8
 12534              		.cfi_offset 14, -4
 12535 0002 82B0     		sub	sp, sp, #8
 12536              	.LCFI878:
 12537              		.cfi_def_cfa_offset 16
 12538 0004 00AF     		add	r7, sp, #0
 12539              	.LCFI879:
 12540              		.cfi_def_cfa_register 7
 12541 0006 7860     		str	r0, [r7, #4]
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 12542              		.loc 3 1656 20
 12543 0008 7868     		ldr	r0, [r7, #4]
 12544 000a FFF7FEFF 		bl	_ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv
 12545 000e 0346     		mov	r3, r0
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 12546              		.loc 3 1656 23
 12547 0010 012B     		cmp	r3, #1
 12548 0012 14BF     		ite	ne
 12549 0014 0123     		movne	r3, #1
 12550 0016 0023     		moveq	r3, #0
 12551 0018 DBB2     		uxtb	r3, r3
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 12552              		.loc 3 1656 7
 12553 001a 002B     		cmp	r3, #0
 12554 001c 06D0     		beq	.L560
1657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __detail::__variant::__get<_Np>(__v);
 12555              		.loc 3 1657 28
 12556 001e 7868     		ldr	r0, [r7, #4]
 12557 0020 FFF7FEFF 		bl	_ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv
 12558 0024 0346     		mov	r3, r0
 12559 0026 1846     		mov	r0, r3
 12560 0028 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessb
 12561              	.L560:
1658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 12562              		.loc 3 1658 45
 12563 002c 7868     		ldr	r0, [r7, #4]
 12564 002e FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj1ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
 12565 0032 0346     		mov	r3, r0
 12566              		.loc 3 1659 5
 12567 0034 1846     		mov	r0, r3
 12568 0036 0837     		adds	r7, r7, #8
 12569              	.LCFI880:
 12570              		.cfi_def_cfa_offset 8
 12571 0038 BD46     		mov	sp, r7
 12572              	.LCFI881:
 12573              		.cfi_def_cfa_register 13
 12574              		@ sp needed
 12575 003a 80BD     		pop	{r7, pc}
 12576              		.cfi_endproc
 12577              	.LFE5190:
 12579              		.section	.text._ZSt13make_optionalIRfESt8optionalINSt5decayIT_E4typeEEOS3_,"axG",%progbits,_ZSt13m
 12580              		.align	1
 12581              		.weak	_ZSt13make_optionalIRfESt8optionalINSt5decayIT_E4typeEEOS3_
 12582              		.syntax unified
 12583              		.thumb
 12584              		.thumb_func
 12585              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccATuxCb.s 			page 411


 12587              	_ZSt13make_optionalIRfESt8optionalINSt5decayIT_E4typeEEOS3_:
 12588              	.LFB5194:
1206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return optional<decay_t<_Tp>> { std::forward<_Tp>(__t) }; }
 12589              		.loc 12 1206 5
 12590              		.cfi_startproc
 12591              		@ args = 0, pretend = 0, frame = 8
 12592              		@ frame_needed = 1, uses_anonymous_args = 0
 12593 0000 80B5     		push	{r7, lr}
 12594              	.LCFI882:
 12595              		.cfi_def_cfa_offset 8
 12596              		.cfi_offset 7, -8
 12597              		.cfi_offset 14, -4
 12598 0002 82B0     		sub	sp, sp, #8
 12599              	.LCFI883:
 12600              		.cfi_def_cfa_offset 16
 12601 0004 00AF     		add	r7, sp, #0
 12602              	.LCFI884:
 12603              		.cfi_def_cfa_register 7
 12604 0006 7860     		str	r0, [r7, #4]
 12605 0008 3960     		str	r1, [r7]
 12606              		.loc 12 1207 62
 12607 000a 3868     		ldr	r0, [r7]
 12608 000c FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 12609 0010 0346     		mov	r3, r0
 12610 0012 1946     		mov	r1, r3
 12611 0014 7868     		ldr	r0, [r7, #4]
 12612 0016 FFF7FEFF 		bl	_ZNSt8optionalIfEC1IRfLb1EEEOT_
 12613              		.loc 12 1207 65
 12614 001a 7868     		ldr	r0, [r7, #4]
 12615 001c 0837     		adds	r7, r7, #8
 12616              	.LCFI885:
 12617              		.cfi_def_cfa_offset 8
 12618 001e BD46     		mov	sp, r7
 12619              	.LCFI886:
 12620              		.cfi_def_cfa_register 13
 12621              		@ sp needed
 12622 0020 80BD     		pop	{r7, pc}
 12623              		.cfi_endproc
 12624              	.LFE5194:
 12626              		.section	.text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt
 12627              		.align	1
 12628              		.weak	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_plac
 12629              		.syntax unified
 12630              		.thumb
 12631              		.thumb_func
 12632              		.fpu fpv4-sp-d16
 12634              	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index
 12635              	.LFB5197:
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 12636              		.loc 3 262 5
 12637              		.cfi_startproc
 12638              		@ args = 0, pretend = 0, frame = 8
 12639              		@ frame_needed = 1, uses_anonymous_args = 0
 12640 0000 80B5     		push	{r7, lr}
 12641              	.LCFI887:
 12642              		.cfi_def_cfa_offset 8
 12643              		.cfi_offset 7, -8
ARM GAS  /tmp/ccATuxCb.s 			page 412


 12644              		.cfi_offset 14, -4
 12645 0002 82B0     		sub	sp, sp, #8
 12646              	.LCFI888:
 12647              		.cfi_def_cfa_offset 16
 12648 0004 00AF     		add	r7, sp, #0
 12649              	.LCFI889:
 12650              		.cfi_def_cfa_register 7
 12651 0006 3871     		strb	r0, [r7, #4]
 12652 0008 3960     		str	r1, [r7]
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 12653              		.loc 3 263 34
 12654 000a 3868     		ldr	r0, [r7]
 12655 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remove_r
 12656 0010 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 12657              		.loc 3 263 55
 12658 0012 1846     		mov	r0, r3
 12659 0014 FFF7FEFF 		bl	_ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv
 12660 0018 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 12661              		.loc 3 263 59
 12662 001a 1846     		mov	r0, r3
 12663 001c 0837     		adds	r7, r7, #8
 12664              	.LCFI890:
 12665              		.cfi_def_cfa_offset 8
 12666 001e BD46     		mov	sp, r7
 12667              	.LCFI891:
 12668              		.cfi_def_cfa_register 13
 12669              		@ sp needed
 12670 0020 80BD     		pop	{r7, pc}
 12671              		.cfi_endproc
 12672              	.LFE5197:
 12674              		.section	.text._ZNSt8__detail9__variant5__getILj0ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_,"axG"
 12675              		.align	1
 12676              		.weak	_ZNSt8__detail9__variant5__getILj0ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
 12677              		.syntax unified
 12678              		.thumb
 12679              		.thumb_func
 12680              		.fpu fpv4-sp-d16
 12682              	_ZNSt8__detail9__variant5__getILj0ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:
 12683              	.LFB5196:
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 12684              		.loc 3 276 5
 12685              		.cfi_startproc
 12686              		@ args = 0, pretend = 0, frame = 8
 12687              		@ frame_needed = 1, uses_anonymous_args = 0
 12688 0000 90B5     		push	{r4, r7, lr}
 12689              	.LCFI892:
 12690              		.cfi_def_cfa_offset 12
 12691              		.cfi_offset 4, -12
 12692              		.cfi_offset 7, -8
 12693              		.cfi_offset 14, -4
 12694 0002 83B0     		sub	sp, sp, #12
 12695              	.LCFI893:
 12696              		.cfi_def_cfa_offset 24
 12697 0004 00AF     		add	r7, sp, #0
 12698              	.LCFI894:
ARM GAS  /tmp/ccATuxCb.s 			page 413


 12699              		.cfi_def_cfa_register 7
 12700 0006 7860     		str	r0, [r7, #4]
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 12701              		.loc 3 279 32
 12702 0008 7868     		ldr	r0, [r7, #4]
 12703 000a FFF7FEFF 		bl	_ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE
 12704 000e 0346     		mov	r3, r0
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Variant>(__v)._M_u);
 12705              		.loc 3 278 30
 12706 0010 1946     		mov	r1, r3
 12707 0012 2046     		mov	r0, r4
 12708 0014 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_i
 12709 0018 0346     		mov	r3, r0
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 12710              		.loc 3 280 5
 12711 001a 1846     		mov	r0, r3
 12712 001c 0C37     		adds	r7, r7, #12
 12713              	.LCFI895:
 12714              		.cfi_def_cfa_offset 12
 12715 001e BD46     		mov	sp, r7
 12716              	.LCFI896:
 12717              		.cfi_def_cfa_register 13
 12718              		@ sp needed
 12719 0020 90BD     		pop	{r4, r7, pc}
 12720              		.cfi_endproc
 12721              	.LFE5196:
 12723              		.section	.text._ZSt3getILj0EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_E
 12724              		.align	1
 12725              		.weak	_ZSt3getILj0EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeER
 12726              		.syntax unified
 12727              		.thumb
 12728              		.thumb_func
 12729              		.fpu fpv4-sp-d16
 12731              	_ZSt3getILj0EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:
 12732              	.LFB5195:
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 12733              		.loc 3 1652 5
 12734              		.cfi_startproc
 12735              		@ args = 0, pretend = 0, frame = 8
 12736              		@ frame_needed = 1, uses_anonymous_args = 0
 12737 0000 80B5     		push	{r7, lr}
 12738              	.LCFI897:
 12739              		.cfi_def_cfa_offset 8
 12740              		.cfi_offset 7, -8
 12741              		.cfi_offset 14, -4
 12742 0002 82B0     		sub	sp, sp, #8
 12743              	.LCFI898:
 12744              		.cfi_def_cfa_offset 16
 12745 0004 00AF     		add	r7, sp, #0
 12746              	.LCFI899:
 12747              		.cfi_def_cfa_register 7
 12748 0006 7860     		str	r0, [r7, #4]
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 12749              		.loc 3 1656 20
 12750 0008 7868     		ldr	r0, [r7, #4]
 12751 000a FFF7FEFF 		bl	_ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv
 12752 000e 0346     		mov	r3, r0
ARM GAS  /tmp/ccATuxCb.s 			page 414


1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 12753              		.loc 3 1656 23
 12754 0010 002B     		cmp	r3, #0
 12755 0012 14BF     		ite	ne
 12756 0014 0123     		movne	r3, #1
 12757 0016 0023     		moveq	r3, #0
 12758 0018 DBB2     		uxtb	r3, r3
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 12759              		.loc 3 1656 7
 12760 001a 002B     		cmp	r3, #0
 12761 001c 06D0     		beq	.L569
1657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __detail::__variant::__get<_Np>(__v);
 12762              		.loc 3 1657 28
 12763 001e 7868     		ldr	r0, [r7, #4]
 12764 0020 FFF7FEFF 		bl	_ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv
 12765 0024 0346     		mov	r3, r0
 12766 0026 1846     		mov	r0, r3
 12767 0028 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessb
 12768              	.L569:
1658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 12769              		.loc 3 1658 45
 12770 002c 7868     		ldr	r0, [r7, #4]
 12771 002e FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj0ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
 12772 0032 0346     		mov	r3, r0
 12773              		.loc 3 1659 5
 12774 0034 1846     		mov	r0, r3
 12775 0036 0837     		adds	r7, r7, #8
 12776              	.LCFI900:
 12777              		.cfi_def_cfa_offset 8
 12778 0038 BD46     		mov	sp, r7
 12779              	.LCFI901:
 12780              		.cfi_def_cfa_register 13
 12781              		@ sp needed
 12782 003a 80BD     		pop	{r7, pc}
 12783              		.cfi_endproc
 12784              	.LFE5195:
 12786              		.section	.text._ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC2IJRS1_EEESt10in_place
 12787              		.align	1
 12788              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC2IJRS1_EEESt10in_place_tDpOT_
 12789              		.syntax unified
 12790              		.thumb
 12791              		.thumb_func
 12792              		.fpu fpv4-sp-d16
 12794              	_ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC2IJRS1_EEESt10in_place_tDpOT_:
 12795              	.LFB5203:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 12796              		.loc 12 204 6
 12797              		.cfi_startproc
 12798              		@ args = 0, pretend = 0, frame = 16
 12799              		@ frame_needed = 1, uses_anonymous_args = 0
 12800 0000 80B5     		push	{r7, lr}
 12801              	.LCFI902:
 12802              		.cfi_def_cfa_offset 8
 12803              		.cfi_offset 7, -8
 12804              		.cfi_offset 14, -4
 12805 0002 84B0     		sub	sp, sp, #16
 12806              	.LCFI903:
ARM GAS  /tmp/ccATuxCb.s 			page 415


 12807              		.cfi_def_cfa_offset 24
 12808 0004 00AF     		add	r7, sp, #0
 12809              	.LCFI904:
 12810              		.cfi_def_cfa_register 7
 12811 0006 F860     		str	r0, [r7, #12]
 12812 0008 3972     		strb	r1, [r7, #8]
 12813 000a 7A60     		str	r2, [r7, #4]
 12814              	.LBB90:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 12815              		.loc 12 205 36
 12816 000c 7868     		ldr	r0, [r7, #4]
 12817 000e FFF7FEFF 		bl	_ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE
 12818 0012 0246     		mov	r2, r0
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 12819              		.loc 12 205 47
 12820 0014 FB68     		ldr	r3, [r7, #12]
 12821 0016 92E80300 		ldm	r2, {r0, r1}
 12822 001a 83E80300 		stm	r3, {r0, r1}
 12823              	.LBE90:
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 12824              		.loc 12 206 8
 12825 001e FB68     		ldr	r3, [r7, #12]
 12826 0020 1846     		mov	r0, r3
 12827 0022 1037     		adds	r7, r7, #16
 12828              	.LCFI905:
 12829              		.cfi_def_cfa_offset 8
 12830 0024 BD46     		mov	sp, r7
 12831              	.LCFI906:
 12832              		.cfi_def_cfa_register 13
 12833              		@ sp needed
 12834 0026 80BD     		pop	{r7, pc}
 12835              		.cfi_endproc
 12836              	.LFE5203:
 12838              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_
 12839              		.thumb_set _ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDp
 12840              		.section	.text._ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE,"axG",%progbits,_ZSt
 12841              		.align	1
 12842              		.weak	_ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE
 12843              		.syntax unified
 12844              		.thumb
 12845              		.thumb_func
 12846              		.fpu fpv4-sp-d16
 12848              	_ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE:
 12849              	.LFB5205:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 12850              		.loc 13 76 5
 12851              		.cfi_startproc
 12852              		@ args = 0, pretend = 0, frame = 8
 12853              		@ frame_needed = 1, uses_anonymous_args = 0
 12854              		@ link register save eliminated.
 12855 0000 80B4     		push	{r7}
 12856              	.LCFI907:
 12857              		.cfi_def_cfa_offset 4
 12858              		.cfi_offset 7, -4
 12859 0002 83B0     		sub	sp, sp, #12
 12860              	.LCFI908:
 12861              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccATuxCb.s 			page 416


 12862 0004 00AF     		add	r7, sp, #0
 12863              	.LCFI909:
 12864              		.cfi_def_cfa_register 7
 12865 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 12866              		.loc 13 77 36
 12867 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 12868              		.loc 13 77 39
 12869 000a 1846     		mov	r0, r3
 12870 000c 0C37     		adds	r7, r7, #12
 12871              	.LCFI910:
 12872              		.cfi_def_cfa_offset 4
 12873 000e BD46     		mov	sp, r7
 12874              	.LCFI911:
 12875              		.cfi_def_cfa_register 13
 12876              		@ sp needed
 12877 0010 5DF8047B 		ldr	r7, [sp], #4
 12878              	.LCFI912:
 12879              		.cfi_restore 7
 12880              		.cfi_def_cfa_offset 0
 12881 0014 7047     		bx	lr
 12882              		.cfi_endproc
 12883              	.LFE5205:
 12885              		.section	.text._ZNSt22_Optional_payload_baseISt4pairIffEEC2IJRS1_EEESt10in_place_tDpOT_,"axG",%pro
 12886              		.align	1
 12887              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEEC2IJRS1_EEESt10in_place_tDpOT_
 12888              		.syntax unified
 12889              		.thumb
 12890              		.thumb_func
 12891              		.fpu fpv4-sp-d16
 12893              	_ZNSt22_Optional_payload_baseISt4pairIffEEC2IJRS1_EEESt10in_place_tDpOT_:
 12894              	.LFB5206:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 12895              		.loc 12 116 2
 12896              		.cfi_startproc
 12897              		@ args = 0, pretend = 0, frame = 16
 12898              		@ frame_needed = 1, uses_anonymous_args = 0
 12899 0000 B0B5     		push	{r4, r5, r7, lr}
 12900              	.LCFI913:
 12901              		.cfi_def_cfa_offset 16
 12902              		.cfi_offset 4, -16
 12903              		.cfi_offset 5, -12
 12904              		.cfi_offset 7, -8
 12905              		.cfi_offset 14, -4
 12906 0002 84B0     		sub	sp, sp, #16
 12907              	.LCFI914:
 12908              		.cfi_def_cfa_offset 32
 12909 0004 00AF     		add	r7, sp, #0
 12910              	.LCFI915:
 12911              		.cfi_def_cfa_register 7
 12912 0006 F860     		str	r0, [r7, #12]
 12913 0008 3972     		strb	r1, [r7, #8]
 12914 000a 7A60     		str	r2, [r7, #4]
 12915              	.LBB91:
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 12916              		.loc 12 118 19
ARM GAS  /tmp/ccATuxCb.s 			page 417


 12917 000c FC68     		ldr	r4, [r7, #12]
 12918 000e 7868     		ldr	r0, [r7, #4]
 12919 0010 FFF7FEFF 		bl	_ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE
 12920 0014 0346     		mov	r3, r0
 12921 0016 1A46     		mov	r2, r3
 12922 0018 2946     		mov	r1, r5
 12923 001a 2046     		mov	r0, r4
 12924 001c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_
 12925 0020 FB68     		ldr	r3, [r7, #12]
 12926 0022 0122     		movs	r2, #1
 12927 0024 1A72     		strb	r2, [r3, #8]
 12928              	.LBE91:
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 12929              		.loc 12 119 4
 12930 0026 FB68     		ldr	r3, [r7, #12]
 12931 0028 1846     		mov	r0, r3
 12932 002a 1037     		adds	r7, r7, #16
 12933              	.LCFI916:
 12934              		.cfi_def_cfa_offset 16
 12935 002c BD46     		mov	sp, r7
 12936              	.LCFI917:
 12937              		.cfi_def_cfa_register 13
 12938              		@ sp needed
 12939 002e B0BD     		pop	{r4, r5, r7, pc}
 12940              		.cfi_endproc
 12941              	.LFE5206:
 12943              		.weak	_ZNSt22_Optional_payload_baseISt4pairIffEEC1IJRS1_EEESt10in_place_tDpOT_
 12944              		.thumb_set _ZNSt22_Optional_payload_baseISt4pairIffEEC1IJRS1_EEESt10in_place_tDpOT_,_ZNSt22_Option
 12945              		.section	.text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI2St22_Optional_payload_baseIS1_E
 12946              		.align	1
 12947              		.weak	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI2St22_Optional_payload_baseIS1_EIJRS1_EEE
 12948              		.syntax unified
 12949              		.thumb
 12950              		.thumb_func
 12951              		.fpu fpv4-sp-d16
 12953              	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI2St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_
 12954              	.LFB5208:
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 12955              		.loc 12 359 42
 12956              		.cfi_startproc
 12957              		@ args = 0, pretend = 0, frame = 16
 12958              		@ frame_needed = 1, uses_anonymous_args = 0
 12959 0000 90B5     		push	{r4, r7, lr}
 12960              	.LCFI918:
 12961              		.cfi_def_cfa_offset 12
 12962              		.cfi_offset 4, -12
 12963              		.cfi_offset 7, -8
 12964              		.cfi_offset 14, -4
 12965 0002 85B0     		sub	sp, sp, #20
 12966              	.LCFI919:
 12967              		.cfi_def_cfa_offset 32
 12968 0004 00AF     		add	r7, sp, #0
 12969              	.LCFI920:
 12970              		.cfi_def_cfa_register 7
 12971 0006 F860     		str	r0, [r7, #12]
 12972 0008 3972     		strb	r1, [r7, #8]
 12973 000a 7A60     		str	r2, [r7, #4]
ARM GAS  /tmp/ccATuxCb.s 			page 418


 12974              	.LBB92:
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 12975              		.loc 12 359 42
 12976 000c FB68     		ldr	r3, [r7, #12]
 12977 000e 7A68     		ldr	r2, [r7, #4]
 12978 0010 2146     		mov	r1, r4
 12979 0012 1846     		mov	r0, r3
 12980 0014 FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt4pairIffEEC2IJRS1_EEESt10in_place_tDpOT_
 12981              	.LBE92:
 12982 0018 FB68     		ldr	r3, [r7, #12]
 12983 001a 1846     		mov	r0, r3
 12984 001c 1437     		adds	r7, r7, #20
 12985              	.LCFI921:
 12986              		.cfi_def_cfa_offset 12
 12987 001e BD46     		mov	sp, r7
 12988              	.LCFI922:
 12989              		.cfi_def_cfa_register 13
 12990              		@ sp needed
 12991 0020 90BD     		pop	{r4, r7, pc}
 12992              		.cfi_endproc
 12993              	.LFE5208:
 12995              		.weak	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI1St22_Optional_payload_baseIS1_EIJRS1_EEE
 12996              		.thumb_set _ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI1St22_Optional_payload_baseIS1_EIJRS
 12997              		.section	.text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2IJRS1_ELb0EEESt10in_place_tDpOT_,"axG",
 12998              		.align	1
 12999              		.weak	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2IJRS1_ELb0EEESt10in_place_tDpOT_
 13000              		.syntax unified
 13001              		.thumb
 13002              		.thumb_func
 13003              		.fpu fpv4-sp-d16
 13005              	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2IJRS1_ELb0EEESt10in_place_tDpOT_:
 13006              	.LFB5210:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 13007              		.loc 12 608 28
 13008              		.cfi_startproc
 13009              		@ args = 0, pretend = 0, frame = 16
 13010              		@ frame_needed = 1, uses_anonymous_args = 0
 13011 0000 B0B5     		push	{r4, r5, r7, lr}
 13012              	.LCFI923:
 13013              		.cfi_def_cfa_offset 16
 13014              		.cfi_offset 4, -16
 13015              		.cfi_offset 5, -12
 13016              		.cfi_offset 7, -8
 13017              		.cfi_offset 14, -4
 13018 0002 84B0     		sub	sp, sp, #16
 13019              	.LCFI924:
 13020              		.cfi_def_cfa_offset 32
 13021 0004 00AF     		add	r7, sp, #0
 13022              	.LCFI925:
 13023              		.cfi_def_cfa_register 7
 13024 0006 F860     		str	r0, [r7, #12]
 13025 0008 3972     		strb	r1, [r7, #8]
 13026 000a 7A60     		str	r2, [r7, #4]
 13027              	.LBB93:
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 13028              		.loc 12 610 38
 13029 000c FC68     		ldr	r4, [r7, #12]
ARM GAS  /tmp/ccATuxCb.s 			page 419


 13030 000e 7868     		ldr	r0, [r7, #4]
 13031 0010 FFF7FEFF 		bl	_ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE
 13032 0014 0346     		mov	r3, r0
 13033 0016 1A46     		mov	r2, r3
 13034 0018 2946     		mov	r1, r5
 13035 001a 2046     		mov	r0, r4
 13036 001c FFF7FEFF 		bl	_ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI1St22_Optional_payload_baseIS1_EIJRS1_EEESt1
 13037              	.LBE93:
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 13038              		.loc 12 610 42
 13039 0020 FB68     		ldr	r3, [r7, #12]
 13040 0022 1846     		mov	r0, r3
 13041 0024 1037     		adds	r7, r7, #16
 13042              	.LCFI926:
 13043              		.cfi_def_cfa_offset 16
 13044 0026 BD46     		mov	sp, r7
 13045              	.LCFI927:
 13046              		.cfi_def_cfa_register 13
 13047              		@ sp needed
 13048 0028 B0BD     		pop	{r4, r5, r7, pc}
 13049              		.cfi_endproc
 13050              	.LFE5210:
 13052              		.weak	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_
 13053              		.thumb_set _ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_,_ZNSt14_Op
 13054              		.section	.text._ZNSt8optionalISt4pairIffEEC2IRS1_Lb1EEEOT_,"axG",%progbits,_ZNSt8optionalISt4pairI
 13055              		.align	1
 13056              		.weak	_ZNSt8optionalISt4pairIffEEC2IRS1_Lb1EEEOT_
 13057              		.syntax unified
 13058              		.thumb
 13059              		.thumb_func
 13060              		.fpu fpv4-sp-d16
 13062              	_ZNSt8optionalISt4pairIffEEC2IRS1_Lb1EEEOT_:
 13063              	.LFB5212:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 13064              		.loc 12 701 2
 13065              		.cfi_startproc
 13066              		@ args = 0, pretend = 0, frame = 8
 13067              		@ frame_needed = 1, uses_anonymous_args = 0
 13068 0000 B0B5     		push	{r4, r5, r7, lr}
 13069              	.LCFI928:
 13070              		.cfi_def_cfa_offset 16
 13071              		.cfi_offset 4, -16
 13072              		.cfi_offset 5, -12
 13073              		.cfi_offset 7, -8
 13074              		.cfi_offset 14, -4
 13075 0002 82B0     		sub	sp, sp, #8
 13076              	.LCFI929:
 13077              		.cfi_def_cfa_offset 24
 13078 0004 00AF     		add	r7, sp, #0
 13079              	.LCFI930:
 13080              		.cfi_def_cfa_register 7
 13081 0006 7860     		str	r0, [r7, #4]
 13082 0008 3960     		str	r1, [r7]
 13083              	.LBB94:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 13084              		.loc 12 702 47
 13085 000a 7C68     		ldr	r4, [r7, #4]
ARM GAS  /tmp/ccATuxCb.s 			page 420


 13086 000c 3868     		ldr	r0, [r7]
 13087 000e FFF7FEFF 		bl	_ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE
 13088 0012 0346     		mov	r3, r0
 13089 0014 1A46     		mov	r2, r3
 13090 0016 2946     		mov	r1, r5
 13091 0018 2046     		mov	r0, r4
 13092 001a FFF7FEFF 		bl	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2IJRS1_ELb0EEESt10in_place_tDpOT_
 13093              	.LBE94:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 13094              		.loc 12 702 51
 13095 001e 7B68     		ldr	r3, [r7, #4]
 13096 0020 1846     		mov	r0, r3
 13097 0022 0837     		adds	r7, r7, #8
 13098              	.LCFI931:
 13099              		.cfi_def_cfa_offset 16
 13100 0024 BD46     		mov	sp, r7
 13101              	.LCFI932:
 13102              		.cfi_def_cfa_register 13
 13103              		@ sp needed
 13104 0026 B0BD     		pop	{r4, r5, r7, pc}
 13105              		.cfi_endproc
 13106              	.LFE5212:
 13108              		.weak	_ZNSt8optionalISt4pairIffEEC1IRS1_Lb1EEEOT_
 13109              		.thumb_set _ZNSt8optionalISt4pairIffEEC1IRS1_Lb1EEEOT_,_ZNSt8optionalISt4pairIffEEC2IRS1_Lb1EEEOT_
 13110              		.section	.text._ZNSt8optionalISt4pairIffEEC2ESt9nullopt_t,"axG",%progbits,_ZNSt8optionalISt4pairIf
 13111              		.align	1
 13112              		.weak	_ZNSt8optionalISt4pairIffEEC2ESt9nullopt_t
 13113              		.syntax unified
 13114              		.thumb
 13115              		.thumb_func
 13116              		.fpu fpv4-sp-d16
 13118              	_ZNSt8optionalISt4pairIffEEC2ESt9nullopt_t:
 13119              	.LFB5215:
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 13120              		.loc 12 693 17
 13121              		.cfi_startproc
 13122              		@ args = 0, pretend = 0, frame = 8
 13123              		@ frame_needed = 1, uses_anonymous_args = 0
 13124 0000 80B5     		push	{r7, lr}
 13125              	.LCFI933:
 13126              		.cfi_def_cfa_offset 8
 13127              		.cfi_offset 7, -8
 13128              		.cfi_offset 14, -4
 13129 0002 82B0     		sub	sp, sp, #8
 13130              	.LCFI934:
 13131              		.cfi_def_cfa_offset 16
 13132 0004 00AF     		add	r7, sp, #0
 13133              	.LCFI935:
 13134              		.cfi_def_cfa_register 7
 13135 0006 7860     		str	r0, [r7, #4]
 13136 0008 3970     		strb	r1, [r7]
 13137              	.LBB95:
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 13138              		.loc 12 693 46
 13139 000a 7B68     		ldr	r3, [r7, #4]
 13140 000c 1846     		mov	r0, r3
 13141 000e FFF7FEFF 		bl	_ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2Ev
ARM GAS  /tmp/ccATuxCb.s 			page 421


 13142              	.LBE95:
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 13143              		.loc 12 693 48
 13144 0012 7B68     		ldr	r3, [r7, #4]
 13145 0014 1846     		mov	r0, r3
 13146 0016 0837     		adds	r7, r7, #8
 13147              	.LCFI936:
 13148              		.cfi_def_cfa_offset 8
 13149 0018 BD46     		mov	sp, r7
 13150              	.LCFI937:
 13151              		.cfi_def_cfa_register 13
 13152              		@ sp needed
 13153 001a 80BD     		pop	{r7, pc}
 13154              		.cfi_endproc
 13155              	.LFE5215:
 13157              		.weak	_ZNSt8optionalISt4pairIffEEC1ESt9nullopt_t
 13158              		.thumb_set _ZNSt8optionalISt4pairIffEEC1ESt9nullopt_t,_ZNSt8optionalISt4pairIffEEC2ESt9nullopt_t
 13159              		.section	.text._ZNSt4pairIffEaSERKS0_,"axG",%progbits,_ZNSt4pairIffEaSERKS0_,comdat
 13160              		.align	1
 13161              		.weak	_ZNSt4pairIffEaSERKS0_
 13162              		.syntax unified
 13163              		.thumb
 13164              		.thumb_func
 13165              		.fpu fpv4-sp-d16
 13167              	_ZNSt4pairIffEaSERKS0_:
 13168              	.LFB5217:
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 13169              		.loc 18 390 7
 13170              		.cfi_startproc
 13171              		@ args = 0, pretend = 0, frame = 8
 13172              		@ frame_needed = 1, uses_anonymous_args = 0
 13173              		@ link register save eliminated.
 13174 0000 80B4     		push	{r7}
 13175              	.LCFI938:
 13176              		.cfi_def_cfa_offset 4
 13177              		.cfi_offset 7, -4
 13178 0002 83B0     		sub	sp, sp, #12
 13179              	.LCFI939:
 13180              		.cfi_def_cfa_offset 16
 13181 0004 00AF     		add	r7, sp, #0
 13182              	.LCFI940:
 13183              		.cfi_def_cfa_register 7
 13184 0006 7860     		str	r0, [r7, #4]
 13185 0008 3960     		str	r1, [r7]
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = __p.second;
 13186              		.loc 18 395 14
 13187 000a 3B68     		ldr	r3, [r7]
 13188 000c 1A68     		ldr	r2, [r3]	@ float
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = __p.second;
 13189              		.loc 18 395 8
 13190 000e 7B68     		ldr	r3, [r7, #4]
 13191 0010 1A60     		str	r2, [r3]	@ float
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 13192              		.loc 18 396 15
 13193 0012 3B68     		ldr	r3, [r7]
 13194 0014 5A68     		ldr	r2, [r3, #4]	@ float
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
ARM GAS  /tmp/ccATuxCb.s 			page 422


 13195              		.loc 18 396 9
 13196 0016 7B68     		ldr	r3, [r7, #4]
 13197 0018 5A60     		str	r2, [r3, #4]	@ float
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 13198              		.loc 18 397 10
 13199 001a 7B68     		ldr	r3, [r7, #4]
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 13200              		.loc 18 398 7
 13201 001c 1846     		mov	r0, r3
 13202 001e 0C37     		adds	r7, r7, #12
 13203              	.LCFI941:
 13204              		.cfi_def_cfa_offset 4
 13205 0020 BD46     		mov	sp, r7
 13206              	.LCFI942:
 13207              		.cfi_def_cfa_register 13
 13208              		@ sp needed
 13209 0022 5DF8047B 		ldr	r7, [sp], #4
 13210              	.LCFI943:
 13211              		.cfi_restore 7
 13212              		.cfi_def_cfa_offset 0
 13213 0026 7047     		bx	lr
 13214              		.cfi_endproc
 13215              	.LFE5217:
 13217              		.section	.text._ZSt7forwardISt5arrayIfLj3EEEOT_RNSt16remove_referenceIS2_E4typeE,"axG",%progbits,_
 13218              		.align	1
 13219              		.weak	_ZSt7forwardISt5arrayIfLj3EEEOT_RNSt16remove_referenceIS2_E4typeE
 13220              		.syntax unified
 13221              		.thumb
 13222              		.thumb_func
 13223              		.fpu fpv4-sp-d16
 13225              	_ZSt7forwardISt5arrayIfLj3EEEOT_RNSt16remove_referenceIS2_E4typeE:
 13226              	.LFB5218:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 13227              		.loc 13 76 5
 13228              		.cfi_startproc
 13229              		@ args = 0, pretend = 0, frame = 8
 13230              		@ frame_needed = 1, uses_anonymous_args = 0
 13231              		@ link register save eliminated.
 13232 0000 80B4     		push	{r7}
 13233              	.LCFI944:
 13234              		.cfi_def_cfa_offset 4
 13235              		.cfi_offset 7, -4
 13236 0002 83B0     		sub	sp, sp, #12
 13237              	.LCFI945:
 13238              		.cfi_def_cfa_offset 16
 13239 0004 00AF     		add	r7, sp, #0
 13240              	.LCFI946:
 13241              		.cfi_def_cfa_register 7
 13242 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 13243              		.loc 13 77 36
 13244 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 13245              		.loc 13 77 39
 13246 000a 1846     		mov	r0, r3
 13247 000c 0C37     		adds	r7, r7, #12
 13248              	.LCFI947:
ARM GAS  /tmp/ccATuxCb.s 			page 423


 13249              		.cfi_def_cfa_offset 4
 13250 000e BD46     		mov	sp, r7
 13251              	.LCFI948:
 13252              		.cfi_def_cfa_register 13
 13253              		@ sp needed
 13254 0010 5DF8047B 		ldr	r7, [sp], #4
 13255              	.LCFI949:
 13256              		.cfi_restore 7
 13257              		.cfi_def_cfa_offset 0
 13258 0014 7047     		bx	lr
 13259              		.cfi_endproc
 13260              	.LFE5218:
 13262              		.section	.text._ZNSt22_Optional_payload_baseISt5arrayIfLj3EEE8_StorageIS1_Lb1EEC2IJS1_EEESt10in_pl
 13263              		.align	1
 13264              		.weak	_ZNSt22_Optional_payload_baseISt5arrayIfLj3EEE8_StorageIS1_Lb1EEC2IJS1_EEESt10in_place_tDpOT
 13265              		.syntax unified
 13266              		.thumb
 13267              		.thumb_func
 13268              		.fpu fpv4-sp-d16
 13270              	_ZNSt22_Optional_payload_baseISt5arrayIfLj3EEE8_StorageIS1_Lb1EEC2IJS1_EEESt10in_place_tDpOT_:
 13271              	.LFB5224:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 13272              		.loc 12 204 6
 13273              		.cfi_startproc
 13274              		@ args = 0, pretend = 0, frame = 16
 13275              		@ frame_needed = 1, uses_anonymous_args = 0
 13276 0000 80B5     		push	{r7, lr}
 13277              	.LCFI950:
 13278              		.cfi_def_cfa_offset 8
 13279              		.cfi_offset 7, -8
 13280              		.cfi_offset 14, -4
 13281 0002 84B0     		sub	sp, sp, #16
 13282              	.LCFI951:
 13283              		.cfi_def_cfa_offset 24
 13284 0004 00AF     		add	r7, sp, #0
 13285              	.LCFI952:
 13286              		.cfi_def_cfa_register 7
 13287 0006 F860     		str	r0, [r7, #12]
 13288 0008 3972     		strb	r1, [r7, #8]
 13289 000a 7A60     		str	r2, [r7, #4]
 13290              	.LBB96:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 13291              		.loc 12 205 36
 13292 000c 7868     		ldr	r0, [r7, #4]
 13293 000e FFF7FEFF 		bl	_ZSt7forwardISt5arrayIfLj3EEEOT_RNSt16remove_referenceIS2_E4typeE
 13294 0012 0246     		mov	r2, r0
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 13295              		.loc 12 205 47
 13296 0014 FB68     		ldr	r3, [r7, #12]
 13297 0016 07CA     		ldm	r2, {r0, r1, r2}
 13298 0018 83E80700 		stm	r3, {r0, r1, r2}
 13299              	.LBE96:
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 13300              		.loc 12 206 8
 13301 001c FB68     		ldr	r3, [r7, #12]
 13302 001e 1846     		mov	r0, r3
 13303 0020 1037     		adds	r7, r7, #16
ARM GAS  /tmp/ccATuxCb.s 			page 424


 13304              	.LCFI953:
 13305              		.cfi_def_cfa_offset 8
 13306 0022 BD46     		mov	sp, r7
 13307              	.LCFI954:
 13308              		.cfi_def_cfa_register 13
 13309              		@ sp needed
 13310 0024 80BD     		pop	{r7, pc}
 13311              		.cfi_endproc
 13312              	.LFE5224:
 13314              		.weak	_ZNSt22_Optional_payload_baseISt5arrayIfLj3EEE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT
 13315              		.thumb_set _ZNSt22_Optional_payload_baseISt5arrayIfLj3EEE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_
 13316              		.section	.text._ZNSt22_Optional_payload_baseISt5arrayIfLj3EEEC2IJS1_EEESt10in_place_tDpOT_,"axG",%
 13317              		.align	1
 13318              		.weak	_ZNSt22_Optional_payload_baseISt5arrayIfLj3EEEC2IJS1_EEESt10in_place_tDpOT_
 13319              		.syntax unified
 13320              		.thumb
 13321              		.thumb_func
 13322              		.fpu fpv4-sp-d16
 13324              	_ZNSt22_Optional_payload_baseISt5arrayIfLj3EEEC2IJS1_EEESt10in_place_tDpOT_:
 13325              	.LFB5226:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 13326              		.loc 12 116 2
 13327              		.cfi_startproc
 13328              		@ args = 0, pretend = 0, frame = 16
 13329              		@ frame_needed = 1, uses_anonymous_args = 0
 13330 0000 B0B5     		push	{r4, r5, r7, lr}
 13331              	.LCFI955:
 13332              		.cfi_def_cfa_offset 16
 13333              		.cfi_offset 4, -16
 13334              		.cfi_offset 5, -12
 13335              		.cfi_offset 7, -8
 13336              		.cfi_offset 14, -4
 13337 0002 84B0     		sub	sp, sp, #16
 13338              	.LCFI956:
 13339              		.cfi_def_cfa_offset 32
 13340 0004 00AF     		add	r7, sp, #0
 13341              	.LCFI957:
 13342              		.cfi_def_cfa_register 7
 13343 0006 F860     		str	r0, [r7, #12]
 13344 0008 3972     		strb	r1, [r7, #8]
 13345 000a 7A60     		str	r2, [r7, #4]
 13346              	.LBB97:
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 13347              		.loc 12 118 19
 13348 000c FC68     		ldr	r4, [r7, #12]
 13349 000e 7868     		ldr	r0, [r7, #4]
 13350 0010 FFF7FEFF 		bl	_ZSt7forwardISt5arrayIfLj3EEEOT_RNSt16remove_referenceIS2_E4typeE
 13351 0014 0346     		mov	r3, r0
 13352 0016 1A46     		mov	r2, r3
 13353 0018 2946     		mov	r1, r5
 13354 001a 2046     		mov	r0, r4
 13355 001c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt5arrayIfLj3EEE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_
 13356 0020 FB68     		ldr	r3, [r7, #12]
 13357 0022 0122     		movs	r2, #1
 13358 0024 1A73     		strb	r2, [r3, #12]
 13359              	.LBE97:
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
ARM GAS  /tmp/ccATuxCb.s 			page 425


 13360              		.loc 12 119 4
 13361 0026 FB68     		ldr	r3, [r7, #12]
 13362 0028 1846     		mov	r0, r3
 13363 002a 1037     		adds	r7, r7, #16
 13364              	.LCFI958:
 13365              		.cfi_def_cfa_offset 16
 13366 002c BD46     		mov	sp, r7
 13367              	.LCFI959:
 13368              		.cfi_def_cfa_register 13
 13369              		@ sp needed
 13370 002e B0BD     		pop	{r4, r5, r7, pc}
 13371              		.cfi_endproc
 13372              	.LFE5226:
 13374              		.weak	_ZNSt22_Optional_payload_baseISt5arrayIfLj3EEEC1IJS1_EEESt10in_place_tDpOT_
 13375              		.thumb_set _ZNSt22_Optional_payload_baseISt5arrayIfLj3EEEC1IJS1_EEESt10in_place_tDpOT_,_ZNSt22_Opt
 13376              		.section	.text._ZNSt17_Optional_payloadISt5arrayIfLj3EELb1ELb1ELb1EECI2St22_Optional_payload_baseI
 13377              		.align	1
 13378              		.weak	_ZNSt17_Optional_payloadISt5arrayIfLj3EELb1ELb1ELb1EECI2St22_Optional_payload_baseIS1_EIJS1_
 13379              		.syntax unified
 13380              		.thumb
 13381              		.thumb_func
 13382              		.fpu fpv4-sp-d16
 13384              	_ZNSt17_Optional_payloadISt5arrayIfLj3EELb1ELb1ELb1EECI2St22_Optional_payload_baseIS1_EIJS1_EEESt10
 13385              	.LFB5228:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 13386              		.loc 12 301 42
 13387              		.cfi_startproc
 13388              		@ args = 0, pretend = 0, frame = 16
 13389              		@ frame_needed = 1, uses_anonymous_args = 0
 13390 0000 90B5     		push	{r4, r7, lr}
 13391              	.LCFI960:
 13392              		.cfi_def_cfa_offset 12
 13393              		.cfi_offset 4, -12
 13394              		.cfi_offset 7, -8
 13395              		.cfi_offset 14, -4
 13396 0002 85B0     		sub	sp, sp, #20
 13397              	.LCFI961:
 13398              		.cfi_def_cfa_offset 32
 13399 0004 00AF     		add	r7, sp, #0
 13400              	.LCFI962:
 13401              		.cfi_def_cfa_register 7
 13402 0006 F860     		str	r0, [r7, #12]
 13403 0008 3972     		strb	r1, [r7, #8]
 13404 000a 7A60     		str	r2, [r7, #4]
 13405              	.LBB98:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 13406              		.loc 12 301 42
 13407 000c FB68     		ldr	r3, [r7, #12]
 13408 000e 7A68     		ldr	r2, [r7, #4]
 13409 0010 2146     		mov	r1, r4
 13410 0012 1846     		mov	r0, r3
 13411 0014 FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseISt5arrayIfLj3EEEC2IJS1_EEESt10in_place_tDpOT_
 13412              	.LBE98:
 13413 0018 FB68     		ldr	r3, [r7, #12]
 13414 001a 1846     		mov	r0, r3
 13415 001c 1437     		adds	r7, r7, #20
 13416              	.LCFI963:
ARM GAS  /tmp/ccATuxCb.s 			page 426


 13417              		.cfi_def_cfa_offset 12
 13418 001e BD46     		mov	sp, r7
 13419              	.LCFI964:
 13420              		.cfi_def_cfa_register 13
 13421              		@ sp needed
 13422 0020 90BD     		pop	{r4, r7, pc}
 13423              		.cfi_endproc
 13424              	.LFE5228:
 13426              		.weak	_ZNSt17_Optional_payloadISt5arrayIfLj3EELb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_
 13427              		.thumb_set _ZNSt17_Optional_payloadISt5arrayIfLj3EELb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_E
 13428              		.section	.text._ZNSt14_Optional_baseISt5arrayIfLj3EELb1ELb1EEC2IJS1_ELb0EEESt10in_place_tDpOT_,"ax
 13429              		.align	1
 13430              		.weak	_ZNSt14_Optional_baseISt5arrayIfLj3EELb1ELb1EEC2IJS1_ELb0EEESt10in_place_tDpOT_
 13431              		.syntax unified
 13432              		.thumb
 13433              		.thumb_func
 13434              		.fpu fpv4-sp-d16
 13436              	_ZNSt14_Optional_baseISt5arrayIfLj3EELb1ELb1EEC2IJS1_ELb0EEESt10in_place_tDpOT_:
 13437              	.LFB5230:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 13438              		.loc 12 608 28
 13439              		.cfi_startproc
 13440              		@ args = 0, pretend = 0, frame = 16
 13441              		@ frame_needed = 1, uses_anonymous_args = 0
 13442 0000 B0B5     		push	{r4, r5, r7, lr}
 13443              	.LCFI965:
 13444              		.cfi_def_cfa_offset 16
 13445              		.cfi_offset 4, -16
 13446              		.cfi_offset 5, -12
 13447              		.cfi_offset 7, -8
 13448              		.cfi_offset 14, -4
 13449 0002 84B0     		sub	sp, sp, #16
 13450              	.LCFI966:
 13451              		.cfi_def_cfa_offset 32
 13452 0004 00AF     		add	r7, sp, #0
 13453              	.LCFI967:
 13454              		.cfi_def_cfa_register 7
 13455 0006 F860     		str	r0, [r7, #12]
 13456 0008 3972     		strb	r1, [r7, #8]
 13457 000a 7A60     		str	r2, [r7, #4]
 13458              	.LBB99:
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 13459              		.loc 12 610 38
 13460 000c FC68     		ldr	r4, [r7, #12]
 13461 000e 7868     		ldr	r0, [r7, #4]
 13462 0010 FFF7FEFF 		bl	_ZSt7forwardISt5arrayIfLj3EEEOT_RNSt16remove_referenceIS2_E4typeE
 13463 0014 0346     		mov	r3, r0
 13464 0016 1A46     		mov	r2, r3
 13465 0018 2946     		mov	r1, r5
 13466 001a 2046     		mov	r0, r4
 13467 001c FFF7FEFF 		bl	_ZNSt17_Optional_payloadISt5arrayIfLj3EELb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEE
 13468              	.LBE99:
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 13469              		.loc 12 610 42
 13470 0020 FB68     		ldr	r3, [r7, #12]
 13471 0022 1846     		mov	r0, r3
 13472 0024 1037     		adds	r7, r7, #16
ARM GAS  /tmp/ccATuxCb.s 			page 427


 13473              	.LCFI968:
 13474              		.cfi_def_cfa_offset 16
 13475 0026 BD46     		mov	sp, r7
 13476              	.LCFI969:
 13477              		.cfi_def_cfa_register 13
 13478              		@ sp needed
 13479 0028 B0BD     		pop	{r4, r5, r7, pc}
 13480              		.cfi_endproc
 13481              	.LFE5230:
 13483              		.weak	_ZNSt14_Optional_baseISt5arrayIfLj3EELb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_
 13484              		.thumb_set _ZNSt14_Optional_baseISt5arrayIfLj3EELb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_,_ZNSt14
 13485              		.section	.text._ZNSt8optionalISt5arrayIfLj3EEEC2IS1_Lb1EEEOT_,"axG",%progbits,_ZNSt8optionalISt5ar
 13486              		.align	1
 13487              		.weak	_ZNSt8optionalISt5arrayIfLj3EEEC2IS1_Lb1EEEOT_
 13488              		.syntax unified
 13489              		.thumb
 13490              		.thumb_func
 13491              		.fpu fpv4-sp-d16
 13493              	_ZNSt8optionalISt5arrayIfLj3EEEC2IS1_Lb1EEEOT_:
 13494              	.LFB5232:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 13495              		.loc 12 701 2
 13496              		.cfi_startproc
 13497              		@ args = 0, pretend = 0, frame = 8
 13498              		@ frame_needed = 1, uses_anonymous_args = 0
 13499 0000 B0B5     		push	{r4, r5, r7, lr}
 13500              	.LCFI970:
 13501              		.cfi_def_cfa_offset 16
 13502              		.cfi_offset 4, -16
 13503              		.cfi_offset 5, -12
 13504              		.cfi_offset 7, -8
 13505              		.cfi_offset 14, -4
 13506 0002 82B0     		sub	sp, sp, #8
 13507              	.LCFI971:
 13508              		.cfi_def_cfa_offset 24
 13509 0004 00AF     		add	r7, sp, #0
 13510              	.LCFI972:
 13511              		.cfi_def_cfa_register 7
 13512 0006 7860     		str	r0, [r7, #4]
 13513 0008 3960     		str	r1, [r7]
 13514              	.LBB100:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 13515              		.loc 12 702 47
 13516 000a 7C68     		ldr	r4, [r7, #4]
 13517 000c 3868     		ldr	r0, [r7]
 13518 000e FFF7FEFF 		bl	_ZSt7forwardISt5arrayIfLj3EEEOT_RNSt16remove_referenceIS2_E4typeE
 13519 0012 0346     		mov	r3, r0
 13520 0014 1A46     		mov	r2, r3
 13521 0016 2946     		mov	r1, r5
 13522 0018 2046     		mov	r0, r4
 13523 001a FFF7FEFF 		bl	_ZNSt14_Optional_baseISt5arrayIfLj3EELb1ELb1EEC2IJS1_ELb0EEESt10in_place_tDpOT_
 13524              	.LBE100:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 13525              		.loc 12 702 51
 13526 001e 7B68     		ldr	r3, [r7, #4]
 13527 0020 1846     		mov	r0, r3
 13528 0022 0837     		adds	r7, r7, #8
ARM GAS  /tmp/ccATuxCb.s 			page 428


 13529              	.LCFI973:
 13530              		.cfi_def_cfa_offset 16
 13531 0024 BD46     		mov	sp, r7
 13532              	.LCFI974:
 13533              		.cfi_def_cfa_register 13
 13534              		@ sp needed
 13535 0026 B0BD     		pop	{r4, r5, r7, pc}
 13536              		.cfi_endproc
 13537              	.LFE5232:
 13539              		.weak	_ZNSt8optionalISt5arrayIfLj3EEEC1IS1_Lb1EEEOT_
 13540              		.thumb_set _ZNSt8optionalISt5arrayIfLj3EEEC1IS1_Lb1EEEOT_,_ZNSt8optionalISt5arrayIfLj3EEEC2IS1_Lb1
 13541              		.section	.text._ZNSt22_Optional_payload_baseIfE8_M_resetEv,"axG",%progbits,_ZNSt22_Optional_payloa
 13542              		.align	1
 13543              		.weak	_ZNSt22_Optional_payload_baseIfE8_M_resetEv
 13544              		.syntax unified
 13545              		.thumb
 13546              		.thumb_func
 13547              		.fpu fpv4-sp-d16
 13549              	_ZNSt22_Optional_payload_baseIfE8_M_resetEv:
 13550              	.LFB5256:
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 13551              		.loc 12 277 7
 13552              		.cfi_startproc
 13553              		@ args = 0, pretend = 0, frame = 8
 13554              		@ frame_needed = 1, uses_anonymous_args = 0
 13555 0000 80B5     		push	{r7, lr}
 13556              	.LCFI975:
 13557              		.cfi_def_cfa_offset 8
 13558              		.cfi_offset 7, -8
 13559              		.cfi_offset 14, -4
 13560 0002 82B0     		sub	sp, sp, #8
 13561              	.LCFI976:
 13562              		.cfi_def_cfa_offset 16
 13563 0004 00AF     		add	r7, sp, #0
 13564              	.LCFI977:
 13565              		.cfi_def_cfa_register 7
 13566 0006 7860     		str	r0, [r7, #4]
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_destroy();
 13567              		.loc 12 279 12
 13568 0008 7B68     		ldr	r3, [r7, #4]
 13569 000a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_destroy();
 13570              		.loc 12 279 2
 13571 000c 002B     		cmp	r3, #0
 13572 000e 02D0     		beq	.L601
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 13573              		.loc 12 280 14
 13574 0010 7868     		ldr	r0, [r7, #4]
 13575 0012 FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfE10_M_destroyEv
 13576              	.L601:
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 13577              		.loc 12 281 7
 13578 0016 00BF     		nop
 13579 0018 0837     		adds	r7, r7, #8
 13580              	.LCFI978:
 13581              		.cfi_def_cfa_offset 8
 13582 001a BD46     		mov	sp, r7
ARM GAS  /tmp/ccATuxCb.s 			page 429


 13583              	.LCFI979:
 13584              		.cfi_def_cfa_register 13
 13585              		@ sp needed
 13586 001c 80BD     		pop	{r7, pc}
 13587              		.cfi_endproc
 13588              	.LFE5256:
 13590              		.section	.text._ZSt11__addressofINSt22_Optional_payload_baseISt4pairIffEE8_StorageIS2_Lb1EEEEPT_RS
 13591              		.align	1
 13592              		.weak	_ZSt11__addressofINSt22_Optional_payload_baseISt4pairIffEE8_StorageIS2_Lb1EEEEPT_RS6_
 13593              		.syntax unified
 13594              		.thumb
 13595              		.thumb_func
 13596              		.fpu fpv4-sp-d16
 13598              	_ZSt11__addressofINSt22_Optional_payload_baseISt4pairIffEE8_StorageIS2_Lb1EEEEPT_RS6_:
 13599              	.LFB5257:
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return __builtin_addressof(__r); }
 13600              		.loc 13 49 5
 13601              		.cfi_startproc
 13602              		@ args = 0, pretend = 0, frame = 8
 13603              		@ frame_needed = 1, uses_anonymous_args = 0
 13604              		@ link register save eliminated.
 13605 0000 80B4     		push	{r7}
 13606              	.LCFI980:
 13607              		.cfi_def_cfa_offset 4
 13608              		.cfi_offset 7, -4
 13609 0002 83B0     		sub	sp, sp, #12
 13610              	.LCFI981:
 13611              		.cfi_def_cfa_offset 16
 13612 0004 00AF     		add	r7, sp, #0
 13613              	.LCFI982:
 13614              		.cfi_def_cfa_register 7
 13615 0006 7860     		str	r0, [r7, #4]
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 13616              		.loc 13 50 37
 13617 0008 7B68     		ldr	r3, [r7, #4]
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 13618              		.loc 13 50 40
 13619 000a 1846     		mov	r0, r3
 13620 000c 0C37     		adds	r7, r7, #12
 13621              	.LCFI983:
 13622              		.cfi_def_cfa_offset 4
 13623 000e BD46     		mov	sp, r7
 13624              	.LCFI984:
 13625              		.cfi_def_cfa_register 13
 13626              		@ sp needed
 13627 0010 5DF8047B 		ldr	r7, [sp], #4
 13628              	.LCFI985:
 13629              		.cfi_restore 7
 13630              		.cfi_def_cfa_offset 0
 13631 0014 7047     		bx	lr
 13632              		.cfi_endproc
 13633              	.LFE5257:
 13635              		.section	.text._ZNSt14__array_traitsIP14CurrentLimiterLj2EE6_S_ptrERA2_KS1_,"axG",%progbits,_ZNSt1
 13636              		.align	1
 13637              		.weak	_ZNSt14__array_traitsIP14CurrentLimiterLj2EE6_S_ptrERA2_KS1_
 13638              		.syntax unified
 13639              		.thumb
ARM GAS  /tmp/ccATuxCb.s 			page 430


 13640              		.thumb_func
 13641              		.fpu fpv4-sp-d16
 13643              	_ZNSt14__array_traitsIP14CurrentLimiterLj2EE6_S_ptrERA2_KS1_:
 13644              	.LFB5258:
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_cast<_Tp*>(__t); }
 13645              		.loc 20 59 7
 13646              		.cfi_startproc
 13647              		@ args = 0, pretend = 0, frame = 8
 13648              		@ frame_needed = 1, uses_anonymous_args = 0
 13649              		@ link register save eliminated.
 13650 0000 80B4     		push	{r7}
 13651              	.LCFI986:
 13652              		.cfi_def_cfa_offset 4
 13653              		.cfi_offset 7, -4
 13654 0002 83B0     		sub	sp, sp, #12
 13655              	.LCFI987:
 13656              		.cfi_def_cfa_offset 16
 13657 0004 00AF     		add	r7, sp, #0
 13658              	.LCFI988:
 13659              		.cfi_def_cfa_register 7
 13660 0006 7860     		str	r0, [r7, #4]
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****     };
 13661              		.loc 20 60 36
 13662 0008 7B68     		ldr	r3, [r7, #4]
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****     };
 13663              		.loc 20 60 39
 13664 000a 1846     		mov	r0, r3
 13665 000c 0C37     		adds	r7, r7, #12
 13666              	.LCFI989:
 13667              		.cfi_def_cfa_offset 4
 13668 000e BD46     		mov	sp, r7
 13669              	.LCFI990:
 13670              		.cfi_def_cfa_register 13
 13671              		@ sp needed
 13672 0010 5DF8047B 		ldr	r7, [sp], #4
 13673              	.LCFI991:
 13674              		.cfi_restore 7
 13675              		.cfi_def_cfa_offset 0
 13676 0014 7047     		bx	lr
 13677              		.cfi_endproc
 13678              	.LFE5258:
 13680              		.section	.text._ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv,"axG",%progbits,_ZN
 13681              		.align	1
 13682              		.weak	_ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv
 13683              		.syntax unified
 13684              		.thumb
 13685              		.thumb_func
 13686              		.fpu fpv4-sp-d16
 13688              	_ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv:
 13689              	.LFB5259:
1559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return !this->_M_valid(); }
 13690              		.loc 3 1559 22
 13691              		.cfi_startproc
 13692              		@ args = 0, pretend = 0, frame = 8
 13693              		@ frame_needed = 1, uses_anonymous_args = 0
 13694 0000 80B5     		push	{r7, lr}
 13695              	.LCFI992:
ARM GAS  /tmp/ccATuxCb.s 			page 431


 13696              		.cfi_def_cfa_offset 8
 13697              		.cfi_offset 7, -8
 13698              		.cfi_offset 14, -4
 13699 0002 82B0     		sub	sp, sp, #8
 13700              	.LCFI993:
 13701              		.cfi_def_cfa_offset 16
 13702 0004 00AF     		add	r7, sp, #0
 13703              	.LCFI994:
 13704              		.cfi_def_cfa_register 7
 13705 0006 7860     		str	r0, [r7, #4]
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 13706              		.loc 3 1560 31
 13707 0008 7B68     		ldr	r3, [r7, #4]
 13708 000a 1846     		mov	r0, r3
 13709 000c FFF7FEFF 		bl	_ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv
 13710 0010 0346     		mov	r3, r0
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 13711              		.loc 3 1560 32
 13712 0012 83F00103 		eor	r3, r3, #1
 13713 0016 DBB2     		uxtb	r3, r3
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 13714              		.loc 3 1560 35
 13715 0018 1846     		mov	r0, r3
 13716 001a 0837     		adds	r7, r7, #8
 13717              	.LCFI995:
 13718              		.cfi_def_cfa_offset 8
 13719 001c BD46     		mov	sp, r7
 13720              	.LCFI996:
 13721              		.cfi_def_cfa_register 13
 13722              		@ sp needed
 13723 001e 80BD     		pop	{r7, pc}
 13724              		.cfi_endproc
 13725              	.LFE5259:
 13727              		.section	.text._ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4type
 13728              		.align	1
 13729              		.weak	_ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE
 13730              		.syntax unified
 13731              		.thumb
 13732              		.thumb_func
 13733              		.fpu fpv4-sp-d16
 13735              	_ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE:
 13736              	.LFB5260:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 13737              		.loc 13 76 5
 13738              		.cfi_startproc
 13739              		@ args = 0, pretend = 0, frame = 8
 13740              		@ frame_needed = 1, uses_anonymous_args = 0
 13741              		@ link register save eliminated.
 13742 0000 80B4     		push	{r7}
 13743              	.LCFI997:
 13744              		.cfi_def_cfa_offset 4
 13745              		.cfi_offset 7, -4
 13746 0002 83B0     		sub	sp, sp, #12
 13747              	.LCFI998:
 13748              		.cfi_def_cfa_offset 16
 13749 0004 00AF     		add	r7, sp, #0
 13750              	.LCFI999:
ARM GAS  /tmp/ccATuxCb.s 			page 432


 13751              		.cfi_def_cfa_register 7
 13752 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 13753              		.loc 13 77 36
 13754 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 13755              		.loc 13 77 39
 13756 000a 1846     		mov	r0, r3
 13757 000c 0C37     		adds	r7, r7, #12
 13758              	.LCFI1000:
 13759              		.cfi_def_cfa_offset 4
 13760 000e BD46     		mov	sp, r7
 13761              	.LCFI1001:
 13762              		.cfi_def_cfa_register 13
 13763              		@ sp needed
 13764 0010 5DF8047B 		ldr	r7, [sp], #4
 13765              	.LCFI1002:
 13766              		.cfi_restore 7
 13767              		.cfi_def_cfa_offset 0
 13768 0014 7047     		bx	lr
 13769              		.cfi_endproc
 13770              	.LFE5260:
 13772              		.section	.text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RN
 13773              		.align	1
 13774              		.weak	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remov
 13775              		.syntax unified
 13776              		.thumb
 13777              		.thumb_func
 13778              		.fpu fpv4-sp-d16
 13780              	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remove_refer
 13781              	.LFB5261:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 13782              		.loc 13 76 5
 13783              		.cfi_startproc
 13784              		@ args = 0, pretend = 0, frame = 8
 13785              		@ frame_needed = 1, uses_anonymous_args = 0
 13786              		@ link register save eliminated.
 13787 0000 80B4     		push	{r7}
 13788              	.LCFI1003:
 13789              		.cfi_def_cfa_offset 4
 13790              		.cfi_offset 7, -4
 13791 0002 83B0     		sub	sp, sp, #12
 13792              	.LCFI1004:
 13793              		.cfi_def_cfa_offset 16
 13794 0004 00AF     		add	r7, sp, #0
 13795              	.LCFI1005:
 13796              		.cfi_def_cfa_register 7
 13797 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 13798              		.loc 13 77 36
 13799 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 13800              		.loc 13 77 39
 13801 000a 1846     		mov	r0, r3
 13802 000c 0C37     		adds	r7, r7, #12
 13803              	.LCFI1006:
 13804              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccATuxCb.s 			page 433


 13805 000e BD46     		mov	sp, r7
 13806              	.LCFI1007:
 13807              		.cfi_def_cfa_register 13
 13808              		@ sp needed
 13809 0010 5DF8047B 		ldr	r7, [sp], #4
 13810              	.LCFI1008:
 13811              		.cfi_restore 7
 13812              		.cfi_def_cfa_offset 0
 13813 0014 7047     		bx	lr
 13814              		.cfi_endproc
 13815              	.LFE5261:
 13817              		.section	.text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNS
 13818              		.align	1
 13819              		.weak	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove
 13820              		.syntax unified
 13821              		.thumb
 13822              		.thumb_func
 13823              		.fpu fpv4-sp-d16
 13825              	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove_refere
 13826              	.LFB5262:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 13827              		.loc 13 76 5
 13828              		.cfi_startproc
 13829              		@ args = 0, pretend = 0, frame = 8
 13830              		@ frame_needed = 1, uses_anonymous_args = 0
 13831              		@ link register save eliminated.
 13832 0000 80B4     		push	{r7}
 13833              	.LCFI1009:
 13834              		.cfi_def_cfa_offset 4
 13835              		.cfi_offset 7, -4
 13836 0002 83B0     		sub	sp, sp, #12
 13837              	.LCFI1010:
 13838              		.cfi_def_cfa_offset 16
 13839 0004 00AF     		add	r7, sp, #0
 13840              	.LCFI1011:
 13841              		.cfi_def_cfa_register 7
 13842 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 13843              		.loc 13 77 36
 13844 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 13845              		.loc 13 77 39
 13846 000a 1846     		mov	r0, r3
 13847 000c 0C37     		adds	r7, r7, #12
 13848              	.LCFI1012:
 13849              		.cfi_def_cfa_offset 4
 13850 000e BD46     		mov	sp, r7
 13851              	.LCFI1013:
 13852              		.cfi_def_cfa_register 13
 13853              		@ sp needed
 13854 0010 5DF8047B 		ldr	r7, [sp], #4
 13855              	.LCFI1014:
 13856              		.cfi_restore 7
 13857              		.cfi_def_cfa_offset 0
 13858 0014 7047     		bx	lr
 13859              		.cfi_endproc
 13860              	.LFE5262:
ARM GAS  /tmp/ccATuxCb.s 			page 434


 13862              		.section	.text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt1
 13863              		.align	1
 13864              		.weak	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt16remove_r
 13865              		.syntax unified
 13866              		.thumb
 13867              		.thumb_func
 13868              		.fpu fpv4-sp-d16
 13870              	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt16remove_referenc
 13871              	.LFB5263:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 13872              		.loc 13 76 5
 13873              		.cfi_startproc
 13874              		@ args = 0, pretend = 0, frame = 8
 13875              		@ frame_needed = 1, uses_anonymous_args = 0
 13876              		@ link register save eliminated.
 13877 0000 80B4     		push	{r7}
 13878              	.LCFI1015:
 13879              		.cfi_def_cfa_offset 4
 13880              		.cfi_offset 7, -4
 13881 0002 83B0     		sub	sp, sp, #12
 13882              	.LCFI1016:
 13883              		.cfi_def_cfa_offset 16
 13884 0004 00AF     		add	r7, sp, #0
 13885              	.LCFI1017:
 13886              		.cfi_def_cfa_register 7
 13887 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 13888              		.loc 13 77 36
 13889 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 13890              		.loc 13 77 39
 13891 000a 1846     		mov	r0, r3
 13892 000c 0C37     		adds	r7, r7, #12
 13893              	.LCFI1018:
 13894              		.cfi_def_cfa_offset 4
 13895 000e BD46     		mov	sp, r7
 13896              	.LCFI1019:
 13897              		.cfi_def_cfa_register 13
 13898              		@ sp needed
 13899 0010 5DF8047B 		ldr	r7, [sp], #4
 13900              	.LCFI1020:
 13901              		.cfi_restore 7
 13902              		.cfi_def_cfa_offset 0
 13903 0014 7047     		bx	lr
 13904              		.cfi_endproc
 13905              	.LFE5263:
 13907              		.section	.text._ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv,"axG",%pro
 13908              		.align	1
 13909              		.weak	_ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv
 13910              		.syntax unified
 13911              		.thumb
 13912              		.thumb_func
 13913              		.fpu fpv4-sp-d16
 13915              	_ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv:
 13916              	.LFB5264:
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 13917              		.loc 3 222 24
ARM GAS  /tmp/ccATuxCb.s 			page 435


 13918              		.cfi_startproc
 13919              		@ args = 0, pretend = 0, frame = 8
 13920              		@ frame_needed = 1, uses_anonymous_args = 0
 13921              		@ link register save eliminated.
 13922 0000 80B4     		push	{r7}
 13923              	.LCFI1021:
 13924              		.cfi_def_cfa_offset 4
 13925              		.cfi_offset 7, -4
 13926 0002 83B0     		sub	sp, sp, #12
 13927              	.LCFI1022:
 13928              		.cfi_def_cfa_offset 16
 13929 0004 00AF     		add	r7, sp, #0
 13930              	.LCFI1023:
 13931              		.cfi_def_cfa_register 7
 13932 0006 7860     		str	r0, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 13933              		.loc 3 223 16
 13934 0008 7B68     		ldr	r3, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 13935              		.loc 3 223 28
 13936 000a 1846     		mov	r0, r3
 13937 000c 0C37     		adds	r7, r7, #12
 13938              	.LCFI1024:
 13939              		.cfi_def_cfa_offset 4
 13940 000e BD46     		mov	sp, r7
 13941              	.LCFI1025:
 13942              		.cfi_def_cfa_register 13
 13943              		@ sp needed
 13944 0010 5DF8047B 		ldr	r7, [sp], #4
 13945              	.LCFI1026:
 13946              		.cfi_restore 7
 13947              		.cfi_def_cfa_offset 0
 13948 0014 7047     		bx	lr
 13949              		.cfi_endproc
 13950              	.LFE5264:
 13952              		.section	.text._ZNRSt8__detail9__variant14_UninitializedIPfLb1EE6_M_getEv,"axG",%progbits,_ZNRSt8_
 13953              		.align	1
 13954              		.weak	_ZNRSt8__detail9__variant14_UninitializedIPfLb1EE6_M_getEv
 13955              		.syntax unified
 13956              		.thumb
 13957              		.thumb_func
 13958              		.fpu fpv4-sp-d16
 13960              	_ZNRSt8__detail9__variant14_UninitializedIPfLb1EE6_M_getEv:
 13961              	.LFB5265:
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 13962              		.loc 3 222 24
 13963              		.cfi_startproc
 13964              		@ args = 0, pretend = 0, frame = 8
 13965              		@ frame_needed = 1, uses_anonymous_args = 0
 13966              		@ link register save eliminated.
 13967 0000 80B4     		push	{r7}
 13968              	.LCFI1027:
 13969              		.cfi_def_cfa_offset 4
 13970              		.cfi_offset 7, -4
 13971 0002 83B0     		sub	sp, sp, #12
 13972              	.LCFI1028:
 13973              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccATuxCb.s 			page 436


 13974 0004 00AF     		add	r7, sp, #0
 13975              	.LCFI1029:
 13976              		.cfi_def_cfa_register 7
 13977 0006 7860     		str	r0, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 13978              		.loc 3 223 16
 13979 0008 7B68     		ldr	r3, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 13980              		.loc 3 223 28
 13981 000a 1846     		mov	r0, r3
 13982 000c 0C37     		adds	r7, r7, #12
 13983              	.LCFI1030:
 13984              		.cfi_def_cfa_offset 4
 13985 000e BD46     		mov	sp, r7
 13986              	.LCFI1031:
 13987              		.cfi_def_cfa_register 13
 13988              		@ sp needed
 13989 0010 5DF8047B 		ldr	r7, [sp], #4
 13990              	.LCFI1032:
 13991              		.cfi_restore 7
 13992              		.cfi_def_cfa_offset 0
 13993 0014 7047     		bx	lr
 13994              		.cfi_endproc
 13995              	.LFE5265:
 13997              		.section	.text._ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv,"axG",%progbits,_ZNRSt8__
 13998              		.align	1
 13999              		.weak	_ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv
 14000              		.syntax unified
 14001              		.thumb
 14002              		.thumb_func
 14003              		.fpu fpv4-sp-d16
 14005              	_ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv:
 14006              	.LFB5266:
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 14007              		.loc 3 222 24
 14008              		.cfi_startproc
 14009              		@ args = 0, pretend = 0, frame = 8
 14010              		@ frame_needed = 1, uses_anonymous_args = 0
 14011              		@ link register save eliminated.
 14012 0000 80B4     		push	{r7}
 14013              	.LCFI1033:
 14014              		.cfi_def_cfa_offset 4
 14015              		.cfi_offset 7, -4
 14016 0002 83B0     		sub	sp, sp, #12
 14017              	.LCFI1034:
 14018              		.cfi_def_cfa_offset 16
 14019 0004 00AF     		add	r7, sp, #0
 14020              	.LCFI1035:
 14021              		.cfi_def_cfa_register 7
 14022 0006 7860     		str	r0, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 14023              		.loc 3 223 16
 14024 0008 7B68     		ldr	r3, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 14025              		.loc 3 223 28
 14026 000a 1846     		mov	r0, r3
 14027 000c 0C37     		adds	r7, r7, #12
ARM GAS  /tmp/ccATuxCb.s 			page 437


 14028              	.LCFI1036:
 14029              		.cfi_def_cfa_offset 4
 14030 000e BD46     		mov	sp, r7
 14031              	.LCFI1037:
 14032              		.cfi_def_cfa_register 13
 14033              		@ sp needed
 14034 0010 5DF8047B 		ldr	r7, [sp], #4
 14035              	.LCFI1038:
 14036              		.cfi_restore 7
 14037              		.cfi_def_cfa_offset 0
 14038 0014 7047     		bx	lr
 14039              		.cfi_endproc
 14040              	.LFE5266:
 14042              		.section	.text._ZNSt22_Optional_payload_baseIfE10_M_destroyEv,"axG",%progbits,_ZNSt22_Optional_pay
 14043              		.align	1
 14044              		.weak	_ZNSt22_Optional_payload_baseIfE10_M_destroyEv
 14045              		.syntax unified
 14046              		.thumb
 14047              		.thumb_func
 14048              		.fpu fpv4-sp-d16
 14050              	_ZNSt22_Optional_payload_baseIfE10_M_destroyEv:
 14051              	.LFB5278:
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 14052              		.loc 12 257 7
 14053              		.cfi_startproc
 14054              		@ args = 0, pretend = 0, frame = 8
 14055              		@ frame_needed = 1, uses_anonymous_args = 0
 14056              		@ link register save eliminated.
 14057 0000 80B4     		push	{r7}
 14058              	.LCFI1039:
 14059              		.cfi_def_cfa_offset 4
 14060              		.cfi_offset 7, -4
 14061 0002 83B0     		sub	sp, sp, #12
 14062              	.LCFI1040:
 14063              		.cfi_def_cfa_offset 16
 14064 0004 00AF     		add	r7, sp, #0
 14065              	.LCFI1041:
 14066              		.cfi_def_cfa_register 7
 14067 0006 7860     		str	r0, [r7, #4]
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_payload._M_value.~_Stored_type();
 14068              		.loc 12 259 13
 14069 0008 7B68     		ldr	r3, [r7, #4]
 14070 000a 0022     		movs	r2, #0
 14071 000c 1A71     		strb	r2, [r3, #4]
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 14072              		.loc 12 261 7
 14073 000e 00BF     		nop
 14074 0010 0C37     		adds	r7, r7, #12
 14075              	.LCFI1042:
 14076              		.cfi_def_cfa_offset 4
 14077 0012 BD46     		mov	sp, r7
 14078              	.LCFI1043:
 14079              		.cfi_def_cfa_register 13
 14080              		@ sp needed
 14081 0014 5DF8047B 		ldr	r7, [sp], #4
 14082              	.LCFI1044:
 14083              		.cfi_restore 7
ARM GAS  /tmp/ccATuxCb.s 			page 438


 14084              		.cfi_def_cfa_offset 0
 14085 0018 7047     		bx	lr
 14086              		.cfi_endproc
 14087              	.LFE5278:
 14089              		.section	.text._ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv,"
 14090              		.align	1
 14091              		.weak	_ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv
 14092              		.syntax unified
 14093              		.thumb
 14094              		.thumb_func
 14095              		.fpu fpv4-sp-d16
 14097              	_ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv:
 14098              	.LFB5279:
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 14099              		.loc 3 462 7
 14100              		.cfi_startproc
 14101              		@ args = 0, pretend = 0, frame = 8
 14102              		@ frame_needed = 1, uses_anonymous_args = 0
 14103              		@ link register save eliminated.
 14104 0000 80B4     		push	{r7}
 14105              	.LCFI1045:
 14106              		.cfi_def_cfa_offset 4
 14107              		.cfi_offset 7, -4
 14108 0002 83B0     		sub	sp, sp, #12
 14109              	.LCFI1046:
 14110              		.cfi_def_cfa_offset 16
 14111 0004 00AF     		add	r7, sp, #0
 14112              	.LCFI1047:
 14113              		.cfi_def_cfa_register 7
 14114 0006 7860     		str	r0, [r7, #4]
 465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return this->_M_index != static_cast<__index_type>(variant_npos);
 14115              		.loc 3 465 11
 14116 0008 0123     		movs	r3, #1
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 14117              		.loc 3 467 7
 14118 000a 1846     		mov	r0, r3
 14119 000c 0C37     		adds	r7, r7, #12
 14120              	.LCFI1048:
 14121              		.cfi_def_cfa_offset 4
 14122 000e BD46     		mov	sp, r7
 14123              	.LCFI1049:
 14124              		.cfi_def_cfa_register 13
 14125              		@ sp needed
 14126 0010 5DF8047B 		ldr	r7, [sp], #4
 14127              	.LCFI1050:
 14128              		.cfi_restore 7
 14129              		.cfi_def_cfa_offset 0
 14130 0014 7047     		bx	lr
 14131              		.cfi_endproc
 14132              	.LFE5279:
 14134              		.weak	_ZTV31InductanceMeasurementControlLaw
 14135              		.section	.rodata._ZTV31InductanceMeasurementControlLaw,"aG",%progbits,_ZTV31InductanceMeasurementC
 14136              		.align	2
 14139              	_ZTV31InductanceMeasurementControlLaw:
 14140 0000 00000000 		.word	0
 14141 0004 00000000 		.word	0
 14142 0008 00000000 		.word	_ZN31InductanceMeasurementControlLaw5resetEv
ARM GAS  /tmp/ccATuxCb.s 			page 439


 14143 000c 00000000 		.word	_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
 14144 0010 00000000 		.word	_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
 14145 0014 00000000 		.word	_ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm
 14146 0018 00000000 		.word	_ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_If
 14147              		.weak	_ZTV31ResistanceMeasurementControlLaw
 14148              		.section	.rodata._ZTV31ResistanceMeasurementControlLaw,"aG",%progbits,_ZTV31ResistanceMeasurementC
 14149              		.align	2
 14152              	_ZTV31ResistanceMeasurementControlLaw:
 14153 0000 00000000 		.word	0
 14154 0004 00000000 		.word	0
 14155 0008 00000000 		.word	_ZN31ResistanceMeasurementControlLaw5resetEv
 14156 000c 00000000 		.word	_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
 14157 0010 00000000 		.word	_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
 14158 0014 00000000 		.word	_ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm
 14159 0018 00000000 		.word	_ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_If
 14160              		.weak	_ZTV15PhaseControlLawILj3EE
 14161              		.section	.rodata._ZTV15PhaseControlLawILj3EE,"aG",%progbits,_ZTV15PhaseControlLawILj3EE,comdat
 14162              		.align	2
 14165              	_ZTV15PhaseControlLawILj3EE:
 14166 0000 00000000 		.word	0
 14167 0004 00000000 		.word	0
 14168 0008 00000000 		.word	__cxa_pure_virtual
 14169 000c 00000000 		.word	__cxa_pure_virtual
 14170 0010 00000000 		.word	__cxa_pure_virtual
 14171              		.weak	_ZTV13ComponentBase
 14172              		.section	.rodata._ZTV13ComponentBase,"aG",%progbits,_ZTV13ComponentBase,comdat
 14173              		.align	2
 14176              	_ZTV13ComponentBase:
 14177 0000 00000000 		.word	0
 14178 0004 00000000 		.word	0
 14179 0008 00000000 		.word	__cxa_pure_virtual
 14180              		.text
 14181              	.Letext0:
 14182              		.file 21 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/type_trai
 14183              		.file 22 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-
 14184              		.file 23 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/debug/deb
 14185              		.file 24 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdlib"
 14186              		.file 25 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/algo
 14187              		.file 26 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/exce
 14188              		.file 27 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_
 14189              		.file 28 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 14190              		.file 29 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/enab
 14191              		.file 30 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/functiona
 14192              		.file 31 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdint"
 14193              		.file 32 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pars
 14194              		.file 33 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 14195              		.file 34 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/refw
 14196              		.file 35 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pred
 14197              		.file 36 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/lib/gcc/arm-none-eabi/10.2.1/include/stdde
 14198              		.file 37 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_typ
 14199              		.file 38 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdlib.h"
 14200              		.file 39 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/pstl/exec
 14201              		.file 40 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 14202              		.file 41 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdint.h"
 14203              		.file 42 "Inc/interfaces.hpp"
 14204              		.file 43 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 14205              		.file 44 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g4xx.h"
ARM GAS  /tmp/ccATuxCb.s 			page 440


 14206              		.file 45 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 14207              		.file 46 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
 14208              		.file 47 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_tim.h"
 14209              		.file 48 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 14210              		.file 49 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 14211              		.file 50 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 14212              		.file 51 "Inc/mc_type.h"
 14213              		.file 52 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/math.h"
 14214              		.file 53 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/math.h"
 14215              		.file 54 "Inc/main.h"
 14216              		.file 55 "Inc/axis.hpp"
 14217              		.file 56 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 14218              		.file 57 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 14219              		.file 58 "Inc/tim.h"
 14220              		.file 59 "Inc/controller.hpp"
 14221              		.file 60 "<built-in>"
ARM GAS  /tmp/ccATuxCb.s 			page 441


DEFINED SYMBOLS
                            *ABS*:0000000000000000 motor.cpp
     /tmp/ccATuxCb.s:18     .text._ZSt3absf:0000000000000000 $t
     /tmp/ccATuxCb.s:26     .text._ZSt3absf:0000000000000000 _ZSt3absf
     /tmp/ccATuxCb.s:66     .text._ZnwjPv:0000000000000000 $t
     /tmp/ccATuxCb.s:73     .text._ZnwjPv:0000000000000000 _ZnwjPv
     /tmp/ccATuxCb.s:113    .rodata._ZN6__pstl9execution2v1L3seqE:0000000000000000 $d
     /tmp/ccATuxCb.s:116    .rodata._ZN6__pstl9execution2v1L3seqE:0000000000000000 _ZN6__pstl9execution2v1L3seqE
     /tmp/ccATuxCb.s:119    .rodata._ZN6__pstl9execution2v1L3parE:0000000000000000 $d
     /tmp/ccATuxCb.s:122    .rodata._ZN6__pstl9execution2v1L3parE:0000000000000000 _ZN6__pstl9execution2v1L3parE
     /tmp/ccATuxCb.s:125    .rodata._ZN6__pstl9execution2v1L9par_unseqE:0000000000000000 $d
     /tmp/ccATuxCb.s:128    .rodata._ZN6__pstl9execution2v1L9par_unseqE:0000000000000000 _ZN6__pstl9execution2v1L9par_unseqE
     /tmp/ccATuxCb.s:131    .rodata._ZN6__pstl9execution2v1L5unseqE:0000000000000000 $d
     /tmp/ccATuxCb.s:134    .rodata._ZN6__pstl9execution2v1L5unseqE:0000000000000000 _ZN6__pstl9execution2v1L5unseqE
     /tmp/ccATuxCb.s:137    .text._ZSt26__throw_bad_variant_accessPKc:0000000000000000 $t
     /tmp/ccATuxCb.s:144    .text._ZSt26__throw_bad_variant_accessPKc:0000000000000000 _ZSt26__throw_bad_variant_accessPKc
     /tmp/ccATuxCb.s:169    .rodata:0000000000000000 $d
     /tmp/ccATuxCb.s:176    .text._ZSt26__throw_bad_variant_accessb:0000000000000000 $t
     /tmp/ccATuxCb.s:183    .text._ZSt26__throw_bad_variant_accessb:0000000000000000 _ZSt26__throw_bad_variant_accessb
     /tmp/ccATuxCb.s:229    .text._ZSt26__throw_bad_variant_accessb:0000000000000028 $d
     /tmp/ccATuxCb.s:235    .rodata._ZL16OFFSET_TAB_CCMRx:0000000000000000 $d
     /tmp/ccATuxCb.s:238    .rodata._ZL16OFFSET_TAB_CCMRx:0000000000000000 _ZL16OFFSET_TAB_CCMRx
     /tmp/ccATuxCb.s:241    .rodata._ZL14SHIFT_TAB_OCxx:0000000000000000 $d
     /tmp/ccATuxCb.s:244    .rodata._ZL14SHIFT_TAB_OCxx:0000000000000000 _ZL14SHIFT_TAB_OCxx
     /tmp/ccATuxCb.s:247    .rodata._ZL14SHIFT_TAB_ICxx:0000000000000000 $d
     /tmp/ccATuxCb.s:250    .rodata._ZL14SHIFT_TAB_ICxx:0000000000000000 _ZL14SHIFT_TAB_ICxx
     /tmp/ccATuxCb.s:253    .rodata._ZL14SHIFT_TAB_CCxP:0000000000000000 $d
     /tmp/ccATuxCb.s:256    .rodata._ZL14SHIFT_TAB_CCxP:0000000000000000 _ZL14SHIFT_TAB_CCxP
     /tmp/ccATuxCb.s:259    .rodata._ZL14SHIFT_TAB_OISx:0000000000000000 $d
     /tmp/ccATuxCb.s:262    .rodata._ZL14SHIFT_TAB_OISx:0000000000000000 _ZL14SHIFT_TAB_OISx
     /tmp/ccATuxCb.s:265    .rodata._ZL19USART_PRESCALER_TAB:0000000000000000 $d
     /tmp/ccATuxCb.s:268    .rodata._ZL19USART_PRESCALER_TAB:0000000000000000 _ZL19USART_PRESCALER_TAB
     /tmp/ccATuxCb.s:282    .rodata._ZL18CHANNEL_OFFSET_TAB:0000000000000000 $d
     /tmp/ccATuxCb.s:285    .rodata._ZL18CHANNEL_OFFSET_TAB:0000000000000000 _ZL18CHANNEL_OFFSET_TAB
     /tmp/ccATuxCb.s:288    .text._ZSt4sqrtf:0000000000000000 $t
     /tmp/ccATuxCb.s:295    .text._ZSt4sqrtf:0000000000000000 _ZSt4sqrtf
     /tmp/ccATuxCb.s:332    .text._ZN5MotorUt_ixEj:0000000000000000 $t
     /tmp/ccATuxCb.s:339    .text._ZN5MotorUt_ixEj:0000000000000000 _ZN5MotorUt_ixEj
     /tmp/ccATuxCb.s:382    .rodata._ZL12one_by_sqrt3:0000000000000000 $d
     /tmp/ccATuxCb.s:385    .rodata._ZL12one_by_sqrt3:0000000000000000 _ZL12one_by_sqrt3
     /tmp/ccATuxCb.s:388    .rodata._ZL12two_by_sqrt3:0000000000000000 $d
     /tmp/ccATuxCb.s:391    .rodata._ZL12two_by_sqrt3:0000000000000000 _ZL12two_by_sqrt3
     /tmp/ccATuxCb.s:394    .rodata._ZL10sqrt3_by_2:0000000000000000 $d
     /tmp/ccATuxCb.s:397    .rodata._ZL10sqrt3_by_2:0000000000000000 _ZL10sqrt3_by_2
     /tmp/ccATuxCb.s:400    .text.fmodf_pos:0000000000000000 $t
     /tmp/ccATuxCb.s:406    .text.fmodf_pos:0000000000000000 fmodf_pos
     /tmp/ccATuxCb.s:459    .text.wrap_pm:0000000000000000 $t
     /tmp/ccATuxCb.s:465    .text.wrap_pm:0000000000000000 wrap_pm
     /tmp/ccATuxCb.s:511    .text.wrap_pm_pi:0000000000000000 $t
     /tmp/ccATuxCb.s:517    .text.wrap_pm_pi:0000000000000000 wrap_pm_pi
     /tmp/ccATuxCb.s:553    .text.wrap_pm_pi:0000000000000024 $d
     /tmp/ccATuxCb.s:558    .text._Z6is_nanf:0000000000000000 $t
     /tmp/ccATuxCb.s:565    .text._Z6is_nanf:0000000000000000 _Z6is_nanf
     /tmp/ccATuxCb.s:616    .text._Z12sample_TIM13v:0000000000000000 $t
     /tmp/ccATuxCb.s:623    .text._Z12sample_TIM13v:0000000000000000 _Z12sample_TIM13v
     /tmp/ccATuxCb.s:667    .text._Z12sample_TIM13v:0000000000000020 $d
     /tmp/ccATuxCb.s:672    .text._ZN9TaskTimer5startEv:0000000000000000 $t
ARM GAS  /tmp/ccATuxCb.s 			page 442


     /tmp/ccATuxCb.s:679    .text._ZN9TaskTimer5startEv:0000000000000000 _ZN9TaskTimer5startEv
     /tmp/ccATuxCb.s:714    .text._ZN9TaskTimer4stopEm:0000000000000000 $t
     /tmp/ccATuxCb.s:721    .text._ZN9TaskTimer4stopEm:0000000000000000 _ZN9TaskTimer4stopEm
     /tmp/ccATuxCb.s:10484  .text._ZSt3maxImERKT_S2_S2_:0000000000000000 _ZSt3maxImERKT_S2_S2_
     /tmp/ccATuxCb.s:796    .text._ZN9TaskTimer4stopEm:0000000000000054 $d
     /tmp/ccATuxCb.s:801    .text._ZN16TaskTimerContextC2ER9TaskTimer:0000000000000000 $t
     /tmp/ccATuxCb.s:808    .text._ZN16TaskTimerContextC2ER9TaskTimer:0000000000000000 _ZN16TaskTimerContextC2ER9TaskTimer
     /tmp/ccATuxCb.s:808    .text._ZN16TaskTimerContextC2ER9TaskTimer:0000000000000000 _ZN16TaskTimerContextC1ER9TaskTimer
     /tmp/ccATuxCb.s:860    .text._ZN16TaskTimerContextD2Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:867    .text._ZN16TaskTimerContextD2Ev:0000000000000000 _ZN16TaskTimerContextD2Ev
     /tmp/ccATuxCb.s:867    .text._ZN16TaskTimerContextD2Ev:0000000000000000 _ZN16TaskTimerContextD1Ev
     /tmp/ccATuxCb.s:913    .text.cpu_enter_critical:0000000000000000 $t
     /tmp/ccATuxCb.s:920    .text.cpu_enter_critical:0000000000000000 cpu_enter_critical
     /tmp/ccATuxCb.s:988    .text.cpu_exit_critical:0000000000000000 $t
     /tmp/ccATuxCb.s:995    .text.cpu_exit_critical:0000000000000000 cpu_exit_critical
     /tmp/ccATuxCb.s:1047   .text._ZSt5clampIfERKT_S2_S2_S2_:0000000000000000 $t
     /tmp/ccATuxCb.s:1054   .text._ZSt5clampIfERKT_S2_S2_S2_:0000000000000000 _ZSt5clampIfERKT_S2_S2_S2_
     /tmp/ccATuxCb.s:1124   .rodata._ZL23CURRENT_ADC_LOWER_BOUND:0000000000000000 $d
     /tmp/ccATuxCb.s:1127   .rodata._ZL23CURRENT_ADC_LOWER_BOUND:0000000000000000 _ZL23CURRENT_ADC_LOWER_BOUND
     /tmp/ccATuxCb.s:1130   .rodata._ZL23CURRENT_ADC_UPPER_BOUND:0000000000000000 $d
     /tmp/ccATuxCb.s:1133   .rodata._ZL23CURRENT_ADC_UPPER_BOUND:0000000000000000 _ZL23CURRENT_ADC_UPPER_BOUND
     /tmp/ccATuxCb.s:1136   .text._ZN31ResistanceMeasurementControlLaw5resetEv:0000000000000000 $t
     /tmp/ccATuxCb.s:1143   .text._ZN31ResistanceMeasurementControlLaw5resetEv:0000000000000000 _ZN31ResistanceMeasurementControlLaw5resetEv
     /tmp/ccATuxCb.s:10544  .text._ZNSt8optionalIfEaSESt9nullopt_t:0000000000000000 _ZNSt8optionalIfEaSESt9nullopt_t
     /tmp/ccATuxCb.s:1185   .text._ZNSt8optionalISt4pairIffEEptEv:0000000000000000 $t
     /tmp/ccATuxCb.s:1192   .text._ZNSt8optionalISt4pairIffEEptEv:0000000000000000 _ZNSt8optionalISt4pairIffEEptEv
     /tmp/ccATuxCb.s:1285   .text._ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv:0000000000000000 _ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv
     /tmp/ccATuxCb.s:1239   .text._ZSt11__addressofISt4pairIffEEPT_RS2_:0000000000000000 _ZSt11__addressofISt4pairIffEEPT_RS2_
     /tmp/ccATuxCb.s:1232   .text._ZSt11__addressofISt4pairIffEEPT_RS2_:0000000000000000 $t
     /tmp/ccATuxCb.s:1278   .text._ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv:0000000000000000 $t
     /tmp/ccATuxCb.s:1329   .text._ZNSt22_Optional_payload_baseISt4pairIffEE6_M_getEv:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEE6_M_getEv
     /tmp/ccATuxCb.s:1322   .text._ZNSt22_Optional_payload_baseISt4pairIffEE6_M_getEv:0000000000000000 $t
     /tmp/ccATuxCb.s:1367   .text._ZNKSt8optionalIfE9has_valueEv:0000000000000000 $t
     /tmp/ccATuxCb.s:1374   .text._ZNKSt8optionalIfE9has_valueEv:0000000000000000 _ZNKSt8optionalIfE9has_valueEv
     /tmp/ccATuxCb.s:1417   .text._ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv:0000000000000000 _ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv
     /tmp/ccATuxCb.s:1410   .text._ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv:0000000000000000 $t
     /tmp/ccATuxCb.s:1456   .text._ZNRSt8optionalIfEdeEv:0000000000000000 $t
     /tmp/ccATuxCb.s:1463   .text._ZNRSt8optionalIfEdeEv:0000000000000000 _ZNRSt8optionalIfEdeEv
     /tmp/ccATuxCb.s:1506   .text._ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv:0000000000000000 _ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv
     /tmp/ccATuxCb.s:1499   .text._ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv:0000000000000000 $t
     /tmp/ccATuxCb.s:1550   .text._ZNSt22_Optional_payload_baseIfE6_M_getEv:0000000000000000 _ZNSt22_Optional_payload_baseIfE6_M_getEv
     /tmp/ccATuxCb.s:1543   .text._ZNSt22_Optional_payload_baseIfE6_M_getEv:0000000000000000 $t
     /tmp/ccATuxCb.s:1588   .text._ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 $t
     /tmp/ccATuxCb.s:1595   .text._ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 _ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm
     /tmp/ccATuxCb.s:2080   .text._ZNKSt8optionalISt4pairIffEE9has_valueEv:0000000000000000 _ZNKSt8optionalISt4pairIffEE9has_valueEv
     /tmp/ccATuxCb.s:6967   .text._ZNSt8optionalIfEC1IfLb1EEEOT_:0000000000000000 _ZNSt8optionalIfEC1IfLb1EEEOT_
     /tmp/ccATuxCb.s:1816   .text._ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000174 $d
     /tmp/ccATuxCb.s:1823   .text._ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 $t
     /tmp/ccATuxCb.s:1830   .text._ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 _ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE
     /tmp/ccATuxCb.s:10589  .text._ZNSt4pairIffEC2IRffLb1EEEOT_OT0_:0000000000000000 _ZNSt4pairIffEC1IRffLb1EEEOT_OT0_
     /tmp/ccATuxCb.s:10651  .text._ZNSt8optionalISt4pairIffEEaSIS1_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS2_NSt9remove_cvINSt16remove_referenceIT_E4typeEE4typeEEES5_ISt6__and_IJSt9is_scalarIS1_ES6_IS1_NSt5decayIS9_E4typeEEEEESt16is_constructibleIS1_JS9_EESt13is_assignableIRS1_S9_EEERS2_E4typeEOS9_:0000000000000000 _ZNSt8optionalISt4pairIffEEaSIS1_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS2_NSt9remove_cvINSt16remove_referenceIT_E4typeEE4typeEEES5_ISt6__and_IJSt9is_scalarIS1_ES6_IS1_NSt5decayIS9_E4typeEEEEESt16is_constructibleIS1_JS9_EESt13is_assignableIRS1_S9_EEERS2_E4typeEOS9_
     /tmp/ccATuxCb.s:1928   .text._ZN31ResistanceMeasurementControlLaw14get_resistanceEv:0000000000000000 $t
     /tmp/ccATuxCb.s:1935   .text._ZN31ResistanceMeasurementControlLaw14get_resistanceEv:0000000000000000 _ZN31ResistanceMeasurementControlLaw14get_resistanceEv
     /tmp/ccATuxCb.s:1979   .text._ZN31ResistanceMeasurementControlLaw9get_IbetaEv:0000000000000000 $t
     /tmp/ccATuxCb.s:1986   .text._ZN31ResistanceMeasurementControlLaw9get_IbetaEv:0000000000000000 _ZN31ResistanceMeasurementControlLaw9get_IbetaEv
     /tmp/ccATuxCb.s:2026   .text._ZN31InductanceMeasurementControlLaw5resetEv:0000000000000000 $t
     /tmp/ccATuxCb.s:2033   .text._ZN31InductanceMeasurementControlLaw5resetEv:0000000000000000 _ZN31InductanceMeasurementControlLaw5resetEv
ARM GAS  /tmp/ccATuxCb.s 			page 443


     /tmp/ccATuxCb.s:2073   .text._ZNKSt8optionalISt4pairIffEE9has_valueEv:0000000000000000 $t
     /tmp/ccATuxCb.s:2123   .text._ZNKSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv:0000000000000000 _ZNKSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv
     /tmp/ccATuxCb.s:2116   .text._ZNKSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv:0000000000000000 $t
     /tmp/ccATuxCb.s:2162   .text._ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 $t
     /tmp/ccATuxCb.s:2169   .text._ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 _ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm
     /tmp/ccATuxCb.s:2303   .text._ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:00000000000000b4 $d
     /tmp/ccATuxCb.s:2308   .text._ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 $t
     /tmp/ccATuxCb.s:2315   .text._ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 _ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE
     /tmp/ccATuxCb.s:10360  .text._ZNSt4pairIffEC2IffLb1EEEOT_OT0_:0000000000000000 _ZNSt4pairIffEC1IffLb1EEEOT_OT0_
     /tmp/ccATuxCb.s:2400   .text._ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:00000000000000a0 $d
     /tmp/ccATuxCb.s:2406   .text._ZN31InductanceMeasurementControlLaw14get_inductanceEv:0000000000000000 $t
     /tmp/ccATuxCb.s:2413   .text._ZN31InductanceMeasurementControlLaw14get_inductanceEv:0000000000000000 _ZN31InductanceMeasurementControlLaw14get_inductanceEv
     /tmp/ccATuxCb.s:2474   .text._ZN31InductanceMeasurementControlLaw14get_inductanceEv:0000000000000058 $d
     /tmp/ccATuxCb.s:2479   .text._ZN15PhaseControlLawILj3EEC2Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:2486   .text._ZN15PhaseControlLawILj3EEC2Ev:0000000000000000 _ZN15PhaseControlLawILj3EEC2Ev
     /tmp/ccATuxCb.s:2528   .text._ZN15PhaseControlLawILj3EEC2Ev:000000000000001c $d
     /tmp/ccATuxCb.s:14165  .rodata._ZTV15PhaseControlLawILj3EE:0000000000000000 _ZTV15PhaseControlLawILj3EE
     /tmp/ccATuxCb.s:2486   .text._ZN15PhaseControlLawILj3EEC2Ev:0000000000000000 _ZN15PhaseControlLawILj3EEC1Ev
     /tmp/ccATuxCb.s:2535   .text._ZN24AlphaBetaFrameControllerC2Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:2542   .text._ZN24AlphaBetaFrameControllerC2Ev:0000000000000000 _ZN24AlphaBetaFrameControllerC2Ev
     /tmp/ccATuxCb.s:2582   .text._ZN24AlphaBetaFrameControllerC2Ev:0000000000000020 $d
     /tmp/ccATuxCb.s:2542   .text._ZN24AlphaBetaFrameControllerC2Ev:0000000000000000 _ZN24AlphaBetaFrameControllerC1Ev
     /tmp/ccATuxCb.s:2589   .text._ZN13ComponentBaseC2Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:2596   .text._ZN13ComponentBaseC2Ev:0000000000000000 _ZN13ComponentBaseC2Ev
     /tmp/ccATuxCb.s:2638   .text._ZN13ComponentBaseC2Ev:000000000000001c $d
     /tmp/ccATuxCb.s:14176  .rodata._ZTV13ComponentBase:0000000000000000 _ZTV13ComponentBase
     /tmp/ccATuxCb.s:2596   .text._ZN13ComponentBaseC2Ev:0000000000000000 _ZN13ComponentBaseC1Ev
     /tmp/ccATuxCb.s:2645   .text._ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:2652   .text._ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1Ev:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1Ev
     /tmp/ccATuxCb.s:2689   .text._ZNSt22_Optional_payload_baseISt4pairIffEEC2Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:2696   .text._ZNSt22_Optional_payload_baseISt4pairIffEEC2Ev:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEEC2Ev
     /tmp/ccATuxCb.s:2696   .text._ZNSt22_Optional_payload_baseISt4pairIffEEC2Ev:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEEC1Ev
     /tmp/ccATuxCb.s:2739   .text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC2Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:2746   .text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC2Ev:0000000000000000 _ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC2Ev
     /tmp/ccATuxCb.s:2746   .text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC2Ev:0000000000000000 _ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC1Ev
     /tmp/ccATuxCb.s:2786   .text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:2793   .text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2Ev:0000000000000000 _ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2Ev
     /tmp/ccATuxCb.s:2793   .text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2Ev:0000000000000000 _ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC1Ev
     /tmp/ccATuxCb.s:2833   .text._ZNSt8optionalISt4pairIffEEC2Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:2840   .text._ZNSt8optionalISt4pairIffEEC2Ev:0000000000000000 _ZNSt8optionalISt4pairIffEEC2Ev
     /tmp/ccATuxCb.s:2840   .text._ZNSt8optionalISt4pairIffEEC2Ev:0000000000000000 _ZNSt8optionalISt4pairIffEEC1Ev
     /tmp/ccATuxCb.s:2880   .text._ZNSt8__detail9__variant14_UninitializedISt4pairIffELb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:2887   .text._ZNSt8__detail9__variant14_UninitializedISt4pairIffELb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_:0000000000000000 _ZNSt8__detail9__variant14_UninitializedISt4pairIffELb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_
     /tmp/ccATuxCb.s:10723  .text._ZNSt4pairIffEC2IffLb1EEEv:0000000000000000 _ZNSt4pairIffEC1IffLb1EEEv
     /tmp/ccATuxCb.s:2927   .text._ZNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS3_P10OutputPortIS3_EEEC1IJEEESt16in_place_index_tILj0EEDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:2934   .text._ZNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS3_P10OutputPortIS3_EEEC1IJEEESt16in_place_index_tILj0EEDpOT_:0000000000000000 _ZNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS3_P10OutputPortIS3_EEEC1IJEEESt16in_place_index_tILj0EEDpOT_
     /tmp/ccATuxCb.s:2975   .text._ZNSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEEC2ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:2982   .text._ZNSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEEC2ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEEC2ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
     /tmp/ccATuxCb.s:3026   .text._ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:3033   .text._ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
     /tmp/ccATuxCb.s:3033   .text._ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI1NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
     /tmp/ccATuxCb.s:3075   .text._ZNSt8__detail9__variant15_Move_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:3082   .text._ZNSt8__detail9__variant15_Move_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant15_Move_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
     /tmp/ccATuxCb.s:3082   .text._ZNSt8__detail9__variant15_Move_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant15_Move_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI1NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
     /tmp/ccATuxCb.s:3124   .text._ZNSt8__detail9__variant17_Copy_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:3131   .text._ZNSt8__detail9__variant17_Copy_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant17_Copy_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
     /tmp/ccATuxCb.s:3131   .text._ZNSt8__detail9__variant17_Copy_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant17_Copy_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI1NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
ARM GAS  /tmp/ccATuxCb.s 			page 444


     /tmp/ccATuxCb.s:3173   .text._ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:3180   .text._ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
     /tmp/ccATuxCb.s:3180   .text._ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI2NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI1NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
     /tmp/ccATuxCb.s:3222   .text._ZNSt8__detail9__variant13_Variant_baseIJSt4pairIffEPS3_P10OutputPortIS3_EEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:3229   .text._ZNSt8__detail9__variant13_Variant_baseIJSt4pairIffEPS3_P10OutputPortIS3_EEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant13_Variant_baseIJSt4pairIffEPS3_P10OutputPortIS3_EEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
     /tmp/ccATuxCb.s:3270   .text._ZNSt8__detail9__variant13_Variant_baseIJSt4pairIffEPS3_P10OutputPortIS3_EEEC2Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:3277   .text._ZNSt8__detail9__variant13_Variant_baseIJSt4pairIffEPS3_P10OutputPortIS3_EEEC2Ev:0000000000000000 _ZNSt8__detail9__variant13_Variant_baseIJSt4pairIffEPS3_P10OutputPortIS3_EEEC2Ev
     /tmp/ccATuxCb.s:3316   .text._ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEEC2Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:3323   .text._ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEEC2Ev:0000000000000000 _ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEEC2Ev
     /tmp/ccATuxCb.s:3323   .text._ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEEC2Ev:0000000000000000 _ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEEC1Ev
     /tmp/ccATuxCb.s:3363   .text._ZN9InputPortISt4pairIffEEC2Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:3370   .text._ZN9InputPortISt4pairIffEEC2Ev:0000000000000000 _ZN9InputPortISt4pairIffEEC2Ev
     /tmp/ccATuxCb.s:3370   .text._ZN9InputPortISt4pairIffEEC2Ev:0000000000000000 _ZN9InputPortISt4pairIffEEC1Ev
     /tmp/ccATuxCb.s:3410   .text._ZNSt8__detail9__variant14_UninitializedIfLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:3417   .text._ZNSt8__detail9__variant14_UninitializedIfLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_:0000000000000000 _ZNSt8__detail9__variant14_UninitializedIfLb1EEC1IJEEESt16in_place_index_tILj0EEDpOT_
     /tmp/ccATuxCb.s:3461   .text._ZNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEC1IJEEESt16in_place_index_tILj0EEDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:3468   .text._ZNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEC1IJEEESt16in_place_index_tILj0EEDpOT_:0000000000000000 _ZNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEC1IJEEESt16in_place_index_tILj0EEDpOT_
     /tmp/ccATuxCb.s:3509   .text._ZNSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEEC2ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:3516   .text._ZNSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEEC2ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEEC2ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
     /tmp/ccATuxCb.s:3560   .text._ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:3567   .text._ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
     /tmp/ccATuxCb.s:3567   .text._ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJfPfP10OutputPortIfEEECI1NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
     /tmp/ccATuxCb.s:3609   .text._ZNSt8__detail9__variant15_Move_ctor_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:3616   .text._ZNSt8__detail9__variant15_Move_ctor_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant15_Move_ctor_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
     /tmp/ccATuxCb.s:3616   .text._ZNSt8__detail9__variant15_Move_ctor_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant15_Move_ctor_baseILb1EJfPfP10OutputPortIfEEECI1NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
     /tmp/ccATuxCb.s:3658   .text._ZNSt8__detail9__variant17_Copy_assign_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:3665   .text._ZNSt8__detail9__variant17_Copy_assign_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant17_Copy_assign_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
     /tmp/ccATuxCb.s:3665   .text._ZNSt8__detail9__variant17_Copy_assign_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant17_Copy_assign_baseILb1EJfPfP10OutputPortIfEEECI1NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
     /tmp/ccATuxCb.s:3707   .text._ZNSt8__detail9__variant17_Move_assign_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:3714   .text._ZNSt8__detail9__variant17_Move_assign_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant17_Move_assign_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
     /tmp/ccATuxCb.s:3714   .text._ZNSt8__detail9__variant17_Move_assign_baseILb1EJfPfP10OutputPortIfEEECI2NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant17_Move_assign_baseILb1EJfPfP10OutputPortIfEEECI1NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
     /tmp/ccATuxCb.s:3756   .text._ZNSt8__detail9__variant13_Variant_baseIJfPfP10OutputPortIfEEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:3763   .text._ZNSt8__detail9__variant13_Variant_baseIJfPfP10OutputPortIfEEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_:0000000000000000 _ZNSt8__detail9__variant13_Variant_baseIJfPfP10OutputPortIfEEEC1ILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
     /tmp/ccATuxCb.s:3804   .text._ZNSt8__detail9__variant13_Variant_baseIJfPfP10OutputPortIfEEEC2Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:3811   .text._ZNSt8__detail9__variant13_Variant_baseIJfPfP10OutputPortIfEEEC2Ev:0000000000000000 _ZNSt8__detail9__variant13_Variant_baseIJfPfP10OutputPortIfEEEC2Ev
     /tmp/ccATuxCb.s:3850   .text._ZNSt7variantIJfPfP10OutputPortIfEEEC2Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:3857   .text._ZNSt7variantIJfPfP10OutputPortIfEEEC2Ev:0000000000000000 _ZNSt7variantIJfPfP10OutputPortIfEEEC2Ev
     /tmp/ccATuxCb.s:3857   .text._ZNSt7variantIJfPfP10OutputPortIfEEEC2Ev:0000000000000000 _ZNSt7variantIJfPfP10OutputPortIfEEEC1Ev
     /tmp/ccATuxCb.s:3897   .text._ZN9InputPortIfEC2Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:3904   .text._ZN9InputPortIfEC2Ev:0000000000000000 _ZN9InputPortIfEC2Ev
     /tmp/ccATuxCb.s:3904   .text._ZN9InputPortIfEC2Ev:0000000000000000 _ZN9InputPortIfEC1Ev
     /tmp/ccATuxCb.s:3944   .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:3951   .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev
     /tmp/ccATuxCb.s:3988   .text._ZNSt22_Optional_payload_baseIfEC2Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:3995   .text._ZNSt22_Optional_payload_baseIfEC2Ev:0000000000000000 _ZNSt22_Optional_payload_baseIfEC2Ev
     /tmp/ccATuxCb.s:3995   .text._ZNSt22_Optional_payload_baseIfEC2Ev:0000000000000000 _ZNSt22_Optional_payload_baseIfEC1Ev
     /tmp/ccATuxCb.s:4038   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:4045   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev
     /tmp/ccATuxCb.s:4045   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC1Ev
     /tmp/ccATuxCb.s:4085   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:4092   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2Ev:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC2Ev
     /tmp/ccATuxCb.s:4092   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2Ev:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC1Ev
     /tmp/ccATuxCb.s:4132   .text._ZNSt8optionalIfEC2Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:4139   .text._ZNSt8optionalIfEC2Ev:0000000000000000 _ZNSt8optionalIfEC2Ev
     /tmp/ccATuxCb.s:4139   .text._ZNSt8optionalIfEC2Ev:0000000000000000 _ZNSt8optionalIfEC1Ev
     /tmp/ccATuxCb.s:4179   .text._ZN23FieldOrientedControllerC2Ev:0000000000000000 $t
     /tmp/ccATuxCb.s:4186   .text._ZN23FieldOrientedControllerC2Ev:0000000000000000 _ZN23FieldOrientedControllerC2Ev
ARM GAS  /tmp/ccATuxCb.s 			page 445


     /tmp/ccATuxCb.s:4308   .text._ZN23FieldOrientedControllerC2Ev:00000000000000fc $d
     /tmp/ccATuxCb.s:4186   .text._ZN23FieldOrientedControllerC2Ev:0000000000000000 _ZN23FieldOrientedControllerC1Ev
     /tmp/ccATuxCb.s:4322   .text._ZN5MotorC2ERK21MotorHardwareConfig_tRNS_8Config_tE:0000000000000000 $t
     /tmp/ccATuxCb.s:4329   .text._ZN5MotorC2ERK21MotorHardwareConfig_tRNS_8Config_tE:0000000000000000 _ZN5MotorC2ERK21MotorHardwareConfig_tRNS_8Config_tE
     /tmp/ccATuxCb.s:4635   .text._ZN5MotorC2ERK21MotorHardwareConfig_tRNS_8Config_tE:00000000000002fc $d
     /tmp/ccATuxCb.s:4643   .text._ZN5MotorC2ERK21MotorHardwareConfig_tRNS_8Config_tE:0000000000000318 $t
     /tmp/ccATuxCb.s:10423  .text._ZN10OutputPortISt4pairIffEEC2ES1_:0000000000000000 _ZN10OutputPortISt4pairIffEEC1ES1_
     /tmp/ccATuxCb.s:5073   .text._ZN5Motor31update_current_controller_gainsEv:0000000000000000 _ZN5Motor31update_current_controller_gainsEv
     /tmp/ccATuxCb.s:4329   .text._ZN5MotorC2ERK21MotorHardwareConfig_tRNS_8Config_tE:0000000000000000 _ZN5MotorC1ERK21MotorHardwareConfig_tRNS_8Config_tE
     /tmp/ccATuxCb.s:4712   .text._ZN5Motor17apply_pwm_timingsEPtb:0000000000000000 $t
     /tmp/ccATuxCb.s:4719   .text._ZN5Motor17apply_pwm_timingsEPtb:0000000000000000 _ZN5Motor17apply_pwm_timingsEPtb
     /tmp/ccATuxCb.s:4938   .text._ZN5Motor6disarmEv:0000000000000000 _ZN5Motor6disarmEv
     /tmp/ccATuxCb.s:4840   .text._ZN5Motor3armEP15PhaseControlLawILj3EE:0000000000000000 $t
     /tmp/ccATuxCb.s:4847   .text._ZN5Motor3armEP15PhaseControlLawILj3EE:0000000000000000 _ZN5Motor3armEP15PhaseControlLawILj3EE
     /tmp/ccATuxCb.s:5018   .text._ZN5Motor21reset_current_controlEv:0000000000000000 _ZN5Motor21reset_current_controlEv
     /tmp/ccATuxCb.s:4931   .text._ZN5Motor6disarmEv:0000000000000000 $t
     /tmp/ccATuxCb.s:5011   .text._ZN5Motor21reset_current_controlEv:0000000000000000 $t
     /tmp/ccATuxCb.s:5066   .text._ZN5Motor31update_current_controller_gainsEv:0000000000000000 $t
     /tmp/ccATuxCb.s:10778  .text._ZNSt4pairIffEC2IRfS2_Lb1EEEOT_OT0_:0000000000000000 _ZNSt4pairIffEC1IRfS2_Lb1EEEOT_OT0_
     /tmp/ccATuxCb.s:5150   .text._ZN5Motor13DRV8301_setupEv:0000000000000000 $t
     /tmp/ccATuxCb.s:5157   .text._ZN5Motor13DRV8301_setupEv:0000000000000000 _ZN5Motor13DRV8301_setupEv
     /tmp/ccATuxCb.s:5225   .text._ZN5Motor13DRV8301_setupEv:0000000000000058 $d
     /tmp/ccATuxCb.s:5233   .text._ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE:0000000000000000 $t
     /tmp/ccATuxCb.s:5240   .text._ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE:0000000000000000 _ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE
     /tmp/ccATuxCb.s:5293   .text._ZN5Motor15check_DRV_faultEv:0000000000000000 $t
     /tmp/ccATuxCb.s:5300   .text._ZN5Motor15check_DRV_faultEv:0000000000000000 _ZN5Motor15check_DRV_faultEv
     /tmp/ccATuxCb.s:5338   .text._ZN5Motor9do_checksEv:0000000000000000 $t
     /tmp/ccATuxCb.s:5345   .text._ZN5Motor9do_checksEv:0000000000000000 _ZN5Motor9do_checksEv
     /tmp/ccATuxCb.s:5404   .text._ZN5Motor21effective_current_limEv:0000000000000000 $t
     /tmp/ccATuxCb.s:5411   .text._ZN5Motor21effective_current_limEv:0000000000000000 _ZN5Motor21effective_current_limEv
     /tmp/ccATuxCb.s:10840  .text._ZSt3minIfERKT_S2_S2_:0000000000000000 _ZSt3minIfERKT_S2_S2_
     /tmp/ccATuxCb.s:10900  .text._ZNSt5arrayIP14CurrentLimiterLj2EE5beginEv:0000000000000000 _ZNSt5arrayIP14CurrentLimiterLj2EE5beginEv
     /tmp/ccATuxCb.s:10944  .text._ZNSt5arrayIP14CurrentLimiterLj2EE3endEv:0000000000000000 _ZNSt5arrayIP14CurrentLimiterLj2EE3endEv
     /tmp/ccATuxCb.s:5563   .text._ZN5Motor21effective_current_limEv:00000000000000e8 $d
     /tmp/ccATuxCb.s:5569   .text._ZN5Motor20max_available_torqueEv:0000000000000000 $t
     /tmp/ccATuxCb.s:5576   .text._ZN5Motor20max_available_torqueEv:0000000000000000 _ZN5Motor20max_available_torqueEv
     /tmp/ccATuxCb.s:5642   .rodata._ZZN5Motor10log_timingEN10ODriveIntf11TimingLog_tEE14clocks_per_cnt:0000000000000000 $d
     /tmp/ccATuxCb.s:5645   .rodata._ZZN5Motor10log_timingEN10ODriveIntf11TimingLog_tEE14clocks_per_cnt:0000000000000000 _ZZN5Motor10log_timingEN10ODriveIntf11TimingLog_tEE14clocks_per_cnt
     /tmp/ccATuxCb.s:5648   .text._ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE:0000000000000000 $t
     /tmp/ccATuxCb.s:5655   .text._ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE:0000000000000000 _ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE
     /tmp/ccATuxCb.s:5715   .text._ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE:000000000000003c $d
     /tmp/ccATuxCb.s:5720   .text._ZN5Motor18pos_linearity_initEv:0000000000000000 $t
     /tmp/ccATuxCb.s:5727   .text._ZN5Motor18pos_linearity_initEv:0000000000000000 _ZN5Motor18pos_linearity_initEv
     /tmp/ccATuxCb.s:5763   .text._ZN5Motor15current_CorrectEl:0000000000000000 $t
     /tmp/ccATuxCb.s:5770   .text._ZN5Motor15current_CorrectEl:0000000000000000 _ZN5Motor15current_CorrectEl
     /tmp/ccATuxCb.s:5810   .text._ZN5Motor31setting_motor_current_linearityEmf:0000000000000000 $t
     /tmp/ccATuxCb.s:5817   .text._ZN5Motor31setting_motor_current_linearityEmf:0000000000000000 _ZN5Motor31setting_motor_current_linearityEmf
     /tmp/ccATuxCb.s:5870   .text._ZN5Motor27get_motor_current_linearityEm:0000000000000000 $t
     /tmp/ccATuxCb.s:5877   .text._ZN5Motor27get_motor_current_linearityEm:0000000000000000 _ZN5Motor27get_motor_current_linearityEm
     /tmp/ccATuxCb.s:5933   .text._ZN5Motor30setting_motor_torque_linearityEmf:0000000000000000 $t
     /tmp/ccATuxCb.s:5940   .text._ZN5Motor30setting_motor_torque_linearityEmf:0000000000000000 _ZN5Motor30setting_motor_torque_linearityEmf
     /tmp/ccATuxCb.s:5993   .text._ZN5Motor26get_motor_torque_linearityEm:0000000000000000 $t
     /tmp/ccATuxCb.s:6000   .text._ZN5Motor26get_motor_torque_linearityEm:0000000000000000 _ZN5Motor26get_motor_torque_linearityEm
     /tmp/ccATuxCb.s:6056   .text._ZN5Motor25get_positive_torque_slopeEm:0000000000000000 $t
     /tmp/ccATuxCb.s:6063   .text._ZN5Motor25get_positive_torque_slopeEm:0000000000000000 _ZN5Motor25get_positive_torque_slopeEm
     /tmp/ccATuxCb.s:6117   .text._ZN5Motor25get_negative_torque_slopeEm:0000000000000000 $t
     /tmp/ccATuxCb.s:6124   .text._ZN5Motor25get_negative_torque_slopeEm:0000000000000000 _ZN5Motor25get_negative_torque_slopeEm
ARM GAS  /tmp/ccATuxCb.s 			page 446


     /tmp/ccATuxCb.s:6178   .text._ZN5Motor29setting_positive_torque_slopeEmf:0000000000000000 $t
     /tmp/ccATuxCb.s:6185   .text._ZN5Motor29setting_positive_torque_slopeEmf:0000000000000000 _ZN5Motor29setting_positive_torque_slopeEmf
     /tmp/ccATuxCb.s:6246   .text._ZN5Motor29setting_negative_torque_slopeEmf:0000000000000000 $t
     /tmp/ccATuxCb.s:6253   .text._ZN5Motor29setting_negative_torque_slopeEmf:0000000000000000 _ZN5Motor29setting_negative_torque_slopeEmf
     /tmp/ccATuxCb.s:6314   .text._ZN5Motor28setting_current2torque_slopeEmf:0000000000000000 $t
     /tmp/ccATuxCb.s:6321   .text._ZN5Motor28setting_current2torque_slopeEmf:0000000000000000 _ZN5Motor28setting_current2torque_slopeEmf
     /tmp/ccATuxCb.s:6374   .text._ZN5Motor28getting_current2torque_slopeEm:0000000000000000 $t
     /tmp/ccATuxCb.s:6381   .text._ZN5Motor28getting_current2torque_slopeEm:0000000000000000 _ZN5Motor28getting_current2torque_slopeEm
     /tmp/ccATuxCb.s:6437   .text._ZN5Motor27convert_torque_from_currentEfPfmf:0000000000000000 $t
     /tmp/ccATuxCb.s:6444   .text._ZN5Motor27convert_torque_from_currentEfPfmf:0000000000000000 _ZN5Motor27convert_torque_from_currentEfPfmf
     /tmp/ccATuxCb.s:6544   .text._ZN5Motor28check_for_current_saturationEm:0000000000000000 $t
     /tmp/ccATuxCb.s:6551   .text._ZN5Motor28check_for_current_saturationEm:0000000000000000 _ZN5Motor28check_for_current_saturationEm
     /tmp/ccATuxCb.s:6619   .text._ZN5Motor25phase_current_from_adcvalElf:0000000000000000 $t
     /tmp/ccATuxCb.s:6626   .text._ZN5Motor25phase_current_from_adcvalElf:0000000000000000 _ZN5Motor25phase_current_from_adcvalElf
     /tmp/ccATuxCb.s:6693   .text._ZN5Motor25phase_current_from_adcvalElf:0000000000000068 $d
     /tmp/ccATuxCb.s:6698   .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJfEEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:6705   .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJfEEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:6757   .text._ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE:0000000000000000 _ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
     /tmp/ccATuxCb.s:6750   .text._ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE:0000000000000000 $t
     /tmp/ccATuxCb.s:6795   .text._ZNSt22_Optional_payload_baseIfEC2IJfEEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:6802   .text._ZNSt22_Optional_payload_baseIfEC2IJfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseIfEC2IJfEEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:6853   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJfEEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:6860   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJfEEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:6860   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJfEEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:6905   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2IJfELb0EEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:6912   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2IJfELb0EEESt10in_place_tDpOT_:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC2IJfELb0EEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:6960   .text._ZNSt8optionalIfEC1IfLb1EEEOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:7014   .text._ZN5Motor24measure_phase_resistanceEff:0000000000000000 $t
     /tmp/ccATuxCb.s:7021   .text._ZN5Motor24measure_phase_resistanceEff:0000000000000000 _ZN5Motor24measure_phase_resistanceEff
     /tmp/ccATuxCb.s:7203   .text._ZN5Motor24measure_phase_resistanceEff:0000000000000134 $d
     /tmp/ccATuxCb.s:14152  .rodata._ZTV31ResistanceMeasurementControlLaw:0000000000000000 _ZTV31ResistanceMeasurementControlLaw
     /tmp/ccATuxCb.s:7211   .text._ZN5Motor24measure_phase_inductanceEf:0000000000000000 $t
     /tmp/ccATuxCb.s:7218   .text._ZN5Motor24measure_phase_inductanceEf:0000000000000000 _ZN5Motor24measure_phase_inductanceEf
     /tmp/ccATuxCb.s:7384   .text._ZN5Motor24measure_phase_inductanceEf:0000000000000110 $d
     /tmp/ccATuxCb.s:14139  .rodata._ZTV31InductanceMeasurementControlLaw:0000000000000000 _ZTV31InductanceMeasurementControlLaw
     /tmp/ccATuxCb.s:7392   .text._ZN5Motor15run_calibrationEv:0000000000000000 $t
     /tmp/ccATuxCb.s:7399   .text._ZN5Motor15run_calibrationEv:0000000000000000 _ZN5Motor15run_calibrationEv
     /tmp/ccATuxCb.s:7511   .text._ZN5Motor26enqueue_modulation_timingsEff:0000000000000000 $t
     /tmp/ccATuxCb.s:7518   .text._ZN5Motor26enqueue_modulation_timingsEff:0000000000000000 _ZN5Motor26enqueue_modulation_timingsEff
     /tmp/ccATuxCb.s:8062   .text._ZN5Motor20abc_sign_calculationEfPlS0_S0_:0000000000000000 _ZN5Motor20abc_sign_calculationEfPlS0_S0_
     /tmp/ccATuxCb.s:7881   .text._ZN5Motor26enqueue_modulation_timingsEff:0000000000000304 $d
     /tmp/ccATuxCb.s:7889   .text._ZN5Motor23enqueue_voltage_timingsEff:0000000000000000 $t
     /tmp/ccATuxCb.s:7896   .text._ZN5Motor23enqueue_voltage_timingsEff:0000000000000000 _ZN5Motor23enqueue_voltage_timingsEff
     /tmp/ccATuxCb.s:7971   .text._ZN5Motor23enqueue_voltage_timingsEff:000000000000007c $d
     /tmp/ccATuxCb.s:7977   .text._ZN5Motor11FOC_voltageEfff:0000000000000000 $t
     /tmp/ccATuxCb.s:7984   .text._ZN5Motor11FOC_voltageEfff:0000000000000000 _ZN5Motor11FOC_voltageEfff
     /tmp/ccATuxCb.s:8055   .text._ZN5Motor20abc_sign_calculationEfPlS0_S0_:0000000000000000 $t
     /tmp/ccATuxCb.s:8296   .text._ZN5Motor20abc_sign_calculationEfPlS0_S0_:00000000000001cc $d
     /tmp/ccATuxCb.s:8307   .text._ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_:0000000000000000 $t
     /tmp/ccATuxCb.s:8314   .text._ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_:0000000000000000 _ZSt3getILj0EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
     /tmp/ccATuxCb.s:8407   .text._ZSt4moveIRSt4pairIffEEONSt16remove_referenceIT_E4typeEOS4_:0000000000000000 _ZSt4moveIRSt4pairIffEEONSt16remove_referenceIT_E4typeEOS4_
     /tmp/ccATuxCb.s:8362   .text._ZNSt10__pair_getILj0EE10__move_getIffEEOT_OSt4pairIS2_T0_E:0000000000000000 _ZNSt10__pair_getILj0EE10__move_getIffEEOT_OSt4pairIS2_T0_E
     /tmp/ccATuxCb.s:8355   .text._ZNSt10__pair_getILj0EE10__move_getIffEEOT_OSt4pairIS2_T0_E:0000000000000000 $t
     /tmp/ccATuxCb.s:8400   .text._ZSt4moveIRSt4pairIffEEONSt16remove_referenceIT_E4typeEOS4_:0000000000000000 $t
     /tmp/ccATuxCb.s:8445   .text._ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_:0000000000000000 $t
     /tmp/ccATuxCb.s:8452   .text._ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_:0000000000000000 _ZSt3getILj1EffEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_
     /tmp/ccATuxCb.s:8499   .text._ZNSt10__pair_getILj1EE10__move_getIffEEOT0_OSt4pairIT_S2_E:0000000000000000 _ZNSt10__pair_getILj1EE10__move_getIffEEOT0_OSt4pairIT_S2_E
ARM GAS  /tmp/ccATuxCb.s 			page 447


     /tmp/ccATuxCb.s:8492   .text._ZNSt10__pair_getILj1EE10__move_getIffEEOT0_OSt4pairIT_S2_E:0000000000000000 $t
     /tmp/ccATuxCb.s:8538   .text._ZN5Motor11FOC_currentEffff:0000000000000000 $t
     /tmp/ccATuxCb.s:8545   .text._ZN5Motor11FOC_currentEffff:0000000000000000 _ZN5Motor11FOC_currentEffff
     /tmp/ccATuxCb.s:10989  .text._ZNRSt8optionalISt4pairIffEEdeEv:0000000000000000 _ZNRSt8optionalISt4pairIffEEdeEv
     /tmp/ccATuxCb.s:8953   .text._ZN5Motor11FOC_currentEffff:00000000000003ec $d
     /tmp/ccATuxCb.s:8961   .text._ZN5Motor11FOC_currentEffff:0000000000000404 $t
     /tmp/ccATuxCb.s:9088   .text._ZN5Motor11FOC_currentEffff:0000000000000530 $d
     /tmp/ccATuxCb.s:9093   .text._ZN5Motor6updateEfff:0000000000000000 $t
     /tmp/ccATuxCb.s:9100   .text._ZN5Motor6updateEfff:0000000000000000 _ZN5Motor6updateEfff
     /tmp/ccATuxCb.s:9434   .text._ZN5Motor6updateEfff:00000000000002a8 $d
     /tmp/ccATuxCb.s:9440   .text._ZN5Motor6updateEm:0000000000000000 $t
     /tmp/ccATuxCb.s:9447   .text._ZN5Motor6updateEm:0000000000000000 _ZN5Motor6updateEm
     /tmp/ccATuxCb.s:11032  .text._ZN9InputPortIfE7presentEv:0000000000000000 _ZN9InputPortIfE7presentEv
     /tmp/ccATuxCb.s:11177  .text._ZN10OutputPortISt4pairIffEE8previousEv:0000000000000000 _ZN10OutputPortISt4pairIffEE8previousEv
     /tmp/ccATuxCb.s:11236  .text._ZNKSt8optionalISt4pairIffEEcvbEv:0000000000000000 _ZNKSt8optionalISt4pairIffEEcvbEv
     /tmp/ccATuxCb.s:11279  .text._ZN10OutputPortISt4pairIffEEaSES1_:0000000000000000 _ZN10OutputPortISt4pairIffEEaSES1_
     /tmp/ccATuxCb.s:9875   .text._ZN5Motor6updateEm:0000000000000344 $d
     /tmp/ccATuxCb.s:9882   .text._ZN5Motor15current_meas_cbEm:0000000000000000 $t
     /tmp/ccATuxCb.s:9889   .text._ZN5Motor15current_meas_cbEm:0000000000000000 _ZN5Motor15current_meas_cbEm
     /tmp/ccATuxCb.s:11648  .text._ZNSt8optionalIfEC2IRfLb1EEEOT_:0000000000000000 _ZNSt8optionalIfEC1IRfLb1EEEOT_
     /tmp/ccATuxCb.s:11333  .text._ZSt13make_optionalISt5arrayIfLj3EEESt8optionalINSt5decayIT_E4typeEEOS4_:0000000000000000 _ZSt13make_optionalISt5arrayIfLj3EEESt8optionalINSt5decayIT_E4typeEEOS4_
     /tmp/ccATuxCb.s:10006  .text._ZN5Motor15current_meas_cbEm:00000000000000a8 $d
     /tmp/ccATuxCb.s:10017  .text._ZN5Motor13pwm_update_cbEm:0000000000000000 $t
     /tmp/ccATuxCb.s:10024  .text._ZN5Motor13pwm_update_cbEm:0000000000000000 _ZN5Motor13pwm_update_cbEm
     /tmp/ccATuxCb.s:10347  .text._ZN5Motor13pwm_update_cbEm:0000000000000244 $d
     /tmp/ccATuxCb.s:10353  .text._ZNSt4pairIffEC2IffLb1EEEOT_OT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:10360  .text._ZNSt4pairIffEC2IffLb1EEEOT_OT0_:0000000000000000 _ZNSt4pairIffEC2IffLb1EEEOT_OT0_
     /tmp/ccATuxCb.s:10416  .text._ZN10OutputPortISt4pairIffEEC2ES1_:0000000000000000 $t
     /tmp/ccATuxCb.s:10423  .text._ZN10OutputPortISt4pairIffEEC2ES1_:0000000000000000 _ZN10OutputPortISt4pairIffEEC2ES1_
     /tmp/ccATuxCb.s:10477  .text._ZSt3maxImERKT_S2_S2_:0000000000000000 $t
     /tmp/ccATuxCb.s:10537  .text._ZNSt8optionalIfEaSESt9nullopt_t:0000000000000000 $t
     /tmp/ccATuxCb.s:11704  .text._ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE8_M_resetEv:0000000000000000 _ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE8_M_resetEv
     /tmp/ccATuxCb.s:10582  .text._ZNSt4pairIffEC2IRffLb1EEEOT_OT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:10589  .text._ZNSt4pairIffEC2IRffLb1EEEOT_OT0_:0000000000000000 _ZNSt4pairIffEC2IRffLb1EEEOT_OT0_
     /tmp/ccATuxCb.s:11434  .text._ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE:0000000000000000 _ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
     /tmp/ccATuxCb.s:10644  .text._ZNSt8optionalISt4pairIffEEaSIS1_EENSt9enable_ifIX7__and_vISt6__not_ISt7is_sameIS2_NSt9remove_cvINSt16remove_referenceIT_E4typeEE4typeEEES5_ISt6__and_IJSt9is_scalarIS1_ES6_IS1_NSt5decayIS9_E4typeEEEEESt16is_constructibleIS1_JS9_EESt13is_assignableIRS1_S9_EEERS2_E4typeEOS9_:0000000000000000 $t
     /tmp/ccATuxCb.s:11747  .text._ZSt7forwardISt4pairIffEEOT_RNSt16remove_referenceIS2_E4typeE:0000000000000000 _ZSt7forwardISt4pairIffEEOT_RNSt16remove_referenceIS2_E4typeE
     /tmp/ccATuxCb.s:11792  .text._ZNSt4pairIffEaSEOS0_:0000000000000000 _ZNSt4pairIffEaSEOS0_
     /tmp/ccATuxCb.s:11855  .text._ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE12_M_constructIJS1_EEEvDpOT_:0000000000000000 _ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE12_M_constructIJS1_EEEvDpOT_
     /tmp/ccATuxCb.s:10716  .text._ZNSt4pairIffEC2IffLb1EEEv:0000000000000000 $t
     /tmp/ccATuxCb.s:10723  .text._ZNSt4pairIffEC2IffLb1EEEv:0000000000000000 _ZNSt4pairIffEC2IffLb1EEEv
     /tmp/ccATuxCb.s:10771  .text._ZNSt4pairIffEC2IRfS2_Lb1EEEOT_OT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:10778  .text._ZNSt4pairIffEC2IRfS2_Lb1EEEOT_OT0_:0000000000000000 _ZNSt4pairIffEC2IRfS2_Lb1EEEOT_OT0_
     /tmp/ccATuxCb.s:10833  .text._ZSt3minIfERKT_S2_S2_:0000000000000000 $t
     /tmp/ccATuxCb.s:10893  .text._ZNSt5arrayIP14CurrentLimiterLj2EE5beginEv:0000000000000000 $t
     /tmp/ccATuxCb.s:11918  .text._ZNSt5arrayIP14CurrentLimiterLj2EE4dataEv:0000000000000000 _ZNSt5arrayIP14CurrentLimiterLj2EE4dataEv
     /tmp/ccATuxCb.s:10937  .text._ZNSt5arrayIP14CurrentLimiterLj2EE3endEv:0000000000000000 $t
     /tmp/ccATuxCb.s:10982  .text._ZNRSt8optionalISt4pairIffEEdeEv:0000000000000000 $t
     /tmp/ccATuxCb.s:11025  .text._ZN9InputPortIfE7presentEv:0000000000000000 $t
     /tmp/ccATuxCb.s:11963  .text._ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv:0000000000000000 _ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv
     /tmp/ccATuxCb.s:12206  .text._ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:0000000000000000 _ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_
     /tmp/ccATuxCb.s:12269  .text._ZN10OutputPortIfE7presentEv:0000000000000000 _ZN10OutputPortIfE7presentEv
     /tmp/ccATuxCb.s:12328  .text._ZNSt8optionalIfEC2ESt9nullopt_t:0000000000000000 _ZNSt8optionalIfEC1ESt9nullopt_t
     /tmp/ccATuxCb.s:12524  .text._ZSt3getILj1EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:0000000000000000 _ZSt3getILj1EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_
     /tmp/ccATuxCb.s:12587  .text._ZSt13make_optionalIRfESt8optionalINSt5decayIT_E4typeEEOS3_:0000000000000000 _ZSt13make_optionalIRfESt8optionalINSt5decayIT_E4typeEEOS3_
     /tmp/ccATuxCb.s:12731  .text._ZSt3getILj0EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:0000000000000000 _ZSt3getILj0EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_
     /tmp/ccATuxCb.s:11170  .text._ZN10OutputPortISt4pairIffEE8previousEv:0000000000000000 $t
ARM GAS  /tmp/ccATuxCb.s 			page 448


     /tmp/ccATuxCb.s:13062  .text._ZNSt8optionalISt4pairIffEEC2IRS1_Lb1EEEOT_:0000000000000000 _ZNSt8optionalISt4pairIffEEC1IRS1_Lb1EEEOT_
     /tmp/ccATuxCb.s:13118  .text._ZNSt8optionalISt4pairIffEEC2ESt9nullopt_t:0000000000000000 _ZNSt8optionalISt4pairIffEEC1ESt9nullopt_t
     /tmp/ccATuxCb.s:11229  .text._ZNKSt8optionalISt4pairIffEEcvbEv:0000000000000000 $t
     /tmp/ccATuxCb.s:11272  .text._ZN10OutputPortISt4pairIffEEaSES1_:0000000000000000 $t
     /tmp/ccATuxCb.s:13167  .text._ZNSt4pairIffEaSERKS0_:0000000000000000 _ZNSt4pairIffEaSERKS0_
     /tmp/ccATuxCb.s:11326  .text._ZSt13make_optionalISt5arrayIfLj3EEESt8optionalINSt5decayIT_E4typeEEOS4_:0000000000000000 $t
     /tmp/ccATuxCb.s:13225  .text._ZSt7forwardISt5arrayIfLj3EEEOT_RNSt16remove_referenceIS2_E4typeE:0000000000000000 _ZSt7forwardISt5arrayIfLj3EEEOT_RNSt16remove_referenceIS2_E4typeE
     /tmp/ccATuxCb.s:13493  .text._ZNSt8optionalISt5arrayIfLj3EEEC2IS1_Lb1EEEOT_:0000000000000000 _ZNSt8optionalISt5arrayIfLj3EEEC1IS1_Lb1EEEOT_
     /tmp/ccATuxCb.s:11373  .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:11380  .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:11380  .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJRfEEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:11427  .text._ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE:0000000000000000 $t
     /tmp/ccATuxCb.s:11472  .text._ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:11479  .text._ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:11479  .text._ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseIfEC1IJRfEEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:11532  .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:11539  .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:11539  .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:11584  .text._ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:11591  .text._ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:11591  .text._ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC1IJRfELb0EEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:11641  .text._ZNSt8optionalIfEC2IRfLb1EEEOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:11648  .text._ZNSt8optionalIfEC2IRfLb1EEEOT_:0000000000000000 _ZNSt8optionalIfEC2IRfLb1EEEOT_
     /tmp/ccATuxCb.s:11697  .text._ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE8_M_resetEv:0000000000000000 $t
     /tmp/ccATuxCb.s:13549  .text._ZNSt22_Optional_payload_baseIfE8_M_resetEv:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_M_resetEv
     /tmp/ccATuxCb.s:11740  .text._ZSt7forwardISt4pairIffEEOT_RNSt16remove_referenceIS2_E4typeE:0000000000000000 $t
     /tmp/ccATuxCb.s:11785  .text._ZNSt4pairIffEaSEOS0_:0000000000000000 $t
     /tmp/ccATuxCb.s:11848  .text._ZNSt19_Optional_base_implISt4pairIffESt14_Optional_baseIS1_Lb1ELb1EEE12_M_constructIJS1_EEEvDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:13598  .text._ZSt11__addressofINSt22_Optional_payload_baseISt4pairIffEE8_StorageIS2_Lb1EEEEPT_RS6_:0000000000000000 _ZSt11__addressofINSt22_Optional_payload_baseISt4pairIffEE8_StorageIS2_Lb1EEEEPT_RS6_
     /tmp/ccATuxCb.s:11911  .text._ZNSt5arrayIP14CurrentLimiterLj2EE4dataEv:0000000000000000 $t
     /tmp/ccATuxCb.s:13643  .text._ZNSt14__array_traitsIP14CurrentLimiterLj2EE6_S_ptrERA2_KS1_:0000000000000000 _ZNSt14__array_traitsIP14CurrentLimiterLj2EE6_S_ptrERA2_KS1_
     /tmp/ccATuxCb.s:11956  .text._ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv:0000000000000000 $t
     /tmp/ccATuxCb.s:12002  .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:12009  .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 _ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_
     /tmp/ccATuxCb.s:13870  .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS8_E4typeE:0000000000000000 _ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS8_E4typeE
     /tmp/ccATuxCb.s:13915  .text._ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv:0000000000000000 _ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv
     /tmp/ccATuxCb.s:12050  .text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:12057  .text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_
     /tmp/ccATuxCb.s:13825  .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS9_E4typeE:0000000000000000 _ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS9_E4typeE
     /tmp/ccATuxCb.s:12100  .text._ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:12107  .text._ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_
     /tmp/ccATuxCb.s:13780  .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS9_E4typeE:0000000000000000 _ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS9_E4typeE
     /tmp/ccATuxCb.s:12150  .text._ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:12157  .text._ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
     /tmp/ccATuxCb.s:13735  .text._ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE:0000000000000000 _ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE
     /tmp/ccATuxCb.s:12199  .text._ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:0000000000000000 $t
     /tmp/ccATuxCb.s:13688  .text._ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv:0000000000000000 _ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv
     /tmp/ccATuxCb.s:12262  .text._ZN10OutputPortIfE7presentEv:0000000000000000 $t
     /tmp/ccATuxCb.s:12321  .text._ZNSt8optionalIfEC2ESt9nullopt_t:0000000000000000 $t
     /tmp/ccATuxCb.s:12328  .text._ZNSt8optionalIfEC2ESt9nullopt_t:0000000000000000 _ZNSt8optionalIfEC2ESt9nullopt_t
     /tmp/ccATuxCb.s:12370  .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:12377  .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 _ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_
     /tmp/ccATuxCb.s:13960  .text._ZNRSt8__detail9__variant14_UninitializedIPfLb1EE6_M_getEv:0000000000000000 _ZNRSt8__detail9__variant14_UninitializedIPfLb1EE6_M_getEv
     /tmp/ccATuxCb.s:12418  .text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:12425  .text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_
     /tmp/ccATuxCb.s:12468  .text._ZNSt8__detail9__variant5__getILj1ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:12475  .text._ZNSt8__detail9__variant5__getILj1ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj1ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
ARM GAS  /tmp/ccATuxCb.s 			page 449


     /tmp/ccATuxCb.s:12517  .text._ZSt3getILj1EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:0000000000000000 $t
     /tmp/ccATuxCb.s:12580  .text._ZSt13make_optionalIRfESt8optionalINSt5decayIT_E4typeEEOS3_:0000000000000000 $t
     /tmp/ccATuxCb.s:12627  .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:12634  .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 _ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_
     /tmp/ccATuxCb.s:14005  .text._ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv:0000000000000000 _ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv
     /tmp/ccATuxCb.s:12675  .text._ZNSt8__detail9__variant5__getILj0ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:0000000000000000 $t
     /tmp/ccATuxCb.s:12682  .text._ZNSt8__detail9__variant5__getILj0ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj0ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
     /tmp/ccATuxCb.s:12724  .text._ZSt3getILj0EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:0000000000000000 $t
     /tmp/ccATuxCb.s:12787  .text._ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC2IJRS1_EEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:12794  .text._ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC2IJRS1_EEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC2IJRS1_EEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:12848  .text._ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE:0000000000000000 _ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE
     /tmp/ccATuxCb.s:12794  .text._ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC2IJRS1_EEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:12841  .text._ZSt7forwardIRSt4pairIffEEOT_RNSt16remove_referenceIS3_E4typeE:0000000000000000 $t
     /tmp/ccATuxCb.s:12886  .text._ZNSt22_Optional_payload_baseISt4pairIffEEC2IJRS1_EEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:12893  .text._ZNSt22_Optional_payload_baseISt4pairIffEEC2IJRS1_EEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEEC2IJRS1_EEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:12893  .text._ZNSt22_Optional_payload_baseISt4pairIffEEC2IJRS1_EEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEEC1IJRS1_EEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:12946  .text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI2St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:12953  .text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI2St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_:0000000000000000 _ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI2St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:12953  .text._ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI2St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_:0000000000000000 _ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI1St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:12998  .text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2IJRS1_ELb0EEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:13005  .text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2IJRS1_ELb0EEESt10in_place_tDpOT_:0000000000000000 _ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2IJRS1_ELb0EEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:13005  .text._ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC2IJRS1_ELb0EEESt10in_place_tDpOT_:0000000000000000 _ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:13055  .text._ZNSt8optionalISt4pairIffEEC2IRS1_Lb1EEEOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:13062  .text._ZNSt8optionalISt4pairIffEEC2IRS1_Lb1EEEOT_:0000000000000000 _ZNSt8optionalISt4pairIffEEC2IRS1_Lb1EEEOT_
     /tmp/ccATuxCb.s:13111  .text._ZNSt8optionalISt4pairIffEEC2ESt9nullopt_t:0000000000000000 $t
     /tmp/ccATuxCb.s:13118  .text._ZNSt8optionalISt4pairIffEEC2ESt9nullopt_t:0000000000000000 _ZNSt8optionalISt4pairIffEEC2ESt9nullopt_t
     /tmp/ccATuxCb.s:13160  .text._ZNSt4pairIffEaSERKS0_:0000000000000000 $t
     /tmp/ccATuxCb.s:13218  .text._ZSt7forwardISt5arrayIfLj3EEEOT_RNSt16remove_referenceIS2_E4typeE:0000000000000000 $t
     /tmp/ccATuxCb.s:13263  .text._ZNSt22_Optional_payload_baseISt5arrayIfLj3EEE8_StorageIS1_Lb1EEC2IJS1_EEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:13270  .text._ZNSt22_Optional_payload_baseISt5arrayIfLj3EEE8_StorageIS1_Lb1EEC2IJS1_EEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseISt5arrayIfLj3EEE8_StorageIS1_Lb1EEC2IJS1_EEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:13270  .text._ZNSt22_Optional_payload_baseISt5arrayIfLj3EEE8_StorageIS1_Lb1EEC2IJS1_EEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseISt5arrayIfLj3EEE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:13317  .text._ZNSt22_Optional_payload_baseISt5arrayIfLj3EEEC2IJS1_EEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:13324  .text._ZNSt22_Optional_payload_baseISt5arrayIfLj3EEEC2IJS1_EEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseISt5arrayIfLj3EEEC2IJS1_EEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:13324  .text._ZNSt22_Optional_payload_baseISt5arrayIfLj3EEEC2IJS1_EEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseISt5arrayIfLj3EEEC1IJS1_EEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:13377  .text._ZNSt17_Optional_payloadISt5arrayIfLj3EELb1ELb1ELb1EECI2St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:13384  .text._ZNSt17_Optional_payloadISt5arrayIfLj3EELb1ELb1ELb1EECI2St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_:0000000000000000 _ZNSt17_Optional_payloadISt5arrayIfLj3EELb1ELb1ELb1EECI2St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:13384  .text._ZNSt17_Optional_payloadISt5arrayIfLj3EELb1ELb1ELb1EECI2St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_:0000000000000000 _ZNSt17_Optional_payloadISt5arrayIfLj3EELb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:13429  .text._ZNSt14_Optional_baseISt5arrayIfLj3EELb1ELb1EEC2IJS1_ELb0EEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:13436  .text._ZNSt14_Optional_baseISt5arrayIfLj3EELb1ELb1EEC2IJS1_ELb0EEESt10in_place_tDpOT_:0000000000000000 _ZNSt14_Optional_baseISt5arrayIfLj3EELb1ELb1EEC2IJS1_ELb0EEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:13436  .text._ZNSt14_Optional_baseISt5arrayIfLj3EELb1ELb1EEC2IJS1_ELb0EEESt10in_place_tDpOT_:0000000000000000 _ZNSt14_Optional_baseISt5arrayIfLj3EELb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_
     /tmp/ccATuxCb.s:13486  .text._ZNSt8optionalISt5arrayIfLj3EEEC2IS1_Lb1EEEOT_:0000000000000000 $t
     /tmp/ccATuxCb.s:13493  .text._ZNSt8optionalISt5arrayIfLj3EEEC2IS1_Lb1EEEOT_:0000000000000000 _ZNSt8optionalISt5arrayIfLj3EEEC2IS1_Lb1EEEOT_
     /tmp/ccATuxCb.s:13542  .text._ZNSt22_Optional_payload_baseIfE8_M_resetEv:0000000000000000 $t
     /tmp/ccATuxCb.s:14050  .text._ZNSt22_Optional_payload_baseIfE10_M_destroyEv:0000000000000000 _ZNSt22_Optional_payload_baseIfE10_M_destroyEv
     /tmp/ccATuxCb.s:13591  .text._ZSt11__addressofINSt22_Optional_payload_baseISt4pairIffEE8_StorageIS2_Lb1EEEEPT_RS6_:0000000000000000 $t
     /tmp/ccATuxCb.s:13636  .text._ZNSt14__array_traitsIP14CurrentLimiterLj2EE6_S_ptrERA2_KS1_:0000000000000000 $t
     /tmp/ccATuxCb.s:13681  .text._ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv:0000000000000000 $t
     /tmp/ccATuxCb.s:14097  .text._ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv:0000000000000000 _ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv
     /tmp/ccATuxCb.s:13728  .text._ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE:0000000000000000 $t
     /tmp/ccATuxCb.s:13773  .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS9_E4typeE:0000000000000000 $t
     /tmp/ccATuxCb.s:13818  .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS9_E4typeE:0000000000000000 $t
     /tmp/ccATuxCb.s:13863  .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS8_E4typeE:0000000000000000 $t
     /tmp/ccATuxCb.s:13908  .text._ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv:0000000000000000 $t
     /tmp/ccATuxCb.s:13953  .text._ZNRSt8__detail9__variant14_UninitializedIPfLb1EE6_M_getEv:0000000000000000 $t
     /tmp/ccATuxCb.s:13998  .text._ZNRSt8__detail9__variant14_UninitializedIfLb1EE6_M_getEv:0000000000000000 $t
     /tmp/ccATuxCb.s:14043  .text._ZNSt22_Optional_payload_baseIfE10_M_destroyEv:0000000000000000 $t
     /tmp/ccATuxCb.s:14090  .text._ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv:0000000000000000 $t
ARM GAS  /tmp/ccATuxCb.s 			page 450


     /tmp/ccATuxCb.s:14136  .rodata._ZTV31InductanceMeasurementControlLaw:0000000000000000 $d
     /tmp/ccATuxCb.s:14149  .rodata._ZTV31ResistanceMeasurementControlLaw:0000000000000000 $d
     /tmp/ccATuxCb.s:14162  .rodata._ZTV15PhaseControlLawILj3EE:0000000000000000 $d
     /tmp/ccATuxCb.s:14173  .rodata._ZTV13ComponentBase:0000000000000000 $d
                           .group:0000000000000000 _ZN16TaskTimerContextC5ER9TaskTimer
                           .group:0000000000000000 _ZN16TaskTimerContextD5Ev
                           .group:0000000000000000 _ZN15PhaseControlLawILj3EEC5Ev
                           .group:0000000000000000 _ZN24AlphaBetaFrameControllerC5Ev
                           .group:0000000000000000 _ZN13ComponentBaseC5Ev
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEEC5Ev
                           .group:0000000000000000 _ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EEC5Ev
                           .group:0000000000000000 _ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC5Ev
                           .group:0000000000000000 _ZNSt8optionalISt4pairIffEEC5Ev
                           .group:0000000000000000 _ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI5NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
                           .group:0000000000000000 _ZNSt8__detail9__variant15_Move_ctor_baseILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEECI5NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
                           .group:0000000000000000 _ZNSt8__detail9__variant17_Copy_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI5NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
                           .group:0000000000000000 _ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt4pairIffEPS3_P10OutputPortIS3_EEECI5NS0_16_Variant_storageILb1EJS3_S4_S7_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
                           .group:0000000000000000 _ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEEC5Ev
                           .group:0000000000000000 _ZN9InputPortISt4pairIffEEC5Ev
                           .group:0000000000000000 _ZNSt8__detail9__variant15_Copy_ctor_baseILb1EJfPfP10OutputPortIfEEECI5NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
                           .group:0000000000000000 _ZNSt8__detail9__variant15_Move_ctor_baseILb1EJfPfP10OutputPortIfEEECI5NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
                           .group:0000000000000000 _ZNSt8__detail9__variant17_Copy_assign_baseILb1EJfPfP10OutputPortIfEEECI5NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
                           .group:0000000000000000 _ZNSt8__detail9__variant17_Move_assign_baseILb1EJfPfP10OutputPortIfEEECI5NS0_16_Variant_storageILb1EJfS2_S5_EEEILj0EJEEESt16in_place_index_tIXT_EEDpOT0_
                           .group:0000000000000000 _ZNSt7variantIJfPfP10OutputPortIfEEEC5Ev
                           .group:0000000000000000 _ZN9InputPortIfEC5Ev
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseIfEC5Ev
                           .group:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC5Ev
                           .group:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC5Ev
                           .group:0000000000000000 _ZNSt8optionalIfEC5Ev
                           .group:0000000000000000 _ZN23FieldOrientedControllerC5Ev
                           .group:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI5St22_Optional_payload_baseIfEIJfEEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt4pairIffEC5IffLb1EEEOT_OT0_
                           .group:0000000000000000 _ZN10OutputPortISt4pairIffEEC5ES1_
                           .group:0000000000000000 _ZNSt4pairIffEC5IRffLb1EEEOT_OT0_
                           .group:0000000000000000 _ZNSt4pairIffEC5IffLb1EEEv
                           .group:0000000000000000 _ZNSt4pairIffEC5IRfS2_Lb1EEEOT_OT0_
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC5IJRfEEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseIfEC5IJRfEEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI5St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC5IJRfELb0EEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt8optionalIfEC5IRfLb1EEEOT_
                           .group:0000000000000000 _ZNSt8optionalIfEC5ESt9nullopt_t
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEE8_StorageIS1_Lb1EEC5IJRS1_EEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseISt4pairIffEEC5IJRS1_EEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt17_Optional_payloadISt4pairIffELb1ELb0ELb0EECI5St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt14_Optional_baseISt4pairIffELb1ELb1EEC5IJRS1_ELb0EEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt8optionalISt4pairIffEEC5IRS1_Lb1EEEOT_
                           .group:0000000000000000 _ZNSt8optionalISt4pairIffEEC5ESt9nullopt_t
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseISt5arrayIfLj3EEE8_StorageIS1_Lb1EEC5IJS1_EEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseISt5arrayIfLj3EEEC5IJS1_EEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt17_Optional_payloadISt5arrayIfLj3EELb1ELb1ELb1EECI5St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt14_Optional_baseISt5arrayIfLj3EELb1ELb1EEC5IJS1_ELb0EEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt8optionalISt5arrayIfLj3EEEC5IS1_Lb1EEEOT_

UNDEFINED SYMBOLS
abort
sqrtf
ARM GAS  /tmp/ccATuxCb.s 			page 451


fmodf
_ZN9TaskTimer7enabledE
current_meas_period
vbus_voltage
_ZTV24AlphaBetaFrameController
_ZTV23FieldOrientedController
memset
_ZN10Controller5resetEv
safety_critical_disarm_motor_pwm
update_brake_current
htim15
osDelay
SVM
our_arm_cos_f32
our_arm_sin_f32
fast_atan2
safety_critical_apply_motor_pwm_timings
_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
__cxa_pure_virtual
