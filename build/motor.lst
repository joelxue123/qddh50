ARM GAS  /tmp/ccvzGucR.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"motor.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._ZN31ResistanceMeasurementControlLaw5resetEv,"axG",%progbits,_ZN31ResistanceMeasure
  18              		.align	1
  19              		.p2align 2,,3
  20              		.weak	_ZN31ResistanceMeasurementControlLaw5resetEv
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	_ZN31ResistanceMeasurementControlLaw5resetEv:
  28              	.LVL0:
  29              	.LFB4824:
  30              		.file 1 "Src/motor.cpp"
   1:Src/motor.cpp **** 
   2:Src/motor.cpp **** #include <algorithm>
   3:Src/motor.cpp **** 
   4:Src/motor.cpp **** #include "motor.hpp"
   5:Src/motor.cpp **** #include <optional>
   6:Src/motor.cpp **** #include <cmath>
   7:Src/motor.cpp **** #include "main.h"
   8:Src/motor.cpp **** #include "utils.hpp"
   9:Src/motor.cpp **** #include "task_timer.hpp"
  10:Src/motor.cpp **** #include "cmsis_os.h"  // Add this for osDelay
  11:Src/motor.cpp **** #include "low_level.h"
  12:Src/motor.cpp **** #include "tim.h"
  13:Src/motor.cpp **** #include "axis.hpp"
  14:Src/motor.cpp **** #include "controller.hpp"
  15:Src/motor.cpp **** 
  16:Src/motor.cpp **** static constexpr auto CURRENT_ADC_LOWER_BOUND =        (uint32_t)((float)(1 << 12) * CURRENT_SENSE_
  17:Src/motor.cpp **** static constexpr auto CURRENT_ADC_UPPER_BOUND =        (uint32_t)((float)(1 << 12) * CURRENT_SENSE_
  18:Src/motor.cpp **** /**
  19:Src/motor.cpp ****  * @brief This control law adjusts the output voltage such that a predefined
  20:Src/motor.cpp ****  * current is tracked. A hardcoded integrator gain is used for this.
  21:Src/motor.cpp ****  * 
  22:Src/motor.cpp ****  * TODO: this might as well be implemented using the FieldOrientedController.
  23:Src/motor.cpp ****  */
  24:Src/motor.cpp **** struct ResistanceMeasurementControlLaw : AlphaBetaFrameController {
  25:Src/motor.cpp ****     void reset() final {
  31              		.loc 1 25 10 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccvzGucR.s 			page 2


  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  26:Src/motor.cpp ****         test_voltage_ = 0.0f;
  36              		.loc 1 26 9 view .LVU1
  37              	.LBB1923:
  38              	.LBB1924:
  39              	.LBB1925:
  40              	.LBB1926:
  41              		.file 2 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // <optional> -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // Copyright (C) 2013-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** /** @file include/optional
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****  *  This is a Standard C++ Library header.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****  */
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #ifndef _GLIBCXX_OPTIONAL
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #define _GLIBCXX_OPTIONAL 1
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #pragma GCC system_header
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #if __cplusplus >= 201703L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <utility>
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <type_traits>
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <exception>
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <new>
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <initializer_list>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <bits/exception_defines.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <bits/functional_hash.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <bits/enable_special_members.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #if __cplusplus > 201703L
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** # include <compare>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #endif
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** namespace std _GLIBCXX_VISIBILITY(default)
ARM GAS  /tmp/ccvzGucR.s 			page 3


  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** {
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @addtogroup utilities
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @{
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    */
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #define __cpp_lib_optional 201606L
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     class optional;
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /// Tag type to disengage optional objects.
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   struct nullopt_t
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   {
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // Do not user-declare default constructor at all for
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // optional_value = {} syntax to work.
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // nullopt_t() = delete;
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // Used for constructing nullopt.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     enum class _Construct { _Token };
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // Must be constexpr for nullopt_t to be literal.
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     explicit constexpr nullopt_t(_Construct) { }
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   };
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /// Tag to disengage optional objects.
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   inline constexpr nullopt_t nullopt { nullopt_t::_Construct::_Token };
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @brief Exception class thrown when a disengaged optional object is
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  dereferenced.
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @ingroup exceptions
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    */
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   class bad_optional_access : public exception
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   {
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   public:
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     bad_optional_access() { }
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     virtual const char* what() const noexcept override
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return "bad optional access"; }
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     virtual ~bad_optional_access() noexcept = default;
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   };
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   void
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   __throw_bad_optional_access()
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   __attribute__((__noreturn__));
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // XXX Does not belong here.
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   inline void
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   __throw_bad_optional_access()
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // This class template manages construction/destruction of
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // the contained value for a std::optional.
ARM GAS  /tmp/ccvzGucR.s 			page 4


 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload_base
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Stored_type = remove_const_t<_Tp>;
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base() = default;
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_engaged(true)
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args>
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_Optional_payload_base(std::initializer_list<_Up> __il,
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			       _Args&&... __args)
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__il, std::forward<_Args>(__args)...),
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_engaged(true)
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructor used by _Optional_base copy constructor when the
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // contained value is not trivially copy constructible.
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(bool __engaged,
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			     const _Optional_payload_base& __other)
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (__other._M_engaged)
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(__other._M_get());
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructor used by _Optional_base move constructor when the
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // contained value is not trivially move constructible.
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(bool __engaged,
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			     _Optional_payload_base&& __other)
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (__other._M_engaged)
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(std::move(__other._M_get()));
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy constructor is only used to when the contained value is
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // trivially copy constructible.
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(const _Optional_payload_base&) = default;
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Move constructor is only used to when the contained value is
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // trivially copy constructible.
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(_Optional_payload_base&&) = default;
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base&
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(const _Optional_payload_base&) = default;
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base&
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(_Optional_payload_base&&) = default;
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
ARM GAS  /tmp/ccvzGucR.s 			page 5


 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // used to perform non-trivial copy assignment.
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_copy_assign(const _Optional_payload_base& __other)
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         if (this->_M_engaged && __other._M_engaged)
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_get() = __other._M_get();
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         else
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    if (__other._M_engaged)
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_construct(__other._M_get());
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    else
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // used to perform non-trivial move assignment.
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_move_assign(_Optional_payload_base&& __other)
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (this->_M_engaged && __other._M_engaged)
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    if (__other._M_engaged)
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_construct(std::move(__other._M_get()));
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    else
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       struct _Empty_byte { };
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, bool = is_trivially_destructible_v<_Up>>
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	union _Storage
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  constexpr _Storage() noexcept : _M_empty() { }
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename... _Args>
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(in_place_t, _Args&&... __args)
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename _Vp, typename... _Args>
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(__il, std::forward<_Args>(__args)...)
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _Empty_byte _M_empty;
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           _Up _M_value;
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	};
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	union _Storage<_Up, false>
ARM GAS  /tmp/ccvzGucR.s 			page 6


 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  constexpr _Storage() noexcept : _M_empty() { }
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename... _Args>
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(in_place_t, _Args&&... __args)
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename _Vp, typename... _Args>
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(__il, std::forward<_Args>(__args)...)
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  // User-provided destructor is needed when _Up has non-trivial dtor.
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ~_Storage() { }
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _Empty_byte _M_empty;
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           _Up _M_value;
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	};
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Storage<_Stored_type> _M_payload;
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       bool _M_engaged = false;
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         void
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         _M_construct(_Args&&... __args)
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         {
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           ::new ((void *) std::__addressof(this->_M_payload))
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_engaged = true;
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         }
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_destroy() noexcept
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_engaged = false;
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_payload._M_value.~_Stored_type();
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // The _M_get() operations have _M_engaged as a precondition.
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // They exist to access the contained value with the appropriate
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // const-qualification, because _M_payload has had the const removed.
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() noexcept
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_payload._M_value; }
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() const noexcept
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_payload._M_value; }
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // _M_reset is a 'safe' operation with no precondition.
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
ARM GAS  /tmp/ccvzGucR.s 			page 7


 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_reset() noexcept
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (this->_M_engaged)
  42              		.loc 2 279 2 is_stmt 0 view .LVU2
  43 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
  44              	.LBE1926:
  45              	.LBE1925:
  46              	.LBE1924:
  47              	.LBE1923:
  48              		.loc 1 26 23 view .LVU3
  49 0004 0022     		movs	r2, #0
  50 0006 8261     		str	r2, [r0, #24]	@ float
  27:Src/motor.cpp ****         test_mod_ = std::nullopt;
  51              		.loc 1 27 9 is_stmt 1 view .LVU4
  52              	.LVL1:
  53              	.LBB1932:
  54              	.LBI1923:
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_destroy();
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Class template that manages the payload for optionals.
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp,
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    bool /*_HasTrivialDestructor*/ =
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      is_trivially_destructible_v<_Tp>,
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    bool /*_HasTrivialCopy */ =
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      is_trivially_copy_assignable_v<_Tp>
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      && is_trivially_copy_constructible_v<_Tp>,
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    bool /*_HasTrivialMove */ =
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      is_trivially_move_assignable_v<_Tp>
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      && is_trivially_move_constructible_v<_Tp>>
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload;
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for potentially-constexpr optionals (trivial copy/move/destroy).
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, true, true>
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial copy construction/assignment.
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, false, true>
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(_Optional_payload&&) = default;
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial copy assignment.
ARM GAS  /tmp/ccvzGucR.s 			page 8


 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(const _Optional_payload& __other)
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_copy_assign(__other);
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial move construction/assignment.
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, true, false>
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(const _Optional_payload&) = default;
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial move assignment.
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(_Optional_payload&& __other)
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_move_assign(std::move(__other));
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial copy and move assignment.
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, false, false>
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial copy assignment.
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(const _Optional_payload& __other)
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_copy_assign(__other);
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial move assignment.
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
ARM GAS  /tmp/ccvzGucR.s 			page 9


 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(_Optional_payload&& __other)
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_move_assign(std::move(__other));
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial destructors.
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp, bool _Copy, bool _Move>
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, false, _Copy, _Move>
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload<_Tp, true, false, false>
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Base class implements all the constructors and assignment operators:
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload<_Tp, true, false, false>::_Optional_payload;
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(const _Optional_payload&) = default;
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(_Optional_payload&&) = default;
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Destructor needs to destroy the contained value:
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() { this->_M_reset(); }
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Common base class for _Optional_base<T> to avoid repeating these
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // member functions in each specialization.
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Dp>
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     class _Optional_base_impl
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     protected:
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Stored_type = remove_const_t<_Tp>;
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // The _M_construct operation has !_M_engaged as a precondition
 413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // while _M_destruct has _M_engaged as a precondition.
 414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	void
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_construct(_Args&&... __args)
 417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ::new
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Stored_type(std::forward<_Args>(__args)...);
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_cast<_Dp*>(this)->_M_payload._M_engaged = true;
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       void
 426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_destruct() noexcept
 427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_destroy(); }
 428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // _M_reset is a 'safe' operation with no precondition.
 430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_reset() noexcept
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
 433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
ARM GAS  /tmp/ccvzGucR.s 			page 10


 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr bool _M_is_engaged() const noexcept
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // The _M_get operations have _M_engaged as a precondition.
 438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() noexcept
 440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__glibcxx_assert(this->_M_is_engaged());
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return static_cast<_Dp*>(this)->_M_payload._M_get();
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() const noexcept
 447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__glibcxx_assert(this->_M_is_engaged());
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return static_cast<const _Dp*>(this)->_M_payload._M_get();
 450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
 454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * @brief Class template that provides copy/move constructors of optional.
 455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * Such a separate base class template is necessary in order to
 457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * conditionally make copy/move constructors trivial.
 458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * When the contained value is trivially copy/move constructible,
 460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * the copy/move constructors of _Optional_base will invoke the
 461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * trivial copy/move constructor of _Optional_payload. Otherwise,
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * they will invoke _Optional_payload(bool, const _Optional_payload&)
 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * or _Optional_payload(bool, _Optional_payload&&) to initialize
 464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * the contained value, if copying/moving an engaged optional.
 465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * Whether the other special members are trivial is determined by the
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * _Optional_payload<_Tp> specialization used for the _M_payload member.
 468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * @see optional, _Enable_special_members
 470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     */
 471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp,
 472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	   bool = is_trivially_copy_constructible_v<_Tp>,
 473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	   bool = is_trivially_move_constructible_v<_Tp>>
 474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base
 475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
ARM GAS  /tmp/ccvzGucR.s 			page 11


 491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other)
 500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __other._M_payload)
 502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other)
 505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>)
 506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::move(__other._M_payload))
 508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base<_Tp, false, true>
 519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other)
 544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __other._M_payload)
 546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
ARM GAS  /tmp/ccvzGucR.s 			page 12


 548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other) = default;
 549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base<_Tp, true, false>
 559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other) = default;
 584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other)
 586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>)
 587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::move(__other._M_payload))
 589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base<_Tp, true, true>
 600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
ARM GAS  /tmp/ccvzGucR.s 			page 13


 605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other) = default;
 625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other) = default;
 626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   class optional;
 636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     using __converts_from_optional =
 639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       __or_<is_constructible<_Tp, const optional<_Up>&>,
 640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_constructible<_Tp, optional<_Up>&>,
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_constructible<_Tp, const optional<_Up>&&>,
 642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_constructible<_Tp, optional<_Up>&&>,
 643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<const optional<_Up>&, _Tp>,
 644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<optional<_Up>&, _Tp>,
 645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<const optional<_Up>&&, _Tp>,
 646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<optional<_Up>&&, _Tp>>;
 647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     using __assigns_from_optional =
 650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       __or_<is_assignable<_Tp&, const optional<_Up>&>,
 651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_assignable<_Tp&, optional<_Up>&>,
 652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_assignable<_Tp&, const optional<_Up>&&>,
 653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_assignable<_Tp&, optional<_Up>&&>>;
 654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
 656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * @brief Class template for optional values.
 657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     */
 658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     class optional
 660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : private _Optional_base<_Tp>,
 661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       private _Enable_copy_move<
ARM GAS  /tmp/ccvzGucR.s 			page 14


 662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Copy constructor.
 663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	is_copy_constructible_v<_Tp>,
 664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Copy assignment.
 665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__and_v<is_copy_constructible<_Tp>, is_copy_assignable<_Tp>>,
 666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Move constructor.
 667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	is_move_constructible_v<_Tp>,
 668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Move assignment.
 669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__and_v<is_move_constructible<_Tp>, is_move_assignable<_Tp>>,
 670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Unique tag type.
 671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional<_Tp>>
 672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       static_assert(!is_same_v<remove_cv_t<_Tp>, nullopt_t>);
 674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       static_assert(!is_same_v<remove_cv_t<_Tp>, in_place_t>);
 675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       static_assert(!is_reference_v<_Tp>);
 676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     private:
 678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Base = _Optional_base<_Tp>;
 679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // SFINAE helpers
 681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using __not_self = __not_<is_same<optional, __remove_cvref_t<_Up>>>;
 683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using __not_tag = __not_<is_same<in_place_t, __remove_cvref_t<_Up>>>;
 685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Cond>
 686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using _Requires = enable_if_t<__and_v<_Cond...>, bool>;
 687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     public:
 689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using value_type = _Tp;
 690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr optional() = default;
 692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr optional(nullopt_t) noexcept { }
 694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Converting constructors for engaged optionals.
 696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up = _Tp,
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_self<_Up>, __not_tag<_Up>,
 698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, _Up&&>,
 699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_convertible<_Up&&, _Tp>> = true>
 700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(_Up&& __t)
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up = _Tp,
 705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_self<_Up>, __not_tag<_Up>,
 706:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, _Up&&>,
 707:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<is_convertible<_Up&&, _Tp>>> = false>
 708:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 709:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(_Up&& __t)
 710:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _Base(std::in_place, std::forward<_Up>(__t)) { }
 711:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 712:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up,
 713:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_<is_same<_Tp, _Up>>,
 714:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, const _Up&>,
 715:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_convertible<const _Up&, _Tp>,
 716:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<__converts_from_optional<_Tp, _Up>>> = true>
 717:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 718:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(const optional<_Up>& __t)
ARM GAS  /tmp/ccvzGucR.s 			page 15


 719:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 720:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 721:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(*__t);
 722:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 723:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 724:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up,
 725:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_<is_same<_Tp, _Up>>,
 726:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, const _Up&>,
 727:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<is_convertible<const _Up&, _Tp>>,
 728:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<__converts_from_optional<_Tp, _Up>>> = false>
 729:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 730:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(const optional<_Up>& __t)
 731:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 732:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 733:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(*__t);
 734:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 735:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 736:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template <typename _Up,
 737:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		_Requires<__not_<is_same<_Tp, _Up>>,
 738:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  is_constructible<_Tp, _Up&&>,
 739:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  is_convertible<_Up&&, _Tp>,
 740:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  __not_<__converts_from_optional<_Tp, _Up>>> = true>
 741:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 742:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(optional<_Up>&& __t)
 743:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 744:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 745:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(std::move(*__t));
 746:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 747:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 748:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template <typename _Up,
 749:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		_Requires<__not_<is_same<_Tp, _Up>>,
 750:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  is_constructible<_Tp, _Up&&>,
 751:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  __not_<is_convertible<_Up&&, _Tp>>,
 752:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  __not_<__converts_from_optional<_Tp, _Up>>> = false>
 753:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 754:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(optional<_Up>&& __t)
 755:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 756:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 757:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(std::move(*__t));
 758:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 759:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 760:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 761:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<is_constructible<_Tp, _Args&&...>> = false>
 762:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 763:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(in_place_t, _Args&&... __args)
 764:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Args>(__args)...) { }
 765:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 766:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 767:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<is_constructible<_Tp,
 768:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					  initializer_list<_Up>&,
 769:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					  _Args&&...>> = false>
 770:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 771:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(in_place_t, initializer_list<_Up> __il, _Args&&... __args)
 772:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, __il, std::forward<_Args>(__args)...) { }
 773:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 774:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 775:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       optional&
ARM GAS  /tmp/ccvzGucR.s 			page 16


 776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(nullopt_t) noexcept
  55              		.loc 2 776 7 view .LVU5
  56              	.LBB1931:
  57              	.LBI1924:
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
  58              		.loc 2 431 7 view .LVU6
  59              	.LBB1930:
  60              	.LBI1925:
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
  61              		.loc 2 277 7 view .LVU7
  62              	.LBB1929:
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_destroy();
  63              		.loc 2 279 2 is_stmt 0 view .LVU8
  64 0008 13B1     		cbz	r3, .L1
  65              	.LVL2:
  66              	.LBB1927:
  67              	.LBI1927:
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
  68              		.loc 2 257 7 is_stmt 1 view .LVU9
  69              	.LBB1928:
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_payload._M_value.~_Stored_type();
  70              		.loc 2 259 13 is_stmt 0 view .LVU10
  71 000a 0023     		movs	r3, #0
  72 000c 80F82430 		strb	r3, [r0, #36]
  73              	.LVL3:
  74              	.L1:
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_payload._M_value.~_Stored_type();
  75              		.loc 2 259 13 view .LVU11
  76              	.LBE1928:
  77              	.LBE1927:
  78              	.LBE1929:
  79              	.LBE1930:
  80              	.LBE1931:
  81              	.LBE1932:
  28:Src/motor.cpp ****     }
  82              		.loc 1 28 5 view .LVU12
  83 0010 7047     		bx	lr
  84              		.cfi_endproc
  85              	.LFE4824:
  87 0012 00BF     		.section	.text._ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEE
  88              		.align	1
  89              		.p2align 2,,3
  90              		.weak	_ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm
  91              		.syntax unified
  92              		.thumb
  93              		.thumb_func
  94              		.fpu fpv4-sp-d16
  96              	_ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:
  97              	.LVL4:
  98              	.LFB4825:
  29:Src/motor.cpp **** 
  30:Src/motor.cpp ****     ODriveIntf::MotorIntf::Error on_measurement(
  99              		.loc 1 30 34 is_stmt 1 view -0
 100              		.cfi_startproc
 101              		@ args = 20, pretend = 8, frame = 8
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
ARM GAS  /tmp/ccvzGucR.s 			page 17


  31:Src/motor.cpp ****             std::optional<float> vbus_voltage,
  32:Src/motor.cpp ****             std::optional<float2D> Ialpha_beta,
  33:Src/motor.cpp ****             uint32_t input_timestamp) final {
  34:Src/motor.cpp **** 
  35:Src/motor.cpp ****         if (Ialpha_beta.has_value()) {
 104              		.loc 1 35 9 view .LVU14
  30:Src/motor.cpp ****             std::optional<float> vbus_voltage,
 105              		.loc 1 30 34 is_stmt 0 view .LVU15
 106 0000 82B0     		sub	sp, sp, #8
 107              	.LCFI0:
 108              		.cfi_def_cfa_offset 8
 109 0002 10B4     		push	{r4}
 110              	.LCFI1:
 111              		.cfi_def_cfa_offset 12
 112              		.cfi_offset 4, -12
 113 0004 83B0     		sub	sp, sp, #12
 114              	.LCFI2:
 115              		.cfi_def_cfa_offset 24
 116              	.LVL5:
 117              	.LBB1933:
 118              	.LBI1933:
 777:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_reset();
 779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 781:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 782:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up = _Tp>
 783:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<__and_v<__not_self<_Up>,
 784:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__and_<is_scalar<_Tp>,
 785:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					  is_same<_Tp, decay_t<_Up>>>>,
 786:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_constructible<_Tp, _Up>,
 787:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_assignable<_Tp&, _Up>>,
 788:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		    optional&>
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	operator=(_Up&& __u)
 790:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (this->_M_is_engaged())
 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 793:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_construct(std::forward<_Up>(__u));
 795:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return *this;
 797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 798:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 799:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 800:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,
 801:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_constructible<_Tp, const _Up&>,
 802:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_assignable<_Tp&, _Up>,
 803:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__converts_from_optional<_Tp, _Up>>,
 804:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__assigns_from_optional<_Tp, _Up>>>,
 805:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		    optional&>
 806:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	operator=(const optional<_Up>& __u)
 807:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 808:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__u)
 809:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
 810:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      if (this->_M_is_engaged())
 811:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_get() = *__u;
 812:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      else
ARM GAS  /tmp/ccvzGucR.s 			page 18


 813:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_construct(*__u);
 814:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 815:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 816:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
 817:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 818:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 819:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return *this;
 820:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 821:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 822:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 823:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         enable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,
 824:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_constructible<_Tp, _Up>,
 825:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_assignable<_Tp&, _Up>,
 826:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__converts_from_optional<_Tp, _Up>>,
 827:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__assigns_from_optional<_Tp, _Up>>>,
 828:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		    optional&>
 829:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	operator=(optional<_Up>&& __u)
 830:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 831:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__u)
 832:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
 833:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      if (this->_M_is_engaged())
 834:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_get() = std::move(*__u);
 835:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      else
 836:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_construct(std::move(*__u));
 837:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 838:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 839:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
 840:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 841:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 842:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 843:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return *this;
 844:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 845:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 846:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 847:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<is_constructible_v<_Tp, _Args&&...>, _Tp&>
 848:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	emplace(_Args&&... __args)
 849:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 850:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_reset();
 851:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(std::forward<_Args>(__args)...);
 852:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_get();
 853:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 854:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 855:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args>
 856:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&,
 857:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 				       _Args&&...>, _Tp&>
 858:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
 859:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 860:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_reset();
 861:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(__il, std::forward<_Args>(__args)...);
 862:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_get();
 863:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 864:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 865:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Destructor is implicit, implemented in _Optional_base.
 866:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 867:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Swap.
 868:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       void
 869:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       swap(optional& __other)
ARM GAS  /tmp/ccvzGucR.s 			page 19


 870:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>
 871:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       && is_nothrow_swappable_v<_Tp>)
 872:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 873:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using std::swap;
 874:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 875:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (this->_M_is_engaged() && __other._M_is_engaged())
 876:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  swap(this->_M_get(), __other._M_get());
 877:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else if (this->_M_is_engaged())
 878:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 879:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    __other._M_construct(std::move(this->_M_get()));
 880:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_destruct();
 881:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 882:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else if (__other._M_is_engaged())
 883:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 884:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_construct(std::move(__other._M_get()));
 885:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    __other._M_destruct();
 886:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 887:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 888:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 889:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Observers.
 890:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp*
 891:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator->() const
 892:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::__addressof(this->_M_get()); }
 893:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 894:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp*
 895:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator->()
 896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::__addressof(this->_M_get()); }
 897:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 898:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 899:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*() const&
 900:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_get(); }
 901:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 902:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*()&
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_get(); }
 905:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 906:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&&
 907:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*()&&
 908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::move(this->_M_get()); }
 909:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 910:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&&
 911:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*() const&&
 912:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::move(this->_M_get()); }
 913:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 914:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr explicit operator bool() const noexcept
 915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 916:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr bool has_value() const noexcept
 119              		.loc 2 917 22 is_stmt 1 view .LVU16
 120              	.LBB1934:
 121              	.LBI1934:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 122              		.loc 2 434 22 view .LVU17
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 123              		.loc 2 434 22 is_stmt 0 view .LVU18
 124              	.LBE1934:
 125              	.LBE1933:
ARM GAS  /tmp/ccvzGucR.s 			page 20


  30:Src/motor.cpp ****             std::optional<float> vbus_voltage,
 126              		.loc 1 30 34 view .LVU19
 127 0006 0DF1080C 		add	ip, sp, #8
 128              		.loc 1 35 9 view .LVU20
 129 000a 9DF81C40 		ldrb	r4, [sp, #28]	@ zero_extendqisi2
  30:Src/motor.cpp ****             std::optional<float> vbus_voltage,
 130              		.loc 1 30 34 view .LVU21
 131 000e 0593     		str	r3, [sp, #20]
 132 0010 0CE90600 		stmdb	ip, {r1, r2}
 133 0014 0246     		mov	r2, r0
 134              		.loc 1 35 9 view .LVU22
 135 0016 002C     		cmp	r4, #0
 136 0018 47D0     		beq	.L12
  36:Src/motor.cpp ****             actual_current_ = Ialpha_beta->first;
 137              		.loc 1 36 13 is_stmt 1 view .LVU23
  37:Src/motor.cpp ****             test_voltage_ += (kI * current_meas_period) * (target_current_ - actual_current_);
 138              		.loc 1 37 34 is_stmt 0 view .LVU24
 139 001a 2F4B     		ldr	r3, .L18
  38:Src/motor.cpp ****             I_beta_ += (kIBetaFilt * current_meas_period) * (Ialpha_beta->second - I_beta_);
 140              		.loc 1 38 84 view .LVU25
 141 001c 90ED077A 		vldr.32	s14, [r0, #28]
  37:Src/motor.cpp ****             test_voltage_ += (kI * current_meas_period) * (target_current_ - actual_current_);
 142              		.loc 1 37 34 view .LVU26
 143 0020 93ED006A 		vldr.32	s12, [r3]
 144              		.loc 1 38 36 view .LVU27
 145 0024 D0ED025A 		vldr.32	s11, [r0, #8]
 146              		.loc 1 38 82 view .LVU28
 147 0028 9DED065A 		vldr.32	s10, [sp, #24]
  36:Src/motor.cpp ****             actual_current_ = Ialpha_beta->first;
 148              		.loc 1 36 44 view .LVU29
 149 002c DDED056A 		vldr.32	s13, [sp, #20]
  37:Src/motor.cpp ****             test_voltage_ += (kI * current_meas_period) * (target_current_ - actual_current_);
 150              		.loc 1 37 13 is_stmt 1 view .LVU30
  37:Src/motor.cpp ****             test_voltage_ += (kI * current_meas_period) * (target_current_ - actual_current_);
 151              		.loc 1 37 34 is_stmt 0 view .LVU31
 152 0030 90ED014A 		vldr.32	s8, [r0, #4]
  37:Src/motor.cpp ****             test_voltage_ += (kI * current_meas_period) * (target_current_ - actual_current_);
 153              		.loc 1 37 76 view .LVU32
 154 0034 D0ED054A 		vldr.32	s9, [r0, #20]
  37:Src/motor.cpp ****             test_voltage_ += (kI * current_meas_period) * (target_current_ - actual_current_);
 155              		.loc 1 37 27 view .LVU33
 156 0038 D0ED067A 		vldr.32	s15, [r0, #24]
 157              		.loc 1 38 36 view .LVU34
 158 003c 66EE255A 		vmul.f32	s11, s12, s11
 159              		.loc 1 38 82 view .LVU35
 160 0040 35EE475A 		vsub.f32	s10, s10, s14
  37:Src/motor.cpp ****             test_voltage_ += (kI * current_meas_period) * (target_current_ - actual_current_);
 161              		.loc 1 37 34 view .LVU36
 162 0044 26EE044A 		vmul.f32	s8, s12, s8
  37:Src/motor.cpp ****             test_voltage_ += (kI * current_meas_period) * (target_current_ - actual_current_);
 163              		.loc 1 37 76 view .LVU37
 164 0048 74EEE64A 		vsub.f32	s9, s9, s13
 165              		.loc 1 38 21 view .LVU38
 166 004c A5EE857A 		vfma.f32	s14, s11, s10
  37:Src/motor.cpp ****             test_voltage_ += (kI * current_meas_period) * (target_current_ - actual_current_);
 167              		.loc 1 37 27 view .LVU39
 168 0050 E4EE247A 		vfma.f32	s15, s8, s9
ARM GAS  /tmp/ccvzGucR.s 			page 21


 169              		.loc 1 38 13 is_stmt 1 view .LVU40
 170              		.loc 1 38 21 is_stmt 0 view .LVU41
 171 0054 B0EE476A 		vmov.f32	s12, s14
 172 0058 80ED076A 		vstr.32	s12, [r0, #28]
 173              	.LBB1935:
 174              	.LBB1936:
 175              	.LBB1937:
 176              		.file 3 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_a
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // -*- C++ -*- C library enhancements header.
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // Copyright (C) 2016-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** /** @file include/bits/std_abs.h
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****  *  Do not attempt to use it directly. @headername{cmath, cstdlib}
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****  */
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifndef _GLIBCXX_BITS_STD_ABS_H
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #define _GLIBCXX_BITS_STD_ABS_H
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #pragma GCC system_header
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #include <bits/c++config.h>
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #include_next <stdlib.h>
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifdef __CORRECT_ISO_CPP_MATH_H_PROTO
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** # include_next <math.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #endif
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #undef abs
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** extern "C++"
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** {
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** namespace std _GLIBCXX_VISIBILITY(default)
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** {
ARM GAS  /tmp/ccvzGucR.s 			page 22


  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   using ::abs;
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   inline long
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   abs(long __i) { return __builtin_labs(__i); }
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #endif
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifdef _GLIBCXX_USE_LONG_LONG
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   inline long long
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   abs(long long __x) { return __builtin_llabs (__x); }
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #endif
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // _GLIBCXX_RESOLVE_LIB_DEFECTS
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // 2192. Validity and return type of std::abs(0u) is unclear
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // 2294. <cstdlib> should declare abs(double)
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // 2735. std::abs(short), std::abs(signed char) and others should return int
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   inline _GLIBCXX_CONSTEXPR double
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   abs(double __x)
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   { return __builtin_fabs(__x); }
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   inline _GLIBCXX_CONSTEXPR float
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   abs(float __x)
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   { return __builtin_fabsf(__x); }
 177              		.loc 3 76 31 view .LVU42
 178 005c B0EEE77A 		vabs.f32	s14, s15
 179              	.L8:
 180              	.LBE1937:
 181              	.LBE1936:
  39:Src/motor.cpp ****         } else {
  40:Src/motor.cpp ****             actual_current_ = 0.0f;
  41:Src/motor.cpp ****             test_voltage_ = 0.0f;
  42:Src/motor.cpp ****         }
  43:Src/motor.cpp ****     
  44:Src/motor.cpp ****         if (std::abs(test_voltage_) > max_voltage_) {
 182              		.loc 1 44 9 view .LVU43
 183 0060 92ED036A 		vldr.32	s12, [r2, #12]
 184 0064 C2ED067A 		vstr.32	s15, [r2, #24]
 185 0068 B4EEC76A 		vcmpe.f32	s12, s14
 186 006c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 187 0070 C2ED046A 		vstr.32	s13, [r2, #16]
 188              	.LBE1935:
 189              		.loc 1 44 9 is_stmt 1 view .LVU44
 190              	.LVL6:
 191              	.LBB1954:
 192              	.LBB1939:
 193              	.LBI1936:
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   { return __builtin_fabsf(__x); }
 194              		.loc 3 75 3 view .LVU45
 195              	.LBB1938:
 196              		.loc 3 76 5 view .LVU46
 197              		.loc 3 76 5 is_stmt 0 view .LVU47
 198              	.LBE1938:
 199              	.LBE1939:
ARM GAS  /tmp/ccvzGucR.s 			page 23


 200              		.loc 1 44 9 view .LVU48
 201 0074 27D4     		bmi	.L17
 202              	.LBE1954:
  45:Src/motor.cpp ****             test_voltage_ = NAN;
  46:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_PHASE_RESISTANCE_OUT_OF_RANGE; 
  47:Src/motor.cpp ****         } else if (!vbus_voltage.has_value()) {
 203              		.loc 1 47 16 is_stmt 1 view .LVU49
 204              	.LVL7:
 205              	.LBB1955:
 206              	.LBB1940:
 207              	.LBB1941:
 208              	.LBI1941:
 209              		.loc 2 917 22 view .LVU50
 210              	.LBB1942:
 211              	.LBI1942:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 212              		.loc 2 434 22 view .LVU51
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 213              		.loc 2 434 22 is_stmt 0 view .LVU52
 214              	.LBE1942:
 215              	.LBE1941:
 216              		.loc 1 47 16 view .LVU53
 217 0076 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 218 007a EBB1     		cbz	r3, .L13
 219              	.LBB1943:
  48:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_UNKNOWN_VBUS_VOLTAGE;
  49:Src/motor.cpp ****         } else {
  50:Src/motor.cpp ****             float vfactor = 1.0f / ((2.0f / 3.0f) * *vbus_voltage);
 220              		.loc 1 50 13 is_stmt 1 view .LVU54
 221              	.LVL8:
  51:Src/motor.cpp ****             test_mod_ = test_voltage_ * vfactor;
 222              		.loc 1 51 13 view .LVU55
 223              	.LBB1944:
 224              	.LBI1944:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 225              		.loc 2 701 2 view .LVU56
 226              	.LBB1945:
 227              	.LBI1945:
 228              		.file 4 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Copyright (C) 2007-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // 3.1, as published by the Free Software Foundation.
ARM GAS  /tmp/ccvzGucR.s 			page 24


  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** /** @file bits/move.h
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****  */
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #ifndef _MOVE_H
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #define _MOVE_H 1
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #include <bits/c++config.h>
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #if __cplusplus < 201103L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** # include <bits/concept_check.h>
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #endif
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** {
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief Same as C++11 std::addressof
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @ingroup utilities
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return __builtin_addressof(__r); }
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #if __cplusplus >= 201103L
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** } // namespace
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** {
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @addtogroup utilities
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @{
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief  Forward an lvalue.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @return The parameter cast to the specified type.
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     constexpr _Tp&&
ARM GAS  /tmp/ccvzGucR.s 			page 25


  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 229              		.loc 4 76 5 view .LVU57
 230              		.loc 4 76 5 is_stmt 0 view .LVU58
 231              	.LBE1945:
 232              	.LBB1946:
 233              	.LBI1946:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 234              		.loc 2 608 28 is_stmt 1 view .LVU59
 235              	.LBB1947:
 236              	.LBI1947:
 237              		.loc 4 76 5 view .LVU60
 238              		.loc 4 76 5 is_stmt 0 view .LVU61
 239              	.LBE1947:
 240              	.LBB1948:
 241              	.LBI1948:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 242              		.loc 2 301 42 is_stmt 1 view .LVU62
 243              	.LBB1949:
 244              	.LBI1949:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 245              		.loc 2 116 2 view .LVU63
 246              	.LBB1950:
 247              	.LBI1950:
 248              		.loc 4 76 5 view .LVU64
 249              		.loc 4 76 5 is_stmt 0 view .LVU65
 250              	.LBE1950:
 251              	.LBB1951:
 252              	.LBI1951:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 253              		.loc 2 204 6 is_stmt 1 view .LVU66
 254              	.LBB1952:
 255              	.LBI1952:
 256              		.loc 4 76 5 view .LVU67
 257              		.loc 4 76 5 is_stmt 0 view .LVU68
 258              	.LBE1952:
 259              	.LBE1951:
 260              	.LBE1949:
 261              	.LBE1948:
 262              	.LBE1946:
 263              	.LBE1944:
  50:Src/motor.cpp ****             test_mod_ = test_voltage_ * vfactor;
 264              		.loc 1 50 51 view .LVU69
 265 007c DDED006A 		vldr.32	s13, [sp]
 266 0080 9FED167A 		vldr.32	s14, .L18+4
 267 0084 66EE876A 		vmul.f32	s13, s13, s14
  50:Src/motor.cpp ****             test_mod_ = test_voltage_ * vfactor;
 268              		.loc 1 50 66 view .LVU70
 269 0088 B7EE006A 		vmov.f32	s12, #1.0e+0
 270 008c 86EE267A 		vdiv.f32	s14, s12, s13
 271              	.LVL9:
 272              		.loc 1 51 23 view .LVU71
 273 0090 0123     		movs	r3, #1
  52:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_NONE;
 274              		.loc 1 52 43 view .LVU72
 275 0092 0020     		movs	r0, #0
 276              	.LVL10:
  51:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_NONE;
ARM GAS  /tmp/ccvzGucR.s 			page 26


 277              		.loc 1 51 23 view .LVU73
 278 0094 82F82430 		strb	r3, [r2, #36]
 279              		.loc 1 52 13 is_stmt 1 view .LVU74
  51:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_NONE;
 280              		.loc 1 51 39 is_stmt 0 view .LVU75
 281 0098 67EE277A 		vmul.f32	s15, s14, s15
  51:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_NONE;
 282              		.loc 1 51 23 view .LVU76
 283 009c C2ED087A 		vstr.32	s15, [r2, #32]
 284              	.LBE1943:
 285              	.LBE1940:
 286              	.LBE1955:
  53:Src/motor.cpp ****         }
  54:Src/motor.cpp ****     }
 287              		.loc 1 54 5 view .LVU77
 288 00a0 03B0     		add	sp, sp, #12
 289              	.LCFI3:
 290              		.cfi_remember_state
 291              		.cfi_def_cfa_offset 12
 292              		@ sp needed
 293 00a2 5DF8044B 		ldr	r4, [sp], #4
 294              	.LCFI4:
 295              		.cfi_restore 4
 296              		.cfi_def_cfa_offset 8
 297 00a6 02B0     		add	sp, sp, #8
 298              	.LCFI5:
 299              		.cfi_def_cfa_offset 0
 300 00a8 7047     		bx	lr
 301              	.LVL11:
 302              	.L12:
 303              	.LCFI6:
 304              		.cfi_restore_state
 305              		.loc 1 54 5 view .LVU78
 306 00aa 9FED0D7A 		vldr.32	s14, .L18+8
  41:Src/motor.cpp ****         }
 307              		.loc 1 41 27 view .LVU79
 308 00ae F0EE477A 		vmov.f32	s15, s14
  40:Src/motor.cpp ****             test_voltage_ = 0.0f;
 309              		.loc 1 40 29 view .LVU80
 310 00b2 F0EE476A 		vmov.f32	s13, s14
 311 00b6 D3E7     		b	.L8
 312              	.L13:
 313              	.LBB1956:
 314              	.LBB1953:
  48:Src/motor.cpp ****         } else {
 315              		.loc 1 48 43 view .LVU81
 316 00b8 4FF48020 		mov	r0, #262144
 317              	.LVL12:
  48:Src/motor.cpp ****         } else {
 318              		.loc 1 48 43 view .LVU82
 319              	.LBE1953:
 320              	.LBE1956:
 321              		.loc 1 54 5 view .LVU83
 322 00bc 03B0     		add	sp, sp, #12
 323              	.LCFI7:
 324              		.cfi_remember_state
 325              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccvzGucR.s 			page 27


 326              		@ sp needed
 327 00be 5DF8044B 		ldr	r4, [sp], #4
 328              	.LCFI8:
 329              		.cfi_restore 4
 330              		.cfi_def_cfa_offset 8
 331 00c2 02B0     		add	sp, sp, #8
 332              	.LCFI9:
 333              		.cfi_def_cfa_offset 0
 334 00c4 7047     		bx	lr
 335              	.LVL13:
 336              	.L17:
 337              	.LCFI10:
 338              		.cfi_restore_state
 339              	.LBB1957:
  45:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_PHASE_RESISTANCE_OUT_OF_RANGE; 
 340              		.loc 1 45 13 is_stmt 1 view .LVU84
  45:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_PHASE_RESISTANCE_OUT_OF_RANGE; 
 341              		.loc 1 45 27 is_stmt 0 view .LVU85
 342 00c6 074B     		ldr	r3, .L18+12
 343 00c8 9361     		str	r3, [r2, #24]	@ float
  46:Src/motor.cpp ****         } else if (!vbus_voltage.has_value()) {
 344              		.loc 1 46 13 is_stmt 1 view .LVU86
  46:Src/motor.cpp ****         } else if (!vbus_voltage.has_value()) {
 345              		.loc 1 46 43 is_stmt 0 view .LVU87
 346 00ca 0120     		movs	r0, #1
 347              	.LVL14:
  46:Src/motor.cpp ****         } else if (!vbus_voltage.has_value()) {
 348              		.loc 1 46 43 view .LVU88
 349              	.LBE1957:
 350              		.loc 1 54 5 view .LVU89
 351 00cc 03B0     		add	sp, sp, #12
 352              	.LCFI11:
 353              		.cfi_def_cfa_offset 12
 354              		@ sp needed
 355 00ce 5DF8044B 		ldr	r4, [sp], #4
 356              	.LCFI12:
 357              		.cfi_restore 4
 358              		.cfi_def_cfa_offset 8
 359 00d2 02B0     		add	sp, sp, #8
 360              	.LCFI13:
 361              		.cfi_def_cfa_offset 0
 362 00d4 7047     		bx	lr
 363              	.L19:
 364 00d6 00BF     		.align	2
 365              	.L18:
 366 00d8 00000000 		.word	current_meas_period
 367 00dc ABAA2A3F 		.word	1059760811
 368 00e0 00000000 		.word	0
 369 00e4 0000C07F 		.word	2143289344
 370              		.cfi_endproc
 371              	.LFE4825:
 373              		.section	.text._ZN31InductanceMeasurementControlLaw5resetEv,"axG",%progbits,_ZN31InductanceMeasure
 374              		.align	1
 375              		.p2align 2,,3
 376              		.weak	_ZN31InductanceMeasurementControlLaw5resetEv
 377              		.syntax unified
 378              		.thumb
ARM GAS  /tmp/ccvzGucR.s 			page 28


 379              		.thumb_func
 380              		.fpu fpv4-sp-d16
 382              	_ZN31InductanceMeasurementControlLaw5resetEv:
 383              	.LVL15:
 384              	.LFB4845:
  55:Src/motor.cpp **** 
  56:Src/motor.cpp **** 
  57:Src/motor.cpp ****     ODriveIntf::MotorIntf::Error get_alpha_beta_output(
  58:Src/motor.cpp ****             uint32_t output_timestamp,
  59:Src/motor.cpp ****             std::optional<float2D>* mod_alpha_beta,
  60:Src/motor.cpp ****             std::optional<float>* ibus) final {
  61:Src/motor.cpp ****         if (!test_mod_.has_value()) {
  62:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_CONTROLLER_INITIALIZING;
  63:Src/motor.cpp ****         } else {
  64:Src/motor.cpp ****             *mod_alpha_beta = {*test_mod_, 0.0f};
  65:Src/motor.cpp ****             *ibus = *test_mod_ * actual_current_;
  66:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_NONE;
  67:Src/motor.cpp ****         }
  68:Src/motor.cpp ****     }
  69:Src/motor.cpp **** 
  70:Src/motor.cpp ****     float get_resistance() {
  71:Src/motor.cpp ****         return test_voltage_ / target_current_;
  72:Src/motor.cpp ****     }
  73:Src/motor.cpp **** 
  74:Src/motor.cpp ****     float get_Ibeta() {
  75:Src/motor.cpp ****         return I_beta_;
  76:Src/motor.cpp ****     }
  77:Src/motor.cpp **** 
  78:Src/motor.cpp ****     const float kI = 1.0f; // [(V/s)/A]
  79:Src/motor.cpp ****     const float kIBetaFilt = 80.0f;
  80:Src/motor.cpp ****     float max_voltage_ = 0.0f;
  81:Src/motor.cpp ****     float actual_current_ = 0.0f;
  82:Src/motor.cpp ****     float target_current_ = 0.0f;
  83:Src/motor.cpp ****     float test_voltage_ = 0.0f;
  84:Src/motor.cpp ****     float I_beta_ = 0.0f; // [A] low pass filtered Ibeta response
  85:Src/motor.cpp ****     std::optional<float> test_mod_ = NAN;
  86:Src/motor.cpp **** };
  87:Src/motor.cpp **** 
  88:Src/motor.cpp **** 
  89:Src/motor.cpp **** 
  90:Src/motor.cpp **** 
  91:Src/motor.cpp **** /**
  92:Src/motor.cpp ****  * @brief This control law toggles rapidly between positive and negative output
  93:Src/motor.cpp ****  * voltage. By measuring how large the current ripples are, the phase inductance
  94:Src/motor.cpp ****  * can be determined.
  95:Src/motor.cpp ****  * 
  96:Src/motor.cpp ****  * TODO: this method assumes a certain synchronization between current measurement and output appli
  97:Src/motor.cpp ****  */
  98:Src/motor.cpp **** struct InductanceMeasurementControlLaw : AlphaBetaFrameController {
  99:Src/motor.cpp ****     void reset() final {
 385              		.loc 1 99 10 is_stmt 1 view -0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 0
 388              		@ frame_needed = 0, uses_anonymous_args = 0
 389              		@ link register save eliminated.
 100:Src/motor.cpp ****         attached_ = false;
 390              		.loc 1 100 9 view .LVU91
ARM GAS  /tmp/ccvzGucR.s 			page 29


 391              		.loc 1 100 19 is_stmt 0 view .LVU92
 392 0000 0023     		movs	r3, #0
 393 0002 0372     		strb	r3, [r0, #8]
 101:Src/motor.cpp ****     }
 394              		.loc 1 101 5 view .LVU93
 395 0004 7047     		bx	lr
 396              		.cfi_endproc
 397              	.LFE4845:
 399 0006 00BF     		.section	.text._ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEE
 400              		.align	1
 401              		.p2align 2,,3
 402              		.weak	_ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 406              		.fpu fpv4-sp-d16
 408              	_ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:
 409              	.LVL16:
 410              	.LFB4846:
 102:Src/motor.cpp **** 
 103:Src/motor.cpp ****     ODriveIntf::MotorIntf::Error on_measurement(
 411              		.loc 1 103 34 is_stmt 1 view -0
 412              		.cfi_startproc
 413              		@ args = 20, pretend = 8, frame = 8
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              		@ link register save eliminated.
 104:Src/motor.cpp ****             std::optional<float> vbus_voltage,
 105:Src/motor.cpp ****             std::optional<float2D> Ialpha_beta,
 106:Src/motor.cpp ****             uint32_t input_timestamp) final
 107:Src/motor.cpp ****     {
 108:Src/motor.cpp ****         if (!Ialpha_beta.has_value()) {
 416              		.loc 1 108 9 view .LVU95
 103:Src/motor.cpp ****             std::optional<float> vbus_voltage,
 417              		.loc 1 103 34 is_stmt 0 view .LVU96
 418 0000 82B0     		sub	sp, sp, #8
 419              	.LCFI14:
 420              		.cfi_def_cfa_offset 8
 421 0002 10B4     		push	{r4}
 422              	.LCFI15:
 423              		.cfi_def_cfa_offset 12
 424              		.cfi_offset 4, -12
 425 0004 83B0     		sub	sp, sp, #12
 426              	.LCFI16:
 427              		.cfi_def_cfa_offset 24
 428              	.LVL17:
 429              	.LBB1958:
 430              	.LBI1958:
 431              		.loc 2 917 22 is_stmt 1 view .LVU97
 432              	.LBB1959:
 433              	.LBI1959:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 434              		.loc 2 434 22 view .LVU98
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 435              		.loc 2 434 22 is_stmt 0 view .LVU99
 436              	.LBE1959:
 437              	.LBE1958:
 103:Src/motor.cpp ****             std::optional<float> vbus_voltage,
ARM GAS  /tmp/ccvzGucR.s 			page 30


 438              		.loc 1 103 34 view .LVU100
 439 0006 0DF1080C 		add	ip, sp, #8
 440              		.loc 1 108 9 view .LVU101
 441 000a 9DF81C40 		ldrb	r4, [sp, #28]	@ zero_extendqisi2
 103:Src/motor.cpp ****             std::optional<float> vbus_voltage,
 442              		.loc 1 103 34 view .LVU102
 443 000e 0593     		str	r3, [sp, #20]
 444 0010 0CE90600 		stmdb	ip, {r1, r2}
 445 0014 089A     		ldr	r2, [sp, #32]
 446              		.loc 1 108 9 view .LVU103
 447 0016 3CB3     		cbz	r4, .L26
 109:Src/motor.cpp ****             return {ODriveIntf::MotorIntf::Error::ERROR_UNKNOWN_CURRENT_MEASUREMENT};
 110:Src/motor.cpp ****         }
 111:Src/motor.cpp **** 
 112:Src/motor.cpp ****         float Ialpha = Ialpha_beta->first;
 448              		.loc 1 112 9 is_stmt 1 view .LVU104
 449              	.LBB1960:
 113:Src/motor.cpp **** 
 114:Src/motor.cpp ****         if (attached_) {
 450              		.loc 1 114 9 is_stmt 0 view .LVU105
 451 0018 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 452              	.LBE1960:
 112:Src/motor.cpp **** 
 453              		.loc 1 112 37 view .LVU106
 454 001a DDED057A 		vldr.32	s15, [sp, #20]
 455              	.LVL18:
 456              		.loc 1 114 9 is_stmt 1 view .LVU107
 457              	.LBB1962:
 458 001e 5BB9     		cbnz	r3, .L29
 115:Src/motor.cpp ****             float sign = test_voltage_ >= 0.0f ? 1.0f : -1.0f;
 116:Src/motor.cpp ****             deltaI_ += -sign * (Ialpha - last_Ialpha_);
 117:Src/motor.cpp ****         } else {
 118:Src/motor.cpp ****             start_timestamp_ = input_timestamp;
 459              		.loc 1 118 13 view .LVU108
 119:Src/motor.cpp ****             attached_ = true;
 460              		.loc 1 119 23 is_stmt 0 view .LVU109
 461 0020 0123     		movs	r3, #1
 118:Src/motor.cpp ****             attached_ = true;
 462              		.loc 1 118 30 view .LVU110
 463 0022 0261     		str	r2, [r0, #16]
 464              		.loc 1 119 13 is_stmt 1 view .LVU111
 465              		.loc 1 119 23 is_stmt 0 view .LVU112
 466 0024 0372     		strb	r3, [r0, #8]
 467              	.L25:
 468              	.LBE1962:
 120:Src/motor.cpp ****         }
 121:Src/motor.cpp **** 
 122:Src/motor.cpp ****         last_Ialpha_ = Ialpha;
 469              		.loc 1 122 9 is_stmt 1 view .LVU113
 470              		.loc 1 122 22 is_stmt 0 view .LVU114
 471 0026 C0ED057A 		vstr.32	s15, [r0, #20]
 123:Src/motor.cpp ****         last_input_timestamp_ = input_timestamp;
 472              		.loc 1 123 9 is_stmt 1 view .LVU115
 473              		.loc 1 123 31 is_stmt 0 view .LVU116
 474 002a 8261     		str	r2, [r0, #24]
 124:Src/motor.cpp **** 
 125:Src/motor.cpp ****         return ODriveIntf::MotorIntf::Error::ERROR_NONE;
ARM GAS  /tmp/ccvzGucR.s 			page 31


 475              		.loc 1 125 9 is_stmt 1 view .LVU117
 476              		.loc 1 125 46 is_stmt 0 view .LVU118
 477 002c 0020     		movs	r0, #0
 478              	.LVL19:
 126:Src/motor.cpp ****     }
 479              		.loc 1 126 5 view .LVU119
 480 002e 03B0     		add	sp, sp, #12
 481              	.LCFI17:
 482              		.cfi_remember_state
 483              		.cfi_def_cfa_offset 12
 484              		@ sp needed
 485 0030 5DF8044B 		ldr	r4, [sp], #4
 486              	.LCFI18:
 487              		.cfi_restore 4
 488              		.cfi_def_cfa_offset 8
 489 0034 02B0     		add	sp, sp, #8
 490              	.LCFI19:
 491              		.cfi_def_cfa_offset 0
 492 0036 7047     		bx	lr
 493              	.LVL20:
 494              	.L29:
 495              	.LCFI20:
 496              		.cfi_restore_state
 497              	.LBB1963:
 498              	.LBB1961:
 115:Src/motor.cpp ****             deltaI_ += -sign * (Ialpha - last_Ialpha_);
 499              		.loc 1 115 13 is_stmt 1 view .LVU120
 115:Src/motor.cpp ****             deltaI_ += -sign * (Ialpha - last_Ialpha_);
 500              		.loc 1 115 48 is_stmt 0 view .LVU121
 501 0038 90ED017A 		vldr.32	s14, [r0, #4]
 116:Src/motor.cpp ****         } else {
 502              		.loc 1 116 40 view .LVU122
 503 003c 90ED056A 		vldr.32	s12, [r0, #20]
 115:Src/motor.cpp ****             deltaI_ += -sign * (Ialpha - last_Ialpha_);
 504              		.loc 1 115 48 view .LVU123
 505 0040 B5EEC07A 		vcmpe.f32	s14, #0
 116:Src/motor.cpp ****         } else {
 506              		.loc 1 116 40 view .LVU124
 507 0044 37EEC66A 		vsub.f32	s12, s15, s12
 116:Src/motor.cpp ****         } else {
 508              		.loc 1 116 21 view .LVU125
 509 0048 90ED077A 		vldr.32	s14, [r0, #28]
 115:Src/motor.cpp ****             deltaI_ += -sign * (Ialpha - last_Ialpha_);
 510              		.loc 1 115 48 view .LVU126
 511 004c FFEE006A 		vmov.f32	s13, #-1.0e+0
 512 0050 F7EE005A 		vmov.f32	s11, #1.0e+0
 513 0054 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 514 0058 B8BF     		it	lt
 515 005a F0EE656A 		vmovlt.f32	s13, s11
 116:Src/motor.cpp ****         } else {
 516              		.loc 1 116 13 is_stmt 1 view .LVU127
 116:Src/motor.cpp ****         } else {
 517              		.loc 1 116 21 is_stmt 0 view .LVU128
 518 005e A6EE267A 		vfma.f32	s14, s12, s13
 519 0062 80ED077A 		vstr.32	s14, [r0, #28]
 520              	.LBE1961:
 521 0066 DEE7     		b	.L25
ARM GAS  /tmp/ccvzGucR.s 			page 32


 522              	.LVL21:
 523              	.L26:
 116:Src/motor.cpp ****         } else {
 524              		.loc 1 116 21 view .LVU129
 525              	.LBE1963:
 109:Src/motor.cpp ****         }
 526              		.loc 1 109 84 view .LVU130
 527 0068 4FF40030 		mov	r0, #131072
 528              	.LVL22:
 529              		.loc 1 126 5 view .LVU131
 530 006c 03B0     		add	sp, sp, #12
 531              	.LCFI21:
 532              		.cfi_def_cfa_offset 12
 533              		@ sp needed
 534 006e 5DF8044B 		ldr	r4, [sp], #4
 535              	.LCFI22:
 536              		.cfi_restore 4
 537              		.cfi_def_cfa_offset 8
 538 0072 02B0     		add	sp, sp, #8
 539              	.LCFI23:
 540              		.cfi_def_cfa_offset 0
 541 0074 7047     		bx	lr
 542              		.cfi_endproc
 543              	.LFE4846:
 545 0076 00BF     		.section	.text._ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIf
 546              		.align	1
 547              		.p2align 2,,3
 548              		.weak	_ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_If
 549              		.syntax unified
 550              		.thumb
 551              		.thumb_func
 552              		.fpu fpv4-sp-d16
 554              	_ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:
 555              	.LVL23:
 556              	.LFB4847:
 127:Src/motor.cpp **** 
 128:Src/motor.cpp ****     ODriveIntf::MotorIntf::Error get_alpha_beta_output(
 557              		.loc 1 128 34 is_stmt 1 view -0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 0
 560              		@ frame_needed = 0, uses_anonymous_args = 0
 561              		@ link register save eliminated.
 129:Src/motor.cpp ****             uint32_t output_timestamp, std::optional<float2D>* mod_alpha_beta,
 130:Src/motor.cpp ****             std::optional<float>* ibus) final
 131:Src/motor.cpp ****     {
 132:Src/motor.cpp ****         test_voltage_ *= -1.0f;
 562              		.loc 1 132 9 view .LVU133
 133:Src/motor.cpp ****         float vfactor = 1.0f / ((2.0f / 3.0f) * vbus_voltage);
 563              		.loc 1 133 47 is_stmt 0 view .LVU134
 564 0000 1249     		ldr	r1, .L33
 565              	.LVL24:
 566              		.loc 1 133 47 view .LVU135
 567 0002 9FED137A 		vldr.32	s14, .L33+4
 568 0006 D1ED007A 		vldr.32	s15, [r1]
 569              	.LBB1964:
 570              	.LBB1965:
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
ARM GAS  /tmp/ccvzGucR.s 			page 33


 571              		.loc 2 791 4 view .LVU136
 572 000a 117A     		ldrb	r1, [r2, #8]	@ zero_extendqisi2
 573              	.LBE1965:
 574              	.LBE1964:
 575              		.loc 1 133 47 view .LVU137
 576 000c 67EE877A 		vmul.f32	s15, s15, s14
 577              		.loc 1 133 15 view .LVU138
 578 0010 F7EE006A 		vmov.f32	s13, #1.0e+0
 579 0014 86EEA77A 		vdiv.f32	s14, s13, s15
 132:Src/motor.cpp ****         float vfactor = 1.0f / ((2.0f / 3.0f) * vbus_voltage);
 580              		.loc 1 132 23 view .LVU139
 581 0018 D0ED017A 		vldr.32	s15, [r0, #4]
 582 001c F1EE677A 		vneg.f32	s15, s15
 583 0020 C0ED017A 		vstr.32	s15, [r0, #4]
 584              		.loc 1 133 9 is_stmt 1 view .LVU140
 585              	.LVL25:
 134:Src/motor.cpp ****         *mod_alpha_beta = {test_voltage_ * vfactor, 0.0f};
 586              		.loc 1 134 9 view .LVU141
 587              		.loc 1 134 42 is_stmt 0 view .LVU142
 588 0024 67EE277A 		vmul.f32	s15, s14, s15
 589              	.LVL26:
 590              	.LBB1975:
 591              	.LBI1975:
 592              		.file 5 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_p
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** /*
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
ARM GAS  /tmp/ccvzGucR.s 			page 34


  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  */
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  */
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** # include <type_traits> // for std::__decay_and_strip, std::is_reference_v
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus > 201703L
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** # include <compare>
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** # define __cpp_lib_constexpr_utility 201811L
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** {
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /**
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @addtogroup utilities
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @{
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    */
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// Tag type for piecewise construction of std::pair objects.
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   struct piecewise_construct_t { explicit piecewise_construct_t() = default; };
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// Tag for piecewise construction of std::pair objects.
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     piecewise_construct_t();
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// @cond undocumented
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // Forward declarations.
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<typename...>
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     class tuple;
ARM GAS  /tmp/ccvzGucR.s 			page 35


  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<std::size_t...>
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct _Index_tuple;
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // Concept utility functions, reused in conditionally-explicit
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // constructors.
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // See PR 70437, don't look at is_constructible or
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // is_convertible if the types are the same to
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // avoid querying those properties for incomplete types.
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template <bool, typename _T1, typename _T2>
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct _PCC
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     {
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&>>::value;
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_convertible<const _U1&, _T1>,
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_convertible<const _U2&, _T2>>::value;
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>>::value;
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_convertible<_U1&&, _T1>,
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_convertible<_U2&&, _T2>>::value;
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _CopyMovePair()
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<const _U1&, _T1>,
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				  is_convertible<_U2&&, _T2>>;
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __do_converts,
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>,
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      __converts
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      >::value;
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _MoveCopyPair()
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
ARM GAS  /tmp/ccvzGucR.s 			page 36


 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<_U1&&, _T1>,
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				  is_convertible<const _U2&, _T2>>;
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __do_converts,
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&&>,
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      __converts
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      >::value;
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   };
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template <typename _T1, typename _T2>
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct _PCC<false, _T1, _T2>
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     {
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   };
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif // C++11
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<typename _U1, typename _U2> class __pair_base
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   {
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     template<typename _T1, typename _T2> friend struct pair;
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     __pair_base() = default;
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     ~__pair_base() = default;
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     __pair_base(const __pair_base&) = default;
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     __pair_base& operator=(const __pair_base&) = delete;
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif // C++11
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   };
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// @endcond
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  /**
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *
ARM GAS  /tmp/ccvzGucR.s 			page 37


 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    */
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct pair
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     : private __pair_base<_T1, _T2>
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     {
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       typedef _T1 first_type;    ///< The type of the `first` member
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       typedef _T2 second_type;   ///< The type of the `second` member
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _T1 first;                 ///< The first member
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _T2 second;                ///< The second member
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // 265.  std::pair::pair() effects overly restrictive
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /** The default constructor creates @c first and @c second using their
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        *  respective default constructors.  */
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename _U2 = _T2,
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U1>,
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U2>>
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                    ::value, bool>::type = true>
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _GLIBCXX_CONSTEXPR pair()
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(), second() { }
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename _U2 = _T2,
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                        is_default_constructible<_U1>,
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                        is_default_constructible<_U2>,
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                        __not_<
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          __and_<__is_implicitly_default_constructible<_U1>,
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                 __is_implicitly_default_constructible<_U2>>>>
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                    ::value, bool>::type = false>
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       explicit constexpr pair()
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(), second() { }
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// Two objects may be passed to a @c pair constructor to be copied.
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       pair(const _T1& __a, const _T2& __b)
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #else
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that don't take pairs.
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @cond undocumented
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       using _PCCP = _PCC<true, _T1, _T2>;
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @endcond
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// Construct from two const lvalues, allowing implicit conversions.
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1 = _T1, typename _U2=_T2, typename
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
ARM GAS  /tmp/ccvzGucR.s 			page 38


 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	                 && _PCCP::template
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       constexpr pair(const _T1& __a, const _T2& __b)
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// Construct from two const lvalues, disallowing implicit conversions.
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        template<typename _U1 = _T1, typename _U2=_T2, typename
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		enable_if<_PCCP::template
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    _ConstructiblePair<_U1, _U2>()
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	                  && !_PCCP::template
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    _ImplicitlyConvertiblePair<_U1, _U2>(),
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       explicit constexpr pair(const _T1& __a, const _T2& __b)
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// There is also a templated constructor to convert from other pairs.
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2>
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	pair(const pair<_U1, _U2>& __p)
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #else
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that take pairs.
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @cond undocumented
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         using _PCCFP = _PCC<!is_same<_T1, _U1>::value
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    || !is_same<_T2, _U2>::value,
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    _T1, _T2>;
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @endcond
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	                 && _PCCFP<_U1, _U2>::template
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  bool>::type=true>
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         constexpr pair(const pair<_U1, _U2>& __p)
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         : first(__p.first), second(__p.second) { }
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			 && !_PCCFP<_U1, _U2>::template
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	explicit constexpr pair(const pair<_U1, _U2>& __p)
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       constexpr pair(const pair&) = default;	///< Copy constructor
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       constexpr pair(pair&&) = default;		///< Move constructor
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // DR 811.
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename
ARM GAS  /tmp/ccvzGucR.s 			page 39


 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveCopyPair<true, _U1, _T2>(),
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        constexpr pair(_U1&& __x, const _T2& __y)
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveCopyPair<false, _U1, _T2>(),
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        explicit constexpr pair(_U1&& __x, const _T2& __y)
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U2, typename
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _CopyMovePair<true, _T1, _U2>(),
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        constexpr pair(const _T1& __x, _U2&& __y)
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U2, typename
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _CopyMovePair<false, _T1, _U2>(),
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        explicit pair(const _T1& __x, _U2&& __y)
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && _PCCP::template
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	constexpr pair(_U1&& __x, _U2&& __y)
 593              		.loc 5 352 12 is_stmt 1 view .LVU143
 594              	.LBB1976:
 595              	.LBI1976:
 596              		.loc 4 76 5 view .LVU144
 597              		.loc 4 76 5 is_stmt 0 view .LVU145
 598              	.LBE1976:
 599              	.LBB1977:
 600              	.LBI1977:
 601              		.loc 4 76 5 is_stmt 1 view .LVU146
 602              		.loc 4 76 5 is_stmt 0 view .LVU147
 603              	.LBE1977:
 604              	.LBE1975:
 605              	.LBB1978:
 606              	.LBI1964:
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 607              		.loc 2 789 2 is_stmt 1 view .LVU148
 608              	.LBB1972:
 609              	.LBB1966:
 610              	.LBI1966:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 611              		.loc 2 434 22 view .LVU149
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 612              		.loc 2 434 22 is_stmt 0 view .LVU150
ARM GAS  /tmp/ccvzGucR.s 			page 40


 613              	.LBE1966:
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 614              		.loc 2 791 4 view .LVU151
 615 0028 49B1     		cbz	r1, .L31
 616              	.LVL27:
 617              	.LBB1967:
 618              	.LBI1967:
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && !_PCCP::template
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	explicit constexpr pair(_U1&& __x, _U2&& __y)
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && _PCCFP<_U1, _U2>::template
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	constexpr pair(pair<_U1, _U2>&& __p)
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	  second(std::forward<_U2>(__p.second)) { }
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && !_PCCFP<_U1, _U2>::template
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	explicit constexpr pair(pair<_U1, _U2>&& __p)
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	  second(std::forward<_U2>(__p.second)) { }
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename... _Args1, typename... _Args2>
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	_GLIBCXX20_CONSTEXPR
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _GLIBCXX20_CONSTEXPR pair&
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       operator=(typename conditional<
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		       is_copy_assignable<_T2>>::value,
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		const pair&, const __nonesuch&>::type __p)
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	first = __p.first;
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = __p.second;
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _GLIBCXX20_CONSTEXPR pair&
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       operator=(typename conditional<
 619              		.loc 5 401 7 is_stmt 1 view .LVU152
ARM GAS  /tmp/ccvzGucR.s 			page 41


 620              	.LBB1968:
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_move_assignable<_T1>,
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		       is_move_assignable<_T2>>::value,
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		pair&&, __nonesuch&&>::type __p)
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       noexcept(__and_<is_nothrow_move_assignable<_T1>,
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_nothrow_move_assignable<_T2>>::value)
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	first = std::forward<first_type>(__p.first);
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 621              		.loc 5 409 9 is_stmt 0 view .LVU153
 622 002a 0021     		movs	r1, #0
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 623              		.loc 5 408 8 view .LVU154
 624 002c C2ED007A 		vstr.32	s15, [r2]
 625              		.loc 5 409 9 view .LVU155
 626 0030 5160     		str	r1, [r2, #4]	@ float
 627              	.LVL28:
 628              	.L32:
 629              		.loc 5 409 9 view .LVU156
 630              	.LBE1968:
 631              	.LBE1967:
 632              	.LBE1972:
 633              	.LBE1978:
 135:Src/motor.cpp ****         *ibus = 0.0f;
 634              		.loc 1 135 9 is_stmt 1 view .LVU157
 635              	.LBB1979:
 636              	.LBI1979:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 637              		.loc 2 701 2 view .LVU158
 638              	.LBB1980:
 639              	.LBI1980:
 640              		.loc 4 76 5 view .LVU159
 641              		.loc 4 76 5 is_stmt 0 view .LVU160
 642              	.LBE1980:
 643              	.LBB1981:
 644              	.LBI1981:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 645              		.loc 2 608 28 is_stmt 1 view .LVU161
 646              	.LBB1982:
 647              	.LBI1982:
 648              		.loc 4 76 5 view .LVU162
 649              		.loc 4 76 5 is_stmt 0 view .LVU163
 650              	.LBE1982:
 651              	.LBB1983:
 652              	.LBI1983:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 653              		.loc 2 301 42 is_stmt 1 view .LVU164
 654              	.LBB1984:
 655              	.LBI1984:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 656              		.loc 2 116 2 view .LVU165
 657              	.LBB1985:
 658              	.LBI1985:
 659              		.loc 4 76 5 view .LVU166
 660              		.loc 4 76 5 is_stmt 0 view .LVU167
 661              	.LBE1985:
 662              	.LBB1986:
ARM GAS  /tmp/ccvzGucR.s 			page 42


 663              	.LBI1986:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 664              		.loc 2 204 6 is_stmt 1 view .LVU168
 665              	.LBB1987:
 666              	.LBI1987:
 667              		.loc 4 76 5 view .LVU169
 668              		.loc 4 76 5 is_stmt 0 view .LVU170
 669              	.LBE1987:
 670              	.LBE1986:
 671              	.LBE1984:
 672              	.LBE1983:
 673              	.LBE1981:
 674              	.LBE1979:
 675              		.loc 1 135 15 view .LVU171
 676 0032 0021     		movs	r1, #0
 677 0034 0122     		movs	r2, #1
 678              	.LVL29:
 679              		.loc 1 135 15 view .LVU172
 680 0036 1960     		str	r1, [r3]	@ float
 681 0038 1A71     		strb	r2, [r3, #4]
 136:Src/motor.cpp ****         return Motor::ERROR_NONE;
 682              		.loc 1 136 9 is_stmt 1 view .LVU173
 137:Src/motor.cpp ****     }
 683              		.loc 1 137 5 is_stmt 0 view .LVU174
 684 003a 0020     		movs	r0, #0
 685 003c 7047     		bx	lr
 686              	.LVL30:
 687              	.L31:
 688              	.LBB1988:
 689              	.LBB1973:
 690              	.LBB1969:
 691              	.LBI1969:
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 692              		.loc 2 416 2 is_stmt 1 view .LVU175
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 693              		.loc 2 416 2 is_stmt 0 view .LVU176
 694              	.LBE1969:
 695              	.LBE1973:
 696              	.LBE1988:
 697              		.file 6 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // The -*- C++ -*- dynamic memory management header.
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // Copyright (C) 1994-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // This file is part of GCC.
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** //
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // GCC is free software; you can redistribute it and/or modify
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // it under the terms of the GNU General Public License as published by
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // any later version.
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // 
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // GCC is distributed in the hope that it will be useful,
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // GNU General Public License for more details.
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // 
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // Under Section 7 of GPL version 3, you are granted additional
ARM GAS  /tmp/ccvzGucR.s 			page 43


  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // 3.1, as published by the Free Software Foundation.
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // You should have received a copy of the GNU General Public License and
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // <http://www.gnu.org/licenses/>.
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** /** @file new
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  This is a Standard C++ Library header.
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  handling memory allocation errors; see
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/dynamic_memory.html
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  for more.
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  */
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #ifndef _NEW
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #define _NEW
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #pragma GCC system_header
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #include <bits/c++config.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #include <exception>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #pragma GCC visibility push(default)
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** extern "C++" {
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** namespace std 
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** {
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /**
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  @brief  Exception possibly thrown by @c new.
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  @ingroup exceptions
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  errors from the throwing forms of @c new.  */
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   class bad_alloc : public exception 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   {
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   public:
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_alloc() throw() { }
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_alloc(const bad_alloc&) = default;
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_alloc& operator=(const bad_alloc&) = default;
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // This declaration is not useless:
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual ~bad_alloc() throw();
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // See comment in eh_exception.cc.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual const char* what() const throw();
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   };
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   class bad_array_new_length : public bad_alloc
ARM GAS  /tmp/ccvzGucR.s 			page 44


  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   {
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   public:
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_array_new_length() throw() { }
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // This declaration is not useless:
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual ~bad_array_new_length() throw();
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // See comment in eh_exception.cc.
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual const char* what() const throw();
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   };
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_aligned_new
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   enum class align_val_t: size_t {};
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   struct nothrow_t
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   {
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     explicit nothrow_t() = default;
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   };
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   extern const nothrow_t nothrow;
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /** If you write your own error handler to be called by @c new, it must
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  be of this type.  */
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   typedef void (*new_handler)();
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /// Takes a replacement handler as the argument, returns the
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /// previous handler.
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   new_handler set_new_handler(new_handler) throw();
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /// Return the current new handler.
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   new_handler get_new_handler() noexcept;
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** } // namespace std
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** //@{
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** /** These are replaceable signatures:
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - normal array new and delete (same)
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *    @c NULL on error)
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - @c nothrow array new and delete (same)
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  Placement new and delete signatures (take a memory address argument,
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  does nothing) may not be replaced by a user's program.
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** */
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
ARM GAS  /tmp/ccvzGucR.s 			page 45


 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_sized_deallocation
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__, __malloc__));
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__, __malloc__));
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_aligned_new
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::align_val_t)
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::align_val_t, const std::nothrow_t&)
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::align_val_t)
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_sized_deallocation
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::size_t, std::align_val_t)
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::size_t, std::align_val_t)
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif // __cpp_sized_deallocation
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif // __cpp_aligned_new
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // Default placement versions of operator new.
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** { return __p; }
 698              		.loc 6 175 3 is_stmt 1 view .LVU177
 699              	.LBB1989:
 700              	.LBB1974:
 701              	.LBB1971:
 702              	.LBB1970:
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 703              		.loc 2 419 4 is_stmt 0 view .LVU178
 704 003e 0020     		movs	r0, #0
 705              	.LVL31:
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 706              		.loc 2 422 51 view .LVU179
 707 0040 0121     		movs	r1, #1
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
ARM GAS  /tmp/ccvzGucR.s 			page 46


 708              		.loc 2 419 4 view .LVU180
 709 0042 C2ED007A 		vstr.32	s15, [r2]
 710 0046 5060     		str	r0, [r2, #4]	@ float
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 711              		.loc 2 422 51 view .LVU181
 712 0048 1172     		strb	r1, [r2, #8]
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 713              		.loc 2 423 2 view .LVU182
 714 004a F2E7     		b	.L32
 715              	.L34:
 716              		.align	2
 717              	.L33:
 718 004c 00000000 		.word	vbus_voltage
 719 0050 ABAA2A3F 		.word	1059760811
 720              	.LBE1970:
 721              	.LBE1971:
 722              	.LBE1974:
 723              	.LBE1989:
 724              		.cfi_endproc
 725              	.LFE4847:
 727              		.section	.text._ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIf
 728              		.align	1
 729              		.p2align 2,,3
 730              		.weak	_ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_If
 731              		.syntax unified
 732              		.thumb
 733              		.thumb_func
 734              		.fpu fpv4-sp-d16
 736              	_ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:
 737              	.LVL32:
 738              	.LFB4837:
  57:Src/motor.cpp ****             uint32_t output_timestamp,
 739              		.loc 1 57 34 is_stmt 1 view -0
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
 743              		@ link register save eliminated.
  61:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_CONTROLLER_INITIALIZING;
 744              		.loc 1 61 9 view .LVU184
 745              	.LBB2045:
 746              	.LBI2045:
 747              		.loc 2 917 22 view .LVU185
 748              	.LBB2046:
 749              	.LBI2046:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 750              		.loc 2 434 22 view .LVU186
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 751              		.loc 2 434 22 is_stmt 0 view .LVU187
 752              	.LBE2046:
 753              	.LBE2045:
  61:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_CONTROLLER_INITIALIZING;
 754              		.loc 1 61 9 view .LVU188
 755 0000 90F82410 		ldrb	r1, [r0, #36]	@ zero_extendqisi2
 756              	.LVL33:
  61:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_CONTROLLER_INITIALIZING;
 757              		.loc 1 61 9 view .LVU189
 758 0004 D1B1     		cbz	r1, .L39
ARM GAS  /tmp/ccvzGucR.s 			page 47


 759              	.LVL34:
 760              	.LBB2047:
 761              	.LBI2047:
  57:Src/motor.cpp ****             uint32_t output_timestamp,
 762              		.loc 1 57 34 is_stmt 1 view .LVU190
 763              	.LBB2048:
  64:Src/motor.cpp ****             *ibus = *test_mod_ * actual_current_;
 764              		.loc 1 64 13 view .LVU191
 765              	.LBB2049:
 766              	.LBI2049:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 767              		.loc 5 352 12 view .LVU192
 768              	.LBB2050:
 769              	.LBB2051:
 770              	.LBI2051:
 771              		.loc 4 76 5 view .LVU193
 772              		.loc 4 76 5 is_stmt 0 view .LVU194
 773              	.LBE2051:
 774              	.LBE2050:
 775              	.LBE2049:
 776              	.LBE2048:
 777              	.LBE2047:
  57:Src/motor.cpp ****             uint32_t output_timestamp,
 778              		.loc 1 57 34 view .LVU195
 779 0006 10B4     		push	{r4}
 780              	.LCFI24:
 781              		.cfi_def_cfa_offset 4
 782              		.cfi_offset 4, -4
 783              	.LBB2082:
 784              	.LBB2078:
 785              	.LBB2054:
 786              	.LBB2055:
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 787              		.loc 2 791 4 view .LVU196
 788 0008 147A     		ldrb	r4, [r2, #8]	@ zero_extendqisi2
 789              	.LBE2055:
 790              	.LBE2054:
 791              	.LBB2065:
 792              	.LBB2053:
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 793              		.loc 5 353 64 view .LVU197
 794 000a 016A     		ldr	r1, [r0, #32]	@ float
 795              	.LVL35:
 796              	.LBB2052:
 797              	.LBI2052:
 798              		.loc 4 76 5 is_stmt 1 view .LVU198
 799              		.loc 4 76 5 is_stmt 0 view .LVU199
 800              	.LBE2052:
 801              	.LBE2053:
 802              	.LBE2065:
 803              	.LBB2066:
 804              	.LBI2054:
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 805              		.loc 2 789 2 is_stmt 1 view .LVU200
 806              	.LBB2062:
 807              	.LBB2056:
 808              	.LBI2056:
ARM GAS  /tmp/ccvzGucR.s 			page 48


 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 809              		.loc 2 434 22 view .LVU201
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 810              		.loc 2 434 22 is_stmt 0 view .LVU202
 811              	.LBE2056:
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 812              		.loc 2 791 4 view .LVU203
 813 000c 94B9     		cbnz	r4, .L44
 814              	.LVL36:
 815              	.LBB2057:
 816              	.LBI2057:
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 817              		.loc 2 416 2 is_stmt 1 view .LVU204
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 818              		.loc 2 416 2 is_stmt 0 view .LVU205
 819              	.LBE2057:
 820              	.LBE2062:
 821              	.LBE2066:
 822              	.LBE2078:
 823              	.LBE2082:
 824              		.loc 6 175 3 is_stmt 1 view .LVU206
 825              	.LBB2083:
 826              	.LBB2079:
 827              	.LBB2067:
 828              	.LBB2063:
 829              	.LBB2059:
 830              	.LBB2058:
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 831              		.loc 2 419 4 is_stmt 0 view .LVU207
 832 000e 0024     		movs	r4, #0
 833 0010 1160     		str	r1, [r2]	@ float
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 834              		.loc 2 422 51 view .LVU208
 835 0012 0121     		movs	r1, #1
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 836              		.loc 2 419 4 view .LVU209
 837 0014 5460     		str	r4, [r2, #4]	@ float
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 838              		.loc 2 422 51 view .LVU210
 839 0016 1172     		strb	r1, [r2, #8]
 840              	.LVL37:
 841              	.L38:
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 842              		.loc 2 422 51 view .LVU211
 843              	.LBE2058:
 844              	.LBE2059:
 845              	.LBE2063:
 846              	.LBE2067:
  65:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_NONE;
 847              		.loc 1 65 13 is_stmt 1 view .LVU212
 848              	.LBB2068:
 849              	.LBI2068:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 850              		.loc 2 701 2 view .LVU213
 851              	.LBB2069:
 852              	.LBI2069:
 853              		.loc 4 76 5 view .LVU214
ARM GAS  /tmp/ccvzGucR.s 			page 49


 854              		.loc 4 76 5 is_stmt 0 view .LVU215
 855              	.LBE2069:
 856              	.LBB2070:
 857              	.LBI2070:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 858              		.loc 2 608 28 is_stmt 1 view .LVU216
 859              	.LBB2071:
 860              	.LBI2071:
 861              		.loc 4 76 5 view .LVU217
 862              		.loc 4 76 5 is_stmt 0 view .LVU218
 863              	.LBE2071:
 864              	.LBB2072:
 865              	.LBI2072:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 866              		.loc 2 301 42 is_stmt 1 view .LVU219
 867              	.LBB2073:
 868              	.LBI2073:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 869              		.loc 2 116 2 view .LVU220
 870              	.LBB2074:
 871              	.LBI2074:
 872              		.loc 4 76 5 view .LVU221
 873              		.loc 4 76 5 is_stmt 0 view .LVU222
 874              	.LBE2074:
 875              	.LBB2075:
 876              	.LBI2075:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 877              		.loc 2 204 6 is_stmt 1 view .LVU223
 878              	.LBB2076:
 879              	.LBI2076:
 880              		.loc 4 76 5 view .LVU224
 881              		.loc 4 76 5 is_stmt 0 view .LVU225
 882              	.LBE2076:
 883              	.LBE2075:
 884              	.LBE2073:
 885              	.LBE2072:
 886              	.LBE2070:
 887              	.LBE2068:
  65:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_NONE;
 888              		.loc 1 65 32 view .LVU226
 889 0018 D0ED087A 		vldr.32	s15, [r0, #32]
 890 001c 90ED047A 		vldr.32	s14, [r0, #16]
 891              	.LBE2079:
 892              	.LBE2083:
  68:Src/motor.cpp **** 
 893              		.loc 1 68 5 view .LVU227
 894 0020 5DF8044B 		ldr	r4, [sp], #4
 895              	.LCFI25:
 896              		.cfi_remember_state
 897              		.cfi_restore 4
 898              		.cfi_def_cfa_offset 0
 899              	.LBB2084:
 900              	.LBB2080:
  65:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_NONE;
 901              		.loc 1 65 32 view .LVU228
 902 0024 67EE877A 		vmul.f32	s15, s15, s14
  65:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_NONE;
ARM GAS  /tmp/ccvzGucR.s 			page 50


 903              		.loc 1 65 19 view .LVU229
 904 0028 0122     		movs	r2, #1
 905              	.LVL38:
  65:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_NONE;
 906              		.loc 1 65 19 view .LVU230
 907 002a 0020     		movs	r0, #0
 908              	.LVL39:
  65:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_NONE;
 909              		.loc 1 65 19 view .LVU231
 910 002c 1A71     		strb	r2, [r3, #4]
  66:Src/motor.cpp ****         }
 911              		.loc 1 66 13 is_stmt 1 view .LVU232
 912              	.LVL40:
  65:Src/motor.cpp ****             return ODriveIntf::MotorIntf::ERROR_NONE;
 913              		.loc 1 65 19 is_stmt 0 view .LVU233
 914 002e C3ED007A 		vstr.32	s15, [r3]
 915              	.LBE2080:
 916              	.LBE2084:
  68:Src/motor.cpp **** 
 917              		.loc 1 68 5 view .LVU234
 918 0032 7047     		bx	lr
 919              	.LVL41:
 920              	.L44:
 921              	.LCFI26:
 922              		.cfi_restore_state
 923              	.LBB2085:
 924              	.LBB2081:
 925              	.LBB2077:
 926              	.LBB2064:
 927              	.LBB2060:
 928              	.LBI2060:
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_move_assignable<_T1>,
 929              		.loc 5 401 7 is_stmt 1 view .LVU235
 930              	.LBB2061:
 931              		.loc 5 409 9 is_stmt 0 view .LVU236
 932 0034 0024     		movs	r4, #0
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 933              		.loc 5 408 8 view .LVU237
 934 0036 1160     		str	r1, [r2]	@ float
 935              		.loc 5 409 9 view .LVU238
 936 0038 5460     		str	r4, [r2, #4]	@ float
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 937              		.loc 5 410 10 view .LVU239
 938 003a EDE7     		b	.L38
 939              	.LVL42:
 940              	.L39:
 941              	.LCFI27:
 942              		.cfi_def_cfa_offset 0
 943              		.cfi_restore 4
 944              		.loc 5 410 10 view .LVU240
 945              	.LBE2061:
 946              	.LBE2060:
 947              	.LBE2064:
 948              	.LBE2077:
 949              	.LBE2081:
 950              	.LBE2085:
  62:Src/motor.cpp ****         } else {
ARM GAS  /tmp/ccvzGucR.s 			page 51


 951              		.loc 1 62 43 view .LVU241
 952 003c 4FF08060 		mov	r0, #67108864
 953              	.LVL43:
  68:Src/motor.cpp **** 
 954              		.loc 1 68 5 view .LVU242
 955 0040 7047     		bx	lr
 956              		.cfi_endproc
 957              	.LFE4837:
 959 0042 00BF     		.section	.text._ZN5MotorC2ERK21MotorHardwareConfig_tRNS_8Config_tE,"ax",%progbits
 960              		.align	1
 961              		.p2align 2,,3
 962              		.global	_ZN5MotorC2ERK21MotorHardwareConfig_tRNS_8Config_tE
 963              		.syntax unified
 964              		.thumb
 965              		.thumb_func
 966              		.fpu fpv4-sp-d16
 968              	_ZN5MotorC2ERK21MotorHardwareConfig_tRNS_8Config_tE:
 969              	.LVL44:
 970              	.LFB4958:
 138:Src/motor.cpp **** 
 139:Src/motor.cpp ****     float get_inductance() {
 140:Src/motor.cpp ****         // Note: A more correct formula would also take into account that there is a finite timeste
 141:Src/motor.cpp ****         // However, the discretisation in the current control loop inverts the same discrepancy
 142:Src/motor.cpp ****         float dt = (float)(last_input_timestamp_ - start_timestamp_) / (float)TIM_1_8_CLOCK_HZ; // 
 143:Src/motor.cpp ****         return std::abs(test_voltage_) / (deltaI_ / dt);
 144:Src/motor.cpp ****     }
 145:Src/motor.cpp **** 
 146:Src/motor.cpp ****     // Config
 147:Src/motor.cpp ****     float test_voltage_ = 0.0f;
 148:Src/motor.cpp **** 
 149:Src/motor.cpp ****     // State
 150:Src/motor.cpp ****     bool attached_ = false;
 151:Src/motor.cpp ****     float sign_ = 0;
 152:Src/motor.cpp **** 
 153:Src/motor.cpp ****     // Outputs
 154:Src/motor.cpp ****     uint32_t start_timestamp_ = 0;
 155:Src/motor.cpp ****     float last_Ialpha_ = NAN;
 156:Src/motor.cpp ****     uint32_t last_input_timestamp_ = 0;
 157:Src/motor.cpp ****     float deltaI_ = 0.0f;
 158:Src/motor.cpp **** };
 159:Src/motor.cpp **** 
 160:Src/motor.cpp **** 
 161:Src/motor.cpp **** 
 162:Src/motor.cpp **** 
 163:Src/motor.cpp **** Motor::Motor(const MotorHardwareConfig_t& hw_config,
 971              		.loc 1 163 1 is_stmt 1 view -0
 972              		.cfi_startproc
 973              		@ args = 0, pretend = 0, frame = 0
 974              		@ frame_needed = 0, uses_anonymous_args = 0
 975              		.loc 1 163 1 is_stmt 0 view .LVU244
 976 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 977              	.LCFI28:
 978              		.cfi_def_cfa_offset 40
 979              		.cfi_offset 3, -40
 980              		.cfi_offset 4, -36
 981              		.cfi_offset 5, -32
 982              		.cfi_offset 6, -28
ARM GAS  /tmp/ccvzGucR.s 			page 52


 983              		.cfi_offset 7, -24
 984              		.cfi_offset 8, -20
 985              		.cfi_offset 9, -16
 986              		.cfi_offset 10, -12
 987              		.cfi_offset 11, -8
 988              		.cfi_offset 14, -4
 989              	.LBB2086:
 164:Src/motor.cpp ****              Config_t& config) :
 165:Src/motor.cpp ****         hw_config_(hw_config),
 166:Src/motor.cpp ****         config_(config)
 990              		.loc 1 166 23 view .LVU245
 991 0004 8E4B     		ldr	r3, .L47
 992 0006 C360     		str	r3, [r0, #12]
 993 0008 40F64D03 		movw	r3, #2125
 994 000c 0026     		movs	r6, #0
 995 000e 0027     		movs	r7, #0
 996 0010 0382     		strh	r3, [r0, #16]	@ movhi
 997 0012 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 998 0014 0160     		str	r1, [r0]
 999              	.LBE2086:
 163:Src/motor.cpp ****              Config_t& config) :
 1000              		.loc 1 163 1 view .LVU246
 1001 0016 0446     		mov	r4, r0
 1002 0018 9046     		mov	r8, r2
 1003              	.LBB2249:
 1004              		.loc 1 166 23 view .LVU247
 1005 001a C0E90127 		strd	r2, r7, [r0, #4]
 1006 001e 8774     		strb	r7, [r0, #18]
 1007 0020 8782     		strh	r7, [r0, #20]	@ movhi
 1008 0022 8761     		str	r7, [r0, #24]
 1009 0024 4763     		str	r7, [r0, #52]
 1010 0026 0787     		strh	r7, [r0, #56]	@ movhi
 1011 0028 80F83A30 		strb	r3, [r0, #58]
 1012 002c 8664     		str	r6, [r0, #72]	@ float
 1013 002e C664     		str	r6, [r0, #76]	@ float
 1014 0030 0665     		str	r6, [r0, #80]	@ float
 1015 0032 4665     		str	r6, [r0, #84]	@ float
 1016 0034 3946     		mov	r1, r7
 1017              	.LVL45:
 1018              		.loc 1 166 23 view .LVU248
 1019 0036 4C22     		movs	r2, #76
 1020              	.LVL46:
 1021              		.loc 1 166 23 view .LVU249
 1022 0038 5830     		adds	r0, r0, #88
 1023              	.LVL47:
 1024              		.loc 1 166 23 view .LVU250
 1025 003a FFF7FEFF 		bl	memset
 1026              	.LVL48:
 1027              		.loc 1 166 23 view .LVU251
 1028 003e 814B     		ldr	r3, .L47+4
 1029 0040 DFF818B2 		ldr	fp, .L47+28
 1030 0044 C4F8C430 		str	r3, [r4, #196]	@ float
 1031 0048 4FF07E5A 		mov	r10, #1065353216
 1032 004c 7E4B     		ldr	r3, .L47+8
 1033 004e 7F4D     		ldr	r5, .L47+12
 1034 0050 C4F8C830 		str	r3, [r4, #200]	@ float
 1035 0054 4FF00109 		mov	r9, #1
ARM GAS  /tmp/ccvzGucR.s 			page 53


 1036 0058 3946     		mov	r1, r7
 1037 005a C4F88CA0 		str	r10, [r4, #140]	@ float
 1038 005e 84F8A870 		strb	r7, [r4, #168]
 1039 0062 C4F8AC70 		str	r7, [r4, #172]
 1040 0066 C4F8B060 		str	r6, [r4, #176]	@ float
 1041 006a C4F8B460 		str	r6, [r4, #180]	@ float
 1042 006e C4F8B860 		str	r6, [r4, #184]	@ float
 1043 0072 C4F8BC60 		str	r6, [r4, #188]	@ float
 1044 0076 C4F8C060 		str	r6, [r4, #192]	@ float
 1045 007a C4F8A4B0 		str	fp, [r4, #164]	@ float
 1046 007e 84F8CC90 		strb	r9, [r4, #204]
 1047 0082 F022     		movs	r2, #240
 1048 0084 04F1D000 		add	r0, r4, #208
 1049 0088 FFF7FEFF 		bl	memset
 1050              	.LVL49:
 1051 008c C4F8D050 		str	r5, [r4, #208]	@ float
 1052 0090 C4F8D450 		str	r5, [r4, #212]	@ float
 1053 0094 C4F8D850 		str	r5, [r4, #216]	@ float
 1054 0098 C4F8DC50 		str	r5, [r4, #220]	@ float
 1055 009c C4F8E050 		str	r5, [r4, #224]	@ float
 1056 00a0 C4F8E450 		str	r5, [r4, #228]	@ float
 1057 00a4 C4F8E850 		str	r5, [r4, #232]	@ float
 1058 00a8 C4F8EC50 		str	r5, [r4, #236]	@ float
 1059 00ac C4F8F050 		str	r5, [r4, #240]	@ float
 1060 00b0 C4F8F450 		str	r5, [r4, #244]	@ float
 1061 00b4 C4F8F850 		str	r5, [r4, #248]	@ float
 1062 00b8 C4F8FC50 		str	r5, [r4, #252]	@ float
 1063 00bc C4F80051 		str	r5, [r4, #256]	@ float
 1064 00c0 C4F80451 		str	r5, [r4, #260]	@ float
 1065 00c4 C4F80851 		str	r5, [r4, #264]	@ float
 1066 00c8 C4F80C51 		str	r5, [r4, #268]	@ float
 1067 00cc C4F81051 		str	r5, [r4, #272]	@ float
 1068 00d0 C4F81451 		str	r5, [r4, #276]	@ float
 1069 00d4 C4F81851 		str	r5, [r4, #280]	@ float
 1070 00d8 C4F81C51 		str	r5, [r4, #284]	@ float
 1071 00dc F022     		movs	r2, #240
 1072 00de 3946     		mov	r1, r7
 1073 00e0 04F5E070 		add	r0, r4, #448
 1074 00e4 FFF7FEFF 		bl	memset
 1075              	.LVL50:
 1076              	.LBB2087:
 1077              	.LBB2088:
 1078              		.file 7 "Inc/foc.hpp"
   1:Inc/foc.hpp   **** #ifndef __FOC_HPP
   2:Inc/foc.hpp   **** #define __FOC_HPP
   3:Inc/foc.hpp   **** 
   4:Inc/foc.hpp   **** #include "user_int.hpp"
   5:Inc/foc.hpp   **** #include "interfaces.hpp"
   6:Inc/foc.hpp   **** #include <cstdint>  // Add this for uint32_t
   7:Inc/foc.hpp   **** #include "component.hpp"
   8:Inc/foc.hpp   **** #include "phase_control_law.hpp"
   9:Inc/foc.hpp   **** 
  10:Inc/foc.hpp   **** /**
  11:Inc/foc.hpp   ****  * @brief Field oriented controller.
  12:Inc/foc.hpp   ****  * 
  13:Inc/foc.hpp   ****  * This controller can run in either current control mode or voltage control
  14:Inc/foc.hpp   ****  * mode.
ARM GAS  /tmp/ccvzGucR.s 			page 54


  15:Inc/foc.hpp   ****  */
  16:Inc/foc.hpp   **** class FieldOrientedController: public AlphaBetaFrameController, public ComponentBase {
 1079              		.loc 7 16 7 view .LVU252
 1080 00e8 594B     		ldr	r3, .L47+16
 1081              	.LBE2088:
 1082              	.LBE2087:
 1083              		.loc 1 166 23 view .LVU253
 1084 00ea 5A4A     		ldr	r2, .L47+20
 1085 00ec C4F8DC22 		str	r2, [r4, #732]	@ float
 1086 00f0 594A     		ldr	r2, .L47+24
 1087 00f2 C4F8E4B2 		str	fp, [r4, #740]	@ float
 1088 00f6 C4F8C051 		str	r5, [r4, #448]	@ float
 1089 00fa C4F8C451 		str	r5, [r4, #452]	@ float
 1090 00fe C4F8C851 		str	r5, [r4, #456]	@ float
 1091 0102 C4F8CC51 		str	r5, [r4, #460]	@ float
 1092 0106 C4F8D051 		str	r5, [r4, #464]	@ float
 1093 010a C4F8D451 		str	r5, [r4, #468]	@ float
 1094 010e C4F8D851 		str	r5, [r4, #472]	@ float
 1095 0112 C4F8DC51 		str	r5, [r4, #476]	@ float
 1096 0116 C4F8E051 		str	r5, [r4, #480]	@ float
 1097 011a C4F8E451 		str	r5, [r4, #484]	@ float
 1098 011e C4F8E851 		str	r5, [r4, #488]	@ float
 1099 0122 C4F8EC51 		str	r5, [r4, #492]	@ float
 1100 0126 C4F8F051 		str	r5, [r4, #496]	@ float
 1101 012a C4F8F451 		str	r5, [r4, #500]	@ float
 1102 012e C4F8F851 		str	r5, [r4, #504]	@ float
 1103 0132 C4F8FC51 		str	r5, [r4, #508]	@ float
 1104 0136 C4F80052 		str	r5, [r4, #512]	@ float
 1105 013a C4F80452 		str	r5, [r4, #516]	@ float
 1106 013e C4F80852 		str	r5, [r4, #520]	@ float
 1107 0142 C4F80C52 		str	r5, [r4, #524]	@ float
 1108 0146 C4F8C862 		str	r6, [r4, #712]	@ float
 1109 014a C4F8CC72 		str	r7, [r4, #716]
 1110 014e A4F8D072 		strh	r7, [r4, #720]	@ movhi
 1111 0152 C4F8D462 		str	r6, [r4, #724]	@ float
 1112 0156 C4F8D862 		str	r6, [r4, #728]	@ float
 1113 015a C4F8E872 		str	r7, [r4, #744]
 1114 015e C4F8EC62 		str	r6, [r4, #748]	@ float
 1115 0162 C4F8F062 		str	r6, [r4, #752]	@ float
 1116 0166 C4F8F462 		str	r6, [r4, #756]	@ float
 1117 016a C4F8E022 		str	r2, [r4, #736]	@ float
 1118 016e C4F8F862 		str	r6, [r4, #760]	@ float
 1119              	.LVL51:
 1120              	.LBB2188:
 1121              	.LBI2087:
 1122              		.loc 7 16 7 is_stmt 1 view .LVU254
 1123              	.LBB2187:
 1124              	.LBB2089:
 1125              	.LBI2089:
 1126              		.file 8 "Inc/phase_control_law.hpp"
   1:Inc/phase_control_law.hpp **** #ifndef __PHASE_CONTROL_LAW_HPP
   2:Inc/phase_control_law.hpp **** #define __PHASE_CONTROL_LAW_HPP
   3:Inc/phase_control_law.hpp **** 
   4:Inc/phase_control_law.hpp **** 
   5:Inc/phase_control_law.hpp **** #include <variant>
   6:Inc/phase_control_law.hpp **** #include "user_int.hpp"
   7:Inc/phase_control_law.hpp **** #include "interfaces.hpp"
ARM GAS  /tmp/ccvzGucR.s 			page 55


   8:Inc/phase_control_law.hpp **** class Motor;
   9:Inc/phase_control_law.hpp **** 
  10:Inc/phase_control_law.hpp **** template<size_t N_PHASES>
  11:Inc/phase_control_law.hpp **** class PhaseControlLaw {
  12:Inc/phase_control_law.hpp **** public:
  13:Inc/phase_control_law.hpp ****     /**
  14:Inc/phase_control_law.hpp ****      * @brief Called when this controller becomes the active controller.
  15:Inc/phase_control_law.hpp ****      */
  16:Inc/phase_control_law.hpp ****     virtual void reset() = 0;
  17:Inc/phase_control_law.hpp **** 
  18:Inc/phase_control_law.hpp ****     /**
  19:Inc/phase_control_law.hpp ****      * @brief Informs the control law about a new set of measurements.
  20:Inc/phase_control_law.hpp ****      *
  21:Inc/phase_control_law.hpp ****      * This function gets called in a high priority interrupt context and should
  22:Inc/phase_control_law.hpp ****      * run fast.
  23:Inc/phase_control_law.hpp ****      *
  24:Inc/phase_control_law.hpp ****      * Beware that all inputs can be NAN.
  25:Inc/phase_control_law.hpp ****      *
  26:Inc/phase_control_law.hpp ****      * @param vbus_voltage: The most recently measured DC link voltage. Can be
  27:Inc/phase_control_law.hpp ****      *        std::nullopt if the measurement is not available or valid for any
  28:Inc/phase_control_law.hpp ****      *        reason.
  29:Inc/phase_control_law.hpp ****      * @param currents: The most recently measured (or inferred) phase currents
  30:Inc/phase_control_law.hpp ****      *        in Amps. Can be std::nullopt if no valid measurements are available
  31:Inc/phase_control_law.hpp ****      *        (e.g. because the opamp isn't started or because the sensors were
  32:Inc/phase_control_law.hpp ****      *        saturated).
  33:Inc/phase_control_law.hpp ****      * @param input_timestamp: The timestamp (in HCLK ticks) corresponding to
  34:Inc/phase_control_law.hpp ****      *        the vbus_voltage and current measurement.
  35:Inc/phase_control_law.hpp ****      */
  36:Inc/phase_control_law.hpp ****     virtual  ODriveIntf::MotorIntf::Error on_measurement(
  37:Inc/phase_control_law.hpp ****             std::optional<float> vbus_voltage,
  38:Inc/phase_control_law.hpp ****             std::optional<std::array<float, N_PHASES>> currents,
  39:Inc/phase_control_law.hpp ****             uint32_t input_timestamp) = 0;
  40:Inc/phase_control_law.hpp **** 
  41:Inc/phase_control_law.hpp ****     /**
  42:Inc/phase_control_law.hpp ****      * @brief Shall calculate the PWM timings for the specified target time.
  43:Inc/phase_control_law.hpp ****      *
  44:Inc/phase_control_law.hpp ****      * This function gets called in a high priority interrupt context and should
  45:Inc/phase_control_law.hpp ****      * run fast.
  46:Inc/phase_control_law.hpp ****      *
  47:Inc/phase_control_law.hpp ****      * Beware that this function can be called before a call to on_measurement().
  48:Inc/phase_control_law.hpp ****      * 
  49:Inc/phase_control_law.hpp ****      * @param output_timestamp: The timestamp (in HCLK ticks) corresponding to
  50:Inc/phase_control_law.hpp ****      *        the middle of the time span during which the output will be
  51:Inc/phase_control_law.hpp ****      *        active.
  52:Inc/phase_control_law.hpp ****      * @param pwm_timings: This array referenced by this argument shall be
  53:Inc/phase_control_law.hpp ****      *        filled with the desired PWM timings. Each item corresponds to one
  54:Inc/phase_control_law.hpp ****      *        phase and must lie in [0.0f, 1.0f].
  55:Inc/phase_control_law.hpp ****      *        The function is not required to return valid PWM timings in case
  56:Inc/phase_control_law.hpp ****      *        of an error.
  57:Inc/phase_control_law.hpp ****      * @param ibus: The variable pointed to by this argument is set to the
  58:Inc/phase_control_law.hpp ****      *        estimated DC current around the output timestamp when the desired
  59:Inc/phase_control_law.hpp ****      *        PWM timings get applied.
  60:Inc/phase_control_law.hpp ****      *        The function is not required to return a valid I_bus estimate in
  61:Inc/phase_control_law.hpp ****      *        case of an error.
  62:Inc/phase_control_law.hpp ****      * 
  63:Inc/phase_control_law.hpp ****      * @returns: An error code or ERROR_NONE. If the function returns an error
  64:Inc/phase_control_law.hpp ****      *           the motor gets disarmed with one exception: If the controller
ARM GAS  /tmp/ccvzGucR.s 			page 56


  65:Inc/phase_control_law.hpp ****      *           never returned valid PWM timings since it became active then it
  66:Inc/phase_control_law.hpp ****      *           is allowed to return ERROR_CONTROLLER_INITIALIZING without
  67:Inc/phase_control_law.hpp ****      *           triggering a motor disarm. In this phase the PWMs will not yet
  68:Inc/phase_control_law.hpp ****      *           be truly active.
  69:Inc/phase_control_law.hpp ****      */
  70:Inc/phase_control_law.hpp ****     virtual  ODriveIntf::MotorIntf::Error get_output(
  71:Inc/phase_control_law.hpp ****             uint32_t output_timestamp,
  72:Inc/phase_control_law.hpp ****             float (&pwm_timings)[N_PHASES],
  73:Inc/phase_control_law.hpp ****             std::optional<float>* ibus) = 0;
  74:Inc/phase_control_law.hpp **** };
  75:Inc/phase_control_law.hpp **** 
  76:Inc/phase_control_law.hpp **** class AlphaBetaFrameController : public PhaseControlLaw<3> {
 1127              		.loc 8 76 7 view .LVU255
 1128              	.LBB2090:
 1129              	.LBI2090:
  11:Inc/phase_control_law.hpp **** public:
 1130              		.loc 8 11 7 view .LVU256
  11:Inc/phase_control_law.hpp **** public:
 1131              		.loc 8 11 7 is_stmt 0 view .LVU257
 1132              	.LBE2090:
 1133              	.LBE2089:
 1134              	.LBB2091:
 1135              	.LBI2091:
 1136              		.file 9 "Inc/component.hpp"
   1:Inc/component.hpp **** #ifndef __COMPONENT_HPP
   2:Inc/component.hpp **** #define __COMPONENT_HPP
   3:Inc/component.hpp **** 
   4:Inc/component.hpp **** #include <stdint.h>
   5:Inc/component.hpp **** #include <optional>
   6:Inc/component.hpp **** #include <variant>
   7:Inc/component.hpp **** #include "user_int.hpp"
   8:Inc/component.hpp **** class ComponentBase {
 1137              		.loc 9 8 7 is_stmt 1 view .LVU258
 1138              		.loc 9 8 7 is_stmt 0 view .LVU259
 1139              	.LBE2091:
 1140              		.loc 7 16 7 view .LVU260
 1141 0172 C4F8FC32 		str	r3, [r4, #764]
 1142 0176 2033     		adds	r3, r3, #32
 1143 0178 C4F80033 		str	r3, [r4, #768]
 1144              	.LVL52:
 1145              	.LBB2092:
 1146              	.LBI2092:
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1147              		.loc 2 691 17 is_stmt 1 view .LVU261
 1148              	.LBB2093:
 1149              	.LBI2093:
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1150              		.loc 2 603 17 view .LVU262
 1151              	.LBB2094:
 1152              	.LBI2094:
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 1153              		.loc 2 361 7 view .LVU263
 1154              	.LBB2095:
 1155              	.LBI2095:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 1156              		.loc 2 111 7 view .LVU264
 1157              	.LBB2096:
ARM GAS  /tmp/ccvzGucR.s 			page 57


 1158              	.LBI2096:
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1159              		.loc 2 200 14 view .LVU265
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1160              		.loc 2 200 14 is_stmt 0 view .LVU266
 1161              	.LBE2096:
 1162              	.LBE2095:
 1163              	.LBE2094:
 1164              	.LBE2093:
 1165              	.LBE2092:
 1166              		.loc 7 16 7 view .LVU267
 1167 017c C4F810A3 		str	r10, [r4, #784]	@ float
 1168 0180 84F81473 		strb	r7, [r4, #788]
 1169              	.LVL53:
 1170              	.LBB2097:
 1171              	.LBI2097:
   9:Inc/component.hpp **** public:
  10:Inc/component.hpp ****     /**
  11:Inc/component.hpp ****      * @brief Shall run the update action of this component.
  12:Inc/component.hpp ****      * 
  13:Inc/component.hpp ****      * This function gets called in a low priority interrupt context and is
  14:Inc/component.hpp ****      * allowed to call CMSIS functions.
  15:Inc/component.hpp ****      * 
  16:Inc/component.hpp ****      * @param timestamp: The timestamp (in HCLK ticks) for which this update
  17:Inc/component.hpp ****      * is run.
  18:Inc/component.hpp ****      */
  19:Inc/component.hpp ****     virtual void update(uint32_t timestamp) = 0;
  20:Inc/component.hpp **** };
  21:Inc/component.hpp **** 
  22:Inc/component.hpp **** 
  23:Inc/component.hpp **** template<typename T>
  24:Inc/component.hpp **** class InputPort;
  25:Inc/component.hpp **** 
  26:Inc/component.hpp **** /**
  27:Inc/component.hpp ****  * @brief An output port stores a value for consumption by a connecting input
  28:Inc/component.hpp ****  * port.
  29:Inc/component.hpp ****  * 
  30:Inc/component.hpp ****  * Output ports are supposed to be reset at the beginning of a control loop
  31:Inc/component.hpp ****  * iteration. This ensures that connecting input ports don't use an outdated
  32:Inc/component.hpp ****  * value and, more importantly, ensures proper handling if the producer of the
  33:Inc/component.hpp ****  * value is incapable of producing the value for any reason.
  34:Inc/component.hpp ****  * 
  35:Inc/component.hpp ****  * Member functions of this class are not thread-safe unless noted otherwise.
  36:Inc/component.hpp ****  */
  37:Inc/component.hpp **** template<typename T>
  38:Inc/component.hpp **** class OutputPort {
  39:Inc/component.hpp **** public:
  40:Inc/component.hpp ****     /**
  41:Inc/component.hpp ****      * @brief Initializes the output port with the specified value.
  42:Inc/component.hpp ****      * 
  43:Inc/component.hpp ****      * An initialization value is required for any() to work properly.
  44:Inc/component.hpp ****      * present() and previous() cannot be used to fetch the
  45:Inc/component.hpp ****      * initialization value.
  46:Inc/component.hpp ****      */
  47:Inc/component.hpp ****     OutputPort(T val) : content_(val) {}
  48:Inc/component.hpp ****     
  49:Inc/component.hpp ****     /**
ARM GAS  /tmp/ccvzGucR.s 			page 58


  50:Inc/component.hpp ****      * @brief Updates the underlying value of this output port.
  51:Inc/component.hpp ****      */
  52:Inc/component.hpp ****     void operator=(T value) {
  53:Inc/component.hpp ****         content_ = value;
  54:Inc/component.hpp ****         age_ = 0;
  55:Inc/component.hpp ****     }
  56:Inc/component.hpp **** 
  57:Inc/component.hpp ****     /**
  58:Inc/component.hpp ****      * @brief Marks the contained value as outdated. The value is not actually
  59:Inc/component.hpp ****      * deleted and can still be accessed through some of the member functions
  60:Inc/component.hpp ****      * of this class.
  61:Inc/component.hpp ****      */
  62:Inc/component.hpp ****     void reset() {
  63:Inc/component.hpp ****         // This will eventually overflow to 0 so present() could
  64:Inc/component.hpp ****         // theoretically return a very old value however it is very likely that
  65:Inc/component.hpp ****         // the motor will be long disarmed by then.
  66:Inc/component.hpp ****         age_++;
  67:Inc/component.hpp ****     }
  68:Inc/component.hpp **** 
  69:Inc/component.hpp ****     /**
  70:Inc/component.hpp ****      * @brief Returns the value from this control loop iteration or std::nullopt
  71:Inc/component.hpp ****      * if the value was not yet set during this control loop iteration.
  72:Inc/component.hpp ****      */
  73:Inc/component.hpp ****     std::optional<T> present() {
  74:Inc/component.hpp ****         if (age_ == 0) {
  75:Inc/component.hpp ****             return content_;
  76:Inc/component.hpp ****         } else {
  77:Inc/component.hpp ****             return std::nullopt;
  78:Inc/component.hpp ****         }
  79:Inc/component.hpp ****     }
  80:Inc/component.hpp **** 
  81:Inc/component.hpp ****     /**
  82:Inc/component.hpp ****      * @brief Returns the value from exactly the previous control loop iteration.
  83:Inc/component.hpp ****      * 
  84:Inc/component.hpp ****      * If during the last iteration no value was set or the value was already
  85:Inc/component.hpp ****      * overwritten during this control loop iteration then this function returns
  86:Inc/component.hpp ****      * std::nullopt.
  87:Inc/component.hpp ****      */
  88:Inc/component.hpp ****     std::optional<T> previous() {
  89:Inc/component.hpp ****         if (age_ == 1) {
  90:Inc/component.hpp ****             return content_;
  91:Inc/component.hpp ****         } else {
  92:Inc/component.hpp ****             return std::nullopt;
  93:Inc/component.hpp ****         }
  94:Inc/component.hpp ****     }
  95:Inc/component.hpp **** 
  96:Inc/component.hpp ****     /**
  97:Inc/component.hpp ****      * @brief Returns the value contained in this output port with disregard of
  98:Inc/component.hpp ****      * when the value was set.
  99:Inc/component.hpp ****      * 
 100:Inc/component.hpp ****      * This function is thread-safe if load/store operations of T are atomic.
 101:Inc/component.hpp ****      */
 102:Inc/component.hpp ****     std::optional<T> any() {
 103:Inc/component.hpp ****         return content_;
 104:Inc/component.hpp ****     }
 105:Inc/component.hpp ****     
 106:Inc/component.hpp **** private:
ARM GAS  /tmp/ccvzGucR.s 			page 59


 107:Inc/component.hpp ****     uint32_t age_ = 2; // Age in number of control loop iterations
 108:Inc/component.hpp ****     T content_;
 109:Inc/component.hpp **** };
 110:Inc/component.hpp **** 
 111:Inc/component.hpp **** /**
 112:Inc/component.hpp ****  * @brief An input port provides a value from the source to which it's configured.
 113:Inc/component.hpp ****  * 
 114:Inc/component.hpp ****  * The source can be one of:
 115:Inc/component.hpp ****  *  - an internally stored value
 116:Inc/component.hpp ****  *  - an externally stored value (referenced by a pointer)
 117:Inc/component.hpp ****  *  - an external OutputPort (referenced by a pointer)
 118:Inc/component.hpp ****  *  - none (all queries will return std::nullopt)
 119:Inc/component.hpp ****  * 
 120:Inc/component.hpp ****  * Member functions of this class are not thread-safe unless otherwise noted.
 121:Inc/component.hpp ****  */
 122:Inc/component.hpp **** template<typename T>
 123:Inc/component.hpp **** class InputPort {
 1172              		.loc 9 123 7 is_stmt 1 view .LVU268
 1173              	.LBB2098:
 1174              	.LBI2098:
 1175              		.file 10 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // <variant> -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // Copyright (C) 2016-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** /** @file variant
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****  *  This is the <variant> C++ Library header.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****  */
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #ifndef _GLIBCXX_VARIANT
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define _GLIBCXX_VARIANT 1
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #pragma GCC system_header
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #if __cplusplus >= 201703L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <type_traits>
ARM GAS  /tmp/ccvzGucR.s 			page 60


  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <utility>
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/enable_special_members.h>
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/functexcept.h>
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/move.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/functional_hash.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/invoke.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <ext/aligned_buffer.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/parse_numbers.h>
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/stl_iterator_base_types.h>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/stl_iterator_base_funcs.h>
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/stl_construct.h>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #if __cplusplus > 201703L
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** # include <compare>
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #endif
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __detail
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __variant
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Nth_type;
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _First, typename... _Rest>
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Nth_type<_Np, _First, _Rest...>
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _Nth_type<_Np-1, _Rest...> { };
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _First, typename... _Rest>
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Nth_type<0, _First, _Rest...>
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = _First; };
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __variant
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __detail
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define __cpp_lib_variant 201606L
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types> class tuple;
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types> class variant;
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename> struct hash;
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size;
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<const _Variant> : variant_size<_Variant> {};
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<volatile _Variant> : variant_size<_Variant> {};
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<const volatile _Variant> : variant_size<_Variant> {};
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<variant<_Types...>>
ARM GAS  /tmp/ccvzGucR.s 			page 61


  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : std::integral_constant<size_t, sizeof...(_Types)> {};
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr size_t variant_size_v = variant_size<_Variant>::value;
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative;
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _First, typename... _Rest>
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, variant<_First, _Rest...>>
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : variant_alternative<_Np-1, variant<_Rest...>> {};
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _First, typename... _Rest>
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<0, variant<_First, _Rest...>>
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = _First; };
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using variant_alternative_t =
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       typename variant_alternative<_Np, _Variant>::type;
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, const _Variant>
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = add_const_t<variant_alternative_t<_Np, _Variant>>; };
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, volatile _Variant>
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = add_volatile_t<variant_alternative_t<_Np, _Variant>>; };
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, const volatile _Variant>
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = add_cv_t<variant_alternative_t<_Np, _Variant>>; };
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   inline constexpr size_t variant_npos = -1;
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(variant<_Types...>&);
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&&
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(variant<_Types...>&&);
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>> const&
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(const variant<_Types...>&);
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>> const&&
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(const variant<_Types...>&&);
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants>
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __do_visit(_Visitor&& __visitor, _Variants&&... __variants);
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename... _Types, typename _Tp>
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     decltype(auto)
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __variant_cast(_Tp&& __rhs)
ARM GAS  /tmp/ccvzGucR.s 			page 62


 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if constexpr (is_lvalue_reference_v<_Tp>)
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (is_const_v<remove_reference_t<_Tp>>)
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return static_cast<const variant<_Types...>&>(__rhs);
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return static_cast<variant<_Types...>&>(__rhs);
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       else
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         return static_cast<variant<_Types...>&&>(__rhs);
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __detail
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __variant
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns the first appearence of _Tp in _Types.
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns sizeof...(_Types) if _Tp is not in _Types.
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __index_of : std::integral_constant<size_t, 0> {};
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr size_t __index_of_v = __index_of<_Tp, _Types...>::value;
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _First, typename... _Rest>
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __index_of<_Tp, _First, _Rest...> :
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       std::integral_constant<size_t, is_same_v<_Tp, _First>
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	? 0 : __index_of_v<_Tp, _Rest...> + 1> {};
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // used for raw visitation
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   struct __variant_cookie {};
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // used for raw visitation with indices passed in
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   struct __variant_idx_cookie { using type = __variant_idx_cookie; };
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Used to enable deduction (and same-type checking) for std::visit:
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename> struct __deduce_visit_result { };
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Visit variants that might be valueless.
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Visitor, typename... _Variants>
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr void
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __raw_visit(_Visitor&& __visitor, _Variants&&... __variants)
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       std::__do_visit<__variant_cookie>(std::forward<_Visitor>(__visitor),
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				        std::forward<_Variants>(__variants)...);
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Visit variants that might be valueless, passing indices to the visitor.
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Visitor, typename... _Variants>
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr void
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __raw_idx_visit(_Visitor&& __visitor, _Variants&&... __variants)
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       std::__do_visit<__variant_idx_cookie>(std::forward<_Visitor>(__visitor),
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  std::forward<_Variants>(__variants)...);
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // _Uninitialized<T> is guaranteed to be a trivially destructible type,
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // even if T is not.
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Type, bool = std::is_trivially_destructible_v<_Type>>
ARM GAS  /tmp/ccvzGucR.s 			page 63


 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Uninitialized;
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Type>
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Uninitialized<_Type, true>
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr const _Type& _M_get() const & noexcept
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr _Type& _M_get() & noexcept
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr const _Type&& _M_get() const && noexcept
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(_M_storage); }
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr _Type&& _M_get() && noexcept
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(_M_storage); }
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Type _M_storage;
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Type>
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Uninitialized<_Type, false>
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  ::new ((void*)std::addressof(_M_storage))
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    _Type(std::forward<_Args>(__args)...);
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       const _Type& _M_get() const & noexcept
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return *_M_storage._M_ptr(); }
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Type& _M_get() & noexcept
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return *_M_storage._M_ptr(); }
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       const _Type&& _M_get() const && noexcept
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(*_M_storage._M_ptr()); }
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Type&& _M_get() && noexcept
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(*_M_storage._M_ptr()); }
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __gnu_cxx::__aligned_membuf<_Type> _M_storage;
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Union>
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __get(in_place_index_t<0>, _Union&& __u) noexcept
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccvzGucR.s 			page 64


 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Union>
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __variant::__get(in_place_index<_Np-1>,
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns the typed storage for __v.
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __get(_Variant&& __v) noexcept
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __variant::__get(std::in_place_index<_Np>,
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Variant>(__v)._M_u);
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Traits
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_default_ctor =
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  is_default_constructible_v<typename _Nth_type<0, _Types...>::type>;
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_copy_ctor =
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_copy_constructible_v<_Types> && ...);
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_move_ctor =
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_move_constructible_v<_Types> && ...);
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_copy_assign =
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_copy_ctor
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_copy_assignable_v<_Types> && ...);
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_move_assign =
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_move_ctor
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_move_assignable_v<_Types> && ...);
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_dtor =
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_trivially_destructible_v<_Types> && ...);
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_copy_ctor =
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_trivially_copy_constructible_v<_Types> && ...);
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_move_ctor =
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_trivially_move_constructible_v<_Types> && ...);
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_copy_assign =
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_trivial_dtor && _S_trivial_copy_ctor
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_trivially_copy_assignable_v<_Types> && ...);
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_move_assign =
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_trivial_dtor && _S_trivial_move_ctor
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_trivially_move_assignable_v<_Types> && ...);
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // The following nothrow traits are for non-trivial SMFs. Trivial SMFs
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // are always nothrow.
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_default_ctor =
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  is_nothrow_default_constructible_v<
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      typename _Nth_type<0, _Types...>::type>;
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_copy_ctor = false;
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_move_ctor =
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_nothrow_move_constructible_v<_Types> && ...);
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_copy_assign = false;
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_move_assign =
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_nothrow_move_ctor
ARM GAS  /tmp/ccvzGucR.s 			page 65


 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_nothrow_move_assignable_v<_Types> && ...);
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Defines members and ctors.
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     union _Variadic_union { };
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _First, typename... _Rest>
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     union _Variadic_union<_First, _Rest...>
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr _Variadic_union() : _M_rest() { }
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Uninitialized<_First> _M_first;
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variadic_union<_Rest...> _M_rest;
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // _Never_valueless_alt is true for variant alternatives that can
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // always be placed in a variant without it becoming valueless.
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // For suitably-small, trivially copyable types we can create temporaries
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // on the stack and then memcpy them into place.
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp>
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Never_valueless_alt
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : __and_<bool_constant<sizeof(_Tp) <= 256>, is_trivially_copyable<_Tp>>
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { };
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Specialize _Never_valueless_alt for other types which have a
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // non-throwing and cheap move construction and move assignment operator,
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // so that emplacing the type will provide the strong exception-safety
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // guarantee, by creating and moving a temporary.
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Whether _Never_valueless_alt<T> is true or not affects the ABI of a
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // variant using that alternative, so we can't change the value later!
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // True if every alternative in _Types... can be emplaced in a variant
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // without it becoming valueless. If this is true, variant<_Types...>
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // can never be valueless, which enables some minor optimizations.
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename... _Types>
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr bool __never_valueless()
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return _Traits<_Types...>::_S_move_assign
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	&& (_Never_valueless_alt<_Types>::value && ...);
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Defines index and the dtor, possibly trivial.
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool __trivially_destructible, typename... _Types>
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_storage;
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccvzGucR.s 			page 66


 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename... _Types>
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using __select_index =
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       typename __select_int::_Select_int_base<sizeof...(_Types),
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					      unsigned char,
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					      unsigned short>::type::value_type;
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_storage<false, _Types...>
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_storage()
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       : _M_index(static_cast<__index_type>(variant_npos))
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { }
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_index{_Np}
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void _M_reset()
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if (!_M_valid()) [[unlikely]]
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return;
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::__do_visit<void>([](auto&& __this_mem) mutable
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::_Destroy(std::__addressof(__this_mem));
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __variant_cast<_Types...>(*this));
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_index = static_cast<__index_type>(variant_npos);
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ~_Variant_storage()
 414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { _M_reset(); }
 415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void*
 417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_storage() const noexcept
 418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return const_cast<void*>(static_cast<const void*>(
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::addressof(_M_u)));
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr bool
 424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_valid() const noexcept
 425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (__variant::__never_valueless<_Types...>())
 427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return true;
 428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return this->_M_index != __index_type(variant_npos);
 429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variadic_union<_Types...> _M_u;
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using __index_type = __select_index<_Types...>;
 433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __index_type _M_index;
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccvzGucR.s 			page 67


 436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_storage<true, _Types...>
 438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr
 440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_storage()
 441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       : _M_index(static_cast<__index_type>(variant_npos))
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { }
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_index{_Np}
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void _M_reset() noexcept
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { _M_index = static_cast<__index_type>(variant_npos); }
 453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void*
 455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_storage() const noexcept
 456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return const_cast<void*>(static_cast<const void*>(
 458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::addressof(_M_u)));
 459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr bool
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_valid() const noexcept
 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (__variant::__never_valueless<_Types...>())
 465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return true;
 466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return this->_M_index != static_cast<__index_type>(variant_npos);
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variadic_union<_Types...> _M_u;
 470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using __index_type = __select_index<_Types...>;
 471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __index_type _M_index;
 472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Variant_storage_alias =
 476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_storage<_Traits<_Types...>::_S_trivial_dtor, _Types...>;
 477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Up>
 479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void* __storage = std::addressof(__lhs._M_u);
 482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Type = remove_reference_t<decltype(__rhs_mem)>;
 483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if constexpr (!is_same_v<_Type, __variant_cookie>)
 484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         ::new (__storage)
 485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types, typename _Tp, typename _Up>
 489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void __variant_construct(_Tp&& __lhs, _Up&& __rhs)
 490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __lhs._M_index = __rhs._M_index;
 492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
ARM GAS  /tmp/ccvzGucR.s 			page 68


 493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(std::forward<_Tp>(__lhs),
 495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      std::forward<decltype(__rhs_mem)>(__rhs_mem));
 496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}, __variant_cast<_Types...>(std::forward<_Up>(__rhs)));
 497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The following are (Copy|Move) (ctor|assign) layers for forwarding
 500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // triviality and handling non-trivial SMF behaviors.
 501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
 504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Variant_storage_alias<_Types...>;
 506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base(const _Copy_ctor_base& __rhs)
 509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_copy_ctor)
 510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant_construct<_Types...>(*this, __rhs);
 512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base(_Copy_ctor_base&&) = default;
 515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base& operator=(const _Copy_ctor_base&) = default;
 516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base& operator=(_Copy_ctor_base&&) = default;
 517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_ctor_base<true, _Types...> : _Variant_storage_alias<_Types...>
 521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Variant_storage_alias<_Types...>;
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Copy_ctor_alias =
 528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Copy_ctor_base<_Traits<_Types...>::_S_trivial_copy_ctor, _Types...>;
 529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
 532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_ctor_alias<_Types...>;
 534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base(_Move_ctor_base&& __rhs)
 537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_move_ctor)
 538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant_construct<_Types...>(*this, std::move(__rhs));
 540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
 544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, std::forward<_Up>(__rhs));
 547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccvzGucR.s 			page 69


 550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, __rhs);
 555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base(const _Move_ctor_base&) = default;
 559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base& operator=(const _Move_ctor_base&) = default;
 560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base& operator=(_Move_ctor_base&&) = default;
 561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_ctor_base<true, _Types...> : _Copy_ctor_alias<_Types...>
 565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_ctor_alias<_Types...>;
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
 571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, std::forward<_Up>(__rhs));
 574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, __rhs);
 582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Move_ctor_alias =
 588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Move_ctor_base<_Traits<_Types...>::_S_trivial_move_ctor, _Types...>;
 589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_assign_base : _Move_ctor_alias<_Types...>
 592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Move_ctor_alias<_Types...>;
 594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base&
 597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       operator=(const _Copy_assign_base& __rhs)
 598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_copy_assign)
 599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant::__raw_idx_visit(
 601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
 604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
 605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (this->_M_index == __rhs_index)
 606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
ARM GAS  /tmp/ccvzGucR.s 			page 70


 607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		else
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
 609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    using __rhs_type = __remove_cvref_t<decltype(__rhs_mem)>;
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    if constexpr (is_nothrow_copy_constructible_v<__rhs_type>
 611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			|| !is_nothrow_move_constructible_v<__rhs_type>)
 612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // The standard says this->emplace<__rhs_type>(__rhs_mem)
 613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // should be used here, but _M_destructive_copy is
 614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // equivalent in this case. Either copy construction
 615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // doesn't throw, so _M_destructive_copy gives strong
 616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // exception safety guarantee, or both copy construction
 617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // and move construction can throw, so emplace only gives
 618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // basic exception safety anyway.
 619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      this->_M_destructive_copy(__rhs_index, __rhs_mem);
 620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    else
 621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      __variant_cast<_Types...>(*this)
 622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			= variant<_Types...>(std::in_place_index<__rhs_index>,
 623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					     __rhs_mem);
 624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
 625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
 626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    else
 627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
 628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __variant_cast<_Types...>(__rhs));
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return *this;
 630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base(const _Copy_assign_base&) = default;
 633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base(_Copy_assign_base&&) = default;
 634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base& operator=(_Copy_assign_base&&) = default;
 635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_assign_base<true, _Types...> : _Move_ctor_alias<_Types...>
 639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Move_ctor_alias<_Types...>;
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Copy_assign_alias =
 646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base<_Traits<_Types...>::_S_trivial_copy_assign, _Types...>;
 647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_assign_base : _Copy_assign_alias<_Types...>
 650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_assign_alias<_Types...>;
 652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base&
 655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       operator=(_Move_assign_base&& __rhs)
 656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_move_assign)
 657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant::__raw_idx_visit(
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
 661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
 662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
 663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (this->_M_index == __rhs_index)
ARM GAS  /tmp/ccvzGucR.s 			page 71


 664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		else
 666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant_cast<_Types...>(*this)
 667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
 669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    else
 670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
 671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __variant_cast<_Types...>(__rhs));
 672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return *this;
 673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base(const _Move_assign_base&) = default;
 676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base(_Move_assign_base&&) = default;
 677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base& operator=(const _Move_assign_base&) = default;
 678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_assign_base<true, _Types...> : _Copy_assign_alias<_Types...>
 682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_assign_alias<_Types...>;
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Move_assign_alias =
 689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base<_Traits<_Types...>::_S_trivial_move_assign, _Types...>;
 690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_base : _Move_assign_alias<_Types...>
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Move_assign_alias<_Types...>;
 695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base()
 698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       : _Variant_base(in_place_index<0>) { }
 700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 706:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 707:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base(const _Variant_base&) = default;
 708:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base(_Variant_base&&) = default;
 709:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base& operator=(const _Variant_base&) = default;
 710:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base& operator=(_Variant_base&&) = default;
 711:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 712:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 713:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // For how many times does _Tp appear in _Tuple?
 714:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Tuple>
 715:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __tuple_count;
 716:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 717:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Tuple>
 718:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr size_t __tuple_count_v =
 719:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __tuple_count<_Tp, _Tuple>::value;
 720:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccvzGucR.s 			page 72


 721:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 722:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __tuple_count<_Tp, tuple<_Types...>>
 723:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : integral_constant<size_t, 0> { };
 724:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 725:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _First, typename... _Rest>
 726:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __tuple_count<_Tp, tuple<_First, _Rest...>>
 727:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : integral_constant<
 728:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	size_t,
 729:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__tuple_count_v<_Tp, tuple<_Rest...>> + is_same_v<_Tp, _First>> { };
 730:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 731:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // TODO: Reuse this in <tuple> ?
 732:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 733:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr bool __exactly_once =
 734:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __tuple_count_v<_Tp, tuple<_Types...>> == 1;
 735:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 736:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Helper used to check for valid conversions that don't involve narrowing.
 737:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Ti> struct _Arr { _Ti _M_x[1]; };
 738:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 739:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Build an imaginary function FUN(Ti) for each alternative type Ti
 740:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti,
 741:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   bool _Ti_is_cv_bool = is_same_v<remove_cv_t<_Ti>, bool>,
 742:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename = void>
 743:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUN
 744:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 745:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // This function means 'using _Build_FUN<I, T, Ti>::_S_fun;' is valid,
 746:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // but only static functions will be considered in the call below.
 747:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void _S_fun();
 748:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 749:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 750:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // ... for which Ti x[] = {std::forward<T>(t)}; is well-formed,
 751:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti>
 752:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUN<_Ind, _Tp, _Ti, false,
 753:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      void_t<decltype(_Arr<_Ti>{{std::declval<_Tp>()}})>>
 754:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 755:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // This is the FUN function for type _Ti, with index _Ind
 756:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static integral_constant<size_t, _Ind> _S_fun(_Ti);
 757:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 758:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 759:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // ... and if Ti is cv bool, remove_cvref_t<T> is bool.
 760:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti>
 761:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUN<_Ind, _Tp, _Ti, true,
 762:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      enable_if_t<is_same_v<__remove_cvref_t<_Tp>, bool>>>
 763:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 764:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // This is the FUN function for when _Ti is cv bool, with index _Ind
 765:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static integral_constant<size_t, _Ind> _S_fun(_Ti);
 766:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 767:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 768:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant,
 769:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename = make_index_sequence<variant_size_v<_Variant>>>
 770:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUNs;
 771:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 772:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Ti, size_t... _Ind>
 773:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUNs<_Tp, variant<_Ti...>, index_sequence<_Ind...>>
 774:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _Build_FUN<_Ind, _Tp, _Ti>...
 775:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Build_FUN<_Ind, _Tp, _Ti>::_S_fun...;
 777:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
ARM GAS  /tmp/ccvzGucR.s 			page 73


 778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The index j of the overload FUN(Tj) selected by overload resolution
 780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // for FUN(std::forward<_Tp>(t))
 781:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant>
 782:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _FUN_type
 783:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       = decltype(_Build_FUNs<_Tp, _Variant>::_S_fun(std::declval<_Tp>()));
 784:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 785:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The index selected for FUN(std::forward<T>(t)), or variant_npos if none.
 786:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant, typename = void>
 787:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __accepted_index
 788:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : integral_constant<size_t, variant_npos>
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { };
 790:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant>
 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __accepted_index<_Tp, _Variant, void_t<_FUN_type<_Tp, _Variant>>>
 793:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _FUN_type<_Tp, _Variant>
 794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { };
 795:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns the raw storage for __v.
 797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
 798:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void* __get_storage(_Variant&& __v) noexcept
 799:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return __v._M_storage(); }
 800:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 801:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename _Maybe_variant_cookie, typename _Variant>
 802:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Extra_visit_slot_needed
 803:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 804:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename> struct _Variant_never_valueless;
 805:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 806:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Types>
 807:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct _Variant_never_valueless<variant<_Types...>>
 808:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: bool_constant<__variant::__never_valueless<_Types...>()> {};
 809:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 810:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool value =
 811:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	(is_same_v<_Maybe_variant_cookie, __variant_cookie>
 812:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	 || is_same_v<_Maybe_variant_cookie, __variant_idx_cookie>)
 813:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	&& !_Variant_never_valueless<__remove_cvref_t<_Variant>>::value;
 814:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 815:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 816:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Used for storing a multi-dimensional vtable.
 817:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, size_t... _Dimensions>
 818:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Multi_array;
 819:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 820:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Partial specialization with rank zero, stores a single _Tp element.
 821:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp>
 822:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Multi_array<_Tp>
 823:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 824:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename>
 825:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result
 826:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 827:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = _Tp; };
 828:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 829:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Args>
 830:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<const void(*)(_Args...)>
 831:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 832:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = void(*)(_Args...); };
 833:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 834:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Args>
ARM GAS  /tmp/ccvzGucR.s 			page 74


 835:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<__variant_cookie(*)(_Args...)>
 836:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 837:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = void(*)(_Args...); };
 838:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 839:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Args>
 840:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<__variant_idx_cookie(*)(_Args...)>
 841:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 842:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = void(*)(_Args...); };
 843:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 844:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename _Res, typename... _Args>
 845:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<__deduce_visit_result<_Res>(*)(_Args...)>
 846:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: true_type
 847:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = _Res(*)(_Args...); };
 848:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 849:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using __result_is_deduced = __untag_result<_Tp>;
 850:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 851:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr const typename __untag_result<_Tp>::element_type&
 852:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_access() const
 853:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_data; }
 854:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 855:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       typename __untag_result<_Tp>::element_type _M_data;
 856:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 857:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 858:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Partial specialization with rank >= 1.
 859:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Ret,
 860:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename _Visitor,
 861:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename... _Variants,
 862:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   size_t __first, size_t... __rest>
 863:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Multi_array<_Ret(*)(_Visitor, _Variants...), __first, __rest...>
 864:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 865:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr size_t __index =
 866:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	sizeof...(_Variants) - sizeof...(__rest) - 1;
 867:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 868:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Variant = typename _Nth_type<__index, _Variants...>::type;
 869:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 870:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr int __do_cookie =
 871:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Extra_visit_slot_needed<_Ret, _Variant>::value ? 1 : 0;
 872:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 873:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Tp = _Ret(*)(_Visitor, _Variants...);
 874:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 875:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 876:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr decltype(auto)
 877:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_access(size_t __first_index, _Args... __rest_indices) const
 878:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 879:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return _M_arr[__first_index + __do_cookie]
 880:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    ._M_access(__rest_indices...);
 881:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 882:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 883:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Multi_array<_Tp, __rest...> _M_arr[__first + __do_cookie];
 884:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 885:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 886:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Creates a multi-dimensional vtable recursively.
 887:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //
 888:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // For example,
 889:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // visit([](auto, auto){},
 890:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //       variant<int, char>(),  // typedef'ed as V1
 891:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //       variant<float, double, long double>())  // typedef'ed as V2
ARM GAS  /tmp/ccvzGucR.s 			page 75


 892:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // will trigger instantiations of:
 893:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 2, 3>,
 894:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                   tuple<V1&&, V2&&>, std::index_sequence<>>
 895:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //   __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 3>,
 896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                     tuple<V1&&, V2&&>, std::index_sequence<0>>
 897:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 898:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 0>>
 899:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 900:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 1>>
 901:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 902:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 2>>
 903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //   __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 3>,
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                     tuple<V1&&, V2&&>, std::index_sequence<1>>
 905:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 906:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 0>>
 907:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 1>>
 909:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 910:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 2>>
 911:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The returned multi-dimensional vtable can be fast accessed by the visitor
 912:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // using index calculation.
 913:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Array_type, typename _Index_seq>
 914:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable_impl;
 915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 916:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Defines the _S_apply() member that returns a _Multi_array populated
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // with function pointers that perform the visitation expressions e(m)
 918:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // for each valid pack of indexes into the variant types _Variants.
 919:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //
 920:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // This partial specialization builds up the index sequences by recursively
 921:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // calling _S_apply() on the next specialization of __gen_vtable_impl.
 922:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The base case of the recursion defines the actual function pointers.
 923:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, size_t... __dimensions,
 924:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename... _Variants, size_t... __indices>
 925:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable_impl<
 926:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Multi_array<_Result_type (*)(_Visitor, _Variants...), __dimensions...>,
 927:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::index_sequence<__indices...>>
 928:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 929:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Next =
 930:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  remove_reference_t<typename _Nth_type<sizeof...(__indices),
 931:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			     _Variants...>::type>;
 932:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Array_type =
 933:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...),
 934:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		       __dimensions...>;
 935:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 936:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr _Array_type
 937:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _S_apply()
 938:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 939:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Array_type __vtable{};
 940:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_S_apply_all_alts(
 941:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __vtable, make_index_sequence<variant_size_v<_Next>>());
 942:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return __vtable;
 943:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 944:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 945:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t... __var_indices>
 946:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr void
 947:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_S_apply_all_alts(_Array_type& __vtable,
 948:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			  std::index_sequence<__var_indices...>)
ARM GAS  /tmp/ccvzGucR.s 			page 76


 949:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 950:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (_Extra_visit_slot_needed<_Result_type, _Next>::value)
 951:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    (_S_apply_single_alt<true, __var_indices>(
 952:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __vtable._M_arr[__var_indices + 1],
 953:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      &(__vtable._M_arr[0])), ...);
 954:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 955:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    (_S_apply_single_alt<false, __var_indices>(
 956:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __vtable._M_arr[__var_indices]), ...);
 957:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 958:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 959:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<bool __do_cookie, size_t __index, typename _Tp>
 960:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr void
 961:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_S_apply_single_alt(_Tp& __element, _Tp* __cookie_element = nullptr)
 962:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 963:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__do_cookie)
 964:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
 965:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element = __gen_vtable_impl<
 966:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Tp,
 967:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::index_sequence<__indices..., __index>>::_S_apply();
 968:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      *__cookie_element = __gen_vtable_impl<
 969:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Tp,
 970:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::index_sequence<__indices..., variant_npos>>::_S_apply();
 971:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
 972:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 973:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
 974:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element = __gen_vtable_impl<
 975:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		remove_reference_t<decltype(__element)>,
 976:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::index_sequence<__indices..., __index>>::_S_apply();
 977:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
 978:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 979:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 980:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 981:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // This partial specialization is the base case for the recursion.
 982:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // It populates a _Multi_array element with the address of a function
 983:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // that invokes the visitor with the alternatives specified by __indices.
 984:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants,
 985:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   size_t... __indices>
 986:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable_impl<
 987:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Multi_array<_Result_type (*)(_Visitor, _Variants...)>,
 988:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		   std::index_sequence<__indices...>>
 989:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 990:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Array_type =
 991:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...)>;
 992:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 993:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t __index, typename _Variant>
 994:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr decltype(auto)
 995:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__element_by_index_or_cookie(_Variant&& __var) noexcept
 996:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 997:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__index != variant_npos)
 998:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 999:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1000:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return __variant_cookie{};
1001:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1002:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1003:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr decltype(auto)
1004:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
1005:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
ARM GAS  /tmp/ccvzGucR.s 			page 77


1006:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
1007:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // For raw visitation using indices, pass the indices to the visitor
1008:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // and discard the return value:
1009:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  std::__invoke(std::forward<_Visitor>(__visitor),
1010:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1011:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::forward<_Variants>(__vars))...,
1012:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      integral_constant<size_t, __indices>()...);
1013:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
1014:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // For raw visitation without indices, and discard the return value:
1015:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  std::__invoke(std::forward<_Visitor>(__visitor),
1016:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1017:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::forward<_Variants>(__vars))...);
1018:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (_Array_type::__result_is_deduced::value)
1019:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // For the usual std::visit case deduce the return value:
1020:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::__invoke(std::forward<_Visitor>(__visitor),
1021:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1022:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::forward<_Variants>(__vars))...);
1023:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else // for std::visit<R> use INVOKE<R>
1024:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::__invoke_r<_Result_type>(
1025:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      std::forward<_Visitor>(__visitor),
1026:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
1027:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
1028:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1029:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr auto
1030:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _S_apply()
1031:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _Array_type{&__visit_invoke}; }
1032:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
1033:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1034:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants>
1035:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable
1036:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1037:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Array_type =
1038:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...),
1039:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		       variant_size_v<remove_reference_t<_Variants>>...>;
1040:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1041:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr _Array_type _S_vtable
1042:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	= __gen_vtable_impl<_Array_type, std::index_sequence<>>::_S_apply();
1043:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
1044:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1045:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Tp>
1046:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Base_dedup : public _Tp { };
1047:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1048:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant, typename __indices>
1049:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_hash_base;
1050:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1051:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types, size_t... __indices>
1052:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_hash_base<variant<_Types...>,
1053:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::index_sequence<__indices...>>
1054:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _Base_dedup<__indices, __poison_hash<remove_const_t<_Types>>>... { };
1055:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1056:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __variant
1057:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __detail
1058:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1059:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant, typename... _Args>
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
1061:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __v._M_index = _Np;
ARM GAS  /tmp/ccvzGucR.s 			page 78


1063:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ::new ((void*)std::addressof(__storage))
1065:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
1066:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (std::forward<_Args>(__args)...);
1067:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1068:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1069:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1070:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr bool
1071:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     holds_alternative(const variant<_Types...>& __v) noexcept
1072:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1073:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1074:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1075:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
1076:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1077:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1078:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1079:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr _Tp& get(variant<_Types...>& __v)
1080:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1081:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1082:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1083:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1084:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
1085:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1086:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1087:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1088:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr _Tp&& get(variant<_Types...>&& __v)
1089:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1090:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1091:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1092:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1093:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1094:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::move(__v));
1095:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1096:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1097:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1098:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr const _Tp& get(const variant<_Types...>& __v)
1099:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
1104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr const _Tp&& get(const variant<_Types...>&& __v)
1108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::move(__v));
1114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
1117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr add_pointer_t<variant_alternative_t<_Np, variant<_Types...>>>
1118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(variant<_Types...>* __ptr) noexcept
1119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
ARM GAS  /tmp/ccvzGucR.s 			page 79


1120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
1121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(_Np < sizeof...(_Types),
1122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "The index must be in [0, number of alternatives)");
1123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
1124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if (__ptr && __ptr->index() == _Np)
1125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
1126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return nullptr;
1127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
1130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr
1131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     add_pointer_t<const variant_alternative_t<_Np, variant<_Types...>>>
1132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(const variant<_Types...>* __ptr) noexcept
1133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
1135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(_Np < sizeof...(_Types),
1136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "The index must be in [0, number of alternatives)");
1137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
1138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if (__ptr && __ptr->index() == _Np)
1139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
1140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return nullptr;
1141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr add_pointer_t<_Tp>
1145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(variant<_Types...>* __ptr) noexcept
1146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __ptr);
1152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr add_pointer_t<const _Tp>
1156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(const variant<_Types...>* __ptr) noexcept
1157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __ptr);
1163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   struct monostate { };
1166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP, __NAME) \
1168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types> \
1169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr bool operator __OP(const variant<_Types...>& __lhs, \
1170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				 const variant<_Types...>& __rhs) \
1171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { \
1172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       bool __ret = true; \
1173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __detail::__variant::__raw_idx_visit( \
1174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         [&__ret, &__lhs] (auto&& __rhs_mem, auto __rhs_index) mutable \
1175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         { \
1176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__rhs_index != variant_npos) \
ARM GAS  /tmp/ccvzGucR.s 			page 80


1177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    { \
1178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      if (__lhs.index() == __rhs_index) \
1179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	        { \
1180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  auto& __this_mem = std::get<__rhs_index>(__lhs);	\
1181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****                   __ret = __this_mem __OP __rhs_mem; \
1182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****                 } \
1183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      else \
1184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		__ret = (__lhs.index() + 1) __OP (__rhs_index + 1); \
1185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****             } \
1186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****           else \
1187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****             __ret = (__lhs.index() + 1) __OP (__rhs_index + 1); \
1188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}, __rhs); \
1189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __ret; \
1190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)
1193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)
1194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(==, equal)
1195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(!=, not_equal)
1196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(>=, greater_equal)
1197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(>, greater)
1198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #undef _VARIANT_RELATION_FUNCTION_TEMPLATE
1200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator==(monostate, monostate) noexcept { return true; }
1202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #ifdef __cpp_lib_three_way_comparison
1204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     requires (three_way_comparable<_Types> && ...)
1206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr
1207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     common_comparison_category_t<compare_three_way_result_t<_Types>...>
1208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     operator<=>(const variant<_Types...>& __v, const variant<_Types...>& __w)
1209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       common_comparison_category_t<compare_three_way_result_t<_Types>...> __ret
1211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	= strong_ordering::equal;
1212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __detail::__variant::__raw_idx_visit(
1214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	[&__ret, &__v] (auto&& __w_mem, auto __w_index) mutable
1215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__w_index != variant_npos)
1217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      if (__v.index() == __w_index)
1219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  auto& __this_mem = std::get<__w_index>(__v);
1221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __ret = __this_mem <=> __w_mem;
1222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  return;
1223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __ret = (__v.index() + 1) <=> (__w_index + 1);
1226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}, __w);
1227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __ret;
1228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr strong_ordering
1231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   operator<=>(monostate, monostate) noexcept { return strong_ordering::equal; }
1232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #else
1233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator!=(monostate, monostate) noexcept { return false; }
ARM GAS  /tmp/ccvzGucR.s 			page 81


1234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator<(monostate, monostate) noexcept { return false; }
1235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator>(monostate, monostate) noexcept { return false; }
1236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator<=(monostate, monostate) noexcept { return true; }
1237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator>=(monostate, monostate) noexcept { return true; }
1238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #endif
1239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Visitor, typename... _Variants>
1241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto) visit(_Visitor&&, _Variants&&...);
1242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline enable_if_t<(is_move_constructible_v<_Types> && ...)
1245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			&& (is_swappable_v<_Types> && ...)>
1246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     swap(variant<_Types...>& __lhs, variant<_Types...>& __rhs)
1247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     noexcept(noexcept(__lhs.swap(__rhs)))
1248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { __lhs.swap(__rhs); }
1249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     enable_if_t<!((is_move_constructible_v<_Types> && ...)
1252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		   && (is_swappable_v<_Types> && ...))>
1253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     swap(variant<_Types...>&, variant<_Types...>&) = delete;
1254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   class bad_variant_access : public exception
1256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   {
1257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   public:
1258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     bad_variant_access() noexcept { }
1259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     const char* what() const noexcept override
1261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return _M_reason; }
1262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   private:
1264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     bad_variant_access(const char* __reason) noexcept : _M_reason(__reason) { }
1265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     // Must point to a string with static storage duration:
1267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     const char* _M_reason = "bad variant access";
1268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     friend void __throw_bad_variant_access(const char* __what);
1270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   };
1271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Must only be called with a string literal
1273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   inline void
1274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   __throw_bad_variant_access(const char* __what)
1275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
1276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   inline void
1278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   __throw_bad_variant_access(bool __valueless)
1279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   {
1280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     if (__valueless) [[__unlikely__]]
1281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __throw_bad_variant_access("std::get: variant is valueless");
1282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     else
1283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __throw_bad_variant_access("std::get: wrong index for variant");
1284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   }
1285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     class variant
1288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : private __detail::__variant::_Variant_base<_Types...>,
1289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       private _Enable_default_constructor<
1290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_default_ctor,
ARM GAS  /tmp/ccvzGucR.s 			page 82


1291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  variant<_Types...>>,
1292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       private _Enable_copy_move<
1293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_copy_ctor,
1294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_copy_assign,
1295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_move_ctor,
1296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_move_assign,
1297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant<_Types...>>
1298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     private:
1300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _UTypes, typename _Tp>
1301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend decltype(auto) __variant_cast(_Tp&&);
1302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Variant, typename... _Args>
1303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend void __variant_construct_by_index(_Variant& __v,
1304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						 _Args&&... __args);
1305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(sizeof...(_Types) > 0,
1307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "variant must have at least one alternative");
1308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!(std::is_reference_v<_Types> || ...),
1309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "variant must have no reference alternative");
1310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!(std::is_void_v<_Types> || ...),
1311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "variant must have no void alternative");
1312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = __detail::__variant::_Variant_base<_Types...>;
1314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Default_ctor_enabler =
1315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Enable_default_constructor<
1316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __detail::__variant::_Traits<_Types...>::_S_default_ctor,
1317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    variant<_Types...>>;
1318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr bool __not_self
1321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  = !is_same_v<__remove_cvref_t<_Tp>, variant>;
1322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr bool
1325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__exactly_once = __detail::__variant::__exactly_once<_Tp, _Types...>;
1326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr size_t __accepted_index
1329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  = __detail::__variant::__accepted_index<_Tp, variant>::value;
1330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename = enable_if_t<(_Np < sizeof...(_Types))>>
1332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	using __to_type = variant_alternative_t<_Np, variant>;
1333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename = enable_if_t<__not_self<_Tp>>>
1335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	using __accepted_type = __to_type<__accepted_index<_Tp>>;
1336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr size_t __index_of =
1339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __detail::__variant::__index_of_v<_Tp, _Types...>;
1340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Traits = __detail::__variant::_Traits<_Types...>;
1342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __is_in_place_tag : false_type { };
1345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __is_in_place_tag<in_place_type_t<_Tp>> : true_type { };
1347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np>
ARM GAS  /tmp/ccvzGucR.s 			page 83


1348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __is_in_place_tag<in_place_index_t<_Np>> : true_type { };
1349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr bool __not_in_place_tag
1352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  = !__is_in_place_tag<__remove_cvref_t<_Tp>>::value;
1353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     public:
1355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant() = default;
 1176              		.loc 10 1355 7 view .LVU269
 1177              	.LBB2099:
 1178              	.LBI2099:
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 1179              		.loc 10 697 7 view .LVU270
 1180              	.LBB2100:
 1181              	.LBI2100:
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 1182              		.loc 10 703 2 view .LVU271
 1183              	.LBB2101:
 1184              	.LBI2101:
 652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 1185              		.loc 10 652 20 view .LVU272
 1186              	.LBB2102:
 1187              	.LBI2102:
 594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 1188              		.loc 10 594 20 view .LVU273
 1189              	.LBB2103:
 1190              	.LBI2103:
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 1191              		.loc 10 567 20 view .LVU274
 1192              	.LBB2104:
 1193              	.LBI2104:
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 1194              		.loc 10 523 20 view .LVU275
 1195              	.LBB2105:
 1196              	.LBI2105:
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 1197              		.loc 10 446 2 view .LVU276
 1198              	.LBB2106:
 1199              	.LBB2107:
 1200              	.LBI2107:
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 1201              		.loc 10 335 12 view .LVU277
 1202              	.LBB2108:
 1203              	.LBI2108:
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 1204              		.loc 10 215 2 view .LVU278
 1205              	.LBB2109:
 1206              	.LBI2109:
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(), second() { }
 1207              		.loc 5 232 26 view .LVU279
 1208              	.LBB2110:
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 1209              		.loc 5 233 25 is_stmt 0 view .LVU280
 1210 0184 C4F81863 		str	r6, [r4, #792]	@ float
 1211 0188 C4F81C63 		str	r6, [r4, #796]	@ float
 1212              	.LVL54:
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
ARM GAS  /tmp/ccvzGucR.s 			page 84


 1213              		.loc 5 233 25 view .LVU281
 1214              	.LBE2110:
 1215              	.LBE2109:
 1216              	.LBE2108:
 1217              	.LBE2107:
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1218              		.loc 10 448 14 view .LVU282
 1219 018c 84F82073 		strb	r7, [r4, #800]
 1220              	.LVL55:
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1221              		.loc 10 448 14 view .LVU283
 1222              	.LBE2106:
 1223              	.LBE2105:
 1224              	.LBE2104:
 1225              	.LBE2103:
 1226              	.LBE2102:
 1227              	.LBE2101:
 1228              	.LBE2100:
 1229              	.LBE2099:
 1230              	.LBE2098:
 1231              	.LBE2097:
 1232              	.LBB2111:
 1233              	.LBI2111:
 1234              		.loc 9 123 7 is_stmt 1 view .LVU284
 1235              	.LBB2112:
 1236              	.LBI2112:
 1237              		.loc 10 1355 7 view .LVU285
 1238              	.LBB2113:
 1239              	.LBI2113:
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 1240              		.loc 10 697 7 view .LVU286
 1241              	.LBB2114:
 1242              	.LBI2114:
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 1243              		.loc 10 703 2 view .LVU287
 1244              	.LBB2115:
 1245              	.LBI2115:
 652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 1246              		.loc 10 652 20 view .LVU288
 1247              	.LBB2116:
 1248              	.LBI2116:
 594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 1249              		.loc 10 594 20 view .LVU289
 1250              	.LBB2117:
 1251              	.LBI2117:
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 1252              		.loc 10 567 20 view .LVU290
 1253              	.LBB2118:
 1254              	.LBI2118:
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 1255              		.loc 10 523 20 view .LVU291
 1256              	.LBB2119:
 1257              	.LBI2119:
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 1258              		.loc 10 446 2 view .LVU292
 1259              	.LBB2120:
 1260              	.LBB2121:
ARM GAS  /tmp/ccvzGucR.s 			page 85


 1261              	.LBI2121:
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 1262              		.loc 10 335 12 view .LVU293
 1263              	.LBB2122:
 1264              	.LBI2122:
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 1265              		.loc 10 215 2 view .LVU294
 1266              	.LBB2123:
 1267              	.LBI2123:
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(), second() { }
 1268              		.loc 5 232 26 view .LVU295
 1269              	.LBB2124:
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 1270              		.loc 5 233 25 is_stmt 0 view .LVU296
 1271 0190 C4F82463 		str	r6, [r4, #804]	@ float
 1272 0194 C4F82863 		str	r6, [r4, #808]	@ float
 1273              	.LVL56:
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 1274              		.loc 5 233 25 view .LVU297
 1275              	.LBE2124:
 1276              	.LBE2123:
 1277              	.LBE2122:
 1278              	.LBE2121:
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1279              		.loc 10 448 14 view .LVU298
 1280 0198 84F82C73 		strb	r7, [r4, #812]
 1281              	.LVL57:
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1282              		.loc 10 448 14 view .LVU299
 1283              	.LBE2120:
 1284              	.LBE2119:
 1285              	.LBE2118:
 1286              	.LBE2117:
 1287              	.LBE2116:
 1288              	.LBE2115:
 1289              	.LBE2114:
 1290              	.LBE2113:
 1291              	.LBE2112:
 1292              	.LBE2111:
 1293              	.LBB2125:
 1294              	.LBI2125:
 1295              		.loc 9 123 7 is_stmt 1 view .LVU300
 1296              	.LBB2126:
 1297              	.LBI2126:
 1298              		.loc 10 1355 7 view .LVU301
 1299              	.LBB2127:
 1300              	.LBI2127:
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 1301              		.loc 10 697 7 view .LVU302
 1302              	.LBB2128:
 1303              	.LBI2128:
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 1304              		.loc 10 703 2 view .LVU303
 1305              	.LBB2129:
 1306              	.LBI2129:
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 1307              		.loc 10 684 20 view .LVU304
ARM GAS  /tmp/ccvzGucR.s 			page 86


 1308              	.LBB2130:
 1309              	.LBI2130:
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 1310              		.loc 10 641 20 view .LVU305
 1311              	.LBB2131:
 1312              	.LBI2131:
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 1313              		.loc 10 567 20 view .LVU306
 1314              	.LBB2132:
 1315              	.LBI2132:
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 1316              		.loc 10 523 20 view .LVU307
 1317              	.LBB2133:
 1318              	.LBI2133:
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 1319              		.loc 10 446 2 view .LVU308
 1320              	.LBB2134:
 1321              	.LBB2135:
 1322              	.LBI2135:
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 1323              		.loc 10 335 12 view .LVU309
 1324              	.LBB2136:
 1325              	.LBI2136:
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 1326              		.loc 10 215 2 view .LVU310
 1327              	.LBB2137:
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1328              		.loc 10 216 45 is_stmt 0 view .LVU311
 1329 019c C4F83063 		str	r6, [r4, #816]	@ float
 1330              	.LVL58:
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1331              		.loc 10 216 45 view .LVU312
 1332              	.LBE2137:
 1333              	.LBE2136:
 1334              	.LBE2135:
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1335              		.loc 10 448 14 view .LVU313
 1336 01a0 84F83473 		strb	r7, [r4, #820]
 1337              	.LVL59:
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1338              		.loc 10 448 14 view .LVU314
 1339              	.LBE2134:
 1340              	.LBE2133:
 1341              	.LBE2132:
 1342              	.LBE2131:
 1343              	.LBE2130:
 1344              	.LBE2129:
 1345              	.LBE2128:
 1346              	.LBE2127:
 1347              	.LBE2126:
 1348              	.LBE2125:
 1349              	.LBB2138:
 1350              	.LBI2138:
 1351              		.loc 9 123 7 is_stmt 1 view .LVU315
 1352              	.LBB2139:
 1353              	.LBI2139:
 1354              		.loc 10 1355 7 view .LVU316
ARM GAS  /tmp/ccvzGucR.s 			page 87


 1355              	.LBB2140:
 1356              	.LBI2140:
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 1357              		.loc 10 697 7 view .LVU317
 1358              	.LBB2141:
 1359              	.LBI2141:
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 1360              		.loc 10 703 2 view .LVU318
 1361              	.LBB2142:
 1362              	.LBI2142:
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 1363              		.loc 10 684 20 view .LVU319
 1364              	.LBB2143:
 1365              	.LBI2143:
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 1366              		.loc 10 641 20 view .LVU320
 1367              	.LBB2144:
 1368              	.LBI2144:
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 1369              		.loc 10 567 20 view .LVU321
 1370              	.LBB2145:
 1371              	.LBI2145:
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 1372              		.loc 10 523 20 view .LVU322
 1373              	.LBB2146:
 1374              	.LBI2146:
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 1375              		.loc 10 446 2 view .LVU323
 1376              	.LBB2147:
 1377              	.LBB2148:
 1378              	.LBI2148:
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 1379              		.loc 10 335 12 view .LVU324
 1380              	.LBB2149:
 1381              	.LBI2149:
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 1382              		.loc 10 215 2 view .LVU325
 1383              	.LBB2150:
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1384              		.loc 10 216 45 is_stmt 0 view .LVU326
 1385 01a4 C4F83863 		str	r6, [r4, #824]	@ float
 1386              	.LVL60:
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1387              		.loc 10 216 45 view .LVU327
 1388              	.LBE2150:
 1389              	.LBE2149:
 1390              	.LBE2148:
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1391              		.loc 10 448 14 view .LVU328
 1392 01a8 84F83C73 		strb	r7, [r4, #828]
 1393              	.LVL61:
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1394              		.loc 10 448 14 view .LVU329
 1395              	.LBE2147:
 1396              	.LBE2146:
 1397              	.LBE2145:
 1398              	.LBE2144:
ARM GAS  /tmp/ccvzGucR.s 			page 88


 1399              	.LBE2143:
 1400              	.LBE2142:
 1401              	.LBE2141:
 1402              	.LBE2140:
 1403              	.LBE2139:
 1404              	.LBE2138:
 1405              		.loc 7 16 7 view .LVU330
 1406 01ac 84F84473 		strb	r7, [r4, #836]
 1407              	.LVL62:
 1408              	.LBB2151:
 1409              	.LBI2151:
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1410              		.loc 2 691 17 is_stmt 1 view .LVU331
 1411              	.LBB2152:
 1412              	.LBI2152:
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1413              		.loc 2 603 17 view .LVU332
 1414              	.LBB2153:
 1415              	.LBI2153:
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 1416              		.loc 2 361 7 view .LVU333
 1417              	.LBB2154:
 1418              	.LBI2154:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 1419              		.loc 2 111 7 view .LVU334
 1420              	.LBB2155:
 1421              	.LBB2156:
 1422              	.LBI2156:
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1423              		.loc 2 200 14 view .LVU335
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1424              		.loc 2 200 14 is_stmt 0 view .LVU336
 1425              	.LBE2156:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 1426              		.loc 2 111 7 view .LVU337
 1427 01b0 84F85073 		strb	r7, [r4, #848]
 1428              	.LVL63:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 1429              		.loc 2 111 7 view .LVU338
 1430              	.LBE2155:
 1431              	.LBE2154:
 1432              	.LBE2153:
 1433              	.LBE2152:
 1434              	.LBE2151:
 1435              	.LBB2157:
 1436              	.LBI2157:
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1437              		.loc 2 691 17 is_stmt 1 view .LVU339
 1438              	.LBB2158:
 1439              	.LBI2158:
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1440              		.loc 2 603 17 view .LVU340
 1441              	.LBB2159:
 1442              	.LBI2159:
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 1443              		.loc 2 361 7 view .LVU341
 1444              	.LBB2160:
ARM GAS  /tmp/ccvzGucR.s 			page 89


 1445              	.LBI2160:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 1446              		.loc 2 111 7 view .LVU342
 1447              	.LBB2161:
 1448              	.LBB2162:
 1449              	.LBI2162:
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1450              		.loc 2 200 14 view .LVU343
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1451              		.loc 2 200 14 is_stmt 0 view .LVU344
 1452              	.LBE2162:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 1453              		.loc 2 111 7 view .LVU345
 1454 01b4 84F85C73 		strb	r7, [r4, #860]
 1455              	.LVL64:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 1456              		.loc 2 111 7 view .LVU346
 1457              	.LBE2161:
 1458              	.LBE2160:
 1459              	.LBE2159:
 1460              	.LBE2158:
 1461              	.LBE2157:
 1462              	.LBB2163:
 1463              	.LBI2163:
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1464              		.loc 2 691 17 is_stmt 1 view .LVU347
 1465              	.LBB2164:
 1466              	.LBI2164:
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1467              		.loc 2 603 17 view .LVU348
 1468              	.LBB2165:
 1469              	.LBI2165:
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 1470              		.loc 2 303 7 view .LVU349
 1471              	.LBB2166:
 1472              	.LBI2166:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 1473              		.loc 2 111 7 view .LVU350
 1474              	.LBB2167:
 1475              	.LBB2168:
 1476              	.LBI2168:
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1477              		.loc 2 200 14 view .LVU351
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1478              		.loc 2 200 14 is_stmt 0 view .LVU352
 1479              	.LBE2168:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 1480              		.loc 2 111 7 view .LVU353
 1481 01b8 84F86473 		strb	r7, [r4, #868]
 1482              	.LVL65:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 1483              		.loc 2 111 7 view .LVU354
 1484              	.LBE2167:
 1485              	.LBE2166:
 1486              	.LBE2165:
 1487              	.LBE2164:
 1488              	.LBE2163:
ARM GAS  /tmp/ccvzGucR.s 			page 90


 1489              	.LBB2169:
 1490              	.LBI2169:
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1491              		.loc 2 691 17 is_stmt 1 view .LVU355
 1492              	.LBB2170:
 1493              	.LBI2170:
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1494              		.loc 2 603 17 view .LVU356
 1495              	.LBB2171:
 1496              	.LBI2171:
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 1497              		.loc 2 303 7 view .LVU357
 1498              	.LBB2172:
 1499              	.LBI2172:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 1500              		.loc 2 111 7 view .LVU358
 1501              	.LBB2173:
 1502              	.LBB2174:
 1503              	.LBI2174:
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1504              		.loc 2 200 14 view .LVU359
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1505              		.loc 2 200 14 is_stmt 0 view .LVU360
 1506              	.LBE2174:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 1507              		.loc 2 111 7 view .LVU361
 1508 01bc 84F86C73 		strb	r7, [r4, #876]
 1509              	.LVL66:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 1510              		.loc 2 111 7 view .LVU362
 1511              	.LBE2173:
 1512              	.LBE2172:
 1513              	.LBE2171:
 1514              	.LBE2170:
 1515              	.LBE2169:
 1516              	.LBB2175:
 1517              	.LBI2175:
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1518              		.loc 2 691 17 is_stmt 1 view .LVU363
 1519              	.LBB2176:
 1520              	.LBI2176:
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1521              		.loc 2 603 17 view .LVU364
 1522              	.LBB2177:
 1523              	.LBI2177:
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 1524              		.loc 2 303 7 view .LVU365
 1525              	.LBB2178:
 1526              	.LBI2178:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 1527              		.loc 2 111 7 view .LVU366
 1528              	.LBB2179:
 1529              	.LBB2180:
 1530              	.LBI2180:
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1531              		.loc 2 200 14 view .LVU367
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
ARM GAS  /tmp/ccvzGucR.s 			page 91


 1532              		.loc 2 200 14 is_stmt 0 view .LVU368
 1533              	.LBE2180:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 1534              		.loc 2 111 7 view .LVU369
 1535 01c0 84F87873 		strb	r7, [r4, #888]
 1536              	.LVL67:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 1537              		.loc 2 111 7 view .LVU370
 1538              	.LBE2179:
 1539              	.LBE2178:
 1540              	.LBE2177:
 1541              	.LBE2176:
 1542              	.LBE2175:
 1543              	.LBB2181:
 1544              	.LBI2181:
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1545              		.loc 2 691 17 is_stmt 1 view .LVU371
 1546              	.LBB2182:
 1547              	.LBI2182:
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1548              		.loc 2 603 17 view .LVU372
 1549              	.LBB2183:
 1550              	.LBI2183:
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 1551              		.loc 2 361 7 view .LVU373
 1552              	.LBB2184:
 1553              	.LBI2184:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 1554              		.loc 2 111 7 view .LVU374
 1555              	.LBB2185:
 1556              	.LBB2186:
 1557              	.LBI2186:
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1558              		.loc 2 200 14 view .LVU375
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 1559              		.loc 2 200 14 is_stmt 0 view .LVU376
 1560              	.LBE2186:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 1561              		.loc 2 111 7 view .LVU377
 1562 01c4 84F88473 		strb	r7, [r4, #900]
 1563              	.LVL68:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 1564              		.loc 2 111 7 view .LVU378
 1565              	.LBE2185:
 1566              	.LBE2184:
 1567              	.LBE2183:
 1568              	.LBE2182:
 1569              	.LBE2181:
 1570              		.loc 7 16 7 view .LVU379
 1571 01c8 C4F89063 		str	r6, [r4, #912]	@ float
 1572 01cc C4F89463 		str	r6, [r4, #916]	@ float
 1573 01d0 C4F89863 		str	r6, [r4, #920]	@ float
 1574 01d4 C4F89C63 		str	r6, [r4, #924]	@ float
 1575 01d8 C4F8A063 		str	r6, [r4, #928]	@ float
 1576 01dc C4F8A463 		str	r6, [r4, #932]	@ float
 1577 01e0 C4F8A863 		str	r6, [r4, #936]	@ float
 1578              	.LVL69:
ARM GAS  /tmp/ccvzGucR.s 			page 92


 1579              		.loc 7 16 7 view .LVU380
 1580              	.LBE2187:
 1581              	.LBE2188:
 1582              		.loc 1 166 23 view .LVU381
 1583 01e4 C4F8AC73 		str	r7, [r4, #940]
 1584              	.LVL70:
 1585              	.LBB2189:
 1586              	.LBI2189:
 1587              		.loc 9 123 7 is_stmt 1 view .LVU382
 1588              	.LBB2190:
 1589              	.LBI2190:
 1590              		.loc 10 1355 7 view .LVU383
 1591              	.LBB2191:
 1592              	.LBI2191:
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 1593              		.loc 10 697 7 view .LVU384
 1594              	.LBB2192:
 1595              	.LBI2192:
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 1596              		.loc 10 703 2 view .LVU385
 1597              	.LBB2193:
 1598              	.LBI2193:
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 1599              		.loc 10 684 20 view .LVU386
 1600              	.LBB2194:
 1601              	.LBI2194:
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 1602              		.loc 10 641 20 view .LVU387
 1603              	.LBB2195:
 1604              	.LBI2195:
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 1605              		.loc 10 567 20 view .LVU388
 1606              	.LBB2196:
 1607              	.LBI2196:
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 1608              		.loc 10 523 20 view .LVU389
 1609              	.LBB2197:
 1610              	.LBI2197:
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 1611              		.loc 10 446 2 view .LVU390
 1612              	.LBB2198:
 1613              	.LBB2199:
 1614              	.LBI2199:
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 1615              		.loc 10 335 12 view .LVU391
 1616              	.LBB2200:
 1617              	.LBI2200:
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 1618              		.loc 10 215 2 view .LVU392
 1619              	.LBB2201:
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1620              		.loc 10 216 45 is_stmt 0 view .LVU393
 1621 01e8 C4F8B063 		str	r6, [r4, #944]	@ float
 1622              	.LVL71:
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1623              		.loc 10 216 45 view .LVU394
 1624              	.LBE2201:
ARM GAS  /tmp/ccvzGucR.s 			page 93


 1625              	.LBE2200:
 1626              	.LBE2199:
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1627              		.loc 10 448 14 view .LVU395
 1628 01ec 84F8B473 		strb	r7, [r4, #948]
 1629              	.LVL72:
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1630              		.loc 10 448 14 view .LVU396
 1631              	.LBE2198:
 1632              	.LBE2197:
 1633              	.LBE2196:
 1634              	.LBE2195:
 1635              	.LBE2194:
 1636              	.LBE2193:
 1637              	.LBE2192:
 1638              	.LBE2191:
 1639              	.LBE2190:
 1640              	.LBE2189:
 1641              	.LBB2202:
 1642              	.LBI2202:
 1643              		.loc 9 123 7 is_stmt 1 view .LVU397
 1644              	.LBB2203:
 1645              	.LBI2203:
 1646              		.loc 10 1355 7 view .LVU398
 1647              	.LBB2204:
 1648              	.LBI2204:
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 1649              		.loc 10 697 7 view .LVU399
 1650              	.LBB2205:
 1651              	.LBI2205:
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 1652              		.loc 10 703 2 view .LVU400
 1653              	.LBB2206:
 1654              	.LBI2206:
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 1655              		.loc 10 684 20 view .LVU401
 1656              	.LBB2207:
 1657              	.LBI2207:
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 1658              		.loc 10 641 20 view .LVU402
 1659              	.LBB2208:
 1660              	.LBI2208:
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 1661              		.loc 10 567 20 view .LVU403
 1662              	.LBB2209:
 1663              	.LBI2209:
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 1664              		.loc 10 523 20 view .LVU404
 1665              	.LBB2210:
 1666              	.LBI2210:
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 1667              		.loc 10 446 2 view .LVU405
 1668              	.LBB2211:
 1669              	.LBB2212:
 1670              	.LBI2212:
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 1671              		.loc 10 335 12 view .LVU406
ARM GAS  /tmp/ccvzGucR.s 			page 94


 1672              	.LBB2213:
 1673              	.LBI2213:
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 1674              		.loc 10 215 2 view .LVU407
 1675              	.LBB2214:
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1676              		.loc 10 216 45 is_stmt 0 view .LVU408
 1677 01f0 C4F8B863 		str	r6, [r4, #952]	@ float
 1678              	.LVL73:
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1679              		.loc 10 216 45 view .LVU409
 1680              	.LBE2214:
 1681              	.LBE2213:
 1682              	.LBE2212:
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1683              		.loc 10 448 14 view .LVU410
 1684 01f4 84F8BC73 		strb	r7, [r4, #956]
 1685              	.LVL74:
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 1686              		.loc 10 448 14 view .LVU411
 1687              	.LBE2211:
 1688              	.LBE2210:
 1689              	.LBE2209:
 1690              	.LBE2208:
 1691              	.LBE2207:
 1692              	.LBE2206:
 1693              	.LBE2205:
 1694              	.LBE2204:
 1695              	.LBE2203:
 1696              	.LBE2202:
 1697              	.LBB2215:
 1698              	.LBB2216:
 167:Src/motor.cpp ****         {
 168:Src/motor.cpp ****     update_current_controller_gains();
 169:Src/motor.cpp **** }
 170:Src/motor.cpp **** 
 171:Src/motor.cpp **** 
 172:Src/motor.cpp **** /**
 173:Src/motor.cpp ****  * @brief Updates the phase PWM timings unless the motor is disarmed.
 174:Src/motor.cpp ****  *
 175:Src/motor.cpp ****  * If the motor is armed, the PWM timings come into effect at the next update
 176:Src/motor.cpp ****  * event (and are enabled if they weren't already), unless the motor is disarmed
 177:Src/motor.cpp ****  * prior to that.
 178:Src/motor.cpp ****  * 
 179:Src/motor.cpp ****  * @param tentative: If true, the update is not counted as "refresh".
 180:Src/motor.cpp ****  */
 181:Src/motor.cpp **** void Motor::apply_pwm_timings(uint16_t timings[3], bool tentative) {
 182:Src/motor.cpp **** 
 183:Src/motor.cpp ****     (void)tentative;
 184:Src/motor.cpp ****     hw_config_.timer->Instance->CCR1 = timings[0];
 185:Src/motor.cpp ****     hw_config_.timer->Instance->CCR2 = timings[1];
 186:Src/motor.cpp ****     hw_config_.timer->Instance->CCR3 = timings[2];
 187:Src/motor.cpp **** 
 188:Src/motor.cpp ****     if (armed_state_ == ARMED_STATE_WAITING_FOR_TIMINGS) {
 189:Src/motor.cpp ****         // timings were just loaded into the timer registers
 190:Src/motor.cpp ****         // the timer register are buffered, so they won't have an effect
 191:Src/motor.cpp ****         // on the output just yet so we need to wait until the next
ARM GAS  /tmp/ccvzGucR.s 			page 95


 192:Src/motor.cpp ****         // interrupt before we actually enable the output
 193:Src/motor.cpp ****         armed_state_ = ARMED_STATE_WAITING_FOR_UPDATE;
 194:Src/motor.cpp ****     } else if (armed_state_ == ARMED_STATE_WAITING_FOR_UPDATE) {
 195:Src/motor.cpp ****         // now we waited long enough. Enter armed state and
 196:Src/motor.cpp ****         // enable the actual PWM outputs.
 197:Src/motor.cpp ****         armed_state_ = ARMED_STATE_ARMED;
 198:Src/motor.cpp ****         __HAL_TIM_MOE_ENABLE(hw_config_.timer);  // enable pwm outputs
 199:Src/motor.cpp ****     } else if (armed_state_ == Motor::ARMED_STATE_ARMED) {
 200:Src/motor.cpp ****         // nothing to do, PWM is running, all good
 201:Src/motor.cpp ****     } else {
 202:Src/motor.cpp ****         // unknown state oh no
 203:Src/motor.cpp ****        disarm();
 204:Src/motor.cpp ****     }
 205:Src/motor.cpp **** 
 206:Src/motor.cpp **** }
 207:Src/motor.cpp **** 
 208:Src/motor.cpp **** /**
 209:Src/motor.cpp ****  * @brief Arms the PWM outputs that belong to this motor.
 210:Src/motor.cpp ****  *
 211:Src/motor.cpp ****  * Note that this does not activate the PWM outputs immediately, it just sets
 212:Src/motor.cpp ****  * a flag so they will be enabled later.
 213:Src/motor.cpp ****  * 
 214:Src/motor.cpp ****  * The sequence goes like this:
 215:Src/motor.cpp ****  *  - Motor::arm() sets the is_armed_ flag.
 216:Src/motor.cpp ****  *  - On the next timer update event Motor::timer_update_cb() gets called in an
 217:Src/motor.cpp ****  *    interrupt context
 218:Src/motor.cpp ****  *  - Motor::timer_update_cb() runs specified control law to determine PWM values
 219:Src/motor.cpp ****  *  - Motor::timer_update_cb() calls Motor::apply_pwm_timings()
 220:Src/motor.cpp ****  *  - Motor::apply_pwm_timings() sets the output compare registers and the AOE
 221:Src/motor.cpp ****  *    (automatic output enable) bit.
 222:Src/motor.cpp ****  *  - On the next update event the timer latches the configured values into the
 223:Src/motor.cpp ****  *    active shadow register and enables the outputs at the same time.
 224:Src/motor.cpp ****  * 
 225:Src/motor.cpp ****  * The sequence can be aborted at any time by calling Motor::disarm().
 226:Src/motor.cpp ****  *
 227:Src/motor.cpp ****  * @param control_law: An control law that is called at the frequency of current
 228:Src/motor.cpp ****  *        measurements. The function must return as quickly as possible
 229:Src/motor.cpp ****  *        such that the resulting PWM timings are available before the next
 230:Src/motor.cpp ****  *        timer update event.
 231:Src/motor.cpp ****  * @returns: True on success, false otherwise
 232:Src/motor.cpp ****  */
 233:Src/motor.cpp **** bool Motor::arm(PhaseControlLaw<3>* control_law) {
 234:Src/motor.cpp **** 
 235:Src/motor.cpp ****     uint32_t mask = cpu_enter_critical();
 236:Src/motor.cpp ****     
 237:Src/motor.cpp ****         control_law_ = control_law;
 238:Src/motor.cpp **** 
 239:Src/motor.cpp ****         // Reset controller states, integrators, setpoints, etc.
 240:Src/motor.cpp ****         axis_->controller_.reset();
 241:Src/motor.cpp ****         if (control_law_) {
 242:Src/motor.cpp ****             control_law_->reset();
 243:Src/motor.cpp ****         }
 244:Src/motor.cpp ****         reset_current_control();
 245:Src/motor.cpp ****         armed_state_ = ODriveIntf::MotorIntf::ARMED_STATE_WAITING_FOR_TIMINGS;
 246:Src/motor.cpp ****         is_armed_ = true;
 247:Src/motor.cpp **** 
 248:Src/motor.cpp ****     cpu_exit_critical(mask);
ARM GAS  /tmp/ccvzGucR.s 			page 96


 249:Src/motor.cpp **** 
 250:Src/motor.cpp ****     return true;
 251:Src/motor.cpp **** }
 252:Src/motor.cpp **** 
 253:Src/motor.cpp **** bool Motor::disarm()
 254:Src/motor.cpp **** {
 255:Src/motor.cpp ****     uint32_t mask = cpu_enter_critical();
 256:Src/motor.cpp ****     bool was_armed = armed_state_ != ODriveIntf::MotorIntf::ARMED_STATE_DISARMED;
 257:Src/motor.cpp ****     armed_state_ = ODriveIntf::MotorIntf::ARMED_STATE_DISARMED;
 258:Src/motor.cpp ****     __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(hw_config_.timer); 
 259:Src/motor.cpp ****     control_law_ = nullptr;
 260:Src/motor.cpp ****     is_armed_ = false;
 261:Src/motor.cpp ****     cpu_exit_critical(mask);
 262:Src/motor.cpp ****     return was_armed;
 263:Src/motor.cpp **** 
 264:Src/motor.cpp **** }
 265:Src/motor.cpp **** 
 266:Src/motor.cpp **** void Motor::reset_current_control() {
 267:Src/motor.cpp ****     current_control_.v_current_control_integral_d_ = 0.0f;
 268:Src/motor.cpp ****     current_control_.v_current_control_integral_q_ = 0.0f;
 269:Src/motor.cpp ****     I_bus_ = 0.0f;
 270:Src/motor.cpp **** }
 271:Src/motor.cpp **** 
 272:Src/motor.cpp **** // @brief Tune the current controller based on phase resistance and inductance
 273:Src/motor.cpp **** // This should be invoked whenever one of these values changes.
 274:Src/motor.cpp **** // TODO: allow update on user-request or update automatically via hooks
 275:Src/motor.cpp **** void Motor::update_current_controller_gains() {
 276:Src/motor.cpp ****     // Calculate current control gains
 277:Src/motor.cpp ****     auto p_gain = config_.current_control_bandwidth * config_.phase_inductance;
 1699              		.loc 1 277 63 view .LVU412
 1700 01f8 D8ED067A 		vldr.32	s15, [r8, #24]
 278:Src/motor.cpp ****     auto plant_pole = config_.phase_resistance / config_.phase_inductance;
 1701              		.loc 1 278 10 view .LVU413
 1702 01fc 98ED076A 		vldr.32	s12, [r8, #28]
 277:Src/motor.cpp ****     auto plant_pole = config_.phase_resistance / config_.phase_inductance;
 1703              		.loc 1 277 53 view .LVU414
 1704 0200 D8ED0F6A 		vldr.32	s13, [r8, #60]
 1705              	.LBE2216:
 1706              	.LBE2215:
 166:Src/motor.cpp ****         {
 1707              		.loc 1 166 23 view .LVU415
 1708 0204 C4F8C063 		str	r6, [r4, #960]	@ float
 1709              	.LBB2235:
 1710              	.LBB2231:
 1711              		.loc 1 278 10 view .LVU416
 1712 0208 86EE277A 		vdiv.f32	s14, s12, s15
 1713              	.LVL75:
 1714              		.loc 1 278 10 view .LVU417
 1715              	.LBE2231:
 1716              	.LBE2235:
 1717              	.LBB2236:
 1718              	.LBI2236:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 1719              		.loc 5 352 12 is_stmt 1 view .LVU418
 1720              	.LBB2237:
 1721              	.LBI2237:
 1722              		.loc 4 76 5 view .LVU419
ARM GAS  /tmp/ccvzGucR.s 			page 97


 1723              		.loc 4 76 5 is_stmt 0 view .LVU420
 1724              	.LBE2237:
 1725              	.LBB2238:
 1726              	.LBI2238:
 1727              		.loc 4 76 5 is_stmt 1 view .LVU421
 1728              		.loc 4 76 5 is_stmt 0 view .LVU422
 1729              	.LBE2238:
 1730              	.LBE2236:
 1731              	.LBB2239:
 1732              	.LBI2239:
  47:Inc/component.hpp ****     
 1733              		.loc 9 47 5 is_stmt 1 view .LVU423
 1734              	.LBB2240:
  47:Inc/component.hpp ****     
 1735              		.loc 9 47 37 is_stmt 0 view .LVU424
 1736 020c 0223     		movs	r3, #2
 1737 020e C4F8C433 		str	r3, [r4, #964]
 1738 0212 C4F8C863 		str	r6, [r4, #968]	@ float
 1739 0216 C4F8CC63 		str	r6, [r4, #972]	@ float
 1740              	.LVL76:
  47:Inc/component.hpp ****     
 1741              		.loc 9 47 37 view .LVU425
 1742              	.LBE2240:
 1743              	.LBE2239:
 1744              	.LBB2241:
 1745              	.LBI2241:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 1746              		.loc 5 352 12 is_stmt 1 view .LVU426
 1747              	.LBB2242:
 1748              	.LBI2242:
 1749              		.loc 4 76 5 view .LVU427
 1750              		.loc 4 76 5 is_stmt 0 view .LVU428
 1751              	.LBE2242:
 1752              	.LBB2243:
 1753              	.LBI2243:
 1754              		.loc 4 76 5 is_stmt 1 view .LVU429
 1755              		.loc 4 76 5 is_stmt 0 view .LVU430
 1756              	.LBE2243:
 1757              	.LBE2241:
 1758              	.LBB2244:
 1759              	.LBI2244:
  47:Inc/component.hpp ****     
 1760              		.loc 9 47 5 is_stmt 1 view .LVU431
 1761              	.LBB2245:
  47:Inc/component.hpp ****     
 1762              		.loc 9 47 37 is_stmt 0 view .LVU432
 1763 021a C4F8D033 		str	r3, [r4, #976]
 1764 021e C4F8D463 		str	r6, [r4, #980]	@ float
 1765 0222 C4F8D863 		str	r6, [r4, #984]	@ float
 1766              	.LVL77:
  47:Inc/component.hpp ****     
 1767              		.loc 9 47 37 view .LVU433
 1768              	.LBE2245:
 1769              	.LBE2244:
 168:Src/motor.cpp **** }
 1770              		.loc 1 168 5 is_stmt 1 view .LVU434
 1771              	.LBB2246:
ARM GAS  /tmp/ccvzGucR.s 			page 98


 1772              	.LBI2215:
 275:Src/motor.cpp ****     // Calculate current control gains
 1773              		.loc 1 275 6 view .LVU435
 1774              	.LBB2232:
 277:Src/motor.cpp ****     auto plant_pole = config_.phase_resistance / config_.phase_inductance;
 1775              		.loc 1 277 5 view .LVU436
 1776              	.LBB2217:
 1777              	.LBB2218:
 1778              	.LBB2219:
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 1779              		.loc 2 422 51 is_stmt 0 view .LVU437
 1780 0226 84F80C93 		strb	r9, [r4, #780]
 1781              	.LBE2219:
 1782              	.LBE2218:
 1783              	.LBE2217:
 1784              	.LBE2232:
 1785              	.LBE2246:
 1786              	.LBE2249:
 169:Src/motor.cpp **** 
 1787              		.loc 1 169 1 view .LVU438
 1788 022a 2046     		mov	r0, r4
 1789              	.LBB2250:
 1790              	.LBB2247:
 1791              	.LBB2233:
 277:Src/motor.cpp ****     auto plant_pole = config_.phase_resistance / config_.phase_inductance;
 1792              		.loc 1 277 53 view .LVU439
 1793 022c 67EEA67A 		vmul.f32	s15, s15, s13
 1794              	.LVL78:
 1795              		.loc 1 278 5 is_stmt 1 view .LVU440
 279:Src/motor.cpp ****     auto i_gain = plant_pole * p_gain;
 1796              		.loc 1 279 5 view .LVU441
 1797              	.LBB2225:
 1798              	.LBB2222:
 1799              	.LBB2220:
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 1800              		.loc 2 419 4 is_stmt 0 view .LVU442
 1801 0230 C4EDC17A 		vstr.32	s15, [r4, #772]
 1802              	.LBE2220:
 1803              	.LBE2222:
 1804              	.LBE2225:
 1805              		.loc 1 279 30 view .LVU443
 1806 0234 67EE277A 		vmul.f32	s15, s14, s15
 1807              	.LVL79:
 280:Src/motor.cpp ****     current_control_.pi_gains_ = {p_gain, i_gain};
 1808              		.loc 1 280 5 is_stmt 1 view .LVU444
 1809              	.LBB2226:
 1810              	.LBI2226:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 1811              		.loc 5 352 12 view .LVU445
 1812              	.LBB2227:
 1813              	.LBI2227:
 1814              		.loc 4 76 5 view .LVU446
 1815              		.loc 4 76 5 is_stmt 0 view .LVU447
 1816              	.LBE2227:
 1817              	.LBB2228:
 1818              	.LBI2228:
 1819              		.loc 4 76 5 is_stmt 1 view .LVU448
ARM GAS  /tmp/ccvzGucR.s 			page 99


 1820              		.loc 4 76 5 is_stmt 0 view .LVU449
 1821              	.LBE2228:
 1822              	.LBE2226:
 1823              	.LBB2229:
 1824              	.LBI2217:
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 1825              		.loc 2 789 2 is_stmt 1 view .LVU450
 1826              	.LBB2223:
 1827              	.LBI2218:
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 1828              		.loc 2 416 2 view .LVU451
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 1829              		.loc 2 416 2 is_stmt 0 view .LVU452
 1830              	.LBE2223:
 1831              	.LBE2229:
 1832              	.LBE2233:
 1833              	.LBE2247:
 1834              	.LBE2250:
 1835              		.loc 6 175 3 is_stmt 1 view .LVU453
 1836              	.LBB2251:
 1837              	.LBB2248:
 1838              	.LBB2234:
 1839              	.LBB2230:
 1840              	.LBB2224:
 1841              	.LBB2221:
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 1842              		.loc 2 419 4 is_stmt 0 view .LVU454
 1843 0238 C4EDC27A 		vstr.32	s15, [r4, #776]
 1844              	.LBE2221:
 1845              	.LBE2224:
 1846              	.LBE2230:
 1847              	.LBE2234:
 1848              	.LBE2248:
 1849              	.LBE2251:
 169:Src/motor.cpp **** 
 1850              		.loc 1 169 1 view .LVU455
 1851 023c BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1852              	.LVL80:
 1853              	.L48:
 169:Src/motor.cpp **** 
 1854              		.loc 1 169 1 view .LVU456
 1855              		.align	2
 1856              	.L47:
 1857 0240 4D084D08 		.word	139266125
 1858 0244 CDCCCC3E 		.word	1053609165
 1859 0248 0AD7233C 		.word	1008981770
 1860 024c 00002040 		.word	1075838976
 1861 0250 08000000 		.word	_ZTV23FieldOrientedController+8
 1862 0254 00409C46 		.word	1184645120
 1863 0258 00004842 		.word	1112014848
 1864 025c 00002041 		.word	1092616192
 1865              		.cfi_endproc
 1866              	.LFE4958:
 1868              		.global	_ZN5MotorC1ERK21MotorHardwareConfig_tRNS_8Config_tE
 1869              		.thumb_set _ZN5MotorC1ERK21MotorHardwareConfig_tRNS_8Config_tE,_ZN5MotorC2ERK21MotorHardwareConfig
 1870              		.section	.text._ZN5Motor17apply_pwm_timingsEPtb,"ax",%progbits
 1871              		.align	1
ARM GAS  /tmp/ccvzGucR.s 			page 100


 1872              		.p2align 2,,3
 1873              		.global	_ZN5Motor17apply_pwm_timingsEPtb
 1874              		.syntax unified
 1875              		.thumb
 1876              		.thumb_func
 1877              		.fpu fpv4-sp-d16
 1879              	_ZN5Motor17apply_pwm_timingsEPtb:
 1880              	.LVL81:
 1881              	.LFB4960:
 181:Src/motor.cpp **** 
 1882              		.loc 1 181 68 is_stmt 1 view -0
 1883              		.cfi_startproc
 1884              		@ args = 0, pretend = 0, frame = 0
 1885              		@ frame_needed = 0, uses_anonymous_args = 0
 1886              		@ link register save eliminated.
 183:Src/motor.cpp ****     hw_config_.timer->Instance->CCR1 = timings[0];
 1887              		.loc 1 183 5 view .LVU458
 184:Src/motor.cpp ****     hw_config_.timer->Instance->CCR2 = timings[1];
 1888              		.loc 1 184 5 view .LVU459
 184:Src/motor.cpp ****     hw_config_.timer->Instance->CCR2 = timings[1];
 1889              		.loc 1 184 16 is_stmt 0 view .LVU460
 1890 0000 0368     		ldr	r3, [r0]
 188:Src/motor.cpp ****         // timings were just loaded into the timer registers
 1891              		.loc 1 188 9 view .LVU461
 1892 0002 90F83920 		ldrb	r2, [r0, #57]	@ zero_extendqisi2
 1893              	.LVL82:
 184:Src/motor.cpp ****     hw_config_.timer->Instance->CCR2 = timings[1];
 1894              		.loc 1 184 23 view .LVU462
 1895 0006 1B68     		ldr	r3, [r3]
 1896 0008 1B68     		ldr	r3, [r3]
 181:Src/motor.cpp **** 
 1897              		.loc 1 181 68 view .LVU463
 1898 000a 10B4     		push	{r4}
 1899              	.LCFI29:
 1900              		.cfi_def_cfa_offset 4
 1901              		.cfi_offset 4, -4
 184:Src/motor.cpp ****     hw_config_.timer->Instance->CCR2 = timings[1];
 1902              		.loc 1 184 49 view .LVU464
 1903 000c 0C88     		ldrh	r4, [r1]
 184:Src/motor.cpp ****     hw_config_.timer->Instance->CCR2 = timings[1];
 1904              		.loc 1 184 38 view .LVU465
 1905 000e 5C63     		str	r4, [r3, #52]
 185:Src/motor.cpp ****     hw_config_.timer->Instance->CCR3 = timings[2];
 1906              		.loc 1 185 5 is_stmt 1 view .LVU466
 188:Src/motor.cpp ****         // timings were just loaded into the timer registers
 1907              		.loc 1 188 5 is_stmt 0 view .LVU467
 1908 0010 012A     		cmp	r2, #1
 185:Src/motor.cpp ****     hw_config_.timer->Instance->CCR3 = timings[2];
 1909              		.loc 1 185 49 view .LVU468
 1910 0012 4C88     		ldrh	r4, [r1, #2]
 186:Src/motor.cpp **** 
 1911              		.loc 1 186 49 view .LVU469
 1912 0014 8988     		ldrh	r1, [r1, #4]
 1913              	.LVL83:
 185:Src/motor.cpp ****     hw_config_.timer->Instance->CCR3 = timings[2];
 1914              		.loc 1 185 38 view .LVU470
 1915 0016 9C63     		str	r4, [r3, #56]
ARM GAS  /tmp/ccvzGucR.s 			page 101


 186:Src/motor.cpp **** 
 1916              		.loc 1 186 5 is_stmt 1 view .LVU471
 186:Src/motor.cpp **** 
 1917              		.loc 1 186 38 is_stmt 0 view .LVU472
 1918 0018 D963     		str	r1, [r3, #60]
 188:Src/motor.cpp ****         // timings were just loaded into the timer registers
 1919              		.loc 1 188 5 is_stmt 1 view .LVU473
 1920 001a 23D0     		beq	.L57
 194:Src/motor.cpp ****         // now we waited long enough. Enter armed state and
 1921              		.loc 1 194 12 view .LVU474
 1922 001c 022A     		cmp	r2, #2
 1923 001e 17D0     		beq	.L58
 199:Src/motor.cpp ****         // nothing to do, PWM is running, all good
 1924              		.loc 1 199 12 view .LVU475
 1925 0020 032A     		cmp	r2, #3
 1926 0022 12D0     		beq	.L49
 1927              	.LVL84:
 1928              	.LBB2265:
 1929              	.LBI2265:
 181:Src/motor.cpp **** 
 1930              		.loc 1 181 6 view .LVU476
 1931              	.LBB2266:
 203:Src/motor.cpp ****     }
 1932              		.loc 1 203 8 view .LVU477
 1933              	.LBB2267:
 1934              	.LBI2267:
 253:Src/motor.cpp **** {
 1935              		.loc 1 253 6 view .LVU478
 1936              	.LBB2268:
 255:Src/motor.cpp ****     bool was_armed = armed_state_ != ODriveIntf::MotorIntf::ARMED_STATE_DISARMED;
 1937              		.loc 1 255 5 view .LVU479
 1938              	.LBB2269:
 1939              	.LBI2269:
 1940              		.file 11 "Inc/low_level.h"
   1:Inc/low_level.h **** /* Define to prevent recursive inclusion -------------------------------------*/
   2:Inc/low_level.h **** #ifndef __LOW_LEVEL_H
   3:Inc/low_level.h **** #define __LOW_LEVEL_H
   4:Inc/low_level.h **** 
   5:Inc/low_level.h **** 
   6:Inc/low_level.h **** #ifdef __cplusplus
   7:Inc/low_level.h **** // Forward declare Motor class before extern "C" block
   8:Inc/low_level.h **** class Motor;
   9:Inc/low_level.h **** 
  10:Inc/low_level.h **** extern "C" {
  11:Inc/low_level.h **** #endif
  12:Inc/low_level.h **** 
  13:Inc/low_level.h **** /* Includes ------------------------------------------------------------------*/
  14:Inc/low_level.h **** #include <cmsis_os.h>
  15:Inc/low_level.h **** #include <stdbool.h>
  16:Inc/low_level.h **** #include "stm32g4xx_hal.h"  // Add this for ADC_HandleTypeDef and TIM_HandleTypeDef
  17:Inc/low_level.h **** #include "stm32g4xx_hal_adc.h" // Add this for TIM_HandleTypeDef
  18:Inc/low_level.h **** 
  19:Inc/low_level.h **** 
  20:Inc/low_level.h **** /* Exported types ------------------------------------------------------------*/
  21:Inc/low_level.h **** /* Exported constants --------------------------------------------------------*/
  22:Inc/low_level.h **** #define ADC_CHANNEL_COUNT 16
  23:Inc/low_level.h **** extern const float adc_full_scale;
ARM GAS  /tmp/ccvzGucR.s 			page 102


  24:Inc/low_level.h **** extern const float adc_ref_voltage;
  25:Inc/low_level.h **** /* Exported variables --------------------------------------------------------*/
  26:Inc/low_level.h **** extern float vbus_voltage;
  27:Inc/low_level.h **** extern float ibus_;
  28:Inc/low_level.h **** extern bool brake_resistor_armed;
  29:Inc/low_level.h **** extern bool brake_resistor_saturated;
  30:Inc/low_level.h **** extern uint16_t adc_measurements_[ADC_CHANNEL_COUNT];
  31:Inc/low_level.h **** /* Exported macro ------------------------------------------------------------*/
  32:Inc/low_level.h **** /* Exported functions --------------------------------------------------------*/
  33:Inc/low_level.h **** 
  34:Inc/low_level.h **** void safety_critical_arm_motor_pwm(Motor& motor);
  35:Inc/low_level.h **** bool safety_critical_disarm_motor_pwm(Motor& motor);
  36:Inc/low_level.h **** void safety_critical_apply_motor_pwm_timings(Motor& motor, uint16_t timings[3]);
  37:Inc/low_level.h **** void safety_critical_arm_brake_resistor();
  38:Inc/low_level.h **** void safety_critical_disarm_brake_resistor();
  39:Inc/low_level.h **** void safety_critical_apply_brake_resistor_timings(uint32_t low_off, uint32_t high_on);
  40:Inc/low_level.h **** 
  41:Inc/low_level.h **** // called from STM platform code
  42:Inc/low_level.h **** extern "C" {
  43:Inc/low_level.h **** void pwm_trig_adc_cb(ADC_TypeDef* hadc, bool injected);
  44:Inc/low_level.h **** void vbus_sense_adc_cb(ADC_HandleTypeDef* hadc, bool injected);
  45:Inc/low_level.h **** void tim_update_cb(TIM_HandleTypeDef* htim);
  46:Inc/low_level.h **** void pwm_in_cb(int channel, uint32_t timestamp);
  47:Inc/low_level.h **** void send_notification(void);
  48:Inc/low_level.h **** }
  49:Inc/low_level.h **** 
  50:Inc/low_level.h **** // Initalisation
  51:Inc/low_level.h **** void start_adc_pwm();
  52:Inc/low_level.h **** void start_pwm(TIM_HandleTypeDef* htim);
  53:Inc/low_level.h **** void sync_timers(TIM_HandleTypeDef* htim_a, TIM_HandleTypeDef* htim_b,
  54:Inc/low_level.h ****                  uint16_t TIM_CLOCKSOURCE_ITRx, uint16_t count_offset,
  55:Inc/low_level.h ****                  TIM_HandleTypeDef* htim_refbase = nullptr);
  56:Inc/low_level.h **** void start_general_purpose_adc();
  57:Inc/low_level.h **** float get_adc_voltage(const GPIO_TypeDef* const GPIO_port, uint16_t GPIO_pin);
  58:Inc/low_level.h **** uint16_t channel_from_gpio(const GPIO_TypeDef* const GPIO_port, uint16_t GPIO_pin);
  59:Inc/low_level.h **** float get_adc_voltage_channel(uint16_t channel);
  60:Inc/low_level.h **** void pwm_in_init();
  61:Inc/low_level.h **** void start_analog_thread();
  62:Inc/low_level.h **** 
  63:Inc/low_level.h **** void update_brake_current();
  64:Inc/low_level.h **** 
  65:Inc/low_level.h **** inline uint32_t cpu_enter_critical() {
 1941              		.loc 11 65 17 view .LVU480
 1942              	.LBB2270:
  66:Inc/low_level.h ****     uint32_t primask = __get_PRIMASK();
 1943              		.loc 11 66 5 view .LVU481
 1944              	.LBB2271:
 1945              	.LBI2271:
 1946              		.file 12 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
ARM GAS  /tmp/ccvzGucR.s 			page 103


   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
ARM GAS  /tmp/ccvzGucR.s 			page 104


  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
ARM GAS  /tmp/ccvzGucR.s 			page 105


 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccvzGucR.s 			page 106


 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccvzGucR.s 			page 107


 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 260:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccvzGucR.s 			page 108


 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  /tmp/ccvzGucR.s 			page 109


 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 402:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
ARM GAS  /tmp/ccvzGucR.s 			page 110


 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 419:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 1947              		.loc 12 449 31 view .LVU482
 1948              	.LBB2272:
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 1949              		.loc 12 451 3 view .LVU483
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 1950              		.loc 12 453 3 view .LVU484
 1951              		.syntax unified
 1952              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1953 0024 EFF31084 		MRS r4, primask
 1954              	@ 0 "" 2
 1955              	.LVL85:
 454:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 1956              		.loc 12 454 3 view .LVU485
ARM GAS  /tmp/ccvzGucR.s 			page 111


 1957              		.loc 12 454 3 is_stmt 0 view .LVU486
 1958              		.thumb
 1959              		.syntax unified
 1960              	.LBE2272:
 1961              	.LBE2271:
  67:Inc/low_level.h ****     __disable_irq();
 1962              		.loc 11 67 5 is_stmt 1 view .LVU487
 1963              	.LBB2273:
 1964              	.LBI2273:
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1965              		.loc 12 207 27 view .LVU488
 1966              	.LBB2274:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1967              		.loc 12 209 3 view .LVU489
 1968              		.syntax unified
 1969              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1970 0028 72B6     		cpsid i
 1971              	@ 0 "" 2
 1972              		.thumb
 1973              		.syntax unified
 1974              	.LBE2274:
 1975              	.LBE2273:
  68:Inc/low_level.h ****     return primask;
 1976              		.loc 11 68 5 view .LVU490
 1977              	.LVL86:
 1978              		.loc 11 68 5 is_stmt 0 view .LVU491
 1979              	.LBE2270:
 1980              	.LBE2269:
 256:Src/motor.cpp ****     armed_state_ = ODriveIntf::MotorIntf::ARMED_STATE_DISARMED;
 1981              		.loc 1 256 5 is_stmt 1 view .LVU492
 257:Src/motor.cpp ****     __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(hw_config_.timer); 
 1982              		.loc 1 257 5 view .LVU493
 258:Src/motor.cpp ****     control_law_ = nullptr;
 1983              		.loc 1 258 5 is_stmt 0 view .LVU494
 1984 002a 0268     		ldr	r2, [r0]
 1985 002c 1268     		ldr	r2, [r2]
 1986 002e 1168     		ldr	r1, [r2]
 1987 0030 4A6C     		ldr	r2, [r1, #68]
 257:Src/motor.cpp ****     __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(hw_config_.timer); 
 1988              		.loc 1 257 18 view .LVU495
 1989 0032 0023     		movs	r3, #0
 258:Src/motor.cpp ****     control_law_ = nullptr;
 1990              		.loc 1 258 5 view .LVU496
 1991 0034 22F40042 		bic	r2, r2, #32768
 257:Src/motor.cpp ****     __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(hw_config_.timer); 
 1992              		.loc 1 257 18 view .LVU497
 1993 0038 80F83930 		strb	r3, [r0, #57]
 1994              	.LVL87:
 258:Src/motor.cpp ****     control_law_ = nullptr;
 1995              		.loc 1 258 5 is_stmt 1 view .LVU498
 1996 003c 4A64     		str	r2, [r1, #68]
 259:Src/motor.cpp ****     is_armed_ = false;
 1997              		.loc 1 259 5 view .LVU499
 259:Src/motor.cpp ****     is_armed_ = false;
 1998              		.loc 1 259 18 is_stmt 0 view .LVU500
 1999 003e C0F8AC33 		str	r3, [r0, #940]
 260:Src/motor.cpp ****     cpu_exit_critical(mask);
ARM GAS  /tmp/ccvzGucR.s 			page 112


 2000              		.loc 1 260 5 is_stmt 1 view .LVU501
 260:Src/motor.cpp ****     cpu_exit_critical(mask);
 2001              		.loc 1 260 15 is_stmt 0 view .LVU502
 2002 0042 80F83830 		strb	r3, [r0, #56]
 261:Src/motor.cpp ****     return was_armed;
 2003              		.loc 1 261 5 is_stmt 1 view .LVU503
 2004              	.LVL88:
 2005              	.LBB2275:
 2006              	.LBI2275:
  69:Inc/low_level.h **** }
  70:Inc/low_level.h **** 
  71:Inc/low_level.h **** inline void cpu_exit_critical(uint32_t priority_mask) {
 2007              		.loc 11 71 13 view .LVU504
 2008              	.LBE2275:
 2009              	.LBE2268:
 2010              	.LBE2267:
 2011              	.LBE2266:
 2012              	.LBE2265:
  72:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
 2013              		.loc 11 72 5 view .LVU505
 2014              	.LBB2282:
 2015              	.LBB2281:
 2016              	.LBB2280:
 2017              	.LBB2279:
 2018              	.LBB2278:
 2019              	.LBB2276:
 2020              	.LBI2276:
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 2021              		.loc 12 479 27 view .LVU506
 2022              	.LBB2277:
 480:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 2023              		.loc 12 481 3 view .LVU507
ARM GAS  /tmp/ccvzGucR.s 			page 113


 2024              		.syntax unified
 2025              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2026 0046 84F31088 		MSR primask, r4
 2027              	@ 0 "" 2
 2028              	.LVL89:
 2029              		.loc 12 481 3 is_stmt 0 view .LVU508
 2030              		.thumb
 2031              		.syntax unified
 2032              	.LBE2277:
 2033              	.LBE2276:
 2034              	.LBE2278:
 262:Src/motor.cpp **** 
 2035              		.loc 1 262 5 is_stmt 1 view .LVU509
 2036              	.L49:
 262:Src/motor.cpp **** 
 2037              		.loc 1 262 5 is_stmt 0 view .LVU510
 2038              	.LBE2279:
 2039              	.LBE2280:
 2040              	.LBE2281:
 2041              	.LBE2282:
 206:Src/motor.cpp **** 
 2042              		.loc 1 206 1 view .LVU511
 2043 004a 5DF8044B 		ldr	r4, [sp], #4
 2044              	.LCFI30:
 2045              		.cfi_remember_state
 2046              		.cfi_restore 4
 2047              		.cfi_def_cfa_offset 0
 2048 004e 7047     		bx	lr
 2049              	.L58:
 2050              	.LCFI31:
 2051              		.cfi_restore_state
 197:Src/motor.cpp ****         __HAL_TIM_MOE_ENABLE(hw_config_.timer);  // enable pwm outputs
 2052              		.loc 1 197 9 is_stmt 1 view .LVU512
 198:Src/motor.cpp ****     } else if (armed_state_ == Motor::ARMED_STATE_ARMED) {
 2053              		.loc 1 198 9 is_stmt 0 view .LVU513
 2054 0050 5A6C     		ldr	r2, [r3, #68]
 206:Src/motor.cpp **** 
 2055              		.loc 1 206 1 view .LVU514
 2056 0052 5DF8044B 		ldr	r4, [sp], #4
 2057              	.LCFI32:
 2058              		.cfi_remember_state
 2059              		.cfi_restore 4
 2060              		.cfi_def_cfa_offset 0
 197:Src/motor.cpp ****         __HAL_TIM_MOE_ENABLE(hw_config_.timer);  // enable pwm outputs
 2061              		.loc 1 197 22 view .LVU515
 2062 0056 0321     		movs	r1, #3
 198:Src/motor.cpp ****     } else if (armed_state_ == Motor::ARMED_STATE_ARMED) {
 2063              		.loc 1 198 9 view .LVU516
 2064 0058 42F40042 		orr	r2, r2, #32768
 197:Src/motor.cpp ****         __HAL_TIM_MOE_ENABLE(hw_config_.timer);  // enable pwm outputs
 2065              		.loc 1 197 22 view .LVU517
 2066 005c 80F83910 		strb	r1, [r0, #57]
 198:Src/motor.cpp ****     } else if (armed_state_ == Motor::ARMED_STATE_ARMED) {
 2067              		.loc 1 198 9 is_stmt 1 view .LVU518
 2068 0060 5A64     		str	r2, [r3, #68]
 206:Src/motor.cpp **** 
 2069              		.loc 1 206 1 is_stmt 0 view .LVU519
ARM GAS  /tmp/ccvzGucR.s 			page 114


 2070 0062 7047     		bx	lr
 2071              	.L57:
 2072              	.LCFI33:
 2073              		.cfi_restore_state
 193:Src/motor.cpp ****     } else if (armed_state_ == ARMED_STATE_WAITING_FOR_UPDATE) {
 2074              		.loc 1 193 9 is_stmt 1 view .LVU520
 193:Src/motor.cpp ****     } else if (armed_state_ == ARMED_STATE_WAITING_FOR_UPDATE) {
 2075              		.loc 1 193 22 is_stmt 0 view .LVU521
 2076 0064 0223     		movs	r3, #2
 206:Src/motor.cpp **** 
 2077              		.loc 1 206 1 view .LVU522
 2078 0066 5DF8044B 		ldr	r4, [sp], #4
 2079              	.LCFI34:
 2080              		.cfi_restore 4
 2081              		.cfi_def_cfa_offset 0
 193:Src/motor.cpp ****     } else if (armed_state_ == ARMED_STATE_WAITING_FOR_UPDATE) {
 2082              		.loc 1 193 22 view .LVU523
 2083 006a 80F83930 		strb	r3, [r0, #57]
 206:Src/motor.cpp **** 
 2084              		.loc 1 206 1 view .LVU524
 2085 006e 7047     		bx	lr
 2086              		.cfi_endproc
 2087              	.LFE4960:
 2089              		.section	.text._ZN5Motor3armEP15PhaseControlLawILj3EE,"ax",%progbits
 2090              		.align	1
 2091              		.p2align 2,,3
 2092              		.global	_ZN5Motor3armEP15PhaseControlLawILj3EE
 2093              		.syntax unified
 2094              		.thumb
 2095              		.thumb_func
 2096              		.fpu fpv4-sp-d16
 2098              	_ZN5Motor3armEP15PhaseControlLawILj3EE:
 2099              	.LVL90:
 2100              	.LFB4961:
 233:Src/motor.cpp **** 
 2101              		.loc 1 233 50 is_stmt 1 view -0
 2102              		.cfi_startproc
 2103              		@ args = 0, pretend = 0, frame = 0
 2104              		@ frame_needed = 0, uses_anonymous_args = 0
 235:Src/motor.cpp ****     
 2105              		.loc 1 235 5 view .LVU526
 2106              	.LBB2294:
 2107              	.LBI2294:
  65:Inc/low_level.h ****     uint32_t primask = __get_PRIMASK();
 2108              		.loc 11 65 17 view .LVU527
 2109              	.LBB2295:
  66:Inc/low_level.h ****     __disable_irq();
 2110              		.loc 11 66 5 view .LVU528
 2111              	.LBB2296:
 2112              	.LBI2296:
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2113              		.loc 12 449 31 view .LVU529
 2114              	.LBB2297:
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 2115              		.loc 12 451 3 view .LVU530
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 2116              		.loc 12 453 3 view .LVU531
ARM GAS  /tmp/ccvzGucR.s 			page 115


 2117              	.LBE2297:
 2118              	.LBE2296:
 2119              	.LBE2295:
 2120              	.LBE2294:
 233:Src/motor.cpp **** 
 2121              		.loc 1 233 50 is_stmt 0 view .LVU532
 2122 0000 38B5     		push	{r3, r4, r5, lr}
 2123              	.LCFI35:
 2124              		.cfi_def_cfa_offset 16
 2125              		.cfi_offset 3, -16
 2126              		.cfi_offset 4, -12
 2127              		.cfi_offset 5, -8
 2128              		.cfi_offset 14, -4
 233:Src/motor.cpp **** 
 2129              		.loc 1 233 50 view .LVU533
 2130 0002 0446     		mov	r4, r0
 2131              	.LBB2303:
 2132              	.LBB2302:
 2133              	.LBB2299:
 2134              	.LBB2298:
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 2135              		.loc 12 453 3 view .LVU534
 2136              		.syntax unified
 2137              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2138 0004 EFF31085 		MRS r5, primask
 2139              	@ 0 "" 2
 2140              	.LVL91:
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2141              		.loc 12 454 3 is_stmt 1 view .LVU535
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2142              		.loc 12 454 3 is_stmt 0 view .LVU536
 2143              		.thumb
 2144              		.syntax unified
 2145              	.LBE2298:
 2146              	.LBE2299:
  67:Inc/low_level.h ****     return primask;
 2147              		.loc 11 67 5 is_stmt 1 view .LVU537
 2148              	.LBB2300:
 2149              	.LBI2300:
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2150              		.loc 12 207 27 view .LVU538
 2151              	.LBB2301:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2152              		.loc 12 209 3 view .LVU539
 2153              		.syntax unified
 2154              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2155 0008 72B6     		cpsid i
 2156              	@ 0 "" 2
 2157              		.thumb
 2158              		.syntax unified
 2159              	.LBE2301:
 2160              	.LBE2300:
  68:Inc/low_level.h **** }
 2161              		.loc 11 68 5 view .LVU540
 2162              	.LVL92:
  68:Inc/low_level.h **** }
 2163              		.loc 11 68 5 is_stmt 0 view .LVU541
ARM GAS  /tmp/ccvzGucR.s 			page 116


 2164              	.LBE2302:
 2165              	.LBE2303:
 237:Src/motor.cpp **** 
 2166              		.loc 1 237 9 is_stmt 1 view .LVU542
 240:Src/motor.cpp ****         if (control_law_) {
 2167              		.loc 1 240 16 is_stmt 0 view .LVU543
 2168 000a 8368     		ldr	r3, [r0, #8]
 237:Src/motor.cpp **** 
 2169              		.loc 1 237 22 view .LVU544
 2170 000c C0F8AC13 		str	r1, [r0, #940]
 240:Src/motor.cpp ****         if (control_law_) {
 2171              		.loc 1 240 9 is_stmt 1 view .LVU545
 240:Src/motor.cpp ****         if (control_law_) {
 2172              		.loc 1 240 33 is_stmt 0 view .LVU546
 2173 0010 D868     		ldr	r0, [r3, #12]
 2174              	.LVL93:
 240:Src/motor.cpp ****         if (control_law_) {
 2175              		.loc 1 240 33 view .LVU547
 2176 0012 FFF7FEFF 		bl	_ZN10Controller5resetEv
 2177              	.LVL94:
 241:Src/motor.cpp ****             control_law_->reset();
 2178              		.loc 1 241 9 is_stmt 1 view .LVU548
 241:Src/motor.cpp ****             control_law_->reset();
 2179              		.loc 1 241 13 is_stmt 0 view .LVU549
 2180 0016 D4F8AC03 		ldr	r0, [r4, #940]
 241:Src/motor.cpp ****             control_law_->reset();
 2181              		.loc 1 241 9 view .LVU550
 2182 001a 10B1     		cbz	r0, .L60
 242:Src/motor.cpp ****         }
 2183              		.loc 1 242 13 is_stmt 1 view .LVU551
 242:Src/motor.cpp ****         }
 2184              		.loc 1 242 33 is_stmt 0 view .LVU552
 2185 001c 0368     		ldr	r3, [r0]
 242:Src/motor.cpp ****         }
 2186              		.loc 1 242 32 view .LVU553
 2187 001e 1B68     		ldr	r3, [r3]
 2188 0020 9847     		blx	r3
 2189              	.LVL95:
 2190              	.L60:
 244:Src/motor.cpp ****         armed_state_ = ODriveIntf::MotorIntf::ARMED_STATE_WAITING_FOR_TIMINGS;
 2191              		.loc 1 244 9 is_stmt 1 view .LVU554
 2192              	.LBB2304:
 2193              	.LBI2304:
 266:Src/motor.cpp ****     current_control_.v_current_control_integral_d_ = 0.0f;
 2194              		.loc 1 266 6 view .LVU555
 2195              	.LBB2305:
 267:Src/motor.cpp ****     current_control_.v_current_control_integral_q_ = 0.0f;
 2196              		.loc 1 267 5 view .LVU556
 267:Src/motor.cpp ****     current_control_.v_current_control_integral_q_ = 0.0f;
 2197              		.loc 1 267 52 is_stmt 0 view .LVU557
 2198 0022 0023     		movs	r3, #0
 2199              	.LBE2305:
 2200              	.LBE2304:
 246:Src/motor.cpp **** 
 2201              		.loc 1 246 19 view .LVU558
 2202 0024 40F20112 		movw	r2, #257
 2203              	.LBB2307:
ARM GAS  /tmp/ccvzGucR.s 			page 117


 2204              	.LBB2306:
 267:Src/motor.cpp ****     current_control_.v_current_control_integral_q_ = 0.0f;
 2205              		.loc 1 267 52 view .LVU559
 2206 0028 C4F89033 		str	r3, [r4, #912]	@ float
 268:Src/motor.cpp ****     I_bus_ = 0.0f;
 2207              		.loc 1 268 5 is_stmt 1 view .LVU560
 268:Src/motor.cpp ****     I_bus_ = 0.0f;
 2208              		.loc 1 268 52 is_stmt 0 view .LVU561
 2209 002c C4F89433 		str	r3, [r4, #916]	@ float
 269:Src/motor.cpp **** }
 2210              		.loc 1 269 5 is_stmt 1 view .LVU562
 269:Src/motor.cpp **** }
 2211              		.loc 1 269 12 is_stmt 0 view .LVU563
 2212 0030 C4F8F032 		str	r3, [r4, #752]	@ float
 2213              	.LVL96:
 269:Src/motor.cpp **** }
 2214              		.loc 1 269 12 view .LVU564
 2215              	.LBE2306:
 2216              	.LBE2307:
 245:Src/motor.cpp ****         is_armed_ = true;
 2217              		.loc 1 245 9 is_stmt 1 view .LVU565
 246:Src/motor.cpp **** 
 2218              		.loc 1 246 9 view .LVU566
 246:Src/motor.cpp **** 
 2219              		.loc 1 246 19 is_stmt 0 view .LVU567
 2220 0034 2287     		strh	r2, [r4, #56]	@ movhi
 248:Src/motor.cpp **** 
 2221              		.loc 1 248 5 is_stmt 1 view .LVU568
 2222              	.LVL97:
 2223              	.LBB2308:
 2224              	.LBI2308:
  71:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
 2225              		.loc 11 71 13 view .LVU569
 2226              	.LBE2308:
 2227              		.loc 11 72 5 view .LVU570
 2228              	.LBB2311:
 2229              	.LBB2309:
 2230              	.LBI2309:
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2231              		.loc 12 479 27 view .LVU571
 2232              	.LBB2310:
 2233              		.loc 12 481 3 view .LVU572
 2234              		.syntax unified
 2235              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2236 0036 85F31088 		MSR primask, r5
 2237              	@ 0 "" 2
 2238              	.LVL98:
 2239              		.loc 12 481 3 is_stmt 0 view .LVU573
 2240              		.thumb
 2241              		.syntax unified
 2242              	.LBE2310:
 2243              	.LBE2309:
 2244              	.LBE2311:
 250:Src/motor.cpp **** }
 2245              		.loc 1 250 5 is_stmt 1 view .LVU574
 251:Src/motor.cpp **** 
 2246              		.loc 1 251 1 is_stmt 0 view .LVU575
ARM GAS  /tmp/ccvzGucR.s 			page 118


 2247 003a 0120     		movs	r0, #1
 2248 003c 38BD     		pop	{r3, r4, r5, pc}
 251:Src/motor.cpp **** 
 2249              		.loc 1 251 1 view .LVU576
 2250              		.cfi_endproc
 2251              	.LFE4961:
 2253 003e 00BF     		.section	.text._ZN5Motor6disarmEv,"ax",%progbits
 2254              		.align	1
 2255              		.p2align 2,,3
 2256              		.global	_ZN5Motor6disarmEv
 2257              		.syntax unified
 2258              		.thumb
 2259              		.thumb_func
 2260              		.fpu fpv4-sp-d16
 2262              	_ZN5Motor6disarmEv:
 2263              	.LVL99:
 2264              	.LFB4962:
 254:Src/motor.cpp ****     uint32_t mask = cpu_enter_critical();
 2265              		.loc 1 254 1 is_stmt 1 view -0
 2266              		.cfi_startproc
 2267              		@ args = 0, pretend = 0, frame = 0
 2268              		@ frame_needed = 0, uses_anonymous_args = 0
 2269              		@ link register save eliminated.
 255:Src/motor.cpp ****     bool was_armed = armed_state_ != ODriveIntf::MotorIntf::ARMED_STATE_DISARMED;
 2270              		.loc 1 255 5 view .LVU578
 2271              	.LBB2312:
 2272              	.LBI2312:
  65:Inc/low_level.h ****     uint32_t primask = __get_PRIMASK();
 2273              		.loc 11 65 17 view .LVU579
 2274              	.LBB2313:
  66:Inc/low_level.h ****     __disable_irq();
 2275              		.loc 11 66 5 view .LVU580
 2276              	.LBB2314:
 2277              	.LBI2314:
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2278              		.loc 12 449 31 view .LVU581
 2279              	.LBB2315:
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 2280              		.loc 12 451 3 view .LVU582
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 2281              		.loc 12 453 3 view .LVU583
 2282              	.LBE2315:
 2283              	.LBE2314:
 2284              	.LBE2313:
 2285              	.LBE2312:
 254:Src/motor.cpp ****     uint32_t mask = cpu_enter_critical();
 2286              		.loc 1 254 1 is_stmt 0 view .LVU584
 2287 0000 10B4     		push	{r4}
 2288              	.LCFI36:
 2289              		.cfi_def_cfa_offset 4
 2290              		.cfi_offset 4, -4
 254:Src/motor.cpp ****     uint32_t mask = cpu_enter_critical();
 2291              		.loc 1 254 1 view .LVU585
 2292 0002 0346     		mov	r3, r0
 2293              	.LBB2321:
 2294              	.LBB2320:
 2295              	.LBB2317:
ARM GAS  /tmp/ccvzGucR.s 			page 119


 2296              	.LBB2316:
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 2297              		.loc 12 453 3 view .LVU586
 2298              		.syntax unified
 2299              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2300 0004 EFF3108C 		MRS ip, primask
 2301              	@ 0 "" 2
 2302              	.LVL100:
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2303              		.loc 12 454 3 is_stmt 1 view .LVU587
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2304              		.loc 12 454 3 is_stmt 0 view .LVU588
 2305              		.thumb
 2306              		.syntax unified
 2307              	.LBE2316:
 2308              	.LBE2317:
  67:Inc/low_level.h ****     return primask;
 2309              		.loc 11 67 5 is_stmt 1 view .LVU589
 2310              	.LBB2318:
 2311              	.LBI2318:
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2312              		.loc 12 207 27 view .LVU590
 2313              	.LBB2319:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2314              		.loc 12 209 3 view .LVU591
 2315              		.syntax unified
 2316              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2317 0008 72B6     		cpsid i
 2318              	@ 0 "" 2
 2319              		.thumb
 2320              		.syntax unified
 2321              	.LBE2319:
 2322              	.LBE2318:
  68:Inc/low_level.h **** }
 2323              		.loc 11 68 5 view .LVU592
 2324              	.LVL101:
  68:Inc/low_level.h **** }
 2325              		.loc 11 68 5 is_stmt 0 view .LVU593
 2326              	.LBE2320:
 2327              	.LBE2321:
 256:Src/motor.cpp ****     armed_state_ = ODriveIntf::MotorIntf::ARMED_STATE_DISARMED;
 2328              		.loc 1 256 5 is_stmt 1 view .LVU594
 258:Src/motor.cpp ****     control_law_ = nullptr;
 2329              		.loc 1 258 5 is_stmt 0 view .LVU595
 2330 000a 0268     		ldr	r2, [r0]
 256:Src/motor.cpp ****     armed_state_ = ODriveIntf::MotorIntf::ARMED_STATE_DISARMED;
 2331              		.loc 1 256 10 view .LVU596
 2332 000c 90F83900 		ldrb	r0, [r0, #57]	@ zero_extendqisi2
 2333              	.LVL102:
 258:Src/motor.cpp ****     control_law_ = nullptr;
 2334              		.loc 1 258 5 view .LVU597
 2335 0010 1168     		ldr	r1, [r2]
 2336 0012 0C68     		ldr	r4, [r1]
 2337 0014 616C     		ldr	r1, [r4, #68]
 257:Src/motor.cpp ****     __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(hw_config_.timer); 
 2338              		.loc 1 257 18 view .LVU598
 2339 0016 0022     		movs	r2, #0
ARM GAS  /tmp/ccvzGucR.s 			page 120


 256:Src/motor.cpp ****     armed_state_ = ODriveIntf::MotorIntf::ARMED_STATE_DISARMED;
 2340              		.loc 1 256 10 view .LVU599
 2341 0018 801A     		subs	r0, r0, r2
 258:Src/motor.cpp ****     control_law_ = nullptr;
 2342              		.loc 1 258 5 view .LVU600
 2343 001a 21F40041 		bic	r1, r1, #32768
 257:Src/motor.cpp ****     __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(hw_config_.timer); 
 2344              		.loc 1 257 18 view .LVU601
 2345 001e 83F83920 		strb	r2, [r3, #57]
 256:Src/motor.cpp ****     armed_state_ = ODriveIntf::MotorIntf::ARMED_STATE_DISARMED;
 2346              		.loc 1 256 10 view .LVU602
 2347 0022 18BF     		it	ne
 2348 0024 0120     		movne	r0, #1
 2349              	.LVL103:
 257:Src/motor.cpp ****     __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(hw_config_.timer); 
 2350              		.loc 1 257 5 is_stmt 1 view .LVU603
 258:Src/motor.cpp ****     control_law_ = nullptr;
 2351              		.loc 1 258 5 view .LVU604
 2352 0026 6164     		str	r1, [r4, #68]
 259:Src/motor.cpp ****     is_armed_ = false;
 2353              		.loc 1 259 5 view .LVU605
 259:Src/motor.cpp ****     is_armed_ = false;
 2354              		.loc 1 259 18 is_stmt 0 view .LVU606
 2355 0028 C3F8AC23 		str	r2, [r3, #940]
 260:Src/motor.cpp ****     cpu_exit_critical(mask);
 2356              		.loc 1 260 5 is_stmt 1 view .LVU607
 260:Src/motor.cpp ****     cpu_exit_critical(mask);
 2357              		.loc 1 260 15 is_stmt 0 view .LVU608
 2358 002c 83F83820 		strb	r2, [r3, #56]
 261:Src/motor.cpp ****     return was_armed;
 2359              		.loc 1 261 5 is_stmt 1 view .LVU609
 2360              	.LVL104:
 2361              	.LBB2322:
 2362              	.LBI2322:
  71:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
 2363              		.loc 11 71 13 view .LVU610
 2364              	.LBE2322:
 2365              		.loc 11 72 5 view .LVU611
 2366              	.LBB2325:
 2367              	.LBB2323:
 2368              	.LBI2323:
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2369              		.loc 12 479 27 view .LVU612
 2370              	.LBB2324:
 2371              		.loc 12 481 3 view .LVU613
 2372              		.syntax unified
 2373              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2374 0030 8CF31088 		MSR primask, ip
 2375              	@ 0 "" 2
 2376              	.LVL105:
 2377              		.loc 12 481 3 is_stmt 0 view .LVU614
 2378              		.thumb
 2379              		.syntax unified
 2380              	.LBE2324:
 2381              	.LBE2323:
 2382              	.LBE2325:
 262:Src/motor.cpp **** 
ARM GAS  /tmp/ccvzGucR.s 			page 121


 2383              		.loc 1 262 5 is_stmt 1 view .LVU615
 264:Src/motor.cpp **** 
 2384              		.loc 1 264 1 is_stmt 0 view .LVU616
 2385 0034 5DF8044B 		ldr	r4, [sp], #4
 2386              	.LCFI37:
 2387              		.cfi_restore 4
 2388              		.cfi_def_cfa_offset 0
 2389 0038 7047     		bx	lr
 2390              		.cfi_endproc
 2391              	.LFE4962:
 2393 003a 00BF     		.section	.text._ZN5Motor21reset_current_controlEv,"ax",%progbits
 2394              		.align	1
 2395              		.p2align 2,,3
 2396              		.global	_ZN5Motor21reset_current_controlEv
 2397              		.syntax unified
 2398              		.thumb
 2399              		.thumb_func
 2400              		.fpu fpv4-sp-d16
 2402              	_ZN5Motor21reset_current_controlEv:
 2403              	.LVL106:
 2404              	.LFB4963:
 266:Src/motor.cpp ****     current_control_.v_current_control_integral_d_ = 0.0f;
 2405              		.loc 1 266 37 is_stmt 1 view -0
 2406              		.cfi_startproc
 2407              		@ args = 0, pretend = 0, frame = 0
 2408              		@ frame_needed = 0, uses_anonymous_args = 0
 2409              		@ link register save eliminated.
 267:Src/motor.cpp ****     current_control_.v_current_control_integral_q_ = 0.0f;
 2410              		.loc 1 267 5 view .LVU618
 267:Src/motor.cpp ****     current_control_.v_current_control_integral_q_ = 0.0f;
 2411              		.loc 1 267 52 is_stmt 0 view .LVU619
 2412 0000 0023     		movs	r3, #0
 2413 0002 C0F89033 		str	r3, [r0, #912]	@ float
 268:Src/motor.cpp ****     I_bus_ = 0.0f;
 2414              		.loc 1 268 5 is_stmt 1 view .LVU620
 268:Src/motor.cpp ****     I_bus_ = 0.0f;
 2415              		.loc 1 268 52 is_stmt 0 view .LVU621
 2416 0006 C0F89433 		str	r3, [r0, #916]	@ float
 269:Src/motor.cpp **** }
 2417              		.loc 1 269 5 is_stmt 1 view .LVU622
 269:Src/motor.cpp **** }
 2418              		.loc 1 269 12 is_stmt 0 view .LVU623
 2419 000a C0F8F032 		str	r3, [r0, #752]	@ float
 270:Src/motor.cpp **** 
 2420              		.loc 1 270 1 view .LVU624
 2421 000e 7047     		bx	lr
 2422              		.cfi_endproc
 2423              	.LFE4963:
 2425              		.section	.text._ZN5Motor31update_current_controller_gainsEv,"ax",%progbits
 2426              		.align	1
 2427              		.p2align 2,,3
 2428              		.global	_ZN5Motor31update_current_controller_gainsEv
 2429              		.syntax unified
 2430              		.thumb
 2431              		.thumb_func
 2432              		.fpu fpv4-sp-d16
 2434              	_ZN5Motor31update_current_controller_gainsEv:
ARM GAS  /tmp/ccvzGucR.s 			page 122


 2435              	.LVL107:
 2436              	.LFB4964:
 275:Src/motor.cpp ****     // Calculate current control gains
 2437              		.loc 1 275 47 is_stmt 1 view -0
 2438              		.cfi_startproc
 2439              		@ args = 0, pretend = 0, frame = 0
 2440              		@ frame_needed = 0, uses_anonymous_args = 0
 2441              		@ link register save eliminated.
 277:Src/motor.cpp ****     auto plant_pole = config_.phase_resistance / config_.phase_inductance;
 2442              		.loc 1 277 5 view .LVU626
 277:Src/motor.cpp ****     auto plant_pole = config_.phase_resistance / config_.phase_inductance;
 2443              		.loc 1 277 19 is_stmt 0 view .LVU627
 2444 0000 4368     		ldr	r3, [r0, #4]
 2445              	.LBB2326:
 2446              	.LBB2327:
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 2447              		.loc 2 791 4 view .LVU628
 2448 0002 90F80C23 		ldrb	r2, [r0, #780]	@ zero_extendqisi2
 2449              	.LBE2327:
 2450              	.LBE2326:
 277:Src/motor.cpp ****     auto plant_pole = config_.phase_resistance / config_.phase_inductance;
 2451              		.loc 1 277 63 view .LVU629
 2452 0006 D3ED067A 		vldr.32	s15, [r3, #24]
 278:Src/motor.cpp ****     auto i_gain = plant_pole * p_gain;
 2453              		.loc 1 278 10 view .LVU630
 2454 000a 93ED076A 		vldr.32	s12, [r3, #28]
 277:Src/motor.cpp ****     auto plant_pole = config_.phase_resistance / config_.phase_inductance;
 2455              		.loc 1 277 53 view .LVU631
 2456 000e D3ED0F6A 		vldr.32	s13, [r3, #60]
 278:Src/motor.cpp ****     auto i_gain = plant_pole * p_gain;
 2457              		.loc 1 278 10 view .LVU632
 2458 0012 86EE277A 		vdiv.f32	s14, s12, s15
 277:Src/motor.cpp ****     auto plant_pole = config_.phase_resistance / config_.phase_inductance;
 2459              		.loc 1 277 53 view .LVU633
 2460 0016 67EEA67A 		vmul.f32	s15, s15, s13
 2461              	.LVL108:
 278:Src/motor.cpp ****     auto i_gain = plant_pole * p_gain;
 2462              		.loc 1 278 5 is_stmt 1 view .LVU634
 279:Src/motor.cpp ****     current_control_.pi_gains_ = {p_gain, i_gain};
 2463              		.loc 1 279 5 view .LVU635
 279:Src/motor.cpp ****     current_control_.pi_gains_ = {p_gain, i_gain};
 2464              		.loc 1 279 30 is_stmt 0 view .LVU636
 2465 001a 27EE277A 		vmul.f32	s14, s14, s15
 2466              	.LVL109:
 2467              		.loc 1 280 5 is_stmt 1 view .LVU637
 2468              	.LBB2336:
 2469              	.LBI2336:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 2470              		.loc 5 352 12 view .LVU638
 2471              	.LBB2337:
 2472              	.LBI2337:
 2473              		.loc 4 76 5 view .LVU639
 2474              		.loc 4 76 5 is_stmt 0 view .LVU640
 2475              	.LBE2337:
 2476              	.LBB2338:
 2477              	.LBI2338:
 2478              		.loc 4 76 5 is_stmt 1 view .LVU641
ARM GAS  /tmp/ccvzGucR.s 			page 123


 2479              		.loc 4 76 5 is_stmt 0 view .LVU642
 2480              	.LBE2338:
 2481              	.LBE2336:
 2482              	.LBB2339:
 2483              	.LBI2326:
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 2484              		.loc 2 789 2 is_stmt 1 view .LVU643
 2485              	.LBB2334:
 2486              	.LBB2328:
 2487              	.LBI2328:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 2488              		.loc 2 434 22 view .LVU644
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 2489              		.loc 2 434 22 is_stmt 0 view .LVU645
 2490              	.LBE2328:
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 2491              		.loc 2 791 4 view .LVU646
 2492 001e 22B1     		cbz	r2, .L69
 2493              	.LVL110:
 2494              	.LBB2329:
 2495              	.LBI2329:
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_move_assignable<_T1>,
 2496              		.loc 5 401 7 is_stmt 1 view .LVU647
 2497              	.LBB2330:
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 2498              		.loc 5 408 8 is_stmt 0 view .LVU648
 2499 0020 C0EDC17A 		vstr.32	s15, [r0, #772]
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 2500              		.loc 5 409 9 view .LVU649
 2501 0024 80EDC27A 		vstr.32	s14, [r0, #776]
 2502              		.loc 5 410 10 view .LVU650
 2503 0028 7047     		bx	lr
 2504              	.LVL111:
 2505              	.L69:
 2506              		.loc 5 410 10 view .LVU651
 2507              	.LBE2330:
 2508              	.LBE2329:
 2509              	.LBB2331:
 2510              	.LBI2331:
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 2511              		.loc 2 416 2 is_stmt 1 view .LVU652
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 2512              		.loc 2 416 2 is_stmt 0 view .LVU653
 2513              	.LBE2331:
 2514              	.LBE2334:
 2515              	.LBE2339:
 2516              		.loc 6 175 3 is_stmt 1 view .LVU654
 2517              	.LBB2340:
 2518              	.LBB2335:
 2519              	.LBB2333:
 2520              	.LBB2332:
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 2521              		.loc 2 422 51 is_stmt 0 view .LVU655
 2522 002a 0123     		movs	r3, #1
 2523              	.LVL112:
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 2524              		.loc 2 419 4 view .LVU656
ARM GAS  /tmp/ccvzGucR.s 			page 124


 2525 002c C0EDC17A 		vstr.32	s15, [r0, #772]
 2526 0030 80EDC27A 		vstr.32	s14, [r0, #776]
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 2527              		.loc 2 422 51 view .LVU657
 2528 0034 80F80C33 		strb	r3, [r0, #780]
 2529              	.LVL113:
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 2530              		.loc 2 422 51 view .LVU658
 2531              	.LBE2332:
 2532              	.LBE2333:
 2533              	.LBE2335:
 2534              	.LBE2340:
 281:Src/motor.cpp **** }
 2535              		.loc 1 281 1 view .LVU659
 2536 0038 7047     		bx	lr
 2537              		.cfi_endproc
 2538              	.LFE4964:
 2540 003a 00BF     		.section	.text._ZN5Motor13DRV8301_setupEv,"ax",%progbits
 2541              		.align	1
 2542              		.p2align 2,,3
 2543              		.global	_ZN5Motor13DRV8301_setupEv
 2544              		.syntax unified
 2545              		.thumb
 2546              		.thumb_func
 2547              		.fpu fpv4-sp-d16
 2549              	_ZN5Motor13DRV8301_setupEv:
 2550              	.LVL114:
 2551              	.LFB4969:
 282:Src/motor.cpp **** 
 283:Src/motor.cpp **** // @brief Set up the gate drivers
 284:Src/motor.cpp **** void Motor::DRV8301_setup() {
 2552              		.loc 1 284 29 is_stmt 1 view -0
 2553              		.cfi_startproc
 2554              		@ args = 0, pretend = 0, frame = 0
 2555              		@ frame_needed = 0, uses_anonymous_args = 0
 2556              		@ link register save eliminated.
 285:Src/motor.cpp ****     // for reference:
 286:Src/motor.cpp ****     // 20V/V on 500uOhm gives a range of +/- 150A
 287:Src/motor.cpp ****     // 40V/V on 500uOhm gives a range of +/- 75A
 288:Src/motor.cpp ****     // 20V/V on 666uOhm gives a range of +/- 110A
 289:Src/motor.cpp ****     // 40V/V on 666uOhm gives a range of +/- 55A
 290:Src/motor.cpp **** 
 291:Src/motor.cpp ****     // Solve for exact gain, then snap down to have equal or larger range as requested
 292:Src/motor.cpp ****     // or largest possible range otherwise
 293:Src/motor.cpp ****     constexpr float kMargin = 0.90f;
 2557              		.loc 1 293 5 view .LVU661
 294:Src/motor.cpp **** 
 295:Src/motor.cpp ****     constexpr float max_output_swing = 1.35f; // [V] out of amplifier
 2558              		.loc 1 295 5 view .LVU662
 296:Src/motor.cpp ****     float max_unity_gain_current = kMargin * max_output_swing * hw_config_.shunt_conductance; // [A
 2559              		.loc 1 296 5 view .LVU663
 297:Src/motor.cpp **** 
 298:Src/motor.cpp ****     // Clip all current control to actual usable range
 299:Src/motor.cpp ****     max_allowed_current_ = max_unity_gain_current * phase_current_rev_gain_;
 2560              		.loc 1 299 5 view .LVU664
 296:Src/motor.cpp ****     float max_unity_gain_current = kMargin * max_output_swing * hw_config_.shunt_conductance; // [A
 2561              		.loc 1 296 76 is_stmt 0 view .LVU665
ARM GAS  /tmp/ccvzGucR.s 			page 125


 2562 0000 0368     		ldr	r3, [r0]
 296:Src/motor.cpp ****     float max_unity_gain_current = kMargin * max_output_swing * hw_config_.shunt_conductance; // [A
 2563              		.loc 1 296 11 view .LVU666
 2564 0002 9FED096A 		vldr.32	s12, .L72
 2565 0006 D3ED027A 		vldr.32	s15, [r3, #8]
 2566              		.loc 1 299 51 view .LVU667
 2567 000a D0ED156A 		vldr.32	s13, [r0, #84]
 300:Src/motor.cpp ****     // Set trip level
 301:Src/motor.cpp ****     max_dc_calib_ = 0.1f * max_allowed_current_;
 2568              		.loc 1 301 26 view .LVU668
 2569 000e 9FED077A 		vldr.32	s14, .L72+4
 296:Src/motor.cpp **** 
 2570              		.loc 1 296 11 view .LVU669
 2571 0012 67EE867A 		vmul.f32	s15, s15, s12
 2572              	.LVL115:
 299:Src/motor.cpp ****     // Set trip level
 2573              		.loc 1 299 51 view .LVU670
 2574 0016 67EEA67A 		vmul.f32	s15, s15, s13
 2575              	.LVL116:
 2576              		.loc 1 301 26 view .LVU671
 2577 001a 27EE877A 		vmul.f32	s14, s15, s14
 299:Src/motor.cpp ****     // Set trip level
 2578              		.loc 1 299 26 view .LVU672
 2579 001e C0EDBD7A 		vstr.32	s15, [r0, #756]
 2580              		.loc 1 301 5 is_stmt 1 view .LVU673
 2581              		.loc 1 301 19 is_stmt 0 view .LVU674
 2582 0022 80EDBE7A 		vstr.32	s14, [r0, #760]
 302:Src/motor.cpp **** 
 303:Src/motor.cpp ****    
 304:Src/motor.cpp **** }
 2583              		.loc 1 304 1 view .LVU675
 2584 0026 7047     		bx	lr
 2585              	.L73:
 2586              		.align	2
 2587              	.L72:
 2588 0028 1F859B3F 		.word	1067156767
 2589 002c CDCCCC3D 		.word	1036831949
 2590              		.cfi_endproc
 2591              	.LFE4969:
 2593              		.section	.text._ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE,"ax",%progbits
 2594              		.align	1
 2595              		.p2align 2,,3
 2596              		.global	_ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE
 2597              		.syntax unified
 2598              		.thumb
 2599              		.thumb_func
 2600              		.fpu fpv4-sp-d16
 2602              	_ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE:
 2603              	.LVL117:
 2604              	.LFB4970:
 305:Src/motor.cpp **** 
 306:Src/motor.cpp **** void Motor::set_error(ODriveIntf::MotorIntf::Error error){
 2605              		.loc 1 306 58 is_stmt 1 view -0
 2606              		.cfi_startproc
 2607              		@ args = 0, pretend = 0, frame = 0
 2608              		@ frame_needed = 0, uses_anonymous_args = 0
 307:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
ARM GAS  /tmp/ccvzGucR.s 			page 126


 2609              		.loc 1 307 5 view .LVU677
 306:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 2610              		.loc 1 306 58 is_stmt 0 view .LVU678
 2611 0000 10B5     		push	{r4, lr}
 2612              	.LCFI38:
 2613              		.cfi_def_cfa_offset 8
 2614              		.cfi_offset 4, -8
 2615              		.cfi_offset 14, -4
 2616              		.loc 1 307 86 view .LVU679
 2617 0002 426B     		ldr	r2, [r0, #52]
 308:Src/motor.cpp **** 
 309:Src/motor.cpp ****     
 310:Src/motor.cpp ****     axis_->error_ = Axis::ERROR_MOTOR_FAILED;
 2618              		.loc 1 310 19 view .LVU680
 2619 0004 8468     		ldr	r4, [r0, #8]
 307:Src/motor.cpp **** 
 2620              		.loc 1 307 86 view .LVU681
 2621 0006 1143     		orrs	r1, r1, r2
 2622              	.LVL118:
 2623              		.loc 1 310 19 view .LVU682
 2624 0008 4023     		movs	r3, #64
 307:Src/motor.cpp **** 
 2625              		.loc 1 307 12 view .LVU683
 2626 000a 4163     		str	r1, [r0, #52]
 2627              		.loc 1 310 5 is_stmt 1 view .LVU684
 2628              		.loc 1 310 19 is_stmt 0 view .LVU685
 2629 000c C4F85C31 		str	r3, [r4, #348]
 311:Src/motor.cpp **** 
 312:Src/motor.cpp ****     safety_critical_disarm_motor_pwm(*this);
 2630              		.loc 1 312 5 is_stmt 1 view .LVU686
 2631              		.loc 1 312 37 is_stmt 0 view .LVU687
 2632 0010 FFF7FEFF 		bl	safety_critical_disarm_motor_pwm
 2633              	.LVL119:
 313:Src/motor.cpp ****     update_brake_current();
 2634              		.loc 1 313 5 is_stmt 1 view .LVU688
 314:Src/motor.cpp **** }
 2635              		.loc 1 314 1 is_stmt 0 view .LVU689
 2636 0014 BDE81040 		pop	{r4, lr}
 2637              	.LCFI39:
 2638              		.cfi_restore 14
 2639              		.cfi_restore 4
 2640              		.cfi_def_cfa_offset 0
 313:Src/motor.cpp ****     update_brake_current();
 2641              		.loc 1 313 25 view .LVU690
 2642 0018 FFF7FEBF 		b	update_brake_current
 2643              	.LVL120:
 2644              		.cfi_endproc
 2645              	.LFE4970:
 2647              		.section	.text._ZN5Motor15check_DRV_faultEv,"ax",%progbits
 2648              		.align	1
 2649              		.p2align 2,,3
 2650              		.global	_ZN5Motor15check_DRV_faultEv
 2651              		.syntax unified
 2652              		.thumb
 2653              		.thumb_func
 2654              		.fpu fpv4-sp-d16
 2656              	_ZN5Motor15check_DRV_faultEv:
ARM GAS  /tmp/ccvzGucR.s 			page 127


 2657              	.LVL121:
 2658              	.LFB4971:
 315:Src/motor.cpp **** 
 316:Src/motor.cpp **** bool Motor::check_DRV_fault() {
 2659              		.loc 1 316 31 is_stmt 1 view -0
 2660              		.cfi_startproc
 2661              		@ args = 0, pretend = 0, frame = 0
 2662              		@ frame_needed = 0, uses_anonymous_args = 0
 2663              		@ link register save eliminated.
 317:Src/motor.cpp ****     return false; //
 2664              		.loc 1 317 5 view .LVU692
 318:Src/motor.cpp **** }
 2665              		.loc 1 318 1 is_stmt 0 view .LVU693
 2666 0000 0020     		movs	r0, #0
 2667              	.LVL122:
 2668              		.loc 1 318 1 view .LVU694
 2669 0002 7047     		bx	lr
 2670              		.cfi_endproc
 2671              	.LFE4971:
 2673              		.section	.text._ZN5Motor9do_checksEv,"ax",%progbits
 2674              		.align	1
 2675              		.p2align 2,,3
 2676              		.global	_ZN5Motor9do_checksEv
 2677              		.syntax unified
 2678              		.thumb
 2679              		.thumb_func
 2680              		.fpu fpv4-sp-d16
 2682              	_ZN5Motor9do_checksEv:
 2683              	.LVL123:
 2684              	.LFB4972:
 319:Src/motor.cpp **** 
 320:Src/motor.cpp **** bool Motor::do_checks() {
 2685              		.loc 1 320 25 is_stmt 1 view -0
 2686              		.cfi_startproc
 2687              		@ args = 0, pretend = 0, frame = 0
 2688              		@ frame_needed = 0, uses_anonymous_args = 0
 321:Src/motor.cpp ****     if (!check_DRV_fault()) {
 2689              		.loc 1 321 5 view .LVU696
 2690              	.LBB2341:
 2691              	.LBB2342:
 307:Src/motor.cpp **** 
 2692              		.loc 1 307 86 is_stmt 0 view .LVU697
 2693 0000 436B     		ldr	r3, [r0, #52]
 310:Src/motor.cpp **** 
 2694              		.loc 1 310 19 view .LVU698
 2695 0002 8268     		ldr	r2, [r0, #8]
 2696              	.LBE2342:
 2697              	.LBE2341:
 320:Src/motor.cpp ****     if (!check_DRV_fault()) {
 2698              		.loc 1 320 25 view .LVU699
 2699 0004 10B5     		push	{r4, lr}
 2700              	.LCFI40:
 2701              		.cfi_def_cfa_offset 8
 2702              		.cfi_offset 4, -8
 2703              		.cfi_offset 14, -4
 2704              	.LBB2345:
 2705              	.LBB2343:
ARM GAS  /tmp/ccvzGucR.s 			page 128


 310:Src/motor.cpp **** 
 2706              		.loc 1 310 19 view .LVU700
 2707 0006 4021     		movs	r1, #64
 307:Src/motor.cpp **** 
 2708              		.loc 1 307 86 view .LVU701
 2709 0008 43F00803 		orr	r3, r3, #8
 2710              	.LBE2343:
 2711              	.LBE2345:
 320:Src/motor.cpp ****     if (!check_DRV_fault()) {
 2712              		.loc 1 320 25 view .LVU702
 2713 000c 0446     		mov	r4, r0
 2714              	.LVL124:
 317:Src/motor.cpp **** }
 2715              		.loc 1 317 5 is_stmt 1 view .LVU703
 322:Src/motor.cpp ****         set_error(ODriveIntf::MotorIntf::ERROR_DRV_FAULT);
 2716              		.loc 1 322 9 view .LVU704
 2717              	.LBB2346:
 2718              	.LBI2341:
 306:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 2719              		.loc 1 306 6 view .LVU705
 2720              	.LBB2344:
 307:Src/motor.cpp **** 
 2721              		.loc 1 307 5 view .LVU706
 307:Src/motor.cpp **** 
 2722              		.loc 1 307 12 is_stmt 0 view .LVU707
 2723 000e 4363     		str	r3, [r0, #52]
 310:Src/motor.cpp **** 
 2724              		.loc 1 310 5 is_stmt 1 view .LVU708
 310:Src/motor.cpp **** 
 2725              		.loc 1 310 19 is_stmt 0 view .LVU709
 2726 0010 C2F85C11 		str	r1, [r2, #348]
 312:Src/motor.cpp ****     update_brake_current();
 2727              		.loc 1 312 5 is_stmt 1 view .LVU710
 312:Src/motor.cpp ****     update_brake_current();
 2728              		.loc 1 312 37 is_stmt 0 view .LVU711
 2729 0014 FFF7FEFF 		bl	safety_critical_disarm_motor_pwm
 2730              	.LVL125:
 313:Src/motor.cpp **** }
 2731              		.loc 1 313 5 is_stmt 1 view .LVU712
 313:Src/motor.cpp **** }
 2732              		.loc 1 313 25 is_stmt 0 view .LVU713
 2733 0018 FFF7FEFF 		bl	update_brake_current
 2734              	.LVL126:
 313:Src/motor.cpp **** }
 2735              		.loc 1 313 25 view .LVU714
 2736              	.LBE2344:
 2737              	.LBE2346:
 323:Src/motor.cpp ****         axis_->axis_state_.erro = Axis::ENCOS_ERRO::ENCOS_ERROR_DRV_FAULT;
 2738              		.loc 1 323 9 is_stmt 1 view .LVU715
 2739              		.loc 1 323 33 is_stmt 0 view .LVU716
 2740 001c A368     		ldr	r3, [r4, #8]
 2741 001e 0722     		movs	r2, #7
 2742 0020 83F89621 		strb	r2, [r3, #406]
 324:Src/motor.cpp ****         return false;
 2743              		.loc 1 324 9 is_stmt 1 view .LVU717
 325:Src/motor.cpp ****     }
 326:Src/motor.cpp **** 
ARM GAS  /tmp/ccvzGucR.s 			page 129


 327:Src/motor.cpp ****     return true;
 328:Src/motor.cpp **** }
 2744              		.loc 1 328 1 is_stmt 0 view .LVU718
 2745 0024 0020     		movs	r0, #0
 2746 0026 10BD     		pop	{r4, pc}
 2747              		.loc 1 328 1 view .LVU719
 2748              		.cfi_endproc
 2749              	.LFE4972:
 2751              		.section	.text._ZN5Motor21effective_current_limEv,"ax",%progbits
 2752              		.align	1
 2753              		.p2align 2,,3
 2754              		.global	_ZN5Motor21effective_current_limEv
 2755              		.syntax unified
 2756              		.thumb
 2757              		.thumb_func
 2758              		.fpu fpv4-sp-d16
 2760              	_ZN5Motor21effective_current_limEv:
 2761              	.LVL127:
 2762              	.LFB4973:
 329:Src/motor.cpp **** 
 330:Src/motor.cpp **** float Motor::effective_current_lim() {
 2763              		.loc 1 330 38 is_stmt 1 view -0
 2764              		.cfi_startproc
 2765              		@ args = 0, pretend = 0, frame = 0
 2766              		@ frame_needed = 0, uses_anonymous_args = 0
 331:Src/motor.cpp ****     // Configured limit
 332:Src/motor.cpp ****     float current_lim = config_.current_lim;
 2767              		.loc 1 332 5 view .LVU721
 330:Src/motor.cpp ****     // Configured limit
 2768              		.loc 1 330 38 is_stmt 0 view .LVU722
 2769 0000 38B5     		push	{r3, r4, r5, lr}
 2770              	.LCFI41:
 2771              		.cfi_def_cfa_offset 16
 2772              		.cfi_offset 3, -16
 2773              		.cfi_offset 4, -12
 2774              		.cfi_offset 5, -8
 2775              		.cfi_offset 14, -4
 2776              		.loc 1 332 33 view .LVU723
 2777 0002 D0E90125 		ldrd	r2, r5, [r0, #4]
 333:Src/motor.cpp ****     // Hardware limit
 334:Src/motor.cpp ****     if (axis_->motor_.config_.motor_type == Motor::MOTOR_TYPE_GIMBAL) {
 2778              		.loc 1 334 16 view .LVU724
 2779 0006 EB6E     		ldr	r3, [r5, #108]
 332:Src/motor.cpp ****     // Hardware limit
 2780              		.loc 1 332 33 view .LVU725
 2781 0008 92ED0B0A 		vldr.32	s0, [r2, #44]
 2782              	.LVL128:
 2783              		.loc 1 334 5 is_stmt 1 view .LVU726
 2784              		.loc 1 334 31 is_stmt 0 view .LVU727
 2785 000c 5A68     		ldr	r2, [r3, #4]
 2786              		.loc 1 334 5 view .LVU728
 2787 000e 92F82820 		ldrb	r2, [r2, #40]	@ zero_extendqisi2
 2788 0012 022A     		cmp	r2, #2
 330:Src/motor.cpp ****     // Configured limit
 2789              		.loc 1 330 38 view .LVU729
 2790 0014 2DED028B 		vpush.64	{d8}
 2791              	.LCFI42:
ARM GAS  /tmp/ccvzGucR.s 			page 130


 2792              		.cfi_def_cfa_offset 24
 2793              		.cfi_offset 80, -24
 2794              		.cfi_offset 81, -20
 330:Src/motor.cpp ****     // Configured limit
 2795              		.loc 1 330 38 view .LVU730
 2796 0018 0446     		mov	r4, r0
 2797              		.loc 1 334 5 view .LVU731
 2798 001a 2AD0     		beq	.L87
 335:Src/motor.cpp ****         current_lim = std::min(current_lim, 0.98f*one_by_sqrt3*vbus_voltage); //gimbal motor is vol
 336:Src/motor.cpp ****     } else {
 337:Src/motor.cpp ****         current_lim = std::min(current_lim, axis_->motor_.max_allowed_current_);
 2799              		.loc 1 337 9 is_stmt 1 view .LVU732
 2800              	.LVL129:
 2801              	.LBB2359:
 2802              	.LBI2359:
 2803              		.file 13 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** /*
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
ARM GAS  /tmp/ccvzGucR.s 			page 131


  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  */
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  */
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** # include <type_traits>
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** # include <compare>
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** {
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /*
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    */
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline int
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
ARM GAS  /tmp/ccvzGucR.s 			page 132


  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return 0;
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       else
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __iter_swap
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static void
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<>
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static void
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif // C++03
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline void
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
ARM GAS  /tmp/ccvzGucR.s 			page 133


 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #else
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
ARM GAS  /tmp/ccvzGucR.s 			page 134


 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __first2;
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Tp>
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline const _Tp&
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 2804              		.loc 13 230 5 view .LVU733
 2805              	.LBB2360:
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       if (__b < __a)
 2806              		.loc 13 235 15 is_stmt 0 view .LVU734
 2807 001c D3EDBD8A 		vldr.32	s17, [r3, #756]
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __a;
 2808              		.loc 13 237 14 view .LVU735
 2809 0020 B4EEE80A 		vcmpe.f32	s0, s17
 2810 0024 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2811 0028 D8BF     		it	le
 2812 002a F0EE408A 		vmovle.f32	s17, s0
 2813              	.LVL130:
 2814              	.L82:
 2815              		.loc 13 237 14 view .LVU736
 2816              	.LBE2360:
 2817              	.LBE2359:
 338:Src/motor.cpp ****     }
 339:Src/motor.cpp **** 
 340:Src/motor.cpp ****     // Apply axis current limiters
 341:Src/motor.cpp ****     for (const CurrentLimiter* const limiter : axis_->current_limiters_) {
 2818              		.loc 1 341 5 is_stmt 1 view .LVU737
 2819              	.LBB2361:
 2820              		.loc 1 341 55 view .LVU738
 2821              		.loc 1 341 38 is_stmt 0 view .LVU739
 2822 002e D5F84001 		ldr	r0, [r5, #320]
 2823              	.LVL131:
 342:Src/motor.cpp ****         current_lim = std::min(current_lim, limiter->get_current_limit(config_.current_lim));
 2824              		.loc 1 342 9 is_stmt 1 view .LVU740
 2825              		.loc 1 342 91 is_stmt 0 view .LVU741
 2826 0032 0368     		ldr	r3, [r0]
 2827              		.loc 1 342 71 view .LVU742
 2828 0034 9B68     		ldr	r3, [r3, #8]
 2829 0036 9847     		blx	r3
 2830              	.LVL132:
ARM GAS  /tmp/ccvzGucR.s 			page 135


 341:Src/motor.cpp ****         current_lim = std::min(current_lim, limiter->get_current_limit(config_.current_lim));
 2831              		.loc 1 341 38 view .LVU743
 2832 0038 D5F84401 		ldr	r0, [r5, #324]
 2833              		.loc 1 342 71 view .LVU744
 2834 003c 6268     		ldr	r2, [r4, #4]
 2835              		.loc 1 342 91 view .LVU745
 2836 003e 0368     		ldr	r3, [r0]
 2837              	.LBB2362:
 2838              	.LBB2363:
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 2839              		.loc 13 235 7 view .LVU746
 2840 0040 F4EEC08A 		vcmpe.f32	s17, s0
 2841 0044 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2842              	.LBE2363:
 2843              	.LBE2362:
 2844              		.loc 1 342 71 view .LVU747
 2845 0048 B0EE408A 		vmov.f32	s16, s0
 2846              	.LVL133:
 2847              	.LBB2366:
 2848              	.LBI2362:
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 2849              		.loc 13 230 5 is_stmt 1 view .LVU748
 2850              	.LBE2366:
 2851              		.loc 1 342 71 is_stmt 0 view .LVU749
 2852 004c 9B68     		ldr	r3, [r3, #8]
 2853 004e 92ED0B0A 		vldr.32	s0, [r2, #44]
 2854              	.LBB2367:
 2855              	.LBB2364:
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 2856              		.loc 13 235 7 view .LVU750
 2857 0052 D8BF     		it	le
 2858 0054 B0EE688A 		vmovle.f32	s16, s17
 2859              	.LVL134:
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 2860              		.loc 13 235 7 view .LVU751
 2861              	.LBE2364:
 2862              	.LBE2367:
 341:Src/motor.cpp ****         current_lim = std::min(current_lim, limiter->get_current_limit(config_.current_lim));
 2863              		.loc 1 341 5 is_stmt 1 view .LVU752
 341:Src/motor.cpp ****         current_lim = std::min(current_lim, limiter->get_current_limit(config_.current_lim));
 2864              		.loc 1 341 55 view .LVU753
 2865              		.loc 1 342 9 view .LVU754
 2866              		.loc 1 342 71 is_stmt 0 view .LVU755
 2867 0058 9847     		blx	r3
 2868              	.LVL135:
 2869              	.LBB2368:
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 2870              		.loc 13 230 5 is_stmt 1 view .LVU756
 2871              	.LBB2365:
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 2872              		.loc 13 235 7 is_stmt 0 view .LVU757
 2873 005a B4EEC80A 		vcmpe.f32	s0, s16
 2874 005e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2875 0062 58BF     		it	pl
 2876 0064 B0EE480A 		vmovpl.f32	s0, s16
 2877              	.LVL136:
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
ARM GAS  /tmp/ccvzGucR.s 			page 136


 2878              		.loc 13 235 7 view .LVU758
 2879              	.LBE2365:
 2880              	.LBE2368:
 341:Src/motor.cpp ****         current_lim = std::min(current_lim, limiter->get_current_limit(config_.current_lim));
 2881              		.loc 1 341 5 is_stmt 1 view .LVU759
 341:Src/motor.cpp ****         current_lim = std::min(current_lim, limiter->get_current_limit(config_.current_lim));
 2882              		.loc 1 341 55 view .LVU760
 341:Src/motor.cpp ****         current_lim = std::min(current_lim, limiter->get_current_limit(config_.current_lim));
 2883              		.loc 1 341 55 is_stmt 0 view .LVU761
 2884              	.LBE2361:
 343:Src/motor.cpp ****     }
 344:Src/motor.cpp **** 
 345:Src/motor.cpp ****     effective_current_lim_ = current_lim;
 2885              		.loc 1 345 5 is_stmt 1 view .LVU762
 346:Src/motor.cpp **** 
 347:Src/motor.cpp ****     return effective_current_lim_;
 348:Src/motor.cpp **** }
 2886              		.loc 1 348 1 is_stmt 0 view .LVU763
 2887 0068 BDEC028B 		vldm	sp!, {d8}
 2888              	.LCFI43:
 2889              		.cfi_remember_state
 2890              		.cfi_restore 80
 2891              		.cfi_restore 81
 2892              		.cfi_def_cfa_offset 16
 345:Src/motor.cpp **** 
 2893              		.loc 1 345 28 view .LVU764
 2894 006c 84ED290A 		vstr.32	s0, [r4, #164]
 347:Src/motor.cpp **** }
 2895              		.loc 1 347 5 is_stmt 1 view .LVU765
 2896              	.LVL137:
 2897              		.loc 1 348 1 is_stmt 0 view .LVU766
 2898 0070 38BD     		pop	{r3, r4, r5, pc}
 2899              	.LVL138:
 2900              	.L87:
 2901              	.LCFI44:
 2902              		.cfi_restore_state
 335:Src/motor.cpp ****     } else {
 2903              		.loc 1 335 9 is_stmt 1 view .LVU767
 335:Src/motor.cpp ****     } else {
 2904              		.loc 1 335 63 is_stmt 0 view .LVU768
 2905 0072 074B     		ldr	r3, .L88
 2906 0074 DFED077A 		vldr.32	s15, .L88+4
 2907 0078 D3ED008A 		vldr.32	s17, [r3]
 2908 007c 68EEA78A 		vmul.f32	s17, s17, s15
 2909              	.LVL139:
 2910              	.LBB2369:
 2911              	.LBI2369:
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 2912              		.loc 13 230 5 is_stmt 1 view .LVU769
 2913              	.LBB2370:
 2914              		.loc 13 237 14 is_stmt 0 view .LVU770
 2915 0080 B4EEE80A 		vcmpe.f32	s0, s17
 2916 0084 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2917 0088 D8BF     		it	le
 2918 008a F0EE408A 		vmovle.f32	s17, s0
 2919 008e CEE7     		b	.L82
 2920              	.L89:
ARM GAS  /tmp/ccvzGucR.s 			page 137


 2921              		.align	2
 2922              	.L88:
 2923 0090 00000000 		.word	vbus_voltage
 2924 0094 7CD8103F 		.word	1058068604
 2925              	.LBE2370:
 2926              	.LBE2369:
 2927              		.cfi_endproc
 2928              	.LFE4973:
 2930              		.section	.text._ZN5Motor20max_available_torqueEv,"ax",%progbits
 2931              		.align	1
 2932              		.p2align 2,,3
 2933              		.global	_ZN5Motor20max_available_torqueEv
 2934              		.syntax unified
 2935              		.thumb
 2936              		.thumb_func
 2937              		.fpu fpv4-sp-d16
 2939              	_ZN5Motor20max_available_torqueEv:
 2940              	.LVL140:
 2941              	.LFB4974:
 349:Src/motor.cpp **** 
 350:Src/motor.cpp **** //return the maximum available torque for the motor.
 351:Src/motor.cpp **** //Note - for ACIM motors, available torque is allowed to be 0.
 352:Src/motor.cpp **** float Motor::max_available_torque() {
 2942              		.loc 1 352 37 is_stmt 1 view -0
 2943              		.cfi_startproc
 2944              		@ args = 0, pretend = 0, frame = 0
 2945              		@ frame_needed = 0, uses_anonymous_args = 0
 353:Src/motor.cpp **** 
 354:Src/motor.cpp ****     float max_torque = effective_current_lim() * config_.torque_constant;
 2946              		.loc 1 354 5 view .LVU772
 352:Src/motor.cpp **** 
 2947              		.loc 1 352 37 is_stmt 0 view .LVU773
 2948 0000 38B5     		push	{r3, r4, r5, lr}
 2949              	.LCFI45:
 2950              		.cfi_def_cfa_offset 16
 2951              		.cfi_offset 3, -16
 2952              		.cfi_offset 4, -12
 2953              		.cfi_offset 5, -8
 2954              		.cfi_offset 14, -4
 2955              	.LBB2387:
 2956              	.LBB2388:
 332:Src/motor.cpp ****     // Hardware limit
 2957              		.loc 1 332 33 view .LVU774
 2958 0002 D0E90125 		ldrd	r2, r5, [r0, #4]
 334:Src/motor.cpp ****         current_lim = std::min(current_lim, 0.98f*one_by_sqrt3*vbus_voltage); //gimbal motor is vol
 2959              		.loc 1 334 16 view .LVU775
 2960 0006 EB6E     		ldr	r3, [r5, #108]
 332:Src/motor.cpp ****     // Hardware limit
 2961              		.loc 1 332 33 view .LVU776
 2962 0008 92ED0B0A 		vldr.32	s0, [r2, #44]
 334:Src/motor.cpp ****         current_lim = std::min(current_lim, 0.98f*one_by_sqrt3*vbus_voltage); //gimbal motor is vol
 2963              		.loc 1 334 31 view .LVU777
 2964 000c 5A68     		ldr	r2, [r3, #4]
 334:Src/motor.cpp ****         current_lim = std::min(current_lim, 0.98f*one_by_sqrt3*vbus_voltage); //gimbal motor is vol
 2965              		.loc 1 334 5 view .LVU778
 2966 000e 92F82820 		ldrb	r2, [r2, #40]	@ zero_extendqisi2
 2967 0012 022A     		cmp	r2, #2
ARM GAS  /tmp/ccvzGucR.s 			page 138


 2968              	.LBE2388:
 2969              	.LBE2387:
 352:Src/motor.cpp **** 
 2970              		.loc 1 352 37 view .LVU779
 2971 0014 2DED028B 		vpush.64	{d8}
 2972              	.LCFI46:
 2973              		.cfi_def_cfa_offset 24
 2974              		.cfi_offset 80, -24
 2975              		.cfi_offset 81, -20
 352:Src/motor.cpp **** 
 2976              		.loc 1 352 37 view .LVU780
 2977 0018 0446     		mov	r4, r0
 2978              	.LVL141:
 2979              	.LBB2410:
 2980              	.LBI2387:
 330:Src/motor.cpp ****     // Configured limit
 2981              		.loc 1 330 7 is_stmt 1 view .LVU781
 2982              	.LBB2405:
 332:Src/motor.cpp ****     // Hardware limit
 2983              		.loc 1 332 5 view .LVU782
 334:Src/motor.cpp ****         current_lim = std::min(current_lim, 0.98f*one_by_sqrt3*vbus_voltage); //gimbal motor is vol
 2984              		.loc 1 334 5 view .LVU783
 2985 001a 44D0     		beq	.L102
 337:Src/motor.cpp ****     }
 2986              		.loc 1 337 9 view .LVU784
 2987              	.LVL142:
 2988              	.LBB2389:
 2989              	.LBI2389:
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 2990              		.loc 13 230 5 view .LVU785
 2991              	.LBB2390:
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 2992              		.loc 13 235 15 is_stmt 0 view .LVU786
 2993 001c D3EDBD8A 		vldr.32	s17, [r3, #756]
 2994              		.loc 13 237 14 view .LVU787
 2995 0020 B4EEE80A 		vcmpe.f32	s0, s17
 2996 0024 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2997 0028 D8BF     		it	le
 2998 002a F0EE408A 		vmovle.f32	s17, s0
 2999              	.LVL143:
 3000              	.L93:
 3001              		.loc 13 237 14 view .LVU788
 3002              	.LBE2390:
 3003              	.LBE2389:
 341:Src/motor.cpp ****         current_lim = std::min(current_lim, limiter->get_current_limit(config_.current_lim));
 3004              		.loc 1 341 5 is_stmt 1 view .LVU789
 3005              	.LBB2391:
 341:Src/motor.cpp ****         current_lim = std::min(current_lim, limiter->get_current_limit(config_.current_lim));
 3006              		.loc 1 341 55 view .LVU790
 341:Src/motor.cpp ****         current_lim = std::min(current_lim, limiter->get_current_limit(config_.current_lim));
 3007              		.loc 1 341 38 is_stmt 0 view .LVU791
 3008 002e D5F84001 		ldr	r0, [r5, #320]
 3009              	.LVL144:
 342:Src/motor.cpp ****     }
 3010              		.loc 1 342 9 is_stmt 1 view .LVU792
 342:Src/motor.cpp ****     }
 3011              		.loc 1 342 91 is_stmt 0 view .LVU793
ARM GAS  /tmp/ccvzGucR.s 			page 139


 3012 0032 0368     		ldr	r3, [r0]
 342:Src/motor.cpp ****     }
 3013              		.loc 1 342 71 view .LVU794
 3014 0034 9B68     		ldr	r3, [r3, #8]
 3015 0036 9847     		blx	r3
 3016              	.LVL145:
 341:Src/motor.cpp ****         current_lim = std::min(current_lim, limiter->get_current_limit(config_.current_lim));
 3017              		.loc 1 341 38 view .LVU795
 3018 0038 D5F84401 		ldr	r0, [r5, #324]
 342:Src/motor.cpp ****     }
 3019              		.loc 1 342 71 view .LVU796
 3020 003c 6268     		ldr	r2, [r4, #4]
 342:Src/motor.cpp ****     }
 3021              		.loc 1 342 91 view .LVU797
 3022 003e 0368     		ldr	r3, [r0]
 3023              	.LBB2392:
 3024              	.LBB2393:
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 3025              		.loc 13 235 7 view .LVU798
 3026 0040 B4EEE80A 		vcmpe.f32	s0, s17
 3027 0044 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3028              	.LBE2393:
 3029              	.LBE2392:
 342:Src/motor.cpp ****     }
 3030              		.loc 1 342 71 view .LVU799
 3031 0048 9B68     		ldr	r3, [r3, #8]
 3032 004a B0EE408A 		vmov.f32	s16, s0
 3033              	.LVL146:
 3034              	.LBB2397:
 3035              	.LBI2392:
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 3036              		.loc 13 230 5 is_stmt 1 view .LVU800
 3037              	.LBE2397:
 342:Src/motor.cpp ****     }
 3038              		.loc 1 342 71 is_stmt 0 view .LVU801
 3039 004e 92ED0B0A 		vldr.32	s0, [r2, #44]
 3040              	.LBB2398:
 3041              	.LBB2394:
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 3042              		.loc 13 235 7 view .LVU802
 3043 0052 58BF     		it	pl
 3044 0054 B0EE688A 		vmovpl.f32	s16, s17
 3045              	.LVL147:
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 3046              		.loc 13 235 7 view .LVU803
 3047              	.LBE2394:
 3048              	.LBE2398:
 341:Src/motor.cpp ****         current_lim = std::min(current_lim, limiter->get_current_limit(config_.current_lim));
 3049              		.loc 1 341 5 is_stmt 1 view .LVU804
 341:Src/motor.cpp ****         current_lim = std::min(current_lim, limiter->get_current_limit(config_.current_lim));
 3050              		.loc 1 341 55 view .LVU805
 342:Src/motor.cpp ****     }
 3051              		.loc 1 342 9 view .LVU806
 342:Src/motor.cpp ****     }
 3052              		.loc 1 342 71 is_stmt 0 view .LVU807
 3053 0058 9847     		blx	r3
 3054              	.LVL148:
ARM GAS  /tmp/ccvzGucR.s 			page 140


 342:Src/motor.cpp ****     }
 3055              		.loc 1 342 71 view .LVU808
 3056              	.LBE2391:
 3057              	.LBE2405:
 3058              	.LBE2410:
 3059              		.loc 1 354 50 view .LVU809
 3060 005a 6368     		ldr	r3, [r4, #4]
 3061              	.LBB2411:
 3062              	.LBB2406:
 3063              	.LBB2401:
 342:Src/motor.cpp ****     }
 3064              		.loc 1 342 71 view .LVU810
 3065 005c F0EE407A 		vmov.f32	s15, s0
 3066              	.LVL149:
 3067              	.LBB2399:
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 3068              		.loc 13 230 5 is_stmt 1 view .LVU811
 3069              	.LBB2395:
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 3070              		.loc 13 235 7 is_stmt 0 view .LVU812
 3071 0060 B4EEE78A 		vcmpe.f32	s16, s15
 3072 0064 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3073              	.LBE2395:
 3074              	.LBE2399:
 3075              	.LBE2401:
 3076              	.LBE2406:
 3077              	.LBE2411:
 3078              		.loc 1 354 48 view .LVU813
 3079 0068 93ED080A 		vldr.32	s0, [r3, #32]
 3080              	.LBB2412:
 3081              	.LBB2407:
 3082              	.LBB2402:
 3083              	.LBB2400:
 3084              	.LBB2396:
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 3085              		.loc 13 235 7 view .LVU814
 3086 006c D8BF     		it	le
 3087 006e F0EE487A 		vmovle.f32	s15, s16
 3088              	.LVL150:
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 3089              		.loc 13 235 7 view .LVU815
 3090              	.LBE2396:
 3091              	.LBE2400:
 341:Src/motor.cpp ****         current_lim = std::min(current_lim, limiter->get_current_limit(config_.current_lim));
 3092              		.loc 1 341 5 is_stmt 1 view .LVU816
 341:Src/motor.cpp ****         current_lim = std::min(current_lim, limiter->get_current_limit(config_.current_lim));
 3093              		.loc 1 341 55 view .LVU817
 341:Src/motor.cpp ****         current_lim = std::min(current_lim, limiter->get_current_limit(config_.current_lim));
 3094              		.loc 1 341 55 is_stmt 0 view .LVU818
 3095              	.LBE2402:
 345:Src/motor.cpp **** 
 3096              		.loc 1 345 5 is_stmt 1 view .LVU819
 3097              	.LBE2407:
 3098              	.LBE2412:
 3099              		.loc 1 354 48 is_stmt 0 view .LVU820
 3100 0072 27EE800A 		vmul.f32	s0, s15, s0
 3101              	.LBB2413:
ARM GAS  /tmp/ccvzGucR.s 			page 141


 3102              	.LBB2408:
 345:Src/motor.cpp **** 
 3103              		.loc 1 345 28 view .LVU821
 3104 0076 C4ED297A 		vstr.32	s15, [r4, #164]
 347:Src/motor.cpp **** }
 3105              		.loc 1 347 5 is_stmt 1 view .LVU822
 3106              	.LVL151:
 347:Src/motor.cpp **** }
 3107              		.loc 1 347 5 is_stmt 0 view .LVU823
 3108              	.LBE2408:
 3109              	.LBE2413:
 355:Src/motor.cpp ****     max_torque = std::clamp(max_torque, 0.0f, config_.torque_lim);
 3110              		.loc 1 355 5 is_stmt 1 view .LVU824
 3111              	.LBB2414:
 3112              	.LBI2414:
 3113              		.file 14 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // Algorithm implementation -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** /*
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  *
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * Copyright (c) 1994
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * Hewlett-Packard Company
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  *
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * representations about the suitability of this software for any
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  *
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  *
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * Copyright (c) 1996
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  *
ARM GAS  /tmp/ccvzGucR.s 			page 142


  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * representations about the suitability of this software for any
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  */
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** /** @file bits/stl_algo.h
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  */
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #ifndef _STL_ALGO_H
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #define _STL_ALGO_H 1
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #include <cstdlib>	     // for rand
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #include <bits/algorithmfwd.h>
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #include <bits/stl_heap.h>
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #include <bits/stl_tempbuf.h>  // for _Temporary_buffer
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #include <bits/predefined_ops.h>
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #if __cplusplus >= 201103L
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #include <bits/uniform_int_dist.h>
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #endif
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** // See concept_check.h for the __glibcxx_*_requires macros.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** namespace std _GLIBCXX_VISIBILITY(default)
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** {
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// Swaps the median value of *__a, *__b and *__c under __comp to *__result
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Iterator, typename _Compare>
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _Iterator __c, _Compare __comp)
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__comp(__a, __b))
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__b, __c))
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::iter_swap(__result, __b);
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else if (__comp(__a, __c))
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::iter_swap(__result, __c);
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::iter_swap(__result, __a);
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else if (__comp(__a, __c))
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::iter_swap(__result, __a);
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else if (__comp(__b, __c))
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::iter_swap(__result, __c);
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::iter_swap(__result, __b);
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
ARM GAS  /tmp/ccvzGucR.s 			page 143


  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// Provided for stable_partition to use.
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _InputIterator
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __find_if_not(_InputIterator __first, _InputIterator __last,
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _Predicate __pred)
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__find_if(__first, __last,
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			    __gnu_cxx::__ops::__negate(__pred),
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			    std::__iterator_category(__first));
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// Like find_if_not(), but uses and updates a count of the
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// remaining range length instead of comparing against an end
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// iterator.
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate, typename _Distance>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _InputIterator
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __find_if_not_n(_InputIterator __first, _Distance& __len, _Predicate __pred)
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (; __len; --__len,  (void) ++__first)
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (!__pred(__first))
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  break;
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __first;
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // set_difference
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // set_intersection
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // set_symmetric_difference
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // set_union
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // for_each
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // find
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // find_if
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // find_first_of
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // adjacent_find
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // count
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // count_if
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // search
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator1
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _BinaryPredicate  __predicate)
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // Test for empty ranges
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first1 == __last1 || __first2 == __last2)
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __first1;
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // Test for a pattern of length 1.
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator2 __p1(__first2);
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (++__p1 == __last2)
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return std::__find_if(__first1, __last1,
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
ARM GAS  /tmp/ccvzGucR.s 			page 144


 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // General case.
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator1 __current = __first1;
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (;;)
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __first1 =
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::__find_if(__first1, __last1,
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__first1 == __last1)
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return __last1;
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _ForwardIterator2 __p = __p1;
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __current = __first1;
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (++__current == __last1)
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return __last1;
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  while (__predicate(__current, __p))
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (++__p == __last2)
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		return __first1;
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (++__current == __last1)
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		return __last1;
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first1;
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __first1;
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // search_n
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is an helper function for search_n overloaded for forward iterators.
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Integer,
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _UnaryPredicate>
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __search_n_aux(_ForwardIterator __first, _ForwardIterator __last,
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _Integer __count, _UnaryPredicate __unary_pred,
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   std::forward_iterator_tag)
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __first = std::__find_if(__first, __last, __unary_pred);
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first != __last)
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::difference_type
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __n = __count;
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _ForwardIterator __i = __first;
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__i;
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  while (__i != __last && __n != 1 && __unary_pred(__i))
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__i;
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      --__n;
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__n == 1)
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return __first;
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__i == __last)
ARM GAS  /tmp/ccvzGucR.s 			page 145


 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return __last;
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __first = std::__find_if(++__i, __last, __unary_pred);
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __last;
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is an helper function for search_n overloaded for random access
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  iterators.
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIter, typename _Integer,
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _UnaryPredicate>
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _RandomAccessIter
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last,
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _Integer __count, _UnaryPredicate __unary_pred,
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   std::random_access_iterator_tag)
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_DistanceType;
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _DistanceType __tailSize = __last - __first;
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _DistanceType __remainder = __count;
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__remainder <= __tailSize) // the main loop...
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __first += __remainder;
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __tailSize -= __remainder;
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  // __first here is always pointing to one past the last element of
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  // next possible match.
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _RandomAccessIter __backTrack = __first; 
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  while (__unary_pred(--__backTrack))
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (--__remainder == 0)
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		return (__first - __count); // Success
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __remainder = __count + 1 - (__first - __backTrack);
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __last; // Failure
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Integer,
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _UnaryPredicate>
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __search_n(_ForwardIterator __first, _ForwardIterator __last,
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _Integer __count,
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _UnaryPredicate __unary_pred)
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__count <= 0)
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __first;
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__count == 1)
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return std::__find_if(__first, __last, __unary_pred);
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__search_n_aux(__first, __last, __count, __unary_pred,
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				 std::__iterator_category(__first));
ARM GAS  /tmp/ccvzGucR.s 			page 146


 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // find_end for forward iterators.
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator1
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _ForwardIterator2 __first2, _ForwardIterator2 __last2,
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       forward_iterator_tag, forward_iterator_tag,
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _BinaryPredicate __comp)
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first2 == __last2)
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __last1;
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator1 __result = __last1;
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (1)
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _ForwardIterator1 __new_result
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    = std::__search(__first1, __last1, __first2, __last2, __comp);
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__new_result == __last1)
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return __result;
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __result = __new_result;
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __first1 = __new_result;
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__first1;
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // find_end for bidirectional iterators (much faster).
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _BidirectionalIterator1
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __find_end(_BidirectionalIterator1 __first1,
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _BidirectionalIterator1 __last1,
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _BidirectionalIterator2 __first2,
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _BidirectionalIterator2 __last2,
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       bidirectional_iterator_tag, bidirectional_iterator_tag,
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _BinaryPredicate __comp)
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _BidirectionalIterator1>)
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _BidirectionalIterator2>)
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _RevIterator1 __rlast1(__first1);
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _RevIterator2 __rlast2(__first2);
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _RevIterator1 __rresult = std::__search(_RevIterator1(__last1), __rlast1,
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					      _RevIterator2(__last2), __rlast2,
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					      __comp);
ARM GAS  /tmp/ccvzGucR.s 			page 147


 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__rresult == __rlast1)
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __last1;
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _BidirectionalIterator1 __result = __rresult.base();
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::advance(__result, -std::distance(__first2, __last2));
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return __result;
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Find last matching subsequence in a sequence.
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first1  Start of range to search.
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last1   End of range to search.
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first2  Start of sequence to match.
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last2   End of sequence to match.
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   The last iterator @c i in the range
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__first1,__last1-(__last2-__first2)) such that @c *(i+N) ==
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p *(__first2+N) for each @c N in the range @p
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [0,__last2-__first2), or @p __last1 if no such iterator exists.
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Searches the range @p [__first1,__last1) for a sub-sequence that
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  compares equal value-by-value with the sequence given by @p
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first2,__last2) and returns an iterator to the __first
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  element of the sub-sequence, or @p __last1 if the sub-sequence
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  is not found.  The sub-sequence will be the last such
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  subsequence contained in [__first1,__last1).
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Because the sub-sequence must lie completely within the range @p
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first1,__last1) it must start at a position less than @p
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  __last1-(__last2-__first2) where @p __last2-__first2 is the
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  length of the sub-sequence.  This means that the returned
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  iterator @c i will be in the range @p
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first1,__last1-(__last2-__first2))
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator1
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _ForwardIterator2 __first2, _ForwardIterator2 __last2)
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator1>::value_type,
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator2>::value_type>)
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__find_end(__first1, __last1, __first2, __last2,
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     std::__iterator_category(__first1),
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     std::__iterator_category(__first2),
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_equal_to_iter());
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
ARM GAS  /tmp/ccvzGucR.s 			page 148


 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Find last matching subsequence in a sequence using a predicate.
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first1  Start of range to search.
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last1   End of range to search.
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first2  Start of sequence to match.
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last2   End of sequence to match.
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    The predicate to use.
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return The last iterator @c i in the range @p
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first1,__last1-(__last2-__first2)) such that @c
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  predicate(*(i+N), @p (__first2+N)) is true for each @c N in the
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  range @p [0,__last2-__first2), or @p __last1 if no such iterator
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  exists.
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Searches the range @p [__first1,__last1) for a sub-sequence that
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  compares equal value-by-value with the sequence given by @p
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first2,__last2) using comp as a predicate and returns an
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  iterator to the first element of the sub-sequence, or @p __last1
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  if the sub-sequence is not found.  The sub-sequence will be the
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  last such subsequence contained in [__first,__last1).
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Because the sub-sequence must lie completely within the range @p
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first1,__last1) it must start at a position less than @p
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  __last1-(__last2-__first2) where @p __last2-__first2 is the
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  length of the sub-sequence.  This means that the returned
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  iterator @c i will be in the range @p
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first1,__last1-(__last2-__first2))
 412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
 414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator1
 417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _BinaryPredicate __comp)
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
 424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
 425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator1>::value_type,
 426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator2>::value_type>)
 427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
 429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__find_end(__first1, __last1, __first2, __last2,
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     std::__iterator_category(__first1),
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     std::__iterator_category(__first2),
 433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_comp_iter(__comp));
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #if __cplusplus >= 201103L
 437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Checks that a predicate is true for all the elements
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          of a sequence.
 440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
ARM GAS  /tmp/ccvzGucR.s 			page 149


 441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  True if the check is true, false otherwise.
 445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Returns true if @p __pred is true for each element in the range
 447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__first,__last), and false otherwise.
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return __last == std::find_if_not(__first, __last, __pred); }
 454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Checks that a predicate is false for all the elements
 457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          of a sequence.
 458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  True if the check is true, false otherwise.
 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Returns true if @p __pred is false for each element in the range
 465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__first,__last), and false otherwise.
 466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
 470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return __last == _GLIBCXX_STD_A::find_if(__first, __last, __pred); }
 472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Checks that a predicate is true for at least one element
 475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          of a sequence.
 476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  True if the check is true, false otherwise.
 481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Returns true if an element exists in the range @p
 483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first,__last) such that @p __pred is true, and false
 484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  otherwise.
 485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
 489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return !std::none_of(__first, __last, __pred); }
 491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Find the first element in a sequence for which a
 494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          predicate is false.
 495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   An input iterator.
ARM GAS  /tmp/ccvzGucR.s 			page 150


 498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred   A predicate.
 499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   The first iterator @c i in the range @p [__first,__last)
 500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  such that @p __pred(*i) is false, or @p __last if no such iterator exists.
 501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _InputIterator
 505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     find_if_not(_InputIterator __first, _InputIterator __last,
 506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		_Predicate __pred)
 507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      typename iterator_traits<_InputIterator>::value_type>)
 512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__find_if_not(__first, __last,
 514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__pred_iter(__pred));
 515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Checks whether the sequence is partitioned.
 519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   An input iterator.
 522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred   A predicate.
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  True if the range @p [__first,__last) is partioned by @p __pred,
 524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  i.e. if all elements that satisfy @p __pred appear before those that
 525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  do not.
 526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
 530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     is_partitioned(_InputIterator __first, _InputIterator __last,
 531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _Predicate __pred)
 532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __first = std::find_if_not(__first, __last, __pred);
 534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
 535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return true;
 536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       ++__first;
 537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::none_of(__first, __last, __pred);
 538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Find the partition point of a partitioned range.
 542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
 544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
 545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An iterator @p mid such that @p all_of(__first, mid, __pred)
 547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           and @p none_of(mid, __last, __pred) are both true.
 548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
 550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
 552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     partition_point(_ForwardIterator __first, _ForwardIterator __last,
 553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		    _Predicate __pred)
 554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
ARM GAS  /tmp/ccvzGucR.s 			page 151


 555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
 557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      typename iterator_traits<_ForwardIterator>::value_type>)
 559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // A specific debug-mode test will be necessary...
 561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
 564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_DistanceType;
 565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _DistanceType __len = std::distance(__first, __last);
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__len > 0)
 569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
 570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _DistanceType __half = __len >> 1;
 571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _ForwardIterator __middle = __first;
 572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::advance(__middle, __half);
 573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__pred(*__middle))
 574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
 575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __first = __middle;
 576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__first;
 577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __len = __len - __half - 1;
 578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
 579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
 580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __len = __half;
 581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
 582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __first;
 583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #endif
 585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
 587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Predicate>
 588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _OutputIterator
 590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __remove_copy_if(_InputIterator __first, _InputIterator __last,
 591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _OutputIterator __result, _Predicate __pred)
 592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (!__pred(__first))
 595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
 596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    *__result = *__first;
 597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__result;
 598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
 599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __result;
 600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy a sequence, removing elements of a given value.
 604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result  An output iterator.
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __value   The value to be removed.
 609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) not equal
ARM GAS  /tmp/ccvzGucR.s 			page 152


 612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  to @p __value to the range beginning at @p __result.
 613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  remove_copy() is stable, so the relative order of elements that
 614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  are copied is unchanged.
 615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator, typename _Tp>
 617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _OutputIterator
 619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     remove_copy(_InputIterator __first, _InputIterator __last,
 620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		_OutputIterator __result, const _Tp& __value)
 621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
 627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type, _Tp>)
 628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__remove_copy_if(__first, __last, __result,
 631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	__gnu_cxx::__ops::__iter_equals_val(__value));
 632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy a sequence, removing elements for which a predicate is true.
 636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result  An output iterator.
 640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) for which
 644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p __pred returns false to the range beginning at @p __result.
 645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  remove_copy_if() is stable, so the relative order of elements that are
 647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  copied is unchanged.
 648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
 650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Predicate>
 651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _OutputIterator
 653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     remove_copy_if(_InputIterator __first, _InputIterator __last,
 654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _OutputIterator __result, _Predicate __pred)
 655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__remove_copy_if(__first, __last, __result,
 665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__pred_iter(__pred));
 666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #if __cplusplus >= 201103L
ARM GAS  /tmp/ccvzGucR.s 			page 153


 669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy the elements of a sequence for which a predicate is true.
 671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result  An output iterator.
 675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) for which
 679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p __pred returns true to the range beginning at @p __result.
 680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  copy_if() is stable, so the relative order of elements that are
 682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  copied is unchanged.
 683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
 685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Predicate>
 686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _OutputIterator
 688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     copy_if(_InputIterator __first, _InputIterator __last,
 689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    _OutputIterator __result, _Predicate __pred)
 690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (__pred(*__first))
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    *__result = *__first;
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__result;
 704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
 705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __result;
 706:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 707:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 708:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Size, typename _OutputIterator>
 709:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 710:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _OutputIterator
 711:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __copy_n_a(_InputIterator __first, _Size __n, _OutputIterator __result)
 712:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 713:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__n > 0)
 714:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
 715:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  while (true)
 716:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
 717:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      *__result = *__first;
 718:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__result;
 719:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (--__n > 0)
 720:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		++__first;
 721:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      else
 722:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		break;
 723:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
 724:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
 725:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __result;
ARM GAS  /tmp/ccvzGucR.s 			page 154


 726:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 727:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****  
 728:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _CharT, typename _Size>
 729:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __enable_if_t<__is_char<_CharT>::__value, _CharT*>
 730:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT>>,
 731:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _Size, _CharT*);
 732:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 733:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Size, typename _OutputIterator>
 734:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 735:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _OutputIterator
 736:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __copy_n(_InputIterator __first, _Size __n,
 737:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _OutputIterator __result, input_iterator_tag)
 738:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 739:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__niter_wrap(__result,
 740:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			       __copy_n_a(__first, __n,
 741:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					  std::__niter_base(__result)));
 742:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 743:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 744:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Size,
 745:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _OutputIterator>
 746:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 747:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _OutputIterator
 748:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __copy_n(_RandomAccessIterator __first, _Size __n,
 749:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _OutputIterator __result, random_access_iterator_tag)
 750:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return std::copy(__first, __first + __n, __result); }
 751:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 752:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 753:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copies the range [first,first+n) into [result,result+n).
 754:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 755:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 756:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __n      The number of elements to copy.
 757:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result An output iterator.
 758:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  result+n.
 759:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 760:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This inline function will boil down to a call to @c memmove whenever
 761:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 762:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  loop count will be known (and therefore a candidate for compiler
 763:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  optimizations such as unrolling).
 764:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 765:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Size, typename _OutputIterator>
 766:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 767:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _OutputIterator
 768:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
 769:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 770:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 771:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 772:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 773:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 774:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_can_increment(__first, __n);
 775:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_can_increment(__result, __n);
 776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 777:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__copy_n(__first, __n, __result,
 778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   std::__iterator_category(__first));
 779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 781:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 782:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy the elements of a sequence to separate output sequences
ARM GAS  /tmp/ccvzGucR.s 			page 155


 783:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         depending on the truth value of a predicate.
 784:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 785:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 786:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 787:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __out_true   An output iterator.
 788:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __out_false  An output iterator.
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 790:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   A pair designating the ends of the resulting sequences.
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) for which
 793:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p __pred returns true to the range beginning at @p out_true
 794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  and each element for which @p __pred returns false to @p __out_false.
 795:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator1,
 797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _OutputIterator2, typename _Predicate>
 798:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 799:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     pair<_OutputIterator1, _OutputIterator2>
 800:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     partition_copy(_InputIterator __first, _InputIterator __last,
 801:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _OutputIterator1 __out_true, _OutputIterator2 __out_false,
 802:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _Predicate __pred)
 803:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 804:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 805:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 806:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator1,
 807:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 808:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator2,
 809:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 810:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 811:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 812:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 813:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       
 814:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 815:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (__pred(*__first))
 816:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
 817:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    *__out_true = *__first;
 818:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__out_true;
 819:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
 820:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	else
 821:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
 822:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    *__out_false = *__first;
 823:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__out_false;
 824:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
 825:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 826:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
 827:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 828:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #endif // C++11
 829:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 830:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
 831:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 832:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
 833:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __remove_if(_ForwardIterator __first, _ForwardIterator __last,
 834:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		_Predicate __pred)
 835:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 836:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __first = std::__find_if(__first, __last, __pred);
 837:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
 838:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __first;
 839:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __result = __first;
ARM GAS  /tmp/ccvzGucR.s 			page 156


 840:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       ++__first;
 841:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 842:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (!__pred(__first))
 843:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
 844:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    *__result = _GLIBCXX_MOVE(*__first);
 845:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__result;
 846:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
 847:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __result;
 848:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 849:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 850:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 851:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Remove elements from a sequence.
 852:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 853:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 854:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   An input iterator.
 855:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __value  The value to be removed.
 856:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 857:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 858:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  All elements equal to @p __value are removed from the range
 859:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__first,__last).
 860:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 861:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  remove() is stable, so the relative order of elements that are
 862:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  not removed is unchanged.
 863:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 864:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 865:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
 866:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 867:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
 868:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 869:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
 870:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     remove(_ForwardIterator __first, _ForwardIterator __last,
 871:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   const _Tp& __value)
 872:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 873:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 874:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 875:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _ForwardIterator>)
 876:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
 877:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
 878:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 879:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 880:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__remove_if(__first, __last,
 881:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_equals_val(__value));
 882:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 883:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 884:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 885:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Remove elements from a sequence using a predicate.
 886:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 887:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  A forward iterator.
 888:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   A forward iterator.
 889:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred   A predicate.
 890:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 891:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 892:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  All elements for which @p __pred returns true are removed from the range
 893:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__first,__last).
 894:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 895:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  remove_if() is stable, so the relative order of elements that are
 896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  not removed is unchanged.
ARM GAS  /tmp/ccvzGucR.s 			page 157


 897:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 898:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 899:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
 900:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 901:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
 902:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     remove_if(_ForwardIterator __first, _ForwardIterator __last,
 905:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _Predicate __pred)
 906:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 907:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 909:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _ForwardIterator>)
 910:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 911:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
 912:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 913:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 914:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__remove_if(__first, __last,
 915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			      __gnu_cxx::__ops::__pred_iter(__pred));
 916:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 918:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _BinaryPredicate>
 919:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 920:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
 921:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
 922:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		    _BinaryPredicate __binary_pred)
 923:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 924:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
 925:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __last;
 926:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __next = __first;
 927:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (++__next != __last)
 928:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
 929:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__binary_pred(__first, __next))
 930:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return __first;
 931:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __first = __next;
 932:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
 933:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __last;
 934:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 935:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 936:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _BinaryPredicate>
 937:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 938:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
 939:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __unique(_ForwardIterator __first, _ForwardIterator __last,
 940:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _BinaryPredicate __binary_pred)
 941:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 942:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // Skip the beginning, if already unique.
 943:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __first = std::__adjacent_find(__first, __last, __binary_pred);
 944:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
 945:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __last;
 946:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 947:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // Do the real copy work.
 948:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __dest = __first;
 949:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       ++__first;
 950:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (++__first != __last)
 951:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (!__binary_pred(__dest, __first))
 952:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  *++__dest = _GLIBCXX_MOVE(*__first);
 953:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return ++__dest;
ARM GAS  /tmp/ccvzGucR.s 			page 158


 954:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 955:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 956:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 957:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Remove consecutive duplicate values from a sequence.
 958:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 959:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  A forward iterator.
 960:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   A forward iterator.
 961:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An iterator designating the end of the resulting sequence.
 962:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 963:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Removes all but the first element from each group of consecutive
 964:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  values that compare equal.
 965:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  unique() is stable, so the relative order of elements that are
 966:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  not removed is unchanged.
 967:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 968:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
 969:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
 970:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator>
 971:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 972:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
 973:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     unique(_ForwardIterator __first, _ForwardIterator __last)
 974:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 975:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
 976:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 977:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _ForwardIterator>)
 978:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualityComparableConcept<
 979:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     typename iterator_traits<_ForwardIterator>::value_type>)
 980:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 981:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 982:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__unique(__first, __last,
 983:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_equal_to_iter());
 984:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
 985:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
 986:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
 987:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Remove consecutive values from a sequence using a predicate.
 988:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 989:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first        A forward iterator.
 990:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last         A forward iterator.
 991:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __binary_pred  A binary predicate.
 992:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An iterator designating the end of the resulting sequence.
 993:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
 994:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Removes all but the first element from each group of consecutive
 995:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  values for which @p __binary_pred returns true.
 996:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  unique() is stable, so the relative order of elements that are
 997:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  not removed is unchanged.
 998:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 999:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
1000:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1001:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _BinaryPredicate>
1002:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1003:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
1004:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     unique(_ForwardIterator __first, _ForwardIterator __last,
1005:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   _BinaryPredicate __binary_pred)
1006:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1007:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
1008:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
1009:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _ForwardIterator>)
1010:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
ARM GAS  /tmp/ccvzGucR.s 			page 159


1011:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator>::value_type,
1012:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator>::value_type>)
1013:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1014:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1015:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__unique(__first, __last,
1016:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
1017:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1018:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1019:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1020:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is an uglified
1021:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
1022:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *              _BinaryPredicate)
1023:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  overloaded for forward iterators and output iterator as result.
1024:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1025:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _OutputIterator,
1026:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
1027:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1028:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _OutputIterator
1029:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
1030:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _OutputIterator __result, _BinaryPredicate __binary_pred,
1031:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  forward_iterator_tag, output_iterator_tag)
1032:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1033:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements -- iterators already checked
1034:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1035:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::value_type,
1036:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::value_type>)
1037:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1038:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __next = __first;
1039:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       *__result = *__first;
1040:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (++__next != __last)
1041:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (!__binary_pred(__first, __next))
1042:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
1043:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __first = __next;
1044:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    *++__result = *__first;
1045:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
1046:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return ++__result;
1047:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1048:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1049:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1050:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is an uglified
1051:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
1052:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *              _BinaryPredicate)
1053:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  overloaded for input iterators and output iterator as result.
1054:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1055:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
1056:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
1057:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1058:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _OutputIterator
1059:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __unique_copy(_InputIterator __first, _InputIterator __last,
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _OutputIterator __result, _BinaryPredicate __binary_pred,
1061:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  input_iterator_tag, output_iterator_tag)
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1063:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements -- iterators already checked
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1065:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  typename iterator_traits<_InputIterator>::value_type,
1066:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  typename iterator_traits<_InputIterator>::value_type>)
1067:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
ARM GAS  /tmp/ccvzGucR.s 			page 160


1068:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typename iterator_traits<_InputIterator>::value_type __value = *__first;
1069:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __decltype(__gnu_cxx::__ops::__iter_comp_val(__binary_pred))
1070:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	__rebound_pred
1071:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	= __gnu_cxx::__ops::__iter_comp_val(__binary_pred);
1072:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       *__result = __value;
1073:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (++__first != __last)
1074:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (!__rebound_pred(__first, __value))
1075:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
1076:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __value = *__first;
1077:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    *++__result = __value;
1078:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
1079:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return ++__result;
1080:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1081:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1082:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1083:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is an uglified
1084:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
1085:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *              _BinaryPredicate)
1086:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  overloaded for input iterators and forward iterator as result.
1087:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1088:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _ForwardIterator,
1089:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
1090:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1091:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
1092:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __unique_copy(_InputIterator __first, _InputIterator __last,
1093:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _ForwardIterator __result, _BinaryPredicate __binary_pred,
1094:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  input_iterator_tag, forward_iterator_tag)
1095:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1096:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements -- iterators already checked
1097:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1098:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::value_type,
1099:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  typename iterator_traits<_InputIterator>::value_type>)
1100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       *__result = *__first;
1101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (++__first != __last)
1102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (!__binary_pred(__result, __first))
1103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  *++__result = *__first;
1104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return ++__result;
1105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is an uglified reverse(_BidirectionalIterator,
1109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *                              _BidirectionalIterator)
1110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  overloaded for bidirectional iterators.
1111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
1113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
1115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
1116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      bidirectional_iterator_tag)
1117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (true)
1119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (__first == __last || __first == --__last)
1120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return;
1121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	else
1122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
1123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::iter_swap(__first, __last);
1124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__first;
ARM GAS  /tmp/ccvzGucR.s 			page 161


1125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
1126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is an uglified reverse(_BidirectionalIterator,
1130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *                              _BidirectionalIterator)
1131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  overloaded for random access iterators.
1132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator>
1134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
1136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
1137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      random_access_iterator_tag)
1138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
1140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return;
1141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       --__last;
1142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first < __last)
1143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::iter_swap(__first, __last);
1145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
1146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  --__last;
1147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Reverse a sequence.
1152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  A bidirectional iterator.
1154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   A bidirectional iterator.
1155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   reverse() returns no value.
1156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
1157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Reverses the order of the elements in the range @p [__first,__last),
1158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  so that the first element becomes the last etc.
1159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  For every @c i such that @p 0<=i<=(__last-__first)/2), @p reverse()
1160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  swaps @p *(__first+i) and @p *(__last-(i+1))
1161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
1163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline void
1165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
1166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
1168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
1169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
1170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__reverse(__first, __last, std::__iterator_category(__first));
1172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy a sequence, reversing its elements.
1176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   A bidirectional iterator.
1178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    A bidirectional iterator.
1179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result  An output iterator.
1180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An iterator designating the end of the resulting sequence.
1181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
ARM GAS  /tmp/ccvzGucR.s 			page 162


1182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies the elements in the range @p [__first,__last) to the
1183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  range @p [__result,__result+(__last-__first)) such that the
1184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  order of the elements is reversed.  For every @c i such that @p
1185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  0<=i<=(__last-__first), @p reverse_copy() performs the
1186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  assignment @p *(__result+(__last-__first)-1-i) = *(__first+i).
1187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  The ranges @p [__first,__last) and @p
1188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__result,__result+(__last-__first)) must not overlap.
1189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _OutputIterator>
1191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _OutputIterator
1193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
1194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		 _OutputIterator __result)
1195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
1197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
1198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
1199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
1200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		typename iterator_traits<_BidirectionalIterator>::value_type>)
1201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first != __last)
1204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  --__last;
1206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  *__result = *__last;
1207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__result;
1208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __result;
1210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is a helper function for the rotate algorithm specialized on RAIs.
1214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  It returns the greatest common divisor of two integer values.
1215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _EuclideanRingElement>
1217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _EuclideanRingElement
1219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
1220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__n != 0)
1222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _EuclideanRingElement __t = __m % __n;
1224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __m = __n;
1225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __n = __t;
1226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __m;
1228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   inline namespace _V2
1231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   {
1232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the rotate algorithm.
1234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator>
1235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
1237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __rotate(_ForwardIterator __first,
1238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _ForwardIterator __middle,
ARM GAS  /tmp/ccvzGucR.s 			page 163


1239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _ForwardIterator __last,
1240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     forward_iterator_tag)
1241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __middle)
1243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __last;
1244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else if (__last == __middle)
1245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __first;
1246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __first2 = __middle;
1248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       do
1249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::iter_swap(__first, __first2);
1251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
1252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first2;
1253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__first == __middle)
1254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __middle = __first2;
1255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first2 != __last);
1257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __ret = __first;
1259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __first2 = __middle;
1261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first2 != __last)
1263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::iter_swap(__first, __first2);
1265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
1266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first2;
1267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__first == __middle)
1268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __middle = __first2;
1269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else if (__first2 == __last)
1270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __first2 = __middle;
1271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __ret;
1273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    /// This is a helper function for the rotate algorithm.
1276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
1277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _BidirectionalIterator
1279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __rotate(_BidirectionalIterator __first,
1280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _BidirectionalIterator __middle,
1281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _BidirectionalIterator __last,
1282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      bidirectional_iterator_tag)
1283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
1285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
1286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
1287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __middle)
1289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __last;
1290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else if (__last == __middle)
1291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __first;
1292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__reverse(__first,  __middle, bidirectional_iterator_tag());
1294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__reverse(__middle, __last,   bidirectional_iterator_tag());
1295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
ARM GAS  /tmp/ccvzGucR.s 			page 164


1296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first != __middle && __middle != __last)
1297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::iter_swap(__first, --__last);
1299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
1300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __middle)
1303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__reverse(__middle, __last,   bidirectional_iterator_tag());
1305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return __last;
1306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
1308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__reverse(__first,  __middle, bidirectional_iterator_tag());
1310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return __first;
1311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the rotate algorithm.
1315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator>
1316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _RandomAccessIterator
1318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __rotate(_RandomAccessIterator __first,
1319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _RandomAccessIterator __middle,
1320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _RandomAccessIterator __last,
1321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     random_access_iterator_tag)
1322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
1324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
1325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _RandomAccessIterator>)
1326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __middle)
1328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __last;
1329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else if (__last == __middle)
1330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __first;
1331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::difference_type
1333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_Distance;
1334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
1335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_ValueType;
1336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _Distance __n = __last   - __first;
1338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _Distance __k = __middle - __first;
1339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__k == __n - __k)
1341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::swap_ranges(__first, __middle, __middle);
1343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return __middle;
1344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _RandomAccessIterator __p = __first;
1347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _RandomAccessIterator __ret = __first + (__last - __middle);
1348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (;;)
1350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__k < __n - __k)
1352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
ARM GAS  /tmp/ccvzGucR.s 			page 165


1353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (__is_pod(_ValueType) && __k == 1)
1354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		{
1355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _ValueType __t = _GLIBCXX_MOVE(*__p);
1356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
1357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
1358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  return __ret;
1359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		}
1360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _RandomAccessIterator __q = __p + __k;
1361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
1362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		{
1363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  std::iter_swap(__p, __q);
1364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  ++__p;
1365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  ++__q;
1366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		}
1367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __n %= __k;
1368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (__n == 0)
1369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		return __ret;
1370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::swap(__n, __k);
1371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __k = __n - __k;
1372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
1373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
1374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
1375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __k = __n - __k;
1376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (__is_pod(_ValueType) && __k == 1)
1377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		{
1378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
1379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
1380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  *__p = _GLIBCXX_MOVE(__t);
1381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  return __ret;
1382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		}
1383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _RandomAccessIterator __q = __p + __n;
1384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __p = __q - __k;
1385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
1386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		{
1387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  --__p;
1388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  --__q;
1389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  std::iter_swap(__p, __q);
1390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		}
1391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __n %= __k;
1392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (__n == 0)
1393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		return __ret;
1394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::swap(__n, __k);
1395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
1396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
1400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    // DR 488. rotate throws away useful information
1401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Rotate the elements of a sequence.
1403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   A forward iterator.
1405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __middle  A forward iterator.
1406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    A forward iterator.
1407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  first + (last - middle).
1408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
1409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Rotates the elements of the range @p [__first,__last) by 
ARM GAS  /tmp/ccvzGucR.s 			page 166


1410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p (__middle - __first) positions so that the element at @p __middle
1411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  is moved to @p __first, the element at @p __middle+1 is moved to
1412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p __first+1 and so on for each element in the range
1413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__first,__last).
1414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
1415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This effectively swaps the ranges @p [__first,__middle) and
1416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__middle,__last).
1417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
1418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Performs
1419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *   @p *(__first+(n+(__last-__middle))%(__last-__first))=*(__first+n)
1420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  for each @p n in the range @p [0,__last-__first).
1421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator>
1423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
1425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     rotate(_ForwardIterator __first, _ForwardIterator __middle,
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   _ForwardIterator __last)
1427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
1429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
1430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _ForwardIterator>)
1431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __middle);
1432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__middle, __last);
1433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__rotate(__first, __middle, __last,
1435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   std::__iterator_category(__first));
1436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   } // namespace _V2
1439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy a sequence, rotating its elements.
1442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   A forward iterator.
1444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __middle  A forward iterator.
1445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    A forward iterator.
1446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result  An output iterator.
1447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
1448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
1449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies the elements of the range @p [__first,__last) to the
1450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  range beginning at @result, rotating the copied elements by 
1451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p (__middle-__first) positions so that the element at @p __middle
1452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  is moved to @p __result, the element at @p __middle+1 is moved
1453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  to @p __result+1 and so on for each element in the range @p
1454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first,__last).
1455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
1456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Performs 
1457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p *(__result+(n+(__last-__middle))%(__last-__first))=*(__first+n)
1458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  for each @p n in the range @p [0,__last-__first).
1459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _OutputIterator>
1461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _OutputIterator
1463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
1464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		_ForwardIterator __last, _OutputIterator __result)
1465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
ARM GAS  /tmp/ccvzGucR.s 			page 167


1467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
1468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
1469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator>::value_type>)
1470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __middle);
1471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__middle, __last);
1472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::copy(__first, __middle,
1474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		       std::copy(__middle, __last, __result));
1475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function...
1478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
1479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
1481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __partition(_ForwardIterator __first, _ForwardIterator __last,
1482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		_Predicate __pred, forward_iterator_tag)
1483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
1485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __first;
1486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__pred(*__first))
1488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (++__first == __last)
1489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return __first;
1490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __next = __first;
1492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (++__next != __last)
1494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (__pred(*__next))
1495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
1496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::iter_swap(__first, __next);
1497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__first;
1498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
1499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __first;
1501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function...
1504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Predicate>
1505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _BidirectionalIterator
1507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
1508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		_Predicate __pred, bidirectional_iterator_tag)
1509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (true)
1511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  while (true)
1513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    if (__first == __last)
1514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return __first;
1515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    else if (__pred(*__first))
1516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__first;
1517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    else
1518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      break;
1519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  --__last;
1520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  while (true)
1521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    if (__first == __last)
1522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return __first;
1523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    else if (!bool(__pred(*__last)))
ARM GAS  /tmp/ccvzGucR.s 			page 168


1524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      --__last;
1525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    else
1526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      break;
1527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::iter_swap(__first, __last);
1528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
1529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // partition
1533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function...
1535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// Requires __first != __last and !__pred(__first)
1536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// and __len == distance(__first, __last).
1537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   ///
1538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// !__pred(__first) allows us to guarantee that we don't
1539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// move-assign an element onto itself.
1540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
1541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Distance>
1542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
1543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __stable_partition_adaptive(_ForwardIterator __first,
1544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				_ForwardIterator __last,
1545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				_Predicate __pred, _Distance __len,
1546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				_Pointer __buffer,
1547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				_Distance __buffer_size)
1548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__len == 1)
1550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __first;
1551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__len <= __buffer_size)
1553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _ForwardIterator __result1 = __first;
1555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _Pointer __result2 = __buffer;
1556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  // The precondition guarantees that !__pred(__first), so
1558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  // move that element to the buffer before starting the loop.
1559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  // This ensures that we only call __pred once per element.
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  *__result2 = _GLIBCXX_MOVE(*__first);
1561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__result2;
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
1563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  for (; __first != __last; ++__first)
1564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    if (__pred(__first))
1565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      {
1566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		*__result1 = _GLIBCXX_MOVE(*__first);
1567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		++__result1;
1568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      }
1569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    else
1570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      {
1571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		*__result2 = _GLIBCXX_MOVE(*__first);
1572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		++__result2;
1573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      }
1574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _GLIBCXX_MOVE3(__buffer, __result2, __result1);
1576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return __result1;
1577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __middle = __first;
1580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::advance(__middle, __len / 2);
ARM GAS  /tmp/ccvzGucR.s 			page 169


1581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __left_split =
1582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::__stable_partition_adaptive(__first, __middle, __pred,
1583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					 __len / 2, __buffer,
1584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					 __buffer_size);
1585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // Advance past true-predicate values to satisfy this
1587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // function's preconditions.
1588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _Distance __right_len = __len - __len / 2;
1589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __right_split =
1590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::__find_if_not_n(__middle, __right_len, __pred);
1591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__right_len)
1593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	__right_split =
1594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__stable_partition_adaptive(__right_split, __last, __pred,
1595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					   __right_len,
1596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					   __buffer, __buffer_size);
1597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::rotate(__left_split, __middle, __right_split);
1599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
1602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
1603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __stable_partition(_ForwardIterator __first, _ForwardIterator __last,
1604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		       _Predicate __pred)
1605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __first = std::__find_if_not(__first, __last, __pred);
1607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
1609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __first;
1610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
1612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_ValueType;
1613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
1614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_DistanceType;
1615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _Temporary_buffer<_ForwardIterator, _ValueType>
1617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	__buf(__first, std::distance(__first, __last));
1618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return
1619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::__stable_partition_adaptive(__first, __last, __pred,
1620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					 _DistanceType(__buf.requested_size()),
1621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					 __buf.begin(),
1622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					 _DistanceType(__buf.size()));
1623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Move elements for which a predicate is true to the beginning
1627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         of a sequence, preserving relative ordering.
1628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   A forward iterator.
1630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    A forward iterator.
1631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A predicate functor.
1632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An iterator @p middle such that @p __pred(i) is true for each
1633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  iterator @p i in the range @p [first,middle) and false for each @p i
1634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  in the range @p [middle,last).
1635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
1636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Performs the same function as @p partition() with the additional
1637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  guarantee that the relative ordering of elements in each group is
ARM GAS  /tmp/ccvzGucR.s 			page 170


1638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  preserved, so any two elements @p x and @p y in the range
1639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__first,__last) such that @p __pred(x)==__pred(y) will have the same
1640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  relative ordering after calling @p stable_partition().
1641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
1643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
1644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     stable_partition(_ForwardIterator __first, _ForwardIterator __last,
1645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _Predicate __pred)
1646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
1648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
1649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _ForwardIterator>)
1650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
1651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__stable_partition(__first, __last,
1655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__pred_iter(__pred));
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the sort routines.
1659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
1662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __heap_select(_RandomAccessIterator __first,
1663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _RandomAccessIterator __middle,
1664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _RandomAccessIterator __last, _Compare __comp)
1665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__make_heap(__first, __middle, __comp);
1667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
1668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (__comp(__i, __first))
1669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__pop_heap(__first, __middle, __i, __comp);
1670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // partial_sort
1673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _RandomAccessIterator,
1675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Compare>
1676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _RandomAccessIterator
1678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __partial_sort_copy(_InputIterator __first, _InputIterator __last,
1679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			_RandomAccessIterator __result_first,
1680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			_RandomAccessIterator __result_last,
1681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			_Compare __comp)
1682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_InputValueType;
1685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef iterator_traits<_RandomAccessIterator> _RItTraits;
1686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename _RItTraits::difference_type _DistanceType;
1687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__result_first == __result_last)
1689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __result_last;
1690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _RandomAccessIterator __result_real_last = __result_first;
1691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first != __last && __result_real_last != __result_last)
1692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  *__result_real_last = *__first;
1694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__result_real_last;
ARM GAS  /tmp/ccvzGucR.s 			page 171


1695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
1696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       
1698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__make_heap(__result_first, __result_real_last, __comp);
1699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first != __last)
1700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__first, __result_first))
1702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::__adjust_heap(__result_first, _DistanceType(0),
1703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			       _DistanceType(__result_real_last
1704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					     - __result_first),
1705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			       _InputValueType(*__first), __comp);
1706:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
1707:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1708:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__sort_heap(__result_first, __result_real_last, __comp);
1709:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __result_real_last;
1710:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1711:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1712:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1713:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy the smallest elements of a sequence.
1714:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
1715:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
1716:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
1717:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result_first   A random-access iterator.
1718:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result_last    Another random-access iterator.
1719:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   An iterator indicating the end of the resulting sequence.
1720:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
1721:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies and sorts the smallest N values from the range @p [__first,__last)
1722:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  to the range beginning at @p __result_first, where the number of
1723:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  elements to be copied, @p N, is the smaller of @p (__last-__first) and
1724:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p (__result_last-__result_first).
1725:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  After the sort if @e i and @e j are iterators in the range
1726:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__result_first,__result_first+N) such that i precedes j then
1727:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  *j<*i is false.
1728:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  The value returned is @p __result_first+N.
1729:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1730:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _RandomAccessIterator>
1731:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1732:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _RandomAccessIterator
1733:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     partial_sort_copy(_InputIterator __first, _InputIterator __last,
1734:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _RandomAccessIterator __result_first,
1735:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _RandomAccessIterator __result_last)
1736:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1737:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
1738:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1739:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_InputValueType;
1740:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
1741:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_OutputValueType;
1742:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #endif
1743:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1744:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
1745:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
1746:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ConvertibleConcept<_InputValueType,
1747:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _OutputValueType>)
1748:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<_InputValueType,
1749:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 						     _OutputValueType>)
1750:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_OutputValueType>)
1751:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
ARM GAS  /tmp/ccvzGucR.s 			page 172


1752:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
1753:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__result_first, __result_last);
1754:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1755:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__partial_sort_copy(__first, __last,
1756:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				      __result_first, __result_last,
1757:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				      __gnu_cxx::__ops::__iter_less_iter());
1758:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1759:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1760:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1761:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy the smallest elements of a sequence using a predicate for
1762:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         comparison.
1763:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
1764:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
1765:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another input iterator.
1766:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result_first   A random-access iterator.
1767:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result_last    Another random-access iterator.
1768:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    A comparison functor.
1769:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   An iterator indicating the end of the resulting sequence.
1770:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
1771:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies and sorts the smallest N values from the range @p [__first,__last)
1772:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  to the range beginning at @p result_first, where the number of
1773:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  elements to be copied, @p N, is the smaller of @p (__last-__first) and
1774:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p (__result_last-__result_first).
1775:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  After the sort if @e i and @e j are iterators in the range
1776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__result_first,__result_first+N) such that i precedes j then
1777:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p __comp(*j,*i) is false.
1778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  The value returned is @p __result_first+N.
1779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _RandomAccessIterator,
1781:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Compare>
1782:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1783:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _RandomAccessIterator
1784:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     partial_sort_copy(_InputIterator __first, _InputIterator __last,
1785:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _RandomAccessIterator __result_first,
1786:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _RandomAccessIterator __result_last,
1787:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _Compare __comp)
1788:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
1790:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_InputValueType;
1792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
1793:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_OutputValueType;
1794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #endif
1795:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
1797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
1798:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
1799:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _RandomAccessIterator>)
1800:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ConvertibleConcept<_InputValueType,
1801:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _OutputValueType>)
1802:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
1803:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _InputValueType, _OutputValueType>)
1804:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
1805:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _OutputValueType, _OutputValueType>)
1806:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1807:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
1808:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__result_first, __result_last);
ARM GAS  /tmp/ccvzGucR.s 			page 173


1809:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1810:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__partial_sort_copy(__first, __last,
1811:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				      __result_first, __result_last,
1812:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_iter(__comp));
1813:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1814:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1815:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1816:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1817:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1818:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
1819:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __unguarded_linear_insert(_RandomAccessIterator __last,
1820:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			      _Compare __comp)
1821:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1822:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typename iterator_traits<_RandomAccessIterator>::value_type
1823:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	__val = _GLIBCXX_MOVE(*__last);
1824:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _RandomAccessIterator __next = __last;
1825:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       --__next;
1826:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__comp(__val, __next))
1827:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1828:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  *__last = _GLIBCXX_MOVE(*__next);
1829:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __last = __next;
1830:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  --__next;
1831:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1832:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       *__last = _GLIBCXX_MOVE(__val);
1833:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1834:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1835:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1836:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1837:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1838:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
1839:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __insertion_sort(_RandomAccessIterator __first,
1840:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _RandomAccessIterator __last, _Compare __comp)
1841:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1842:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last) return;
1843:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1844:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
1845:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1846:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__i, __first))
1847:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
1848:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      typename iterator_traits<_RandomAccessIterator>::value_type
1849:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__val = _GLIBCXX_MOVE(*__i);
1850:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
1851:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      *__first = _GLIBCXX_MOVE(__val);
1852:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
1853:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
1854:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::__unguarded_linear_insert(__i,
1855:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
1856:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1857:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1858:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1859:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1860:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1861:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1862:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline void
1863:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __unguarded_insertion_sort(_RandomAccessIterator __first,
1864:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			       _RandomAccessIterator __last, _Compare __comp)
1865:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
ARM GAS  /tmp/ccvzGucR.s 			page 174


1866:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
1867:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::__unguarded_linear_insert(__i,
1868:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
1869:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1870:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1871:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
1872:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @doctodo
1873:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This controls some aspect of the sort routines.
1874:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
1875:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   enum { _S_threshold = 16 };
1876:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1877:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1878:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1879:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1880:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
1881:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __final_insertion_sort(_RandomAccessIterator __first,
1882:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _RandomAccessIterator __last, _Compare __comp)
1883:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1884:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__last - __first > int(_S_threshold))
1885:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1886:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
1887:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
1888:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					  __comp);
1889:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1890:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
1891:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::__insertion_sort(__first, __last, __comp);
1892:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1893:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1894:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function...
1895:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1897:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _RandomAccessIterator
1898:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __unguarded_partition(_RandomAccessIterator __first,
1899:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			  _RandomAccessIterator __last,
1900:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			  _RandomAccessIterator __pivot, _Compare __comp)
1901:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1902:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (true)
1903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  while (__comp(__first, __pivot))
1905:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__first;
1906:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  --__last;
1907:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  while (__comp(__pivot, __last))
1908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    --__last;
1909:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (!(__first < __last))
1910:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return __first;
1911:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::iter_swap(__first, __last);
1912:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
1913:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1914:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1916:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function...
1917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1918:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1919:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _RandomAccessIterator
1920:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __unguarded_partition_pivot(_RandomAccessIterator __first,
1921:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				_RandomAccessIterator __last, _Compare __comp)
1922:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
ARM GAS  /tmp/ccvzGucR.s 			page 175


1923:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _RandomAccessIterator __mid = __first + (__last - __first) / 2;
1924:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
1925:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  __comp);
1926:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__unguarded_partition(__first + 1, __last, __first, __comp);
1927:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1928:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1929:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1930:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1931:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline void
1932:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __partial_sort(_RandomAccessIterator __first,
1933:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _RandomAccessIterator __middle,
1934:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _RandomAccessIterator __last,
1935:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _Compare __comp)
1936:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1937:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__heap_select(__first, __middle, __last, __comp);
1938:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__sort_heap(__first, __middle, __comp);
1939:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1940:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1941:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1942:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Size, typename _Compare>
1943:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1944:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
1945:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __introsort_loop(_RandomAccessIterator __first,
1946:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _RandomAccessIterator __last,
1947:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _Size __depth_limit, _Compare __comp)
1948:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1949:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__last - __first > int(_S_threshold))
1950:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1951:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__depth_limit == 0)
1952:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
1953:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::__partial_sort(__first, __last, __last, __comp);
1954:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return;
1955:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
1956:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  --__depth_limit;
1957:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _RandomAccessIterator __cut =
1958:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::__unguarded_partition_pivot(__first, __last, __comp);
1959:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
1960:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __last = __cut;
1961:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1962:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
1963:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1964:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // sort
1965:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1966:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1967:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1968:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline void
1969:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
1970:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   _Compare __comp)
1971:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1972:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first != __last)
1973:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1974:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__introsort_loop(__first, __last,
1975:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				std::__lg(__last - __first) * 2,
1976:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__comp);
1977:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__final_insertion_sort(__first, __last, __comp);
1978:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
1979:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
ARM GAS  /tmp/ccvzGucR.s 			page 176


1980:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
1981:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Size, typename _Compare>
1982:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1983:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
1984:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
1985:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _RandomAccessIterator __last, _Size __depth_limit,
1986:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _Compare __comp)
1987:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
1988:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__last - __first > 3)
1989:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
1990:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__depth_limit == 0)
1991:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
1992:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::__heap_select(__first, __nth + 1, __last, __comp);
1993:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      // Place the nth largest element in its final position.
1994:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::iter_swap(__first, __nth);
1995:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return;
1996:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
1997:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  --__depth_limit;
1998:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _RandomAccessIterator __cut =
1999:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::__unguarded_partition_pivot(__first, __last, __comp);
2000:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__cut <= __nth)
2001:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __first = __cut;
2002:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
2003:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __last = __cut;
2004:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2005:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__insertion_sort(__first, __last, __comp);
2006:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2007:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2008:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // nth_element
2009:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2010:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // lower_bound moved to stl_algobase.h
2011:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2012:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2013:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Finds the first position in which @p __val could be inserted
2014:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         without changing the ordering.
2015:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2016:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2017:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2018:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2019:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2020:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return An iterator pointing to the first element <em>not less
2021:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           than</em> @p __val, or end() if every element is less
2022:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           than @p __val.
2023:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2024:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2025:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2026:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  the function used for the initial sort.
2027:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2028:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2029:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2030:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
2031:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     lower_bound(_ForwardIterator __first, _ForwardIterator __last,
2032:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		const _Tp& __val, _Compare __comp)
2033:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2034:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2035:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2036:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
ARM GAS  /tmp/ccvzGucR.s 			page 177


2037:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
2038:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower_pred(__first, __last,
2039:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 						__val, __comp);
2040:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2041:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__lower_bound(__first, __last, __val,
2042:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_val(__comp));
2043:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2044:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2045:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2046:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2047:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
2048:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
2049:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  const _Tp& __val, _Compare __comp)
2050:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2051:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
2052:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_DistanceType;
2053:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2054:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _DistanceType __len = std::distance(__first, __last);
2055:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2056:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__len > 0)
2057:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2058:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _DistanceType __half = __len >> 1;
2059:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _ForwardIterator __middle = __first;
2060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::advance(__middle, __half);
2061:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__val, __middle))
2062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __len = __half;
2063:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
2064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2065:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __first = __middle;
2066:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__first;
2067:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __len = __len - __half - 1;
2068:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2069:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2070:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __first;
2071:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2072:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2073:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2074:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Finds the last position in which @p __val could be inserted
2075:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         without changing the ordering.
2076:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2077:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2078:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2079:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2080:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An iterator pointing to the first element greater than @p __val,
2081:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           or end() if no elements are greater than @p __val.
2082:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2083:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2084:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
2085:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2086:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
2087:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     upper_bound(_ForwardIterator __first, _ForwardIterator __last,
2088:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		const _Tp& __val)
2089:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2090:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2091:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2092:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2093:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
ARM GAS  /tmp/ccvzGucR.s 			page 178


2094:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper(__first, __last, __val);
2095:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2096:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__upper_bound(__first, __last, __val,
2097:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_less_iter());
2098:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2099:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Finds the last position in which @p __val could be inserted
2102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         without changing the ordering.
2103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An iterator pointing to the first element greater than @p __val,
2109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           or end() if no elements are greater than @p __val.
2110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  the function used for the initial sort.
2114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
2118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     upper_bound(_ForwardIterator __first, _ForwardIterator __last,
2119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		const _Tp& __val, _Compare __comp)
2120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper_pred(__first, __last,
2126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 						__val, __comp);
2127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__upper_bound(__first, __last, __val,
2129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
2130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp,
2133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _CompareItTp, typename _CompareTpIt>
2134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     pair<_ForwardIterator, _ForwardIterator>
2136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __equal_range(_ForwardIterator __first, _ForwardIterator __last,
2137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  const _Tp& __val,
2138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _CompareItTp __comp_it_val, _CompareTpIt __comp_val_it)
2139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
2141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_DistanceType;
2142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _DistanceType __len = std::distance(__first, __last);
2144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__len > 0)
2146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _DistanceType __half = __len >> 1;
2148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _ForwardIterator __middle = __first;
2149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::advance(__middle, __half);
2150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp_it_val(__middle, __val))
ARM GAS  /tmp/ccvzGucR.s 			page 179


2151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __first = __middle;
2153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__first;
2154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __len = __len - __half - 1;
2155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else if (__comp_val_it(__val, __middle))
2157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    __len = __half;
2158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
2159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _ForwardIterator __left
2161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		= std::__lower_bound(__first, __middle, __val, __comp_it_val);
2162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::advance(__first, __len);
2163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _ForwardIterator __right
2164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		= std::__upper_bound(++__middle, __first, __val, __comp_val_it);
2165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
2166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
2169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Finds the largest subrange in which @p __val could be inserted
2173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         at any place in it without changing the ordering.
2174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An pair of iterators defining the subrange.
2179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is equivalent to
2182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @code
2183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *    std::make_pair(lower_bound(__first, __last, __val),
2184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *                   upper_bound(__first, __last, __val))
2185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @endcode
2186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  but does not actually call those functions.
2187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
2189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
2191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     equal_range(_ForwardIterator __first, _ForwardIterator __last,
2192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		const _Tp& __val)
2193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
2198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower(__first, __last, __val);
2201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper(__first, __last, __val);
2202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__equal_range(__first, __last, __val,
2204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_less_val(),
2205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_less_iter());
2206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
ARM GAS  /tmp/ccvzGucR.s 			page 180


2208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Finds the largest subrange in which @p __val could be inserted
2210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         at any place in it without changing the ordering.
2211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An pair of iterators defining the subrange.
2216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This is equivalent to
2219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @code
2220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *    std::make_pair(lower_bound(__first, __last, __val, __comp),
2221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *                   upper_bound(__first, __last, __val, __comp))
2222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @endcode
2223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  but does not actually call those functions.
2224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
2228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     equal_range(_ForwardIterator __first, _ForwardIterator __last,
2229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		const _Tp& __val, _Compare __comp)
2230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
2235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower_pred(__first, __last,
2238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 						__val, __comp);
2239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper_pred(__first, __last,
2240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 						__val, __comp);
2241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__equal_range(__first, __last, __val,
2243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_val(__comp),
2244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
2245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Determines whether an element exists in a range.
2249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return True if @p __val (or its equivalent) is in [@p
2254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  __first,@p __last ].
2255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Note that this does not actually return an iterator to @p __val.  For
2257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  that, use std::find or a container's specialized find member functions.
2258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
2260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     bool
2262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     binary_search(_ForwardIterator __first, _ForwardIterator __last,
2263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  const _Tp& __val)
2264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
ARM GAS  /tmp/ccvzGucR.s 			page 181


2265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower(__first, __last, __val);
2270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper(__first, __last, __val);
2271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __i
2273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	= std::__lower_bound(__first, __last, __val,
2274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_less_val());
2275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __i != __last && !(__val < *__i);
2276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Determines whether an element exists in a range.
2280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  True if @p __val (or its equivalent) is in @p [__first,__last].
2286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Note that this does not actually return an iterator to @p __val.  For
2288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  that, use std::find or a container's specialized find member functions.
2289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  the function used for the initial sort.
2292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     bool
2296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     binary_search(_ForwardIterator __first, _ForwardIterator __last,
2297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  const _Tp& __val, _Compare __comp)
2298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower_pred(__first, __last,
2304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 						__val, __comp);
2305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper_pred(__first, __last,
2306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 						__val, __comp);
2307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __i
2309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	= std::__lower_bound(__first, __last, __val,
2310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_comp_val(__comp));
2311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __i != __last && !bool(__comp(__val, *__i));
2312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // merge
2315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the __merge_adaptive routines.
2317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2,
2318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _OutputIterator, typename _Compare>
2319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
2321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			  _InputIterator2 __first2, _InputIterator2 __last2,
ARM GAS  /tmp/ccvzGucR.s 			page 182


2322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			  _OutputIterator __result, _Compare __comp)
2323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first1 != __last1 && __first2 != __last2)
2325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__first2, __first1))
2327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first2);
2329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__first2;
2330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
2332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first1);
2334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__first1;
2335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__result;
2337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first1 != __last1)
2339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_GLIBCXX_MOVE3(__first1, __last1, __result);
2340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the __merge_adaptive routines.
2343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
2344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BidirectionalIterator3, typename _Compare>
2345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
2347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   _BidirectionalIterator1 __last1,
2348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   _BidirectionalIterator2 __first2,
2349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   _BidirectionalIterator2 __last2,
2350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   _BidirectionalIterator3 __result,
2351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   _Compare __comp)
2352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first1 == __last1)
2354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _GLIBCXX_MOVE_BACKWARD3(__first2, __last2, __result);
2356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return;
2357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else if (__first2 == __last2)
2359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return;
2360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       --__last1;
2362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       --__last2;
2363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (true)
2364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__last2, __last1))
2366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      *--__result = _GLIBCXX_MOVE(*__last1);
2368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (__first1 == __last1)
2369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		{
2370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _GLIBCXX_MOVE_BACKWARD3(__first2, ++__last2, __result);
2371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  return;
2372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		}
2373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      --__last1;
2374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
2376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      *--__result = _GLIBCXX_MOVE(*__last2);
2378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (__first2 == __last2)
ARM GAS  /tmp/ccvzGucR.s 			page 183


2379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		return;
2380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      --__last2;
2381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the merge routines.
2386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
2387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Distance>
2388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _BidirectionalIterator1
2389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __rotate_adaptive(_BidirectionalIterator1 __first,
2390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _BidirectionalIterator1 __middle,
2391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _BidirectionalIterator1 __last,
2392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _Distance __len1, _Distance __len2,
2393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _BidirectionalIterator2 __buffer,
2394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _Distance __buffer_size)
2395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _BidirectionalIterator2 __buffer_end;
2397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__len1 > __len2 && __len2 <= __buffer_size)
2398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__len2)
2400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __buffer_end = _GLIBCXX_MOVE3(__middle, __last, __buffer);
2402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _GLIBCXX_MOVE_BACKWARD3(__first, __middle, __last);
2403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return _GLIBCXX_MOVE3(__buffer, __buffer_end, __first);
2404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
2406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return __first;
2407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else if (__len1 <= __buffer_size)
2409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__len1)
2411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);
2413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _GLIBCXX_MOVE3(__middle, __last, __first);
2414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return _GLIBCXX_MOVE_BACKWARD3(__buffer, __buffer_end, __last);
2415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
2417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return __last;
2418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
2420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return std::rotate(__first, __middle, __last);
2421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the merge routines.
2424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Distance, 
2425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Pointer, typename _Compare>
2426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __merge_adaptive(_BidirectionalIterator __first,
2428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _BidirectionalIterator __middle,
2429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _BidirectionalIterator __last,
2430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _Distance __len1, _Distance __len2,
2431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _Pointer __buffer, _Distance __buffer_size,
2432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _Compare __comp)
2433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__len1 <= __len2 && __len1 <= __buffer_size)
2435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
ARM GAS  /tmp/ccvzGucR.s 			page 184


2436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _Pointer __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);
2437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
2438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				     __first, __comp);
2439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else if (__len2 <= __buffer_size)
2441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _Pointer __buffer_end = _GLIBCXX_MOVE3(__middle, __last, __buffer);
2443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__move_merge_adaptive_backward(__first, __middle, __buffer,
2444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					      __buffer_end, __last, __comp);
2445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
2447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _BidirectionalIterator __first_cut = __first;
2449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _BidirectionalIterator __second_cut = __middle;
2450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _Distance __len11 = 0;
2451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _Distance __len22 = 0;
2452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__len1 > __len2)
2453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __len11 = __len1 / 2;
2455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::advance(__first_cut, __len11);
2456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __second_cut
2457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		= std::__lower_bound(__middle, __last, *__first_cut,
2458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__iter_comp_val(__comp));
2459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __len22 = std::distance(__middle, __second_cut);
2460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
2462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __len22 = __len2 / 2;
2464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::advance(__second_cut, __len22);
2465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __first_cut
2466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		= std::__upper_bound(__first, __middle, *__second_cut,
2467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__val_comp_iter(__comp));
2468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      __len11 = std::distance(__first, __first_cut);
2469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _BidirectionalIterator __new_middle
2472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    = std::__rotate_adaptive(__first_cut, __middle, __second_cut,
2473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				     __len1 - __len11, __len22, __buffer,
2474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				     __buffer_size);
2475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
2476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__len22, __buffer, __buffer_size, __comp);
2477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__merge_adaptive(__new_middle, __second_cut, __last,
2478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__len1 - __len11,
2479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__len2 - __len22, __buffer,
2480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__buffer_size, __comp);
2481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the merge routines.
2485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Distance,
2486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Compare>
2487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __merge_without_buffer(_BidirectionalIterator __first,
2489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _BidirectionalIterator __middle,
2490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _BidirectionalIterator __last,
2491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _Distance __len1, _Distance __len2,
2492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _Compare __comp)
ARM GAS  /tmp/ccvzGucR.s 			page 185


2493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__len1 == 0 || __len2 == 0)
2495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return;
2496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__len1 + __len2 == 2)
2498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__middle, __first))
2500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    std::iter_swap(__first, __middle);
2501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return;
2502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _BidirectionalIterator __first_cut = __first;
2505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _BidirectionalIterator __second_cut = __middle;
2506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _Distance __len11 = 0;
2507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _Distance __len22 = 0;
2508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__len1 > __len2)
2509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __len11 = __len1 / 2;
2511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::advance(__first_cut, __len11);
2512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __second_cut
2513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    = std::__lower_bound(__middle, __last, *__first_cut,
2514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				 __gnu_cxx::__ops::__iter_comp_val(__comp));
2515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __len22 = std::distance(__middle, __second_cut);
2516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
2518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __len22 = __len2 / 2;
2520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::advance(__second_cut, __len22);
2521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __first_cut
2522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    = std::__upper_bound(__first, __middle, *__second_cut,
2523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				 __gnu_cxx::__ops::__val_comp_iter(__comp));
2524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __len11 = std::distance(__first, __first_cut);
2525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _BidirectionalIterator __new_middle
2528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	= std::rotate(__first_cut, __middle, __second_cut);
2529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__merge_without_buffer(__first, __first_cut, __new_middle,
2530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  __len11, __len22, __comp);
2531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__merge_without_buffer(__new_middle, __second_cut, __last,
2532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  __len1 - __len11, __len2 - __len22, __comp);
2533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
2536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __inplace_merge(_BidirectionalIterator __first,
2538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		    _BidirectionalIterator __middle,
2539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		    _BidirectionalIterator __last,
2540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		    _Compare __comp)
2541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_BidirectionalIterator>::value_type
2543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _ValueType;
2544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_BidirectionalIterator>::difference_type
2545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _DistanceType;
2546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __middle || __middle == __last)
2548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return;
2549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
ARM GAS  /tmp/ccvzGucR.s 			page 186


2550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       const _DistanceType __len1 = std::distance(__first, __middle);
2551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       const _DistanceType __len2 = std::distance(__middle, __last);
2552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef _Temporary_buffer<_BidirectionalIterator, _ValueType> _TmpBuf;
2554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _TmpBuf __buf(__first, __len1 + __len2);
2555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__buf.begin() == 0)
2557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::__merge_without_buffer
2558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  (__first, __middle, __last, __len1, __len2, __comp);
2559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
2560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::__merge_adaptive
2561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  (__first, __middle, __last, __len1, __len2, __buf.begin(),
2562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   _DistanceType(__buf.size()), __comp);
2563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Merges two sorted ranges in place.
2567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __middle  Another iterator.
2570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  Nothing.
2572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Merges two sorted and consecutive ranges, [__first,__middle) and
2574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__middle,__last), and puts the result in [__first,__last).  The
2575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  output will be sorted.  The sort is @e stable, that is, for
2576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  equivalent elements in the two ranges, elements from the first
2577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  range will always come before elements from the second.
2578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  If enough additional memory is available, this takes (__last-__first)-1
2580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  comparisons.  Otherwise an NlogN algorithm is used, where N is
2581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  distance(__first,__last).
2582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
2584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline void
2585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inplace_merge(_BidirectionalIterator __first,
2586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _BidirectionalIterator __middle,
2587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _BidirectionalIterator __last)
2588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
2591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    _BidirectionalIterator>)
2592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
2593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
2594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_sorted(__first, __middle);
2595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_sorted(__middle, __last);
2596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
2597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__inplace_merge(__first, __middle, __last,
2599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_less_iter());
2600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Merges two sorted ranges in place.
2604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __middle  Another iterator.
ARM GAS  /tmp/ccvzGucR.s 			page 187


2607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  Nothing.
2610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Merges two sorted and consecutive ranges, [__first,__middle) and
2612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [middle,last), and puts the result in [__first,__last).  The output will
2613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  be sorted.  The sort is @e stable, that is, for equivalent
2614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  elements in the two ranges, elements from the first range will always
2615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  come before elements from the second.
2616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  If enough additional memory is available, this takes (__last-__first)-1
2618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  comparisons.  Otherwise an NlogN algorithm is used, where N is
2619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  distance(__first,__last).
2620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  the function used for the initial sort.
2623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
2625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline void
2626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inplace_merge(_BidirectionalIterator __first,
2627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _BidirectionalIterator __middle,
2628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _BidirectionalIterator __last,
2629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		  _Compare __comp)
2630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
2633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    _BidirectionalIterator>)
2634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type,
2636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
2637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_sorted_pred(__first, __middle, __comp);
2638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_sorted_pred(__middle, __last, __comp);
2639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
2640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__inplace_merge(__first, __middle, __last,
2642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_comp_iter(__comp));
2643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the __merge_sort_loop routines.
2647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
2648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Compare>
2649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _OutputIterator
2650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __move_merge(_InputIterator __first1, _InputIterator __last1,
2651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		 _InputIterator __first2, _InputIterator __last2,
2652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		 _OutputIterator __result, _Compare __comp)
2653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first1 != __last1 && __first2 != __last2)
2655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__first2, __first1))
2657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first2);
2659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__first2;
2660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
2662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first1);
ARM GAS  /tmp/ccvzGucR.s 			page 188


2664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      ++__first1;
2665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__result;
2667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return _GLIBCXX_MOVE3(__first2, __last2,
2669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			    _GLIBCXX_MOVE3(__first1, __last1,
2670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					   __result));
2671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
2674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Distance, typename _Compare>
2675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __merge_sort_loop(_RandomAccessIterator1 __first,
2677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _RandomAccessIterator1 __last,
2678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _RandomAccessIterator2 __result, _Distance __step_size,
2679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _Compare __comp)
2680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       const _Distance __two_step = 2 * __step_size;
2682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__last - __first >= __two_step)
2684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __result = std::__move_merge(__first, __first + __step_size,
2686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				       __first + __step_size,
2687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				       __first + __two_step,
2688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				       __result, __comp);
2689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __first += __two_step;
2690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __step_size = std::min(_Distance(__last - __first), __step_size);
2692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__move_merge(__first, __first + __step_size,
2694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			__first + __step_size, __last, __result, __comp);
2695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Distance,
2698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Compare>
2699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __chunk_insertion_sort(_RandomAccessIterator __first,
2702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _RandomAccessIterator __last,
2703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _Distance __chunk_size, _Compare __comp)
2704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__last - __first >= __chunk_size)
2706:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2707:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__insertion_sort(__first, __first + __chunk_size, __comp);
2708:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __first += __chunk_size;
2709:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2710:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__insertion_sort(__first, __last, __comp);
2711:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2712:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2713:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   enum { _S_chunk_size = 7 };
2714:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2715:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
2716:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2717:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __merge_sort_with_buffer(_RandomAccessIterator __first,
2718:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     _RandomAccessIterator __last,
2719:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     _Pointer __buffer, _Compare __comp)
2720:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
ARM GAS  /tmp/ccvzGucR.s 			page 189


2721:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::difference_type
2722:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	_Distance;
2723:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2724:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       const _Distance __len = __last - __first;
2725:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       const _Pointer __buffer_last = __buffer + __len;
2726:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2727:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _Distance __step_size = _S_chunk_size;
2728:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__chunk_insertion_sort(__first, __last, __step_size, __comp);
2729:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2730:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__step_size < __len)
2731:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2732:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__merge_sort_loop(__first, __last, __buffer,
2733:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				 __step_size, __comp);
2734:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __step_size *= 2;
2735:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__merge_sort_loop(__buffer, __buffer_last, __first,
2736:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				 __step_size, __comp);
2737:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __step_size *= 2;
2738:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2739:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2740:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2741:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Pointer,
2742:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Distance, typename _Compare>
2743:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2744:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __stable_sort_adaptive(_RandomAccessIterator __first,
2745:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _RandomAccessIterator __last,
2746:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _Pointer __buffer, _Distance __buffer_size,
2747:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			   _Compare __comp)
2748:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2749:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       const _Distance __len = (__last - __first + 1) / 2;
2750:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       const _RandomAccessIterator __middle = __first + __len;
2751:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__len > __buffer_size)
2752:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2753:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__stable_sort_adaptive(__first, __middle, __buffer,
2754:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				      __buffer_size, __comp);
2755:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__stable_sort_adaptive(__middle, __last, __buffer,
2756:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				      __buffer_size, __comp);
2757:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2758:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
2759:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2760:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
2761:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
2762:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2763:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__merge_adaptive(__first, __middle, __last,
2764:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			    _Distance(__middle - __first),
2765:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			    _Distance(__last - __middle),
2766:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			    __buffer, __buffer_size,
2767:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			    __comp);
2768:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2769:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2770:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /// This is a helper function for the stable sorting routines.
2771:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
2772:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     void
2773:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __inplace_stable_sort(_RandomAccessIterator __first,
2774:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			  _RandomAccessIterator __last, _Compare __comp)
2775:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__last - __first < 15)
2777:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
ARM GAS  /tmp/ccvzGucR.s 			page 190


2778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  std::__insertion_sort(__first, __last, __comp);
2779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return;
2780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2781:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _RandomAccessIterator __middle = __first + (__last - __first) / 2;
2782:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__inplace_stable_sort(__first, __middle, __comp);
2783:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__inplace_stable_sort(__middle, __last, __comp);
2784:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       std::__merge_without_buffer(__first, __middle, __last,
2785:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  __middle - __first,
2786:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  __last - __middle,
2787:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  __comp);
2788:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2790:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // stable_sort
2791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // Set algorithms: includes, set_union, set_intersection, set_difference,
2793:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // set_symmetric_difference.  All of these algorithms have the precondition
2794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // that their input ranges are sorted and the postcondition that their output
2795:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // ranges are sorted.
2796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2,
2798:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Compare>
2799:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2800:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     bool
2801:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __includes(_InputIterator1 __first1, _InputIterator1 __last1,
2802:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _InputIterator2 __first2, _InputIterator2 __last2,
2803:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	       _Compare __comp)
2804:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2805:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first1 != __last1 && __first2 != __last2)
2806:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (__comp(__first2, __first1))
2807:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return false;
2808:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	else if (__comp(__first1, __first2))
2809:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first1;
2810:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	else
2811:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  {
2812:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__first1;
2813:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    ++__first2;
2814:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  }
2815:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2816:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __first2 == __last2;
2817:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2818:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2819:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2820:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Determines whether all elements of a sequence exists in a range.
2821:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first1  Start of search range.
2822:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last1   End of search range.
2823:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first2  Start of sequence
2824:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last2   End of sequence.
2825:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  True if each element in [__first2,__last2) is contained in order
2826:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  within [__first1,__last1).  False otherwise.
2827:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup set_algorithms
2828:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2829:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This operation expects both [__first1,__last1) and
2830:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first2,__last2) to be sorted.  Searches for the presence of
2831:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  each element in [__first2,__last2) within [__first1,__last1).
2832:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  The iterators over each range only move forward, so this is a
2833:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  linear algorithm.  If an element in [__first2,__last2) is not
2834:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  found before the search iterator reaches @p __last2, false is
ARM GAS  /tmp/ccvzGucR.s 			page 191


2835:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  returned.
2836:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2837:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2>
2838:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2839:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
2840:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     includes(_InputIterator1 __first1, _InputIterator1 __last1,
2841:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _InputIterator2 __first2, _InputIterator2 __last2)
2842:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2843:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2844:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
2845:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
2846:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2847:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type,
2848:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type>)
2849:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2850:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type,
2851:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type>)
2852:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_sorted_set(__first1, __last1, __first2);
2853:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_sorted_set(__first2, __last2, __first1);
2854:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive2(__first1, __last1);
2855:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive2(__first2, __last2);
2856:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2857:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__includes(__first1, __last1, __first2, __last2,
2858:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_less_iter());
2859:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2860:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2861:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2862:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Determines whether all elements of a sequence exists in a range
2863:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  using comparison.
2864:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup set_algorithms
2865:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first1  Start of search range.
2866:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last1   End of search range.
2867:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first2  Start of sequence
2868:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last2   End of sequence.
2869:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    Comparison function to use.
2870:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return True if each element in [__first2,__last2) is contained
2871:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  in order within [__first1,__last1) according to comp.  False
2872:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  otherwise.  @ingroup set_algorithms
2873:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2874:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  This operation expects both [__first1,__last1) and
2875:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first2,__last2) to be sorted.  Searches for the presence of
2876:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  each element in [__first2,__last2) within [__first1,__last1),
2877:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  using comp to decide.  The iterators over each range only move
2878:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  forward, so this is a linear algorithm.  If an element in
2879:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  [__first2,__last2) is not found before the search iterator
2880:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  reaches @p __last2, false is returned.
2881:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2882:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2,
2883:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Compare>
2884:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2885:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
2886:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     includes(_InputIterator1 __first1, _InputIterator1 __last1,
2887:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _InputIterator2 __first2, _InputIterator2 __last2,
2888:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	     _Compare __comp)
2889:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2890:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2891:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
ARM GAS  /tmp/ccvzGucR.s 			page 192


2892:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
2893:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2894:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type,
2895:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type>)
2896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2897:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type,
2898:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type>)
2899:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);
2900:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);
2901:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);
2902:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);
2903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__includes(__first1, __last1, __first2, __last2,
2905:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_comp_iter(__comp));
2906:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2907:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // nth_element
2909:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // merge
2910:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // set_difference
2911:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // set_intersection
2912:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // set_union
2913:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // stable_sort
2914:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // set_symmetric_difference
2915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // min_element
2916:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // max_element
2917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2918:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
2919:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2920:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     bool
2921:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __next_permutation(_BidirectionalIterator __first,
2922:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		       _BidirectionalIterator __last, _Compare __comp)
2923:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2924:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
2925:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return false;
2926:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _BidirectionalIterator __i = __first;
2927:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       ++__i;
2928:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__i == __last)
2929:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return false;
2930:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __i = __last;
2931:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       --__i;
2932:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2933:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for(;;)
2934:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
2935:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _BidirectionalIterator __ii = __i;
2936:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  --__i;
2937:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__i, __ii))
2938:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
2939:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _BidirectionalIterator __j = __last;
2940:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      while (!__comp(__i, --__j))
2941:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		{}
2942:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::iter_swap(__i, __j);
2943:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::__reverse(__ii, __last,
2944:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     std::__iterator_category(__first));
2945:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return true;
2946:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2947:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__i == __first)
2948:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
ARM GAS  /tmp/ccvzGucR.s 			page 193


2949:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::__reverse(__first, __last,
2950:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     std::__iterator_category(__first));
2951:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return false;
2952:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
2953:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
2954:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2955:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2956:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2957:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Permute range into the next @e dictionary ordering.
2958:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2959:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  Start of range.
2960:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   End of range.
2961:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  False if wrapped to first permutation, true otherwise.
2962:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2963:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Treats all permutations of the range as a set of @e dictionary sorted
2964:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  sequences.  Permutes the current sequence into the next one of this set.
2965:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Returns true if there are more sequences to generate.  If the sequence
2966:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  is the largest of the set, the smallest is generated and false returned.
2967:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
2968:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
2969:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2970:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
2971:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     next_permutation(_BidirectionalIterator __first,
2972:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _BidirectionalIterator __last)
2973:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
2974:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
2975:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
2976:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
2977:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
2978:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
2979:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
2980:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
2981:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2982:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__next_permutation
2983:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
2984:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
2985:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
2986:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
2987:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Permute range into the next @e dictionary ordering using
2988:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          comparison functor.
2989:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2990:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  Start of range.
2991:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   End of range.
2992:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp   A comparison functor.
2993:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  False if wrapped to first permutation, true otherwise.
2994:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
2995:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Treats all permutations of the range [__first,__last) as a set of
2996:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @e dictionary sorted sequences ordered by @p __comp.  Permutes the current
2997:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  sequence into the next one of this set.  Returns true if there are more
2998:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  sequences to generate.  If the sequence is the largest of the set, the
2999:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  smallest is generated and false returned.
3000:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3001:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
3002:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3003:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
3004:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     next_permutation(_BidirectionalIterator __first,
3005:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _BidirectionalIterator __last, _Compare __comp)
ARM GAS  /tmp/ccvzGucR.s 			page 194


3006:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3007:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3008:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
3009:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
3010:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
3011:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type,
3012:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
3013:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3014:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
3015:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3016:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__next_permutation
3017:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
3018:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3019:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3020:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
3021:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3022:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     bool
3023:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __prev_permutation(_BidirectionalIterator __first,
3024:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		       _BidirectionalIterator __last, _Compare __comp)
3025:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3026:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
3027:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return false;
3028:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _BidirectionalIterator __i = __first;
3029:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       ++__i;
3030:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__i == __last)
3031:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return false;
3032:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __i = __last;
3033:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       --__i;
3034:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3035:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for(;;)
3036:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
3037:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  _BidirectionalIterator __ii = __i;
3038:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  --__i;
3039:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__ii, __i))
3040:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
3041:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _BidirectionalIterator __j = __last;
3042:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      while (!__comp(--__j, __i))
3043:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		{}
3044:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::iter_swap(__i, __j);
3045:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::__reverse(__ii, __last,
3046:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     std::__iterator_category(__first));
3047:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return true;
3048:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
3049:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__i == __first)
3050:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
3051:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      std::__reverse(__first, __last,
3052:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			     std::__iterator_category(__first));
3053:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      return false;
3054:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
3055:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
3056:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3057:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3058:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3059:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Permute range into the previous @e dictionary ordering.
3060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3061:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  Start of range.
3062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   End of range.
ARM GAS  /tmp/ccvzGucR.s 			page 195


3063:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  False if wrapped to last permutation, true otherwise.
3064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
3065:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Treats all permutations of the range as a set of @e dictionary sorted
3066:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  sequences.  Permutes the current sequence into the previous one of this
3067:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  set.  Returns true if there are more sequences to generate.  If the
3068:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  sequence is the smallest of the set, the largest is generated and false
3069:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  returned.
3070:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3071:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
3072:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3073:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
3074:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     prev_permutation(_BidirectionalIterator __first,
3075:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _BidirectionalIterator __last)
3076:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3077:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3078:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
3079:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
3080:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
3081:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
3082:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3083:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
3084:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3085:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__prev_permutation(__first, __last,
3086:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__iter_less_iter());
3087:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3088:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3089:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3090:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Permute range into the previous @e dictionary ordering using
3091:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          comparison functor.
3092:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3093:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  Start of range.
3094:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   End of range.
3095:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp   A comparison functor.
3096:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  False if wrapped to last permutation, true otherwise.
3097:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
3098:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Treats all permutations of the range [__first,__last) as a set of
3099:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @e dictionary sorted sequences ordered by @p __comp.  Permutes the current
3100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  sequence into the previous one of this set.  Returns true if there are
3101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  more sequences to generate.  If the sequence is the smallest of the set,
3102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  the largest is generated and false returned.
3103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
3105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
3107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     prev_permutation(_BidirectionalIterator __first,
3108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _BidirectionalIterator __last, _Compare __comp)
3109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
3112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
3113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
3114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type,
3115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
3116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
3118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__prev_permutation(__first, __last,
ARM GAS  /tmp/ccvzGucR.s 			page 196


3120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_iter(__comp));
3121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // replace
3124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // replace_if
3125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
3127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Predicate, typename _Tp>
3128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _OutputIterator
3130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __replace_copy_if(_InputIterator __first, _InputIterator __last,
3131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _OutputIterator __result,
3132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _Predicate __pred, const _Tp& __new_value)
3133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (; __first != __last; ++__first, (void)++__result)
3135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (__pred(__first))
3136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  *__result = __new_value;
3137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	else
3138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  *__result = *__first;
3139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __result;
3140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy a sequence, replacing each element of one value with another
3144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         value.
3145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first      An input iterator.
3146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last       An input iterator.
3147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result     An output iterator.
3148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __old_value  The value to be replaced.
3149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __new_value  The replacement value.
3150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   The end of the output sequence, @p result+(last-first).
3151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
3152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies each element in the input range @p [__first,__last) to the
3153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  output range @p [__result,__result+(__last-__first)) replacing elements
3154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  equal to @p __old_value with @p __new_value.
3155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator, typename _Tp>
3157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _OutputIterator
3159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     replace_copy(_InputIterator __first, _InputIterator __last,
3160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		 _OutputIterator __result,
3161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		 const _Tp& __old_value, const _Tp& __new_value)
3162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
3165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
3166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
3167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
3168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type, _Tp>)
3169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__replace_copy_if(__first, __last, __result,
3172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_equals_val(__old_value),
3173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					      __new_value);
3174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
ARM GAS  /tmp/ccvzGucR.s 			page 197


3177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief Copy a sequence, replacing each value for which a predicate
3178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *         returns true with another value.
3179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
3180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first      An input iterator.
3181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last       An input iterator.
3182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __result     An output iterator.
3183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred       A predicate.
3184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __new_value  The replacement value.
3185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return   The end of the output sequence, @p __result+(__last-__first).
3186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *
3187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) to the range
3188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p [__result,__result+(__last-__first)) replacing elements for which
3189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @p __pred returns true with @p __new_value.
3190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
3192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _Predicate, typename _Tp>
3193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _OutputIterator
3195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     replace_copy_if(_InputIterator __first, _InputIterator __last,
3196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		    _OutputIterator __result,
3197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		    _Predicate __pred, const _Tp& __new_value)
3198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
3201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
3202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
3203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
3204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
3205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__replace_copy_if(__first, __last, __result,
3208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__pred_iter(__pred),
3209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 					      __new_value);
3210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #if __cplusplus >= 201103L
3213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Determines whether the elements of a sequence are sorted.
3215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
3217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  True if the elements are sorted, false otherwise.
3219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator>
3221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
3223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     is_sorted(_ForwardIterator __first, _ForwardIterator __last)
3224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return std::is_sorted_until(__first, __last) == __last; }
3225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Determines whether the elements of a sequence are sorted
3228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          according to a comparison functor.
3229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
3231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    A comparison functor.
3233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  True if the elements are sorted, false otherwise.
ARM GAS  /tmp/ccvzGucR.s 			page 198


3234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
3238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     is_sorted(_ForwardIterator __first, _ForwardIterator __last,
3239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      _Compare __comp)
3240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return std::is_sorted_until(__first, __last, __comp) == __last; }
3241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _ForwardIterator
3245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
3246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		      _Compare __comp)
3247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last)
3249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return __last;
3250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __next = __first;
3252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (++__next; __next != __last; __first = __next, (void)++__next)
3253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (__comp(__next, __first))
3254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  return __next;
3255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __next;
3256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Determines the end of a sorted sequence.
3260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
3262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An iterator pointing to the last iterator i in [__first, __last)
3264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           for which the range [__first, i) is sorted.
3265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator>
3267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
3269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)
3270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
3274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
3277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__is_sorted_until(__first, __last,
3279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				    __gnu_cxx::__ops::__iter_less_iter());
3280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Determines the end of a sorted sequence using comparison functor.
3284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
3286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp    A comparison functor.
3288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  An iterator pointing to the last iterator i in [__first, __last)
3289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           for which the range [__first, i) is sorted.
3290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
ARM GAS  /tmp/ccvzGucR.s 			page 199


3291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _ForwardIterator
3294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
3295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		    _Compare __comp)
3296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
3300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type,
3301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
3304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__is_sorted_until(__first, __last,
3306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				    __gnu_cxx::__ops::__iter_comp_iter(__comp));
3307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Determines min and max at once as an ordered pair.
3311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __a  A thing of arbitrary type.
3313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __b  Another thing of arbitrary type.
3314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return A pair(__b, __a) if __b is smaller than __a, pair(__a,
3315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  __b) otherwise.
3316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Tp>
3318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline pair<const _Tp&, const _Tp&>
3320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     minmax(const _Tp& __a, const _Tp& __b)
3321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
3324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)
3326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		       : pair<const _Tp&, const _Tp&>(__a, __b);
3327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Determines min and max at once as an ordered pair.
3331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __a  A thing of arbitrary type.
3333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __b  Another thing of arbitrary type.
3334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp  A @link comparison_functors comparison functor @endlink.
3335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return A pair(__b, __a) if __b is smaller than __a, pair(__a,
3336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  __b) otherwise.
3337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline pair<const _Tp&, const _Tp&>
3341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)
3342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)
3344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			      : pair<const _Tp&, const _Tp&>(__a, __b);
3345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
ARM GAS  /tmp/ccvzGucR.s 			page 200


3348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     pair<_ForwardIterator, _ForwardIterator>
3350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __minmax_element(_ForwardIterator __first, _ForwardIterator __last,
3351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _Compare __comp)
3352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __next = __first;
3354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__first == __last
3355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  || ++__next == __last)
3356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	return std::make_pair(__first, __first);
3357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       _ForwardIterator __min{}, __max{};
3359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__comp(__next, __first))
3360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
3361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __min = __next;
3362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __max = __first;
3363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
3364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
3365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
3366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __min = __first;
3367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __max = __next;
3368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
3369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __first = __next;
3371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       ++__first;
3372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       while (__first != __last)
3374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
3375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __next = __first;
3376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (++__next == __last)
3377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
3378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (__comp(__first, __min))
3379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__min = __first;
3380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      else if (!__comp(__first, __max))
3381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__max = __first;
3382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      break;
3383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
3384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__comp(__next, __first))
3386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
3387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (__comp(__next, __min))
3388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__min = __next;
3389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (!__comp(__first, __max))
3390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__max = __first;
3391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
3392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  else
3393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    {
3394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (__comp(__first, __min))
3395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__min = __first;
3396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      if (!__comp(__next, __max))
3397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__max = __next;
3398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    }
3399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  __first = __next;
3401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first;
3402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
3403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::make_pair(__min, __max);
ARM GAS  /tmp/ccvzGucR.s 			page 201


3405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Return a pair of iterators pointing to the minimum and maximum
3409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          elements in a range.
3410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  Start of range.
3412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   End of range.
3413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  make_pair(m, M), where m is the first iterator i in 
3414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           [__first, __last) such that no other element in the range is
3415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           smaller, and where M is the last iterator i in [__first, __last)
3416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           such that no other element in the range is larger.
3417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator>
3419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
3421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     minmax_element(_ForwardIterator __first, _ForwardIterator __last)
3422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
3426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
3429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__minmax_element(__first, __last,
3431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_less_iter());
3432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Return a pair of iterators pointing to the minimum and maximum
3436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          elements in a range.
3437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first  Start of range.
3439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last   End of range.
3440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __comp   Comparison functor.
3441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return  make_pair(m, M), where m is the first iterator i in 
3442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           [__first, __last) such that no other element in the range is
3443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           smaller, and where M is the last iterator i in [__first, __last)
3444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *           such that no other element in the range is larger.
3445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
3449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     minmax_element(_ForwardIterator __first, _ForwardIterator __last,
3450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _Compare __comp)
3451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
3455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type,
3456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
3459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__minmax_element(__first, __last,
3461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_comp_iter(__comp));
ARM GAS  /tmp/ccvzGucR.s 			page 202


3462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   // N2722 + DR 915.
3465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Tp>
3466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _Tp
3468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     min(initializer_list<_Tp> __l)
3469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return *std::min_element(__l.begin(), __l.end()); }
3470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _Tp
3474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     min(initializer_list<_Tp> __l, _Compare __comp)
3475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return *std::min_element(__l.begin(), __l.end(), __comp); }
3476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Tp>
3478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _Tp
3480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     max(initializer_list<_Tp> __l)
3481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return *std::max_element(__l.begin(), __l.end()); }
3482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline _Tp
3486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     max(initializer_list<_Tp> __l, _Compare __comp)
3487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     { return *std::max_element(__l.begin(), __l.end(), __comp); }
3488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Tp>
3490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline pair<_Tp, _Tp>
3492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     minmax(initializer_list<_Tp> __l)
3493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       pair<const _Tp*, const _Tp*> __p =
3495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::minmax_element(__l.begin(), __l.end());
3496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::make_pair(*__p.first, *__p.second);
3497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline pair<_Tp, _Tp>
3502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     minmax(initializer_list<_Tp> __l, _Compare __comp)
3503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       pair<const _Tp*, const _Tp*> __p =
3505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::minmax_element(__l.begin(), __l.end(), __comp);
3506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::make_pair(*__p.first, *__p.second);
3507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Checks whether a permutation of the second sequence is equal
3511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          to the first sequence.
3512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first1  Start of first range.
3514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last1   End of first range.
3515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first2  Start of second range.
3516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A binary predicate.
3517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return true if there exists a permutation of the elements in
3518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          the range [__first2, __first2 + (__last1 - __first1)),
ARM GAS  /tmp/ccvzGucR.s 			page 203


3519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          beginning with ForwardIterator2 begin, such that
3520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          equal(__first1, __last1, __begin, __pred) returns true;
3521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          otherwise, returns false.
3522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
3524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
3525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
3527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _ForwardIterator2 __first2, _BinaryPredicate __pred)
3529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // concept requirements
3531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
3532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
3533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
3534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator1>::value_type,
3535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator2>::value_type>)
3536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
3537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__is_permutation(__first1, __last1, __first2,
3539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_comp_iter(__pred));
3540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #if __cplusplus > 201103L
3543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
3544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
3545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     bool
3547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
3549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		     _BinaryPredicate __pred)
3550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       using _Cat1
3552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	= typename iterator_traits<_ForwardIterator1>::iterator_category;
3553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       using _Cat2
3554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	= typename iterator_traits<_ForwardIterator2>::iterator_category;
3555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       using _It1_is_RA = is_same<_Cat1, random_access_iterator_tag>;
3556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       using _It2_is_RA = is_same<_Cat2, random_access_iterator_tag>;
3557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       constexpr bool __ra_iters = _It1_is_RA() && _It2_is_RA();
3558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__ra_iters)
3559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
3560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  auto __d1 = std::distance(__first1, __last1);
3561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  auto __d2 = std::distance(__first2, __last2);
3562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__d1 != __d2)
3563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return false;
3564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
3565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // Efficiently compare identical prefixes:  O(N) if sequences
3567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       // have the same elements in the same order.
3568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (; __first1 != __last1 && __first2 != __last2;
3569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  ++__first1, (void)++__first2)
3570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	if (!__pred(__first1, __first2))
3571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  break;
3572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       if (__ra_iters)
3574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
3575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__first1 == __last1)
ARM GAS  /tmp/ccvzGucR.s 			page 204


3576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return true;
3577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
3578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       else
3579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
3580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  auto __d1 = std::distance(__first1, __last1);
3581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  auto __d2 = std::distance(__first2, __last2);
3582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__d1 == 0 && __d2 == 0)
3583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return true;
3584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__d1 != __d2)
3585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return false;
3586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
3587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
3589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	{
3590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (__scan != std::__find_if(__first1, __scan,
3591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
3592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    continue; // We've seen this one before.
3593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  auto __matches = std::__count_if(__first2, __last2,
3595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
3596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	  if (0 == __matches
3597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      || std::__count_if(__scan, __last1,
3598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
3599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	      != __matches)
3600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	    return false;
3601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	}
3602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return true;
3603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Checks whether a permutaion of the second sequence is equal
3607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          to the first sequence.
3608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first1  Start of first range.
3610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last1   End of first range.
3611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first2  Start of second range.
3612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last2   End of first range.
3613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return true if there exists a permutation of the elements in the range
3614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          [__first2, __last2), beginning with ForwardIterator2 begin,
3615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          such that equal(__first1, __last1, begin) returns true;
3616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          otherwise, returns false.
3617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
3619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
3621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _ForwardIterator2 __first2, _ForwardIterator2 __last2)
3623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
3625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
3626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return
3628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	std::__is_permutation(__first1, __last1, __first2, __last2,
3629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 			      __gnu_cxx::__ops::__iter_equal_to_iter());
3630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
ARM GAS  /tmp/ccvzGucR.s 			page 205


3633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Checks whether a permutation of the second sequence is equal
3634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          to the first sequence.
3635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first1  Start of first range.
3637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last1   End of first range.
3638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __first2  Start of second range.
3639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __last2   End of first range.
3640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __pred    A binary predicate.
3641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return true if there exists a permutation of the elements in the range
3642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          [__first2, __last2), beginning with ForwardIterator2 begin,
3643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          such that equal(__first1, __last1, __begin, __pred) returns true;
3644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *          otherwise, returns false.
3645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   */
3646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
3647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
3648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     inline bool
3650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _ForwardIterator2 __first2, _ForwardIterator2 __last2,
3652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 		   _BinaryPredicate __pred)
3653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
3655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
3656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return std::__is_permutation(__first1, __last1, __first2, __last2,
3658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_comp_iter(__pred));
3659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     }
3660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #if __cplusplus > 201402L
3662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** #define __cpp_lib_clamp 201603
3664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h **** 
3665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   /**
3666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @brief  Returns the value clamped between lo and hi.
3667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __val  A value of arbitrary type.
3669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __lo   A lower limit of arbitrary type.
3670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @param  __hi   An upper limit of arbitrary type.
3671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
3672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****    */
3673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****   template<typename _Tp>
3674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     constexpr const _Tp&
3675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 3114              		.loc 14 3675 5 view .LVU825
 3115              	.LBB2415:
3676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
3677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       __glibcxx_assert(!(__hi < __lo));
3678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****       return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 3116              		.loc 14 3678 29 is_stmt 0 view .LVU826
 3117 007a B5EEC00A 		vcmpe.f32	s0, #0
 3118 007e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3119 0082 0BD4     		bmi	.L99
 3120              	.LBE2415:
 3121              	.LBE2414:
 356:Src/motor.cpp ****     return max_torque;
 357:Src/motor.cpp **** }
 3122              		.loc 1 357 1 view .LVU827
ARM GAS  /tmp/ccvzGucR.s 			page 206


 3123 0084 BDEC028B 		vldm	sp!, {d8}
 3124              	.LCFI47:
 3125              		.cfi_remember_state
 3126              		.cfi_restore 80
 3127              		.cfi_restore 81
 3128              		.cfi_def_cfa_offset 16
 3129              	.LBB2418:
 3130              	.LBB2416:
 3131              		.loc 14 3678 44 view .LVU828
 3132 0088 D3ED0D7A 		vldr.32	s15, [r3, #52]
 3133              	.LBE2416:
 3134              	.LBE2418:
 355:Src/motor.cpp ****     return max_torque;
 3135              		.loc 1 355 55 view .LVU829
 3136 008c B4EE670A 		vcmp.f32	s0, s15
 3137 0090 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3138 0094 C8BF     		it	gt
 3139 0096 B0EE670A 		vmovgt.f32	s0, s15
 3140              	.LVL152:
 3141              		.loc 1 357 1 view .LVU830
 3142 009a 38BD     		pop	{r3, r4, r5, pc}
 3143              	.LVL153:
 3144              	.L99:
 3145              	.LCFI48:
 3146              		.cfi_restore_state
 3147              		.loc 1 357 1 view .LVU831
 3148 009c BDEC028B 		vldm	sp!, {d8}
 3149              	.LCFI49:
 3150              		.cfi_remember_state
 3151              		.cfi_restore 80
 3152              		.cfi_restore 81
 3153              		.cfi_def_cfa_offset 16
 3154              	.LBB2419:
 3155              	.LBB2417:
 3156              		.loc 14 3678 29 view .LVU832
 3157 00a0 9FED080A 		vldr.32	s0, .L103
 3158              	.LVL154:
 3159              		.loc 14 3678 29 view .LVU833
 3160              	.LBE2417:
 3161              	.LBE2419:
 356:Src/motor.cpp ****     return max_torque;
 3162              		.loc 1 356 5 is_stmt 1 view .LVU834
 3163              		.loc 1 357 1 is_stmt 0 view .LVU835
 3164 00a4 38BD     		pop	{r3, r4, r5, pc}
 3165              	.LVL155:
 3166              	.L102:
 3167              	.LCFI50:
 3168              		.cfi_restore_state
 3169              	.LBB2420:
 3170              	.LBB2409:
 335:Src/motor.cpp ****     } else {
 3171              		.loc 1 335 9 is_stmt 1 view .LVU836
 335:Src/motor.cpp ****     } else {
 3172              		.loc 1 335 63 is_stmt 0 view .LVU837
 3173 00a6 084B     		ldr	r3, .L103+4
 3174 00a8 DFED087A 		vldr.32	s15, .L103+8
 3175 00ac D3ED008A 		vldr.32	s17, [r3]
ARM GAS  /tmp/ccvzGucR.s 			page 207


 3176 00b0 68EEA78A 		vmul.f32	s17, s17, s15
 3177              	.LVL156:
 3178              	.LBB2403:
 3179              	.LBI2403:
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 3180              		.loc 13 230 5 is_stmt 1 view .LVU838
 3181              	.LBB2404:
 3182              		.loc 13 237 14 is_stmt 0 view .LVU839
 3183 00b4 B4EEE80A 		vcmpe.f32	s0, s17
 3184 00b8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3185 00bc D8BF     		it	le
 3186 00be F0EE408A 		vmovle.f32	s17, s0
 3187 00c2 B4E7     		b	.L93
 3188              	.L104:
 3189              		.align	2
 3190              	.L103:
 3191 00c4 00000000 		.word	0
 3192 00c8 00000000 		.word	vbus_voltage
 3193 00cc 7CD8103F 		.word	1058068604
 3194              	.LBE2404:
 3195              	.LBE2403:
 3196              	.LBE2409:
 3197              	.LBE2420:
 3198              		.cfi_endproc
 3199              	.LFE4974:
 3201              		.section	.text._ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE,"ax",%progbits
 3202              		.align	1
 3203              		.p2align 2,,3
 3204              		.global	_ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE
 3205              		.syntax unified
 3206              		.thumb
 3207              		.thumb_func
 3208              		.fpu fpv4-sp-d16
 3210              	_ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE:
 3211              	.LVL157:
 3212              	.LFB4975:
 358:Src/motor.cpp **** 
 359:Src/motor.cpp **** void Motor::log_timing(ODriveIntf::TimingLog_t log_idx) {
 3213              		.loc 1 359 57 is_stmt 1 view -0
 3214              		.cfi_startproc
 3215              		@ args = 0, pretend = 0, frame = 0
 3216              		@ frame_needed = 0, uses_anonymous_args = 0
 3217              		@ link register save eliminated.
 360:Src/motor.cpp ****     static const uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLO
 3218              		.loc 1 360 5 view .LVU841
 361:Src/motor.cpp ****     uint16_t timing = clocks_per_cnt * htim15.Instance->CNT; // TODO: Use a hw_config
 3219              		.loc 1 361 5 view .LVU842
 3220              		.loc 1 361 47 is_stmt 0 view .LVU843
 3221 0000 044B     		ldr	r3, .L107
 3222 0002 1B68     		ldr	r3, [r3]
 362:Src/motor.cpp **** 
 363:Src/motor.cpp ****     if (log_idx < ODriveIntf::TIMING_LOG_NUM_SLOTS) {
 3223              		.loc 1 363 5 view .LVU844
 3224 0004 0B29     		cmp	r1, #11
 361:Src/motor.cpp ****     uint16_t timing = clocks_per_cnt * htim15.Instance->CNT; // TODO: Use a hw_config
 3225              		.loc 1 361 57 view .LVU845
 3226 0006 5B6A     		ldr	r3, [r3, #36]
ARM GAS  /tmp/ccvzGucR.s 			page 208


 3227              	.LVL158:
 3228              		.loc 1 363 5 is_stmt 1 view .LVU846
 3229 0008 03D8     		bhi	.L105
 364:Src/motor.cpp ****         timing_log_[log_idx] = timing;
 3230              		.loc 1 364 9 view .LVU847
 3231              	.LVL159:
 3232              	.LBB2421:
 3233              	.LBI2421:
 3234              		.file 15 "Inc/motor.hpp"
   1:Inc/motor.hpp **** #ifndef __MOTOR_HPP
   2:Inc/motor.hpp **** #define __MOTOR_HPP
   3:Inc/motor.hpp **** 
   4:Inc/motor.hpp **** 
   5:Inc/motor.hpp **** #include <cstdint>  // Add this for uint32_t
   6:Inc/motor.hpp **** #include "component.hpp"
   7:Inc/motor.hpp **** 
   8:Inc/motor.hpp **** #include "interfaces.hpp"
   9:Inc/motor.hpp **** #include "phase_control_law.hpp"
  10:Inc/motor.hpp **** #include "main.h"
  11:Inc/motor.hpp **** #include "current_limiter.hpp"
  12:Inc/motor.hpp **** #include "foc.hpp"
  13:Inc/motor.hpp **** 
  14:Inc/motor.hpp **** 
  15:Inc/motor.hpp **** class FieldOrientedController;
  16:Inc/motor.hpp **** class Axis;
  17:Inc/motor.hpp **** 
  18:Inc/motor.hpp **** class Motor : public ODriveIntf::MotorIntf{
  19:Inc/motor.hpp **** public:
  20:Inc/motor.hpp ****     struct Iph_BC_t {
  21:Inc/motor.hpp ****         float phA;
  22:Inc/motor.hpp ****         float phB;
  23:Inc/motor.hpp ****         float phC;
  24:Inc/motor.hpp ****     };
  25:Inc/motor.hpp **** 
  26:Inc/motor.hpp ****     enum MotorType {
  27:Inc/motor.hpp ****         MOTOR_TYPE_HIGH_CURRENT          = 0,
  28:Inc/motor.hpp ****         MOTOR_TYPE_GIMBAL                = 2,
  29:Inc/motor.hpp ****         MOTOR_TYPE_ACIM                  = 3,
  30:Inc/motor.hpp ****     };
  31:Inc/motor.hpp **** 
  32:Inc/motor.hpp ****     struct CurrentControl_t{
  33:Inc/motor.hpp ****         float p_gain; // [V/A]
  34:Inc/motor.hpp ****         float i_gain; // [V/As]
  35:Inc/motor.hpp ****         float v_current_control_integral_d; // [V]
  36:Inc/motor.hpp ****         float v_current_control_integral_q; // [V]
  37:Inc/motor.hpp ****         float Ibus; // DC bus current [A]
  38:Inc/motor.hpp ****         // Voltage applied at end of cycle:
  39:Inc/motor.hpp ****         float final_v_alpha; // [V]
  40:Inc/motor.hpp ****         float final_v_beta; // [V]
  41:Inc/motor.hpp **** 
  42:Inc/motor.hpp ****         float final_v_d; // [V]
  43:Inc/motor.hpp ****         float final_v_q; // [V]
  44:Inc/motor.hpp **** 
  45:Inc/motor.hpp ****         float Id_setpoint; // [A]
  46:Inc/motor.hpp ****         float Iq_setpoint; // [A]
  47:Inc/motor.hpp ****         float Iq_measured; // [A]
  48:Inc/motor.hpp ****         float Id_measured; // [A]
ARM GAS  /tmp/ccvzGucR.s 			page 209


  49:Inc/motor.hpp ****         float I_measured_report_filter_k;
  50:Inc/motor.hpp ****         float max_allowed_current; // [A]
  51:Inc/motor.hpp ****         float overcurrent_trip_level; // [A]
  52:Inc/motor.hpp ****         float acim_rotor_flux; // [A]
  53:Inc/motor.hpp ****         float async_phase_vel; // [rad/s electrical]
  54:Inc/motor.hpp ****         float async_phase_offset; // [rad electrical]
  55:Inc/motor.hpp ****     };
  56:Inc/motor.hpp ****     static constexpr int32_t NUM_LINEARITY_SEG = 60;
  57:Inc/motor.hpp ****     static constexpr float CALIBRATION_INCREMENT = 1;
  58:Inc/motor.hpp ****     // NOTE: for gimbal motors, all units of Nm are instead V.
  59:Inc/motor.hpp ****     // example: vel_gain is [V/(turn/s)] instead of [Nm/(turn/s)]
  60:Inc/motor.hpp ****     // example: current_lim and calibration_current will instead determine the maximum voltage appl
  61:Inc/motor.hpp ****     struct Config_t {
  62:Inc/motor.hpp ****         bool pre_calibrated = false; // can be set to true to indicate that all values here are val
  63:Inc/motor.hpp ****         int32_t pole_pairs = 21;
  64:Inc/motor.hpp ****         int32_t gear_ratio = 16;
  65:Inc/motor.hpp ****         float motor_torque_base = 60.0f; // [Nm]
  66:Inc/motor.hpp ****         float calibration_current = 10.0f;    // [A]
  67:Inc/motor.hpp ****         float resistance_calib_max_voltage = 2.0f; // [V] - You may need to increase this if this v
  68:Inc/motor.hpp ****         float phase_inductance = 0.000055f;        // to be set by measure_phase_inductance
  69:Inc/motor.hpp ****         float phase_resistance = 0.07f;        // to be set by measure_phase_resistance
  70:Inc/motor.hpp ****         float torque_constant = 0.087f;         // [Nm/A] for PM motors, [Nm/A^2] for induction mot
  71:Inc/motor.hpp ****         int32_t direction = 1;                // 1 or -1 (0 = unspecified)
  72:Inc/motor.hpp ****         MotorType motor_type = MOTOR_TYPE_HIGH_CURRENT;
  73:Inc/motor.hpp ****         // Read out max_allowed_current to see max supported value for current_lim.
  74:Inc/motor.hpp ****         // float current_lim = 70.0f; //[A]
  75:Inc/motor.hpp ****         float current_lim = 10.0f;          //[A]
  76:Inc/motor.hpp ****         float current_lim_margin = 8.0f;    // Maximum violation of current_lim
  77:Inc/motor.hpp ****         float torque_lim = std::numeric_limits<float>::infinity();           //[Nm]. 
  78:Inc/motor.hpp ****         // Value used to compute shunt amplifier gains
  79:Inc/motor.hpp ****         float requested_current_range = 60.0f; // [A]
  80:Inc/motor.hpp ****         float current_control_bandwidth = 3000.0f;  // [rad/s]
  81:Inc/motor.hpp ****         float inverter_temp_limit_lower = 100;
  82:Inc/motor.hpp ****         float inverter_temp_limit_upper = 120;
  83:Inc/motor.hpp ****         float acim_slip_velocity = 14.706f; // [rad/s electrical] = 1/rotor_tau
  84:Inc/motor.hpp ****         float acim_gain_min_flux = 10; // [A]
  85:Inc/motor.hpp ****         float acim_autoflux_min_Id = 10; // [A]
  86:Inc/motor.hpp ****         bool acim_autoflux_enable = false;
  87:Inc/motor.hpp ****         float acim_autoflux_attack_gain = 10.0f;
  88:Inc/motor.hpp ****         float acim_autoflux_decay_gain = 1.0f;
  89:Inc/motor.hpp **** 
  90:Inc/motor.hpp ****         float Torque_LINEARITY_[NUM_LINEARITY_SEG];
  91:Inc/motor.hpp ****         float CURRENT_LINEARITY_[NUM_LINEARITY_SEG];
  92:Inc/motor.hpp **** 
  93:Inc/motor.hpp ****         float CURRENT2TORQUE_COEFF[2*NUM_LINEARITY_SEG];
  94:Inc/motor.hpp **** 
  95:Inc/motor.hpp ****         bool R_wL_FF_enable = false; // Enable feedforwards for R*I and w*L*I terms
  96:Inc/motor.hpp ****         bool bEMF_FF_enable = false; // Enable feedforward for bEMF
  97:Inc/motor.hpp **** 
  98:Inc/motor.hpp ****         float I_bus_hard_min = -INFINITY;
  99:Inc/motor.hpp ****         float I_bus_hard_max = INFINITY;
 100:Inc/motor.hpp ****         // custom property setters
 101:Inc/motor.hpp ****         Motor* parent = nullptr;
 102:Inc/motor.hpp ****         void set_pre_calibrated(bool value) {
 103:Inc/motor.hpp ****             pre_calibrated = value;
 104:Inc/motor.hpp ****             parent->is_calibrated_ = parent->is_calibrated_ || parent->config_.pre_calibrated;
 105:Inc/motor.hpp ****         }
ARM GAS  /tmp/ccvzGucR.s 			page 210


 106:Inc/motor.hpp ****         void set_phase_inductance(float value) { phase_inductance = value; parent->update_current_c
 107:Inc/motor.hpp ****         void set_phase_resistance(float value) { phase_resistance = value; parent->update_current_c
 108:Inc/motor.hpp ****         void set_current_control_bandwidth(float value) { current_control_bandwidth = value; parent
 109:Inc/motor.hpp ****     };
 110:Inc/motor.hpp **** 
 111:Inc/motor.hpp ****     Motor(const MotorHardwareConfig_t& hw_config,
 112:Inc/motor.hpp ****          Config_t& config);
 113:Inc/motor.hpp **** 
 114:Inc/motor.hpp **** 
 115:Inc/motor.hpp ****     bool arm(PhaseControlLaw<3>* control_law);
 116:Inc/motor.hpp ****     bool disarm();
 117:Inc/motor.hpp **** 
 118:Inc/motor.hpp ****     void current_meas_cb(uint32_t timestamp);
 119:Inc/motor.hpp ****     void pwm_update_cb(uint32_t output_timestamp);
 120:Inc/motor.hpp **** 
 121:Inc/motor.hpp ****     void setup() {
 122:Inc/motor.hpp ****         int32_t index = 0;
 123:Inc/motor.hpp ****         DRV8301_setup();
 124:Inc/motor.hpp ****         for( index = 0;index < NUM_LINEARITY_SEG;index++)
 125:Inc/motor.hpp ****         {
 126:Inc/motor.hpp ****             L_Slop_Array_P_[index] = config_.Torque_LINEARITY_[index];
 127:Inc/motor.hpp ****             L_Slop_Array_N_[index] = config_.CURRENT_LINEARITY_[index];
 128:Inc/motor.hpp ****         }
 129:Inc/motor.hpp **** 
 130:Inc/motor.hpp ****     }
 131:Inc/motor.hpp ****     void reset_current_control();
 132:Inc/motor.hpp **** 
 133:Inc/motor.hpp ****     void update_current_controller_gains();
 134:Inc/motor.hpp ****     void DRV8301_setup();
 135:Inc/motor.hpp **** 
 136:Inc/motor.hpp ****     bool check_DRV_fault();
 137:Inc/motor.hpp ****     void set_error(ODriveIntf::MotorIntf::Error error);
 138:Inc/motor.hpp ****     bool do_checks();
 139:Inc/motor.hpp ****     float effective_current_lim();
 140:Inc/motor.hpp ****     float max_available_torque();
 141:Inc/motor.hpp ****     void log_timing(ODriveIntf::TimingLog_t log_idx);
 142:Inc/motor.hpp ****     float phase_current_from_adcval(int32_t ADCValue, float phase_current_gain_coeff);
 143:Inc/motor.hpp ****     bool check_for_current_saturation(const uint32_t ADCValue);
 144:Inc/motor.hpp ****     bool measure_phase_resistance(float test_current, float max_voltage);
 145:Inc/motor.hpp ****     bool measure_phase_inductance(float test_voltage);
 146:Inc/motor.hpp ****     bool run_calibration();
 147:Inc/motor.hpp ****     bool enqueue_modulation_timings(float mod_alpha, float mod_beta);
 148:Inc/motor.hpp ****     bool enqueue_voltage_timings(float v_alpha, float v_beta);
 149:Inc/motor.hpp ****     bool FOC_voltage(float v_d, float v_q, float pwm_phase);
 150:Inc/motor.hpp ****     bool FOC_current(float Id_des, float Iq_des, float I_phase, float pwm_phase);
 151:Inc/motor.hpp ****     bool update(float current_setpoint, float phase, float phase_vel);
 152:Inc/motor.hpp ****     void update(uint32_t timestamp);
 153:Inc/motor.hpp ****     void pos_linearity_ini(void);
 154:Inc/motor.hpp ****     float current_Correct(int32_t Torque_Org);
 155:Inc/motor.hpp ****     void abc_sign_calculation(float phase , int32_t *a, int32_t *b, int32_t *c);
 156:Inc/motor.hpp ****     void apply_pwm_timings(uint16_t timings[3], bool tentative);
 157:Inc/motor.hpp ****     const MotorHardwareConfig_t& hw_config_;
 158:Inc/motor.hpp ****     Config_t& config_;
 159:Inc/motor.hpp ****     Axis* axis_ = nullptr; // set by Axis constructor
 160:Inc/motor.hpp **** 
 161:Inc/motor.hpp **** //private:
 162:Inc/motor.hpp **** 
ARM GAS  /tmp/ccvzGucR.s 			page 211


 163:Inc/motor.hpp ****     uint16_t next_timings_[3] = {
 164:Inc/motor.hpp ****         TIM_1_8_PERIOD_CLOCKS / 2,
 165:Inc/motor.hpp ****         TIM_1_8_PERIOD_CLOCKS / 2,
 166:Inc/motor.hpp ****         TIM_1_8_PERIOD_CLOCKS / 2
 167:Inc/motor.hpp ****     };
 168:Inc/motor.hpp ****     bool next_timings_valid_ = false;
 169:Inc/motor.hpp ****     uint16_t last_cpu_time_ = 0;
 170:Inc/motor.hpp ****     int timing_log_index_ = 0;
 171:Inc/motor.hpp ****     struct {
 172:Inc/motor.hpp ****         uint16_t& operator[](size_t idx) { return content[idx]; }
 3235              		.loc 15 172 19 view .LVU848
 3236              	.LBE2421:
 3237              		.loc 15 172 44 view .LVU849
 3238              		.loc 1 364 30 is_stmt 0 view .LVU850
 3239 000a 00EB4100 		add	r0, r0, r1, lsl #1
 3240              	.LVL160:
 361:Src/motor.cpp **** 
 3241              		.loc 1 361 57 view .LVU851
 3242 000e 5B00     		lsls	r3, r3, #1
 3243              	.LVL161:
 3244              		.loc 1 364 30 view .LVU852
 3245 0010 8383     		strh	r3, [r0, #28]	@ movhi
 3246              	.L105:
 365:Src/motor.cpp ****     }
 366:Src/motor.cpp **** }
 3247              		.loc 1 366 1 view .LVU853
 3248 0012 7047     		bx	lr
 3249              	.L108:
 3250              		.align	2
 3251              	.L107:
 3252 0014 00000000 		.word	htim15
 3253              		.cfi_endproc
 3254              	.LFE4975:
 3256              		.section	.text._ZN5Motor18pos_linearity_initEv,"ax",%progbits
 3257              		.align	1
 3258              		.p2align 2,,3
 3259              		.global	_ZN5Motor18pos_linearity_initEv
 3260              		.syntax unified
 3261              		.thumb
 3262              		.thumb_func
 3263              		.fpu fpv4-sp-d16
 3265              	_ZN5Motor18pos_linearity_initEv:
 3266              	.LVL162:
 3267              	.LFB4976:
 367:Src/motor.cpp **** 
 368:Src/motor.cpp **** 
 369:Src/motor.cpp **** void Motor::pos_linearity_init(void)
 370:Src/motor.cpp **** {
 3268              		.loc 1 370 1 is_stmt 1 view -0
 3269              		.cfi_startproc
 3270              		@ args = 0, pretend = 0, frame = 0
 3271              		@ frame_needed = 0, uses_anonymous_args = 0
 3272              		@ link register save eliminated.
 371:Src/motor.cpp **** /* 	int16_t i = 0;
 372:Src/motor.cpp **** 	for(i=0;i<NUM_LINEARITY_SEG-1;i++)
 373:Src/motor.cpp **** 	{
 374:Src/motor.cpp **** 		L_Slop_Array_[i] = (config_.CURRENT_LINEARITY_[i+1] - config_.CURRENT_LINEARITY_[i]) / (config_.T
ARM GAS  /tmp/ccvzGucR.s 			page 212


 375:Src/motor.cpp **** 	} */
 376:Src/motor.cpp **** }
 3273              		.loc 1 376 1 is_stmt 0 view .LVU855
 3274 0000 7047     		bx	lr
 3275              		.cfi_endproc
 3276              	.LFE4976:
 3278 0002 00BF     		.section	.text._ZN5Motor15current_CorrectEl,"ax",%progbits
 3279              		.align	1
 3280              		.p2align 2,,3
 3281              		.global	_ZN5Motor15current_CorrectEl
 3282              		.syntax unified
 3283              		.thumb
 3284              		.thumb_func
 3285              		.fpu fpv4-sp-d16
 3287              	_ZN5Motor15current_CorrectEl:
 3288              	.LVL163:
 3289              	.LFB4977:
 377:Src/motor.cpp **** 
 378:Src/motor.cpp **** float Motor::current_Correct(int32_t Torque_Org)
 379:Src/motor.cpp **** {
 3290              		.loc 1 379 1 is_stmt 1 view -0
 3291              		.cfi_startproc
 3292              		@ args = 0, pretend = 0, frame = 0
 3293              		@ frame_needed = 0, uses_anonymous_args = 0
 3294              		@ link register save eliminated.
 380:Src/motor.cpp **** /* 	float slopTotall = 0;
 381:Src/motor.cpp **** 	int32_t Index_A = 0,Index_B = NUM_LINEARITY_SEG-1;
 382:Src/motor.cpp **** 	int32_t i = 0;
 383:Src/motor.cpp ****     float current_Corrected = 0;
 384:Src/motor.cpp **** 	if(Torque_Org>=config_.Torque_LINEARITY_[0] && Torque_Org<config_.Torque_LINEARITY_[NUM_LINEARITY_
 385:Src/motor.cpp **** 	{
 386:Src/motor.cpp **** 		while(1)
 387:Src/motor.cpp **** 		{
 388:Src/motor.cpp **** 			if(Index_B-Index_A == 1)
 389:Src/motor.cpp **** 			{
 390:Src/motor.cpp **** 				break;
 391:Src/motor.cpp **** 			}
 392:Src/motor.cpp **** 			i = (Index_A + Index_B)/2;
 393:Src/motor.cpp **** 			if(Torque_Org<=config_.Torque_LINEARITY_[i])
 394:Src/motor.cpp **** 			{
 395:Src/motor.cpp **** 				Index_B = i;
 396:Src/motor.cpp **** 			}
 397:Src/motor.cpp **** 			else
 398:Src/motor.cpp **** 			{
 399:Src/motor.cpp **** 				Index_A = i;
 400:Src/motor.cpp **** 			}
 401:Src/motor.cpp **** 		}
 402:Src/motor.cpp **** 		current_Corrected = ((Torque_Org - config_.Torque_LINEARITY_[Index_A])* L_Slop_Array_[Index_A]) +
 403:Src/motor.cpp **** 	}
 404:Src/motor.cpp **** 	else if(Torque_Org<config_.Torque_LINEARITY_[0])
 405:Src/motor.cpp **** 	{
 406:Src/motor.cpp **** 		current_Corrected = Torque_Org-config_.Torque_LINEARITY_[0]; 
 407:Src/motor.cpp **** 				if( current_Corrected < - 16384)
 408:Src/motor.cpp **** 		{
 409:Src/motor.cpp **** 			current_Corrected = -16384;
 410:Src/motor.cpp **** 		}
 411:Src/motor.cpp **** 	}	
ARM GAS  /tmp/ccvzGucR.s 			page 213


 412:Src/motor.cpp **** 	else
 413:Src/motor.cpp **** 	{
 414:Src/motor.cpp **** 			slopTotall = (config_.CURRENT_LINEARITY_[NUM_LINEARITY_SEG-1] - config_.CURRENT_LINEARITY_[0])/(
 415:Src/motor.cpp **** 			current_Corrected = ((Torque_Org - config_.Torque_LINEARITY_[NUM_LINEARITY_SEG-1])* slopTotall) 
 416:Src/motor.cpp **** 			if( current_Corrected> 32767 )
 417:Src/motor.cpp **** 			{
 418:Src/motor.cpp **** 				current_Corrected = 32767;
 419:Src/motor.cpp **** 			}
 420:Src/motor.cpp **** 		
 421:Src/motor.cpp **** 	} */
 422:Src/motor.cpp ****     
 423:Src/motor.cpp ****     return 0;
 3295              		.loc 1 423 5 view .LVU857
 424:Src/motor.cpp **** }
 3296              		.loc 1 424 1 is_stmt 0 view .LVU858
 3297 0000 9FED010A 		vldr.32	s0, .L111
 3298 0004 7047     		bx	lr
 3299              	.L112:
 3300 0006 00BF     		.align	2
 3301              	.L111:
 3302 0008 00000000 		.word	0
 3303              		.cfi_endproc
 3304              	.LFE4977:
 3306              		.section	.text._ZN5Motor31setting_motor_current_linearityEmf,"ax",%progbits
 3307              		.align	1
 3308              		.p2align 2,,3
 3309              		.global	_ZN5Motor31setting_motor_current_linearityEmf
 3310              		.syntax unified
 3311              		.thumb
 3312              		.thumb_func
 3313              		.fpu fpv4-sp-d16
 3315              	_ZN5Motor31setting_motor_current_linearityEmf:
 3316              	.LVL164:
 3317              	.LFB4978:
 425:Src/motor.cpp **** 
 426:Src/motor.cpp **** 
 427:Src/motor.cpp **** 
 428:Src/motor.cpp **** 
 429:Src/motor.cpp **** void Motor::setting_motor_current_linearity(uint32_t index, float value)
 430:Src/motor.cpp **** {
 3318              		.loc 1 430 1 is_stmt 1 view -0
 3319              		.cfi_startproc
 3320              		@ args = 0, pretend = 0, frame = 0
 3321              		@ frame_needed = 0, uses_anonymous_args = 0
 3322              		@ link register save eliminated.
 431:Src/motor.cpp ****     if( index < NUM_LINEARITY_SEG )
 3323              		.loc 1 431 5 view .LVU860
 3324 0000 3B29     		cmp	r1, #59
 3325 0002 04D8     		bhi	.L113
 432:Src/motor.cpp ****     {
 433:Src/motor.cpp ****         config_.CURRENT_LINEARITY_[index] = value;
 3326              		.loc 1 433 9 view .LVU861
 3327              		.loc 1 433 43 is_stmt 0 view .LVU862
 3328 0004 4368     		ldr	r3, [r0, #4]
 3329 0006 03EB8101 		add	r1, r3, r1, lsl #2
 3330              	.LVL165:
 3331              		.loc 1 433 43 view .LVU863
ARM GAS  /tmp/ccvzGucR.s 			page 214


 3332 000a 81ED540A 		vstr.32	s0, [r1, #336]
 3333              	.L113:
 434:Src/motor.cpp ****     }
 435:Src/motor.cpp **** 	
 436:Src/motor.cpp **** }
 3334              		.loc 1 436 1 view .LVU864
 3335 000e 7047     		bx	lr
 3336              		.cfi_endproc
 3337              	.LFE4978:
 3339              		.section	.text._ZN5Motor27get_motor_current_linearityEm,"ax",%progbits
 3340              		.align	1
 3341              		.p2align 2,,3
 3342              		.global	_ZN5Motor27get_motor_current_linearityEm
 3343              		.syntax unified
 3344              		.thumb
 3345              		.thumb_func
 3346              		.fpu fpv4-sp-d16
 3348              	_ZN5Motor27get_motor_current_linearityEm:
 3349              	.LVL166:
 3350              	.LFB4979:
 437:Src/motor.cpp **** 
 438:Src/motor.cpp **** float Motor::get_motor_current_linearity(uint32_t index)
 439:Src/motor.cpp **** {
 3351              		.loc 1 439 1 is_stmt 1 view -0
 3352              		.cfi_startproc
 3353              		@ args = 0, pretend = 0, frame = 0
 3354              		@ frame_needed = 0, uses_anonymous_args = 0
 3355              		@ link register save eliminated.
 440:Src/motor.cpp ****     if( index < NUM_LINEARITY_SEG )
 3356              		.loc 1 440 5 view .LVU866
 441:Src/motor.cpp ****     {
 442:Src/motor.cpp ****         return config_.CURRENT_LINEARITY_[index];
 3357              		.loc 1 442 9 view .LVU867
 440:Src/motor.cpp ****     if( index < NUM_LINEARITY_SEG )
 3358              		.loc 1 440 5 is_stmt 0 view .LVU868
 3359 0000 3B29     		cmp	r1, #59
 3360              		.loc 1 442 48 view .LVU869
 3361 0002 9DBF     		ittte	ls
 3362 0004 4368     		ldrls	r3, [r0, #4]
 3363 0006 03EB8101 		addls	r1, r3, r1, lsl #2
 3364              	.LVL167:
 3365              		.loc 1 442 48 view .LVU870
 3366 000a 91ED540A 		vldrls.32	s0, [r1, #336]
 443:Src/motor.cpp ****     }
 444:Src/motor.cpp ****     else
 445:Src/motor.cpp ****     {
 446:Src/motor.cpp ****         return 0;
 3367              		.loc 1 446 16 view .LVU871
 3368 000e 9FED010A 		vldrhi.32	s0, .L118
 447:Src/motor.cpp ****     }
 448:Src/motor.cpp **** }
 3369              		.loc 1 448 1 view .LVU872
 3370 0012 7047     		bx	lr
 3371              	.L119:
 3372              		.align	2
 3373              	.L118:
 3374 0014 00000000 		.word	0
ARM GAS  /tmp/ccvzGucR.s 			page 215


 3375              		.cfi_endproc
 3376              	.LFE4979:
 3378              		.section	.text._ZN5Motor30setting_motor_torque_linearityEmf,"ax",%progbits
 3379              		.align	1
 3380              		.p2align 2,,3
 3381              		.global	_ZN5Motor30setting_motor_torque_linearityEmf
 3382              		.syntax unified
 3383              		.thumb
 3384              		.thumb_func
 3385              		.fpu fpv4-sp-d16
 3387              	_ZN5Motor30setting_motor_torque_linearityEmf:
 3388              	.LVL168:
 3389              	.LFB4980:
 449:Src/motor.cpp **** 
 450:Src/motor.cpp **** void Motor::setting_motor_torque_linearity(uint32_t index, float value)
 451:Src/motor.cpp **** {
 3390              		.loc 1 451 1 is_stmt 1 view -0
 3391              		.cfi_startproc
 3392              		@ args = 0, pretend = 0, frame = 0
 3393              		@ frame_needed = 0, uses_anonymous_args = 0
 3394              		@ link register save eliminated.
 452:Src/motor.cpp ****     if(index < NUM_LINEARITY_SEG )
 3395              		.loc 1 452 5 view .LVU874
 3396 0000 3B29     		cmp	r1, #59
 3397 0002 04D8     		bhi	.L120
 453:Src/motor.cpp ****     {
 454:Src/motor.cpp ****         config_.Torque_LINEARITY_[index] = value;
 3398              		.loc 1 454 9 view .LVU875
 3399              		.loc 1 454 42 is_stmt 0 view .LVU876
 3400 0004 4368     		ldr	r3, [r0, #4]
 3401 0006 03EB8101 		add	r1, r3, r1, lsl #2
 3402              	.LVL169:
 3403              		.loc 1 454 42 view .LVU877
 3404 000a 81ED180A 		vstr.32	s0, [r1, #96]
 3405              	.L120:
 455:Src/motor.cpp ****     }
 456:Src/motor.cpp **** 	
 457:Src/motor.cpp **** }
 3406              		.loc 1 457 1 view .LVU878
 3407 000e 7047     		bx	lr
 3408              		.cfi_endproc
 3409              	.LFE4980:
 3411              		.section	.text._ZN5Motor26get_motor_torque_linearityEm,"ax",%progbits
 3412              		.align	1
 3413              		.p2align 2,,3
 3414              		.global	_ZN5Motor26get_motor_torque_linearityEm
 3415              		.syntax unified
 3416              		.thumb
 3417              		.thumb_func
 3418              		.fpu fpv4-sp-d16
 3420              	_ZN5Motor26get_motor_torque_linearityEm:
 3421              	.LVL170:
 3422              	.LFB4981:
 458:Src/motor.cpp **** 
 459:Src/motor.cpp **** float Motor::get_motor_torque_linearity(uint32_t index)
 460:Src/motor.cpp **** {
 3423              		.loc 1 460 1 is_stmt 1 view -0
ARM GAS  /tmp/ccvzGucR.s 			page 216


 3424              		.cfi_startproc
 3425              		@ args = 0, pretend = 0, frame = 0
 3426              		@ frame_needed = 0, uses_anonymous_args = 0
 3427              		@ link register save eliminated.
 461:Src/motor.cpp ****     if( index < NUM_LINEARITY_SEG )
 3428              		.loc 1 461 5 view .LVU880
 462:Src/motor.cpp ****     {
 463:Src/motor.cpp ****         return config_.Torque_LINEARITY_[index];
 3429              		.loc 1 463 9 view .LVU881
 461:Src/motor.cpp ****     if( index < NUM_LINEARITY_SEG )
 3430              		.loc 1 461 5 is_stmt 0 view .LVU882
 3431 0000 3B29     		cmp	r1, #59
 3432              		.loc 1 463 47 view .LVU883
 3433 0002 9DBF     		ittte	ls
 3434 0004 4368     		ldrls	r3, [r0, #4]
 3435 0006 03EB8101 		addls	r1, r3, r1, lsl #2
 3436              	.LVL171:
 3437              		.loc 1 463 47 view .LVU884
 3438 000a 91ED180A 		vldrls.32	s0, [r1, #96]
 464:Src/motor.cpp ****     }
 465:Src/motor.cpp ****     else
 466:Src/motor.cpp ****     {
 467:Src/motor.cpp ****         return 0;
 3439              		.loc 1 467 16 view .LVU885
 3440 000e 9FED010A 		vldrhi.32	s0, .L125
 468:Src/motor.cpp ****     }
 469:Src/motor.cpp **** }
 3441              		.loc 1 469 1 view .LVU886
 3442 0012 7047     		bx	lr
 3443              	.L126:
 3444              		.align	2
 3445              	.L125:
 3446 0014 00000000 		.word	0
 3447              		.cfi_endproc
 3448              	.LFE4981:
 3450              		.section	.text._ZN5Motor25get_positive_torque_slopeEm,"ax",%progbits
 3451              		.align	1
 3452              		.p2align 2,,3
 3453              		.global	_ZN5Motor25get_positive_torque_slopeEm
 3454              		.syntax unified
 3455              		.thumb
 3456              		.thumb_func
 3457              		.fpu fpv4-sp-d16
 3459              	_ZN5Motor25get_positive_torque_slopeEm:
 3460              	.LVL172:
 3461              	.LFB4982:
 470:Src/motor.cpp **** 
 471:Src/motor.cpp **** float Motor::get_positive_torque_slope(uint32_t index)
 472:Src/motor.cpp **** {
 3462              		.loc 1 472 1 is_stmt 1 view -0
 3463              		.cfi_startproc
 3464              		@ args = 0, pretend = 0, frame = 0
 3465              		@ frame_needed = 0, uses_anonymous_args = 0
 3466              		@ link register save eliminated.
 473:Src/motor.cpp ****     if(index < NUM_LINEARITY_SEG)
 3467              		.loc 1 473 5 view .LVU888
 474:Src/motor.cpp ****     {
ARM GAS  /tmp/ccvzGucR.s 			page 217


 475:Src/motor.cpp ****         return L_Slop_Array_P_[index];
 3468              		.loc 1 475 9 view .LVU889
 473:Src/motor.cpp ****     if(index < NUM_LINEARITY_SEG)
 3469              		.loc 1 473 5 is_stmt 0 view .LVU890
 3470 0000 3B29     		cmp	r1, #59
 3471              		.loc 1 475 37 view .LVU891
 3472 0002 9ABF     		itte	ls
 3473 0004 00EB8100 		addls	r0, r0, r1, lsl #2
 3474              	.LVL173:
 3475              		.loc 1 475 37 view .LVU892
 3476 0008 90ED340A 		vldrls.32	s0, [r0, #208]
 476:Src/motor.cpp ****     }
 477:Src/motor.cpp ****     else
 478:Src/motor.cpp ****     {
 479:Src/motor.cpp ****         return 0;
 3477              		.loc 1 479 16 view .LVU893
 3478 000c 9FED010A 		vldrhi.32	s0, .L130
 480:Src/motor.cpp ****     }
 481:Src/motor.cpp **** }
 3479              		.loc 1 481 1 view .LVU894
 3480 0010 7047     		bx	lr
 3481              	.L131:
 3482 0012 00BF     		.align	2
 3483              	.L130:
 3484 0014 00000000 		.word	0
 3485              		.cfi_endproc
 3486              	.LFE4982:
 3488              		.section	.text._ZN5Motor25get_negative_torque_slopeEm,"ax",%progbits
 3489              		.align	1
 3490              		.p2align 2,,3
 3491              		.global	_ZN5Motor25get_negative_torque_slopeEm
 3492              		.syntax unified
 3493              		.thumb
 3494              		.thumb_func
 3495              		.fpu fpv4-sp-d16
 3497              	_ZN5Motor25get_negative_torque_slopeEm:
 3498              	.LVL174:
 3499              	.LFB4983:
 482:Src/motor.cpp **** float Motor::get_negative_torque_slope(uint32_t index)
 483:Src/motor.cpp **** {
 3500              		.loc 1 483 1 is_stmt 1 view -0
 3501              		.cfi_startproc
 3502              		@ args = 0, pretend = 0, frame = 0
 3503              		@ frame_needed = 0, uses_anonymous_args = 0
 3504              		@ link register save eliminated.
 484:Src/motor.cpp ****     if(index < NUM_LINEARITY_SEG)
 3505              		.loc 1 484 5 view .LVU896
 485:Src/motor.cpp ****     {
 486:Src/motor.cpp ****         return L_Slop_Array_N_[index];
 3506              		.loc 1 486 9 view .LVU897
 484:Src/motor.cpp ****     if(index < NUM_LINEARITY_SEG)
 3507              		.loc 1 484 5 is_stmt 0 view .LVU898
 3508 0000 3B29     		cmp	r1, #59
 3509              		.loc 1 486 37 view .LVU899
 3510 0002 9ABF     		itte	ls
 3511 0004 00EB8100 		addls	r0, r0, r1, lsl #2
 3512              	.LVL175:
ARM GAS  /tmp/ccvzGucR.s 			page 218


 3513              		.loc 1 486 37 view .LVU900
 3514 0008 90ED700A 		vldrls.32	s0, [r0, #448]
 487:Src/motor.cpp ****     }
 488:Src/motor.cpp ****     else
 489:Src/motor.cpp ****     {
 490:Src/motor.cpp ****         return 0;
 3515              		.loc 1 490 16 view .LVU901
 3516 000c 9FED010A 		vldrhi.32	s0, .L135
 491:Src/motor.cpp ****     }
 492:Src/motor.cpp **** }
 3517              		.loc 1 492 1 view .LVU902
 3518 0010 7047     		bx	lr
 3519              	.L136:
 3520 0012 00BF     		.align	2
 3521              	.L135:
 3522 0014 00000000 		.word	0
 3523              		.cfi_endproc
 3524              	.LFE4983:
 3526              		.section	.text._ZN5Motor29setting_positive_torque_slopeEmf,"ax",%progbits
 3527              		.align	1
 3528              		.p2align 2,,3
 3529              		.global	_ZN5Motor29setting_positive_torque_slopeEmf
 3530              		.syntax unified
 3531              		.thumb
 3532              		.thumb_func
 3533              		.fpu fpv4-sp-d16
 3535              	_ZN5Motor29setting_positive_torque_slopeEmf:
 3536              	.LVL176:
 3537              	.LFB4984:
 493:Src/motor.cpp **** 
 494:Src/motor.cpp **** void  Motor::setting_positive_torque_slope(uint32_t index, float value)
 495:Src/motor.cpp **** {
 3538              		.loc 1 495 1 is_stmt 1 view -0
 3539              		.cfi_startproc
 3540              		@ args = 0, pretend = 0, frame = 0
 3541              		@ frame_needed = 0, uses_anonymous_args = 0
 3542              		@ link register save eliminated.
 496:Src/motor.cpp ****     if(index < NUM_LINEARITY_SEG )
 3543              		.loc 1 496 5 view .LVU904
 3544 0000 3B29     		cmp	r1, #59
 3545 0002 08D8     		bhi	.L137
 497:Src/motor.cpp ****     {
 498:Src/motor.cpp ****         L_Slop_Array_P_[index] = value;
 3546              		.loc 1 498 9 view .LVU905
 499:Src/motor.cpp ****         config_.Torque_LINEARITY_[index] = value;
 3547              		.loc 1 499 42 is_stmt 0 view .LVU906
 3548 0004 4368     		ldr	r3, [r0, #4]
 498:Src/motor.cpp ****         config_.Torque_LINEARITY_[index] = value;
 3549              		.loc 1 498 32 view .LVU907
 3550 0006 00EB8100 		add	r0, r0, r1, lsl #2
 3551              	.LVL177:
 3552              		.loc 1 499 42 view .LVU908
 3553 000a 03EB8101 		add	r1, r3, r1, lsl #2
 3554              	.LVL178:
 498:Src/motor.cpp ****         config_.Torque_LINEARITY_[index] = value;
 3555              		.loc 1 498 32 view .LVU909
 3556 000e 80ED340A 		vstr.32	s0, [r0, #208]
ARM GAS  /tmp/ccvzGucR.s 			page 219


 3557              		.loc 1 499 9 is_stmt 1 view .LVU910
 3558              		.loc 1 499 42 is_stmt 0 view .LVU911
 3559 0012 81ED180A 		vstr.32	s0, [r1, #96]
 3560              	.L137:
 500:Src/motor.cpp ****     }
 501:Src/motor.cpp **** }
 3561              		.loc 1 501 1 view .LVU912
 3562 0016 7047     		bx	lr
 3563              		.cfi_endproc
 3564              	.LFE4984:
 3566              		.section	.text._ZN5Motor29setting_negative_torque_slopeEmf,"ax",%progbits
 3567              		.align	1
 3568              		.p2align 2,,3
 3569              		.global	_ZN5Motor29setting_negative_torque_slopeEmf
 3570              		.syntax unified
 3571              		.thumb
 3572              		.thumb_func
 3573              		.fpu fpv4-sp-d16
 3575              	_ZN5Motor29setting_negative_torque_slopeEmf:
 3576              	.LVL179:
 3577              	.LFB4985:
 502:Src/motor.cpp **** void  Motor::setting_negative_torque_slope(uint32_t index, float value)
 503:Src/motor.cpp **** {
 3578              		.loc 1 503 1 is_stmt 1 view -0
 3579              		.cfi_startproc
 3580              		@ args = 0, pretend = 0, frame = 0
 3581              		@ frame_needed = 0, uses_anonymous_args = 0
 3582              		@ link register save eliminated.
 504:Src/motor.cpp ****     if(index < NUM_LINEARITY_SEG )
 3583              		.loc 1 504 5 view .LVU914
 3584 0000 3B29     		cmp	r1, #59
 3585 0002 08D8     		bhi	.L139
 505:Src/motor.cpp ****     {
 506:Src/motor.cpp ****         L_Slop_Array_N_[index] = value;
 3586              		.loc 1 506 9 view .LVU915
 507:Src/motor.cpp ****         config_.CURRENT_LINEARITY_[index] = value;
 3587              		.loc 1 507 43 is_stmt 0 view .LVU916
 3588 0004 4368     		ldr	r3, [r0, #4]
 506:Src/motor.cpp ****         config_.CURRENT_LINEARITY_[index] = value;
 3589              		.loc 1 506 32 view .LVU917
 3590 0006 00EB8100 		add	r0, r0, r1, lsl #2
 3591              	.LVL180:
 3592              		.loc 1 507 43 view .LVU918
 3593 000a 03EB8101 		add	r1, r3, r1, lsl #2
 3594              	.LVL181:
 506:Src/motor.cpp ****         config_.CURRENT_LINEARITY_[index] = value;
 3595              		.loc 1 506 32 view .LVU919
 3596 000e 80ED700A 		vstr.32	s0, [r0, #448]
 3597              		.loc 1 507 9 is_stmt 1 view .LVU920
 3598              		.loc 1 507 43 is_stmt 0 view .LVU921
 3599 0012 81ED540A 		vstr.32	s0, [r1, #336]
 3600              	.L139:
 508:Src/motor.cpp ****     }
 509:Src/motor.cpp **** }
 3601              		.loc 1 509 1 view .LVU922
 3602 0016 7047     		bx	lr
 3603              		.cfi_endproc
ARM GAS  /tmp/ccvzGucR.s 			page 220


 3604              	.LFE4985:
 3606              		.section	.text._ZN5Motor28setting_current2torque_slopeEmf,"ax",%progbits
 3607              		.align	1
 3608              		.p2align 2,,3
 3609              		.global	_ZN5Motor28setting_current2torque_slopeEmf
 3610              		.syntax unified
 3611              		.thumb
 3612              		.thumb_func
 3613              		.fpu fpv4-sp-d16
 3615              	_ZN5Motor28setting_current2torque_slopeEmf:
 3616              	.LVL182:
 3617              	.LFB4986:
 510:Src/motor.cpp **** 
 511:Src/motor.cpp **** void  Motor::setting_current2torque_slope(uint32_t index, float value)
 512:Src/motor.cpp **** {
 3618              		.loc 1 512 1 is_stmt 1 view -0
 3619              		.cfi_startproc
 3620              		@ args = 0, pretend = 0, frame = 0
 3621              		@ frame_needed = 0, uses_anonymous_args = 0
 3622              		@ link register save eliminated.
 513:Src/motor.cpp ****     if(index < 2*NUM_LINEARITY_SEG )
 3623              		.loc 1 513 5 view .LVU924
 3624 0000 7729     		cmp	r1, #119
 3625 0002 04D8     		bhi	.L141
 514:Src/motor.cpp ****     {
 515:Src/motor.cpp ****         config_.CURRENT2TORQUE_COEFF[index] = value;
 3626              		.loc 1 515 9 view .LVU925
 3627              		.loc 1 515 45 is_stmt 0 view .LVU926
 3628 0004 4368     		ldr	r3, [r0, #4]
 3629 0006 03EB8101 		add	r1, r3, r1, lsl #2
 3630              	.LVL183:
 3631              		.loc 1 515 45 view .LVU927
 3632 000a 81ED900A 		vstr.32	s0, [r1, #576]
 3633              	.L141:
 516:Src/motor.cpp ****     }
 517:Src/motor.cpp **** }
 3634              		.loc 1 517 1 view .LVU928
 3635 000e 7047     		bx	lr
 3636              		.cfi_endproc
 3637              	.LFE4986:
 3639              		.section	.text._ZN5Motor28getting_current2torque_slopeEm,"ax",%progbits
 3640              		.align	1
 3641              		.p2align 2,,3
 3642              		.global	_ZN5Motor28getting_current2torque_slopeEm
 3643              		.syntax unified
 3644              		.thumb
 3645              		.thumb_func
 3646              		.fpu fpv4-sp-d16
 3648              	_ZN5Motor28getting_current2torque_slopeEm:
 3649              	.LVL184:
 3650              	.LFB4987:
 518:Src/motor.cpp **** 
 519:Src/motor.cpp **** 
 520:Src/motor.cpp **** float Motor::getting_current2torque_slope(uint32_t index)
 521:Src/motor.cpp **** {
 3651              		.loc 1 521 1 is_stmt 1 view -0
 3652              		.cfi_startproc
ARM GAS  /tmp/ccvzGucR.s 			page 221


 3653              		@ args = 0, pretend = 0, frame = 0
 3654              		@ frame_needed = 0, uses_anonymous_args = 0
 3655              		@ link register save eliminated.
 522:Src/motor.cpp ****     if(index < 2*NUM_LINEARITY_SEG)
 3656              		.loc 1 522 5 view .LVU930
 523:Src/motor.cpp ****     {
 524:Src/motor.cpp ****         return config_.CURRENT2TORQUE_COEFF[index];
 3657              		.loc 1 524 9 view .LVU931
 522:Src/motor.cpp ****     if(index < 2*NUM_LINEARITY_SEG)
 3658              		.loc 1 522 5 is_stmt 0 view .LVU932
 3659 0000 7729     		cmp	r1, #119
 3660              		.loc 1 524 50 view .LVU933
 3661 0002 9DBF     		ittte	ls
 3662 0004 4368     		ldrls	r3, [r0, #4]
 3663 0006 03EB8101 		addls	r1, r3, r1, lsl #2
 3664              	.LVL185:
 3665              		.loc 1 524 50 view .LVU934
 3666 000a 91ED900A 		vldrls.32	s0, [r1, #576]
 525:Src/motor.cpp ****     }
 526:Src/motor.cpp ****     else
 527:Src/motor.cpp ****     {
 528:Src/motor.cpp ****         return 0;
 3667              		.loc 1 528 16 view .LVU935
 3668 000e 9FED010A 		vldrhi.32	s0, .L146
 529:Src/motor.cpp ****     }
 530:Src/motor.cpp **** }
 3669              		.loc 1 530 1 view .LVU936
 3670 0012 7047     		bx	lr
 3671              	.L147:
 3672              		.align	2
 3673              	.L146:
 3674 0014 00000000 		.word	0
 3675              		.cfi_endproc
 3676              	.LFE4987:
 3678              		.section	.text._ZN5Motor27convert_torque_from_currentEfPfmf,"ax",%progbits
 3679              		.align	1
 3680              		.p2align 2,,3
 3681              		.global	_ZN5Motor27convert_torque_from_currentEfPfmf
 3682              		.syntax unified
 3683              		.thumb
 3684              		.thumb_func
 3685              		.fpu fpv4-sp-d16
 3687              	_ZN5Motor27convert_torque_from_currentEfPfmf:
 3688              	.LVL186:
 3689              	.LFB4988:
 531:Src/motor.cpp **** float Motor::convert_torque_from_current(float current,float *current2torque_coeff,uint32_t coeff_s
 532:Src/motor.cpp **** {
 3690              		.loc 1 532 1 is_stmt 1 view -0
 3691              		.cfi_startproc
 3692              		@ args = 0, pretend = 0, frame = 0
 3693              		@ frame_needed = 0, uses_anonymous_args = 0
 3694              		@ link register save eliminated.
 533:Src/motor.cpp ****     uint32_t idex = (uint32_t)((fabsf(current) *current_step)); 
 3695              		.loc 1 533 5 view .LVU938
 534:Src/motor.cpp ****     float torque_constant = 0;
 535:Src/motor.cpp **** 
 536:Src/motor.cpp ****     if(using_old_torque_constant_ == true)
ARM GAS  /tmp/ccvzGucR.s 			page 222


 3696              		.loc 1 536 5 is_stmt 0 view .LVU939
 3697 0000 90F8CC30 		ldrb	r3, [r0, #204]	@ zero_extendqisi2
 3698              	.LVL187:
 534:Src/motor.cpp ****     float torque_constant = 0;
 3699              		.loc 1 534 5 is_stmt 1 view .LVU940
 3700              		.loc 1 536 5 view .LVU941
 3701 0004 D3B9     		cbnz	r3, .L148
 537:Src/motor.cpp ****     {
 538:Src/motor.cpp ****         return current;
 539:Src/motor.cpp ****     }
 540:Src/motor.cpp ****     
 541:Src/motor.cpp ****     if( idex > (coeff_size -1) )
 3702              		.loc 1 541 5 view .LVU942
 533:Src/motor.cpp ****     float torque_constant = 0;
 3703              		.loc 1 533 38 is_stmt 0 view .LVU943
 3704 0006 F0EEC07A 		vabs.f32	s15, s0
 3705              	.LVL188:
 533:Src/motor.cpp ****     float torque_constant = 0;
 3706              		.loc 1 533 48 view .LVU944
 3707 000a 67EEA00A 		vmul.f32	s1, s15, s1
 3708              	.LVL189:
 3709              		.loc 1 541 28 view .LVU945
 3710 000e 531E     		subs	r3, r2, #1
 533:Src/motor.cpp ****     float torque_constant = 0;
 3711              		.loc 1 533 14 view .LVU946
 3712 0010 FCEEE07A 		vcvt.u32.f32	s15, s1
 3713              	.LVL190:
 542:Src/motor.cpp ****     {
 543:Src/motor.cpp ****         idex = coeff_size -1;
 544:Src/motor.cpp ****     }
 545:Src/motor.cpp ****     
 546:Src/motor.cpp ****     torque_constant = current2torque_coeff[2*idex + (current < 0.0f)];
 3714              		.loc 1 546 62 view .LVU947
 3715 0014 B5EEC00A 		vcmpe.f32	s0, #0
 533:Src/motor.cpp ****     float torque_constant = 0;
 3716              		.loc 1 533 14 view .LVU948
 3717 0018 17EE902A 		vmov	r2, s15	@ int
 3718              	.LVL191:
 3719              		.loc 1 546 5 is_stmt 1 view .LVU949
 547:Src/motor.cpp ****     
 548:Src/motor.cpp ****     return current * torque_constant;
 3720              		.loc 1 548 5 view .LVU950
 546:Src/motor.cpp ****     
 3721              		.loc 1 546 45 is_stmt 0 view .LVU951
 3722 001c 9A42     		cmp	r2, r3
 3723 001e 28BF     		it	cs
 3724 0020 1A46     		movcs	r2, r3
 3725              	.LVL192:
 546:Src/motor.cpp ****     
 3726              		.loc 1 546 62 view .LVU952
 3727 0022 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3728 0026 4CBF     		ite	mi
 3729 0028 0123     		movmi	r3, #1
 3730              	.LVL193:
 546:Src/motor.cpp ****     
 3731              		.loc 1 546 62 view .LVU953
 3732 002a 0023     		movpl	r3, #0
ARM GAS  /tmp/ccvzGucR.s 			page 223


 546:Src/motor.cpp ****     
 3733              		.loc 1 546 69 view .LVU954
 3734 002c 03EB4202 		add	r2, r3, r2, lsl #1
 546:Src/motor.cpp ****     
 3735              		.loc 1 546 21 view .LVU955
 3736 0030 01EB8201 		add	r1, r1, r2, lsl #2
 3737              	.LVL194:
 3738              		.loc 1 548 22 view .LVU956
 3739 0034 D1ED007A 		vldr.32	s15, [r1]
 3740              	.LVL195:
 3741              		.loc 1 548 22 view .LVU957
 3742 0038 20EE270A 		vmul.f32	s0, s0, s15
 3743              	.LVL196:
 3744              	.L148:
 549:Src/motor.cpp **** }
 3745              		.loc 1 549 1 view .LVU958
 3746 003c 7047     		bx	lr
 3747              		.cfi_endproc
 3748              	.LFE4988:
 3750 003e 00BF     		.section	.text._ZN5Motor28check_for_current_saturationEm,"ax",%progbits
 3751              		.align	1
 3752              		.p2align 2,,3
 3753              		.global	_ZN5Motor28check_for_current_saturationEm
 3754              		.syntax unified
 3755              		.thumb
 3756              		.thumb_func
 3757              		.fpu fpv4-sp-d16
 3759              	_ZN5Motor28check_for_current_saturationEm:
 3760              	.LVL197:
 3761              	.LFB4989:
 550:Src/motor.cpp **** 
 551:Src/motor.cpp **** 
 552:Src/motor.cpp **** bool Motor::check_for_current_saturation(const uint32_t ADCValue)
 553:Src/motor.cpp **** {
 3762              		.loc 1 553 1 is_stmt 1 view -0
 3763              		.cfi_startproc
 3764              		@ args = 0, pretend = 0, frame = 0
 3765              		@ frame_needed = 0, uses_anonymous_args = 0
 3766              		@ link register save eliminated.
 554:Src/motor.cpp ****         // Make sure the measurements don't come too close to the current sensor's hardware limitat
 555:Src/motor.cpp ****     if (ADCValue < CURRENT_ADC_LOWER_BOUND || ADCValue > CURRENT_ADC_UPPER_BOUND) {
 3767              		.loc 1 555 5 view .LVU960
 3768              		.loc 1 555 44 is_stmt 0 view .LVU961
 3769 0000 A1F5BA71 		sub	r1, r1, #372
 3770              	.LVL198:
 3771              		.loc 1 555 5 view .LVU962
 3772 0004 40F61753 		movw	r3, #3351
 3773 0008 9942     		cmp	r1, r3
 3774 000a 01D8     		bhi	.L154
 556:Src/motor.cpp ****         error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_c
 557:Src/motor.cpp **** 
 558:Src/motor.cpp ****         axis_->axis_state_.erro = Axis::ENCOS_ERRO::ENCOS_ERROR_CURRENT_LIMIT_VIOLATION;
 559:Src/motor.cpp ****         return false;
 560:Src/motor.cpp ****     }
 561:Src/motor.cpp ****     return true;
 3775              		.loc 1 561 12 view .LVU963
 3776 000c 0120     		movs	r0, #1
ARM GAS  /tmp/ccvzGucR.s 			page 224


 3777              	.LVL199:
 562:Src/motor.cpp **** }
 3778              		.loc 1 562 1 view .LVU964
 3779 000e 7047     		bx	lr
 3780              	.LVL200:
 3781              	.L154:
 556:Src/motor.cpp ****         error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_c
 3782              		.loc 1 556 9 is_stmt 1 view .LVU965
 556:Src/motor.cpp ****         error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_c
 3783              		.loc 1 556 90 is_stmt 0 view .LVU966
 3784 0010 436B     		ldr	r3, [r0, #52]
 558:Src/motor.cpp ****         return false;
 3785              		.loc 1 558 33 view .LVU967
 3786 0012 8268     		ldr	r2, [r0, #8]
 556:Src/motor.cpp ****         error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_c
 3787              		.loc 1 556 90 view .LVU968
 3788 0014 43F48063 		orr	r3, r3, #1024
 558:Src/motor.cpp ****         return false;
 3789              		.loc 1 558 33 view .LVU969
 3790 0018 0221     		movs	r1, #2
 3791              	.LVL201:
 556:Src/motor.cpp ****         error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_c
 3792              		.loc 1 556 16 view .LVU970
 3793 001a 4363     		str	r3, [r0, #52]
 558:Src/motor.cpp ****         return false;
 3794              		.loc 1 558 9 is_stmt 1 view .LVU971
 559:Src/motor.cpp ****     }
 3795              		.loc 1 559 16 is_stmt 0 view .LVU972
 3796 001c 0020     		movs	r0, #0
 3797              	.LVL202:
 558:Src/motor.cpp ****         return false;
 3798              		.loc 1 558 33 view .LVU973
 3799 001e 82F89611 		strb	r1, [r2, #406]
 559:Src/motor.cpp ****     }
 3800              		.loc 1 559 9 is_stmt 1 view .LVU974
 559:Src/motor.cpp ****     }
 3801              		.loc 1 559 16 is_stmt 0 view .LVU975
 3802 0022 7047     		bx	lr
 3803              		.cfi_endproc
 3804              	.LFE4989:
 3806              		.section	.text._ZN5Motor25phase_current_from_adcvalElf,"ax",%progbits
 3807              		.align	1
 3808              		.p2align 2,,3
 3809              		.global	_ZN5Motor25phase_current_from_adcvalElf
 3810              		.syntax unified
 3811              		.thumb
 3812              		.thumb_func
 3813              		.fpu fpv4-sp-d16
 3815              	_ZN5Motor25phase_current_from_adcvalElf:
 3816              	.LVL203:
 3817              	.LFB4990:
 563:Src/motor.cpp **** 
 564:Src/motor.cpp **** float Motor::phase_current_from_adcval(int32_t ADCValue, float phase_current_gain_coeff) {
 3818              		.loc 1 564 90 is_stmt 1 view -0
 3819              		.cfi_startproc
 3820              		@ args = 0, pretend = 0, frame = 0
 3821              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccvzGucR.s 			page 225


 3822              		@ link register save eliminated.
 565:Src/motor.cpp **** 
 566:Src/motor.cpp **** 
 567:Src/motor.cpp ****     float amp_out_volt = (3.3f / (float)(1 << 12)) * (float)ADCValue;
 3823              		.loc 1 567 5 view .LVU977
 568:Src/motor.cpp ****     float shunt_volt = amp_out_volt * phase_current_rev_gain_;
 3824              		.loc 1 568 5 view .LVU978
 569:Src/motor.cpp ****     float current = shunt_volt * hw_config_.shunt_conductance * phase_current_gain_coeff;
 3825              		.loc 1 569 5 view .LVU979
 567:Src/motor.cpp ****     float shunt_volt = amp_out_volt * phase_current_rev_gain_;
 3826              		.loc 1 567 54 is_stmt 0 view .LVU980
 3827 0000 07EE901A 		vmov	s15, r1	@ int
 567:Src/motor.cpp ****     float shunt_volt = amp_out_volt * phase_current_rev_gain_;
 3828              		.loc 1 567 11 view .LVU981
 3829 0004 DFED086A 		vldr.32	s13, .L156
 568:Src/motor.cpp ****     float shunt_volt = amp_out_volt * phase_current_rev_gain_;
 3830              		.loc 1 568 11 view .LVU982
 3831 0008 90ED157A 		vldr.32	s14, [r0, #84]
 3832              		.loc 1 569 45 view .LVU983
 3833 000c 0368     		ldr	r3, [r0]
 567:Src/motor.cpp ****     float shunt_volt = amp_out_volt * phase_current_rev_gain_;
 3834              		.loc 1 567 54 view .LVU984
 3835 000e F8EEE77A 		vcvt.f32.s32	s15, s15
 567:Src/motor.cpp ****     float shunt_volt = amp_out_volt * phase_current_rev_gain_;
 3836              		.loc 1 567 11 view .LVU985
 3837 0012 67EEA67A 		vmul.f32	s15, s15, s13
 3838              	.LVL204:
 568:Src/motor.cpp ****     float shunt_volt = amp_out_volt * phase_current_rev_gain_;
 3839              		.loc 1 568 11 view .LVU986
 3840 0016 67EE877A 		vmul.f32	s15, s15, s14
 3841              	.LVL205:
 3842              		.loc 1 569 32 view .LVU987
 3843 001a 93ED027A 		vldr.32	s14, [r3, #8]
 3844              	.LVL206:
 570:Src/motor.cpp **** 
 571:Src/motor.cpp **** 
 572:Src/motor.cpp **** 
 573:Src/motor.cpp ****     return current;
 3845              		.loc 1 573 5 is_stmt 1 view .LVU988
 569:Src/motor.cpp **** 
 3846              		.loc 1 569 32 is_stmt 0 view .LVU989
 3847 001e 67EE877A 		vmul.f32	s15, s15, s14
 3848              	.LVL207:
 574:Src/motor.cpp **** }
 3849              		.loc 1 574 1 view .LVU990
 3850 0022 27EE800A 		vmul.f32	s0, s15, s0
 3851              	.LVL208:
 3852              		.loc 1 574 1 view .LVU991
 3853 0026 7047     		bx	lr
 3854              	.L157:
 3855              		.align	2
 3856              	.L156:
 3857 0028 3333533A 		.word	978531123
 3858              		.cfi_endproc
 3859              	.LFE4990:
 3861              		.section	.text._ZN5Motor24measure_phase_resistanceEff,"ax",%progbits
 3862              		.align	1
ARM GAS  /tmp/ccvzGucR.s 			page 226


 3863              		.p2align 2,,3
 3864              		.global	_ZN5Motor24measure_phase_resistanceEff
 3865              		.syntax unified
 3866              		.thumb
 3867              		.thumb_func
 3868              		.fpu fpv4-sp-d16
 3870              	_ZN5Motor24measure_phase_resistanceEff:
 3871              	.LVL209:
 3872              	.LFB4991:
 575:Src/motor.cpp **** 
 576:Src/motor.cpp **** //--------------------------------
 577:Src/motor.cpp **** // Measurement and calibration
 578:Src/motor.cpp **** //--------------------------------
 579:Src/motor.cpp **** 
 580:Src/motor.cpp **** // TODO check Ibeta balance to verify good motor connection
 581:Src/motor.cpp **** bool Motor::measure_phase_resistance(float test_current, float max_voltage) {
 3873              		.loc 1 581 77 is_stmt 1 view -0
 3874              		.cfi_startproc
 3875              		@ args = 0, pretend = 0, frame = 40
 3876              		@ frame_needed = 0, uses_anonymous_args = 0
 582:Src/motor.cpp ****     ResistanceMeasurementControlLaw control_law;
 3877              		.loc 1 582 5 view .LVU993
 581:Src/motor.cpp ****     ResistanceMeasurementControlLaw control_law;
 3878              		.loc 1 581 77 is_stmt 0 view .LVU994
 3879 0000 30B5     		push	{r4, r5, lr}
 3880              	.LCFI51:
 3881              		.cfi_def_cfa_offset 12
 3882              		.cfi_offset 4, -12
 3883              		.cfi_offset 5, -8
 3884              		.cfi_offset 14, -4
 3885 0002 2DED028B 		vpush.64	{d8}
 3886              	.LCFI52:
 3887              		.cfi_def_cfa_offset 20
 3888              		.cfi_offset 80, -20
 3889              		.cfi_offset 81, -16
 3890 0006 8BB0     		sub	sp, sp, #44
 3891              	.LCFI53:
 3892              		.cfi_def_cfa_offset 64
 3893              		.loc 1 582 37 view .LVU995
 3894 0008 0023     		movs	r3, #0
 3895 000a 0993     		str	r3, [sp, #36]
 3896 000c CDE90633 		strd	r3, r3, [sp, #24]
 3897 0010 0493     		str	r3, [sp, #16]
 3898 0012 4A4B     		ldr	r3, .L176
 3899 0014 4A49     		ldr	r1, .L176+4
 3900 0016 4B4A     		ldr	r2, .L176+8
 3901 0018 0293     		str	r3, [sp, #8]	@ float
 581:Src/motor.cpp ****     ResistanceMeasurementControlLaw control_law;
 3902              		.loc 1 581 77 view .LVU996
 3903 001a 0546     		mov	r5, r0
 3904              		.loc 1 582 37 view .LVU997
 3905 001c 0123     		movs	r3, #1
 3906 001e 4FF07E50 		mov	r0, #1065353216
 3907              	.LVL210:
 581:Src/motor.cpp ****     ResistanceMeasurementControlLaw control_law;
 3908              		.loc 1 581 77 view .LVU998
 3909 0022 B0EE408A 		vmov.f32	s16, s0
ARM GAS  /tmp/ccvzGucR.s 			page 227


 3910              		.loc 1 582 37 view .LVU999
 3911 0026 0190     		str	r0, [sp, #4]	@ float
 3912 0028 0091     		str	r1, [sp]
 3913 002a 0892     		str	r2, [sp, #32]	@ float
 3914 002c 8DF82430 		strb	r3, [sp, #36]
 583:Src/motor.cpp ****     control_law.target_current_ = test_current;
 3915              		.loc 1 583 5 is_stmt 1 view .LVU1000
 584:Src/motor.cpp ****     control_law.max_voltage_ = max_voltage;
 3916              		.loc 1 584 30 is_stmt 0 view .LVU1001
 3917 0030 CDED030A 		vstr.32	s1, [sp, #12]
 583:Src/motor.cpp ****     control_law.target_current_ = test_current;
 3918              		.loc 1 583 33 view .LVU1002
 3919 0034 8DED050A 		vstr.32	s0, [sp, #20]
 3920              		.loc 1 584 5 is_stmt 1 view .LVU1003
 585:Src/motor.cpp **** 
 586:Src/motor.cpp ****     arm(&control_law);
 3921              		.loc 1 586 5 view .LVU1004
 3922              	.LVL211:
 3923              	.LBB2457:
 3924              	.LBI2457:
 233:Src/motor.cpp **** 
 3925              		.loc 1 233 6 view .LVU1005
 3926              	.LBB2458:
 235:Src/motor.cpp ****     
 3927              		.loc 1 235 5 view .LVU1006
 3928              	.LBB2459:
 3929              	.LBI2459:
  65:Inc/low_level.h ****     uint32_t primask = __get_PRIMASK();
 3930              		.loc 11 65 17 view .LVU1007
 3931              	.LBB2460:
  66:Inc/low_level.h ****     __disable_irq();
 3932              		.loc 11 66 5 view .LVU1008
 3933              	.LBB2461:
 3934              	.LBI2461:
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 3935              		.loc 12 449 31 view .LVU1009
 3936              	.LBB2462:
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 3937              		.loc 12 451 3 view .LVU1010
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 3938              		.loc 12 453 3 view .LVU1011
 3939              		.syntax unified
 3940              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3941 0038 EFF31084 		MRS r4, primask
 3942              	@ 0 "" 2
 3943              	.LVL212:
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3944              		.loc 12 454 3 view .LVU1012
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3945              		.loc 12 454 3 is_stmt 0 view .LVU1013
 3946              		.thumb
 3947              		.syntax unified
 3948              	.LBE2462:
 3949              	.LBE2461:
  67:Inc/low_level.h ****     return primask;
 3950              		.loc 11 67 5 is_stmt 1 view .LVU1014
 3951              	.LBB2463:
ARM GAS  /tmp/ccvzGucR.s 			page 228


 3952              	.LBI2463:
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 3953              		.loc 12 207 27 view .LVU1015
 3954              	.LBB2464:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 3955              		.loc 12 209 3 view .LVU1016
 3956              		.syntax unified
 3957              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3958 003c 72B6     		cpsid i
 3959              	@ 0 "" 2
 3960              		.thumb
 3961              		.syntax unified
 3962              	.LBE2464:
 3963              	.LBE2463:
  68:Inc/low_level.h **** }
 3964              		.loc 11 68 5 view .LVU1017
 3965              	.LVL213:
  68:Inc/low_level.h **** }
 3966              		.loc 11 68 5 is_stmt 0 view .LVU1018
 3967              	.LBE2460:
 3968              	.LBE2459:
 237:Src/motor.cpp **** 
 3969              		.loc 1 237 9 is_stmt 1 view .LVU1019
 240:Src/motor.cpp ****         if (control_law_) {
 3970              		.loc 1 240 16 is_stmt 0 view .LVU1020
 3971 003e AB68     		ldr	r3, [r5, #8]
 240:Src/motor.cpp ****         if (control_law_) {
 3972              		.loc 1 240 33 view .LVU1021
 3973 0040 D868     		ldr	r0, [r3, #12]
 237:Src/motor.cpp **** 
 3974              		.loc 1 237 22 view .LVU1022
 3975 0042 C5F8ACD3 		str	sp, [r5, #940]
 240:Src/motor.cpp ****         if (control_law_) {
 3976              		.loc 1 240 9 is_stmt 1 view .LVU1023
 240:Src/motor.cpp ****         if (control_law_) {
 3977              		.loc 1 240 33 is_stmt 0 view .LVU1024
 3978 0046 FFF7FEFF 		bl	_ZN10Controller5resetEv
 3979              	.LVL214:
 241:Src/motor.cpp ****             control_law_->reset();
 3980              		.loc 1 241 9 is_stmt 1 view .LVU1025
 241:Src/motor.cpp ****             control_law_->reset();
 3981              		.loc 1 241 13 is_stmt 0 view .LVU1026
 3982 004a D5F8AC03 		ldr	r0, [r5, #940]
 241:Src/motor.cpp ****             control_law_->reset();
 3983              		.loc 1 241 9 view .LVU1027
 3984 004e 10B1     		cbz	r0, .L159
 242:Src/motor.cpp ****         }
 3985              		.loc 1 242 13 is_stmt 1 view .LVU1028
 242:Src/motor.cpp ****         }
 3986              		.loc 1 242 33 is_stmt 0 view .LVU1029
 3987 0050 0368     		ldr	r3, [r0]
 242:Src/motor.cpp ****         }
 3988              		.loc 1 242 32 view .LVU1030
 3989 0052 1B68     		ldr	r3, [r3]
 3990 0054 9847     		blx	r3
 3991              	.LVL215:
 3992              	.L159:
ARM GAS  /tmp/ccvzGucR.s 			page 229


 244:Src/motor.cpp ****         armed_state_ = ODriveIntf::MotorIntf::ARMED_STATE_WAITING_FOR_TIMINGS;
 3993              		.loc 1 244 9 is_stmt 1 view .LVU1031
 3994              	.LBB2465:
 3995              	.LBI2465:
 266:Src/motor.cpp ****     current_control_.v_current_control_integral_d_ = 0.0f;
 3996              		.loc 1 266 6 view .LVU1032
 3997              	.LBB2466:
 267:Src/motor.cpp ****     current_control_.v_current_control_integral_q_ = 0.0f;
 3998              		.loc 1 267 5 view .LVU1033
 267:Src/motor.cpp ****     current_control_.v_current_control_integral_q_ = 0.0f;
 3999              		.loc 1 267 52 is_stmt 0 view .LVU1034
 4000 0056 0023     		movs	r3, #0
 4001              	.LBE2466:
 4002              	.LBE2465:
 246:Src/motor.cpp **** 
 4003              		.loc 1 246 19 view .LVU1035
 4004 0058 40F20112 		movw	r2, #257
 4005              	.LBB2468:
 4006              	.LBB2467:
 267:Src/motor.cpp ****     current_control_.v_current_control_integral_q_ = 0.0f;
 4007              		.loc 1 267 52 view .LVU1036
 4008 005c C5F89033 		str	r3, [r5, #912]	@ float
 268:Src/motor.cpp ****     I_bus_ = 0.0f;
 4009              		.loc 1 268 5 is_stmt 1 view .LVU1037
 268:Src/motor.cpp ****     I_bus_ = 0.0f;
 4010              		.loc 1 268 52 is_stmt 0 view .LVU1038
 4011 0060 C5F89433 		str	r3, [r5, #916]	@ float
 269:Src/motor.cpp **** }
 4012              		.loc 1 269 5 is_stmt 1 view .LVU1039
 269:Src/motor.cpp **** }
 4013              		.loc 1 269 12 is_stmt 0 view .LVU1040
 4014 0064 C5F8F032 		str	r3, [r5, #752]	@ float
 4015              	.LVL216:
 269:Src/motor.cpp **** }
 4016              		.loc 1 269 12 view .LVU1041
 4017              	.LBE2467:
 4018              	.LBE2468:
 245:Src/motor.cpp ****         is_armed_ = true;
 4019              		.loc 1 245 9 is_stmt 1 view .LVU1042
 246:Src/motor.cpp **** 
 4020              		.loc 1 246 9 view .LVU1043
 246:Src/motor.cpp **** 
 4021              		.loc 1 246 19 is_stmt 0 view .LVU1044
 4022 0068 2A87     		strh	r2, [r5, #56]	@ movhi
 248:Src/motor.cpp **** 
 4023              		.loc 1 248 5 is_stmt 1 view .LVU1045
 4024              	.LVL217:
 4025              	.LBB2469:
 4026              	.LBI2469:
  71:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
 4027              		.loc 11 71 13 view .LVU1046
 4028              	.LBE2469:
 4029              	.LBE2458:
 4030              	.LBE2457:
 4031              		.loc 11 72 5 view .LVU1047
 4032              	.LBB2478:
 4033              	.LBB2476:
ARM GAS  /tmp/ccvzGucR.s 			page 230


 4034              	.LBB2474:
 4035              	.LBB2470:
 4036              	.LBI2470:
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 4037              		.loc 12 479 27 view .LVU1048
 4038              	.LBB2471:
 4039              		.loc 12 481 3 view .LVU1049
 4040              		.syntax unified
 4041              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4042 006a 84F31088 		MSR primask, r4
 4043              	@ 0 "" 2
 4044              	.LVL218:
 4045              		.loc 12 481 3 is_stmt 0 view .LVU1050
 4046              		.thumb
 4047              		.syntax unified
 4048              	.LBE2471:
 4049              	.LBE2470:
 4050              	.LBE2474:
 250:Src/motor.cpp **** }
 4051              		.loc 1 250 5 is_stmt 1 view .LVU1051
 250:Src/motor.cpp **** }
 4052              		.loc 1 250 5 is_stmt 0 view .LVU1052
 4053              	.LBE2476:
 4054              	.LBE2478:
 4055              	.LBB2479:
 587:Src/motor.cpp **** 
 588:Src/motor.cpp ****     for (size_t i = 0; i < 3000; ++i) {
 4056              		.loc 1 588 26 is_stmt 1 view .LVU1053
 4057              	.LBE2479:
 4058              	.LBB2480:
 4059              	.LBB2477:
 4060              	.LBB2475:
 4061              	.LBB2473:
 4062              	.LBB2472:
 4063              		.loc 12 481 3 is_stmt 0 view .LVU1054
 4064 006e 40F6B834 		movw	r4, #3000
 4065              	.LVL219:
 4066              		.loc 12 481 3 view .LVU1055
 4067 0072 07E0     		b	.L161
 4068              	.LVL220:
 4069              	.L174:
 4070              		.loc 12 481 3 view .LVU1056
 4071              	.LBE2472:
 4072              	.LBE2473:
 4073              	.LBE2475:
 4074              	.LBE2477:
 4075              	.LBE2480:
 4076              	.LBB2481:
 589:Src/motor.cpp ****         if (!((axis_->requested_state_ == ODriveIntf::AxisIntf::AXIS_STATE_UNDEFINED) && axis_->mot
 4077              		.loc 1 589 104 discriminator 1 view .LVU1057
 4078 0074 DB6E     		ldr	r3, [r3, #108]
 4079              		.loc 1 589 13 discriminator 1 view .LVU1058
 4080 0076 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 4081 007a 4BB1     		cbz	r3, .L160
 590:Src/motor.cpp ****             break;
 591:Src/motor.cpp ****         }
 592:Src/motor.cpp ****         osDelay(1);
ARM GAS  /tmp/ccvzGucR.s 			page 231


 4082              		.loc 1 592 16 discriminator 2 view .LVU1059
 4083 007c FFF7FEFF 		bl	osDelay
 4084              	.LVL221:
 588:Src/motor.cpp ****         if (!((axis_->requested_state_ == ODriveIntf::AxisIntf::AXIS_STATE_UNDEFINED) && axis_->mot
 4085              		.loc 1 588 5 is_stmt 1 discriminator 2 view .LVU1060
 588:Src/motor.cpp ****         if (!((axis_->requested_state_ == ODriveIntf::AxisIntf::AXIS_STATE_UNDEFINED) && axis_->mot
 4086              		.loc 1 588 26 discriminator 2 view .LVU1061
 4087 0080 013C     		subs	r4, r4, #1
 4088 0082 05D0     		beq	.L160
 4089              	.L161:
 589:Src/motor.cpp ****         if (!((axis_->requested_state_ == ODriveIntf::AxisIntf::AXIS_STATE_UNDEFINED) && axis_->mot
 4090              		.loc 1 589 9 view .LVU1062
 4091              		.loc 1 592 9 view .LVU1063
 589:Src/motor.cpp ****         if (!((axis_->requested_state_ == ODriveIntf::AxisIntf::AXIS_STATE_UNDEFINED) && axis_->mot
 4092              		.loc 1 589 16 is_stmt 0 view .LVU1064
 4093 0084 AB68     		ldr	r3, [r5, #8]
 589:Src/motor.cpp ****         if (!((axis_->requested_state_ == ODriveIntf::AxisIntf::AXIS_STATE_UNDEFINED) && axis_->mot
 4094              		.loc 1 589 9 view .LVU1065
 4095 0086 93F87E21 		ldrb	r2, [r3, #382]	@ zero_extendqisi2
 4096              		.loc 1 592 16 view .LVU1066
 4097 008a 0120     		movs	r0, #1
 589:Src/motor.cpp ****         if (!((axis_->requested_state_ == ODriveIntf::AxisIntf::AXIS_STATE_UNDEFINED) && axis_->mot
 4098              		.loc 1 589 9 view .LVU1067
 4099 008c 002A     		cmp	r2, #0
 4100 008e F1D0     		beq	.L174
 4101              	.L160:
 4102              	.LBE2481:
 593:Src/motor.cpp ****     }
 594:Src/motor.cpp **** 
 595:Src/motor.cpp ****     bool success = is_armed_;
 4103              		.loc 1 595 5 is_stmt 1 view .LVU1068
 4104              		.loc 1 595 10 is_stmt 0 view .LVU1069
 4105 0090 95F83800 		ldrb	r0, [r5, #56]	@ zero_extendqisi2
 4106              	.LVL222:
 596:Src/motor.cpp **** 
 597:Src/motor.cpp ****     //// De-energize motor
 598:Src/motor.cpp ****     //if (!enqueue_voltage_timings(motor, 0.0f, 0.0f))
 599:Src/motor.cpp ****     //    return false; // error set inside enqueue_voltage_timings
 600:Src/motor.cpp **** 
 601:Src/motor.cpp ****     disarm();
 4107              		.loc 1 601 5 is_stmt 1 view .LVU1070
 4108              	.LBB2482:
 4109              	.LBI2482:
 253:Src/motor.cpp **** {
 4110              		.loc 1 253 6 view .LVU1071
 4111              	.LBB2483:
 255:Src/motor.cpp ****     bool was_armed = armed_state_ != ODriveIntf::MotorIntf::ARMED_STATE_DISARMED;
 4112              		.loc 1 255 5 view .LVU1072
 4113              	.LBB2484:
 4114              	.LBI2484:
  65:Inc/low_level.h ****     uint32_t primask = __get_PRIMASK();
 4115              		.loc 11 65 17 view .LVU1073
 4116              	.LBB2485:
  66:Inc/low_level.h ****     __disable_irq();
 4117              		.loc 11 66 5 view .LVU1074
 4118              	.LBB2486:
 4119              	.LBI2486:
ARM GAS  /tmp/ccvzGucR.s 			page 232


 449:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 4120              		.loc 12 449 31 view .LVU1075
 4121              	.LBB2487:
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 4122              		.loc 12 451 3 view .LVU1076
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 4123              		.loc 12 453 3 view .LVU1077
 4124              		.syntax unified
 4125              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4126 0094 EFF31081 		MRS r1, primask
 4127              	@ 0 "" 2
 4128              	.LVL223:
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4129              		.loc 12 454 3 view .LVU1078
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4130              		.loc 12 454 3 is_stmt 0 view .LVU1079
 4131              		.thumb
 4132              		.syntax unified
 4133              	.LBE2487:
 4134              	.LBE2486:
  67:Inc/low_level.h ****     return primask;
 4135              		.loc 11 67 5 is_stmt 1 view .LVU1080
 4136              	.LBB2488:
 4137              	.LBI2488:
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 4138              		.loc 12 207 27 view .LVU1081
 4139              	.LBB2489:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4140              		.loc 12 209 3 view .LVU1082
 4141              		.syntax unified
 4142              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4143 0098 72B6     		cpsid i
 4144              	@ 0 "" 2
 4145              		.thumb
 4146              		.syntax unified
 4147              	.LBE2489:
 4148              	.LBE2488:
  68:Inc/low_level.h **** }
 4149              		.loc 11 68 5 view .LVU1083
 4150              	.LVL224:
  68:Inc/low_level.h **** }
 4151              		.loc 11 68 5 is_stmt 0 view .LVU1084
 4152              	.LBE2485:
 4153              	.LBE2484:
 256:Src/motor.cpp ****     armed_state_ = ODriveIntf::MotorIntf::ARMED_STATE_DISARMED;
 4154              		.loc 1 256 5 is_stmt 1 view .LVU1085
 257:Src/motor.cpp ****     __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(hw_config_.timer); 
 4155              		.loc 1 257 5 view .LVU1086
 258:Src/motor.cpp ****     control_law_ = nullptr;
 4156              		.loc 1 258 5 is_stmt 0 view .LVU1087
 4157 009a 2B68     		ldr	r3, [r5]
 4158 009c 1B68     		ldr	r3, [r3]
 4159 009e 1A68     		ldr	r2, [r3]
 4160 00a0 536C     		ldr	r3, [r2, #68]
 257:Src/motor.cpp ****     __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(hw_config_.timer); 
 4161              		.loc 1 257 18 view .LVU1088
 4162 00a2 0024     		movs	r4, #0
ARM GAS  /tmp/ccvzGucR.s 			page 233


 258:Src/motor.cpp ****     control_law_ = nullptr;
 4163              		.loc 1 258 5 view .LVU1089
 4164 00a4 23F40043 		bic	r3, r3, #32768
 257:Src/motor.cpp ****     __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(hw_config_.timer); 
 4165              		.loc 1 257 18 view .LVU1090
 4166 00a8 85F83940 		strb	r4, [r5, #57]
 4167              	.LVL225:
 258:Src/motor.cpp ****     control_law_ = nullptr;
 4168              		.loc 1 258 5 is_stmt 1 view .LVU1091
 4169 00ac 5364     		str	r3, [r2, #68]
 259:Src/motor.cpp ****     is_armed_ = false;
 4170              		.loc 1 259 5 view .LVU1092
 259:Src/motor.cpp ****     is_armed_ = false;
 4171              		.loc 1 259 18 is_stmt 0 view .LVU1093
 4172 00ae C5F8AC43 		str	r4, [r5, #940]
 260:Src/motor.cpp ****     cpu_exit_critical(mask);
 4173              		.loc 1 260 5 is_stmt 1 view .LVU1094
 260:Src/motor.cpp ****     cpu_exit_critical(mask);
 4174              		.loc 1 260 15 is_stmt 0 view .LVU1095
 4175 00b2 85F83840 		strb	r4, [r5, #56]
 261:Src/motor.cpp ****     return was_armed;
 4176              		.loc 1 261 5 is_stmt 1 view .LVU1096
 4177              	.LVL226:
 4178              	.LBB2490:
 4179              	.LBI2490:
  71:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
 4180              		.loc 11 71 13 view .LVU1097
 4181              	.LBE2490:
 4182              	.LBE2483:
 4183              	.LBE2482:
 4184              		.loc 11 72 5 view .LVU1098
 4185              	.LBB2495:
 4186              	.LBB2494:
 4187              	.LBB2493:
 4188              	.LBB2491:
 4189              	.LBI2491:
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 4190              		.loc 12 479 27 view .LVU1099
 4191              	.LBB2492:
 4192              		.loc 12 481 3 view .LVU1100
 4193              		.syntax unified
 4194              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4195 00b6 81F31088 		MSR primask, r1
 4196              	@ 0 "" 2
 4197              	.LVL227:
 4198              		.loc 12 481 3 is_stmt 0 view .LVU1101
 4199              		.thumb
 4200              		.syntax unified
 4201              	.LBE2492:
 4202              	.LBE2491:
 4203              	.LBE2493:
 262:Src/motor.cpp **** 
 4204              		.loc 1 262 5 is_stmt 1 view .LVU1102
 262:Src/motor.cpp **** 
 4205              		.loc 1 262 5 is_stmt 0 view .LVU1103
 4206              	.LBE2494:
 4207              	.LBE2495:
ARM GAS  /tmp/ccvzGucR.s 			page 234


 602:Src/motor.cpp **** 
 603:Src/motor.cpp ****     config_.phase_resistance = control_law.get_resistance();
 4208              		.loc 1 603 5 is_stmt 1 view .LVU1104
 4209              	.LBB2496:
 4210              	.LBI2496:
  70:Src/motor.cpp ****         return test_voltage_ / target_current_;
 4211              		.loc 1 70 11 view .LVU1105
 4212              	.LBB2497:
  71:Src/motor.cpp ****     }
 4213              		.loc 1 71 9 view .LVU1106
  71:Src/motor.cpp ****     }
 4214              		.loc 1 71 32 is_stmt 0 view .LVU1107
 4215 00ba DDED066A 		vldr.32	s13, [sp, #24]
 4216 00be 9DED057A 		vldr.32	s14, [sp, #20]
 4217              	.LBE2497:
 4218              	.LBE2496:
 4219              		.loc 1 603 30 view .LVU1108
 4220 00c2 6B68     		ldr	r3, [r5, #4]
 4221              	.LBB2499:
 4222              	.LBB2498:
  71:Src/motor.cpp ****     }
 4223              		.loc 1 71 32 view .LVU1109
 4224 00c4 C6EE877A 		vdiv.f32	s15, s13, s14
 4225              	.LVL228:
  71:Src/motor.cpp ****     }
 4226              		.loc 1 71 32 view .LVU1110
 4227              	.LBE2498:
 4228              	.LBE2499:
 604:Src/motor.cpp ****     if (is_nan(config_.phase_resistance)) {
 4229              		.loc 1 604 5 view .LVU1111
 4230 00c8 F4EE677A 		vcmp.f32	s15, s15
 4231 00cc F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 603:Src/motor.cpp ****     if (is_nan(config_.phase_resistance)) {
 4232              		.loc 1 603 30 view .LVU1112
 4233 00d0 C3ED077A 		vstr.32	s15, [r3, #28]
 4234              		.loc 1 604 5 is_stmt 1 view .LVU1113
 4235              	.LVL229:
 4236              		.file 16 "Inc/utils.hpp"
   1:Inc/utils.hpp **** 
   2:Inc/utils.hpp **** #ifndef __UTILS_H
   3:Inc/utils.hpp **** #define __UTILS_H
   4:Inc/utils.hpp **** 
   5:Inc/utils.hpp **** #include <stdint.h>
   6:Inc/utils.hpp **** #include <math.h>
   7:Inc/utils.hpp **** 
   8:Inc/utils.hpp **** /**
   9:Inc/utils.hpp ****  * @brief Flash size register address
  10:Inc/utils.hpp ****  */
  11:Inc/utils.hpp **** #define ID_FLASH_ADDRESS (0x1FFF7A22)
  12:Inc/utils.hpp **** 
  13:Inc/utils.hpp **** /**
  14:Inc/utils.hpp ****  * @brief Device ID register address
  15:Inc/utils.hpp ****  */
  16:Inc/utils.hpp **** #define ID_DBGMCU_IDCODE (0xE0042000)
  17:Inc/utils.hpp **** 
  18:Inc/utils.hpp **** /**
  19:Inc/utils.hpp ****  * "Returns" the device signature
ARM GAS  /tmp/ccvzGucR.s 			page 235


  20:Inc/utils.hpp ****  *
  21:Inc/utils.hpp ****  * Possible returns:
  22:Inc/utils.hpp ****  *    - 0x0413: STM32F405xx/07xx and STM32F415xx/17xx)
  23:Inc/utils.hpp ****  *    - 0x0419: STM32F42xxx and STM32F43xxx
  24:Inc/utils.hpp ****  *    - 0x0423: STM32F401xB/C
  25:Inc/utils.hpp ****  *    - 0x0433: STM32F401xD/E
  26:Inc/utils.hpp ****  *    - 0x0431: STM32F411xC/E
  27:Inc/utils.hpp ****  *
  28:Inc/utils.hpp ****  * Returned data is in 16-bit mode, but only bits 11:0 are valid, bits 15:12 are always 0.
  29:Inc/utils.hpp ****  * Defined as macro
  30:Inc/utils.hpp ****  */
  31:Inc/utils.hpp **** #define STM_ID_GetSignature() ((*(uint16_t *)(ID_DBGMCU_IDCODE)) & 0x0FFF)
  32:Inc/utils.hpp **** 
  33:Inc/utils.hpp **** /**
  34:Inc/utils.hpp ****  * "Returns" the device revision
  35:Inc/utils.hpp ****  *
  36:Inc/utils.hpp ****  * Revisions possible:
  37:Inc/utils.hpp ****  *    - 0x1000: Revision A
  38:Inc/utils.hpp ****  *    - 0x1001: Revision Z
  39:Inc/utils.hpp ****  *    - 0x1003: Revision Y
  40:Inc/utils.hpp ****  *    - 0x1007: Revision 1
  41:Inc/utils.hpp ****  *    - 0x2001: Revision 3
  42:Inc/utils.hpp ****  *
  43:Inc/utils.hpp ****  * Returned data is in 16-bit mode.
  44:Inc/utils.hpp ****  */
  45:Inc/utils.hpp **** #define STM_ID_GetRevision() (*(uint16_t *)(ID_DBGMCU_IDCODE + 2))
  46:Inc/utils.hpp **** 
  47:Inc/utils.hpp **** /**
  48:Inc/utils.hpp **** * "Returns" the Flash size
  49:Inc/utils.hpp **** *
  50:Inc/utils.hpp **** * Returned data is in 16-bit mode, returned value is flash size in kB (kilo bytes).
  51:Inc/utils.hpp **** */
  52:Inc/utils.hpp **** #define STM_ID_GetFlashSize() (*(uint16_t *)(ID_FLASH_ADDRESS))
  53:Inc/utils.hpp **** 
  54:Inc/utils.hpp **** #ifdef M_PI
  55:Inc/utils.hpp **** #undef M_PI
  56:Inc/utils.hpp **** #endif
  57:Inc/utils.hpp **** #define M_PI (3.14159265358979323846f)
  58:Inc/utils.hpp **** 
  59:Inc/utils.hpp **** #define MACRO_MAX(x, y) (((x) > (y)) ? (x) : (y))
  60:Inc/utils.hpp **** #define MACRO_MIN(x, y) (((x) < (y)) ? (x) : (y))
  61:Inc/utils.hpp **** 
  62:Inc/utils.hpp **** #define SQ(x) ((x) * (x))
  63:Inc/utils.hpp **** 
  64:Inc/utils.hpp **** #ifdef __cplusplus
  65:Inc/utils.hpp **** 
  66:Inc/utils.hpp **** #include <array>
  67:Inc/utils.hpp **** 
  68:Inc/utils.hpp **** /**
  69:Inc/utils.hpp ****  * @brief Small helper to make array with known size
  70:Inc/utils.hpp ****  * in contrast to initializer lists the number of arguments
  71:Inc/utils.hpp ****  * has to match exactly. Whereas initializer lists allow
  72:Inc/utils.hpp ****  * less arguments.
  73:Inc/utils.hpp ****  */
  74:Inc/utils.hpp **** template<class T, class... Tail>
  75:Inc/utils.hpp **** std::array<T, 1 + sizeof...(Tail)> make_array(T head, Tail... tail)
  76:Inc/utils.hpp **** {
ARM GAS  /tmp/ccvzGucR.s 			page 236


  77:Inc/utils.hpp ****     return std::array<T, 1 + sizeof...(Tail)>({ head, tail ... });
  78:Inc/utils.hpp **** }
  79:Inc/utils.hpp **** 
  80:Inc/utils.hpp **** extern "C" {
  81:Inc/utils.hpp **** #endif
  82:Inc/utils.hpp **** 
  83:Inc/utils.hpp **** static const float one_by_sqrt3 = 0.57735026919f;
  84:Inc/utils.hpp **** static const float two_by_sqrt3 = 1.15470053838f;
  85:Inc/utils.hpp **** static const float sqrt3_by_2 = 0.86602540378f;
  86:Inc/utils.hpp **** 
  87:Inc/utils.hpp **** // like fmodf, but always positive
  88:Inc/utils.hpp **** static inline float fmodf_pos(float x, float y) {
  89:Inc/utils.hpp ****     float out = fmodf(x, y);
  90:Inc/utils.hpp ****     if (out < 0.0f)
  91:Inc/utils.hpp ****         out += y;
  92:Inc/utils.hpp ****     return out;
  93:Inc/utils.hpp **** }
  94:Inc/utils.hpp **** 
  95:Inc/utils.hpp **** /**
  96:Inc/utils.hpp ****  * @brief Similar to modulo operator, except that the output range is centered
  97:Inc/utils.hpp ****  * around zero.
  98:Inc/utils.hpp ****  * The returned value is always in the range [-pm_range, pm_range).
  99:Inc/utils.hpp ****  */
 100:Inc/utils.hpp **** static inline float wrap_pm(float x, float pm_range) {
 101:Inc/utils.hpp ****     return fmodf_pos(x + pm_range, 2.0f * pm_range) - pm_range;
 102:Inc/utils.hpp **** }
 103:Inc/utils.hpp **** 
 104:Inc/utils.hpp **** static inline float wrap_pm_pi(float theta) {
 105:Inc/utils.hpp ****     return wrap_pm(theta, M_PI);
 106:Inc/utils.hpp **** }
 107:Inc/utils.hpp **** 
 108:Inc/utils.hpp **** // Compute rising edge timings (0.0 - 1.0) as a function of alpha-beta
 109:Inc/utils.hpp **** // as per the magnitude invariant clarke transform
 110:Inc/utils.hpp **** // The magnitude of the alpha-beta vector may not be larger than sqrt(3)/2
 111:Inc/utils.hpp **** // Returns 0 on success, and -1 if the input was out of range
 112:Inc/utils.hpp **** int SVM(float alpha, float beta, float* tA, float* tB, float* tC);
 113:Inc/utils.hpp **** 
 114:Inc/utils.hpp **** float fast_atan2(float y, float x);
 115:Inc/utils.hpp **** float horner_fma(float x, const float *coeffs, size_t count);
 116:Inc/utils.hpp **** int mod(int dividend, int divisor);
 117:Inc/utils.hpp **** 
 118:Inc/utils.hpp **** uint32_t deadline_to_timeout(uint32_t deadline_ms);
 119:Inc/utils.hpp **** uint32_t timeout_to_deadline(uint32_t timeout_ms);
 120:Inc/utils.hpp **** int is_in_the_future(uint32_t time_ms);
 121:Inc/utils.hpp **** 
 122:Inc/utils.hpp **** uint32_t micros(void);
 123:Inc/utils.hpp **** void delay_us(uint32_t us);
 124:Inc/utils.hpp **** 
 125:Inc/utils.hpp **** float our_arm_sin_f32(float x);
 126:Inc/utils.hpp **** float our_arm_cos_f32(float x);
 127:Inc/utils.hpp **** uint8_t calcCRC(uint8_t * buffer, uint8_t length);
 128:Inc/utils.hpp **** int32_t fsgn(float num);
 129:Inc/utils.hpp **** int32_t saturation(int32_t num, int32_t min, int32_t max);
 130:Inc/utils.hpp **** typedef struct {
 131:Inc/utils.hpp ****     float w0;  // Notch frequency
 132:Inc/utils.hpp ****     float r;   // Notch width parameter
 133:Inc/utils.hpp ****     float a1, a2, b1, b2;  // Filter coefficients
ARM GAS  /tmp/ccvzGucR.s 			page 237


 134:Inc/utils.hpp ****     float x1, x2, y1, y2;  // State variables
 135:Inc/utils.hpp **** } NotchFilter;
 136:Inc/utils.hpp **** void initNotchFilter(NotchFilter* filter, float frequency, float sampleRate, float bandwidth);
 137:Inc/utils.hpp **** float applyNotchFilter(NotchFilter* filter, float input);
 138:Inc/utils.hpp **** 
 139:Inc/utils.hpp **** void test_svm(float mod_q, float mod_d, float *theta, float *ta, float *tb, float *tc) ;
 140:Inc/utils.hpp **** void clark_park(float *iq, float *id, float theta, float ia, float ib);
 141:Inc/utils.hpp **** #ifdef __cplusplus
 142:Inc/utils.hpp **** }
 143:Inc/utils.hpp **** #endif
 144:Inc/utils.hpp **** 
 145:Inc/utils.hpp **** 
 146:Inc/utils.hpp **** __attribute__((optimize("-fno-finite-math-only")))
 147:Inc/utils.hpp **** inline bool is_nan(float x) {
 148:Inc/utils.hpp ****     return __builtin_isnan(x);
 4237              		.loc 16 148 5 view .LVU1114
 4238              		.loc 1 604 5 is_stmt 0 view .LVU1115
 4239 00d4 23D6     		bvs	.L175
 4240              	.LVL230:
 4241              	.L162:
 605:Src/motor.cpp ****         // TODO: the motor is already disarmed at this stage. This is an error
 606:Src/motor.cpp ****         // that only pretains to the measurement and its result so it should
 607:Src/motor.cpp ****         // just be a return value of this function.
 608:Src/motor.cpp ****         set_error(ODriveIntf::MotorIntf::ERROR_PHASE_RESISTANCE_OUT_OF_RANGE);
 609:Src/motor.cpp ****         success = false;
 610:Src/motor.cpp ****     }
 611:Src/motor.cpp **** 
 612:Src/motor.cpp ****     float I_beta = control_law.get_Ibeta();
 4242              		.loc 1 612 5 is_stmt 1 view .LVU1116
 4243              	.LBB2500:
 4244              	.LBI2500:
  74:Src/motor.cpp ****         return I_beta_;
 4245              		.loc 1 74 11 view .LVU1117
 4246              	.LBB2501:
  75:Src/motor.cpp ****     }
 4247              		.loc 1 75 9 view .LVU1118
  75:Src/motor.cpp ****     }
 4248              		.loc 1 75 16 is_stmt 0 view .LVU1119
 4249 00d6 DDED077A 		vldr.32	s15, [sp, #28]
 4250              	.LVL231:
  75:Src/motor.cpp ****     }
 4251              		.loc 1 75 16 view .LVU1120
 4252              	.LBE2501:
 4253              	.LBE2500:
 613:Src/motor.cpp ****     if (is_nan(I_beta) || (std::abs(I_beta) / test_current) > 0.2f) {
 4254              		.loc 1 613 5 is_stmt 1 view .LVU1121
 4255              		.loc 16 148 5 view .LVU1122
 4256              		.loc 1 613 24 is_stmt 0 view .LVU1123
 4257 00da F4EE677A 		vcmp.f32	s15, s15
 4258 00de F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 4259 00e2 0AD6     		bvs	.L163
 4260              	.LVL232:
 4261              	.LBB2502:
 4262              	.LBI2502:
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   { return __builtin_fabsf(__x); }
 4263              		.loc 3 75 3 is_stmt 1 view .LVU1124
 4264              	.LBB2503:
ARM GAS  /tmp/ccvzGucR.s 			page 238


 4265              		.loc 3 76 5 view .LVU1125
 4266              		.loc 3 76 31 is_stmt 0 view .LVU1126
 4267 00e4 F0EEE77A 		vabs.f32	s15, s15
 4268              	.LVL233:
 4269              		.loc 3 76 31 view .LVU1127
 4270              	.LBE2503:
 4271              	.LBE2502:
 4272              		.loc 1 613 45 view .LVU1128
 4273 00e8 87EE887A 		vdiv.f32	s14, s15, s16
 4274              		.loc 1 613 24 view .LVU1129
 4275 00ec DFED167A 		vldr.32	s15, .L176+12
 4276 00f0 B4EEE77A 		vcmpe.f32	s14, s15
 4277 00f4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 4278 00f8 0DDD     		ble	.L164
 4279              	.L163:
 614:Src/motor.cpp ****         set_error(ODriveIntf::MotorIntf::ERROR_UNBALANCED_PHASES);
 4280              		.loc 1 614 9 is_stmt 1 discriminator 3 view .LVU1130
 4281              	.LVL234:
 4282              	.LBB2504:
 4283              	.LBI2504:
 306:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 4284              		.loc 1 306 6 discriminator 3 view .LVU1131
 4285              	.LBB2505:
 307:Src/motor.cpp **** 
 4286              		.loc 1 307 5 discriminator 3 view .LVU1132
 307:Src/motor.cpp **** 
 4287              		.loc 1 307 86 is_stmt 0 discriminator 3 view .LVU1133
 4288 00fa 6B6B     		ldr	r3, [r5, #52]
 310:Src/motor.cpp **** 
 4289              		.loc 1 310 19 discriminator 3 view .LVU1134
 4290 00fc AA68     		ldr	r2, [r5, #8]
 307:Src/motor.cpp **** 
 4291              		.loc 1 307 86 discriminator 3 view .LVU1135
 4292 00fe 43F08053 		orr	r3, r3, #268435456
 310:Src/motor.cpp **** 
 4293              		.loc 1 310 19 discriminator 3 view .LVU1136
 4294 0102 4021     		movs	r1, #64
 307:Src/motor.cpp **** 
 4295              		.loc 1 307 12 discriminator 3 view .LVU1137
 4296 0104 6B63     		str	r3, [r5, #52]
 310:Src/motor.cpp **** 
 4297              		.loc 1 310 5 is_stmt 1 discriminator 3 view .LVU1138
 312:Src/motor.cpp ****     update_brake_current();
 4298              		.loc 1 312 37 is_stmt 0 discriminator 3 view .LVU1139
 4299 0106 2846     		mov	r0, r5
 4300              	.LVL235:
 310:Src/motor.cpp **** 
 4301              		.loc 1 310 19 discriminator 3 view .LVU1140
 4302 0108 C2F85C11 		str	r1, [r2, #348]
 312:Src/motor.cpp ****     update_brake_current();
 4303              		.loc 1 312 5 is_stmt 1 discriminator 3 view .LVU1141
 312:Src/motor.cpp ****     update_brake_current();
 4304              		.loc 1 312 37 is_stmt 0 discriminator 3 view .LVU1142
 4305 010c FFF7FEFF 		bl	safety_critical_disarm_motor_pwm
 4306              	.LVL236:
 313:Src/motor.cpp **** }
 4307              		.loc 1 313 5 is_stmt 1 discriminator 3 view .LVU1143
ARM GAS  /tmp/ccvzGucR.s 			page 239


 313:Src/motor.cpp **** }
 4308              		.loc 1 313 25 is_stmt 0 discriminator 3 view .LVU1144
 4309 0110 FFF7FEFF 		bl	update_brake_current
 4310              	.LVL237:
 313:Src/motor.cpp **** }
 4311              		.loc 1 313 25 discriminator 3 view .LVU1145
 4312              	.LBE2505:
 4313              	.LBE2504:
 615:Src/motor.cpp ****         success = false;
 4314              		.loc 1 615 9 is_stmt 1 discriminator 3 view .LVU1146
 4315              		.loc 1 615 17 is_stmt 0 discriminator 3 view .LVU1147
 4316 0114 0020     		movs	r0, #0
 4317              	.LVL238:
 4318              	.L164:
 616:Src/motor.cpp ****     }
 617:Src/motor.cpp **** 
 618:Src/motor.cpp ****     return success;
 4319              		.loc 1 618 5 is_stmt 1 view .LVU1148
 619:Src/motor.cpp **** }
 4320              		.loc 1 619 1 is_stmt 0 view .LVU1149
 4321 0116 0BB0     		add	sp, sp, #44
 4322              	.LCFI54:
 4323              		.cfi_remember_state
 4324              		.cfi_def_cfa_offset 20
 4325              		@ sp needed
 4326 0118 BDEC028B 		vldm	sp!, {d8}
 4327              	.LCFI55:
 4328              		.cfi_restore 80
 4329              		.cfi_restore 81
 4330              		.cfi_def_cfa_offset 12
 4331              	.LVL239:
 4332              		.loc 1 619 1 view .LVU1150
 4333 011c 30BD     		pop	{r4, r5, pc}
 4334              	.LVL240:
 4335              	.L175:
 4336              	.LCFI56:
 4337              		.cfi_restore_state
 608:Src/motor.cpp ****         success = false;
 4338              		.loc 1 608 9 is_stmt 1 view .LVU1151
 4339              	.LBB2506:
 4340              	.LBI2506:
 306:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 4341              		.loc 1 306 6 view .LVU1152
 4342              	.LBB2507:
 307:Src/motor.cpp **** 
 4343              		.loc 1 307 5 view .LVU1153
 307:Src/motor.cpp **** 
 4344              		.loc 1 307 86 is_stmt 0 view .LVU1154
 4345 011e 6B6B     		ldr	r3, [r5, #52]
 310:Src/motor.cpp **** 
 4346              		.loc 1 310 19 view .LVU1155
 4347 0120 AA68     		ldr	r2, [r5, #8]
 307:Src/motor.cpp **** 
 4348              		.loc 1 307 86 view .LVU1156
 4349 0122 43F00103 		orr	r3, r3, #1
 310:Src/motor.cpp **** 
 4350              		.loc 1 310 19 view .LVU1157
ARM GAS  /tmp/ccvzGucR.s 			page 240


 4351 0126 4021     		movs	r1, #64
 4352              	.LVL241:
 307:Src/motor.cpp **** 
 4353              		.loc 1 307 12 view .LVU1158
 4354 0128 6B63     		str	r3, [r5, #52]
 310:Src/motor.cpp **** 
 4355              		.loc 1 310 5 is_stmt 1 view .LVU1159
 312:Src/motor.cpp ****     update_brake_current();
 4356              		.loc 1 312 37 is_stmt 0 view .LVU1160
 4357 012a 2846     		mov	r0, r5
 4358              	.LVL242:
 310:Src/motor.cpp **** 
 4359              		.loc 1 310 19 view .LVU1161
 4360 012c C2F85C11 		str	r1, [r2, #348]
 312:Src/motor.cpp ****     update_brake_current();
 4361              		.loc 1 312 5 is_stmt 1 view .LVU1162
 312:Src/motor.cpp ****     update_brake_current();
 4362              		.loc 1 312 37 is_stmt 0 view .LVU1163
 4363 0130 FFF7FEFF 		bl	safety_critical_disarm_motor_pwm
 4364              	.LVL243:
 313:Src/motor.cpp **** }
 4365              		.loc 1 313 5 is_stmt 1 view .LVU1164
 313:Src/motor.cpp **** }
 4366              		.loc 1 313 25 is_stmt 0 view .LVU1165
 4367 0134 FFF7FEFF 		bl	update_brake_current
 4368              	.LVL244:
 313:Src/motor.cpp **** }
 4369              		.loc 1 313 25 view .LVU1166
 4370              	.LBE2507:
 4371              	.LBE2506:
 609:Src/motor.cpp ****     }
 4372              		.loc 1 609 9 is_stmt 1 view .LVU1167
 609:Src/motor.cpp ****     }
 4373              		.loc 1 609 17 is_stmt 0 view .LVU1168
 4374 0138 2046     		mov	r0, r4
 4375 013a CCE7     		b	.L162
 4376              	.L177:
 4377              		.align	2
 4378              	.L176:
 4379 013c 0000A042 		.word	1117782016
 4380 0140 08000000 		.word	_ZTV31ResistanceMeasurementControlLaw+8
 4381 0144 0000C07F 		.word	2143289344
 4382 0148 CDCC4C3E 		.word	1045220557
 4383              		.cfi_endproc
 4384              	.LFE4991:
 4386              		.section	.text._ZN5Motor24measure_phase_inductanceEf,"ax",%progbits
 4387              		.align	1
 4388              		.p2align 2,,3
 4389              		.global	_ZN5Motor24measure_phase_inductanceEf
 4390              		.syntax unified
 4391              		.thumb
 4392              		.thumb_func
 4393              		.fpu fpv4-sp-d16
 4395              	_ZN5Motor24measure_phase_inductanceEf:
 4396              	.LVL245:
 4397              	.LFB5011:
 620:Src/motor.cpp **** 
ARM GAS  /tmp/ccvzGucR.s 			page 241


 621:Src/motor.cpp **** bool Motor::measure_phase_inductance(float test_voltage) {
 4398              		.loc 1 621 58 is_stmt 1 view -0
 4399              		.cfi_startproc
 4400              		@ args = 0, pretend = 0, frame = 32
 4401              		@ frame_needed = 0, uses_anonymous_args = 0
 622:Src/motor.cpp ****     InductanceMeasurementControlLaw control_law;
 4402              		.loc 1 622 5 view .LVU1170
 621:Src/motor.cpp ****     InductanceMeasurementControlLaw control_law;
 4403              		.loc 1 621 58 is_stmt 0 view .LVU1171
 4404 0000 30B5     		push	{r4, r5, lr}
 4405              	.LCFI57:
 4406              		.cfi_def_cfa_offset 12
 4407              		.cfi_offset 4, -12
 4408              		.cfi_offset 5, -8
 4409              		.cfi_offset 14, -4
 4410 0002 89B0     		sub	sp, sp, #36
 4411              	.LCFI58:
 4412              		.cfi_def_cfa_offset 48
 4413              		.loc 1 622 37 view .LVU1172
 4414 0004 0023     		movs	r3, #0
 4415 0006 0022     		movs	r2, #0
 4416 0008 3D49     		ldr	r1, .L195
 4417 000a 3E4C     		ldr	r4, .L195+4
 4418 000c 0094     		str	r4, [sp]
 621:Src/motor.cpp ****     InductanceMeasurementControlLaw control_law;
 4419              		.loc 1 621 58 view .LVU1173
 4420 000e 0546     		mov	r5, r0
 4421              		.loc 1 622 37 view .LVU1174
 4422 0010 8DF80830 		strb	r3, [sp, #8]
 4423 0014 0392     		str	r2, [sp, #12]	@ float
 4424 0016 0493     		str	r3, [sp, #16]
 4425 0018 0591     		str	r1, [sp, #20]	@ float
 4426 001a 0693     		str	r3, [sp, #24]
 4427 001c 0792     		str	r2, [sp, #28]	@ float
 623:Src/motor.cpp ****     control_law.test_voltage_ = test_voltage;
 4428              		.loc 1 623 5 is_stmt 1 view .LVU1175
 4429              		.loc 1 623 31 is_stmt 0 view .LVU1176
 4430 001e 8DED010A 		vstr.32	s0, [sp, #4]
 624:Src/motor.cpp **** 
 625:Src/motor.cpp ****     arm(&control_law);
 4431              		.loc 1 625 5 is_stmt 1 view .LVU1177
 4432              	.LVL246:
 4433              	.LBB2537:
 4434              	.LBI2537:
 233:Src/motor.cpp **** 
 4435              		.loc 1 233 6 view .LVU1178
 4436              	.LBB2538:
 235:Src/motor.cpp ****     
 4437              		.loc 1 235 5 view .LVU1179
 4438              	.LBB2539:
 4439              	.LBI2539:
  65:Inc/low_level.h ****     uint32_t primask = __get_PRIMASK();
 4440              		.loc 11 65 17 view .LVU1180
 4441              	.LBB2540:
  66:Inc/low_level.h ****     __disable_irq();
 4442              		.loc 11 66 5 view .LVU1181
 4443              	.LBB2541:
ARM GAS  /tmp/ccvzGucR.s 			page 242


 4444              	.LBI2541:
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 4445              		.loc 12 449 31 view .LVU1182
 4446              	.LBB2542:
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 4447              		.loc 12 451 3 view .LVU1183
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 4448              		.loc 12 453 3 view .LVU1184
 4449              		.syntax unified
 4450              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4451 0022 EFF31084 		MRS r4, primask
 4452              	@ 0 "" 2
 4453              	.LVL247:
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4454              		.loc 12 454 3 view .LVU1185
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4455              		.loc 12 454 3 is_stmt 0 view .LVU1186
 4456              		.thumb
 4457              		.syntax unified
 4458              	.LBE2542:
 4459              	.LBE2541:
  67:Inc/low_level.h ****     return primask;
 4460              		.loc 11 67 5 is_stmt 1 view .LVU1187
 4461              	.LBB2543:
 4462              	.LBI2543:
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 4463              		.loc 12 207 27 view .LVU1188
 4464              	.LBB2544:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4465              		.loc 12 209 3 view .LVU1189
 4466              		.syntax unified
 4467              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4468 0026 72B6     		cpsid i
 4469              	@ 0 "" 2
 4470              		.thumb
 4471              		.syntax unified
 4472              	.LBE2544:
 4473              	.LBE2543:
  68:Inc/low_level.h **** }
 4474              		.loc 11 68 5 view .LVU1190
 4475              	.LVL248:
  68:Inc/low_level.h **** }
 4476              		.loc 11 68 5 is_stmt 0 view .LVU1191
 4477              	.LBE2540:
 4478              	.LBE2539:
 237:Src/motor.cpp **** 
 4479              		.loc 1 237 9 is_stmt 1 view .LVU1192
 240:Src/motor.cpp ****         if (control_law_) {
 4480              		.loc 1 240 16 is_stmt 0 view .LVU1193
 4481 0028 8368     		ldr	r3, [r0, #8]
 240:Src/motor.cpp ****         if (control_law_) {
 4482              		.loc 1 240 33 view .LVU1194
 4483 002a D868     		ldr	r0, [r3, #12]
 4484              	.LVL249:
 237:Src/motor.cpp **** 
 4485              		.loc 1 237 22 view .LVU1195
 4486 002c C5F8ACD3 		str	sp, [r5, #940]
ARM GAS  /tmp/ccvzGucR.s 			page 243


 240:Src/motor.cpp ****         if (control_law_) {
 4487              		.loc 1 240 9 is_stmt 1 view .LVU1196
 240:Src/motor.cpp ****         if (control_law_) {
 4488              		.loc 1 240 33 is_stmt 0 view .LVU1197
 4489 0030 FFF7FEFF 		bl	_ZN10Controller5resetEv
 4490              	.LVL250:
 241:Src/motor.cpp ****             control_law_->reset();
 4491              		.loc 1 241 9 is_stmt 1 view .LVU1198
 241:Src/motor.cpp ****             control_law_->reset();
 4492              		.loc 1 241 13 is_stmt 0 view .LVU1199
 4493 0034 D5F8AC03 		ldr	r0, [r5, #940]
 241:Src/motor.cpp ****             control_law_->reset();
 4494              		.loc 1 241 9 view .LVU1200
 4495 0038 10B1     		cbz	r0, .L179
 242:Src/motor.cpp ****         }
 4496              		.loc 1 242 13 is_stmt 1 view .LVU1201
 242:Src/motor.cpp ****         }
 4497              		.loc 1 242 33 is_stmt 0 view .LVU1202
 4498 003a 0368     		ldr	r3, [r0]
 242:Src/motor.cpp ****         }
 4499              		.loc 1 242 32 view .LVU1203
 4500 003c 1B68     		ldr	r3, [r3]
 4501 003e 9847     		blx	r3
 4502              	.LVL251:
 4503              	.L179:
 244:Src/motor.cpp ****         armed_state_ = ODriveIntf::MotorIntf::ARMED_STATE_WAITING_FOR_TIMINGS;
 4504              		.loc 1 244 9 is_stmt 1 view .LVU1204
 4505              	.LBB2545:
 4506              	.LBI2545:
 266:Src/motor.cpp ****     current_control_.v_current_control_integral_d_ = 0.0f;
 4507              		.loc 1 266 6 view .LVU1205
 4508              	.LBB2546:
 267:Src/motor.cpp ****     current_control_.v_current_control_integral_q_ = 0.0f;
 4509              		.loc 1 267 5 view .LVU1206
 267:Src/motor.cpp ****     current_control_.v_current_control_integral_q_ = 0.0f;
 4510              		.loc 1 267 52 is_stmt 0 view .LVU1207
 4511 0040 0023     		movs	r3, #0
 4512              	.LBE2546:
 4513              	.LBE2545:
 246:Src/motor.cpp **** 
 4514              		.loc 1 246 19 view .LVU1208
 4515 0042 40F20112 		movw	r2, #257
 4516              	.LBB2548:
 4517              	.LBB2547:
 267:Src/motor.cpp ****     current_control_.v_current_control_integral_q_ = 0.0f;
 4518              		.loc 1 267 52 view .LVU1209
 4519 0046 C5F89033 		str	r3, [r5, #912]	@ float
 268:Src/motor.cpp ****     I_bus_ = 0.0f;
 4520              		.loc 1 268 5 is_stmt 1 view .LVU1210
 268:Src/motor.cpp ****     I_bus_ = 0.0f;
 4521              		.loc 1 268 52 is_stmt 0 view .LVU1211
 4522 004a C5F89433 		str	r3, [r5, #916]	@ float
 269:Src/motor.cpp **** }
 4523              		.loc 1 269 5 is_stmt 1 view .LVU1212
 269:Src/motor.cpp **** }
 4524              		.loc 1 269 12 is_stmt 0 view .LVU1213
 4525 004e C5F8F032 		str	r3, [r5, #752]	@ float
ARM GAS  /tmp/ccvzGucR.s 			page 244


 4526              	.LVL252:
 269:Src/motor.cpp **** }
 4527              		.loc 1 269 12 view .LVU1214
 4528              	.LBE2547:
 4529              	.LBE2548:
 245:Src/motor.cpp ****         is_armed_ = true;
 4530              		.loc 1 245 9 is_stmt 1 view .LVU1215
 246:Src/motor.cpp **** 
 4531              		.loc 1 246 9 view .LVU1216
 246:Src/motor.cpp **** 
 4532              		.loc 1 246 19 is_stmt 0 view .LVU1217
 4533 0052 2A87     		strh	r2, [r5, #56]	@ movhi
 248:Src/motor.cpp **** 
 4534              		.loc 1 248 5 is_stmt 1 view .LVU1218
 4535              	.LVL253:
 4536              	.LBB2549:
 4537              	.LBI2549:
  71:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
 4538              		.loc 11 71 13 view .LVU1219
 4539              	.LBE2549:
 4540              	.LBE2538:
 4541              	.LBE2537:
 4542              		.loc 11 72 5 view .LVU1220
 4543              	.LBB2558:
 4544              	.LBB2556:
 4545              	.LBB2554:
 4546              	.LBB2550:
 4547              	.LBI2550:
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 4548              		.loc 12 479 27 view .LVU1221
 4549              	.LBB2551:
 4550              		.loc 12 481 3 view .LVU1222
 4551              		.syntax unified
 4552              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4553 0054 84F31088 		MSR primask, r4
 4554              	@ 0 "" 2
 4555              	.LVL254:
 4556              		.loc 12 481 3 is_stmt 0 view .LVU1223
 4557              		.thumb
 4558              		.syntax unified
 4559              	.LBE2551:
 4560              	.LBE2550:
 4561              	.LBE2554:
 250:Src/motor.cpp **** }
 4562              		.loc 1 250 5 is_stmt 1 view .LVU1224
 250:Src/motor.cpp **** }
 4563              		.loc 1 250 5 is_stmt 0 view .LVU1225
 4564              	.LBE2556:
 4565              	.LBE2558:
 4566              	.LBB2559:
 626:Src/motor.cpp **** 
 627:Src/motor.cpp ****     for (size_t i = 0; i < 1250; ++i) {
 4567              		.loc 1 627 26 is_stmt 1 view .LVU1226
 4568              	.LBE2559:
 4569              	.LBB2560:
 4570              	.LBB2557:
 4571              	.LBB2555:
ARM GAS  /tmp/ccvzGucR.s 			page 245


 4572              	.LBB2553:
 4573              	.LBB2552:
 4574              		.loc 12 481 3 is_stmt 0 view .LVU1227
 4575 0058 40F2E244 		movw	r4, #1250
 4576              	.LVL255:
 4577              		.loc 12 481 3 view .LVU1228
 4578 005c 07E0     		b	.L181
 4579              	.LVL256:
 4580              	.L194:
 4581              		.loc 12 481 3 view .LVU1229
 4582              	.LBE2552:
 4583              	.LBE2553:
 4584              	.LBE2555:
 4585              	.LBE2557:
 4586              	.LBE2560:
 4587              	.LBB2561:
 628:Src/motor.cpp ****         if (!((axis_->requested_state_ == ODriveIntf::AxisIntf::AXIS_STATE_UNDEFINED) && axis_->mot
 4588              		.loc 1 628 104 discriminator 1 view .LVU1230
 4589 005e DB6E     		ldr	r3, [r3, #108]
 4590              		.loc 1 628 13 discriminator 1 view .LVU1231
 4591 0060 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 4592 0064 4BB1     		cbz	r3, .L180
 629:Src/motor.cpp ****             break;
 630:Src/motor.cpp ****         }
 631:Src/motor.cpp ****         osDelay(1);
 4593              		.loc 1 631 16 discriminator 2 view .LVU1232
 4594 0066 FFF7FEFF 		bl	osDelay
 4595              	.LVL257:
 627:Src/motor.cpp ****         if (!((axis_->requested_state_ == ODriveIntf::AxisIntf::AXIS_STATE_UNDEFINED) && axis_->mot
 4596              		.loc 1 627 5 is_stmt 1 discriminator 2 view .LVU1233
 627:Src/motor.cpp ****         if (!((axis_->requested_state_ == ODriveIntf::AxisIntf::AXIS_STATE_UNDEFINED) && axis_->mot
 4597              		.loc 1 627 26 discriminator 2 view .LVU1234
 4598 006a 013C     		subs	r4, r4, #1
 4599 006c 05D0     		beq	.L180
 4600              	.L181:
 628:Src/motor.cpp ****         if (!((axis_->requested_state_ == ODriveIntf::AxisIntf::AXIS_STATE_UNDEFINED) && axis_->mot
 4601              		.loc 1 628 9 view .LVU1235
 4602              		.loc 1 631 9 view .LVU1236
 628:Src/motor.cpp ****         if (!((axis_->requested_state_ == ODriveIntf::AxisIntf::AXIS_STATE_UNDEFINED) && axis_->mot
 4603              		.loc 1 628 16 is_stmt 0 view .LVU1237
 4604 006e AB68     		ldr	r3, [r5, #8]
 628:Src/motor.cpp ****         if (!((axis_->requested_state_ == ODriveIntf::AxisIntf::AXIS_STATE_UNDEFINED) && axis_->mot
 4605              		.loc 1 628 9 view .LVU1238
 4606 0070 93F87E21 		ldrb	r2, [r3, #382]	@ zero_extendqisi2
 4607              		.loc 1 631 16 view .LVU1239
 4608 0074 0120     		movs	r0, #1
 628:Src/motor.cpp ****         if (!((axis_->requested_state_ == ODriveIntf::AxisIntf::AXIS_STATE_UNDEFINED) && axis_->mot
 4609              		.loc 1 628 9 view .LVU1240
 4610 0076 002A     		cmp	r2, #0
 4611 0078 F1D0     		beq	.L194
 4612              	.L180:
 4613              	.LBE2561:
 632:Src/motor.cpp ****     }
 633:Src/motor.cpp **** 
 634:Src/motor.cpp ****     bool success = is_armed_;
 4614              		.loc 1 634 5 is_stmt 1 view .LVU1241
 4615              		.loc 1 634 10 is_stmt 0 view .LVU1242
ARM GAS  /tmp/ccvzGucR.s 			page 246


 4616 007a 95F83800 		ldrb	r0, [r5, #56]	@ zero_extendqisi2
 4617              	.LVL258:
 635:Src/motor.cpp **** 
 636:Src/motor.cpp ****     //// De-energize motor
 637:Src/motor.cpp ****     //if (!enqueue_voltage_timings(motor, 0.0f, 0.0f))
 638:Src/motor.cpp ****     //    return false; // error set inside enqueue_voltage_timings
 639:Src/motor.cpp **** 
 640:Src/motor.cpp ****     disarm();
 4618              		.loc 1 640 5 is_stmt 1 view .LVU1243
 4619              	.LBB2562:
 4620              	.LBI2562:
 253:Src/motor.cpp **** {
 4621              		.loc 1 253 6 view .LVU1244
 4622              	.LBB2563:
 255:Src/motor.cpp ****     bool was_armed = armed_state_ != ODriveIntf::MotorIntf::ARMED_STATE_DISARMED;
 4623              		.loc 1 255 5 view .LVU1245
 4624              	.LBB2564:
 4625              	.LBI2564:
  65:Inc/low_level.h ****     uint32_t primask = __get_PRIMASK();
 4626              		.loc 11 65 17 view .LVU1246
 4627              	.LBB2565:
  66:Inc/low_level.h ****     __disable_irq();
 4628              		.loc 11 66 5 view .LVU1247
 4629              	.LBB2566:
 4630              	.LBI2566:
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 4631              		.loc 12 449 31 view .LVU1248
 4632              	.LBB2567:
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 4633              		.loc 12 451 3 view .LVU1249
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 4634              		.loc 12 453 3 view .LVU1250
 4635              		.syntax unified
 4636              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4637 007e EFF31084 		MRS r4, primask
 4638              	@ 0 "" 2
 4639              	.LVL259:
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4640              		.loc 12 454 3 view .LVU1251
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4641              		.loc 12 454 3 is_stmt 0 view .LVU1252
 4642              		.thumb
 4643              		.syntax unified
 4644              	.LBE2567:
 4645              	.LBE2566:
  67:Inc/low_level.h ****     return primask;
 4646              		.loc 11 67 5 is_stmt 1 view .LVU1253
 4647              	.LBB2568:
 4648              	.LBI2568:
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 4649              		.loc 12 207 27 view .LVU1254
 4650              	.LBB2569:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4651              		.loc 12 209 3 view .LVU1255
 4652              		.syntax unified
 4653              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4654 0082 72B6     		cpsid i
ARM GAS  /tmp/ccvzGucR.s 			page 247


 4655              	@ 0 "" 2
 4656              		.thumb
 4657              		.syntax unified
 4658              	.LBE2569:
 4659              	.LBE2568:
  68:Inc/low_level.h **** }
 4660              		.loc 11 68 5 view .LVU1256
 4661              	.LVL260:
  68:Inc/low_level.h **** }
 4662              		.loc 11 68 5 is_stmt 0 view .LVU1257
 4663              	.LBE2565:
 4664              	.LBE2564:
 256:Src/motor.cpp ****     armed_state_ = ODriveIntf::MotorIntf::ARMED_STATE_DISARMED;
 4665              		.loc 1 256 5 is_stmt 1 view .LVU1258
 257:Src/motor.cpp ****     __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(hw_config_.timer); 
 4666              		.loc 1 257 5 view .LVU1259
 258:Src/motor.cpp ****     control_law_ = nullptr;
 4667              		.loc 1 258 5 is_stmt 0 view .LVU1260
 4668 0084 2A68     		ldr	r2, [r5]
 4669 0086 1268     		ldr	r2, [r2]
 4670 0088 1168     		ldr	r1, [r2]
 4671 008a 4A6C     		ldr	r2, [r1, #68]
 257:Src/motor.cpp ****     __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(hw_config_.timer); 
 4672              		.loc 1 257 18 view .LVU1261
 4673 008c 0023     		movs	r3, #0
 258:Src/motor.cpp ****     control_law_ = nullptr;
 4674              		.loc 1 258 5 view .LVU1262
 4675 008e 22F40042 		bic	r2, r2, #32768
 257:Src/motor.cpp ****     __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(hw_config_.timer); 
 4676              		.loc 1 257 18 view .LVU1263
 4677 0092 85F83930 		strb	r3, [r5, #57]
 4678              	.LVL261:
 258:Src/motor.cpp ****     control_law_ = nullptr;
 4679              		.loc 1 258 5 is_stmt 1 view .LVU1264
 4680 0096 4A64     		str	r2, [r1, #68]
 259:Src/motor.cpp ****     is_armed_ = false;
 4681              		.loc 1 259 5 view .LVU1265
 259:Src/motor.cpp ****     is_armed_ = false;
 4682              		.loc 1 259 18 is_stmt 0 view .LVU1266
 4683 0098 C5F8AC33 		str	r3, [r5, #940]
 260:Src/motor.cpp ****     cpu_exit_critical(mask);
 4684              		.loc 1 260 5 is_stmt 1 view .LVU1267
 260:Src/motor.cpp ****     cpu_exit_critical(mask);
 4685              		.loc 1 260 15 is_stmt 0 view .LVU1268
 4686 009c 85F83830 		strb	r3, [r5, #56]
 261:Src/motor.cpp ****     return was_armed;
 4687              		.loc 1 261 5 is_stmt 1 view .LVU1269
 4688              	.LVL262:
 4689              	.LBB2570:
 4690              	.LBI2570:
  71:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
 4691              		.loc 11 71 13 view .LVU1270
 4692              	.LBE2570:
 4693              	.LBE2563:
 4694              	.LBE2562:
 4695              		.loc 11 72 5 view .LVU1271
 4696              	.LBB2575:
ARM GAS  /tmp/ccvzGucR.s 			page 248


 4697              	.LBB2574:
 4698              	.LBB2573:
 4699              	.LBB2571:
 4700              	.LBI2571:
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 4701              		.loc 12 479 27 view .LVU1272
 4702              	.LBB2572:
 4703              		.loc 12 481 3 view .LVU1273
 4704              		.syntax unified
 4705              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4706 00a0 84F31088 		MSR primask, r4
 4707              	@ 0 "" 2
 4708              	.LVL263:
 4709              		.loc 12 481 3 is_stmt 0 view .LVU1274
 4710              		.thumb
 4711              		.syntax unified
 4712              	.LBE2572:
 4713              	.LBE2571:
 4714              	.LBE2573:
 262:Src/motor.cpp **** 
 4715              		.loc 1 262 5 is_stmt 1 view .LVU1275
 262:Src/motor.cpp **** 
 4716              		.loc 1 262 5 is_stmt 0 view .LVU1276
 4717              	.LBE2574:
 4718              	.LBE2575:
 641:Src/motor.cpp **** 
 642:Src/motor.cpp ****     config_.phase_inductance = control_law.get_inductance();
 4719              		.loc 1 642 5 is_stmt 1 view .LVU1277
 4720              	.LBB2576:
 4721              	.LBI2576:
 139:Src/motor.cpp ****         // Note: A more correct formula would also take into account that there is a finite timeste
 4722              		.loc 1 139 11 view .LVU1278
 4723              	.LBB2577:
 142:Src/motor.cpp ****         return std::abs(test_voltage_) / (deltaI_ / dt);
 4724              		.loc 1 142 9 view .LVU1279
 143:Src/motor.cpp ****     }
 4725              		.loc 1 143 9 view .LVU1280
 4726              	.LBB2578:
 4727              	.LBI2578:
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   { return __builtin_fabsf(__x); }
 4728              		.loc 3 75 3 view .LVU1281
 4729              	.LBB2579:
 4730              		.loc 3 76 5 view .LVU1282
 4731              		.loc 3 76 5 is_stmt 0 view .LVU1283
 4732              	.LBE2579:
 4733              	.LBE2578:
 142:Src/motor.cpp ****         return std::abs(test_voltage_) / (deltaI_ / dt);
 4734              		.loc 1 142 50 view .LVU1284
 4735 00a4 069B     		ldr	r3, [sp, #24]
 4736 00a6 049A     		ldr	r2, [sp, #16]
 142:Src/motor.cpp ****         return std::abs(test_voltage_) / (deltaI_ / dt);
 4737              		.loc 1 142 15 view .LVU1285
 4738 00a8 DFED176A 		vldr.32	s13, .L195+8
 143:Src/motor.cpp ****     }
 4739              		.loc 1 143 51 view .LVU1286
 4740 00ac DDED075A 		vldr.32	s11, [sp, #28]
 142:Src/motor.cpp ****         return std::abs(test_voltage_) / (deltaI_ / dt);
ARM GAS  /tmp/ccvzGucR.s 			page 249


 4741              		.loc 1 142 50 view .LVU1287
 4742 00b0 9B1A     		subs	r3, r3, r2
 142:Src/motor.cpp ****         return std::abs(test_voltage_) / (deltaI_ / dt);
 4743              		.loc 1 142 20 view .LVU1288
 4744 00b2 07EE903A 		vmov	s15, r3	@ int
 4745 00b6 F8EE677A 		vcvt.f32.u32	s15, s15
 4746              	.LBE2577:
 4747              	.LBE2576:
 4748              		.loc 1 642 30 view .LVU1289
 4749 00ba 6B68     		ldr	r3, [r5, #4]
 4750              	.LBB2586:
 4751              	.LBB2584:
 142:Src/motor.cpp ****         return std::abs(test_voltage_) / (deltaI_ / dt);
 4752              		.loc 1 142 15 view .LVU1290
 4753 00bc 87EEA67A 		vdiv.f32	s14, s15, s13
 4754              	.LBB2582:
 4755              	.LBB2580:
 4756              		.loc 3 76 31 view .LVU1291
 4757 00c0 DDED017A 		vldr.32	s15, [sp, #4]
 4758              	.LBE2580:
 4759              	.LBE2582:
 4760              	.LBE2584:
 4761              	.LBE2586:
 643:Src/motor.cpp ****     
 644:Src/motor.cpp ****     // TODO arbitrary values set for now
 645:Src/motor.cpp ****     if (!(config_.phase_inductance >= 2e-6f && config_.phase_inductance <= 4000e-6f)) {
 4762              		.loc 1 645 5 view .LVU1292
 4763 00c4 DFED116A 		vldr.32	s13, .L195+12
 4764              	.LBB2587:
 4765              	.LBB2585:
 143:Src/motor.cpp ****     }
 4766              		.loc 1 143 51 view .LVU1293
 4767 00c8 85EE876A 		vdiv.f32	s12, s11, s14
 4768              	.LBB2583:
 4769              	.LBB2581:
 4770              		.loc 3 76 31 view .LVU1294
 4771 00cc F0EEE77A 		vabs.f32	s15, s15
 4772              	.LBE2581:
 4773              	.LBE2583:
 143:Src/motor.cpp ****     }
 4774              		.loc 1 143 55 view .LVU1295
 4775 00d0 87EE867A 		vdiv.f32	s14, s15, s12
 4776              	.LVL264:
 143:Src/motor.cpp ****     }
 4777              		.loc 1 143 55 view .LVU1296
 4778              	.LBE2585:
 4779              	.LBE2587:
 4780              		.loc 1 645 5 view .LVU1297
 4781 00d4 B4EEE67A 		vcmpe.f32	s14, s13
 4782 00d8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 642:Src/motor.cpp ****     
 4783              		.loc 1 642 30 view .LVU1298
 4784 00dc 83ED067A 		vstr.32	s14, [r3, #24]
 4785              		.loc 1 645 5 is_stmt 1 view .LVU1299
 4786 00e0 06DB     		blt	.L182
 4787              		.loc 1 645 9 is_stmt 0 discriminator 1 view .LVU1300
 4788 00e2 DFED0B7A 		vldr.32	s15, .L195+16
ARM GAS  /tmp/ccvzGucR.s 			page 250


 4789 00e6 B4EEE77A 		vcmpe.f32	s14, s15
 4790 00ea F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 4791 00ee 04D9     		bls	.L184
 4792              	.L182:
 646:Src/motor.cpp ****         error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_c
 4793              		.loc 1 646 9 is_stmt 1 view .LVU1301
 4794              		.loc 1 646 90 is_stmt 0 view .LVU1302
 4795 00f0 6B6B     		ldr	r3, [r5, #52]
 4796 00f2 43F00203 		orr	r3, r3, #2
 647:Src/motor.cpp ****         success = false;
 4797              		.loc 1 647 17 view .LVU1303
 4798 00f6 0020     		movs	r0, #0
 4799              	.LVL265:
 646:Src/motor.cpp ****         error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_c
 4800              		.loc 1 646 16 view .LVU1304
 4801 00f8 6B63     		str	r3, [r5, #52]
 4802              		.loc 1 647 9 is_stmt 1 view .LVU1305
 4803              	.LVL266:
 4804              	.L184:
 648:Src/motor.cpp ****     }
 649:Src/motor.cpp **** 
 650:Src/motor.cpp ****     return success;
 4805              		.loc 1 650 5 view .LVU1306
 651:Src/motor.cpp **** }
 4806              		.loc 1 651 1 is_stmt 0 view .LVU1307
 4807 00fa 09B0     		add	sp, sp, #36
 4808              	.LCFI59:
 4809              		.cfi_def_cfa_offset 12
 4810              		@ sp needed
 4811 00fc 30BD     		pop	{r4, r5, pc}
 4812              	.LVL267:
 4813              	.L196:
 4814              		.loc 1 651 1 view .LVU1308
 4815 00fe 00BF     		.align	2
 4816              	.L195:
 4817 0100 0000C07F 		.word	2143289344
 4818 0104 08000000 		.word	_ZTV31InductanceMeasurementControlLaw+8
 4819 0108 E81F224D 		.word	1294082024
 4820 010c BD370636 		.word	906377149
 4821 0110 6F12833B 		.word	998445679
 4822              		.cfi_endproc
 4823              	.LFE5011:
 4825              		.section	.text._ZN5Motor15run_calibrationEv,"ax",%progbits
 4826              		.align	1
 4827              		.p2align 2,,3
 4828              		.global	_ZN5Motor15run_calibrationEv
 4829              		.syntax unified
 4830              		.thumb
 4831              		.thumb_func
 4832              		.fpu fpv4-sp-d16
 4834              	_ZN5Motor15run_calibrationEv:
 4835              	.LVL268:
 4836              	.LFB5015:
 652:Src/motor.cpp **** 
 653:Src/motor.cpp **** 
 654:Src/motor.cpp **** bool Motor::run_calibration() {
 4837              		.loc 1 654 31 is_stmt 1 view -0
ARM GAS  /tmp/ccvzGucR.s 			page 251


 4838              		.cfi_startproc
 4839              		@ args = 0, pretend = 0, frame = 0
 4840              		@ frame_needed = 0, uses_anonymous_args = 0
 655:Src/motor.cpp ****     float R_calib_max_voltage = config_.resistance_calib_max_voltage;
 4841              		.loc 1 655 5 view .LVU1310
 654:Src/motor.cpp ****     float R_calib_max_voltage = config_.resistance_calib_max_voltage;
 4842              		.loc 1 654 31 is_stmt 0 view .LVU1311
 4843 0000 10B5     		push	{r4, lr}
 4844              	.LCFI60:
 4845              		.cfi_def_cfa_offset 8
 4846              		.cfi_offset 4, -8
 4847              		.cfi_offset 14, -4
 4848              		.loc 1 655 33 view .LVU1312
 4849 0002 4368     		ldr	r3, [r0, #4]
 4850              	.LVL269:
 656:Src/motor.cpp ****     if (config_.motor_type == MOTOR_TYPE_HIGH_CURRENT
 4851              		.loc 1 656 5 is_stmt 1 view .LVU1313
 4852              		.loc 1 656 17 is_stmt 0 view .LVU1314
 4853 0004 93F82820 		ldrb	r2, [r3, #40]	@ zero_extendqisi2
 654:Src/motor.cpp ****     float R_calib_max_voltage = config_.resistance_calib_max_voltage;
 4854              		.loc 1 654 31 view .LVU1315
 4855 0008 2DED028B 		vpush.64	{d8}
 4856              	.LCFI61:
 4857              		.cfi_def_cfa_offset 16
 4858              		.cfi_offset 80, -16
 4859              		.cfi_offset 81, -12
 654:Src/motor.cpp ****     float R_calib_max_voltage = config_.resistance_calib_max_voltage;
 4860              		.loc 1 654 31 view .LVU1316
 4861 000c 0446     		mov	r4, r0
 4862              		.loc 1 656 5 view .LVU1317
 4863 000e E2B1     		cbz	r2, .L198
 657:Src/motor.cpp ****         || config_.motor_type == MOTOR_TYPE_ACIM) {
 4864              		.loc 1 657 9 view .LVU1318
 4865 0010 032A     		cmp	r2, #3
 4866 0012 1AD0     		beq	.L198
 658:Src/motor.cpp ****         if (!measure_phase_resistance(config_.calibration_current, R_calib_max_voltage))
 659:Src/motor.cpp ****             return false;
 660:Src/motor.cpp ****         if (!measure_phase_inductance(R_calib_max_voltage))
 661:Src/motor.cpp ****             return false;
 662:Src/motor.cpp ****     } else if (config_.motor_type == MOTOR_TYPE_GIMBAL) {
 4867              		.loc 1 662 12 is_stmt 1 view .LVU1319
 4868 0014 022A     		cmp	r2, #2
 4869 0016 22D1     		bne	.L202
 4870              	.LVL270:
 4871              	.L203:
 663:Src/motor.cpp ****         // no calibration needed
 664:Src/motor.cpp ****     } else {
 665:Src/motor.cpp ****         return false;
 666:Src/motor.cpp ****     }
 667:Src/motor.cpp **** 
 668:Src/motor.cpp ****     update_current_controller_gains();
 4872              		.loc 1 668 5 view .LVU1320
 4873              	.LBB2588:
 4874              	.LBI2588:
 275:Src/motor.cpp ****     // Calculate current control gains
 4875              		.loc 1 275 6 view .LVU1321
 4876              	.LBB2589:
ARM GAS  /tmp/ccvzGucR.s 			page 252


 277:Src/motor.cpp ****     auto plant_pole = config_.phase_resistance / config_.phase_inductance;
 4877              		.loc 1 277 5 view .LVU1322
 277:Src/motor.cpp ****     auto plant_pole = config_.phase_resistance / config_.phase_inductance;
 4878              		.loc 1 277 63 is_stmt 0 view .LVU1323
 4879 0018 D3ED067A 		vldr.32	s15, [r3, #24]
 278:Src/motor.cpp ****     auto i_gain = plant_pole * p_gain;
 4880              		.loc 1 278 10 view .LVU1324
 4881 001c 93ED076A 		vldr.32	s12, [r3, #28]
 277:Src/motor.cpp ****     auto plant_pole = config_.phase_resistance / config_.phase_inductance;
 4882              		.loc 1 277 53 view .LVU1325
 4883 0020 D3ED0F6A 		vldr.32	s13, [r3, #60]
 4884              	.LBB2590:
 4885              	.LBB2591:
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 4886              		.loc 2 791 4 view .LVU1326
 4887 0024 94F80C33 		ldrb	r3, [r4, #780]	@ zero_extendqisi2
 4888              	.LBE2591:
 4889              	.LBE2590:
 278:Src/motor.cpp ****     auto i_gain = plant_pole * p_gain;
 4890              		.loc 1 278 10 view .LVU1327
 4891 0028 86EE277A 		vdiv.f32	s14, s12, s15
 277:Src/motor.cpp ****     auto plant_pole = config_.phase_resistance / config_.phase_inductance;
 4892              		.loc 1 277 53 view .LVU1328
 4893 002c 67EEA67A 		vmul.f32	s15, s15, s13
 4894              	.LVL271:
 278:Src/motor.cpp ****     auto i_gain = plant_pole * p_gain;
 4895              		.loc 1 278 5 is_stmt 1 view .LVU1329
 279:Src/motor.cpp ****     current_control_.pi_gains_ = {p_gain, i_gain};
 4896              		.loc 1 279 5 view .LVU1330
 279:Src/motor.cpp ****     current_control_.pi_gains_ = {p_gain, i_gain};
 4897              		.loc 1 279 30 is_stmt 0 view .LVU1331
 4898 0030 27EE277A 		vmul.f32	s14, s14, s15
 4899              	.LVL272:
 280:Src/motor.cpp **** }
 4900              		.loc 1 280 5 is_stmt 1 view .LVU1332
 4901              	.LBB2601:
 4902              	.LBI2601:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 4903              		.loc 5 352 12 view .LVU1333
 4904              	.LBB2602:
 4905              	.LBI2602:
 4906              		.loc 4 76 5 view .LVU1334
 4907              		.loc 4 76 5 is_stmt 0 view .LVU1335
 4908              	.LBE2602:
 4909              	.LBB2603:
 4910              	.LBI2603:
 4911              		.loc 4 76 5 is_stmt 1 view .LVU1336
 4912              		.loc 4 76 5 is_stmt 0 view .LVU1337
 4913              	.LBE2603:
 4914              	.LBE2601:
 4915              	.LBB2604:
 4916              	.LBI2590:
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 4917              		.loc 2 789 2 is_stmt 1 view .LVU1338
 4918              	.LBB2598:
 4919              	.LBB2592:
 4920              	.LBI2592:
ARM GAS  /tmp/ccvzGucR.s 			page 253


 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 4921              		.loc 2 434 22 view .LVU1339
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 4922              		.loc 2 434 22 is_stmt 0 view .LVU1340
 4923              	.LBE2592:
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 4924              		.loc 2 791 4 view .LVU1341
 4925 0034 03B3     		cbz	r3, .L204
 4926              	.LVL273:
 4927              	.LBB2593:
 4928              	.LBI2593:
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_move_assignable<_T1>,
 4929              		.loc 5 401 7 is_stmt 1 view .LVU1342
 4930              	.LBB2594:
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 4931              		.loc 5 408 8 is_stmt 0 view .LVU1343
 4932 0036 C4EDC17A 		vstr.32	s15, [r4, #772]
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 4933              		.loc 5 409 9 view .LVU1344
 4934 003a 84EDC27A 		vstr.32	s14, [r4, #776]
 4935              	.LVL274:
 4936              	.L205:
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 4937              		.loc 5 409 9 view .LVU1345
 4938              	.LBE2594:
 4939              	.LBE2593:
 4940              	.LBE2598:
 4941              	.LBE2604:
 4942              	.LBE2589:
 4943              	.LBE2588:
 669:Src/motor.cpp ****     
 670:Src/motor.cpp ****     is_calibrated_ = true;
 4944              		.loc 1 670 5 is_stmt 1 view .LVU1346
 671:Src/motor.cpp ****     return true;
 672:Src/motor.cpp **** }
 4945              		.loc 1 672 1 is_stmt 0 view .LVU1347
 4946 003e BDEC028B 		vldm	sp!, {d8}
 4947              	.LCFI62:
 4948              		.cfi_remember_state
 4949              		.cfi_restore 80
 4950              		.cfi_restore 81
 4951              		.cfi_def_cfa_offset 8
 670:Src/motor.cpp ****     return true;
 4952              		.loc 1 670 20 view .LVU1348
 4953 0042 0120     		movs	r0, #1
 4954 0044 84F83A00 		strb	r0, [r4, #58]
 671:Src/motor.cpp ****     return true;
 4955              		.loc 1 671 5 is_stmt 1 view .LVU1349
 4956              		.loc 1 672 1 is_stmt 0 view .LVU1350
 4957 0048 10BD     		pop	{r4, pc}
 4958              	.LVL275:
 4959              	.L198:
 4960              	.LCFI63:
 4961              		.cfi_restore_state
 655:Src/motor.cpp ****     if (config_.motor_type == MOTOR_TYPE_HIGH_CURRENT
 4962              		.loc 1 655 11 view .LVU1351
 4963 004a 93ED058A 		vldr.32	s16, [r3, #20]
ARM GAS  /tmp/ccvzGucR.s 			page 254


 658:Src/motor.cpp ****             return false;
 4964              		.loc 1 658 9 is_stmt 1 view .LVU1352
 658:Src/motor.cpp ****             return false;
 4965              		.loc 1 658 38 is_stmt 0 view .LVU1353
 4966 004e 93ED040A 		vldr.32	s0, [r3, #16]
 4967 0052 F0EE480A 		vmov.f32	s1, s16
 4968 0056 2046     		mov	r0, r4
 4969              	.LVL276:
 658:Src/motor.cpp ****             return false;
 4970              		.loc 1 658 38 view .LVU1354
 4971 0058 FFF7FEFF 		bl	_ZN5Motor24measure_phase_resistanceEff
 4972              	.LVL277:
 658:Src/motor.cpp ****             return false;
 4973              		.loc 1 658 9 view .LVU1355
 4974 005c 18B9     		cbnz	r0, .L200
 4975              	.L202:
 4976              		.loc 1 672 1 view .LVU1356
 4977 005e BDEC028B 		vldm	sp!, {d8}
 4978              	.LCFI64:
 4979              		.cfi_remember_state
 4980              		.cfi_restore 80
 4981              		.cfi_restore 81
 4982              		.cfi_def_cfa_offset 8
 659:Src/motor.cpp ****         if (!measure_phase_inductance(R_calib_max_voltage))
 4983              		.loc 1 659 20 view .LVU1357
 4984 0062 0020     		movs	r0, #0
 4985              		.loc 1 672 1 view .LVU1358
 4986 0064 10BD     		pop	{r4, pc}
 4987              	.LVL278:
 4988              	.L200:
 4989              	.LCFI65:
 4990              		.cfi_restore_state
 660:Src/motor.cpp ****             return false;
 4991              		.loc 1 660 9 is_stmt 1 view .LVU1359
 660:Src/motor.cpp ****             return false;
 4992              		.loc 1 660 38 is_stmt 0 view .LVU1360
 4993 0066 B0EE480A 		vmov.f32	s0, s16
 4994 006a 2046     		mov	r0, r4
 4995 006c FFF7FEFF 		bl	_ZN5Motor24measure_phase_inductanceEf
 4996              	.LVL279:
 660:Src/motor.cpp ****             return false;
 4997              		.loc 1 660 9 view .LVU1361
 4998 0070 0028     		cmp	r0, #0
 4999 0072 F4D0     		beq	.L202
 5000              	.LBB2609:
 5001              	.LBB2607:
 277:Src/motor.cpp ****     auto plant_pole = config_.phase_resistance / config_.phase_inductance;
 5002              		.loc 1 277 19 view .LVU1362
 5003 0074 6368     		ldr	r3, [r4, #4]
 5004 0076 CFE7     		b	.L203
 5005              	.LVL280:
 5006              	.L204:
 5007              	.LBB2605:
 5008              	.LBB2599:
 5009              	.LBB2595:
 5010              	.LBI2595:
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
ARM GAS  /tmp/ccvzGucR.s 			page 255


 5011              		.loc 2 416 2 is_stmt 1 view .LVU1363
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 5012              		.loc 2 416 2 is_stmt 0 view .LVU1364
 5013              	.LBE2595:
 5014              	.LBE2599:
 5015              	.LBE2605:
 5016              	.LBE2607:
 5017              	.LBE2609:
 5018              		.loc 6 175 3 is_stmt 1 view .LVU1365
 5019              	.LBB2610:
 5020              	.LBB2608:
 5021              	.LBB2606:
 5022              	.LBB2600:
 5023              	.LBB2597:
 5024              	.LBB2596:
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 5025              		.loc 2 422 51 is_stmt 0 view .LVU1366
 5026 0078 0123     		movs	r3, #1
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 5027              		.loc 2 419 4 view .LVU1367
 5028 007a C4EDC17A 		vstr.32	s15, [r4, #772]
 5029 007e 84EDC27A 		vstr.32	s14, [r4, #776]
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 5030              		.loc 2 422 51 view .LVU1368
 5031 0082 84F80C33 		strb	r3, [r4, #780]
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 5032              		.loc 2 423 2 view .LVU1369
 5033 0086 DAE7     		b	.L205
 5034              	.LBE2596:
 5035              	.LBE2597:
 5036              	.LBE2600:
 5037              	.LBE2606:
 5038              	.LBE2608:
 5039              	.LBE2610:
 5040              		.cfi_endproc
 5041              	.LFE5015:
 5043              		.section	.text._ZN5Motor20abc_sign_calculationEfPlS0_S0_,"ax",%progbits
 5044              		.align	1
 5045              		.p2align 2,,3
 5046              		.global	_ZN5Motor20abc_sign_calculationEfPlS0_S0_
 5047              		.syntax unified
 5048              		.thumb
 5049              		.thumb_func
 5050              		.fpu fpv4-sp-d16
 5052              	_ZN5Motor20abc_sign_calculationEfPlS0_S0_:
 5053              	.LVL281:
 5054              	.LFB5019:
 673:Src/motor.cpp **** 
 674:Src/motor.cpp **** bool Motor::enqueue_modulation_timings(float mod_alpha, float mod_beta) {
 675:Src/motor.cpp ****     float tA, tB, tC;
 676:Src/motor.cpp ****     if (SVM(mod_alpha, mod_beta, &tA, &tB, &tC) != 0)
 677:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 678:Src/motor.cpp **** 
 679:Src/motor.cpp **** 
 680:Src/motor.cpp **** if( deadtime_compensation_coff_ < 0.0f)
 681:Src/motor.cpp **** {
 682:Src/motor.cpp ****     I_phase_ = wrap_pm_pi(I_phase_);
ARM GAS  /tmp/ccvzGucR.s 			page 256


 683:Src/motor.cpp **** 
 684:Src/motor.cpp ****     float Ialpha = current_meas_.phA;
 685:Src/motor.cpp ****     float Ibeta = one_by_sqrt3 * (current_meas_.phB - current_meas_.phC);
 686:Src/motor.cpp ****     
 687:Src/motor.cpp ****     // Park transform
 688:Src/motor.cpp ****     float c_I = our_arm_cos_f32(I_phase_);
 689:Src/motor.cpp ****     float s_I = our_arm_sin_f32(I_phase_);
 690:Src/motor.cpp ****     float Id = c_I * Ialpha + s_I * Ibeta;
 691:Src/motor.cpp ****     float Iq = c_I * Ibeta - s_I * Ialpha;
 692:Src/motor.cpp **** 
 693:Src/motor.cpp ****     Iq_filter2 += Idq_filter_k2_ * (Iq - Iq_filter2);
 694:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 695:Src/motor.cpp **** 
 696:Src/motor.cpp ****     float offset_phase = fast_atan2(Iq_filter2, Id_filter2);
 697:Src/motor.cpp ****     total_phase_for_abc_sign_calculation_  = I_phase_ + offset_phase + M_PI;
 698:Src/motor.cpp ****     
 699:Src/motor.cpp ****     total_phase_for_abc_sign_calculation_ = wrap_pm_pi(total_phase_for_abc_sign_calculation_);
 700:Src/motor.cpp ****     total_phase_for_abc_sign_calculation_ += M_PI;
 701:Src/motor.cpp **** 
 702:Src/motor.cpp ****     abc_sign_calculation(total_phase_for_abc_sign_calculation_, &sign_a_, &sign_b_, &sign_c_);
 703:Src/motor.cpp ****     
 704:Src/motor.cpp **** 
 705:Src/motor.cpp ****      Aphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_* TIM_1_8_DEADTIME_CLOCK
 706:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 707:Src/motor.cpp ****      Cphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 708:Src/motor.cpp **** }
 709:Src/motor.cpp **** else
 710:Src/motor.cpp **** {
 711:Src/motor.cpp ****     Aphase_deadtime_compensation_ =0;
 712:Src/motor.cpp ****     Bphase_deadtime_compensation_ =0;
 713:Src/motor.cpp ****     Cphase_deadtime_compensation_ =0;
 714:Src/motor.cpp **** }
 715:Src/motor.cpp **** 
 716:Src/motor.cpp **** 
 717:Src/motor.cpp ****     next_timings_[0] = (uint16_t)(tA * (float)TIM_1_8_PERIOD_CLOCKS) + Aphase_deadtime_compensation
 718:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 719:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 720:Src/motor.cpp ****     next_timings_valid_ = true;
 721:Src/motor.cpp ****     safety_critical_apply_motor_pwm_timings(
 722:Src/motor.cpp ****                 *this, next_timings_
 723:Src/motor.cpp ****             );
 724:Src/motor.cpp ****     return true;
 725:Src/motor.cpp **** }
 726:Src/motor.cpp **** 
 727:Src/motor.cpp **** bool Motor::enqueue_voltage_timings(float v_alpha, float v_beta) {
 728:Src/motor.cpp ****     float vfactor = 1.0f / ((2.0f / 3.0f) * vbus_voltage);  // float vfactor = 1.0f / ((2.0f / 3.0f
 729:Src/motor.cpp ****     float mod_alpha = vfactor * v_alpha;
 730:Src/motor.cpp ****     float mod_beta = vfactor * v_beta;
 731:Src/motor.cpp **** 
 732:Src/motor.cpp ****     log_timing(ODriveIntf::TIMING_LOG_FOC_VOLTAGE);
 733:Src/motor.cpp **** 
 734:Src/motor.cpp ****     if (!enqueue_modulation_timings(mod_alpha, mod_beta))
 735:Src/motor.cpp ****         return false;
 736:Src/motor.cpp ****     return true;
 737:Src/motor.cpp **** }
 738:Src/motor.cpp **** 
 739:Src/motor.cpp **** // We should probably make FOC Current call FOC Voltage to avoid duplication.
ARM GAS  /tmp/ccvzGucR.s 			page 257


 740:Src/motor.cpp **** bool Motor::FOC_voltage(float v_d, float v_q, float pwm_phase) {
 741:Src/motor.cpp ****     float c = our_arm_cos_f32(pwm_phase);
 742:Src/motor.cpp ****     float s = our_arm_sin_f32(pwm_phase);
 743:Src/motor.cpp ****     float v_alpha = c*v_d - s*v_q;
 744:Src/motor.cpp ****     float v_beta = c*v_q + s*v_d;
 745:Src/motor.cpp **** 
 746:Src/motor.cpp ****     return enqueue_voltage_timings(v_alpha, v_beta);
 747:Src/motor.cpp **** }
 748:Src/motor.cpp **** 
 749:Src/motor.cpp **** void Motor::abc_sign_calculation(float phase , int32_t *a, int32_t *b, int32_t *c)
 750:Src/motor.cpp **** {
 5055              		.loc 1 750 1 is_stmt 1 view -0
 5056              		.cfi_startproc
 5057              		@ args = 0, pretend = 0, frame = 0
 5058              		@ frame_needed = 0, uses_anonymous_args = 0
 5059              		@ link register save eliminated.
 751:Src/motor.cpp ****     if(phase > 0 && phase <= M_PI/6){
 5060              		.loc 1 751 5 view .LVU1371
 5061 0000 B5EEC00A 		vcmpe.f32	s0, #0
 5062 0004 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 750:Src/motor.cpp ****     if(phase > 0 && phase <= M_PI/6){
 5063              		.loc 1 750 1 is_stmt 0 view .LVU1372
 5064 0008 10B4     		push	{r4}
 5065              	.LCFI66:
 5066              		.cfi_def_cfa_offset 4
 5067              		.cfi_offset 4, -4
 5068              		.loc 1 751 5 view .LVU1373
 5069 000a 0FDD     		ble	.L214
 5070              		.loc 1 751 18 discriminator 1 view .LVU1374
 5071 000c DFED497A 		vldr.32	s15, .L249
 5072 0010 B4EEE70A 		vcmpe.f32	s0, s15
 5073 0014 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5074 0018 08D8     		bhi	.L214
 5075              	.L235:
 752:Src/motor.cpp ****        *a = 1;
 5076              		.loc 1 752 8 is_stmt 1 view .LVU1375
 753:Src/motor.cpp ****        *b = -1;
 5077              		.loc 1 753 11 is_stmt 0 view .LVU1376
 5078 001a 4FF0FF30 		mov	r0, #-1
 5079              	.LVL282:
 752:Src/motor.cpp ****        *a = 1;
 5080              		.loc 1 752 11 view .LVU1377
 5081 001e 0124     		movs	r4, #1
 5082 0020 0C60     		str	r4, [r1]
 5083              		.loc 1 753 8 is_stmt 1 view .LVU1378
 5084              		.loc 1 753 11 is_stmt 0 view .LVU1379
 5085 0022 1060     		str	r0, [r2]
 754:Src/motor.cpp ****        *c = -1;
 5086              		.loc 1 754 8 is_stmt 1 view .LVU1380
 5087              		.loc 1 754 11 is_stmt 0 view .LVU1381
 5088 0024 1860     		str	r0, [r3]
 5089              	.L213:
 755:Src/motor.cpp ****     }
 756:Src/motor.cpp ****     else if(phase > M_PI/6 && phase <= 3*M_PI/6){
 757:Src/motor.cpp ****        *a = 1;
 758:Src/motor.cpp ****        *b = 1;
 759:Src/motor.cpp ****        *c = -1;
ARM GAS  /tmp/ccvzGucR.s 			page 258


 760:Src/motor.cpp ****     }
 761:Src/motor.cpp ****     else if(phase > 3*M_PI/6 && phase <= 5*M_PI/6){
 762:Src/motor.cpp ****        *a = -1;
 763:Src/motor.cpp ****        *b = 1;
 764:Src/motor.cpp ****        *c = -1;
 765:Src/motor.cpp ****     }
 766:Src/motor.cpp ****     else if(phase > 5*M_PI/6 && phase <= 7*M_PI/6){
 767:Src/motor.cpp ****        *a = -1;
 768:Src/motor.cpp ****        *b = 1;
 769:Src/motor.cpp ****        *c = 1;
 770:Src/motor.cpp ****     }
 771:Src/motor.cpp ****     else if(phase > 7*M_PI/6 && phase <= 3*M_PI/2){
 772:Src/motor.cpp ****        *a = -1;
 773:Src/motor.cpp ****        *b = -1;
 774:Src/motor.cpp ****        *c = 1;
 775:Src/motor.cpp ****     }
 776:Src/motor.cpp ****     else if (phase > 3*M_PI/2 && phase <= 11*M_PI/6){
 777:Src/motor.cpp ****        *a = 1;
 778:Src/motor.cpp ****        *b = -1;
 779:Src/motor.cpp ****        *c = 1;
 780:Src/motor.cpp ****     }
 781:Src/motor.cpp ****     else if (phase > 11*M_PI/6 && phase <= 2*M_PI){
 782:Src/motor.cpp ****        *a = 1;
 783:Src/motor.cpp ****        *b = -1;
 784:Src/motor.cpp ****        *c = -1;
 785:Src/motor.cpp ****     }
 786:Src/motor.cpp ****     else{
 787:Src/motor.cpp ****        *a = 0;
 788:Src/motor.cpp ****        *b = 0;
 789:Src/motor.cpp ****        *c = 0;
 790:Src/motor.cpp ****     }
 791:Src/motor.cpp **** }
 5090              		.loc 1 791 1 view .LVU1382
 5091 0026 5DF8044B 		ldr	r4, [sp], #4
 5092              	.LCFI67:
 5093              		.cfi_remember_state
 5094              		.cfi_restore 4
 5095              		.cfi_def_cfa_offset 0
 5096 002a 7047     		bx	lr
 5097              	.LVL283:
 5098              	.L214:
 5099              	.LCFI68:
 5100              		.cfi_restore_state
 756:Src/motor.cpp ****        *a = 1;
 5101              		.loc 1 756 10 is_stmt 1 view .LVU1383
 5102 002c DFED417A 		vldr.32	s15, .L249
 5103 0030 B4EEE70A 		vcmpe.f32	s0, s15
 5104 0034 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5105 0038 0FDD     		ble	.L218
 756:Src/motor.cpp ****        *a = 1;
 5106              		.loc 1 756 28 is_stmt 0 discriminator 1 view .LVU1384
 5107 003a DFED3F7A 		vldr.32	s15, .L249+4
 5108 003e B4EEE70A 		vcmpe.f32	s0, s15
 5109 0042 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5110 0046 08D8     		bhi	.L218
 757:Src/motor.cpp ****        *b = 1;
 5111              		.loc 1 757 8 is_stmt 1 view .LVU1385
ARM GAS  /tmp/ccvzGucR.s 			page 259


 757:Src/motor.cpp ****        *b = 1;
 5112              		.loc 1 757 11 is_stmt 0 view .LVU1386
 5113 0048 0120     		movs	r0, #1
 5114              	.LVL284:
 759:Src/motor.cpp ****     }
 5115              		.loc 1 759 11 view .LVU1387
 5116 004a 4FF0FF34 		mov	r4, #-1
 757:Src/motor.cpp ****        *b = 1;
 5117              		.loc 1 757 11 view .LVU1388
 5118 004e 0860     		str	r0, [r1]
 758:Src/motor.cpp ****        *c = -1;
 5119              		.loc 1 758 8 is_stmt 1 view .LVU1389
 758:Src/motor.cpp ****        *c = -1;
 5120              		.loc 1 758 11 is_stmt 0 view .LVU1390
 5121 0050 1060     		str	r0, [r2]
 759:Src/motor.cpp ****     }
 5122              		.loc 1 759 8 is_stmt 1 view .LVU1391
 759:Src/motor.cpp ****     }
 5123              		.loc 1 759 11 is_stmt 0 view .LVU1392
 5124 0052 1C60     		str	r4, [r3]
 5125              		.loc 1 791 1 view .LVU1393
 5126 0054 5DF8044B 		ldr	r4, [sp], #4
 5127              	.LCFI69:
 5128              		.cfi_remember_state
 5129              		.cfi_restore 4
 5130              		.cfi_def_cfa_offset 0
 5131 0058 7047     		bx	lr
 5132              	.LVL285:
 5133              	.L218:
 5134              	.LCFI70:
 5135              		.cfi_restore_state
 761:Src/motor.cpp ****        *a = -1;
 5136              		.loc 1 761 10 is_stmt 1 view .LVU1394
 5137 005a DFED377A 		vldr.32	s15, .L249+4
 5138 005e B4EEE70A 		vcmpe.f32	s0, s15
 5139 0062 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5140 0066 0FDD     		ble	.L221
 761:Src/motor.cpp ****        *a = -1;
 5141              		.loc 1 761 30 is_stmt 0 discriminator 1 view .LVU1395
 5142 0068 DFED347A 		vldr.32	s15, .L249+8
 5143 006c B4EEE70A 		vcmpe.f32	s0, s15
 5144 0070 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5145 0074 08D8     		bhi	.L221
 762:Src/motor.cpp ****        *b = 1;
 5146              		.loc 1 762 8 is_stmt 1 view .LVU1396
 762:Src/motor.cpp ****        *b = 1;
 5147              		.loc 1 762 11 is_stmt 0 view .LVU1397
 5148 0076 4FF0FF30 		mov	r0, #-1
 5149              	.LVL286:
 763:Src/motor.cpp ****        *c = -1;
 5150              		.loc 1 763 11 view .LVU1398
 5151 007a 0124     		movs	r4, #1
 762:Src/motor.cpp ****        *b = 1;
 5152              		.loc 1 762 11 view .LVU1399
 5153 007c 0860     		str	r0, [r1]
 763:Src/motor.cpp ****        *c = -1;
 5154              		.loc 1 763 8 is_stmt 1 view .LVU1400
ARM GAS  /tmp/ccvzGucR.s 			page 260


 763:Src/motor.cpp ****        *c = -1;
 5155              		.loc 1 763 11 is_stmt 0 view .LVU1401
 5156 007e 1460     		str	r4, [r2]
 764:Src/motor.cpp ****     }
 5157              		.loc 1 764 8 is_stmt 1 view .LVU1402
 5158              		.loc 1 791 1 is_stmt 0 view .LVU1403
 5159 0080 5DF8044B 		ldr	r4, [sp], #4
 5160              	.LCFI71:
 5161              		.cfi_remember_state
 5162              		.cfi_restore 4
 5163              		.cfi_def_cfa_offset 0
 764:Src/motor.cpp ****     }
 5164              		.loc 1 764 11 view .LVU1404
 5165 0084 1860     		str	r0, [r3]
 5166              		.loc 1 791 1 view .LVU1405
 5167 0086 7047     		bx	lr
 5168              	.LVL287:
 5169              	.L221:
 5170              	.LCFI72:
 5171              		.cfi_restore_state
 766:Src/motor.cpp ****        *a = -1;
 5172              		.loc 1 766 10 is_stmt 1 view .LVU1406
 5173 0088 DFED2C7A 		vldr.32	s15, .L249+8
 5174 008c B4EEE70A 		vcmpe.f32	s0, s15
 5175 0090 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5176 0094 0DDD     		ble	.L224
 766:Src/motor.cpp ****        *a = -1;
 5177              		.loc 1 766 30 is_stmt 0 discriminator 1 view .LVU1407
 5178 0096 DFED2A7A 		vldr.32	s15, .L249+12
 5179 009a B4EEE70A 		vcmpe.f32	s0, s15
 5180 009e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5181 00a2 06D8     		bhi	.L224
 767:Src/motor.cpp ****        *b = 1;
 5182              		.loc 1 767 8 is_stmt 1 view .LVU1408
 768:Src/motor.cpp ****        *c = 1;
 5183              		.loc 1 768 11 is_stmt 0 view .LVU1409
 5184 00a4 0120     		movs	r0, #1
 5185              	.LVL288:
 767:Src/motor.cpp ****        *b = 1;
 5186              		.loc 1 767 11 view .LVU1410
 5187 00a6 4FF0FF34 		mov	r4, #-1
 5188 00aa 0C60     		str	r4, [r1]
 768:Src/motor.cpp ****        *c = 1;
 5189              		.loc 1 768 8 is_stmt 1 view .LVU1411
 768:Src/motor.cpp ****        *c = 1;
 5190              		.loc 1 768 11 is_stmt 0 view .LVU1412
 5191 00ac 1060     		str	r0, [r2]
 769:Src/motor.cpp ****     }
 5192              		.loc 1 769 8 is_stmt 1 view .LVU1413
 769:Src/motor.cpp ****     }
 5193              		.loc 1 769 11 is_stmt 0 view .LVU1414
 5194 00ae 1860     		str	r0, [r3]
 5195 00b0 B9E7     		b	.L213
 5196              	.LVL289:
 5197              	.L224:
 5198              	.LBB2613:
 5199              	.LBI2613:
ARM GAS  /tmp/ccvzGucR.s 			page 261


 749:Src/motor.cpp **** {
 5200              		.loc 1 749 6 is_stmt 1 view .LVU1415
 5201              	.LBB2614:
 771:Src/motor.cpp ****        *a = -1;
 5202              		.loc 1 771 10 view .LVU1416
 5203 00b2 DFED237A 		vldr.32	s15, .L249+12
 5204 00b6 B4EEE70A 		vcmpe.f32	s0, s15
 5205 00ba F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5206 00be 0DDD     		ble	.L227
 771:Src/motor.cpp ****        *a = -1;
 5207              		.loc 1 771 30 is_stmt 0 view .LVU1417
 5208 00c0 DFED207A 		vldr.32	s15, .L249+16
 5209 00c4 B4EEE70A 		vcmpe.f32	s0, s15
 5210 00c8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5211 00cc 06D8     		bhi	.L227
 772:Src/motor.cpp ****        *b = -1;
 5212              		.loc 1 772 8 is_stmt 1 view .LVU1418
 772:Src/motor.cpp ****        *b = -1;
 5213              		.loc 1 772 11 is_stmt 0 view .LVU1419
 5214 00ce 4FF0FF30 		mov	r0, #-1
 5215              	.LVL290:
 774:Src/motor.cpp ****     }
 5216              		.loc 1 774 11 view .LVU1420
 5217 00d2 0124     		movs	r4, #1
 772:Src/motor.cpp ****        *b = -1;
 5218              		.loc 1 772 11 view .LVU1421
 5219 00d4 0860     		str	r0, [r1]
 773:Src/motor.cpp ****        *c = 1;
 5220              		.loc 1 773 8 is_stmt 1 view .LVU1422
 773:Src/motor.cpp ****        *c = 1;
 5221              		.loc 1 773 11 is_stmt 0 view .LVU1423
 5222 00d6 1060     		str	r0, [r2]
 774:Src/motor.cpp ****     }
 5223              		.loc 1 774 8 is_stmt 1 view .LVU1424
 774:Src/motor.cpp ****     }
 5224              		.loc 1 774 11 is_stmt 0 view .LVU1425
 5225 00d8 1C60     		str	r4, [r3]
 5226 00da A4E7     		b	.L213
 5227              	.LVL291:
 5228              	.L227:
 776:Src/motor.cpp ****        *a = 1;
 5229              		.loc 1 776 10 is_stmt 1 view .LVU1426
 5230 00dc DFED197A 		vldr.32	s15, .L249+16
 5231 00e0 B4EEE70A 		vcmpe.f32	s0, s15
 5232 00e4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5233 00e8 0DDD     		ble	.L230
 776:Src/motor.cpp ****        *a = 1;
 5234              		.loc 1 776 31 is_stmt 0 view .LVU1427
 5235 00ea DFED177A 		vldr.32	s15, .L249+20
 5236 00ee B4EEE70A 		vcmpe.f32	s0, s15
 5237 00f2 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5238 00f6 06D8     		bhi	.L230
 777:Src/motor.cpp ****        *b = -1;
 5239              		.loc 1 777 8 is_stmt 1 view .LVU1428
 777:Src/motor.cpp ****        *b = -1;
 5240              		.loc 1 777 11 is_stmt 0 view .LVU1429
 5241 00f8 0120     		movs	r0, #1
ARM GAS  /tmp/ccvzGucR.s 			page 262


 5242              	.LVL292:
 778:Src/motor.cpp ****        *c = 1;
 5243              		.loc 1 778 11 view .LVU1430
 5244 00fa 4FF0FF34 		mov	r4, #-1
 777:Src/motor.cpp ****        *b = -1;
 5245              		.loc 1 777 11 view .LVU1431
 5246 00fe 0860     		str	r0, [r1]
 778:Src/motor.cpp ****        *c = 1;
 5247              		.loc 1 778 8 is_stmt 1 view .LVU1432
 778:Src/motor.cpp ****        *c = 1;
 5248              		.loc 1 778 11 is_stmt 0 view .LVU1433
 5249 0100 1460     		str	r4, [r2]
 779:Src/motor.cpp ****     }
 5250              		.loc 1 779 8 is_stmt 1 view .LVU1434
 779:Src/motor.cpp ****     }
 5251              		.loc 1 779 11 is_stmt 0 view .LVU1435
 5252 0102 1860     		str	r0, [r3]
 5253 0104 8FE7     		b	.L213
 5254              	.LVL293:
 5255              	.L230:
 781:Src/motor.cpp ****        *a = 1;
 5256              		.loc 1 781 10 is_stmt 1 view .LVU1436
 5257 0106 DFED107A 		vldr.32	s15, .L249+20
 5258 010a B4EEE70A 		vcmpe.f32	s0, s15
 5259 010e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5260 0112 07DD     		ble	.L233
 781:Src/motor.cpp ****        *a = 1;
 5261              		.loc 1 781 32 is_stmt 0 view .LVU1437
 5262 0114 DFED0D7A 		vldr.32	s15, .L249+24
 5263 0118 B4EEE70A 		vcmpe.f32	s0, s15
 5264 011c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5265 0120 7FF67BAF 		bls	.L235
 5266              	.L233:
 787:Src/motor.cpp ****        *b = 0;
 5267              		.loc 1 787 8 is_stmt 1 view .LVU1438
 787:Src/motor.cpp ****        *b = 0;
 5268              		.loc 1 787 11 is_stmt 0 view .LVU1439
 5269 0124 0020     		movs	r0, #0
 5270              	.LVL294:
 787:Src/motor.cpp ****        *b = 0;
 5271              		.loc 1 787 11 view .LVU1440
 5272 0126 0860     		str	r0, [r1]
 788:Src/motor.cpp ****        *c = 0;
 5273              		.loc 1 788 8 is_stmt 1 view .LVU1441
 5274              	.LBE2614:
 5275              	.LBE2613:
 5276              		.loc 1 791 1 is_stmt 0 view .LVU1442
 5277 0128 5DF8044B 		ldr	r4, [sp], #4
 5278              	.LCFI73:
 5279              		.cfi_restore 4
 5280              		.cfi_def_cfa_offset 0
 5281              	.LBB2616:
 5282              	.LBB2615:
 788:Src/motor.cpp ****        *c = 0;
 5283              		.loc 1 788 11 view .LVU1443
 5284 012c 1060     		str	r0, [r2]
 789:Src/motor.cpp ****     }
ARM GAS  /tmp/ccvzGucR.s 			page 263


 5285              		.loc 1 789 8 is_stmt 1 view .LVU1444
 789:Src/motor.cpp ****     }
 5286              		.loc 1 789 11 is_stmt 0 view .LVU1445
 5287 012e 1860     		str	r0, [r3]
 5288              	.LVL295:
 789:Src/motor.cpp ****     }
 5289              		.loc 1 789 11 view .LVU1446
 5290              	.LBE2615:
 5291              	.LBE2616:
 5292              		.loc 1 791 1 view .LVU1447
 5293 0130 7047     		bx	lr
 5294              	.L250:
 5295 0132 00BF     		.align	2
 5296              	.L249:
 5297 0134 920A063F 		.word	1057360530
 5298 0138 DB0FC93F 		.word	1070141403
 5299 013c 378D2740 		.word	1076333879
 5300 0140 80926A40 		.word	1080726144
 5301 0144 E4CB9640 		.word	1083624420
 5302 0148 894EB840 		.word	1085820553
 5303 014c DB0FC940 		.word	1086918619
 5304              		.cfi_endproc
 5305              	.LFE5019:
 5307              		.section	.text._ZN5Motor26enqueue_modulation_timingsEff,"ax",%progbits
 5308              		.align	1
 5309              		.p2align 2,,3
 5310              		.global	_ZN5Motor26enqueue_modulation_timingsEff
 5311              		.syntax unified
 5312              		.thumb
 5313              		.thumb_func
 5314              		.fpu fpv4-sp-d16
 5316              	_ZN5Motor26enqueue_modulation_timingsEff:
 5317              	.LVL296:
 5318              	.LFB5016:
 674:Src/motor.cpp ****     float tA, tB, tC;
 5319              		.loc 1 674 73 is_stmt 1 view -0
 5320              		.cfi_startproc
 5321              		@ args = 0, pretend = 0, frame = 16
 5322              		@ frame_needed = 0, uses_anonymous_args = 0
 675:Src/motor.cpp ****     if (SVM(mod_alpha, mod_beta, &tA, &tB, &tC) != 0)
 5323              		.loc 1 675 5 view .LVU1449
 676:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 5324              		.loc 1 676 5 view .LVU1450
 674:Src/motor.cpp ****     float tA, tB, tC;
 5325              		.loc 1 674 73 is_stmt 0 view .LVU1451
 5326 0000 30B5     		push	{r4, r5, lr}
 5327              	.LCFI74:
 5328              		.cfi_def_cfa_offset 12
 5329              		.cfi_offset 4, -12
 5330              		.cfi_offset 5, -8
 5331              		.cfi_offset 14, -4
 5332 0002 2DED048B 		vpush.64	{d8, d9}
 5333              	.LCFI75:
 5334              		.cfi_def_cfa_offset 28
 5335              		.cfi_offset 80, -28
 5336              		.cfi_offset 81, -24
 5337              		.cfi_offset 82, -20
ARM GAS  /tmp/ccvzGucR.s 			page 264


 5338              		.cfi_offset 83, -16
 5339 0006 85B0     		sub	sp, sp, #20
 5340              	.LCFI76:
 5341              		.cfi_def_cfa_offset 48
 674:Src/motor.cpp ****     float tA, tB, tC;
 5342              		.loc 1 674 73 view .LVU1452
 5343 0008 0446     		mov	r4, r0
 676:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 5344              		.loc 1 676 12 view .LVU1453
 5345 000a 03AA     		add	r2, sp, #12
 5346 000c 02A9     		add	r1, sp, #8
 5347 000e 01A8     		add	r0, sp, #4
 5348              	.LVL297:
 676:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 5349              		.loc 1 676 12 view .LVU1454
 5350 0010 FFF7FEFF 		bl	SVM
 5351              	.LVL298:
 676:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 5352              		.loc 1 676 5 view .LVU1455
 5353 0014 C8BB     		cbnz	r0, .L266
 680:Src/motor.cpp **** {
 5354              		.loc 1 680 1 is_stmt 1 view .LVU1456
 5355              	.LBB2631:
 5356 0016 D4EDB27A 		vldr.32	s15, [r4, #712]
 5357 001a F5EEC07A 		vcmpe.f32	s15, #0
 5358 001e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5359 0022 44D4     		bmi	.L267
 711:Src/motor.cpp ****     Bphase_deadtime_compensation_ =0;
 5360              		.loc 1 711 5 view .LVU1457
 712:Src/motor.cpp ****     Cphase_deadtime_compensation_ =0;
 5361              		.loc 1 712 5 view .LVU1458
 713:Src/motor.cpp **** }
 5362              		.loc 1 713 35 is_stmt 0 view .LVU1459
 5363 0024 0346     		mov	r3, r0
 711:Src/motor.cpp ****     Bphase_deadtime_compensation_ =0;
 5364              		.loc 1 711 35 view .LVU1460
 5365 0026 C4F8CC02 		str	r0, [r4, #716]
 713:Src/motor.cpp **** }
 5366              		.loc 1 713 5 is_stmt 1 view .LVU1461
 713:Src/motor.cpp **** }
 5367              		.loc 1 713 35 is_stmt 0 view .LVU1462
 5368 002a A4F8D002 		strh	r0, [r4, #720]	@ movhi
 5369 002e 0246     		mov	r2, r0
 5370 0030 0146     		mov	r1, r0
 5371              	.L260:
 5372              	.LBE2631:
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 5373              		.loc 1 717 5 is_stmt 1 view .LVU1463
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 5374              		.loc 1 717 38 is_stmt 0 view .LVU1464
 5375 0032 9FED686A 		vldr.32	s12, .L268
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 5376              		.loc 1 718 38 view .LVU1465
 5377 0036 DDED026A 		vldr.32	s13, [sp, #8]
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 5378              		.loc 1 717 38 view .LVU1466
 5379 003a 9DED017A 		vldr.32	s14, [sp, #4]
ARM GAS  /tmp/ccvzGucR.s 			page 265


 719:Src/motor.cpp ****     next_timings_valid_ = true;
 5380              		.loc 1 719 38 view .LVU1467
 5381 003e DDED037A 		vldr.32	s15, [sp, #12]
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 5382              		.loc 1 718 38 view .LVU1468
 5383 0042 66EE866A 		vmul.f32	s13, s13, s12
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 5384              		.loc 1 717 38 view .LVU1469
 5385 0046 27EE067A 		vmul.f32	s14, s14, s12
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 5386              		.loc 1 718 24 view .LVU1470
 5387 004a FCEEE66A 		vcvt.u32.f32	s13, s13
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 5388              		.loc 1 717 24 view .LVU1471
 5389 004e BCEEC77A 		vcvt.u32.f32	s14, s14
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 5390              		.loc 1 718 70 view .LVU1472
 5391 0052 16EE900A 		vmov	r0, s13	@ int
 719:Src/motor.cpp ****     next_timings_valid_ = true;
 5392              		.loc 1 719 38 view .LVU1473
 5393 0056 67EE867A 		vmul.f32	s15, s15, s12
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 5394              		.loc 1 718 70 view .LVU1474
 5395 005a 0244     		add	r2, r2, r0
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 5396              		.loc 1 717 70 view .LVU1475
 5397 005c 17EE100A 		vmov	r0, s14	@ int
 719:Src/motor.cpp ****     next_timings_valid_ = true;
 5398              		.loc 1 719 24 view .LVU1476
 5399 0060 FCEEE77A 		vcvt.u32.f32	s15, s15
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 5400              		.loc 1 717 70 view .LVU1477
 5401 0064 0144     		add	r1, r1, r0
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 5402              		.loc 1 717 22 view .LVU1478
 5403 0066 A181     		strh	r1, [r4, #12]	@ movhi
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 5404              		.loc 1 718 5 is_stmt 1 view .LVU1479
 719:Src/motor.cpp ****     next_timings_valid_ = true;
 5405              		.loc 1 719 70 is_stmt 0 view .LVU1480
 5406 0068 17EE901A 		vmov	r1, s15	@ int
 720:Src/motor.cpp ****     safety_critical_apply_motor_pwm_timings(
 5407              		.loc 1 720 25 view .LVU1481
 5408 006c 0125     		movs	r5, #1
 719:Src/motor.cpp ****     next_timings_valid_ = true;
 5409              		.loc 1 719 70 view .LVU1482
 5410 006e 0B44     		add	r3, r3, r1
 721:Src/motor.cpp ****                 *this, next_timings_
 5411              		.loc 1 721 44 view .LVU1483
 5412 0070 2046     		mov	r0, r4
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 5413              		.loc 1 718 22 view .LVU1484
 5414 0072 E281     		strh	r2, [r4, #14]	@ movhi
 719:Src/motor.cpp ****     next_timings_valid_ = true;
 5415              		.loc 1 719 5 is_stmt 1 view .LVU1485
 719:Src/motor.cpp ****     next_timings_valid_ = true;
 5416              		.loc 1 719 22 is_stmt 0 view .LVU1486
ARM GAS  /tmp/ccvzGucR.s 			page 266


 5417 0074 2382     		strh	r3, [r4, #16]	@ movhi
 720:Src/motor.cpp ****     safety_critical_apply_motor_pwm_timings(
 5418              		.loc 1 720 5 is_stmt 1 view .LVU1487
 720:Src/motor.cpp ****     safety_critical_apply_motor_pwm_timings(
 5419              		.loc 1 720 25 is_stmt 0 view .LVU1488
 5420 0076 A574     		strb	r5, [r4, #18]
 721:Src/motor.cpp ****                 *this, next_timings_
 5421              		.loc 1 721 5 is_stmt 1 view .LVU1489
 721:Src/motor.cpp ****                 *this, next_timings_
 5422              		.loc 1 721 44 is_stmt 0 view .LVU1490
 5423 0078 04F10C01 		add	r1, r4, #12
 5424 007c FFF7FEFF 		bl	safety_critical_apply_motor_pwm_timings
 5425              	.LVL299:
 724:Src/motor.cpp **** }
 5426              		.loc 1 724 5 is_stmt 1 view .LVU1491
 724:Src/motor.cpp **** }
 5427              		.loc 1 724 12 is_stmt 0 view .LVU1492
 5428 0080 2846     		mov	r0, r5
 725:Src/motor.cpp **** 
 5429              		.loc 1 725 1 view .LVU1493
 5430 0082 05B0     		add	sp, sp, #20
 5431              	.LCFI77:
 5432              		.cfi_remember_state
 5433              		.cfi_def_cfa_offset 28
 5434              		@ sp needed
 5435 0084 BDEC048B 		vldm	sp!, {d8-d9}
 5436              	.LCFI78:
 5437              		.cfi_restore 82
 5438              		.cfi_restore 83
 5439              		.cfi_restore 80
 5440              		.cfi_restore 81
 5441              		.cfi_def_cfa_offset 12
 5442 0088 30BD     		pop	{r4, r5, pc}
 5443              	.LVL300:
 5444              	.L266:
 5445              	.LCFI79:
 5446              		.cfi_restore_state
 677:Src/motor.cpp **** 
 5447              		.loc 1 677 5 is_stmt 1 view .LVU1494
 5448              	.LBB2675:
 5449              	.LBI2675:
 306:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 5450              		.loc 1 306 6 view .LVU1495
 5451              	.LBB2676:
 307:Src/motor.cpp **** 
 5452              		.loc 1 307 5 view .LVU1496
 307:Src/motor.cpp **** 
 5453              		.loc 1 307 86 is_stmt 0 view .LVU1497
 5454 008a 636B     		ldr	r3, [r4, #52]
 310:Src/motor.cpp **** 
 5455              		.loc 1 310 19 view .LVU1498
 5456 008c A268     		ldr	r2, [r4, #8]
 307:Src/motor.cpp **** 
 5457              		.loc 1 307 86 view .LVU1499
 5458 008e 43F08003 		orr	r3, r3, #128
 310:Src/motor.cpp **** 
 5459              		.loc 1 310 19 view .LVU1500
ARM GAS  /tmp/ccvzGucR.s 			page 267


 5460 0092 4021     		movs	r1, #64
 307:Src/motor.cpp **** 
 5461              		.loc 1 307 12 view .LVU1501
 5462 0094 6363     		str	r3, [r4, #52]
 310:Src/motor.cpp **** 
 5463              		.loc 1 310 5 is_stmt 1 view .LVU1502
 312:Src/motor.cpp ****     update_brake_current();
 5464              		.loc 1 312 37 is_stmt 0 view .LVU1503
 5465 0096 2046     		mov	r0, r4
 310:Src/motor.cpp **** 
 5466              		.loc 1 310 19 view .LVU1504
 5467 0098 C2F85C11 		str	r1, [r2, #348]
 312:Src/motor.cpp ****     update_brake_current();
 5468              		.loc 1 312 5 is_stmt 1 view .LVU1505
 312:Src/motor.cpp ****     update_brake_current();
 5469              		.loc 1 312 37 is_stmt 0 view .LVU1506
 5470 009c FFF7FEFF 		bl	safety_critical_disarm_motor_pwm
 5471              	.LVL301:
 313:Src/motor.cpp **** }
 5472              		.loc 1 313 5 is_stmt 1 view .LVU1507
 313:Src/motor.cpp **** }
 5473              		.loc 1 313 25 is_stmt 0 view .LVU1508
 5474 00a0 FFF7FEFF 		bl	update_brake_current
 5475              	.LVL302:
 313:Src/motor.cpp **** }
 5476              		.loc 1 313 25 view .LVU1509
 5477              	.LBE2676:
 5478              	.LBE2675:
 677:Src/motor.cpp **** 
 5479              		.loc 1 677 74 view .LVU1510
 5480 00a4 0020     		movs	r0, #0
 725:Src/motor.cpp **** 
 5481              		.loc 1 725 1 view .LVU1511
 5482 00a6 05B0     		add	sp, sp, #20
 5483              	.LCFI80:
 5484              		.cfi_remember_state
 5485              		.cfi_def_cfa_offset 28
 5486              		@ sp needed
 5487 00a8 BDEC048B 		vldm	sp!, {d8-d9}
 5488              	.LCFI81:
 5489              		.cfi_restore 82
 5490              		.cfi_restore 83
 5491              		.cfi_restore 80
 5492              		.cfi_restore 81
 5493              		.cfi_def_cfa_offset 12
 5494 00ac 30BD     		pop	{r4, r5, pc}
 5495              	.LVL303:
 5496              	.L267:
 5497              	.LCFI82:
 5498              		.cfi_restore_state
 5499              	.LBB2677:
 5500              	.LBB2632:
 682:Src/motor.cpp **** 
 5501              		.loc 1 682 5 is_stmt 1 view .LVU1512
 5502              	.LBB2633:
 5503              	.LBI2633:
 104:Inc/utils.hpp ****     return wrap_pm(theta, M_PI);
ARM GAS  /tmp/ccvzGucR.s 			page 268


 5504              		.loc 16 104 21 view .LVU1513
 5505              	.LBE2633:
 5506              	.LBE2632:
 5507              	.LBE2677:
 105:Inc/utils.hpp **** }
 5508              		.loc 16 105 5 view .LVU1514
 5509              	.LBB2678:
 5510              	.LBB2673:
 5511              	.LBB2642:
 5512              	.LBB2634:
 5513              	.LBI2634:
 100:Inc/utils.hpp ****     return fmodf_pos(x + pm_range, 2.0f * pm_range) - pm_range;
 5514              		.loc 16 100 21 view .LVU1515
 5515              	.LBB2635:
 101:Inc/utils.hpp **** }
 5516              		.loc 16 101 5 view .LVU1516
 5517              	.LBB2636:
 5518              	.LBI2636:
  88:Inc/utils.hpp ****     float out = fmodf(x, y);
 5519              		.loc 16 88 21 view .LVU1517
 5520              	.LBB2637:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 5521              		.loc 16 89 5 view .LVU1518
  89:Inc/utils.hpp ****     if (out < 0.0f)
 5522              		.loc 16 89 22 is_stmt 0 view .LVU1519
 5523 00ae 9FED4A8A 		vldr.32	s16, .L268+4
 5524              	.LBE2637:
 5525              	.LBE2636:
 101:Inc/utils.hpp **** }
 5526              		.loc 16 101 21 view .LVU1520
 5527 00b2 DFED4A7A 		vldr.32	s15, .L268+8
 5528 00b6 94EDB00A 		vldr.32	s0, [r4, #704]
 101:Inc/utils.hpp **** }
 5529              		.loc 16 101 55 view .LVU1521
 5530 00ba 9FED489A 		vldr.32	s18, .L268+8
 5531              	.LBB2639:
 5532              	.LBB2638:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 5533              		.loc 16 89 22 view .LVU1522
 5534 00be F0EE480A 		vmov.f32	s1, s16
 5535 00c2 30EE270A 		vadd.f32	s0, s0, s15
 5536              	.LVL304:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 5537              		.loc 16 89 22 view .LVU1523
 5538 00c6 FFF7FEFF 		bl	fmodf
 5539              	.LVL305:
  90:Inc/utils.hpp ****         out += y;
 5540              		.loc 16 90 5 is_stmt 1 view .LVU1524
 5541 00ca B5EEC00A 		vcmpe.f32	s0, #0
 5542 00ce F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  91:Inc/utils.hpp ****     return out;
 5543              		.loc 16 91 9 view .LVU1525
  91:Inc/utils.hpp ****     return out;
 5544              		.loc 16 91 13 is_stmt 0 view .LVU1526
 5545 00d2 48BF     		it	mi
 5546 00d4 30EE080A 		vaddmi.f32	s0, s0, s16
 5547              	.LVL306:
ARM GAS  /tmp/ccvzGucR.s 			page 269


  92:Inc/utils.hpp **** }
 5548              		.loc 16 92 5 is_stmt 1 view .LVU1527
  92:Inc/utils.hpp **** }
 5549              		.loc 16 92 5 is_stmt 0 view .LVU1528
 5550              	.LBE2638:
 5551              	.LBE2639:
 5552              	.LBE2635:
 5553              	.LBE2634:
 5554              	.LBE2642:
 685:Src/motor.cpp ****     
 5555              		.loc 1 685 53 view .LVU1529
 5556 00d8 D4ED117A 		vldr.32	s15, [r4, #68]
 5557 00dc 94ED108A 		vldr.32	s16, [r4, #64]
 684:Src/motor.cpp ****     float Ibeta = one_by_sqrt3 * (current_meas_.phB - current_meas_.phC);
 5558              		.loc 1 684 11 view .LVU1530
 5559 00e0 D4ED0F9A 		vldr.32	s19, [r4, #60]
 5560              	.LBB2643:
 5561              	.LBB2641:
 5562              	.LBB2640:
 101:Inc/utils.hpp **** }
 5563              		.loc 16 101 55 view .LVU1531
 5564 00e4 30EE490A 		vsub.f32	s0, s0, s18
 5565              	.LVL307:
 101:Inc/utils.hpp **** }
 5566              		.loc 16 101 55 view .LVU1532
 5567              	.LBE2640:
 5568              	.LBE2641:
 5569              	.LBE2643:
 685:Src/motor.cpp ****     
 5570              		.loc 1 685 53 view .LVU1533
 5571 00e8 38EE678A 		vsub.f32	s16, s16, s15
 685:Src/motor.cpp ****     
 5572              		.loc 1 685 11 view .LVU1534
 5573 00ec DFED3C7A 		vldr.32	s15, .L268+12
 682:Src/motor.cpp **** 
 5574              		.loc 1 682 14 view .LVU1535
 5575 00f0 84EDB00A 		vstr.32	s0, [r4, #704]
 684:Src/motor.cpp ****     float Ibeta = one_by_sqrt3 * (current_meas_.phB - current_meas_.phC);
 5576              		.loc 1 684 5 is_stmt 1 view .LVU1536
 5577              	.LVL308:
 685:Src/motor.cpp ****     
 5578              		.loc 1 685 5 view .LVU1537
 685:Src/motor.cpp ****     
 5579              		.loc 1 685 11 is_stmt 0 view .LVU1538
 5580 00f4 28EE278A 		vmul.f32	s16, s16, s15
 5581              	.LVL309:
 688:Src/motor.cpp ****     float s_I = our_arm_sin_f32(I_phase_);
 5582              		.loc 1 688 5 is_stmt 1 view .LVU1539
 688:Src/motor.cpp ****     float s_I = our_arm_sin_f32(I_phase_);
 5583              		.loc 1 688 32 is_stmt 0 view .LVU1540
 5584 00f8 FFF7FEFF 		bl	our_arm_cos_f32
 5585              	.LVL310:
 5586 00fc F0EE408A 		vmov.f32	s17, s0
 689:Src/motor.cpp ****     float Id = c_I * Ialpha + s_I * Ibeta;
 5587              		.loc 1 689 32 view .LVU1541
 5588 0100 94EDB00A 		vldr.32	s0, [r4, #704]
 5589              	.LVL311:
ARM GAS  /tmp/ccvzGucR.s 			page 270


 689:Src/motor.cpp ****     float Id = c_I * Ialpha + s_I * Ibeta;
 5590              		.loc 1 689 5 is_stmt 1 view .LVU1542
 689:Src/motor.cpp ****     float Id = c_I * Ialpha + s_I * Ibeta;
 5591              		.loc 1 689 32 is_stmt 0 view .LVU1543
 5592 0104 FFF7FEFF 		bl	our_arm_sin_f32
 5593              	.LVL312:
 690:Src/motor.cpp ****     float Iq = c_I * Ibeta - s_I * Ialpha;
 5594              		.loc 1 690 35 view .LVU1544
 5595 0108 68EE006A 		vmul.f32	s13, s16, s0
 691:Src/motor.cpp **** 
 5596              		.loc 1 691 11 view .LVU1545
 5597 010c 60EE697A 		vnmul.f32	s15, s0, s19
 690:Src/motor.cpp ****     float Iq = c_I * Ibeta - s_I * Ialpha;
 5598              		.loc 1 690 11 view .LVU1546
 5599 0110 E9EEA86A 		vfma.f32	s13, s19, s17
 691:Src/motor.cpp **** 
 5600              		.loc 1 691 11 view .LVU1547
 5601 0114 E8EE287A 		vfma.f32	s15, s16, s17
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 5602              		.loc 1 693 16 view .LVU1548
 5603 0118 94ED2F7A 		vldr.32	s14, [r4, #188]
 5604              	.LVL313:
 690:Src/motor.cpp ****     float Iq = c_I * Ibeta - s_I * Ialpha;
 5605              		.loc 1 690 5 is_stmt 1 view .LVU1549
 691:Src/motor.cpp **** 
 5606              		.loc 1 691 5 view .LVU1550
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 5607              		.loc 1 693 5 view .LVU1551
 694:Src/motor.cpp **** 
 5608              		.loc 1 694 16 is_stmt 0 view .LVU1552
 5609 011c D4ED300A 		vldr.32	s1, [r4, #192]
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 5610              		.loc 1 693 19 view .LVU1553
 5611 0120 94ED326A 		vldr.32	s12, [r4, #200]
 5612              	.LBB2644:
 5613              	.LBB2645:
 5614              	.LBB2646:
 5615              	.LBB2647:
 5616              	.LBB2648:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 5617              		.loc 16 89 22 view .LVU1554
 5618 0124 9FED2C8A 		vldr.32	s16, .L268+4
 5619              	.LVL314:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 5620              		.loc 16 89 22 view .LVU1555
 5621              	.LBE2648:
 5622              	.LBE2647:
 5623              	.LBE2646:
 5624              	.LBE2645:
 5625              	.LBE2644:
 694:Src/motor.cpp **** 
 5626              		.loc 1 694 40 view .LVU1556
 5627 0128 76EEE06A 		vsub.f32	s13, s13, s1
 5628              	.LVL315:
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 5629              		.loc 1 693 40 view .LVU1557
 5630 012c 77EEC77A 		vsub.f32	s15, s15, s14
ARM GAS  /tmp/ccvzGucR.s 			page 271


 5631              	.LVL316:
 694:Src/motor.cpp **** 
 5632              		.loc 1 694 16 view .LVU1558
 5633 0130 E6EE260A 		vfma.f32	s1, s12, s13
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 5634              		.loc 1 693 16 view .LVU1559
 5635 0134 A6EE277A 		vfma.f32	s14, s12, s15
 694:Src/motor.cpp **** 
 5636              		.loc 1 694 16 view .LVU1560
 5637 0138 C4ED300A 		vstr.32	s1, [r4, #192]
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 5638              		.loc 1 693 16 view .LVU1561
 5639 013c B0EE470A 		vmov.f32	s0, s14
 5640              	.LVL317:
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 5641              		.loc 1 693 16 view .LVU1562
 5642 0140 84ED2F7A 		vstr.32	s14, [r4, #188]
 694:Src/motor.cpp **** 
 5643              		.loc 1 694 5 is_stmt 1 view .LVU1563
 696:Src/motor.cpp ****     total_phase_for_abc_sign_calculation_  = I_phase_ + offset_phase + M_PI;
 5644              		.loc 1 696 5 view .LVU1564
 696:Src/motor.cpp ****     total_phase_for_abc_sign_calculation_  = I_phase_ + offset_phase + M_PI;
 5645              		.loc 1 696 36 is_stmt 0 view .LVU1565
 5646 0144 FFF7FEFF 		bl	fast_atan2
 5647              	.LVL318:
 697:Src/motor.cpp ****     
 5648              		.loc 1 697 5 is_stmt 1 view .LVU1566
 697:Src/motor.cpp ****     
 5649              		.loc 1 697 55 is_stmt 0 view .LVU1567
 5650 0148 D4EDB07A 		vldr.32	s15, [r4, #704]
 5651 014c 30EE270A 		vadd.f32	s0, s0, s15
 5652              	.LVL319:
 5653              	.LBB2667:
 5654              	.LBB2662:
 5655              	.LBB2657:
 5656              	.LBB2653:
 5657              	.LBB2649:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 5658              		.loc 16 89 22 view .LVU1568
 5659 0150 F0EE480A 		vmov.f32	s1, s16
 5660              	.LBE2649:
 5661              	.LBE2653:
 5662              	.LBE2657:
 5663              	.LBE2662:
 5664              	.LBE2667:
 697:Src/motor.cpp ****     
 5665              		.loc 1 697 70 view .LVU1569
 5666 0154 70EE097A 		vadd.f32	s15, s0, s18
 5667              	.LBB2668:
 5668              	.LBB2663:
 5669              	.LBB2658:
 5670              	.LBB2654:
 5671              	.LBB2650:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 5672              		.loc 16 89 22 view .LVU1570
 5673 0158 37EE890A 		vadd.f32	s0, s15, s18
 5674              	.LBE2650:
ARM GAS  /tmp/ccvzGucR.s 			page 272


 5675              	.LBE2654:
 5676              	.LBE2658:
 5677              	.LBE2663:
 5678              	.LBE2668:
 697:Src/motor.cpp ****     
 5679              		.loc 1 697 44 view .LVU1571
 5680 015c C4EDAF7A 		vstr.32	s15, [r4, #700]
 699:Src/motor.cpp ****     total_phase_for_abc_sign_calculation_ += M_PI;
 5681              		.loc 1 699 5 is_stmt 1 view .LVU1572
 5682              	.LVL320:
 5683              	.LBB2669:
 5684              	.LBI2644:
 104:Inc/utils.hpp ****     return wrap_pm(theta, M_PI);
 5685              		.loc 16 104 21 view .LVU1573
 5686              	.LBE2669:
 5687              	.LBE2673:
 5688              	.LBE2678:
 105:Inc/utils.hpp **** }
 5689              		.loc 16 105 5 view .LVU1574
 5690              	.LBB2679:
 5691              	.LBB2674:
 5692              	.LBB2670:
 5693              	.LBB2664:
 5694              	.LBI2645:
 100:Inc/utils.hpp ****     return fmodf_pos(x + pm_range, 2.0f * pm_range) - pm_range;
 5695              		.loc 16 100 21 view .LVU1575
 5696              	.LBB2659:
 101:Inc/utils.hpp **** }
 5697              		.loc 16 101 5 view .LVU1576
 5698              	.LBB2655:
 5699              	.LBI2647:
  88:Inc/utils.hpp ****     float out = fmodf(x, y);
 5700              		.loc 16 88 21 view .LVU1577
 5701              	.LBB2651:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 5702              		.loc 16 89 5 view .LVU1578
  89:Inc/utils.hpp ****     if (out < 0.0f)
 5703              		.loc 16 89 22 is_stmt 0 view .LVU1579
 5704 0160 FFF7FEFF 		bl	fmodf
 5705              	.LVL321:
  90:Inc/utils.hpp ****         out += y;
 5706              		.loc 16 90 5 is_stmt 1 view .LVU1580
 5707 0164 B5EEC00A 		vcmpe.f32	s0, #0
 5708 0168 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  91:Inc/utils.hpp ****     return out;
 5709              		.loc 16 91 9 view .LVU1581
 5710              	.LBE2651:
 5711              	.LBE2655:
 101:Inc/utils.hpp **** }
 5712              		.loc 16 101 55 is_stmt 0 view .LVU1582
 5713 016c DFED1B7A 		vldr.32	s15, .L268+8
 5714              	.LBE2659:
 5715              	.LBE2664:
 5716              	.LBE2670:
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 5717              		.loc 1 705 76 view .LVU1583
 5718 0170 9FED1C7A 		vldr.32	s14, .L268+16
ARM GAS  /tmp/ccvzGucR.s 			page 273


 5719              	.LBB2671:
 5720              	.LBB2665:
 5721              	.LBB2660:
 5722              	.LBB2656:
 5723              	.LBB2652:
  91:Inc/utils.hpp ****     return out;
 5724              		.loc 16 91 13 view .LVU1584
 5725 0174 48BF     		it	mi
 5726 0176 30EE080A 		vaddmi.f32	s0, s0, s16
 5727              	.LVL322:
  92:Inc/utils.hpp **** }
 5728              		.loc 16 92 5 is_stmt 1 view .LVU1585
  92:Inc/utils.hpp **** }
 5729              		.loc 16 92 5 is_stmt 0 view .LVU1586
 5730              	.LBE2652:
 5731              	.LBE2656:
 5732              	.LBE2660:
 5733              	.LBE2665:
 5734              	.LBE2671:
 700:Src/motor.cpp **** 
 5735              		.loc 1 700 5 is_stmt 1 view .LVU1587
 702:Src/motor.cpp ****     
 5736              		.loc 1 702 25 is_stmt 0 view .LVU1588
 5737 017a 04F52E73 		add	r3, r4, #696
 5738              	.LBB2672:
 5739              	.LBB2666:
 5740              	.LBB2661:
 101:Inc/utils.hpp **** }
 5741              		.loc 16 101 55 view .LVU1589
 5742 017e 30EE670A 		vsub.f32	s0, s0, s15
 5743              	.LBE2661:
 5744              	.LBE2666:
 5745              	.LBE2672:
 702:Src/motor.cpp ****     
 5746              		.loc 1 702 25 view .LVU1590
 5747 0182 04F52D72 		add	r2, r4, #692
 700:Src/motor.cpp **** 
 5748              		.loc 1 700 43 view .LVU1591
 5749 0186 30EE270A 		vadd.f32	s0, s0, s15
 702:Src/motor.cpp ****     
 5750              		.loc 1 702 25 view .LVU1592
 5751 018a 04F52C71 		add	r1, r4, #688
 5752 018e 2046     		mov	r0, r4
 700:Src/motor.cpp **** 
 5753              		.loc 1 700 43 view .LVU1593
 5754 0190 84EDAF0A 		vstr.32	s0, [r4, #700]
 702:Src/motor.cpp ****     
 5755              		.loc 1 702 5 is_stmt 1 view .LVU1594
 702:Src/motor.cpp ****     
 5756              		.loc 1 702 25 is_stmt 0 view .LVU1595
 5757 0194 FFF7FEFF 		bl	_ZN5Motor20abc_sign_calculationEfPlS0_S0_
 5758              	.LVL323:
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 5759              		.loc 1 705 6 is_stmt 1 view .LVU1596
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 5760              		.loc 1 705 76 is_stmt 0 view .LVU1597
 5761 0198 D4EDB27A 		vldr.32	s15, [r4, #712]
ARM GAS  /tmp/ccvzGucR.s 			page 274


 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 5762              		.loc 1 705 36 view .LVU1598
 5763 019c D4F8B012 		ldr	r1, [r4, #688]
 706:Src/motor.cpp ****      Cphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 5764              		.loc 1 706 36 view .LVU1599
 5765 01a0 D4F8B422 		ldr	r2, [r4, #692]
 707:Src/motor.cpp **** }
 5766              		.loc 1 707 36 view .LVU1600
 5767 01a4 D4F8B832 		ldr	r3, [r4, #696]
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 5768              		.loc 1 705 76 view .LVU1601
 5769 01a8 67EE877A 		vmul.f32	s15, s15, s14
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 5770              		.loc 1 705 39 view .LVU1602
 5771 01ac FDEEE77A 		vcvt.s32.f32	s15, s15
 5772 01b0 17EE900A 		vmov	r0, s15	@ int
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 5773              		.loc 1 705 36 view .LVU1603
 5774 01b4 11FB00F1 		smulbb	r1, r1, r0
 706:Src/motor.cpp ****      Cphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 5775              		.loc 1 706 36 view .LVU1604
 5776 01b8 12FB00F2 		smulbb	r2, r2, r0
 707:Src/motor.cpp **** }
 5777              		.loc 1 707 36 view .LVU1605
 5778 01bc 13FB00F3 		smulbb	r3, r3, r0
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 5779              		.loc 1 705 36 view .LVU1606
 5780 01c0 89B2     		uxth	r1, r1
 706:Src/motor.cpp ****      Cphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 5781              		.loc 1 706 36 view .LVU1607
 5782 01c2 92B2     		uxth	r2, r2
 707:Src/motor.cpp **** }
 5783              		.loc 1 707 36 view .LVU1608
 5784 01c4 9BB2     		uxth	r3, r3
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 5785              		.loc 1 705 36 view .LVU1609
 5786 01c6 A4F8CC12 		strh	r1, [r4, #716]	@ movhi
 706:Src/motor.cpp ****      Cphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 5787              		.loc 1 706 6 is_stmt 1 view .LVU1610
 706:Src/motor.cpp ****      Cphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 5788              		.loc 1 706 36 is_stmt 0 view .LVU1611
 5789 01ca A4F8CE22 		strh	r2, [r4, #718]	@ movhi
 707:Src/motor.cpp **** }
 5790              		.loc 1 707 6 is_stmt 1 view .LVU1612
 707:Src/motor.cpp **** }
 5791              		.loc 1 707 36 is_stmt 0 view .LVU1613
 5792 01ce A4F8D032 		strh	r3, [r4, #720]	@ movhi
 5793              	.LBE2674:
 5794 01d2 2EE7     		b	.L260
 5795              	.L269:
 5796              		.align	2
 5797              	.L268:
 5798 01d4 00D08445 		.word	1166331904
 5799 01d8 DB0FC940 		.word	1086918619
 5800 01dc DB0F4940 		.word	1078530011
 5801 01e0 3ACD133F 		.word	1058262330
 5802 01e4 00002042 		.word	1109393408
ARM GAS  /tmp/ccvzGucR.s 			page 275


 5803              	.LBE2679:
 5804              		.cfi_endproc
 5805              	.LFE5016:
 5807              		.section	.text._ZN5Motor23enqueue_voltage_timingsEff,"ax",%progbits
 5808              		.align	1
 5809              		.p2align 2,,3
 5810              		.global	_ZN5Motor23enqueue_voltage_timingsEff
 5811              		.syntax unified
 5812              		.thumb
 5813              		.thumb_func
 5814              		.fpu fpv4-sp-d16
 5816              	_ZN5Motor23enqueue_voltage_timingsEff:
 5817              	.LVL324:
 5818              	.LFB5017:
 727:Src/motor.cpp ****     float vfactor = 1.0f / ((2.0f / 3.0f) * vbus_voltage);  // float vfactor = 1.0f / ((2.0f / 3.0f
 5819              		.loc 1 727 66 is_stmt 1 view -0
 5820              		.cfi_startproc
 5821              		@ args = 0, pretend = 0, frame = 16
 5822              		@ frame_needed = 0, uses_anonymous_args = 0
 728:Src/motor.cpp ****     float mod_alpha = vfactor * v_alpha;
 5823              		.loc 1 728 5 view .LVU1615
 728:Src/motor.cpp ****     float mod_alpha = vfactor * v_alpha;
 5824              		.loc 1 728 43 is_stmt 0 view .LVU1616
 5825 0000 7E4B     		ldr	r3, .L287
 5826 0002 9FED7F7A 		vldr.32	s14, .L287+4
 5827 0006 D3ED007A 		vldr.32	s15, [r3]
 5828              	.LBB2702:
 5829              	.LBB2703:
 361:Src/motor.cpp **** 
 5830              		.loc 1 361 47 view .LVU1617
 5831 000a 7E4B     		ldr	r3, .L287+8
 5832              	.LBE2703:
 5833              	.LBE2702:
 728:Src/motor.cpp ****     float mod_alpha = vfactor * v_alpha;
 5834              		.loc 1 728 43 view .LVU1618
 5835 000c 67EE877A 		vmul.f32	s15, s15, s14
 728:Src/motor.cpp ****     float mod_alpha = vfactor * v_alpha;
 5836              		.loc 1 728 11 view .LVU1619
 5837 0010 F7EE006A 		vmov.f32	s13, #1.0e+0
 5838 0014 86EEA77A 		vdiv.f32	s14, s13, s15
 5839              	.LVL325:
 729:Src/motor.cpp ****     float mod_beta = vfactor * v_beta;
 5840              		.loc 1 729 5 is_stmt 1 view .LVU1620
 727:Src/motor.cpp ****     float vfactor = 1.0f / ((2.0f / 3.0f) * vbus_voltage);  // float vfactor = 1.0f / ((2.0f / 3.0f
 5841              		.loc 1 727 66 is_stmt 0 view .LVU1621
 5842 0018 30B5     		push	{r4, r5, lr}
 5843              	.LCFI83:
 5844              		.cfi_def_cfa_offset 12
 5845              		.cfi_offset 4, -12
 5846              		.cfi_offset 5, -8
 5847              		.cfi_offset 14, -4
 5848              	.LBB2708:
 5849              	.LBB2705:
 361:Src/motor.cpp **** 
 5850              		.loc 1 361 47 view .LVU1622
 5851 001a 1B68     		ldr	r3, [r3]
 361:Src/motor.cpp **** 
ARM GAS  /tmp/ccvzGucR.s 			page 276


 5852              		.loc 1 361 57 view .LVU1623
 5853 001c 5B6A     		ldr	r3, [r3, #36]
 5854 001e 5B00     		lsls	r3, r3, #1
 5855              	.LBE2705:
 5856              	.LBE2708:
 727:Src/motor.cpp ****     float vfactor = 1.0f / ((2.0f / 3.0f) * vbus_voltage);  // float vfactor = 1.0f / ((2.0f / 3.0f
 5857              		.loc 1 727 66 view .LVU1624
 5858 0020 0446     		mov	r4, r0
 5859              	.LVL326:
 730:Src/motor.cpp **** 
 5860              		.loc 1 730 5 is_stmt 1 view .LVU1625
 727:Src/motor.cpp ****     float vfactor = 1.0f / ((2.0f / 3.0f) * vbus_voltage);  // float vfactor = 1.0f / ((2.0f / 3.0f
 5861              		.loc 1 727 66 is_stmt 0 view .LVU1626
 5862 0022 2DED048B 		vpush.64	{d8, d9}
 5863              	.LCFI84:
 5864              		.cfi_def_cfa_offset 28
 5865              		.cfi_offset 80, -28
 5866              		.cfi_offset 81, -24
 5867              		.cfi_offset 82, -20
 5868              		.cfi_offset 83, -16
 5869 0026 85B0     		sub	sp, sp, #20
 5870              	.LCFI85:
 5871              		.cfi_def_cfa_offset 48
 5872              	.LBB2709:
 5873              	.LBB2706:
 364:Src/motor.cpp ****     }
 5874              		.loc 1 364 30 view .LVU1627
 5875 0028 4385     		strh	r3, [r0, #42]	@ movhi
 5876              	.LBE2706:
 5877              	.LBE2709:
 5878              	.LBB2710:
 5879              	.LBB2711:
 676:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 5880              		.loc 1 676 12 view .LVU1628
 5881 002a 27EE000A 		vmul.f32	s0, s14, s0
 5882              	.LVL327:
 676:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 5883              		.loc 1 676 12 view .LVU1629
 5884              	.LBE2711:
 5885              	.LBE2710:
 732:Src/motor.cpp **** 
 5886              		.loc 1 732 5 is_stmt 1 view .LVU1630
 5887              	.LBB2766:
 5888              	.LBI2702:
 359:Src/motor.cpp ****     static const uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLO
 5889              		.loc 1 359 6 view .LVU1631
 5890              	.LBB2707:
 360:Src/motor.cpp ****     uint16_t timing = clocks_per_cnt * htim15.Instance->CNT; // TODO: Use a hw_config
 5891              		.loc 1 360 5 view .LVU1632
 361:Src/motor.cpp **** 
 5892              		.loc 1 361 5 view .LVU1633
 363:Src/motor.cpp ****         timing_log_[log_idx] = timing;
 5893              		.loc 1 363 5 view .LVU1634
 364:Src/motor.cpp ****     }
 5894              		.loc 1 364 9 view .LVU1635
 5895              	.LBB2704:
 5896              	.LBI2704:
ARM GAS  /tmp/ccvzGucR.s 			page 277


 5897              		.loc 15 172 19 view .LVU1636
 5898              	.LBE2704:
 5899              	.LBE2707:
 5900              	.LBE2766:
 5901              		.loc 15 172 44 view .LVU1637
 734:Src/motor.cpp ****         return false;
 5902              		.loc 1 734 5 view .LVU1638
 5903              	.LBB2767:
 5904              	.LBI2710:
 674:Src/motor.cpp ****     float tA, tB, tC;
 5905              		.loc 1 674 6 view .LVU1639
 5906              	.LBB2761:
 675:Src/motor.cpp ****     if (SVM(mod_alpha, mod_beta, &tA, &tB, &tC) != 0)
 5907              		.loc 1 675 5 view .LVU1640
 676:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 5908              		.loc 1 676 5 view .LVU1641
 676:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 5909              		.loc 1 676 12 is_stmt 0 view .LVU1642
 5910 002e 67EE200A 		vmul.f32	s1, s14, s1
 5911              	.LVL328:
 676:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 5912              		.loc 1 676 12 view .LVU1643
 5913 0032 03AA     		add	r2, sp, #12
 5914 0034 02A9     		add	r1, sp, #8
 5915 0036 01A8     		add	r0, sp, #4
 5916              	.LVL329:
 676:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 5917              		.loc 1 676 12 view .LVU1644
 5918 0038 FFF7FEFF 		bl	SVM
 5919              	.LVL330:
 676:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 5920              		.loc 1 676 5 view .LVU1645
 5921 003c C8BB     		cbnz	r0, .L285
 680:Src/motor.cpp **** {
 5922              		.loc 1 680 1 is_stmt 1 view .LVU1646
 5923              	.LBB2712:
 5924 003e D4EDB27A 		vldr.32	s15, [r4, #712]
 5925 0042 F5EEC07A 		vcmpe.f32	s15, #0
 5926 0046 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5927 004a 44D4     		bmi	.L286
 711:Src/motor.cpp ****     Bphase_deadtime_compensation_ =0;
 5928              		.loc 1 711 5 view .LVU1647
 712:Src/motor.cpp ****     Cphase_deadtime_compensation_ =0;
 5929              		.loc 1 712 5 view .LVU1648
 713:Src/motor.cpp **** }
 5930              		.loc 1 713 35 is_stmt 0 view .LVU1649
 5931 004c 0346     		mov	r3, r0
 711:Src/motor.cpp ****     Bphase_deadtime_compensation_ =0;
 5932              		.loc 1 711 35 view .LVU1650
 5933 004e C4F8CC02 		str	r0, [r4, #716]
 713:Src/motor.cpp **** }
 5934              		.loc 1 713 5 is_stmt 1 view .LVU1651
 713:Src/motor.cpp **** }
 5935              		.loc 1 713 35 is_stmt 0 view .LVU1652
 5936 0052 A4F8D002 		strh	r0, [r4, #720]	@ movhi
 5937 0056 0246     		mov	r2, r0
 5938 0058 0146     		mov	r1, r0
ARM GAS  /tmp/ccvzGucR.s 			page 278


 5939              	.L279:
 5940              	.LBE2712:
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 5941              		.loc 1 717 5 is_stmt 1 view .LVU1653
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 5942              		.loc 1 717 38 is_stmt 0 view .LVU1654
 5943 005a 9FED6B6A 		vldr.32	s12, .L287+12
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 5944              		.loc 1 718 38 view .LVU1655
 5945 005e DDED026A 		vldr.32	s13, [sp, #8]
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 5946              		.loc 1 717 38 view .LVU1656
 5947 0062 9DED017A 		vldr.32	s14, [sp, #4]
 719:Src/motor.cpp ****     next_timings_valid_ = true;
 5948              		.loc 1 719 38 view .LVU1657
 5949 0066 DDED037A 		vldr.32	s15, [sp, #12]
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 5950              		.loc 1 718 38 view .LVU1658
 5951 006a 66EE866A 		vmul.f32	s13, s13, s12
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 5952              		.loc 1 717 38 view .LVU1659
 5953 006e 27EE067A 		vmul.f32	s14, s14, s12
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 5954              		.loc 1 718 24 view .LVU1660
 5955 0072 FCEEE66A 		vcvt.u32.f32	s13, s13
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 5956              		.loc 1 717 24 view .LVU1661
 5957 0076 BCEEC77A 		vcvt.u32.f32	s14, s14
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 5958              		.loc 1 718 70 view .LVU1662
 5959 007a 16EE900A 		vmov	r0, s13	@ int
 719:Src/motor.cpp ****     next_timings_valid_ = true;
 5960              		.loc 1 719 38 view .LVU1663
 5961 007e 67EE867A 		vmul.f32	s15, s15, s12
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 5962              		.loc 1 718 70 view .LVU1664
 5963 0082 0244     		add	r2, r2, r0
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 5964              		.loc 1 717 70 view .LVU1665
 5965 0084 17EE100A 		vmov	r0, s14	@ int
 719:Src/motor.cpp ****     next_timings_valid_ = true;
 5966              		.loc 1 719 24 view .LVU1666
 5967 0088 FCEEE77A 		vcvt.u32.f32	s15, s15
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 5968              		.loc 1 717 70 view .LVU1667
 5969 008c 0144     		add	r1, r1, r0
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 5970              		.loc 1 717 22 view .LVU1668
 5971 008e A181     		strh	r1, [r4, #12]	@ movhi
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 5972              		.loc 1 718 5 is_stmt 1 view .LVU1669
 719:Src/motor.cpp ****     next_timings_valid_ = true;
 5973              		.loc 1 719 70 is_stmt 0 view .LVU1670
 5974 0090 17EE901A 		vmov	r1, s15	@ int
 720:Src/motor.cpp ****     safety_critical_apply_motor_pwm_timings(
 5975              		.loc 1 720 25 view .LVU1671
 5976 0094 0125     		movs	r5, #1
ARM GAS  /tmp/ccvzGucR.s 			page 279


 719:Src/motor.cpp ****     next_timings_valid_ = true;
 5977              		.loc 1 719 70 view .LVU1672
 5978 0096 0B44     		add	r3, r3, r1
 721:Src/motor.cpp ****                 *this, next_timings_
 5979              		.loc 1 721 44 view .LVU1673
 5980 0098 2046     		mov	r0, r4
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 5981              		.loc 1 718 22 view .LVU1674
 5982 009a E281     		strh	r2, [r4, #14]	@ movhi
 719:Src/motor.cpp ****     next_timings_valid_ = true;
 5983              		.loc 1 719 5 is_stmt 1 view .LVU1675
 719:Src/motor.cpp ****     next_timings_valid_ = true;
 5984              		.loc 1 719 22 is_stmt 0 view .LVU1676
 5985 009c 2382     		strh	r3, [r4, #16]	@ movhi
 720:Src/motor.cpp ****     safety_critical_apply_motor_pwm_timings(
 5986              		.loc 1 720 5 is_stmt 1 view .LVU1677
 720:Src/motor.cpp ****     safety_critical_apply_motor_pwm_timings(
 5987              		.loc 1 720 25 is_stmt 0 view .LVU1678
 5988 009e A574     		strb	r5, [r4, #18]
 721:Src/motor.cpp ****                 *this, next_timings_
 5989              		.loc 1 721 5 is_stmt 1 view .LVU1679
 721:Src/motor.cpp ****                 *this, next_timings_
 5990              		.loc 1 721 44 is_stmt 0 view .LVU1680
 5991 00a0 04F10C01 		add	r1, r4, #12
 5992 00a4 FFF7FEFF 		bl	safety_critical_apply_motor_pwm_timings
 5993              	.LVL331:
 724:Src/motor.cpp **** }
 5994              		.loc 1 724 5 is_stmt 1 view .LVU1681
 724:Src/motor.cpp **** }
 5995              		.loc 1 724 5 is_stmt 0 view .LVU1682
 5996              	.LBE2761:
 5997              	.LBE2767:
 736:Src/motor.cpp **** }
 5998              		.loc 1 736 12 view .LVU1683
 5999 00a8 2846     		mov	r0, r5
 737:Src/motor.cpp **** 
 6000              		.loc 1 737 1 view .LVU1684
 6001 00aa 05B0     		add	sp, sp, #20
 6002              	.LCFI86:
 6003              		.cfi_remember_state
 6004              		.cfi_def_cfa_offset 28
 6005              		@ sp needed
 6006 00ac BDEC048B 		vldm	sp!, {d8-d9}
 6007              	.LCFI87:
 6008              		.cfi_restore 82
 6009              		.cfi_restore 83
 6010              		.cfi_restore 80
 6011              		.cfi_restore 81
 6012              		.cfi_def_cfa_offset 12
 6013 00b0 30BD     		pop	{r4, r5, pc}
 6014              	.LVL332:
 6015              	.L285:
 6016              	.LCFI88:
 6017              		.cfi_restore_state
 6018              	.LBB2768:
 6019              	.LBB2762:
 677:Src/motor.cpp **** 
ARM GAS  /tmp/ccvzGucR.s 			page 280


 6020              		.loc 1 677 5 is_stmt 1 view .LVU1685
 6021              	.LBB2756:
 6022              	.LBI2756:
 306:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 6023              		.loc 1 306 6 view .LVU1686
 6024              	.LBB2757:
 307:Src/motor.cpp **** 
 6025              		.loc 1 307 5 view .LVU1687
 307:Src/motor.cpp **** 
 6026              		.loc 1 307 86 is_stmt 0 view .LVU1688
 6027 00b2 636B     		ldr	r3, [r4, #52]
 310:Src/motor.cpp **** 
 6028              		.loc 1 310 19 view .LVU1689
 6029 00b4 A268     		ldr	r2, [r4, #8]
 307:Src/motor.cpp **** 
 6030              		.loc 1 307 86 view .LVU1690
 6031 00b6 43F08003 		orr	r3, r3, #128
 310:Src/motor.cpp **** 
 6032              		.loc 1 310 19 view .LVU1691
 6033 00ba 4021     		movs	r1, #64
 307:Src/motor.cpp **** 
 6034              		.loc 1 307 12 view .LVU1692
 6035 00bc 6363     		str	r3, [r4, #52]
 310:Src/motor.cpp **** 
 6036              		.loc 1 310 5 is_stmt 1 view .LVU1693
 312:Src/motor.cpp ****     update_brake_current();
 6037              		.loc 1 312 37 is_stmt 0 view .LVU1694
 6038 00be 2046     		mov	r0, r4
 310:Src/motor.cpp **** 
 6039              		.loc 1 310 19 view .LVU1695
 6040 00c0 C2F85C11 		str	r1, [r2, #348]
 312:Src/motor.cpp ****     update_brake_current();
 6041              		.loc 1 312 5 is_stmt 1 view .LVU1696
 312:Src/motor.cpp ****     update_brake_current();
 6042              		.loc 1 312 37 is_stmt 0 view .LVU1697
 6043 00c4 FFF7FEFF 		bl	safety_critical_disarm_motor_pwm
 6044              	.LVL333:
 313:Src/motor.cpp **** }
 6045              		.loc 1 313 5 is_stmt 1 view .LVU1698
 313:Src/motor.cpp **** }
 6046              		.loc 1 313 25 is_stmt 0 view .LVU1699
 6047 00c8 FFF7FEFF 		bl	update_brake_current
 6048              	.LVL334:
 313:Src/motor.cpp **** }
 6049              		.loc 1 313 25 view .LVU1700
 6050              	.LBE2757:
 6051              	.LBE2756:
 6052              	.LBE2762:
 6053              	.LBE2768:
 735:Src/motor.cpp ****     return true;
 6054              		.loc 1 735 16 view .LVU1701
 6055 00cc 0020     		movs	r0, #0
 737:Src/motor.cpp **** 
 6056              		.loc 1 737 1 view .LVU1702
 6057 00ce 05B0     		add	sp, sp, #20
 6058              	.LCFI89:
 6059              		.cfi_remember_state
ARM GAS  /tmp/ccvzGucR.s 			page 281


 6060              		.cfi_def_cfa_offset 28
 6061              		@ sp needed
 6062 00d0 BDEC048B 		vldm	sp!, {d8-d9}
 6063              	.LCFI90:
 6064              		.cfi_restore 82
 6065              		.cfi_restore 83
 6066              		.cfi_restore 80
 6067              		.cfi_restore 81
 6068              		.cfi_def_cfa_offset 12
 6069 00d4 30BD     		pop	{r4, r5, pc}
 6070              	.LVL335:
 6071              	.L286:
 6072              	.LCFI91:
 6073              		.cfi_restore_state
 6074              	.LBB2769:
 6075              	.LBB2763:
 6076              	.LBB2758:
 6077              	.LBB2713:
 682:Src/motor.cpp **** 
 6078              		.loc 1 682 5 is_stmt 1 view .LVU1703
 6079              	.LBB2714:
 6080              	.LBI2714:
 104:Inc/utils.hpp ****     return wrap_pm(theta, M_PI);
 6081              		.loc 16 104 21 view .LVU1704
 6082              	.LBE2714:
 6083              	.LBE2713:
 6084              	.LBE2758:
 6085              	.LBE2763:
 6086              	.LBE2769:
 105:Inc/utils.hpp **** }
 6087              		.loc 16 105 5 view .LVU1705
 6088              	.LBB2770:
 6089              	.LBB2764:
 6090              	.LBB2759:
 6091              	.LBB2754:
 6092              	.LBB2723:
 6093              	.LBB2715:
 6094              	.LBI2715:
 100:Inc/utils.hpp ****     return fmodf_pos(x + pm_range, 2.0f * pm_range) - pm_range;
 6095              		.loc 16 100 21 view .LVU1706
 6096              	.LBB2716:
 101:Inc/utils.hpp **** }
 6097              		.loc 16 101 5 view .LVU1707
 6098              	.LBB2717:
 6099              	.LBI2717:
  88:Inc/utils.hpp ****     float out = fmodf(x, y);
 6100              		.loc 16 88 21 view .LVU1708
 6101              	.LBB2718:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6102              		.loc 16 89 5 view .LVU1709
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6103              		.loc 16 89 22 is_stmt 0 view .LVU1710
 6104 00d6 9FED4D8A 		vldr.32	s16, .L287+16
 6105              	.LBE2718:
 6106              	.LBE2717:
 101:Inc/utils.hpp **** }
 6107              		.loc 16 101 21 view .LVU1711
ARM GAS  /tmp/ccvzGucR.s 			page 282


 6108 00da DFED4D7A 		vldr.32	s15, .L287+20
 6109 00de 94EDB00A 		vldr.32	s0, [r4, #704]
 101:Inc/utils.hpp **** }
 6110              		.loc 16 101 55 view .LVU1712
 6111 00e2 9FED4B9A 		vldr.32	s18, .L287+20
 6112              	.LBB2720:
 6113              	.LBB2719:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6114              		.loc 16 89 22 view .LVU1713
 6115 00e6 F0EE480A 		vmov.f32	s1, s16
 6116 00ea 30EE270A 		vadd.f32	s0, s0, s15
 6117              	.LVL336:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6118              		.loc 16 89 22 view .LVU1714
 6119 00ee FFF7FEFF 		bl	fmodf
 6120              	.LVL337:
  90:Inc/utils.hpp ****         out += y;
 6121              		.loc 16 90 5 is_stmt 1 view .LVU1715
 6122 00f2 B5EEC00A 		vcmpe.f32	s0, #0
 6123 00f6 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  91:Inc/utils.hpp ****     return out;
 6124              		.loc 16 91 9 view .LVU1716
  91:Inc/utils.hpp ****     return out;
 6125              		.loc 16 91 13 is_stmt 0 view .LVU1717
 6126 00fa 48BF     		it	mi
 6127 00fc 30EE080A 		vaddmi.f32	s0, s0, s16
 6128              	.LVL338:
  92:Inc/utils.hpp **** }
 6129              		.loc 16 92 5 is_stmt 1 view .LVU1718
  92:Inc/utils.hpp **** }
 6130              		.loc 16 92 5 is_stmt 0 view .LVU1719
 6131              	.LBE2719:
 6132              	.LBE2720:
 6133              	.LBE2716:
 6134              	.LBE2715:
 6135              	.LBE2723:
 685:Src/motor.cpp ****     
 6136              		.loc 1 685 53 view .LVU1720
 6137 0100 D4ED117A 		vldr.32	s15, [r4, #68]
 6138 0104 94ED108A 		vldr.32	s16, [r4, #64]
 684:Src/motor.cpp ****     float Ibeta = one_by_sqrt3 * (current_meas_.phB - current_meas_.phC);
 6139              		.loc 1 684 11 view .LVU1721
 6140 0108 D4ED0F9A 		vldr.32	s19, [r4, #60]
 6141              	.LBB2724:
 6142              	.LBB2722:
 6143              	.LBB2721:
 101:Inc/utils.hpp **** }
 6144              		.loc 16 101 55 view .LVU1722
 6145 010c 30EE490A 		vsub.f32	s0, s0, s18
 6146              	.LVL339:
 101:Inc/utils.hpp **** }
 6147              		.loc 16 101 55 view .LVU1723
 6148              	.LBE2721:
 6149              	.LBE2722:
 6150              	.LBE2724:
 685:Src/motor.cpp ****     
 6151              		.loc 1 685 53 view .LVU1724
ARM GAS  /tmp/ccvzGucR.s 			page 283


 6152 0110 38EE678A 		vsub.f32	s16, s16, s15
 685:Src/motor.cpp ****     
 6153              		.loc 1 685 11 view .LVU1725
 6154 0114 DFED3F7A 		vldr.32	s15, .L287+24
 682:Src/motor.cpp **** 
 6155              		.loc 1 682 14 view .LVU1726
 6156 0118 84EDB00A 		vstr.32	s0, [r4, #704]
 684:Src/motor.cpp ****     float Ibeta = one_by_sqrt3 * (current_meas_.phB - current_meas_.phC);
 6157              		.loc 1 684 5 is_stmt 1 view .LVU1727
 6158              	.LVL340:
 685:Src/motor.cpp ****     
 6159              		.loc 1 685 5 view .LVU1728
 685:Src/motor.cpp ****     
 6160              		.loc 1 685 11 is_stmt 0 view .LVU1729
 6161 011c 28EE278A 		vmul.f32	s16, s16, s15
 6162              	.LVL341:
 688:Src/motor.cpp ****     float s_I = our_arm_sin_f32(I_phase_);
 6163              		.loc 1 688 5 is_stmt 1 view .LVU1730
 688:Src/motor.cpp ****     float s_I = our_arm_sin_f32(I_phase_);
 6164              		.loc 1 688 32 is_stmt 0 view .LVU1731
 6165 0120 FFF7FEFF 		bl	our_arm_cos_f32
 6166              	.LVL342:
 6167 0124 F0EE408A 		vmov.f32	s17, s0
 689:Src/motor.cpp ****     float Id = c_I * Ialpha + s_I * Ibeta;
 6168              		.loc 1 689 32 view .LVU1732
 6169 0128 94EDB00A 		vldr.32	s0, [r4, #704]
 6170              	.LVL343:
 689:Src/motor.cpp ****     float Id = c_I * Ialpha + s_I * Ibeta;
 6171              		.loc 1 689 5 is_stmt 1 view .LVU1733
 689:Src/motor.cpp ****     float Id = c_I * Ialpha + s_I * Ibeta;
 6172              		.loc 1 689 32 is_stmt 0 view .LVU1734
 6173 012c FFF7FEFF 		bl	our_arm_sin_f32
 6174              	.LVL344:
 690:Src/motor.cpp ****     float Iq = c_I * Ibeta - s_I * Ialpha;
 6175              		.loc 1 690 35 view .LVU1735
 6176 0130 68EE006A 		vmul.f32	s13, s16, s0
 691:Src/motor.cpp **** 
 6177              		.loc 1 691 11 view .LVU1736
 6178 0134 60EE697A 		vnmul.f32	s15, s0, s19
 690:Src/motor.cpp ****     float Iq = c_I * Ibeta - s_I * Ialpha;
 6179              		.loc 1 690 11 view .LVU1737
 6180 0138 E9EEA86A 		vfma.f32	s13, s19, s17
 691:Src/motor.cpp **** 
 6181              		.loc 1 691 11 view .LVU1738
 6182 013c E8EE287A 		vfma.f32	s15, s16, s17
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 6183              		.loc 1 693 16 view .LVU1739
 6184 0140 94ED2F7A 		vldr.32	s14, [r4, #188]
 6185              	.LVL345:
 690:Src/motor.cpp ****     float Iq = c_I * Ibeta - s_I * Ialpha;
 6186              		.loc 1 690 5 is_stmt 1 view .LVU1740
 691:Src/motor.cpp **** 
 6187              		.loc 1 691 5 view .LVU1741
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 6188              		.loc 1 693 5 view .LVU1742
 694:Src/motor.cpp **** 
 6189              		.loc 1 694 16 is_stmt 0 view .LVU1743
ARM GAS  /tmp/ccvzGucR.s 			page 284


 6190 0144 D4ED300A 		vldr.32	s1, [r4, #192]
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 6191              		.loc 1 693 19 view .LVU1744
 6192 0148 94ED326A 		vldr.32	s12, [r4, #200]
 6193              	.LBB2725:
 6194              	.LBB2726:
 6195              	.LBB2727:
 6196              	.LBB2728:
 6197              	.LBB2729:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6198              		.loc 16 89 22 view .LVU1745
 6199 014c 9FED2F8A 		vldr.32	s16, .L287+16
 6200              	.LVL346:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6201              		.loc 16 89 22 view .LVU1746
 6202              	.LBE2729:
 6203              	.LBE2728:
 6204              	.LBE2727:
 6205              	.LBE2726:
 6206              	.LBE2725:
 694:Src/motor.cpp **** 
 6207              		.loc 1 694 40 view .LVU1747
 6208 0150 76EEE06A 		vsub.f32	s13, s13, s1
 6209              	.LVL347:
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 6210              		.loc 1 693 40 view .LVU1748
 6211 0154 77EEC77A 		vsub.f32	s15, s15, s14
 6212              	.LVL348:
 694:Src/motor.cpp **** 
 6213              		.loc 1 694 16 view .LVU1749
 6214 0158 E6EE260A 		vfma.f32	s1, s12, s13
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 6215              		.loc 1 693 16 view .LVU1750
 6216 015c A6EE277A 		vfma.f32	s14, s12, s15
 694:Src/motor.cpp **** 
 6217              		.loc 1 694 16 view .LVU1751
 6218 0160 C4ED300A 		vstr.32	s1, [r4, #192]
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 6219              		.loc 1 693 16 view .LVU1752
 6220 0164 B0EE470A 		vmov.f32	s0, s14
 6221              	.LVL349:
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 6222              		.loc 1 693 16 view .LVU1753
 6223 0168 84ED2F7A 		vstr.32	s14, [r4, #188]
 694:Src/motor.cpp **** 
 6224              		.loc 1 694 5 is_stmt 1 view .LVU1754
 696:Src/motor.cpp ****     total_phase_for_abc_sign_calculation_  = I_phase_ + offset_phase + M_PI;
 6225              		.loc 1 696 5 view .LVU1755
 696:Src/motor.cpp ****     total_phase_for_abc_sign_calculation_  = I_phase_ + offset_phase + M_PI;
 6226              		.loc 1 696 36 is_stmt 0 view .LVU1756
 6227 016c FFF7FEFF 		bl	fast_atan2
 6228              	.LVL350:
 697:Src/motor.cpp ****     
 6229              		.loc 1 697 5 is_stmt 1 view .LVU1757
 697:Src/motor.cpp ****     
 6230              		.loc 1 697 55 is_stmt 0 view .LVU1758
 6231 0170 D4EDB07A 		vldr.32	s15, [r4, #704]
ARM GAS  /tmp/ccvzGucR.s 			page 285


 6232 0174 30EE270A 		vadd.f32	s0, s0, s15
 6233              	.LVL351:
 6234              	.LBB2748:
 6235              	.LBB2743:
 6236              	.LBB2738:
 6237              	.LBB2734:
 6238              	.LBB2730:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6239              		.loc 16 89 22 view .LVU1759
 6240 0178 F0EE480A 		vmov.f32	s1, s16
 6241              	.LBE2730:
 6242              	.LBE2734:
 6243              	.LBE2738:
 6244              	.LBE2743:
 6245              	.LBE2748:
 697:Src/motor.cpp ****     
 6246              		.loc 1 697 70 view .LVU1760
 6247 017c 70EE097A 		vadd.f32	s15, s0, s18
 6248              	.LBB2749:
 6249              	.LBB2744:
 6250              	.LBB2739:
 6251              	.LBB2735:
 6252              	.LBB2731:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6253              		.loc 16 89 22 view .LVU1761
 6254 0180 37EE890A 		vadd.f32	s0, s15, s18
 6255              	.LBE2731:
 6256              	.LBE2735:
 6257              	.LBE2739:
 6258              	.LBE2744:
 6259              	.LBE2749:
 697:Src/motor.cpp ****     
 6260              		.loc 1 697 44 view .LVU1762
 6261 0184 C4EDAF7A 		vstr.32	s15, [r4, #700]
 699:Src/motor.cpp ****     total_phase_for_abc_sign_calculation_ += M_PI;
 6262              		.loc 1 699 5 is_stmt 1 view .LVU1763
 6263              	.LVL352:
 6264              	.LBB2750:
 6265              	.LBI2725:
 104:Inc/utils.hpp ****     return wrap_pm(theta, M_PI);
 6266              		.loc 16 104 21 view .LVU1764
 6267              	.LBE2750:
 6268              	.LBE2754:
 6269              	.LBE2759:
 6270              	.LBE2764:
 6271              	.LBE2770:
 105:Inc/utils.hpp **** }
 6272              		.loc 16 105 5 view .LVU1765
 6273              	.LBB2771:
 6274              	.LBB2765:
 6275              	.LBB2760:
 6276              	.LBB2755:
 6277              	.LBB2751:
 6278              	.LBB2745:
 6279              	.LBI2726:
 100:Inc/utils.hpp ****     return fmodf_pos(x + pm_range, 2.0f * pm_range) - pm_range;
 6280              		.loc 16 100 21 view .LVU1766
ARM GAS  /tmp/ccvzGucR.s 			page 286


 6281              	.LBB2740:
 101:Inc/utils.hpp **** }
 6282              		.loc 16 101 5 view .LVU1767
 6283              	.LBB2736:
 6284              	.LBI2728:
  88:Inc/utils.hpp ****     float out = fmodf(x, y);
 6285              		.loc 16 88 21 view .LVU1768
 6286              	.LBB2732:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6287              		.loc 16 89 5 view .LVU1769
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6288              		.loc 16 89 22 is_stmt 0 view .LVU1770
 6289 0188 FFF7FEFF 		bl	fmodf
 6290              	.LVL353:
  90:Inc/utils.hpp ****         out += y;
 6291              		.loc 16 90 5 is_stmt 1 view .LVU1771
 6292 018c B5EEC00A 		vcmpe.f32	s0, #0
 6293 0190 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  91:Inc/utils.hpp ****     return out;
 6294              		.loc 16 91 9 view .LVU1772
 6295              	.LBE2732:
 6296              	.LBE2736:
 101:Inc/utils.hpp **** }
 6297              		.loc 16 101 55 is_stmt 0 view .LVU1773
 6298 0194 DFED1E7A 		vldr.32	s15, .L287+20
 6299              	.LBE2740:
 6300              	.LBE2745:
 6301              	.LBE2751:
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 6302              		.loc 1 705 76 view .LVU1774
 6303 0198 9FED1F7A 		vldr.32	s14, .L287+28
 6304              	.LBB2752:
 6305              	.LBB2746:
 6306              	.LBB2741:
 6307              	.LBB2737:
 6308              	.LBB2733:
  91:Inc/utils.hpp ****     return out;
 6309              		.loc 16 91 13 view .LVU1775
 6310 019c 48BF     		it	mi
 6311 019e 30EE080A 		vaddmi.f32	s0, s0, s16
 6312              	.LVL354:
  92:Inc/utils.hpp **** }
 6313              		.loc 16 92 5 is_stmt 1 view .LVU1776
  92:Inc/utils.hpp **** }
 6314              		.loc 16 92 5 is_stmt 0 view .LVU1777
 6315              	.LBE2733:
 6316              	.LBE2737:
 6317              	.LBE2741:
 6318              	.LBE2746:
 6319              	.LBE2752:
 700:Src/motor.cpp **** 
 6320              		.loc 1 700 5 is_stmt 1 view .LVU1778
 702:Src/motor.cpp ****     
 6321              		.loc 1 702 25 is_stmt 0 view .LVU1779
 6322 01a2 04F52E73 		add	r3, r4, #696
 6323              	.LBB2753:
 6324              	.LBB2747:
ARM GAS  /tmp/ccvzGucR.s 			page 287


 6325              	.LBB2742:
 101:Inc/utils.hpp **** }
 6326              		.loc 16 101 55 view .LVU1780
 6327 01a6 30EE670A 		vsub.f32	s0, s0, s15
 6328              	.LBE2742:
 6329              	.LBE2747:
 6330              	.LBE2753:
 702:Src/motor.cpp ****     
 6331              		.loc 1 702 25 view .LVU1781
 6332 01aa 04F52D72 		add	r2, r4, #692
 700:Src/motor.cpp **** 
 6333              		.loc 1 700 43 view .LVU1782
 6334 01ae 30EE270A 		vadd.f32	s0, s0, s15
 702:Src/motor.cpp ****     
 6335              		.loc 1 702 25 view .LVU1783
 6336 01b2 04F52C71 		add	r1, r4, #688
 6337 01b6 2046     		mov	r0, r4
 700:Src/motor.cpp **** 
 6338              		.loc 1 700 43 view .LVU1784
 6339 01b8 84EDAF0A 		vstr.32	s0, [r4, #700]
 702:Src/motor.cpp ****     
 6340              		.loc 1 702 5 is_stmt 1 view .LVU1785
 702:Src/motor.cpp ****     
 6341              		.loc 1 702 25 is_stmt 0 view .LVU1786
 6342 01bc FFF7FEFF 		bl	_ZN5Motor20abc_sign_calculationEfPlS0_S0_
 6343              	.LVL355:
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 6344              		.loc 1 705 6 is_stmt 1 view .LVU1787
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 6345              		.loc 1 705 76 is_stmt 0 view .LVU1788
 6346 01c0 D4EDB27A 		vldr.32	s15, [r4, #712]
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 6347              		.loc 1 705 36 view .LVU1789
 6348 01c4 D4F8B012 		ldr	r1, [r4, #688]
 706:Src/motor.cpp ****      Cphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 6349              		.loc 1 706 36 view .LVU1790
 6350 01c8 D4F8B422 		ldr	r2, [r4, #692]
 707:Src/motor.cpp **** }
 6351              		.loc 1 707 36 view .LVU1791
 6352 01cc D4F8B832 		ldr	r3, [r4, #696]
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 6353              		.loc 1 705 76 view .LVU1792
 6354 01d0 67EE877A 		vmul.f32	s15, s15, s14
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 6355              		.loc 1 705 39 view .LVU1793
 6356 01d4 FDEEE77A 		vcvt.s32.f32	s15, s15
 6357 01d8 17EE900A 		vmov	r0, s15	@ int
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 6358              		.loc 1 705 36 view .LVU1794
 6359 01dc 11FB00F1 		smulbb	r1, r1, r0
 706:Src/motor.cpp ****      Cphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 6360              		.loc 1 706 36 view .LVU1795
 6361 01e0 12FB00F2 		smulbb	r2, r2, r0
 707:Src/motor.cpp **** }
 6362              		.loc 1 707 36 view .LVU1796
 6363 01e4 13FB00F3 		smulbb	r3, r3, r0
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
ARM GAS  /tmp/ccvzGucR.s 			page 288


 6364              		.loc 1 705 36 view .LVU1797
 6365 01e8 89B2     		uxth	r1, r1
 706:Src/motor.cpp ****      Cphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 6366              		.loc 1 706 36 view .LVU1798
 6367 01ea 92B2     		uxth	r2, r2
 707:Src/motor.cpp **** }
 6368              		.loc 1 707 36 view .LVU1799
 6369 01ec 9BB2     		uxth	r3, r3
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 6370              		.loc 1 705 36 view .LVU1800
 6371 01ee A4F8CC12 		strh	r1, [r4, #716]	@ movhi
 706:Src/motor.cpp ****      Cphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 6372              		.loc 1 706 6 is_stmt 1 view .LVU1801
 706:Src/motor.cpp ****      Cphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 6373              		.loc 1 706 36 is_stmt 0 view .LVU1802
 6374 01f2 A4F8CE22 		strh	r2, [r4, #718]	@ movhi
 707:Src/motor.cpp **** }
 6375              		.loc 1 707 6 is_stmt 1 view .LVU1803
 707:Src/motor.cpp **** }
 6376              		.loc 1 707 36 is_stmt 0 view .LVU1804
 6377 01f6 A4F8D032 		strh	r3, [r4, #720]	@ movhi
 6378              	.LBE2755:
 6379 01fa 2EE7     		b	.L279
 6380              	.L288:
 6381              		.align	2
 6382              	.L287:
 6383 01fc 00000000 		.word	vbus_voltage
 6384 0200 ABAA2A3F 		.word	1059760811
 6385 0204 00000000 		.word	htim15
 6386 0208 00D08445 		.word	1166331904
 6387 020c DB0FC940 		.word	1086918619
 6388 0210 DB0F4940 		.word	1078530011
 6389 0214 3ACD133F 		.word	1058262330
 6390 0218 00002042 		.word	1109393408
 6391              	.LBE2760:
 6392              	.LBE2765:
 6393              	.LBE2771:
 6394              		.cfi_endproc
 6395              	.LFE5017:
 6397              		.section	.text._ZN5Motor11FOC_voltageEfff,"ax",%progbits
 6398              		.align	1
 6399              		.p2align 2,,3
 6400              		.global	_ZN5Motor11FOC_voltageEfff
 6401              		.syntax unified
 6402              		.thumb
 6403              		.thumb_func
 6404              		.fpu fpv4-sp-d16
 6406              	_ZN5Motor11FOC_voltageEfff:
 6407              	.LVL356:
 6408              	.LFB5018:
 740:Src/motor.cpp ****     float c = our_arm_cos_f32(pwm_phase);
 6409              		.loc 1 740 64 is_stmt 1 view -0
 6410              		.cfi_startproc
 6411              		@ args = 0, pretend = 0, frame = 16
 6412              		@ frame_needed = 0, uses_anonymous_args = 0
 741:Src/motor.cpp ****     float s = our_arm_sin_f32(pwm_phase);
 6413              		.loc 1 741 5 view .LVU1806
ARM GAS  /tmp/ccvzGucR.s 			page 289


 740:Src/motor.cpp ****     float c = our_arm_cos_f32(pwm_phase);
 6414              		.loc 1 740 64 is_stmt 0 view .LVU1807
 6415 0000 30B5     		push	{r4, r5, lr}
 6416              	.LCFI92:
 6417              		.cfi_def_cfa_offset 12
 6418              		.cfi_offset 4, -12
 6419              		.cfi_offset 5, -8
 6420              		.cfi_offset 14, -4
 6421 0002 2DED048B 		vpush.64	{d8, d9}
 6422              	.LCFI93:
 6423              		.cfi_def_cfa_offset 28
 6424              		.cfi_offset 80, -28
 6425              		.cfi_offset 81, -24
 6426              		.cfi_offset 82, -20
 6427              		.cfi_offset 83, -16
 6428 0006 B0EE409A 		vmov.f32	s18, s0
 6429 000a 85B0     		sub	sp, sp, #20
 6430              	.LCFI94:
 6431              		.cfi_def_cfa_offset 48
 741:Src/motor.cpp ****     float s = our_arm_sin_f32(pwm_phase);
 6432              		.loc 1 741 30 view .LVU1808
 6433 000c B0EE410A 		vmov.f32	s0, s2
 6434              	.LVL357:
 740:Src/motor.cpp ****     float c = our_arm_cos_f32(pwm_phase);
 6435              		.loc 1 740 64 view .LVU1809
 6436 0010 B0EE608A 		vmov.f32	s16, s1
 6437 0014 0446     		mov	r4, r0
 6438 0016 F0EE419A 		vmov.f32	s19, s2
 741:Src/motor.cpp ****     float s = our_arm_sin_f32(pwm_phase);
 6439              		.loc 1 741 30 view .LVU1810
 6440 001a FFF7FEFF 		bl	our_arm_cos_f32
 6441              	.LVL358:
 741:Src/motor.cpp ****     float s = our_arm_sin_f32(pwm_phase);
 6442              		.loc 1 741 30 view .LVU1811
 6443 001e F0EE408A 		vmov.f32	s17, s0
 742:Src/motor.cpp ****     float v_alpha = c*v_d - s*v_q;
 6444              		.loc 1 742 30 view .LVU1812
 6445 0022 B0EE690A 		vmov.f32	s0, s19
 6446              	.LVL359:
 742:Src/motor.cpp ****     float v_alpha = c*v_d - s*v_q;
 6447              		.loc 1 742 5 is_stmt 1 view .LVU1813
 742:Src/motor.cpp ****     float v_alpha = c*v_d - s*v_q;
 6448              		.loc 1 742 30 is_stmt 0 view .LVU1814
 6449 0026 FFF7FEFF 		bl	our_arm_sin_f32
 6450              	.LVL360:
 6451              	.LBB2793:
 6452              	.LBB2794:
 728:Src/motor.cpp ****     float mod_alpha = vfactor * v_alpha;
 6453              		.loc 1 728 43 view .LVU1815
 6454 002a 814B     		ldr	r3, .L306
 6455 002c DFED817A 		vldr.32	s15, .L306+4
 6456 0030 93ED007A 		vldr.32	s14, [r3]
 6457              	.LBB2795:
 6458              	.LBB2796:
 361:Src/motor.cpp **** 
 6459              		.loc 1 361 47 view .LVU1816
 6460 0034 804B     		ldr	r3, .L306+8
ARM GAS  /tmp/ccvzGucR.s 			page 290


 6461              	.LBE2796:
 6462              	.LBE2795:
 728:Src/motor.cpp ****     float mod_alpha = vfactor * v_alpha;
 6463              		.loc 1 728 43 view .LVU1817
 6464 0036 27EE277A 		vmul.f32	s14, s14, s15
 728:Src/motor.cpp ****     float mod_alpha = vfactor * v_alpha;
 6465              		.loc 1 728 11 view .LVU1818
 6466 003a F7EE006A 		vmov.f32	s13, #1.0e+0
 6467              	.LBE2794:
 6468              	.LBE2793:
 742:Src/motor.cpp ****     float v_alpha = c*v_d - s*v_q;
 6469              		.loc 1 742 30 view .LVU1819
 6470 003e F0EE407A 		vmov.f32	s15, s0
 6471              	.LVL361:
 743:Src/motor.cpp ****     float v_beta = c*v_q + s*v_d;
 6472              		.loc 1 743 5 is_stmt 1 view .LVU1820
 6473              	.LBB2874:
 6474              	.LBB2867:
 728:Src/motor.cpp ****     float mod_alpha = vfactor * v_alpha;
 6475              		.loc 1 728 11 is_stmt 0 view .LVU1821
 6476 0042 86EE870A 		vdiv.f32	s0, s13, s14
 6477              	.LVL362:
 6478              	.LBB2801:
 6479              	.LBB2798:
 361:Src/motor.cpp **** 
 6480              		.loc 1 361 47 view .LVU1822
 6481 0046 1B68     		ldr	r3, [r3]
 361:Src/motor.cpp **** 
 6482              		.loc 1 361 57 view .LVU1823
 6483 0048 5B6A     		ldr	r3, [r3, #36]
 6484 004a 5B00     		lsls	r3, r3, #1
 6485              	.LBE2798:
 6486              	.LBE2801:
 6487              	.LBB2802:
 6488              	.LBB2803:
 676:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 6489              		.loc 1 676 12 view .LVU1824
 6490 004c 03AA     		add	r2, sp, #12
 6491              	.LBE2803:
 6492              	.LBE2802:
 6493              	.LBB2859:
 6494              	.LBB2799:
 364:Src/motor.cpp ****     }
 6495              		.loc 1 364 30 view .LVU1825
 6496 004e 6385     		strh	r3, [r4, #42]	@ movhi
 6497              	.LBE2799:
 6498              	.LBE2859:
 6499              	.LBB2860:
 6500              	.LBB2853:
 676:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 6501              		.loc 1 676 12 view .LVU1826
 6502 0050 02A9     		add	r1, sp, #8
 6503 0052 01A8     		add	r0, sp, #4
 6504              	.LBE2853:
 6505              	.LBE2860:
 6506              	.LBE2867:
 6507              	.LBE2874:
ARM GAS  /tmp/ccvzGucR.s 			page 291


 743:Src/motor.cpp ****     float v_beta = c*v_q + s*v_d;
 6508              		.loc 1 743 11 view .LVU1827
 6509 0054 28EE677A 		vnmul.f32	s14, s16, s15
 744:Src/motor.cpp **** 
 6510              		.loc 1 744 29 view .LVU1828
 6511 0058 67EE897A 		vmul.f32	s15, s15, s18
 6512              	.LVL363:
 743:Src/motor.cpp ****     float v_beta = c*v_q + s*v_d;
 6513              		.loc 1 743 11 view .LVU1829
 6514 005c A8EE897A 		vfma.f32	s14, s17, s18
 6515              	.LVL364:
 744:Src/motor.cpp **** 
 6516              		.loc 1 744 5 is_stmt 1 view .LVU1830
 744:Src/motor.cpp **** 
 6517              		.loc 1 744 11 is_stmt 0 view .LVU1831
 6518 0060 E8EE887A 		vfma.f32	s15, s17, s16
 6519              	.LVL365:
 746:Src/motor.cpp **** }
 6520              		.loc 1 746 5 is_stmt 1 view .LVU1832
 6521              	.LBB2875:
 6522              	.LBI2793:
 727:Src/motor.cpp ****     float vfactor = 1.0f / ((2.0f / 3.0f) * vbus_voltage);  // float vfactor = 1.0f / ((2.0f / 3.0f
 6523              		.loc 1 727 6 view .LVU1833
 6524              	.LBB2868:
 728:Src/motor.cpp ****     float mod_alpha = vfactor * v_alpha;
 6525              		.loc 1 728 5 view .LVU1834
 729:Src/motor.cpp ****     float mod_beta = vfactor * v_beta;
 6526              		.loc 1 729 5 view .LVU1835
 730:Src/motor.cpp **** 
 6527              		.loc 1 730 5 view .LVU1836
 732:Src/motor.cpp **** 
 6528              		.loc 1 732 5 view .LVU1837
 6529              	.LBB2861:
 6530              	.LBI2795:
 359:Src/motor.cpp ****     static const uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLO
 6531              		.loc 1 359 6 view .LVU1838
 6532              	.LBB2800:
 360:Src/motor.cpp ****     uint16_t timing = clocks_per_cnt * htim15.Instance->CNT; // TODO: Use a hw_config
 6533              		.loc 1 360 5 view .LVU1839
 361:Src/motor.cpp **** 
 6534              		.loc 1 361 5 view .LVU1840
 363:Src/motor.cpp ****         timing_log_[log_idx] = timing;
 6535              		.loc 1 363 5 view .LVU1841
 364:Src/motor.cpp ****     }
 6536              		.loc 1 364 9 view .LVU1842
 6537              	.LBB2797:
 6538              	.LBI2797:
 6539              		.loc 15 172 19 view .LVU1843
 6540              	.LBE2797:
 6541              	.LBE2800:
 6542              	.LBE2861:
 6543              	.LBE2868:
 6544              	.LBE2875:
 6545              		.loc 15 172 44 view .LVU1844
 6546              	.LBB2876:
 6547              	.LBB2869:
 734:Src/motor.cpp ****         return false;
ARM GAS  /tmp/ccvzGucR.s 			page 292


 6548              		.loc 1 734 5 view .LVU1845
 6549              	.LBB2862:
 6550              	.LBI2802:
 674:Src/motor.cpp ****     float tA, tB, tC;
 6551              		.loc 1 674 6 view .LVU1846
 6552              	.LBB2854:
 675:Src/motor.cpp ****     if (SVM(mod_alpha, mod_beta, &tA, &tB, &tC) != 0)
 6553              		.loc 1 675 5 view .LVU1847
 676:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 6554              		.loc 1 676 5 view .LVU1848
 676:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 6555              		.loc 1 676 12 is_stmt 0 view .LVU1849
 6556 0064 67EE800A 		vmul.f32	s1, s15, s0
 6557              	.LVL366:
 676:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 6558              		.loc 1 676 12 view .LVU1850
 6559 0068 27EE000A 		vmul.f32	s0, s14, s0
 6560              	.LVL367:
 676:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 6561              		.loc 1 676 12 view .LVU1851
 6562 006c FFF7FEFF 		bl	SVM
 6563              	.LVL368:
 676:Src/motor.cpp ****     return set_error(ODriveIntf::MotorIntf::ERROR_MODULATION_MAGNITUDE), false;
 6564              		.loc 1 676 5 view .LVU1852
 6565 0070 C8BB     		cbnz	r0, .L304
 680:Src/motor.cpp **** {
 6566              		.loc 1 680 1 is_stmt 1 view .LVU1853
 6567              	.LBB2804:
 6568 0072 D4EDB27A 		vldr.32	s15, [r4, #712]
 6569 0076 F5EEC07A 		vcmpe.f32	s15, #0
 6570 007a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 6571 007e 44D4     		bmi	.L305
 711:Src/motor.cpp ****     Bphase_deadtime_compensation_ =0;
 6572              		.loc 1 711 5 view .LVU1854
 712:Src/motor.cpp ****     Cphase_deadtime_compensation_ =0;
 6573              		.loc 1 712 5 view .LVU1855
 713:Src/motor.cpp **** }
 6574              		.loc 1 713 35 is_stmt 0 view .LVU1856
 6575 0080 0346     		mov	r3, r0
 711:Src/motor.cpp ****     Bphase_deadtime_compensation_ =0;
 6576              		.loc 1 711 35 view .LVU1857
 6577 0082 C4F8CC02 		str	r0, [r4, #716]
 713:Src/motor.cpp **** }
 6578              		.loc 1 713 5 is_stmt 1 view .LVU1858
 713:Src/motor.cpp **** }
 6579              		.loc 1 713 35 is_stmt 0 view .LVU1859
 6580 0086 A4F8D002 		strh	r0, [r4, #720]	@ movhi
 6581 008a 0246     		mov	r2, r0
 6582 008c 0146     		mov	r1, r0
 6583              	.LVL369:
 6584              	.L298:
 713:Src/motor.cpp **** }
 6585              		.loc 1 713 35 view .LVU1860
 6586              	.LBE2804:
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 6587              		.loc 1 717 5 is_stmt 1 view .LVU1861
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
ARM GAS  /tmp/ccvzGucR.s 			page 293


 6588              		.loc 1 717 38 is_stmt 0 view .LVU1862
 6589 008e 9FED6B6A 		vldr.32	s12, .L306+12
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 6590              		.loc 1 718 38 view .LVU1863
 6591 0092 DDED026A 		vldr.32	s13, [sp, #8]
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 6592              		.loc 1 717 38 view .LVU1864
 6593 0096 9DED017A 		vldr.32	s14, [sp, #4]
 719:Src/motor.cpp ****     next_timings_valid_ = true;
 6594              		.loc 1 719 38 view .LVU1865
 6595 009a DDED037A 		vldr.32	s15, [sp, #12]
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 6596              		.loc 1 718 38 view .LVU1866
 6597 009e 66EE866A 		vmul.f32	s13, s13, s12
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 6598              		.loc 1 717 38 view .LVU1867
 6599 00a2 27EE067A 		vmul.f32	s14, s14, s12
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 6600              		.loc 1 718 24 view .LVU1868
 6601 00a6 FCEEE66A 		vcvt.u32.f32	s13, s13
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 6602              		.loc 1 717 24 view .LVU1869
 6603 00aa BCEEC77A 		vcvt.u32.f32	s14, s14
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 6604              		.loc 1 718 70 view .LVU1870
 6605 00ae 16EE900A 		vmov	r0, s13	@ int
 719:Src/motor.cpp ****     next_timings_valid_ = true;
 6606              		.loc 1 719 38 view .LVU1871
 6607 00b2 67EE867A 		vmul.f32	s15, s15, s12
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 6608              		.loc 1 718 70 view .LVU1872
 6609 00b6 0244     		add	r2, r2, r0
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 6610              		.loc 1 717 70 view .LVU1873
 6611 00b8 17EE100A 		vmov	r0, s14	@ int
 719:Src/motor.cpp ****     next_timings_valid_ = true;
 6612              		.loc 1 719 24 view .LVU1874
 6613 00bc FCEEE77A 		vcvt.u32.f32	s15, s15
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 6614              		.loc 1 717 70 view .LVU1875
 6615 00c0 0144     		add	r1, r1, r0
 717:Src/motor.cpp ****     next_timings_[1] = (uint16_t)(tB * (float)TIM_1_8_PERIOD_CLOCKS) + Bphase_deadtime_compensation
 6616              		.loc 1 717 22 view .LVU1876
 6617 00c2 A181     		strh	r1, [r4, #12]	@ movhi
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 6618              		.loc 1 718 5 is_stmt 1 view .LVU1877
 719:Src/motor.cpp ****     next_timings_valid_ = true;
 6619              		.loc 1 719 70 is_stmt 0 view .LVU1878
 6620 00c4 17EE901A 		vmov	r1, s15	@ int
 720:Src/motor.cpp ****     safety_critical_apply_motor_pwm_timings(
 6621              		.loc 1 720 25 view .LVU1879
 6622 00c8 0125     		movs	r5, #1
 719:Src/motor.cpp ****     next_timings_valid_ = true;
 6623              		.loc 1 719 70 view .LVU1880
 6624 00ca 0B44     		add	r3, r3, r1
 721:Src/motor.cpp ****                 *this, next_timings_
 6625              		.loc 1 721 44 view .LVU1881
ARM GAS  /tmp/ccvzGucR.s 			page 294


 6626 00cc 2046     		mov	r0, r4
 718:Src/motor.cpp ****     next_timings_[2] = (uint16_t)(tC * (float)TIM_1_8_PERIOD_CLOCKS) + Cphase_deadtime_compensation
 6627              		.loc 1 718 22 view .LVU1882
 6628 00ce E281     		strh	r2, [r4, #14]	@ movhi
 719:Src/motor.cpp ****     next_timings_valid_ = true;
 6629              		.loc 1 719 5 is_stmt 1 view .LVU1883
 719:Src/motor.cpp ****     next_timings_valid_ = true;
 6630              		.loc 1 719 22 is_stmt 0 view .LVU1884
 6631 00d0 2382     		strh	r3, [r4, #16]	@ movhi
 720:Src/motor.cpp ****     safety_critical_apply_motor_pwm_timings(
 6632              		.loc 1 720 5 is_stmt 1 view .LVU1885
 720:Src/motor.cpp ****     safety_critical_apply_motor_pwm_timings(
 6633              		.loc 1 720 25 is_stmt 0 view .LVU1886
 6634 00d2 A574     		strb	r5, [r4, #18]
 721:Src/motor.cpp ****                 *this, next_timings_
 6635              		.loc 1 721 5 is_stmt 1 view .LVU1887
 721:Src/motor.cpp ****                 *this, next_timings_
 6636              		.loc 1 721 44 is_stmt 0 view .LVU1888
 6637 00d4 04F10C01 		add	r1, r4, #12
 6638 00d8 FFF7FEFF 		bl	safety_critical_apply_motor_pwm_timings
 6639              	.LVL370:
 724:Src/motor.cpp **** }
 6640              		.loc 1 724 5 is_stmt 1 view .LVU1889
 724:Src/motor.cpp **** }
 6641              		.loc 1 724 5 is_stmt 0 view .LVU1890
 6642              	.LBE2854:
 6643              	.LBE2862:
 736:Src/motor.cpp **** }
 6644              		.loc 1 736 12 view .LVU1891
 6645 00dc 2846     		mov	r0, r5
 6646              	.LVL371:
 736:Src/motor.cpp **** }
 6647              		.loc 1 736 12 view .LVU1892
 6648              	.LBE2869:
 6649              	.LBE2876:
 747:Src/motor.cpp **** 
 6650              		.loc 1 747 1 view .LVU1893
 6651 00de 05B0     		add	sp, sp, #20
 6652              	.LCFI95:
 6653              		.cfi_remember_state
 6654              		.cfi_def_cfa_offset 28
 6655              		@ sp needed
 6656 00e0 BDEC048B 		vldm	sp!, {d8-d9}
 6657              	.LCFI96:
 6658              		.cfi_restore 82
 6659              		.cfi_restore 83
 6660              		.cfi_restore 80
 6661              		.cfi_restore 81
 6662              		.cfi_def_cfa_offset 12
 6663 00e4 30BD     		pop	{r4, r5, pc}
 6664              	.LVL372:
 6665              	.L304:
 6666              	.LCFI97:
 6667              		.cfi_restore_state
 6668              	.LBB2877:
 6669              	.LBB2870:
 6670              	.LBB2863:
ARM GAS  /tmp/ccvzGucR.s 			page 295


 6671              	.LBB2855:
 677:Src/motor.cpp **** 
 6672              		.loc 1 677 5 is_stmt 1 view .LVU1894
 6673              	.LBB2848:
 6674              	.LBI2848:
 306:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 6675              		.loc 1 306 6 view .LVU1895
 6676              	.LBB2849:
 307:Src/motor.cpp **** 
 6677              		.loc 1 307 5 view .LVU1896
 307:Src/motor.cpp **** 
 6678              		.loc 1 307 86 is_stmt 0 view .LVU1897
 6679 00e6 636B     		ldr	r3, [r4, #52]
 310:Src/motor.cpp **** 
 6680              		.loc 1 310 19 view .LVU1898
 6681 00e8 A268     		ldr	r2, [r4, #8]
 307:Src/motor.cpp **** 
 6682              		.loc 1 307 86 view .LVU1899
 6683 00ea 43F08003 		orr	r3, r3, #128
 310:Src/motor.cpp **** 
 6684              		.loc 1 310 19 view .LVU1900
 6685 00ee 4021     		movs	r1, #64
 307:Src/motor.cpp **** 
 6686              		.loc 1 307 12 view .LVU1901
 6687 00f0 6363     		str	r3, [r4, #52]
 310:Src/motor.cpp **** 
 6688              		.loc 1 310 5 is_stmt 1 view .LVU1902
 312:Src/motor.cpp ****     update_brake_current();
 6689              		.loc 1 312 37 is_stmt 0 view .LVU1903
 6690 00f2 2046     		mov	r0, r4
 310:Src/motor.cpp **** 
 6691              		.loc 1 310 19 view .LVU1904
 6692 00f4 C2F85C11 		str	r1, [r2, #348]
 312:Src/motor.cpp ****     update_brake_current();
 6693              		.loc 1 312 5 is_stmt 1 view .LVU1905
 312:Src/motor.cpp ****     update_brake_current();
 6694              		.loc 1 312 37 is_stmt 0 view .LVU1906
 6695 00f8 FFF7FEFF 		bl	safety_critical_disarm_motor_pwm
 6696              	.LVL373:
 313:Src/motor.cpp **** }
 6697              		.loc 1 313 5 is_stmt 1 view .LVU1907
 313:Src/motor.cpp **** }
 6698              		.loc 1 313 25 is_stmt 0 view .LVU1908
 6699 00fc FFF7FEFF 		bl	update_brake_current
 6700              	.LVL374:
 313:Src/motor.cpp **** }
 6701              		.loc 1 313 25 view .LVU1909
 6702              	.LBE2849:
 6703              	.LBE2848:
 6704              	.LBE2855:
 6705              	.LBE2863:
 735:Src/motor.cpp ****     return true;
 6706              		.loc 1 735 16 view .LVU1910
 6707 0100 0020     		movs	r0, #0
 6708              	.LVL375:
 735:Src/motor.cpp ****     return true;
 6709              		.loc 1 735 16 view .LVU1911
ARM GAS  /tmp/ccvzGucR.s 			page 296


 6710              	.LBE2870:
 6711              	.LBE2877:
 747:Src/motor.cpp **** 
 6712              		.loc 1 747 1 view .LVU1912
 6713 0102 05B0     		add	sp, sp, #20
 6714              	.LCFI98:
 6715              		.cfi_remember_state
 6716              		.cfi_def_cfa_offset 28
 6717              		@ sp needed
 6718 0104 BDEC048B 		vldm	sp!, {d8-d9}
 6719              	.LCFI99:
 6720              		.cfi_restore 82
 6721              		.cfi_restore 83
 6722              		.cfi_restore 80
 6723              		.cfi_restore 81
 6724              		.cfi_def_cfa_offset 12
 6725              	.LVL376:
 747:Src/motor.cpp **** 
 6726              		.loc 1 747 1 view .LVU1913
 6727 0108 30BD     		pop	{r4, r5, pc}
 6728              	.LVL377:
 6729              	.L305:
 6730              	.LCFI100:
 6731              		.cfi_restore_state
 6732              	.LBB2878:
 6733              	.LBB2871:
 6734              	.LBB2864:
 6735              	.LBB2856:
 6736              	.LBB2850:
 6737              	.LBB2805:
 682:Src/motor.cpp **** 
 6738              		.loc 1 682 5 is_stmt 1 view .LVU1914
 6739              	.LBB2806:
 6740              	.LBI2806:
 104:Inc/utils.hpp ****     return wrap_pm(theta, M_PI);
 6741              		.loc 16 104 21 view .LVU1915
 6742              	.LBE2806:
 6743              	.LBE2805:
 6744              	.LBE2850:
 6745              	.LBE2856:
 6746              	.LBE2864:
 6747              	.LBE2871:
 6748              	.LBE2878:
 105:Inc/utils.hpp **** }
 6749              		.loc 16 105 5 view .LVU1916
 6750              	.LBB2879:
 6751              	.LBB2872:
 6752              	.LBB2865:
 6753              	.LBB2857:
 6754              	.LBB2851:
 6755              	.LBB2846:
 6756              	.LBB2815:
 6757              	.LBB2807:
 6758              	.LBI2807:
 100:Inc/utils.hpp ****     return fmodf_pos(x + pm_range, 2.0f * pm_range) - pm_range;
 6759              		.loc 16 100 21 view .LVU1917
 6760              	.LBB2808:
ARM GAS  /tmp/ccvzGucR.s 			page 297


 101:Inc/utils.hpp **** }
 6761              		.loc 16 101 5 view .LVU1918
 6762              	.LBB2809:
 6763              	.LBI2809:
  88:Inc/utils.hpp ****     float out = fmodf(x, y);
 6764              		.loc 16 88 21 view .LVU1919
 6765              	.LBB2810:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6766              		.loc 16 89 5 view .LVU1920
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6767              		.loc 16 89 22 is_stmt 0 view .LVU1921
 6768 010a 9FED4D8A 		vldr.32	s16, .L306+16
 6769              	.LVL378:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6770              		.loc 16 89 22 view .LVU1922
 6771              	.LBE2810:
 6772              	.LBE2809:
 101:Inc/utils.hpp **** }
 6773              		.loc 16 101 21 view .LVU1923
 6774 010e DFED4D7A 		vldr.32	s15, .L306+20
 6775 0112 94EDB00A 		vldr.32	s0, [r4, #704]
 101:Inc/utils.hpp **** }
 6776              		.loc 16 101 55 view .LVU1924
 6777 0116 9FED4B9A 		vldr.32	s18, .L306+20
 6778              	.LVL379:
 6779              	.LBB2812:
 6780              	.LBB2811:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6781              		.loc 16 89 22 view .LVU1925
 6782 011a F0EE480A 		vmov.f32	s1, s16
 6783 011e 30EE270A 		vadd.f32	s0, s0, s15
 6784              	.LVL380:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6785              		.loc 16 89 22 view .LVU1926
 6786 0122 FFF7FEFF 		bl	fmodf
 6787              	.LVL381:
  90:Inc/utils.hpp ****         out += y;
 6788              		.loc 16 90 5 is_stmt 1 view .LVU1927
 6789 0126 B5EEC00A 		vcmpe.f32	s0, #0
 6790 012a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  91:Inc/utils.hpp ****     return out;
 6791              		.loc 16 91 9 view .LVU1928
  91:Inc/utils.hpp ****     return out;
 6792              		.loc 16 91 13 is_stmt 0 view .LVU1929
 6793 012e 48BF     		it	mi
 6794 0130 30EE080A 		vaddmi.f32	s0, s0, s16
 6795              	.LVL382:
  92:Inc/utils.hpp **** }
 6796              		.loc 16 92 5 is_stmt 1 view .LVU1930
  92:Inc/utils.hpp **** }
 6797              		.loc 16 92 5 is_stmt 0 view .LVU1931
 6798              	.LBE2811:
 6799              	.LBE2812:
 6800              	.LBE2808:
 6801              	.LBE2807:
 6802              	.LBE2815:
 685:Src/motor.cpp ****     
ARM GAS  /tmp/ccvzGucR.s 			page 298


 6803              		.loc 1 685 53 view .LVU1932
 6804 0134 D4ED117A 		vldr.32	s15, [r4, #68]
 6805 0138 94ED108A 		vldr.32	s16, [r4, #64]
 684:Src/motor.cpp ****     float Ibeta = one_by_sqrt3 * (current_meas_.phB - current_meas_.phC);
 6806              		.loc 1 684 11 view .LVU1933
 6807 013c D4ED0F9A 		vldr.32	s19, [r4, #60]
 6808              	.LVL383:
 6809              	.LBB2816:
 6810              	.LBB2814:
 6811              	.LBB2813:
 101:Inc/utils.hpp **** }
 6812              		.loc 16 101 55 view .LVU1934
 6813 0140 30EE490A 		vsub.f32	s0, s0, s18
 6814              	.LVL384:
 101:Inc/utils.hpp **** }
 6815              		.loc 16 101 55 view .LVU1935
 6816              	.LBE2813:
 6817              	.LBE2814:
 6818              	.LBE2816:
 685:Src/motor.cpp ****     
 6819              		.loc 1 685 53 view .LVU1936
 6820 0144 38EE678A 		vsub.f32	s16, s16, s15
 685:Src/motor.cpp ****     
 6821              		.loc 1 685 11 view .LVU1937
 6822 0148 DFED3F7A 		vldr.32	s15, .L306+24
 682:Src/motor.cpp **** 
 6823              		.loc 1 682 14 view .LVU1938
 6824 014c 84EDB00A 		vstr.32	s0, [r4, #704]
 684:Src/motor.cpp ****     float Ibeta = one_by_sqrt3 * (current_meas_.phB - current_meas_.phC);
 6825              		.loc 1 684 5 is_stmt 1 view .LVU1939
 6826              	.LVL385:
 685:Src/motor.cpp ****     
 6827              		.loc 1 685 5 view .LVU1940
 685:Src/motor.cpp ****     
 6828              		.loc 1 685 11 is_stmt 0 view .LVU1941
 6829 0150 28EE278A 		vmul.f32	s16, s16, s15
 6830              	.LVL386:
 688:Src/motor.cpp ****     float s_I = our_arm_sin_f32(I_phase_);
 6831              		.loc 1 688 5 is_stmt 1 view .LVU1942
 688:Src/motor.cpp ****     float s_I = our_arm_sin_f32(I_phase_);
 6832              		.loc 1 688 32 is_stmt 0 view .LVU1943
 6833 0154 FFF7FEFF 		bl	our_arm_cos_f32
 6834              	.LVL387:
 6835 0158 F0EE408A 		vmov.f32	s17, s0
 6836              	.LVL388:
 689:Src/motor.cpp ****     float Id = c_I * Ialpha + s_I * Ibeta;
 6837              		.loc 1 689 32 view .LVU1944
 6838 015c 94EDB00A 		vldr.32	s0, [r4, #704]
 6839              	.LVL389:
 689:Src/motor.cpp ****     float Id = c_I * Ialpha + s_I * Ibeta;
 6840              		.loc 1 689 5 is_stmt 1 view .LVU1945
 689:Src/motor.cpp ****     float Id = c_I * Ialpha + s_I * Ibeta;
 6841              		.loc 1 689 32 is_stmt 0 view .LVU1946
 6842 0160 FFF7FEFF 		bl	our_arm_sin_f32
 6843              	.LVL390:
 690:Src/motor.cpp ****     float Iq = c_I * Ibeta - s_I * Ialpha;
 6844              		.loc 1 690 35 view .LVU1947
ARM GAS  /tmp/ccvzGucR.s 			page 299


 6845 0164 68EE006A 		vmul.f32	s13, s16, s0
 691:Src/motor.cpp **** 
 6846              		.loc 1 691 11 view .LVU1948
 6847 0168 60EE697A 		vnmul.f32	s15, s0, s19
 690:Src/motor.cpp ****     float Iq = c_I * Ibeta - s_I * Ialpha;
 6848              		.loc 1 690 11 view .LVU1949
 6849 016c E9EEA86A 		vfma.f32	s13, s19, s17
 691:Src/motor.cpp **** 
 6850              		.loc 1 691 11 view .LVU1950
 6851 0170 E8EE287A 		vfma.f32	s15, s16, s17
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 6852              		.loc 1 693 16 view .LVU1951
 6853 0174 94ED2F7A 		vldr.32	s14, [r4, #188]
 6854              	.LVL391:
 690:Src/motor.cpp ****     float Iq = c_I * Ibeta - s_I * Ialpha;
 6855              		.loc 1 690 5 is_stmt 1 view .LVU1952
 691:Src/motor.cpp **** 
 6856              		.loc 1 691 5 view .LVU1953
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 6857              		.loc 1 693 5 view .LVU1954
 694:Src/motor.cpp **** 
 6858              		.loc 1 694 16 is_stmt 0 view .LVU1955
 6859 0178 D4ED300A 		vldr.32	s1, [r4, #192]
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 6860              		.loc 1 693 19 view .LVU1956
 6861 017c 94ED326A 		vldr.32	s12, [r4, #200]
 6862              	.LBB2817:
 6863              	.LBB2818:
 6864              	.LBB2819:
 6865              	.LBB2820:
 6866              	.LBB2821:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6867              		.loc 16 89 22 view .LVU1957
 6868 0180 9FED2F8A 		vldr.32	s16, .L306+16
 6869              	.LVL392:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6870              		.loc 16 89 22 view .LVU1958
 6871              	.LBE2821:
 6872              	.LBE2820:
 6873              	.LBE2819:
 6874              	.LBE2818:
 6875              	.LBE2817:
 694:Src/motor.cpp **** 
 6876              		.loc 1 694 40 view .LVU1959
 6877 0184 76EEE06A 		vsub.f32	s13, s13, s1
 6878              	.LVL393:
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 6879              		.loc 1 693 40 view .LVU1960
 6880 0188 77EEC77A 		vsub.f32	s15, s15, s14
 6881              	.LVL394:
 694:Src/motor.cpp **** 
 6882              		.loc 1 694 16 view .LVU1961
 6883 018c E6EE260A 		vfma.f32	s1, s12, s13
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 6884              		.loc 1 693 16 view .LVU1962
 6885 0190 A6EE277A 		vfma.f32	s14, s12, s15
 694:Src/motor.cpp **** 
ARM GAS  /tmp/ccvzGucR.s 			page 300


 6886              		.loc 1 694 16 view .LVU1963
 6887 0194 C4ED300A 		vstr.32	s1, [r4, #192]
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 6888              		.loc 1 693 16 view .LVU1964
 6889 0198 B0EE470A 		vmov.f32	s0, s14
 6890              	.LVL395:
 693:Src/motor.cpp ****     Id_filter2 += Idq_filter_k2_ * (Id - Id_filter2);
 6891              		.loc 1 693 16 view .LVU1965
 6892 019c 84ED2F7A 		vstr.32	s14, [r4, #188]
 694:Src/motor.cpp **** 
 6893              		.loc 1 694 5 is_stmt 1 view .LVU1966
 696:Src/motor.cpp ****     total_phase_for_abc_sign_calculation_  = I_phase_ + offset_phase + M_PI;
 6894              		.loc 1 696 5 view .LVU1967
 696:Src/motor.cpp ****     total_phase_for_abc_sign_calculation_  = I_phase_ + offset_phase + M_PI;
 6895              		.loc 1 696 36 is_stmt 0 view .LVU1968
 6896 01a0 FFF7FEFF 		bl	fast_atan2
 6897              	.LVL396:
 697:Src/motor.cpp ****     
 6898              		.loc 1 697 5 is_stmt 1 view .LVU1969
 697:Src/motor.cpp ****     
 6899              		.loc 1 697 55 is_stmt 0 view .LVU1970
 6900 01a4 D4EDB07A 		vldr.32	s15, [r4, #704]
 6901 01a8 30EE270A 		vadd.f32	s0, s0, s15
 6902              	.LVL397:
 6903              	.LBB2840:
 6904              	.LBB2835:
 6905              	.LBB2830:
 6906              	.LBB2826:
 6907              	.LBB2822:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6908              		.loc 16 89 22 view .LVU1971
 6909 01ac F0EE480A 		vmov.f32	s1, s16
 6910              	.LBE2822:
 6911              	.LBE2826:
 6912              	.LBE2830:
 6913              	.LBE2835:
 6914              	.LBE2840:
 697:Src/motor.cpp ****     
 6915              		.loc 1 697 70 view .LVU1972
 6916 01b0 70EE097A 		vadd.f32	s15, s0, s18
 6917              	.LBB2841:
 6918              	.LBB2836:
 6919              	.LBB2831:
 6920              	.LBB2827:
 6921              	.LBB2823:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6922              		.loc 16 89 22 view .LVU1973
 6923 01b4 37EE890A 		vadd.f32	s0, s15, s18
 6924              	.LBE2823:
 6925              	.LBE2827:
 6926              	.LBE2831:
 6927              	.LBE2836:
 6928              	.LBE2841:
 697:Src/motor.cpp ****     
 6929              		.loc 1 697 44 view .LVU1974
 6930 01b8 C4EDAF7A 		vstr.32	s15, [r4, #700]
 699:Src/motor.cpp ****     total_phase_for_abc_sign_calculation_ += M_PI;
ARM GAS  /tmp/ccvzGucR.s 			page 301


 6931              		.loc 1 699 5 is_stmt 1 view .LVU1975
 6932              	.LVL398:
 6933              	.LBB2842:
 6934              	.LBI2817:
 104:Inc/utils.hpp ****     return wrap_pm(theta, M_PI);
 6935              		.loc 16 104 21 view .LVU1976
 6936              	.LBE2842:
 6937              	.LBE2846:
 6938              	.LBE2851:
 6939              	.LBE2857:
 6940              	.LBE2865:
 6941              	.LBE2872:
 6942              	.LBE2879:
 105:Inc/utils.hpp **** }
 6943              		.loc 16 105 5 view .LVU1977
 6944              	.LBB2880:
 6945              	.LBB2873:
 6946              	.LBB2866:
 6947              	.LBB2858:
 6948              	.LBB2852:
 6949              	.LBB2847:
 6950              	.LBB2843:
 6951              	.LBB2837:
 6952              	.LBI2818:
 100:Inc/utils.hpp ****     return fmodf_pos(x + pm_range, 2.0f * pm_range) - pm_range;
 6953              		.loc 16 100 21 view .LVU1978
 6954              	.LBB2832:
 101:Inc/utils.hpp **** }
 6955              		.loc 16 101 5 view .LVU1979
 6956              	.LBB2828:
 6957              	.LBI2820:
  88:Inc/utils.hpp ****     float out = fmodf(x, y);
 6958              		.loc 16 88 21 view .LVU1980
 6959              	.LBB2824:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6960              		.loc 16 89 5 view .LVU1981
  89:Inc/utils.hpp ****     if (out < 0.0f)
 6961              		.loc 16 89 22 is_stmt 0 view .LVU1982
 6962 01bc FFF7FEFF 		bl	fmodf
 6963              	.LVL399:
  90:Inc/utils.hpp ****         out += y;
 6964              		.loc 16 90 5 is_stmt 1 view .LVU1983
 6965 01c0 B5EEC00A 		vcmpe.f32	s0, #0
 6966 01c4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  91:Inc/utils.hpp ****     return out;
 6967              		.loc 16 91 9 view .LVU1984
 6968              	.LBE2824:
 6969              	.LBE2828:
 101:Inc/utils.hpp **** }
 6970              		.loc 16 101 55 is_stmt 0 view .LVU1985
 6971 01c8 DFED1E7A 		vldr.32	s15, .L306+20
 6972              	.LBE2832:
 6973              	.LBE2837:
 6974              	.LBE2843:
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 6975              		.loc 1 705 76 view .LVU1986
 6976 01cc 9FED1F7A 		vldr.32	s14, .L306+28
ARM GAS  /tmp/ccvzGucR.s 			page 302


 6977              	.LBB2844:
 6978              	.LBB2838:
 6979              	.LBB2833:
 6980              	.LBB2829:
 6981              	.LBB2825:
  91:Inc/utils.hpp ****     return out;
 6982              		.loc 16 91 13 view .LVU1987
 6983 01d0 48BF     		it	mi
 6984 01d2 30EE080A 		vaddmi.f32	s0, s0, s16
 6985              	.LVL400:
  92:Inc/utils.hpp **** }
 6986              		.loc 16 92 5 is_stmt 1 view .LVU1988
  92:Inc/utils.hpp **** }
 6987              		.loc 16 92 5 is_stmt 0 view .LVU1989
 6988              	.LBE2825:
 6989              	.LBE2829:
 6990              	.LBE2833:
 6991              	.LBE2838:
 6992              	.LBE2844:
 700:Src/motor.cpp **** 
 6993              		.loc 1 700 5 is_stmt 1 view .LVU1990
 702:Src/motor.cpp ****     
 6994              		.loc 1 702 25 is_stmt 0 view .LVU1991
 6995 01d6 04F52E73 		add	r3, r4, #696
 6996              	.LBB2845:
 6997              	.LBB2839:
 6998              	.LBB2834:
 101:Inc/utils.hpp **** }
 6999              		.loc 16 101 55 view .LVU1992
 7000 01da 30EE670A 		vsub.f32	s0, s0, s15
 7001              	.LBE2834:
 7002              	.LBE2839:
 7003              	.LBE2845:
 702:Src/motor.cpp ****     
 7004              		.loc 1 702 25 view .LVU1993
 7005 01de 04F52D72 		add	r2, r4, #692
 700:Src/motor.cpp **** 
 7006              		.loc 1 700 43 view .LVU1994
 7007 01e2 30EE270A 		vadd.f32	s0, s0, s15
 702:Src/motor.cpp ****     
 7008              		.loc 1 702 25 view .LVU1995
 7009 01e6 04F52C71 		add	r1, r4, #688
 7010 01ea 2046     		mov	r0, r4
 700:Src/motor.cpp **** 
 7011              		.loc 1 700 43 view .LVU1996
 7012 01ec 84EDAF0A 		vstr.32	s0, [r4, #700]
 702:Src/motor.cpp ****     
 7013              		.loc 1 702 5 is_stmt 1 view .LVU1997
 702:Src/motor.cpp ****     
 7014              		.loc 1 702 25 is_stmt 0 view .LVU1998
 7015 01f0 FFF7FEFF 		bl	_ZN5Motor20abc_sign_calculationEfPlS0_S0_
 7016              	.LVL401:
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 7017              		.loc 1 705 6 is_stmt 1 view .LVU1999
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 7018              		.loc 1 705 76 is_stmt 0 view .LVU2000
 7019 01f4 D4EDB27A 		vldr.32	s15, [r4, #712]
ARM GAS  /tmp/ccvzGucR.s 			page 303


 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 7020              		.loc 1 705 36 view .LVU2001
 7021 01f8 D4F8B012 		ldr	r1, [r4, #688]
 706:Src/motor.cpp ****      Cphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 7022              		.loc 1 706 36 view .LVU2002
 7023 01fc D4F8B422 		ldr	r2, [r4, #692]
 707:Src/motor.cpp **** }
 7024              		.loc 1 707 36 view .LVU2003
 7025 0200 D4F8B832 		ldr	r3, [r4, #696]
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 7026              		.loc 1 705 76 view .LVU2004
 7027 0204 67EE877A 		vmul.f32	s15, s15, s14
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 7028              		.loc 1 705 39 view .LVU2005
 7029 0208 FDEEE77A 		vcvt.s32.f32	s15, s15
 7030 020c 17EE900A 		vmov	r0, s15	@ int
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 7031              		.loc 1 705 36 view .LVU2006
 7032 0210 11FB00F1 		smulbb	r1, r1, r0
 706:Src/motor.cpp ****      Cphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 7033              		.loc 1 706 36 view .LVU2007
 7034 0214 12FB00F2 		smulbb	r2, r2, r0
 707:Src/motor.cpp **** }
 7035              		.loc 1 707 36 view .LVU2008
 7036 0218 13FB00F3 		smulbb	r3, r3, r0
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 7037              		.loc 1 705 36 view .LVU2009
 7038 021c 89B2     		uxth	r1, r1
 706:Src/motor.cpp ****      Cphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 7039              		.loc 1 706 36 view .LVU2010
 7040 021e 92B2     		uxth	r2, r2
 707:Src/motor.cpp **** }
 7041              		.loc 1 707 36 view .LVU2011
 7042 0220 9BB2     		uxth	r3, r3
 705:Src/motor.cpp ****      Bphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 7043              		.loc 1 705 36 view .LVU2012
 7044 0222 A4F8CC12 		strh	r1, [r4, #716]	@ movhi
 706:Src/motor.cpp ****      Cphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 7045              		.loc 1 706 6 is_stmt 1 view .LVU2013
 706:Src/motor.cpp ****      Cphase_deadtime_compensation_ = ((int16_t)(deadtime_compensation_coff_ * TIM_1_8_DEADTIME_CLOC
 7046              		.loc 1 706 36 is_stmt 0 view .LVU2014
 7047 0226 A4F8CE22 		strh	r2, [r4, #718]	@ movhi
 707:Src/motor.cpp **** }
 7048              		.loc 1 707 6 is_stmt 1 view .LVU2015
 707:Src/motor.cpp **** }
 7049              		.loc 1 707 36 is_stmt 0 view .LVU2016
 7050 022a A4F8D032 		strh	r3, [r4, #720]	@ movhi
 7051              	.LBE2847:
 7052 022e 2EE7     		b	.L298
 7053              	.L307:
 7054              		.align	2
 7055              	.L306:
 7056 0230 00000000 		.word	vbus_voltage
 7057 0234 ABAA2A3F 		.word	1059760811
 7058 0238 00000000 		.word	htim15
 7059 023c 00D08445 		.word	1166331904
 7060 0240 DB0FC940 		.word	1086918619
ARM GAS  /tmp/ccvzGucR.s 			page 304


 7061 0244 DB0F4940 		.word	1078530011
 7062 0248 3ACD133F 		.word	1058262330
 7063 024c 00002042 		.word	1109393408
 7064              	.LBE2852:
 7065              	.LBE2858:
 7066              	.LBE2866:
 7067              	.LBE2873:
 7068              	.LBE2880:
 7069              		.cfi_endproc
 7070              	.LFE5018:
 7072              		.section	.text._ZN5Motor11FOC_currentEffff,"ax",%progbits
 7073              		.align	1
 7074              		.p2align 2,,3
 7075              		.global	_ZN5Motor11FOC_currentEffff
 7076              		.syntax unified
 7077              		.thumb
 7078              		.thumb_func
 7079              		.fpu fpv4-sp-d16
 7081              	_ZN5Motor11FOC_currentEffff:
 7082              	.LVL402:
 7083              	.LFB5020:
 792:Src/motor.cpp **** 
 793:Src/motor.cpp **** 
 794:Src/motor.cpp **** bool Motor::FOC_current(float Id_des, float Iq_des, float I_phase, float pwm_phase) {
 7084              		.loc 1 794 85 is_stmt 1 view -0
 7085              		.cfi_startproc
 7086              		@ args = 0, pretend = 0, frame = 8
 7087              		@ frame_needed = 0, uses_anonymous_args = 0
 795:Src/motor.cpp ****     // Syntactic sugar
 796:Src/motor.cpp ****     FieldOrientedController& ictrl = current_control_;
 7088              		.loc 1 796 5 view .LVU2018
 794:Src/motor.cpp ****     // Syntactic sugar
 7089              		.loc 1 794 85 is_stmt 0 view .LVU2019
 7090 0000 10B5     		push	{r4, lr}
 7091              	.LCFI101:
 7092              		.cfi_def_cfa_offset 8
 7093              		.cfi_offset 4, -8
 7094              		.cfi_offset 14, -4
 7095 0002 2DED0A8B 		vpush.64	{d8, d9, d10, d11, d12}
 7096              	.LCFI102:
 7097              		.cfi_def_cfa_offset 48
 7098              		.cfi_offset 80, -48
 7099              		.cfi_offset 81, -44
 7100              		.cfi_offset 82, -40
 7101              		.cfi_offset 83, -36
 7102              		.cfi_offset 84, -32
 7103              		.cfi_offset 85, -28
 7104              		.cfi_offset 86, -24
 7105              		.cfi_offset 87, -20
 7106              		.cfi_offset 88, -16
 7107              		.cfi_offset 89, -12
 7108              	.LBB2881:
 7109              	.LBB2882:
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 7110              		.loc 2 791 4 view .LVU2020
 7111 0006 90F85033 		ldrb	r3, [r0, #848]	@ zero_extendqisi2
 7112              	.LBE2882:
ARM GAS  /tmp/ccvzGucR.s 			page 305


 7113              	.LBE2881:
 794:Src/motor.cpp ****     // Syntactic sugar
 7114              		.loc 1 794 85 view .LVU2021
 7115 000a 82B0     		sub	sp, sp, #8
 7116              	.LCFI103:
 7117              		.cfi_def_cfa_offset 56
 794:Src/motor.cpp ****     // Syntactic sugar
 7118              		.loc 1 794 85 view .LVU2022
 7119 000c 0446     		mov	r4, r0
 7120              	.LVL403:
 797:Src/motor.cpp **** 
 798:Src/motor.cpp ****     // For Reporting
 799:Src/motor.cpp ****     ictrl.Idq_setpoint_ = {Id_des,Iq_des};
 7121              		.loc 1 799 5 is_stmt 1 view .LVU2023
 7122              	.LBB2893:
 7123              	.LBI2893:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 7124              		.loc 5 352 12 view .LVU2024
 7125              	.LBB2894:
 7126              	.LBI2894:
 7127              		.loc 4 76 5 view .LVU2025
 7128              		.loc 4 76 5 is_stmt 0 view .LVU2026
 7129              	.LBE2894:
 7130              	.LBB2895:
 7131              	.LBI2895:
 7132              		.loc 4 76 5 is_stmt 1 view .LVU2027
 7133              		.loc 4 76 5 is_stmt 0 view .LVU2028
 7134              	.LBE2895:
 7135              	.LBE2893:
 7136              	.LBB2896:
 7137              	.LBI2881:
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 7138              		.loc 2 789 2 is_stmt 1 view .LVU2029
 7139              	.LBB2889:
 7140              	.LBB2883:
 7141              	.LBI2883:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 7142              		.loc 2 434 22 view .LVU2030
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 7143              		.loc 2 434 22 is_stmt 0 view .LVU2031
 7144              	.LBE2883:
 7145              	.LBE2889:
 7146              	.LBE2896:
 794:Src/motor.cpp ****     // Syntactic sugar
 7147              		.loc 1 794 85 view .LVU2032
 7148 000e B0EE40AA 		vmov.f32	s20, s0
 7149 0012 F0EE609A 		vmov.f32	s19, s1
 7150 0016 B0EE418A 		vmov.f32	s16, s2
 7151 001a B0EE61BA 		vmov.f32	s22, s3
 7152              	.LBB2897:
 7153              	.LBB2890:
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 7154              		.loc 2 791 4 view .LVU2033
 7155 001e 002B     		cmp	r3, #0
 7156 0020 00F00781 		beq	.L309
 7157              	.LVL404:
 7158              	.LBB2884:
ARM GAS  /tmp/ccvzGucR.s 			page 306


 7159              	.LBI2884:
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_move_assignable<_T1>,
 7160              		.loc 5 401 7 is_stmt 1 view .LVU2034
 7161              	.LBB2885:
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 7162              		.loc 5 408 8 is_stmt 0 view .LVU2035
 7163 0024 84EDD20A 		vstr.32	s0, [r4, #840]
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 7164              		.loc 5 409 9 view .LVU2036
 7165 0028 C4EDD30A 		vstr.32	s1, [r4, #844]
 7166              	.LVL405:
 7167              	.L310:
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 7168              		.loc 5 409 9 view .LVU2037
 7169              	.LBE2885:
 7170              	.LBE2884:
 7171              	.LBE2890:
 7172              	.LBE2897:
 800:Src/motor.cpp **** 
 801:Src/motor.cpp ****     // Clarke transform
 802:Src/motor.cpp ****     // float Ialpha = -current_meas_.phB - current_meas_.phC;
 803:Src/motor.cpp ****     // float Ibeta = one_by_sqrt3 * (current_meas_.phB - current_meas_.phC);
 804:Src/motor.cpp ****     float Ialpha = current_meas_.phA;
 7173              		.loc 1 804 5 is_stmt 1 view .LVU2038
 805:Src/motor.cpp ****     float Ibeta = one_by_sqrt3 * (current_meas_.phB - current_meas_.phC);
 7174              		.loc 1 805 53 is_stmt 0 view .LVU2039
 7175 002c 94ED117A 		vldr.32	s14, [r4, #68]
 7176 0030 94ED109A 		vldr.32	s18, [r4, #64]
 7177              		.loc 1 805 11 view .LVU2040
 7178 0034 DFED927A 		vldr.32	s15, .L332
 804:Src/motor.cpp ****     float Ibeta = one_by_sqrt3 * (current_meas_.phB - current_meas_.phC);
 7179              		.loc 1 804 11 view .LVU2041
 7180 0038 D4ED0FBA 		vldr.32	s23, [r4, #60]
 7181              	.LVL406:
 7182              		.loc 1 805 5 is_stmt 1 view .LVU2042
 7183              		.loc 1 805 53 is_stmt 0 view .LVU2043
 7184 003c 39EE479A 		vsub.f32	s18, s18, s14
 806:Src/motor.cpp ****   //  float Ibeta = one_by_sqrt3 * (-current_meas_.phA - current_meas_.phC  - current_meas_.phC);
 807:Src/motor.cpp **** 
 808:Src/motor.cpp ****     // Park transform
 809:Src/motor.cpp ****     float c_I = our_arm_cos_f32(I_phase);
 7185              		.loc 1 809 32 view .LVU2044
 7186 0040 B0EE480A 		vmov.f32	s0, s16
 7187              	.LVL407:
 805:Src/motor.cpp ****   //  float Ibeta = one_by_sqrt3 * (-current_meas_.phA - current_meas_.phC  - current_meas_.phC);
 7188              		.loc 1 805 11 view .LVU2045
 7189 0044 29EE279A 		vmul.f32	s18, s18, s15
 7190              	.LVL408:
 7191              		.loc 1 809 5 is_stmt 1 view .LVU2046
 7192              		.loc 1 809 32 is_stmt 0 view .LVU2047
 7193 0048 FFF7FEFF 		bl	our_arm_cos_f32
 7194              	.LVL409:
 7195              		.loc 1 809 32 view .LVU2048
 7196 004c F0EE40AA 		vmov.f32	s21, s0
 810:Src/motor.cpp ****     float s_I = our_arm_sin_f32(I_phase);
 7197              		.loc 1 810 32 view .LVU2049
 7198 0050 B0EE480A 		vmov.f32	s0, s16
ARM GAS  /tmp/ccvzGucR.s 			page 307


 7199              	.LVL410:
 7200              		.loc 1 810 5 is_stmt 1 view .LVU2050
 7201              		.loc 1 810 32 is_stmt 0 view .LVU2051
 7202 0054 FFF7FEFF 		bl	our_arm_sin_f32
 7203              	.LVL411:
 811:Src/motor.cpp ****     float Id = c_I * Ialpha + s_I * Ibeta;
 812:Src/motor.cpp ****     float Iq = c_I * Ibeta - s_I * Ialpha;
 813:Src/motor.cpp ****     ictrl.Iq_measured_ += ictrl.I_measured_report_filter_k_ * (Iq - ictrl.Iq_measured_);
 814:Src/motor.cpp ****     ictrl.Id_measured_ += ictrl.I_measured_report_filter_k_ * (Id - ictrl.Id_measured_);
 815:Src/motor.cpp **** 
 816:Src/motor.cpp ****     Iq_filter += Idq_filter_k_ * (Iq - Iq_filter);
 817:Src/motor.cpp ****     Id_filter += Idq_filter_k_ * (Id - Id_filter);
 818:Src/motor.cpp ****     
 819:Src/motor.cpp ****     float dec_vd=0, dec_vq=0,pm_flux_linkage=0;
 820:Src/motor.cpp ****     pm_flux_linkage =  0.444444f*config_.torque_constant/ (config_.pole_pairs);
 7204              		.loc 1 820 34 view .LVU2052
 7205 0058 6368     		ldr	r3, [r4, #4]
 7206              		.loc 1 820 33 view .LVU2053
 7207 005a DFED8A7A 		vldr.32	s15, .L332+4
 7208 005e 93ED087A 		vldr.32	s14, [r3, #32]
 813:Src/motor.cpp ****     ictrl.Id_measured_ += ictrl.I_measured_report_filter_k_ * (Id - ictrl.Id_measured_);
 7209              		.loc 1 813 24 view .LVU2054
 7210 0062 D4EDE36A 		vldr.32	s13, [r4, #908]
 816:Src/motor.cpp ****     Id_filter += Idq_filter_k_ * (Id - Id_filter);
 7211              		.loc 1 816 15 view .LVU2055
 7212 0066 94ED2D5A 		vldr.32	s10, [r4, #180]
 813:Src/motor.cpp ****     ictrl.Id_measured_ += ictrl.I_measured_report_filter_k_ * (Id - ictrl.Id_measured_);
 7213              		.loc 1 813 33 view .LVU2056
 7214 006a D4EDC44A 		vldr.32	s9, [r4, #784]
 816:Src/motor.cpp ****     Id_filter += Idq_filter_k_ * (Id - Id_filter);
 7215              		.loc 1 816 18 view .LVU2057
 7216 006e D4ED315A 		vldr.32	s11, [r4, #196]
 821:Src/motor.cpp ****     dec_vd = Iq_filter * m_speed_est_fast * config_.phase_inductance;
 7217              		.loc 1 821 53 view .LVU2058
 7218 0072 D3ED06CA 		vldr.32	s25, [r3, #24]
 820:Src/motor.cpp ****     dec_vd = Iq_filter * m_speed_est_fast * config_.phase_inductance;
 7219              		.loc 1 820 33 view .LVU2059
 7220 0076 27EE277A 		vmul.f32	s14, s14, s15
 820:Src/motor.cpp ****     dec_vd = Iq_filter * m_speed_est_fast * config_.phase_inductance;
 7221              		.loc 1 820 57 view .LVU2060
 7222 007a D3ED017A 		vldr.32	s15, [r3, #4]	@ int
 7223 007e F8EEE77A 		vcvt.f32.s32	s15, s15
 7224              	.LVL412:
 811:Src/motor.cpp ****     float Iq = c_I * Ibeta - s_I * Ialpha;
 7225              		.loc 1 811 5 is_stmt 1 view .LVU2061
 811:Src/motor.cpp ****     float Iq = c_I * Ibeta - s_I * Ialpha;
 7226              		.loc 1 811 35 is_stmt 0 view .LVU2062
 7227 0082 69EE008A 		vmul.f32	s17, s18, s0
 820:Src/motor.cpp ****     dec_vd = Iq_filter * m_speed_est_fast * config_.phase_inductance;
 7228              		.loc 1 820 21 view .LVU2063
 7229 0086 87EE276A 		vdiv.f32	s12, s14, s15
 822:Src/motor.cpp ****     dec_vq = Id_filter * m_speed_est_fast * config_.phase_inductance;
 823:Src/motor.cpp ****     dec_bemf_ = m_speed_est_fast * pm_flux_linkage;
 824:Src/motor.cpp **** 
 825:Src/motor.cpp ****     // Check for violation of current limit
 826:Src/motor.cpp ****     float I_trip = effective_current_lim() + config_.current_lim_margin;
 7230              		.loc 1 826 41 view .LVU2064
ARM GAS  /tmp/ccvzGucR.s 			page 308


 7231 008a 2046     		mov	r0, r4
 812:Src/motor.cpp ****     ictrl.Iq_measured_ += ictrl.I_measured_report_filter_k_ * (Iq - ictrl.Iq_measured_);
 7232              		.loc 1 812 11 view .LVU2065
 7233 008c 20EE6B8A 		vnmul.f32	s16, s0, s23
 7234              	.LVL413:
 811:Src/motor.cpp ****     float Iq = c_I * Ibeta - s_I * Ialpha;
 7235              		.loc 1 811 11 view .LVU2066
 7236 0090 EBEEAA8A 		vfma.f32	s17, s23, s21
 7237              	.LVL414:
 812:Src/motor.cpp ****     ictrl.Iq_measured_ += ictrl.I_measured_report_filter_k_ * (Iq - ictrl.Iq_measured_);
 7238              		.loc 1 812 5 is_stmt 1 view .LVU2067
 812:Src/motor.cpp ****     ictrl.Iq_measured_ += ictrl.I_measured_report_filter_k_ * (Iq - ictrl.Iq_measured_);
 7239              		.loc 1 812 11 is_stmt 0 view .LVU2068
 7240 0094 A9EE2A8A 		vfma.f32	s16, s18, s21
 7241              	.LVL415:
 813:Src/motor.cpp ****     ictrl.Id_measured_ += ictrl.I_measured_report_filter_k_ * (Id - ictrl.Id_measured_);
 7242              		.loc 1 813 5 is_stmt 1 view .LVU2069
 814:Src/motor.cpp **** 
 7243              		.loc 1 814 24 is_stmt 0 view .LVU2070
 7244 0098 94EDE27A 		vldr.32	s14, [r4, #904]
 817:Src/motor.cpp ****     
 7245              		.loc 1 817 15 view .LVU2071
 7246 009c D4ED2E7A 		vldr.32	s15, [r4, #184]
 821:Src/motor.cpp ****     dec_vq = Id_filter * m_speed_est_fast * config_.phase_inductance;
 7247              		.loc 1 821 26 view .LVU2072
 7248 00a0 D4ED2CBA 		vldr.32	s23, [r4, #176]
 7249              	.LVL416:
 813:Src/motor.cpp ****     ictrl.Id_measured_ += ictrl.I_measured_report_filter_k_ * (Id - ictrl.Id_measured_);
 7250              		.loc 1 813 67 view .LVU2073
 7251 00a4 78EE662A 		vsub.f32	s5, s16, s13
 814:Src/motor.cpp **** 
 7252              		.loc 1 814 67 view .LVU2074
 7253 00a8 38EEC73A 		vsub.f32	s6, s17, s14
 816:Src/motor.cpp ****     Id_filter += Idq_filter_k_ * (Id - Id_filter);
 7254              		.loc 1 816 38 view .LVU2075
 7255 00ac 78EE453A 		vsub.f32	s7, s16, s10
 817:Src/motor.cpp ****     
 7256              		.loc 1 817 38 view .LVU2076
 7257 00b0 38EEE74A 		vsub.f32	s8, s17, s15
 813:Src/motor.cpp ****     ictrl.Id_measured_ += ictrl.I_measured_report_filter_k_ * (Id - ictrl.Id_measured_);
 7258              		.loc 1 813 24 view .LVU2077
 7259 00b4 E4EEA26A 		vfma.f32	s13, s9, s5
 817:Src/motor.cpp ****     
 7260              		.loc 1 817 15 view .LVU2078
 7261 00b8 E5EE847A 		vfma.f32	s15, s11, s8
 814:Src/motor.cpp **** 
 7262              		.loc 1 814 24 view .LVU2079
 7263 00bc A4EE837A 		vfma.f32	s14, s9, s6
 816:Src/motor.cpp ****     Id_filter += Idq_filter_k_ * (Id - Id_filter);
 7264              		.loc 1 816 15 view .LVU2080
 7265 00c0 A5EEA35A 		vfma.f32	s10, s11, s7
 823:Src/motor.cpp **** 
 7266              		.loc 1 823 34 view .LVU2081
 7267 00c4 26EE2B6A 		vmul.f32	s12, s12, s23
 813:Src/motor.cpp ****     ictrl.Id_measured_ += ictrl.I_measured_report_filter_k_ * (Id - ictrl.Id_measured_);
 7268              		.loc 1 813 24 view .LVU2082
 7269 00c8 C4EDE36A 		vstr.32	s13, [r4, #908]
ARM GAS  /tmp/ccvzGucR.s 			page 309


 814:Src/motor.cpp **** 
 7270              		.loc 1 814 5 is_stmt 1 view .LVU2083
 814:Src/motor.cpp **** 
 7271              		.loc 1 814 24 is_stmt 0 view .LVU2084
 7272 00cc 84EDE27A 		vstr.32	s14, [r4, #904]
 816:Src/motor.cpp ****     Id_filter += Idq_filter_k_ * (Id - Id_filter);
 7273              		.loc 1 816 5 is_stmt 1 view .LVU2085
 817:Src/motor.cpp ****     
 7274              		.loc 1 817 15 is_stmt 0 view .LVU2086
 7275 00d0 C4ED2E7A 		vstr.32	s15, [r4, #184]
 816:Src/motor.cpp ****     Id_filter += Idq_filter_k_ * (Id - Id_filter);
 7276              		.loc 1 816 15 view .LVU2087
 7277 00d4 84ED2D5A 		vstr.32	s10, [r4, #180]
 817:Src/motor.cpp ****     
 7278              		.loc 1 817 5 is_stmt 1 view .LVU2088
 819:Src/motor.cpp ****     pm_flux_linkage =  0.444444f*config_.torque_constant/ (config_.pole_pairs);
 7279              		.loc 1 819 5 view .LVU2089
 7280              	.LVL417:
 820:Src/motor.cpp ****     dec_vd = Iq_filter * m_speed_est_fast * config_.phase_inductance;
 7281              		.loc 1 820 5 view .LVU2090
 821:Src/motor.cpp ****     dec_vq = Id_filter * m_speed_est_fast * config_.phase_inductance;
 7282              		.loc 1 821 5 view .LVU2091
 823:Src/motor.cpp **** 
 7283              		.loc 1 823 15 is_stmt 0 view .LVU2092
 7284 00d8 84EDBB6A 		vstr.32	s12, [r4, #748]
 817:Src/motor.cpp ****     
 7285              		.loc 1 817 15 view .LVU2093
 7286 00dc B0EE679A 		vmov.f32	s18, s15
 7287              	.LVL418:
 816:Src/motor.cpp ****     Id_filter += Idq_filter_k_ * (Id - Id_filter);
 7288              		.loc 1 816 15 view .LVU2094
 7289 00e0 B0EE45CA 		vmov.f32	s24, s10
 7290              	.LVL419:
 822:Src/motor.cpp ****     dec_bemf_ = m_speed_est_fast * pm_flux_linkage;
 7291              		.loc 1 822 5 is_stmt 1 view .LVU2095
 823:Src/motor.cpp **** 
 7292              		.loc 1 823 5 view .LVU2096
 7293              		.loc 1 826 5 view .LVU2097
 7294              		.loc 1 826 41 is_stmt 0 view .LVU2098
 7295 00e4 FFF7FEFF 		bl	_ZN5Motor21effective_current_limEv
 7296              	.LVL420:
 7297              		.loc 1 826 54 view .LVU2099
 7298 00e8 6368     		ldr	r3, [r4, #4]
 827:Src/motor.cpp ****     if (SQ(Id) + SQ(Iq) > SQ(I_trip)) {
 7299              		.loc 1 827 18 view .LVU2100
 7300 00ea 28EE087A 		vmul.f32	s14, s16, s16
 826:Src/motor.cpp ****     if (SQ(Id) + SQ(Iq) > SQ(I_trip)) {
 7301              		.loc 1 826 54 view .LVU2101
 7302 00ee D3ED0C6A 		vldr.32	s13, [r3, #48]
 7303              		.loc 1 827 16 view .LVU2102
 7304 00f2 A8EEA87A 		vfma.f32	s14, s17, s17
 826:Src/motor.cpp ****     if (SQ(Id) + SQ(Iq) > SQ(I_trip)) {
 7305              		.loc 1 826 54 view .LVU2103
 7306 00f6 70EE267A 		vadd.f32	s15, s0, s13
 7307              	.LVL421:
 7308              		.loc 1 827 5 is_stmt 1 view .LVU2104
 7309              		.loc 1 827 27 is_stmt 0 view .LVU2105
ARM GAS  /tmp/ccvzGucR.s 			page 310


 7310 00fa 67EEA77A 		vmul.f32	s15, s15, s15
 7311              	.LVL422:
 7312              		.loc 1 827 5 view .LVU2106
 7313 00fe B4EEE77A 		vcmpe.f32	s14, s15
 7314 0102 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 7315 0106 00F39C80 		bgt	.L330
 828:Src/motor.cpp ****         set_error(ODriveIntf::MotorIntf::ERROR_CURRENT_LIMIT_VIOLATION);
 829:Src/motor.cpp ****         return false;
 830:Src/motor.cpp ****     }
 831:Src/motor.cpp **** 
 832:Src/motor.cpp ****     auto [p_gain, i_gain] = *(ictrl.pi_gains_);
 7316              		.loc 1 832 5 is_stmt 1 view .LVU2107
 833:Src/motor.cpp **** 
 834:Src/motor.cpp ****     // Current error
 835:Src/motor.cpp ****     float Ierr_d = Id_des - Id;
 836:Src/motor.cpp ****     float Ierr_q = Iq_des - Iq;
 837:Src/motor.cpp **** 
 838:Src/motor.cpp ****     // TODO look into feed forward terms (esp omega, since PI pole maps to RL tau)
 839:Src/motor.cpp ****     // Apply PI control
 840:Src/motor.cpp ****     float Vd = ictrl.v_current_control_integral_d_ + Ierr_d * p_gain;
 841:Src/motor.cpp ****     float Vq = ictrl.v_current_control_integral_q_ + Ierr_q * p_gain;
 842:Src/motor.cpp **** 
 843:Src/motor.cpp ****     Vd -=  dec_vd;
 844:Src/motor.cpp ****     Vq +=  dec_vq + dec_bemf_;  
 845:Src/motor.cpp **** 
 846:Src/motor.cpp **** 
 847:Src/motor.cpp ****     ictrl.final_v_d_ = Vd;
 848:Src/motor.cpp ****     ictrl.final_v_q_ = Vq;
 849:Src/motor.cpp **** 
 850:Src/motor.cpp ****     float mod_to_V = (2.0f / 3.0f) * vbus_voltage;
 7317              		.loc 1 850 36 is_stmt 0 view .LVU2108
 7318 010a 5F4B     		ldr	r3, .L332+8
 7319              		.loc 1 850 11 view .LVU2109
 7320 010c DFED5F7A 		vldr.32	s15, .L332+12
 7321 0110 D3ED00AA 		vldr.32	s21, [r3]
 7322              	.LVL423:
 840:Src/motor.cpp ****     float Vq = ictrl.v_current_control_integral_q_ + Ierr_q * p_gain;
 7323              		.loc 1 840 22 view .LVU2110
 7324 0114 D4EDE45A 		vldr.32	s11, [r4, #912]
 841:Src/motor.cpp **** 
 7325              		.loc 1 841 22 view .LVU2111
 7326 0118 D4EDE54A 		vldr.32	s9, [r4, #916]
 832:Src/motor.cpp **** 
 7327              		.loc 1 832 46 view .LVU2112
 7328 011c 94EDC16A 		vldr.32	s12, [r4, #772]
 7329              	.LVL424:
 7330              		.loc 1 850 11 view .LVU2113
 7331 0120 6AEEA7AA 		vmul.f32	s21, s21, s15
 851:Src/motor.cpp ****     float V_to_mod = 1.0f / mod_to_V;
 7332              		.loc 1 851 11 view .LVU2114
 7333 0124 B7EE007A 		vmov.f32	s14, #1.0e+0
 7334 0128 87EE2A4A 		vdiv.f32	s8, s14, s21
 822:Src/motor.cpp ****     dec_bemf_ = m_speed_est_fast * pm_flux_linkage;
 7335              		.loc 1 822 24 view .LVU2115
 7336 012c 69EE2B7A 		vmul.f32	s15, s18, s23
 7337              	.LVL425:
 835:Src/motor.cpp ****     float Ierr_q = Iq_des - Iq;
ARM GAS  /tmp/ccvzGucR.s 			page 311


 7338              		.loc 1 835 11 view .LVU2116
 7339 0130 3AEE68AA 		vsub.f32	s20, s20, s17
 7340              	.LVL426:
 836:Src/motor.cpp **** 
 7341              		.loc 1 836 11 view .LVU2117
 7342 0134 79EEC89A 		vsub.f32	s19, s19, s16
 7343              	.LVL427:
 844:Src/motor.cpp **** 
 7344              		.loc 1 844 19 view .LVU2118
 7345 0138 94EDBB7A 		vldr.32	s14, [r4, #748]
 840:Src/motor.cpp ****     float Vq = ictrl.v_current_control_integral_q_ + Ierr_q * p_gain;
 7346              		.loc 1 840 11 view .LVU2119
 7347 013c F0EE656A 		vmov.f32	s13, s11
 7348              	.LVL428:
 841:Src/motor.cpp **** 
 7349              		.loc 1 841 11 view .LVU2120
 7350 0140 B0EE645A 		vmov.f32	s10, s9
 840:Src/motor.cpp ****     float Vq = ictrl.v_current_control_integral_q_ + Ierr_q * p_gain;
 7351              		.loc 1 840 11 view .LVU2121
 7352 0144 E6EE0A6A 		vfma.f32	s13, s12, s20
 841:Src/motor.cpp **** 
 7353              		.loc 1 841 11 view .LVU2122
 7354 0148 A6EE295A 		vfma.f32	s10, s12, s19
 844:Src/motor.cpp **** 
 7355              		.loc 1 844 19 view .LVU2123
 7356 014c ACEEA77A 		vfma.f32	s14, s25, s15
 843:Src/motor.cpp ****     Vq +=  dec_vq + dec_bemf_;  
 7357              		.loc 1 843 8 view .LVU2124
 7358 0150 6BEECC7A 		vnmul.f32	s15, s23, s24
 7359              	.LVL429:
 832:Src/motor.cpp **** 
 7360              		.loc 1 832 46 view .LVU2125
 7361 0154 94EDC26A 		vldr.32	s12, [r4, #776]
 7362              	.LVL430:
 835:Src/motor.cpp ****     float Ierr_q = Iq_des - Iq;
 7363              		.loc 1 835 5 is_stmt 1 view .LVU2126
 836:Src/motor.cpp **** 
 7364              		.loc 1 836 5 view .LVU2127
 840:Src/motor.cpp ****     float Vq = ictrl.v_current_control_integral_q_ + Ierr_q * p_gain;
 7365              		.loc 1 840 5 view .LVU2128
 841:Src/motor.cpp **** 
 7366              		.loc 1 841 5 view .LVU2129
 843:Src/motor.cpp ****     Vq +=  dec_vq + dec_bemf_;  
 7367              		.loc 1 843 5 view .LVU2130
 843:Src/motor.cpp ****     Vq +=  dec_vq + dec_bemf_;  
 7368              		.loc 1 843 8 is_stmt 0 view .LVU2131
 7369 0158 E7EEAC6A 		vfma.f32	s13, s15, s25
 7370              	.LVL431:
 844:Src/motor.cpp **** 
 7371              		.loc 1 844 5 is_stmt 1 view .LVU2132
 844:Src/motor.cpp **** 
 7372              		.loc 1 844 8 is_stmt 0 view .LVU2133
 7373 015c 77EE057A 		vadd.f32	s15, s14, s10
 7374              	.LVL432:
 847:Src/motor.cpp ****     ictrl.final_v_q_ = Vq;
 7375              		.loc 1 847 5 is_stmt 1 view .LVU2134
 852:Src/motor.cpp ****     float mod_d = V_to_mod * Vd;
ARM GAS  /tmp/ccvzGucR.s 			page 312


 7376              		.loc 1 852 11 is_stmt 0 view .LVU2135
 7377 0160 26EE849A 		vmul.f32	s18, s13, s8
 7378              	.LVL433:
 853:Src/motor.cpp ****     float mod_q = V_to_mod * Vq;
 7379              		.loc 1 853 11 view .LVU2136
 7380 0164 67EE84BA 		vmul.f32	s23, s15, s8
 7381              	.LVL434:
 847:Src/motor.cpp ****     ictrl.final_v_q_ = Vq;
 7382              		.loc 1 847 22 view .LVU2137
 7383 0168 C4EDE86A 		vstr.32	s13, [r4, #928]
 848:Src/motor.cpp **** 
 7384              		.loc 1 848 5 is_stmt 1 view .LVU2138
 854:Src/motor.cpp **** 
 855:Src/motor.cpp ****     // Vector modulation saturation, lock integrator if saturated
 856:Src/motor.cpp ****     // TODO make maximum modulation configurable
 857:Src/motor.cpp ****     float mod_scalefactor = 0.80f * sqrt3_by_2 * 1.0f / sqrtf(mod_d * mod_d + mod_q * mod_q);
 7385              		.loc 1 857 85 is_stmt 0 view .LVU2139
 7386 016c 2BEEAB0A 		vmul.f32	s0, s23, s23
 7387              	.LVL435:
 848:Src/motor.cpp **** 
 7388              		.loc 1 848 22 view .LVU2140
 7389 0170 C4EDE97A 		vstr.32	s15, [r4, #932]
 850:Src/motor.cpp ****     float V_to_mod = 1.0f / mod_to_V;
 7390              		.loc 1 850 5 is_stmt 1 view .LVU2141
 7391              	.LVL436:
 851:Src/motor.cpp ****     float mod_d = V_to_mod * Vd;
 7392              		.loc 1 851 5 view .LVU2142
 852:Src/motor.cpp ****     float mod_q = V_to_mod * Vq;
 7393              		.loc 1 852 5 view .LVU2143
 853:Src/motor.cpp **** 
 7394              		.loc 1 853 5 view .LVU2144
 7395              		.loc 1 857 5 view .LVU2145
 7396              		.loc 1 857 62 is_stmt 0 view .LVU2146
 7397 0174 A9EE090A 		vfma.f32	s0, s18, s18
 7398 0178 B5EE400A 		vcmp.f32	s0, #0
 7399 017c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 7400 0180 71D4     		bmi	.L327
 7401 0182 B1EEC07A 		vsqrt.f32	s14, s0
 7402              	.LVL437:
 7403              	.L316:
 7404              		.loc 1 857 92 view .LVU2147
 7405 0186 9FED425A 		vldr.32	s10, .L332+16
 7406 018a C5EE077A 		vdiv.f32	s15, s10, s14
 7407              	.LVL438:
 858:Src/motor.cpp ****     if (mod_scalefactor < 1.0f) {
 7408              		.loc 1 858 5 is_stmt 1 view .LVU2148
 7409 018e F7EE006A 		vmov.f32	s13, #1.0e+0
 7410              	.LVL439:
 7411              		.loc 1 858 5 is_stmt 0 view .LVU2149
 7412 0192 F4EEE67A 		vcmpe.f32	s15, s13
 7413 0196 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 7414 019a 3FD4     		bmi	.L331
 859:Src/motor.cpp ****         mod_d *= mod_scalefactor;
 860:Src/motor.cpp ****         mod_q *= mod_scalefactor;
 861:Src/motor.cpp ****         // TODO make decayfactor configurable
 862:Src/motor.cpp ****         ictrl.v_current_control_integral_d_ *= 0.99f;
 863:Src/motor.cpp ****         ictrl.v_current_control_integral_q_ *= 0.99f;
ARM GAS  /tmp/ccvzGucR.s 			page 313


 864:Src/motor.cpp ****     } else {
 865:Src/motor.cpp ****         ictrl.v_current_control_integral_d_ += Ierr_d * (i_gain * current_meas_period);
 7415              		.loc 1 865 9 is_stmt 1 view .LVU2150
 7416              		.loc 1 865 65 is_stmt 0 view .LVU2151
 7417 019c 3D4B     		ldr	r3, .L332+20
 7418 019e D3ED007A 		vldr.32	s15, [r3]
 7419              	.LVL440:
 7420              		.loc 1 865 65 view .LVU2152
 7421 01a2 26EE276A 		vmul.f32	s12, s12, s15
 7422              		.loc 1 865 45 view .LVU2153
 7423 01a6 B0EE657A 		vmov.f32	s14, s11
 7424              	.LVL441:
 866:Src/motor.cpp ****         ictrl.v_current_control_integral_q_ += Ierr_q * (i_gain * current_meas_period);
 7425              		.loc 1 866 45 view .LVU2154
 7426 01aa F0EE646A 		vmov.f32	s13, s9
 7427              	.LVL442:
 865:Src/motor.cpp ****         ictrl.v_current_control_integral_q_ += Ierr_q * (i_gain * current_meas_period);
 7428              		.loc 1 865 45 view .LVU2155
 7429 01ae A6EE0A7A 		vfma.f32	s14, s12, s20
 7430              		.loc 1 866 9 is_stmt 1 view .LVU2156
 7431              		.loc 1 866 45 is_stmt 0 view .LVU2157
 7432 01b2 E6EE296A 		vfma.f32	s13, s12, s19
 7433              	.L319:
 867:Src/motor.cpp ****     }
 868:Src/motor.cpp **** 
 869:Src/motor.cpp ****     // Compute estimated bus current
 870:Src/motor.cpp ****     I_bus_ = mod_d * Id + mod_q * Iq;
 7434              		.loc 1 870 33 view .LVU2158
 7435 01b6 2BEE888A 		vmul.f32	s16, s23, s16
 7436              	.LVL443:
 7437              		.loc 1 870 33 view .LVU2159
 7438 01ba 84EDE47A 		vstr.32	s14, [r4, #912]
 7439              		.loc 1 870 5 is_stmt 1 view .LVU2160
 7440              		.loc 1 870 25 is_stmt 0 view .LVU2161
 7441 01be A9EE288A 		vfma.f32	s16, s18, s17
 7442 01c2 C4EDE56A 		vstr.32	s13, [r4, #916]
 7443              		.loc 1 870 12 view .LVU2162
 7444 01c6 84EDBC8A 		vstr.32	s16, [r4, #752]
 871:Src/motor.cpp **** 
 872:Src/motor.cpp ****     // Inverse park transform
 873:Src/motor.cpp ****     float c_p = our_arm_cos_f32(pwm_phase);
 7445              		.loc 1 873 5 is_stmt 1 view .LVU2163
 7446              		.loc 1 873 32 is_stmt 0 view .LVU2164
 7447 01ca B0EE4B0A 		vmov.f32	s0, s22
 7448 01ce FFF7FEFF 		bl	our_arm_cos_f32
 7449              	.LVL444:
 7450              		.loc 1 873 32 view .LVU2165
 7451 01d2 B0EE408A 		vmov.f32	s16, s0
 874:Src/motor.cpp ****     float s_p = our_arm_sin_f32(pwm_phase);
 7452              		.loc 1 874 32 view .LVU2166
 7453 01d6 B0EE4B0A 		vmov.f32	s0, s22
 7454              	.LVL445:
 7455              		.loc 1 874 5 is_stmt 1 view .LVU2167
 7456              		.loc 1 874 32 is_stmt 0 view .LVU2168
 7457 01da FFF7FEFF 		bl	our_arm_sin_f32
 7458              	.LVL446:
 875:Src/motor.cpp ****     float mod_alpha = c_p * mod_d - s_p * mod_q;
ARM GAS  /tmp/ccvzGucR.s 			page 314


 7459              		.loc 1 875 11 view .LVU2169
 7460 01de 20EE6B7A 		vnmul.f32	s14, s0, s23
 876:Src/motor.cpp ****     float mod_beta = c_p * mod_q + s_p * mod_d;
 7461              		.loc 1 876 40 view .LVU2170
 7462 01e2 69EE000A 		vmul.f32	s1, s18, s0
 875:Src/motor.cpp ****     float mod_alpha = c_p * mod_d - s_p * mod_q;
 7463              		.loc 1 875 11 view .LVU2171
 7464 01e6 A9EE087A 		vfma.f32	s14, s18, s16
 877:Src/motor.cpp **** 
 878:Src/motor.cpp ****     // Report final applied voltage in stationary frame (for sensorles estimator)
 879:Src/motor.cpp ****     ictrl.final_v_alpha_ = mod_to_V * mod_alpha;
 880:Src/motor.cpp ****     ictrl.final_v_beta_ = mod_to_V * mod_beta;
 881:Src/motor.cpp **** 
 882:Src/motor.cpp ****     // Apply SVM
 883:Src/motor.cpp ****     if (!enqueue_modulation_timings(mod_alpha, mod_beta))
 7465              		.loc 1 883 36 view .LVU2172
 7466 01ea 2046     		mov	r0, r4
 7467              	.LVL447:
 875:Src/motor.cpp ****     float mod_beta = c_p * mod_q + s_p * mod_d;
 7468              		.loc 1 875 5 is_stmt 1 view .LVU2173
 876:Src/motor.cpp ****     float mod_beta = c_p * mod_q + s_p * mod_d;
 7469              		.loc 1 876 11 is_stmt 0 view .LVU2174
 7470 01ec EBEE880A 		vfma.f32	s1, s23, s16
 875:Src/motor.cpp ****     float mod_beta = c_p * mod_q + s_p * mod_d;
 7471              		.loc 1 875 11 view .LVU2175
 7472 01f0 B0EE470A 		vmov.f32	s0, s14
 7473              	.LVL448:
 876:Src/motor.cpp ****     float mod_beta = c_p * mod_q + s_p * mod_d;
 7474              		.loc 1 876 5 is_stmt 1 view .LVU2176
 879:Src/motor.cpp ****     ictrl.final_v_beta_ = mod_to_V * mod_beta;
 7475              		.loc 1 879 5 view .LVU2177
 880:Src/motor.cpp **** 
 7476              		.loc 1 880 36 is_stmt 0 view .LVU2178
 7477 01f4 6AEEA07A 		vmul.f32	s15, s21, s1
 879:Src/motor.cpp ****     ictrl.final_v_beta_ = mod_to_V * mod_beta;
 7478              		.loc 1 879 37 view .LVU2179
 7479 01f8 2AEE877A 		vmul.f32	s14, s21, s14
 880:Src/motor.cpp **** 
 7480              		.loc 1 880 25 view .LVU2180
 7481 01fc C4EDE77A 		vstr.32	s15, [r4, #924]
 879:Src/motor.cpp ****     ictrl.final_v_beta_ = mod_to_V * mod_beta;
 7482              		.loc 1 879 26 view .LVU2181
 7483 0200 84EDE67A 		vstr.32	s14, [r4, #920]
 880:Src/motor.cpp **** 
 7484              		.loc 1 880 5 is_stmt 1 view .LVU2182
 7485              		.loc 1 883 5 view .LVU2183
 7486              		.loc 1 883 36 is_stmt 0 view .LVU2184
 7487 0204 FFF7FEFF 		bl	_ZN5Motor26enqueue_modulation_timingsEff
 7488              	.LVL449:
 7489              		.loc 1 883 5 view .LVU2185
 7490 0208 20B1     		cbz	r0, .L313
 884:Src/motor.cpp ****         return false; // error set inside enqueue_modulation_timings
 885:Src/motor.cpp ****     
 886:Src/motor.cpp ****     log_timing(ODriveIntf::TIMING_LOG_FOC_CURRENT);
 7491              		.loc 1 886 5 is_stmt 1 view .LVU2186
 7492              	.LVL450:
 7493              	.LBB2898:
ARM GAS  /tmp/ccvzGucR.s 			page 315


 7494              	.LBI2898:
 359:Src/motor.cpp ****     static const uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLO
 7495              		.loc 1 359 6 view .LVU2187
 7496              	.LBB2899:
 360:Src/motor.cpp ****     uint16_t timing = clocks_per_cnt * htim15.Instance->CNT; // TODO: Use a hw_config
 7497              		.loc 1 360 5 view .LVU2188
 361:Src/motor.cpp **** 
 7498              		.loc 1 361 5 view .LVU2189
 361:Src/motor.cpp **** 
 7499              		.loc 1 361 47 is_stmt 0 view .LVU2190
 7500 020a 234B     		ldr	r3, .L332+24
 7501 020c 1B68     		ldr	r3, [r3]
 361:Src/motor.cpp **** 
 7502              		.loc 1 361 57 view .LVU2191
 7503 020e 5B6A     		ldr	r3, [r3, #36]
 7504              	.LVL451:
 363:Src/motor.cpp ****         timing_log_[log_idx] = timing;
 7505              		.loc 1 363 5 is_stmt 1 view .LVU2192
 364:Src/motor.cpp ****     }
 7506              		.loc 1 364 9 view .LVU2193
 7507              	.LBB2900:
 7508              	.LBI2900:
 7509              		.loc 15 172 19 view .LVU2194
 7510              	.LBE2900:
 7511              	.LBE2899:
 7512              	.LBE2898:
 7513              		.loc 15 172 44 view .LVU2195
 7514              	.LBB2902:
 7515              	.LBB2901:
 361:Src/motor.cpp **** 
 7516              		.loc 1 361 57 is_stmt 0 view .LVU2196
 7517 0210 5B00     		lsls	r3, r3, #1
 7518              	.LVL452:
 364:Src/motor.cpp ****     }
 7519              		.loc 1 364 30 view .LVU2197
 7520 0212 A385     		strh	r3, [r4, #44]	@ movhi
 7521              	.LVL453:
 364:Src/motor.cpp ****     }
 7522              		.loc 1 364 30 view .LVU2198
 7523              	.LBE2901:
 7524              	.LBE2902:
 887:Src/motor.cpp ****     return true;
 7525              		.loc 1 887 5 is_stmt 1 view .LVU2199
 7526              	.L313:
 888:Src/motor.cpp **** }
 7527              		.loc 1 888 1 is_stmt 0 view .LVU2200
 7528 0214 02B0     		add	sp, sp, #8
 7529              	.LCFI104:
 7530              		.cfi_remember_state
 7531              		.cfi_def_cfa_offset 48
 7532              		@ sp needed
 7533 0216 BDEC0A8B 		vldm	sp!, {d8-d12}
 7534              	.LCFI105:
 7535              		.cfi_restore 88
 7536              		.cfi_restore 89
 7537              		.cfi_restore 86
 7538              		.cfi_restore 87
ARM GAS  /tmp/ccvzGucR.s 			page 316


 7539              		.cfi_restore 84
 7540              		.cfi_restore 85
 7541              		.cfi_restore 82
 7542              		.cfi_restore 83
 7543              		.cfi_restore 80
 7544              		.cfi_restore 81
 7545              		.cfi_def_cfa_offset 8
 7546              	.LVL454:
 7547              		.loc 1 888 1 view .LVU2201
 7548 021a 10BD     		pop	{r4, pc}
 7549              	.LVL455:
 7550              	.L331:
 7551              	.LCFI106:
 7552              		.cfi_restore_state
 859:Src/motor.cpp ****         mod_q *= mod_scalefactor;
 7553              		.loc 1 859 9 is_stmt 1 view .LVU2202
 862:Src/motor.cpp ****         ictrl.v_current_control_integral_q_ *= 0.99f;
 7554              		.loc 1 862 45 is_stmt 0 view .LVU2203
 7555 021c DFED1F6A 		vldr.32	s13, .L332+28
 7556              	.LVL456:
 859:Src/motor.cpp ****         mod_q *= mod_scalefactor;
 7557              		.loc 1 859 15 view .LVU2204
 7558 0220 29EE279A 		vmul.f32	s18, s18, s15
 7559              	.LVL457:
 860:Src/motor.cpp ****         // TODO make decayfactor configurable
 7560              		.loc 1 860 9 is_stmt 1 view .LVU2205
 862:Src/motor.cpp ****         ictrl.v_current_control_integral_q_ *= 0.99f;
 7561              		.loc 1 862 45 is_stmt 0 view .LVU2206
 7562 0224 25EEA67A 		vmul.f32	s14, s11, s13
 860:Src/motor.cpp ****         // TODO make decayfactor configurable
 7563              		.loc 1 860 15 view .LVU2207
 7564 0228 6BEEA7BA 		vmul.f32	s23, s23, s15
 7565              	.LVL458:
 862:Src/motor.cpp ****         ictrl.v_current_control_integral_q_ *= 0.99f;
 7566              		.loc 1 862 9 is_stmt 1 view .LVU2208
 863:Src/motor.cpp ****     } else {
 7567              		.loc 1 863 9 view .LVU2209
 863:Src/motor.cpp ****     } else {
 7568              		.loc 1 863 45 is_stmt 0 view .LVU2210
 7569 022c 64EEA66A 		vmul.f32	s13, s9, s13
 7570 0230 C1E7     		b	.L319
 7571              	.LVL459:
 7572              	.L309:
 7573              	.LBB2903:
 7574              	.LBB2891:
 7575              	.LBB2886:
 7576              	.LBI2886:
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 7577              		.loc 2 416 2 is_stmt 1 view .LVU2211
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 7578              		.loc 2 416 2 is_stmt 0 view .LVU2212
 7579              	.LBE2886:
 7580              	.LBE2891:
 7581              	.LBE2903:
 7582              		.loc 6 175 3 is_stmt 1 view .LVU2213
 7583              	.LBB2904:
 7584              	.LBB2892:
ARM GAS  /tmp/ccvzGucR.s 			page 317


 7585              	.LBB2888:
 7586              	.LBB2887:
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 7587              		.loc 2 422 51 is_stmt 0 view .LVU2214
 7588 0232 0123     		movs	r3, #1
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 7589              		.loc 2 419 4 view .LVU2215
 7590 0234 84EDD20A 		vstr.32	s0, [r4, #840]
 7591 0238 C4EDD30A 		vstr.32	s1, [r4, #844]
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 7592              		.loc 2 422 51 view .LVU2216
 7593 023c 80F85033 		strb	r3, [r0, #848]
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7594              		.loc 2 423 2 view .LVU2217
 7595 0240 F4E6     		b	.L310
 7596              	.LVL460:
 7597              	.L330:
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7598              		.loc 2 423 2 view .LVU2218
 7599              	.LBE2887:
 7600              	.LBE2888:
 7601              	.LBE2892:
 7602              	.LBE2904:
 828:Src/motor.cpp ****         return false;
 7603              		.loc 1 828 9 is_stmt 1 view .LVU2219
 7604              	.LBB2905:
 7605              	.LBI2905:
 306:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 7606              		.loc 1 306 6 view .LVU2220
 7607              	.LBB2906:
 307:Src/motor.cpp **** 
 7608              		.loc 1 307 5 view .LVU2221
 307:Src/motor.cpp **** 
 7609              		.loc 1 307 86 is_stmt 0 view .LVU2222
 7610 0242 636B     		ldr	r3, [r4, #52]
 310:Src/motor.cpp **** 
 7611              		.loc 1 310 19 view .LVU2223
 7612 0244 A268     		ldr	r2, [r4, #8]
 307:Src/motor.cpp **** 
 7613              		.loc 1 307 86 view .LVU2224
 7614 0246 43F48053 		orr	r3, r3, #4096
 310:Src/motor.cpp **** 
 7615              		.loc 1 310 19 view .LVU2225
 7616 024a 4021     		movs	r1, #64
 307:Src/motor.cpp **** 
 7617              		.loc 1 307 12 view .LVU2226
 7618 024c 6363     		str	r3, [r4, #52]
 310:Src/motor.cpp **** 
 7619              		.loc 1 310 5 is_stmt 1 view .LVU2227
 312:Src/motor.cpp ****     update_brake_current();
 7620              		.loc 1 312 37 is_stmt 0 view .LVU2228
 7621 024e 2046     		mov	r0, r4
 310:Src/motor.cpp **** 
 7622              		.loc 1 310 19 view .LVU2229
 7623 0250 C2F85C11 		str	r1, [r2, #348]
 312:Src/motor.cpp ****     update_brake_current();
 7624              		.loc 1 312 5 is_stmt 1 view .LVU2230
ARM GAS  /tmp/ccvzGucR.s 			page 318


 312:Src/motor.cpp ****     update_brake_current();
 7625              		.loc 1 312 37 is_stmt 0 view .LVU2231
 7626 0254 FFF7FEFF 		bl	safety_critical_disarm_motor_pwm
 7627              	.LVL461:
 313:Src/motor.cpp **** }
 7628              		.loc 1 313 5 is_stmt 1 view .LVU2232
 313:Src/motor.cpp **** }
 7629              		.loc 1 313 25 is_stmt 0 view .LVU2233
 7630 0258 FFF7FEFF 		bl	update_brake_current
 7631              	.LVL462:
 313:Src/motor.cpp **** }
 7632              		.loc 1 313 25 view .LVU2234
 7633              	.LBE2906:
 7634              	.LBE2905:
 829:Src/motor.cpp ****     }
 7635              		.loc 1 829 9 is_stmt 1 view .LVU2235
 829:Src/motor.cpp ****     }
 7636              		.loc 1 829 16 is_stmt 0 view .LVU2236
 7637 025c 0020     		movs	r0, #0
 7638              		.loc 1 888 1 view .LVU2237
 7639 025e 02B0     		add	sp, sp, #8
 7640              	.LCFI107:
 7641              		.cfi_remember_state
 7642              		.cfi_def_cfa_offset 48
 7643              		@ sp needed
 7644 0260 BDEC0A8B 		vldm	sp!, {d8-d12}
 7645              	.LCFI108:
 7646              		.cfi_restore 88
 7647              		.cfi_restore 89
 7648              		.cfi_restore 86
 7649              		.cfi_restore 87
 7650              		.cfi_restore 84
 7651              		.cfi_restore 85
 7652              		.cfi_restore 82
 7653              		.cfi_restore 83
 7654              		.cfi_restore 80
 7655              		.cfi_restore 81
 7656              		.cfi_def_cfa_offset 8
 7657              	.LVL463:
 7658              		.loc 1 888 1 view .LVU2238
 7659 0264 10BD     		pop	{r4, pc}
 7660              	.LVL464:
 7661              	.L327:
 7662              	.LCFI109:
 7663              		.cfi_restore_state
 7664              		.loc 1 888 1 view .LVU2239
 7665 0266 8DED016A 		vstr.32	s12, [sp, #4]	@ int
 857:Src/motor.cpp ****     if (mod_scalefactor < 1.0f) {
 7666              		.loc 1 857 62 view .LVU2240
 7667 026a FFF7FEFF 		bl	sqrtf
 7668              	.LVL465:
 862:Src/motor.cpp ****         ictrl.v_current_control_integral_q_ *= 0.99f;
 7669              		.loc 1 862 45 view .LVU2241
 7670 026e D4EDE45A 		vldr.32	s11, [r4, #912]
 863:Src/motor.cpp ****     } else {
 7671              		.loc 1 863 45 view .LVU2242
 7672 0272 D4EDE54A 		vldr.32	s9, [r4, #916]
ARM GAS  /tmp/ccvzGucR.s 			page 319


 7673 0276 9DED016A 		vldr.32	s12, [sp, #4]	@ int
 857:Src/motor.cpp ****     if (mod_scalefactor < 1.0f) {
 7674              		.loc 1 857 62 view .LVU2243
 7675 027a B0EE407A 		vmov.f32	s14, s0
 7676 027e 82E7     		b	.L316
 7677              	.L333:
 7678              		.align	2
 7679              	.L332:
 7680 0280 3ACD133F 		.word	1058262330
 7681 0284 2A8EE33E 		.word	1055100458
 7682 0288 00000000 		.word	vbus_voltage
 7683 028c ABAA2A3F 		.word	1059760811
 7684 0290 AC5C313F 		.word	1060199596
 7685 0294 00000000 		.word	current_meas_period
 7686 0298 00000000 		.word	htim15
 7687 029c A4707D3F 		.word	1065185444
 7688              		.cfi_endproc
 7689              	.LFE5020:
 7691              		.section	.text._ZN5Motor6updateEfff,"ax",%progbits
 7692              		.align	1
 7693              		.p2align 2,,3
 7694              		.global	_ZN5Motor6updateEfff
 7695              		.syntax unified
 7696              		.thumb
 7697              		.thumb_func
 7698              		.fpu fpv4-sp-d16
 7700              	_ZN5Motor6updateEfff:
 7701              	.LVL466:
 7702              	.LFB5026:
 889:Src/motor.cpp **** 
 890:Src/motor.cpp **** 
 891:Src/motor.cpp **** 
 892:Src/motor.cpp **** 
 893:Src/motor.cpp **** 
 894:Src/motor.cpp **** // torque_setpoint [Nm]
 895:Src/motor.cpp **** // phase [rad electrical]
 896:Src/motor.cpp **** // phase_vel [rad/s electrical]
 897:Src/motor.cpp **** bool Motor::update(float torque_setpoint, float phase, float phase_vel) {
 7703              		.loc 1 897 73 is_stmt 1 view -0
 7704              		.cfi_startproc
 7705              		@ args = 0, pretend = 0, frame = 0
 7706              		@ frame_needed = 0, uses_anonymous_args = 0
 898:Src/motor.cpp ****     float current_setpoint = 0.0f;
 7707              		.loc 1 898 5 view .LVU2245
 899:Src/motor.cpp ****     float torque_constant = 0.12f;
 7708              		.loc 1 899 5 view .LVU2246
 900:Src/motor.cpp ****     phase *= config_.direction;
 7709              		.loc 1 900 5 view .LVU2247
 7710              		.loc 1 900 14 is_stmt 0 view .LVU2248
 7711 0000 4368     		ldr	r3, [r0, #4]
 7712              	.LBB2929:
 901:Src/motor.cpp ****     phase_vel *= config_.direction;
 902:Src/motor.cpp ****     m_speed_est_fast =  phase_vel; 
 903:Src/motor.cpp **** 
 904:Src/motor.cpp ****     // if (config_.motor_type == MOTOR_TYPE_ACIM) {
 905:Src/motor.cpp ****     //     current_setpoint = torque_setpoint / (config_.torque_constant * fmax(current_control_.ac
 906:Src/motor.cpp ****     // }
ARM GAS  /tmp/ccvzGucR.s 			page 320


 907:Src/motor.cpp ****     // else {
 908:Src/motor.cpp ****     //     current_setpoint = torque_setpoint / config_.torque_constant;
 909:Src/motor.cpp ****     // }
 910:Src/motor.cpp ****     
 911:Src/motor.cpp **** 
 912:Src/motor.cpp ****     torque_setpoint_notch_filterd_ = torque_setpoint;
 913:Src/motor.cpp **** 
 914:Src/motor.cpp **** 
 915:Src/motor.cpp ****     if( using_old_torque_constant_ ==  true)
 7713              		.loc 1 915 5 view .LVU2249
 7714 0002 90F8CC20 		ldrb	r2, [r0, #204]	@ zero_extendqisi2
 7715              	.LBE2929:
 900:Src/motor.cpp ****     phase *= config_.direction;
 7716              		.loc 1 900 11 view .LVU2250
 7717 0006 D3ED097A 		vldr.32	s15, [r3, #36]	@ int
 897:Src/motor.cpp ****     float current_setpoint = 0.0f;
 7718              		.loc 1 897 73 view .LVU2251
 7719 000a 10B5     		push	{r4, lr}
 7720              	.LCFI110:
 7721              		.cfi_def_cfa_offset 8
 7722              		.cfi_offset 4, -8
 7723              		.cfi_offset 14, -4
 900:Src/motor.cpp ****     phase *= config_.direction;
 7724              		.loc 1 900 11 view .LVU2252
 7725 000c F8EEE77A 		vcvt.f32.s32	s15, s15
 897:Src/motor.cpp ****     float current_setpoint = 0.0f;
 7726              		.loc 1 897 73 view .LVU2253
 7727 0010 2DED068B 		vpush.64	{d8, d9, d10}
 7728              	.LCFI111:
 7729              		.cfi_def_cfa_offset 32
 7730              		.cfi_offset 80, -32
 7731              		.cfi_offset 81, -28
 7732              		.cfi_offset 82, -24
 7733              		.cfi_offset 83, -20
 7734              		.cfi_offset 84, -16
 7735              		.cfi_offset 85, -12
 901:Src/motor.cpp ****     phase_vel *= config_.direction;
 7736              		.loc 1 901 15 view .LVU2254
 7737 0014 67EE819A 		vmul.f32	s19, s15, s2
 900:Src/motor.cpp ****     phase *= config_.direction;
 7738              		.loc 1 900 11 view .LVU2255
 7739 0018 27EEA0AA 		vmul.f32	s20, s15, s1
 7740              	.LVL467:
 901:Src/motor.cpp ****     phase_vel *= config_.direction;
 7741              		.loc 1 901 5 is_stmt 1 view .LVU2256
 902:Src/motor.cpp **** 
 7742              		.loc 1 902 5 view .LVU2257
 897:Src/motor.cpp ****     float current_setpoint = 0.0f;
 7743              		.loc 1 897 73 is_stmt 0 view .LVU2258
 7744 001c 0446     		mov	r4, r0
 902:Src/motor.cpp **** 
 7745              		.loc 1 902 22 view .LVU2259
 7746 001e C0ED2C9A 		vstr.32	s19, [r0, #176]
 912:Src/motor.cpp **** 
 7747              		.loc 1 912 5 is_stmt 1 view .LVU2260
 912:Src/motor.cpp **** 
 7748              		.loc 1 912 36 is_stmt 0 view .LVU2261
ARM GAS  /tmp/ccvzGucR.s 			page 321


 7749 0022 80EDB60A 		vstr.32	s0, [r0, #728]
 7750              		.loc 1 915 5 is_stmt 1 view .LVU2262
 7751              	.LBB2932:
 7752 0026 002A     		cmp	r2, #0
 7753 0028 64D0     		beq	.L335
 916:Src/motor.cpp ****     {
 917:Src/motor.cpp ****         current_setpoint = torque_setpoint_notch_filterd_ / (config_.torque_constant );
 7754              		.loc 1 917 9 view .LVU2263
 7755              		.loc 1 917 59 is_stmt 0 view .LVU2264
 7756 002a 93ED087A 		vldr.32	s14, [r3, #32]
 7757 002e 80EE078A 		vdiv.f32	s16, s0, s14
 7758              	.LVL468:
 7759              	.L336:
 7760              		.loc 1 917 59 view .LVU2265
 7761              	.LBE2932:
 918:Src/motor.cpp ****     }
 919:Src/motor.cpp ****     else
 920:Src/motor.cpp ****     {
 921:Src/motor.cpp ****         float torque_setpoint_abs = fabsf(torque_setpoint_notch_filterd_);
 922:Src/motor.cpp ****         uint32_t idex = (uint32_t)((torque_setpoint_abs*CALIBRATION_INCREMENT)); 
 923:Src/motor.cpp ****         const float* torque_constant_array  = torque_setpoint_notch_filterd_ > 0.0f ? L_Slop_Array_
 924:Src/motor.cpp ****         if( idex > (NUM_LINEARITY_SEG -2) )
 925:Src/motor.cpp ****         {
 926:Src/motor.cpp ****             idex = NUM_LINEARITY_SEG -1;
 927:Src/motor.cpp ****             torque_constant = torque_constant_array [idex];
 928:Src/motor.cpp ****         }
 929:Src/motor.cpp ****         else
 930:Src/motor.cpp ****         {
 931:Src/motor.cpp ****             torque_constant = torque_constant_array [idex]*( 1.0f - torque_setpoint_abs+ (uint32_t)
 932:Src/motor.cpp ****         }
 933:Src/motor.cpp **** 
 934:Src/motor.cpp ****         current_setpoint = torque_setpoint_notch_filterd_ / torque_constant;
 935:Src/motor.cpp **** 
 936:Src/motor.cpp **** 
 937:Src/motor.cpp ****     }
 938:Src/motor.cpp ****     current_setpoint *= config_.direction;
 7762              		.loc 1 938 5 is_stmt 1 view .LVU2266
 939:Src/motor.cpp **** 
 940:Src/motor.cpp ****     auto [id_setpoint,iq_setpoint] = *(current_control_.Idq_setpoint_);
 941:Src/motor.cpp ****     (void )iq_setpoint;
 942:Src/motor.cpp ****     // TODO: 2-norm vs independent clamping (current could be sqrt(2) bigger)
 943:Src/motor.cpp ****     float ilim = effective_current_lim();
 7763              		.loc 1 943 39 is_stmt 0 view .LVU2267
 7764 0032 2046     		mov	r0, r4
 7765              	.LVL469:
 940:Src/motor.cpp ****     (void )iq_setpoint;
 7766              		.loc 1 940 70 view .LVU2268
 7767 0034 94EDD29A 		vldr.32	s18, [r4, #840]
 938:Src/motor.cpp **** 
 7768              		.loc 1 938 22 view .LVU2269
 7769 0038 27EE888A 		vmul.f32	s16, s15, s16
 7770              	.LVL470:
 940:Src/motor.cpp ****     (void )iq_setpoint;
 7771              		.loc 1 940 5 is_stmt 1 view .LVU2270
 941:Src/motor.cpp ****     // TODO: 2-norm vs independent clamping (current could be sqrt(2) bigger)
 7772              		.loc 1 941 5 view .LVU2271
 7773              		.loc 1 943 5 view .LVU2272
ARM GAS  /tmp/ccvzGucR.s 			page 322


 7774              		.loc 1 943 39 is_stmt 0 view .LVU2273
 7775 003c FFF7FEFF 		bl	_ZN5Motor21effective_current_limEv
 7776              	.LVL471:
 944:Src/motor.cpp ****     float id = std::clamp(id_setpoint, -ilim, ilim);
 7777              		.loc 1 944 5 is_stmt 1 view .LVU2274
 7778              		.loc 1 944 40 is_stmt 0 view .LVU2275
 7779 0040 F1EE408A 		vneg.f32	s17, s0
 7780              	.LVL472:
 7781              	.LBB2933:
 7782              	.LBI2933:
3675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 7783              		.loc 14 3675 5 is_stmt 1 view .LVU2276
 7784              	.LBB2934:
 7785              		.loc 14 3678 29 is_stmt 0 view .LVU2277
 7786 0044 F4EEC98A 		vcmpe.f32	s17, s18
 7787 0048 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 7788 004c 4FDC     		bgt	.L351
 7789 004e B4EE490A 		vcmp.f32	s0, s18
 7790 0052 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 7791 0056 48BF     		it	mi
 7792 0058 B0EE409A 		vmovmi.f32	s18, s0
 7793              	.LVL473:
 7794              	.L342:
 7795              		.loc 14 3678 29 view .LVU2278
 7796              	.LBE2934:
 7797              	.LBE2933:
 945:Src/motor.cpp ****     float iq = std::clamp(current_setpoint, -ilim, ilim);
 7798              		.loc 1 945 5 is_stmt 1 view .LVU2279
 7799              	.LBB2936:
 7800              	.LBI2936:
3675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 7801              		.loc 14 3675 5 view .LVU2280
 7802              	.LBB2937:
 7803              		.loc 14 3678 29 is_stmt 0 view .LVU2281
 7804 005c B4EEE88A 		vcmpe.f32	s16, s17
 7805 0060 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 7806 0064 08D4     		bmi	.L344
 7807 0066 B4EEC08A 		vcmpe.f32	s16, s0
 7808 006a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 7809 006e D4BF     		ite	le
 7810 0070 F0EE488A 		vmovle.f32	s17, s16
 7811 0074 F0EE408A 		vmovgt.f32	s17, s0
 7812              	.L344:
 7813              	.LVL474:
 7814              		.loc 14 3678 29 view .LVU2282
 7815              	.LBE2937:
 7816              	.LBE2936:
 946:Src/motor.cpp **** 
 947:Src/motor.cpp **** 
 948:Src/motor.cpp ****     float pwm_phase = phase + 1.5f * current_meas_period * phase_vel;
 7817              		.loc 1 948 5 is_stmt 1 view .LVU2283
 7818              		.loc 1 948 36 is_stmt 0 view .LVU2284
 7819 0078 534B     		ldr	r3, .L363
 7820              	.LBB2938:
 7821              	.LBB2939:
 7822              	.LBB2940:
 7823              	.LBB2941:
ARM GAS  /tmp/ccvzGucR.s 			page 323


 7824              	.LBB2942:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 7825              		.loc 16 89 22 view .LVU2285
 7826 007a 9FED548A 		vldr.32	s16, .L363+4
 7827              	.LVL475:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 7828              		.loc 16 89 22 view .LVU2286
 7829              	.LBE2942:
 7830              	.LBE2941:
 7831              	.LBE2940:
 7832              	.LBE2939:
 7833              	.LBE2938:
 7834              		.loc 1 948 36 view .LVU2287
 7835 007e D3ED007A 		vldr.32	s15, [r3]
 7836 0082 B7EE087A 		vmov.f32	s14, #1.5e+0
 7837 0086 67EE877A 		vmul.f32	s15, s15, s14
 7838              		.loc 1 948 11 view .LVU2288
 7839 008a B0EE4A0A 		vmov.f32	s0, s20
 7840              	.LVL476:
 7841              		.loc 1 948 11 view .LVU2289
 7842 008e A7EEA90A 		vfma.f32	s0, s15, s19
 7843              	.LVL477:
 949:Src/motor.cpp ****     pwm_phase = wrap_pm_pi(pwm_phase);
 7844              		.loc 1 949 5 is_stmt 1 view .LVU2290
 7845              	.LBB2955:
 7846              	.LBI2938:
 104:Inc/utils.hpp ****     return wrap_pm(theta, M_PI);
 7847              		.loc 16 104 21 view .LVU2291
 7848              	.LBE2955:
 105:Inc/utils.hpp **** }
 7849              		.loc 16 105 5 view .LVU2292
 7850              	.LBB2956:
 7851              	.LBB2952:
 7852              	.LBI2939:
 100:Inc/utils.hpp ****     return fmodf_pos(x + pm_range, 2.0f * pm_range) - pm_range;
 7853              		.loc 16 100 21 view .LVU2293
 7854              	.LBB2949:
 101:Inc/utils.hpp **** }
 7855              		.loc 16 101 5 view .LVU2294
 7856              	.LBB2946:
 7857              	.LBI2941:
  88:Inc/utils.hpp ****     float out = fmodf(x, y);
 7858              		.loc 16 88 21 view .LVU2295
 7859              	.LBB2943:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 7860              		.loc 16 89 5 view .LVU2296
 7861              	.LBE2943:
 7862              	.LBE2946:
 101:Inc/utils.hpp **** }
 7863              		.loc 16 101 21 is_stmt 0 view .LVU2297
 7864 0092 9FED4F7A 		vldr.32	s14, .L363+8
 7865              	.LBB2947:
 7866              	.LBB2944:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 7867              		.loc 16 89 22 view .LVU2298
 7868 0096 F0EE480A 		vmov.f32	s1, s16
 7869 009a 30EE070A 		vadd.f32	s0, s0, s14
ARM GAS  /tmp/ccvzGucR.s 			page 324


 7870              	.LVL478:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 7871              		.loc 16 89 22 view .LVU2299
 7872 009e FFF7FEFF 		bl	fmodf
 7873              	.LVL479:
  90:Inc/utils.hpp ****         out += y;
 7874              		.loc 16 90 5 is_stmt 1 view .LVU2300
 7875 00a2 B5EEC00A 		vcmpe.f32	s0, #0
 7876 00a6 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  91:Inc/utils.hpp ****     return out;
 7877              		.loc 16 91 9 view .LVU2301
 7878              	.LBE2944:
 7879              	.LBE2947:
 7880              	.LBE2949:
 7881              	.LBE2952:
 7882              	.LBE2956:
 950:Src/motor.cpp ****     I_phase_ = pwm_phase;
 951:Src/motor.cpp ****     // Clarke transform
 952:Src/motor.cpp **** 
 953:Src/motor.cpp **** 
 954:Src/motor.cpp ****     bool res = true;
 955:Src/motor.cpp ****     // Execute current command
 956:Src/motor.cpp ****     switch(config_.motor_type){
 7883              		.loc 1 956 20 is_stmt 0 view .LVU2302
 7884 00aa 6368     		ldr	r3, [r4, #4]
 7885              	.LBB2957:
 7886              	.LBB2953:
 7887              	.LBB2950:
 7888              	.LBB2948:
 7889              	.LBB2945:
  91:Inc/utils.hpp ****     return out;
 7890              		.loc 16 91 13 view .LVU2303
 7891 00ac 48BF     		it	mi
 7892 00ae 30EE080A 		vaddmi.f32	s0, s0, s16
 7893              	.LVL480:
  92:Inc/utils.hpp **** }
 7894              		.loc 16 92 5 is_stmt 1 view .LVU2304
  92:Inc/utils.hpp **** }
 7895              		.loc 16 92 5 is_stmt 0 view .LVU2305
 7896              	.LBE2945:
 7897              	.LBE2948:
 101:Inc/utils.hpp **** }
 7898              		.loc 16 101 55 view .LVU2306
 7899 00b2 9FED478A 		vldr.32	s16, .L363+8
 7900              	.LBE2950:
 7901              	.LBE2953:
 7902              	.LBE2957:
 7903              		.loc 1 956 20 view .LVU2307
 7904 00b6 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 7905              	.LBB2958:
 7906              	.LBB2954:
 7907              	.LBB2951:
 101:Inc/utils.hpp **** }
 7908              		.loc 16 101 55 view .LVU2308
 7909 00ba 30EE488A 		vsub.f32	s16, s0, s16
 7910              	.LVL481:
 101:Inc/utils.hpp **** }
ARM GAS  /tmp/ccvzGucR.s 			page 325


 7911              		.loc 16 101 55 view .LVU2309
 7912              	.LBE2951:
 7913              	.LBE2954:
 7914              	.LBE2958:
 950:Src/motor.cpp ****     I_phase_ = pwm_phase;
 7915              		.loc 1 950 5 is_stmt 1 view .LVU2310
 7916              		.loc 1 956 5 is_stmt 0 view .LVU2311
 7917 00be 022B     		cmp	r3, #2
 950:Src/motor.cpp ****     I_phase_ = pwm_phase;
 7918              		.loc 1 950 14 view .LVU2312
 7919 00c0 84EDB08A 		vstr.32	s16, [r4, #704]
 954:Src/motor.cpp ****     // Execute current command
 7920              		.loc 1 954 5 is_stmt 1 view .LVU2313
 7921              	.LVL482:
 7922              		.loc 1 956 5 view .LVU2314
 7923 00c4 50D0     		beq	.L348
 7924 00c6 032B     		cmp	r3, #3
 7925 00c8 3CD0     		beq	.L349
 7926 00ca DBB3     		cbz	r3, .L349
 957:Src/motor.cpp ****         case MOTOR_TYPE_HIGH_CURRENT: res =  FOC_current(id, iq, phase, pwm_phase); break;
 958:Src/motor.cpp ****         case MOTOR_TYPE_ACIM: res = FOC_current(id, iq, phase, pwm_phase); break;
 959:Src/motor.cpp ****         case MOTOR_TYPE_GIMBAL: res =FOC_voltage(id, iq, pwm_phase); break;
 960:Src/motor.cpp ****         default: set_error(ODriveIntf::MotorIntf::ERROR_NOT_IMPLEMENTED_MOTOR_TYPE); return false; 
 7927              		.loc 1 960 9 view .LVU2315
 7928              		.loc 1 960 18 view .LVU2316
 7929              	.LVL483:
 7930              	.LBB2959:
 7931              	.LBI2959:
 306:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 7932              		.loc 1 306 6 view .LVU2317
 7933              	.LBB2960:
 307:Src/motor.cpp **** 
 7934              		.loc 1 307 5 view .LVU2318
 307:Src/motor.cpp **** 
 7935              		.loc 1 307 86 is_stmt 0 view .LVU2319
 7936 00cc 636B     		ldr	r3, [r4, #52]
 310:Src/motor.cpp **** 
 7937              		.loc 1 310 19 view .LVU2320
 7938 00ce A268     		ldr	r2, [r4, #8]
 307:Src/motor.cpp **** 
 7939              		.loc 1 307 86 view .LVU2321
 7940 00d0 43F02003 		orr	r3, r3, #32
 310:Src/motor.cpp **** 
 7941              		.loc 1 310 19 view .LVU2322
 7942 00d4 4021     		movs	r1, #64
 307:Src/motor.cpp **** 
 7943              		.loc 1 307 12 view .LVU2323
 7944 00d6 6363     		str	r3, [r4, #52]
 310:Src/motor.cpp **** 
 7945              		.loc 1 310 5 is_stmt 1 view .LVU2324
 312:Src/motor.cpp ****     update_brake_current();
 7946              		.loc 1 312 37 is_stmt 0 view .LVU2325
 7947 00d8 2046     		mov	r0, r4
 310:Src/motor.cpp **** 
 7948              		.loc 1 310 19 view .LVU2326
 7949 00da C2F85C11 		str	r1, [r2, #348]
 312:Src/motor.cpp ****     update_brake_current();
ARM GAS  /tmp/ccvzGucR.s 			page 326


 7950              		.loc 1 312 5 is_stmt 1 view .LVU2327
 312:Src/motor.cpp ****     update_brake_current();
 7951              		.loc 1 312 37 is_stmt 0 view .LVU2328
 7952 00de FFF7FEFF 		bl	safety_critical_disarm_motor_pwm
 7953              	.LVL484:
 313:Src/motor.cpp **** }
 7954              		.loc 1 313 5 is_stmt 1 view .LVU2329
 313:Src/motor.cpp **** }
 7955              		.loc 1 313 25 is_stmt 0 view .LVU2330
 7956 00e2 FFF7FEFF 		bl	update_brake_current
 7957              	.LVL485:
 313:Src/motor.cpp **** }
 7958              		.loc 1 313 25 view .LVU2331
 7959              	.LBE2960:
 7960              	.LBE2959:
 7961              		.loc 1 960 86 is_stmt 1 view .LVU2332
 961:Src/motor.cpp ****     }
 962:Src/motor.cpp ****     return res;
 963:Src/motor.cpp **** }
 7962              		.loc 1 963 1 is_stmt 0 view .LVU2333
 7963 00e6 BDEC068B 		vldm	sp!, {d8-d10}
 7964              	.LCFI112:
 7965              		.cfi_remember_state
 7966              		.cfi_restore 84
 7967              		.cfi_restore 85
 7968              		.cfi_restore 82
 7969              		.cfi_restore 83
 7970              		.cfi_restore 80
 7971              		.cfi_restore 81
 7972              		.cfi_def_cfa_offset 8
 7973              	.LVL486:
 7974              		.loc 1 963 1 view .LVU2334
 7975 00ea 0020     		movs	r0, #0
 7976 00ec 10BD     		pop	{r4, pc}
 7977              	.LVL487:
 7978              	.L351:
 7979              	.LCFI113:
 7980              		.cfi_restore_state
 7981              	.LBB2961:
 7982              	.LBB2935:
 7983              		.loc 14 3678 29 view .LVU2335
 7984 00ee B0EE689A 		vmov.f32	s18, s17
 7985              	.LVL488:
 7986              		.loc 14 3678 29 view .LVU2336
 7987 00f2 B3E7     		b	.L342
 7988              	.LVL489:
 7989              	.L335:
 7990              		.loc 14 3678 29 view .LVU2337
 7991              	.LBE2935:
 7992              	.LBE2961:
 7993              	.LBB2962:
 7994              	.LBB2930:
 921:Src/motor.cpp ****         uint32_t idex = (uint32_t)((torque_setpoint_abs*CALIBRATION_INCREMENT)); 
 7995              		.loc 1 921 9 is_stmt 1 view .LVU2338
 921:Src/motor.cpp ****         uint32_t idex = (uint32_t)((torque_setpoint_abs*CALIBRATION_INCREMENT)); 
 7996              		.loc 1 921 15 is_stmt 0 view .LVU2339
 7997 00f4 B0EEC07A 		vabs.f32	s14, s0
ARM GAS  /tmp/ccvzGucR.s 			page 327


 7998              	.LVL490:
 922:Src/motor.cpp ****         const float* torque_constant_array  = torque_setpoint_notch_filterd_ > 0.0f ? L_Slop_Array_
 7999              		.loc 1 922 9 is_stmt 1 view .LVU2340
 922:Src/motor.cpp ****         const float* torque_constant_array  = torque_setpoint_notch_filterd_ > 0.0f ? L_Slop_Array_
 8000              		.loc 1 922 18 is_stmt 0 view .LVU2341
 8001 00f8 FCEEC76A 		vcvt.u32.f32	s13, s14
 923:Src/motor.cpp ****         if( idex > (NUM_LINEARITY_SEG -2) )
 8002              		.loc 1 923 22 view .LVU2342
 8003 00fc B5EEC00A 		vcmpe.f32	s0, #0
 922:Src/motor.cpp ****         const float* torque_constant_array  = torque_setpoint_notch_filterd_ > 0.0f ? L_Slop_Array_
 8004              		.loc 1 922 18 view .LVU2343
 8005 0100 16EE902A 		vmov	r2, s13	@ int
 8006              	.LVL491:
 923:Src/motor.cpp ****         if( idex > (NUM_LINEARITY_SEG -2) )
 8007              		.loc 1 923 9 is_stmt 1 view .LVU2344
 923:Src/motor.cpp ****         if( idex > (NUM_LINEARITY_SEG -2) )
 8008              		.loc 1 923 22 is_stmt 0 view .LVU2345
 8009 0104 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8010 0108 CCBF     		ite	gt
 8011 010a 00F1D003 		addgt	r3, r0, #208
 8012 010e 00F5E073 		addle	r3, r0, #448
 8013              	.LVL492:
 924:Src/motor.cpp ****         {
 8014              		.loc 1 924 9 is_stmt 1 view .LVU2346
 8015 0112 3A2A     		cmp	r2, #58
 8016 0114 25D8     		bhi	.L362
 931:Src/motor.cpp ****         }
 8017              		.loc 1 931 13 view .LVU2347
 931:Src/motor.cpp ****         }
 8018              		.loc 1 931 88 is_stmt 0 view .LVU2348
 8019 0116 B8EEE66A 		vcvt.f32.s32	s12, s13
 931:Src/motor.cpp ****         }
 8020              		.loc 1 931 58 view .LVU2349
 8021 011a 03EB8203 		add	r3, r3, r2, lsl #2
 8022              	.LVL493:
 931:Src/motor.cpp ****         }
 8023              		.loc 1 931 67 view .LVU2350
 8024 011e F7EE006A 		vmov.f32	s13, #1.0e+0
 8025 0122 76EEC76A 		vsub.f32	s13, s13, s14
 931:Src/motor.cpp ****         }
 8026              		.loc 1 931 154 view .LVU2351
 8027 0126 D3ED015A 		vldr.32	s11, [r3, #4]
 931:Src/motor.cpp ****         }
 8028              		.loc 1 931 176 view .LVU2352
 8029 012a 37EE467A 		vsub.f32	s14, s14, s12
 8030              	.LVL494:
 931:Src/motor.cpp ****         }
 8031              		.loc 1 931 88 view .LVU2353
 8032 012e 76EE866A 		vadd.f32	s13, s13, s12
 931:Src/motor.cpp ****         }
 8033              		.loc 1 931 154 view .LVU2354
 8034 0132 27EE257A 		vmul.f32	s14, s14, s11
 931:Src/motor.cpp ****         }
 8035              		.loc 1 931 29 view .LVU2355
 8036 0136 93ED006A 		vldr.32	s12, [r3]
 8037 013a A6EE267A 		vfma.f32	s14, s12, s13
 8038              	.LVL495:
ARM GAS  /tmp/ccvzGucR.s 			page 328


 8039              	.L341:
 934:Src/motor.cpp **** 
 8040              		.loc 1 934 9 is_stmt 1 view .LVU2356
 934:Src/motor.cpp **** 
 8041              		.loc 1 934 59 is_stmt 0 view .LVU2357
 8042 013e 80EE078A 		vdiv.f32	s16, s0, s14
 8043              	.LVL496:
 934:Src/motor.cpp **** 
 8044              		.loc 1 934 59 view .LVU2358
 8045 0142 76E7     		b	.L336
 8046              	.LVL497:
 8047              	.L349:
 934:Src/motor.cpp **** 
 8048              		.loc 1 934 59 view .LVU2359
 8049              	.LBE2930:
 8050              	.LBE2962:
 958:Src/motor.cpp ****         case MOTOR_TYPE_GIMBAL: res =FOC_voltage(id, iq, pwm_phase); break;
 8051              		.loc 1 958 9 is_stmt 1 view .LVU2360
 958:Src/motor.cpp ****         case MOTOR_TYPE_GIMBAL: res =FOC_voltage(id, iq, pwm_phase); break;
 8052              		.loc 1 958 31 view .LVU2361
 958:Src/motor.cpp ****         case MOTOR_TYPE_GIMBAL: res =FOC_voltage(id, iq, pwm_phase); break;
 8053              		.loc 1 958 48 is_stmt 0 view .LVU2362
 8054 0144 F0EE481A 		vmov.f32	s3, s16
 8055 0148 B0EE4A1A 		vmov.f32	s2, s20
 8056 014c F0EE680A 		vmov.f32	s1, s17
 8057 0150 B0EE490A 		vmov.f32	s0, s18
 8058              		.loc 1 963 1 view .LVU2363
 8059 0154 BDEC068B 		vldm	sp!, {d8-d10}
 8060              	.LCFI114:
 8061              		.cfi_remember_state
 8062              		.cfi_restore 84
 8063              		.cfi_restore 85
 8064              		.cfi_restore 82
 8065              		.cfi_restore 83
 8066              		.cfi_restore 80
 8067              		.cfi_restore 81
 8068              		.cfi_def_cfa_offset 8
 8069              	.LVL498:
 958:Src/motor.cpp ****         case MOTOR_TYPE_GIMBAL: res =FOC_voltage(id, iq, pwm_phase); break;
 8070              		.loc 1 958 48 view .LVU2364
 8071 0158 2046     		mov	r0, r4
 8072              		.loc 1 963 1 view .LVU2365
 8073 015a BDE81040 		pop	{r4, lr}
 8074              	.LCFI115:
 8075              		.cfi_restore 14
 8076              		.cfi_restore 4
 8077              		.cfi_def_cfa_offset 0
 8078              	.LVL499:
 958:Src/motor.cpp ****         case MOTOR_TYPE_GIMBAL: res =FOC_voltage(id, iq, pwm_phase); break;
 8079              		.loc 1 958 48 view .LVU2366
 8080 015e FFF7FEBF 		b	_ZN5Motor11FOC_currentEffff
 8081              	.LVL500:
 8082              	.L362:
 8083              	.LCFI116:
 8084              		.cfi_restore_state
 8085              	.LBB2963:
 8086              	.LBB2931:
ARM GAS  /tmp/ccvzGucR.s 			page 329


 926:Src/motor.cpp ****             torque_constant = torque_constant_array [idex];
 8087              		.loc 1 926 13 is_stmt 1 view .LVU2367
 927:Src/motor.cpp ****         }
 8088              		.loc 1 927 13 view .LVU2368
 927:Src/motor.cpp ****         }
 8089              		.loc 1 927 29 is_stmt 0 view .LVU2369
 8090 0162 93ED3B7A 		vldr.32	s14, [r3, #236]
 8091              	.LVL501:
 927:Src/motor.cpp ****         }
 8092              		.loc 1 927 29 view .LVU2370
 8093 0166 EAE7     		b	.L341
 8094              	.LVL502:
 8095              	.L348:
 927:Src/motor.cpp ****         }
 8096              		.loc 1 927 29 view .LVU2371
 8097              	.LBE2931:
 8098              	.LBE2963:
 959:Src/motor.cpp ****         default: set_error(ODriveIntf::MotorIntf::ERROR_NOT_IMPLEMENTED_MOTOR_TYPE); return false; 
 8099              		.loc 1 959 9 is_stmt 1 view .LVU2372
 959:Src/motor.cpp ****         default: set_error(ODriveIntf::MotorIntf::ERROR_NOT_IMPLEMENTED_MOTOR_TYPE); return false; 
 8100              		.loc 1 959 33 view .LVU2373
 8101              	.LBB2964:
 8102              	.LBI2964:
 740:Src/motor.cpp ****     float c = our_arm_cos_f32(pwm_phase);
 8103              		.loc 1 740 6 view .LVU2374
 8104              	.LBB2965:
 741:Src/motor.cpp ****     float s = our_arm_sin_f32(pwm_phase);
 8105              		.loc 1 741 5 view .LVU2375
 741:Src/motor.cpp ****     float s = our_arm_sin_f32(pwm_phase);
 8106              		.loc 1 741 30 is_stmt 0 view .LVU2376
 8107 0168 B0EE480A 		vmov.f32	s0, s16
 8108 016c FFF7FEFF 		bl	our_arm_cos_f32
 8109              	.LVL503:
 8110 0170 F0EE407A 		vmov.f32	s15, s0
 742:Src/motor.cpp ****     float v_alpha = c*v_d - s*v_q;
 8111              		.loc 1 742 30 view .LVU2377
 8112 0174 B0EE480A 		vmov.f32	s0, s16
 741:Src/motor.cpp ****     float s = our_arm_sin_f32(pwm_phase);
 8113              		.loc 1 741 30 view .LVU2378
 8114 0178 B0EE678A 		vmov.f32	s16, s15
 8115              	.LVL504:
 742:Src/motor.cpp ****     float v_alpha = c*v_d - s*v_q;
 8116              		.loc 1 742 5 is_stmt 1 view .LVU2379
 742:Src/motor.cpp ****     float v_alpha = c*v_d - s*v_q;
 8117              		.loc 1 742 30 is_stmt 0 view .LVU2380
 8118 017c FFF7FEFF 		bl	our_arm_sin_f32
 8119              	.LVL505:
 8120              	.LBB2966:
 8121              	.LBB2967:
 728:Src/motor.cpp ****     float mod_alpha = vfactor * v_alpha;
 8122              		.loc 1 728 43 view .LVU2381
 8123 0180 144B     		ldr	r3, .L363+12
 8124 0182 9FED157A 		vldr.32	s14, .L363+16
 8125 0186 D3ED007A 		vldr.32	s15, [r3]
 8126              	.LBB2968:
 8127              	.LBB2969:
 361:Src/motor.cpp **** 
ARM GAS  /tmp/ccvzGucR.s 			page 330


 8128              		.loc 1 361 47 view .LVU2382
 8129 018a 144B     		ldr	r3, .L363+20
 8130              	.LBE2969:
 8131              	.LBE2968:
 728:Src/motor.cpp ****     float mod_alpha = vfactor * v_alpha;
 8132              		.loc 1 728 43 view .LVU2383
 8133 018c 67EE877A 		vmul.f32	s15, s15, s14
 8134              	.LVL506:
 728:Src/motor.cpp ****     float mod_alpha = vfactor * v_alpha;
 8135              		.loc 1 728 43 view .LVU2384
 8136              	.LBE2967:
 8137              	.LBE2966:
 743:Src/motor.cpp ****     float v_beta = c*v_q + s*v_d;
 8138              		.loc 1 743 5 is_stmt 1 view .LVU2385
 8139              	.LBB2982:
 8140              	.LBB2977:
 728:Src/motor.cpp ****     float mod_alpha = vfactor * v_alpha;
 8141              		.loc 1 728 11 is_stmt 0 view .LVU2386
 8142 0190 F7EE006A 		vmov.f32	s13, #1.0e+0
 8143 0194 86EEA77A 		vdiv.f32	s14, s13, s15
 8144              	.LBB2974:
 8145              	.LBB2971:
 361:Src/motor.cpp **** 
 8146              		.loc 1 361 47 view .LVU2387
 8147 0198 1B68     		ldr	r3, [r3]
 361:Src/motor.cpp **** 
 8148              		.loc 1 361 57 view .LVU2388
 8149 019a 5B6A     		ldr	r3, [r3, #36]
 8150 019c 5B00     		lsls	r3, r3, #1
 8151              	.LBE2971:
 8152              	.LBE2974:
 734:Src/motor.cpp ****         return false;
 8153              		.loc 1 734 36 view .LVU2389
 8154 019e 2046     		mov	r0, r4
 8155              	.LBB2975:
 8156              	.LBB2972:
 364:Src/motor.cpp ****     }
 8157              		.loc 1 364 30 view .LVU2390
 8158 01a0 6385     		strh	r3, [r4, #42]	@ movhi
 8159              	.LBE2972:
 8160              	.LBE2975:
 8161              	.LBE2977:
 8162              	.LBE2982:
 743:Src/motor.cpp ****     float v_beta = c*v_q + s*v_d;
 8163              		.loc 1 743 11 view .LVU2391
 8164 01a2 60EE687A 		vnmul.f32	s15, s0, s17
 744:Src/motor.cpp **** 
 8165              		.loc 1 744 29 view .LVU2392
 8166 01a6 69EE000A 		vmul.f32	s1, s18, s0
 743:Src/motor.cpp ****     float v_beta = c*v_q + s*v_d;
 8167              		.loc 1 743 11 view .LVU2393
 8168 01aa E9EE087A 		vfma.f32	s15, s18, s16
 8169              	.LVL507:
 744:Src/motor.cpp **** 
 8170              		.loc 1 744 5 is_stmt 1 view .LVU2394
 744:Src/motor.cpp **** 
 8171              		.loc 1 744 11 is_stmt 0 view .LVU2395
ARM GAS  /tmp/ccvzGucR.s 			page 331


 8172 01ae E8EE880A 		vfma.f32	s1, s17, s16
 8173              	.LVL508:
 746:Src/motor.cpp **** }
 8174              		.loc 1 746 5 is_stmt 1 view .LVU2396
 8175              	.LBB2983:
 8176              	.LBI2966:
 727:Src/motor.cpp ****     float vfactor = 1.0f / ((2.0f / 3.0f) * vbus_voltage);  // float vfactor = 1.0f / ((2.0f / 3.0f
 8177              		.loc 1 727 6 view .LVU2397
 8178              	.LBB2978:
 728:Src/motor.cpp ****     float mod_alpha = vfactor * v_alpha;
 8179              		.loc 1 728 5 view .LVU2398
 729:Src/motor.cpp ****     float mod_beta = vfactor * v_beta;
 8180              		.loc 1 729 5 view .LVU2399
 730:Src/motor.cpp **** 
 8181              		.loc 1 730 5 view .LVU2400
 732:Src/motor.cpp **** 
 8182              		.loc 1 732 5 view .LVU2401
 8183              	.LBB2976:
 8184              	.LBI2968:
 359:Src/motor.cpp ****     static const uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLO
 8185              		.loc 1 359 6 view .LVU2402
 8186              	.LBB2973:
 360:Src/motor.cpp ****     uint16_t timing = clocks_per_cnt * htim15.Instance->CNT; // TODO: Use a hw_config
 8187              		.loc 1 360 5 view .LVU2403
 361:Src/motor.cpp **** 
 8188              		.loc 1 361 5 view .LVU2404
 363:Src/motor.cpp ****         timing_log_[log_idx] = timing;
 8189              		.loc 1 363 5 view .LVU2405
 364:Src/motor.cpp ****     }
 8190              		.loc 1 364 9 view .LVU2406
 8191              	.LBB2970:
 8192              	.LBI2970:
 8193              		.loc 15 172 19 view .LVU2407
 8194              	.LBE2970:
 8195              	.LBE2973:
 8196              	.LBE2976:
 8197              	.LBE2978:
 8198              	.LBE2983:
 8199              	.LBE2965:
 8200              	.LBE2964:
 8201              		.loc 15 172 44 view .LVU2408
 8202              	.LBB2990:
 8203              	.LBB2987:
 8204              	.LBB2984:
 8205              	.LBB2979:
 734:Src/motor.cpp ****         return false;
 8206              		.loc 1 734 5 view .LVU2409
 8207              	.LBE2979:
 8208              	.LBE2984:
 8209              	.LBE2987:
 8210              	.LBE2990:
 8211              		.loc 1 963 1 is_stmt 0 view .LVU2410
 8212 01b2 BDEC068B 		vldm	sp!, {d8-d10}
 8213              	.LCFI117:
 8214              		.cfi_restore 84
 8215              		.cfi_restore 85
 8216              		.cfi_restore 82
ARM GAS  /tmp/ccvzGucR.s 			page 332


 8217              		.cfi_restore 83
 8218              		.cfi_restore 80
 8219              		.cfi_restore 81
 8220              		.cfi_def_cfa_offset 8
 8221              	.LVL509:
 8222              	.LBB2991:
 8223              	.LBB2988:
 8224              	.LBB2985:
 8225              	.LBB2980:
 734:Src/motor.cpp ****         return false;
 8226              		.loc 1 734 36 view .LVU2411
 8227 01b6 60EE870A 		vmul.f32	s1, s1, s14
 8228              	.LVL510:
 734:Src/motor.cpp ****         return false;
 8229              		.loc 1 734 36 view .LVU2412
 8230              	.LBE2980:
 8231              	.LBE2985:
 8232              	.LBE2988:
 8233              	.LBE2991:
 8234              		.loc 1 963 1 view .LVU2413
 8235 01ba BDE81040 		pop	{r4, lr}
 8236              	.LCFI118:
 8237              		.cfi_restore 14
 8238              		.cfi_restore 4
 8239              		.cfi_def_cfa_offset 0
 8240              	.LVL511:
 8241              	.LBB2992:
 8242              	.LBB2989:
 8243              	.LBB2986:
 8244              	.LBB2981:
 734:Src/motor.cpp ****         return false;
 8245              		.loc 1 734 36 view .LVU2414
 8246 01be 27EE870A 		vmul.f32	s0, s15, s14
 8247              	.LVL512:
 734:Src/motor.cpp ****         return false;
 8248              		.loc 1 734 36 view .LVU2415
 8249 01c2 FFF7FEBF 		b	_ZN5Motor26enqueue_modulation_timingsEff
 8250              	.LVL513:
 8251              	.L364:
 734:Src/motor.cpp ****         return false;
 8252              		.loc 1 734 36 view .LVU2416
 8253 01c6 00BF     		.align	2
 8254              	.L363:
 8255 01c8 00000000 		.word	current_meas_period
 8256 01cc DB0FC940 		.word	1086918619
 8257 01d0 DB0F4940 		.word	1078530011
 8258 01d4 00000000 		.word	vbus_voltage
 8259 01d8 ABAA2A3F 		.word	1059760811
 8260 01dc 00000000 		.word	htim15
 8261              	.LBE2981:
 8262              	.LBE2986:
 8263              	.LBE2989:
 8264              	.LBE2992:
 8265              		.cfi_endproc
 8266              	.LFE5026:
 8268              		.section	.text._ZN5Motor6updateEm,"ax",%progbits
 8269              		.align	1
ARM GAS  /tmp/ccvzGucR.s 			page 333


 8270              		.p2align 2,,3
 8271              		.global	_ZN5Motor6updateEm
 8272              		.syntax unified
 8273              		.thumb
 8274              		.thumb_func
 8275              		.fpu fpv4-sp-d16
 8277              	_ZN5Motor6updateEm:
 8278              	.LVL514:
 8279              	.LFB5027:
 964:Src/motor.cpp **** 
 965:Src/motor.cpp **** 
 966:Src/motor.cpp **** 
 967:Src/motor.cpp **** 
 968:Src/motor.cpp **** 
 969:Src/motor.cpp **** 
 970:Src/motor.cpp **** void Motor::update(uint32_t timestamp) {
 8280              		.loc 1 970 40 is_stmt 1 view -0
 8281              		.cfi_startproc
 8282              		@ args = 0, pretend = 0, frame = 8
 8283              		@ frame_needed = 0, uses_anonymous_args = 0
 971:Src/motor.cpp ****     // Load torque setpoint, convert to motor direction
 972:Src/motor.cpp ****     std::optional<float> maybe_torque = torque_setpoint_src_.present();
 8284              		.loc 1 972 5 view .LVU2418
 8285              	.LBB3414:
 8286              	.LBI3414:
 124:Inc/component.hpp **** public:
 125:Inc/component.hpp ****     void connect_to(OutputPort<T>* input_port) {
 126:Inc/component.hpp ****         content_ = input_port;
 127:Inc/component.hpp ****     }
 128:Inc/component.hpp **** 
 129:Inc/component.hpp ****     void connect_to(T* input_ptr) {
 130:Inc/component.hpp ****         content_ = input_ptr;
 131:Inc/component.hpp ****     }
 132:Inc/component.hpp **** 
 133:Inc/component.hpp ****     void disconnect() {
 134:Inc/component.hpp ****         content_ = (OutputPort<T>*)nullptr;
 135:Inc/component.hpp ****     }
 136:Inc/component.hpp **** 
 137:Inc/component.hpp ****     std::optional<T> present() {
 8287              		.loc 9 137 22 view .LVU2419
 8288              	.LBB3415:
 8289              	.LBB3416:
 8290              	.LBI3416:
1356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant(const variant& __rhs) = default;
1357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant(variant&&) = default;
1358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant& operator=(const variant&) = default;
1359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant& operator=(variant&&) = default;
1360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ~variant() = default;
1361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp,
1363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<sizeof...(_Types) != 0>,
1364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__not_in_place_tag<_Tp>>,
1365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename _Tj = __accepted_type<_Tp&&>,
1366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tj>
1367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				      && is_constructible_v<_Tj, _Tp>>>
1368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
1369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(_Tp&& __t)
ARM GAS  /tmp/ccvzGucR.s 			page 334


1370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	noexcept(is_nothrow_constructible_v<_Tj, _Tp>)
1371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: variant(in_place_index<__accepted_index<_Tp>>,
1372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Tp>(__t))
1373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename... _Args,
1376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tp>
1377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				      && is_constructible_v<_Tp, _Args...>>>
1378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_type_t<_Tp>, _Args&&... __args)
1380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: variant(in_place_index<__index_of<_Tp>>,
1381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...)
1382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename _Up, typename... _Args,
1385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tp>
1386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				      && is_constructible_v<_Tp,
1387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					   initializer_list<_Up>&, _Args...>>>
1388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_type_t<_Tp>, initializer_list<_Up> __il,
1390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Args&&... __args)
1391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: variant(in_place_index<__index_of<_Tp>>, __il,
1392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...)
1393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args,
1396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename _Tp = __to_type<_Np>,
1397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<is_constructible_v<_Tp, _Args...>>>
1398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_index_t<_Np>, _Args&&... __args)
1400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(in_place_index<_Np>, std::forward<_Args>(__args)...),
1401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Default_ctor_enabler(_Enable_default_constructor_tag{})
1402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Up, typename... _Args,
1405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename _Tp = __to_type<_Np>,
1406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<is_constructible_v<_Tp,
1407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 							 initializer_list<_Up>&,
1408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 							 _Args...>>>
1409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_index_t<_Np>, initializer_list<_Up> __il,
1411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Args&&... __args)
1412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(in_place_index<_Np>, __il, std::forward<_Args>(__args)...),
1413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Default_ctor_enabler(_Enable_default_constructor_tag{})
1414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<__exactly_once<__accepted_type<_Tp&&>>
1418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    && is_constructible_v<__accepted_type<_Tp&&>, _Tp>
1419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    && is_assignable_v<__accepted_type<_Tp&&>&, _Tp>,
1420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    variant&>
1421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	operator=(_Tp&& __rhs)
1422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	noexcept(is_nothrow_assignable_v<__accepted_type<_Tp&&>&, _Tp>
1423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		 && is_nothrow_constructible_v<__accepted_type<_Tp&&>, _Tp>)
1424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  constexpr auto __index = __accepted_index<_Tp>;
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if (index() == __index)
ARM GAS  /tmp/ccvzGucR.s 			page 335


1427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
1428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      using _Tj = __accepted_type<_Tp&&>;
1431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      if constexpr (is_nothrow_constructible_v<_Tj, _Tp>
1432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			    || !is_nothrow_move_constructible_v<_Tj>)
1433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		this->emplace<__index>(std::forward<_Tp>(__rhs));
1434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      else
1435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		operator=(variant(std::forward<_Tp>(__rhs)));
1436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return *this;
1438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename... _Args>
1441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<_Tp, _Args...> && __exactly_once<_Tp>,
1442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    _Tp&>
1443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(_Args&&... __args)
1444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  constexpr size_t __index = __index_of<_Tp>;
1446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return this->emplace<__index>(std::forward<_Args>(__args)...);
1447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename _Up, typename... _Args>
1450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>
1451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    && __exactly_once<_Tp>,
1452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    _Tp&>
1453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
1454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  constexpr size_t __index = __index_of<_Tp>;
1456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return this->emplace<__index>(__il, std::forward<_Args>(__args)...);
1457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
1460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,
1461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				       _Args...>,
1462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    variant_alternative_t<_Np, variant>&>
1463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(_Args&&... __args)
1464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  static_assert(_Np < sizeof...(_Types),
1466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			"The index must be in [0, number of alternatives)");
1467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  using type = variant_alternative_t<_Np, variant>;
1468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // Provide the strong exception-safety guarantee when possible,
1469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // to avoid becoming valueless.
1470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (is_nothrow_constructible_v<type, _Args...>)
1471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this,
1474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...);
1475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else if constexpr (is_scalar_v<type>)
1477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This might invoke a potentially-throwing conversion operator:
1479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      const type __tmp(std::forward<_Args>(__args)...);
1480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // But these steps won't throw:
1481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this, __tmp);
1483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
ARM GAS  /tmp/ccvzGucR.s 			page 336


1484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
1485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      && _Traits::_S_move_assign)
1486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This construction might throw:
1488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      variant __tmp(in_place_index<_Np>,
1489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			    std::forward<_Args>(__args)...);
1490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // But _Never_valueless_alt<type> means this won't:
1491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      *this = std::move(__tmp);
1492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This case only provides the basic exception-safety guarantee,
1496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // i.e. the variant can become valueless.
1497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __try
1499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant_construct_by_index<_Np>(*this,
1501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    std::forward<_Args>(__args)...);
1502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __catch (...)
1504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  this->_M_index = variant_npos;
1506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __throw_exception_again;
1507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::get<_Np>(*this);
1510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Up, typename... _Args>
1513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,
1514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				       initializer_list<_Up>&, _Args...>,
1515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    variant_alternative_t<_Np, variant>&>
1516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
1517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  static_assert(_Np < sizeof...(_Types),
1519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			"The index must be in [0, number of alternatives)");
1520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  using type = variant_alternative_t<_Np, variant>;
1521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // Provide the strong exception-safety guarantee when possible,
1522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // to avoid becoming valueless.
1523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (is_nothrow_constructible_v<type,
1524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						   initializer_list<_Up>&,
1525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						   _Args...>)
1526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this, __il,
1529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...);
1530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
1532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      && _Traits::_S_move_assign)
1533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This construction might throw:
1535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      variant __tmp(in_place_index<_Np>, __il,
1536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			    std::forward<_Args>(__args)...);
1537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // But _Never_valueless_alt<type> means this won't:
1538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      *this = std::move(__tmp);
1539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
ARM GAS  /tmp/ccvzGucR.s 			page 337


1541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This case only provides the basic exception-safety guarantee,
1543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // i.e. the variant can become valueless.
1544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __try
1546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant_construct_by_index<_Np>(*this, __il,
1548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    std::forward<_Args>(__args)...);
1549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __catch (...)
1551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  this->_M_index = variant_npos;
1553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __throw_exception_again;
1554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::get<_Np>(*this);
1557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr bool valueless_by_exception() const noexcept
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return !this->_M_valid(); }
1561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr size_t index() const noexcept
 8291              		.loc 10 1562 24 view .LVU2420
 8292              	.LBE3416:
 8293              	.LBE3415:
 8294              	.LBE3414:
 970:Src/motor.cpp ****     // Load torque setpoint, convert to motor direction
 8295              		.loc 1 970 40 is_stmt 0 view .LVU2421
 8296 0000 00B5     		push	{lr}
 8297              	.LCFI119:
 8298              		.cfi_def_cfa_offset 4
 8299              		.cfi_offset 14, -4
 8300 0002 2DED028B 		vpush.64	{d8}
 8301              	.LCFI120:
 8302              		.cfi_def_cfa_offset 12
 8303              		.cfi_offset 80, -12
 8304              		.cfi_offset 81, -8
 8305              	.LBB3481:
 8306              	.LBB3457:
 8307              	.LBB3418:
 8308              	.LBB3417:
1563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
1564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	using __index_type = typename _Base::__index_type;
1565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (__detail::__variant::__never_valueless<_Types...>())
1566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return this->_M_index;
 8309              		.loc 10 1566 17 view .LVU2422
 8310 0006 90F8B433 		ldrb	r3, [r0, #948]	@ zero_extendqisi2
 8311              	.LVL515:
 8312              		.loc 10 1566 17 view .LVU2423
 8313              	.LBE3417:
 8314              	.LBE3418:
 138:Inc/component.hpp ****         if (content_.index() == 2) {
 8315              		.loc 9 138 9 view .LVU2424
 8316 000a 022B     		cmp	r3, #2
 8317              	.LBE3457:
 8318              	.LBE3481:
 970:Src/motor.cpp ****     // Load torque setpoint, convert to motor direction
ARM GAS  /tmp/ccvzGucR.s 			page 338


 8319              		.loc 1 970 40 view .LVU2425
 8320 000c 83B0     		sub	sp, sp, #12
 8321              	.LCFI121:
 8322              		.cfi_def_cfa_offset 24
 8323              	.LBB3482:
 8324              	.LBB3458:
 8325              		.loc 9 138 9 view .LVU2426
 8326 000e 00F09880 		beq	.L424
 8327              	.LBB3419:
 139:Inc/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 140:Inc/component.hpp ****             return ptr ? ptr->present() : std::nullopt;
 141:Inc/component.hpp ****         } else if (content_.index() == 1) {
 8328              		.loc 9 141 16 view .LVU2427
 8329 0012 012B     		cmp	r3, #1
 8330 0014 00F08480 		beq	.L425
 8331              	.LVL516:
 8332              	.LBB3420:
 8333              	.LBI3420:
1567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
1568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return make_signed_t<__index_type>(this->_M_index);
1569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else
1570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return size_t(__index_type(this->_M_index + 1)) - 1;
1571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
1572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void
1574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       swap(variant& __rhs)
1575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       noexcept((__is_nothrow_swappable<_Types>::value && ...)
1576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       && is_nothrow_move_constructible_v<variant>)
1577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
1578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::__raw_idx_visit(
1579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
1580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
1581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
1582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
1583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (this->index() == __rhs_index)
1584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
1585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    auto& __this_mem =
1586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      std::get<__rhs_index>(*this);
1587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    using std::swap;
1588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    swap(__this_mem, __rhs_mem);
1589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
1590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		else
1591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
1592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    if (!this->valueless_by_exception()) [[__likely__]]
1593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      {
1594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			auto __tmp(std::move(__rhs_mem));
1595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			__rhs = std::move(*this);
1596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			this->_M_destructive_move(__rhs_index,
1597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						  std::move(__tmp));
1598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      }
1599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    else
1600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      {
1601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			this->_M_destructive_move(__rhs_index,
1602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						  std::move(__rhs_mem));
1603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			__rhs._M_reset();
1604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      }
1605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
ARM GAS  /tmp/ccvzGucR.s 			page 339


1606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
1607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    else
1608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
1609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (!this->valueless_by_exception()) [[__likely__]]
1610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
1611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    __rhs = std::move(*this);
1612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    this->_M_reset();
1613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
1614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
1615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __rhs);
1616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
1617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     private:
1619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #if defined(__clang__) && __clang_major__ <= 7
1621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     public:
1622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_M_u; // See https://bugs.llvm.org/show_bug.cgi?id=31852
1623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     private:
1624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #endif
1625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Vp>
1627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend constexpr decltype(auto)
1628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::__get(_Vp&& __v) noexcept;
1629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Vp>
1631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend void*
1632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::__get_storage(_Vp&& __v) noexcept;
1633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP) \
1635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Tp> \
1636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend constexpr bool \
1637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	operator __OP(const variant<_Tp...>& __lhs, \
1638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      const variant<_Tp...>& __rhs);
1639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(<)
1641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(<=)
1642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(==)
1643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(!=)
1644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(>=)
1645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(>)
1646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #undef _VARIANT_RELATION_FUNCTION_TEMPLATE
1648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
1649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
1651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(variant<_Types...>& __v)
 8334              		.loc 10 1652 5 is_stmt 1 view .LVU2428
 8335              	.LBB3421:
1653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(_Np < sizeof...(_Types),
1655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "The index must be in [0, number of alternatives)");
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if (__v.index() != _Np)
 8336              		.loc 10 1656 7 is_stmt 0 view .LVU2429
 8337 0018 002B     		cmp	r3, #0
 8338 001a 40F00481 		bne	.L386
 8339              	.LVL517:
ARM GAS  /tmp/ccvzGucR.s 			page 340


 8340              		.loc 10 1656 7 view .LVU2430
 8341              	.LBE3421:
 8342              	.LBE3420:
 8343              	.LBB3428:
 8344              	.LBI3428:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 8345              		.loc 2 701 2 is_stmt 1 view .LVU2431
 8346              	.LBB3429:
 8347              	.LBB3430:
 8348              	.LBI3430:
 8349              		.loc 4 76 5 view .LVU2432
 8350              		.loc 4 76 5 is_stmt 0 view .LVU2433
 8351              	.LBE3430:
 8352              	.LBB3431:
 8353              	.LBI3431:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 8354              		.loc 2 608 28 is_stmt 1 view .LVU2434
 8355              	.LBB3432:
 8356              	.LBI3432:
 8357              		.loc 4 76 5 view .LVU2435
 8358              		.loc 4 76 5 is_stmt 0 view .LVU2436
 8359              	.LBE3432:
 8360              	.LBB3433:
 8361              	.LBI3433:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 8362              		.loc 2 301 42 is_stmt 1 view .LVU2437
 8363              	.LBB3434:
 8364              	.LBI3434:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 8365              		.loc 2 116 2 view .LVU2438
 8366              	.LBB3435:
 8367              	.LBI3435:
 8368              		.loc 4 76 5 view .LVU2439
 8369              		.loc 4 76 5 is_stmt 0 view .LVU2440
 8370              	.LBE3435:
 8371              	.LBB3436:
 8372              	.LBI3436:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 8373              		.loc 2 204 6 is_stmt 1 view .LVU2441
 8374              	.LBB3437:
 8375              	.LBB3438:
 8376              	.LBI3438:
 8377              		.loc 4 76 5 view .LVU2442
 8378              		.loc 4 76 5 is_stmt 0 view .LVU2443
 8379              	.LBE3438:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 8380              		.loc 2 205 47 view .LVU2444
 8381 001e D0EDEC7A 		vldr.32	s15, [r0, #944]
 8382              	.LVL518:
 8383              	.L368:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 8384              		.loc 2 205 47 view .LVU2445
 8385              	.LBE3437:
 8386              	.LBE3436:
 8387              	.LBE3434:
 8388              	.LBE3433:
 8389              	.LBE3431:
ARM GAS  /tmp/ccvzGucR.s 			page 341


 8390              	.LBE3429:
 8391              	.LBE3428:
 8392              	.LBE3419:
 8393              	.LBE3458:
 8394              	.LBE3482:
 973:Src/motor.cpp ****     if (!maybe_torque.has_value()) {
 8395              		.loc 1 973 5 is_stmt 1 view .LVU2446
 974:Src/motor.cpp ****         error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_c
 975:Src/motor.cpp **** 
 976:Src/motor.cpp ****         return;
 977:Src/motor.cpp ****     }
 978:Src/motor.cpp ****     float torque = direction_ * *maybe_torque;
 8396              		.loc 1 978 5 view .LVU2447
 8397              	.LBB3483:
 8398              	.LBB3484:
 8399              	.LBB3485:
  89:Inc/component.hpp ****             return content_;
 8400              		.loc 9 89 9 is_stmt 0 view .LVU2448
 8401 0022 D0F8D033 		ldr	r3, [r0, #976]
 8402              	.LBE3485:
 8403              	.LBE3484:
 8404              	.LBE3483:
 8405              		.loc 1 978 34 view .LVU2449
 8406 0026 90EDF07A 		vldr.32	s14, [r0, #960]
 8407              	.LBB3506:
 8408              	.LBB3501:
 8409              	.LBB3496:
  89:Inc/component.hpp ****             return content_;
 8410              		.loc 9 89 9 view .LVU2450
 8411 002a 012B     		cmp	r3, #1
 8412              	.LBE3496:
 8413              	.LBE3501:
 8414              	.LBE3506:
 8415              		.loc 1 978 34 view .LVU2451
 8416 002c 27EE877A 		vmul.f32	s14, s15, s14
 8417              	.LVL519:
 979:Src/motor.cpp **** 
 980:Src/motor.cpp ****     // Load setpoints from previous iteration.
 981:Src/motor.cpp ****     float id, iq;
 8418              		.loc 1 981 5 is_stmt 1 view .LVU2452
 982:Src/motor.cpp ****     if (auto prev = Idq_setpoint_.previous()) {
 8419              		.loc 1 982 5 view .LVU2453
 8420              	.LBB3507:
 8421              	.LBB3502:
 8422              	.LBI3484:
  88:Inc/component.hpp ****         if (age_ == 1) {
 8423              		.loc 9 88 22 view .LVU2454
 8424              	.LBB3497:
  89:Inc/component.hpp ****             return content_;
 8425              		.loc 9 89 9 is_stmt 0 view .LVU2455
 8426 0030 00F08480 		beq	.L396
 8427              	.LVL520:
 8428              	.L430:
  89:Inc/component.hpp ****             return content_;
 8429              		.loc 9 89 9 view .LVU2456
 8430              	.LBE3497:
 8431              	.LBE3502:
ARM GAS  /tmp/ccvzGucR.s 			page 342


 983:Src/motor.cpp ****         id = prev->first;
 984:Src/motor.cpp ****         iq = prev->second;
 985:Src/motor.cpp ****     } else {
 986:Src/motor.cpp ****         id = 0.0f;
 8432              		.loc 1 986 12 view .LVU2457
 8433 0034 DFED7D6A 		vldr.32	s13, .L434
 8434              	.L397:
 8435              	.LVL521:
 8436              		.loc 1 986 12 view .LVU2458
 8437              	.LBE3507:
 987:Src/motor.cpp ****         iq = 0.0f;
 988:Src/motor.cpp **** }
 989:Src/motor.cpp ****     // Load effective current limit
 990:Src/motor.cpp ****     float ilim = axis_->motor_.effective_current_lim_;
 8438              		.loc 1 990 5 is_stmt 1 view .LVU2459
 8439              		.loc 1 990 25 is_stmt 0 view .LVU2460
 8440 0038 8368     		ldr	r3, [r0, #8]
 991:Src/motor.cpp **** 
 992:Src/motor.cpp **** 
 993:Src/motor.cpp ****     id = std::clamp(id, -ilim*0.99f, ilim*0.99f); // 1% space reserved for Iq to avoid numerical is
 8441              		.loc 1 993 30 view .LVU2461
 8442 003a 9FED7D6A 		vldr.32	s12, .L434+4
 990:Src/motor.cpp **** 
 8443              		.loc 1 990 25 view .LVU2462
 8444 003e DB6E     		ldr	r3, [r3, #108]
 990:Src/motor.cpp **** 
 8445              		.loc 1 990 11 view .LVU2463
 8446 0040 D3ED297A 		vldr.32	s15, [r3, #164]
 8447              	.LVL522:
 8448              		.loc 1 993 5 is_stmt 1 view .LVU2464
 8449              		.loc 1 993 30 is_stmt 0 view .LVU2465
 8450 0044 27EEC68A 		vnmul.f32	s16, s15, s12
 8451              	.LVL523:
 8452              	.LBB3508:
 8453              	.LBI3508:
3675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 8454              		.loc 14 3675 5 is_stmt 1 view .LVU2466
 8455              	.LBB3509:
 8456              		.loc 14 3678 29 is_stmt 0 view .LVU2467
 8457 0048 B4EEE68A 		vcmpe.f32	s16, s13
 8458 004c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8459 0050 08DC     		bgt	.L371
 8460              	.LBE3509:
 8461              	.LBE3508:
 8462              		.loc 1 993 42 view .LVU2468
 8463 0052 27EE868A 		vmul.f32	s16, s15, s12
 8464              	.LBB3511:
 8465              	.LBB3510:
 8466              		.loc 14 3678 29 view .LVU2469
 8467 0056 B4EEE68A 		vcmpe.f32	s16, s13
 8468 005a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8469 005e 58BF     		it	pl
 8470 0060 B0EE668A 		vmovpl.f32	s16, s13
 8471              	.L371:
 8472              	.LVL524:
 8473              		.loc 14 3678 29 view .LVU2470
 8474              	.LBE3510:
ARM GAS  /tmp/ccvzGucR.s 			page 343


 8475              	.LBE3511:
 994:Src/motor.cpp **** 
 995:Src/motor.cpp **** 
 996:Src/motor.cpp ****     // Convert requested torque to current
 997:Src/motor.cpp **** 
 998:Src/motor.cpp ****     iq = torque / axis_->motor_.config_.torque_constant;
 8476              		.loc 1 998 5 is_stmt 1 view .LVU2471
 999:Src/motor.cpp ****     
1000:Src/motor.cpp **** 
1001:Src/motor.cpp ****     // 2-norm clamping where Id takes priority
1002:Src/motor.cpp ****     float iq_lim_sqr = SQ(ilim) - SQ(id);
 8477              		.loc 1 1002 11 is_stmt 0 view .LVU2472
 8478 0064 28EE480A 		vnmul.f32	s0, s16, s16
 998:Src/motor.cpp ****     
 8479              		.loc 1 998 33 view .LVU2473
 8480 0068 5B68     		ldr	r3, [r3, #4]
 8481              		.loc 1 1002 11 view .LVU2474
 8482 006a A7EEA70A 		vfma.f32	s0, s15, s15
 998:Src/motor.cpp ****     
 8483              		.loc 1 998 17 view .LVU2475
 8484 006e D3ED087A 		vldr.32	s15, [r3, #32]
 8485              	.LVL525:
1003:Src/motor.cpp ****     float Iq_lim = (iq_lim_sqr <= 0.0f) ? 0.0f : sqrt(iq_lim_sqr);
 8486              		.loc 1 1003 41 view .LVU2476
 8487 0072 B5EEC00A 		vcmpe.f32	s0, #0
 8488 0076 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 998:Src/motor.cpp ****     
 8489              		.loc 1 998 17 view .LVU2477
 8490 007a C7EE278A 		vdiv.f32	s17, s14, s15
 8491              	.LVL526:
1002:Src/motor.cpp ****     float Iq_lim = (iq_lim_sqr <= 0.0f) ? 0.0f : sqrt(iq_lim_sqr);
 8492              		.loc 1 1002 5 is_stmt 1 view .LVU2478
 8493              		.loc 1 1003 5 view .LVU2479
 8494              		.loc 1 1003 41 is_stmt 0 view .LVU2480
 8495 007e 6FD8     		bhi	.L426
 8496              		.loc 1 1003 41 view .LVU2481
 8497 0080 9FED6C7A 		vldr.32	s14, .L434+8
 8498              	.LVL527:
 8499              		.loc 1 1003 41 view .LVU2482
 8500 0084 DFED697A 		vldr.32	s15, .L434
 8501              	.LVL528:
 8502              	.L373:
1004:Src/motor.cpp ****     iq = std::clamp(iq, -Iq_lim, Iq_lim);
 8503              		.loc 1 1004 5 is_stmt 1 discriminator 4 view .LVU2483
 8504              	.LBB3512:
 8505              	.LBI3512:
3675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algo.h ****     {
 8506              		.loc 14 3675 5 discriminator 4 view .LVU2484
 8507              	.LBB3513:
 8508              		.loc 14 3678 29 is_stmt 0 discriminator 4 view .LVU2485
 8509 0088 F4EEC78A 		vcmpe.f32	s17, s14
 8510 008c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8511 0090 08D4     		bmi	.L376
 8512              		.loc 14 3678 29 view .LVU2486
 8513 0092 F4EEE78A 		vcmpe.f32	s17, s15
 8514 0096 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8515 009a D4BF     		ite	le
ARM GAS  /tmp/ccvzGucR.s 			page 344


 8516 009c B0EE687A 		vmovle.f32	s14, s17
 8517 00a0 B0EE677A 		vmovgt.f32	s14, s15
 8518              	.L376:
 8519              	.LVL529:
 8520              		.loc 14 3678 29 view .LVU2487
 8521              	.LBE3513:
 8522              	.LBE3512:
1005:Src/motor.cpp **** 
1006:Src/motor.cpp ****     if (axis_->motor_.config_.motor_type != Motor::MOTOR_TYPE_GIMBAL) {
 8523              		.loc 1 1006 5 is_stmt 1 view .LVU2488
 8524 00a4 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 8525 00a8 022B     		cmp	r3, #2
 8526 00aa 06D0     		beq	.L378
1007:Src/motor.cpp ****         Idq_setpoint_ = {id, iq};
 8527              		.loc 1 1007 9 view .LVU2489
 8528              	.LVL530:
 8529              	.LBB3514:
 8530              	.LBI3514:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8531              		.loc 5 352 12 view .LVU2490
 8532              	.LBB3515:
 8533              	.LBI3515:
 8534              		.loc 4 76 5 view .LVU2491
 8535              		.loc 4 76 5 is_stmt 0 view .LVU2492
 8536              	.LBE3515:
 8537              	.LBB3516:
 8538              	.LBI3516:
 8539              		.loc 4 76 5 is_stmt 1 view .LVU2493
 8540              		.loc 4 76 5 is_stmt 0 view .LVU2494
 8541              	.LBE3516:
 8542              	.LBE3514:
 8543              	.LBB3517:
 8544              	.LBI3517:
  52:Inc/component.hpp ****         content_ = value;
 8545              		.loc 9 52 10 is_stmt 1 view .LVU2495
 8546              	.LBB3518:
 8547              	.LBB3519:
 8548              	.LBI3519:
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 8549              		.loc 5 390 7 view .LVU2496
 8550              	.LBE3519:
  54:Inc/component.hpp ****     }
 8551              		.loc 9 54 14 is_stmt 0 view .LVU2497
 8552 00ac 0023     		movs	r3, #0
 8553              	.LBB3521:
 8554              	.LBB3520:
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = __p.second;
 8555              		.loc 5 395 8 view .LVU2498
 8556 00ae 80EDF58A 		vstr.32	s16, [r0, #980]
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 8557              		.loc 5 396 9 view .LVU2499
 8558 00b2 80EDF67A 		vstr.32	s14, [r0, #984]
 8559              	.LVL531:
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 8560              		.loc 5 396 9 view .LVU2500
 8561              	.LBE3520:
 8562              	.LBE3521:
ARM GAS  /tmp/ccvzGucR.s 			page 345


  54:Inc/component.hpp ****     }
 8563              		.loc 9 54 14 view .LVU2501
 8564 00b6 C0F8D033 		str	r3, [r0, #976]
 8565              	.LVL532:
 8566              	.L378:
  54:Inc/component.hpp ****     }
 8567              		.loc 9 54 14 view .LVU2502
 8568              	.LBE3518:
 8569              	.LBE3517:
1008:Src/motor.cpp ****     }
1009:Src/motor.cpp **** 
1010:Src/motor.cpp ****     // This update call is in bit a weird position because it depends on the
1011:Src/motor.cpp ****     // Id,q setpoint but outputs the phase velocity that we depend on later
1012:Src/motor.cpp ****     // in this function.
1013:Src/motor.cpp ****     // A cleaner fix would be to take the feedforward calculation out of here
1014:Src/motor.cpp ****     // and turn it into a separate component.
1015:Src/motor.cpp **** 
1016:Src/motor.cpp **** 
1017:Src/motor.cpp ****     float vd = 0.0f;
 8570              		.loc 1 1017 5 is_stmt 1 view .LVU2503
1018:Src/motor.cpp ****     float vq = 0.0f;
 8571              		.loc 1 1018 5 view .LVU2504
1019:Src/motor.cpp **** 
1020:Src/motor.cpp ****     std::optional<float> phase_vel = phase_vel_src_.present();
 8572              		.loc 1 1020 5 view .LVU2505
 8573              	.LBB3522:
 8574              	.LBI3522:
 137:Inc/component.hpp ****         if (content_.index() == 2) {
 8575              		.loc 9 137 22 view .LVU2506
 8576              	.LBB3523:
 8577              	.LBB3524:
 8578              	.LBI3524:
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 8579              		.loc 10 1562 24 view .LVU2507
 8580              	.LBB3525:
1566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
 8581              		.loc 10 1566 17 is_stmt 0 view .LVU2508
 8582 00ba 90F8BC33 		ldrb	r3, [r0, #956]	@ zero_extendqisi2
 8583              	.LVL533:
1566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
 8584              		.loc 10 1566 17 view .LVU2509
 8585              	.LBE3525:
 8586              	.LBE3524:
 138:Inc/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 8587              		.loc 9 138 9 view .LVU2510
 8588 00be 022B     		cmp	r3, #2
 8589 00c0 58D0     		beq	.L427
 8590              	.LBB3526:
 8591              		.loc 9 141 16 view .LVU2511
 8592 00c2 012B     		cmp	r3, #1
 8593 00c4 00F09C80 		beq	.L428
 8594              	.LVL534:
 8595              	.LBB3527:
 8596              	.LBI3527:
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 8597              		.loc 10 1652 5 is_stmt 1 view .LVU2512
 8598              	.LBB3528:
ARM GAS  /tmp/ccvzGucR.s 			page 346


 8599              		.loc 10 1656 7 is_stmt 0 view .LVU2513
 8600 00c8 002B     		cmp	r3, #0
 8601 00ca 40F0AC80 		bne	.L386
 8602              	.LVL535:
 8603              		.loc 10 1656 7 view .LVU2514
 8604              	.LBE3528:
 8605              	.LBE3527:
 8606              	.LBB3529:
 8607              	.LBI3529:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 8608              		.loc 2 701 2 is_stmt 1 view .LVU2515
 8609              	.LBB3530:
 8610              	.LBB3531:
 8611              	.LBI3531:
 8612              		.loc 4 76 5 view .LVU2516
 8613              		.loc 4 76 5 is_stmt 0 view .LVU2517
 8614              	.LBE3531:
 8615              	.LBB3532:
 8616              	.LBI3532:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 8617              		.loc 2 608 28 is_stmt 1 view .LVU2518
 8618              	.LBB3533:
 8619              	.LBI3533:
 8620              		.loc 4 76 5 view .LVU2519
 8621              		.loc 4 76 5 is_stmt 0 view .LVU2520
 8622              	.LBE3533:
 8623              	.LBB3534:
 8624              	.LBI3534:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 8625              		.loc 2 301 42 is_stmt 1 view .LVU2521
 8626              	.LBB3535:
 8627              	.LBI3535:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 8628              		.loc 2 116 2 view .LVU2522
 8629              	.LBB3536:
 8630              	.LBI3536:
 8631              		.loc 4 76 5 view .LVU2523
 8632              		.loc 4 76 5 is_stmt 0 view .LVU2524
 8633              	.LBE3536:
 8634              	.LBB3537:
 8635              	.LBI3537:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 8636              		.loc 2 204 6 is_stmt 1 view .LVU2525
 8637              	.LBB3538:
 8638              	.LBB3539:
 8639              	.LBI3539:
 8640              		.loc 4 76 5 view .LVU2526
 8641              		.loc 4 76 5 is_stmt 0 view .LVU2527
 8642              	.LBE3539:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 8643              		.loc 2 205 47 view .LVU2528
 8644 00ce 90EDEE6A 		vldr.32	s12, [r0, #952]
 8645              	.LVL536:
 8646              	.L382:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 8647              		.loc 2 205 47 view .LVU2529
 8648              	.LBE3538:
ARM GAS  /tmp/ccvzGucR.s 			page 347


 8649              	.LBE3537:
 8650              	.LBE3535:
 8651              	.LBE3534:
 8652              	.LBE3532:
 8653              	.LBE3530:
 8654              	.LBE3529:
 8655              	.LBE3526:
 8656              	.LBE3523:
 8657              	.LBE3522:
1021:Src/motor.cpp **** 
1022:Src/motor.cpp ****     if (config_.R_wL_FF_enable) {
 8658              		.loc 1 1022 5 is_stmt 1 view .LVU2530
 8659              		.loc 1 1022 9 is_stmt 0 view .LVU2531
 8660 00d2 4368     		ldr	r3, [r0, #4]
 8661              		.loc 1 1022 5 view .LVU2532
 8662 00d4 93F82024 		ldrb	r2, [r3, #1056]	@ zero_extendqisi2
 8663 00d8 002A     		cmp	r2, #0
 8664 00da 53D1     		bne	.L429
1023:Src/motor.cpp ****         if (!phase_vel.has_value()) {
1024:Src/motor.cpp ****             error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | stat
1025:Src/motor.cpp ****             return;
1026:Src/motor.cpp ****         }
1027:Src/motor.cpp **** 
1028:Src/motor.cpp ****         vd -= *phase_vel * config_.phase_inductance * iq;
1029:Src/motor.cpp ****         vq += *phase_vel * config_.phase_inductance * id;
1030:Src/motor.cpp ****         vd += config_.phase_resistance * id;
1031:Src/motor.cpp ****         vq += config_.phase_resistance * iq;
1032:Src/motor.cpp ****     }
1033:Src/motor.cpp **** 
1034:Src/motor.cpp ****     if (config_.bEMF_FF_enable) {
 8665              		.loc 1 1034 5 is_stmt 1 view .LVU2533
 8666 00dc 93F82124 		ldrb	r2, [r3, #1057]	@ zero_extendqisi2
 8667 00e0 002A     		cmp	r2, #0
 8668 00e2 70D0     		beq	.L423
 8669 00e4 DFED517A 		vldr.32	s15, .L434
 8670              	.LVL537:
 8671              		.loc 1 1034 5 is_stmt 0 view .LVU2534
 8672 00e8 F0EE676A 		vmov.f32	s13, s15
 8673              	.LVL538:
 8674              	.L389:
1035:Src/motor.cpp ****         if (!phase_vel.has_value()) {
1036:Src/motor.cpp ****             error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | stat
1037:Src/motor.cpp ****             return;
1038:Src/motor.cpp ****         }
1039:Src/motor.cpp **** 
1040:Src/motor.cpp ****         vq += *phase_vel * 0.4444444f * (config_.torque_constant / config_.pole_pairs);
 8675              		.loc 1 1040 9 is_stmt 1 view .LVU2535
 8676              		.loc 1 1040 66 is_stmt 0 view .LVU2536
 8677 00ec 93ED017A 		vldr.32	s14, [r3, #4]	@ int
 8678              	.LVL539:
 8679              		.loc 1 1040 66 view .LVU2537
 8680 00f0 D3ED084A 		vldr.32	s9, [r3, #32]
 8681              		.loc 1 1040 26 view .LVU2538
 8682 00f4 9FED505A 		vldr.32	s10, .L434+12
 8683              	.LBB3570:
 8684              	.LBB3571:
 8685              	.LBB3572:
ARM GAS  /tmp/ccvzGucR.s 			page 348


 8686              	.LBB3573:
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = __p.second;
 8687              		.loc 5 395 8 view .LVU2539
 8688 00f8 C0EDF26A 		vstr.32	s13, [r0, #968]
 8689              	.LBE3573:
 8690              	.LBE3572:
 8691              	.LBE3571:
 8692              	.LBE3570:
 8693              		.loc 1 1040 66 view .LVU2540
 8694 00fc B8EEC77A 		vcvt.f32.s32	s14, s14
 8695              		.loc 1 1040 26 view .LVU2541
 8696 0100 26EE056A 		vmul.f32	s12, s12, s10
 8697              	.LVL540:
 8698              		.loc 1 1040 66 view .LVU2542
 8699 0104 C4EE875A 		vdiv.f32	s11, s9, s14
 8700              	.LBB3586:
 8701              	.LBB3581:
  54:Inc/component.hpp ****     }
 8702              		.loc 9 54 14 view .LVU2543
 8703 0108 0023     		movs	r3, #0
 8704 010a C0F8C433 		str	r3, [r0, #964]
 8705              	.LBE3581:
 8706              	.LBE3586:
 8707              		.loc 1 1040 12 view .LVU2544
 8708 010e E6EE257A 		vfma.f32	s15, s12, s11
 8709              	.LVL541:
1041:Src/motor.cpp ****     }
1042:Src/motor.cpp **** 
1043:Src/motor.cpp ****     Vdq_setpoint_ = {vd, vq};
 8710              		.loc 1 1043 5 is_stmt 1 view .LVU2545
 8711              	.LBB3587:
 8712              	.LBI3587:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8713              		.loc 5 352 12 view .LVU2546
 8714              	.LBB3588:
 8715              	.LBI3588:
 8716              		.loc 4 76 5 view .LVU2547
 8717              		.loc 4 76 5 is_stmt 0 view .LVU2548
 8718              	.LBE3588:
 8719              	.LBB3589:
 8720              	.LBI3589:
 8721              		.loc 4 76 5 is_stmt 1 view .LVU2549
 8722              		.loc 4 76 5 is_stmt 0 view .LVU2550
 8723              	.LBE3589:
 8724              	.LBE3587:
 8725              	.LBB3594:
 8726              	.LBI3570:
  52:Inc/component.hpp ****         content_ = value;
 8727              		.loc 9 52 10 is_stmt 1 view .LVU2551
 8728              	.LBB3582:
 8729              	.LBB3577:
 8730              	.LBI3572:
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 8731              		.loc 5 390 7 view .LVU2552
 8732              	.LBB3574:
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 8733              		.loc 5 396 9 is_stmt 0 view .LVU2553
ARM GAS  /tmp/ccvzGucR.s 			page 349


 8734 0112 C0EDF37A 		vstr.32	s15, [r0, #972]
 8735              	.LVL542:
 8736              	.L432:
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 8737              		.loc 5 396 9 view .LVU2554
 8738              	.LBE3574:
 8739              	.LBE3577:
 8740              	.LBE3582:
 8741              	.LBE3594:
1044:Src/motor.cpp **** 
1045:Src/motor.cpp **** }
 8742              		.loc 1 1045 1 view .LVU2555
 8743 0116 03B0     		add	sp, sp, #12
 8744              	.LCFI122:
 8745              		.cfi_remember_state
 8746              		.cfi_def_cfa_offset 12
 8747              		@ sp needed
 8748 0118 BDEC028B 		vldm	sp!, {d8}
 8749              	.LCFI123:
 8750              		.cfi_restore 80
 8751              		.cfi_restore 81
 8752              		.cfi_def_cfa_offset 4
 8753 011c 5DF804FB 		ldr	pc, [sp], #4
 8754              	.LVL543:
 8755              	.L425:
 8756              	.LCFI124:
 8757              		.cfi_restore_state
 8758              	.LBB3595:
 8759              	.LBB3459:
 8760              	.LBB3454:
 8761              	.LBB3439:
 142:Inc/component.hpp ****             T* ptr = std::get<1>(content_);
 8762              		.loc 9 142 16 view .LVU2556
 8763 0120 D0F8B033 		ldr	r3, [r0, #944]
 8764              	.LVL544:
 143:Inc/component.hpp ****             return ptr ? std::make_optional(*ptr) : std::nullopt;
 8765              		.loc 9 143 58 view .LVU2557
 8766 0124 9BB1     		cbz	r3, .L367
 8767              	.LVL545:
 8768              	.LBB3440:
 8769              	.LBI3440:
 918:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 919:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 920:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 921:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value() const&
 922:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 923:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 924:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? this->_M_get()
 925:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), this->_M_get());
 926:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 927:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 928:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 929:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value()&
 930:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 931:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 932:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? this->_M_get()
 933:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), this->_M_get());
ARM GAS  /tmp/ccvzGucR.s 			page 350


 934:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 935:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 936:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&&
 937:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value()&&
 938:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 939:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 940:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? std::move(this->_M_get())
 941:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 942:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 943:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 944:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&&
 945:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value() const&&
 946:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 947:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 948:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? std::move(this->_M_get())
 949:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 950:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 951:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 952:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 953:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr _Tp
 954:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	value_or(_Up&& __u) const&
 955:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 956:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_copy_constructible_v<_Tp>);
 957:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_convertible_v<_Up&&, _Tp>);
 958:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 959:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_is_engaged()
 960:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    ? this->_M_get() : static_cast<_Tp>(std::forward<_Up>(__u));
 961:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 962:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 963:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 964:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr _Tp
 965:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	value_or(_Up&& __u) &&
 966:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 967:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_move_constructible_v<_Tp>);
 968:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_convertible_v<_Up&&, _Tp>);
 969:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 970:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_is_engaged()
 971:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    ? std::move(this->_M_get())
 972:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : static_cast<_Tp>(std::forward<_Up>(__u));
 973:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 974:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 975:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       void reset() noexcept { this->_M_reset(); }
 976:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 977:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 978:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 979:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     using __optional_relop_t =
 980:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       enable_if_t<is_convertible<_Tp, bool>::value, bool>;
 981:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 982:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Comparisons between optional values.
 983:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 984:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
 985:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
 986:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() == declval<_Up>())>
 987:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 988:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return static_cast<bool>(__lhs) == static_cast<bool>(__rhs)
 989:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	     && (!__lhs || *__lhs == *__rhs);
 990:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
ARM GAS  /tmp/ccvzGucR.s 			page 351


 991:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 992:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 993:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
 994:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
 995:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() != declval<_Up>())>
 996:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 997:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return static_cast<bool>(__lhs) != static_cast<bool>(__rhs)
 998:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	|| (static_cast<bool>(__lhs) && *__lhs != *__rhs);
 999:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1000:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1001:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1002:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1003:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1004:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() < declval<_Up>())>
1005:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1006:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return static_cast<bool>(__rhs) && (!__lhs || *__lhs < *__rhs);
1007:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1008:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1009:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1010:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1011:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1012:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() > declval<_Up>())>
1013:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1014:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return static_cast<bool>(__lhs) && (!__rhs || *__lhs > *__rhs);
1015:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1016:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1017:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1018:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1019:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1020:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() <= declval<_Up>())>
1021:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1022:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return !__lhs || (static_cast<bool>(__rhs) && *__lhs <= *__rhs);
1023:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1024:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1025:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1026:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1027:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1028:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() >= declval<_Up>())>
1029:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1030:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return !__rhs || (static_cast<bool>(__lhs) && *__lhs >= *__rhs);
1031:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1032:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1033:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #ifdef __cpp_lib_three_way_comparison
1034:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, three_way_comparable_with<_Tp> _Up>
1035:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr compare_three_way_result_t<_Tp, _Up>
1036:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=>(const optional<_Tp>& __x, const optional<_Up>& __y)
1037:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
1038:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       return __x && __y ? *__x <=> *__y : bool(__x) <=> bool(__y);
1039:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     }
1040:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #endif
1041:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1042:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Comparisons with nullopt.
1043:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1044:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1045:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(const optional<_Tp>& __lhs, nullopt_t) noexcept
1046:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs; }
1047:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
ARM GAS  /tmp/ccvzGucR.s 			page 352


1048:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #ifdef __cpp_lib_three_way_comparison
1049:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1050:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr strong_ordering
1051:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=>(const optional<_Tp>& __x, nullopt_t) noexcept
1052:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return bool(__x) <=> false; }
1053:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #else
1054:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1055:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1056:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(nullopt_t, const optional<_Tp>& __rhs) noexcept
1057:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs; }
1058:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1059:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1061:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(const optional<_Tp>& __lhs, nullopt_t) noexcept
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return static_cast<bool>(__lhs); }
1063:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1065:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1066:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(nullopt_t, const optional<_Tp>& __rhs) noexcept
1067:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return static_cast<bool>(__rhs); }
1068:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1069:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1070:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1071:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(const optional<_Tp>& /* __lhs */, nullopt_t) noexcept
1072:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return false; }
1073:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1074:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1075:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1076:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(nullopt_t, const optional<_Tp>& __rhs) noexcept
1077:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return static_cast<bool>(__rhs); }
1078:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1079:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1080:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1081:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(const optional<_Tp>& __lhs, nullopt_t) noexcept
1082:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return static_cast<bool>(__lhs); }
1083:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1084:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1085:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1086:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(nullopt_t, const optional<_Tp>& /* __rhs */) noexcept
1087:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return false; }
1088:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1089:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1090:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1091:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(const optional<_Tp>& __lhs, nullopt_t) noexcept
1092:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs; }
1093:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1094:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1095:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1096:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(nullopt_t, const optional<_Tp>& /* __rhs */) noexcept
1097:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return true; }
1098:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1099:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(const optional<_Tp>& /* __lhs */, nullopt_t) noexcept
1102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return true; }
1103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
ARM GAS  /tmp/ccvzGucR.s 			page 353


1105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr bool
1106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(nullopt_t, const optional<_Tp>& __rhs) noexcept
1107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs; }
1108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #endif // three-way-comparison
1109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Comparisons with value type.
1111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(const optional<_Tp>& __lhs, const _Up& __rhs)
1114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() == declval<_Up>())>
1115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __lhs && *__lhs == __rhs; }
1116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator==(const _Up& __lhs, const optional<_Tp>& __rhs)
1120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() == declval<_Tp>())>
1121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __rhs && __lhs == *__rhs; }
1122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(const optional<_Tp>& __lhs, const _Up& __rhs)
1126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() != declval<_Up>())>
1127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs || *__lhs != __rhs; }
1128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator!=(const _Up& __lhs, const optional<_Tp>& __rhs)
1132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() != declval<_Tp>())>
1133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs || __lhs != *__rhs; }
1134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(const optional<_Tp>& __lhs, const _Up& __rhs)
1138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() < declval<_Up>())>
1139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs || *__lhs < __rhs; }
1140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<(const _Up& __lhs, const optional<_Tp>& __rhs)
1144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() < declval<_Tp>())>
1145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __rhs && __lhs < *__rhs; }
1146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(const optional<_Tp>& __lhs, const _Up& __rhs)
1150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() > declval<_Up>())>
1151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __lhs && *__lhs > __rhs; }
1152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>(const _Up& __lhs, const optional<_Tp>& __rhs)
1156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() > declval<_Tp>())>
1157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs || __lhs > *__rhs; }
1158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(const optional<_Tp>& __lhs, const _Up& __rhs)
ARM GAS  /tmp/ccvzGucR.s 			page 354


1162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() <= declval<_Up>())>
1163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__lhs || *__lhs <= __rhs; }
1164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=(const _Up& __lhs, const optional<_Tp>& __rhs)
1168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() <= declval<_Tp>())>
1169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __rhs && __lhs <= *__rhs; }
1170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(const optional<_Tp>& __lhs, const _Up& __rhs)
1174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Tp>() >= declval<_Up>())>
1175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return __lhs && *__lhs >= __rhs; }
1176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr auto
1179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator>=(const _Up& __lhs, const optional<_Tp>& __rhs)
1180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     -> __optional_relop_t<decltype(declval<_Up>() >= declval<_Tp>())>
1181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return !__rhs || __lhs >= *__rhs; }
1182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #ifdef __cpp_lib_three_way_comparison
1184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
1185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr compare_three_way_result_t<_Tp, _Up>
1186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     operator<=>(const optional<_Tp>& __x, const _Up& __v)
1187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return bool(__x) ? *__x <=> __v : strong_ordering::less; }
1188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #endif
1189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Swap and creation functions.
1191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // 2748. swappable traits for optionals
1194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     inline enable_if_t<is_move_constructible_v<_Tp> && is_swappable_v<_Tp>>
1196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     swap(optional<_Tp>& __lhs, optional<_Tp>& __rhs)
1197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     noexcept(noexcept(__lhs.swap(__rhs)))
1198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { __lhs.swap(__rhs); }
1199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     enable_if_t<!(is_move_constructible_v<_Tp> && is_swappable_v<_Tp>)>
1202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     swap(optional<_Tp>&, optional<_Tp>&) = delete;
1203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
1204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
1205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     constexpr optional<decay_t<_Tp>>
1206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     make_optional(_Tp&& __t)
 8770              		.loc 2 1206 5 is_stmt 1 view .LVU2558
 8771              	.LBB3441:
 8772              	.LBB3442:
 8773              	.LBI3442:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 8774              		.loc 2 701 2 view .LVU2559
 8775              	.LBB3443:
 8776              	.LBI3443:
 8777              		.loc 4 76 5 view .LVU2560
 8778              		.loc 4 76 5 is_stmt 0 view .LVU2561
 8779              	.LBE3443:
 8780              	.LBB3444:
ARM GAS  /tmp/ccvzGucR.s 			page 355


 8781              	.LBI3444:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 8782              		.loc 2 608 28 is_stmt 1 view .LVU2562
 8783              	.LBB3445:
 8784              	.LBI3445:
 8785              		.loc 4 76 5 view .LVU2563
 8786              		.loc 4 76 5 is_stmt 0 view .LVU2564
 8787              	.LBE3445:
 8788              	.LBB3446:
 8789              	.LBI3446:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 8790              		.loc 2 301 42 is_stmt 1 view .LVU2565
 8791              	.LBB3447:
 8792              	.LBI3447:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 8793              		.loc 2 116 2 view .LVU2566
 8794              	.LBB3448:
 8795              	.LBI3448:
 8796              		.loc 4 76 5 view .LVU2567
 8797              		.loc 4 76 5 is_stmt 0 view .LVU2568
 8798              	.LBE3448:
 8799              	.LBB3449:
 8800              	.LBI3449:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 8801              		.loc 2 204 6 is_stmt 1 view .LVU2569
 8802              	.LBB3450:
 8803              	.LBB3451:
 8804              	.LBI3451:
 8805              		.loc 4 76 5 view .LVU2570
 8806              		.loc 4 76 5 is_stmt 0 view .LVU2571
 8807              	.LBE3451:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 8808              		.loc 2 205 47 view .LVU2572
 8809 0126 D3ED007A 		vldr.32	s15, [r3]
 8810              	.LVL546:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 8811              		.loc 2 205 47 view .LVU2573
 8812              	.LBE3450:
 8813              	.LBE3449:
 8814              	.LBE3447:
 8815              	.LBE3446:
 8816              	.LBE3444:
 8817              	.LBE3442:
 8818              	.LBE3441:
 8819              	.LBE3440:
 8820              	.LBE3439:
 8821              	.LBE3454:
 8822              	.LBE3459:
 8823              	.LBE3595:
 973:Src/motor.cpp ****         error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_c
 8824              		.loc 1 973 5 is_stmt 1 view .LVU2574
 978:Src/motor.cpp **** 
 8825              		.loc 1 978 5 view .LVU2575
 8826              	.LBB3596:
 8827              	.LBB3503:
 8828              	.LBB3498:
  89:Inc/component.hpp ****             return content_;
ARM GAS  /tmp/ccvzGucR.s 			page 356


 8829              		.loc 9 89 9 is_stmt 0 view .LVU2576
 8830 012a D0F8D033 		ldr	r3, [r0, #976]
 8831              	.LBE3498:
 8832              	.LBE3503:
 8833              	.LBE3596:
 978:Src/motor.cpp **** 
 8834              		.loc 1 978 34 view .LVU2577
 8835 012e 90EDF07A 		vldr.32	s14, [r0, #960]
 8836              	.LBB3597:
 8837              	.LBB3504:
 8838              	.LBB3499:
  89:Inc/component.hpp ****             return content_;
 8839              		.loc 9 89 9 view .LVU2578
 8840 0132 012B     		cmp	r3, #1
 8841              	.LBE3499:
 8842              	.LBE3504:
 8843              	.LBE3597:
 978:Src/motor.cpp **** 
 8844              		.loc 1 978 34 view .LVU2579
 8845 0134 27EE877A 		vmul.f32	s14, s15, s14
 8846              	.LVL547:
 981:Src/motor.cpp ****     if (auto prev = Idq_setpoint_.previous()) {
 8847              		.loc 1 981 5 is_stmt 1 view .LVU2580
 982:Src/motor.cpp ****         id = prev->first;
 8848              		.loc 1 982 5 view .LVU2581
 8849              	.LBB3598:
 8850              	.LBB3505:
  88:Inc/component.hpp ****         if (age_ == 1) {
 8851              		.loc 9 88 22 view .LVU2582
 8852              	.LBB3500:
  89:Inc/component.hpp ****             return content_;
 8853              		.loc 9 89 9 is_stmt 0 view .LVU2583
 8854 0138 7FF47CAF 		bne	.L430
 8855              	.LVL548:
 8856              	.L396:
 8857              	.LBB3486:
 8858              	.LBI3486:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 8859              		.loc 2 701 2 is_stmt 1 view .LVU2584
 8860              	.LBB3487:
 8861              	.LBI3487:
 8862              		.loc 4 76 5 view .LVU2585
 8863              		.loc 4 76 5 is_stmt 0 view .LVU2586
 8864              	.LBE3487:
 8865              	.LBB3488:
 8866              	.LBI3488:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 8867              		.loc 2 608 28 is_stmt 1 view .LVU2587
 8868              	.LBB3489:
 8869              	.LBI3489:
 8870              		.loc 4 76 5 view .LVU2588
 8871              		.loc 4 76 5 is_stmt 0 view .LVU2589
 8872              	.LBE3489:
 8873              	.LBB3490:
 8874              	.LBI3490:
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 8875              		.loc 2 359 42 is_stmt 1 view .LVU2590
ARM GAS  /tmp/ccvzGucR.s 			page 357


 8876              	.LBB3491:
 8877              	.LBI3491:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 8878              		.loc 2 116 2 view .LVU2591
 8879              	.LBB3492:
 8880              	.LBI3492:
 8881              		.loc 4 76 5 view .LVU2592
 8882              		.loc 4 76 5 is_stmt 0 view .LVU2593
 8883              	.LBE3492:
 8884              	.LBB3493:
 8885              	.LBI3493:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 8886              		.loc 2 204 6 is_stmt 1 view .LVU2594
 8887              	.LBB3494:
 8888              	.LBB3495:
 8889              	.LBI3495:
 8890              		.loc 4 76 5 view .LVU2595
 8891              		.loc 4 76 5 is_stmt 0 view .LVU2596
 8892              	.LBE3495:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 8893              		.loc 2 205 47 view .LVU2597
 8894 013c D0EDF56A 		vldr.32	s13, [r0, #980]
 8895              	.LVL549:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 8896              		.loc 2 205 47 view .LVU2598
 8897              	.LBE3494:
 8898              	.LBE3493:
 8899              	.LBE3491:
 8900              	.LBE3490:
 8901              	.LBE3488:
 8902              	.LBE3486:
 8903              	.LBE3500:
 8904              	.LBE3505:
 983:Src/motor.cpp ****         iq = prev->second;
 8905              		.loc 1 983 9 is_stmt 1 view .LVU2599
 984:Src/motor.cpp ****     } else {
 8906              		.loc 1 984 9 view .LVU2600
 8907 0140 7AE7     		b	.L397
 8908              	.LVL550:
 8909              	.L424:
 984:Src/motor.cpp ****     } else {
 8910              		.loc 1 984 9 is_stmt 0 view .LVU2601
 8911              	.LBE3598:
 8912              	.LBB3599:
 8913              	.LBB3460:
 8914              	.LBI3460:
 137:Inc/component.hpp ****         if (content_.index() == 2) {
 8915              		.loc 9 137 22 is_stmt 1 view .LVU2602
 8916              	.LBB3461:
 139:Inc/component.hpp ****             return ptr ? ptr->present() : std::nullopt;
 8917              		.loc 9 139 28 is_stmt 0 view .LVU2603
 8918 0142 D0F8B033 		ldr	r3, [r0, #944]
 8919              	.LVL551:
 140:Inc/component.hpp ****         } else if (content_.index() == 1) {
 8920              		.loc 9 140 48 view .LVU2604
 8921 0146 13B1     		cbz	r3, .L367
 8922              	.LVL552:
ARM GAS  /tmp/ccvzGucR.s 			page 358


 8923              	.LBB3462:
 8924              	.LBI3462:
  73:Inc/component.hpp ****         if (age_ == 0) {
 8925              		.loc 9 73 22 is_stmt 1 view .LVU2605
 8926              	.LBB3463:
  74:Inc/component.hpp ****             return content_;
 8927              		.loc 9 74 9 is_stmt 0 view .LVU2606
 8928 0148 1A68     		ldr	r2, [r3]
 8929 014a 002A     		cmp	r2, #0
 8930 014c 47D0     		beq	.L431
 8931              	.LVL553:
 8932              	.L367:
  74:Inc/component.hpp ****             return content_;
 8933              		.loc 9 74 9 view .LVU2607
 8934              	.LBE3463:
 8935              	.LBE3462:
 8936              	.LBE3461:
 8937              	.LBE3460:
 8938              	.LBE3599:
 973:Src/motor.cpp ****         error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_c
 8939              		.loc 1 973 5 is_stmt 1 view .LVU2608
 974:Src/motor.cpp **** 
 8940              		.loc 1 974 9 view .LVU2609
 974:Src/motor.cpp **** 
 8941              		.loc 1 974 90 is_stmt 0 view .LVU2610
 8942 014e 436B     		ldr	r3, [r0, #52]
 8943 0150 43F48003 		orr	r3, r3, #4194304
 974:Src/motor.cpp **** 
 8944              		.loc 1 974 16 view .LVU2611
 8945 0154 4363     		str	r3, [r0, #52]
 976:Src/motor.cpp ****     }
 8946              		.loc 1 976 9 is_stmt 1 view .LVU2612
 8947              		.loc 1 1045 1 is_stmt 0 view .LVU2613
 8948 0156 03B0     		add	sp, sp, #12
 8949              	.LCFI125:
 8950              		.cfi_remember_state
 8951              		.cfi_def_cfa_offset 12
 8952              		@ sp needed
 8953 0158 BDEC028B 		vldm	sp!, {d8}
 8954              	.LCFI126:
 8955              		.cfi_restore 80
 8956              		.cfi_restore 81
 8957              		.cfi_def_cfa_offset 4
 8958 015c 5DF804FB 		ldr	pc, [sp], #4
 8959              	.LVL554:
 8960              	.L426:
 8961              	.LCFI127:
 8962              		.cfi_restore_state
 8963              	.LBB3600:
 8964              	.LBI3600:
 8965              		.file 17 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // -*- C++ -*- C forwarding header.
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // software; you can redistribute it and/or modify it under the
ARM GAS  /tmp/ccvzGucR.s 			page 359


   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** /** @file include/cmath
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  This is a Standard C++ Library file.  You should @c \#include this file
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  in your programs, rather than any of the @a *.h implementation files.
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  This is the C++ version of the Standard C Library header @c math.h,
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  and its contents are (mostly) the same as that header, but are all
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  contained in the namespace @c std (except for names which are defined
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  as macros in C).
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  */
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** //
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // ISO C++ 14882: 26.5  C library
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** //
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #pragma GCC system_header
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <bits/c++config.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <bits/cpp_type_traits.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <ext/type_traits.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include_next <math.h>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <bits/std_abs.h>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef _GLIBCXX_CMATH
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #define _GLIBCXX_CMATH 1
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Get rid of those macros defined in <math.h> in lieu of real functions.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef div
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef acos
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef asin
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef atan
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef atan2
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef ceil
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef cos
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef cosh
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef exp
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef fabs
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef floor
ARM GAS  /tmp/ccvzGucR.s 			page 360


  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef fmod
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef frexp
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef ldexp
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef log
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef log10
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef modf
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef pow
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef sin
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef sinh
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef sqrt
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef tan
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef tanh
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** extern "C++"
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** {
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** {
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::acos;
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   acos(float __x)
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_acosf(__x); }
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   acos(long double __x)
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_acosl(__x); }
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     acos(_Tp __x)
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_acos(__x); }
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::asin;
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   asin(float __x)
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_asinf(__x); }
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   asin(long double __x)
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_asinl(__x); }
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     asin(_Tp __x)
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_asin(__x); }
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
ARM GAS  /tmp/ccvzGucR.s 			page 361


 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::atan;
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan(float __x)
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atanf(__x); }
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan(long double __x)
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atanl(__x); }
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     atan(_Tp __x)
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_atan(__x); }
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::atan2;
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan2(float __y, float __x)
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atan2f(__y, __x); }
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan2(long double __y, long double __x)
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atan2l(__y, __x); }
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp, typename _Up>
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     atan2(_Tp __y, _Up __x)
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     {
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       return atan2(__type(__y), __type(__x));
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     }
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::ceil;
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ceil(float __x)
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ceilf(__x); }
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ceil(long double __x)
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ceill(__x); }
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     ceil(_Tp __x)
ARM GAS  /tmp/ccvzGucR.s 			page 362


 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_ceil(__x); }
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::cos;
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cos(float __x)
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_cosf(__x); }
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cos(long double __x)
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_cosl(__x); }
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     cos(_Tp __x)
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_cos(__x); }
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::cosh;
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cosh(float __x)
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_coshf(__x); }
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cosh(long double __x)
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_coshl(__x); }
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     cosh(_Tp __x)
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_cosh(__x); }
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::exp;
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   exp(float __x)
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_expf(__x); }
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   exp(long double __x)
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_expl(__x); }
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     exp(_Tp __x)
ARM GAS  /tmp/ccvzGucR.s 			page 363


 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_exp(__x); }
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::fabs;
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fabs(float __x)
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fabsf(__x); }
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fabs(long double __x)
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fabsl(__x); }
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     fabs(_Tp __x)
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_fabs(__x); }
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::floor;
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   floor(float __x)
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_floorf(__x); }
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   floor(long double __x)
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_floorl(__x); }
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     floor(_Tp __x)
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_floor(__x); }
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::fmod;
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fmod(float __x, float __y)
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fmodf(__x, __y); }
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fmod(long double __x, long double __y)
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fmodl(__x, __y); }
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp, typename _Up>
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     fmod(_Tp __x, _Up __y)
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     {
ARM GAS  /tmp/ccvzGucR.s 			page 364


 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       return fmod(__type(__x), __type(__y));
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     }
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::frexp;
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline float
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   frexp(float __x, int* __exp)
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_frexpf(__x, __exp); }
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline long double
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   frexp(long double __x, int* __exp)
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_frexpl(__x, __exp); }
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     frexp(_Tp __x, int* __exp)
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_frexp(__x, __exp); }
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::ldexp;
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ldexp(float __x, int __exp)
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ldexpf(__x, __exp); }
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ldexp(long double __x, int __exp)
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ldexpl(__x, __exp); }
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     ldexp(_Tp __x, int __exp)
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_ldexp(__x, __exp); }
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::log;
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   log(float __x)
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_logf(__x); }
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   log(long double __x)
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_logl(__x); }
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
ARM GAS  /tmp/ccvzGucR.s 			page 365


 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     log(_Tp __x)
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_log(__x); }
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::log10;
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   log10(float __x)
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_log10f(__x); }
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   log10(long double __x)
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_log10l(__x); }
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     log10(_Tp __x)
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_log10(__x); }
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::modf;
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline float
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   modf(float __x, float* __iptr)
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_modff(__x, __iptr); }
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline long double
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   modf(long double __x, long double* __iptr)
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_modfl(__x, __iptr); }
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::pow;
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(float __x, float __y)
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powf(__x, __y); }
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(long double __x, long double __y)
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powl(__x, __y); }
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #if __cplusplus < 201103L
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   // DR 550. What should the return type of pow(float,int) be?
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline double
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(double __x, int __i)
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powi(__x, __i); }
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline float
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(float __x, int __n)
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powif(__x, __n); }
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
ARM GAS  /tmp/ccvzGucR.s 			page 366


 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline long double
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   pow(long double __x, int __n)
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_powil(__x, __n); }
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp, typename _Up>
 413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     pow(_Tp __x, _Up __y)
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     {
 417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       return pow(__type(__x), __type(__y));
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     }
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::sin;
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sin(float __x)
 426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sinf(__x); }
 427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sin(long double __x)
 430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sinl(__x); }
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     sin(_Tp __x)
 438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_sin(__x); }
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::sinh;
 441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sinh(float __x)
 445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sinhf(__x); }
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sinh(long double __x)
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sinhl(__x); }
 450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     sinh(_Tp __x)
 457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_sinh(__x); }
 458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::sqrt;
 460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
ARM GAS  /tmp/ccvzGucR.s 			page 367


 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   sqrt(float __x)
 8966              		.loc 17 463 3 is_stmt 1 view .LVU2614
 8967              	.LBB3601:
 464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_sqrtf(__x); }
 8968              		.loc 17 464 5 view .LVU2615
 8969 0160 B5EE400A 		vcmp.f32	s0, #0
 8970 0164 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 8971 0168 51D4     		bmi	.L419
 8972              		.loc 17 464 27 is_stmt 0 view .LVU2616
 8973 016a F1EEC07A 		vsqrt.f32	s15, s0
 8974              	.LBE3601:
 8975              	.LBE3600:
1004:Src/motor.cpp **** 
 8976              		.loc 1 1004 25 view .LVU2617
 8977 016e B1EE677A 		vneg.f32	s14, s15
 8978              	.LVL555:
1004:Src/motor.cpp **** 
 8979              		.loc 1 1004 25 view .LVU2618
 8980 0172 89E7     		b	.L373
 8981              	.LVL556:
 8982              	.L427:
 8983              	.LBB3604:
 8984              	.LBB3554:
 8985              	.LBI3554:
 137:Inc/component.hpp ****         if (content_.index() == 2) {
 8986              		.loc 9 137 22 is_stmt 1 view .LVU2619
 8987              	.LBB3555:
 139:Inc/component.hpp ****             return ptr ? ptr->present() : std::nullopt;
 8988              		.loc 9 139 28 is_stmt 0 view .LVU2620
 8989 0174 D0F8B833 		ldr	r3, [r0, #952]
 8990              	.LVL557:
 140:Inc/component.hpp ****         } else if (content_.index() == 1) {
 8991              		.loc 9 140 48 view .LVU2621
 8992 0178 A3B3     		cbz	r3, .L383
 8993              	.LVL558:
 8994              	.LBB3556:
 8995              	.LBI3556:
  73:Inc/component.hpp ****         if (age_ == 0) {
 8996              		.loc 9 73 22 is_stmt 1 view .LVU2622
 8997              	.LBB3557:
  74:Inc/component.hpp ****             return content_;
 8998              		.loc 9 74 9 is_stmt 0 view .LVU2623
 8999 017a 1A68     		ldr	r2, [r3]
 9000 017c 92BB     		cbnz	r2, .L383
 9001              	.LVL559:
 9002              	.LBB3558:
 9003              	.LBI3558:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 9004              		.loc 2 701 2 is_stmt 1 view .LVU2624
 9005              	.LBB3559:
 9006              	.LBB3560:
 9007              	.LBI3560:
 9008              		.loc 4 76 5 view .LVU2625
 9009              		.loc 4 76 5 is_stmt 0 view .LVU2626
 9010              	.LBE3560:
 9011              	.LBB3561:
 9012              	.LBI3561:
ARM GAS  /tmp/ccvzGucR.s 			page 368


 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 9013              		.loc 2 608 28 is_stmt 1 view .LVU2627
 9014              	.LBB3562:
 9015              	.LBI3562:
 9016              		.loc 4 76 5 view .LVU2628
 9017              		.loc 4 76 5 is_stmt 0 view .LVU2629
 9018              	.LBE3562:
 9019              	.LBB3563:
 9020              	.LBI3563:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 9021              		.loc 2 301 42 is_stmt 1 view .LVU2630
 9022              	.LBB3564:
 9023              	.LBI3564:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 9024              		.loc 2 116 2 view .LVU2631
 9025              	.LBB3565:
 9026              	.LBI3565:
 9027              		.loc 4 76 5 view .LVU2632
 9028              		.loc 4 76 5 is_stmt 0 view .LVU2633
 9029              	.LBE3565:
 9030              	.LBB3566:
 9031              	.LBI3566:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 9032              		.loc 2 204 6 is_stmt 1 view .LVU2634
 9033              	.LBB3567:
 9034              	.LBB3568:
 9035              	.LBI3568:
 9036              		.loc 4 76 5 view .LVU2635
 9037              		.loc 4 76 5 is_stmt 0 view .LVU2636
 9038              	.LBE3568:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 9039              		.loc 2 205 47 view .LVU2637
 9040 017e 93ED016A 		vldr.32	s12, [r3, #4]
 9041              	.LVL560:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 9042              		.loc 2 205 47 view .LVU2638
 9043              	.LBE3567:
 9044              	.LBE3566:
 9045              	.LBE3564:
 9046              	.LBE3563:
 9047              	.LBE3561:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 9048              		.loc 2 702 51 view .LVU2639
 9049 0182 A6E7     		b	.L382
 9050              	.LVL561:
 9051              	.L429:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 9052              		.loc 2 702 51 view .LVU2640
 9053              	.LBE3559:
 9054              	.LBE3558:
 9055              	.LBE3557:
 9056              	.LBE3556:
 9057              	.LBE3555:
 9058              	.LBE3554:
 9059              	.LBE3604:
1023:Src/motor.cpp ****             error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | stat
 9060              		.loc 1 1023 9 is_stmt 1 view .LVU2641
ARM GAS  /tmp/ccvzGucR.s 			page 369


1028:Src/motor.cpp ****         vq += *phase_vel * config_.phase_inductance * id;
 9061              		.loc 1 1028 9 view .LVU2642
1028:Src/motor.cpp ****         vq += *phase_vel * config_.phase_inductance * id;
 9062              		.loc 1 1028 26 is_stmt 0 view .LVU2643
 9063 0184 D3ED065A 		vldr.32	s11, [r3, #24]
1028:Src/motor.cpp ****         vq += *phase_vel * config_.phase_inductance * id;
 9064              		.loc 1 1028 12 view .LVU2644
 9065 0188 DFED287A 		vldr.32	s15, .L434
 9066              	.LVL562:
1030:Src/motor.cpp ****         vq += config_.phase_resistance * iq;
 9067              		.loc 1 1030 23 view .LVU2645
 9068 018c 93ED075A 		vldr.32	s10, [r3, #28]
1034:Src/motor.cpp ****         if (!phase_vel.has_value()) {
 9069              		.loc 1 1034 5 view .LVU2646
 9070 0190 93F82124 		ldrb	r2, [r3, #1057]	@ zero_extendqisi2
1028:Src/motor.cpp ****         vq += *phase_vel * config_.phase_inductance * id;
 9071              		.loc 1 1028 26 view .LVU2647
 9072 0194 66EE255A 		vmul.f32	s11, s12, s11
1028:Src/motor.cpp ****         vq += *phase_vel * config_.phase_inductance * id;
 9073              		.loc 1 1028 12 view .LVU2648
 9074 0198 F0EE676A 		vmov.f32	s13, s15
 9075 019c E7EE656A 		vfms.f32	s13, s14, s11
 9076              	.LVL563:
1029:Src/motor.cpp ****         vd += config_.phase_resistance * id;
 9077              		.loc 1 1029 9 is_stmt 1 view .LVU2649
1029:Src/motor.cpp ****         vd += config_.phase_resistance * id;
 9078              		.loc 1 1029 12 is_stmt 0 view .LVU2650
 9079 01a0 E8EE257A 		vfma.f32	s15, s16, s11
 9080              	.LVL564:
1030:Src/motor.cpp ****         vq += config_.phase_resistance * iq;
 9081              		.loc 1 1030 9 is_stmt 1 view .LVU2651
1030:Src/motor.cpp ****         vq += config_.phase_resistance * iq;
 9082              		.loc 1 1030 12 is_stmt 0 view .LVU2652
 9083 01a4 E8EE056A 		vfma.f32	s13, s16, s10
 9084              	.LVL565:
1031:Src/motor.cpp ****     }
 9085              		.loc 1 1031 9 is_stmt 1 view .LVU2653
1031:Src/motor.cpp ****     }
 9086              		.loc 1 1031 12 is_stmt 0 view .LVU2654
 9087 01a8 E7EE057A 		vfma.f32	s15, s14, s10
 9088              	.LVL566:
1034:Src/motor.cpp ****         if (!phase_vel.has_value()) {
 9089              		.loc 1 1034 5 is_stmt 1 view .LVU2655
 9090 01ac 002A     		cmp	r2, #0
 9091 01ae 9DD1     		bne	.L389
1043:Src/motor.cpp **** 
 9092              		.loc 1 1043 5 view .LVU2656
 9093              	.LVL567:
 9094              	.LBB3605:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 9095              		.loc 5 352 12 view .LVU2657
 9096              	.LBB3590:
 9097              		.loc 4 76 5 view .LVU2658
 9098              		.loc 4 76 5 is_stmt 0 view .LVU2659
 9099              	.LBE3590:
 9100              	.LBB3591:
 9101              		.loc 4 76 5 is_stmt 1 view .LVU2660
ARM GAS  /tmp/ccvzGucR.s 			page 370


 9102              		.loc 4 76 5 is_stmt 0 view .LVU2661
 9103              	.LBE3591:
 9104              	.LBE3605:
 9105              	.LBB3606:
  52:Inc/component.hpp ****         content_ = value;
 9106              		.loc 9 52 10 is_stmt 1 view .LVU2662
 9107              	.LBB3583:
 9108              	.LBB3578:
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 9109              		.loc 5 390 7 view .LVU2663
 9110              	.LBE3578:
  54:Inc/component.hpp ****     }
 9111              		.loc 9 54 14 is_stmt 0 view .LVU2664
 9112 01b0 0023     		movs	r3, #0
 9113              	.LBB3579:
 9114              	.LBB3575:
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = __p.second;
 9115              		.loc 5 395 8 view .LVU2665
 9116 01b2 C0EDF26A 		vstr.32	s13, [r0, #968]
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 9117              		.loc 5 396 9 view .LVU2666
 9118 01b6 C0EDF37A 		vstr.32	s15, [r0, #972]
 9119              	.LVL568:
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 9120              		.loc 5 396 9 view .LVU2667
 9121              	.LBE3575:
 9122              	.LBE3579:
  54:Inc/component.hpp ****     }
 9123              		.loc 9 54 14 view .LVU2668
 9124 01ba C0F8C433 		str	r3, [r0, #964]
 9125              	.LVL569:
  54:Inc/component.hpp ****     }
 9126              		.loc 9 54 14 view .LVU2669
 9127 01be AAE7     		b	.L432
 9128              	.LVL570:
 9129              	.L433:
  54:Inc/component.hpp ****     }
 9130              		.loc 9 54 14 view .LVU2670
 9131              	.LBE3583:
 9132              	.LBE3606:
1034:Src/motor.cpp ****         if (!phase_vel.has_value()) {
 9133              		.loc 1 1034 5 is_stmt 1 view .LVU2671
 9134 01c0 93F82134 		ldrb	r3, [r3, #1057]	@ zero_extendqisi2
 9135 01c4 9BB9     		cbnz	r3, .L392
 9136              	.LVL571:
 9137              	.L423:
1034:Src/motor.cpp ****         if (!phase_vel.has_value()) {
 9138              		.loc 1 1034 5 is_stmt 0 view .LVU2672
 9139 01c6 DFED196A 		vldr.32	s13, .L434
 9140              	.LBB3607:
 9141              	.LBB3584:
  54:Inc/component.hpp ****     }
 9142              		.loc 9 54 14 view .LVU2673
 9143 01ca 0023     		movs	r3, #0
 9144              	.LBE3584:
 9145              	.LBE3607:
1034:Src/motor.cpp ****         if (!phase_vel.has_value()) {
ARM GAS  /tmp/ccvzGucR.s 			page 371


 9146              		.loc 1 1034 5 view .LVU2674
 9147 01cc F0EE667A 		vmov.f32	s15, s13
 9148              	.LVL572:
1043:Src/motor.cpp **** 
 9149              		.loc 1 1043 5 is_stmt 1 view .LVU2675
 9150              	.LBB3608:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 9151              		.loc 5 352 12 view .LVU2676
 9152              	.LBB3592:
 9153              		.loc 4 76 5 view .LVU2677
 9154              		.loc 4 76 5 is_stmt 0 view .LVU2678
 9155              	.LBE3592:
 9156              	.LBB3593:
 9157              		.loc 4 76 5 is_stmt 1 view .LVU2679
 9158              		.loc 4 76 5 is_stmt 0 view .LVU2680
 9159              	.LBE3593:
 9160              	.LBE3608:
 9161              	.LBB3609:
  52:Inc/component.hpp ****         content_ = value;
 9162              		.loc 9 52 10 is_stmt 1 view .LVU2681
 9163              	.LBB3585:
 9164              	.LBB3580:
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 9165              		.loc 5 390 7 view .LVU2682
 9166              	.LBB3576:
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = __p.second;
 9167              		.loc 5 395 8 is_stmt 0 view .LVU2683
 9168 01d0 C0EDF26A 		vstr.32	s13, [r0, #968]
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 9169              		.loc 5 396 9 view .LVU2684
 9170 01d4 C0EDF37A 		vstr.32	s15, [r0, #972]
 9171              	.LVL573:
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 9172              		.loc 5 396 9 view .LVU2685
 9173              	.LBE3576:
 9174              	.LBE3580:
  54:Inc/component.hpp ****     }
 9175              		.loc 9 54 14 view .LVU2686
 9176 01d8 C0F8C433 		str	r3, [r0, #964]
 9177              	.LVL574:
  54:Inc/component.hpp ****     }
 9178              		.loc 9 54 14 view .LVU2687
 9179 01dc 9BE7     		b	.L432
 9180              	.LVL575:
 9181              	.L431:
  54:Inc/component.hpp ****     }
 9182              		.loc 9 54 14 view .LVU2688
 9183              	.LBE3585:
 9184              	.LBE3609:
 9185              	.LBB3610:
 9186              	.LBB3478:
 9187              	.LBB3477:
 9188              	.LBB3476:
 9189              	.LBB3475:
 9190              	.LBB3464:
 9191              	.LBI3464:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
ARM GAS  /tmp/ccvzGucR.s 			page 372


 9192              		.loc 2 701 2 is_stmt 1 view .LVU2689
 9193              	.LBB3465:
 9194              	.LBB3466:
 9195              	.LBI3466:
 9196              		.loc 4 76 5 view .LVU2690
 9197              		.loc 4 76 5 is_stmt 0 view .LVU2691
 9198              	.LBE3466:
 9199              	.LBB3467:
 9200              	.LBI3467:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 9201              		.loc 2 608 28 is_stmt 1 view .LVU2692
 9202              	.LBB3468:
 9203              	.LBI3468:
 9204              		.loc 4 76 5 view .LVU2693
 9205              		.loc 4 76 5 is_stmt 0 view .LVU2694
 9206              	.LBE3468:
 9207              	.LBB3469:
 9208              	.LBI3469:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 9209              		.loc 2 301 42 is_stmt 1 view .LVU2695
 9210              	.LBB3470:
 9211              	.LBI3470:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 9212              		.loc 2 116 2 view .LVU2696
 9213              	.LBB3471:
 9214              	.LBI3471:
 9215              		.loc 4 76 5 view .LVU2697
 9216              		.loc 4 76 5 is_stmt 0 view .LVU2698
 9217              	.LBE3471:
 9218              	.LBB3472:
 9219              	.LBI3472:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 9220              		.loc 2 204 6 is_stmt 1 view .LVU2699
 9221              	.LBB3473:
 9222              	.LBB3474:
 9223              	.LBI3474:
 9224              		.loc 4 76 5 view .LVU2700
 9225              		.loc 4 76 5 is_stmt 0 view .LVU2701
 9226              	.LBE3474:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 9227              		.loc 2 205 47 view .LVU2702
 9228 01de D3ED017A 		vldr.32	s15, [r3, #4]
 9229              	.LVL576:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 9230              		.loc 2 205 47 view .LVU2703
 9231              	.LBE3473:
 9232              	.LBE3472:
 9233              	.LBE3470:
 9234              	.LBE3469:
 9235              	.LBE3467:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 9236              		.loc 2 702 51 view .LVU2704
 9237 01e2 1EE7     		b	.L368
 9238              	.LVL577:
 9239              	.L383:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 9240              		.loc 2 702 51 view .LVU2705
ARM GAS  /tmp/ccvzGucR.s 			page 373


 9241              	.LBE3465:
 9242              	.LBE3464:
 9243              	.LBE3475:
 9244              	.LBE3476:
 9245              	.LBE3477:
 9246              	.LBE3478:
 9247              	.LBE3610:
1022:Src/motor.cpp ****         if (!phase_vel.has_value()) {
 9248              		.loc 1 1022 5 is_stmt 1 view .LVU2706
1022:Src/motor.cpp ****         if (!phase_vel.has_value()) {
 9249              		.loc 1 1022 9 is_stmt 0 view .LVU2707
 9250 01e4 4368     		ldr	r3, [r0, #4]
1022:Src/motor.cpp ****         if (!phase_vel.has_value()) {
 9251              		.loc 1 1022 5 view .LVU2708
 9252 01e6 93F82024 		ldrb	r2, [r3, #1056]	@ zero_extendqisi2
 9253 01ea 002A     		cmp	r2, #0
 9254 01ec E8D0     		beq	.L433
 9255              	.L392:
1023:Src/motor.cpp ****             error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | stat
 9256              		.loc 1 1023 9 is_stmt 1 view .LVU2709
1024:Src/motor.cpp ****             return;
 9257              		.loc 1 1024 13 view .LVU2710
1024:Src/motor.cpp ****             return;
 9258              		.loc 1 1024 94 is_stmt 0 view .LVU2711
 9259 01ee 436B     		ldr	r3, [r0, #52]
 9260 01f0 43F40003 		orr	r3, r3, #8388608
1024:Src/motor.cpp ****             return;
 9261              		.loc 1 1024 20 view .LVU2712
 9262 01f4 4363     		str	r3, [r0, #52]
1025:Src/motor.cpp ****         }
 9263              		.loc 1 1025 13 is_stmt 1 view .LVU2713
 9264              		.loc 1 1045 1 is_stmt 0 view .LVU2714
 9265 01f6 03B0     		add	sp, sp, #12
 9266              	.LCFI128:
 9267              		.cfi_remember_state
 9268              		.cfi_def_cfa_offset 12
 9269              		@ sp needed
 9270 01f8 BDEC028B 		vldm	sp!, {d8}
 9271              	.LCFI129:
 9272              		.cfi_restore 80
 9273              		.cfi_restore 81
 9274              		.cfi_def_cfa_offset 4
 9275              	.LVL578:
 9276              		.loc 1 1045 1 view .LVU2715
 9277 01fc 5DF804FB 		ldr	pc, [sp], #4
 9278              	.LVL579:
 9279              	.L428:
 9280              	.LCFI130:
 9281              		.cfi_restore_state
 9282              	.LBB3611:
 9283              	.LBB3569:
 9284              	.LBB3553:
 9285              	.LBB3540:
 142:Inc/component.hpp ****             return ptr ? std::make_optional(*ptr) : std::nullopt;
 9286              		.loc 9 142 16 view .LVU2716
 9287 0200 D0F8B833 		ldr	r3, [r0, #952]
 9288              	.LVL580:
ARM GAS  /tmp/ccvzGucR.s 			page 374


 9289              		.loc 9 143 58 view .LVU2717
 9290 0204 002B     		cmp	r3, #0
 9291 0206 EDD0     		beq	.L383
 9292              	.LVL581:
 9293              	.LBB3541:
 9294              	.LBI3541:
 9295              		.loc 2 1206 5 is_stmt 1 view .LVU2718
 9296              	.LBB3542:
 9297              	.LBB3543:
 9298              	.LBI3543:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 9299              		.loc 2 701 2 view .LVU2719
 9300              	.LBB3544:
 9301              	.LBI3544:
 9302              		.loc 4 76 5 view .LVU2720
 9303              		.loc 4 76 5 is_stmt 0 view .LVU2721
 9304              	.LBE3544:
 9305              	.LBB3545:
 9306              	.LBI3545:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 9307              		.loc 2 608 28 is_stmt 1 view .LVU2722
 9308              	.LBB3546:
 9309              	.LBI3546:
 9310              		.loc 4 76 5 view .LVU2723
 9311              		.loc 4 76 5 is_stmt 0 view .LVU2724
 9312              	.LBE3546:
 9313              	.LBB3547:
 9314              	.LBI3547:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 9315              		.loc 2 301 42 is_stmt 1 view .LVU2725
 9316              	.LBB3548:
 9317              	.LBI3548:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 9318              		.loc 2 116 2 view .LVU2726
 9319              	.LBB3549:
 9320              	.LBI3549:
 9321              		.loc 4 76 5 view .LVU2727
 9322              		.loc 4 76 5 is_stmt 0 view .LVU2728
 9323              	.LBE3549:
 9324              	.LBB3550:
 9325              	.LBI3550:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 9326              		.loc 2 204 6 is_stmt 1 view .LVU2729
 9327              	.LBB3551:
 9328              	.LBB3552:
 9329              	.LBI3552:
 9330              		.loc 4 76 5 view .LVU2730
 9331              		.loc 4 76 5 is_stmt 0 view .LVU2731
 9332              	.LBE3552:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 9333              		.loc 2 205 47 view .LVU2732
 9334 0208 93ED006A 		vldr.32	s12, [r3]
 9335              	.LVL582:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 9336              		.loc 2 205 47 view .LVU2733
 9337              	.LBE3551:
 9338              	.LBE3550:
ARM GAS  /tmp/ccvzGucR.s 			page 375


 9339              	.LBE3548:
 9340              	.LBE3547:
 9341              	.LBE3545:
 9342              	.LBE3543:
1207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return optional<decay_t<_Tp>> { std::forward<_Tp>(__t) }; }
 9343              		.loc 2 1207 62 view .LVU2734
 9344 020c 61E7     		b	.L382
 9345              	.LVL583:
 9346              	.L419:
 9347              		.loc 2 1207 62 view .LVU2735
 9348 020e 0190     		str	r0, [sp, #4]
 9349              	.LBE3542:
 9350              	.LBE3541:
 9351              	.LBE3540:
 9352              	.LBE3553:
 9353              	.LBE3569:
 9354              	.LBE3611:
 9355              	.LBB3612:
 9356              	.LBB3602:
 9357              		.loc 17 464 27 view .LVU2736
 9358 0210 FFF7FEFF 		bl	sqrtf
 9359              	.LVL584:
 9360              		.loc 17 464 27 view .LVU2737
 9361              	.LBE3602:
 9362              	.LBE3612:
1006:Src/motor.cpp ****         Idq_setpoint_ = {id, iq};
 9363              		.loc 1 1006 16 view .LVU2738
 9364 0214 0198     		ldr	r0, [sp, #4]
 9365 0216 8368     		ldr	r3, [r0, #8]
1006:Src/motor.cpp ****         Idq_setpoint_ = {id, iq};
 9366              		.loc 1 1006 23 view .LVU2739
 9367 0218 DB6E     		ldr	r3, [r3, #108]
 9368              	.LBB3613:
 9369              	.LBB3603:
 9370              		.loc 17 464 27 view .LVU2740
 9371 021a F0EE407A 		vmov.f32	s15, s0
 9372              	.LBE3603:
 9373              	.LBE3613:
1006:Src/motor.cpp ****         Idq_setpoint_ = {id, iq};
 9374              		.loc 1 1006 23 view .LVU2741
 9375 021e 5B68     		ldr	r3, [r3, #4]
1004:Src/motor.cpp **** 
 9376              		.loc 1 1004 25 view .LVU2742
 9377 0220 B1EE407A 		vneg.f32	s14, s0
 9378 0224 30E7     		b	.L373
 9379              	.LVL585:
 9380              	.L386:
 9381              	.LBB3614:
 9382              	.LBB3479:
 9383              	.LBB3455:
 9384              	.LBB3452:
 9385              	.LBB3426:
 9386              	.LBB3422:
 9387              	.LBI3422:
1278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   {
 9388              		.loc 10 1278 3 is_stmt 1 view .LVU2743
 9389              	.LBE3422:
ARM GAS  /tmp/ccvzGucR.s 			page 376


 9390              	.LBE3426:
 9391              	.LBE3452:
 9392              	.LBE3455:
 9393              	.LBE3479:
 9394              	.LBE3614:
1280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __throw_bad_variant_access("std::get: variant is valueless");
 9395              		.loc 10 1280 5 view .LVU2744
1283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   }
 9396              		.loc 10 1283 7 view .LVU2745
 9397              	.LBB3615:
 9398              	.LBB3480:
 9399              	.LBB3456:
 9400              	.LBB3453:
 9401              	.LBB3427:
 9402              	.LBB3425:
 9403              	.LBB3423:
 9404              	.LBI3423:
1274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 9405              		.loc 10 1274 3 view .LVU2746
 9406              	.LBB3424:
1275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 9407              		.loc 10 1275 5 view .LVU2747
 9408 0226 FFF7FEFF 		bl	abort
 9409              	.LVL586:
 9410              	.L435:
 9411 022a 00BF     		.align	2
 9412              	.L434:
 9413 022c 00000000 		.word	0
 9414 0230 A4707D3F 		.word	1065185444
 9415 0234 00000080 		.word	-2147483648
 9416 0238 378EE33E 		.word	1055100471
 9417              	.LBE3424:
 9418              	.LBE3423:
 9419              	.LBE3425:
 9420              	.LBE3427:
 9421              	.LBE3453:
 9422              	.LBE3456:
 9423              	.LBE3480:
 9424              	.LBE3615:
 9425              		.cfi_endproc
 9426              	.LFE5027:
 9428              		.section	.text._ZN5Motor15current_meas_cbEm,"ax",%progbits
 9429              		.align	1
 9430              		.p2align 2,,3
 9431              		.global	_ZN5Motor15current_meas_cbEm
 9432              		.syntax unified
 9433              		.thumb
 9434              		.thumb_func
 9435              		.fpu fpv4-sp-d16
 9437              	_ZN5Motor15current_meas_cbEm:
 9438              	.LVL587:
 9439              	.LFB5029:
1046:Src/motor.cpp **** 
1047:Src/motor.cpp **** 
1048:Src/motor.cpp **** 
1049:Src/motor.cpp **** /**
1050:Src/motor.cpp ****  * @brief Called when the underlying hardware timer triggers an update event.
ARM GAS  /tmp/ccvzGucR.s 			page 377


1051:Src/motor.cpp ****  */
1052:Src/motor.cpp **** void Motor::current_meas_cb(uint32_t timestamp) {
 9440              		.loc 1 1052 49 view -0
 9441              		.cfi_startproc
 9442              		@ args = 0, pretend = 0, frame = 24
 9443              		@ frame_needed = 0, uses_anonymous_args = 0
1053:Src/motor.cpp ****     // TODO: this is platform specific
1054:Src/motor.cpp ****     //const float current_meas_period = static_cast<float>(2 * TIM_1_8_PERIOD_CLOCKS * (TIM_1_8_RCR
1055:Src/motor.cpp ****     TaskTimerContext tmr{axis_->task_times_.current_sense};
 9444              		.loc 1 1055 5 view .LVU2749
1052:Src/motor.cpp ****     // TODO: this is platform specific
 9445              		.loc 1 1052 49 is_stmt 0 view .LVU2750
 9446 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 9447              	.LCFI131:
 9448              		.cfi_def_cfa_offset 24
 9449              		.cfi_offset 4, -24
 9450              		.cfi_offset 5, -20
 9451              		.cfi_offset 6, -16
 9452              		.cfi_offset 7, -12
 9453              		.cfi_offset 8, -8
 9454              		.cfi_offset 14, -4
 9455              	.LBB3616:
 9456              	.LBB3617:
 9457              	.LBB3618:
 9458              	.LBB3619:
 9459              	.LBB3620:
 9460              		.file 18 "Inc/task_timer.hpp"
   1:Inc/task_timer.hpp **** #ifndef __TASK_TIMER_HPP
   2:Inc/task_timer.hpp **** #define __TASK_TIMER_HPP
   3:Inc/task_timer.hpp **** 
   4:Inc/task_timer.hpp **** #include <stdint.h>
   5:Inc/task_timer.hpp **** #include "main.h"
   6:Inc/task_timer.hpp **** 
   7:Inc/task_timer.hpp **** #define MEASURE_START_TIME
   8:Inc/task_timer.hpp **** #define MEASURE_END_TIME
   9:Inc/task_timer.hpp **** #define MEASURE_LENGTH
  10:Inc/task_timer.hpp **** #define MEASURE_MAX_LENGTH
  11:Inc/task_timer.hpp **** 
  12:Inc/task_timer.hpp **** inline uint16_t sample_TIM13() {
  13:Inc/task_timer.hpp ****     constexpr uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLOCK_
  14:Inc/task_timer.hpp ****     return clocks_per_cnt * TIM15->CNT;  // TODO: Use a hw_config
 9461              		.loc 18 14 36 view .LVU2751
 9462 0004 254B     		ldr	r3, .L449
 9463              	.LBE3620:
 9464              	.LBE3619:
 9465              	.LBE3618:
 9466              	.LBE3617:
 9467              	.LBE3616:
 9468              	.LBB3631:
1056:Src/motor.cpp **** 
1057:Src/motor.cpp **** 
1058:Src/motor.cpp **** 
1059:Src/motor.cpp ****     if (control_law_) {
 9469              		.loc 1 1059 9 view .LVU2752
 9470 0006 D0F8AC73 		ldr	r7, [r0, #940]
 9471              	.LBE3631:
 9472              	.LBB3728:
ARM GAS  /tmp/ccvzGucR.s 			page 378


 9473              	.LBB3628:
 9474              	.LBB3625:
 9475              	.LBB3623:
 9476              	.LBB3621:
 9477              		.loc 18 14 36 view .LVU2753
 9478 000a 5D6A     		ldr	r5, [r3, #36]
 9479              	.LBE3621:
 9480              	.LBE3623:
 9481              	.LBE3625:
 9482              	.LBE3628:
 9483              	.LBE3728:
1055:Src/motor.cpp **** 
 9484              		.loc 1 1055 26 view .LVU2754
 9485 000c 8668     		ldr	r6, [r0, #8]
 9486              	.LVL588:
 9487              	.LBB3729:
 9488              	.LBI3616:
  15:Inc/task_timer.hpp **** }
  16:Inc/task_timer.hpp **** 
  17:Inc/task_timer.hpp **** struct TaskTimer {
  18:Inc/task_timer.hpp ****     uint32_t start_time_ = 0;
  19:Inc/task_timer.hpp ****     uint32_t end_time_ = 0;
  20:Inc/task_timer.hpp ****     uint32_t length_ = 0;
  21:Inc/task_timer.hpp ****     uint32_t max_length_ = 0;
  22:Inc/task_timer.hpp **** 
  23:Inc/task_timer.hpp ****     static bool enabled ;
  24:Inc/task_timer.hpp **** 
  25:Inc/task_timer.hpp ****     uint32_t start() {
  26:Inc/task_timer.hpp ****         return sample_TIM13();
  27:Inc/task_timer.hpp ****     }
  28:Inc/task_timer.hpp **** 
  29:Inc/task_timer.hpp ****     void stop(uint32_t start_time) {
  30:Inc/task_timer.hpp ****         uint32_t end_time = sample_TIM13();
  31:Inc/task_timer.hpp ****         uint32_t length = end_time - start_time;
  32:Inc/task_timer.hpp **** 
  33:Inc/task_timer.hpp ****         if (enabled) {
  34:Inc/task_timer.hpp **** #ifdef MEASURE_START_TIME
  35:Inc/task_timer.hpp ****             start_time_ = start_time;
  36:Inc/task_timer.hpp **** #endif
  37:Inc/task_timer.hpp **** #ifdef MEASURE_END_TIME
  38:Inc/task_timer.hpp ****             end_time_ = end_time;
  39:Inc/task_timer.hpp **** #endif
  40:Inc/task_timer.hpp **** #ifdef MEASURE_LENGTH
  41:Inc/task_timer.hpp ****             length_ = length;
  42:Inc/task_timer.hpp **** #endif
  43:Inc/task_timer.hpp ****         }
  44:Inc/task_timer.hpp **** #ifdef MEASURE_MAX_LENGTH
  45:Inc/task_timer.hpp ****         max_length_ = std::max(max_length_, length);
  46:Inc/task_timer.hpp **** #endif
  47:Inc/task_timer.hpp ****     }
  48:Inc/task_timer.hpp **** };
  49:Inc/task_timer.hpp **** 
  50:Inc/task_timer.hpp **** struct TaskTimerContext {
  51:Inc/task_timer.hpp ****     TaskTimerContext(const TaskTimerContext&) = delete;
  52:Inc/task_timer.hpp ****     TaskTimerContext(const TaskTimerContext&&) = delete;
  53:Inc/task_timer.hpp ****     void operator=(const TaskTimerContext&) = delete;
  54:Inc/task_timer.hpp ****     void operator=(const TaskTimerContext&&) = delete;
ARM GAS  /tmp/ccvzGucR.s 			page 379


  55:Inc/task_timer.hpp ****     TaskTimerContext(TaskTimer& timer) : timer_(timer), start_time(timer.start()) {}
 9489              		.loc 18 55 5 is_stmt 1 view .LVU2755
 9490              	.LBB3629:
 9491              	.LBI3617:
  25:Inc/task_timer.hpp ****         return sample_TIM13();
 9492              		.loc 18 25 14 view .LVU2756
 9493              	.LBB3626:
  26:Inc/task_timer.hpp ****     }
 9494              		.loc 18 26 9 view .LVU2757
 9495              	.LBB3624:
 9496              	.LBI3619:
  12:Inc/task_timer.hpp ****     constexpr uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLOCK_
 9497              		.loc 18 12 17 view .LVU2758
 9498              	.LBB3622:
  13:Inc/task_timer.hpp ****     return clocks_per_cnt * TIM15->CNT;  // TODO: Use a hw_config
 9499              		.loc 18 13 5 view .LVU2759
  14:Inc/task_timer.hpp **** }
 9500              		.loc 18 14 5 view .LVU2760
  14:Inc/task_timer.hpp **** }
 9501              		.loc 18 14 36 is_stmt 0 view .LVU2761
 9502 000e 6D00     		lsls	r5, r5, #1
 9503              	.LBE3622:
 9504              	.LBE3624:
 9505              	.LBE3626:
 9506              	.LBE3629:
 9507              	.LBE3729:
1052:Src/motor.cpp ****     // TODO: this is platform specific
 9508              		.loc 1 1052 49 view .LVU2762
 9509 0010 8AB0     		sub	sp, sp, #40
 9510              	.LCFI132:
 9511              		.cfi_def_cfa_offset 64
 9512              	.LBB3730:
 9513              	.LBB3630:
 9514              	.LBB3627:
  26:Inc/task_timer.hpp ****     }
 9515              		.loc 18 26 29 view .LVU2763
 9516 0012 ADB2     		uxth	r5, r5
 9517              	.LVL589:
  26:Inc/task_timer.hpp ****     }
 9518              		.loc 18 26 29 view .LVU2764
 9519              	.LBE3627:
 9520              	.LBE3630:
 9521              	.LBE3730:
 9522              		.loc 1 1059 5 is_stmt 1 view .LVU2765
 9523              	.LBB3731:
 9524 0014 FFB1     		cbz	r7, .L438
 9525              	.LBB3632:
1060:Src/motor.cpp ****         ODriveIntf::MotorIntf::Error err = control_law_->on_measurement(vbus_voltage,
 9526              		.loc 1 1060 9 view .LVU2766
1061:Src/motor.cpp ****                                 std::make_optional(std::array<float, 3>{current_meas_.phA, current_
 9527              		.loc 1 1061 106 is_stmt 0 view .LVU2767
 9528 0016 036C     		ldr	r3, [r0, #64]	@ float
 9529              	.LBB3633:
 9530              	.LBB3634:
 9531              	.LBB3635:
 9532              	.LBB3636:
 9533              	.LBB3637:
ARM GAS  /tmp/ccvzGucR.s 			page 380


 9534              	.LBB3638:
 9535              	.LBB3639:
 9536              	.LBB3640:
 9537              	.LBB3641:
 9538              	.LBB3642:
 9539              	.LBB3643:
 9540              	.LBB3644:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 9541              		.loc 2 205 47 view .LVU2768
 9542 0018 0793     		str	r3, [sp, #28]	@ float
 9543              	.LBE3644:
 9544              	.LBE3643:
 9545              	.LBE3642:
 9546              	.LBE3641:
 9547              	.LBE3640:
 9548              	.LBE3639:
 9549              	.LBE3638:
 9550              	.LBE3637:
 9551              	.LBE3636:
 9552              	.LBE3635:
 9553              	.LBE3634:
 9554              	.LBE3633:
 9555              		.loc 1 1061 125 view .LVU2769
 9556 001a 436C     		ldr	r3, [r0, #68]	@ float
 9557              	.LBB3690:
 9558              	.LBB3686:
 9559              	.LBB3682:
 9560              	.LBB3677:
 9561              	.LBB3673:
 9562              	.LBB3668:
 9563              	.LBB3664:
 9564              	.LBB3660:
 9565              	.LBB3656:
 9566              	.LBB3652:
 9567              	.LBB3649:
 9568              	.LBB3646:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 9569              		.loc 2 205 47 view .LVU2770
 9570 001c 0893     		str	r3, [sp, #32]	@ float
 9571              	.LBE3646:
 9572              	.LBE3649:
 9573              	.LBE3652:
 9574              	.LBE3656:
 9575              	.LBE3660:
 9576              	.LBE3664:
 9577              	.LBE3668:
 9578              	.LBE3673:
 9579              	.LBE3677:
 9580              	.LBE3682:
 9581              	.LBE3686:
 9582              	.LBE3690:
 9583              	.LBB3691:
 9584              	.LBB3692:
 9585              	.LBB3693:
 9586              	.LBB3694:
 9587              	.LBB3695:
 9588              	.LBB3696:
ARM GAS  /tmp/ccvzGucR.s 			page 381


 9589              	.LBB3697:
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 9590              		.loc 2 118 19 view .LVU2771
 9591 001e 0123     		movs	r3, #1
 9592              	.LBE3697:
 9593              	.LBE3696:
 9594              	.LBE3695:
 9595              	.LBE3694:
 9596              	.LBE3693:
 9597              	.LBE3692:
 9598              	.LBE3691:
 9599              	.LBB3720:
 9600              	.LBB3687:
 9601              	.LBB3683:
 9602              	.LBB3678:
 9603              	.LBB3674:
 9604              	.LBB3669:
 9605              	.LBB3665:
 9606              	.LBB3661:
 9607              	.LBB3657:
 9608 0020 8DF82430 		strb	r3, [sp, #36]
 9609              	.LBE3657:
 9610              	.LBE3661:
 9611              	.LBE3665:
 9612              	.LBE3669:
 9613              	.LBE3674:
 9614              	.LBE3678:
 9615              	.LBE3683:
 9616              	.LBE3687:
 9617              	.LBE3720:
 9618              	.LBB3721:
 9619              	.LBB3717:
 9620              	.LBB3715:
 9621              	.LBB3712:
 9622              	.LBB3710:
 9623              	.LBB3708:
 9624              	.LBB3706:
 9625 0024 8DF81430 		strb	r3, [sp, #20]
 9626              	.LBB3698:
 9627              	.LBB3699:
 9628              	.LBB3700:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 9629              		.loc 2 205 47 view .LVU2772
 9630 0028 1D4B     		ldr	r3, .L449+4
 9631 002a 1B68     		ldr	r3, [r3]	@ float
 9632 002c 0493     		str	r3, [sp, #16]	@ float
 9633              	.LBE3700:
 9634              	.LBE3699:
 9635              	.LBE3698:
 9636              	.LBE3706:
 9637              	.LBE3708:
 9638              	.LBE3710:
 9639              	.LBE3712:
 9640              	.LBE3715:
 9641              	.LBE3717:
 9642              	.LBE3721:
 9643              		.loc 1 1061 87 view .LVU2773
ARM GAS  /tmp/ccvzGucR.s 			page 382


 9644 002e C36B     		ldr	r3, [r0, #60]	@ float
 9645              	.LBB3722:
 9646              	.LBB3688:
 9647              	.LBB3684:
 9648              	.LBB3679:
 9649              	.LBB3675:
 9650              	.LBB3670:
 9651              	.LBB3666:
 9652              	.LBB3662:
 9653              	.LBB3658:
 9654              	.LBB3653:
 9655              	.LBB3650:
 9656              	.LBB3647:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 9657              		.loc 2 205 47 view .LVU2774
 9658 0030 0693     		str	r3, [sp, #24]	@ float
 9659              	.LBE3647:
 9660              	.LBE3650:
 9661              	.LBE3653:
 9662              	.LBE3658:
 9663              	.LBE3662:
 9664              	.LBE3666:
 9665              	.LBE3670:
 9666              	.LBE3675:
 9667              	.LBE3679:
 9668              	.LBE3684:
 9669              	.LBE3688:
 9670              	.LBE3722:
1062:Src/motor.cpp ****                             timestamp);
 9671              		.loc 1 1062 38 view .LVU2775
 9672 0032 3B68     		ldr	r3, [r7]
1060:Src/motor.cpp ****                                 std::make_optional(std::array<float, 3>{current_meas_.phA, current_
 9673              		.loc 1 1060 72 view .LVU2776
 9674 0034 0AAA     		add	r2, sp, #40
 9675              		.loc 1 1062 38 view .LVU2777
 9676 0036 D3F80480 		ldr	r8, [r3, #4]
 9677              	.LVL590:
 9678              	.LBB3723:
 9679              	.LBI3691:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 9680              		.loc 2 701 2 is_stmt 1 view .LVU2778
 9681              	.LBB3718:
 9682              	.LBI3718:
 9683              		.loc 4 76 5 view .LVU2779
 9684              		.loc 4 76 5 is_stmt 0 view .LVU2780
 9685              	.LBE3718:
 9686              	.LBB3719:
 9687              	.LBI3692:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 9688              		.loc 2 608 28 is_stmt 1 view .LVU2781
 9689              	.LBB3716:
 9690              	.LBB3713:
 9691              	.LBI3713:
 9692              		.loc 4 76 5 view .LVU2782
 9693              		.loc 4 76 5 is_stmt 0 view .LVU2783
 9694              	.LBE3713:
 9695              	.LBB3714:
ARM GAS  /tmp/ccvzGucR.s 			page 383


 9696              	.LBI3694:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 9697              		.loc 2 301 42 is_stmt 1 view .LVU2784
 9698              	.LBB3711:
 9699              	.LBI3695:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 9700              		.loc 2 116 2 view .LVU2785
 9701              	.LBB3709:
 9702              	.LBB3707:
 9703              	.LBB3704:
 9704              	.LBI3704:
 9705              		.loc 4 76 5 view .LVU2786
 9706              		.loc 4 76 5 is_stmt 0 view .LVU2787
 9707              	.LBE3704:
 9708              	.LBB3705:
 9709              	.LBI3698:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 9710              		.loc 2 204 6 is_stmt 1 view .LVU2788
 9711              	.LBB3703:
 9712              	.LBB3702:
 9713              	.LBB3701:
 9714              	.LBI3701:
 9715              		.loc 4 76 5 view .LVU2789
 9716              		.loc 4 76 5 is_stmt 0 view .LVU2790
 9717              	.LBE3701:
 9718              	.LBE3702:
 9719              	.LBE3703:
 9720              	.LBE3705:
 9721              	.LBE3707:
 9722              	.LBE3709:
 9723              	.LBE3711:
 9724              	.LBE3714:
 9725              	.LBE3716:
 9726              	.LBE3719:
 9727              	.LBE3723:
 9728              	.LBB3724:
 9729              	.LBI3633:
1206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return optional<decay_t<_Tp>> { std::forward<_Tp>(__t) }; }
 9730              		.loc 2 1206 5 is_stmt 1 view .LVU2791
 9731              	.LBB3689:
 9732              	.LBB3685:
 9733              	.LBI3635:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 9734              		.loc 2 701 2 view .LVU2792
 9735              	.LBB3680:
 9736              	.LBI3680:
 9737              		.loc 4 76 5 view .LVU2793
 9738              		.loc 4 76 5 is_stmt 0 view .LVU2794
 9739              	.LBE3680:
 9740              	.LBB3681:
 9741              	.LBI3636:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 9742              		.loc 2 608 28 is_stmt 1 view .LVU2795
 9743              	.LBB3676:
 9744              	.LBB3671:
 9745              	.LBI3671:
 9746              		.loc 4 76 5 view .LVU2796
ARM GAS  /tmp/ccvzGucR.s 			page 384


 9747              		.loc 4 76 5 is_stmt 0 view .LVU2797
 9748              	.LBE3671:
 9749              	.LBB3672:
 9750              	.LBI3638:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 9751              		.loc 2 301 42 is_stmt 1 view .LVU2798
 9752              	.LBB3667:
 9753              	.LBI3639:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 9754              		.loc 2 116 2 view .LVU2799
 9755              	.LBB3663:
 9756              	.LBB3659:
 9757              	.LBB3654:
 9758              	.LBI3654:
 9759              		.loc 4 76 5 view .LVU2800
 9760              		.loc 4 76 5 is_stmt 0 view .LVU2801
 9761              	.LBE3654:
 9762              	.LBB3655:
 9763              	.LBI3642:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 9764              		.loc 2 204 6 is_stmt 1 view .LVU2802
 9765              	.LBB3651:
 9766              	.LBB3648:
 9767              	.LBB3645:
 9768              	.LBI3645:
 9769              		.loc 4 76 5 view .LVU2803
 9770              		.loc 4 76 5 is_stmt 0 view .LVU2804
 9771              	.LBE3645:
 9772              	.LBE3648:
 9773              	.LBE3651:
 9774              	.LBE3655:
 9775              	.LBE3659:
 9776              	.LBE3663:
 9777              	.LBE3667:
 9778              	.LBE3672:
 9779              	.LBE3676:
 9780              	.LBE3681:
 9781              	.LBE3685:
 9782              	.LBE3689:
 9783              	.LBE3724:
1060:Src/motor.cpp ****                                 std::make_optional(std::array<float, 3>{current_meas_.phA, current_
 9784              		.loc 1 1060 72 view .LVU2805
 9785 003a 0391     		str	r1, [sp, #12]
 9786 003c 0446     		mov	r4, r0
 9787 003e 12E90700 		ldmdb	r2, {r0, r1, r2}
 9788              	.LVL591:
1060:Src/motor.cpp ****                                 std::make_optional(std::array<float, 3>{current_meas_.phA, current_
 9789              		.loc 1 1060 72 view .LVU2806
 9790 0042 8DE80700 		stm	sp, {r0, r1, r2}
 9791 0046 0DF1100C 		add	ip, sp, #16
 9792 004a 9CE80600 		ldm	ip, {r1, r2}
 9793 004e 069B     		ldr	r3, [sp, #24]
 9794 0050 3846     		mov	r0, r7
 9795 0052 C047     		blx	r8
 9796              	.LVL592:
1063:Src/motor.cpp ****         if (err != ODriveIntf::MotorIntf::ERROR_NONE) {
 9797              		.loc 1 1063 9 is_stmt 1 view .LVU2807
ARM GAS  /tmp/ccvzGucR.s 			page 385


 9798 0054 A8B9     		cbnz	r0, .L448
 9799              	.LVL593:
 9800              	.L438:
 9801              		.loc 1 1063 9 is_stmt 0 view .LVU2808
 9802              	.LBE3632:
 9803              	.LBE3731:
 9804              	.LBB3732:
 9805              	.LBI3732:
  56:Inc/task_timer.hpp ****     ~TaskTimerContext() { timer_.stop(start_time); }
 9806              		.loc 18 56 5 is_stmt 1 view .LVU2809
 9807              	.LBE3732:
 9808              		.loc 18 56 27 view .LVU2810
 9809              	.LBB3742:
 9810              	.LBB3733:
 9811              	.LBI3733:
  29:Inc/task_timer.hpp ****         uint32_t end_time = sample_TIM13();
 9812              		.loc 18 29 10 view .LVU2811
 9813              	.LBB3734:
  30:Inc/task_timer.hpp ****         uint32_t length = end_time - start_time;
 9814              		.loc 18 30 9 view .LVU2812
 9815              	.LBB3735:
 9816              	.LBI3735:
  12:Inc/task_timer.hpp ****     constexpr uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLOCK_
 9817              		.loc 18 12 17 view .LVU2813
 9818              	.LBB3736:
  13:Inc/task_timer.hpp ****     return clocks_per_cnt * TIM15->CNT;  // TODO: Use a hw_config
 9819              		.loc 18 13 5 view .LVU2814
  14:Inc/task_timer.hpp **** }
 9820              		.loc 18 14 5 view .LVU2815
  14:Inc/task_timer.hpp **** }
 9821              		.loc 18 14 36 is_stmt 0 view .LVU2816
 9822 0056 114B     		ldr	r3, .L449
 9823              	.LBE3736:
 9824              	.LBE3735:
  33:Inc/task_timer.hpp **** #ifdef MEASURE_START_TIME
 9825              		.loc 18 33 9 view .LVU2817
 9826 0058 124A     		ldr	r2, .L449+8
 9827              	.LBB3739:
 9828              	.LBB3737:
  14:Inc/task_timer.hpp **** }
 9829              		.loc 18 14 36 view .LVU2818
 9830 005a 5B6A     		ldr	r3, [r3, #36]
 9831              	.LBE3737:
 9832              	.LBE3739:
  33:Inc/task_timer.hpp **** #ifdef MEASURE_START_TIME
 9833              		.loc 18 33 9 view .LVU2819
 9834 005c 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 9835              	.LBB3740:
 9836              	.LBB3738:
  14:Inc/task_timer.hpp **** }
 9837              		.loc 18 14 36 view .LVU2820
 9838 005e 5B00     		lsls	r3, r3, #1
 9839              	.LBE3738:
 9840              	.LBE3740:
  30:Inc/task_timer.hpp ****         uint32_t length = end_time - start_time;
 9841              		.loc 18 30 42 view .LVU2821
 9842 0060 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccvzGucR.s 			page 386


 9843              	.LVL594:
  31:Inc/task_timer.hpp **** 
 9844              		.loc 18 31 9 is_stmt 1 view .LVU2822
  31:Inc/task_timer.hpp **** 
 9845              		.loc 18 31 36 is_stmt 0 view .LVU2823
 9846 0062 5A1B     		subs	r2, r3, r5
 9847              	.LVL595:
  33:Inc/task_timer.hpp **** #ifdef MEASURE_START_TIME
 9848              		.loc 18 33 9 is_stmt 1 view .LVU2824
 9849 0064 19B1     		cbz	r1, .L440
  35:Inc/task_timer.hpp **** #endif
 9850              		.loc 18 35 13 view .LVU2825
  38:Inc/task_timer.hpp **** #endif
 9851              		.loc 18 38 23 is_stmt 0 view .LVU2826
 9852 0066 C6E94853 		strd	r5, r3, [r6, #288]
  41:Inc/task_timer.hpp **** #endif
 9853              		.loc 18 41 13 is_stmt 1 view .LVU2827
  41:Inc/task_timer.hpp **** #endif
 9854              		.loc 18 41 21 is_stmt 0 view .LVU2828
 9855 006a C6F82821 		str	r2, [r6, #296]
 9856              	.L440:
  45:Inc/task_timer.hpp **** #endif
 9857              		.loc 18 45 9 is_stmt 1 view .LVU2829
 9858              	.LVL596:
 9859              	.LBB3741:
 9860              	.LBI3741:
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  preprocessor macro.
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Tp>
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline const _Tp&
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 9861              		.loc 13 254 5 view .LVU2830
 9862              		.loc 13 254 5 is_stmt 0 view .LVU2831
 9863              	.LBE3741:
  45:Inc/task_timer.hpp **** #endif
 9864              		.loc 18 45 21 view .LVU2832
 9865 006e D6F82C31 		ldr	r3, [r6, #300]
 9866              	.LVL597:
  45:Inc/task_timer.hpp **** #endif
 9867              		.loc 18 45 21 view .LVU2833
 9868 0072 9342     		cmp	r3, r2
 9869 0074 38BF     		it	cc
 9870 0076 1346     		movcc	r3, r2
 9871 0078 C6F82C31 		str	r3, [r6, #300]
 9872              	.LVL598:
ARM GAS  /tmp/ccvzGucR.s 			page 387


  45:Inc/task_timer.hpp **** #endif
 9873              		.loc 18 45 21 view .LVU2834
 9874              	.LBE3734:
 9875              	.LBE3733:
 9876              	.LBE3742:
1064:Src/motor.cpp ****             set_error(err);
1065:Src/motor.cpp ****         }
1066:Src/motor.cpp ****     }
1067:Src/motor.cpp **** }
 9877              		.loc 1 1067 1 view .LVU2835
 9878 007c 0AB0     		add	sp, sp, #40
 9879              	.LCFI133:
 9880              		.cfi_remember_state
 9881              		.cfi_def_cfa_offset 24
 9882              		@ sp needed
 9883 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 9884              	.LVL599:
 9885              	.L448:
 9886              	.LCFI134:
 9887              		.cfi_restore_state
 9888              	.LBB3743:
 9889              	.LBB3727:
1064:Src/motor.cpp ****             set_error(err);
 9890              		.loc 1 1064 13 is_stmt 1 view .LVU2836
 9891              	.LBB3725:
 9892              	.LBI3725:
 306:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 9893              		.loc 1 306 6 view .LVU2837
 9894              	.LBB3726:
 307:Src/motor.cpp **** 
 9895              		.loc 1 307 5 view .LVU2838
 307:Src/motor.cpp **** 
 9896              		.loc 1 307 86 is_stmt 0 view .LVU2839
 9897 0082 636B     		ldr	r3, [r4, #52]
 9898 0084 1843     		orrs	r0, r0, r3
 9899              	.LVL600:
 310:Src/motor.cpp **** 
 9900              		.loc 1 310 19 view .LVU2840
 9901 0086 A368     		ldr	r3, [r4, #8]
 307:Src/motor.cpp **** 
 9902              		.loc 1 307 12 view .LVU2841
 9903 0088 6063     		str	r0, [r4, #52]
 310:Src/motor.cpp **** 
 9904              		.loc 1 310 5 is_stmt 1 view .LVU2842
 310:Src/motor.cpp **** 
 9905              		.loc 1 310 19 is_stmt 0 view .LVU2843
 9906 008a 4022     		movs	r2, #64
 9907 008c C3F85C21 		str	r2, [r3, #348]
 312:Src/motor.cpp ****     update_brake_current();
 9908              		.loc 1 312 5 is_stmt 1 view .LVU2844
 312:Src/motor.cpp ****     update_brake_current();
 9909              		.loc 1 312 37 is_stmt 0 view .LVU2845
 9910 0090 2046     		mov	r0, r4
 9911 0092 FFF7FEFF 		bl	safety_critical_disarm_motor_pwm
 9912              	.LVL601:
 313:Src/motor.cpp **** }
 9913              		.loc 1 313 5 is_stmt 1 view .LVU2846
ARM GAS  /tmp/ccvzGucR.s 			page 388


 313:Src/motor.cpp **** }
 9914              		.loc 1 313 25 is_stmt 0 view .LVU2847
 9915 0096 FFF7FEFF 		bl	update_brake_current
 9916              	.LVL602:
 314:Src/motor.cpp **** 
 9917              		.loc 1 314 1 view .LVU2848
 9918 009a DCE7     		b	.L438
 9919              	.L450:
 9920              		.align	2
 9921              	.L449:
 9922 009c 00400140 		.word	1073823744
 9923 00a0 00000000 		.word	vbus_voltage
 9924 00a4 00000000 		.word	_ZN9TaskTimer7enabledE
 9925              	.LBE3726:
 9926              	.LBE3725:
 9927              	.LBE3727:
 9928              	.LBE3743:
 9929              		.cfi_endproc
 9930              	.LFE5029:
 9932              		.section	.text._ZN5Motor13pwm_update_cbEm,"ax",%progbits
 9933              		.align	1
 9934              		.p2align 2,,3
 9935              		.global	_ZN5Motor13pwm_update_cbEm
 9936              		.syntax unified
 9937              		.thumb
 9938              		.thumb_func
 9939              		.fpu fpv4-sp-d16
 9941              	_ZN5Motor13pwm_update_cbEm:
 9942              	.LVL603:
 9943              	.LFB5031:
1068:Src/motor.cpp **** 
1069:Src/motor.cpp **** 
1070:Src/motor.cpp **** 
1071:Src/motor.cpp **** void Motor::pwm_update_cb(uint32_t output_timestamp) {
 9944              		.loc 1 1071 54 is_stmt 1 view -0
 9945              		.cfi_startproc
 9946              		@ args = 0, pretend = 0, frame = 24
 9947              		@ frame_needed = 0, uses_anonymous_args = 0
1072:Src/motor.cpp ****     TaskTimerContext tmr{axis_->task_times_.pwm_update};
 9948              		.loc 1 1072 5 view .LVU2850
1071:Src/motor.cpp ****     TaskTimerContext tmr{axis_->task_times_.pwm_update};
 9949              		.loc 1 1071 54 is_stmt 0 view .LVU2851
 9950 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 9951              	.LCFI135:
 9952              		.cfi_def_cfa_offset 20
 9953              		.cfi_offset 4, -20
 9954              		.cfi_offset 5, -16
 9955              		.cfi_offset 6, -12
 9956              		.cfi_offset 7, -8
 9957              		.cfi_offset 14, -4
 9958              	.LBB3809:
 9959              	.LBB3810:
 9960              	.LBB3811:
 9961              	.LBB3812:
 9962              	.LBB3813:
  14:Inc/task_timer.hpp **** }
 9963              		.loc 18 14 36 view .LVU2852
ARM GAS  /tmp/ccvzGucR.s 			page 389


 9964 0002 7B4A     		ldr	r2, .L488
 9965              	.LBE3813:
 9966              	.LBE3812:
 9967              	.LBE3811:
 9968              	.LBE3810:
 9969              	.LBE3809:
1073:Src/motor.cpp **** 
1074:Src/motor.cpp ****     ODriveIntf::MotorIntf::Error control_law_status =  ODriveIntf::MotorIntf::ERROR_CONTROLLER_FAIL
1075:Src/motor.cpp ****     float pwm_timings[3] = {NAN, NAN, NAN};
 9970              		.loc 1 1075 11 view .LVU2853
 9971 0004 7B4B     		ldr	r3, .L488+4
 9972              	.LBB3828:
 9973              	.LBB3824:
 9974              	.LBB3820:
 9975              	.LBB3817:
 9976              	.LBB3814:
  14:Inc/task_timer.hpp **** }
 9977              		.loc 18 14 36 view .LVU2854
 9978 0006 556A     		ldr	r5, [r2, #36]
 9979              	.LBE3814:
 9980              	.LBE3817:
 9981              	.LBE3820:
 9982              	.LBE3824:
 9983              	.LBE3828:
1072:Src/motor.cpp **** 
 9984              		.loc 1 1072 26 view .LVU2855
 9985 0008 8668     		ldr	r6, [r0, #8]
 9986              	.LVL604:
 9987              	.LBB3829:
 9988              	.LBI3809:
  55:Inc/task_timer.hpp ****     ~TaskTimerContext() { timer_.stop(start_time); }
 9989              		.loc 18 55 5 is_stmt 1 view .LVU2856
 9990              	.LBB3825:
 9991              	.LBI3810:
  25:Inc/task_timer.hpp ****         return sample_TIM13();
 9992              		.loc 18 25 14 view .LVU2857
 9993              	.LBB3821:
  26:Inc/task_timer.hpp ****     }
 9994              		.loc 18 26 9 view .LVU2858
 9995              	.LBB3818:
 9996              	.LBI3812:
  12:Inc/task_timer.hpp ****     constexpr uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLOCK_
 9997              		.loc 18 12 17 view .LVU2859
 9998              	.LBB3815:
  13:Inc/task_timer.hpp ****     return clocks_per_cnt * TIM15->CNT;  // TODO: Use a hw_config
 9999              		.loc 18 13 5 view .LVU2860
  14:Inc/task_timer.hpp **** }
 10000              		.loc 18 14 5 view .LVU2861
 10001              	.LBE3815:
 10002              	.LBE3818:
 10003              	.LBE3821:
 10004              	.LBE3825:
 10005              	.LBE3829:
1076:Src/motor.cpp ****     std::optional<float> i_bus;
1077:Src/motor.cpp **** 
1078:Src/motor.cpp ****     if (control_law_) {
 10006              		.loc 1 1078 9 is_stmt 0 view .LVU2862
ARM GAS  /tmp/ccvzGucR.s 			page 390


 10007 000a D0F8AC73 		ldr	r7, [r0, #940]
1071:Src/motor.cpp ****     TaskTimerContext tmr{axis_->task_times_.pwm_update};
 10008              		.loc 1 1071 54 view .LVU2863
 10009 000e 87B0     		sub	sp, sp, #28
 10010              	.LCFI136:
 10011              		.cfi_def_cfa_offset 48
1076:Src/motor.cpp ****     std::optional<float> i_bus;
 10012              		.loc 1 1076 26 view .LVU2864
 10013 0010 0022     		movs	r2, #0
 10014 0012 CDE90122 		strd	r2, r2, [sp, #4]
1071:Src/motor.cpp ****     TaskTimerContext tmr{axis_->task_times_.pwm_update};
 10015              		.loc 1 1071 54 view .LVU2865
 10016 0016 0446     		mov	r4, r0
 10017 0018 8E46     		mov	lr, r1
1075:Src/motor.cpp ****     std::optional<float> i_bus;
 10018              		.loc 1 1075 11 view .LVU2866
 10019 001a 93E80700 		ldm	r3, {r0, r1, r2}
 10020              	.LVL605:
 10021              	.LBB3830:
 10022              	.LBB3826:
 10023              	.LBB3822:
 10024              	.LBB3819:
 10025              	.LBB3816:
  14:Inc/task_timer.hpp **** }
 10026              		.loc 18 14 36 view .LVU2867
 10027 001e 6D00     		lsls	r5, r5, #1
 10028              	.LBE3816:
 10029              	.LBE3819:
 10030              	.LBE3822:
 10031              	.LBE3826:
 10032              	.LBE3830:
1075:Src/motor.cpp ****     std::optional<float> i_bus;
 10033              		.loc 1 1075 11 view .LVU2868
 10034 0020 0DF10C0C 		add	ip, sp, #12
 10035 0024 8CE80700 		stm	ip, {r0, r1, r2}
 10036              	.LBB3831:
 10037              	.LBB3827:
 10038              	.LBB3823:
  26:Inc/task_timer.hpp ****     }
 10039              		.loc 18 26 29 view .LVU2869
 10040 0028 ADB2     		uxth	r5, r5
 10041              	.LVL606:
  26:Inc/task_timer.hpp ****     }
 10042              		.loc 18 26 29 view .LVU2870
 10043              	.LBE3823:
 10044              	.LBE3827:
 10045              	.LBE3831:
1074:Src/motor.cpp ****     float pwm_timings[3] = {NAN, NAN, NAN};
 10046              		.loc 1 1074 5 is_stmt 1 view .LVU2871
1075:Src/motor.cpp ****     std::optional<float> i_bus;
 10047              		.loc 1 1075 5 view .LVU2872
1076:Src/motor.cpp **** 
 10048              		.loc 1 1076 5 view .LVU2873
 10049              		.loc 1 1078 5 view .LVU2874
 10050 002a 002F     		cmp	r7, #0
 10051 002c 00F09B80 		beq	.L484
1079:Src/motor.cpp ****         control_law_status = control_law_->get_output(
ARM GAS  /tmp/ccvzGucR.s 			page 391


 10052              		.loc 1 1079 9 view .LVU2875
 10053              		.loc 1 1079 54 is_stmt 0 view .LVU2876
 10054 0030 6246     		mov	r2, ip
1080:Src/motor.cpp ****             output_timestamp, pwm_timings, &i_bus);
 10055              		.loc 1 1080 50 view .LVU2877
 10056 0032 D7F800C0 		ldr	ip, [r7]
1079:Src/motor.cpp ****         control_law_status = control_law_->get_output(
 10057              		.loc 1 1079 54 view .LVU2878
 10058 0036 01AB     		add	r3, sp, #4
 10059 0038 3846     		mov	r0, r7
 10060 003a 7146     		mov	r1, lr
 10061 003c DCF80870 		ldr	r7, [ip, #8]
 10062 0040 B847     		blx	r7
 10063              	.LVL607:
 10064              	.LBB3832:
1081:Src/motor.cpp ****     }
1082:Src/motor.cpp **** 
1083:Src/motor.cpp ****     // Apply control law to calculate PWM duty cycles
1084:Src/motor.cpp ****     if (is_armed_ && control_law_status == ODriveIntf::MotorIntf::ERROR_NONE) {
 10065              		.loc 1 1084 5 view .LVU2879
 10066 0042 94F83830 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
 10067              	.LVL608:
 10068              		.loc 1 1084 5 view .LVU2880
 10069              	.LBE3832:
 10070              		.loc 1 1084 5 is_stmt 1 view .LVU2881
 10071              	.LBB3888:
 10072 0046 002B     		cmp	r3, #0
 10073 0048 40D1     		bne	.L485
 10074              	.LVL609:
 10075              	.L483:
 10076              		.loc 1 1084 5 is_stmt 0 view .LVU2882
 10077              	.LBE3888:
1085:Src/motor.cpp ****         uint16_t next_timings[] = {
1086:Src/motor.cpp ****             (uint16_t)(pwm_timings[0] * (float)TIM_1_8_PERIOD_CLOCKS),
1087:Src/motor.cpp ****             (uint16_t)(pwm_timings[1] * (float)TIM_1_8_PERIOD_CLOCKS),
1088:Src/motor.cpp ****             (uint16_t)(pwm_timings[2] * (float)TIM_1_8_PERIOD_CLOCKS)
1089:Src/motor.cpp ****         };
1090:Src/motor.cpp ****         apply_pwm_timings(next_timings, false);
1091:Src/motor.cpp ****     } else if (is_armed_) {
1092:Src/motor.cpp ****         if (!( hw_config_.timer->Instance->BDTR & TIM_BDTR_MOE) && (control_law_status == ODriveInt
1093:Src/motor.cpp ****             // If the PWM output is armed in software but not yet in
1094:Src/motor.cpp ****             // hardware we tolerate the "initializing" error.
1095:Src/motor.cpp ****             i_bus = 0.0f;
1096:Src/motor.cpp ****         } else {
1097:Src/motor.cpp ****             set_error(control_law_status);
1098:Src/motor.cpp ****         }
1099:Src/motor.cpp ****     }
1100:Src/motor.cpp **** 
1101:Src/motor.cpp ****     if (!is_armed_) {
1102:Src/motor.cpp ****         // If something above failed, reset I_bus to 0A.
1103:Src/motor.cpp ****         i_bus = 0.0f;
1104:Src/motor.cpp ****     } else if (is_armed_ && !i_bus.has_value()) {
1105:Src/motor.cpp ****         // If the motor is armed then i_bus must be known
1106:Src/motor.cpp ****         set_error(ODriveIntf::MotorIntf::ERROR_UNKNOWN_CURRENT_MEASUREMENT);
1107:Src/motor.cpp ****         i_bus = 0.0f;
 10078              		.loc 1 1107 9 is_stmt 1 view .LVU2883
 10079              	.LBB3889:
ARM GAS  /tmp/ccvzGucR.s 			page 392


 10080              	.LBI3889:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 10081              		.loc 2 701 2 view .LVU2884
 10082              	.LBB3890:
 10083              	.LBI3890:
 10084              		.loc 4 76 5 view .LVU2885
 10085              		.loc 4 76 5 is_stmt 0 view .LVU2886
 10086              	.LBE3890:
 10087              	.LBB3891:
 10088              	.LBI3891:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 10089              		.loc 2 608 28 is_stmt 1 view .LVU2887
 10090              	.LBB3892:
 10091              	.LBI3892:
 10092              		.loc 4 76 5 view .LVU2888
 10093              		.loc 4 76 5 is_stmt 0 view .LVU2889
 10094              	.LBE3892:
 10095              	.LBB3893:
 10096              	.LBI3893:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 10097              		.loc 2 301 42 is_stmt 1 view .LVU2890
 10098              	.LBB3894:
 10099              	.LBI3894:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 10100              		.loc 2 116 2 view .LVU2891
 10101              	.LBB3895:
 10102              	.LBI3895:
 10103              		.loc 4 76 5 view .LVU2892
 10104              		.loc 4 76 5 is_stmt 0 view .LVU2893
 10105              	.LBE3895:
 10106              	.LBB3896:
 10107              	.LBI3896:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 10108              		.loc 2 204 6 is_stmt 1 view .LVU2894
 10109              	.LBB3897:
 10110              	.LBI3897:
 10111              		.loc 4 76 5 view .LVU2895
 10112              		.loc 4 76 5 is_stmt 0 view .LVU2896
 10113              	.LBE3897:
 10114              	.LBE3896:
 10115              	.LBE3894:
 10116              	.LBE3893:
 10117              	.LBE3891:
 10118              	.LBE3889:
 10119              		.loc 1 1107 15 view .LVU2897
 10120 004a 9FED6B7A 		vldr.32	s14, .L488+8
 10121 004e 0123     		movs	r3, #1
 10122 0050 F0EE477A 		vmov.f32	s15, s14
 10123 0054 8DED017A 		vstr.32	s14, [sp, #4]
 10124 0058 8DF80830 		strb	r3, [sp, #8]
 10125              	.L467:
1108:Src/motor.cpp ****     }
1109:Src/motor.cpp **** 
1110:Src/motor.cpp ****     I_bus_ = *i_bus;
 10126              		.loc 1 1110 5 is_stmt 1 view .LVU2898
1111:Src/motor.cpp **** 
1112:Src/motor.cpp ****     if (*i_bus < config_.I_bus_hard_min || *i_bus > config_.I_bus_hard_max) {
ARM GAS  /tmp/ccvzGucR.s 			page 393


 10127              		.loc 1 1112 18 is_stmt 0 view .LVU2899
 10128 005c 6368     		ldr	r3, [r4, #4]
1110:Src/motor.cpp **** 
 10129              		.loc 1 1110 12 view .LVU2900
 10130 005e C4EDBC7A 		vstr.32	s15, [r4, #752]
 10131              		.loc 1 1112 5 is_stmt 1 view .LVU2901
 10132              		.loc 1 1112 26 is_stmt 0 view .LVU2902
 10133 0062 03F22442 		addw	r2, r3, #1060
 10134              		.loc 1 1112 41 view .LVU2903
 10135 0066 92ED007A 		vldr.32	s14, [r2]
 10136 006a B4EEE77A 		vcmpe.f32	s14, s15
 10137 006e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 10138 0072 1DDC     		bgt	.L468
 10139              		.loc 1 1112 61 view .LVU2904
 10140 0074 03F58563 		add	r3, r3, #1064
 10141              		.loc 1 1112 41 view .LVU2905
 10142 0078 93ED007A 		vldr.32	s14, [r3]
 10143 007c B4EEE77A 		vcmpe.f32	s14, s15
 10144 0080 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 10145 0084 14D4     		bmi	.L468
 10146              	.L469:
 10147              	.LVL610:
 10148              	.LBB3898:
 10149              	.LBI3898:
 10150              		.loc 18 56 5 is_stmt 1 view .LVU2906
 10151              	.LBE3898:
 10152              		.loc 18 56 27 view .LVU2907
 10153              	.LBB3908:
 10154              	.LBB3899:
 10155              	.LBI3899:
  29:Inc/task_timer.hpp ****         uint32_t end_time = sample_TIM13();
 10156              		.loc 18 29 10 view .LVU2908
 10157              	.LBB3900:
  30:Inc/task_timer.hpp ****         uint32_t length = end_time - start_time;
 10158              		.loc 18 30 9 view .LVU2909
 10159              	.LBB3901:
 10160              	.LBI3901:
  12:Inc/task_timer.hpp ****     constexpr uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLOCK_
 10161              		.loc 18 12 17 view .LVU2910
 10162              	.LBB3902:
  13:Inc/task_timer.hpp ****     return clocks_per_cnt * TIM15->CNT;  // TODO: Use a hw_config
 10163              		.loc 18 13 5 view .LVU2911
  14:Inc/task_timer.hpp **** }
 10164              		.loc 18 14 5 view .LVU2912
  14:Inc/task_timer.hpp **** }
 10165              		.loc 18 14 36 is_stmt 0 view .LVU2913
 10166 0086 5A4B     		ldr	r3, .L488
 10167              	.LBE3902:
 10168              	.LBE3901:
  33:Inc/task_timer.hpp **** #ifdef MEASURE_START_TIME
 10169              		.loc 18 33 9 view .LVU2914
 10170 0088 5C4A     		ldr	r2, .L488+12
 10171              	.LBB3905:
 10172              	.LBB3903:
  14:Inc/task_timer.hpp **** }
 10173              		.loc 18 14 36 view .LVU2915
 10174 008a 5B6A     		ldr	r3, [r3, #36]
ARM GAS  /tmp/ccvzGucR.s 			page 394


 10175              	.LBE3903:
 10176              	.LBE3905:
  33:Inc/task_timer.hpp **** #ifdef MEASURE_START_TIME
 10177              		.loc 18 33 9 view .LVU2916
 10178 008c 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 10179              	.LBB3906:
 10180              	.LBB3904:
  14:Inc/task_timer.hpp **** }
 10181              		.loc 18 14 36 view .LVU2917
 10182 008e 5B00     		lsls	r3, r3, #1
 10183              	.LBE3904:
 10184              	.LBE3906:
  30:Inc/task_timer.hpp ****         uint32_t length = end_time - start_time;
 10185              		.loc 18 30 42 view .LVU2918
 10186 0090 9BB2     		uxth	r3, r3
 10187              	.LVL611:
  31:Inc/task_timer.hpp **** 
 10188              		.loc 18 31 9 is_stmt 1 view .LVU2919
  31:Inc/task_timer.hpp **** 
 10189              		.loc 18 31 36 is_stmt 0 view .LVU2920
 10190 0092 5A1B     		subs	r2, r3, r5
 10191              	.LVL612:
  33:Inc/task_timer.hpp **** #ifdef MEASURE_START_TIME
 10192              		.loc 18 33 9 is_stmt 1 view .LVU2921
 10193 0094 19B1     		cbz	r1, .L471
  35:Inc/task_timer.hpp **** #endif
 10194              		.loc 18 35 13 view .LVU2922
  38:Inc/task_timer.hpp **** #endif
 10195              		.loc 18 38 23 is_stmt 0 view .LVU2923
 10196 0096 C6E94C53 		strd	r5, r3, [r6, #304]
  41:Inc/task_timer.hpp **** #endif
 10197              		.loc 18 41 13 is_stmt 1 view .LVU2924
  41:Inc/task_timer.hpp **** #endif
 10198              		.loc 18 41 21 is_stmt 0 view .LVU2925
 10199 009a C6F83821 		str	r2, [r6, #312]
 10200              	.L471:
  45:Inc/task_timer.hpp **** #endif
 10201              		.loc 18 45 9 is_stmt 1 view .LVU2926
 10202              	.LVL613:
 10203              	.LBB3907:
 10204              	.LBI3907:
 10205              		.loc 13 254 5 view .LVU2927
 10206              		.loc 13 254 5 is_stmt 0 view .LVU2928
 10207              	.LBE3907:
  45:Inc/task_timer.hpp **** #endif
 10208              		.loc 18 45 21 view .LVU2929
 10209 009e D6F83C31 		ldr	r3, [r6, #316]
 10210              	.LVL614:
  45:Inc/task_timer.hpp **** #endif
 10211              		.loc 18 45 21 view .LVU2930
 10212 00a2 9342     		cmp	r3, r2
 10213 00a4 38BF     		it	cc
 10214 00a6 1346     		movcc	r3, r2
 10215 00a8 C6F83C31 		str	r3, [r6, #316]
 10216              	.LVL615:
  45:Inc/task_timer.hpp **** #endif
 10217              		.loc 18 45 21 view .LVU2931
ARM GAS  /tmp/ccvzGucR.s 			page 395


 10218              	.LBE3900:
 10219              	.LBE3899:
 10220              	.LBE3908:
1113:Src/motor.cpp ****         set_error(ODriveIntf::MotorIntf::ERROR_I_BUS_OUT_OF_RANGE);
1114:Src/motor.cpp ****     }
1115:Src/motor.cpp **** 
1116:Src/motor.cpp **** 
1117:Src/motor.cpp **** }...
 10221              		.loc 1 1117 1 view .LVU2932
 10222 00ac 07B0     		add	sp, sp, #28
 10223              	.LCFI137:
 10224              		.cfi_remember_state
 10225              		.cfi_def_cfa_offset 20
 10226              		@ sp needed
 10227 00ae F0BD     		pop	{r4, r5, r6, r7, pc}
 10228              	.LVL616:
 10229              	.L468:
 10230              	.LCFI138:
 10231              		.cfi_restore_state
1113:Src/motor.cpp ****         set_error(ODriveIntf::MotorIntf::ERROR_I_BUS_OUT_OF_RANGE);
 10232              		.loc 1 1113 9 is_stmt 1 discriminator 3 view .LVU2933
 10233              	.LBB3909:
 10234              	.LBI3909:
 306:Src/motor.cpp **** void Motor::set_error(ODriveIntf::MotorIntf::Error error){
 10235              		.loc 1 306 6 discriminator 3 view .LVU2934
 10236              	.LBB3910:
 307:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 10237              		.loc 1 307 5 discriminator 3 view .LVU2935
 307:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 10238              		.loc 1 307 86 is_stmt 0 discriminator 3 view .LVU2936
 10239 00b0 636B     		ldr	r3, [r4, #52]
 310:Src/motor.cpp ****     axis_->error_ = Axis::ERROR_MOTOR_FAILED;
 10240              		.loc 1 310 19 discriminator 3 view .LVU2937
 10241 00b2 A268     		ldr	r2, [r4, #8]
 307:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 10242              		.loc 1 307 86 discriminator 3 view .LVU2938
 10243 00b4 43F00063 		orr	r3, r3, #134217728
 307:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 10244              		.loc 1 307 12 discriminator 3 view .LVU2939
 10245 00b8 6363     		str	r3, [r4, #52]
 310:Src/motor.cpp ****     axis_->error_ = Axis::ERROR_MOTOR_FAILED;
 10246              		.loc 1 310 5 is_stmt 1 discriminator 3 view .LVU2940
 310:Src/motor.cpp ****     axis_->error_ = Axis::ERROR_MOTOR_FAILED;
 10247              		.loc 1 310 19 is_stmt 0 discriminator 3 view .LVU2941
 10248 00ba 4023     		movs	r3, #64
 10249 00bc C2F85C31 		str	r3, [r2, #348]
 312:Src/motor.cpp ****     safety_critical_disarm_motor_pwm(*this);
 10250              		.loc 1 312 5 is_stmt 1 discriminator 3 view .LVU2942
 312:Src/motor.cpp ****     safety_critical_disarm_motor_pwm(*this);
 10251              		.loc 1 312 37 is_stmt 0 discriminator 3 view .LVU2943
 10252 00c0 2046     		mov	r0, r4
 10253 00c2 FFF7FEFF 		bl	safety_critical_disarm_motor_pwm
 10254              	.LVL617:
 313:Src/motor.cpp ****     update_brake_current();
 10255              		.loc 1 313 5 is_stmt 1 discriminator 3 view .LVU2944
 313:Src/motor.cpp ****     update_brake_current();
 10256              		.loc 1 313 25 is_stmt 0 discriminator 3 view .LVU2945
ARM GAS  /tmp/ccvzGucR.s 			page 396


 10257 00c6 FFF7FEFF 		bl	update_brake_current
 10258              	.LVL618:
 314:Src/motor.cpp **** }
 10259              		.loc 1 314 1 discriminator 3 view .LVU2946
 10260 00ca DCE7     		b	.L469
 10261              	.LVL619:
 10262              	.L485:
 314:Src/motor.cpp **** }
 10263              		.loc 1 314 1 discriminator 3 view .LVU2947
 10264              	.LBE3910:
 10265              	.LBE3909:
 10266              	.LBB3911:
1084:Src/motor.cpp ****     if (is_armed_ && control_law_status == ODriveIntf::MotorIntf::ERROR_NONE) {
 10267              		.loc 1 1084 19 discriminator 1 view .LVU2948
 10268 00cc 0028     		cmp	r0, #0
 10269 00ce 76D1     		bne	.L455
 10270              	.LBB3833:
1085:Src/motor.cpp ****         uint16_t next_timings[] = {
 10271              		.loc 1 1085 9 is_stmt 1 view .LVU2949
1087:Src/motor.cpp ****             (uint16_t)(pwm_timings[1] * (float)TIM_1_8_PERIOD_CLOCKS),
 10272              		.loc 1 1087 39 is_stmt 0 view .LVU2950
 10273 00d0 9FED4B6A 		vldr.32	s12, .L488+16
 10274 00d4 9DED047A 		vldr.32	s14, [sp, #16]
1088:Src/motor.cpp ****             (uint16_t)(pwm_timings[2] * (float)TIM_1_8_PERIOD_CLOCKS)
 10275              		.loc 1 1088 39 view .LVU2951
 10276 00d8 DDED057A 		vldr.32	s15, [sp, #20]
1086:Src/motor.cpp ****             (uint16_t)(pwm_timings[0] * (float)TIM_1_8_PERIOD_CLOCKS),
 10277              		.loc 1 1086 39 view .LVU2952
 10278 00dc DDED036A 		vldr.32	s13, [sp, #12]
 10279              	.LBB3834:
 10280              	.LBB3835:
 184:Src/motor.cpp ****     hw_config_.timer->Instance->CCR1 = timings[0];
 10281              		.loc 1 184 16 view .LVU2953
 10282 00e0 2168     		ldr	r1, [r4]
 188:Src/motor.cpp ****     if (armed_state_ == ARMED_STATE_WAITING_FOR_TIMINGS) {
 10283              		.loc 1 188 9 view .LVU2954
 10284 00e2 94F839C0 		ldrb	ip, [r4, #57]	@ zero_extendqisi2
 184:Src/motor.cpp ****     hw_config_.timer->Instance->CCR1 = timings[0];
 10285              		.loc 1 184 23 view .LVU2955
 10286 00e6 0968     		ldr	r1, [r1]
 10287              	.LBE3835:
 10288              	.LBE3834:
1087:Src/motor.cpp ****             (uint16_t)(pwm_timings[1] * (float)TIM_1_8_PERIOD_CLOCKS),
 10289              		.loc 1 1087 39 view .LVU2956
 10290 00e8 27EE067A 		vmul.f32	s14, s14, s12
1088:Src/motor.cpp ****             (uint16_t)(pwm_timings[2] * (float)TIM_1_8_PERIOD_CLOCKS)
 10291              		.loc 1 1088 39 view .LVU2957
 10292 00ec 67EE867A 		vmul.f32	s15, s15, s12
1086:Src/motor.cpp ****             (uint16_t)(pwm_timings[0] * (float)TIM_1_8_PERIOD_CLOCKS),
 10293              		.loc 1 1086 39 view .LVU2958
 10294 00f0 66EE866A 		vmul.f32	s13, s13, s12
1087:Src/motor.cpp ****             (uint16_t)(pwm_timings[1] * (float)TIM_1_8_PERIOD_CLOCKS),
 10295              		.loc 1 1087 13 view .LVU2959
 10296 00f4 BCEEC77A 		vcvt.u32.f32	s14, s14
1088:Src/motor.cpp ****             (uint16_t)(pwm_timings[2] * (float)TIM_1_8_PERIOD_CLOCKS)
 10297              		.loc 1 1088 13 view .LVU2960
 10298 00f8 FCEEE77A 		vcvt.u32.f32	s15, s15
ARM GAS  /tmp/ccvzGucR.s 			page 397


1087:Src/motor.cpp ****             (uint16_t)(pwm_timings[1] * (float)TIM_1_8_PERIOD_CLOCKS),
 10299              		.loc 1 1087 13 view .LVU2961
 10300 00fc 17EE103A 		vmov	r3, s14	@ int
1086:Src/motor.cpp ****             (uint16_t)(pwm_timings[0] * (float)TIM_1_8_PERIOD_CLOCKS),
 10301              		.loc 1 1086 13 view .LVU2962
 10302 0100 FCEEE66A 		vcvt.u32.f32	s13, s13
 10303              	.LBB3861:
 10304              	.LBB3853:
 184:Src/motor.cpp ****     hw_config_.timer->Instance->CCR1 = timings[0];
 10305              		.loc 1 184 23 view .LVU2963
 10306 0104 0F68     		ldr	r7, [r1]
 10307              	.LBE3853:
 10308              	.LBE3861:
1087:Src/motor.cpp ****             (uint16_t)(pwm_timings[1] * (float)TIM_1_8_PERIOD_CLOCKS),
 10309              		.loc 1 1087 13 view .LVU2964
 10310 0106 9AB2     		uxth	r2, r3
 10311              	.LBB3862:
 10312              	.LBB3854:
 184:Src/motor.cpp ****     hw_config_.timer->Instance->CCR1 = timings[0];
 10313              		.loc 1 184 49 view .LVU2965
 10314 0108 16EE901A 		vmov	r1, s13	@ int
 10315              	.LBE3854:
 10316              	.LBE3862:
1088:Src/motor.cpp ****             (uint16_t)(pwm_timings[2] * (float)TIM_1_8_PERIOD_CLOCKS)
 10317              		.loc 1 1088 13 view .LVU2966
 10318 010c 17EE903A 		vmov	r3, s15	@ int
 10319              	.LBB3863:
 10320              	.LBB3855:
 184:Src/motor.cpp ****     hw_config_.timer->Instance->CCR1 = timings[0];
 10321              		.loc 1 184 49 view .LVU2967
 10322 0110 89B2     		uxth	r1, r1
 10323              	.LBE3855:
 10324              	.LBE3863:
1088:Src/motor.cpp ****             (uint16_t)(pwm_timings[2] * (float)TIM_1_8_PERIOD_CLOCKS)
 10325              		.loc 1 1088 13 view .LVU2968
 10326 0112 9BB2     		uxth	r3, r3
1090:Src/motor.cpp ****         apply_pwm_timings(next_timings, false);
 10327              		.loc 1 1090 9 is_stmt 1 view .LVU2969
 10328              	.LVL620:
 10329              	.LBB3864:
 10330              	.LBI3834:
 181:Src/motor.cpp **** void Motor::apply_pwm_timings(uint16_t timings[3], bool tentative) {
 10331              		.loc 1 181 6 view .LVU2970
 10332              	.LBB3856:
 183:Src/motor.cpp ****     (void)tentative;
 10333              		.loc 1 183 5 view .LVU2971
 184:Src/motor.cpp ****     hw_config_.timer->Instance->CCR1 = timings[0];
 10334              		.loc 1 184 5 view .LVU2972
 188:Src/motor.cpp ****     if (armed_state_ == ARMED_STATE_WAITING_FOR_TIMINGS) {
 10335              		.loc 1 188 5 is_stmt 0 view .LVU2973
 10336 0114 BCF1010F 		cmp	ip, #1
 184:Src/motor.cpp ****     hw_config_.timer->Instance->CCR1 = timings[0];
 10337              		.loc 1 184 38 view .LVU2974
 10338 0118 7963     		str	r1, [r7, #52]
 185:Src/motor.cpp ****     hw_config_.timer->Instance->CCR2 = timings[1];
 10339              		.loc 1 185 5 is_stmt 1 view .LVU2975
 185:Src/motor.cpp ****     hw_config_.timer->Instance->CCR2 = timings[1];
ARM GAS  /tmp/ccvzGucR.s 			page 398


 10340              		.loc 1 185 38 is_stmt 0 view .LVU2976
 10341 011a BA63     		str	r2, [r7, #56]
 186:Src/motor.cpp ****     hw_config_.timer->Instance->CCR3 = timings[2];
 10342              		.loc 1 186 5 is_stmt 1 view .LVU2977
 186:Src/motor.cpp ****     hw_config_.timer->Instance->CCR3 = timings[2];
 10343              		.loc 1 186 38 is_stmt 0 view .LVU2978
 10344 011c FB63     		str	r3, [r7, #60]
 188:Src/motor.cpp ****     if (armed_state_ == ARMED_STATE_WAITING_FOR_TIMINGS) {
 10345              		.loc 1 188 5 is_stmt 1 view .LVU2979
 10346 011e 3CD0     		beq	.L486
 194:Src/motor.cpp ****     } else if (armed_state_ == ARMED_STATE_WAITING_FOR_UPDATE) {
 10347              		.loc 1 194 12 view .LVU2980
 10348 0120 BCF1020F 		cmp	ip, #2
 10349 0124 5CD0     		beq	.L487
 199:Src/motor.cpp ****     } else if (armed_state_ == Motor::ARMED_STATE_ARMED) {
 10350              		.loc 1 199 12 view .LVU2981
 10351 0126 BCF1030F 		cmp	ip, #3
 10352 012a 16D0     		beq	.L457
 10353              	.LVL621:
 10354              	.LBB3836:
 10355              	.LBI3836:
 181:Src/motor.cpp **** void Motor::apply_pwm_timings(uint16_t timings[3], bool tentative) {
 10356              		.loc 1 181 6 view .LVU2982
 181:Src/motor.cpp **** void Motor::apply_pwm_timings(uint16_t timings[3], bool tentative) {
 10357              		.loc 1 181 6 is_stmt 0 view .LVU2983
 10358              	.LBE3836:
 10359              	.LBE3856:
 10360              	.LBE3864:
 10361              	.LBE3833:
 10362              	.LBE3911:
 203:Src/motor.cpp ****        disarm();
 10363              		.loc 1 203 8 is_stmt 1 view .LVU2984
 10364              	.LBB3912:
 10365              	.LBB3869:
 10366              	.LBB3865:
 10367              	.LBB3857:
 10368              	.LBB3851:
 10369              	.LBB3837:
 10370              	.LBI3837:
 253:Src/motor.cpp **** bool Motor::disarm()
 10371              		.loc 1 253 6 view .LVU2985
 10372              	.LBB3838:
 255:Src/motor.cpp ****     uint32_t mask = cpu_enter_critical();
 10373              		.loc 1 255 5 view .LVU2986
 10374              	.LBB3839:
 10375              	.LBI3839:
  65:Inc/low_level.h ****     uint32_t primask = __get_PRIMASK();
 10376              		.loc 11 65 17 view .LVU2987
 10377              	.LBB3840:
  66:Inc/low_level.h ****     __disable_irq();
 10378              		.loc 11 66 5 view .LVU2988
 10379              	.LBB3841:
 10380              	.LBI3841:
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 10381              		.loc 12 449 31 view .LVU2989
 10382              	.LBB3842:
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccvzGucR.s 			page 399


 10383              		.loc 12 451 3 view .LVU2990
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 10384              		.loc 12 453 3 view .LVU2991
 10385              		.syntax unified
 10386              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 10387 012c EFF31081 		MRS r1, primask
 10388              	@ 0 "" 2
 10389              	.LVL622:
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 10390              		.loc 12 454 3 view .LVU2992
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 10391              		.loc 12 454 3 is_stmt 0 view .LVU2993
 10392              		.thumb
 10393              		.syntax unified
 10394              	.LBE3842:
 10395              	.LBE3841:
  67:Inc/low_level.h ****     return primask;
 10396              		.loc 11 67 5 is_stmt 1 view .LVU2994
 10397              	.LBB3843:
 10398              	.LBI3843:
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 10399              		.loc 12 207 27 view .LVU2995
 10400              	.LBB3844:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 10401              		.loc 12 209 3 view .LVU2996
 10402              		.syntax unified
 10403              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 10404 0130 72B6     		cpsid i
 10405              	@ 0 "" 2
 10406              		.thumb
 10407              		.syntax unified
 10408              	.LBE3844:
 10409              	.LBE3843:
  68:Inc/low_level.h **** }
 10410              		.loc 11 68 5 view .LVU2997
 10411              	.LVL623:
  68:Inc/low_level.h **** }
 10412              		.loc 11 68 5 is_stmt 0 view .LVU2998
 10413              	.LBE3840:
 10414              	.LBE3839:
 256:Src/motor.cpp ****     bool was_armed = armed_state_ != ODriveIntf::MotorIntf::ARMED_STATE_DISARMED;
 10415              		.loc 1 256 5 is_stmt 1 view .LVU2999
 257:Src/motor.cpp ****     armed_state_ = ODriveIntf::MotorIntf::ARMED_STATE_DISARMED;
 10416              		.loc 1 257 5 view .LVU3000
 258:Src/motor.cpp ****     __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(hw_config_.timer); 
 10417              		.loc 1 258 5 is_stmt 0 view .LVU3001
 10418 0132 2368     		ldr	r3, [r4]
 257:Src/motor.cpp ****     armed_state_ = ODriveIntf::MotorIntf::ARMED_STATE_DISARMED;
 10419              		.loc 1 257 18 view .LVU3002
 10420 0134 84F83900 		strb	r0, [r4, #57]
 10421              	.LVL624:
 258:Src/motor.cpp ****     __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(hw_config_.timer); 
 10422              		.loc 1 258 5 is_stmt 1 view .LVU3003
 10423 0138 1B68     		ldr	r3, [r3]
 10424 013a 1A68     		ldr	r2, [r3]
 10425 013c 536C     		ldr	r3, [r2, #68]
 10426 013e 23F40043 		bic	r3, r3, #32768
ARM GAS  /tmp/ccvzGucR.s 			page 400


 10427 0142 5364     		str	r3, [r2, #68]
 259:Src/motor.cpp ****     control_law_ = nullptr;
 10428              		.loc 1 259 5 view .LVU3004
 259:Src/motor.cpp ****     control_law_ = nullptr;
 10429              		.loc 1 259 18 is_stmt 0 view .LVU3005
 10430 0144 C4F8AC03 		str	r0, [r4, #940]
 260:Src/motor.cpp ****     is_armed_ = false;
 10431              		.loc 1 260 5 is_stmt 1 view .LVU3006
 260:Src/motor.cpp ****     is_armed_ = false;
 10432              		.loc 1 260 15 is_stmt 0 view .LVU3007
 10433 0148 84F83800 		strb	r0, [r4, #56]
 261:Src/motor.cpp ****     cpu_exit_critical(mask);
 10434              		.loc 1 261 5 is_stmt 1 view .LVU3008
 10435              	.LVL625:
 10436              	.LBB3845:
 10437              	.LBI3845:
  71:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
 10438              		.loc 11 71 13 view .LVU3009
 10439              	.LBE3845:
 10440              	.LBE3838:
 10441              	.LBE3837:
 10442              	.LBE3851:
 10443              	.LBE3857:
 10444              	.LBE3865:
 10445              	.LBE3869:
 10446              	.LBE3912:
 10447              		.loc 11 72 5 view .LVU3010
 10448              	.LBB3913:
 10449              	.LBB3870:
 10450              	.LBB3866:
 10451              	.LBB3858:
 10452              	.LBB3852:
 10453              	.LBB3850:
 10454              	.LBB3849:
 10455              	.LBB3848:
 10456              	.LBB3846:
 10457              	.LBI3846:
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 10458              		.loc 12 479 27 view .LVU3011
 10459              	.LBB3847:
 10460              		.loc 12 481 3 view .LVU3012
 10461              		.syntax unified
 10462              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 10463 014c 81F31088 		MSR primask, r1
 10464              	@ 0 "" 2
 10465              	.LVL626:
 10466              		.loc 12 481 3 is_stmt 0 view .LVU3013
 10467              		.thumb
 10468              		.syntax unified
 10469              	.LBE3847:
 10470              	.LBE3846:
 10471              	.LBE3848:
 262:Src/motor.cpp ****     return was_armed;
 10472              		.loc 1 262 5 is_stmt 1 view .LVU3014
 262:Src/motor.cpp ****     return was_armed;
 10473              		.loc 1 262 5 is_stmt 0 view .LVU3015
 10474              	.LBE3849:
ARM GAS  /tmp/ccvzGucR.s 			page 401


 10475              	.LBE3850:
 10476              	.LBE3852:
 10477              	.LBE3858:
 10478              	.LBE3866:
 10479              	.LBE3870:
 10480              	.LBE3913:
1101:Src/motor.cpp ****     if (!is_armed_) {
 10481              		.loc 1 1101 10 view .LVU3016
 10482 0150 94F83830 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
 10483              	.LVL627:
 10484              	.L460:
1101:Src/motor.cpp ****     if (!is_armed_) {
 10485              		.loc 1 1101 5 is_stmt 1 view .LVU3017
 10486 0154 002B     		cmp	r3, #0
 10487 0156 3FF478AF 		beq	.L483
 10488              	.L457:
1104:Src/motor.cpp ****     } else if (is_armed_ && !i_bus.has_value()) {
 10489              		.loc 1 1104 12 view .LVU3018
 10490              	.LVL628:
 10491              	.LBB3914:
 10492              	.LBI3914:
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 10493              		.loc 2 917 22 view .LVU3019
 10494              	.LBB3915:
 10495              	.LBI3915:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 10496              		.loc 2 434 22 view .LVU3020
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 10497              		.loc 2 434 22 is_stmt 0 view .LVU3021
 10498              	.LBE3915:
 10499              	.LBE3914:
1104:Src/motor.cpp ****     } else if (is_armed_ && !i_bus.has_value()) {
 10500              		.loc 1 1104 26 view .LVU3022
 10501 015a 9DF80830 		ldrb	r3, [sp, #8]	@ zero_extendqisi2
 10502 015e 03B3     		cbz	r3, .L466
 10503              	.L464:
1110:Src/motor.cpp ****     I_bus_ = *i_bus;
 10504              		.loc 1 1110 14 view .LVU3023
 10505 0160 DDED017A 		vldr.32	s15, [sp, #4]
 10506 0164 7AE7     		b	.L467
 10507              	.LVL629:
 10508              	.L484:
1084:Src/motor.cpp ****     if (is_armed_ && control_law_status == ODriveIntf::MotorIntf::ERROR_NONE) {
 10509              		.loc 1 1084 5 is_stmt 1 view .LVU3024
 10510              	.LBB3917:
1091:Src/motor.cpp ****     } else if (is_armed_) {
 10511              		.loc 1 1091 12 view .LVU3025
 10512 0166 94F83830 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
 10513 016a 002B     		cmp	r3, #0
 10514 016c 3FF46DAF 		beq	.L483
1092:Src/motor.cpp ****         if (!( hw_config_.timer->Instance->BDTR & TIM_BDTR_MOE) && (control_law_status == ODriveInt
 10515              		.loc 1 1092 9 view .LVU3026
1092:Src/motor.cpp ****         if (!( hw_config_.timer->Instance->BDTR & TIM_BDTR_MOE) && (control_law_status == ODriveInt
 10516              		.loc 1 1092 27 is_stmt 0 view .LVU3027
 10517 0170 2368     		ldr	r3, [r4]
1092:Src/motor.cpp ****         if (!( hw_config_.timer->Instance->BDTR & TIM_BDTR_MOE) && (control_law_status == ODriveInt
 10518              		.loc 1 1092 34 view .LVU3028
ARM GAS  /tmp/ccvzGucR.s 			page 402


 10519 0172 1B68     		ldr	r3, [r3]
 10520 0174 1B68     		ldr	r3, [r3]
1092:Src/motor.cpp ****         if (!( hw_config_.timer->Instance->BDTR & TIM_BDTR_MOE) && (control_law_status == ODriveInt
 10521              		.loc 1 1092 44 view .LVU3029
 10522 0176 5B6C     		ldr	r3, [r3, #68]
 10523              	.LBE3917:
1072:Src/motor.cpp ****     TaskTimerContext tmr{axis_->task_times_.pwm_update};
 10524              		.loc 1 1072 26 view .LVU3030
 10525 0178 3246     		mov	r2, r6
1074:Src/motor.cpp ****     ODriveIntf::MotorIntf::Error control_law_status =  ODriveIntf::MotorIntf::ERROR_CONTROLLER_FAIL
 10526              		.loc 1 1074 34 view .LVU3031
 10527 017a 4FF00070 		mov	r0, #33554432
 10528              	.LVL630:
 10529              	.L461:
 10530              	.LBB3918:
1097:Src/motor.cpp ****             set_error(control_law_status);
 10531              		.loc 1 1097 13 is_stmt 1 view .LVU3032
 10532              	.LBB3871:
 10533              	.LBI3871:
 306:Src/motor.cpp **** void Motor::set_error(ODriveIntf::MotorIntf::Error error){
 10534              		.loc 1 306 6 view .LVU3033
 10535              	.LBB3872:
 307:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 10536              		.loc 1 307 5 view .LVU3034
 307:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 10537              		.loc 1 307 86 is_stmt 0 view .LVU3035
 10538 017e 636B     		ldr	r3, [r4, #52]
 10539 0180 1843     		orrs	r0, r0, r3
 10540              	.LVL631:
 310:Src/motor.cpp ****     axis_->error_ = Axis::ERROR_MOTOR_FAILED;
 10541              		.loc 1 310 19 view .LVU3036
 10542 0182 4023     		movs	r3, #64
 307:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 10543              		.loc 1 307 12 view .LVU3037
 10544 0184 6063     		str	r0, [r4, #52]
 310:Src/motor.cpp ****     axis_->error_ = Axis::ERROR_MOTOR_FAILED;
 10545              		.loc 1 310 5 is_stmt 1 view .LVU3038
 310:Src/motor.cpp ****     axis_->error_ = Axis::ERROR_MOTOR_FAILED;
 10546              		.loc 1 310 19 is_stmt 0 view .LVU3039
 10547 0186 C2F85C31 		str	r3, [r2, #348]
 312:Src/motor.cpp ****     safety_critical_disarm_motor_pwm(*this);
 10548              		.loc 1 312 5 is_stmt 1 view .LVU3040
 312:Src/motor.cpp ****     safety_critical_disarm_motor_pwm(*this);
 10549              		.loc 1 312 37 is_stmt 0 view .LVU3041
 10550 018a 2046     		mov	r0, r4
 10551 018c FFF7FEFF 		bl	safety_critical_disarm_motor_pwm
 10552              	.LVL632:
 313:Src/motor.cpp ****     update_brake_current();
 10553              		.loc 1 313 5 is_stmt 1 view .LVU3042
 313:Src/motor.cpp ****     update_brake_current();
 10554              		.loc 1 313 25 is_stmt 0 view .LVU3043
 10555 0190 FFF7FEFF 		bl	update_brake_current
 10556              	.LVL633:
 10557              	.LBE3872:
 10558              	.LBE3871:
 10559              	.LBE3918:
1101:Src/motor.cpp ****     if (!is_armed_) {
ARM GAS  /tmp/ccvzGucR.s 			page 403


 10560              		.loc 1 1101 10 view .LVU3044
 10561 0194 94F83830 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
 10562              	.LBB3919:
 10563              	.LBB3875:
 10564              	.LBB3873:
 314:Src/motor.cpp **** }
 10565              		.loc 1 314 1 view .LVU3045
 10566 0198 DCE7     		b	.L460
 10567              	.LVL634:
 10568              	.L486:
 314:Src/motor.cpp **** }
 10569              		.loc 1 314 1 view .LVU3046
 10570              	.LBE3873:
 10571              	.LBE3875:
 10572              	.LBB3876:
 10573              	.LBB3867:
 10574              	.LBB3859:
 193:Src/motor.cpp ****         armed_state_ = ARMED_STATE_WAITING_FOR_UPDATE;
 10575              		.loc 1 193 9 is_stmt 1 view .LVU3047
 193:Src/motor.cpp ****         armed_state_ = ARMED_STATE_WAITING_FOR_UPDATE;
 10576              		.loc 1 193 22 is_stmt 0 view .LVU3048
 10577 019a 0223     		movs	r3, #2
 10578 019c 84F83930 		strb	r3, [r4, #57]
 10579              	.LVL635:
 193:Src/motor.cpp ****         armed_state_ = ARMED_STATE_WAITING_FOR_UPDATE;
 10580              		.loc 1 193 22 view .LVU3049
 10581              	.LBE3859:
 10582              	.LBE3867:
 10583              	.LBE3876:
 10584              	.LBE3919:
1101:Src/motor.cpp ****     if (!is_armed_) {
 10585              		.loc 1 1101 5 is_stmt 1 view .LVU3050
 10586 01a0 DBE7     		b	.L457
 10587              	.LVL636:
 10588              	.L466:
1106:Src/motor.cpp ****         set_error(ODriveIntf::MotorIntf::ERROR_UNKNOWN_CURRENT_MEASUREMENT);
 10589              		.loc 1 1106 9 view .LVU3051
 10590              	.LBB3920:
 10591              	.LBI3920:
 306:Src/motor.cpp **** void Motor::set_error(ODriveIntf::MotorIntf::Error error){
 10592              		.loc 1 306 6 view .LVU3052
 10593              	.LBB3921:
 307:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 10594              		.loc 1 307 5 view .LVU3053
 307:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 10595              		.loc 1 307 86 is_stmt 0 view .LVU3054
 10596 01a2 636B     		ldr	r3, [r4, #52]
 310:Src/motor.cpp ****     axis_->error_ = Axis::ERROR_MOTOR_FAILED;
 10597              		.loc 1 310 19 view .LVU3055
 10598 01a4 A268     		ldr	r2, [r4, #8]
 307:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 10599              		.loc 1 307 86 view .LVU3056
 10600 01a6 43F40033 		orr	r3, r3, #131072
 307:Src/motor.cpp ****     error_ = static_cast<ODriveIntf::MotorIntf::Error>(static_cast<uint32_t>(error_) | static_cast<
 10601              		.loc 1 307 12 view .LVU3057
 10602 01aa 6363     		str	r3, [r4, #52]
 310:Src/motor.cpp ****     axis_->error_ = Axis::ERROR_MOTOR_FAILED;
ARM GAS  /tmp/ccvzGucR.s 			page 404


 10603              		.loc 1 310 5 is_stmt 1 view .LVU3058
 310:Src/motor.cpp ****     axis_->error_ = Axis::ERROR_MOTOR_FAILED;
 10604              		.loc 1 310 19 is_stmt 0 view .LVU3059
 10605 01ac 4023     		movs	r3, #64
 10606 01ae C2F85C31 		str	r3, [r2, #348]
 312:Src/motor.cpp ****     safety_critical_disarm_motor_pwm(*this);
 10607              		.loc 1 312 5 is_stmt 1 view .LVU3060
 312:Src/motor.cpp ****     safety_critical_disarm_motor_pwm(*this);
 10608              		.loc 1 312 37 is_stmt 0 view .LVU3061
 10609 01b2 2046     		mov	r0, r4
 10610 01b4 FFF7FEFF 		bl	safety_critical_disarm_motor_pwm
 10611              	.LVL637:
 313:Src/motor.cpp ****     update_brake_current();
 10612              		.loc 1 313 5 is_stmt 1 view .LVU3062
 313:Src/motor.cpp ****     update_brake_current();
 10613              		.loc 1 313 25 is_stmt 0 view .LVU3063
 10614 01b8 FFF7FEFF 		bl	update_brake_current
 10615              	.LVL638:
 10616 01bc 45E7     		b	.L483
 10617              	.LVL639:
 10618              	.L455:
 313:Src/motor.cpp ****     update_brake_current();
 10619              		.loc 1 313 25 view .LVU3064
 10620              	.LBE3921:
 10621              	.LBE3920:
 10622              	.LBB3922:
1092:Src/motor.cpp ****         if (!( hw_config_.timer->Instance->BDTR & TIM_BDTR_MOE) && (control_law_status == ODriveInt
 10623              		.loc 1 1092 9 is_stmt 1 view .LVU3065
1092:Src/motor.cpp ****         if (!( hw_config_.timer->Instance->BDTR & TIM_BDTR_MOE) && (control_law_status == ODriveInt
 10624              		.loc 1 1092 27 is_stmt 0 view .LVU3066
 10625 01be 2368     		ldr	r3, [r4]
1092:Src/motor.cpp ****         if (!( hw_config_.timer->Instance->BDTR & TIM_BDTR_MOE) && (control_law_status == ODriveInt
 10626              		.loc 1 1092 34 view .LVU3067
 10627 01c0 1B68     		ldr	r3, [r3]
 10628 01c2 1B68     		ldr	r3, [r3]
1092:Src/motor.cpp ****         if (!( hw_config_.timer->Instance->BDTR & TIM_BDTR_MOE) && (control_law_status == ODriveInt
 10629              		.loc 1 1092 44 view .LVU3068
 10630 01c4 5B6C     		ldr	r3, [r3, #68]
1092:Src/motor.cpp ****         if (!( hw_config_.timer->Instance->BDTR & TIM_BDTR_MOE) && (control_law_status == ODriveInt
 10631              		.loc 1 1092 65 view .LVU3069
 10632 01c6 1B04     		lsls	r3, r3, #16
 10633 01c8 08D4     		bmi	.L462
1092:Src/motor.cpp ****         if (!( hw_config_.timer->Instance->BDTR & TIM_BDTR_MOE) && (control_law_status == ODriveInt
 10634              		.loc 1 1092 65 discriminator 1 view .LVU3070
 10635 01ca B0F1806F 		cmp	r0, #67108864
 10636 01ce 05D1     		bne	.L462
1095:Src/motor.cpp ****             i_bus = 0.0f;
 10637              		.loc 1 1095 13 is_stmt 1 view .LVU3071
 10638              	.LVL640:
 10639              	.LBB3877:
 10640              	.LBI3877:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 10641              		.loc 2 701 2 view .LVU3072
 10642              	.LBB3878:
 10643              	.LBI3878:
 10644              		.loc 4 76 5 view .LVU3073
 10645              		.loc 4 76 5 is_stmt 0 view .LVU3074
ARM GAS  /tmp/ccvzGucR.s 			page 405


 10646              	.LBE3878:
 10647              	.LBB3879:
 10648              	.LBI3879:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 10649              		.loc 2 608 28 is_stmt 1 view .LVU3075
 10650              	.LBB3880:
 10651              	.LBI3880:
 10652              		.loc 4 76 5 view .LVU3076
 10653              		.loc 4 76 5 is_stmt 0 view .LVU3077
 10654              	.LBE3880:
 10655              	.LBB3881:
 10656              	.LBI3881:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 10657              		.loc 2 301 42 is_stmt 1 view .LVU3078
 10658              	.LBB3882:
 10659              	.LBI3882:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 10660              		.loc 2 116 2 view .LVU3079
 10661              	.LBB3883:
 10662              	.LBI3883:
 10663              		.loc 4 76 5 view .LVU3080
 10664              		.loc 4 76 5 is_stmt 0 view .LVU3081
 10665              	.LBE3883:
 10666              	.LBB3884:
 10667              	.LBI3884:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 10668              		.loc 2 204 6 is_stmt 1 view .LVU3082
 10669              	.LBB3885:
 10670              	.LBI3885:
 10671              		.loc 4 76 5 view .LVU3083
 10672              		.loc 4 76 5 is_stmt 0 view .LVU3084
 10673              	.LBE3885:
 10674              	.LBE3884:
 10675              	.LBE3882:
 10676              	.LBE3881:
 10677              	.LBE3879:
 10678              	.LBE3877:
1095:Src/motor.cpp ****             i_bus = 0.0f;
 10679              		.loc 1 1095 19 view .LVU3085
 10680 01d0 0022     		movs	r2, #0
 10681 01d2 0123     		movs	r3, #1
 10682 01d4 0192     		str	r2, [sp, #4]	@ float
 10683 01d6 8DF80830 		strb	r3, [sp, #8]
 10684              	.LBE3922:
1101:Src/motor.cpp ****     if (!is_armed_) {
 10685              		.loc 1 1101 5 is_stmt 1 view .LVU3086
1104:Src/motor.cpp ****     } else if (is_armed_ && !i_bus.has_value()) {
 10686              		.loc 1 1104 12 view .LVU3087
 10687              	.LVL641:
 10688              	.LBB3923:
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 10689              		.loc 2 917 22 view .LVU3088
 10690              	.LBB3916:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 10691              		.loc 2 434 22 view .LVU3089
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 10692              		.loc 2 434 22 is_stmt 0 view .LVU3090
ARM GAS  /tmp/ccvzGucR.s 			page 406


 10693 01da C1E7     		b	.L464
 10694              	.L462:
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 10695              		.loc 2 434 22 view .LVU3091
 10696              	.LBE3916:
 10697              	.LBE3923:
 10698              	.LBB3924:
 10699              	.LBB3886:
 10700              	.LBB3874:
 310:Src/motor.cpp ****     axis_->error_ = Axis::ERROR_MOTOR_FAILED;
 10701              		.loc 1 310 5 view .LVU3092
 10702 01dc A268     		ldr	r2, [r4, #8]
 10703 01de CEE7     		b	.L461
 10704              	.LVL642:
 10705              	.L487:
 310:Src/motor.cpp ****     axis_->error_ = Axis::ERROR_MOTOR_FAILED;
 10706              		.loc 1 310 5 view .LVU3093
 10707              	.LBE3874:
 10708              	.LBE3886:
 10709              	.LBB3887:
 10710              	.LBB3868:
 10711              	.LBB3860:
 197:Src/motor.cpp ****         armed_state_ = ARMED_STATE_ARMED;
 10712              		.loc 1 197 9 is_stmt 1 view .LVU3094
 197:Src/motor.cpp ****         armed_state_ = ARMED_STATE_ARMED;
 10713              		.loc 1 197 22 is_stmt 0 view .LVU3095
 10714 01e0 0323     		movs	r3, #3
 10715 01e2 84F83930 		strb	r3, [r4, #57]
 198:Src/motor.cpp ****         __HAL_TIM_MOE_ENABLE(hw_config_.timer);  // enable pwm outputs
 10716              		.loc 1 198 9 is_stmt 1 view .LVU3096
 10717 01e6 7B6C     		ldr	r3, [r7, #68]
 10718 01e8 43F40043 		orr	r3, r3, #32768
 10719 01ec 7B64     		str	r3, [r7, #68]
 10720              	.LVL643:
 198:Src/motor.cpp ****         __HAL_TIM_MOE_ENABLE(hw_config_.timer);  // enable pwm outputs
 10721              		.loc 1 198 9 is_stmt 0 view .LVU3097
 10722              	.LBE3860:
 10723              	.LBE3868:
 10724              	.LBE3887:
 10725              	.LBE3924:
1101:Src/motor.cpp ****     if (!is_armed_) {
 10726              		.loc 1 1101 5 is_stmt 1 view .LVU3098
 10727 01ee B4E7     		b	.L457
 10728              	.L489:
 10729              		.align	2
 10730              	.L488:
 10731 01f0 00400140 		.word	1073823744
 10732 01f4 00000000 		.word	.LANCHOR0
 10733 01f8 00000000 		.word	0
 10734 01fc 00000000 		.word	_ZN9TaskTimer7enabledE
 10735 0200 00D08445 		.word	1166331904
 10736              		.cfi_endproc
 10737              	.LFE5031:
 10739              		.weak	_ZTV31ResistanceMeasurementControlLaw
 10740              		.section	.rodata._ZTV31ResistanceMeasurementControlLaw,"aG",%progbits,_ZTV31ResistanceMeasurementC
 10741              		.align	2
 10744              	_ZTV31ResistanceMeasurementControlLaw:
ARM GAS  /tmp/ccvzGucR.s 			page 407


 10745 0000 00000000 		.word	0
 10746 0004 00000000 		.word	0
 10747 0008 00000000 		.word	_ZN31ResistanceMeasurementControlLaw5resetEv
 10748 000c 00000000 		.word	_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
 10749 0010 00000000 		.word	_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
 10750 0014 00000000 		.word	_ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm
 10751 0018 00000000 		.word	_ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_If
 10752              		.weak	_ZTV31InductanceMeasurementControlLaw
 10753              		.section	.rodata._ZTV31InductanceMeasurementControlLaw,"aG",%progbits,_ZTV31InductanceMeasurementC
 10754              		.align	2
 10757              	_ZTV31InductanceMeasurementControlLaw:
 10758 0000 00000000 		.word	0
 10759 0004 00000000 		.word	0
 10760 0008 00000000 		.word	_ZN31InductanceMeasurementControlLaw5resetEv
 10761 000c 00000000 		.word	_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
 10762 0010 00000000 		.word	_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
 10763 0014 00000000 		.word	_ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm
 10764 0018 00000000 		.word	_ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_If
 10765              		.section	.rodata
 10766              		.align	2
 10767              		.set	.LANCHOR0,. + 0
 10768              	.LC1:
 10769 0000 0000C07F 		.word	2143289344
 10770 0004 0000C07F 		.word	2143289344
 10771 0008 0000C07F 		.word	2143289344
 10772              		.text
 10773              	.Letext0:
 10774              		.file 19 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/type_trai
 10775              		.file 20 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-
 10776              		.file 21 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility"
 10777              		.file 22 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/debug/deb
 10778              		.file 23 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdlib"
 10779              		.file 24 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/algo
 10780              		.file 25 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/exce
 10781              		.file 26 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_
 10782              		.file 27 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 10783              		.file 28 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/enab
 10784              		.file 29 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/functiona
 10785              		.file 30 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdint"
 10786              		.file 31 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pars
 10787              		.file 32 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array"
 10788              		.file 33 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 10789              		.file 34 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/refw
 10790              		.file 35 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pred
 10791              		.file 36 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/lib/gcc/arm-none-eabi/10.2.1/include/stdde
 10792              		.file 37 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_typ
 10793              		.file 38 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdlib.h"
 10794              		.file 39 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/pstl/exec
 10795              		.file 40 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 10796              		.file 41 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdint.h"
 10797              		.file 42 "Inc/interfaces.hpp"
 10798              		.file 43 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 10799              		.file 44 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 10800              		.file 45 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
 10801              		.file 46 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_tim.h"
 10802              		.file 47 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 10803              		.file 48 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
ARM GAS  /tmp/ccvzGucR.s 			page 408


 10804              		.file 49 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 10805              		.file 50 "Inc/mc_type.h"
 10806              		.file 51 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/math.h"
 10807              		.file 52 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/math.h"
 10808              		.file 53 "Inc/main.h"
 10809              		.file 54 "Inc/axis.hpp"
 10810              		.file 55 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 10811              		.file 56 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 10812              		.file 57 "Inc/tim.h"
 10813              		.file 58 "Inc/controller.hpp"
 10814              		.file 59 "<built-in>"
ARM GAS  /tmp/ccvzGucR.s 			page 409


DEFINED SYMBOLS
                            *ABS*:0000000000000000 motor.cpp
     /tmp/ccvzGucR.s:18     .text._ZN31ResistanceMeasurementControlLaw5resetEv:0000000000000000 $t
     /tmp/ccvzGucR.s:27     .text._ZN31ResistanceMeasurementControlLaw5resetEv:0000000000000000 _ZN31ResistanceMeasurementControlLaw5resetEv
     /tmp/ccvzGucR.s:88     .text._ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 $t
     /tmp/ccvzGucR.s:96     .text._ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 _ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm
     /tmp/ccvzGucR.s:366    .text._ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:00000000000000d8 $d
     /tmp/ccvzGucR.s:374    .text._ZN31InductanceMeasurementControlLaw5resetEv:0000000000000000 $t
     /tmp/ccvzGucR.s:382    .text._ZN31InductanceMeasurementControlLaw5resetEv:0000000000000000 _ZN31InductanceMeasurementControlLaw5resetEv
     /tmp/ccvzGucR.s:400    .text._ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 $t
     /tmp/ccvzGucR.s:408    .text._ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 _ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm
     /tmp/ccvzGucR.s:546    .text._ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 $t
     /tmp/ccvzGucR.s:554    .text._ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 _ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE
     /tmp/ccvzGucR.s:718    .text._ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:000000000000004c $d
     /tmp/ccvzGucR.s:728    .text._ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 $t
     /tmp/ccvzGucR.s:736    .text._ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 _ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE
     /tmp/ccvzGucR.s:960    .text._ZN5MotorC2ERK21MotorHardwareConfig_tRNS_8Config_tE:0000000000000000 $t
     /tmp/ccvzGucR.s:968    .text._ZN5MotorC2ERK21MotorHardwareConfig_tRNS_8Config_tE:0000000000000000 _ZN5MotorC2ERK21MotorHardwareConfig_tRNS_8Config_tE
     /tmp/ccvzGucR.s:1857   .text._ZN5MotorC2ERK21MotorHardwareConfig_tRNS_8Config_tE:0000000000000240 $d
     /tmp/ccvzGucR.s:968    .text._ZN5MotorC2ERK21MotorHardwareConfig_tRNS_8Config_tE:0000000000000000 _ZN5MotorC1ERK21MotorHardwareConfig_tRNS_8Config_tE
     /tmp/ccvzGucR.s:1871   .text._ZN5Motor17apply_pwm_timingsEPtb:0000000000000000 $t
     /tmp/ccvzGucR.s:1879   .text._ZN5Motor17apply_pwm_timingsEPtb:0000000000000000 _ZN5Motor17apply_pwm_timingsEPtb
     /tmp/ccvzGucR.s:2090   .text._ZN5Motor3armEP15PhaseControlLawILj3EE:0000000000000000 $t
     /tmp/ccvzGucR.s:2098   .text._ZN5Motor3armEP15PhaseControlLawILj3EE:0000000000000000 _ZN5Motor3armEP15PhaseControlLawILj3EE
     /tmp/ccvzGucR.s:2254   .text._ZN5Motor6disarmEv:0000000000000000 $t
     /tmp/ccvzGucR.s:2262   .text._ZN5Motor6disarmEv:0000000000000000 _ZN5Motor6disarmEv
     /tmp/ccvzGucR.s:2394   .text._ZN5Motor21reset_current_controlEv:0000000000000000 $t
     /tmp/ccvzGucR.s:2402   .text._ZN5Motor21reset_current_controlEv:0000000000000000 _ZN5Motor21reset_current_controlEv
     /tmp/ccvzGucR.s:2426   .text._ZN5Motor31update_current_controller_gainsEv:0000000000000000 $t
     /tmp/ccvzGucR.s:2434   .text._ZN5Motor31update_current_controller_gainsEv:0000000000000000 _ZN5Motor31update_current_controller_gainsEv
     /tmp/ccvzGucR.s:2541   .text._ZN5Motor13DRV8301_setupEv:0000000000000000 $t
     /tmp/ccvzGucR.s:2549   .text._ZN5Motor13DRV8301_setupEv:0000000000000000 _ZN5Motor13DRV8301_setupEv
     /tmp/ccvzGucR.s:2588   .text._ZN5Motor13DRV8301_setupEv:0000000000000028 $d
     /tmp/ccvzGucR.s:2594   .text._ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE:0000000000000000 $t
     /tmp/ccvzGucR.s:2602   .text._ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE:0000000000000000 _ZN5Motor9set_errorEN10ODriveIntf9MotorIntf5ErrorE
     /tmp/ccvzGucR.s:2648   .text._ZN5Motor15check_DRV_faultEv:0000000000000000 $t
     /tmp/ccvzGucR.s:2656   .text._ZN5Motor15check_DRV_faultEv:0000000000000000 _ZN5Motor15check_DRV_faultEv
     /tmp/ccvzGucR.s:2674   .text._ZN5Motor9do_checksEv:0000000000000000 $t
     /tmp/ccvzGucR.s:2682   .text._ZN5Motor9do_checksEv:0000000000000000 _ZN5Motor9do_checksEv
     /tmp/ccvzGucR.s:2752   .text._ZN5Motor21effective_current_limEv:0000000000000000 $t
     /tmp/ccvzGucR.s:2760   .text._ZN5Motor21effective_current_limEv:0000000000000000 _ZN5Motor21effective_current_limEv
     /tmp/ccvzGucR.s:2923   .text._ZN5Motor21effective_current_limEv:0000000000000090 $d
     /tmp/ccvzGucR.s:2931   .text._ZN5Motor20max_available_torqueEv:0000000000000000 $t
     /tmp/ccvzGucR.s:2939   .text._ZN5Motor20max_available_torqueEv:0000000000000000 _ZN5Motor20max_available_torqueEv
     /tmp/ccvzGucR.s:3191   .text._ZN5Motor20max_available_torqueEv:00000000000000c4 $d
     /tmp/ccvzGucR.s:3202   .text._ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE:0000000000000000 $t
     /tmp/ccvzGucR.s:3210   .text._ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE:0000000000000000 _ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE
     /tmp/ccvzGucR.s:3252   .text._ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE:0000000000000014 $d
     /tmp/ccvzGucR.s:3257   .text._ZN5Motor18pos_linearity_initEv:0000000000000000 $t
     /tmp/ccvzGucR.s:3265   .text._ZN5Motor18pos_linearity_initEv:0000000000000000 _ZN5Motor18pos_linearity_initEv
     /tmp/ccvzGucR.s:3279   .text._ZN5Motor15current_CorrectEl:0000000000000000 $t
     /tmp/ccvzGucR.s:3287   .text._ZN5Motor15current_CorrectEl:0000000000000000 _ZN5Motor15current_CorrectEl
     /tmp/ccvzGucR.s:3302   .text._ZN5Motor15current_CorrectEl:0000000000000008 $d
     /tmp/ccvzGucR.s:3307   .text._ZN5Motor31setting_motor_current_linearityEmf:0000000000000000 $t
     /tmp/ccvzGucR.s:3315   .text._ZN5Motor31setting_motor_current_linearityEmf:0000000000000000 _ZN5Motor31setting_motor_current_linearityEmf
     /tmp/ccvzGucR.s:3340   .text._ZN5Motor27get_motor_current_linearityEm:0000000000000000 $t
     /tmp/ccvzGucR.s:3348   .text._ZN5Motor27get_motor_current_linearityEm:0000000000000000 _ZN5Motor27get_motor_current_linearityEm
ARM GAS  /tmp/ccvzGucR.s 			page 410


     /tmp/ccvzGucR.s:3374   .text._ZN5Motor27get_motor_current_linearityEm:0000000000000014 $d
     /tmp/ccvzGucR.s:3379   .text._ZN5Motor30setting_motor_torque_linearityEmf:0000000000000000 $t
     /tmp/ccvzGucR.s:3387   .text._ZN5Motor30setting_motor_torque_linearityEmf:0000000000000000 _ZN5Motor30setting_motor_torque_linearityEmf
     /tmp/ccvzGucR.s:3412   .text._ZN5Motor26get_motor_torque_linearityEm:0000000000000000 $t
     /tmp/ccvzGucR.s:3420   .text._ZN5Motor26get_motor_torque_linearityEm:0000000000000000 _ZN5Motor26get_motor_torque_linearityEm
     /tmp/ccvzGucR.s:3446   .text._ZN5Motor26get_motor_torque_linearityEm:0000000000000014 $d
     /tmp/ccvzGucR.s:3451   .text._ZN5Motor25get_positive_torque_slopeEm:0000000000000000 $t
     /tmp/ccvzGucR.s:3459   .text._ZN5Motor25get_positive_torque_slopeEm:0000000000000000 _ZN5Motor25get_positive_torque_slopeEm
     /tmp/ccvzGucR.s:3484   .text._ZN5Motor25get_positive_torque_slopeEm:0000000000000014 $d
     /tmp/ccvzGucR.s:3489   .text._ZN5Motor25get_negative_torque_slopeEm:0000000000000000 $t
     /tmp/ccvzGucR.s:3497   .text._ZN5Motor25get_negative_torque_slopeEm:0000000000000000 _ZN5Motor25get_negative_torque_slopeEm
     /tmp/ccvzGucR.s:3522   .text._ZN5Motor25get_negative_torque_slopeEm:0000000000000014 $d
     /tmp/ccvzGucR.s:3527   .text._ZN5Motor29setting_positive_torque_slopeEmf:0000000000000000 $t
     /tmp/ccvzGucR.s:3535   .text._ZN5Motor29setting_positive_torque_slopeEmf:0000000000000000 _ZN5Motor29setting_positive_torque_slopeEmf
     /tmp/ccvzGucR.s:3567   .text._ZN5Motor29setting_negative_torque_slopeEmf:0000000000000000 $t
     /tmp/ccvzGucR.s:3575   .text._ZN5Motor29setting_negative_torque_slopeEmf:0000000000000000 _ZN5Motor29setting_negative_torque_slopeEmf
     /tmp/ccvzGucR.s:3607   .text._ZN5Motor28setting_current2torque_slopeEmf:0000000000000000 $t
     /tmp/ccvzGucR.s:3615   .text._ZN5Motor28setting_current2torque_slopeEmf:0000000000000000 _ZN5Motor28setting_current2torque_slopeEmf
     /tmp/ccvzGucR.s:3640   .text._ZN5Motor28getting_current2torque_slopeEm:0000000000000000 $t
     /tmp/ccvzGucR.s:3648   .text._ZN5Motor28getting_current2torque_slopeEm:0000000000000000 _ZN5Motor28getting_current2torque_slopeEm
     /tmp/ccvzGucR.s:3674   .text._ZN5Motor28getting_current2torque_slopeEm:0000000000000014 $d
     /tmp/ccvzGucR.s:3679   .text._ZN5Motor27convert_torque_from_currentEfPfmf:0000000000000000 $t
     /tmp/ccvzGucR.s:3687   .text._ZN5Motor27convert_torque_from_currentEfPfmf:0000000000000000 _ZN5Motor27convert_torque_from_currentEfPfmf
     /tmp/ccvzGucR.s:3751   .text._ZN5Motor28check_for_current_saturationEm:0000000000000000 $t
     /tmp/ccvzGucR.s:3759   .text._ZN5Motor28check_for_current_saturationEm:0000000000000000 _ZN5Motor28check_for_current_saturationEm
     /tmp/ccvzGucR.s:3807   .text._ZN5Motor25phase_current_from_adcvalElf:0000000000000000 $t
     /tmp/ccvzGucR.s:3815   .text._ZN5Motor25phase_current_from_adcvalElf:0000000000000000 _ZN5Motor25phase_current_from_adcvalElf
     /tmp/ccvzGucR.s:3857   .text._ZN5Motor25phase_current_from_adcvalElf:0000000000000028 $d
     /tmp/ccvzGucR.s:3862   .text._ZN5Motor24measure_phase_resistanceEff:0000000000000000 $t
     /tmp/ccvzGucR.s:3870   .text._ZN5Motor24measure_phase_resistanceEff:0000000000000000 _ZN5Motor24measure_phase_resistanceEff
     /tmp/ccvzGucR.s:4379   .text._ZN5Motor24measure_phase_resistanceEff:000000000000013c $d
     /tmp/ccvzGucR.s:10744  .rodata._ZTV31ResistanceMeasurementControlLaw:0000000000000000 _ZTV31ResistanceMeasurementControlLaw
     /tmp/ccvzGucR.s:4387   .text._ZN5Motor24measure_phase_inductanceEf:0000000000000000 $t
     /tmp/ccvzGucR.s:4395   .text._ZN5Motor24measure_phase_inductanceEf:0000000000000000 _ZN5Motor24measure_phase_inductanceEf
     /tmp/ccvzGucR.s:4817   .text._ZN5Motor24measure_phase_inductanceEf:0000000000000100 $d
     /tmp/ccvzGucR.s:10757  .rodata._ZTV31InductanceMeasurementControlLaw:0000000000000000 _ZTV31InductanceMeasurementControlLaw
     /tmp/ccvzGucR.s:4826   .text._ZN5Motor15run_calibrationEv:0000000000000000 $t
     /tmp/ccvzGucR.s:4834   .text._ZN5Motor15run_calibrationEv:0000000000000000 _ZN5Motor15run_calibrationEv
     /tmp/ccvzGucR.s:5044   .text._ZN5Motor20abc_sign_calculationEfPlS0_S0_:0000000000000000 $t
     /tmp/ccvzGucR.s:5052   .text._ZN5Motor20abc_sign_calculationEfPlS0_S0_:0000000000000000 _ZN5Motor20abc_sign_calculationEfPlS0_S0_
     /tmp/ccvzGucR.s:5297   .text._ZN5Motor20abc_sign_calculationEfPlS0_S0_:0000000000000134 $d
     /tmp/ccvzGucR.s:5308   .text._ZN5Motor26enqueue_modulation_timingsEff:0000000000000000 $t
     /tmp/ccvzGucR.s:5316   .text._ZN5Motor26enqueue_modulation_timingsEff:0000000000000000 _ZN5Motor26enqueue_modulation_timingsEff
     /tmp/ccvzGucR.s:5798   .text._ZN5Motor26enqueue_modulation_timingsEff:00000000000001d4 $d
     /tmp/ccvzGucR.s:5808   .text._ZN5Motor23enqueue_voltage_timingsEff:0000000000000000 $t
     /tmp/ccvzGucR.s:5816   .text._ZN5Motor23enqueue_voltage_timingsEff:0000000000000000 _ZN5Motor23enqueue_voltage_timingsEff
     /tmp/ccvzGucR.s:6383   .text._ZN5Motor23enqueue_voltage_timingsEff:00000000000001fc $d
     /tmp/ccvzGucR.s:6398   .text._ZN5Motor11FOC_voltageEfff:0000000000000000 $t
     /tmp/ccvzGucR.s:6406   .text._ZN5Motor11FOC_voltageEfff:0000000000000000 _ZN5Motor11FOC_voltageEfff
     /tmp/ccvzGucR.s:7056   .text._ZN5Motor11FOC_voltageEfff:0000000000000230 $d
     /tmp/ccvzGucR.s:7073   .text._ZN5Motor11FOC_currentEffff:0000000000000000 $t
     /tmp/ccvzGucR.s:7081   .text._ZN5Motor11FOC_currentEffff:0000000000000000 _ZN5Motor11FOC_currentEffff
     /tmp/ccvzGucR.s:7680   .text._ZN5Motor11FOC_currentEffff:0000000000000280 $d
     /tmp/ccvzGucR.s:7692   .text._ZN5Motor6updateEfff:0000000000000000 $t
     /tmp/ccvzGucR.s:7700   .text._ZN5Motor6updateEfff:0000000000000000 _ZN5Motor6updateEfff
     /tmp/ccvzGucR.s:8255   .text._ZN5Motor6updateEfff:00000000000001c8 $d
     /tmp/ccvzGucR.s:8269   .text._ZN5Motor6updateEm:0000000000000000 $t
ARM GAS  /tmp/ccvzGucR.s 			page 411


     /tmp/ccvzGucR.s:8277   .text._ZN5Motor6updateEm:0000000000000000 _ZN5Motor6updateEm
     /tmp/ccvzGucR.s:9413   .text._ZN5Motor6updateEm:000000000000022c $d
     /tmp/ccvzGucR.s:9429   .text._ZN5Motor15current_meas_cbEm:0000000000000000 $t
     /tmp/ccvzGucR.s:9437   .text._ZN5Motor15current_meas_cbEm:0000000000000000 _ZN5Motor15current_meas_cbEm
     /tmp/ccvzGucR.s:9922   .text._ZN5Motor15current_meas_cbEm:000000000000009c $d
     /tmp/ccvzGucR.s:9933   .text._ZN5Motor13pwm_update_cbEm:0000000000000000 $t
     /tmp/ccvzGucR.s:9941   .text._ZN5Motor13pwm_update_cbEm:0000000000000000 _ZN5Motor13pwm_update_cbEm
     /tmp/ccvzGucR.s:10731  .text._ZN5Motor13pwm_update_cbEm:00000000000001f0 $d
     /tmp/ccvzGucR.s:10741  .rodata._ZTV31ResistanceMeasurementControlLaw:0000000000000000 $d
     /tmp/ccvzGucR.s:10754  .rodata._ZTV31InductanceMeasurementControlLaw:0000000000000000 $d
     /tmp/ccvzGucR.s:10766  .rodata:0000000000000000 $d

UNDEFINED SYMBOLS
current_meas_period
vbus_voltage
memset
_ZTV23FieldOrientedController
_ZN10Controller5resetEv
safety_critical_disarm_motor_pwm
update_brake_current
htim15
osDelay
SVM
safety_critical_apply_motor_pwm_timings
fmodf
our_arm_cos_f32
our_arm_sin_f32
fast_atan2
sqrtf
abort
_ZN9TaskTimer7enabledE
_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
