ARM GAS  /tmp/cccHlqCc.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"nvm.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.erase,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	erase
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	erase:
  28              	.LVL0:
  29              	.LFB132:
  30              		.file 1 "Src/nvm.c"
   1:Src/nvm.c     **** /*
   2:Src/nvm.c     **** * Flash-based Non-Volatile Memory (NVM)
   3:Src/nvm.c     **** * 
   4:Src/nvm.c     **** * This file supports storing and loading persistent configuration based on
   5:Src/nvm.c     **** * the STM32 builtin flash memory.
   6:Src/nvm.c     **** *
   7:Src/nvm.c     **** * The STM32F405xx has 12 flash sectors of heterogeneous size. We use the last
   8:Src/nvm.c     **** * two sectors for configuration data. These pages have a size of 128kB each.
   9:Src/nvm.c     **** * Setting any bit in these sectors to 0 is always possible, but setting them
  10:Src/nvm.c     **** * to 1 requires erasing the whole sector.
  11:Src/nvm.c     **** *
  12:Src/nvm.c     **** * We consider each sector as an array of 64-bit fields except the first N bytes, which we
  13:Src/nvm.c     **** * instead use as an allocation block. The allocation block is a compact bit-field (2 bit per entry)
  14:Src/nvm.c     **** * that keeps track of the state of each field (erased, invalid, valid).
  15:Src/nvm.c     **** *
  16:Src/nvm.c     **** * One sector is always considered the valid (read) sector and the other one is the
  17:Src/nvm.c     **** * target for the next write access: they can be considered to be ping-pong or double buffred.
  18:Src/nvm.c     **** *
  19:Src/nvm.c     **** * When writing a block of data, instead of always erasing the whole writable sector the
  20:Src/nvm.c     **** * new data is appended in the erased area. This presumably increases flash life span.
  21:Src/nvm.c     **** * The writable sector is only erased if there is not enough space for the new data.
  22:Src/nvm.c     **** *
  23:Src/nvm.c     **** * On startup, if there is exactly one sector
  24:Src/nvm.c     **** * whose last non-erased value has the state "valid" that sector is considered
  25:Src/nvm.c     **** * the valid sector. In any other case the selection is undefined.
  26:Src/nvm.c     **** *
  27:Src/nvm.c     **** *
  28:Src/nvm.c     **** * To write a new block of data atomically we first mark all associated fields
ARM GAS  /tmp/cccHlqCc.s 			page 2


  29:Src/nvm.c     **** * as "invalid" (in the allocation table) then write the data and then mark the
  30:Src/nvm.c     **** * fields as "valid" (in the direction of increasing address).
  31:Src/nvm.c     **** */
  32:Src/nvm.c     **** 
  33:Src/nvm.c     **** #include "nvm.h"
  34:Src/nvm.c     **** 
  35:Src/nvm.c     **** #include "stm32g4xx_hal.h"
  36:Src/nvm.c     **** 
  37:Src/nvm.c     **** #include <string.h>
  38:Src/nvm.c     **** #if defined(STM32G431xx)
  39:Src/nvm.c     **** // STM32G431 has 128KB flash organized as 64 pages of 2KB each
  40:Src/nvm.c     **** // Using last two pages (63 and 62) for configuration
  41:Src/nvm.c     **** // Refer to RM0440 Rev 7 Section 3.3.1
  42:Src/nvm.c     **** 
  43:Src/nvm.c     **** #define FLASH_PAGE_SIZE          0x800U    // 2KB per page
  44:Src/nvm.c     **** #define FLASH_PAGE_62           62U        // Second to last page
  45:Src/nvm.c     **** #define FLASH_PAGE_63           63U        // Last page
  46:Src/nvm.c     **** #define FLASH_BASE_ADDR         0x08000000U
  47:Src/nvm.c     **** 
  48:Src/nvm.c     **** #define FLASH_SECTOR_10_BASE    (const volatile uint8_t*)(FLASH_BASE_ADDR + (FLASH_PAGE_62 * FLASH_
  49:Src/nvm.c     **** #define FLASH_SECTOR_10_SIZE    FLASH_PAGE_SIZE
  50:Src/nvm.c     **** #define FLASH_SECTOR_11_BASE    (const volatile uint8_t*)(FLASH_BASE_ADDR + (FLASH_PAGE_63 * FLASH_
  51:Src/nvm.c     **** #define FLASH_SECTOR_11_SIZE    FLASH_PAGE_SIZE
  52:Src/nvm.c     **** 
  53:Src/nvm.c     **** // Update error flags for STM32G4
  54:Src/nvm.c     **** #define HAL_FLASH_ClearError() __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS)
  55:Src/nvm.c     **** 
  56:Src/nvm.c     **** #else
  57:Src/nvm.c     **** #error "Unsupported STM32 device"
  58:Src/nvm.c     **** #endif
  59:Src/nvm.c     **** 
  60:Src/nvm.c     **** 
  61:Src/nvm.c     **** typedef enum {
  62:Src/nvm.c     ****     VALID = 0,
  63:Src/nvm.c     ****     INVALID = 1,
  64:Src/nvm.c     ****     ERASED = 3
  65:Src/nvm.c     **** } field_state_t;
  66:Src/nvm.c     **** 
  67:Src/nvm.c     **** typedef struct {
  68:Src/nvm.c     ****     size_t index;               //!< next field to be written to (can be equal to n_data)
  69:Src/nvm.c     ****     const uint32_t sector_id;   //!< HAL ID of this sector
  70:Src/nvm.c     ****     const size_t n_data;        //!< number of 64-bit fields in this sector
  71:Src/nvm.c     ****     const size_t n_reserved;    //!< number of 64-bit fields in this sector that are reserved for t
  72:Src/nvm.c     ****     const volatile uint8_t* const alloc_table;
  73:Src/nvm.c     ****     const volatile uint64_t* const data;
  74:Src/nvm.c     **** } sector_t;
  75:Src/nvm.c     **** 
  76:Src/nvm.c     **** sector_t sectors[] = { {
  77:Src/nvm.c     ****     .sector_id = FLASH_PAGE_62,
  78:Src/nvm.c     ****     .n_data = FLASH_SECTOR_10_SIZE >> 3,
  79:Src/nvm.c     ****     .n_reserved = (FLASH_SECTOR_10_SIZE >> 3) >> 5,
  80:Src/nvm.c     ****     .alloc_table = FLASH_SECTOR_10_BASE,
  81:Src/nvm.c     ****     .data = (uint64_t *)FLASH_SECTOR_10_BASE
  82:Src/nvm.c     **** }, {
  83:Src/nvm.c     ****     .sector_id = FLASH_PAGE_63,
  84:Src/nvm.c     ****     .n_data = FLASH_SECTOR_11_SIZE >> 3,
  85:Src/nvm.c     ****     .n_reserved = (FLASH_SECTOR_11_SIZE >> 3) >> 5,
ARM GAS  /tmp/cccHlqCc.s 			page 3


  86:Src/nvm.c     ****     .alloc_table = FLASH_SECTOR_11_BASE,
  87:Src/nvm.c     ****     .data = (uint64_t *)FLASH_SECTOR_11_BASE
  88:Src/nvm.c     **** }};
  89:Src/nvm.c     **** 
  90:Src/nvm.c     **** uint8_t read_sector_; // 0 or 1 to indicate which sector to read from and which to write to
  91:Src/nvm.c     **** size_t n_staging_area_; // number of 64-bit values that were reserved using NVM_start_write
  92:Src/nvm.c     **** size_t n_valid_; // number of 64-bit fields that can be read
  93:Src/nvm.c     **** 
  94:Src/nvm.c     **** // @brief Erases a flash sector. This sets all bits in the sector to 1.
  95:Src/nvm.c     **** // The sector's current index is reset to the minimum value (n_reserved).
  96:Src/nvm.c     **** // @returns 0 on success or a non-zero error code otherwise
  97:Src/nvm.c     **** // Update erase function for STM32G4
  98:Src/nvm.c     **** int erase(sector_t *sector) {
  31              		.loc 1 98 29 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 24
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  99:Src/nvm.c     ****     FLASH_EraseInitTypeDef erase_struct = {
  35              		.loc 1 99 5 view .LVU1
  98:Src/nvm.c     ****     FLASH_EraseInitTypeDef erase_struct = {
  36              		.loc 1 98 29 is_stmt 0 view .LVU2
  37 0000 30B5     		push	{r4, r5, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 12
  40              		.cfi_offset 4, -12
  41              		.cfi_offset 5, -8
  42              		.cfi_offset 14, -4
  43 0002 0546     		mov	r5, r0
  44 0004 87B0     		sub	sp, sp, #28
  45              	.LCFI1:
  46              		.cfi_def_cfa_offset 40
  47              		.loc 1 99 28 view .LVU3
  48 0006 6A68     		ldr	r2, [r5, #4]
  49 0008 0121     		movs	r1, #1
  50 000a 0123     		movs	r3, #1
  51 000c 0020     		movs	r0, #0
  52              	.LVL1:
  53              		.loc 1 99 28 view .LVU4
  54 000e CDE90423 		strd	r2, r3, [sp, #16]
 100:Src/nvm.c     ****         .TypeErase = FLASH_TYPEERASE_PAGES,    // Changed from SECTORS to PAGES
 101:Src/nvm.c     ****         .Page = sector->sector_id,             // Using page number instead of sector
 102:Src/nvm.c     ****         .NbPages = 1,                          // Erase one page
 103:Src/nvm.c     ****         .Banks = FLASH_BANK_1                  // Always Bank 1 for G431
 104:Src/nvm.c     ****     };
 105:Src/nvm.c     ****     
 106:Src/nvm.c     ****     HAL_FLASH_Unlock();
  55              		.loc 1 106 5 is_stmt 1 view .LVU5
  99:Src/nvm.c     ****         .TypeErase = FLASH_TYPEERASE_PAGES,    // Changed from SECTORS to PAGES
  56              		.loc 1 99 28 is_stmt 0 view .LVU6
  57 0012 CDE90201 		strd	r0, [sp, #8]
  58              		.loc 1 106 5 view .LVU7
  59 0016 FFF7FEFF 		bl	HAL_FLASH_Unlock
  60              	.LVL2:
 107:Src/nvm.c     ****     HAL_FLASH_ClearError();
  61              		.loc 1 107 5 is_stmt 1 view .LVU8
  62              		.loc 1 107 5 view .LVU9
  63              		.loc 1 107 5 view .LVU10
ARM GAS  /tmp/cccHlqCc.s 			page 4


  64 001a 0D4B     		ldr	r3, .L7
  65 001c 9A69     		ldr	r2, [r3, #24]
  66 001e 4CF2FA30 		movw	r0, #50170
  67 0022 42F04042 		orr	r2, r2, #-1073741824
  68 0026 9A61     		str	r2, [r3, #24]
  69              		.loc 1 107 5 view .LVU11
  70              		.loc 1 107 5 view .LVU12
 108:Src/nvm.c     ****     uint32_t page_error;
 109:Src/nvm.c     ****     if (HAL_FLASHEx_Erase(&erase_struct, &page_error) != HAL_OK)
  71              		.loc 1 109 9 is_stmt 0 view .LVU13
  72 0028 01A9     		add	r1, sp, #4
 107:Src/nvm.c     ****     HAL_FLASH_ClearError();
  73              		.loc 1 107 5 view .LVU14
  74 002a 1861     		str	r0, [r3, #16]
 107:Src/nvm.c     ****     HAL_FLASH_ClearError();
  75              		.loc 1 107 5 is_stmt 1 view .LVU15
 108:Src/nvm.c     ****     uint32_t page_error;
  76              		.loc 1 108 5 view .LVU16
  77              		.loc 1 109 5 view .LVU17
  78              		.loc 1 109 9 is_stmt 0 view .LVU18
  79 002c 02A8     		add	r0, sp, #8
  80 002e FFF7FEFF 		bl	HAL_FLASHEx_Erase
  81              	.LVL3:
  82              		.loc 1 109 8 view .LVU19
  83 0032 38B9     		cbnz	r0, .L6
 110:Src/nvm.c     ****         goto fail;
 111:Src/nvm.c     ****     sector->index = sector->n_reserved;
  84              		.loc 1 111 19 view .LVU20
  85 0034 EB68     		ldr	r3, [r5, #12]
  86 0036 2B60     		str	r3, [r5]
  87 0038 0446     		mov	r4, r0
  88              		.loc 1 111 5 is_stmt 1 view .LVU21
 112:Src/nvm.c     **** 
 113:Src/nvm.c     ****     HAL_FLASH_Lock();
  89              		.loc 1 113 5 view .LVU22
  90 003a FFF7FEFF 		bl	HAL_FLASH_Lock
  91              	.LVL4:
 114:Src/nvm.c     ****     return 0;
  92              		.loc 1 114 5 view .LVU23
  93              		.loc 1 114 12 is_stmt 0 view .LVU24
  94 003e 2046     		mov	r0, r4
 115:Src/nvm.c     **** fail:
 116:Src/nvm.c     ****     HAL_FLASH_Lock();
 117:Src/nvm.c     ****     return HAL_FLASH_GetError();
 118:Src/nvm.c     **** }
  95              		.loc 1 118 1 view .LVU25
  96 0040 07B0     		add	sp, sp, #28
  97              	.LCFI2:
  98              		.cfi_remember_state
  99              		.cfi_def_cfa_offset 12
 100              		@ sp needed
 101 0042 30BD     		pop	{r4, r5, pc}
 102              	.LVL5:
 103              	.L6:
 104              	.LCFI3:
 105              		.cfi_restore_state
 106              	.LBB10:
ARM GAS  /tmp/cccHlqCc.s 			page 5


 107              	.LBI10:
  98:Src/nvm.c     ****     FLASH_EraseInitTypeDef erase_struct = {
 108              		.loc 1 98 5 is_stmt 1 view .LVU26
 109              	.LBB11:
 110:Src/nvm.c     ****     sector->index = sector->n_reserved;
 110              		.loc 1 110 9 view .LVU27
 111              	.LDL1:
 116:Src/nvm.c     ****     return HAL_FLASH_GetError();
 112              		.loc 1 116 5 view .LVU28
 113 0044 FFF7FEFF 		bl	HAL_FLASH_Lock
 114              	.LVL6:
 117:Src/nvm.c     **** }
 115              		.loc 1 117 5 view .LVU29
 117:Src/nvm.c     **** }
 116              		.loc 1 117 12 is_stmt 0 view .LVU30
 117 0048 FFF7FEFF 		bl	HAL_FLASH_GetError
 118              	.LVL7:
 117:Src/nvm.c     **** }
 119              		.loc 1 117 12 view .LVU31
 120              	.LBE11:
 121              	.LBE10:
 122              		.loc 1 118 1 view .LVU32
 123 004c 07B0     		add	sp, sp, #28
 124              	.LCFI4:
 125              		.cfi_def_cfa_offset 12
 126              		@ sp needed
 127 004e 30BD     		pop	{r4, r5, pc}
 128              	.LVL8:
 129              	.L8:
 130              		.loc 1 118 1 view .LVU33
 131              		.align	2
 132              	.L7:
 133 0050 00200240 		.word	1073881088
 134              		.cfi_endproc
 135              	.LFE132:
 137              		.section	.text.set_allocation_state,"ax",%progbits
 138              		.align	1
 139              		.p2align 2,,3
 140              		.global	set_allocation_state
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu fpv4-sp-d16
 146              	set_allocation_state:
 147              	.LVL9:
 148              	.LFB133:
 119:Src/nvm.c     **** 
 120:Src/nvm.c     **** // @brief Writes states into the allocation table.
 121:Src/nvm.c     **** // The write operation goes in the direction of increasing indices.
 122:Src/nvm.c     **** // @param state: 11: erased, 10: writing, 00: valid data
 123:Src/nvm.c     **** // @returns 0 on success or a non-zero error code otherwise
 124:Src/nvm.c     **** int set_allocation_state(sector_t *sector, size_t index, size_t count, field_state_t state) {
 149              		.loc 1 124 93 is_stmt 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 125:Src/nvm.c     ****     if (index < sector->n_reserved)
ARM GAS  /tmp/cccHlqCc.s 			page 6


 153              		.loc 1 125 5 view .LVU35
 124:Src/nvm.c     ****     if (index < sector->n_reserved)
 154              		.loc 1 124 93 is_stmt 0 view .LVU36
 155 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 156              	.LCFI5:
 157              		.cfi_def_cfa_offset 24
 158              		.cfi_offset 4, -24
 159              		.cfi_offset 5, -20
 160              		.cfi_offset 6, -16
 161              		.cfi_offset 7, -12
 162              		.cfi_offset 8, -8
 163              		.cfi_offset 14, -4
 124:Src/nvm.c     ****     if (index < sector->n_reserved)
 164              		.loc 1 124 93 view .LVU37
 165 0004 8046     		mov	r8, r0
 166              		.loc 1 125 8 view .LVU38
 167 0006 C068     		ldr	r0, [r0, #12]
 168              	.LVL10:
 169              		.loc 1 125 8 view .LVU39
 170 0008 8842     		cmp	r0, r1
 171 000a 65D8     		bhi	.L17
 126:Src/nvm.c     ****         return -1;
 127:Src/nvm.c     ****     if (index + count >= sector->n_data)
 172              		.loc 1 127 5 is_stmt 1 view .LVU40
 173              		.loc 1 127 8 is_stmt 0 view .LVU41
 174 000c D8F80840 		ldr	r4, [r8, #8]
 175              		.loc 1 127 15 view .LVU42
 176 0010 8818     		adds	r0, r1, r2
 177              		.loc 1 127 8 view .LVU43
 178 0012 A042     		cmp	r0, r4
 179 0014 60D2     		bcs	.L17
 128:Src/nvm.c     ****         return -1;
 129:Src/nvm.c     **** 
 130:Src/nvm.c     ****     // expand state to state for 4 values
 131:Src/nvm.c     ****     const uint8_t states = (state << 0) | (state << 2) | (state << 4) | (state << 6);
 180              		.loc 1 131 5 is_stmt 1 view .LVU44
 181              		.loc 1 131 65 is_stmt 0 view .LVU45
 182 0016 1801     		lsls	r0, r3, #4
 183              		.loc 1 131 56 view .LVU46
 184 0018 40EA8300 		orr	r0, r0, r3, lsl #2
 132:Src/nvm.c     ****     
 133:Src/nvm.c     ****     // handle unaligned start
 134:Src/nvm.c     ****     uint8_t mask = ~(0xff << ((index & 0x3) << 1));
 185              		.loc 1 134 45 view .LVU47
 186 001c 4C00     		lsls	r4, r1, #1
 131:Src/nvm.c     ****     
 187              		.loc 1 131 56 view .LVU48
 188 001e 1843     		orrs	r0, r0, r3
 131:Src/nvm.c     ****     
 189              		.loc 1 131 71 view .LVU49
 190 0020 40EA8317 		orr	r7, r0, r3, lsl #6
 135:Src/nvm.c     ****     count += index & 0x3;
 191              		.loc 1 135 20 view .LVU50
 192 0024 01F00306 		and	r6, r1, #3
 134:Src/nvm.c     ****     count += index & 0x3;
 193              		.loc 1 134 45 view .LVU51
 194 0028 04F00603 		and	r3, r4, #6
ARM GAS  /tmp/cccHlqCc.s 			page 7


 195              	.LVL11:
 134:Src/nvm.c     ****     count += index & 0x3;
 196              		.loc 1 134 27 view .LVU52
 197 002c FF24     		movs	r4, #255
 198 002e 9C40     		lsls	r4, r4, r3
 199              		.loc 1 135 11 view .LVU53
 200 0030 1644     		add	r6, r6, r2
 136:Src/nvm.c     ****     index -= index & 0x3;
 201              		.loc 1 136 11 view .LVU54
 202 0032 21F00305 		bic	r5, r1, #3
 137:Src/nvm.c     **** 
 138:Src/nvm.c     ****     HAL_FLASH_Unlock();
 203              		.loc 1 138 5 view .LVU55
 204 0036 FFF7FEFF 		bl	HAL_FLASH_Unlock
 205              	.LVL12:
 139:Src/nvm.c     ****     HAL_FLASH_ClearError();
 206              		.loc 1 139 5 view .LVU56
 207 003a 294B     		ldr	r3, .L25
 208 003c 9A69     		ldr	r2, [r3, #24]
 134:Src/nvm.c     ****     count += index & 0x3;
 209              		.loc 1 134 13 view .LVU57
 210 003e E443     		mvns	r4, r4
 211              		.loc 1 139 5 view .LVU58
 212 0040 4CF2FA31 		movw	r1, #50170
 213 0044 42F04042 		orr	r2, r2, #-1073741824
 214 0048 9A61     		str	r2, [r3, #24]
 131:Src/nvm.c     ****     
 215              		.loc 1 131 19 view .LVU59
 216 004a FFB2     		uxtb	r7, r7
 217              	.LVL13:
 134:Src/nvm.c     ****     count += index & 0x3;
 218              		.loc 1 134 5 is_stmt 1 view .LVU60
 134:Src/nvm.c     ****     count += index & 0x3;
 219              		.loc 1 134 13 is_stmt 0 view .LVU61
 220 004c E4B2     		uxtb	r4, r4
 221              	.LVL14:
 135:Src/nvm.c     ****     index -= index & 0x3;
 222              		.loc 1 135 5 is_stmt 1 view .LVU62
 136:Src/nvm.c     **** 
 223              		.loc 1 136 5 view .LVU63
 138:Src/nvm.c     ****     HAL_FLASH_ClearError();
 224              		.loc 1 138 5 view .LVU64
 225              		.loc 1 139 5 view .LVU65
 226              		.loc 1 139 5 view .LVU66
 227              		.loc 1 139 5 view .LVU67
 228              		.loc 1 139 5 view .LVU68
 229              		.loc 1 139 5 view .LVU69
 230 004e 1961     		str	r1, [r3, #16]
 231 0050 18E0     		b	.L23
 232              	.L24:
 140:Src/nvm.c     **** 
 141:Src/nvm.c     ****     uint64_t dword_data;
 142:Src/nvm.c     ****     
 143:Src/nvm.c     ****     // write states
 144:Src/nvm.c     ****     for (; count >= 4; count -= 4, index += 4) {
 145:Src/nvm.c     ****         dword_data = ((uint64_t)(states | mask) << 56) | 
 233              		.loc 1 145 9 view .LVU70
ARM GAS  /tmp/cccHlqCc.s 			page 8


 234              		.loc 1 145 23 is_stmt 0 view .LVU71
 235 0052 47EA0402 		orr	r2, r7, r4
 236 0056 D0B2     		uxtb	r0, r2
 237              	.LVL15:
 146:Src/nvm.c     ****                     ((uint64_t)(states | mask) << 48) |
 147:Src/nvm.c     ****                     ((uint64_t)(states | mask) << 40) |
 148:Src/nvm.c     ****                     ((uint64_t)(states | mask) << 32) |
 149:Src/nvm.c     ****                     ((uint64_t)(states | mask) << 24) |
 150:Src/nvm.c     ****                     ((uint64_t)(states | mask) << 16) |
 151:Src/nvm.c     ****                     ((uint64_t)(states | mask) << 8) |
 152:Src/nvm.c     ****                     (uint64_t)(states | mask);
 153:Src/nvm.c     ****         
 154:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 
 238              		.loc 1 154 9 is_stmt 1 view .LVU72
 146:Src/nvm.c     ****                     ((uint64_t)(states | mask) << 48) |
 239              		.loc 1 146 48 is_stmt 0 view .LVU73
 240 0058 0404     		lsls	r4, r0, #16
 241              	.LVL16:
 145:Src/nvm.c     ****                     ((uint64_t)(states | mask) << 48) |
 242              		.loc 1 145 56 view .LVU74
 243 005a 44EA0263 		orr	r3, r4, r2, lsl #24
 155:Src/nvm.c     ****                 (uintptr_t)&sector->alloc_table[index >> 2], 
 244              		.loc 1 155 28 view .LVU75
 245 005e D8F81010 		ldr	r1, [r8, #16]
 145:Src/nvm.c     ****                     ((uint64_t)(states | mask) << 48) |
 246              		.loc 1 145 20 view .LVU76
 247 0062 40EA0262 		orr	r2, r0, r2, lsl #24
 248 0066 43EA0023 		orr	r3, r3, r0, lsl #8
 249 006a 2243     		orrs	r2, r2, r4
 154:Src/nvm.c     ****                 (uintptr_t)&sector->alloc_table[index >> 2], 
 250              		.loc 1 154 13 view .LVU77
 251 006c 01EB9501 		add	r1, r1, r5, lsr #2
 252 0070 42EA0022 		orr	r2, r2, r0, lsl #8
 253 0074 0343     		orrs	r3, r3, r0
 254 0076 0020     		movs	r0, #0
 255              	.LVL17:
 154:Src/nvm.c     ****                 (uintptr_t)&sector->alloc_table[index >> 2], 
 256              		.loc 1 154 13 view .LVU78
 257 0078 FFF7FEFF 		bl	HAL_FLASH_Program
 258              	.LVL18:
 156:Src/nvm.c     ****                 dword_data) != HAL_OK)
 157:Src/nvm.c     ****             goto fail;
 158:Src/nvm.c     ****         mask = 0;
 259              		.loc 1 158 9 is_stmt 1 view .LVU79
 144:Src/nvm.c     ****         dword_data = ((uint64_t)(states | mask) << 56) | 
 260              		.loc 1 144 24 view .LVU80
 144:Src/nvm.c     ****         dword_data = ((uint64_t)(states | mask) << 56) | 
 261              		.loc 1 144 30 is_stmt 0 view .LVU81
 262 007c 043E     		subs	r6, r6, #4
 263              	.LVL19:
 144:Src/nvm.c     ****         dword_data = ((uint64_t)(states | mask) << 56) | 
 264              		.loc 1 144 42 view .LVU82
 265 007e 0435     		adds	r5, r5, #4
 266              	.LVL20:
 144:Src/nvm.c     ****         dword_data = ((uint64_t)(states | mask) << 56) | 
 267              		.loc 1 144 12 is_stmt 1 view .LVU83
 154:Src/nvm.c     ****                 (uintptr_t)&sector->alloc_table[index >> 2], 
ARM GAS  /tmp/cccHlqCc.s 			page 9


 268              		.loc 1 154 12 is_stmt 0 view .LVU84
 269 0080 0446     		mov	r4, r0
 270 0082 18BB     		cbnz	r0, .L12
 271              	.LVL21:
 272              	.L23:
 144:Src/nvm.c     ****         dword_data = ((uint64_t)(states | mask) << 56) | 
 273              		.loc 1 144 12 is_stmt 1 view .LVU85
 144:Src/nvm.c     ****         dword_data = ((uint64_t)(states | mask) << 56) | 
 274              		.loc 1 144 5 is_stmt 0 view .LVU86
 275 0084 032E     		cmp	r6, #3
 276 0086 E4D8     		bhi	.L24
 159:Src/nvm.c     ****     }
 160:Src/nvm.c     **** 
 161:Src/nvm.c     ****     // handle unaligned end
 162:Src/nvm.c     ****     if (count) {
 277              		.loc 1 162 5 is_stmt 1 view .LVU87
 278              		.loc 1 162 8 is_stmt 0 view .LVU88
 279 0088 DEB1     		cbz	r6, .L15
 163:Src/nvm.c     ****         mask |= ~(0xff >> ((4 - count) << 1));
 280              		.loc 1 163 9 is_stmt 1 view .LVU89
 281              		.loc 1 163 31 is_stmt 0 view .LVU90
 282 008a C6F10406 		rsb	r6, r6, #4
 283              	.LVL22:
 284              		.loc 1 163 40 view .LVU91
 285 008e 7600     		lsls	r6, r6, #1
 286              		.loc 1 163 24 view .LVU92
 287 0090 FF22     		movs	r2, #255
 288 0092 3241     		asrs	r2, r2, r6
 289              		.loc 1 163 14 view .LVU93
 290 0094 64EA0202 		orn	r2, r4, r2
 291              	.LVL23:
 164:Src/nvm.c     ****         dword_data = ((uint64_t)(states | mask) << 56) |
 292              		.loc 1 164 9 is_stmt 1 view .LVU94
 293              		.loc 1 164 23 is_stmt 0 view .LVU95
 294 0098 D2B2     		uxtb	r2, r2
 295              		.loc 1 164 23 view .LVU96
 296 009a 1743     		orrs	r7, r7, r2
 297              	.LVL24:
 165:Src/nvm.c     ****                     ((uint64_t)(states | mask) << 48) |
 166:Src/nvm.c     ****                     ((uint64_t)(states | mask) << 40) |
 167:Src/nvm.c     ****                     ((uint64_t)(states | mask) << 32) |
 168:Src/nvm.c     ****                     ((uint64_t)(states | mask) << 24) |
 169:Src/nvm.c     ****                     ((uint64_t)(states | mask) << 16) |
 170:Src/nvm.c     ****                     ((uint64_t)(states | mask) << 8) |
 171:Src/nvm.c     ****                     (uint64_t)(states | mask);
 172:Src/nvm.c     ****                     
 173:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 
 298              		.loc 1 173 9 is_stmt 1 view .LVU97
 165:Src/nvm.c     ****                     ((uint64_t)(states | mask) << 48) |
 299              		.loc 1 165 48 is_stmt 0 view .LVU98
 300 009c 3C04     		lsls	r4, r7, #16
 174:Src/nvm.c     ****                 (uintptr_t)&sector->alloc_table[index >> 2], 
 301              		.loc 1 174 28 view .LVU99
 302 009e D8F81010 		ldr	r1, [r8, #16]
 164:Src/nvm.c     ****         dword_data = ((uint64_t)(states | mask) << 56) |
 303              		.loc 1 164 56 view .LVU100
 304 00a2 44EA0763 		orr	r3, r4, r7, lsl #24
ARM GAS  /tmp/cccHlqCc.s 			page 10


 164:Src/nvm.c     ****         dword_data = ((uint64_t)(states | mask) << 56) |
 305              		.loc 1 164 20 view .LVU101
 306 00a6 47EA0762 		orr	r2, r7, r7, lsl #24
 307              	.LVL25:
 164:Src/nvm.c     ****         dword_data = ((uint64_t)(states | mask) << 56) |
 308              		.loc 1 164 20 view .LVU102
 309 00aa 43EA0723 		orr	r3, r3, r7, lsl #8
 310 00ae 2243     		orrs	r2, r2, r4
 173:Src/nvm.c     ****                 (uintptr_t)&sector->alloc_table[index >> 2], 
 311              		.loc 1 173 13 view .LVU103
 312 00b0 01EB9501 		add	r1, r1, r5, lsr #2
 313 00b4 0020     		movs	r0, #0
 314 00b6 3B43     		orrs	r3, r3, r7
 315 00b8 42EA0722 		orr	r2, r2, r7, lsl #8
 316 00bc FFF7FEFF 		bl	HAL_FLASH_Program
 317              	.LVL26:
 173:Src/nvm.c     ****                 (uintptr_t)&sector->alloc_table[index >> 2], 
 318              		.loc 1 173 12 view .LVU104
 319 00c0 20B9     		cbnz	r0, .L12
 320              	.LVL27:
 321              	.L15:
 175:Src/nvm.c     ****                 dword_data) != HAL_OK)
 176:Src/nvm.c     ****             goto fail;
 177:Src/nvm.c     ****     }
 178:Src/nvm.c     ****     
 179:Src/nvm.c     ****     HAL_FLASH_Lock();
 322              		.loc 1 179 5 is_stmt 1 view .LVU105
 323 00c2 FFF7FEFF 		bl	HAL_FLASH_Lock
 324              	.LVL28:
 180:Src/nvm.c     ****     return 0;
 325              		.loc 1 180 5 view .LVU106
 326              		.loc 1 180 12 is_stmt 0 view .LVU107
 327 00c6 0020     		movs	r0, #0
 328              	.LVL29:
 329              	.L9:
 181:Src/nvm.c     **** fail:
 182:Src/nvm.c     ****     HAL_FLASH_Lock();
 183:Src/nvm.c     ****     return HAL_FLASH_GetError(); // non-zero
 184:Src/nvm.c     **** }
 330              		.loc 1 184 1 view .LVU108
 331 00c8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 332              	.LVL30:
 333              	.L12:
 334              	.LDL2:
 182:Src/nvm.c     ****     return HAL_FLASH_GetError(); // non-zero
 335              		.loc 1 182 5 is_stmt 1 view .LVU109
 336 00cc FFF7FEFF 		bl	HAL_FLASH_Lock
 337              	.LVL31:
 183:Src/nvm.c     **** }
 338              		.loc 1 183 5 view .LVU110
 339              		.loc 1 184 1 is_stmt 0 view .LVU111
 340 00d0 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 341              	.LCFI6:
 342              		.cfi_remember_state
 343              		.cfi_restore 14
 344              		.cfi_restore 8
 345              		.cfi_restore 7
ARM GAS  /tmp/cccHlqCc.s 			page 11


 346              		.cfi_restore 6
 347              		.cfi_restore 5
 348              		.cfi_restore 4
 349              		.cfi_def_cfa_offset 0
 350              	.LVL32:
 183:Src/nvm.c     **** }
 351              		.loc 1 183 12 view .LVU112
 352 00d4 FFF7FEBF 		b	HAL_FLASH_GetError
 353              	.LVL33:
 354              	.L17:
 355              	.LCFI7:
 356              		.cfi_restore_state
 126:Src/nvm.c     ****     if (index + count >= sector->n_data)
 357              		.loc 1 126 16 view .LVU113
 358 00d8 4FF0FF30 		mov	r0, #-1
 359 00dc F4E7     		b	.L9
 360              	.L26:
 361 00de 00BF     		.align	2
 362              	.L25:
 363 00e0 00200240 		.word	1073881088
 364              		.cfi_endproc
 365              	.LFE133:
 367              		.section	.text.scan_allocation_table,"ax",%progbits
 368              		.align	1
 369              		.p2align 2,,3
 370              		.global	scan_allocation_table
 371              		.syntax unified
 372              		.thumb
 373              		.thumb_func
 374              		.fpu fpv4-sp-d16
 376              	scan_allocation_table:
 377              	.LVL34:
 378              	.LFB134:
 185:Src/nvm.c     **** 
 186:Src/nvm.c     **** // @brief Reads the allocation table from behind to determine how many fields match the
 187:Src/nvm.c     **** // reference state.
 188:Src/nvm.c     **** // @param sector: The sector on which to perform the search
 189:Src/nvm.c     **** // @param max_index: The maximum index that should be considered
 190:Src/nvm.c     **** // @param ref_state: The reference state
 191:Src/nvm.c     **** // @param state: Set to the first encountered state that is unequal to ref_state.
 192:Src/nvm.c     **** //               Set to ref_state if all encountered states are equal to ref_state.
 193:Src/nvm.c     **** // @returns The smallest index that points to a field with ref_state.
 194:Src/nvm.c     **** //          This value is at least sector->n_reserved and at most max_index.
 195:Src/nvm.c     **** size_t scan_allocation_table(sector_t *sector, size_t max_index, field_state_t ref_state, field_sta
 379              		.loc 1 195 113 is_stmt 1 view -0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 196:Src/nvm.c     ****     const uint8_t ref_states = (ref_state << 0) | (ref_state << 2) | (ref_state << 4) | (ref_state 
 383              		.loc 1 196 5 view .LVU115
 195:Src/nvm.c     ****     const uint8_t ref_states = (ref_state << 0) | (ref_state << 2) | (ref_state << 4) | (ref_state 
 384              		.loc 1 195 113 is_stmt 0 view .LVU116
 385 0000 70B5     		push	{r4, r5, r6, lr}
 386              	.LCFI8:
 387              		.cfi_def_cfa_offset 16
 388              		.cfi_offset 4, -16
 389              		.cfi_offset 5, -12
ARM GAS  /tmp/cccHlqCc.s 			page 12


 390              		.cfi_offset 6, -8
 391              		.cfi_offset 14, -4
 392              		.loc 1 196 81 view .LVU117
 393 0002 1401     		lsls	r4, r2, #4
 195:Src/nvm.c     ****     const uint8_t ref_states = (ref_state << 0) | (ref_state << 2) | (ref_state << 4) | (ref_state 
 394              		.loc 1 195 113 view .LVU118
 395 0004 0546     		mov	r5, r0
 396              		.loc 1 196 68 view .LVU119
 397 0006 44EA8204 		orr	r4, r4, r2, lsl #2
 398 000a 1443     		orrs	r4, r4, r2
 399              		.loc 1 196 87 view .LVU120
 400 000c 44EA821C 		orr	ip, r4, r2, lsl #6
 197:Src/nvm.c     ****     size_t index = (((max_index + 3) >> 2) << 2); // start at the max index but round up to a multi
 198:Src/nvm.c     ****     size_t ignore = index - max_index;
 199:Src/nvm.c     ****     uint8_t states = ref_states;
 200:Src/nvm.c     **** 
 201:Src/nvm.c     ****     //printf("scan from %08x to %08x for %02x\r\n", index, sector->n_reserved, ref_states); osDelay
 202:Src/nvm.c     **** 
 203:Src/nvm.c     ****     // read 4 states at a time
 204:Src/nvm.c     ****     for (; index >= (sector->n_reserved + 4); index -= 4) {
 401              		.loc 1 204 28 view .LVU121
 402 0010 EC68     		ldr	r4, [r5, #12]
 197:Src/nvm.c     ****     size_t index = (((max_index + 3) >> 2) << 2); // start at the max index but round up to a multi
 403              		.loc 1 197 33 view .LVU122
 404 0012 C81C     		adds	r0, r1, #3
 405              	.LVL35:
 197:Src/nvm.c     ****     size_t index = (((max_index + 3) >> 2) << 2); // start at the max index but round up to a multi
 406              		.loc 1 197 12 view .LVU123
 407 0014 20F00300 		bic	r0, r0, #3
 408              		.loc 1 204 41 view .LVU124
 409 0018 04F1040E 		add	lr, r4, #4
 410              		.loc 1 204 5 view .LVU125
 411 001c 7045     		cmp	r0, lr
 196:Src/nvm.c     ****     size_t index = (((max_index + 3) >> 2) << 2); // start at the max index but round up to a multi
 412              		.loc 1 196 19 view .LVU126
 413 001e 5FFA8CFC 		uxtb	ip, ip
 414              	.LVL36:
 197:Src/nvm.c     ****     size_t index = (((max_index + 3) >> 2) << 2); // start at the max index but round up to a multi
 415              		.loc 1 197 5 is_stmt 1 view .LVU127
 198:Src/nvm.c     ****     uint8_t states = ref_states;
 416              		.loc 1 198 5 view .LVU128
 198:Src/nvm.c     ****     uint8_t states = ref_states;
 417              		.loc 1 198 12 is_stmt 0 view .LVU129
 418 0022 A0EB0106 		sub	r6, r0, r1
 419              	.LVL37:
 199:Src/nvm.c     **** 
 420              		.loc 1 199 5 is_stmt 1 view .LVU130
 421              		.loc 1 204 5 view .LVU131
 422              		.loc 1 204 12 view .LVU132
 423              		.loc 1 204 5 is_stmt 0 view .LVU133
 424 0026 34D3     		bcc	.L33
 205:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 425              		.loc 1 205 9 is_stmt 1 view .LVU134
 426              		.loc 1 205 45 is_stmt 0 view .LVU135
 427 0028 421E     		subs	r2, r0, #1
 428              	.LVL38:
 429              		.loc 1 205 24 view .LVU136
ARM GAS  /tmp/cccHlqCc.s 			page 13


 430 002a 2D69     		ldr	r5, [r5, #16]
 431              	.LVL39:
 432              		.loc 1 205 50 view .LVU137
 433 002c 9208     		lsrs	r2, r2, #2
 434              		.loc 1 205 16 view .LVU138
 435 002e AA5C     		ldrb	r2, [r5, r2]	@ zero_extendqisi2
 436 0030 D2B2     		uxtb	r2, r2
 437              	.LVL40:
 206:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 438              		.loc 1 206 9 is_stmt 1 view .LVU139
 439              		.loc 1 206 12 is_stmt 0 view .LVU140
 440 0032 7EB1     		cbz	r6, .L30
 441              	.LBB13:
 207:Src/nvm.c     ****             uint8_t ignore_mask = ~(0xff >> (ignore << 1));
 442              		.loc 1 207 13 is_stmt 1 view .LVU141
 443              		.loc 1 207 53 is_stmt 0 view .LVU142
 444 0034 7600     		lsls	r6, r6, #1
 445              	.LVL41:
 446              		.loc 1 207 42 view .LVU143
 447 0036 FF21     		movs	r1, #255
 448              	.LVL42:
 449              		.loc 1 207 42 view .LVU144
 450 0038 3141     		asrs	r1, r1, r6
 451              		.loc 1 207 21 view .LVU145
 452 003a C943     		mvns	r1, r1
 453 003c C9B2     		uxtb	r1, r1
 454              	.LVL43:
 208:Src/nvm.c     ****             states = (states & ~ignore_mask) | (ref_states & ignore_mask);
 455              		.loc 1 208 13 is_stmt 1 view .LVU146
 456              		.loc 1 208 30 is_stmt 0 view .LVU147
 457 003e 22EA0102 		bic	r2, r2, r1
 458              	.LVL44:
 459              		.loc 1 208 46 view .LVU148
 460 0042 0CEA0101 		and	r1, ip, r1
 461              	.LVL45:
 462              		.loc 1 208 20 view .LVU149
 463 0046 0A43     		orrs	r2, r2, r1
 464              	.LVL46:
 209:Src/nvm.c     ****             ignore = 0;
 465              		.loc 1 209 13 is_stmt 1 view .LVU150
 466              		.loc 1 209 13 is_stmt 0 view .LVU151
 467 0048 04E0     		b	.L30
 468              	.LVL47:
 469              	.L40:
 470              		.loc 1 209 13 view .LVU152
 471              	.LBE13:
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 472              		.loc 1 204 5 view .LVU153
 473 004a 7645     		cmp	r6, lr
 474 004c 1FD3     		bcc	.L34
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 475              		.loc 1 205 16 view .LVU154
 476 004e 6A5C     		ldrb	r2, [r5, r1]	@ zero_extendqisi2
 477 0050 3046     		mov	r0, r6
 478 0052 D2B2     		uxtb	r2, r2
 479              	.LVL48:
 206:Src/nvm.c     ****             uint8_t ignore_mask = ~(0xff >> (ignore << 1));
ARM GAS  /tmp/cccHlqCc.s 			page 14


 480              		.loc 1 206 9 is_stmt 1 view .LVU155
 481              	.L30:
 210:Src/nvm.c     ****         }
 211:Src/nvm.c     ****         if (states != ref_states)
 482              		.loc 1 211 9 view .LVU156
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 483              		.loc 1 204 47 view .LVU157
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 484              		.loc 1 205 50 is_stmt 0 view .LVU158
 485 0054 411F     		subs	r1, r0, #5
 486              		.loc 1 211 12 view .LVU159
 487 0056 6245     		cmp	r2, ip
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 488              		.loc 1 205 50 view .LVU160
 489 0058 4FEA9101 		lsr	r1, r1, #2
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 490              		.loc 1 204 53 view .LVU161
 491 005c A0F10406 		sub	r6, r0, #4
 492              	.LVL49:
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 493              		.loc 1 204 12 is_stmt 1 view .LVU162
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 494              		.loc 1 205 9 view .LVU163
 495              		.loc 1 211 12 is_stmt 0 view .LVU164
 496 0060 F3D0     		beq	.L40
 497              	.LVL50:
 498              	.L28:
 212:Src/nvm.c     ****             break;
 213:Src/nvm.c     ****     }
 214:Src/nvm.c     **** 
 215:Src/nvm.c     ****     // once we encounterd a byte with any state mismatch determine which of the 4 states it is
 216:Src/nvm.c     ****     for (; ((states >> 6) == (ref_states & 0x3)) && (index > sector->n_reserved); index--) {
 499              		.loc 1 216 12 is_stmt 1 discriminator 1 view .LVU165
 500 0062 0CF0030C 		and	ip, ip, #3
 501              	.LVL51:
 502              		.loc 1 216 5 is_stmt 0 discriminator 1 view .LVU166
 503 0066 BCEB921F 		cmp	ip, r2, lsr #6
 504              		.loc 1 216 21 discriminator 1 view .LVU167
 505 006a 4FEA9211 		lsr	r1, r2, #6
 506              		.loc 1 216 5 discriminator 1 view .LVU168
 507 006e 0CD1     		bne	.L31
 508              		.loc 1 216 50 view .LVU169
 509 0070 A042     		cmp	r0, r4
 510 0072 02D8     		bhi	.L32
 511 0074 09E0     		b	.L31
 512              	.L41:
 513              		.loc 1 216 50 discriminator 2 view .LVU170
 514 0076 A042     		cmp	r0, r4
 515 0078 07D0     		beq	.L31
 516              	.L32:
 217:Src/nvm.c     ****         states <<= 2;
 517              		.loc 1 217 9 is_stmt 1 discriminator 3 view .LVU171
 518              		.loc 1 217 16 is_stmt 0 discriminator 3 view .LVU172
 519 007a 9200     		lsls	r2, r2, #2
 520              	.LVL52:
 216:Src/nvm.c     ****         states <<= 2;
 521              		.loc 1 216 21 discriminator 3 view .LVU173
ARM GAS  /tmp/cccHlqCc.s 			page 15


 522 007c C2F38111 		ubfx	r1, r2, #6, #2
 216:Src/nvm.c     ****         states <<= 2;
 523              		.loc 1 216 5 discriminator 3 view .LVU174
 524 0080 6145     		cmp	r1, ip
 216:Src/nvm.c     ****         states <<= 2;
 525              		.loc 1 216 88 discriminator 3 view .LVU175
 526 0082 00F1FF30 		add	r0, r0, #-1
 527              	.LVL53:
 528              		.loc 1 217 16 discriminator 3 view .LVU176
 529 0086 D2B2     		uxtb	r2, r2
 530              	.LVL54:
 216:Src/nvm.c     ****         states <<= 2;
 531              		.loc 1 216 83 is_stmt 1 discriminator 3 view .LVU177
 216:Src/nvm.c     ****         states <<= 2;
 532              		.loc 1 216 12 discriminator 3 view .LVU178
 216:Src/nvm.c     ****         states <<= 2;
 533              		.loc 1 216 5 is_stmt 0 discriminator 3 view .LVU179
 534 0088 F5D0     		beq	.L41
 535              	.L31:
 218:Src/nvm.c     ****     }
 219:Src/nvm.c     ****     
 220:Src/nvm.c     ****     *state = states >> 6;
 536              		.loc 1 220 5 is_stmt 1 view .LVU180
 537              		.loc 1 220 12 is_stmt 0 view .LVU181
 538 008a 1970     		strb	r1, [r3]
 221:Src/nvm.c     ****     //printf("(it's %02x)\r\n", index); osDelay(5);
 222:Src/nvm.c     ****     return index;
 539              		.loc 1 222 5 is_stmt 1 view .LVU182
 223:Src/nvm.c     **** }
 540              		.loc 1 223 1 is_stmt 0 view .LVU183
 541 008c 70BD     		pop	{r4, r5, r6, pc}
 542              	.LVL55:
 543              	.L34:
 544              		.loc 1 223 1 view .LVU184
 545 008e 3046     		mov	r0, r6
 546 0090 E7E7     		b	.L28
 547              	.LVL56:
 548              	.L33:
 196:Src/nvm.c     ****     size_t index = (((max_index + 3) >> 2) << 2); // start at the max index but round up to a multi
 549              		.loc 1 196 19 view .LVU185
 550 0092 6246     		mov	r2, ip
 551              	.LVL57:
 196:Src/nvm.c     ****     size_t index = (((max_index + 3) >> 2) << 2); // start at the max index but round up to a multi
 552              		.loc 1 196 19 view .LVU186
 553 0094 E5E7     		b	.L28
 554              		.cfi_endproc
 555              	.LFE134:
 557 0096 00BF     		.section	.text.NVM_init,"ax",%progbits
 558              		.align	1
 559              		.p2align 2,,3
 560              		.global	NVM_init
 561              		.syntax unified
 562              		.thumb
 563              		.thumb_func
 564              		.fpu fpv4-sp-d16
 566              	NVM_init:
 567              	.LFB135:
ARM GAS  /tmp/cccHlqCc.s 			page 16


 224:Src/nvm.c     **** 
 225:Src/nvm.c     **** // Loads the head of the NVM data.
 226:Src/nvm.c     **** // If this function fails subsequent calls to NVM functions (other than NVM_init or NVM_erase)
 227:Src/nvm.c     **** // cause undefined behavior.
 228:Src/nvm.c     **** // @returns 0 on success or a non-zero error code otherwise
 229:Src/nvm.c     **** int NVM_init(void) {
 568              		.loc 1 229 20 is_stmt 1 view -0
 569              		.cfi_startproc
 570              		@ args = 0, pretend = 0, frame = 0
 571              		@ frame_needed = 0, uses_anonymous_args = 0
 230:Src/nvm.c     ****     field_state_t sector0_state, sector1_state;
 572              		.loc 1 230 5 view .LVU188
 231:Src/nvm.c     ****     sectors[0].index = scan_allocation_table(&sectors[0], sectors[0].n_data,
 573              		.loc 1 231 5 view .LVU189
 574              		.loc 1 231 24 is_stmt 0 view .LVU190
 575 0000 6348     		ldr	r0, .L92
 229:Src/nvm.c     ****     field_state_t sector0_state, sector1_state;
 576              		.loc 1 229 20 view .LVU191
 577 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 578              	.LCFI9:
 579              		.cfi_def_cfa_offset 20
 580              		.cfi_offset 4, -20
 581              		.cfi_offset 5, -16
 582              		.cfi_offset 6, -12
 583              		.cfi_offset 7, -8
 584              		.cfi_offset 14, -4
 585              	.LBB23:
 586              	.LBB24:
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 587              		.loc 1 204 28 view .LVU192
 588 0004 D0E90245 		ldrd	r4, r5, [r0, #8]
 197:Src/nvm.c     ****     size_t ignore = index - max_index;
 589              		.loc 1 197 33 view .LVU193
 590 0008 E11C     		adds	r1, r4, #3
 197:Src/nvm.c     ****     size_t ignore = index - max_index;
 591              		.loc 1 197 12 view .LVU194
 592 000a 21F00301 		bic	r1, r1, #3
 593              	.LVL58:
 198:Src/nvm.c     ****     uint8_t states = ref_states;
 594              		.loc 1 198 5 is_stmt 1 view .LVU195
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 595              		.loc 1 204 41 is_stmt 0 view .LVU196
 596 000e 2E1D     		adds	r6, r5, #4
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 597              		.loc 1 204 5 view .LVU197
 598 0010 8E42     		cmp	r6, r1
 198:Src/nvm.c     ****     uint8_t states = ref_states;
 599              		.loc 1 198 12 view .LVU198
 600 0012 A1EB0404 		sub	r4, r1, r4
 601              	.LVL59:
 199:Src/nvm.c     **** 
 602              		.loc 1 199 5 is_stmt 1 view .LVU199
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 603              		.loc 1 204 5 view .LVU200
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 604              		.loc 1 204 12 view .LVU201
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
ARM GAS  /tmp/cccHlqCc.s 			page 17


 605              		.loc 1 204 5 is_stmt 0 view .LVU202
 606 0016 79D8     		bhi	.L67
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 607              		.loc 1 205 9 is_stmt 1 view .LVU203
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 608              		.loc 1 205 45 is_stmt 0 view .LVU204
 609 0018 4B1E     		subs	r3, r1, #1
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 610              		.loc 1 205 24 view .LVU205
 611 001a 0769     		ldr	r7, [r0, #16]
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 612              		.loc 1 205 50 view .LVU206
 613 001c 9B08     		lsrs	r3, r3, #2
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 614              		.loc 1 205 16 view .LVU207
 615 001e FB5C     		ldrb	r3, [r7, r3]	@ zero_extendqisi2
 616 0020 DBB2     		uxtb	r3, r3
 617              	.LVL60:
 206:Src/nvm.c     ****             uint8_t ignore_mask = ~(0xff >> (ignore << 1));
 618              		.loc 1 206 9 is_stmt 1 view .LVU208
 206:Src/nvm.c     ****             uint8_t ignore_mask = ~(0xff >> (ignore << 1));
 619              		.loc 1 206 12 is_stmt 0 view .LVU209
 620 0022 5CB1     		cbz	r4, .L46
 621              	.LBB25:
 207:Src/nvm.c     ****             states = (states & ~ignore_mask) | (ref_states & ignore_mask);
 622              		.loc 1 207 13 is_stmt 1 view .LVU210
 623              	.LVL61:
 208:Src/nvm.c     ****             ignore = 0;
 624              		.loc 1 208 13 view .LVU211
 207:Src/nvm.c     ****             states = (states & ~ignore_mask) | (ref_states & ignore_mask);
 625              		.loc 1 207 53 is_stmt 0 view .LVU212
 626 0024 6400     		lsls	r4, r4, #1
 627              	.LVL62:
 207:Src/nvm.c     ****             states = (states & ~ignore_mask) | (ref_states & ignore_mask);
 628              		.loc 1 207 42 view .LVU213
 629 0026 FF22     		movs	r2, #255
 630 0028 2241     		asrs	r2, r2, r4
 208:Src/nvm.c     ****             ignore = 0;
 631              		.loc 1 208 46 view .LVU214
 632 002a 63EA0203 		orn	r3, r3, r2
 633              	.LVL63:
 208:Src/nvm.c     ****             ignore = 0;
 634              		.loc 1 208 20 view .LVU215
 635 002e DBB2     		uxtb	r3, r3
 636              	.LVL64:
 209:Src/nvm.c     ****         }
 637              		.loc 1 209 13 is_stmt 1 view .LVU216
 209:Src/nvm.c     ****         }
 638              		.loc 1 209 13 is_stmt 0 view .LVU217
 639 0030 04E0     		b	.L46
 640              	.LVL65:
 641              	.L85:
 209:Src/nvm.c     ****         }
 642              		.loc 1 209 13 view .LVU218
 643              	.LBE25:
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 644              		.loc 1 204 5 view .LVU219
ARM GAS  /tmp/cccHlqCc.s 			page 18


 645 0032 6645     		cmp	r6, ip
 646 0034 6BD8     		bhi	.L43
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 647              		.loc 1 205 16 view .LVU220
 648 0036 BB5C     		ldrb	r3, [r7, r2]	@ zero_extendqisi2
 649 0038 6146     		mov	r1, ip
 650 003a DBB2     		uxtb	r3, r3
 651              	.LVL66:
 206:Src/nvm.c     ****             uint8_t ignore_mask = ~(0xff >> (ignore << 1));
 652              		.loc 1 206 9 is_stmt 1 view .LVU221
 653              	.L46:
 211:Src/nvm.c     ****             break;
 654              		.loc 1 211 9 view .LVU222
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 655              		.loc 1 204 47 view .LVU223
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 656              		.loc 1 205 50 is_stmt 0 view .LVU224
 657 003c 4A1F     		subs	r2, r1, #5
 211:Src/nvm.c     ****             break;
 658              		.loc 1 211 12 view .LVU225
 659 003e FF2B     		cmp	r3, #255
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 660              		.loc 1 205 50 view .LVU226
 661 0040 4FEA9202 		lsr	r2, r2, #2
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 662              		.loc 1 204 53 view .LVU227
 663 0044 A1F1040C 		sub	ip, r1, #4
 664              	.LVL67:
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 665              		.loc 1 204 12 is_stmt 1 view .LVU228
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 666              		.loc 1 205 9 view .LVU229
 211:Src/nvm.c     ****             break;
 667              		.loc 1 211 12 is_stmt 0 view .LVU230
 668 0048 F3D0     		beq	.L85
 669              	.LVL68:
 216:Src/nvm.c     ****         states <<= 2;
 670              		.loc 1 216 12 is_stmt 1 view .LVU231
 216:Src/nvm.c     ****         states <<= 2;
 671              		.loc 1 216 5 is_stmt 0 view .LVU232
 672 004a 9A09     		lsrs	r2, r3, #6
 673 004c 032A     		cmp	r2, #3
 674 004e 60D0     		beq	.L66
 675              	.LVL69:
 676              	.L47:
 220:Src/nvm.c     ****     //printf("(it's %02x)\r\n", index); osDelay(5);
 677              		.loc 1 220 5 is_stmt 1 view .LVU233
 222:Src/nvm.c     **** }
 678              		.loc 1 222 5 view .LVU234
 222:Src/nvm.c     **** }
 679              		.loc 1 222 5 is_stmt 0 view .LVU235
 680              	.LBE24:
 681              	.LBE23:
 232:Src/nvm.c     ****                 ERASED, &sector0_state);
 233:Src/nvm.c     ****     sectors[1].index = scan_allocation_table(&sectors[1], sectors[1].n_data,
 682              		.loc 1 233 24 view .LVU236
 683 0050 036A     		ldr	r3, [r0, #32]
ARM GAS  /tmp/cccHlqCc.s 			page 19


 684              	.LBB27:
 685              	.LBB28:
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 686              		.loc 1 204 28 view .LVU237
 687 0052 456A     		ldr	r5, [r0, #36]
 688              	.LBE28:
 689              	.LBE27:
 231:Src/nvm.c     ****                 ERASED, &sector0_state);
 690              		.loc 1 231 22 view .LVU238
 691 0054 0160     		str	r1, [r0]
 692              		.loc 1 233 5 is_stmt 1 view .LVU239
 693              	.LVL70:
 694              	.LBB33:
 695              	.LBI27:
 195:Src/nvm.c     ****     const uint8_t ref_states = (ref_state << 0) | (ref_state << 2) | (ref_state << 4) | (ref_state 
 696              		.loc 1 195 8 view .LVU240
 697              	.LBB30:
 196:Src/nvm.c     ****     size_t index = (((max_index + 3) >> 2) << 2); // start at the max index but round up to a multi
 698              		.loc 1 196 5 view .LVU241
 197:Src/nvm.c     ****     size_t ignore = index - max_index;
 699              		.loc 1 197 5 view .LVU242
 197:Src/nvm.c     ****     size_t ignore = index - max_index;
 700              		.loc 1 197 33 is_stmt 0 view .LVU243
 701 0056 DA1C     		adds	r2, r3, #3
 197:Src/nvm.c     ****     size_t ignore = index - max_index;
 702              		.loc 1 197 12 view .LVU244
 703 0058 22F00302 		bic	r2, r2, #3
 704              	.LVL71:
 198:Src/nvm.c     ****     uint8_t states = ref_states;
 705              		.loc 1 198 5 is_stmt 1 view .LVU245
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 706              		.loc 1 204 41 is_stmt 0 view .LVU246
 707 005c 2E1D     		adds	r6, r5, #4
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 708              		.loc 1 204 5 view .LVU247
 709 005e B242     		cmp	r2, r6
 198:Src/nvm.c     ****     uint8_t states = ref_states;
 710              		.loc 1 198 12 view .LVU248
 711 0060 A2EB0303 		sub	r3, r2, r3
 712              	.LVL72:
 199:Src/nvm.c     **** 
 713              		.loc 1 199 5 is_stmt 1 view .LVU249
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 714              		.loc 1 204 5 view .LVU250
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 715              		.loc 1 204 12 view .LVU251
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 716              		.loc 1 204 5 is_stmt 0 view .LVU252
 717 0064 63D3     		bcc	.L68
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 718              		.loc 1 205 9 is_stmt 1 view .LVU253
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 719              		.loc 1 205 45 is_stmt 0 view .LVU254
 720 0066 541E     		subs	r4, r2, #1
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 721              		.loc 1 205 24 view .LVU255
 722 0068 876A     		ldr	r7, [r0, #40]
ARM GAS  /tmp/cccHlqCc.s 			page 20


 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 723              		.loc 1 205 50 view .LVU256
 724 006a A408     		lsrs	r4, r4, #2
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 725              		.loc 1 205 16 view .LVU257
 726 006c 17F804E0 		ldrb	lr, [r7, r4]	@ zero_extendqisi2
 727 0070 5FFA8EFE 		uxtb	lr, lr
 728              	.LVL73:
 206:Src/nvm.c     ****             uint8_t ignore_mask = ~(0xff >> (ignore << 1));
 729              		.loc 1 206 9 is_stmt 1 view .LVU258
 206:Src/nvm.c     ****             uint8_t ignore_mask = ~(0xff >> (ignore << 1));
 730              		.loc 1 206 12 is_stmt 0 view .LVU259
 731 0074 6BB1     		cbz	r3, .L52
 732              	.LBB29:
 207:Src/nvm.c     ****             states = (states & ~ignore_mask) | (ref_states & ignore_mask);
 733              		.loc 1 207 13 is_stmt 1 view .LVU260
 734              	.LVL74:
 208:Src/nvm.c     ****             ignore = 0;
 735              		.loc 1 208 13 view .LVU261
 207:Src/nvm.c     ****             states = (states & ~ignore_mask) | (ref_states & ignore_mask);
 736              		.loc 1 207 53 is_stmt 0 view .LVU262
 737 0076 5C00     		lsls	r4, r3, #1
 207:Src/nvm.c     ****             states = (states & ~ignore_mask) | (ref_states & ignore_mask);
 738              		.loc 1 207 42 view .LVU263
 739 0078 FF23     		movs	r3, #255
 740              	.LVL75:
 207:Src/nvm.c     ****             states = (states & ~ignore_mask) | (ref_states & ignore_mask);
 741              		.loc 1 207 42 view .LVU264
 742 007a 2341     		asrs	r3, r3, r4
 208:Src/nvm.c     ****             ignore = 0;
 743              		.loc 1 208 46 view .LVU265
 744 007c 6EEA0303 		orn	r3, lr, r3
 208:Src/nvm.c     ****             ignore = 0;
 745              		.loc 1 208 20 view .LVU266
 746 0080 5FFA83FE 		uxtb	lr, r3
 747              	.LVL76:
 209:Src/nvm.c     ****         }
 748              		.loc 1 209 13 is_stmt 1 view .LVU267
 209:Src/nvm.c     ****         }
 749              		.loc 1 209 13 is_stmt 0 view .LVU268
 750 0084 05E0     		b	.L52
 751              	.LVL77:
 752              	.L86:
 209:Src/nvm.c     ****         }
 753              		.loc 1 209 13 view .LVU269
 754              	.LBE29:
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 755              		.loc 1 204 5 view .LVU270
 756 0086 B445     		cmp	ip, r6
 757 0088 52D3     		bcc	.L49
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 758              		.loc 1 205 16 view .LVU271
 759 008a FB5C     		ldrb	r3, [r7, r3]	@ zero_extendqisi2
 760 008c 6246     		mov	r2, ip
 761 008e 5FFA83FE 		uxtb	lr, r3
 762              	.LVL78:
 206:Src/nvm.c     ****             uint8_t ignore_mask = ~(0xff >> (ignore << 1));
ARM GAS  /tmp/cccHlqCc.s 			page 21


 763              		.loc 1 206 9 is_stmt 1 view .LVU272
 764              	.L52:
 211:Src/nvm.c     ****             break;
 765              		.loc 1 211 9 view .LVU273
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 766              		.loc 1 204 47 view .LVU274
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 767              		.loc 1 205 50 is_stmt 0 view .LVU275
 768 0092 531F     		subs	r3, r2, #5
 211:Src/nvm.c     ****             break;
 769              		.loc 1 211 12 view .LVU276
 770 0094 BEF1FF0F 		cmp	lr, #255
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 771              		.loc 1 205 50 view .LVU277
 772 0098 4FEA9303 		lsr	r3, r3, #2
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 773              		.loc 1 204 53 view .LVU278
 774 009c A2F1040C 		sub	ip, r2, #4
 775              	.LVL79:
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 776              		.loc 1 204 12 is_stmt 1 view .LVU279
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 777              		.loc 1 205 9 view .LVU280
 211:Src/nvm.c     ****             break;
 778              		.loc 1 211 12 is_stmt 0 view .LVU281
 779 00a0 F1D0     		beq	.L86
 780              	.LVL80:
 216:Src/nvm.c     ****         states <<= 2;
 781              		.loc 1 216 12 is_stmt 1 view .LVU282
 216:Src/nvm.c     ****         states <<= 2;
 782              		.loc 1 216 21 is_stmt 0 view .LVU283
 783 00a2 4FEA9E14 		lsr	r4, lr, #6
 216:Src/nvm.c     ****         states <<= 2;
 784              		.loc 1 216 5 view .LVU284
 785 00a6 032C     		cmp	r4, #3
 786 00a8 45D0     		beq	.L65
 787              	.LVL81:
 788              	.L53:
 220:Src/nvm.c     ****     //printf("(it's %02x)\r\n", index); osDelay(5);
 789              		.loc 1 220 5 is_stmt 1 view .LVU285
 222:Src/nvm.c     **** }
 790              		.loc 1 222 5 view .LVU286
 222:Src/nvm.c     **** }
 791              		.loc 1 222 5 is_stmt 0 view .LVU287
 792              	.LBE30:
 793              	.LBE33:
 794              		.loc 1 233 22 view .LVU288
 795 00aa 8261     		str	r2, [r0, #24]
 234:Src/nvm.c     ****                 ERASED, &sector1_state);
 235:Src/nvm.c     ****     //printf("sector states: %02x, %02x\r\n", sector0_state, sector1_state); osDelay(5);
 236:Src/nvm.c     **** 
 237:Src/nvm.c     ****     // Select valid sector on a best effort basis
 238:Src/nvm.c     ****     // (in unfortunate cases valid_sector might actually point
 239:Src/nvm.c     ****     // to an invalid or erased sector)
 240:Src/nvm.c     ****     read_sector_ = 0;
 796              		.loc 1 240 5 is_stmt 1 view .LVU289
 241:Src/nvm.c     ****     if (sector1_state == VALID)
ARM GAS  /tmp/cccHlqCc.s 			page 22


 797              		.loc 1 241 5 view .LVU290
 798              		.loc 1 241 8 is_stmt 0 view .LVU291
 799 00ac 002C     		cmp	r4, #0
 800 00ae 69D1     		bne	.L87
 242:Src/nvm.c     ****         read_sector_ = 1;
 801              		.loc 1 242 9 is_stmt 1 view .LVU292
 802              		.loc 1 242 22 is_stmt 0 view .LVU293
 803 00b0 3849     		ldr	r1, .L92+4
 804 00b2 0123     		movs	r3, #1
 805 00b4 0B70     		strb	r3, [r1]
 806              	.LVL82:
 807              	.L57:
 243:Src/nvm.c     ****     
 244:Src/nvm.c     ****     // count the number of valid fields
 245:Src/nvm.c     ****     sector_t *read_sector = &sectors[read_sector_];
 808              		.loc 1 245 5 is_stmt 1 view .LVU294
 246:Src/nvm.c     ****     uint8_t first_nonvalid_state;
 809              		.loc 1 246 5 view .LVU295
 247:Src/nvm.c     ****     size_t min_valid_index = scan_allocation_table(read_sector, read_sector->index,
 810              		.loc 1 247 5 view .LVU296
 811              	.LBB34:
 812              	.LBI34:
 195:Src/nvm.c     ****     const uint8_t ref_states = (ref_state << 0) | (ref_state << 2) | (ref_state << 4) | (ref_state 
 813              		.loc 1 195 8 view .LVU297
 814              	.LBB35:
 196:Src/nvm.c     ****     size_t index = (((max_index + 3) >> 2) << 2); // start at the max index but round up to a multi
 815              		.loc 1 196 5 view .LVU298
 197:Src/nvm.c     ****     size_t ignore = index - max_index;
 816              		.loc 1 197 5 view .LVU299
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 817              		.loc 1 204 28 is_stmt 0 view .LVU300
 818 00b6 03EB4303 		add	r3, r3, r3, lsl #1
 819 00ba 00EBC300 		add	r0, r0, r3, lsl #3
 197:Src/nvm.c     ****     size_t ignore = index - max_index;
 820              		.loc 1 197 33 view .LVU301
 821 00be D41C     		adds	r4, r2, #3
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 822              		.loc 1 204 28 view .LVU302
 823 00c0 C568     		ldr	r5, [r0, #12]
 197:Src/nvm.c     ****     size_t ignore = index - max_index;
 824              		.loc 1 197 12 view .LVU303
 825 00c2 24F00304 		bic	r4, r4, #3
 826              	.LVL83:
 198:Src/nvm.c     ****     uint8_t states = ref_states;
 827              		.loc 1 198 5 is_stmt 1 view .LVU304
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 828              		.loc 1 204 41 is_stmt 0 view .LVU305
 829 00c6 2E1D     		adds	r6, r5, #4
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 830              		.loc 1 204 5 view .LVU306
 831 00c8 B442     		cmp	r4, r6
 198:Src/nvm.c     ****     uint8_t states = ref_states;
 832              		.loc 1 198 12 view .LVU307
 833 00ca A4EB0201 		sub	r1, r4, r2
 834              	.LVL84:
 199:Src/nvm.c     **** 
 835              		.loc 1 199 5 is_stmt 1 view .LVU308
ARM GAS  /tmp/cccHlqCc.s 			page 23


 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 836              		.loc 1 204 5 view .LVU309
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 837              		.loc 1 204 12 view .LVU310
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 838              		.loc 1 204 5 is_stmt 0 view .LVU311
 839 00ce 42D3     		bcc	.L70
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 840              		.loc 1 205 9 is_stmt 1 view .LVU312
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 841              		.loc 1 205 45 is_stmt 0 view .LVU313
 842 00d0 631E     		subs	r3, r4, #1
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 843              		.loc 1 205 24 view .LVU314
 844 00d2 0769     		ldr	r7, [r0, #16]
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 845              		.loc 1 205 50 view .LVU315
 846 00d4 9B08     		lsrs	r3, r3, #2
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 847              		.loc 1 205 16 view .LVU316
 848 00d6 FB5C     		ldrb	r3, [r7, r3]	@ zero_extendqisi2
 849 00d8 DBB2     		uxtb	r3, r3
 850              	.LVL85:
 206:Src/nvm.c     ****             uint8_t ignore_mask = ~(0xff >> (ignore << 1));
 851              		.loc 1 206 9 is_stmt 1 view .LVU317
 206:Src/nvm.c     ****             uint8_t ignore_mask = ~(0xff >> (ignore << 1));
 852              		.loc 1 206 12 is_stmt 0 view .LVU318
 853 00da 49B1     		cbz	r1, .L61
 854              	.LBB36:
 207:Src/nvm.c     ****             states = (states & ~ignore_mask) | (ref_states & ignore_mask);
 855              		.loc 1 207 13 is_stmt 1 view .LVU319
 856              	.LVL86:
 208:Src/nvm.c     ****             ignore = 0;
 857              		.loc 1 208 13 view .LVU320
 207:Src/nvm.c     ****             states = (states & ~ignore_mask) | (ref_states & ignore_mask);
 858              		.loc 1 207 53 is_stmt 0 view .LVU321
 859 00dc 4800     		lsls	r0, r1, #1
 207:Src/nvm.c     ****             states = (states & ~ignore_mask) | (ref_states & ignore_mask);
 860              		.loc 1 207 42 view .LVU322
 861 00de FF21     		movs	r1, #255
 862              	.LVL87:
 208:Src/nvm.c     ****             ignore = 0;
 863              		.loc 1 208 30 view .LVU323
 864 00e0 0141     		asrs	r1, r1, r0
 208:Src/nvm.c     ****             ignore = 0;
 865              		.loc 1 208 20 view .LVU324
 866 00e2 0B40     		ands	r3, r3, r1
 867              	.LVL88:
 209:Src/nvm.c     ****         }
 868              		.loc 1 209 13 is_stmt 1 view .LVU325
 209:Src/nvm.c     ****         }
 869              		.loc 1 209 13 is_stmt 0 view .LVU326
 870 00e4 04E0     		b	.L61
 871              	.LVL89:
 872              	.L88:
 209:Src/nvm.c     ****         }
 873              		.loc 1 209 13 view .LVU327
ARM GAS  /tmp/cccHlqCc.s 			page 24


 874              	.LBE36:
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 875              		.loc 1 204 5 view .LVU328
 876 00e6 B042     		cmp	r0, r6
 877 00e8 36D3     		bcc	.L58
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 878              		.loc 1 205 16 view .LVU329
 879 00ea 7B5C     		ldrb	r3, [r7, r1]	@ zero_extendqisi2
 880 00ec 0446     		mov	r4, r0
 881 00ee DBB2     		uxtb	r3, r3
 882              	.LVL90:
 206:Src/nvm.c     ****             uint8_t ignore_mask = ~(0xff >> (ignore << 1));
 883              		.loc 1 206 9 is_stmt 1 view .LVU330
 884              	.L61:
 211:Src/nvm.c     ****             break;
 885              		.loc 1 211 9 view .LVU331
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 886              		.loc 1 204 47 view .LVU332
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 887              		.loc 1 205 50 is_stmt 0 view .LVU333
 888 00f0 611F     		subs	r1, r4, #5
 889 00f2 8908     		lsrs	r1, r1, #2
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 890              		.loc 1 204 53 view .LVU334
 891 00f4 201F     		subs	r0, r4, #4
 892              	.LVL91:
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 893              		.loc 1 204 12 is_stmt 1 view .LVU335
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 894              		.loc 1 205 9 view .LVU336
 211:Src/nvm.c     ****             break;
 895              		.loc 1 211 12 is_stmt 0 view .LVU337
 896 00f6 002B     		cmp	r3, #0
 897 00f8 F5D0     		beq	.L88
 898              	.LVL92:
 216:Src/nvm.c     ****         states <<= 2;
 899              		.loc 1 216 12 is_stmt 1 view .LVU338
 216:Src/nvm.c     ****         states <<= 2;
 900              		.loc 1 216 5 is_stmt 0 view .LVU339
 901 00fa 9909     		lsrs	r1, r3, #6
 902 00fc 2ED0     		beq	.L64
 903              	.LVL93:
 904              	.L62:
 220:Src/nvm.c     ****     //printf("(it's %02x)\r\n", index); osDelay(5);
 905              		.loc 1 220 5 is_stmt 1 view .LVU340
 222:Src/nvm.c     **** }
 906              		.loc 1 222 5 view .LVU341
 222:Src/nvm.c     **** }
 907              		.loc 1 222 5 is_stmt 0 view .LVU342
 908              	.LBE35:
 909              	.LBE34:
 248:Src/nvm.c     ****         VALID, &first_nonvalid_state);
 249:Src/nvm.c     ****     n_valid_ = read_sector->index - min_valid_index;
 910              		.loc 1 249 5 is_stmt 1 view .LVU343
 911              		.loc 1 249 14 is_stmt 0 view .LVU344
 912 00fe 2649     		ldr	r1, .L92+8
 250:Src/nvm.c     ****     
ARM GAS  /tmp/cccHlqCc.s 			page 25


 251:Src/nvm.c     ****     n_staging_area_ = 0;
 913              		.loc 1 251 21 view .LVU345
 914 0100 264B     		ldr	r3, .L92+12
 249:Src/nvm.c     ****     
 915              		.loc 1 249 35 view .LVU346
 916 0102 121B     		subs	r2, r2, r4
 917              		.loc 1 251 21 view .LVU347
 918 0104 0020     		movs	r0, #0
 249:Src/nvm.c     ****     
 919              		.loc 1 249 14 view .LVU348
 920 0106 0A60     		str	r2, [r1]
 921              		.loc 1 251 5 is_stmt 1 view .LVU349
 922              		.loc 1 251 21 is_stmt 0 view .LVU350
 923 0108 1860     		str	r0, [r3]
 252:Src/nvm.c     **** 
 253:Src/nvm.c     ****     int status = 0;
 924              		.loc 1 253 5 is_stmt 1 view .LVU351
 925              	.LVL94:
 254:Src/nvm.c     ****     /*// bring non-valid sectors into a known state
 255:Src/nvm.c     ****     this is not absolutely required
 256:Src/nvm.c     ****     if (sector0_state != VALID)
 257:Src/nvm.c     ****         status |= erase(&sectors[0]);
 258:Src/nvm.c     ****     if (sector1_state != VALID)
 259:Src/nvm.c     ****         status |= erase(&sectors[1]);
 260:Src/nvm.c     ****     */
 261:Src/nvm.c     ****     return status;
 926              		.loc 1 261 5 view .LVU352
 262:Src/nvm.c     **** }
 927              		.loc 1 262 1 is_stmt 0 view .LVU353
 928 010a F0BD     		pop	{r4, r5, r6, r7, pc}
 929              	.LVL95:
 930              	.L67:
 931              	.LBB38:
 932              	.LBB26:
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 933              		.loc 1 204 5 view .LVU354
 934 010c 8C46     		mov	ip, r1
 935              	.LVL96:
 936              	.L43:
 216:Src/nvm.c     ****         states <<= 2;
 937              		.loc 1 216 12 is_stmt 1 view .LVU355
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 938              		.loc 1 205 16 is_stmt 0 view .LVU356
 939 010e 6146     		mov	r1, ip
 940 0110 FF23     		movs	r3, #255
 941              	.LVL97:
 942              	.L66:
 216:Src/nvm.c     ****         states <<= 2;
 943              		.loc 1 216 50 view .LVU357
 944 0112 8D42     		cmp	r5, r1
 945 0114 02D3     		bcc	.L48
 216:Src/nvm.c     ****         states <<= 2;
 946              		.loc 1 216 50 view .LVU358
 947 0116 9BE7     		b	.L47
 948              	.L89:
 216:Src/nvm.c     ****         states <<= 2;
 949              		.loc 1 216 50 view .LVU359
ARM GAS  /tmp/cccHlqCc.s 			page 26


 950 0118 8D42     		cmp	r5, r1
 951 011a 99D0     		beq	.L47
 952              	.L48:
 217:Src/nvm.c     ****     }
 953              		.loc 1 217 9 is_stmt 1 view .LVU360
 217:Src/nvm.c     ****     }
 954              		.loc 1 217 16 is_stmt 0 view .LVU361
 955 011c 9B00     		lsls	r3, r3, #2
 956              	.LVL98:
 216:Src/nvm.c     ****         states <<= 2;
 957              		.loc 1 216 5 view .LVU362
 958 011e C3F38112 		ubfx	r2, r3, #6, #2
 959 0122 032A     		cmp	r2, #3
 216:Src/nvm.c     ****         states <<= 2;
 960              		.loc 1 216 88 view .LVU363
 961 0124 01F1FF31 		add	r1, r1, #-1
 962              	.LVL99:
 217:Src/nvm.c     ****     }
 963              		.loc 1 217 16 view .LVU364
 964 0128 DBB2     		uxtb	r3, r3
 965              	.LVL100:
 216:Src/nvm.c     ****         states <<= 2;
 966              		.loc 1 216 83 is_stmt 1 view .LVU365
 216:Src/nvm.c     ****         states <<= 2;
 967              		.loc 1 216 12 view .LVU366
 216:Src/nvm.c     ****         states <<= 2;
 968              		.loc 1 216 5 is_stmt 0 view .LVU367
 969 012a F5D0     		beq	.L89
 970 012c 90E7     		b	.L47
 971              	.LVL101:
 972              	.L68:
 216:Src/nvm.c     ****         states <<= 2;
 973              		.loc 1 216 5 view .LVU368
 974              	.LBE26:
 975              	.LBE38:
 976              	.LBB39:
 977              	.LBB31:
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 978              		.loc 1 204 5 view .LVU369
 979 012e 9446     		mov	ip, r2
 980              	.LVL102:
 981              	.L49:
 216:Src/nvm.c     ****         states <<= 2;
 982              		.loc 1 216 12 is_stmt 1 view .LVU370
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 983              		.loc 1 205 16 is_stmt 0 view .LVU371
 984 0130 6246     		mov	r2, ip
 985 0132 4FF0FF0E 		mov	lr, #255
 986              	.LVL103:
 987              	.L65:
 216:Src/nvm.c     ****         states <<= 2;
 988              		.loc 1 216 50 view .LVU372
 989 0136 AA42     		cmp	r2, r5
 990 0138 02D8     		bhi	.L55
 216:Src/nvm.c     ****         states <<= 2;
 991              		.loc 1 216 50 view .LVU373
 992 013a 1CE0     		b	.L69
ARM GAS  /tmp/cccHlqCc.s 			page 27


 993              	.L90:
 216:Src/nvm.c     ****         states <<= 2;
 994              		.loc 1 216 50 view .LVU374
 995 013c 9542     		cmp	r5, r2
 996 013e 1BD0     		beq	.L54
 997              	.L55:
 217:Src/nvm.c     ****     }
 998              		.loc 1 217 9 is_stmt 1 view .LVU375
 217:Src/nvm.c     ****     }
 999              		.loc 1 217 16 is_stmt 0 view .LVU376
 1000 0140 4FEA8E03 		lsl	r3, lr, #2
 216:Src/nvm.c     ****         states <<= 2;
 1001              		.loc 1 216 21 view .LVU377
 1002 0144 C3F38114 		ubfx	r4, r3, #6, #2
 216:Src/nvm.c     ****         states <<= 2;
 1003              		.loc 1 216 5 view .LVU378
 1004 0148 032C     		cmp	r4, #3
 216:Src/nvm.c     ****         states <<= 2;
 1005              		.loc 1 216 88 view .LVU379
 1006 014a 02F1FF32 		add	r2, r2, #-1
 1007              	.LVL104:
 217:Src/nvm.c     ****     }
 1008              		.loc 1 217 16 view .LVU380
 1009 014e 5FFA83FE 		uxtb	lr, r3
 1010              	.LVL105:
 216:Src/nvm.c     ****         states <<= 2;
 1011              		.loc 1 216 83 is_stmt 1 view .LVU381
 216:Src/nvm.c     ****         states <<= 2;
 1012              		.loc 1 216 12 view .LVU382
 216:Src/nvm.c     ****         states <<= 2;
 1013              		.loc 1 216 5 is_stmt 0 view .LVU383
 1014 0152 F3D0     		beq	.L90
 1015 0154 A9E7     		b	.L53
 1016              	.LVL106:
 1017              	.L70:
 216:Src/nvm.c     ****         states <<= 2;
 1018              		.loc 1 216 5 view .LVU384
 1019              	.LBE31:
 1020              	.LBE39:
 1021              	.LBB40:
 1022              	.LBB37:
 204:Src/nvm.c     ****         states = sector->alloc_table[(index - 1) >> 2];
 1023              		.loc 1 204 5 view .LVU385
 1024 0156 2046     		mov	r0, r4
 1025              	.LVL107:
 1026              	.L58:
 216:Src/nvm.c     ****         states <<= 2;
 1027              		.loc 1 216 12 is_stmt 1 view .LVU386
 205:Src/nvm.c     ****         if (ignore) { // ignore the upper 1, 2 or 3 states if max_index was unaligned
 1028              		.loc 1 205 16 is_stmt 0 view .LVU387
 1029 0158 0446     		mov	r4, r0
 1030 015a 0023     		movs	r3, #0
 1031              	.LVL108:
 1032              	.L64:
 216:Src/nvm.c     ****         states <<= 2;
 1033              		.loc 1 216 50 view .LVU388
 1034 015c A542     		cmp	r5, r4
ARM GAS  /tmp/cccHlqCc.s 			page 28


 1035 015e 02D3     		bcc	.L63
 216:Src/nvm.c     ****         states <<= 2;
 1036              		.loc 1 216 50 view .LVU389
 1037 0160 CDE7     		b	.L62
 1038              	.L91:
 216:Src/nvm.c     ****         states <<= 2;
 1039              		.loc 1 216 50 view .LVU390
 1040 0162 A542     		cmp	r5, r4
 1041 0164 CBD0     		beq	.L62
 1042              	.L63:
 217:Src/nvm.c     ****     }
 1043              		.loc 1 217 9 is_stmt 1 view .LVU391
 217:Src/nvm.c     ****     }
 1044              		.loc 1 217 16 is_stmt 0 view .LVU392
 1045 0166 9900     		lsls	r1, r3, #2
 216:Src/nvm.c     ****         states <<= 2;
 1046              		.loc 1 216 5 view .LVU393
 1047 0168 11F0C00F 		tst	r1, #192
 216:Src/nvm.c     ****         states <<= 2;
 1048              		.loc 1 216 88 view .LVU394
 1049 016c 04F1FF34 		add	r4, r4, #-1
 1050              	.LVL109:
 217:Src/nvm.c     ****     }
 1051              		.loc 1 217 16 view .LVU395
 1052 0170 CBB2     		uxtb	r3, r1
 1053              	.LVL110:
 216:Src/nvm.c     ****         states <<= 2;
 1054              		.loc 1 216 83 is_stmt 1 view .LVU396
 216:Src/nvm.c     ****         states <<= 2;
 1055              		.loc 1 216 12 view .LVU397
 216:Src/nvm.c     ****         states <<= 2;
 1056              		.loc 1 216 5 is_stmt 0 view .LVU398
 1057 0172 F6D0     		beq	.L91
 1058 0174 C3E7     		b	.L62
 1059              	.LVL111:
 1060              	.L69:
 216:Src/nvm.c     ****         states <<= 2;
 1061              		.loc 1 216 5 view .LVU399
 1062              	.LBE37:
 1063              	.LBE40:
 1064              	.LBB41:
 1065              	.LBB32:
 216:Src/nvm.c     ****         states <<= 2;
 1066              		.loc 1 216 50 view .LVU400
 1067 0176 1546     		mov	r5, r2
 1068              	.L54:
 220:Src/nvm.c     ****     //printf("(it's %02x)\r\n", index); osDelay(5);
 1069              		.loc 1 220 5 is_stmt 1 view .LVU401
 1070              	.LVL112:
 222:Src/nvm.c     **** }
 1071              		.loc 1 222 5 view .LVU402
 222:Src/nvm.c     **** }
 1072              		.loc 1 222 5 is_stmt 0 view .LVU403
 1073              	.LBE32:
 1074              	.LBE41:
 240:Src/nvm.c     ****     if (sector1_state == VALID)
 1075              		.loc 1 240 18 view .LVU404
ARM GAS  /tmp/cccHlqCc.s 			page 29


 1076 0178 064A     		ldr	r2, .L92+4
 233:Src/nvm.c     ****                 ERASED, &sector1_state);
 1077              		.loc 1 233 22 view .LVU405
 1078 017a 8561     		str	r5, [r0, #24]
 240:Src/nvm.c     ****     if (sector1_state == VALID)
 1079              		.loc 1 240 5 is_stmt 1 view .LVU406
 240:Src/nvm.c     ****     if (sector1_state == VALID)
 1080              		.loc 1 240 18 is_stmt 0 view .LVU407
 1081 017c 0023     		movs	r3, #0
 1082 017e 1370     		strb	r3, [r2]
 241:Src/nvm.c     ****         read_sector_ = 1;
 1083              		.loc 1 241 5 is_stmt 1 view .LVU408
 240:Src/nvm.c     ****     if (sector1_state == VALID)
 1084              		.loc 1 240 18 is_stmt 0 view .LVU409
 1085 0180 0A46     		mov	r2, r1
 1086 0182 98E7     		b	.L57
 1087              	.LVL113:
 1088              	.L87:
 240:Src/nvm.c     ****     if (sector1_state == VALID)
 1089              		.loc 1 240 18 view .LVU410
 1090 0184 034A     		ldr	r2, .L92+4
 1091 0186 0023     		movs	r3, #0
 1092 0188 1370     		strb	r3, [r2]
 1093 018a 0A46     		mov	r2, r1
 1094 018c 93E7     		b	.L57
 1095              	.L93:
 1096 018e 00BF     		.align	2
 1097              	.L92:
 1098 0190 00000000 		.word	.LANCHOR0
 1099 0194 00000000 		.word	.LANCHOR1
 1100 0198 00000000 		.word	.LANCHOR2
 1101 019c 00000000 		.word	.LANCHOR3
 1102              		.cfi_endproc
 1103              	.LFE135:
 1105              		.section	.text.NVM_erase,"ax",%progbits
 1106              		.align	1
 1107              		.p2align 2,,3
 1108              		.global	NVM_erase
 1109              		.syntax unified
 1110              		.thumb
 1111              		.thumb_func
 1112              		.fpu fpv4-sp-d16
 1114              	NVM_erase:
 1115              	.LFB136:
 263:Src/nvm.c     **** 
 264:Src/nvm.c     **** // @brief Erases all data in the NVM.
 265:Src/nvm.c     **** //
 266:Src/nvm.c     **** // If this function fails subsequent calls to NVM functions (other than NVM_init or NVM_erase)
 267:Src/nvm.c     **** // cause undefined behavior.
 268:Src/nvm.c     **** // Caution: this function may take a long time (like 1 second)
 269:Src/nvm.c     **** //
 270:Src/nvm.c     **** // @returns 0 on success or a non-zero error code otherwise
 271:Src/nvm.c     **** int NVM_erase(void) {
 1116              		.loc 1 271 21 is_stmt 1 view -0
 1117              		.cfi_startproc
 1118              		@ args = 0, pretend = 0, frame = 24
 1119              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cccHlqCc.s 			page 30


 272:Src/nvm.c     ****     read_sector_ = 0;
 1120              		.loc 1 272 5 view .LVU412
 271:Src/nvm.c     ****     read_sector_ = 0;
 1121              		.loc 1 271 21 is_stmt 0 view .LVU413
 1122 0000 30B5     		push	{r4, r5, lr}
 1123              	.LCFI10:
 1124              		.cfi_def_cfa_offset 12
 1125              		.cfi_offset 4, -12
 1126              		.cfi_offset 5, -8
 1127              		.cfi_offset 14, -4
 1128              		.loc 1 272 18 view .LVU414
 1129 0002 2B4B     		ldr	r3, .L102+8
 273:Src/nvm.c     ****     sectors[0].index = sectors[0].n_reserved;
 1130              		.loc 1 273 22 view .LVU415
 1131 0004 2B4C     		ldr	r4, .L102+12
 1132              	.LBB50:
 1133              	.LBB51:
  99:Src/nvm.c     ****         .TypeErase = FLASH_TYPEERASE_PAGES,    // Changed from SECTORS to PAGES
 1134              		.loc 1 99 28 view .LVU416
 1135 0006 9FED287B 		vldr.64	d7, .L102	@ int
 1136              	.LBE51:
 1137              	.LBE50:
 272:Src/nvm.c     ****     sectors[0].index = sectors[0].n_reserved;
 1138              		.loc 1 272 18 view .LVU417
 1139 000a 0022     		movs	r2, #0
 1140 000c 1A70     		strb	r2, [r3]
 1141              		.loc 1 273 5 is_stmt 1 view .LVU418
 1142              	.LBB58:
 1143              	.LBB54:
  99:Src/nvm.c     ****         .TypeErase = FLASH_TYPEERASE_PAGES,    // Changed from SECTORS to PAGES
 1144              		.loc 1 99 28 is_stmt 0 view .LVU419
 1145 000e 6268     		ldr	r2, [r4, #4]
 1146              	.LBE54:
 1147              	.LBE58:
 274:Src/nvm.c     ****     sectors[1].index = sectors[1].n_reserved;
 1148              		.loc 1 274 22 view .LVU420
 1149 0010 616A     		ldr	r1, [r4, #36]
 273:Src/nvm.c     ****     sectors[1].index = sectors[1].n_reserved;
 1150              		.loc 1 273 22 view .LVU421
 1151 0012 E068     		ldr	r0, [r4, #12]
 1152              		.loc 1 274 22 view .LVU422
 1153 0014 A161     		str	r1, [r4, #24]
 271:Src/nvm.c     ****     read_sector_ = 0;
 1154              		.loc 1 271 21 view .LVU423
 1155 0016 87B0     		sub	sp, sp, #28
 1156              	.LCFI11:
 1157              		.cfi_def_cfa_offset 40
 1158              	.LBB59:
 1159              	.LBB55:
  99:Src/nvm.c     ****         .TypeErase = FLASH_TYPEERASE_PAGES,    // Changed from SECTORS to PAGES
 1160              		.loc 1 99 28 view .LVU424
 1161 0018 0123     		movs	r3, #1
 1162 001a CDE90423 		strd	r2, r3, [sp, #16]
 1163 001e 8DED027B 		vstr.64	d7, [sp, #8]	@ int
 1164              	.LBE55:
 1165              	.LBE59:
 273:Src/nvm.c     ****     sectors[1].index = sectors[1].n_reserved;
ARM GAS  /tmp/cccHlqCc.s 			page 31


 1166              		.loc 1 273 22 view .LVU425
 1167 0022 2060     		str	r0, [r4]
 1168              		.loc 1 274 5 is_stmt 1 view .LVU426
 275:Src/nvm.c     **** 
 276:Src/nvm.c     ****     int state = 0;
 1169              		.loc 1 276 5 view .LVU427
 1170              	.LVL114:
 277:Src/nvm.c     ****     state |= erase(&sectors[0]);
 1171              		.loc 1 277 5 view .LVU428
 1172              	.LBB60:
 1173              	.LBI50:
  98:Src/nvm.c     ****     FLASH_EraseInitTypeDef erase_struct = {
 1174              		.loc 1 98 5 view .LVU429
 1175              	.LBB56:
  99:Src/nvm.c     ****         .TypeErase = FLASH_TYPEERASE_PAGES,    // Changed from SECTORS to PAGES
 1176              		.loc 1 99 5 view .LVU430
 106:Src/nvm.c     ****     HAL_FLASH_ClearError();
 1177              		.loc 1 106 5 view .LVU431
 1178 0024 FFF7FEFF 		bl	HAL_FLASH_Unlock
 1179              	.LVL115:
 107:Src/nvm.c     ****     uint32_t page_error;
 1180              		.loc 1 107 5 view .LVU432
 107:Src/nvm.c     ****     uint32_t page_error;
 1181              		.loc 1 107 5 view .LVU433
 107:Src/nvm.c     ****     uint32_t page_error;
 1182              		.loc 1 107 5 view .LVU434
 1183 0028 234B     		ldr	r3, .L102+16
 1184 002a 9A69     		ldr	r2, [r3, #24]
 1185 002c 4CF2FA31 		movw	r1, #50170
 1186 0030 42F04042 		orr	r2, r2, #-1073741824
 1187 0034 9A61     		str	r2, [r3, #24]
 107:Src/nvm.c     ****     uint32_t page_error;
 1188              		.loc 1 107 5 view .LVU435
 107:Src/nvm.c     ****     uint32_t page_error;
 1189              		.loc 1 107 5 view .LVU436
 109:Src/nvm.c     ****         goto fail;
 1190              		.loc 1 109 9 is_stmt 0 view .LVU437
 1191 0036 02A8     		add	r0, sp, #8
 107:Src/nvm.c     ****     uint32_t page_error;
 1192              		.loc 1 107 5 view .LVU438
 1193 0038 1961     		str	r1, [r3, #16]
 107:Src/nvm.c     ****     uint32_t page_error;
 1194              		.loc 1 107 5 is_stmt 1 view .LVU439
 108:Src/nvm.c     ****     if (HAL_FLASHEx_Erase(&erase_struct, &page_error) != HAL_OK)
 1195              		.loc 1 108 5 view .LVU440
 109:Src/nvm.c     ****         goto fail;
 1196              		.loc 1 109 5 view .LVU441
 109:Src/nvm.c     ****         goto fail;
 1197              		.loc 1 109 9 is_stmt 0 view .LVU442
 1198 003a 01A9     		add	r1, sp, #4
 1199 003c FFF7FEFF 		bl	HAL_FLASHEx_Erase
 1200              	.LVL116:
 109:Src/nvm.c     ****         goto fail;
 1201              		.loc 1 109 8 view .LVU443
 1202 0040 10BB     		cbnz	r0, .L100
 111:Src/nvm.c     **** 
 1203              		.loc 1 111 19 view .LVU444
ARM GAS  /tmp/cccHlqCc.s 			page 32


 1204 0042 E368     		ldr	r3, [r4, #12]
 1205 0044 2360     		str	r3, [r4]
 1206 0046 0546     		mov	r5, r0
 111:Src/nvm.c     **** 
 1207              		.loc 1 111 5 is_stmt 1 view .LVU445
 113:Src/nvm.c     ****     return 0;
 1208              		.loc 1 113 5 view .LVU446
 1209 0048 FFF7FEFF 		bl	HAL_FLASH_Lock
 1210              	.LVL117:
 114:Src/nvm.c     **** fail:
 1211              		.loc 1 114 5 view .LVU447
 1212              	.L96:
 114:Src/nvm.c     **** fail:
 1213              		.loc 1 114 5 is_stmt 0 view .LVU448
 1214              	.LBE56:
 1215              	.LBE60:
 278:Src/nvm.c     ****     state |= erase(&sectors[1]);
 1216              		.loc 1 278 5 is_stmt 1 view .LVU449
 1217              	.LBB61:
 1218              	.LBI61:
  98:Src/nvm.c     ****     FLASH_EraseInitTypeDef erase_struct = {
 1219              		.loc 1 98 5 view .LVU450
 1220              	.LBB62:
  99:Src/nvm.c     ****         .TypeErase = FLASH_TYPEERASE_PAGES,    // Changed from SECTORS to PAGES
 1221              		.loc 1 99 5 view .LVU451
  99:Src/nvm.c     ****         .TypeErase = FLASH_TYPEERASE_PAGES,    // Changed from SECTORS to PAGES
 1222              		.loc 1 99 28 is_stmt 0 view .LVU452
 1223 004c E369     		ldr	r3, [r4, #28]
 1224 004e 0493     		str	r3, [sp, #16]
 1225 0050 0123     		movs	r3, #1
 1226 0052 0022     		movs	r2, #0
 1227 0054 0593     		str	r3, [sp, #20]
 106:Src/nvm.c     ****     HAL_FLASH_ClearError();
 1228              		.loc 1 106 5 is_stmt 1 view .LVU453
  99:Src/nvm.c     ****         .TypeErase = FLASH_TYPEERASE_PAGES,    // Changed from SECTORS to PAGES
 1229              		.loc 1 99 28 is_stmt 0 view .LVU454
 1230 0056 0123     		movs	r3, #1
 1231 0058 CDE90223 		strd	r2, [sp, #8]
 106:Src/nvm.c     ****     HAL_FLASH_ClearError();
 1232              		.loc 1 106 5 view .LVU455
 1233 005c FFF7FEFF 		bl	HAL_FLASH_Unlock
 1234              	.LVL118:
 107:Src/nvm.c     ****     uint32_t page_error;
 1235              		.loc 1 107 5 is_stmt 1 view .LVU456
 107:Src/nvm.c     ****     uint32_t page_error;
 1236              		.loc 1 107 5 view .LVU457
 107:Src/nvm.c     ****     uint32_t page_error;
 1237              		.loc 1 107 5 view .LVU458
 1238 0060 154B     		ldr	r3, .L102+16
 1239 0062 9A69     		ldr	r2, [r3, #24]
 1240 0064 42F04042 		orr	r2, r2, #-1073741824
 1241 0068 9A61     		str	r2, [r3, #24]
 107:Src/nvm.c     ****     uint32_t page_error;
 1242              		.loc 1 107 5 view .LVU459
 107:Src/nvm.c     ****     uint32_t page_error;
 1243              		.loc 1 107 5 view .LVU460
 1244 006a 4CF2FA32 		movw	r2, #50170
ARM GAS  /tmp/cccHlqCc.s 			page 33


 109:Src/nvm.c     ****         goto fail;
 1245              		.loc 1 109 9 is_stmt 0 view .LVU461
 1246 006e 01A9     		add	r1, sp, #4
 1247 0070 02A8     		add	r0, sp, #8
 107:Src/nvm.c     ****     uint32_t page_error;
 1248              		.loc 1 107 5 view .LVU462
 1249 0072 1A61     		str	r2, [r3, #16]
 107:Src/nvm.c     ****     uint32_t page_error;
 1250              		.loc 1 107 5 is_stmt 1 view .LVU463
 108:Src/nvm.c     ****     if (HAL_FLASHEx_Erase(&erase_struct, &page_error) != HAL_OK)
 1251              		.loc 1 108 5 view .LVU464
 109:Src/nvm.c     ****         goto fail;
 1252              		.loc 1 109 5 view .LVU465
 109:Src/nvm.c     ****         goto fail;
 1253              		.loc 1 109 9 is_stmt 0 view .LVU466
 1254 0074 FFF7FEFF 		bl	HAL_FLASHEx_Erase
 1255              	.LVL119:
 109:Src/nvm.c     ****         goto fail;
 1256              		.loc 1 109 8 view .LVU467
 1257 0078 60B9     		cbnz	r0, .L101
 111:Src/nvm.c     **** 
 1258              		.loc 1 111 5 is_stmt 1 view .LVU468
 111:Src/nvm.c     **** 
 1259              		.loc 1 111 19 is_stmt 0 view .LVU469
 1260 007a 636A     		ldr	r3, [r4, #36]
 1261 007c A361     		str	r3, [r4, #24]
 113:Src/nvm.c     ****     return 0;
 1262              		.loc 1 113 5 is_stmt 1 view .LVU470
 1263 007e FFF7FEFF 		bl	HAL_FLASH_Lock
 1264              	.LVL120:
 114:Src/nvm.c     **** fail:
 1265              		.loc 1 114 5 view .LVU471
 114:Src/nvm.c     **** fail:
 1266              		.loc 1 114 5 is_stmt 0 view .LVU472
 1267              	.LBE62:
 1268              	.LBE61:
 279:Src/nvm.c     ****     return state;
 1269              		.loc 1 279 5 is_stmt 1 view .LVU473
 280:Src/nvm.c     **** }
 1270              		.loc 1 280 1 is_stmt 0 view .LVU474
 1271 0082 2846     		mov	r0, r5
 1272 0084 07B0     		add	sp, sp, #28
 1273              	.LCFI12:
 1274              		.cfi_remember_state
 1275              		.cfi_def_cfa_offset 12
 1276              		@ sp needed
 1277 0086 30BD     		pop	{r4, r5, pc}
 1278              	.LVL121:
 1279              	.L100:
 1280              	.LCFI13:
 1281              		.cfi_restore_state
 1282              	.LBB66:
 1283              	.LBB57:
 1284              	.LBB52:
 1285              	.LBI52:
  98:Src/nvm.c     ****     FLASH_EraseInitTypeDef erase_struct = {
 1286              		.loc 1 98 5 is_stmt 1 view .LVU475
ARM GAS  /tmp/cccHlqCc.s 			page 34


 1287              	.LBB53:
 110:Src/nvm.c     ****     sector->index = sector->n_reserved;
 1288              		.loc 1 110 9 view .LVU476
 1289              	.LDL3:
 116:Src/nvm.c     ****     return HAL_FLASH_GetError();
 1290              		.loc 1 116 5 view .LVU477
 1291 0088 FFF7FEFF 		bl	HAL_FLASH_Lock
 1292              	.LVL122:
 117:Src/nvm.c     **** }
 1293              		.loc 1 117 5 view .LVU478
 117:Src/nvm.c     **** }
 1294              		.loc 1 117 12 is_stmt 0 view .LVU479
 1295 008c FFF7FEFF 		bl	HAL_FLASH_GetError
 1296              	.LVL123:
 1297 0090 0546     		mov	r5, r0
 1298              	.LVL124:
 117:Src/nvm.c     **** }
 1299              		.loc 1 117 12 view .LVU480
 1300 0092 DBE7     		b	.L96
 1301              	.LVL125:
 1302              	.L101:
 117:Src/nvm.c     **** }
 1303              		.loc 1 117 12 view .LVU481
 1304              	.LBE53:
 1305              	.LBE52:
 1306              	.LBE57:
 1307              	.LBE66:
 1308              	.LBB67:
 1309              	.LBB65:
 1310              	.LBB63:
 1311              	.LBI63:
  98:Src/nvm.c     ****     FLASH_EraseInitTypeDef erase_struct = {
 1312              		.loc 1 98 5 is_stmt 1 view .LVU482
 1313              	.LBB64:
 110:Src/nvm.c     ****     sector->index = sector->n_reserved;
 1314              		.loc 1 110 9 view .LVU483
 1315              	.LDL4:
 116:Src/nvm.c     ****     return HAL_FLASH_GetError();
 1316              		.loc 1 116 5 view .LVU484
 1317 0094 FFF7FEFF 		bl	HAL_FLASH_Lock
 1318              	.LVL126:
 117:Src/nvm.c     **** }
 1319              		.loc 1 117 5 view .LVU485
 117:Src/nvm.c     **** }
 1320              		.loc 1 117 12 is_stmt 0 view .LVU486
 1321 0098 FFF7FEFF 		bl	HAL_FLASH_GetError
 1322              	.LVL127:
 117:Src/nvm.c     **** }
 1323              		.loc 1 117 12 view .LVU487
 1324              	.LBE64:
 1325              	.LBE63:
 1326              	.LBE65:
 1327              	.LBE67:
 278:Src/nvm.c     ****     return state;
 1328              		.loc 1 278 11 view .LVU488
 1329 009c 0543     		orrs	r5, r5, r0
 1330              	.LVL128:
ARM GAS  /tmp/cccHlqCc.s 			page 35


 1331              		.loc 1 280 1 view .LVU489
 1332 009e 2846     		mov	r0, r5
 1333 00a0 07B0     		add	sp, sp, #28
 1334              	.LCFI14:
 1335              		.cfi_def_cfa_offset 12
 1336              		@ sp needed
 1337 00a2 30BD     		pop	{r4, r5, pc}
 1338              	.L103:
 1339 00a4 AFF30080 		.align	3
 1340              	.L102:
 1341 00a8 00000000 		.word	0
 1342 00ac 01000000 		.word	1
 1343 00b0 00000000 		.word	.LANCHOR1
 1344 00b4 00000000 		.word	.LANCHOR0
 1345 00b8 00200240 		.word	1073881088
 1346              		.cfi_endproc
 1347              	.LFE136:
 1349              		.section	.text.NVM_get_max_read_length,"ax",%progbits
 1350              		.align	1
 1351              		.p2align 2,,3
 1352              		.global	NVM_get_max_read_length
 1353              		.syntax unified
 1354              		.thumb
 1355              		.thumb_func
 1356              		.fpu fpv4-sp-d16
 1358              	NVM_get_max_read_length:
 1359              	.LFB137:
 281:Src/nvm.c     **** 
 282:Src/nvm.c     **** // @brief Returns the maximum number of bytes that can be read using NVM_read.
 283:Src/nvm.c     **** // This holds until NVM_commit is called.
 284:Src/nvm.c     **** size_t NVM_get_max_read_length(void) {
 1360              		.loc 1 284 38 is_stmt 1 view -0
 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 0
 1363              		@ frame_needed = 0, uses_anonymous_args = 0
 1364              		@ link register save eliminated.
 285:Src/nvm.c     ****     return n_valid_ << 3;
 1365              		.loc 1 285 5 view .LVU491
 1366              		.loc 1 285 21 is_stmt 0 view .LVU492
 1367 0000 014B     		ldr	r3, .L105
 1368 0002 1868     		ldr	r0, [r3]
 286:Src/nvm.c     **** }
 1369              		.loc 1 286 1 view .LVU493
 1370 0004 C000     		lsls	r0, r0, #3
 1371 0006 7047     		bx	lr
 1372              	.L106:
 1373              		.align	2
 1374              	.L105:
 1375 0008 00000000 		.word	.LANCHOR2
 1376              		.cfi_endproc
 1377              	.LFE137:
 1379              		.section	.text.NVM_get_max_write_length,"ax",%progbits
 1380              		.align	1
 1381              		.p2align 2,,3
 1382              		.global	NVM_get_max_write_length
 1383              		.syntax unified
 1384              		.thumb
ARM GAS  /tmp/cccHlqCc.s 			page 36


 1385              		.thumb_func
 1386              		.fpu fpv4-sp-d16
 1388              	NVM_get_max_write_length:
 1389              	.LFB138:
 287:Src/nvm.c     **** 
 288:Src/nvm.c     **** // @brief Returns the maximum length (in bytes) that can passed to NVM_start_write.
 289:Src/nvm.c     **** // This holds until NVM_commit is called.
 290:Src/nvm.c     **** size_t NVM_get_max_write_length(void) {
 1390              		.loc 1 290 39 is_stmt 1 view -0
 1391              		.cfi_startproc
 1392              		@ args = 0, pretend = 0, frame = 0
 1393              		@ frame_needed = 0, uses_anonymous_args = 0
 1394              		@ link register save eliminated.
 291:Src/nvm.c     ****     sector_t *target = &sectors[1 - read_sector_];
 1395              		.loc 1 291 5 view .LVU495
 1396              		.loc 1 291 35 is_stmt 0 view .LVU496
 1397 0000 064B     		ldr	r3, .L108
 292:Src/nvm.c     ****     return (target->n_data - target->n_reserved) << 3;
 1398              		.loc 1 292 19 view .LVU497
 1399 0002 074A     		ldr	r2, .L108+4
 291:Src/nvm.c     ****     sector_t *target = &sectors[1 - read_sector_];
 1400              		.loc 1 291 35 view .LVU498
 1401 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1402 0006 C3F10103 		rsb	r3, r3, #1
 1403              	.LVL129:
 1404              		.loc 1 292 5 is_stmt 1 view .LVU499
 1405              		.loc 1 292 19 is_stmt 0 view .LVU500
 1406 000a 03EB4303 		add	r3, r3, r3, lsl #1
 1407              	.LVL130:
 1408              		.loc 1 292 19 view .LVU501
 1409 000e 02EBC303 		add	r3, r2, r3, lsl #3
 1410              		.loc 1 292 28 view .LVU502
 1411 0012 D3E90203 		ldrd	r0, r3, [r3, #8]
 1412 0016 C01A     		subs	r0, r0, r3
 293:Src/nvm.c     **** }
 1413              		.loc 1 293 1 view .LVU503
 1414 0018 C000     		lsls	r0, r0, #3
 1415 001a 7047     		bx	lr
 1416              	.L109:
 1417              		.align	2
 1418              	.L108:
 1419 001c 00000000 		.word	.LANCHOR1
 1420 0020 00000000 		.word	.LANCHOR0
 1421              		.cfi_endproc
 1422              	.LFE138:
 1424              		.section	.text.NVM_read,"ax",%progbits
 1425              		.align	1
 1426              		.p2align 2,,3
 1427              		.global	NVM_read
 1428              		.syntax unified
 1429              		.thumb
 1430              		.thumb_func
 1431              		.fpu fpv4-sp-d16
 1433              	NVM_read:
 1434              	.LVL131:
 1435              	.LFB139:
 294:Src/nvm.c     **** 
ARM GAS  /tmp/cccHlqCc.s 			page 37


 295:Src/nvm.c     **** // @brief Reads from the latest committed block in the non-volatile memory.
 296:Src/nvm.c     **** // @param offset: offset in bytes (0 meaning the beginning of the valid area)
 297:Src/nvm.c     **** // @param data: buffer to write to
 298:Src/nvm.c     **** // @param length: length in bytes (if (offset + length) is out of range, the function fails)
 299:Src/nvm.c     **** // @returns 0 on success or a non-zero error code otherwise
 300:Src/nvm.c     **** int NVM_read(size_t offset, uint8_t *data, size_t length) {
 1436              		.loc 1 300 59 is_stmt 1 view -0
 1437              		.cfi_startproc
 1438              		@ args = 0, pretend = 0, frame = 0
 1439              		@ frame_needed = 0, uses_anonymous_args = 0
 301:Src/nvm.c     ****     if (offset + length > (n_valid_ << 3))
 1440              		.loc 1 301 5 view .LVU505
 300:Src/nvm.c     ****     if (offset + length > (n_valid_ << 3))
 1441              		.loc 1 300 59 is_stmt 0 view .LVU506
 1442 0000 70B5     		push	{r4, r5, r6, lr}
 1443              	.LCFI15:
 1444              		.cfi_def_cfa_offset 16
 1445              		.cfi_offset 4, -16
 1446              		.cfi_offset 5, -12
 1447              		.cfi_offset 6, -8
 1448              		.cfi_offset 14, -4
 1449              		.loc 1 301 37 view .LVU507
 1450 0002 0E4C     		ldr	r4, .L114
 1451 0004 2668     		ldr	r6, [r4]
 1452              		.loc 1 301 16 view .LVU508
 1453 0006 8418     		adds	r4, r0, r2
 1454              		.loc 1 301 8 view .LVU509
 1455 0008 B4EBC60F 		cmp	r4, r6, lsl #3
 1456 000c 13D8     		bhi	.L112
 302:Src/nvm.c     ****         return -1;
 303:Src/nvm.c     ****     sector_t *read_sector = &sectors[read_sector_];
 1457              		.loc 1 303 5 is_stmt 1 view .LVU510
 1458 000e 0346     		mov	r3, r0
 1459 0010 0846     		mov	r0, r1
 1460              	.LVL132:
 1461              		.loc 1 303 37 is_stmt 0 view .LVU511
 1462 0012 0B49     		ldr	r1, .L114+4
 1463              	.LVL133:
 304:Src/nvm.c     ****     const uint8_t *src_ptr = ((const uint8_t *)&read_sector->data[read_sector->index - n_valid_]) +
 1464              		.loc 1 304 60 view .LVU512
 1465 0014 0B4C     		ldr	r4, .L114+8
 303:Src/nvm.c     ****     const uint8_t *src_ptr = ((const uint8_t *)&read_sector->data[read_sector->index - n_valid_]) +
 1466              		.loc 1 303 37 view .LVU513
 1467 0016 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1468              	.LVL134:
 1469              		.loc 1 304 5 is_stmt 1 view .LVU514
 305:Src/nvm.c     ****     memcpy(data, src_ptr, length);
 1470              		.loc 1 305 5 view .LVU515
 304:Src/nvm.c     ****     const uint8_t *src_ptr = ((const uint8_t *)&read_sector->data[read_sector->index - n_valid_]) +
 1471              		.loc 1 304 60 is_stmt 0 view .LVU516
 1472 0018 01EB4101 		add	r1, r1, r1, lsl #1
 1473              	.LVL135:
 304:Src/nvm.c     ****     const uint8_t *src_ptr = ((const uint8_t *)&read_sector->data[read_sector->index - n_valid_]) +
 1474              		.loc 1 304 86 view .LVU517
 1475 001c 54F83150 		ldr	r5, [r4, r1, lsl #3]
 304:Src/nvm.c     ****     const uint8_t *src_ptr = ((const uint8_t *)&read_sector->data[read_sector->index - n_valid_]) +
 1476              		.loc 1 304 60 view .LVU518
ARM GAS  /tmp/cccHlqCc.s 			page 38


 1477 0020 04EBC101 		add	r1, r4, r1, lsl #3
 304:Src/nvm.c     ****     const uint8_t *src_ptr = ((const uint8_t *)&read_sector->data[read_sector->index - n_valid_]) +
 1478              		.loc 1 304 86 view .LVU519
 1479 0024 AC1B     		subs	r4, r5, r6
 304:Src/nvm.c     ****     const uint8_t *src_ptr = ((const uint8_t *)&read_sector->data[read_sector->index - n_valid_]) +
 1480              		.loc 1 304 20 view .LVU520
 1481 0026 4969     		ldr	r1, [r1, #20]
 1482 0028 03EBC403 		add	r3, r3, r4, lsl #3
 1483              	.LVL136:
 1484              		.loc 1 305 5 view .LVU521
 1485 002c 1944     		add	r1, r1, r3
 1486 002e FFF7FEFF 		bl	memcpy
 1487              	.LVL137:
 306:Src/nvm.c     ****     return 0;
 1488              		.loc 1 306 5 is_stmt 1 view .LVU522
 1489              		.loc 1 306 12 is_stmt 0 view .LVU523
 1490 0032 0020     		movs	r0, #0
 307:Src/nvm.c     **** }
 1491              		.loc 1 307 1 view .LVU524
 1492 0034 70BD     		pop	{r4, r5, r6, pc}
 1493              	.LVL138:
 1494              	.L112:
 302:Src/nvm.c     ****     sector_t *read_sector = &sectors[read_sector_];
 1495              		.loc 1 302 16 view .LVU525
 1496 0036 4FF0FF30 		mov	r0, #-1
 1497              	.LVL139:
 1498              		.loc 1 307 1 view .LVU526
 1499 003a 70BD     		pop	{r4, r5, r6, pc}
 1500              	.L115:
 1501              		.align	2
 1502              	.L114:
 1503 003c 00000000 		.word	.LANCHOR2
 1504 0040 00000000 		.word	.LANCHOR1
 1505 0044 00000000 		.word	.LANCHOR0
 1506              		.cfi_endproc
 1507              	.LFE139:
 1509              		.section	.text.NVM_start_write,"ax",%progbits
 1510              		.align	1
 1511              		.p2align 2,,3
 1512              		.global	NVM_start_write
 1513              		.syntax unified
 1514              		.thumb
 1515              		.thumb_func
 1516              		.fpu fpv4-sp-d16
 1518              	NVM_start_write:
 1519              	.LVL140:
 1520              	.LFB140:
 308:Src/nvm.c     **** 
 309:Src/nvm.c     **** // @brief Starts an atomic write operation.
 310:Src/nvm.c     **** //
 311:Src/nvm.c     **** // The most recent valid NVM data is not modified or invalidated until NVM_commit is called.
 312:Src/nvm.c     **** // The length must be at most equal to the size indicated by NVM_get_max_write_length().
 313:Src/nvm.c     **** //
 314:Src/nvm.c     **** // @param length: Length of the staging block that should be created
 315:Src/nvm.c     **** int NVM_start_write(size_t length) {
 1521              		.loc 1 315 36 is_stmt 1 view -0
 1522              		.cfi_startproc
ARM GAS  /tmp/cccHlqCc.s 			page 39


 1523              		@ args = 0, pretend = 0, frame = 24
 1524              		@ frame_needed = 0, uses_anonymous_args = 0
 316:Src/nvm.c     ****     int status = 0;
 1525              		.loc 1 316 5 view .LVU528
 317:Src/nvm.c     ****     sector_t *target = &sectors[1 - read_sector_];
 1526              		.loc 1 317 5 view .LVU529
 315:Src/nvm.c     ****     int status = 0;
 1527              		.loc 1 315 36 is_stmt 0 view .LVU530
 1528 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1529              	.LCFI16:
 1530              		.cfi_def_cfa_offset 20
 1531              		.cfi_offset 4, -20
 1532              		.cfi_offset 5, -16
 1533              		.cfi_offset 6, -12
 1534              		.cfi_offset 7, -8
 1535              		.cfi_offset 14, -4
 1536              		.loc 1 317 35 view .LVU531
 1537 0002 244B     		ldr	r3, .L125
 1538              		.loc 1 317 15 view .LVU532
 1539 0004 244E     		ldr	r6, .L125+4
 1540              		.loc 1 317 35 view .LVU533
 1541 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1542 0008 C3F10103 		rsb	r3, r3, #1
 1543              		.loc 1 317 15 view .LVU534
 1544 000c 03EB4303 		add	r3, r3, r3, lsl #1
 1545 0010 06EBC305 		add	r5, r6, r3, lsl #3
 1546              	.LVL141:
 318:Src/nvm.c     **** 
 319:Src/nvm.c     ****     length = (length + 7) >> 3; // round to multiple of 64 bit
 1547              		.loc 1 319 5 is_stmt 1 view .LVU535
 317:Src/nvm.c     **** 
 1548              		.loc 1 317 15 is_stmt 0 view .LVU536
 1549 0014 DC00     		lsls	r4, r3, #3
 320:Src/nvm.c     ****     if (length > target->n_data - target->n_reserved)
 1550              		.loc 1 320 33 view .LVU537
 1551 0016 D5E90232 		ldrd	r3, r2, [r5, #8]
 319:Src/nvm.c     ****     if (length > target->n_data - target->n_reserved)
 1552              		.loc 1 319 22 view .LVU538
 1553 001a 0730     		adds	r0, r0, #7
 1554              	.LVL142:
 1555              		.loc 1 320 5 is_stmt 1 view .LVU539
 1556              		.loc 1 320 33 is_stmt 0 view .LVU540
 1557 001c 9A1A     		subs	r2, r3, r2
 1558              		.loc 1 320 8 view .LVU541
 1559 001e B2EBD00F 		cmp	r2, r0, lsr #3
 315:Src/nvm.c     ****     int status = 0;
 1560              		.loc 1 315 36 view .LVU542
 1561 0022 87B0     		sub	sp, sp, #28
 1562              	.LCFI17:
 1563              		.cfi_def_cfa_offset 48
 1564              		.loc 1 320 8 view .LVU543
 1565 0024 32D3     		bcc	.L120
 321:Src/nvm.c     ****         return -1;
 322:Src/nvm.c     **** 
 323:Src/nvm.c     ****     // make room for the new data
 324:Src/nvm.c     ****     if (length > target->n_data - target->index)
 1566              		.loc 1 324 41 view .LVU544
ARM GAS  /tmp/cccHlqCc.s 			page 40


 1567 0026 3159     		ldr	r1, [r6, r4]
 1568 0028 C708     		lsrs	r7, r0, #3
 1569              	.LVL143:
 1570              		.loc 1 324 5 is_stmt 1 view .LVU545
 1571              		.loc 1 324 33 is_stmt 0 view .LVU546
 1572 002a 5B1A     		subs	r3, r3, r1
 1573              		.loc 1 324 8 view .LVU547
 1574 002c BB42     		cmp	r3, r7
 1575 002e 1BD2     		bcs	.L118
 325:Src/nvm.c     ****         if ((status = erase(target)))
 1576              		.loc 1 325 9 is_stmt 1 view .LVU548
 1577              	.LVL144:
 1578              	.LBB72:
 1579              	.LBI72:
  98:Src/nvm.c     ****     FLASH_EraseInitTypeDef erase_struct = {
 1580              		.loc 1 98 5 view .LVU549
 1581              	.LBB73:
  99:Src/nvm.c     ****         .TypeErase = FLASH_TYPEERASE_PAGES,    // Changed from SECTORS to PAGES
 1582              		.loc 1 99 5 view .LVU550
  99:Src/nvm.c     ****         .TypeErase = FLASH_TYPEERASE_PAGES,    // Changed from SECTORS to PAGES
 1583              		.loc 1 99 28 is_stmt 0 view .LVU551
 1584 0030 6B68     		ldr	r3, [r5, #4]
 1585 0032 0493     		str	r3, [sp, #16]
 1586 0034 0123     		movs	r3, #1
 1587 0036 0022     		movs	r2, #0
 1588 0038 0593     		str	r3, [sp, #20]
 106:Src/nvm.c     ****     HAL_FLASH_ClearError();
 1589              		.loc 1 106 5 is_stmt 1 view .LVU552
  99:Src/nvm.c     ****         .TypeErase = FLASH_TYPEERASE_PAGES,    // Changed from SECTORS to PAGES
 1590              		.loc 1 99 28 is_stmt 0 view .LVU553
 1591 003a 0123     		movs	r3, #1
 1592 003c CDE90223 		strd	r2, [sp, #8]
 106:Src/nvm.c     ****     HAL_FLASH_ClearError();
 1593              		.loc 1 106 5 view .LVU554
 1594 0040 FFF7FEFF 		bl	HAL_FLASH_Unlock
 1595              	.LVL145:
 107:Src/nvm.c     ****     uint32_t page_error;
 1596              		.loc 1 107 5 is_stmt 1 view .LVU555
 107:Src/nvm.c     ****     uint32_t page_error;
 1597              		.loc 1 107 5 view .LVU556
 107:Src/nvm.c     ****     uint32_t page_error;
 1598              		.loc 1 107 5 view .LVU557
 1599 0044 154B     		ldr	r3, .L125+8
 1600 0046 9A69     		ldr	r2, [r3, #24]
 1601 0048 4CF2FA31 		movw	r1, #50170
 1602 004c 42F04042 		orr	r2, r2, #-1073741824
 1603 0050 9A61     		str	r2, [r3, #24]
 107:Src/nvm.c     ****     uint32_t page_error;
 1604              		.loc 1 107 5 view .LVU558
 107:Src/nvm.c     ****     uint32_t page_error;
 1605              		.loc 1 107 5 view .LVU559
 109:Src/nvm.c     ****         goto fail;
 1606              		.loc 1 109 9 is_stmt 0 view .LVU560
 1607 0052 02A8     		add	r0, sp, #8
 107:Src/nvm.c     ****     uint32_t page_error;
 1608              		.loc 1 107 5 view .LVU561
 1609 0054 1961     		str	r1, [r3, #16]
ARM GAS  /tmp/cccHlqCc.s 			page 41


 107:Src/nvm.c     ****     uint32_t page_error;
 1610              		.loc 1 107 5 is_stmt 1 view .LVU562
 108:Src/nvm.c     ****     if (HAL_FLASHEx_Erase(&erase_struct, &page_error) != HAL_OK)
 1611              		.loc 1 108 5 view .LVU563
 109:Src/nvm.c     ****         goto fail;
 1612              		.loc 1 109 5 view .LVU564
 109:Src/nvm.c     ****         goto fail;
 1613              		.loc 1 109 9 is_stmt 0 view .LVU565
 1614 0056 01A9     		add	r1, sp, #4
 1615 0058 FFF7FEFF 		bl	HAL_FLASHEx_Erase
 1616              	.LVL146:
 109:Src/nvm.c     ****         goto fail;
 1617              		.loc 1 109 8 view .LVU566
 1618 005c 70B9     		cbnz	r0, .L124
 111:Src/nvm.c     **** 
 1619              		.loc 1 111 5 is_stmt 1 view .LVU567
 111:Src/nvm.c     **** 
 1620              		.loc 1 111 19 is_stmt 0 view .LVU568
 1621 005e EB68     		ldr	r3, [r5, #12]
 1622 0060 3351     		str	r3, [r6, r4]
 113:Src/nvm.c     ****     return 0;
 1623              		.loc 1 113 5 is_stmt 1 view .LVU569
 1624 0062 FFF7FEFF 		bl	HAL_FLASH_Lock
 1625              	.LVL147:
 1626              	.L122:
 114:Src/nvm.c     **** fail:
 1627              		.loc 1 114 5 view .LVU570
 114:Src/nvm.c     **** fail:
 1628              		.loc 1 114 5 is_stmt 0 view .LVU571
 1629              	.LBE73:
 1630              	.LBE72:
 326:Src/nvm.c     ****             return status;
 327:Src/nvm.c     **** 
 328:Src/nvm.c     ****     // invalidate the fields we're about to write
 329:Src/nvm.c     ****     status = set_allocation_state(target, target->index, length, INVALID);
 1631              		.loc 1 329 14 view .LVU572
 1632 0066 3159     		ldr	r1, [r6, r4]
 1633              	.L118:
 1634              		.loc 1 329 5 is_stmt 1 view .LVU573
 1635              		.loc 1 329 14 is_stmt 0 view .LVU574
 1636 0068 0123     		movs	r3, #1
 1637 006a 3A46     		mov	r2, r7
 1638 006c 2846     		mov	r0, r5
 1639 006e FFF7FEFF 		bl	set_allocation_state
 1640              	.LVL148:
 330:Src/nvm.c     ****     if (status)
 1641              		.loc 1 330 5 is_stmt 1 view .LVU575
 1642              		.loc 1 330 8 is_stmt 0 view .LVU576
 1643 0072 08B9     		cbnz	r0, .L116
 331:Src/nvm.c     ****         return status;
 332:Src/nvm.c     **** 
 333:Src/nvm.c     ****     n_staging_area_ = length;
 1644              		.loc 1 333 5 is_stmt 1 view .LVU577
 1645              		.loc 1 333 21 is_stmt 0 view .LVU578
 1646 0074 0A4B     		ldr	r3, .L125+12
 1647 0076 1F60     		str	r7, [r3]
 334:Src/nvm.c     ****     return 0;
ARM GAS  /tmp/cccHlqCc.s 			page 42


 1648              		.loc 1 334 5 is_stmt 1 view .LVU579
 1649              	.LVL149:
 1650              	.L116:
 335:Src/nvm.c     **** }
 1651              		.loc 1 335 1 is_stmt 0 view .LVU580
 1652 0078 07B0     		add	sp, sp, #28
 1653              	.LCFI18:
 1654              		.cfi_remember_state
 1655              		.cfi_def_cfa_offset 20
 1656              		@ sp needed
 1657 007a F0BD     		pop	{r4, r5, r6, r7, pc}
 1658              	.LVL150:
 1659              	.L124:
 1660              	.LCFI19:
 1661              		.cfi_restore_state
 1662              	.LBB77:
 1663              	.LBB76:
 1664              	.LBB74:
 1665              	.LBI74:
  98:Src/nvm.c     ****     FLASH_EraseInitTypeDef erase_struct = {
 1666              		.loc 1 98 5 is_stmt 1 view .LVU581
 1667              	.LBB75:
 110:Src/nvm.c     ****     sector->index = sector->n_reserved;
 1668              		.loc 1 110 9 view .LVU582
 1669              	.LDL5:
 116:Src/nvm.c     ****     return HAL_FLASH_GetError();
 1670              		.loc 1 116 5 view .LVU583
 1671 007c FFF7FEFF 		bl	HAL_FLASH_Lock
 1672              	.LVL151:
 117:Src/nvm.c     **** }
 1673              		.loc 1 117 5 view .LVU584
 117:Src/nvm.c     **** }
 1674              		.loc 1 117 12 is_stmt 0 view .LVU585
 1675 0080 FFF7FEFF 		bl	HAL_FLASH_GetError
 1676              	.LVL152:
 117:Src/nvm.c     **** }
 1677              		.loc 1 117 12 view .LVU586
 1678              	.LBE75:
 1679              	.LBE74:
 1680              	.LBE76:
 1681              	.LBE77:
 325:Src/nvm.c     ****             return status;
 1682              		.loc 1 325 12 view .LVU587
 1683 0084 0028     		cmp	r0, #0
 1684 0086 EED0     		beq	.L122
 1685              		.loc 1 335 1 view .LVU588
 1686 0088 07B0     		add	sp, sp, #28
 1687              	.LCFI20:
 1688              		.cfi_remember_state
 1689              		.cfi_def_cfa_offset 20
 1690              		@ sp needed
 1691 008a F0BD     		pop	{r4, r5, r6, r7, pc}
 1692              	.LVL153:
 1693              	.L120:
 1694              	.LCFI21:
 1695              		.cfi_restore_state
 321:Src/nvm.c     **** 
ARM GAS  /tmp/cccHlqCc.s 			page 43


 1696              		.loc 1 321 16 view .LVU589
 1697 008c 4FF0FF30 		mov	r0, #-1
 1698              	.LVL154:
 321:Src/nvm.c     **** 
 1699              		.loc 1 321 16 view .LVU590
 1700 0090 F2E7     		b	.L116
 1701              	.L126:
 1702 0092 00BF     		.align	2
 1703              	.L125:
 1704 0094 00000000 		.word	.LANCHOR1
 1705 0098 00000000 		.word	.LANCHOR0
 1706 009c 00200240 		.word	1073881088
 1707 00a0 00000000 		.word	.LANCHOR3
 1708              		.cfi_endproc
 1709              	.LFE140:
 1711              		.section	.text.NVM_write,"ax",%progbits
 1712              		.align	1
 1713              		.p2align 2,,3
 1714              		.global	NVM_write
 1715              		.syntax unified
 1716              		.thumb
 1717              		.thumb_func
 1718              		.fpu fpv4-sp-d16
 1720              	NVM_write:
 1721              	.LVL155:
 1722              	.LFB141:
 336:Src/nvm.c     **** 
 337:Src/nvm.c     **** // @brief Writes to the current data block that was opened with NVM_start_write.
 338:Src/nvm.c     **** //
 339:Src/nvm.c     **** // The operation fails if (offset + length) is larger than the length passed to NVM_start_write.
 340:Src/nvm.c     **** // The most recent valid NVM data is not modified or invalidated until NVM_commit is called.
 341:Src/nvm.c     **** // Warning: Writing different data to the same area multiple times during a single transaction
 342:Src/nvm.c     **** // will cause data corruption.
 343:Src/nvm.c     **** //
 344:Src/nvm.c     **** // @param offset: The offset in bytes, 0 being the beginning of the staging block.
 345:Src/nvm.c     **** // @param data: Pointer to the data that should be written
 346:Src/nvm.c     **** // @param length: Data length in bytes
 347:Src/nvm.c     **** int NVM_write(size_t offset, uint8_t *data, size_t length) {
 1723              		.loc 1 347 60 is_stmt 1 view -0
 1724              		.cfi_startproc
 1725              		@ args = 0, pretend = 0, frame = 8
 1726              		@ frame_needed = 0, uses_anonymous_args = 0
 1727              		.loc 1 347 60 is_stmt 0 view .LVU592
 1728 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1729              	.LCFI22:
 1730              		.cfi_def_cfa_offset 36
 1731              		.cfi_offset 4, -36
 1732              		.cfi_offset 5, -32
 1733              		.cfi_offset 6, -28
 1734              		.cfi_offset 7, -24
 1735              		.cfi_offset 8, -20
 1736              		.cfi_offset 9, -16
 1737              		.cfi_offset 10, -12
 1738              		.cfi_offset 11, -8
 1739              		.cfi_offset 14, -4
 348:Src/nvm.c     ****     if (offset + length > (n_staging_area_ << 3))
 1740              		.loc 1 348 44 view .LVU593
ARM GAS  /tmp/cccHlqCc.s 			page 44


 1741 0004 534B     		ldr	r3, .L159
 347:Src/nvm.c     ****     if (offset + length > (n_staging_area_ << 3))
 1742              		.loc 1 347 60 view .LVU594
 1743 0006 1546     		mov	r5, r2
 1744              		.loc 1 348 44 view .LVU595
 1745 0008 1A68     		ldr	r2, [r3]
 1746              	.LVL156:
 1747              		.loc 1 348 16 view .LVU596
 1748 000a 4319     		adds	r3, r0, r5
 1749              		.loc 1 348 5 is_stmt 1 view .LVU597
 1750              		.loc 1 348 8 is_stmt 0 view .LVU598
 1751 000c B3EBC20F 		cmp	r3, r2, lsl #3
 347:Src/nvm.c     ****     if (offset + length > (n_staging_area_ << 3))
 1752              		.loc 1 347 60 view .LVU599
 1753 0010 83B0     		sub	sp, sp, #12
 1754              	.LCFI23:
 1755              		.cfi_def_cfa_offset 48
 1756              		.loc 1 348 8 view .LVU600
 1757 0012 00F29B80 		bhi	.L140
 349:Src/nvm.c     ****         return -1;
 350:Src/nvm.c     ****     sector_t *target = &sectors[1 - read_sector_];
 1758              		.loc 1 350 5 is_stmt 1 view .LVU601
 1759              		.loc 1 350 35 is_stmt 0 view .LVU602
 1760 0016 504B     		ldr	r3, .L159+4
 1761 0018 0446     		mov	r4, r0
 1762 001a 93F80080 		ldrb	r8, [r3]	@ zero_extendqisi2
 1763 001e 8B46     		mov	fp, r1
 351:Src/nvm.c     **** 
 352:Src/nvm.c     ****     HAL_FLASH_Unlock();
 1764              		.loc 1 352 5 view .LVU603
 1765 0020 FFF7FEFF 		bl	HAL_FLASH_Unlock
 1766              	.LVL157:
 353:Src/nvm.c     ****     HAL_FLASH_ClearError();
 1767              		.loc 1 353 5 view .LVU604
 1768 0024 4D4B     		ldr	r3, .L159+8
 1769 0026 9A69     		ldr	r2, [r3, #24]
 1770 0028 42F04042 		orr	r2, r2, #-1073741824
 1771 002c 9A61     		str	r2, [r3, #24]
 1772 002e 4CF2FA31 		movw	r1, #50170
 354:Src/nvm.c     **** 
 355:Src/nvm.c     ****     // handle unaligned start
 356:Src/nvm.c     ****     // Handle unaligned start with doubleword writes
 357:Src/nvm.c     ****     for (; (offset & 0x7) && length; ++data, ++offset, --length)
 1773              		.loc 1 357 5 view .LVU605
 1774 0032 6207     		lsls	r2, r4, #29
 350:Src/nvm.c     **** 
 1775              		.loc 1 350 35 view .LVU606
 1776 0034 C8F10108 		rsb	r8, r8, #1
 1777              	.LVL158:
 352:Src/nvm.c     ****     HAL_FLASH_ClearError();
 1778              		.loc 1 352 5 is_stmt 1 view .LVU607
 353:Src/nvm.c     **** 
 1779              		.loc 1 353 5 view .LVU608
 353:Src/nvm.c     **** 
 1780              		.loc 1 353 5 view .LVU609
 353:Src/nvm.c     **** 
 1781              		.loc 1 353 5 view .LVU610
ARM GAS  /tmp/cccHlqCc.s 			page 45


 353:Src/nvm.c     **** 
 1782              		.loc 1 353 5 view .LVU611
 353:Src/nvm.c     **** 
 1783              		.loc 1 353 5 view .LVU612
 1784 0038 1961     		str	r1, [r3, #16]
 1785              		.loc 1 357 12 view .LVU613
 1786              		.loc 1 357 5 is_stmt 0 view .LVU614
 1787 003a 25D0     		beq	.L129
 1788              		.loc 1 357 27 view .LVU615
 1789 003c 002D     		cmp	r5, #0
 1790 003e 58D0     		beq	.L130
 1791 0040 DFF81C91 		ldr	r9, .L159+12
 358:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 359:Src/nvm.c     ****                 ((uintptr_t)&target->data[target->index]) + offset, 
 1792              		.loc 1 359 36 view .LVU616
 1793 0044 08EB4803 		add	r3, r8, r8, lsl #1
 1794 0048 09EBC309 		add	r9, r9, r3, lsl #3
 1795 004c 03E0     		b	.L135
 1796              	.LVL159:
 1797              	.L156:
 357:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 1798              		.loc 1 357 5 view .LVU617
 1799 004e 6307     		lsls	r3, r4, #29
 1800 0050 1AD0     		beq	.L129
 357:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 1801              		.loc 1 357 27 discriminator 2 view .LVU618
 1802 0052 002D     		cmp	r5, #0
 1803 0054 4DD0     		beq	.L130
 1804              	.L135:
 358:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 1805              		.loc 1 358 9 is_stmt 1 view .LVU619
 1806              		.loc 1 359 42 is_stmt 0 view .LVU620
 1807 0056 D9F80000 		ldr	r0, [r9]
 1808              		.loc 1 359 29 view .LVU621
 1809 005a D9F81410 		ldr	r1, [r9, #20]
 1810 005e 01EBC001 		add	r1, r1, r0, lsl #3
 358:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 1811              		.loc 1 358 13 view .LVU622
 1812 0062 DBE90023 		ldrd	r2, [fp]
 1813 0066 2144     		add	r1, r1, r4
 1814 0068 0020     		movs	r0, #0
 1815 006a FFF7FEFF 		bl	HAL_FLASH_Program
 1816              	.LVL160:
 357:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 1817              		.loc 1 357 38 is_stmt 1 view .LVU623
 357:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 1818              		.loc 1 357 46 is_stmt 0 view .LVU624
 1819 006e 0134     		adds	r4, r4, #1
 357:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 1820              		.loc 1 357 56 view .LVU625
 1821 0070 013D     		subs	r5, r5, #1
 357:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 1822              		.loc 1 357 38 view .LVU626
 1823 0072 0BF1010B 		add	fp, fp, #1
 1824              	.LVL161:
 357:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 1825              		.loc 1 357 12 is_stmt 1 view .LVU627
ARM GAS  /tmp/cccHlqCc.s 			page 46


 358:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 1826              		.loc 1 358 12 is_stmt 0 view .LVU628
 1827 0076 0028     		cmp	r0, #0
 1828 0078 E9D0     		beq	.L156
 1829              	.LVL162:
 1830              	.L131:
 1831              	.LDL6:
 360:Src/nvm.c     ****                 *(uint64_t*)data) != HAL_OK)
 361:Src/nvm.c     ****             goto fail;
 362:Src/nvm.c     **** 
 363:Src/nvm.c     ****     // Write 32-bit values in fast mode
 364:Src/nvm.c     ****     for (; length >= 8; data += 8, offset += 8, length -= 8) {
 365:Src/nvm.c     ****         if (length == 8) {
 366:Src/nvm.c     ****             // Last word uses FAST_AND_LAST
 367:Src/nvm.c     ****             if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST_AND_LAST,
 368:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 369:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 370:Src/nvm.c     ****                 goto fail;
 371:Src/nvm.c     ****         } else {
 372:Src/nvm.c     ****             // Regular fast programming
 373:Src/nvm.c     ****             if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST,
 374:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 375:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 376:Src/nvm.c     ****                 goto fail;
 377:Src/nvm.c     ****         }
 378:Src/nvm.c     ****     }
 379:Src/nvm.c     **** 
 380:Src/nvm.c     ****     // Handle remaining bytes with doubleword writes
 381:Src/nvm.c     ****     for (; length; ++data, ++offset, --length)
 382:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 383:Src/nvm.c     ****                 ((uintptr_t)&target->data[target->index]) + offset, 
 384:Src/nvm.c     ****                 *(uint64_t*)data) != HAL_OK)
 385:Src/nvm.c     ****             goto fail;
 386:Src/nvm.c     **** 
 387:Src/nvm.c     **** 
 388:Src/nvm.c     ****     HAL_FLASH_Lock();
 389:Src/nvm.c     ****     return 0;
 390:Src/nvm.c     **** fail:
 391:Src/nvm.c     ****     HAL_FLASH_Lock();
 1832              		.loc 1 391 5 is_stmt 1 view .LVU629
 1833 007a FFF7FEFF 		bl	HAL_FLASH_Lock
 1834              	.LVL163:
 392:Src/nvm.c     ****     return HAL_FLASH_GetError(); // non-zero
 1835              		.loc 1 392 5 view .LVU630
 393:Src/nvm.c     **** }
 1836              		.loc 1 393 1 is_stmt 0 view .LVU631
 1837 007e 03B0     		add	sp, sp, #12
 1838              	.LCFI24:
 1839              		.cfi_remember_state
 1840              		.cfi_def_cfa_offset 36
 1841              		@ sp needed
 1842 0080 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1843              	.LCFI25:
 1844              		.cfi_restore 14
 1845              		.cfi_restore 11
 1846              		.cfi_restore 10
 1847              		.cfi_restore 9
ARM GAS  /tmp/cccHlqCc.s 			page 47


 1848              		.cfi_restore 8
 1849              		.cfi_restore 7
 1850              		.cfi_restore 6
 1851              		.cfi_restore 5
 1852              		.cfi_restore 4
 1853              		.cfi_def_cfa_offset 0
 392:Src/nvm.c     ****     return HAL_FLASH_GetError(); // non-zero
 1854              		.loc 1 392 12 view .LVU632
 1855 0084 FFF7FEBF 		b	HAL_FLASH_GetError
 1856              	.LVL164:
 1857              	.L129:
 1858              	.LCFI26:
 1859              		.cfi_restore_state
 364:Src/nvm.c     ****         if (length == 8) {
 1860              		.loc 1 364 12 is_stmt 1 view .LVU633
 364:Src/nvm.c     ****         if (length == 8) {
 1861              		.loc 1 364 5 is_stmt 0 view .LVU634
 1862 0088 072D     		cmp	r5, #7
 1863 008a 38D9     		bls	.L157
 1864 008c DFF8D090 		ldr	r9, .L159+12
 374:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 1865              		.loc 1 374 40 view .LVU635
 1866 0090 08EB4807 		add	r7, r8, r8, lsl #1
 1867 0094 09EBC703 		add	r3, r9, r7, lsl #3
 1868 0098 5E46     		mov	r6, fp
 1869 009a 0193     		str	r3, [sp, #4]
 1870 009c 4FEA480A 		lsl	r10, r8, #1
 1871 00a0 11E0     		b	.L137
 1872              	.LVL165:
 1873              	.L136:
 374:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 1874              		.loc 1 374 33 view .LVU636
 1875 00a2 019A     		ldr	r2, [sp, #4]
 1876 00a4 0199     		ldr	r1, [sp, #4]
 1877 00a6 5769     		ldr	r7, [r2, #20]
 1878 00a8 0968     		ldr	r1, [r1]
 1879 00aa 07EBC101 		add	r1, r7, r1, lsl #3
 373:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 1880              		.loc 1 373 17 view .LVU637
 1881 00ae D6E90023 		ldrd	r2, [r6]
 1882 00b2 2144     		add	r1, r1, r4
 1883 00b4 FFF7FEFF 		bl	HAL_FLASH_Program
 1884              	.LVL166:
 364:Src/nvm.c     ****         if (length == 8) {
 1885              		.loc 1 364 25 is_stmt 1 view .LVU638
 1886 00b8 0836     		adds	r6, r6, #8
 1887              	.LVL167:
 364:Src/nvm.c     ****         if (length == 8) {
 1888              		.loc 1 364 43 is_stmt 0 view .LVU639
 1889 00ba 0834     		adds	r4, r4, #8
 364:Src/nvm.c     ****         if (length == 8) {
 1890              		.loc 1 364 30 view .LVU640
 1891 00bc B346     		mov	fp, r6
 1892              	.LVL168:
 364:Src/nvm.c     ****         if (length == 8) {
 1893              		.loc 1 364 12 is_stmt 1 view .LVU641
 373:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
ARM GAS  /tmp/cccHlqCc.s 			page 48


 1894              		.loc 1 373 16 is_stmt 0 view .LVU642
 1895 00be 0028     		cmp	r0, #0
 1896 00c0 DBD1     		bne	.L131
 364:Src/nvm.c     ****         if (length == 8) {
 1897              		.loc 1 364 5 view .LVU643
 1898 00c2 072D     		cmp	r5, #7
 1899 00c4 21D9     		bls	.L138
 1900              	.LVL169:
 1901              	.L137:
 373:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 1902              		.loc 1 373 13 is_stmt 1 view .LVU644
 365:Src/nvm.c     ****             // Last word uses FAST_AND_LAST
 1903              		.loc 1 365 12 is_stmt 0 view .LVU645
 1904 00c6 082D     		cmp	r5, #8
 373:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 1905              		.loc 1 373 17 view .LVU646
 1906 00c8 4FF00100 		mov	r0, #1
 1907              	.LVL170:
 365:Src/nvm.c     ****             // Last word uses FAST_AND_LAST
 1908              		.loc 1 365 9 is_stmt 1 view .LVU647
 364:Src/nvm.c     ****         if (length == 8) {
 1909              		.loc 1 364 56 is_stmt 0 view .LVU648
 1910 00cc A5F10805 		sub	r5, r5, #8
 365:Src/nvm.c     ****             // Last word uses FAST_AND_LAST
 1911              		.loc 1 365 12 view .LVU649
 1912 00d0 E7D1     		bne	.L136
 367:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 1913              		.loc 1 367 13 is_stmt 1 view .LVU650
 368:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 1914              		.loc 1 368 40 is_stmt 0 view .LVU651
 1915 00d2 D044     		add	r8, r8, r10
 1916              	.LVL171:
 368:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 1917              		.loc 1 368 40 view .LVU652
 1918 00d4 09EBC803 		add	r3, r9, r8, lsl #3
 368:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 1919              		.loc 1 368 46 view .LVU653
 1920 00d8 59F83800 		ldr	r0, [r9, r8, lsl #3]
 368:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 1921              		.loc 1 368 33 view .LVU654
 1922 00dc 5969     		ldr	r1, [r3, #20]
 1923 00de 01EBC001 		add	r1, r1, r0, lsl #3
 367:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 1924              		.loc 1 367 17 view .LVU655
 1925 00e2 D6E90023 		ldrd	r2, [r6]
 1926 00e6 2144     		add	r1, r1, r4
 1927 00e8 0220     		movs	r0, #2
 1928 00ea FFF7FEFF 		bl	HAL_FLASH_Program
 1929              	.LVL172:
 367:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 1930              		.loc 1 367 16 view .LVU656
 1931 00ee 0028     		cmp	r0, #0
 1932 00f0 C3D1     		bne	.L131
 1933              	.LVL173:
 1934              	.L130:
 388:Src/nvm.c     ****     return 0;
 1935              		.loc 1 388 5 is_stmt 1 view .LVU657
ARM GAS  /tmp/cccHlqCc.s 			page 49


 1936 00f2 FFF7FEFF 		bl	HAL_FLASH_Lock
 1937              	.LVL174:
 389:Src/nvm.c     **** fail:
 1938              		.loc 1 389 5 view .LVU658
 389:Src/nvm.c     **** fail:
 1939              		.loc 1 389 12 is_stmt 0 view .LVU659
 1940 00f6 0020     		movs	r0, #0
 1941              	.L127:
 1942              		.loc 1 393 1 view .LVU660
 1943 00f8 03B0     		add	sp, sp, #12
 1944              	.LCFI27:
 1945              		.cfi_remember_state
 1946              		.cfi_def_cfa_offset 36
 1947              		@ sp needed
 1948 00fa BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1949              	.LVL175:
 1950              	.L157:
 1951              	.LCFI28:
 1952              		.cfi_restore_state
 381:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 1953              		.loc 1 381 12 is_stmt 1 discriminator 1 view .LVU661
 381:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 1954              		.loc 1 381 5 is_stmt 0 discriminator 1 view .LVU662
 1955 00fe 002D     		cmp	r5, #0
 1956 0100 F7D0     		beq	.L130
 1957 0102 DFF85C90 		ldr	r9, .L159+12
 1958 0106 4FEA480A 		lsl	r10, r8, #1
 1959              	.LVL176:
 1960              	.L138:
 383:Src/nvm.c     ****                 *(uint64_t*)data) != HAL_OK)
 1961              		.loc 1 383 36 view .LVU663
 1962 010a D044     		add	r8, r8, r10
 1963              	.LVL177:
 383:Src/nvm.c     ****                 *(uint64_t*)data) != HAL_OK)
 1964              		.loc 1 383 36 view .LVU664
 1965 010c 2544     		add	r5, r5, r4
 1966 010e ABEB040B 		sub	fp, fp, r4
 1967              	.LVL178:
 383:Src/nvm.c     ****                 *(uint64_t*)data) != HAL_OK)
 1968              		.loc 1 383 36 view .LVU665
 1969 0112 09EBC809 		add	r9, r9, r8, lsl #3
 1970 0116 01E0     		b	.L139
 1971              	.LVL179:
 1972              	.L158:
 381:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 1973              		.loc 1 381 5 view .LVU666
 1974 0118 AC42     		cmp	r4, r5
 1975 011a EAD0     		beq	.L130
 1976              	.LVL180:
 1977              	.L139:
 382:Src/nvm.c     ****                 ((uintptr_t)&target->data[target->index]) + offset, 
 1978              		.loc 1 382 9 is_stmt 1 view .LVU667
 383:Src/nvm.c     ****                 *(uint64_t*)data) != HAL_OK)
 1979              		.loc 1 383 42 is_stmt 0 view .LVU668
 1980 011c D9F80020 		ldr	r2, [r9]
 383:Src/nvm.c     ****                 *(uint64_t*)data) != HAL_OK)
 1981              		.loc 1 383 29 view .LVU669
ARM GAS  /tmp/cccHlqCc.s 			page 50


 1982 0120 D9F81410 		ldr	r1, [r9, #20]
 382:Src/nvm.c     ****                 ((uintptr_t)&target->data[target->index]) + offset, 
 1983              		.loc 1 382 13 view .LVU670
 1984 0124 0BEB0403 		add	r3, fp, r4
 383:Src/nvm.c     ****                 *(uint64_t*)data) != HAL_OK)
 1985              		.loc 1 383 29 view .LVU671
 1986 0128 01EBC201 		add	r1, r1, r2, lsl #3
 382:Src/nvm.c     ****                 ((uintptr_t)&target->data[target->index]) + offset, 
 1987              		.loc 1 382 13 view .LVU672
 1988 012c 2144     		add	r1, r1, r4
 1989 012e D3E90023 		ldrd	r2, [r3]
 1990 0132 0020     		movs	r0, #0
 381:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 1991              		.loc 1 381 28 view .LVU673
 1992 0134 0134     		adds	r4, r4, #1
 1993              	.LVL181:
 382:Src/nvm.c     ****                 ((uintptr_t)&target->data[target->index]) + offset, 
 1994              		.loc 1 382 13 view .LVU674
 1995 0136 FFF7FEFF 		bl	HAL_FLASH_Program
 1996              	.LVL182:
 381:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 1997              		.loc 1 381 20 is_stmt 1 view .LVU675
 381:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 1998              		.loc 1 381 12 view .LVU676
 382:Src/nvm.c     ****                 ((uintptr_t)&target->data[target->index]) + offset, 
 1999              		.loc 1 382 12 is_stmt 0 view .LVU677
 2000 013a 0028     		cmp	r0, #0
 2001 013c ECD0     		beq	.L158
 391:Src/nvm.c     ****     return HAL_FLASH_GetError(); // non-zero
 2002              		.loc 1 391 5 is_stmt 1 view .LVU678
 2003 013e FFF7FEFF 		bl	HAL_FLASH_Lock
 2004              	.LVL183:
 392:Src/nvm.c     **** }
 2005              		.loc 1 392 5 view .LVU679
 2006              		.loc 1 393 1 is_stmt 0 view .LVU680
 2007 0142 03B0     		add	sp, sp, #12
 2008              	.LCFI29:
 2009              		.cfi_remember_state
 2010              		.cfi_def_cfa_offset 36
 2011              		@ sp needed
 2012 0144 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2013              	.LCFI30:
 2014              		.cfi_restore 14
 2015              		.cfi_restore 11
 2016              		.cfi_restore 10
 2017              		.cfi_restore 9
 2018              		.cfi_restore 8
 2019              		.cfi_restore 7
 2020              		.cfi_restore 6
 2021              		.cfi_restore 5
 2022              		.cfi_restore 4
 2023              		.cfi_def_cfa_offset 0
 2024              	.LVL184:
 392:Src/nvm.c     **** }
 2025              		.loc 1 392 12 view .LVU681
 2026 0148 FFF7FEBF 		b	HAL_FLASH_GetError
 2027              	.LVL185:
ARM GAS  /tmp/cccHlqCc.s 			page 51


 2028              	.L140:
 2029              	.LCFI31:
 2030              		.cfi_restore_state
 349:Src/nvm.c     ****     sector_t *target = &sectors[1 - read_sector_];
 2031              		.loc 1 349 16 view .LVU682
 2032 014c 4FF0FF30 		mov	r0, #-1
 2033              	.LVL186:
 349:Src/nvm.c     ****     sector_t *target = &sectors[1 - read_sector_];
 2034              		.loc 1 349 16 view .LVU683
 2035 0150 D2E7     		b	.L127
 2036              	.L160:
 2037 0152 00BF     		.align	2
 2038              	.L159:
 2039 0154 00000000 		.word	.LANCHOR3
 2040 0158 00000000 		.word	.LANCHOR1
 2041 015c 00200240 		.word	1073881088
 2042 0160 00000000 		.word	.LANCHOR0
 2043              		.cfi_endproc
 2044              	.LFE141:
 2046              		.section	.text.NVM_commit,"ax",%progbits
 2047              		.align	1
 2048              		.p2align 2,,3
 2049              		.global	NVM_commit
 2050              		.syntax unified
 2051              		.thumb
 2052              		.thumb_func
 2053              		.fpu fpv4-sp-d16
 2055              	NVM_commit:
 2056              	.LFB142:
 394:Src/nvm.c     **** 
 395:Src/nvm.c     **** // @brief Commits the new data to NVM atomically.
 396:Src/nvm.c     **** int NVM_commit(void) {
 2057              		.loc 1 396 22 is_stmt 1 view -0
 2058              		.cfi_startproc
 2059              		@ args = 0, pretend = 0, frame = 24
 2060              		@ frame_needed = 0, uses_anonymous_args = 0
 397:Src/nvm.c     ****     sector_t *read_sector = &sectors[read_sector_];
 2061              		.loc 1 397 5 view .LVU685
 396:Src/nvm.c     ****     sector_t *read_sector = &sectors[read_sector_];
 2062              		.loc 1 396 22 is_stmt 0 view .LVU686
 2063 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2064              	.LCFI32:
 2065              		.cfi_def_cfa_offset 28
 2066              		.cfi_offset 4, -28
 2067              		.cfi_offset 5, -24
 2068              		.cfi_offset 6, -20
 2069              		.cfi_offset 7, -16
 2070              		.cfi_offset 8, -12
 2071              		.cfi_offset 9, -8
 2072              		.cfi_offset 14, -4
 2073              		.loc 1 397 37 view .LVU687
 2074 0004 364F     		ldr	r7, .L169
 398:Src/nvm.c     ****     sector_t *write_sector = &sectors[1 - read_sector_];
 399:Src/nvm.c     **** 
 400:Src/nvm.c     ****     // mark the newly-written fields as valid
 401:Src/nvm.c     ****     int status = set_allocation_state(write_sector, write_sector->index, n_staging_area_, VALID);
 2075              		.loc 1 401 18 view .LVU688
ARM GAS  /tmp/cccHlqCc.s 			page 52


 2076 0006 374D     		ldr	r5, .L169+4
 397:Src/nvm.c     ****     sector_t *write_sector = &sectors[1 - read_sector_];
 2077              		.loc 1 397 37 view .LVU689
 2078 0008 3E78     		ldrb	r6, [r7]	@ zero_extendqisi2
 2079              	.LVL187:
 398:Src/nvm.c     ****     sector_t *write_sector = &sectors[1 - read_sector_];
 2080              		.loc 1 398 5 is_stmt 1 view .LVU690
 2081              		.loc 1 401 18 is_stmt 0 view .LVU691
 2082 000a DFF8E490 		ldr	r9, .L169+16
 398:Src/nvm.c     ****     sector_t *write_sector = &sectors[1 - read_sector_];
 2083              		.loc 1 398 41 view .LVU692
 2084 000e C6F10100 		rsb	r0, r6, #1
 2085              	.LVL188:
 2086              		.loc 1 401 5 is_stmt 1 view .LVU693
 2087              		.loc 1 401 18 is_stmt 0 view .LVU694
 2088 0012 00EB4000 		add	r0, r0, r0, lsl #1
 2089              	.LVL189:
 2090              		.loc 1 401 18 view .LVU695
 2091 0016 4FEAC008 		lsl	r8, r0, #3
 2092 001a D9F80020 		ldr	r2, [r9]
 2093 001e 55F80810 		ldr	r1, [r5, r8]
 396:Src/nvm.c     ****     sector_t *read_sector = &sectors[read_sector_];
 2094              		.loc 1 396 22 view .LVU696
 2095 0022 87B0     		sub	sp, sp, #28
 2096              	.LCFI33:
 2097              		.cfi_def_cfa_offset 56
 2098              		.loc 1 401 18 view .LVU697
 2099 0024 05EBC000 		add	r0, r5, r0, lsl #3
 2100 0028 0023     		movs	r3, #0
 2101 002a FFF7FEFF 		bl	set_allocation_state
 2102              	.LVL190:
 402:Src/nvm.c     ****     if (status)
 2103              		.loc 1 402 5 is_stmt 1 view .LVU698
 2104              		.loc 1 402 8 is_stmt 0 view .LVU699
 2105 002e 0446     		mov	r4, r0
 2106 0030 0028     		cmp	r0, #0
 2107 0032 38D1     		bne	.L161
 403:Src/nvm.c     ****         return status;
 404:Src/nvm.c     **** 
 405:Src/nvm.c     ****     write_sector->index += n_staging_area_;
 2108              		.loc 1 405 5 is_stmt 1 view .LVU700
 2109              		.loc 1 405 25 is_stmt 0 view .LVU701
 2110 0034 D9F80020 		ldr	r2, [r9]
 2111 0038 55F80830 		ldr	r3, [r5, r8]
 406:Src/nvm.c     ****     n_valid_ = n_staging_area_;
 407:Src/nvm.c     ****     n_staging_area_ = 0;
 2112              		.loc 1 407 21 view .LVU702
 2113 003c C9F80000 		str	r0, [r9]
 405:Src/nvm.c     ****     n_valid_ = n_staging_area_;
 2114              		.loc 1 405 25 view .LVU703
 2115 0040 1344     		add	r3, r3, r2
 2116 0042 45F80830 		str	r3, [r5, r8]
 406:Src/nvm.c     ****     n_valid_ = n_staging_area_;
 2117              		.loc 1 406 5 is_stmt 1 view .LVU704
 408:Src/nvm.c     ****     read_sector_ = 1 - read_sector_;
 409:Src/nvm.c     **** 
 410:Src/nvm.c     ****     // invalidate the other sector
ARM GAS  /tmp/cccHlqCc.s 			page 53


 411:Src/nvm.c     ****     if (read_sector->index < read_sector->n_data) {
 2118              		.loc 1 411 20 is_stmt 0 view .LVU705
 2119 0046 06EB4603 		add	r3, r6, r6, lsl #1
 2120 004a 4FEAC308 		lsl	r8, r3, #3
 2121 004e 05EBC309 		add	r9, r5, r3, lsl #3
 408:Src/nvm.c     ****     read_sector_ = 1 - read_sector_;
 2122              		.loc 1 408 22 view .LVU706
 2123 0052 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 2124              		.loc 1 411 20 view .LVU707
 2125 0054 55F80810 		ldr	r1, [r5, r8]
 408:Src/nvm.c     ****     read_sector_ = 1 - read_sector_;
 2126              		.loc 1 408 22 view .LVU708
 2127 0058 C3F10103 		rsb	r3, r3, #1
 408:Src/nvm.c     ****     read_sector_ = 1 - read_sector_;
 2128              		.loc 1 408 18 view .LVU709
 2129 005c 3B70     		strb	r3, [r7]
 406:Src/nvm.c     ****     n_staging_area_ = 0;
 2130              		.loc 1 406 14 view .LVU710
 2131 005e 224B     		ldr	r3, .L169+8
 2132 0060 1A60     		str	r2, [r3]
 407:Src/nvm.c     ****     read_sector_ = 1 - read_sector_;
 2133              		.loc 1 407 5 is_stmt 1 view .LVU711
 408:Src/nvm.c     ****     read_sector_ = 1 - read_sector_;
 2134              		.loc 1 408 5 view .LVU712
 2135              		.loc 1 411 5 view .LVU713
 2136              		.loc 1 411 8 is_stmt 0 view .LVU714
 2137 0062 D9F80830 		ldr	r3, [r9, #8]
 2138 0066 9942     		cmp	r1, r3
 2139 0068 21D3     		bcc	.L167
 412:Src/nvm.c     ****         status = set_allocation_state(read_sector, read_sector->index, 1, INVALID);
 413:Src/nvm.c     ****         read_sector->index += 1;
 414:Src/nvm.c     ****     } else {
 415:Src/nvm.c     ****         status = erase(read_sector);
 2140              		.loc 1 415 9 is_stmt 1 view .LVU715
 2141              	.LVL191:
 2142              	.LBB82:
 2143              	.LBI82:
  98:Src/nvm.c     ****     FLASH_EraseInitTypeDef erase_struct = {
 2144              		.loc 1 98 5 view .LVU716
 2145              	.LBB83:
  99:Src/nvm.c     ****         .TypeErase = FLASH_TYPEERASE_PAGES,    // Changed from SECTORS to PAGES
 2146              		.loc 1 99 5 view .LVU717
  99:Src/nvm.c     ****         .TypeErase = FLASH_TYPEERASE_PAGES,    // Changed from SECTORS to PAGES
 2147              		.loc 1 99 28 is_stmt 0 view .LVU718
 2148 006a D9F80430 		ldr	r3, [r9, #4]
 2149 006e 0493     		str	r3, [sp, #16]
 2150 0070 0123     		movs	r3, #1
 2151 0072 0022     		movs	r2, #0
 2152 0074 0593     		str	r3, [sp, #20]
 106:Src/nvm.c     ****     HAL_FLASH_ClearError();
 2153              		.loc 1 106 5 is_stmt 1 view .LVU719
  99:Src/nvm.c     ****         .TypeErase = FLASH_TYPEERASE_PAGES,    // Changed from SECTORS to PAGES
 2154              		.loc 1 99 28 is_stmt 0 view .LVU720
 2155 0076 0123     		movs	r3, #1
 2156 0078 CDE90223 		strd	r2, [sp, #8]
 106:Src/nvm.c     ****     HAL_FLASH_ClearError();
 2157              		.loc 1 106 5 view .LVU721
ARM GAS  /tmp/cccHlqCc.s 			page 54


 2158 007c FFF7FEFF 		bl	HAL_FLASH_Unlock
 2159              	.LVL192:
 107:Src/nvm.c     ****     uint32_t page_error;
 2160              		.loc 1 107 5 is_stmt 1 view .LVU722
 107:Src/nvm.c     ****     uint32_t page_error;
 2161              		.loc 1 107 5 view .LVU723
 107:Src/nvm.c     ****     uint32_t page_error;
 2162              		.loc 1 107 5 view .LVU724
 2163 0080 1A4B     		ldr	r3, .L169+12
 2164 0082 9A69     		ldr	r2, [r3, #24]
 2165 0084 4CF2FA31 		movw	r1, #50170
 2166 0088 42F04042 		orr	r2, r2, #-1073741824
 2167 008c 9A61     		str	r2, [r3, #24]
 107:Src/nvm.c     ****     uint32_t page_error;
 2168              		.loc 1 107 5 view .LVU725
 107:Src/nvm.c     ****     uint32_t page_error;
 2169              		.loc 1 107 5 view .LVU726
 109:Src/nvm.c     ****         goto fail;
 2170              		.loc 1 109 9 is_stmt 0 view .LVU727
 2171 008e 02A8     		add	r0, sp, #8
 107:Src/nvm.c     ****     uint32_t page_error;
 2172              		.loc 1 107 5 view .LVU728
 2173 0090 1961     		str	r1, [r3, #16]
 107:Src/nvm.c     ****     uint32_t page_error;
 2174              		.loc 1 107 5 is_stmt 1 view .LVU729
 108:Src/nvm.c     ****     if (HAL_FLASHEx_Erase(&erase_struct, &page_error) != HAL_OK)
 2175              		.loc 1 108 5 view .LVU730
 109:Src/nvm.c     ****         goto fail;
 2176              		.loc 1 109 5 view .LVU731
 109:Src/nvm.c     ****         goto fail;
 2177              		.loc 1 109 9 is_stmt 0 view .LVU732
 2178 0092 01A9     		add	r1, sp, #4
 2179 0094 FFF7FEFF 		bl	HAL_FLASHEx_Erase
 2180              	.LVL193:
 109:Src/nvm.c     ****         goto fail;
 2181              		.loc 1 109 8 view .LVU733
 2182 0098 C0B9     		cbnz	r0, .L168
 111:Src/nvm.c     **** 
 2183              		.loc 1 111 5 is_stmt 1 view .LVU734
 111:Src/nvm.c     **** 
 2184              		.loc 1 111 19 is_stmt 0 view .LVU735
 2185 009a D9F80C30 		ldr	r3, [r9, #12]
 2186 009e 45F80830 		str	r3, [r5, r8]
 113:Src/nvm.c     ****     return 0;
 2187              		.loc 1 113 5 is_stmt 1 view .LVU736
 2188 00a2 FFF7FEFF 		bl	HAL_FLASH_Lock
 2189              	.LVL194:
 114:Src/nvm.c     **** fail:
 2190              		.loc 1 114 5 view .LVU737
 2191              	.L161:
 114:Src/nvm.c     **** fail:
 2192              		.loc 1 114 5 is_stmt 0 view .LVU738
 2193              	.LBE83:
 2194              	.LBE82:
 416:Src/nvm.c     ****     }
 417:Src/nvm.c     **** 
 418:Src/nvm.c     ****     return status;
ARM GAS  /tmp/cccHlqCc.s 			page 55


 419:Src/nvm.c     **** }
 2195              		.loc 1 419 1 view .LVU739
 2196 00a6 2046     		mov	r0, r4
 2197 00a8 07B0     		add	sp, sp, #28
 2198              	.LCFI34:
 2199              		.cfi_remember_state
 2200              		.cfi_def_cfa_offset 28
 2201              		@ sp needed
 2202 00aa BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2203              	.LVL195:
 2204              	.L167:
 2205              	.LCFI35:
 2206              		.cfi_restore_state
 412:Src/nvm.c     ****         read_sector->index += 1;
 2207              		.loc 1 412 9 is_stmt 1 view .LVU740
 412:Src/nvm.c     ****         read_sector->index += 1;
 2208              		.loc 1 412 18 is_stmt 0 view .LVU741
 2209 00ae 0123     		movs	r3, #1
 2210 00b0 1A46     		mov	r2, r3
 2211 00b2 4846     		mov	r0, r9
 2212              	.LVL196:
 412:Src/nvm.c     ****         read_sector->index += 1;
 2213              		.loc 1 412 18 view .LVU742
 2214 00b4 FFF7FEFF 		bl	set_allocation_state
 2215              	.LVL197:
 413:Src/nvm.c     ****     } else {
 2216              		.loc 1 413 28 view .LVU743
 2217 00b8 55F80830 		ldr	r3, [r5, r8]
 412:Src/nvm.c     ****         read_sector->index += 1;
 2218              		.loc 1 412 18 view .LVU744
 2219 00bc 0446     		mov	r4, r0
 2220              	.LVL198:
 413:Src/nvm.c     ****     } else {
 2221              		.loc 1 413 9 is_stmt 1 view .LVU745
 413:Src/nvm.c     ****     } else {
 2222              		.loc 1 413 28 is_stmt 0 view .LVU746
 2223 00be 0133     		adds	r3, r3, #1
 2224              		.loc 1 419 1 view .LVU747
 2225 00c0 2046     		mov	r0, r4
 413:Src/nvm.c     ****     } else {
 2226              		.loc 1 413 28 view .LVU748
 2227 00c2 45F80830 		str	r3, [r5, r8]
 2228              		.loc 1 419 1 view .LVU749
 2229 00c6 07B0     		add	sp, sp, #28
 2230              	.LCFI36:
 2231              		.cfi_remember_state
 2232              		.cfi_def_cfa_offset 28
 2233              		@ sp needed
 2234 00c8 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2235              	.LVL199:
 2236              	.L168:
 2237              	.LCFI37:
 2238              		.cfi_restore_state
 2239              	.LBB87:
 2240              	.LBB86:
 2241              	.LBB84:
 2242              	.LBI84:
ARM GAS  /tmp/cccHlqCc.s 			page 56


  98:Src/nvm.c     ****     FLASH_EraseInitTypeDef erase_struct = {
 2243              		.loc 1 98 5 is_stmt 1 view .LVU750
 2244              	.LBB85:
 110:Src/nvm.c     ****     sector->index = sector->n_reserved;
 2245              		.loc 1 110 9 view .LVU751
 2246              	.LDL7:
 116:Src/nvm.c     ****     return HAL_FLASH_GetError();
 2247              		.loc 1 116 5 view .LVU752
 2248 00cc FFF7FEFF 		bl	HAL_FLASH_Lock
 2249              	.LVL200:
 117:Src/nvm.c     **** }
 2250              		.loc 1 117 5 view .LVU753
 117:Src/nvm.c     **** }
 2251              		.loc 1 117 12 is_stmt 0 view .LVU754
 2252 00d0 FFF7FEFF 		bl	HAL_FLASH_GetError
 2253              	.LVL201:
 2254 00d4 0446     		mov	r4, r0
 2255              	.LVL202:
 117:Src/nvm.c     **** }
 2256              		.loc 1 117 12 view .LVU755
 2257              	.LBE85:
 2258              	.LBE84:
 2259              	.LBE86:
 2260              	.LBE87:
 2261              		.loc 1 419 1 view .LVU756
 2262 00d6 2046     		mov	r0, r4
 2263 00d8 07B0     		add	sp, sp, #28
 2264              	.LCFI38:
 2265              		.cfi_def_cfa_offset 28
 2266              		@ sp needed
 2267 00da BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2268              	.LVL203:
 2269              	.L170:
 2270              		.loc 1 419 1 view .LVU757
 2271 00de 00BF     		.align	2
 2272              	.L169:
 2273 00e0 00000000 		.word	.LANCHOR1
 2274 00e4 00000000 		.word	.LANCHOR0
 2275 00e8 00000000 		.word	.LANCHOR2
 2276 00ec 00200240 		.word	1073881088
 2277 00f0 00000000 		.word	.LANCHOR3
 2278              		.cfi_endproc
 2279              	.LFE142:
 2281              		.section	.rodata.NVM_demo.str1.4,"aMS",%progbits,1
 2282              		.align	2
 2283              	.LC0:
 2284 0000 3D3D3D20 		.ascii	"=== NVM TEST ===\015\000"
 2284      4E564D20 
 2284      54455354 
 2284      203D3D3D 
 2284      0D00
 2285 0012 0000     		.align	2
 2286              	.LC1:
 2287 0014 4E564D20 		.ascii	"NVM contains %d valid bytes:\015\012\000"
 2287      636F6E74 
 2287      61696E73 
 2287      20256420 
ARM GAS  /tmp/cccHlqCc.s 			page 57


 2287      76616C69 
 2288 0033 00       		.align	2
 2289              	.LC2:
 2290 0034 20253032 		.ascii	" %02x\000"
 2290      7800
 2291 003a 0000     		.align	2
 2292              	.LC3:
 2293 003c 0D00     		.ascii	"\015\000"
 2294 003e 0000     		.align	2
 2295              	.LC4:
 2296 0040 4E564D20 		.ascii	"NVM is empty\015\000"
 2296      69732065 
 2296      6D707479 
 2296      0D00
 2297 004e 0000     		.align	2
 2298              	.LC5:
 2299 0050 77726974 		.ascii	"write 0x%02x, ..., 0x%02x to NVM\015\012\000"
 2299      65203078 
 2299      25303278 
 2299      2C202E2E 
 2299      2E2C2030 
 2300 0073 00       		.align	2
 2301              	.LC6:
 2302 0074 6E657720 		.ascii	"new data committed to NVM\015\000"
 2302      64617461 
 2302      20636F6D 
 2302      6D697474 
 2302      65642074 
 2303 008f 00       		.align	2
 2304              	.LC7:
 2305 0090 4E564D20 		.ascii	"NVM test failed at %d!\015\012\000"
 2305      74657374 
 2305      20666169 
 2305      6C656420 
 2305      61742025 
 2306              		.section	.text.NVM_demo,"ax",%progbits
 2307              		.align	1
 2308              		.p2align 2,,3
 2309              		.global	NVM_demo
 2310              		.syntax unified
 2311              		.thumb
 2312              		.thumb_func
 2313              		.fpu fpv4-sp-d16
 2315              	NVM_demo:
 2316              	.LFB148:
 420:Src/nvm.c     **** 
 421:Src/nvm.c     **** 
 422:Src/nvm.c     **** #include <cmsis_os.h>
 423:Src/nvm.c     **** /** @brief Call this at startup to test/demo the NVM driver
 424:Src/nvm.c     **** 
 425:Src/nvm.c     ****  Expected output when starting with a fully erased NVM
 426:Src/nvm.c     **** 
 427:Src/nvm.c     ****     [1st boot]
 428:Src/nvm.c     ****     === NVM TEST ===
 429:Src/nvm.c     ****     NVM is empty
 430:Src/nvm.c     ****     write 0x00, ..., 0x25 to NVM
 431:Src/nvm.c     ****     new data committed to NVM
ARM GAS  /tmp/cccHlqCc.s 			page 58


 432:Src/nvm.c     ****     
 433:Src/nvm.c     ****     [2nd boot]
 434:Src/nvm.c     ****     === NVM TEST ===
 435:Src/nvm.c     ****     NVM contains 40 valid bytes:
 436:Src/nvm.c     ****     00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
 437:Src/nvm.c     ****     10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
 438:Src/nvm.c     ****     20 21 22 23 24 25 ff ff
 439:Src/nvm.c     ****     write 0xbd, ..., 0xe2 to NVM
 440:Src/nvm.c     ****     new data committed to NVM
 441:Src/nvm.c     **** 
 442:Src/nvm.c     ****     [3rd boot]
 443:Src/nvm.c     ****     === NVM TEST ===
 444:Src/nvm.c     ****     NVM contains 40 valid bytes:
 445:Src/nvm.c     ****     bd be bf c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc
 446:Src/nvm.c     ****     cd ce cf d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db dc
 447:Src/nvm.c     ****     dd de df e0 e1 e2 ff ff
 448:Src/nvm.c     ****     write 0xcb, ..., 0xf0 to NVM
 449:Src/nvm.c     ****     new data committed to NVM
 450:Src/nvm.c     **** */
 451:Src/nvm.c     **** void NVM_demo(void) {
 2317              		.loc 1 451 21 is_stmt 1 view -0
 2318              		.cfi_startproc
 2319              		@ args = 0, pretend = 0, frame = 80
 2320              		@ frame_needed = 1, uses_anonymous_args = 0
 2321 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2322              	.LCFI39:
 2323              		.cfi_def_cfa_offset 36
 2324              		.cfi_offset 4, -36
 2325              		.cfi_offset 5, -32
 2326              		.cfi_offset 6, -28
 2327              		.cfi_offset 7, -24
 2328              		.cfi_offset 8, -20
 2329              		.cfi_offset 9, -16
 2330              		.cfi_offset 10, -12
 2331              		.cfi_offset 11, -8
 2332              		.cfi_offset 14, -4
 2333 0004 2DED028B 		vpush.64	{d8}
 2334              	.LCFI40:
 2335              		.cfi_def_cfa_offset 44
 2336              		.cfi_offset 80, -44
 2337              		.cfi_offset 81, -40
 2338 0008 95B0     		sub	sp, sp, #84
 2339              	.LCFI41:
 2340              		.cfi_def_cfa_offset 128
 452:Src/nvm.c     ****     const size_t len = 38;
 453:Src/nvm.c     ****     uint8_t data[len];
 454:Src/nvm.c     ****     int progress = 0;
 455:Src/nvm.c     ****     uint8_t seed = 0;
 456:Src/nvm.c     **** 
 457:Src/nvm.c     ****     osDelay(100);
 2341              		.loc 1 457 5 is_stmt 0 view .LVU759
 2342 000a 6420     		movs	r0, #100
 451:Src/nvm.c     ****     const size_t len = 38;
 2343              		.loc 1 451 21 view .LVU760
 2344 000c 00AF     		add	r7, sp, #0
 2345              	.LCFI42:
 2346              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cccHlqCc.s 			page 59


 2347              		.loc 1 457 5 view .LVU761
 2348 000e FFF7FEFF 		bl	osDelay
 2349              	.LVL204:
 458:Src/nvm.c     ****     printf("=== NVM TEST ===\r\n"); osDelay(5);
 2350              		.loc 1 458 5 view .LVU762
 2351 0012 C948     		ldr	r0, .L228
 2352 0014 FFF7FEFF 		bl	puts
 2353              	.LVL205:
 2354              		.loc 1 458 37 view .LVU763
 2355 0018 0520     		movs	r0, #5
 2356 001a FFF7FEFF 		bl	osDelay
 2357              	.LVL206:
 459:Src/nvm.c     ****     //NVM_erase();
 460:Src/nvm.c     ****     if (progress++, NVM_init() != 0)
 2358              		.loc 1 460 21 view .LVU764
 2359 001e FFF7FEFF 		bl	NVM_init
 2360              	.LVL207:
 451:Src/nvm.c     ****     const size_t len = 38;
 2361              		.loc 1 451 21 view .LVU765
 2362 0022 6B46     		mov	r3, sp
 2363 0024 08EE103A 		vmov	s16, r3	@ int
 452:Src/nvm.c     ****     uint8_t data[len];
 2364              		.loc 1 452 5 is_stmt 1 view .LVU766
 2365              	.LVL208:
 453:Src/nvm.c     ****     int progress = 0;
 2366              		.loc 1 453 5 view .LVU767
 454:Src/nvm.c     ****     uint8_t seed = 0;
 2367              		.loc 1 454 5 view .LVU768
 455:Src/nvm.c     **** 
 2368              		.loc 1 455 5 view .LVU769
 457:Src/nvm.c     ****     printf("=== NVM TEST ===\r\n"); osDelay(5);
 2369              		.loc 1 457 5 view .LVU770
 458:Src/nvm.c     ****     //NVM_erase();
 2370              		.loc 1 458 5 view .LVU771
 458:Src/nvm.c     ****     //NVM_erase();
 2371              		.loc 1 458 37 view .LVU772
 2372              		.loc 1 460 5 view .LVU773
 2373              		.loc 1 460 8 is_stmt 0 view .LVU774
 2374 0028 0028     		cmp	r0, #0
 2375 002a 40F05781 		bne	.L199
 461:Src/nvm.c     ****         goto fail;
 462:Src/nvm.c     ****     
 463:Src/nvm.c     ****     // load bytes from NVM and print them
 464:Src/nvm.c     ****     size_t available = NVM_get_max_read_length();
 2376              		.loc 1 464 5 is_stmt 1 view .LVU775
 2377              	.LBB105:
 2378              	.LBI105:
 284:Src/nvm.c     ****     return n_valid_ << 3;
 2379              		.loc 1 284 8 view .LVU776
 2380              	.LBB106:
 285:Src/nvm.c     **** }
 2381              		.loc 1 285 5 view .LVU777
 285:Src/nvm.c     **** }
 2382              		.loc 1 285 21 is_stmt 0 view .LVU778
 2383 002e C34C     		ldr	r4, .L228+4
 2384 0030 2568     		ldr	r5, [r4]
 2385              	.LVL209:
ARM GAS  /tmp/cccHlqCc.s 			page 60


 285:Src/nvm.c     **** }
 2386              		.loc 1 285 21 view .LVU779
 2387              	.LBE106:
 2388              	.LBE105:
 465:Src/nvm.c     ****     if (available) {
 2389              		.loc 1 465 5 is_stmt 1 view .LVU780
 2390              		.loc 1 465 8 is_stmt 0 view .LVU781
 2391 0032 ED00     		lsls	r5, r5, #3
 2392              	.LVL210:
 2393              		.loc 1 465 8 view .LVU782
 2394 0034 0646     		mov	r6, r0
 2395 0036 3FD0     		beq	.L173
 2396              	.LBB107:
 466:Src/nvm.c     ****         printf("NVM contains %d valid bytes:\r\n", available); osDelay(5);
 2397              		.loc 1 466 9 discriminator 1 view .LVU783
 2398 0038 2946     		mov	r1, r5
 2399 003a C148     		ldr	r0, .L228+8
 2400 003c FFF7FEFF 		bl	printf
 2401              	.LVL211:
 2402              		.loc 1 466 64 discriminator 1 view .LVU784
 2403 0040 0520     		movs	r0, #5
 2404 0042 FFF7FEFF 		bl	osDelay
 2405              	.LVL212:
 2406              	.LBB108:
 2407              	.LBB109:
 301:Src/nvm.c     ****         return -1;
 2408              		.loc 1 301 37 discriminator 1 view .LVU785
 2409 0046 2068     		ldr	r0, [r4]
 301:Src/nvm.c     ****         return -1;
 2410              		.loc 1 301 8 discriminator 1 view .LVU786
 2411 0048 B5EBC00F 		cmp	r5, r0, lsl #3
 2412              	.LBE109:
 2413              	.LBE108:
 465:Src/nvm.c     ****     if (available) {
 2414              		.loc 1 465 20 discriminator 1 view .LVU787
 2415 004c F0EE488A 		vmov.f32	s17, s16	@ int
 2416              		.loc 1 466 9 is_stmt 1 discriminator 1 view .LVU788
 2417              		.loc 1 466 64 discriminator 1 view .LVU789
 467:Src/nvm.c     ****         uint8_t buf[available];
 2418              		.loc 1 467 9 discriminator 1 view .LVU790
 2419              	.LVL213:
 2420              		.loc 1 467 17 is_stmt 0 discriminator 1 view .LVU791
 2421 0050 ADEB050D 		sub	sp, sp, r5
 2422              	.LVL214:
 468:Src/nvm.c     ****         if (progress++, NVM_read(0, buf, available) != 0)
 2423              		.loc 1 468 9 is_stmt 1 discriminator 1 view .LVU792
 2424              	.LBB112:
 2425              	.LBI108:
 300:Src/nvm.c     ****     if (offset + length > (n_valid_ << 3))
 2426              		.loc 1 300 5 discriminator 1 view .LVU793
 2427              	.LBB110:
 301:Src/nvm.c     ****         return -1;
 2428              		.loc 1 301 5 discriminator 1 view .LVU794
 301:Src/nvm.c     ****         return -1;
 2429              		.loc 1 301 8 is_stmt 0 discriminator 1 view .LVU795
 2430 0054 00F2AD81 		bhi	.L220
 303:Src/nvm.c     ****     const uint8_t *src_ptr = ((const uint8_t *)&read_sector->data[read_sector->index - n_valid_]) +
ARM GAS  /tmp/cccHlqCc.s 			page 61


 2431              		.loc 1 303 5 is_stmt 1 view .LVU796
 303:Src/nvm.c     ****     const uint8_t *src_ptr = ((const uint8_t *)&read_sector->data[read_sector->index - n_valid_]) +
 2432              		.loc 1 303 37 is_stmt 0 view .LVU797
 2433 0058 BA4B     		ldr	r3, .L228+12
 304:Src/nvm.c     ****     memcpy(data, src_ptr, length);
 2434              		.loc 1 304 60 view .LVU798
 2435 005a DFF8FCA2 		ldr	r10, .L228+32
 303:Src/nvm.c     ****     const uint8_t *src_ptr = ((const uint8_t *)&read_sector->data[read_sector->index - n_valid_]) +
 2436              		.loc 1 303 37 view .LVU799
 2437 005e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2438              	.LVL215:
 304:Src/nvm.c     ****     memcpy(data, src_ptr, length);
 2439              		.loc 1 304 5 is_stmt 1 view .LVU800
 305:Src/nvm.c     ****     return 0;
 2440              		.loc 1 305 5 view .LVU801
 303:Src/nvm.c     ****     const uint8_t *src_ptr = ((const uint8_t *)&read_sector->data[read_sector->index - n_valid_]) +
 2441              		.loc 1 303 37 is_stmt 0 view .LVU802
 2442 0060 FB60     		str	r3, [r7, #12]
 304:Src/nvm.c     ****     memcpy(data, src_ptr, length);
 2443              		.loc 1 304 60 view .LVU803
 2444 0062 01EB4101 		add	r1, r1, r1, lsl #1
 2445              	.LVL216:
 304:Src/nvm.c     ****     memcpy(data, src_ptr, length);
 2446              		.loc 1 304 60 view .LVU804
 2447 0066 0AEBC104 		add	r4, r10, r1, lsl #3
 304:Src/nvm.c     ****     memcpy(data, src_ptr, length);
 2448              		.loc 1 304 86 view .LVU805
 2449 006a 5AF83110 		ldr	r1, [r10, r1, lsl #3]
 2450              	.LBE110:
 2451              	.LBE112:
 2452              	.LBB113:
 469:Src/nvm.c     ****             goto fail;
 470:Src/nvm.c     ****         for (size_t pos = 0; pos < available; ++pos) {
 471:Src/nvm.c     ****             seed += buf[pos];
 472:Src/nvm.c     ****             printf(" %02x", buf[pos]);
 2453              		.loc 1 472 13 view .LVU806
 2454 006e DFF8EC92 		ldr	r9, .L228+36
 473:Src/nvm.c     ****             if ((((pos + 1) % 16) == 0) || ((pos + 1) == available))
 474:Src/nvm.c     ****                 printf("\r\n");
 2455              		.loc 1 474 17 view .LVU807
 2456 0072 DFF8EC82 		ldr	r8, .L228+40
 2457              	.LBE113:
 2458              	.LBB114:
 2459              	.LBB111:
 304:Src/nvm.c     ****     memcpy(data, src_ptr, length);
 2460              		.loc 1 304 86 view .LVU808
 2461 0076 091A     		subs	r1, r1, r0
 304:Src/nvm.c     ****     memcpy(data, src_ptr, length);
 2462              		.loc 1 304 20 view .LVU809
 2463 0078 6069     		ldr	r0, [r4, #20]
 2464              	.LVL217:
 305:Src/nvm.c     ****     return 0;
 2465              		.loc 1 305 5 view .LVU810
 2466 007a 2A46     		mov	r2, r5
 2467 007c 00EBC101 		add	r1, r0, r1, lsl #3
 2468 0080 6846     		mov	r0, sp
 2469 0082 FFF7FEFF 		bl	memcpy
ARM GAS  /tmp/cccHlqCc.s 			page 62


 2470              	.LVL218:
 306:Src/nvm.c     **** }
 2471              		.loc 1 306 5 is_stmt 1 view .LVU811
 306:Src/nvm.c     **** }
 2472              		.loc 1 306 5 is_stmt 0 view .LVU812
 2473              	.LBE111:
 2474              	.LBE114:
 2475              	.LBB115:
 470:Src/nvm.c     ****             seed += buf[pos];
 2476              		.loc 1 470 30 is_stmt 1 view .LVU813
 470:Src/nvm.c     ****             seed += buf[pos];
 2477              		.loc 1 470 21 is_stmt 0 view .LVU814
 2478 0086 B346     		mov	fp, r6
 2479              	.LBE115:
 2480              	.LBE107:
 455:Src/nvm.c     **** 
 2481              		.loc 1 455 13 view .LVU815
 2482 0088 5C46     		mov	r4, fp
 2483 008a 0DF1FF36 		add	r6, sp, #-1
 2484              	.LVL219:
 2485              	.L178:
 2486              	.LBB118:
 2487              	.LBB116:
 471:Src/nvm.c     ****             printf(" %02x", buf[pos]);
 2488              		.loc 1 471 13 is_stmt 1 view .LVU816
 471:Src/nvm.c     ****             printf(" %02x", buf[pos]);
 2489              		.loc 1 471 24 is_stmt 0 view .LVU817
 2490 008e 16F8011F 		ldrb	r1, [r6, #1]!	@ zero_extendqisi2
 473:Src/nvm.c     ****                 printf("\r\n");
 2491              		.loc 1 473 24 view .LVU818
 2492 0092 0BF1010B 		add	fp, fp, #1
 2493              	.LVL220:
 472:Src/nvm.c     ****             if ((((pos + 1) % 16) == 0) || ((pos + 1) == available))
 2494              		.loc 1 472 13 view .LVU819
 2495 0096 4846     		mov	r0, r9
 471:Src/nvm.c     ****             printf(" %02x", buf[pos]);
 2496              		.loc 1 471 18 view .LVU820
 2497 0098 0C44     		add	r4, r4, r1
 2498              	.LVL221:
 472:Src/nvm.c     ****             if ((((pos + 1) % 16) == 0) || ((pos + 1) == available))
 2499              		.loc 1 472 13 view .LVU821
 2500 009a FFF7FEFF 		bl	printf
 2501              	.LVL222:
 473:Src/nvm.c     ****                 printf("\r\n");
 2502              		.loc 1 473 16 view .LVU822
 2503 009e 1BF00F0F 		tst	fp, #15
 471:Src/nvm.c     ****             printf(" %02x", buf[pos]);
 2504              		.loc 1 471 18 view .LVU823
 2505 00a2 E4B2     		uxtb	r4, r4
 472:Src/nvm.c     ****             if ((((pos + 1) % 16) == 0) || ((pos + 1) == available))
 2506              		.loc 1 472 13 is_stmt 1 view .LVU824
 473:Src/nvm.c     ****                 printf("\r\n");
 2507              		.loc 1 473 13 view .LVU825
 2508              	.LVL223:
 2509              		.loc 1 474 17 view .LVU826
 475:Src/nvm.c     ****             osDelay(2);
 2510              		.loc 1 475 13 view .LVU827
ARM GAS  /tmp/cccHlqCc.s 			page 63


 474:Src/nvm.c     ****             osDelay(2);
 2511              		.loc 1 474 17 is_stmt 0 view .LVU828
 2512 00a4 4046     		mov	r0, r8
 473:Src/nvm.c     ****                 printf("\r\n");
 2513              		.loc 1 473 16 view .LVU829
 2514 00a6 00F00581 		beq	.L175
 473:Src/nvm.c     ****                 printf("\r\n");
 2515              		.loc 1 473 41 discriminator 1 view .LVU830
 2516 00aa AB45     		cmp	fp, r5
 2517 00ac 00F00281 		beq	.L175
 2518              		.loc 1 475 13 view .LVU831
 2519 00b0 0220     		movs	r0, #2
 2520 00b2 FFF7FEFF 		bl	osDelay
 2521              	.LVL224:
 470:Src/nvm.c     ****             seed += buf[pos];
 2522              		.loc 1 470 47 is_stmt 1 view .LVU832
 470:Src/nvm.c     ****             seed += buf[pos];
 2523              		.loc 1 470 30 view .LVU833
 470:Src/nvm.c     ****             seed += buf[pos];
 2524              		.loc 1 470 30 is_stmt 0 view .LVU834
 2525 00b6 EAE7     		b	.L178
 2526              	.LVL225:
 2527              	.L173:
 470:Src/nvm.c     ****             seed += buf[pos];
 2528              		.loc 1 470 30 view .LVU835
 2529              	.LBE116:
 2530              	.LBE118:
 476:Src/nvm.c     ****         }
 477:Src/nvm.c     ****     } else {
 478:Src/nvm.c     ****         printf("NVM is empty\r\n"); osDelay(5);
 2531              		.loc 1 478 9 is_stmt 1 view .LVU836
 2532 00b8 A348     		ldr	r0, .L228+16
 2533 00ba DFF89CA2 		ldr	r10, .L228+32
 2534 00be FFF7FEFF 		bl	puts
 2535              	.LVL226:
 2536              		.loc 1 478 37 view .LVU837
 2537 00c2 0520     		movs	r0, #5
 2538 00c4 FFF7FEFF 		bl	osDelay
 2539              	.LVL227:
 2540 00c8 9E4B     		ldr	r3, .L228+12
 2541 00ca FB60     		str	r3, [r7, #12]
 2542 00cc 2522     		movs	r2, #37
 460:Src/nvm.c     ****         goto fail;
 2543              		.loc 1 460 17 is_stmt 0 view .LVU838
 2544 00ce 0123     		movs	r3, #1
 2545              		.loc 1 478 37 view .LVU839
 2546 00d0 4FF0020B 		mov	fp, #2
 455:Src/nvm.c     **** 
 2547              		.loc 1 455 13 view .LVU840
 2548 00d4 3446     		mov	r4, r6
 460:Src/nvm.c     ****         goto fail;
 2549              		.loc 1 460 17 view .LVU841
 2550 00d6 BB60     		str	r3, [r7, #8]
 2551 00d8 1546     		mov	r5, r2
 2552              	.LVL228:
 2553              	.L179:
 479:Src/nvm.c     ****     }
ARM GAS  /tmp/cccHlqCc.s 			page 64


 480:Src/nvm.c     **** 
 481:Src/nvm.c     ****     // store new bytes in NVM (data based on seed)
 482:Src/nvm.c     ****     printf("write 0x%02x, ..., 0x%02x to NVM\r\n", seed, seed + len - 1); osDelay(5);
 2554              		.loc 1 482 5 is_stmt 1 view .LVU842
 2555 00da 3146     		mov	r1, r6
 2556 00dc 9B48     		ldr	r0, .L228+20
 2557 00de FFF7FEFF 		bl	printf
 2558              	.LVL229:
 2559              		.loc 1 482 75 view .LVU843
 2560 00e2 0520     		movs	r0, #5
 2561 00e4 FFF7FEFF 		bl	osDelay
 2562              	.LVL230:
 483:Src/nvm.c     ****     for (size_t i = 0; i < len; i++)
 2563              		.loc 1 483 5 view .LVU844
 2564              	.LBB119:
 2565              		.loc 1 483 10 view .LVU845
 2566              		.loc 1 483 24 view .LVU846
 2567 00e8 0023     		movs	r3, #0
 2568 00ea 621C     		adds	r2, r4, #1
 2569 00ec 64F30703 		bfi	r3, r4, #0, #8
 2570              		.loc 1 483 24 is_stmt 0 view .LVU847
 2571 00f0 62F30F23 		bfi	r3, r2, #8, #8
 2572 00f4 A21C     		adds	r2, r4, #2
 2573 00f6 62F31743 		bfi	r3, r2, #16, #8
 2574 00fa E21C     		adds	r2, r4, #3
 2575 00fc 62F31F63 		bfi	r3, r2, #24, #8
 2576 0100 03F07F32 		and	r2, r3, #2139062143
 2577 0104 02F10432 		add	r2, r2, #67372036
 484:Src/nvm.c     ****         data[i] = seed++;
 2578              		.loc 1 484 17 view .LVU848
 2579 0108 BB62     		str	r3, [r7, #40]
 2580 010a 03F08033 		and	r3, r3, #-2139062144
 2581 010e 5340     		eors	r3, r3, r2
 2582              	.LVL231:
 2583              		.loc 1 484 9 is_stmt 1 view .LVU849
 483:Src/nvm.c     ****     for (size_t i = 0; i < len; i++)
 2584              		.loc 1 483 33 view .LVU850
 483:Src/nvm.c     ****     for (size_t i = 0; i < len; i++)
 2585              		.loc 1 483 24 view .LVU851
 2586 0110 03F07F32 		and	r2, r3, #2139062143
 2587 0114 02F10432 		add	r2, r2, #67372036
 2588              		.loc 1 484 17 is_stmt 0 view .LVU852
 2589 0118 FB62     		str	r3, [r7, #44]
 2590 011a 03F08033 		and	r3, r3, #-2139062144
 2591 011e 5340     		eors	r3, r3, r2
 2592              		.loc 1 484 9 is_stmt 1 view .LVU853
 483:Src/nvm.c     ****     for (size_t i = 0; i < len; i++)
 2593              		.loc 1 483 33 view .LVU854
 483:Src/nvm.c     ****     for (size_t i = 0; i < len; i++)
 2594              		.loc 1 483 24 view .LVU855
 2595 0120 03F07F32 		and	r2, r3, #2139062143
 2596 0124 02F10432 		add	r2, r2, #67372036
 2597              		.loc 1 484 17 is_stmt 0 view .LVU856
 2598 0128 3B63     		str	r3, [r7, #48]
 2599 012a 03F08033 		and	r3, r3, #-2139062144
 2600 012e 5340     		eors	r3, r3, r2
 2601              		.loc 1 484 9 is_stmt 1 view .LVU857
ARM GAS  /tmp/cccHlqCc.s 			page 65


 483:Src/nvm.c     ****     for (size_t i = 0; i < len; i++)
 2602              		.loc 1 483 33 view .LVU858
 483:Src/nvm.c     ****     for (size_t i = 0; i < len; i++)
 2603              		.loc 1 483 24 view .LVU859
 2604 0130 02F07F32 		and	r2, r2, #2139062143
 2605 0134 02F10432 		add	r2, r2, #67372036
 2606              		.loc 1 484 17 is_stmt 0 view .LVU860
 2607 0138 7B63     		str	r3, [r7, #52]
 2608 013a 03F08033 		and	r3, r3, #-2139062144
 2609 013e 5340     		eors	r3, r3, r2
 2610              		.loc 1 484 9 is_stmt 1 view .LVU861
 483:Src/nvm.c     ****     for (size_t i = 0; i < len; i++)
 2611              		.loc 1 483 33 view .LVU862
 483:Src/nvm.c     ****     for (size_t i = 0; i < len; i++)
 2612              		.loc 1 483 24 view .LVU863
 2613 0140 02F07F32 		and	r2, r2, #2139062143
 2614 0144 02F10432 		add	r2, r2, #67372036
 2615              		.loc 1 484 17 is_stmt 0 view .LVU864
 2616 0148 BB63     		str	r3, [r7, #56]
 2617 014a 03F08033 		and	r3, r3, #-2139062144
 2618 014e 5340     		eors	r3, r3, r2
 2619              		.loc 1 484 9 is_stmt 1 view .LVU865
 483:Src/nvm.c     ****     for (size_t i = 0; i < len; i++)
 2620              		.loc 1 483 33 view .LVU866
 483:Src/nvm.c     ****     for (size_t i = 0; i < len; i++)
 2621              		.loc 1 483 24 view .LVU867
 2622 0150 02F07F32 		and	r2, r2, #2139062143
 2623 0154 02F10432 		add	r2, r2, #67372036
 2624              		.loc 1 484 17 is_stmt 0 view .LVU868
 2625 0158 FB63     		str	r3, [r7, #60]
 2626 015a 03F08033 		and	r3, r3, #-2139062144
 2627 015e 5340     		eors	r3, r3, r2
 2628              		.loc 1 484 9 is_stmt 1 view .LVU869
 483:Src/nvm.c     ****     for (size_t i = 0; i < len; i++)
 2629              		.loc 1 483 33 view .LVU870
 483:Src/nvm.c     ****     for (size_t i = 0; i < len; i++)
 2630              		.loc 1 483 24 view .LVU871
 2631              	.LBE119:
 2632              	.LBB120:
 2633              	.LBB121:
 317:Src/nvm.c     **** 
 2634              		.loc 1 317 35 is_stmt 0 view .LVU872
 2635 0160 FA68     		ldr	r2, [r7, #12]
 2636              	.LBE121:
 2637              	.LBE120:
 2638              	.LBB135:
 2639              		.loc 1 484 17 view .LVU873
 2640 0162 87F84D50 		strb	r5, [r7, #77]
 2641 0166 2434     		adds	r4, r4, #36
 2642 0168 87F84C40 		strb	r4, [r7, #76]
 2643              	.LBE135:
 2644              	.LBB136:
 2645              	.LBB128:
 317:Src/nvm.c     **** 
 2646              		.loc 1 317 35 view .LVU874
 2647 016c 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
 2648              	.LBE128:
ARM GAS  /tmp/cccHlqCc.s 			page 66


 2649              	.LBE136:
 2650              	.LBB137:
 2651              		.loc 1 484 17 view .LVU875
 2652 016e 3B64     		str	r3, [r7, #64]
 2653              	.LBE137:
 2654              	.LBB138:
 2655              	.LBB129:
 317:Src/nvm.c     **** 
 2656              		.loc 1 317 35 view .LVU876
 2657 0170 C4F10104 		rsb	r4, r4, #1
 317:Src/nvm.c     **** 
 2658              		.loc 1 317 15 view .LVU877
 2659 0174 04EB4404 		add	r4, r4, r4, lsl #1
 2660 0178 03F07F32 		and	r2, r3, #2139062143
 2661 017c 02F10432 		add	r2, r2, #67372036
 2662 0180 0AEBC405 		add	r5, r10, r4, lsl #3
 2663 0184 03F08033 		and	r3, r3, #-2139062144
 2664 0188 5340     		eors	r3, r3, r2
 317:Src/nvm.c     **** 
 2665              		.loc 1 317 15 view .LVU878
 2666              	.LBE129:
 2667              	.LBE138:
 2668              	.LBB139:
 2669              		.loc 1 484 9 is_stmt 1 view .LVU879
 483:Src/nvm.c     ****     for (size_t i = 0; i < len; i++)
 2670              		.loc 1 483 33 view .LVU880
 483:Src/nvm.c     ****     for (size_t i = 0; i < len; i++)
 2671              		.loc 1 483 24 view .LVU881
 2672              		.loc 1 484 9 view .LVU882
 2673              		.loc 1 484 9 is_stmt 0 view .LVU883
 2674              	.LBE139:
 2675              	.LBB140:
 2676              	.LBB130:
 320:Src/nvm.c     ****         return -1;
 2677              		.loc 1 320 33 view .LVU884
 2678 018a D5E90202 		ldrd	r0, r2, [r5, #8]
 2679              	.LBE130:
 2680              	.LBE140:
 2681              	.LBB141:
 2682              		.loc 1 484 17 view .LVU885
 2683 018e 03F07F31 		and	r1, r3, #2139062143
 2684 0192 7B64     		str	r3, [r7, #68]
 483:Src/nvm.c     ****         data[i] = seed++;
 2685              		.loc 1 483 33 is_stmt 1 view .LVU886
 483:Src/nvm.c     ****         data[i] = seed++;
 2686              		.loc 1 483 24 view .LVU887
 2687              		.loc 1 484 9 view .LVU888
 2688              		.loc 1 484 9 is_stmt 0 view .LVU889
 2689              	.LBE141:
 2690              	.LBB142:
 2691              	.LBB131:
 320:Src/nvm.c     ****         return -1;
 2692              		.loc 1 320 33 view .LVU890
 2693 0194 821A     		subs	r2, r0, r2
 2694              	.LBE131:
 2695              	.LBE142:
 2696              	.LBB143:
ARM GAS  /tmp/cccHlqCc.s 			page 67


 2697              		.loc 1 484 17 view .LVU891
 2698 0196 03F08033 		and	r3, r3, #-2139062144
 2699 019a 01F10431 		add	r1, r1, #67372036
 2700 019e 4B40     		eors	r3, r3, r1
 2701              	.LBE143:
 2702              	.LBB144:
 2703              	.LBB132:
 320:Src/nvm.c     ****         return -1;
 2704              		.loc 1 320 8 view .LVU892
 2705 01a0 042A     		cmp	r2, #4
 317:Src/nvm.c     **** 
 2706              		.loc 1 317 15 view .LVU893
 2707 01a2 4FEAC404 		lsl	r4, r4, #3
 2708              	.LBE132:
 2709              	.LBE144:
 2710              	.LBB145:
 2711              		.loc 1 484 17 view .LVU894
 2712 01a6 BB64     		str	r3, [r7, #72]
 483:Src/nvm.c     ****         data[i] = seed++;
 2713              		.loc 1 483 33 is_stmt 1 view .LVU895
 483:Src/nvm.c     ****         data[i] = seed++;
 2714              		.loc 1 483 24 view .LVU896
 2715              	.LVL232:
 2716              		.loc 1 484 9 view .LVU897
 483:Src/nvm.c     ****         data[i] = seed++;
 2717              		.loc 1 483 33 view .LVU898
 483:Src/nvm.c     ****         data[i] = seed++;
 2718              		.loc 1 483 24 view .LVU899
 2719              		.loc 1 484 9 view .LVU900
 483:Src/nvm.c     ****         data[i] = seed++;
 2720              		.loc 1 483 33 view .LVU901
 483:Src/nvm.c     ****         data[i] = seed++;
 2721              		.loc 1 483 24 view .LVU902
 2722              	.LBE145:
 485:Src/nvm.c     ****     if (progress++, NVM_start_write(len) != 0)
 2723              		.loc 1 485 5 view .LVU903
 2724              	.LBB146:
 2725              	.LBI120:
 315:Src/nvm.c     ****     int status = 0;
 2726              		.loc 1 315 5 view .LVU904
 2727              	.LBB133:
 316:Src/nvm.c     ****     sector_t *target = &sectors[1 - read_sector_];
 2728              		.loc 1 316 5 view .LVU905
 317:Src/nvm.c     **** 
 2729              		.loc 1 317 5 view .LVU906
 319:Src/nvm.c     ****     if (length > target->n_data - target->n_reserved)
 2730              		.loc 1 319 5 view .LVU907
 320:Src/nvm.c     ****         return -1;
 2731              		.loc 1 320 5 view .LVU908
 320:Src/nvm.c     ****         return -1;
 2732              		.loc 1 320 8 is_stmt 0 view .LVU909
 2733 01a8 77D9     		bls	.L172
 324:Src/nvm.c     ****         if ((status = erase(target)))
 2734              		.loc 1 324 5 is_stmt 1 view .LVU910
 324:Src/nvm.c     ****         if ((status = erase(target)))
 2735              		.loc 1 324 41 is_stmt 0 view .LVU911
 2736 01aa 5AF80410 		ldr	r1, [r10, r4]
ARM GAS  /tmp/cccHlqCc.s 			page 68


 324:Src/nvm.c     ****         if ((status = erase(target)))
 2737              		.loc 1 324 33 view .LVU912
 2738 01ae 401A     		subs	r0, r0, r1
 324:Src/nvm.c     ****         if ((status = erase(target)))
 2739              		.loc 1 324 8 view .LVU913
 2740 01b0 0428     		cmp	r0, #4
 2741 01b2 20D8     		bhi	.L180
 325:Src/nvm.c     ****             return status;
 2742              		.loc 1 325 9 is_stmt 1 view .LVU914
 2743              	.LVL233:
 2744              	.LBB122:
 2745              	.LBI122:
  98:Src/nvm.c     ****     FLASH_EraseInitTypeDef erase_struct = {
 2746              		.loc 1 98 5 view .LVU915
 2747              	.LBB123:
  99:Src/nvm.c     ****         .TypeErase = FLASH_TYPEERASE_PAGES,    // Changed from SECTORS to PAGES
 2748              		.loc 1 99 5 view .LVU916
  99:Src/nvm.c     ****         .TypeErase = FLASH_TYPEERASE_PAGES,    // Changed from SECTORS to PAGES
 2749              		.loc 1 99 28 is_stmt 0 view .LVU917
 2750 01b4 6B68     		ldr	r3, [r5, #4]
 2751 01b6 3B62     		str	r3, [r7, #32]
 2752 01b8 0123     		movs	r3, #1
 2753 01ba 0022     		movs	r2, #0
 2754 01bc 7B62     		str	r3, [r7, #36]
 106:Src/nvm.c     ****     HAL_FLASH_ClearError();
 2755              		.loc 1 106 5 is_stmt 1 view .LVU918
  99:Src/nvm.c     ****         .TypeErase = FLASH_TYPEERASE_PAGES,    // Changed from SECTORS to PAGES
 2756              		.loc 1 99 28 is_stmt 0 view .LVU919
 2757 01be 0123     		movs	r3, #1
 2758 01c0 C7E90623 		strd	r2, [r7, #24]
 106:Src/nvm.c     ****     HAL_FLASH_ClearError();
 2759              		.loc 1 106 5 view .LVU920
 2760 01c4 FFF7FEFF 		bl	HAL_FLASH_Unlock
 2761              	.LVL234:
 107:Src/nvm.c     ****     uint32_t page_error;
 2762              		.loc 1 107 5 is_stmt 1 view .LVU921
 107:Src/nvm.c     ****     uint32_t page_error;
 2763              		.loc 1 107 5 view .LVU922
 107:Src/nvm.c     ****     uint32_t page_error;
 2764              		.loc 1 107 5 view .LVU923
 2765 01c8 614B     		ldr	r3, .L228+24
 2766 01ca 9A69     		ldr	r2, [r3, #24]
 2767 01cc 4CF2FA31 		movw	r1, #50170
 2768 01d0 42F04042 		orr	r2, r2, #-1073741824
 2769 01d4 9A61     		str	r2, [r3, #24]
 107:Src/nvm.c     ****     uint32_t page_error;
 2770              		.loc 1 107 5 view .LVU924
 107:Src/nvm.c     ****     uint32_t page_error;
 2771              		.loc 1 107 5 view .LVU925
 109:Src/nvm.c     ****         goto fail;
 2772              		.loc 1 109 9 is_stmt 0 view .LVU926
 2773 01d6 07F11800 		add	r0, r7, #24
 107:Src/nvm.c     ****     uint32_t page_error;
 2774              		.loc 1 107 5 view .LVU927
 2775 01da 1961     		str	r1, [r3, #16]
 107:Src/nvm.c     ****     uint32_t page_error;
 2776              		.loc 1 107 5 is_stmt 1 view .LVU928
ARM GAS  /tmp/cccHlqCc.s 			page 69


 108:Src/nvm.c     ****     if (HAL_FLASHEx_Erase(&erase_struct, &page_error) != HAL_OK)
 2777              		.loc 1 108 5 view .LVU929
 109:Src/nvm.c     ****         goto fail;
 2778              		.loc 1 109 5 view .LVU930
 109:Src/nvm.c     ****         goto fail;
 2779              		.loc 1 109 9 is_stmt 0 view .LVU931
 2780 01dc 07F11401 		add	r1, r7, #20
 2781 01e0 FFF7FEFF 		bl	HAL_FLASHEx_Erase
 2782              	.LVL235:
 109:Src/nvm.c     ****         goto fail;
 2783              		.loc 1 109 8 view .LVU932
 2784 01e4 0028     		cmp	r0, #0
 2785 01e6 7CD1     		bne	.L221
 111:Src/nvm.c     **** 
 2786              		.loc 1 111 5 is_stmt 1 view .LVU933
 111:Src/nvm.c     **** 
 2787              		.loc 1 111 19 is_stmt 0 view .LVU934
 2788 01e8 EB68     		ldr	r3, [r5, #12]
 2789 01ea 4AF80430 		str	r3, [r10, r4]
 113:Src/nvm.c     ****     return 0;
 2790              		.loc 1 113 5 is_stmt 1 view .LVU935
 2791 01ee FFF7FEFF 		bl	HAL_FLASH_Lock
 2792              	.LVL236:
 2793              	.L219:
 114:Src/nvm.c     **** fail:
 2794              		.loc 1 114 5 view .LVU936
 114:Src/nvm.c     **** fail:
 2795              		.loc 1 114 5 is_stmt 0 view .LVU937
 2796              	.LBE123:
 2797              	.LBE122:
 329:Src/nvm.c     ****     if (status)
 2798              		.loc 1 329 14 view .LVU938
 2799 01f2 5AF80410 		ldr	r1, [r10, r4]
 2800              	.L180:
 329:Src/nvm.c     ****     if (status)
 2801              		.loc 1 329 5 is_stmt 1 view .LVU939
 329:Src/nvm.c     ****     if (status)
 2802              		.loc 1 329 14 is_stmt 0 view .LVU940
 2803 01f6 2846     		mov	r0, r5
 2804 01f8 0123     		movs	r3, #1
 2805 01fa 0522     		movs	r2, #5
 2806 01fc FFF7FEFF 		bl	set_allocation_state
 2807              	.LVL237:
 330:Src/nvm.c     ****         return status;
 2808              		.loc 1 330 5 is_stmt 1 view .LVU941
 330:Src/nvm.c     ****         return status;
 2809              		.loc 1 330 8 is_stmt 0 view .LVU942
 2810 0200 0028     		cmp	r0, #0
 2811 0202 4AD1     		bne	.L172
 333:Src/nvm.c     ****     return 0;
 2812              		.loc 1 333 5 is_stmt 1 view .LVU943
 333:Src/nvm.c     ****     return 0;
 2813              		.loc 1 333 21 is_stmt 0 view .LVU944
 2814 0204 DFF85C81 		ldr	r8, .L228+44
 2815 0208 0523     		movs	r3, #5
 2816 020a C8F80030 		str	r3, [r8]
 334:Src/nvm.c     **** }
ARM GAS  /tmp/cccHlqCc.s 			page 70


 2817              		.loc 1 334 5 is_stmt 1 view .LVU945
 2818              	.LVL238:
 334:Src/nvm.c     **** }
 2819              		.loc 1 334 5 is_stmt 0 view .LVU946
 2820              	.LBE133:
 2821              	.LBE146:
 486:Src/nvm.c     ****         goto fail;
 487:Src/nvm.c     ****     if (progress++, NVM_write(0, data, len / 2))
 2822              		.loc 1 487 5 is_stmt 1 view .LVU947
 2823              	.LBB147:
 2824              	.LBI147:
 347:Src/nvm.c     ****     if (offset + length > (n_staging_area_ << 3))
 2825              		.loc 1 347 5 view .LVU948
 2826              	.LBB148:
 348:Src/nvm.c     ****         return -1;
 2827              		.loc 1 348 5 view .LVU949
 350:Src/nvm.c     **** 
 2828              		.loc 1 350 5 view .LVU950
 350:Src/nvm.c     **** 
 2829              		.loc 1 350 35 is_stmt 0 view .LVU951
 2830 020e FB68     		ldr	r3, [r7, #12]
 2831 0210 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 352:Src/nvm.c     ****     HAL_FLASH_ClearError();
 2832              		.loc 1 352 5 view .LVU952
 2833 0212 FFF7FEFF 		bl	HAL_FLASH_Unlock
 2834              	.LVL239:
 353:Src/nvm.c     **** 
 2835              		.loc 1 353 5 view .LVU953
 2836 0216 4E4B     		ldr	r3, .L228+24
 2837 0218 9A69     		ldr	r2, [r3, #24]
 350:Src/nvm.c     **** 
 2838              		.loc 1 350 35 view .LVU954
 2839 021a C4F10104 		rsb	r4, r4, #1
 2840              	.LVL240:
 352:Src/nvm.c     ****     HAL_FLASH_ClearError();
 2841              		.loc 1 352 5 is_stmt 1 view .LVU955
 353:Src/nvm.c     **** 
 2842              		.loc 1 353 5 view .LVU956
 353:Src/nvm.c     **** 
 2843              		.loc 1 353 5 view .LVU957
 353:Src/nvm.c     **** 
 2844              		.loc 1 353 5 view .LVU958
 374:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 2845              		.loc 1 374 40 is_stmt 0 view .LVU959
 2846 021e 04EB4404 		add	r4, r4, r4, lsl #1
 2847              	.LVL241:
 353:Src/nvm.c     **** 
 2848              		.loc 1 353 5 view .LVU960
 2849 0222 42F04042 		orr	r2, r2, #-1073741824
 2850 0226 9A61     		str	r2, [r3, #24]
 353:Src/nvm.c     **** 
 2851              		.loc 1 353 5 is_stmt 1 view .LVU961
 353:Src/nvm.c     **** 
 2852              		.loc 1 353 5 view .LVU962
 374:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 2853              		.loc 1 374 40 is_stmt 0 view .LVU963
 2854 0228 E500     		lsls	r5, r4, #3
ARM GAS  /tmp/cccHlqCc.s 			page 71


 353:Src/nvm.c     **** 
 2855              		.loc 1 353 5 view .LVU964
 2856 022a 4CF2FA32 		movw	r2, #50170
 374:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 2857              		.loc 1 374 40 view .LVU965
 2858 022e 0AEBC404 		add	r4, r10, r4, lsl #3
 353:Src/nvm.c     **** 
 2859              		.loc 1 353 5 view .LVU966
 2860 0232 1A61     		str	r2, [r3, #16]
 357:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 2861              		.loc 1 357 12 is_stmt 1 view .LVU967
 364:Src/nvm.c     ****         if (length == 8) {
 2862              		.loc 1 364 12 view .LVU968
 365:Src/nvm.c     ****             // Last word uses FAST_AND_LAST
 2863              		.loc 1 365 9 view .LVU969
 373:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 2864              		.loc 1 373 13 view .LVU970
 374:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 2865              		.loc 1 374 33 is_stmt 0 view .LVU971
 2866 0234 6369     		ldr	r3, [r4, #20]
 374:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 2867              		.loc 1 374 46 view .LVU972
 2868 0236 5AF80510 		ldr	r1, [r10, r5]
 373:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 2869              		.loc 1 373 17 view .LVU973
 2870 023a 0120     		movs	r0, #1
 2871 023c 03EBC101 		add	r1, r3, r1, lsl #3
 2872 0240 D7E90A23 		ldrd	r2, [r7, #40]
 2873 0244 FFF7FEFF 		bl	HAL_FLASH_Program
 2874              	.LVL242:
 373:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 2875              		.loc 1 373 16 view .LVU974
 2876 0248 F8B9     		cbnz	r0, .L182
 364:Src/nvm.c     ****         if (length == 8) {
 2877              		.loc 1 364 25 is_stmt 1 view .LVU975
 2878              	.LVL243:
 364:Src/nvm.c     ****         if (length == 8) {
 2879              		.loc 1 364 12 view .LVU976
 365:Src/nvm.c     ****             // Last word uses FAST_AND_LAST
 2880              		.loc 1 365 9 view .LVU977
 373:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 2881              		.loc 1 373 13 view .LVU978
 374:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 2882              		.loc 1 374 46 is_stmt 0 view .LVU979
 2883 024a 5AF80530 		ldr	r3, [r10, r5]
 374:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 2884              		.loc 1 374 33 view .LVU980
 2885 024e 6169     		ldr	r1, [r4, #20]
 2886 0250 01EBC301 		add	r1, r1, r3, lsl #3
 373:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 2887              		.loc 1 373 17 view .LVU981
 2888 0254 0831     		adds	r1, r1, #8
 2889 0256 D7E90C23 		ldrd	r2, [r7, #48]
 2890 025a 0120     		movs	r0, #1
 2891 025c FFF7FEFF 		bl	HAL_FLASH_Program
 2892              	.LVL244:
 373:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
ARM GAS  /tmp/cccHlqCc.s 			page 72


 2893              		.loc 1 373 16 view .LVU982
 2894 0260 98B9     		cbnz	r0, .L182
 364:Src/nvm.c     ****         if (length == 8) {
 2895              		.loc 1 364 30 view .LVU983
 2896 0262 07F13806 		add	r6, r7, #56
 364:Src/nvm.c     ****         if (length == 8) {
 2897              		.loc 1 364 43 view .LVU984
 2898 0266 1025     		movs	r5, #16
 2899 0268 01E0     		b	.L183
 2900              	.LVL245:
 2901              	.L223:
 381:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 2902              		.loc 1 381 5 view .LVU985
 2903 026a 132D     		cmp	r5, #19
 2904 026c 40D0     		beq	.L222
 2905              	.LVL246:
 2906              	.L183:
 382:Src/nvm.c     ****                 ((uintptr_t)&target->data[target->index]) + offset, 
 2907              		.loc 1 382 9 is_stmt 1 view .LVU986
 383:Src/nvm.c     ****                 *(uint64_t*)data) != HAL_OK)
 2908              		.loc 1 383 42 is_stmt 0 view .LVU987
 2909 026e 2368     		ldr	r3, [r4]
 383:Src/nvm.c     ****                 *(uint64_t*)data) != HAL_OK)
 2910              		.loc 1 383 29 view .LVU988
 2911 0270 6169     		ldr	r1, [r4, #20]
 2912 0272 01EBC301 		add	r1, r1, r3, lsl #3
 382:Src/nvm.c     ****                 ((uintptr_t)&target->data[target->index]) + offset, 
 2913              		.loc 1 382 13 view .LVU989
 2914 0276 2944     		add	r1, r1, r5
 2915 0278 D6E90023 		ldrd	r2, [r6]
 2916 027c 0020     		movs	r0, #0
 381:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 2917              		.loc 1 381 28 view .LVU990
 2918 027e 0135     		adds	r5, r5, #1
 2919              	.LVL247:
 381:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 2920              		.loc 1 381 20 view .LVU991
 2921 0280 0136     		adds	r6, r6, #1
 2922              	.LVL248:
 382:Src/nvm.c     ****                 ((uintptr_t)&target->data[target->index]) + offset, 
 2923              		.loc 1 382 13 view .LVU992
 2924 0282 FFF7FEFF 		bl	HAL_FLASH_Program
 2925              	.LVL249:
 381:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 2926              		.loc 1 381 20 is_stmt 1 view .LVU993
 381:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 2927              		.loc 1 381 12 view .LVU994
 382:Src/nvm.c     ****                 ((uintptr_t)&target->data[target->index]) + offset, 
 2928              		.loc 1 382 12 is_stmt 0 view .LVU995
 2929 0286 0028     		cmp	r0, #0
 2930 0288 EFD0     		beq	.L223
 2931              	.LVL250:
 2932              	.L182:
 2933              	.LDL8:
 391:Src/nvm.c     ****     return HAL_FLASH_GetError(); // non-zero
 2934              		.loc 1 391 5 is_stmt 1 view .LVU996
 2935 028a FFF7FEFF 		bl	HAL_FLASH_Lock
ARM GAS  /tmp/cccHlqCc.s 			page 73


 2936              	.LVL251:
 392:Src/nvm.c     **** }
 2937              		.loc 1 392 5 view .LVU997
 392:Src/nvm.c     **** }
 2938              		.loc 1 392 12 is_stmt 0 view .LVU998
 2939 028e FFF7FEFF 		bl	HAL_FLASH_GetError
 2940              	.LVL252:
 2941              	.LBE148:
 2942              	.LBE147:
 2943              		.loc 1 487 8 view .LVU999
 2944 0292 78B3     		cbz	r0, .L184
 2945              		.loc 1 487 17 view .LVU1000
 2946 0294 BB68     		ldr	r3, [r7, #8]
 2947 0296 03F1020B 		add	fp, r3, #2
 2948              	.LVL253:
 2949              	.L172:
 488:Src/nvm.c     ****         goto fail;
 489:Src/nvm.c     ****     if (progress++, NVM_write(len / 2, &data[len / 2], len - (len / 2)))
 490:Src/nvm.c     ****         goto fail;
 491:Src/nvm.c     ****     if (progress++, NVM_commit())
 492:Src/nvm.c     ****         goto fail;
 493:Src/nvm.c     ****     printf("new data committed to NVM\r\n"); osDelay(5);
 494:Src/nvm.c     **** 
 495:Src/nvm.c     ****     return;
 496:Src/nvm.c     **** 
 497:Src/nvm.c     **** fail:
 498:Src/nvm.c     ****     printf("NVM test failed at %d!\r\n", progress);
 2950              		.loc 1 498 5 is_stmt 1 view .LVU1001
 2951 029a 2E48     		ldr	r0, .L228+28
 2952 029c 5946     		mov	r1, fp
 2953 029e FFF7FEFF 		bl	printf
 2954              	.LVL254:
 2955 02a2 18EE103A 		vmov	r3, s16	@ int
 2956 02a6 9D46     		mov	sp, r3
 2957              	.LVL255:
 2958              	.L171:
 499:Src/nvm.c     **** }
 2959              		.loc 1 499 1 is_stmt 0 view .LVU1002
 2960 02a8 5437     		adds	r7, r7, #84
 2961              	.LCFI43:
 2962              		.cfi_remember_state
 2963              		.cfi_def_cfa_offset 44
 2964 02aa BD46     		mov	sp, r7
 2965              	.LCFI44:
 2966              		.cfi_def_cfa_register 13
 2967              		@ sp needed
 2968 02ac BDEC028B 		vldm	sp!, {d8}
 2969              	.LCFI45:
 2970              		.cfi_restore 80
 2971              		.cfi_restore 81
 2972              		.cfi_def_cfa_offset 36
 2973 02b0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2974              	.LVL256:
 2975              	.L175:
 2976              	.LCFI46:
 2977              		.cfi_restore_state
 2978              	.LBB150:
ARM GAS  /tmp/cccHlqCc.s 			page 74


 2979              	.LBB117:
 474:Src/nvm.c     ****             osDelay(2);
 2980              		.loc 1 474 17 view .LVU1003
 2981 02b4 FFF7FEFF 		bl	puts
 2982              	.LVL257:
 475:Src/nvm.c     ****         }
 2983              		.loc 1 475 13 is_stmt 1 view .LVU1004
 2984 02b8 0220     		movs	r0, #2
 2985 02ba FFF7FEFF 		bl	osDelay
 2986              	.LVL258:
 470:Src/nvm.c     ****             seed += buf[pos];
 2987              		.loc 1 470 47 view .LVU1005
 470:Src/nvm.c     ****             seed += buf[pos];
 2988              		.loc 1 470 30 view .LVU1006
 470:Src/nvm.c     ****             seed += buf[pos];
 2989              		.loc 1 470 9 is_stmt 0 view .LVU1007
 2990 02be AB45     		cmp	fp, r5
 2991 02c0 7FF4E5AE 		bne	.L178
 2992 02c4 18EE903A 		vmov	r3, s17	@ int
 2993              	.LBE117:
 2994              	.LBE150:
 482:Src/nvm.c     ****     for (size_t i = 0; i < len; i++)
 2995              		.loc 1 482 5 view .LVU1008
 2996 02c8 04F12505 		add	r5, r4, #37
 2997              	.LVL259:
 482:Src/nvm.c     ****     for (size_t i = 0; i < len; i++)
 2998              		.loc 1 482 5 view .LVU1009
 2999 02cc 9D46     		mov	sp, r3
 3000              	.LVL260:
 3001              	.LBB151:
 468:Src/nvm.c     ****             goto fail;
 3002              		.loc 1 468 21 view .LVU1010
 3003 02ce 0223     		movs	r3, #2
 3004              	.LBE151:
 482:Src/nvm.c     ****     for (size_t i = 0; i < len; i++)
 3005              		.loc 1 482 5 view .LVU1011
 3006 02d0 2646     		mov	r6, r4
 3007 02d2 2A46     		mov	r2, r5
 3008 02d4 4FF0030B 		mov	fp, #3
 3009              	.LVL261:
 3010              	.LBB152:
 468:Src/nvm.c     ****             goto fail;
 3011              		.loc 1 468 21 view .LVU1012
 3012 02d8 BB60     		str	r3, [r7, #8]
 3013              	.LBE152:
 3014 02da FEE6     		b	.L179
 3015              	.LVL262:
 3016              	.L199:
 460:Src/nvm.c     ****         goto fail;
 3017              		.loc 1 460 17 view .LVU1013
 3018 02dc 4FF0010B 		mov	fp, #1
 3019 02e0 DBE7     		b	.L172
 3020              	.LVL263:
 3021              	.L221:
 3022              	.LBB153:
 3023              	.LBB134:
 3024              	.LBB127:
ARM GAS  /tmp/cccHlqCc.s 			page 75


 3025              	.LBB126:
 3026              	.LBB124:
 3027              	.LBI124:
  98:Src/nvm.c     ****     FLASH_EraseInitTypeDef erase_struct = {
 3028              		.loc 1 98 5 is_stmt 1 view .LVU1014
 3029              	.LBB125:
 110:Src/nvm.c     ****     sector->index = sector->n_reserved;
 3030              		.loc 1 110 9 view .LVU1015
 3031              	.LDL9:
 116:Src/nvm.c     ****     return HAL_FLASH_GetError();
 3032              		.loc 1 116 5 view .LVU1016
 3033 02e2 FFF7FEFF 		bl	HAL_FLASH_Lock
 3034              	.LVL264:
 117:Src/nvm.c     **** }
 3035              		.loc 1 117 5 view .LVU1017
 117:Src/nvm.c     **** }
 3036              		.loc 1 117 12 is_stmt 0 view .LVU1018
 3037 02e6 FFF7FEFF 		bl	HAL_FLASH_GetError
 3038              	.LVL265:
 117:Src/nvm.c     **** }
 3039              		.loc 1 117 12 view .LVU1019
 3040              	.LBE125:
 3041              	.LBE124:
 3042              	.LBE126:
 3043              	.LBE127:
 325:Src/nvm.c     ****             return status;
 3044              		.loc 1 325 12 view .LVU1020
 3045 02ea 0028     		cmp	r0, #0
 3046 02ec 81D0     		beq	.L219
 3047 02ee D4E7     		b	.L172
 3048              	.LVL266:
 3049              	.L222:
 325:Src/nvm.c     ****             return status;
 3050              		.loc 1 325 12 view .LVU1021
 3051              	.LBE134:
 3052              	.LBE153:
 3053              	.LBB154:
 3054              	.LBB149:
 388:Src/nvm.c     ****     return 0;
 3055              		.loc 1 388 5 is_stmt 1 view .LVU1022
 3056 02f0 FFF7FEFF 		bl	HAL_FLASH_Lock
 3057              	.LVL267:
 389:Src/nvm.c     **** fail:
 3058              		.loc 1 389 5 view .LVU1023
 3059              	.L184:
 389:Src/nvm.c     **** fail:
 3060              		.loc 1 389 5 is_stmt 0 view .LVU1024
 3061              	.LBE149:
 3062              	.LBE154:
 489:Src/nvm.c     ****         goto fail;
 3063              		.loc 1 489 5 is_stmt 1 view .LVU1025
 3064              	.LBB155:
 3065              	.LBB156:
 348:Src/nvm.c     ****         return -1;
 3066              		.loc 1 348 44 is_stmt 0 view .LVU1026
 3067 02f4 D8F80030 		ldr	r3, [r8]
 3068              	.LBE156:
ARM GAS  /tmp/cccHlqCc.s 			page 76


 3069              	.LBE155:
 489:Src/nvm.c     ****         goto fail;
 3070              		.loc 1 489 17 view .LVU1027
 3071 02f8 BA68     		ldr	r2, [r7, #8]
 3072              	.LBB161:
 3073              	.LBB157:
 348:Src/nvm.c     ****         return -1;
 3074              		.loc 1 348 44 view .LVU1028
 3075 02fa DB00     		lsls	r3, r3, #3
 348:Src/nvm.c     ****         return -1;
 3076              		.loc 1 348 8 view .LVU1029
 3077 02fc 252B     		cmp	r3, #37
 3078              	.LBE157:
 3079              	.LBE161:
 489:Src/nvm.c     ****         goto fail;
 3080              		.loc 1 489 17 view .LVU1030
 3081 02fe 02F1030B 		add	fp, r2, #3
 3082              	.LVL268:
 3083              	.LBB162:
 3084              	.LBI155:
 347:Src/nvm.c     ****     if (offset + length > (n_staging_area_ << 3))
 3085              		.loc 1 347 5 is_stmt 1 view .LVU1031
 3086              	.LBB158:
 348:Src/nvm.c     ****         return -1;
 3087              		.loc 1 348 5 view .LVU1032
 348:Src/nvm.c     ****         return -1;
 3088              		.loc 1 348 8 is_stmt 0 view .LVU1033
 3089 0302 CAD9     		bls	.L172
 350:Src/nvm.c     **** 
 3090              		.loc 1 350 5 is_stmt 1 view .LVU1034
 350:Src/nvm.c     **** 
 3091              		.loc 1 350 35 is_stmt 0 view .LVU1035
 3092 0304 FB68     		ldr	r3, [r7, #12]
 3093 0306 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3094 0308 C3F10104 		rsb	r4, r3, #1
 3095 030c FC60     		str	r4, [r7, #12]
 3096              	.LVL269:
 352:Src/nvm.c     ****     HAL_FLASH_ClearError();
 3097              		.loc 1 352 5 is_stmt 1 view .LVU1036
 3098 030e FFF7FEFF 		bl	HAL_FLASH_Unlock
 3099              	.LVL270:
 353:Src/nvm.c     **** 
 3100              		.loc 1 353 5 view .LVU1037
 353:Src/nvm.c     **** 
 3101              		.loc 1 353 5 view .LVU1038
 353:Src/nvm.c     **** 
 3102              		.loc 1 353 5 view .LVU1039
 3103 0312 0F4B     		ldr	r3, .L228+24
 3104 0314 9A69     		ldr	r2, [r3, #24]
 3105 0316 4CF2FA31 		movw	r1, #50170
 3106 031a 42F04042 		orr	r2, r2, #-1073741824
 3107 031e 9A61     		str	r2, [r3, #24]
 353:Src/nvm.c     **** 
 3108              		.loc 1 353 5 view .LVU1040
 353:Src/nvm.c     **** 
 3109              		.loc 1 353 5 view .LVU1041
 3110 0320 1961     		str	r1, [r3, #16]
ARM GAS  /tmp/cccHlqCc.s 			page 77


 357:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 3111              		.loc 1 357 12 view .LVU1042
 359:Src/nvm.c     ****                 *(uint64_t*)data) != HAL_OK)
 3112              		.loc 1 359 36 is_stmt 0 view .LVU1043
 3113 0322 2346     		mov	r3, r4
 3114 0324 04EB4408 		add	r8, r4, r4, lsl #1
 3115 0328 5B00     		lsls	r3, r3, #1
 353:Src/nvm.c     **** 
 3116              		.loc 1 353 5 view .LVU1044
 3117 032a 07F13B06 		add	r6, r7, #59
 3118              	.LVL271:
 359:Src/nvm.c     ****                 *(uint64_t*)data) != HAL_OK)
 3119              		.loc 1 359 36 view .LVU1045
 3120 032e 0AEBC808 		add	r8, r10, r8, lsl #3
 353:Src/nvm.c     **** 
 3121              		.loc 1 353 5 view .LVU1046
 3122 0332 1324     		movs	r4, #19
 3123              	.LVL272:
 353:Src/nvm.c     **** 
 3124              		.loc 1 353 5 view .LVU1047
 3125 0334 7B60     		str	r3, [r7, #4]
 3126 0336 1BE0     		b	.L189
 3127              	.L229:
 3128              		.align	2
 3129              	.L228:
 3130 0338 00000000 		.word	.LC0
 3131 033c 00000000 		.word	.LANCHOR2
 3132 0340 14000000 		.word	.LC1
 3133 0344 00000000 		.word	.LANCHOR1
 3134 0348 40000000 		.word	.LC4
 3135 034c 50000000 		.word	.LC5
 3136 0350 00200240 		.word	1073881088
 3137 0354 90000000 		.word	.LC7
 3138 0358 00000000 		.word	.LANCHOR0
 3139 035c 34000000 		.word	.LC2
 3140 0360 3C000000 		.word	.LC3
 3141 0364 00000000 		.word	.LANCHOR3
 3142              	.LVL273:
 3143              	.L225:
 357:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 3144              		.loc 1 357 5 view .LVU1048
 3145 0368 6307     		lsls	r3, r4, #29
 3146 036a 28D0     		beq	.L224
 357:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 3147              		.loc 1 357 27 view .LVU1049
 3148 036c 262C     		cmp	r4, #38
 3149 036e 5CD0     		beq	.L192
 3150              	.LVL274:
 3151              	.L189:
 358:Src/nvm.c     ****                 ((uintptr_t)&target->data[target->index]) + offset, 
 3152              		.loc 1 358 9 is_stmt 1 view .LVU1050
 359:Src/nvm.c     ****                 *(uint64_t*)data) != HAL_OK)
 3153              		.loc 1 359 42 is_stmt 0 view .LVU1051
 3154 0370 D8F80000 		ldr	r0, [r8]
 359:Src/nvm.c     ****                 *(uint64_t*)data) != HAL_OK)
 3155              		.loc 1 359 29 view .LVU1052
 3156 0374 D8F81410 		ldr	r1, [r8, #20]
ARM GAS  /tmp/cccHlqCc.s 			page 78


 3157 0378 01EBC001 		add	r1, r1, r0, lsl #3
 358:Src/nvm.c     ****                 ((uintptr_t)&target->data[target->index]) + offset, 
 3158              		.loc 1 358 13 view .LVU1053
 3159 037c D6E90023 		ldrd	r2, [r6]
 3160 0380 2144     		add	r1, r1, r4
 3161 0382 0020     		movs	r0, #0
 3162 0384 FFF7FEFF 		bl	HAL_FLASH_Program
 3163              	.LVL275:
 357:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 3164              		.loc 1 357 38 is_stmt 1 view .LVU1054
 357:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 3165              		.loc 1 357 46 is_stmt 0 view .LVU1055
 3166 0388 0134     		adds	r4, r4, #1
 357:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 3167              		.loc 1 357 38 view .LVU1056
 3168 038a 0136     		adds	r6, r6, #1
 3169              	.LVL276:
 357:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 3170              		.loc 1 357 38 view .LVU1057
 3171 038c C4F12605 		rsb	r5, r4, #38
 357:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 3172              		.loc 1 357 12 is_stmt 1 view .LVU1058
 358:Src/nvm.c     ****                 ((uintptr_t)&target->data[target->index]) + offset, 
 3173              		.loc 1 358 12 is_stmt 0 view .LVU1059
 3174 0390 0028     		cmp	r0, #0
 3175 0392 E9D0     		beq	.L225
 3176              	.LVL277:
 3177              	.L185:
 3178              	.LDL10:
 391:Src/nvm.c     ****     return HAL_FLASH_GetError(); // non-zero
 3179              		.loc 1 391 5 is_stmt 1 view .LVU1060
 3180 0394 FFF7FEFF 		bl	HAL_FLASH_Lock
 3181              	.LVL278:
 392:Src/nvm.c     **** }
 3182              		.loc 1 392 5 view .LVU1061
 392:Src/nvm.c     **** }
 3183              		.loc 1 392 12 is_stmt 0 view .LVU1062
 3184 0398 FFF7FEFF 		bl	HAL_FLASH_GetError
 3185              	.LVL279:
 3186              	.LBE158:
 3187              	.LBE162:
 489:Src/nvm.c     ****         goto fail;
 3188              		.loc 1 489 8 view .LVU1063
 3189 039c 0028     		cmp	r0, #0
 3190 039e 7FF47CAF 		bne	.L172
 3191              	.L190:
 491:Src/nvm.c     ****         goto fail;
 3192              		.loc 1 491 5 is_stmt 1 view .LVU1064
 3193              	.LVL280:
 491:Src/nvm.c     ****         goto fail;
 3194              		.loc 1 491 21 is_stmt 0 view .LVU1065
 3195 03a2 FFF7FEFF 		bl	NVM_commit
 3196              	.LVL281:
 491:Src/nvm.c     ****         goto fail;
 3197              		.loc 1 491 8 view .LVU1066
 3198 03a6 0028     		cmp	r0, #0
 3199 03a8 42D0     		beq	.L196
ARM GAS  /tmp/cccHlqCc.s 			page 79


 491:Src/nvm.c     ****         goto fail;
 3200              		.loc 1 491 17 view .LVU1067
 3201 03aa BB68     		ldr	r3, [r7, #8]
 3202 03ac 03F1040B 		add	fp, r3, #4
 3203 03b0 73E7     		b	.L172
 3204              	.LVL282:
 3205              	.L220:
 3206              	.LBB163:
 469:Src/nvm.c     ****         for (size_t pos = 0; pos < available; ++pos) {
 3207              		.loc 1 469 13 is_stmt 1 view .LVU1068
 3208 03b2 18EE103A 		vmov	r3, s16	@ int
 468:Src/nvm.c     ****             goto fail;
 3209              		.loc 1 468 21 is_stmt 0 view .LVU1069
 3210 03b6 4FF0020B 		mov	fp, #2
 3211 03ba 9D46     		mov	sp, r3
 3212              	.LVL283:
 468:Src/nvm.c     ****             goto fail;
 3213              		.loc 1 468 21 view .LVU1070
 3214 03bc 6DE7     		b	.L172
 3215              	.LVL284:
 3216              	.L224:
 468:Src/nvm.c     ****             goto fail;
 3217              		.loc 1 468 21 view .LVU1071
 3218              	.LBE163:
 3219              	.LBB164:
 3220              	.LBB159:
 364:Src/nvm.c     ****         if (length == 8) {
 3221              		.loc 1 364 12 is_stmt 1 view .LVU1072
 364:Src/nvm.c     ****         if (length == 8) {
 3222              		.loc 1 364 5 is_stmt 0 view .LVU1073
 3223 03be 072D     		cmp	r5, #7
 3224 03c0 40D9     		bls	.L226
 374:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 3225              		.loc 1 374 40 view .LVU1074
 3226 03c2 7B68     		ldr	r3, [r7, #4]
 3227 03c4 FA68     		ldr	r2, [r7, #12]
 3228 03c6 03EB0209 		add	r9, r3, r2
 3229 03ca B046     		mov	r8, r6
 3230 03cc 0AEBC909 		add	r9, r10, r9, lsl #3
 3231 03d0 12E0     		b	.L193
 3232              	.LVL285:
 3233              	.L191:
 374:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 3234              		.loc 1 374 46 view .LVU1075
 3235 03d2 D9F80020 		ldr	r2, [r9]
 374:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 3236              		.loc 1 374 33 view .LVU1076
 3237 03d6 D9F81410 		ldr	r1, [r9, #20]
 3238 03da 01EBC201 		add	r1, r1, r2, lsl #3
 3239 03de 08F10808 		add	r8, r8, #8
 373:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 3240              		.loc 1 373 17 view .LVU1077
 3241 03e2 2144     		add	r1, r1, r4
 3242 03e4 D3E90023 		ldrd	r2, [r3]
 364:Src/nvm.c     ****         if (length == 8) {
 3243              		.loc 1 364 30 view .LVU1078
 3244 03e8 4646     		mov	r6, r8
ARM GAS  /tmp/cccHlqCc.s 			page 80


 364:Src/nvm.c     ****         if (length == 8) {
 3245              		.loc 1 364 43 view .LVU1079
 3246 03ea 0834     		adds	r4, r4, #8
 373:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 3247              		.loc 1 373 17 view .LVU1080
 3248 03ec FFF7FEFF 		bl	HAL_FLASH_Program
 3249              	.LVL286:
 364:Src/nvm.c     ****         if (length == 8) {
 3250              		.loc 1 364 25 is_stmt 1 view .LVU1081
 364:Src/nvm.c     ****         if (length == 8) {
 3251              		.loc 1 364 12 view .LVU1082
 373:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 3252              		.loc 1 373 16 is_stmt 0 view .LVU1083
 3253 03f0 0028     		cmp	r0, #0
 3254 03f2 CFD1     		bne	.L185
 364:Src/nvm.c     ****         if (length == 8) {
 3255              		.loc 1 364 5 view .LVU1084
 3256 03f4 072D     		cmp	r5, #7
 3257 03f6 27D9     		bls	.L194
 3258              	.LVL287:
 3259              	.L193:
 373:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 3260              		.loc 1 373 13 is_stmt 1 view .LVU1085
 365:Src/nvm.c     ****             // Last word uses FAST_AND_LAST
 3261              		.loc 1 365 12 is_stmt 0 view .LVU1086
 3262 03f8 082D     		cmp	r5, #8
 373:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 3263              		.loc 1 373 17 view .LVU1087
 3264 03fa 4FF00100 		mov	r0, #1
 3265 03fe 4346     		mov	r3, r8
 3266              	.LVL288:
 365:Src/nvm.c     ****             // Last word uses FAST_AND_LAST
 3267              		.loc 1 365 9 is_stmt 1 view .LVU1088
 364:Src/nvm.c     ****         if (length == 8) {
 3268              		.loc 1 364 56 is_stmt 0 view .LVU1089
 3269 0400 A5F10805 		sub	r5, r5, #8
 365:Src/nvm.c     ****             // Last word uses FAST_AND_LAST
 3270              		.loc 1 365 12 view .LVU1090
 3271 0404 E5D1     		bne	.L191
 367:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 3272              		.loc 1 367 13 is_stmt 1 view .LVU1091
 368:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 3273              		.loc 1 368 40 is_stmt 0 view .LVU1092
 3274 0406 FA68     		ldr	r2, [r7, #12]
 3275 0408 7B68     		ldr	r3, [r7, #4]
 3276              	.LVL289:
 368:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 3277              		.loc 1 368 40 view .LVU1093
 3278 040a 1344     		add	r3, r3, r2
 3279 040c 0AEBC302 		add	r2, r10, r3, lsl #3
 368:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 3280              		.loc 1 368 46 view .LVU1094
 3281 0410 5AF83330 		ldr	r3, [r10, r3, lsl #3]
 368:Src/nvm.c     ****                     *(uint64_t*)data) != HAL_OK)
 3282              		.loc 1 368 33 view .LVU1095
 3283 0414 5169     		ldr	r1, [r2, #20]
 3284 0416 01EBC301 		add	r1, r1, r3, lsl #3
ARM GAS  /tmp/cccHlqCc.s 			page 81


 367:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 3285              		.loc 1 367 17 view .LVU1096
 3286 041a 2144     		add	r1, r1, r4
 3287 041c D8E90023 		ldrd	r2, [r8]
 3288 0420 0220     		movs	r0, #2
 3289 0422 FFF7FEFF 		bl	HAL_FLASH_Program
 3290              	.LVL290:
 367:Src/nvm.c     ****                     ((uintptr_t)&target->data[target->index]) + offset, 
 3291              		.loc 1 367 16 view .LVU1097
 3292 0426 0028     		cmp	r0, #0
 3293 0428 B4D1     		bne	.L185
 3294              	.LVL291:
 3295              	.L192:
 388:Src/nvm.c     ****     return 0;
 3296              		.loc 1 388 5 is_stmt 1 view .LVU1098
 3297 042a FFF7FEFF 		bl	HAL_FLASH_Lock
 3298              	.LVL292:
 389:Src/nvm.c     **** fail:
 3299              		.loc 1 389 5 view .LVU1099
 3300 042e B8E7     		b	.L190
 3301              	.LVL293:
 3302              	.L196:
 389:Src/nvm.c     **** fail:
 3303              		.loc 1 389 5 is_stmt 0 view .LVU1100
 3304              	.LBE159:
 3305              	.LBE164:
 493:Src/nvm.c     **** 
 3306              		.loc 1 493 5 is_stmt 1 view .LVU1101
 3307 0430 1348     		ldr	r0, .L230
 3308 0432 FFF7FEFF 		bl	puts
 3309              	.LVL294:
 493:Src/nvm.c     **** 
 3310              		.loc 1 493 46 view .LVU1102
 3311 0436 0520     		movs	r0, #5
 3312 0438 FFF7FEFF 		bl	osDelay
 3313              	.LVL295:
 495:Src/nvm.c     **** 
 3314              		.loc 1 495 5 view .LVU1103
 3315 043c 18EE103A 		vmov	r3, s16	@ int
 3316 0440 9D46     		mov	sp, r3
 3317 0442 31E7     		b	.L171
 3318              	.LVL296:
 3319              	.L226:
 3320              	.LBB165:
 3321              	.LBB160:
 381:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 3322              		.loc 1 381 12 view .LVU1104
 381:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 3323              		.loc 1 381 5 is_stmt 0 view .LVU1105
 3324 0444 002D     		cmp	r5, #0
 3325 0446 F0D0     		beq	.L192
 3326              	.LVL297:
 3327              	.L194:
 383:Src/nvm.c     ****                 *(uint64_t*)data) != HAL_OK)
 3328              		.loc 1 383 36 view .LVU1106
 3329 0448 7B68     		ldr	r3, [r7, #4]
 3330 044a FA68     		ldr	r2, [r7, #12]
ARM GAS  /tmp/cccHlqCc.s 			page 82


 3331 044c 1344     		add	r3, r3, r2
 3332 044e 0AEBC308 		add	r8, r10, r3, lsl #3
 3333 0452 2544     		add	r5, r5, r4
 3334 0454 361B     		subs	r6, r6, r4
 3335              	.LVL298:
 383:Src/nvm.c     ****                 *(uint64_t*)data) != HAL_OK)
 3336              		.loc 1 383 36 view .LVU1107
 3337 0456 01E0     		b	.L195
 3338              	.LVL299:
 3339              	.L227:
 381:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 3340              		.loc 1 381 5 view .LVU1108
 3341 0458 AC42     		cmp	r4, r5
 3342 045a E6D0     		beq	.L192
 3343              	.LVL300:
 3344              	.L195:
 382:Src/nvm.c     ****                 ((uintptr_t)&target->data[target->index]) + offset, 
 3345              		.loc 1 382 9 is_stmt 1 view .LVU1109
 383:Src/nvm.c     ****                 *(uint64_t*)data) != HAL_OK)
 3346              		.loc 1 383 42 is_stmt 0 view .LVU1110
 3347 045c D8F80020 		ldr	r2, [r8]
 383:Src/nvm.c     ****                 *(uint64_t*)data) != HAL_OK)
 3348              		.loc 1 383 29 view .LVU1111
 3349 0460 D8F81410 		ldr	r1, [r8, #20]
 382:Src/nvm.c     ****                 ((uintptr_t)&target->data[target->index]) + offset, 
 3350              		.loc 1 382 13 view .LVU1112
 3351 0464 3319     		adds	r3, r6, r4
 383:Src/nvm.c     ****                 *(uint64_t*)data) != HAL_OK)
 3352              		.loc 1 383 29 view .LVU1113
 3353 0466 01EBC201 		add	r1, r1, r2, lsl #3
 382:Src/nvm.c     ****                 ((uintptr_t)&target->data[target->index]) + offset, 
 3354              		.loc 1 382 13 view .LVU1114
 3355 046a 2144     		add	r1, r1, r4
 3356 046c D3E90023 		ldrd	r2, [r3]
 3357 0470 0020     		movs	r0, #0
 3358 0472 0134     		adds	r4, r4, #1
 3359              	.LVL301:
 382:Src/nvm.c     ****                 ((uintptr_t)&target->data[target->index]) + offset, 
 3360              		.loc 1 382 13 view .LVU1115
 3361 0474 FFF7FEFF 		bl	HAL_FLASH_Program
 3362              	.LVL302:
 381:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 3363              		.loc 1 381 20 is_stmt 1 view .LVU1116
 381:Src/nvm.c     ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 3364              		.loc 1 381 12 view .LVU1117
 382:Src/nvm.c     ****                 ((uintptr_t)&target->data[target->index]) + offset, 
 3365              		.loc 1 382 12 is_stmt 0 view .LVU1118
 3366 0478 0028     		cmp	r0, #0
 3367 047a EDD0     		beq	.L227
 3368 047c 8AE7     		b	.L185
 3369              	.L231:
 3370 047e 00BF     		.align	2
 3371              	.L230:
 3372 0480 74000000 		.word	.LC6
 3373              	.LBE160:
 3374              	.LBE165:
 3375              		.cfi_endproc
ARM GAS  /tmp/cccHlqCc.s 			page 83


 3376              	.LFE148:
 3378              		.global	n_valid_
 3379              		.global	n_staging_area_
 3380              		.global	read_sector_
 3381              		.global	sectors
 3382              		.section	.bss.n_staging_area_,"aw",%nobits
 3383              		.align	2
 3384              		.set	.LANCHOR3,. + 0
 3387              	n_staging_area_:
 3388 0000 00000000 		.space	4
 3389              		.section	.bss.n_valid_,"aw",%nobits
 3390              		.align	2
 3391              		.set	.LANCHOR2,. + 0
 3394              	n_valid_:
 3395 0000 00000000 		.space	4
 3396              		.section	.bss.read_sector_,"aw",%nobits
 3397              		.set	.LANCHOR1,. + 0
 3400              	read_sector_:
 3401 0000 00       		.space	1
 3402              		.section	.data.sectors,"aw"
 3403              		.align	2
 3404              		.set	.LANCHOR0,. + 0
 3407              	sectors:
 3408 0000 00000000 		.space	4
 3409 0004 3E000000 		.word	62
 3410 0008 00010000 		.word	256
 3411 000c 08000000 		.word	8
 3412 0010 00F00108 		.word	134344704
 3413 0014 00F00108 		.word	134344704
 3414 0018 00000000 		.space	4
 3415 001c 3F000000 		.word	63
 3416 0020 00010000 		.word	256
 3417 0024 08000000 		.word	8
 3418 0028 00F80108 		.word	134346752
 3419 002c 00F80108 		.word	134346752
 3420              		.text
 3421              	.Letext0:
 3422              		.file 2 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_type
 3423              		.file 3 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 3424              		.file 4 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/lib/gcc/arm-none-eabi/10.2.1/include/stddef
 3425              		.file 5 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 3426              		.file 6 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash.h"
 3427              		.file 7 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 3428              		.file 8 "<built-in>"
 3429              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 3430              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash_ex.h"
ARM GAS  /tmp/cccHlqCc.s 			page 84


DEFINED SYMBOLS
                            *ABS*:0000000000000000 nvm.c
     /tmp/cccHlqCc.s:18     .text.erase:0000000000000000 $t
     /tmp/cccHlqCc.s:27     .text.erase:0000000000000000 erase
     /tmp/cccHlqCc.s:133    .text.erase:0000000000000050 $d
     /tmp/cccHlqCc.s:138    .text.set_allocation_state:0000000000000000 $t
     /tmp/cccHlqCc.s:146    .text.set_allocation_state:0000000000000000 set_allocation_state
     /tmp/cccHlqCc.s:363    .text.set_allocation_state:00000000000000e0 $d
     /tmp/cccHlqCc.s:368    .text.scan_allocation_table:0000000000000000 $t
     /tmp/cccHlqCc.s:376    .text.scan_allocation_table:0000000000000000 scan_allocation_table
     /tmp/cccHlqCc.s:558    .text.NVM_init:0000000000000000 $t
     /tmp/cccHlqCc.s:566    .text.NVM_init:0000000000000000 NVM_init
     /tmp/cccHlqCc.s:1098   .text.NVM_init:0000000000000190 $d
     /tmp/cccHlqCc.s:1106   .text.NVM_erase:0000000000000000 $t
     /tmp/cccHlqCc.s:1114   .text.NVM_erase:0000000000000000 NVM_erase
     /tmp/cccHlqCc.s:1341   .text.NVM_erase:00000000000000a8 $d
     /tmp/cccHlqCc.s:1350   .text.NVM_get_max_read_length:0000000000000000 $t
     /tmp/cccHlqCc.s:1358   .text.NVM_get_max_read_length:0000000000000000 NVM_get_max_read_length
     /tmp/cccHlqCc.s:1375   .text.NVM_get_max_read_length:0000000000000008 $d
     /tmp/cccHlqCc.s:1380   .text.NVM_get_max_write_length:0000000000000000 $t
     /tmp/cccHlqCc.s:1388   .text.NVM_get_max_write_length:0000000000000000 NVM_get_max_write_length
     /tmp/cccHlqCc.s:1419   .text.NVM_get_max_write_length:000000000000001c $d
     /tmp/cccHlqCc.s:1425   .text.NVM_read:0000000000000000 $t
     /tmp/cccHlqCc.s:1433   .text.NVM_read:0000000000000000 NVM_read
     /tmp/cccHlqCc.s:1503   .text.NVM_read:000000000000003c $d
     /tmp/cccHlqCc.s:1510   .text.NVM_start_write:0000000000000000 $t
     /tmp/cccHlqCc.s:1518   .text.NVM_start_write:0000000000000000 NVM_start_write
     /tmp/cccHlqCc.s:1704   .text.NVM_start_write:0000000000000094 $d
     /tmp/cccHlqCc.s:1712   .text.NVM_write:0000000000000000 $t
     /tmp/cccHlqCc.s:1720   .text.NVM_write:0000000000000000 NVM_write
     /tmp/cccHlqCc.s:2039   .text.NVM_write:0000000000000154 $d
     /tmp/cccHlqCc.s:2047   .text.NVM_commit:0000000000000000 $t
     /tmp/cccHlqCc.s:2055   .text.NVM_commit:0000000000000000 NVM_commit
     /tmp/cccHlqCc.s:2273   .text.NVM_commit:00000000000000e0 $d
     /tmp/cccHlqCc.s:2282   .rodata.NVM_demo.str1.4:0000000000000000 $d
     /tmp/cccHlqCc.s:2307   .text.NVM_demo:0000000000000000 $t
     /tmp/cccHlqCc.s:2315   .text.NVM_demo:0000000000000000 NVM_demo
     /tmp/cccHlqCc.s:3130   .text.NVM_demo:0000000000000338 $d
     /tmp/cccHlqCc.s:3145   .text.NVM_demo:0000000000000368 $t
     /tmp/cccHlqCc.s:3372   .text.NVM_demo:0000000000000480 $d
     /tmp/cccHlqCc.s:3394   .bss.n_valid_:0000000000000000 n_valid_
     /tmp/cccHlqCc.s:3387   .bss.n_staging_area_:0000000000000000 n_staging_area_
     /tmp/cccHlqCc.s:3400   .bss.read_sector_:0000000000000000 read_sector_
     /tmp/cccHlqCc.s:3407   .data.sectors:0000000000000000 sectors
     /tmp/cccHlqCc.s:3383   .bss.n_staging_area_:0000000000000000 $d
     /tmp/cccHlqCc.s:3390   .bss.n_valid_:0000000000000000 $d
     /tmp/cccHlqCc.s:3401   .bss.read_sector_:0000000000000000 $d
     /tmp/cccHlqCc.s:3403   .data.sectors:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_FLASH_Unlock
HAL_FLASHEx_Erase
HAL_FLASH_Lock
HAL_FLASH_GetError
HAL_FLASH_Program
memcpy
osDelay
ARM GAS  /tmp/cccHlqCc.s 			page 85


puts
printf
