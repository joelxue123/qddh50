ARM GAS  /tmp/ccXG7vE7.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"mcp.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.RI_SetRegCommandParser,"ax",%progbits
  18              		.align	1
  19              		.global	RI_SetRegCommandParser
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	RI_SetRegCommandParser:
  27              	.LVL0:
  28              	.LFB1713:
  29              		.file 1 "Src/mcp.c"
   1:Src/mcp.c     **** 
   2:Src/mcp.c     **** /**
   3:Src/mcp.c     ****   ******************************************************************************
   4:Src/mcp.c     ****   * @file    mcp.c
   5:Src/mcp.c     ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/mcp.c     ****   * @brief   This file provides firmware functions that implement the MCP protocol
   7:Src/mcp.c     ****   *
   8:Src/mcp.c     ****   *
   9:Src/mcp.c     ****   ******************************************************************************
  10:Src/mcp.c     ****   * @attention
  11:Src/mcp.c     ****   *
  12:Src/mcp.c     ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  13:Src/mcp.c     ****   * All rights reserved.</center></h2>
  14:Src/mcp.c     ****   *
  15:Src/mcp.c     ****   * This software component is licensed by ST under Ultimate Liberty license
  16:Src/mcp.c     ****   * SLA0044, the "License"; You may not use this file except in compliance with
  17:Src/mcp.c     ****   * the License. You may obtain a copy of the License at:
  18:Src/mcp.c     ****   *                             www.st.com/SLA0044
  19:Src/mcp.c     ****   *
  20:Src/mcp.c     ****   ******************************************************************************
  21:Src/mcp.c     ****   */
  22:Src/mcp.c     **** 
  23:Src/mcp.c     **** #include "mc_type.h"
  24:Src/mcp.c     **** #include "mcp.h"
  25:Src/mcp.c     **** #include "register_interface.h"
  26:Src/mcp.c     **** #include "mc_config.h"
  27:Src/mcp.c     **** #include "mcp_config.h"
  28:Src/mcp.c     **** #include "mc_api.h"
  29:Src/mcp.c     **** 
ARM GAS  /tmp/ccXG7vE7.s 			page 2


  30:Src/mcp.c     **** /** @addtogroup MCSDK
  31:Src/mcp.c     ****   * @{
  32:Src/mcp.c     ****   */
  33:Src/mcp.c     **** 
  34:Src/mcp.c     **** /** @defgroup MCP Motor Control Protocol
  35:Src/mcp.c     ****   *
  36:Src/mcp.c     ****   * @brief Motor Control Protocol components of the Motor Control SDK.
  37:Src/mcp.c     ****   *
  38:Src/mcp.c     ****   * These components implement the features needed to drive and monitor motor control applications 
  39:Src/mcp.c     ****   * They mainly focus on the communication with the controller, both on the receiving and the trans
  40:Src/mcp.c     ****   *
  41:Src/mcp.c     ****   * @{
  42:Src/mcp.c     ****   */
  43:Src/mcp.c     **** 
  44:Src/mcp.c     **** /**
  45:Src/mcp.c     ****   * @brief  Parses the payload in the received packet and call the required function in order to mo
  46:Src/mcp.c     ****   *
  47:Src/mcp.c     ****   * The function called depends on the targeted motor and/or targeted register : RI_SetRegisterGlob
  48:Src/mcp.c     ****   *
  49:Src/mcp.c     ****   * @param  pHandle Handler of the current instance of the MCP component
  50:Src/mcp.c     ****   * @param  txSyncFreeSpace Space available for synchronous transmission
  51:Src/mcp.c     ****   *
  52:Src/mcp.c     ****   * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  53:Src/mcp.c     ****   */
  54:Src/mcp.c     **** uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
  55:Src/mcp.c     **** {
  30              		.loc 1 55 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 16
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 55 1 is_stmt 0 view .LVU1
  35 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 36
  38              		.cfi_offset 4, -36
  39              		.cfi_offset 5, -32
  40              		.cfi_offset 6, -28
  41              		.cfi_offset 7, -24
  42              		.cfi_offset 8, -20
  43              		.cfi_offset 9, -16
  44              		.cfi_offset 10, -12
  45              		.cfi_offset 11, -8
  46              		.cfi_offset 14, -4
  47 0004 87B0     		sub	sp, sp, #28
  48              	.LCFI1:
  49              		.cfi_def_cfa_offset 64
  50 0006 0746     		mov	r7, r0
  56:Src/mcp.c     ****   uint8_t retVal = MCP_CMD_OK;
  51              		.loc 1 56 3 is_stmt 1 view .LVU2
  52              	.LVL1:
  57:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
  58:Src/mcp.c     ****   if (MC_NULL == pHandle)
  59:Src/mcp.c     ****   {
  60:Src/mcp.c     ****     retVal = MCP_CMD_NOK;
  61:Src/mcp.c     ****   }
  62:Src/mcp.c     ****   else
  63:Src/mcp.c     ****   {
ARM GAS  /tmp/ccXG7vE7.s 			page 3


  64:Src/mcp.c     **** #endif
  65:Src/mcp.c     ****     uint16_t * dataElementID;
  53              		.loc 1 65 5 view .LVU3
  66:Src/mcp.c     ****     uint8_t * rxData = pHandle->rxBuffer;
  54              		.loc 1 66 5 view .LVU4
  55              		.loc 1 66 15 is_stmt 0 view .LVU5
  56 0008 4568     		ldr	r5, [r0, #4]
  57              	.LVL2:
  67:Src/mcp.c     ****     uint8_t * txData = pHandle->txBuffer;
  58              		.loc 1 67 5 is_stmt 1 view .LVU6
  59              		.loc 1 67 15 is_stmt 0 view .LVU7
  60 000a 8368     		ldr	r3, [r0, #8]
  61              	.LVL3:
  68:Src/mcp.c     ****     int16_t rxLength = pHandle->rxLength;
  62              		.loc 1 68 5 is_stmt 1 view .LVU8
  63              		.loc 1 68 13 is_stmt 0 view .LVU9
  64 000c B0F90C40 		ldrsh	r4, [r0, #12]
  65              	.LVL4:
  69:Src/mcp.c     ****     uint16_t size = 0U;
  66              		.loc 1 69 5 is_stmt 1 view .LVU10
  67              		.loc 1 69 14 is_stmt 0 view .LVU11
  68 0010 0022     		movs	r2, #0
  69 0012 ADF81620 		strh	r2, [sp, #22]	@ movhi
  70:Src/mcp.c     ****     uint8_t accessResult;
  70              		.loc 1 70 5 is_stmt 1 view .LVU12
  71:Src/mcp.c     **** 
  72:Src/mcp.c     ****     uint16_t regID;
  71              		.loc 1 72 5 view .LVU13
  73:Src/mcp.c     ****     uint8_t typeID;
  72              		.loc 1 73 5 view .LVU14
  74:Src/mcp.c     ****     uint8_t motorID;
  73              		.loc 1 74 5 view .LVU15
  75:Src/mcp.c     ****     uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_
  74              		.loc 1 75 5 view .LVU16
  75              		.loc 1 75 15 is_stmt 0 view .LVU17
  76 0016 2B48     		ldr	r0, .L21
  77              	.LVL5:
  78              		.loc 1 75 15 view .LVU18
  79 0018 0390     		str	r0, [sp, #12]
  80 001a 2B48     		ldr	r0, .L21+4
  81 001c 0490     		str	r0, [sp, #16]
  76:Src/mcp.c     ****     uint8_t number_of_item =0;
  82              		.loc 1 76 5 is_stmt 1 view .LVU19
  83              	.LVL6:
  77:Src/mcp.c     ****     pHandle->txLength = 0;
  84              		.loc 1 77 5 view .LVU20
  85              		.loc 1 77 23 is_stmt 0 view .LVU21
  86 001e FA81     		strh	r2, [r7, #14]	@ movhi
  78:Src/mcp.c     **** 
  79:Src/mcp.c     ****     while (rxLength > 0)
  87              		.loc 1 79 5 is_stmt 1 view .LVU22
  88              		.loc 1 79 11 view .LVU23
  89 0020 9442     		cmp	r4, r2
  90 0022 09DD     		ble	.L2
  91 0024 03EB0109 		add	r9, r3, r1
  67:Src/mcp.c     ****     int16_t rxLength = pHandle->rxLength;
  92              		.loc 1 67 15 is_stmt 0 view .LVU24
ARM GAS  /tmp/ccXG7vE7.s 			page 4


  93 0028 1E46     		mov	r6, r3
  56:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
  94              		.loc 1 56 11 view .LVU25
  95 002a 9346     		mov	fp, r2
  80:Src/mcp.c     ****     {
  81:Src/mcp.c     ****       number_of_item ++;
  82:Src/mcp.c     ****       dataElementID = (uint16_t *) rxData;
  83:Src/mcp.c     ****       rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
  84:Src/mcp.c     ****       rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
  85:Src/mcp.c     **** 
  86:Src/mcp.c     ****       regID = *dataElementID & REG_MASK;
  87:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
  88:Src/mcp.c     **** 
  89:Src/mcp.c     ****       motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
  90:Src/mcp.c     **** 
  91:Src/mcp.c     ****       if (motorID > NBR_OF_MOTORS)
  92:Src/mcp.c     ****       {
  93:Src/mcp.c     ****         retVal = MCP_CMD_NOK;
  94:Src/mcp.c     ****         rxLength = 0;
  95:Src/mcp.c     ****       }
  96:Src/mcp.c     ****       else
  97:Src/mcp.c     ****       {
  98:Src/mcp.c     ****         accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
  99:Src/mcp.c     ****         /* Prepare next data*/
 100:Src/mcp.c     ****         rxLength = (int16_t) (rxLength - size);
 101:Src/mcp.c     ****         rxData = rxData+size;
 102:Src/mcp.c     ****         /* If there is only one CMD in the buffer, we do not store the result */
 103:Src/mcp.c     ****         if ((1U == number_of_item) && (0 == rxLength))
  96              		.loc 1 103 12 view .LVU26
  97 002c C3F10108 		rsb	r8, r3, #1
  98 0030 0DE0     		b	.L7
  99              	.LVL7:
 100              	.L19:
 101              		.loc 1 103 36 discriminator 1 view .LVU27
 102 0032 8CBB     		cbnz	r4, .L4
 103              	.LVL8:
 104              	.L5:
 104:Src/mcp.c     ****         {
 105:Src/mcp.c     ****           retVal = accessResult;
 106:Src/mcp.c     ****         }
 107:Src/mcp.c     ****         else
 108:Src/mcp.c     ****         {/* Store the result for each access to be able to report failing access */
 109:Src/mcp.c     ****           if (txSyncFreeSpace !=0 )
 110:Src/mcp.c     ****           {
 111:Src/mcp.c     ****             *txData = accessResult;
 112:Src/mcp.c     ****             txData = txData+1;
 113:Src/mcp.c     ****             pHandle->txLength++;
 114:Src/mcp.c     ****             txSyncFreeSpace--; /* decrement one by one no wraparound possible */
 115:Src/mcp.c     ****             retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 116:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 117:Src/mcp.c     ****             { /* From this point we are not able to continue to decode CMD buffer*/
 118:Src/mcp.c     ****               /* We stop the parsing */
 119:Src/mcp.c     ****               rxLength = 0;
 120:Src/mcp.c     ****             }
 121:Src/mcp.c     ****           }
 122:Src/mcp.c     ****           else
 123:Src/mcp.c     ****           {
ARM GAS  /tmp/ccXG7vE7.s 			page 5


 124:Src/mcp.c     ****             /* Stop parsing the cmd buffer as no space to answer */
 125:Src/mcp.c     ****             /* If we reach this state, chances are high the command was badly formated or received 
 126:Src/mcp.c     ****             rxLength = 0;
 127:Src/mcp.c     ****             retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 128:Src/mcp.c     ****           }
 129:Src/mcp.c     ****         }
 130:Src/mcp.c     ****       }
 131:Src/mcp.c     ****     }
 132:Src/mcp.c     ****     /* If all accesses are fine, just one global MCP_CMD_OK is required*/
 133:Src/mcp.c     ****     if (MCP_CMD_OK == retVal)
 105              		.loc 1 133 5 is_stmt 1 view .LVU28
 106              		.loc 1 133 8 is_stmt 0 view .LVU29
 107 0034 0028     		cmp	r0, #0
 108 0036 3FD1     		bne	.L13
 109              	.L2:
 134:Src/mcp.c     ****     {
 135:Src/mcp.c     ****       pHandle->txLength = 0;
 110              		.loc 1 135 7 is_stmt 1 view .LVU30
 111              		.loc 1 135 25 is_stmt 0 view .LVU31
 112 0038 0020     		movs	r0, #0
 113 003a F881     		strh	r0, [r7, #14]	@ movhi
 114 003c 3CE0     		b	.L13
 115              	.LVL9:
 116              	.L20:
 116:Src/mcp.c     ****             { /* From this point we are not able to continue to decode CMD buffer*/
 117              		.loc 1 116 59 discriminator 1 view .LVU32
 118 003e 0A28     		cmp	r0, #10
 119 0040 01D1     		bne	.L17
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 120              		.loc 1 115 20 view .LVU33
 121 0042 0120     		movs	r0, #1
 122              	.LVL10:
  79:Src/mcp.c     ****     {
 123              		.loc 1 79 11 is_stmt 1 view .LVU34
 133:Src/mcp.c     ****     {
 124              		.loc 1 133 5 view .LVU35
 136:Src/mcp.c     ****     }
 137:Src/mcp.c     ****     else
 138:Src/mcp.c     ****     {
 139:Src/mcp.c     ****       /* Nothing to do */
 140:Src/mcp.c     ****     }
 125              		.loc 1 140 5 view .LVU36
 141:Src/mcp.c     ****   #ifdef NULL_PTR_CHECK_REG_INT
 142:Src/mcp.c     ****   }
 143:Src/mcp.c     **** #endif
 144:Src/mcp.c     ****   return (retVal);
 126              		.loc 1 144 3 view .LVU37
 127              		.loc 1 144 10 is_stmt 0 view .LVU38
 128 0044 38E0     		b	.L13
 129              	.LVL11:
 130              	.L17:
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 131              		.loc 1 115 20 view .LVU39
 132 0046 4FF0010B 		mov	fp, #1
 133              	.LVL12:
 134              	.L6:
  79:Src/mcp.c     ****     {
ARM GAS  /tmp/ccXG7vE7.s 			page 6


 135              		.loc 1 79 11 is_stmt 1 view .LVU40
 136 004a 002C     		cmp	r4, #0
 137 004c 31DD     		ble	.L18
 138              	.LVL13:
 139              	.L7:
  81:Src/mcp.c     ****       dataElementID = (uint16_t *) rxData;
 140              		.loc 1 81 7 view .LVU41
  82:Src/mcp.c     ****       rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 141              		.loc 1 82 7 view .LVU42
  83:Src/mcp.c     ****       rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 142              		.loc 1 83 7 view .LVU43
  84:Src/mcp.c     **** 
 143              		.loc 1 84 7 view .LVU44
  86:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 144              		.loc 1 86 7 view .LVU45
  86:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 145              		.loc 1 86 15 is_stmt 0 view .LVU46
 146 004e 2888     		ldrh	r0, [r5]
 147              	.LVL14:
  87:Src/mcp.c     **** 
 148              		.loc 1 87 7 is_stmt 1 view .LVU47
  87:Src/mcp.c     **** 
 149              		.loc 1 87 16 is_stmt 0 view .LVU48
 150 0050 C1B2     		uxtb	r1, r0
 151              	.LVL15:
  89:Src/mcp.c     **** 
 152              		.loc 1 89 7 is_stmt 1 view .LVU49
  91:Src/mcp.c     ****       {
 153              		.loc 1 91 7 view .LVU50
  91:Src/mcp.c     ****       {
 154              		.loc 1 91 10 is_stmt 0 view .LVU51
 155 0052 10F0060F 		tst	r0, #6
 156 0056 2ED1     		bne	.L9
  83:Src/mcp.c     ****       rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 157              		.loc 1 83 26 view .LVU52
 158 0058 023C     		subs	r4, r4, #2
 159              	.LVL16:
  83:Src/mcp.c     ****       rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 160              		.loc 1 83 26 view .LVU53
 161 005a 1FFA84FA 		uxth	r10, r4
  84:Src/mcp.c     **** 
 162              		.loc 1 84 14 view .LVU54
 163 005e 0235     		adds	r5, r5, #2
 164              	.LVL17:
  98:Src/mcp.c     ****         /* Prepare next data*/
 165              		.loc 1 98 9 is_stmt 1 view .LVU55
  86:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 166              		.loc 1 86 13 is_stmt 0 view .LVU56
 167 0060 20F00700 		bic	r0, r0, #7
 168              	.LVL18:
  98:Src/mcp.c     ****         /* Prepare next data*/
 169              		.loc 1 98 34 view .LVU57
 170 0064 01F00703 		and	r3, r1, #7
 171 0068 06AA     		add	r2, sp, #24
 172 006a 02EB8303 		add	r3, r2, r3, lsl #2
  98:Src/mcp.c     ****         /* Prepare next data*/
 173              		.loc 1 98 24 view .LVU58
ARM GAS  /tmp/ccXG7vE7.s 			page 7


 174 006e 24B2     		sxth	r4, r4
 175 0070 0094     		str	r4, [sp]
 176              	.LVL19:
  98:Src/mcp.c     ****         /* Prepare next data*/
 177              		.loc 1 98 24 view .LVU59
 178 0072 53F80C4C 		ldr	r4, [r3, #-12]
 179 0076 0DF11603 		add	r3, sp, #22
 180 007a 2A46     		mov	r2, r5
 181 007c 01F03801 		and	r1, r1, #56
 182              	.LVL20:
  98:Src/mcp.c     ****         /* Prepare next data*/
 183              		.loc 1 98 24 view .LVU60
 184 0080 A047     		blx	r4
 185              	.LVL21:
 100:Src/mcp.c     ****         rxData = rxData+size;
 186              		.loc 1 100 9 is_stmt 1 view .LVU61
 100:Src/mcp.c     ****         rxData = rxData+size;
 187              		.loc 1 100 40 is_stmt 0 view .LVU62
 188 0082 BDF81630 		ldrh	r3, [sp, #22]
 189 0086 AAEB0304 		sub	r4, r10, r3
 100:Src/mcp.c     ****         rxData = rxData+size;
 190              		.loc 1 100 18 view .LVU63
 191 008a 24B2     		sxth	r4, r4
 192              	.LVL22:
 101:Src/mcp.c     ****         /* If there is only one CMD in the buffer, we do not store the result */
 193              		.loc 1 101 9 is_stmt 1 view .LVU64
 101:Src/mcp.c     ****         /* If there is only one CMD in the buffer, we do not store the result */
 194              		.loc 1 101 16 is_stmt 0 view .LVU65
 195 008c 1D44     		add	r5, r5, r3
 196              	.LVL23:
 103:Src/mcp.c     ****         {
 197              		.loc 1 103 9 is_stmt 1 view .LVU66
 103:Src/mcp.c     ****         {
 198              		.loc 1 103 12 is_stmt 0 view .LVU67
 199 008e 06EB0803 		add	r3, r6, r8
 200 0092 DBB2     		uxtb	r3, r3
 201 0094 012B     		cmp	r3, #1
 202 0096 CCD0     		beq	.L19
 203              	.L4:
 109:Src/mcp.c     ****           {
 204              		.loc 1 109 11 is_stmt 1 view .LVU68
 109:Src/mcp.c     ****           {
 205              		.loc 1 109 14 is_stmt 0 view .LVU69
 206 0098 B145     		cmp	r9, r6
 207 009a 10D0     		beq	.L10
 111:Src/mcp.c     ****             txData = txData+1;
 208              		.loc 1 111 13 is_stmt 1 view .LVU70
 111:Src/mcp.c     ****             txData = txData+1;
 209              		.loc 1 111 21 is_stmt 0 view .LVU71
 210 009c 06F8010B 		strb	r0, [r6], #1
 211              	.LVL24:
 112:Src/mcp.c     ****             pHandle->txLength++;
 212              		.loc 1 112 13 is_stmt 1 view .LVU72
 113:Src/mcp.c     ****             txSyncFreeSpace--; /* decrement one by one no wraparound possible */
 213              		.loc 1 113 13 view .LVU73
 113:Src/mcp.c     ****             txSyncFreeSpace--; /* decrement one by one no wraparound possible */
 214              		.loc 1 113 30 is_stmt 0 view .LVU74
ARM GAS  /tmp/ccXG7vE7.s 			page 8


 215 00a0 FB89     		ldrh	r3, [r7, #14]
 216 00a2 0133     		adds	r3, r3, #1
 217 00a4 FB81     		strh	r3, [r7, #14]	@ movhi
 114:Src/mcp.c     ****             retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 218              		.loc 1 114 13 is_stmt 1 view .LVU75
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 219              		.loc 1 115 13 view .LVU76
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 220              		.loc 1 115 20 is_stmt 0 view .LVU77
 221 00a6 0028     		cmp	r0, #0
 222 00a8 CFD0     		beq	.L6
 223              	.LVL25:
 116:Src/mcp.c     ****             { /* From this point we are not able to continue to decode CMD buffer*/
 224              		.loc 1 116 13 is_stmt 1 discriminator 4 view .LVU78
 116:Src/mcp.c     ****             { /* From this point we are not able to continue to decode CMD buffer*/
 225              		.loc 1 116 16 is_stmt 0 discriminator 4 view .LVU79
 226 00aa 0728     		cmp	r0, #7
 227 00ac C7D1     		bne	.L20
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 228              		.loc 1 115 20 view .LVU80
 229 00ae 0120     		movs	r0, #1
 230              	.LVL26:
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 231              		.loc 1 115 20 view .LVU81
 232 00b0 02E0     		b	.L13
 233              	.LVL27:
 234              	.L18:
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 235              		.loc 1 115 20 view .LVU82
 236 00b2 5846     		mov	r0, fp
 237              	.LVL28:
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 238              		.loc 1 115 20 view .LVU83
 239 00b4 BEE7     		b	.L5
 240              	.LVL29:
 241              	.L9:
  93:Src/mcp.c     ****         rxLength = 0;
 242              		.loc 1 93 16 view .LVU84
 243 00b6 0120     		movs	r0, #1
 244              	.LVL30:
 245              	.L13:
 145:Src/mcp.c     **** }
 246              		.loc 1 145 1 view .LVU85
 247 00b8 07B0     		add	sp, sp, #28
 248              	.LCFI2:
 249              		.cfi_remember_state
 250              		.cfi_def_cfa_offset 36
 251              		@ sp needed
 252 00ba BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 253              	.LVL31:
 254              	.L10:
 255              	.LCFI3:
 256              		.cfi_restore_state
 127:Src/mcp.c     ****           }
 257              		.loc 1 127 20 view .LVU86
 258 00be 0820     		movs	r0, #8
 259              	.LVL32:
ARM GAS  /tmp/ccXG7vE7.s 			page 9


 127:Src/mcp.c     ****           }
 260              		.loc 1 127 20 view .LVU87
 261 00c0 FAE7     		b	.L13
 262              	.L22:
 263 00c2 00BF     		.align	2
 264              	.L21:
 265 00c4 00000000 		.word	RI_SetRegisterGlobal
 266 00c8 00000000 		.word	RI_SetRegisterMotor1
 267              		.cfi_endproc
 268              	.LFE1713:
 270              		.section	.text.RI_GetRegCommandParser,"ax",%progbits
 271              		.align	1
 272              		.global	RI_GetRegCommandParser
 273              		.syntax unified
 274              		.thumb
 275              		.thumb_func
 276              		.fpu fpv4-sp-d16
 278              	RI_GetRegCommandParser:
 279              	.LVL33:
 280              	.LFB1714:
 146:Src/mcp.c     **** 
 147:Src/mcp.c     **** /**
 148:Src/mcp.c     ****   * @brief  Parses the payload in the received packet and call the required function in order to re
 149:Src/mcp.c     ****   *
 150:Src/mcp.c     ****   * The function called depends on the targeted motor and/or targeted register : RI_GetRegisterGlob
 151:Src/mcp.c     ****   *
 152:Src/mcp.c     ****   * @param  pHandle Handler of the current instance of the MCP component
 153:Src/mcp.c     ****   * @param  txSyncFreeSpace Space available for synchronous transmission
 154:Src/mcp.c     ****   *
 155:Src/mcp.c     ****   * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
 156:Src/mcp.c     ****   */
 157:Src/mcp.c     **** uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
 158:Src/mcp.c     **** {
 281              		.loc 1 158 1 is_stmt 1 view -0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 16
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              		.loc 1 158 1 is_stmt 0 view .LVU89
 286 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 287              	.LCFI4:
 288              		.cfi_def_cfa_offset 32
 289              		.cfi_offset 4, -32
 290              		.cfi_offset 5, -28
 291              		.cfi_offset 6, -24
 292              		.cfi_offset 7, -20
 293              		.cfi_offset 8, -16
 294              		.cfi_offset 9, -12
 295              		.cfi_offset 10, -8
 296              		.cfi_offset 14, -4
 297 0004 86B0     		sub	sp, sp, #24
 298              	.LCFI5:
 299              		.cfi_def_cfa_offset 56
 159:Src/mcp.c     ****   uint8_t retVal = MCP_CMD_NOK;
 300              		.loc 1 159 3 is_stmt 1 view .LVU90
 301              	.LVL34:
 160:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
 161:Src/mcp.c     ****   if (MC_NULL == pHandle)
ARM GAS  /tmp/ccXG7vE7.s 			page 10


 162:Src/mcp.c     ****   {
 163:Src/mcp.c     ****     /* Nothing to do */
 164:Src/mcp.c     ****   }
 165:Src/mcp.c     ****   else
 166:Src/mcp.c     ****   {
 167:Src/mcp.c     **** #endif
 168:Src/mcp.c     ****     uint16_t * dataElementID;
 302              		.loc 1 168 5 view .LVU91
 169:Src/mcp.c     ****     uint8_t * rxData = pHandle->rxBuffer;
 303              		.loc 1 169 5 view .LVU92
 304              		.loc 1 169 15 is_stmt 0 view .LVU93
 305 0006 D0F80490 		ldr	r9, [r0, #4]
 306              	.LVL35:
 170:Src/mcp.c     ****     uint8_t * txData = pHandle->txBuffer;
 307              		.loc 1 170 5 is_stmt 1 view .LVU94
 308              		.loc 1 170 15 is_stmt 0 view .LVU95
 309 000a 8768     		ldr	r7, [r0, #8]
 310              	.LVL36:
 171:Src/mcp.c     ****     uint16_t size = 0U;
 311              		.loc 1 171 5 is_stmt 1 view .LVU96
 312              		.loc 1 171 14 is_stmt 0 view .LVU97
 313 000c 0023     		movs	r3, #0
 314 000e ADF81630 		strh	r3, [sp, #22]	@ movhi
 172:Src/mcp.c     ****     uint16_t rxLength = pHandle->rxLength;
 315              		.loc 1 172 5 is_stmt 1 view .LVU98
 316              		.loc 1 172 14 is_stmt 0 view .LVU99
 317 0012 B0F80C80 		ldrh	r8, [r0, #12]
 318              	.LVL37:
 173:Src/mcp.c     ****     int16_t freeSpaceS16 = (int16_t) txSyncFreeSpace;
 319              		.loc 1 173 5 is_stmt 1 view .LVU100
 174:Src/mcp.c     **** 
 175:Src/mcp.c     ****     uint16_t regID;
 320              		.loc 1 175 5 view .LVU101
 176:Src/mcp.c     ****     uint8_t typeID;
 321              		.loc 1 176 5 view .LVU102
 177:Src/mcp.c     ****     uint8_t motorID;
 322              		.loc 1 177 5 view .LVU103
 178:Src/mcp.c     ****     uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_
 323              		.loc 1 178 5 view .LVU104
 324              		.loc 1 178 15 is_stmt 0 view .LVU105
 325 0016 1D4A     		ldr	r2, .L33
 326 0018 0392     		str	r2, [sp, #12]
 327 001a 1D4A     		ldr	r2, .L33+4
 328 001c 0492     		str	r2, [sp, #16]
 179:Src/mcp.c     ****     pHandle->txLength = 0;
 329              		.loc 1 179 5 is_stmt 1 view .LVU106
 330              		.loc 1 179 23 is_stmt 0 view .LVU107
 331 001e C381     		strh	r3, [r0, #14]	@ movhi
 332              	.LVL38:
 180:Src/mcp.c     ****     while (rxLength > 0U)
 333              		.loc 1 180 5 is_stmt 1 view .LVU108
 334              		.loc 1 180 11 view .LVU109
 335 0020 B8F1000F 		cmp	r8, #0
 336 0024 2AD0     		beq	.L27
 337 0026 0646     		mov	r6, r0
 338 0028 0DB2     		sxth	r5, r1
 339              	.LVL39:
ARM GAS  /tmp/ccXG7vE7.s 			page 11


 169:Src/mcp.c     ****     uint8_t * txData = pHandle->txBuffer;
 340              		.loc 1 169 15 is_stmt 0 view .LVU110
 341 002a 4C46     		mov	r4, r9
 342 002c 0DE0     		b	.L26
 343              	.LVL40:
 344              	.L32:
 181:Src/mcp.c     ****     {
 182:Src/mcp.c     ****       dataElementID = (uint16_t *) rxData;
 183:Src/mcp.c     ****       rxLength = rxLength - MCP_ID_SIZE;
 184:Src/mcp.c     ****       rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID
 185:Src/mcp.c     **** 
 186:Src/mcp.c     ****       regID = *dataElementID & REG_MASK;
 187:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 188:Src/mcp.c     **** 
 189:Src/mcp.c     ****       motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 190:Src/mcp.c     **** 
 191:Src/mcp.c     ****       if (motorID > NBR_OF_MOTORS)
 192:Src/mcp.c     ****       {
 193:Src/mcp.c     ****         retVal = MCP_CMD_NOK;
 194:Src/mcp.c     ****         rxLength = 0;
 195:Src/mcp.c     ****       }
 196:Src/mcp.c     ****       else
 197:Src/mcp.c     ****       {
 198:Src/mcp.c     ****         retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 199:Src/mcp.c     ****         if (retVal == MCP_CMD_OK )
 200:Src/mcp.c     ****         {
 201:Src/mcp.c     ****           /* Prepare next data */
 202:Src/mcp.c     ****           txData = txData+size;
 345              		.loc 1 202 11 is_stmt 1 view .LVU111
 346              		.loc 1 202 26 is_stmt 0 view .LVU112
 347 002e BDF81610 		ldrh	r1, [sp, #22]
 348              	.LVL41:
 349              		.loc 1 202 18 view .LVU113
 350 0032 0F44     		add	r7, r7, r1
 351              	.LVL42:
 203:Src/mcp.c     ****           pHandle->txLength += size;
 352              		.loc 1 203 11 is_stmt 1 view .LVU114
 353              		.loc 1 203 29 is_stmt 0 view .LVU115
 354 0034 F389     		ldrh	r3, [r6, #14]
 355 0036 0B44     		add	r3, r3, r1
 356 0038 F381     		strh	r3, [r6, #14]	@ movhi
 204:Src/mcp.c     ****           freeSpaceS16 = freeSpaceS16-size;
 357              		.loc 1 204 11 is_stmt 1 view .LVU116
 358              		.loc 1 204 38 is_stmt 0 view .LVU117
 359 003a 6D1A     		subs	r5, r5, r1
 360              	.LVL43:
 361              		.loc 1 204 24 view .LVU118
 362 003c 2DB2     		sxth	r5, r5
 363              	.LVL44:
 180:Src/mcp.c     ****     {
 364              		.loc 1 180 11 is_stmt 1 view .LVU119
 365 003e A8EB0403 		sub	r3, r8, r4
 366 0042 19FA83F3 		uxtah	r3, r9, r3
 367 0046 9BB2     		uxth	r3, r3
 368 0048 DBB1     		cbz	r3, .L29
 369              	.LVL45:
 370              	.L26:
ARM GAS  /tmp/ccXG7vE7.s 			page 12


 182:Src/mcp.c     ****       rxLength = rxLength - MCP_ID_SIZE;
 371              		.loc 1 182 7 view .LVU120
 183:Src/mcp.c     ****       rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID
 372              		.loc 1 183 7 view .LVU121
 184:Src/mcp.c     **** 
 373              		.loc 1 184 7 view .LVU122
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 374              		.loc 1 186 7 view .LVU123
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 375              		.loc 1 186 15 is_stmt 0 view .LVU124
 376 004a 34F8020B 		ldrh	r0, [r4], #2
 377              	.LVL46:
 187:Src/mcp.c     **** 
 378              		.loc 1 187 7 is_stmt 1 view .LVU125
 187:Src/mcp.c     **** 
 379              		.loc 1 187 16 is_stmt 0 view .LVU126
 380 004e C1B2     		uxtb	r1, r0
 381              	.LVL47:
 189:Src/mcp.c     **** 
 382              		.loc 1 189 7 is_stmt 1 view .LVU127
 191:Src/mcp.c     ****       {
 383              		.loc 1 191 7 view .LVU128
 191:Src/mcp.c     ****       {
 384              		.loc 1 191 10 is_stmt 0 view .LVU129
 385 0050 10F0060F 		tst	r0, #6
 386 0054 14D1     		bne	.L28
 198:Src/mcp.c     ****         if (retVal == MCP_CMD_OK )
 387              		.loc 1 198 9 is_stmt 1 view .LVU130
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 388              		.loc 1 186 13 is_stmt 0 view .LVU131
 389 0056 20F00700 		bic	r0, r0, #7
 390              	.LVL48:
 198:Src/mcp.c     ****         if (retVal == MCP_CMD_OK )
 391              		.loc 1 198 28 view .LVU132
 392 005a 01F00703 		and	r3, r1, #7
 393 005e 06AA     		add	r2, sp, #24
 394 0060 02EB8303 		add	r3, r2, r3, lsl #2
 198:Src/mcp.c     ****         if (retVal == MCP_CMD_OK )
 395              		.loc 1 198 18 view .LVU133
 396 0064 0095     		str	r5, [sp]
 397              	.LVL49:
 198:Src/mcp.c     ****         if (retVal == MCP_CMD_OK )
 398              		.loc 1 198 18 view .LVU134
 399 0066 53F80CAC 		ldr	r10, [r3, #-12]
 400 006a 0DF11603 		add	r3, sp, #22
 401 006e 3A46     		mov	r2, r7
 402 0070 01F03801 		and	r1, r1, #56
 403              	.LVL50:
 198:Src/mcp.c     ****         if (retVal == MCP_CMD_OK )
 404              		.loc 1 198 18 view .LVU135
 405 0074 D047     		blx	r10
 406              	.LVL51:
 199:Src/mcp.c     ****         {
 407              		.loc 1 199 9 is_stmt 1 view .LVU136
 199:Src/mcp.c     ****         {
 408              		.loc 1 199 12 is_stmt 0 view .LVU137
 409 0076 0246     		mov	r2, r0
ARM GAS  /tmp/ccXG7vE7.s 			page 13


 410 0078 18B9     		cbnz	r0, .L29
 199:Src/mcp.c     ****         {
 411              		.loc 1 199 12 view .LVU138
 412 007a D8E7     		b	.L32
 413              	.LVL52:
 414              	.L27:
 159:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
 415              		.loc 1 159 11 view .LVU139
 416 007c 0122     		movs	r2, #1
 417 007e 00E0     		b	.L29
 418              	.LVL53:
 419              	.L28:
 193:Src/mcp.c     ****         rxLength = 0;
 420              		.loc 1 193 16 view .LVU140
 421 0080 0122     		movs	r2, #1
 422              	.LVL54:
 180:Src/mcp.c     ****     {
 423              		.loc 1 180 11 is_stmt 1 view .LVU141
 205:Src/mcp.c     ****         }
 206:Src/mcp.c     ****         else
 207:Src/mcp.c     ****         {
 208:Src/mcp.c     ****           rxLength = 0;
 209:Src/mcp.c     ****         }
 210:Src/mcp.c     ****       }
 211:Src/mcp.c     ****     }
 212:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
 213:Src/mcp.c     ****   }
 214:Src/mcp.c     **** #endif
 215:Src/mcp.c     ****   return (retVal);
 424              		.loc 1 215 3 view .LVU142
 425              	.L29:
 216:Src/mcp.c     **** }
 426              		.loc 1 216 1 is_stmt 0 view .LVU143
 427 0082 1046     		mov	r0, r2
 428 0084 06B0     		add	sp, sp, #24
 429              	.LCFI6:
 430              		.cfi_def_cfa_offset 32
 431              		@ sp needed
 432 0086 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 433              	.L34:
 434 008a 00BF     		.align	2
 435              	.L33:
 436 008c 00000000 		.word	RI_GetRegisterGlobal
 437 0090 00000000 		.word	RI_GetRegisterMotor1
 438              		.cfi_endproc
 439              	.LFE1714:
 441              		.section	.text.MCP_ReceivedPacket,"ax",%progbits
 442              		.align	1
 443              		.global	MCP_ReceivedPacket
 444              		.syntax unified
 445              		.thumb
 446              		.thumb_func
 447              		.fpu fpv4-sp-d16
 449              	MCP_ReceivedPacket:
 450              	.LVL55:
 451              	.LFB1715:
 217:Src/mcp.c     **** 
ARM GAS  /tmp/ccXG7vE7.s 			page 14


 218:Src/mcp.c     **** /**
 219:Src/mcp.c     ****   * @brief  Parses the header from the received packet and call the required function depending on 
 220:Src/mcp.c     ****   *
 221:Src/mcp.c     ****   * @param  pHandle Handler of the current instance of the MCP component
 222:Src/mcp.c     ****   */
 223:Src/mcp.c     **** void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
 224:Src/mcp.c     **** {
 452              		.loc 1 224 1 is_stmt 1 view -0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              		.loc 1 224 1 is_stmt 0 view .LVU145
 457 0000 30B5     		push	{r4, r5, lr}
 458              	.LCFI7:
 459              		.cfi_def_cfa_offset 12
 460              		.cfi_offset 4, -12
 461              		.cfi_offset 5, -8
 462              		.cfi_offset 14, -4
 463 0002 83B0     		sub	sp, sp, #12
 464              	.LCFI8:
 465              		.cfi_def_cfa_offset 24
 466 0004 0446     		mov	r4, r0
 225:Src/mcp.c     ****   const uint16_t *packetHeader;
 467              		.loc 1 225 3 is_stmt 1 view .LVU146
 226:Src/mcp.c     ****   uint16_t command;
 468              		.loc 1 226 3 view .LVU147
 227:Src/mcp.c     ****   int16_t txSyncFreeSpace;
 469              		.loc 1 227 3 view .LVU148
 228:Src/mcp.c     ****   uint8_t motorID;
 470              		.loc 1 228 3 view .LVU149
 229:Src/mcp.c     ****   uint8_t MCPResponse;
 471              		.loc 1 229 3 view .LVU150
 230:Src/mcp.c     ****   uint8_t userCommand=0;
 472              		.loc 1 230 3 view .LVU151
 473              	.LVL56:
 231:Src/mcp.c     **** 
 232:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_MCP
 233:Src/mcp.c     ****   if ((MC_NULL == pHandle) || (0U == pHandle->rxLength))
 234:Src/mcp.c     ****   {
 235:Src/mcp.c     ****     /* Nothing to do, txBuffer and txLength have not been modified */
 236:Src/mcp.c     ****   }
 237:Src/mcp.c     ****   else /* Length is 0, this is a request to send back the last packet */
 238:Src/mcp.c     ****   {
 239:Src/mcp.c     **** #endif
 240:Src/mcp.c     ****     packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 474              		.loc 1 240 5 view .LVU152
 475              		.loc 1 240 18 is_stmt 0 view .LVU153
 476 0006 4168     		ldr	r1, [r0, #4]
 477              	.LVL57:
 241:Src/mcp.c     ****     command = (uint16_t)(*packetHeader & CMD_MASK);
 478              		.loc 1 241 5 is_stmt 1 view .LVU154
 479              		.loc 1 241 26 is_stmt 0 view .LVU155
 480 0008 0888     		ldrh	r0, [r1]
 481              	.LVL58:
 482              		.loc 1 241 13 view .LVU156
 483 000a 20F00703 		bic	r3, r0, #7
 484 000e 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccXG7vE7.s 			page 15


 485              	.LVL59:
 242:Src/mcp.c     **** 
 243:Src/mcp.c     ****     if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 486              		.loc 1 243 5 is_stmt 1 view .LVU157
 487              		.loc 1 243 8 is_stmt 0 view .LVU158
 488 0010 00F47F42 		and	r2, r0, #65280
 489 0014 B2F5807F 		cmp	r2, #256
 490 0018 42D0     		beq	.L59
 244:Src/mcp.c     ****     {
 245:Src/mcp.c     ****       userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 246:Src/mcp.c     ****       command = MCP_USER_CMD;
 247:Src/mcp.c     ****     }
 248:Src/mcp.c     ****     else
 249:Src/mcp.c     ****     {
 250:Src/mcp.c     ****       /* Nothing to do */
 251:Src/mcp.c     ****     }
 491              		.loc 1 251 5 is_stmt 1 view .LVU159
 252:Src/mcp.c     **** 
 253:Src/mcp.c     ****     motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 492              		.loc 1 253 5 view .LVU160
 493              	.LVL60:
 254:Src/mcp.c     ****     MCI_Handle_t *pMCI = &Mci[motorID];
 494              		.loc 1 254 5 view .LVU161
 253:Src/mcp.c     ****     MCI_Handle_t *pMCI = &Mci[motorID];
 495              		.loc 1 253 40 is_stmt 0 view .LVU162
 496 001a 0138     		subs	r0, r0, #1
 497              	.LVL61:
 498              		.loc 1 254 19 view .LVU163
 499 001c 00F00700 		and	r0, r0, #7
 500              	.LVL62:
 501              		.loc 1 254 19 view .LVU164
 502 0020 2C22     		movs	r2, #44
 503 0022 624D     		ldr	r5, .L61
 504 0024 02FB0055 		mla	r5, r2, r0, r5
 505              	.LVL63:
 255:Src/mcp.c     **** 
 256:Src/mcp.c     ****     /* Removing MCP Header from RxBuffer */
 257:Src/mcp.c     ****     pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 506              		.loc 1 257 5 is_stmt 1 view .LVU165
 507              		.loc 1 257 43 is_stmt 0 view .LVU166
 508 0028 A089     		ldrh	r0, [r4, #12]
 509 002a 0238     		subs	r0, r0, #2
 510 002c 80B2     		uxth	r0, r0
 511              		.loc 1 257 23 view .LVU167
 512 002e A081     		strh	r0, [r4, #12]	@ movhi
 513              	.LVL64:
 258:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 514              		.loc 1 258 5 is_stmt 1 view .LVU168
 515              		.loc 1 258 43 is_stmt 0 view .LVU169
 516 0030 0231     		adds	r1, r1, #2
 517              	.LVL65:
 518              		.loc 1 258 23 view .LVU170
 519 0032 6160     		str	r1, [r4, #4]
 520              	.LVL66:
 259:Src/mcp.c     **** 
 260:Src/mcp.c     ****     /* Commands requiering payload response must be aware of space available for the payload */
 261:Src/mcp.c     ****     /* Last byte is reserved for MCP response*/
ARM GAS  /tmp/ccXG7vE7.s 			page 16


 262:Src/mcp.c     ****     txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 521              		.loc 1 262 5 is_stmt 1 view .LVU171
 522              		.loc 1 262 56 is_stmt 0 view .LVU172
 523 0034 2268     		ldr	r2, [r4]
 524              		.loc 1 262 75 view .LVU173
 525 0036 9289     		ldrh	r2, [r2, #12]
 526 0038 013A     		subs	r2, r2, #1
 527 003a 1FFA82FE 		uxth	lr, r2
 528              		.loc 1 262 21 view .LVU174
 529 003e 12B2     		sxth	r2, r2
 530              	.LVL67:
 263:Src/mcp.c     **** 
 264:Src/mcp.c     ****     /* Initialization of the tx length, command which send back data has to increment the txLength
 265:Src/mcp.c     ****      * (case of Read register) */
 266:Src/mcp.c     ****     pHandle->txLength = 0U;
 531              		.loc 1 266 5 is_stmt 1 view .LVU175
 532              		.loc 1 266 23 is_stmt 0 view .LVU176
 533 0040 4FF0000C 		mov	ip, #0
 534 0044 A4F80EC0 		strh	ip, [r4, #14]	@ movhi
 267:Src/mcp.c     **** 
 268:Src/mcp.c     ****     switch (command)
 535              		.loc 1 268 5 is_stmt 1 view .LVU177
 536 0048 482B     		cmp	r3, #72
 537 004a 3BD8     		bhi	.L39
 538 004c 482B     		cmp	r3, #72
 539 004e 00F2A180 		bhi	.L54
 540 0052 DFE803F0 		tbb	[pc, r3]
 541              	.LVL68:
 542              	.L41:
 543 0056 47       		.byte	(.L50-.L41)/2
 544 0057 9F       		.byte	(.L54-.L41)/2
 545 0058 9F       		.byte	(.L54-.L41)/2
 546 0059 9F       		.byte	(.L54-.L41)/2
 547 005a 9F       		.byte	(.L54-.L41)/2
 548 005b 9F       		.byte	(.L54-.L41)/2
 549 005c 9F       		.byte	(.L54-.L41)/2
 550 005d 9F       		.byte	(.L54-.L41)/2
 551 005e 4E       		.byte	(.L49-.L41)/2
 552 005f 9F       		.byte	(.L54-.L41)/2
 553 0060 9F       		.byte	(.L54-.L41)/2
 554 0061 9F       		.byte	(.L54-.L41)/2
 555 0062 9F       		.byte	(.L54-.L41)/2
 556 0063 9F       		.byte	(.L54-.L41)/2
 557 0064 9F       		.byte	(.L54-.L41)/2
 558 0065 9F       		.byte	(.L54-.L41)/2
 559 0066 53       		.byte	(.L48-.L41)/2
 560 0067 9F       		.byte	(.L54-.L41)/2
 561 0068 9F       		.byte	(.L54-.L41)/2
 562 0069 9F       		.byte	(.L54-.L41)/2
 563 006a 9F       		.byte	(.L54-.L41)/2
 564 006b 9F       		.byte	(.L54-.L41)/2
 565 006c 9F       		.byte	(.L54-.L41)/2
 566 006d 9F       		.byte	(.L54-.L41)/2
 567 006e 58       		.byte	(.L47-.L41)/2
 568 006f 9F       		.byte	(.L54-.L41)/2
 569 0070 9F       		.byte	(.L54-.L41)/2
 570 0071 9F       		.byte	(.L54-.L41)/2
ARM GAS  /tmp/ccXG7vE7.s 			page 17


 571 0072 9F       		.byte	(.L54-.L41)/2
 572 0073 9F       		.byte	(.L54-.L41)/2
 573 0074 9F       		.byte	(.L54-.L41)/2
 574 0075 9F       		.byte	(.L54-.L41)/2
 575 0076 5F       		.byte	(.L46-.L41)/2
 576 0077 9F       		.byte	(.L54-.L41)/2
 577 0078 9F       		.byte	(.L54-.L41)/2
 578 0079 9F       		.byte	(.L54-.L41)/2
 579 007a 9F       		.byte	(.L54-.L41)/2
 580 007b 9F       		.byte	(.L54-.L41)/2
 581 007c 9F       		.byte	(.L54-.L41)/2
 582 007d 9F       		.byte	(.L54-.L41)/2
 583 007e 68       		.byte	(.L45-.L41)/2
 584 007f 9F       		.byte	(.L54-.L41)/2
 585 0080 9F       		.byte	(.L54-.L41)/2
 586 0081 9F       		.byte	(.L54-.L41)/2
 587 0082 9F       		.byte	(.L54-.L41)/2
 588 0083 9F       		.byte	(.L54-.L41)/2
 589 0084 9F       		.byte	(.L54-.L41)/2
 590 0085 9F       		.byte	(.L54-.L41)/2
 591 0086 74       		.byte	(.L44-.L41)/2
 592 0087 9F       		.byte	(.L54-.L41)/2
 593 0088 9F       		.byte	(.L54-.L41)/2
 594 0089 9F       		.byte	(.L54-.L41)/2
 595 008a 9F       		.byte	(.L54-.L41)/2
 596 008b 9F       		.byte	(.L54-.L41)/2
 597 008c 9F       		.byte	(.L54-.L41)/2
 598 008d 9F       		.byte	(.L54-.L41)/2
 599 008e 84       		.byte	(.L43-.L41)/2
 600 008f 9F       		.byte	(.L54-.L41)/2
 601 0090 9F       		.byte	(.L54-.L41)/2
 602 0091 9F       		.byte	(.L54-.L41)/2
 603 0092 9F       		.byte	(.L54-.L41)/2
 604 0093 9F       		.byte	(.L54-.L41)/2
 605 0094 9F       		.byte	(.L54-.L41)/2
 606 0095 9F       		.byte	(.L54-.L41)/2
 607 0096 89       		.byte	(.L42-.L41)/2
 608 0097 9F       		.byte	(.L54-.L41)/2
 609 0098 9F       		.byte	(.L54-.L41)/2
 610 0099 9F       		.byte	(.L54-.L41)/2
 611 009a 9F       		.byte	(.L54-.L41)/2
 612 009b 9F       		.byte	(.L54-.L41)/2
 613 009c 9F       		.byte	(.L54-.L41)/2
 614 009d 9F       		.byte	(.L54-.L41)/2
 615 009e 8F       		.byte	(.L40-.L41)/2
 616 009f 00       		.p2align 1
 617              	.L59:
 245:Src/mcp.c     ****       command = MCP_USER_CMD;
 618              		.loc 1 245 7 view .LVU178
 245:Src/mcp.c     ****       command = MCP_USER_CMD;
 619              		.loc 1 245 19 is_stmt 0 view .LVU179
 620 00a0 C3F3C403 		ubfx	r3, r3, #3, #5
 621              	.LVL69:
 246:Src/mcp.c     ****     }
 622              		.loc 1 246 7 is_stmt 1 view .LVU180
 251:Src/mcp.c     **** 
 623              		.loc 1 251 5 view .LVU181
ARM GAS  /tmp/ccXG7vE7.s 			page 18


 253:Src/mcp.c     ****     MCI_Handle_t *pMCI = &Mci[motorID];
 624              		.loc 1 253 5 view .LVU182
 254:Src/mcp.c     **** 
 625              		.loc 1 254 5 view .LVU183
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 626              		.loc 1 257 5 view .LVU184
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 627              		.loc 1 257 43 is_stmt 0 view .LVU185
 628 00a4 A089     		ldrh	r0, [r4, #12]
 629              	.LVL70:
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 630              		.loc 1 257 43 view .LVU186
 631 00a6 0238     		subs	r0, r0, #2
 632 00a8 80B2     		uxth	r0, r0
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 633              		.loc 1 257 23 view .LVU187
 634 00aa A081     		strh	r0, [r4, #12]	@ movhi
 635              	.LVL71:
 258:Src/mcp.c     **** 
 636              		.loc 1 258 5 is_stmt 1 view .LVU188
 258:Src/mcp.c     **** 
 637              		.loc 1 258 43 is_stmt 0 view .LVU189
 638 00ac 0231     		adds	r1, r1, #2
 639              	.LVL72:
 258:Src/mcp.c     **** 
 640              		.loc 1 258 23 view .LVU190
 641 00ae 6160     		str	r1, [r4, #4]
 642              	.LVL73:
 262:Src/mcp.c     **** 
 643              		.loc 1 262 5 is_stmt 1 view .LVU191
 262:Src/mcp.c     **** 
 644              		.loc 1 262 56 is_stmt 0 view .LVU192
 645 00b0 2268     		ldr	r2, [r4]
 262:Src/mcp.c     **** 
 646              		.loc 1 262 75 view .LVU193
 647 00b2 9289     		ldrh	r2, [r2, #12]
 648 00b4 013A     		subs	r2, r2, #1
 262:Src/mcp.c     **** 
 649              		.loc 1 262 21 view .LVU194
 650 00b6 12B2     		sxth	r2, r2
 651              	.LVL74:
 266:Src/mcp.c     **** 
 652              		.loc 1 266 5 is_stmt 1 view .LVU195
 266:Src/mcp.c     **** 
 653              		.loc 1 266 23 is_stmt 0 view .LVU196
 654 00b8 0025     		movs	r5, #0
 655 00ba E581     		strh	r5, [r4, #14]	@ movhi
 656              		.loc 1 268 5 is_stmt 1 view .LVU197
 269:Src/mcp.c     ****     {
 270:Src/mcp.c     ****       case GET_MCP_VERSION:
 271:Src/mcp.c     ****       {
 272:Src/mcp.c     ****         pHandle->txLength = 4U;
 273:Src/mcp.c     ****         *pHandle->txBuffer = MCP_VERSION;
 274:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 275:Src/mcp.c     ****         break;
 276:Src/mcp.c     ****       }
 277:Src/mcp.c     **** 
ARM GAS  /tmp/ccXG7vE7.s 			page 19


 278:Src/mcp.c     ****       case SET_DATA_ELEMENT:
 279:Src/mcp.c     ****       {
 280:Src/mcp.c     ****         MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 281:Src/mcp.c     ****         break;
 282:Src/mcp.c     ****       }
 283:Src/mcp.c     **** 
 284:Src/mcp.c     ****       case GET_DATA_ELEMENT:
 285:Src/mcp.c     ****       {
 286:Src/mcp.c     ****         MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 287:Src/mcp.c     ****         break;
 288:Src/mcp.c     ****       }
 289:Src/mcp.c     **** 
 290:Src/mcp.c     ****       case START_MOTOR:
 291:Src/mcp.c     ****       {
 292:Src/mcp.c     ****         MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 293:Src/mcp.c     ****         break;
 294:Src/mcp.c     ****       }
 295:Src/mcp.c     **** 
 296:Src/mcp.c     ****       case STOP_MOTOR: /* Todo: Check the pertinance of return value */
 297:Src/mcp.c     ****       {
 298:Src/mcp.c     ****         (void)MCI_StopMotor(pMCI);
 299:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 300:Src/mcp.c     ****         break;
 301:Src/mcp.c     ****       }
 302:Src/mcp.c     **** 
 303:Src/mcp.c     ****       case SW_RESET:
 304:Src/mcp.c     ****       {
 305:Src/mcp.c     ****         HAL_NVIC_SystemReset();
 306:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 307:Src/mcp.c     ****         break;
 308:Src/mcp.c     ****       }
 309:Src/mcp.c     **** 
 310:Src/mcp.c     ****       case STOP_RAMP:
 311:Src/mcp.c     ****       {
 312:Src/mcp.c     ****         if (RUN == MCI_GetSTMState(pMCI))
 313:Src/mcp.c     ****         {
 314:Src/mcp.c     ****           MCI_StopRamp(pMCI);
 315:Src/mcp.c     ****         }
 316:Src/mcp.c     ****         else
 317:Src/mcp.c     ****         {
 318:Src/mcp.c     ****           /* Nothing to do */
 319:Src/mcp.c     ****         }
 320:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 321:Src/mcp.c     ****         break;
 322:Src/mcp.c     ****       }
 323:Src/mcp.c     **** 
 324:Src/mcp.c     ****       case START_STOP:
 325:Src/mcp.c     ****       {
 326:Src/mcp.c     ****         /* Queries the STM and a command start or stop depending on the state */
 327:Src/mcp.c     ****         if (IDLE == MCI_GetSTMState(pMCI))
 328:Src/mcp.c     ****         {
 329:Src/mcp.c     ****           MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 330:Src/mcp.c     ****         }
 331:Src/mcp.c     ****         else
 332:Src/mcp.c     ****         {
 333:Src/mcp.c     ****           (void)MCI_StopMotor(pMCI);
 334:Src/mcp.c     ****           MCPResponse = MCP_CMD_OK;
ARM GAS  /tmp/ccXG7vE7.s 			page 20


 335:Src/mcp.c     ****         }
 336:Src/mcp.c     ****         break;
 337:Src/mcp.c     ****       }
 338:Src/mcp.c     **** 
 339:Src/mcp.c     ****       case FAULT_ACK:
 340:Src/mcp.c     ****       {
 341:Src/mcp.c     ****         (void)MCI_FaultAcknowledged(pMCI);
 342:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 343:Src/mcp.c     ****         break;
 344:Src/mcp.c     ****       }
 345:Src/mcp.c     **** 
 346:Src/mcp.c     ****       case CPULOAD_CLEAR:
 347:Src/mcp.c     ****       {
 348:Src/mcp.c     ****         MCI_Clear_PerfMeasure(pMCI,M1);
 349:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 350:Src/mcp.c     ****         break;
 351:Src/mcp.c     ****       }
 352:Src/mcp.c     **** 
 353:Src/mcp.c     ****       case IQDREF_CLEAR:
 354:Src/mcp.c     ****       {
 355:Src/mcp.c     ****         MCI_Clear_Iqdref(pMCI);
 356:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 357:Src/mcp.c     ****         break;
 358:Src/mcp.c     ****       }
 359:Src/mcp.c     **** 
 360:Src/mcp.c     ****       case PFC_ENABLE:
 361:Src/mcp.c     ****       case PFC_DISABLE:
 362:Src/mcp.c     ****       case PFC_FAULT_ACK:
 363:Src/mcp.c     ****       {
 364:Src/mcp.c     ****         MCPResponse = MCP_CMD_UNKNOWN;
 365:Src/mcp.c     ****         break;
 366:Src/mcp.c     ****       }
 367:Src/mcp.c     **** 
 368:Src/mcp.c     ****       case PROFILER_CMD:
 369:Src/mcp.c     ****       {
 370:Src/mcp.c     ****         MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pH
 371:Src/mcp.c     ****                                          pHandle->txBuffer);
 372:Src/mcp.c     ****         break;
 373:Src/mcp.c     ****       }
 374:Src/mcp.c     **** 
 375:Src/mcp.c     ****       case MCP_USER_CMD:
 376:Src/mcp.c     ****       {
 377:Src/mcp.c     ****         if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 657              		.loc 1 377 9 view .LVU198
 658              		.loc 1 377 12 is_stmt 0 view .LVU199
 659 00bc 012B     		cmp	r3, #1
 660 00be 5FD9     		bls	.L37
 378:Src/mcp.c     ****         {
 379:Src/mcp.c     ****           MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncF
 380:Src/mcp.c     ****                                                       &pHandle->txLength, pHandle->txBuffer);
 381:Src/mcp.c     ****         }
 382:Src/mcp.c     ****         else
 383:Src/mcp.c     ****         {
 384:Src/mcp.c     ****           MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 661              		.loc 1 384 23 view .LVU200
 662 00c0 0D20     		movs	r0, #13
 663 00c2 68E0     		b	.L38
ARM GAS  /tmp/ccXG7vE7.s 			page 21


 664              	.LVL75:
 665              	.L39:
 268:Src/mcp.c     ****     {
 666              		.loc 1 268 5 view .LVU201
 667 00c4 782B     		cmp	r3, #120
 668 00c6 2AD0     		beq	.L51
 669 00c8 B3F5807F 		cmp	r3, #256
 670 00cc 57D0     		beq	.L55
 671 00ce 682B     		cmp	r3, #104
 672 00d0 18BF     		it	ne
 673 00d2 0220     		movne	r0, #2
 674 00d4 5FD1     		bne	.L38
 370:Src/mcp.c     ****                                          pHandle->txBuffer);
 675              		.loc 1 370 9 is_stmt 1 view .LVU202
 370:Src/mcp.c     ****                                          pHandle->txBuffer);
 676              		.loc 1 370 23 is_stmt 0 view .LVU203
 677 00d6 A368     		ldr	r3, [r4, #8]
 678              	.LVL76:
 370:Src/mcp.c     ****                                          pHandle->txBuffer);
 679              		.loc 1 370 23 view .LVU204
 680 00d8 0093     		str	r3, [sp]
 681 00da 04F10E03 		add	r3, r4, #14
 682 00de FFF7FEFF 		bl	MC_ProfilerCommand
 683              	.LVL77:
 372:Src/mcp.c     ****       }
 684              		.loc 1 372 9 is_stmt 1 view .LVU205
 685 00e2 58E0     		b	.L38
 686              	.LVL78:
 687              	.L50:
 272:Src/mcp.c     ****         *pHandle->txBuffer = MCP_VERSION;
 688              		.loc 1 272 9 view .LVU206
 272:Src/mcp.c     ****         *pHandle->txBuffer = MCP_VERSION;
 689              		.loc 1 272 27 is_stmt 0 view .LVU207
 690 00e4 0423     		movs	r3, #4
 691              	.LVL79:
 272:Src/mcp.c     ****         *pHandle->txBuffer = MCP_VERSION;
 692              		.loc 1 272 27 view .LVU208
 693 00e6 E381     		strh	r3, [r4, #14]	@ movhi
 273:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 694              		.loc 1 273 9 is_stmt 1 view .LVU209
 273:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 695              		.loc 1 273 17 is_stmt 0 view .LVU210
 696 00e8 A368     		ldr	r3, [r4, #8]
 273:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 697              		.loc 1 273 28 view .LVU211
 698 00ea 0122     		movs	r2, #1
 699 00ec 1A70     		strb	r2, [r3]
 274:Src/mcp.c     ****         break;
 700              		.loc 1 274 9 is_stmt 1 view .LVU212
 701              	.LVL80:
 275:Src/mcp.c     ****       }
 702              		.loc 1 275 9 view .LVU213
 274:Src/mcp.c     ****         break;
 703              		.loc 1 274 21 is_stmt 0 view .LVU214
 704 00ee 0020     		movs	r0, #0
 275:Src/mcp.c     ****       }
 705              		.loc 1 275 9 view .LVU215
ARM GAS  /tmp/ccXG7vE7.s 			page 22


 706 00f0 51E0     		b	.L38
 707              	.LVL81:
 708              	.L49:
 280:Src/mcp.c     ****         break;
 709              		.loc 1 280 9 is_stmt 1 view .LVU216
 280:Src/mcp.c     ****         break;
 710              		.loc 1 280 23 is_stmt 0 view .LVU217
 711 00f2 7146     		mov	r1, lr
 712              	.LVL82:
 280:Src/mcp.c     ****         break;
 713              		.loc 1 280 23 view .LVU218
 714 00f4 2046     		mov	r0, r4
 715 00f6 FFF7FEFF 		bl	RI_SetRegCommandParser
 716              	.LVL83:
 281:Src/mcp.c     ****       }
 717              		.loc 1 281 9 is_stmt 1 view .LVU219
 718 00fa 4CE0     		b	.L38
 719              	.LVL84:
 720              	.L48:
 286:Src/mcp.c     ****         break;
 721              		.loc 1 286 9 view .LVU220
 286:Src/mcp.c     ****         break;
 722              		.loc 1 286 23 is_stmt 0 view .LVU221
 723 00fc 7146     		mov	r1, lr
 724              	.LVL85:
 286:Src/mcp.c     ****         break;
 725              		.loc 1 286 23 view .LVU222
 726 00fe 2046     		mov	r0, r4
 727 0100 FFF7FEFF 		bl	RI_GetRegCommandParser
 728              	.LVL86:
 287:Src/mcp.c     ****       }
 729              		.loc 1 287 9 is_stmt 1 view .LVU223
 730 0104 47E0     		b	.L38
 731              	.LVL87:
 732              	.L47:
 292:Src/mcp.c     ****         break;
 733              		.loc 1 292 9 view .LVU224
 292:Src/mcp.c     ****         break;
 734              		.loc 1 292 24 is_stmt 0 view .LVU225
 735 0106 2846     		mov	r0, r5
 736 0108 FFF7FEFF 		bl	MCI_StartMotor
 737              	.LVL88:
 292:Src/mcp.c     ****         break;
 738              		.loc 1 292 67 view .LVU226
 739 010c 80F00100 		eor	r0, r0, #1
 292:Src/mcp.c     ****         break;
 740              		.loc 1 292 21 view .LVU227
 741 0110 C0B2     		uxtb	r0, r0
 742              	.LVL89:
 293:Src/mcp.c     ****       }
 743              		.loc 1 293 9 is_stmt 1 view .LVU228
 744 0112 40E0     		b	.L38
 745              	.LVL90:
 746              	.L46:
 298:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 747              		.loc 1 298 9 view .LVU229
 298:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
ARM GAS  /tmp/ccXG7vE7.s 			page 23


 748              		.loc 1 298 15 is_stmt 0 view .LVU230
 749 0114 2846     		mov	r0, r5
 750 0116 FFF7FEFF 		bl	MCI_StopMotor
 751              	.LVL91:
 299:Src/mcp.c     ****         break;
 752              		.loc 1 299 9 is_stmt 1 view .LVU231
 300:Src/mcp.c     ****       }
 753              		.loc 1 300 9 view .LVU232
 299:Src/mcp.c     ****         break;
 754              		.loc 1 299 21 is_stmt 0 view .LVU233
 755 011a 0020     		movs	r0, #0
 300:Src/mcp.c     ****       }
 756              		.loc 1 300 9 view .LVU234
 757 011c 3BE0     		b	.L38
 758              	.LVL92:
 759              	.L51:
 305:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 760              		.loc 1 305 9 is_stmt 1 view .LVU235
 761 011e FFF7FEFF 		bl	HAL_NVIC_SystemReset
 762              	.LVL93:
 306:Src/mcp.c     ****         break;
 763              		.loc 1 306 9 view .LVU236
 307:Src/mcp.c     ****       }
 764              		.loc 1 307 9 view .LVU237
 306:Src/mcp.c     ****         break;
 765              		.loc 1 306 21 is_stmt 0 view .LVU238
 766 0122 0020     		movs	r0, #0
 307:Src/mcp.c     ****       }
 767              		.loc 1 307 9 view .LVU239
 768 0124 37E0     		b	.L38
 769              	.LVL94:
 770              	.L45:
 312:Src/mcp.c     ****         {
 771              		.loc 1 312 9 is_stmt 1 view .LVU240
 312:Src/mcp.c     ****         {
 772              		.loc 1 312 20 is_stmt 0 view .LVU241
 773 0126 2846     		mov	r0, r5
 774 0128 FFF7FEFF 		bl	MCI_GetSTMState
 775              	.LVL95:
 312:Src/mcp.c     ****         {
 776              		.loc 1 312 12 view .LVU242
 777 012c 0628     		cmp	r0, #6
 778 012e 01D0     		beq	.L60
 320:Src/mcp.c     ****         break;
 779              		.loc 1 320 21 view .LVU243
 780 0130 0020     		movs	r0, #0
 781 0132 30E0     		b	.L38
 782              	.L60:
 314:Src/mcp.c     ****         }
 783              		.loc 1 314 11 is_stmt 1 view .LVU244
 784 0134 2846     		mov	r0, r5
 785 0136 FFF7FEFF 		bl	MCI_StopRamp
 786              	.LVL96:
 320:Src/mcp.c     ****         break;
 787              		.loc 1 320 21 is_stmt 0 view .LVU245
 788 013a 0020     		movs	r0, #0
 789 013c 2BE0     		b	.L38
ARM GAS  /tmp/ccXG7vE7.s 			page 24


 790              	.LVL97:
 791              	.L44:
 327:Src/mcp.c     ****         {
 792              		.loc 1 327 9 is_stmt 1 view .LVU246
 327:Src/mcp.c     ****         {
 793              		.loc 1 327 21 is_stmt 0 view .LVU247
 794 013e 2846     		mov	r0, r5
 795 0140 FFF7FEFF 		bl	MCI_GetSTMState
 796              	.LVL98:
 327:Src/mcp.c     ****         {
 797              		.loc 1 327 12 view .LVU248
 798 0144 30B9     		cbnz	r0, .L53
 329:Src/mcp.c     ****         }
 799              		.loc 1 329 11 is_stmt 1 view .LVU249
 329:Src/mcp.c     ****         }
 800              		.loc 1 329 26 is_stmt 0 view .LVU250
 801 0146 2846     		mov	r0, r5
 802 0148 FFF7FEFF 		bl	MCI_StartMotor
 803              	.LVL99:
 329:Src/mcp.c     ****         }
 804              		.loc 1 329 69 view .LVU251
 805 014c 80F00100 		eor	r0, r0, #1
 329:Src/mcp.c     ****         }
 806              		.loc 1 329 23 view .LVU252
 807 0150 C0B2     		uxtb	r0, r0
 808              	.LVL100:
 329:Src/mcp.c     ****         }
 809              		.loc 1 329 23 view .LVU253
 810 0152 20E0     		b	.L38
 811              	.LVL101:
 812              	.L53:
 333:Src/mcp.c     ****           MCPResponse = MCP_CMD_OK;
 813              		.loc 1 333 11 is_stmt 1 view .LVU254
 333:Src/mcp.c     ****           MCPResponse = MCP_CMD_OK;
 814              		.loc 1 333 17 is_stmt 0 view .LVU255
 815 0154 2846     		mov	r0, r5
 816 0156 FFF7FEFF 		bl	MCI_StopMotor
 817              	.LVL102:
 334:Src/mcp.c     ****         }
 818              		.loc 1 334 11 is_stmt 1 view .LVU256
 334:Src/mcp.c     ****         }
 819              		.loc 1 334 23 is_stmt 0 view .LVU257
 820 015a 0020     		movs	r0, #0
 821 015c 1BE0     		b	.L38
 822              	.LVL103:
 823              	.L43:
 341:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 824              		.loc 1 341 9 is_stmt 1 view .LVU258
 341:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 825              		.loc 1 341 15 is_stmt 0 view .LVU259
 826 015e 2846     		mov	r0, r5
 827 0160 FFF7FEFF 		bl	MCI_FaultAcknowledged
 828              	.LVL104:
 342:Src/mcp.c     ****         break;
 829              		.loc 1 342 9 is_stmt 1 view .LVU260
 343:Src/mcp.c     ****       }
 830              		.loc 1 343 9 view .LVU261
ARM GAS  /tmp/ccXG7vE7.s 			page 25


 342:Src/mcp.c     ****         break;
 831              		.loc 1 342 21 is_stmt 0 view .LVU262
 832 0164 0020     		movs	r0, #0
 343:Src/mcp.c     ****       }
 833              		.loc 1 343 9 view .LVU263
 834 0166 16E0     		b	.L38
 835              	.LVL105:
 836              	.L42:
 348:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 837              		.loc 1 348 9 is_stmt 1 view .LVU264
 838 0168 0021     		movs	r1, #0
 839              	.LVL106:
 348:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 840              		.loc 1 348 9 is_stmt 0 view .LVU265
 841 016a 2846     		mov	r0, r5
 842 016c FFF7FEFF 		bl	MCI_Clear_PerfMeasure
 843              	.LVL107:
 349:Src/mcp.c     ****         break;
 844              		.loc 1 349 9 is_stmt 1 view .LVU266
 350:Src/mcp.c     ****       }
 845              		.loc 1 350 9 view .LVU267
 349:Src/mcp.c     ****         break;
 846              		.loc 1 349 21 is_stmt 0 view .LVU268
 847 0170 0020     		movs	r0, #0
 350:Src/mcp.c     ****       }
 848              		.loc 1 350 9 view .LVU269
 849 0172 10E0     		b	.L38
 850              	.LVL108:
 851              	.L40:
 355:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 852              		.loc 1 355 9 is_stmt 1 view .LVU270
 853 0174 2846     		mov	r0, r5
 854 0176 FFF7FEFF 		bl	MCI_Clear_Iqdref
 855              	.LVL109:
 356:Src/mcp.c     ****         break;
 856              		.loc 1 356 9 view .LVU271
 357:Src/mcp.c     ****       }
 857              		.loc 1 357 9 view .LVU272
 356:Src/mcp.c     ****         break;
 858              		.loc 1 356 21 is_stmt 0 view .LVU273
 859 017a 0020     		movs	r0, #0
 357:Src/mcp.c     ****       }
 860              		.loc 1 357 9 view .LVU274
 861 017c 0BE0     		b	.L38
 862              	.LVL110:
 863              	.L55:
 268:Src/mcp.c     ****     {
 864              		.loc 1 268 5 view .LVU275
 865 017e 0023     		movs	r3, #0
 866              	.LVL111:
 867              	.L37:
 377:Src/mcp.c     ****         {
 868              		.loc 1 377 71 discriminator 1 view .LVU276
 869 0180 0B4D     		ldr	r5, .L61+4
 870 0182 55F82350 		ldr	r5, [r5, r3, lsl #2]
 377:Src/mcp.c     ****         {
 871              		.loc 1 377 51 discriminator 1 view .LVU277
ARM GAS  /tmp/ccXG7vE7.s 			page 26


 872 0186 75B1     		cbz	r5, .L57
 379:Src/mcp.c     ****                                                       &pHandle->txLength, pHandle->txBuffer);
 873              		.loc 1 379 11 is_stmt 1 view .LVU278
 379:Src/mcp.c     ****                                                       &pHandle->txLength, pHandle->txBuffer);
 874              		.loc 1 379 25 is_stmt 0 view .LVU279
 875 0188 A368     		ldr	r3, [r4, #8]
 876              	.LVL112:
 379:Src/mcp.c     ****                                                       &pHandle->txLength, pHandle->txBuffer);
 877              		.loc 1 379 25 view .LVU280
 878 018a 0093     		str	r3, [sp]
 879 018c 04F10E03 		add	r3, r4, #14
 880 0190 A847     		blx	r5
 881              	.LVL113:
 379:Src/mcp.c     ****                                                       &pHandle->txLength, pHandle->txBuffer);
 882              		.loc 1 379 23 view .LVU281
 883 0192 00E0     		b	.L38
 884              	.LVL114:
 885              	.L54:
 268:Src/mcp.c     ****     {
 886              		.loc 1 268 5 view .LVU282
 887 0194 0220     		movs	r0, #2
 888              	.LVL115:
 889              	.L38:
 385:Src/mcp.c     ****         }
 386:Src/mcp.c     ****         break;
 387:Src/mcp.c     ****       }
 388:Src/mcp.c     **** 
 389:Src/mcp.c     ****       default :
 390:Src/mcp.c     ****       {
 391:Src/mcp.c     ****         MCPResponse = MCP_CMD_UNKNOWN;
 392:Src/mcp.c     ****         break;
 393:Src/mcp.c     ****       }
 394:Src/mcp.c     ****     }
 395:Src/mcp.c     ****     pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 890              		.loc 1 395 5 is_stmt 1 view .LVU283
 891              		.loc 1 395 30 is_stmt 0 view .LVU284
 892 0196 E389     		ldrh	r3, [r4, #14]
 893              		.loc 1 395 42 view .LVU285
 894 0198 A268     		ldr	r2, [r4, #8]
 895 019a D054     		strb	r0, [r2, r3]
 396:Src/mcp.c     ****     pHandle->txLength++;
 896              		.loc 1 396 5 is_stmt 1 view .LVU286
 897              		.loc 1 396 22 is_stmt 0 view .LVU287
 898 019c E389     		ldrh	r3, [r4, #14]
 899 019e 0133     		adds	r3, r3, #1
 900 01a0 E381     		strh	r3, [r4, #14]	@ movhi
 397:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_MCP
 398:Src/mcp.c     ****   }
 399:Src/mcp.c     **** #endif
 400:Src/mcp.c     **** }
 901              		.loc 1 400 1 view .LVU288
 902 01a2 03B0     		add	sp, sp, #12
 903              	.LCFI9:
 904              		.cfi_remember_state
 905              		.cfi_def_cfa_offset 12
 906              		@ sp needed
 907 01a4 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccXG7vE7.s 			page 27


 908              	.LVL116:
 909              	.L57:
 910              	.LCFI10:
 911              		.cfi_restore_state
 384:Src/mcp.c     ****         }
 912              		.loc 1 384 23 view .LVU289
 913 01a6 0D20     		movs	r0, #13
 914 01a8 F5E7     		b	.L38
 915              	.L62:
 916 01aa 00BF     		.align	2
 917              	.L61:
 918 01ac 00000000 		.word	Mci
 919 01b0 00000000 		.word	MCP_UserCallBack
 920              		.cfi_endproc
 921              	.LFE1715:
 923              		.section	.text.MCP_RegisterCallBack,"ax",%progbits
 924              		.align	1
 925              		.global	MCP_RegisterCallBack
 926              		.syntax unified
 927              		.thumb
 928              		.thumb_func
 929              		.fpu fpv4-sp-d16
 931              	MCP_RegisterCallBack:
 932              	.LVL117:
 933              	.LFB1716:
 401:Src/mcp.c     **** 
 402:Src/mcp.c     **** /**
 403:Src/mcp.c     ****   * @brief  Stores user's MCP function to be later called as MCP function.
 404:Src/mcp.c     ****   *
 405:Src/mcp.c     ****   * @param  callBackID: ID used to get to the stored @p fctCB function
 406:Src/mcp.c     ****   * @param  fctCB: User call back function structure
 407:Src/mcp.c     ****   *
 408:Src/mcp.c     ****   * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not
 409:Src/mcp.c     ****   */
 410:Src/mcp.c     **** uint8_t MCP_RegisterCallBack (uint8_t callBackID, MCP_user_cb_t fctCB)
 411:Src/mcp.c     **** {
 934              		.loc 1 411 1 is_stmt 1 view -0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 0
 937              		@ frame_needed = 0, uses_anonymous_args = 0
 938              		@ link register save eliminated.
 412:Src/mcp.c     ****   uint8_t result;
 939              		.loc 1 412 3 view .LVU291
 413:Src/mcp.c     **** 
 414:Src/mcp.c     ****   if (callBackID < MCP_USER_CALLBACK_MAX)
 940              		.loc 1 414 3 view .LVU292
 941              		.loc 1 414 6 is_stmt 0 view .LVU293
 942 0000 0128     		cmp	r0, #1
 415:Src/mcp.c     ****   {
 416:Src/mcp.c     ****     MCP_UserCallBack[callBackID] = fctCB;
 943              		.loc 1 416 5 is_stmt 1 view .LVU294
 944              		.loc 1 416 34 is_stmt 0 view .LVU295
 945 0002 9DBF     		ittte	ls
 946 0004 024B     		ldrls	r3, .L66
 947 0006 43F82010 		strls	r1, [r3, r0, lsl #2]
 417:Src/mcp.c     ****     result = MCP_CMD_OK;
 948              		.loc 1 417 5 is_stmt 1 view .LVU296
ARM GAS  /tmp/ccXG7vE7.s 			page 28


 949              	.LVL118:
 950              		.loc 1 417 12 is_stmt 0 view .LVU297
 951 000a 0020     		movls	r0, #0
 952              	.LVL119:
 418:Src/mcp.c     ****   }
 419:Src/mcp.c     ****   else
 420:Src/mcp.c     ****   {
 421:Src/mcp.c     ****     result = MCP_CMD_NOK;
 953              		.loc 1 421 12 view .LVU298
 954 000c 0120     		movhi	r0, #1
 955              	.LVL120:
 422:Src/mcp.c     ****   }
 423:Src/mcp.c     ****   return (result);
 956              		.loc 1 423 3 is_stmt 1 view .LVU299
 424:Src/mcp.c     **** }
 957              		.loc 1 424 1 is_stmt 0 view .LVU300
 958 000e 7047     		bx	lr
 959              	.L67:
 960              		.align	2
 961              	.L66:
 962 0010 00000000 		.word	MCP_UserCallBack
 963              		.cfi_endproc
 964              	.LFE1716:
 966              		.text
 967              	.Letext0:
 968              		.file 2 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_type
 969              		.file 3 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 970              		.file 4 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 971              		.file 5 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 972              		.file 6 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 973              		.file 7 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 974              		.file 8 "Inc/mc_type.h"
 975              		.file 9 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcptl.h"
 976              		.file 10 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcp.h"
 977              		.file 11 "Inc/pwm_curr_fdbk.h"
 978              		.file 12 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/pid_regulator.h"
 979              		.file 13 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
 980              		.file 14 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h"
 981              		.file 15 "Inc/mc_perf.h"
 982              		.file 16 "Inc/mc_interface.h"
 983              		.file 17 "Inc/mcp_config.h"
 984              		.file 18 "Inc/mc_api.h"
 985              		.file 19 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_cortex.h"
 986              		.file 20 "Inc/mc_config.h"
ARM GAS  /tmp/ccXG7vE7.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mcp.c
     /tmp/ccXG7vE7.s:18     .text.RI_SetRegCommandParser:0000000000000000 $t
     /tmp/ccXG7vE7.s:26     .text.RI_SetRegCommandParser:0000000000000000 RI_SetRegCommandParser
     /tmp/ccXG7vE7.s:265    .text.RI_SetRegCommandParser:00000000000000c4 $d
     /tmp/ccXG7vE7.s:271    .text.RI_GetRegCommandParser:0000000000000000 $t
     /tmp/ccXG7vE7.s:278    .text.RI_GetRegCommandParser:0000000000000000 RI_GetRegCommandParser
     /tmp/ccXG7vE7.s:436    .text.RI_GetRegCommandParser:000000000000008c $d
     /tmp/ccXG7vE7.s:442    .text.MCP_ReceivedPacket:0000000000000000 $t
     /tmp/ccXG7vE7.s:449    .text.MCP_ReceivedPacket:0000000000000000 MCP_ReceivedPacket
     /tmp/ccXG7vE7.s:543    .text.MCP_ReceivedPacket:0000000000000056 $d
     /tmp/ccXG7vE7.s:918    .text.MCP_ReceivedPacket:00000000000001ac $d
     /tmp/ccXG7vE7.s:924    .text.MCP_RegisterCallBack:0000000000000000 $t
     /tmp/ccXG7vE7.s:931    .text.MCP_RegisterCallBack:0000000000000000 MCP_RegisterCallBack
     /tmp/ccXG7vE7.s:962    .text.MCP_RegisterCallBack:0000000000000010 $d
     /tmp/ccXG7vE7.s:616    .text.MCP_ReceivedPacket:000000000000009f $d
     /tmp/ccXG7vE7.s:616    .text.MCP_ReceivedPacket:00000000000000a0 $t

UNDEFINED SYMBOLS
RI_SetRegisterGlobal
RI_SetRegisterMotor1
RI_GetRegisterGlobal
RI_GetRegisterMotor1
MC_ProfilerCommand
MCI_StartMotor
MCI_StopMotor
HAL_NVIC_SystemReset
MCI_GetSTMState
MCI_StopRamp
MCI_FaultAcknowledged
MCI_Clear_PerfMeasure
MCI_Clear_Iqdref
Mci
MCP_UserCallBack
