ARM GAS  /tmp/ccHEpvg0.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"mcp.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.RI_SetRegCommandParser,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	RI_SetRegCommandParser
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	RI_SetRegCommandParser:
  28              	.LVL0:
  29              	.LFB1713:
  30              		.file 1 "Src/mcp.c"
   1:Src/mcp.c     **** 
   2:Src/mcp.c     **** /**
   3:Src/mcp.c     ****   ******************************************************************************
   4:Src/mcp.c     ****   * @file    mcp.c
   5:Src/mcp.c     ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/mcp.c     ****   * @brief   This file provides firmware functions that implement the MCP protocol
   7:Src/mcp.c     ****   *
   8:Src/mcp.c     ****   *
   9:Src/mcp.c     ****   ******************************************************************************
  10:Src/mcp.c     ****   * @attention
  11:Src/mcp.c     ****   *
  12:Src/mcp.c     ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  13:Src/mcp.c     ****   * All rights reserved.</center></h2>
  14:Src/mcp.c     ****   *
  15:Src/mcp.c     ****   * This software component is licensed by ST under Ultimate Liberty license
  16:Src/mcp.c     ****   * SLA0044, the "License"; You may not use this file except in compliance with
  17:Src/mcp.c     ****   * the License. You may obtain a copy of the License at:
  18:Src/mcp.c     ****   *                             www.st.com/SLA0044
  19:Src/mcp.c     ****   *
  20:Src/mcp.c     ****   ******************************************************************************
  21:Src/mcp.c     ****   */
  22:Src/mcp.c     **** 
  23:Src/mcp.c     **** #include "mc_type.h"
  24:Src/mcp.c     **** #include "mcp.h"
  25:Src/mcp.c     **** #include "register_interface.h"
  26:Src/mcp.c     **** #include "mc_config.h"
  27:Src/mcp.c     **** #include "mcp_config.h"
  28:Src/mcp.c     **** #include "mc_api.h"
ARM GAS  /tmp/ccHEpvg0.s 			page 2


  29:Src/mcp.c     **** 
  30:Src/mcp.c     **** /** @addtogroup MCSDK
  31:Src/mcp.c     ****   * @{
  32:Src/mcp.c     ****   */
  33:Src/mcp.c     **** 
  34:Src/mcp.c     **** /** @defgroup MCP Motor Control Protocol
  35:Src/mcp.c     ****   *
  36:Src/mcp.c     ****   * @brief Motor Control Protocol components of the Motor Control SDK.
  37:Src/mcp.c     ****   *
  38:Src/mcp.c     ****   * These components implement the features needed to drive and monitor motor control applications 
  39:Src/mcp.c     ****   * They mainly focus on the communication with the controller, both on the receiving and the trans
  40:Src/mcp.c     ****   *
  41:Src/mcp.c     ****   * @{
  42:Src/mcp.c     ****   */
  43:Src/mcp.c     **** 
  44:Src/mcp.c     **** /**
  45:Src/mcp.c     ****   * @brief  Parses the payload in the received packet and call the required function in order to mo
  46:Src/mcp.c     ****   *
  47:Src/mcp.c     ****   * The function called depends on the targeted motor and/or targeted register : RI_SetRegisterGlob
  48:Src/mcp.c     ****   *
  49:Src/mcp.c     ****   * @param  pHandle Handler of the current instance of the MCP component
  50:Src/mcp.c     ****   * @param  txSyncFreeSpace Space available for synchronous transmission
  51:Src/mcp.c     ****   *
  52:Src/mcp.c     ****   * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  53:Src/mcp.c     ****   */
  54:Src/mcp.c     **** uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
  55:Src/mcp.c     **** {
  31              		.loc 1 55 1 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 24
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		.loc 1 55 1 is_stmt 0 view .LVU1
  36 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 36
  39              		.cfi_offset 4, -36
  40              		.cfi_offset 5, -32
  41              		.cfi_offset 6, -28
  42              		.cfi_offset 7, -24
  43              		.cfi_offset 8, -20
  44              		.cfi_offset 9, -16
  45              		.cfi_offset 10, -12
  46              		.cfi_offset 11, -8
  47              		.cfi_offset 14, -4
  56:Src/mcp.c     ****   uint8_t retVal = MCP_CMD_OK;
  57:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
  58:Src/mcp.c     ****   if (MC_NULL == pHandle)
  59:Src/mcp.c     ****   {
  60:Src/mcp.c     ****     retVal = MCP_CMD_NOK;
  61:Src/mcp.c     ****   }
  62:Src/mcp.c     ****   else
  63:Src/mcp.c     ****   {
  64:Src/mcp.c     **** #endif
  65:Src/mcp.c     ****     uint16_t * dataElementID;
  66:Src/mcp.c     ****     uint8_t * rxData = pHandle->rxBuffer;
  67:Src/mcp.c     ****     uint8_t * txData = pHandle->txBuffer;
  68:Src/mcp.c     ****     int16_t rxLength = pHandle->rxLength;
ARM GAS  /tmp/ccHEpvg0.s 			page 3


  48              		.loc 1 68 13 view .LVU2
  49 0004 B0F90C40 		ldrsh	r4, [r0, #12]
  69:Src/mcp.c     ****     uint16_t size = 0U;
  70:Src/mcp.c     ****     uint8_t accessResult;
  71:Src/mcp.c     **** 
  72:Src/mcp.c     ****     uint16_t regID;
  73:Src/mcp.c     ****     uint8_t typeID;
  74:Src/mcp.c     ****     uint8_t motorID;
  75:Src/mcp.c     ****     uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_
  50              		.loc 1 75 15 view .LVU3
  51 0008 324B     		ldr	r3, .L32
  55:Src/mcp.c     ****   uint8_t retVal = MCP_CMD_OK;
  52              		.loc 1 55 1 view .LVU4
  53 000a 89B0     		sub	sp, sp, #36
  54              	.LCFI1:
  55              		.cfi_def_cfa_offset 72
  69:Src/mcp.c     ****     uint16_t size = 0U;
  56              		.loc 1 69 14 view .LVU5
  57 000c 4FF0000A 		mov	r10, #0
  58              		.loc 1 75 15 view .LVU6
  59 0010 0693     		str	r3, [sp, #24]
  76:Src/mcp.c     ****     uint8_t number_of_item =0;
  77:Src/mcp.c     ****     pHandle->txLength = 0;
  78:Src/mcp.c     **** 
  79:Src/mcp.c     ****     while (rxLength > 0)
  60              		.loc 1 79 11 view .LVU7
  61 0012 5445     		cmp	r4, r10
  75:Src/mcp.c     ****     uint8_t number_of_item =0;
  62              		.loc 1 75 15 view .LVU8
  63 0014 304B     		ldr	r3, .L32+4
  69:Src/mcp.c     ****     uint8_t accessResult;
  64              		.loc 1 69 14 view .LVU9
  65 0016 ADF816A0 		strh	r10, [sp, #22]	@ movhi
  67:Src/mcp.c     ****     int16_t rxLength = pHandle->rxLength;
  66              		.loc 1 67 15 view .LVU10
  67 001a D0E901C6 		ldrd	ip, r6, [r0, #4]
  55:Src/mcp.c     ****   uint8_t retVal = MCP_CMD_OK;
  68              		.loc 1 55 1 view .LVU11
  69 001e 0746     		mov	r7, r0
  56:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
  70              		.loc 1 56 3 is_stmt 1 view .LVU12
  71              	.LVL1:
  65:Src/mcp.c     ****     uint8_t * rxData = pHandle->rxBuffer;
  72              		.loc 1 65 5 view .LVU13
  66:Src/mcp.c     ****     uint8_t * txData = pHandle->txBuffer;
  73              		.loc 1 66 5 view .LVU14
  68:Src/mcp.c     ****     uint16_t size = 0U;
  74              		.loc 1 68 5 view .LVU15
  69:Src/mcp.c     ****     uint8_t accessResult;
  75              		.loc 1 69 5 view .LVU16
  70:Src/mcp.c     **** 
  76              		.loc 1 70 5 view .LVU17
  72:Src/mcp.c     ****     uint8_t typeID;
  77              		.loc 1 72 5 view .LVU18
  73:Src/mcp.c     ****     uint8_t motorID;
  78              		.loc 1 73 5 view .LVU19
  74:Src/mcp.c     ****     uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_
ARM GAS  /tmp/ccHEpvg0.s 			page 4


  79              		.loc 1 74 5 view .LVU20
  75:Src/mcp.c     ****     uint8_t number_of_item =0;
  80              		.loc 1 75 5 view .LVU21
  76:Src/mcp.c     ****     pHandle->txLength = 0;
  81              		.loc 1 76 5 view .LVU22
  77:Src/mcp.c     **** 
  82              		.loc 1 77 5 view .LVU23
  83              		.loc 1 79 5 view .LVU24
  84              		.loc 1 79 11 view .LVU25
  75:Src/mcp.c     ****     uint8_t number_of_item =0;
  85              		.loc 1 75 15 is_stmt 0 view .LVU26
  86 0020 0793     		str	r3, [sp, #28]
  77:Src/mcp.c     **** 
  87              		.loc 1 77 23 view .LVU27
  88 0022 A0F80EA0 		strh	r10, [r0, #14]	@ movhi
  89              		.loc 1 79 11 view .LVU28
  90 0026 3BDD     		ble	.L10
  91 0028 06EB0108 		add	r8, r6, r1
  56:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
  92              		.loc 1 56 11 view .LVU29
  93 002c CDF80CA0 		str	r10, [sp, #12]
  80:Src/mcp.c     ****     {
  81:Src/mcp.c     ****       number_of_item ++;
  82:Src/mcp.c     ****       dataElementID = (uint16_t *) rxData;
  83:Src/mcp.c     ****       rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
  84:Src/mcp.c     ****       rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
  85:Src/mcp.c     **** 
  86:Src/mcp.c     ****       regID = *dataElementID & REG_MASK;
  87:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
  88:Src/mcp.c     **** 
  89:Src/mcp.c     ****       motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
  90:Src/mcp.c     **** 
  91:Src/mcp.c     ****       if (motorID > NBR_OF_MOTORS)
  92:Src/mcp.c     ****       {
  93:Src/mcp.c     ****         retVal = MCP_CMD_NOK;
  94:Src/mcp.c     ****         rxLength = 0;
  95:Src/mcp.c     ****       }
  96:Src/mcp.c     ****       else
  97:Src/mcp.c     ****       {
  98:Src/mcp.c     ****         accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
  99:Src/mcp.c     ****         /* Prepare next data*/
 100:Src/mcp.c     ****         rxLength = (int16_t) (rxLength - size);
 101:Src/mcp.c     ****         rxData = rxData+size;
 102:Src/mcp.c     ****         /* If there is only one CMD in the buffer, we do not store the result */
 103:Src/mcp.c     ****         if ((1U == number_of_item) && (0 == rxLength))
  94              		.loc 1 103 12 view .LVU30
  95 0030 C6F10109 		rsb	r9, r6, #1
  96              	.LVL2:
  97              	.L9:
  81:Src/mcp.c     ****       dataElementID = (uint16_t *) rxData;
  98              		.loc 1 81 7 is_stmt 1 view .LVU31
  82:Src/mcp.c     ****       rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
  99              		.loc 1 82 7 view .LVU32
  83:Src/mcp.c     ****       rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 100              		.loc 1 83 7 view .LVU33
  84:Src/mcp.c     **** 
 101              		.loc 1 84 7 view .LVU34
ARM GAS  /tmp/ccHEpvg0.s 			page 5


  86:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 102              		.loc 1 86 7 view .LVU35
  84:Src/mcp.c     **** 
 103              		.loc 1 84 14 is_stmt 0 view .LVU36
 104 0034 0CF10205 		add	r5, ip, #2
 105              	.LVL3:
  98:Src/mcp.c     ****         /* Prepare next data*/
 106              		.loc 1 98 9 is_stmt 1 view .LVU37
  86:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 107              		.loc 1 86 15 is_stmt 0 view .LVU38
 108 0038 BCF800C0 		ldrh	ip, [ip]
 109              	.LVL4:
  87:Src/mcp.c     **** 
 110              		.loc 1 87 7 is_stmt 1 view .LVU39
  87:Src/mcp.c     **** 
 111              		.loc 1 87 16 is_stmt 0 view .LVU40
 112 003c 5FFA8CF1 		uxtb	r1, ip
 113              	.LVL5:
  89:Src/mcp.c     **** 
 114              		.loc 1 89 7 is_stmt 1 view .LVU41
  91:Src/mcp.c     ****       {
 115              		.loc 1 91 7 view .LVU42
  83:Src/mcp.c     ****       rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 116              		.loc 1 83 26 is_stmt 0 view .LVU43
 117 0040 023C     		subs	r4, r4, #2
 118              	.LVL6:
  98:Src/mcp.c     ****         /* Prepare next data*/
 119              		.loc 1 98 34 view .LVU44
 120 0042 01F0070B 		and	fp, r1, #7
 121 0046 0DF1200A 		add	r10, sp, #32
  91:Src/mcp.c     ****       {
 122              		.loc 1 91 10 view .LVU45
 123 004a 1CF0060F 		tst	ip, #6
  98:Src/mcp.c     ****         /* Prepare next data*/
 124              		.loc 1 98 24 view .LVU46
 125 004e 0FFA84FE 		sxth	lr, r4
 126 0052 0DF11603 		add	r3, sp, #22
 127 0056 2A46     		mov	r2, r5
  83:Src/mcp.c     ****       rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 128              		.loc 1 83 26 view .LVU47
 129 0058 A4B2     		uxth	r4, r4
  86:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 130              		.loc 1 86 13 view .LVU48
 131 005a 2CF00700 		bic	r0, ip, #7
  98:Src/mcp.c     ****         /* Prepare next data*/
 132              		.loc 1 98 34 view .LVU49
 133 005e 0AEB8B0B 		add	fp, r10, fp, lsl #2
  98:Src/mcp.c     ****         /* Prepare next data*/
 134              		.loc 1 98 24 view .LVU50
 135 0062 01F03801 		and	r1, r1, #56
 136              	.LVL7:
  91:Src/mcp.c     ****       {
 137              		.loc 1 91 10 view .LVU51
 138 0066 22D1     		bne	.L12
  98:Src/mcp.c     ****         /* Prepare next data*/
 139              		.loc 1 98 24 view .LVU52
 140 0068 CDF800E0 		str	lr, [sp]
ARM GAS  /tmp/ccHEpvg0.s 			page 6


 141 006c 5BF808BC 		ldr	fp, [fp, #-8]
 142 0070 D847     		blx	fp
 143              	.LVL8:
 104:Src/mcp.c     ****         {
 105:Src/mcp.c     ****           retVal = accessResult;
 106:Src/mcp.c     ****         }
 107:Src/mcp.c     ****         else
 108:Src/mcp.c     ****         {/* Store the result for each access to be able to report failing access */
 109:Src/mcp.c     ****           if (txSyncFreeSpace !=0 )
 144              		.loc 1 109 11 is_stmt 1 view .LVU53
 110:Src/mcp.c     ****           {
 111:Src/mcp.c     ****             *txData = accessResult;
 145              		.loc 1 111 13 view .LVU54
 100:Src/mcp.c     ****         rxData = rxData+size;
 146              		.loc 1 100 40 is_stmt 0 view .LVU55
 147 0072 BDF81620 		ldrh	r2, [sp, #22]
 103:Src/mcp.c     ****         {
 148              		.loc 1 103 12 view .LVU56
 149 0076 06EB0903 		add	r3, r6, r9
 150 007a DBB2     		uxtb	r3, r3
 151              	.LVL9:
 100:Src/mcp.c     ****         rxData = rxData+size;
 152              		.loc 1 100 9 is_stmt 1 view .LVU57
 100:Src/mcp.c     ****         rxData = rxData+size;
 153              		.loc 1 100 40 is_stmt 0 view .LVU58
 154 007c A41A     		subs	r4, r4, r2
 103:Src/mcp.c     ****         {
 155              		.loc 1 103 12 view .LVU59
 156 007e 012B     		cmp	r3, #1
 100:Src/mcp.c     ****         rxData = rxData+size;
 157              		.loc 1 100 18 view .LVU60
 158 0080 24B2     		sxth	r4, r4
 159              	.LVL10:
 101:Src/mcp.c     ****         /* If there is only one CMD in the buffer, we do not store the result */
 160              		.loc 1 101 9 is_stmt 1 view .LVU61
 101:Src/mcp.c     ****         /* If there is only one CMD in the buffer, we do not store the result */
 161              		.loc 1 101 16 is_stmt 0 view .LVU62
 162 0082 05EB020C 		add	ip, r5, r2
 163              	.LVL11:
 103:Src/mcp.c     ****         {
 164              		.loc 1 103 9 is_stmt 1 view .LVU63
 103:Src/mcp.c     ****         {
 165              		.loc 1 103 12 is_stmt 0 view .LVU64
 166 0086 1AD0     		beq	.L29
 167              	.L5:
 109:Src/mcp.c     ****           {
 168              		.loc 1 109 14 view .LVU65
 169 0088 4645     		cmp	r6, r8
 170 008a 14D0     		beq	.L11
 171              	.LVL12:
 112:Src/mcp.c     ****             txData = txData+1;
 113:Src/mcp.c     ****             pHandle->txLength++;
 114:Src/mcp.c     ****             txSyncFreeSpace--; /* decrement one by one no wraparound possible */
 115:Src/mcp.c     ****             retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 116:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 172              		.loc 1 116 13 is_stmt 1 view .LVU66
 111:Src/mcp.c     ****             txData = txData+1;
ARM GAS  /tmp/ccHEpvg0.s 			page 7


 173              		.loc 1 111 21 is_stmt 0 view .LVU67
 174 008c 06F8010B 		strb	r0, [r6], #1
 175              	.LVL13:
 112:Src/mcp.c     ****             txData = txData+1;
 176              		.loc 1 112 13 is_stmt 1 view .LVU68
 113:Src/mcp.c     ****             txSyncFreeSpace--; /* decrement one by one no wraparound possible */
 177              		.loc 1 113 13 view .LVU69
  79:Src/mcp.c     ****     {
 178              		.loc 1 79 11 view .LVU70
 113:Src/mcp.c     ****             txSyncFreeSpace--; /* decrement one by one no wraparound possible */
 179              		.loc 1 113 30 is_stmt 0 view .LVU71
 180 0090 FB89     		ldrh	r3, [r7, #14]
 181 0092 0133     		adds	r3, r3, #1
 182 0094 FB81     		strh	r3, [r7, #14]	@ movhi
 114:Src/mcp.c     ****             retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 183              		.loc 1 114 13 is_stmt 1 view .LVU72
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 184              		.loc 1 115 13 view .LVU73
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 185              		.loc 1 115 20 is_stmt 0 view .LVU74
 186 0096 40B9     		cbnz	r0, .L30
 187              	.L7:
  79:Src/mcp.c     ****     {
 188              		.loc 1 79 11 view .LVU75
 189 0098 002C     		cmp	r4, #0
 190 009a CBDC     		bgt	.L9
 191              	.LVL14:
 117:Src/mcp.c     ****             { /* From this point we are not able to continue to decode CMD buffer*/
 118:Src/mcp.c     ****               /* We stop the parsing */
 119:Src/mcp.c     ****               rxLength = 0;
 120:Src/mcp.c     ****             }
 121:Src/mcp.c     ****           }
 122:Src/mcp.c     ****           else
 123:Src/mcp.c     ****           {
 124:Src/mcp.c     ****             /* Stop parsing the cmd buffer as no space to answer */
 125:Src/mcp.c     ****             /* If we reach this state, chances are high the command was badly formated or received 
 126:Src/mcp.c     ****             rxLength = 0;
 127:Src/mcp.c     ****             retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 128:Src/mcp.c     ****           }
 129:Src/mcp.c     ****         }
 130:Src/mcp.c     ****       }
 131:Src/mcp.c     ****     }
 132:Src/mcp.c     ****     /* If all accesses are fine, just one global MCP_CMD_OK is required*/
 133:Src/mcp.c     ****     if (MCP_CMD_OK == retVal)
 192              		.loc 1 133 5 is_stmt 1 view .LVU76
 193 009c 0398     		ldr	r0, [sp, #12]
 194              	.LVL15:
 195              		.loc 1 133 8 is_stmt 0 view .LVU77
 196 009e 38B9     		cbnz	r0, .L3
 197              	.LVL16:
 198              	.L10:
 134:Src/mcp.c     ****     {
 135:Src/mcp.c     ****       pHandle->txLength = 0;
 199              		.loc 1 135 7 is_stmt 1 view .LVU78
 200              		.loc 1 135 25 is_stmt 0 view .LVU79
 201 00a0 0020     		movs	r0, #0
 202 00a2 F881     		strh	r0, [r7, #14]	@ movhi
ARM GAS  /tmp/ccHEpvg0.s 			page 8


 136:Src/mcp.c     ****     }
 137:Src/mcp.c     ****     else
 138:Src/mcp.c     ****     {
 139:Src/mcp.c     ****       /* Nothing to do */
 140:Src/mcp.c     ****     }
 203              		.loc 1 140 5 is_stmt 1 view .LVU80
 141:Src/mcp.c     ****   #ifdef NULL_PTR_CHECK_REG_INT
 142:Src/mcp.c     ****   }
 143:Src/mcp.c     **** #endif
 144:Src/mcp.c     ****   return (retVal);
 204              		.loc 1 144 3 view .LVU81
 145:Src/mcp.c     **** }
 205              		.loc 1 145 1 is_stmt 0 view .LVU82
 206 00a4 09B0     		add	sp, sp, #36
 207              	.LCFI2:
 208              		.cfi_remember_state
 209              		.cfi_def_cfa_offset 36
 210              		@ sp needed
 211 00a6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 212              	.LVL17:
 213              	.L30:
 214              	.LCFI3:
 215              		.cfi_restore_state
 116:Src/mcp.c     ****             { /* From this point we are not able to continue to decode CMD buffer*/
 216              		.loc 1 116 16 discriminator 4 view .LVU83
 217 00aa 0728     		cmp	r0, #7
 218 00ac 0CD1     		bne	.L31
 219              	.LVL18:
 220              	.L12:
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 221              		.loc 1 115 20 view .LVU84
 222 00ae 0120     		movs	r0, #1
 223              	.LVL19:
 224              	.L3:
 140:Src/mcp.c     ****   #ifdef NULL_PTR_CHECK_REG_INT
 225              		.loc 1 140 5 is_stmt 1 view .LVU85
 144:Src/mcp.c     **** }
 226              		.loc 1 144 3 view .LVU86
 227              		.loc 1 145 1 is_stmt 0 view .LVU87
 228 00b0 09B0     		add	sp, sp, #36
 229              	.LCFI4:
 230              		.cfi_remember_state
 231              		.cfi_def_cfa_offset 36
 232              		@ sp needed
 233 00b2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 234              	.LVL20:
 235              	.L11:
 236              	.LCFI5:
 237              		.cfi_restore_state
 127:Src/mcp.c     ****           }
 238              		.loc 1 127 20 view .LVU88
 239 00b6 0820     		movs	r0, #8
 240              	.LVL21:
 140:Src/mcp.c     ****   #ifdef NULL_PTR_CHECK_REG_INT
 241              		.loc 1 140 5 is_stmt 1 view .LVU89
 144:Src/mcp.c     **** }
 242              		.loc 1 144 3 view .LVU90
ARM GAS  /tmp/ccHEpvg0.s 			page 9


 243              		.loc 1 145 1 is_stmt 0 view .LVU91
 244 00b8 09B0     		add	sp, sp, #36
 245              	.LCFI6:
 246              		.cfi_remember_state
 247              		.cfi_def_cfa_offset 36
 248              		@ sp needed
 249 00ba BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 250              	.LVL22:
 251              	.L29:
 252              	.LCFI7:
 253              		.cfi_restore_state
 103:Src/mcp.c     ****         {
 254              		.loc 1 103 36 discriminator 1 view .LVU92
 255 00be 002C     		cmp	r4, #0
 256 00c0 E2D1     		bne	.L5
 257              	.LVL23:
 133:Src/mcp.c     ****     {
 258              		.loc 1 133 5 is_stmt 1 view .LVU93
 133:Src/mcp.c     ****     {
 259              		.loc 1 133 8 is_stmt 0 view .LVU94
 260 00c2 0028     		cmp	r0, #0
 261 00c4 ECD0     		beq	.L10
 262 00c6 F3E7     		b	.L3
 263              	.LVL24:
 264              	.L31:
 116:Src/mcp.c     ****             { /* From this point we are not able to continue to decode CMD buffer*/
 265              		.loc 1 116 59 discriminator 1 view .LVU95
 266 00c8 0A28     		cmp	r0, #10
 267 00ca F0D0     		beq	.L12
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 268              		.loc 1 115 20 view .LVU96
 269 00cc 0123     		movs	r3, #1
 270 00ce 0393     		str	r3, [sp, #12]
 271 00d0 E2E7     		b	.L7
 272              	.L33:
 273 00d2 00BF     		.align	2
 274              	.L32:
 275 00d4 00000000 		.word	RI_SetRegisterGlobal
 276 00d8 00000000 		.word	RI_SetRegisterMotor1
 277              		.cfi_endproc
 278              	.LFE1713:
 280              		.section	.text.RI_GetRegCommandParser,"ax",%progbits
 281              		.align	1
 282              		.p2align 2,,3
 283              		.global	RI_GetRegCommandParser
 284              		.syntax unified
 285              		.thumb
 286              		.thumb_func
 287              		.fpu fpv4-sp-d16
 289              	RI_GetRegCommandParser:
 290              	.LVL25:
 291              	.LFB1714:
 146:Src/mcp.c     **** 
 147:Src/mcp.c     **** /**
 148:Src/mcp.c     ****   * @brief  Parses the payload in the received packet and call the required function in order to re
 149:Src/mcp.c     ****   *
 150:Src/mcp.c     ****   * The function called depends on the targeted motor and/or targeted register : RI_GetRegisterGlob
ARM GAS  /tmp/ccHEpvg0.s 			page 10


 151:Src/mcp.c     ****   *
 152:Src/mcp.c     ****   * @param  pHandle Handler of the current instance of the MCP component
 153:Src/mcp.c     ****   * @param  txSyncFreeSpace Space available for synchronous transmission
 154:Src/mcp.c     ****   *
 155:Src/mcp.c     ****   * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
 156:Src/mcp.c     ****   */
 157:Src/mcp.c     **** uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
 158:Src/mcp.c     **** {
 292              		.loc 1 158 1 is_stmt 1 view -0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 16
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 159:Src/mcp.c     ****   uint8_t retVal = MCP_CMD_NOK;
 296              		.loc 1 159 3 view .LVU98
 160:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
 161:Src/mcp.c     ****   if (MC_NULL == pHandle)
 162:Src/mcp.c     ****   {
 163:Src/mcp.c     ****     /* Nothing to do */
 164:Src/mcp.c     ****   }
 165:Src/mcp.c     ****   else
 166:Src/mcp.c     ****   {
 167:Src/mcp.c     **** #endif
 168:Src/mcp.c     ****     uint16_t * dataElementID;
 297              		.loc 1 168 5 view .LVU99
 169:Src/mcp.c     ****     uint8_t * rxData = pHandle->rxBuffer;
 298              		.loc 1 169 5 view .LVU100
 158:Src/mcp.c     ****   uint8_t retVal = MCP_CMD_NOK;
 299              		.loc 1 158 1 is_stmt 0 view .LVU101
 300 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 301              	.LCFI8:
 302              		.cfi_def_cfa_offset 32
 303              		.cfi_offset 4, -32
 304              		.cfi_offset 5, -28
 305              		.cfi_offset 6, -24
 306              		.cfi_offset 7, -20
 307              		.cfi_offset 8, -16
 308              		.cfi_offset 9, -12
 309              		.cfi_offset 10, -8
 310              		.cfi_offset 14, -4
 311 0004 86B0     		sub	sp, sp, #24
 312              	.LCFI9:
 313              		.cfi_def_cfa_offset 56
 170:Src/mcp.c     ****     uint8_t * txData = pHandle->txBuffer;
 171:Src/mcp.c     ****     uint16_t size = 0U;
 314              		.loc 1 171 14 view .LVU102
 315 0006 0023     		movs	r3, #0
 316 0008 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 172:Src/mcp.c     ****     uint16_t rxLength = pHandle->rxLength;
 173:Src/mcp.c     ****     int16_t freeSpaceS16 = (int16_t) txSyncFreeSpace;
 174:Src/mcp.c     **** 
 175:Src/mcp.c     ****     uint16_t regID;
 176:Src/mcp.c     ****     uint8_t typeID;
 177:Src/mcp.c     ****     uint8_t motorID;
 178:Src/mcp.c     ****     uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_
 179:Src/mcp.c     ****     pHandle->txLength = 0;
 317              		.loc 1 179 23 view .LVU103
 318 000c C381     		strh	r3, [r0, #14]	@ movhi
ARM GAS  /tmp/ccHEpvg0.s 			page 11


 172:Src/mcp.c     ****     uint16_t rxLength = pHandle->rxLength;
 319              		.loc 1 172 14 view .LVU104
 320 000e B0F80C80 		ldrh	r8, [r0, #12]
 178:Src/mcp.c     ****     pHandle->txLength = 0;
 321              		.loc 1 178 15 view .LVU105
 322 0012 1F4B     		ldr	r3, .L44
 323 0014 0493     		str	r3, [sp, #16]
 324 0016 1F4B     		ldr	r3, .L44+4
 169:Src/mcp.c     ****     uint8_t * txData = pHandle->txBuffer;
 325              		.loc 1 169 15 view .LVU106
 326 0018 D0F80490 		ldr	r9, [r0, #4]
 327              	.LVL26:
 170:Src/mcp.c     ****     uint16_t size = 0U;
 328              		.loc 1 170 5 is_stmt 1 view .LVU107
 170:Src/mcp.c     ****     uint16_t size = 0U;
 329              		.loc 1 170 15 is_stmt 0 view .LVU108
 330 001c 8668     		ldr	r6, [r0, #8]
 331              	.LVL27:
 171:Src/mcp.c     ****     uint16_t rxLength = pHandle->rxLength;
 332              		.loc 1 171 5 is_stmt 1 view .LVU109
 172:Src/mcp.c     ****     int16_t freeSpaceS16 = (int16_t) txSyncFreeSpace;
 333              		.loc 1 172 5 view .LVU110
 173:Src/mcp.c     **** 
 334              		.loc 1 173 5 view .LVU111
 175:Src/mcp.c     ****     uint8_t typeID;
 335              		.loc 1 175 5 view .LVU112
 176:Src/mcp.c     ****     uint8_t motorID;
 336              		.loc 1 176 5 view .LVU113
 177:Src/mcp.c     ****     uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_
 337              		.loc 1 177 5 view .LVU114
 178:Src/mcp.c     ****     pHandle->txLength = 0;
 338              		.loc 1 178 5 view .LVU115
 339              		.loc 1 179 5 view .LVU116
 180:Src/mcp.c     ****     while (rxLength > 0U)
 340              		.loc 1 180 5 view .LVU117
 341              		.loc 1 180 11 view .LVU118
 178:Src/mcp.c     ****     pHandle->txLength = 0;
 342              		.loc 1 178 15 is_stmt 0 view .LVU119
 343 001e 0593     		str	r3, [sp, #20]
 344              		.loc 1 180 11 view .LVU120
 345 0020 B8F1000F 		cmp	r8, #0
 346 0024 23D0     		beq	.L35
 347 0026 0746     		mov	r7, r0
 348 0028 0DB2     		sxth	r5, r1
 169:Src/mcp.c     ****     uint8_t * txData = pHandle->txBuffer;
 349              		.loc 1 169 15 view .LVU121
 350 002a 4C46     		mov	r4, r9
 351              	.LVL28:
 352              	.L37:
 181:Src/mcp.c     ****     {
 182:Src/mcp.c     ****       dataElementID = (uint16_t *) rxData;
 353              		.loc 1 182 7 is_stmt 1 view .LVU122
 183:Src/mcp.c     ****       rxLength = rxLength - MCP_ID_SIZE;
 354              		.loc 1 183 7 view .LVU123
 184:Src/mcp.c     ****       rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID
 355              		.loc 1 184 7 view .LVU124
 185:Src/mcp.c     **** 
ARM GAS  /tmp/ccHEpvg0.s 			page 12


 186:Src/mcp.c     ****       regID = *dataElementID & REG_MASK;
 356              		.loc 1 186 7 view .LVU125
 187:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 188:Src/mcp.c     **** 
 189:Src/mcp.c     ****       motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 190:Src/mcp.c     **** 
 191:Src/mcp.c     ****       if (motorID > NBR_OF_MOTORS)
 192:Src/mcp.c     ****       {
 193:Src/mcp.c     ****         retVal = MCP_CMD_NOK;
 194:Src/mcp.c     ****         rxLength = 0;
 195:Src/mcp.c     ****       }
 196:Src/mcp.c     ****       else
 197:Src/mcp.c     ****       {
 198:Src/mcp.c     ****         retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 357              		.loc 1 198 9 view .LVU126
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 358              		.loc 1 186 15 is_stmt 0 view .LVU127
 359 002c 34F802CB 		ldrh	ip, [r4], #2
 360              	.LVL29:
 187:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 361              		.loc 1 187 7 is_stmt 1 view .LVU128
 187:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 362              		.loc 1 187 16 is_stmt 0 view .LVU129
 363 0030 5FFA8CF1 		uxtb	r1, ip
 364              	.LVL30:
 189:Src/mcp.c     **** 
 365              		.loc 1 189 7 is_stmt 1 view .LVU130
 191:Src/mcp.c     ****       {
 366              		.loc 1 191 7 view .LVU131
 367              		.loc 1 198 28 is_stmt 0 view .LVU132
 368 0034 01F0070E 		and	lr, r1, #7
 369 0038 0DF1180A 		add	r10, sp, #24
 191:Src/mcp.c     ****       {
 370              		.loc 1 191 10 view .LVU133
 371 003c 1CF0060F 		tst	ip, #6
 372              		.loc 1 198 18 view .LVU134
 373 0040 3246     		mov	r2, r6
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 374              		.loc 1 186 13 view .LVU135
 375 0042 2CF00700 		bic	r0, ip, #7
 376              		.loc 1 198 18 view .LVU136
 377 0046 0DF10E03 		add	r3, sp, #14
 378              		.loc 1 198 28 view .LVU137
 379 004a 0AEB8E0E 		add	lr, r10, lr, lsl #2
 380              		.loc 1 198 18 view .LVU138
 381 004e 01F03801 		and	r1, r1, #56
 382              	.LVL31:
 191:Src/mcp.c     ****       {
 383              		.loc 1 191 10 view .LVU139
 384 0052 0CD1     		bne	.L35
 385              	.LVL32:
 386              		.loc 1 198 18 view .LVU140
 387 0054 0095     		str	r5, [sp]
 388 0056 5EF808AC 		ldr	r10, [lr, #-8]
 389 005a D047     		blx	r10
 390              	.LVL33:
 199:Src/mcp.c     ****         if (retVal == MCP_CMD_OK )
ARM GAS  /tmp/ccHEpvg0.s 			page 13


 200:Src/mcp.c     ****         {
 201:Src/mcp.c     ****           /* Prepare next data */
 202:Src/mcp.c     ****           txData = txData+size;
 391              		.loc 1 202 11 is_stmt 1 view .LVU141
 199:Src/mcp.c     ****         if (retVal == MCP_CMD_OK )
 392              		.loc 1 199 9 view .LVU142
 393 005c A8EB0403 		sub	r3, r8, r4
 180:Src/mcp.c     ****     {
 394              		.loc 1 180 11 is_stmt 0 view .LVU143
 395 0060 19FA83F3 		uxtah	r3, r9, r3
 396 0064 9BB2     		uxth	r3, r3
 199:Src/mcp.c     ****         if (retVal == MCP_CMD_OK )
 397              		.loc 1 199 12 view .LVU144
 398 0066 30B1     		cbz	r0, .L43
 399              	.LVL34:
 400              	.L36:
 203:Src/mcp.c     ****           pHandle->txLength += size;
 204:Src/mcp.c     ****           freeSpaceS16 = freeSpaceS16-size;
 205:Src/mcp.c     ****         }
 206:Src/mcp.c     ****         else
 207:Src/mcp.c     ****         {
 208:Src/mcp.c     ****           rxLength = 0;
 209:Src/mcp.c     ****         }
 210:Src/mcp.c     ****       }
 211:Src/mcp.c     ****     }
 212:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
 213:Src/mcp.c     ****   }
 214:Src/mcp.c     **** #endif
 215:Src/mcp.c     ****   return (retVal);
 401              		.loc 1 215 3 is_stmt 1 view .LVU145
 216:Src/mcp.c     **** }
 402              		.loc 1 216 1 is_stmt 0 view .LVU146
 403 0068 06B0     		add	sp, sp, #24
 404              	.LCFI10:
 405              		.cfi_remember_state
 406              		.cfi_def_cfa_offset 32
 407              		@ sp needed
 408 006a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 409              	.LVL35:
 410              	.L35:
 411              	.LCFI11:
 412              		.cfi_restore_state
 159:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
 413              		.loc 1 159 11 view .LVU147
 414 006e 0120     		movs	r0, #1
 415              	.LVL36:
 215:Src/mcp.c     **** }
 416              		.loc 1 215 3 is_stmt 1 view .LVU148
 417              		.loc 1 216 1 is_stmt 0 view .LVU149
 418 0070 06B0     		add	sp, sp, #24
 419              	.LCFI12:
 420              		.cfi_remember_state
 421              		.cfi_def_cfa_offset 32
 422              		@ sp needed
 423 0072 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 424              	.LVL37:
 425              	.L43:
ARM GAS  /tmp/ccHEpvg0.s 			page 14


 426              	.LCFI13:
 427              		.cfi_restore_state
 202:Src/mcp.c     ****           pHandle->txLength += size;
 428              		.loc 1 202 26 view .LVU150
 429 0076 BDF80EC0 		ldrh	ip, [sp, #14]
 203:Src/mcp.c     ****           freeSpaceS16 = freeSpaceS16-size;
 430              		.loc 1 203 29 view .LVU151
 431 007a FA89     		ldrh	r2, [r7, #14]
 204:Src/mcp.c     ****         }
 432              		.loc 1 204 38 view .LVU152
 433 007c A5EB0C05 		sub	r5, r5, ip
 434              	.LVL38:
 203:Src/mcp.c     ****           freeSpaceS16 = freeSpaceS16-size;
 435              		.loc 1 203 29 view .LVU153
 436 0080 6244     		add	r2, r2, ip
 202:Src/mcp.c     ****           pHandle->txLength += size;
 437              		.loc 1 202 18 view .LVU154
 438 0082 6644     		add	r6, r6, ip
 439              	.LVL39:
 203:Src/mcp.c     ****           freeSpaceS16 = freeSpaceS16-size;
 440              		.loc 1 203 11 is_stmt 1 view .LVU155
 203:Src/mcp.c     ****           freeSpaceS16 = freeSpaceS16-size;
 441              		.loc 1 203 29 is_stmt 0 view .LVU156
 442 0084 FA81     		strh	r2, [r7, #14]	@ movhi
 204:Src/mcp.c     ****         }
 443              		.loc 1 204 11 is_stmt 1 view .LVU157
 204:Src/mcp.c     ****         }
 444              		.loc 1 204 24 is_stmt 0 view .LVU158
 445 0086 2DB2     		sxth	r5, r5
 446              	.LVL40:
 180:Src/mcp.c     ****     {
 447              		.loc 1 180 11 is_stmt 1 view .LVU159
 448 0088 002B     		cmp	r3, #0
 449 008a CFD1     		bne	.L37
 450 008c ECE7     		b	.L36
 451              	.L45:
 452 008e 00BF     		.align	2
 453              	.L44:
 454 0090 00000000 		.word	RI_GetRegisterGlobal
 455 0094 00000000 		.word	RI_GetRegisterMotor1
 456              		.cfi_endproc
 457              	.LFE1714:
 459              		.section	.text.MCP_ReceivedPacket,"ax",%progbits
 460              		.align	1
 461              		.p2align 2,,3
 462              		.global	MCP_ReceivedPacket
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 466              		.fpu fpv4-sp-d16
 468              	MCP_ReceivedPacket:
 469              	.LVL41:
 470              	.LFB1715:
 217:Src/mcp.c     **** 
 218:Src/mcp.c     **** /**
 219:Src/mcp.c     ****   * @brief  Parses the header from the received packet and call the required function depending on 
 220:Src/mcp.c     ****   *
ARM GAS  /tmp/ccHEpvg0.s 			page 15


 221:Src/mcp.c     ****   * @param  pHandle Handler of the current instance of the MCP component
 222:Src/mcp.c     ****   */
 223:Src/mcp.c     **** void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
 224:Src/mcp.c     **** {
 471              		.loc 1 224 1 view -0
 472              		.cfi_startproc
 473              		@ args = 0, pretend = 0, frame = 0
 474              		@ frame_needed = 0, uses_anonymous_args = 0
 225:Src/mcp.c     ****   const uint16_t *packetHeader;
 475              		.loc 1 225 3 view .LVU161
 226:Src/mcp.c     ****   uint16_t command;
 476              		.loc 1 226 3 view .LVU162
 227:Src/mcp.c     ****   int16_t txSyncFreeSpace;
 477              		.loc 1 227 3 view .LVU163
 228:Src/mcp.c     ****   uint8_t motorID;
 478              		.loc 1 228 3 view .LVU164
 229:Src/mcp.c     ****   uint8_t MCPResponse;
 479              		.loc 1 229 3 view .LVU165
 230:Src/mcp.c     ****   uint8_t userCommand=0;
 480              		.loc 1 230 3 view .LVU166
 231:Src/mcp.c     **** 
 232:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_MCP
 233:Src/mcp.c     ****   if ((MC_NULL == pHandle) || (0U == pHandle->rxLength))
 234:Src/mcp.c     ****   {
 235:Src/mcp.c     ****     /* Nothing to do, txBuffer and txLength have not been modified */
 236:Src/mcp.c     ****   }
 237:Src/mcp.c     ****   else /* Length is 0, this is a request to send back the last packet */
 238:Src/mcp.c     ****   {
 239:Src/mcp.c     **** #endif
 240:Src/mcp.c     ****     packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 481              		.loc 1 240 5 view .LVU167
 224:Src/mcp.c     ****   const uint16_t *packetHeader;
 482              		.loc 1 224 1 is_stmt 0 view .LVU168
 483 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 484              	.LCFI14:
 485              		.cfi_def_cfa_offset 20
 486              		.cfi_offset 4, -20
 487              		.cfi_offset 5, -16
 488              		.cfi_offset 6, -12
 489              		.cfi_offset 7, -8
 490              		.cfi_offset 14, -4
 491              		.loc 1 240 18 view .LVU169
 492 0002 4568     		ldr	r5, [r0, #4]
 493              	.LVL42:
 241:Src/mcp.c     ****     command = (uint16_t)(*packetHeader & CMD_MASK);
 494              		.loc 1 241 5 is_stmt 1 view .LVU170
 495              		.loc 1 241 26 is_stmt 0 view .LVU171
 496 0004 2B88     		ldrh	r3, [r5]
 242:Src/mcp.c     **** 
 243:Src/mcp.c     ****     if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 497              		.loc 1 243 8 view .LVU172
 498 0006 03F47F42 		and	r2, r3, #65280
 241:Src/mcp.c     ****     command = (uint16_t)(*packetHeader & CMD_MASK);
 499              		.loc 1 241 13 view .LVU173
 500 000a 23F0070C 		bic	ip, r3, #7
 501              		.loc 1 243 8 view .LVU174
 502 000e B2F5807F 		cmp	r2, #256
ARM GAS  /tmp/ccHEpvg0.s 			page 16


 224:Src/mcp.c     ****   const uint16_t *packetHeader;
 503              		.loc 1 224 1 view .LVU175
 504 0012 83B0     		sub	sp, sp, #12
 505              	.LCFI15:
 506              		.cfi_def_cfa_offset 32
 224:Src/mcp.c     ****   const uint16_t *packetHeader;
 507              		.loc 1 224 1 view .LVU176
 508 0014 0446     		mov	r4, r0
 241:Src/mcp.c     ****     command = (uint16_t)(*packetHeader & CMD_MASK);
 509              		.loc 1 241 13 view .LVU177
 510 0016 1FFA8CFC 		uxth	ip, ip
 511              	.LVL43:
 512              		.loc 1 243 5 is_stmt 1 view .LVU178
 513              		.loc 1 243 8 is_stmt 0 view .LVU179
 514 001a 5ED0     		beq	.L76
 244:Src/mcp.c     ****     {
 245:Src/mcp.c     ****       userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 246:Src/mcp.c     ****       command = MCP_USER_CMD;
 247:Src/mcp.c     ****     }
 248:Src/mcp.c     ****     else
 249:Src/mcp.c     ****     {
 250:Src/mcp.c     ****       /* Nothing to do */
 251:Src/mcp.c     ****     }
 515              		.loc 1 251 5 is_stmt 1 view .LVU180
 252:Src/mcp.c     **** 
 253:Src/mcp.c     ****     motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 516              		.loc 1 253 5 view .LVU181
 517              	.LVL44:
 254:Src/mcp.c     ****     MCI_Handle_t *pMCI = &Mci[motorID];
 518              		.loc 1 254 5 view .LVU182
 253:Src/mcp.c     ****     MCI_Handle_t *pMCI = &Mci[motorID];
 519              		.loc 1 253 40 is_stmt 0 view .LVU183
 520 001c 013B     		subs	r3, r3, #1
 521              	.LVL45:
 522              		.loc 1 254 19 view .LVU184
 523 001e 03F00703 		and	r3, r3, #7
 524              	.LVL46:
 525              		.loc 1 254 19 view .LVU185
 526 0022 03EB8302 		add	r2, r3, r3, lsl #2
 527 0026 624F     		ldr	r7, .L77
 528 0028 03EB4203 		add	r3, r3, r2, lsl #1
 255:Src/mcp.c     **** 
 256:Src/mcp.c     ****     /* Removing MCP Header from RxBuffer */
 257:Src/mcp.c     ****     pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 258:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 529              		.loc 1 258 43 view .LVU186
 530 002c 0235     		adds	r5, r5, #2
 531              	.LVL47:
 254:Src/mcp.c     **** 
 532              		.loc 1 254 19 view .LVU187
 533 002e 07EB8307 		add	r7, r7, r3, lsl #2
 534              	.LVL48:
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 535              		.loc 1 257 5 is_stmt 1 view .LVU188
 259:Src/mcp.c     **** 
 260:Src/mcp.c     ****     /* Commands requiering payload response must be aware of space available for the payload */
 261:Src/mcp.c     ****     /* Last byte is reserved for MCP response*/
ARM GAS  /tmp/ccHEpvg0.s 			page 17


 262:Src/mcp.c     ****     txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 536              		.loc 1 262 56 is_stmt 0 view .LVU189
 537 0032 2368     		ldr	r3, [r4]
 258:Src/mcp.c     **** 
 538              		.loc 1 258 23 view .LVU190
 539 0034 4560     		str	r5, [r0, #4]
 540              	.LVL49:
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 541              		.loc 1 257 43 view .LVU191
 542 0036 8089     		ldrh	r0, [r0, #12]
 543              	.LVL50:
 544              		.loc 1 262 75 view .LVU192
 545 0038 9A89     		ldrh	r2, [r3, #12]
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 546              		.loc 1 257 43 view .LVU193
 547 003a 0238     		subs	r0, r0, #2
 548              		.loc 1 262 75 view .LVU194
 549 003c 013A     		subs	r2, r2, #1
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 550              		.loc 1 257 43 view .LVU195
 551 003e 80B2     		uxth	r0, r0
 263:Src/mcp.c     **** 
 264:Src/mcp.c     ****     /* Initialization of the tx length, command which send back data has to increment the txLength
 265:Src/mcp.c     ****      * (case of Read register) */
 266:Src/mcp.c     ****     pHandle->txLength = 0U;
 552              		.loc 1 266 23 view .LVU196
 553 0040 0026     		movs	r6, #0
 267:Src/mcp.c     **** 
 268:Src/mcp.c     ****     switch (command)
 554              		.loc 1 268 5 view .LVU197
 555 0042 BCF1480F 		cmp	ip, #72
 262:Src/mcp.c     **** 
 556              		.loc 1 262 75 view .LVU198
 557 0046 91B2     		uxth	r1, r2
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 558              		.loc 1 257 23 view .LVU199
 559 0048 A081     		strh	r0, [r4, #12]	@ movhi
 560              	.LVL51:
 258:Src/mcp.c     **** 
 561              		.loc 1 258 5 is_stmt 1 view .LVU200
 262:Src/mcp.c     **** 
 562              		.loc 1 262 5 view .LVU201
 266:Src/mcp.c     **** 
 563              		.loc 1 266 23 is_stmt 0 view .LVU202
 564 004a E681     		strh	r6, [r4, #14]	@ movhi
 262:Src/mcp.c     **** 
 565              		.loc 1 262 21 view .LVU203
 566 004c 12B2     		sxth	r2, r2
 567              	.LVL52:
 266:Src/mcp.c     **** 
 568              		.loc 1 266 5 is_stmt 1 view .LVU204
 569              		.loc 1 268 5 view .LVU205
 570 004e 32D8     		bhi	.L50
 571 0050 BCF1480F 		cmp	ip, #72
 572 0054 26D8     		bhi	.L68
 573 0056 DFE80CF0 		tbb	[pc, ip]
 574              	.L52:
ARM GAS  /tmp/ccHEpvg0.s 			page 18


 575 005a 69       		.byte	(.L61-.L52)/2
 576 005b 25       		.byte	(.L68-.L52)/2
 577 005c 25       		.byte	(.L68-.L52)/2
 578 005d 25       		.byte	(.L68-.L52)/2
 579 005e 25       		.byte	(.L68-.L52)/2
 580 005f 25       		.byte	(.L68-.L52)/2
 581 0060 25       		.byte	(.L68-.L52)/2
 582 0061 25       		.byte	(.L68-.L52)/2
 583 0062 71       		.byte	(.L60-.L52)/2
 584 0063 25       		.byte	(.L68-.L52)/2
 585 0064 25       		.byte	(.L68-.L52)/2
 586 0065 25       		.byte	(.L68-.L52)/2
 587 0066 25       		.byte	(.L68-.L52)/2
 588 0067 25       		.byte	(.L68-.L52)/2
 589 0068 25       		.byte	(.L68-.L52)/2
 590 0069 25       		.byte	(.L68-.L52)/2
 591 006a 64       		.byte	(.L59-.L52)/2
 592 006b 25       		.byte	(.L68-.L52)/2
 593 006c 25       		.byte	(.L68-.L52)/2
 594 006d 25       		.byte	(.L68-.L52)/2
 595 006e 25       		.byte	(.L68-.L52)/2
 596 006f 25       		.byte	(.L68-.L52)/2
 597 0070 25       		.byte	(.L68-.L52)/2
 598 0071 25       		.byte	(.L68-.L52)/2
 599 0072 5C       		.byte	(.L74-.L52)/2
 600 0073 25       		.byte	(.L68-.L52)/2
 601 0074 25       		.byte	(.L68-.L52)/2
 602 0075 25       		.byte	(.L68-.L52)/2
 603 0076 25       		.byte	(.L68-.L52)/2
 604 0077 25       		.byte	(.L68-.L52)/2
 605 0078 25       		.byte	(.L68-.L52)/2
 606 0079 25       		.byte	(.L68-.L52)/2
 607 007a 56       		.byte	(.L66-.L52)/2
 608 007b 25       		.byte	(.L68-.L52)/2
 609 007c 25       		.byte	(.L68-.L52)/2
 610 007d 25       		.byte	(.L68-.L52)/2
 611 007e 25       		.byte	(.L68-.L52)/2
 612 007f 25       		.byte	(.L68-.L52)/2
 613 0080 25       		.byte	(.L68-.L52)/2
 614 0081 25       		.byte	(.L68-.L52)/2
 615 0082 76       		.byte	(.L56-.L52)/2
 616 0083 25       		.byte	(.L68-.L52)/2
 617 0084 25       		.byte	(.L68-.L52)/2
 618 0085 25       		.byte	(.L68-.L52)/2
 619 0086 25       		.byte	(.L68-.L52)/2
 620 0087 25       		.byte	(.L68-.L52)/2
 621 0088 25       		.byte	(.L68-.L52)/2
 622 0089 25       		.byte	(.L68-.L52)/2
 623 008a 52       		.byte	(.L55-.L52)/2
 624 008b 25       		.byte	(.L68-.L52)/2
 625 008c 25       		.byte	(.L68-.L52)/2
 626 008d 25       		.byte	(.L68-.L52)/2
 627 008e 25       		.byte	(.L68-.L52)/2
 628 008f 25       		.byte	(.L68-.L52)/2
 629 0090 25       		.byte	(.L68-.L52)/2
 630 0091 25       		.byte	(.L68-.L52)/2
 631 0092 7E       		.byte	(.L54-.L52)/2
ARM GAS  /tmp/ccHEpvg0.s 			page 19


 632 0093 25       		.byte	(.L68-.L52)/2
 633 0094 25       		.byte	(.L68-.L52)/2
 634 0095 25       		.byte	(.L68-.L52)/2
 635 0096 25       		.byte	(.L68-.L52)/2
 636 0097 25       		.byte	(.L68-.L52)/2
 637 0098 25       		.byte	(.L68-.L52)/2
 638 0099 25       		.byte	(.L68-.L52)/2
 639 009a 84       		.byte	(.L53-.L52)/2
 640 009b 25       		.byte	(.L68-.L52)/2
 641 009c 25       		.byte	(.L68-.L52)/2
 642 009d 25       		.byte	(.L68-.L52)/2
 643 009e 25       		.byte	(.L68-.L52)/2
 644 009f 25       		.byte	(.L68-.L52)/2
 645 00a0 25       		.byte	(.L68-.L52)/2
 646 00a1 25       		.byte	(.L68-.L52)/2
 647 00a2 8B       		.byte	(.L51-.L52)/2
 648 00a3 00       		.p2align 1
 649              	.L68:
 650 00a4 0023     		movs	r3, #0
 651 00a6 0220     		movs	r0, #2
 652              	.LVL53:
 653              	.L49:
 269:Src/mcp.c     ****     {
 270:Src/mcp.c     ****       case GET_MCP_VERSION:
 271:Src/mcp.c     ****       {
 272:Src/mcp.c     ****         pHandle->txLength = 4U;
 273:Src/mcp.c     ****         *pHandle->txBuffer = MCP_VERSION;
 274:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 275:Src/mcp.c     ****         break;
 276:Src/mcp.c     ****       }
 277:Src/mcp.c     **** 
 278:Src/mcp.c     ****       case SET_DATA_ELEMENT:
 279:Src/mcp.c     ****       {
 280:Src/mcp.c     ****         MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 281:Src/mcp.c     ****         break;
 282:Src/mcp.c     ****       }
 283:Src/mcp.c     **** 
 284:Src/mcp.c     ****       case GET_DATA_ELEMENT:
 285:Src/mcp.c     ****       {
 286:Src/mcp.c     ****         MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 287:Src/mcp.c     ****         break;
 288:Src/mcp.c     ****       }
 289:Src/mcp.c     **** 
 290:Src/mcp.c     ****       case START_MOTOR:
 291:Src/mcp.c     ****       {
 292:Src/mcp.c     ****         MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 293:Src/mcp.c     ****         break;
 294:Src/mcp.c     ****       }
 295:Src/mcp.c     **** 
 296:Src/mcp.c     ****       case STOP_MOTOR: /* Todo: Check the pertinance of return value */
 297:Src/mcp.c     ****       {
 298:Src/mcp.c     ****         (void)MCI_StopMotor(pMCI);
 299:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 300:Src/mcp.c     ****         break;
 301:Src/mcp.c     ****       }
 302:Src/mcp.c     **** 
 303:Src/mcp.c     ****       case SW_RESET:
ARM GAS  /tmp/ccHEpvg0.s 			page 20


 304:Src/mcp.c     ****       {
 305:Src/mcp.c     ****         HAL_NVIC_SystemReset();
 306:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 307:Src/mcp.c     ****         break;
 308:Src/mcp.c     ****       }
 309:Src/mcp.c     **** 
 310:Src/mcp.c     ****       case STOP_RAMP:
 311:Src/mcp.c     ****       {
 312:Src/mcp.c     ****         if (RUN == MCI_GetSTMState(pMCI))
 313:Src/mcp.c     ****         {
 314:Src/mcp.c     ****           MCI_StopRamp(pMCI);
 315:Src/mcp.c     ****         }
 316:Src/mcp.c     ****         else
 317:Src/mcp.c     ****         {
 318:Src/mcp.c     ****           /* Nothing to do */
 319:Src/mcp.c     ****         }
 320:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 321:Src/mcp.c     ****         break;
 322:Src/mcp.c     ****       }
 323:Src/mcp.c     **** 
 324:Src/mcp.c     ****       case START_STOP:
 325:Src/mcp.c     ****       {
 326:Src/mcp.c     ****         /* Queries the STM and a command start or stop depending on the state */
 327:Src/mcp.c     ****         if (IDLE == MCI_GetSTMState(pMCI))
 328:Src/mcp.c     ****         {
 329:Src/mcp.c     ****           MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 330:Src/mcp.c     ****         }
 331:Src/mcp.c     ****         else
 332:Src/mcp.c     ****         {
 333:Src/mcp.c     ****           (void)MCI_StopMotor(pMCI);
 334:Src/mcp.c     ****           MCPResponse = MCP_CMD_OK;
 335:Src/mcp.c     ****         }
 336:Src/mcp.c     ****         break;
 337:Src/mcp.c     ****       }
 338:Src/mcp.c     **** 
 339:Src/mcp.c     ****       case FAULT_ACK:
 340:Src/mcp.c     ****       {
 341:Src/mcp.c     ****         (void)MCI_FaultAcknowledged(pMCI);
 342:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 343:Src/mcp.c     ****         break;
 344:Src/mcp.c     ****       }
 345:Src/mcp.c     **** 
 346:Src/mcp.c     ****       case CPULOAD_CLEAR:
 347:Src/mcp.c     ****       {
 348:Src/mcp.c     ****         MCI_Clear_PerfMeasure(pMCI,M1);
 349:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 350:Src/mcp.c     ****         break;
 351:Src/mcp.c     ****       }
 352:Src/mcp.c     **** 
 353:Src/mcp.c     ****       case IQDREF_CLEAR:
 354:Src/mcp.c     ****       {
 355:Src/mcp.c     ****         MCI_Clear_Iqdref(pMCI);
 356:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 357:Src/mcp.c     ****         break;
 358:Src/mcp.c     ****       }
 359:Src/mcp.c     **** 
 360:Src/mcp.c     ****       case PFC_ENABLE:
ARM GAS  /tmp/ccHEpvg0.s 			page 21


 361:Src/mcp.c     ****       case PFC_DISABLE:
 362:Src/mcp.c     ****       case PFC_FAULT_ACK:
 363:Src/mcp.c     ****       {
 364:Src/mcp.c     ****         MCPResponse = MCP_CMD_UNKNOWN;
 365:Src/mcp.c     ****         break;
 366:Src/mcp.c     ****       }
 367:Src/mcp.c     **** 
 368:Src/mcp.c     ****       case PROFILER_CMD:
 369:Src/mcp.c     ****       {
 370:Src/mcp.c     ****         MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pH
 371:Src/mcp.c     ****                                          pHandle->txBuffer);
 372:Src/mcp.c     ****         break;
 373:Src/mcp.c     ****       }
 374:Src/mcp.c     **** 
 375:Src/mcp.c     ****       case MCP_USER_CMD:
 376:Src/mcp.c     ****       {
 377:Src/mcp.c     ****         if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 378:Src/mcp.c     ****         {
 379:Src/mcp.c     ****           MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncF
 380:Src/mcp.c     ****                                                       &pHandle->txLength, pHandle->txBuffer);
 381:Src/mcp.c     ****         }
 382:Src/mcp.c     ****         else
 383:Src/mcp.c     ****         {
 384:Src/mcp.c     ****           MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 385:Src/mcp.c     ****         }
 386:Src/mcp.c     ****         break;
 387:Src/mcp.c     ****       }
 388:Src/mcp.c     **** 
 389:Src/mcp.c     ****       default :
 390:Src/mcp.c     ****       {
 391:Src/mcp.c     ****         MCPResponse = MCP_CMD_UNKNOWN;
 392:Src/mcp.c     ****         break;
 393:Src/mcp.c     ****       }
 394:Src/mcp.c     ****     }
 395:Src/mcp.c     ****     pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 654              		.loc 1 395 5 view .LVU206
 655              		.loc 1 395 42 is_stmt 0 view .LVU207
 656 00a8 A268     		ldr	r2, [r4, #8]
 657 00aa D054     		strb	r0, [r2, r3]
 396:Src/mcp.c     ****     pHandle->txLength++;
 658              		.loc 1 396 5 is_stmt 1 view .LVU208
 659              		.loc 1 396 22 is_stmt 0 view .LVU209
 660 00ac E389     		ldrh	r3, [r4, #14]
 661 00ae 0133     		adds	r3, r3, #1
 662 00b0 E381     		strh	r3, [r4, #14]	@ movhi
 397:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_MCP
 398:Src/mcp.c     ****   }
 399:Src/mcp.c     **** #endif
 400:Src/mcp.c     **** }
 663              		.loc 1 400 1 view .LVU210
 664 00b2 03B0     		add	sp, sp, #12
 665              	.LCFI16:
 666              		.cfi_remember_state
 667              		.cfi_def_cfa_offset 20
 668              		@ sp needed
 669 00b4 F0BD     		pop	{r4, r5, r6, r7, pc}
 670              	.LVL54:
ARM GAS  /tmp/ccHEpvg0.s 			page 22


 671              	.L50:
 672              	.LCFI17:
 673              		.cfi_restore_state
 268:Src/mcp.c     ****     {
 674              		.loc 1 268 5 view .LVU211
 675 00b6 BCF1780F 		cmp	ip, #120
 676 00ba 6ED0     		beq	.L62
 677 00bc BCF5807F 		cmp	ip, #256
 678 00c0 74D0     		beq	.L69
 679 00c2 BCF1680F 		cmp	ip, #104
 680 00c6 EDD1     		bne	.L68
 370:Src/mcp.c     ****                                          pHandle->txBuffer);
 681              		.loc 1 370 9 is_stmt 1 view .LVU212
 370:Src/mcp.c     ****                                          pHandle->txBuffer);
 682              		.loc 1 370 23 is_stmt 0 view .LVU213
 683 00c8 A368     		ldr	r3, [r4, #8]
 684 00ca 0093     		str	r3, [sp]
 685 00cc 2946     		mov	r1, r5
 686 00ce 04F10E03 		add	r3, r4, #14
 687 00d2 FFF7FEFF 		bl	MC_ProfilerCommand
 688              	.LVL55:
 395:Src/mcp.c     ****     pHandle->txLength++;
 689              		.loc 1 395 30 view .LVU214
 690 00d6 E389     		ldrh	r3, [r4, #14]
 691              	.LVL56:
 372:Src/mcp.c     ****       }
 692              		.loc 1 372 9 is_stmt 1 view .LVU215
 693 00d8 E6E7     		b	.L49
 694              	.LVL57:
 695              	.L76:
 245:Src/mcp.c     ****       command = MCP_USER_CMD;
 696              		.loc 1 245 7 view .LVU216
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 697              		.loc 1 257 43 is_stmt 0 view .LVU217
 698 00da 8089     		ldrh	r0, [r0, #12]
 699              	.LVL58:
 262:Src/mcp.c     **** 
 700              		.loc 1 262 56 view .LVU218
 701 00dc 2368     		ldr	r3, [r4]
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 702              		.loc 1 257 43 view .LVU219
 703 00de 0238     		subs	r0, r0, #2
 245:Src/mcp.c     ****       command = MCP_USER_CMD;
 704              		.loc 1 245 19 view .LVU220
 705 00e0 CCF3C40C 		ubfx	ip, ip, #3, #5
 706              	.LVL59:
 246:Src/mcp.c     ****     }
 707              		.loc 1 246 7 is_stmt 1 view .LVU221
 251:Src/mcp.c     **** 
 708              		.loc 1 251 5 view .LVU222
 253:Src/mcp.c     ****     MCI_Handle_t *pMCI = &Mci[motorID];
 709              		.loc 1 253 5 view .LVU223
 254:Src/mcp.c     **** 
 710              		.loc 1 254 5 view .LVU224
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 711              		.loc 1 257 5 view .LVU225
 262:Src/mcp.c     **** 
ARM GAS  /tmp/ccHEpvg0.s 			page 23


 712              		.loc 1 262 56 is_stmt 0 view .LVU226
 713 00e4 9A89     		ldrh	r2, [r3, #12]
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 714              		.loc 1 257 43 view .LVU227
 715 00e6 80B2     		uxth	r0, r0
 258:Src/mcp.c     **** 
 716              		.loc 1 258 43 view .LVU228
 717 00e8 0235     		adds	r5, r5, #2
 718              	.LVL60:
 266:Src/mcp.c     **** 
 719              		.loc 1 266 23 view .LVU229
 720 00ea 0023     		movs	r3, #0
 377:Src/mcp.c     ****         {
 721              		.loc 1 377 12 view .LVU230
 722 00ec BCF1010F 		cmp	ip, #1
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 723              		.loc 1 257 23 view .LVU231
 724 00f0 A081     		strh	r0, [r4, #12]	@ movhi
 725              	.LVL61:
 258:Src/mcp.c     **** 
 726              		.loc 1 258 5 is_stmt 1 view .LVU232
 258:Src/mcp.c     **** 
 727              		.loc 1 258 23 is_stmt 0 view .LVU233
 728 00f2 6560     		str	r5, [r4, #4]
 729              	.LVL62:
 262:Src/mcp.c     **** 
 730              		.loc 1 262 5 is_stmt 1 view .LVU234
 266:Src/mcp.c     **** 
 731              		.loc 1 266 5 view .LVU235
 266:Src/mcp.c     **** 
 732              		.loc 1 266 23 is_stmt 0 view .LVU236
 733 00f4 E381     		strh	r3, [r4, #14]	@ movhi
 268:Src/mcp.c     ****     {
 734              		.loc 1 268 5 is_stmt 1 view .LVU237
 735              	.LVL63:
 377:Src/mcp.c     ****         {
 736              		.loc 1 377 9 view .LVU238
 377:Src/mcp.c     ****         {
 737              		.loc 1 377 12 is_stmt 0 view .LVU239
 738 00f6 41D9     		bls	.L48
 739              	.LVL64:
 740              	.L67:
 320:Src/mcp.c     ****         break;
 741              		.loc 1 320 21 view .LVU240
 742 00f8 0023     		movs	r3, #0
 384:Src/mcp.c     ****         }
 743              		.loc 1 384 23 view .LVU241
 744 00fa 0D20     		movs	r0, #13
 745 00fc D4E7     		b	.L49
 746              	.LVL65:
 747              	.L55:
 327:Src/mcp.c     ****         {
 748              		.loc 1 327 9 is_stmt 1 view .LVU242
 327:Src/mcp.c     ****         {
 749              		.loc 1 327 21 is_stmt 0 view .LVU243
 750 00fe 3846     		mov	r0, r7
 751 0100 FFF7FEFF 		bl	MCI_GetSTMState
ARM GAS  /tmp/ccHEpvg0.s 			page 24


 752              	.LVL66:
 327:Src/mcp.c     ****         {
 753              		.loc 1 327 12 view .LVU244
 754 0104 28B1     		cbz	r0, .L74
 755              	.L66:
 333:Src/mcp.c     ****           MCPResponse = MCP_CMD_OK;
 756              		.loc 1 333 11 is_stmt 1 view .LVU245
 333:Src/mcp.c     ****           MCPResponse = MCP_CMD_OK;
 757              		.loc 1 333 17 is_stmt 0 view .LVU246
 758 0106 3846     		mov	r0, r7
 759 0108 FFF7FEFF 		bl	MCI_StopMotor
 760              	.LVL67:
 334:Src/mcp.c     ****         }
 761              		.loc 1 334 11 is_stmt 1 view .LVU247
 395:Src/mcp.c     ****     pHandle->txLength++;
 762              		.loc 1 395 30 is_stmt 0 view .LVU248
 763 010c E389     		ldrh	r3, [r4, #14]
 334:Src/mcp.c     ****         }
 764              		.loc 1 334 23 view .LVU249
 765 010e 0020     		movs	r0, #0
 766 0110 CAE7     		b	.L49
 767              	.LVL68:
 768              	.L74:
 329:Src/mcp.c     ****         }
 769              		.loc 1 329 11 is_stmt 1 view .LVU250
 329:Src/mcp.c     ****         }
 770              		.loc 1 329 26 is_stmt 0 view .LVU251
 771 0112 3846     		mov	r0, r7
 772 0114 FFF7FEFF 		bl	MCI_StartMotor
 773              	.LVL69:
 329:Src/mcp.c     ****         }
 774              		.loc 1 329 69 view .LVU252
 775 0118 80F00100 		eor	r0, r0, #1
 395:Src/mcp.c     ****     pHandle->txLength++;
 776              		.loc 1 395 30 view .LVU253
 777 011c E389     		ldrh	r3, [r4, #14]
 329:Src/mcp.c     ****         }
 778              		.loc 1 329 23 view .LVU254
 779 011e C0B2     		uxtb	r0, r0
 780              	.LVL70:
 329:Src/mcp.c     ****         }
 781              		.loc 1 329 23 view .LVU255
 782 0120 C2E7     		b	.L49
 783              	.LVL71:
 784              	.L59:
 286:Src/mcp.c     ****         break;
 785              		.loc 1 286 9 is_stmt 1 view .LVU256
 286:Src/mcp.c     ****         break;
 786              		.loc 1 286 23 is_stmt 0 view .LVU257
 787 0122 2046     		mov	r0, r4
 788 0124 FFF7FEFF 		bl	RI_GetRegCommandParser
 789              	.LVL72:
 395:Src/mcp.c     ****     pHandle->txLength++;
 790              		.loc 1 395 30 view .LVU258
 791 0128 E389     		ldrh	r3, [r4, #14]
 792              	.LVL73:
 287:Src/mcp.c     ****       }
ARM GAS  /tmp/ccHEpvg0.s 			page 25


 793              		.loc 1 287 9 is_stmt 1 view .LVU259
 794 012a BDE7     		b	.L49
 795              	.LVL74:
 796              	.L61:
 272:Src/mcp.c     ****         *pHandle->txBuffer = MCP_VERSION;
 797              		.loc 1 272 9 view .LVU260
 273:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 798              		.loc 1 273 17 is_stmt 0 view .LVU261
 799 012c A368     		ldr	r3, [r4, #8]
 272:Src/mcp.c     ****         *pHandle->txBuffer = MCP_VERSION;
 800              		.loc 1 272 27 view .LVU262
 801 012e 0421     		movs	r1, #4
 273:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 802              		.loc 1 273 28 view .LVU263
 803 0130 0122     		movs	r2, #1
 804              	.LVL75:
 272:Src/mcp.c     ****         *pHandle->txBuffer = MCP_VERSION;
 805              		.loc 1 272 27 view .LVU264
 806 0132 E181     		strh	r1, [r4, #14]	@ movhi
 273:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 807              		.loc 1 273 9 is_stmt 1 view .LVU265
 273:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 808              		.loc 1 273 28 is_stmt 0 view .LVU266
 809 0134 1A70     		strb	r2, [r3]
 810              	.LVL76:
 274:Src/mcp.c     ****         break;
 811              		.loc 1 274 9 is_stmt 1 view .LVU267
 275:Src/mcp.c     ****       }
 812              		.loc 1 275 9 view .LVU268
 395:Src/mcp.c     ****     pHandle->txLength++;
 813              		.loc 1 395 30 is_stmt 0 view .LVU269
 814 0136 E389     		ldrh	r3, [r4, #14]
 274:Src/mcp.c     ****         break;
 815              		.loc 1 274 21 view .LVU270
 816 0138 0020     		movs	r0, #0
 275:Src/mcp.c     ****       }
 817              		.loc 1 275 9 view .LVU271
 818 013a B5E7     		b	.L49
 819              	.LVL77:
 820              	.L60:
 280:Src/mcp.c     ****         break;
 821              		.loc 1 280 9 is_stmt 1 view .LVU272
 280:Src/mcp.c     ****         break;
 822              		.loc 1 280 23 is_stmt 0 view .LVU273
 823 013c 2046     		mov	r0, r4
 824 013e FFF7FEFF 		bl	RI_SetRegCommandParser
 825              	.LVL78:
 395:Src/mcp.c     ****     pHandle->txLength++;
 826              		.loc 1 395 30 view .LVU274
 827 0142 E389     		ldrh	r3, [r4, #14]
 828              	.LVL79:
 281:Src/mcp.c     ****       }
 829              		.loc 1 281 9 is_stmt 1 view .LVU275
 830 0144 B0E7     		b	.L49
 831              	.LVL80:
 832              	.L56:
 312:Src/mcp.c     ****         {
ARM GAS  /tmp/ccHEpvg0.s 			page 26


 833              		.loc 1 312 9 view .LVU276
 312:Src/mcp.c     ****         {
 834              		.loc 1 312 20 is_stmt 0 view .LVU277
 835 0146 3846     		mov	r0, r7
 836 0148 FFF7FEFF 		bl	MCI_GetSTMState
 837              	.LVL81:
 312:Src/mcp.c     ****         {
 838              		.loc 1 312 12 view .LVU278
 839 014c 0628     		cmp	r0, #6
 840 014e 29D0     		beq	.L65
 841              	.L75:
 395:Src/mcp.c     ****     pHandle->txLength++;
 842              		.loc 1 395 30 view .LVU279
 843 0150 E389     		ldrh	r3, [r4, #14]
 320:Src/mcp.c     ****         break;
 844              		.loc 1 320 21 view .LVU280
 845 0152 0020     		movs	r0, #0
 846 0154 A8E7     		b	.L49
 847              	.LVL82:
 848              	.L54:
 341:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 849              		.loc 1 341 9 is_stmt 1 view .LVU281
 341:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 850              		.loc 1 341 15 is_stmt 0 view .LVU282
 851 0156 3846     		mov	r0, r7
 852 0158 FFF7FEFF 		bl	MCI_FaultAcknowledged
 853              	.LVL83:
 342:Src/mcp.c     ****         break;
 854              		.loc 1 342 9 is_stmt 1 view .LVU283
 343:Src/mcp.c     ****       }
 855              		.loc 1 343 9 view .LVU284
 395:Src/mcp.c     ****     pHandle->txLength++;
 856              		.loc 1 395 30 is_stmt 0 view .LVU285
 857 015c E389     		ldrh	r3, [r4, #14]
 342:Src/mcp.c     ****         break;
 858              		.loc 1 342 21 view .LVU286
 859 015e 0020     		movs	r0, #0
 343:Src/mcp.c     ****       }
 860              		.loc 1 343 9 view .LVU287
 861 0160 A2E7     		b	.L49
 862              	.LVL84:
 863              	.L53:
 348:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 864              		.loc 1 348 9 is_stmt 1 view .LVU288
 865 0162 3846     		mov	r0, r7
 866 0164 0021     		movs	r1, #0
 867 0166 FFF7FEFF 		bl	MCI_Clear_PerfMeasure
 868              	.LVL85:
 349:Src/mcp.c     ****         break;
 869              		.loc 1 349 9 view .LVU289
 350:Src/mcp.c     ****       }
 870              		.loc 1 350 9 view .LVU290
 395:Src/mcp.c     ****     pHandle->txLength++;
 871              		.loc 1 395 30 is_stmt 0 view .LVU291
 872 016a E389     		ldrh	r3, [r4, #14]
 349:Src/mcp.c     ****         break;
 873              		.loc 1 349 21 view .LVU292
ARM GAS  /tmp/ccHEpvg0.s 			page 27


 874 016c 0020     		movs	r0, #0
 350:Src/mcp.c     ****       }
 875              		.loc 1 350 9 view .LVU293
 876 016e 9BE7     		b	.L49
 877              	.LVL86:
 878              	.L51:
 355:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 879              		.loc 1 355 9 is_stmt 1 view .LVU294
 880 0170 3846     		mov	r0, r7
 881 0172 FFF7FEFF 		bl	MCI_Clear_Iqdref
 882              	.LVL87:
 356:Src/mcp.c     ****         break;
 883              		.loc 1 356 9 view .LVU295
 357:Src/mcp.c     ****       }
 884              		.loc 1 357 9 view .LVU296
 395:Src/mcp.c     ****     pHandle->txLength++;
 885              		.loc 1 395 30 is_stmt 0 view .LVU297
 886 0176 E389     		ldrh	r3, [r4, #14]
 356:Src/mcp.c     ****         break;
 887              		.loc 1 356 21 view .LVU298
 888 0178 0020     		movs	r0, #0
 357:Src/mcp.c     ****       }
 889              		.loc 1 357 9 view .LVU299
 890 017a 95E7     		b	.L49
 891              	.LVL88:
 892              	.L48:
 262:Src/mcp.c     **** 
 893              		.loc 1 262 75 view .LVU300
 894 017c 013A     		subs	r2, r2, #1
 895              	.LVL89:
 262:Src/mcp.c     **** 
 896              		.loc 1 262 21 view .LVU301
 897 017e 12B2     		sxth	r2, r2
 898              	.LVL90:
 899              	.L63:
 377:Src/mcp.c     ****         {
 900              		.loc 1 377 71 discriminator 1 view .LVU302
 901 0180 0C4B     		ldr	r3, .L77+4
 902 0182 53F82C60 		ldr	r6, [r3, ip, lsl #2]
 377:Src/mcp.c     ****         {
 903              		.loc 1 377 51 discriminator 1 view .LVU303
 904 0186 002E     		cmp	r6, #0
 905 0188 B6D0     		beq	.L67
 379:Src/mcp.c     ****                                                       &pHandle->txLength, pHandle->txBuffer);
 906              		.loc 1 379 11 is_stmt 1 view .LVU304
 379:Src/mcp.c     ****                                                       &pHandle->txLength, pHandle->txBuffer);
 907              		.loc 1 379 25 is_stmt 0 view .LVU305
 908 018a A368     		ldr	r3, [r4, #8]
 909 018c 0093     		str	r3, [sp]
 910 018e 2946     		mov	r1, r5
 911 0190 04F10E03 		add	r3, r4, #14
 912 0194 B047     		blx	r6
 913              	.LVL91:
 395:Src/mcp.c     ****     pHandle->txLength++;
 914              		.loc 1 395 30 view .LVU306
 915 0196 E389     		ldrh	r3, [r4, #14]
 916              	.LVL92:
ARM GAS  /tmp/ccHEpvg0.s 			page 28


 379:Src/mcp.c     ****                                                       &pHandle->txLength, pHandle->txBuffer);
 917              		.loc 1 379 23 view .LVU307
 918 0198 86E7     		b	.L49
 919              	.LVL93:
 920              	.L62:
 305:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 921              		.loc 1 305 9 is_stmt 1 view .LVU308
 922 019a FFF7FEFF 		bl	HAL_NVIC_SystemReset
 923              	.LVL94:
 306:Src/mcp.c     ****         break;
 924              		.loc 1 306 9 view .LVU309
 307:Src/mcp.c     ****       }
 925              		.loc 1 307 9 view .LVU310
 395:Src/mcp.c     ****     pHandle->txLength++;
 926              		.loc 1 395 30 is_stmt 0 view .LVU311
 927 019e E389     		ldrh	r3, [r4, #14]
 306:Src/mcp.c     ****         break;
 928              		.loc 1 306 21 view .LVU312
 929 01a0 3046     		mov	r0, r6
 307:Src/mcp.c     ****       }
 930              		.loc 1 307 9 view .LVU313
 931 01a2 81E7     		b	.L49
 932              	.LVL95:
 933              	.L65:
 314:Src/mcp.c     ****         }
 934              		.loc 1 314 11 is_stmt 1 view .LVU314
 935 01a4 3846     		mov	r0, r7
 936 01a6 FFF7FEFF 		bl	MCI_StopRamp
 937              	.LVL96:
 938 01aa D1E7     		b	.L75
 939              	.LVL97:
 940              	.L69:
 268:Src/mcp.c     ****     {
 941              		.loc 1 268 5 is_stmt 0 view .LVU315
 942 01ac B446     		mov	ip, r6
 943              	.LVL98:
 268:Src/mcp.c     ****     {
 944              		.loc 1 268 5 view .LVU316
 945 01ae E7E7     		b	.L63
 946              	.L78:
 947              		.align	2
 948              	.L77:
 949 01b0 00000000 		.word	Mci
 950 01b4 00000000 		.word	MCP_UserCallBack
 951              		.cfi_endproc
 952              	.LFE1715:
 954              		.section	.text.MCP_RegisterCallBack,"ax",%progbits
 955              		.align	1
 956              		.p2align 2,,3
 957              		.global	MCP_RegisterCallBack
 958              		.syntax unified
 959              		.thumb
 960              		.thumb_func
 961              		.fpu fpv4-sp-d16
 963              	MCP_RegisterCallBack:
 964              	.LVL99:
 965              	.LFB1716:
ARM GAS  /tmp/ccHEpvg0.s 			page 29


 401:Src/mcp.c     **** 
 402:Src/mcp.c     **** /**
 403:Src/mcp.c     ****   * @brief  Stores user's MCP function to be later called as MCP function.
 404:Src/mcp.c     ****   *
 405:Src/mcp.c     ****   * @param  callBackID: ID used to get to the stored @p fctCB function
 406:Src/mcp.c     ****   * @param  fctCB: User call back function structure
 407:Src/mcp.c     ****   *
 408:Src/mcp.c     ****   * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not
 409:Src/mcp.c     ****   */
 410:Src/mcp.c     **** uint8_t MCP_RegisterCallBack (uint8_t callBackID, MCP_user_cb_t fctCB)
 411:Src/mcp.c     **** {
 966              		.loc 1 411 1 is_stmt 1 view -0
 967              		.cfi_startproc
 968              		@ args = 0, pretend = 0, frame = 0
 969              		@ frame_needed = 0, uses_anonymous_args = 0
 970              		@ link register save eliminated.
 412:Src/mcp.c     ****   uint8_t result;
 971              		.loc 1 412 3 view .LVU318
 413:Src/mcp.c     **** 
 414:Src/mcp.c     ****   if (callBackID < MCP_USER_CALLBACK_MAX)
 972              		.loc 1 414 3 view .LVU319
 973              		.loc 1 414 6 is_stmt 0 view .LVU320
 974 0000 0128     		cmp	r0, #1
 415:Src/mcp.c     ****   {
 416:Src/mcp.c     ****     MCP_UserCallBack[callBackID] = fctCB;
 975              		.loc 1 416 5 is_stmt 1 view .LVU321
 411:Src/mcp.c     ****   uint8_t result;
 976              		.loc 1 411 1 is_stmt 0 view .LVU322
 977 0002 0346     		mov	r3, r0
 978              		.loc 1 416 34 view .LVU323
 979 0004 9DBF     		ittte	ls
 980 0006 034A     		ldrls	r2, .L82
 417:Src/mcp.c     ****     result = MCP_CMD_OK;
 981              		.loc 1 417 12 view .LVU324
 982 0008 0020     		movls	r0, #0
 983              	.LVL100:
 416:Src/mcp.c     ****     result = MCP_CMD_OK;
 984              		.loc 1 416 34 view .LVU325
 985 000a 42F82310 		strls	r1, [r2, r3, lsl #2]
 986              		.loc 1 417 5 is_stmt 1 view .LVU326
 987              	.LVL101:
 418:Src/mcp.c     ****   }
 419:Src/mcp.c     ****   else
 420:Src/mcp.c     ****   {
 421:Src/mcp.c     ****     result = MCP_CMD_NOK;
 988              		.loc 1 421 12 is_stmt 0 view .LVU327
 989 000e 0120     		movhi	r0, #1
 990              	.LVL102:
 422:Src/mcp.c     ****   }
 423:Src/mcp.c     ****   return (result);
 991              		.loc 1 423 3 is_stmt 1 view .LVU328
 424:Src/mcp.c     **** }
 992              		.loc 1 424 1 is_stmt 0 view .LVU329
 993 0010 7047     		bx	lr
 994              	.L83:
 995 0012 00BF     		.align	2
 996              	.L82:
ARM GAS  /tmp/ccHEpvg0.s 			page 30


 997 0014 00000000 		.word	MCP_UserCallBack
 998              		.cfi_endproc
 999              	.LFE1716:
 1001              		.text
 1002              	.Letext0:
 1003              		.file 2 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_type
 1004              		.file 3 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 1005              		.file 4 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 1006              		.file 5 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 1007              		.file 6 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 1008              		.file 7 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 1009              		.file 8 "Inc/mc_type.h"
 1010              		.file 9 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcptl.h"
 1011              		.file 10 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcp.h"
 1012              		.file 11 "Inc/pwm_curr_fdbk.h"
 1013              		.file 12 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/pid_regulator.h"
 1014              		.file 13 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
 1015              		.file 14 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h"
 1016              		.file 15 "Inc/mc_perf.h"
 1017              		.file 16 "Inc/mc_interface.h"
 1018              		.file 17 "Inc/mcp_config.h"
 1019              		.file 18 "Inc/mc_api.h"
 1020              		.file 19 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_cortex.h"
 1021              		.file 20 "Inc/mc_config.h"
ARM GAS  /tmp/ccHEpvg0.s 			page 31


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mcp.c
     /tmp/ccHEpvg0.s:18     .text.RI_SetRegCommandParser:0000000000000000 $t
     /tmp/ccHEpvg0.s:27     .text.RI_SetRegCommandParser:0000000000000000 RI_SetRegCommandParser
     /tmp/ccHEpvg0.s:275    .text.RI_SetRegCommandParser:00000000000000d4 $d
     /tmp/ccHEpvg0.s:281    .text.RI_GetRegCommandParser:0000000000000000 $t
     /tmp/ccHEpvg0.s:289    .text.RI_GetRegCommandParser:0000000000000000 RI_GetRegCommandParser
     /tmp/ccHEpvg0.s:454    .text.RI_GetRegCommandParser:0000000000000090 $d
     /tmp/ccHEpvg0.s:460    .text.MCP_ReceivedPacket:0000000000000000 $t
     /tmp/ccHEpvg0.s:468    .text.MCP_ReceivedPacket:0000000000000000 MCP_ReceivedPacket
     /tmp/ccHEpvg0.s:575    .text.MCP_ReceivedPacket:000000000000005a $d
     /tmp/ccHEpvg0.s:949    .text.MCP_ReceivedPacket:00000000000001b0 $d
     /tmp/ccHEpvg0.s:955    .text.MCP_RegisterCallBack:0000000000000000 $t
     /tmp/ccHEpvg0.s:963    .text.MCP_RegisterCallBack:0000000000000000 MCP_RegisterCallBack
     /tmp/ccHEpvg0.s:997    .text.MCP_RegisterCallBack:0000000000000014 $d
     /tmp/ccHEpvg0.s:648    .text.MCP_ReceivedPacket:00000000000000a3 $d
     /tmp/ccHEpvg0.s:648    .text.MCP_ReceivedPacket:00000000000000a4 $t

UNDEFINED SYMBOLS
RI_SetRegisterGlobal
RI_SetRegisterMotor1
RI_GetRegisterGlobal
RI_GetRegisterMotor1
MC_ProfilerCommand
MCI_GetSTMState
MCI_StopMotor
MCI_StartMotor
MCI_FaultAcknowledged
MCI_Clear_PerfMeasure
MCI_Clear_Iqdref
HAL_NVIC_SystemReset
MCI_StopRamp
Mci
MCP_UserCallBack
