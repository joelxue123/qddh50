ARM GAS  /tmp/ccCNpeZo.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"thermistor.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata._ZL16OFFSET_TAB_CCMRx,"a"
  18              		.align	2
  21              	_ZL16OFFSET_TAB_CCMRx:
  22 0000 00000000 		.ascii	"\000\000\000\000\004\004\004\00488"
  22      04040404 
  22      3838
  23              		.section	.rodata._ZL14SHIFT_TAB_OCxx,"a"
  24              		.align	2
  27              	_ZL14SHIFT_TAB_OCxx:
  28 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\010"
  28      00000800 
  28      0008
  29              		.section	.rodata._ZL14SHIFT_TAB_ICxx,"a"
  30              		.align	2
  33              	_ZL14SHIFT_TAB_ICxx:
  34 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\000"
  34      00000800 
  34      0000
  35              		.section	.rodata._ZL14SHIFT_TAB_CCxP,"a"
  36              		.align	2
  39              	_ZL14SHIFT_TAB_CCxP:
  40 0000 00020406 		.ascii	"\000\002\004\006\010\012\014\016\020\024"
  40      080A0C0E 
  40      1014
  41              		.section	.rodata._ZL14SHIFT_TAB_OISx,"a"
  42              		.align	2
  45              	_ZL14SHIFT_TAB_OISx:
  46 0000 00010203 		.ascii	"\000\001\002\003\004\005\006\007\010\012"
  46      04050607 
  46      080A
  47              		.section	.rodata._ZL19USART_PRESCALER_TAB,"a"
  48              		.align	2
  51              	_ZL19USART_PRESCALER_TAB:
  52 0000 01000000 		.word	1
  53 0004 02000000 		.word	2
  54 0008 04000000 		.word	4
  55 000c 06000000 		.word	6
  56 0010 08000000 		.word	8
  57 0014 0A000000 		.word	10
  58 0018 0C000000 		.word	12
  59 001c 10000000 		.word	16
ARM GAS  /tmp/ccCNpeZo.s 			page 2


  60 0020 20000000 		.word	32
  61 0024 40000000 		.word	64
  62 0028 80000000 		.word	128
  63 002c 00010000 		.word	256
  64              		.section	.rodata._ZL18CHANNEL_OFFSET_TAB,"a"
  65              		.align	2
  68              	_ZL18CHANNEL_OFFSET_TAB:
  69 0000 081C3044 		.ascii	"\010\0340DXl"
  69      586C
  70              		.section	.rodata._ZL12one_by_sqrt3,"a"
  71              		.align	2
  74              	_ZL12one_by_sqrt3:
  75 0000 3ACD133F 		.word	1058262330
  76              		.section	.rodata._ZL12two_by_sqrt3,"a"
  77              		.align	2
  80              	_ZL12two_by_sqrt3:
  81 0000 3ACD933F 		.word	1066650938
  82              		.section	.rodata._ZL10sqrt3_by_2,"a"
  83              		.align	2
  86              	_ZL10sqrt3_by_2:
  87 0000 D7B35D3F 		.word	1063105495
  88              		.section	.text._ZN14CurrentLimiterC2Ev,"axG",%progbits,_ZN14CurrentLimiterC5Ev,comdat
  89              		.align	1
  90              		.weak	_ZN14CurrentLimiterC2Ev
  91              		.arch armv7e-m
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  95              		.fpu fpv4-sp-d16
  97              	_ZN14CurrentLimiterC2Ev:
  98              	.LFB4811:
  99              		.file 1 "Inc/current_limiter.hpp"
   1:Inc/current_limiter.hpp **** #ifndef __CURRENT_LIMITER_HPP
   2:Inc/current_limiter.hpp **** #define __CURRENT_LIMITER_HPP
   3:Inc/current_limiter.hpp **** 
   4:Inc/current_limiter.hpp **** 
   5:Inc/current_limiter.hpp **** 
   6:Inc/current_limiter.hpp **** class CurrentLimiter {
 100              		.loc 1 6 7
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 8
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              	.LCFI0:
 107              		.cfi_def_cfa_offset 4
 108              		.cfi_offset 7, -4
 109 0002 83B0     		sub	sp, sp, #12
 110              	.LCFI1:
 111              		.cfi_def_cfa_offset 16
 112 0004 00AF     		add	r7, sp, #0
 113              	.LCFI2:
 114              		.cfi_def_cfa_register 7
 115 0006 7860     		str	r0, [r7, #4]
 116              	.LBB2:
 117              		.loc 1 6 7
 118 0008 044A     		ldr	r2, .L3
ARM GAS  /tmp/ccCNpeZo.s 			page 3


 119 000a 7B68     		ldr	r3, [r7, #4]
 120 000c 1A60     		str	r2, [r3]
 121              	.LBE2:
 122 000e 7B68     		ldr	r3, [r7, #4]
 123 0010 1846     		mov	r0, r3
 124 0012 0C37     		adds	r7, r7, #12
 125              	.LCFI3:
 126              		.cfi_def_cfa_offset 4
 127 0014 BD46     		mov	sp, r7
 128              	.LCFI4:
 129              		.cfi_def_cfa_register 13
 130              		@ sp needed
 131 0016 5DF8047B 		ldr	r7, [sp], #4
 132              	.LCFI5:
 133              		.cfi_restore 7
 134              		.cfi_def_cfa_offset 0
 135 001a 7047     		bx	lr
 136              	.L4:
 137              		.align	2
 138              	.L3:
 139 001c 08000000 		.word	_ZTV14CurrentLimiter+8
 140              		.cfi_endproc
 141              	.LFE4811:
 143              		.weak	_ZN14CurrentLimiterC1Ev
 144              		.thumb_set _ZN14CurrentLimiterC1Ev,_ZN14CurrentLimiterC2Ev
 145              		.section	.text._ZN14CurrentLimiterD2Ev,"axG",%progbits,_ZN14CurrentLimiterD5Ev,comdat
 146              		.align	1
 147              		.weak	_ZN14CurrentLimiterD2Ev
 148              		.syntax unified
 149              		.thumb
 150              		.thumb_func
 151              		.fpu fpv4-sp-d16
 153              	_ZN14CurrentLimiterD2Ev:
 154              	.LFB4814:
   7:Inc/current_limiter.hpp **** public:
   8:Inc/current_limiter.hpp ****     virtual ~CurrentLimiter() = default;
 155              		.loc 1 8 13
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 8
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159              		@ link register save eliminated.
 160 0000 80B4     		push	{r7}
 161              	.LCFI6:
 162              		.cfi_def_cfa_offset 4
 163              		.cfi_offset 7, -4
 164 0002 83B0     		sub	sp, sp, #12
 165              	.LCFI7:
 166              		.cfi_def_cfa_offset 16
 167 0004 00AF     		add	r7, sp, #0
 168              	.LCFI8:
 169              		.cfi_def_cfa_register 7
 170 0006 7860     		str	r0, [r7, #4]
 171              	.LBB3:
 172              		.loc 1 8 13
 173 0008 044A     		ldr	r2, .L7
 174 000a 7B68     		ldr	r3, [r7, #4]
 175 000c 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccCNpeZo.s 			page 4


 176              	.LBE3:
 177 000e 7B68     		ldr	r3, [r7, #4]
 178 0010 1846     		mov	r0, r3
 179 0012 0C37     		adds	r7, r7, #12
 180              	.LCFI9:
 181              		.cfi_def_cfa_offset 4
 182 0014 BD46     		mov	sp, r7
 183              	.LCFI10:
 184              		.cfi_def_cfa_register 13
 185              		@ sp needed
 186 0016 5DF8047B 		ldr	r7, [sp], #4
 187              	.LCFI11:
 188              		.cfi_restore 7
 189              		.cfi_def_cfa_offset 0
 190 001a 7047     		bx	lr
 191              	.L8:
 192              		.align	2
 193              	.L7:
 194 001c 08000000 		.word	_ZTV14CurrentLimiter+8
 195              		.cfi_endproc
 196              	.LFE4814:
 198              		.weak	_ZN14CurrentLimiterD1Ev
 199              		.thumb_set _ZN14CurrentLimiterD1Ev,_ZN14CurrentLimiterD2Ev
 200              		.section	.text._ZN14CurrentLimiterD0Ev,"axG",%progbits,_ZN14CurrentLimiterD5Ev,comdat
 201              		.align	1
 202              		.weak	_ZN14CurrentLimiterD0Ev
 203              		.syntax unified
 204              		.thumb
 205              		.thumb_func
 206              		.fpu fpv4-sp-d16
 208              	_ZN14CurrentLimiterD0Ev:
 209              	.LFB4816:
 210              		.loc 1 8 13
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 8
 213              		@ frame_needed = 1, uses_anonymous_args = 0
 214 0000 80B5     		push	{r7, lr}
 215              	.LCFI12:
 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 7, -8
 218              		.cfi_offset 14, -4
 219 0002 82B0     		sub	sp, sp, #8
 220              	.LCFI13:
 221              		.cfi_def_cfa_offset 16
 222 0004 00AF     		add	r7, sp, #0
 223              	.LCFI14:
 224              		.cfi_def_cfa_register 7
 225 0006 7860     		str	r0, [r7, #4]
 226              		.loc 1 8 13
 227 0008 7868     		ldr	r0, [r7, #4]
 228 000a FFF7FEFF 		bl	_ZN14CurrentLimiterD1Ev
 229 000e 7868     		ldr	r0, [r7, #4]
 230 0010 FFF7FEFF 		bl	_ZdlPv
 231 0014 7B68     		ldr	r3, [r7, #4]
 232 0016 1846     		mov	r0, r3
 233 0018 0837     		adds	r7, r7, #8
 234              	.LCFI15:
ARM GAS  /tmp/ccCNpeZo.s 			page 5


 235              		.cfi_def_cfa_offset 8
 236 001a BD46     		mov	sp, r7
 237              	.LCFI16:
 238              		.cfi_def_cfa_register 13
 239              		@ sp needed
 240 001c 80BD     		pop	{r7, pc}
 241              		.cfi_endproc
 242              	.LFE4816:
 244              		.section	.text._ZN24ThermistorCurrentLimiterC2EtPKfS1_jRS0_S2_RKb,"ax",%progbits
 245              		.align	1
 246              		.global	_ZN24ThermistorCurrentLimiterC2EtPKfS1_jRS0_S2_RKb
 247              		.syntax unified
 248              		.thumb
 249              		.thumb_func
 250              		.fpu fpv4-sp-d16
 252              	_ZN24ThermistorCurrentLimiterC2EtPKfS1_jRS0_S2_RKb:
 253              	.LFB4817:
 254              		.file 2 "Src/thermistor.cpp"
   1:Src/thermistor.cpp **** #include "main.h"
   2:Src/thermistor.cpp **** #include "low_level.h"
   3:Src/thermistor.cpp **** #include "thermistor.hpp"
   4:Src/thermistor.cpp **** #include "axis.hpp"
   5:Src/thermistor.cpp **** #include "motor.hpp"
   6:Src/thermistor.cpp **** 
   7:Src/thermistor.cpp **** 
   8:Src/thermistor.cpp **** ThermistorCurrentLimiter::ThermistorCurrentLimiter(uint16_t adc_channel,
 255              		.loc 2 8 1
 256              		.cfi_startproc
 257              		@ args = 16, pretend = 0, frame = 16
 258              		@ frame_needed = 1, uses_anonymous_args = 0
 259 0000 80B5     		push	{r7, lr}
 260              	.LCFI17:
 261              		.cfi_def_cfa_offset 8
 262              		.cfi_offset 7, -8
 263              		.cfi_offset 14, -4
 264 0002 84B0     		sub	sp, sp, #16
 265              	.LCFI18:
 266              		.cfi_def_cfa_offset 24
 267 0004 00AF     		add	r7, sp, #0
 268              	.LCFI19:
 269              		.cfi_def_cfa_register 7
 270 0006 F860     		str	r0, [r7, #12]
 271 0008 7A60     		str	r2, [r7, #4]
 272 000a 3B60     		str	r3, [r7]
 273 000c 0B46     		mov	r3, r1	@ movhi
 274 000e 7B81     		strh	r3, [r7, #10]	@ movhi
 275              	.LBB4:
   9:Src/thermistor.cpp ****                                                    const float* const coefficients,
  10:Src/thermistor.cpp ****                                                    const float* const aux_coefficients,
  11:Src/thermistor.cpp ****                                                    size_t num_coeffs,
  12:Src/thermistor.cpp ****                                                    const float& temp_limit_lower,
  13:Src/thermistor.cpp ****                                                    const float& temp_limit_upper,
  14:Src/thermistor.cpp ****                                                    const bool& enabled) :
  15:Src/thermistor.cpp ****     adc_channel_(adc_channel),
  16:Src/thermistor.cpp ****     coefficients_(coefficients),
  17:Src/thermistor.cpp ****     aux_coefficients_(aux_coefficients),
  18:Src/thermistor.cpp ****     num_coeffs_(num_coeffs),
ARM GAS  /tmp/ccCNpeZo.s 			page 6


  19:Src/thermistor.cpp ****     temperature_(NAN),
  20:Src/thermistor.cpp ****     temp_limit_lower_(temp_limit_lower),
  21:Src/thermistor.cpp ****     temp_limit_upper_(temp_limit_upper),
  22:Src/thermistor.cpp ****     enabled_(enabled),
  23:Src/thermistor.cpp ****     error_(ERROR_NONE)
 276              		.loc 2 23 22
 277 0010 FB68     		ldr	r3, [r7, #12]
 278 0012 1846     		mov	r0, r3
 279 0014 FFF7FEFF 		bl	_ZN14CurrentLimiterC2Ev
 280 0018 134A     		ldr	r2, .L13
 281 001a FB68     		ldr	r3, [r7, #12]
 282 001c 1A60     		str	r2, [r3]
 283 001e FB68     		ldr	r3, [r7, #12]
 284 0020 7A89     		ldrh	r2, [r7, #10]	@ movhi
 285 0022 9A80     		strh	r2, [r3, #4]	@ movhi
 286 0024 FB68     		ldr	r3, [r7, #12]
 287 0026 7A68     		ldr	r2, [r7, #4]
 288 0028 9A60     		str	r2, [r3, #8]
 289 002a FB68     		ldr	r3, [r7, #12]
 290 002c 3A68     		ldr	r2, [r7]
 291 002e DA60     		str	r2, [r3, #12]
 292 0030 FB68     		ldr	r3, [r7, #12]
 293 0032 BA69     		ldr	r2, [r7, #24]
 294 0034 1A61     		str	r2, [r3, #16]
 295 0036 FB68     		ldr	r3, [r7, #12]
 296 0038 0C4A     		ldr	r2, .L13+4
 297 003a 5A61     		str	r2, [r3, #20]	@ float
 298 003c FB68     		ldr	r3, [r7, #12]
 299 003e FA69     		ldr	r2, [r7, #28]
 300 0040 5A62     		str	r2, [r3, #36]
 301 0042 FB68     		ldr	r3, [r7, #12]
 302 0044 3A6A     		ldr	r2, [r7, #32]
 303 0046 9A62     		str	r2, [r3, #40]
 304 0048 FB68     		ldr	r3, [r7, #12]
 305 004a 7A6A     		ldr	r2, [r7, #36]
 306 004c DA62     		str	r2, [r3, #44]
 307 004e FB68     		ldr	r3, [r7, #12]
 308 0050 0022     		movs	r2, #0
 309 0052 83F83020 		strb	r2, [r3, #48]
 310 0056 FB68     		ldr	r3, [r7, #12]
 311 0058 0022     		movs	r2, #0
 312 005a 5A63     		str	r2, [r3, #52]
 313              	.LBE4:
  24:Src/thermistor.cpp **** {
  25:Src/thermistor.cpp **** }
 314              		.loc 2 25 1
 315 005c FB68     		ldr	r3, [r7, #12]
 316 005e 1846     		mov	r0, r3
 317 0060 1037     		adds	r7, r7, #16
 318              	.LCFI20:
 319              		.cfi_def_cfa_offset 8
 320 0062 BD46     		mov	sp, r7
 321              	.LCFI21:
 322              		.cfi_def_cfa_register 13
 323              		@ sp needed
 324 0064 80BD     		pop	{r7, pc}
 325              	.L14:
ARM GAS  /tmp/ccCNpeZo.s 			page 7


 326 0066 00BF     		.align	2
 327              	.L13:
 328 0068 08000000 		.word	_ZTV24ThermistorCurrentLimiter+8
 329 006c 0000C07F 		.word	2143289344
 330              		.cfi_endproc
 331              	.LFE4817:
 333              		.global	_ZN24ThermistorCurrentLimiterC1EtPKfS1_jRS0_S2_RKb
 334              		.thumb_set _ZN24ThermistorCurrentLimiterC1EtPKfS1_jRS0_S2_RKb,_ZN24ThermistorCurrentLimiterC2EtPKf
 335              		.section	.text._ZN24ThermistorCurrentLimiter6updateEv,"ax",%progbits
 336              		.align	1
 337              		.global	_ZN24ThermistorCurrentLimiter6updateEv
 338              		.syntax unified
 339              		.thumb
 340              		.thumb_func
 341              		.fpu fpv4-sp-d16
 343              	_ZN24ThermistorCurrentLimiter6updateEv:
 344              	.LFB4819:
  26:Src/thermistor.cpp **** 
  27:Src/thermistor.cpp **** void ThermistorCurrentLimiter::update() {
 345              		.loc 2 27 41
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 16
 348              		@ frame_needed = 1, uses_anonymous_args = 0
 349 0000 80B5     		push	{r7, lr}
 350              	.LCFI22:
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 7, -8
 353              		.cfi_offset 14, -4
 354 0002 84B0     		sub	sp, sp, #16
 355              	.LCFI23:
 356              		.cfi_def_cfa_offset 24
 357 0004 00AF     		add	r7, sp, #0
 358              	.LCFI24:
 359              		.cfi_def_cfa_register 7
 360 0006 7860     		str	r0, [r7, #4]
  28:Src/thermistor.cpp ****     float voltage = get_adc_voltage_channel(14);
 361              		.loc 2 28 44
 362 0008 0E20     		movs	r0, #14
 363 000a FFF7FEFF 		bl	get_adc_voltage_channel
 364 000e 87ED030A 		vstr.32	s0, [r7, #12]
  29:Src/thermistor.cpp ****     float normalized_voltage = voltage / adc_ref_voltage;
 365              		.loc 2 29 42
 366 0012 254B     		ldr	r3, .L16
 367 0014 93ED007A 		vldr.32	s14, [r3]
 368              		.loc 2 29 11
 369 0018 D7ED036A 		vldr.32	s13, [r7, #12]
 370 001c C6EE877A 		vdiv.f32	s15, s13, s14
 371 0020 C7ED027A 		vstr.32	s15, [r7, #8]
  30:Src/thermistor.cpp ****     temperature_ = horner_fma(normalized_voltage, coefficients_, num_coeffs_);
 372              		.loc 2 30 51
 373 0024 7B68     		ldr	r3, [r7, #4]
 374 0026 9A68     		ldr	r2, [r3, #8]
 375              		.loc 2 30 66
 376 0028 7B68     		ldr	r3, [r7, #4]
 377 002a 1B69     		ldr	r3, [r3, #16]
 378              		.loc 2 30 30
 379 002c 1946     		mov	r1, r3
ARM GAS  /tmp/ccCNpeZo.s 			page 8


 380 002e 1046     		mov	r0, r2
 381 0030 97ED020A 		vldr.32	s0, [r7, #8]
 382 0034 FFF7FEFF 		bl	horner_fma
 383 0038 F0EE407A 		vmov.f32	s15, s0
 384              		.loc 2 30 18
 385 003c 7B68     		ldr	r3, [r7, #4]
 386 003e C3ED057A 		vstr.32	s15, [r3, #20]
  31:Src/thermistor.cpp ****     temperature_int_ = (int32_t)temperature_;
 387              		.loc 2 31 33
 388 0042 7B68     		ldr	r3, [r7, #4]
 389 0044 D3ED057A 		vldr.32	s15, [r3, #20]
 390              		.loc 2 31 24
 391 0048 FDEEE77A 		vcvt.s32.f32	s15, s15
 392 004c 17EE902A 		vmov	r2, s15	@ int
 393              		.loc 2 31 22
 394 0050 7B68     		ldr	r3, [r7, #4]
 395 0052 9A61     		str	r2, [r3, #24]
  32:Src/thermistor.cpp ****     voltage = get_adc_voltage_channel(15);
 396              		.loc 2 32 38
 397 0054 0F20     		movs	r0, #15
 398 0056 FFF7FEFF 		bl	get_adc_voltage_channel
 399 005a 87ED030A 		vstr.32	s0, [r7, #12]
  33:Src/thermistor.cpp ****     normalized_voltage = voltage / adc_ref_voltage;
 400              		.loc 2 33 36
 401 005e 124B     		ldr	r3, .L16
 402 0060 93ED007A 		vldr.32	s14, [r3]
 403              		.loc 2 33 24
 404 0064 D7ED036A 		vldr.32	s13, [r7, #12]
 405 0068 C6EE877A 		vdiv.f32	s15, s13, s14
 406 006c C7ED027A 		vstr.32	s15, [r7, #8]
  34:Src/thermistor.cpp ****     aux_temperature_ = horner_fma(normalized_voltage, aux_coefficients_, num_coeffs_);
 407              		.loc 2 34 55
 408 0070 7B68     		ldr	r3, [r7, #4]
 409 0072 DA68     		ldr	r2, [r3, #12]
 410              		.loc 2 34 74
 411 0074 7B68     		ldr	r3, [r7, #4]
 412 0076 1B69     		ldr	r3, [r3, #16]
 413              		.loc 2 34 34
 414 0078 1946     		mov	r1, r3
 415 007a 1046     		mov	r0, r2
 416 007c 97ED020A 		vldr.32	s0, [r7, #8]
 417 0080 FFF7FEFF 		bl	horner_fma
 418 0084 F0EE407A 		vmov.f32	s15, s0
 419              		.loc 2 34 22
 420 0088 7B68     		ldr	r3, [r7, #4]
 421 008a C3ED077A 		vstr.32	s15, [r3, #28]
  35:Src/thermistor.cpp ****     aux_temperature_int_ = (int32_t)aux_temperature_;
 422              		.loc 2 35 37
 423 008e 7B68     		ldr	r3, [r7, #4]
 424 0090 D3ED077A 		vldr.32	s15, [r3, #28]
 425              		.loc 2 35 28
 426 0094 FDEEE77A 		vcvt.s32.f32	s15, s15
 427 0098 17EE902A 		vmov	r2, s15	@ int
 428              		.loc 2 35 26
 429 009c 7B68     		ldr	r3, [r7, #4]
 430 009e 1A62     		str	r2, [r3, #32]
  36:Src/thermistor.cpp **** 
ARM GAS  /tmp/ccCNpeZo.s 			page 9


  37:Src/thermistor.cpp **** }
 431              		.loc 2 37 1
 432 00a0 00BF     		nop
 433 00a2 1037     		adds	r7, r7, #16
 434              	.LCFI25:
 435              		.cfi_def_cfa_offset 8
 436 00a4 BD46     		mov	sp, r7
 437              	.LCFI26:
 438              		.cfi_def_cfa_register 13
 439              		@ sp needed
 440 00a6 80BD     		pop	{r7, pc}
 441              	.L17:
 442              		.align	2
 443              	.L16:
 444 00a8 00000000 		.word	adc_ref_voltage
 445              		.cfi_endproc
 446              	.LFE4819:
 448              		.section	.text._ZN24ThermistorCurrentLimiter9do_checksEv,"ax",%progbits
 449              		.align	1
 450              		.global	_ZN24ThermistorCurrentLimiter9do_checksEv
 451              		.syntax unified
 452              		.thumb
 453              		.thumb_func
 454              		.fpu fpv4-sp-d16
 456              	_ZN24ThermistorCurrentLimiter9do_checksEv:
 457              	.LFB4820:
  38:Src/thermistor.cpp **** 
  39:Src/thermistor.cpp **** bool ThermistorCurrentLimiter::do_checks() {
 458              		.loc 2 39 44
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 8
 461              		@ frame_needed = 1, uses_anonymous_args = 0
 462              		@ link register save eliminated.
 463 0000 80B4     		push	{r7}
 464              	.LCFI27:
 465              		.cfi_def_cfa_offset 4
 466              		.cfi_offset 7, -4
 467 0002 83B0     		sub	sp, sp, #12
 468              	.LCFI28:
 469              		.cfi_def_cfa_offset 16
 470 0004 00AF     		add	r7, sp, #0
 471              	.LCFI29:
 472              		.cfi_def_cfa_register 7
 473 0006 7860     		str	r0, [r7, #4]
  40:Src/thermistor.cpp ****     if (enabled_ && ( (temperature_ >= temp_limit_upper_ + 1 ) ||  (aux_temperature_ >= temp_limit_
 474              		.loc 2 40 9
 475 0008 7B68     		ldr	r3, [r7, #4]
 476 000a DB6A     		ldr	r3, [r3, #44]
 477 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 478              		.loc 2 40 5
 479 000e 002B     		cmp	r3, #0
 480 0010 34D0     		beq	.L19
 481              		.loc 2 40 24 discriminator 1
 482 0012 7B68     		ldr	r3, [r7, #4]
 483 0014 93ED057A 		vldr.32	s14, [r3, #20]
 484              		.loc 2 40 40 discriminator 1
 485 0018 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccCNpeZo.s 			page 10


 486 001a 9B6A     		ldr	r3, [r3, #40]
 487 001c D3ED007A 		vldr.32	s15, [r3]
 488              		.loc 2 40 58 discriminator 1
 489 0020 F7EE006A 		vmov.f32	s13, #1.0e+0
 490 0024 77EEA67A 		vadd.f32	s15, s15, s13
 491              		.loc 2 40 18 discriminator 1
 492 0028 B4EEE77A 		vcmpe.f32	s14, s15
 493 002c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 494 0030 0FDA     		bge	.L20
 495              		.loc 2 40 69 discriminator 2
 496 0032 7B68     		ldr	r3, [r7, #4]
 497 0034 93ED077A 		vldr.32	s14, [r3, #28]
 498              		.loc 2 40 89 discriminator 2
 499 0038 7B68     		ldr	r3, [r7, #4]
 500 003a 9B6A     		ldr	r3, [r3, #40]
 501 003c D3ED007A 		vldr.32	s15, [r3]
 502              		.loc 2 40 107 discriminator 2
 503 0040 F7EE006A 		vmov.f32	s13, #1.0e+0
 504 0044 77EEA67A 		vadd.f32	s15, s15, s13
 505              		.loc 2 40 64 discriminator 2
 506 0048 B4EEE77A 		vcmpe.f32	s14, s15
 507 004c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 508 0050 14DB     		blt	.L19
 509              	.L20:
  41:Src/thermistor.cpp ****         error_ = ERROR_OVER_TEMP;
 510              		.loc 2 41 16
 511 0052 7B68     		ldr	r3, [r7, #4]
 512 0054 0122     		movs	r2, #1
 513 0056 83F83020 		strb	r2, [r3, #48]
  42:Src/thermistor.cpp ****         // Properly cast error flags when combining
  43:Src/thermistor.cpp ****         axis_->error_ = static_cast<Axis::Error>(
  44:Src/thermistor.cpp ****             static_cast<uint32_t>(axis_->error_) | 
 514              		.loc 2 44 35
 515 005a 7B68     		ldr	r3, [r7, #4]
 516 005c 5B6B     		ldr	r3, [r3, #52]
 517              		.loc 2 44 42
 518 005e D3F85C21 		ldr	r2, [r3, #348]
  43:Src/thermistor.cpp ****             static_cast<uint32_t>(axis_->error_) | 
 519              		.loc 2 43 9
 520 0062 7B68     		ldr	r3, [r7, #4]
 521 0064 5B6B     		ldr	r3, [r3, #52]
 522              		.loc 2 44 50
 523 0066 42F48022 		orr	r2, r2, #262144
  43:Src/thermistor.cpp ****             static_cast<uint32_t>(axis_->error_) | 
 524              		.loc 2 43 23
 525 006a C3F85C21 		str	r2, [r3, #348]
  45:Src/thermistor.cpp ****             static_cast<uint32_t>(Axis::ERROR_OVER_TEMP)
  46:Src/thermistor.cpp ****         );
  47:Src/thermistor.cpp ****                 
  48:Src/thermistor.cpp ****         axis_->axis_state_.erro = Axis::ENCOS_ERRO::ENCOS_ERROR_OVER_TEMP;
 526              		.loc 2 48 9
 527 006e 7B68     		ldr	r3, [r7, #4]
 528 0070 5B6B     		ldr	r3, [r3, #52]
 529              		.loc 2 48 33
 530 0072 0122     		movs	r2, #1
 531 0074 83F89621 		strb	r2, [r3, #406]
  49:Src/thermistor.cpp ****         return false;
ARM GAS  /tmp/ccCNpeZo.s 			page 11


 532              		.loc 2 49 16
 533 0078 0023     		movs	r3, #0
 534 007a 00E0     		b	.L22
 535              	.L19:
  50:Src/thermistor.cpp ****     }
  51:Src/thermistor.cpp ****     return true;
 536              		.loc 2 51 12
 537 007c 0123     		movs	r3, #1
 538              	.L22:
  52:Src/thermistor.cpp **** }
 539              		.loc 2 52 1
 540 007e 1846     		mov	r0, r3
 541 0080 0C37     		adds	r7, r7, #12
 542              	.LCFI30:
 543              		.cfi_def_cfa_offset 4
 544 0082 BD46     		mov	sp, r7
 545              	.LCFI31:
 546              		.cfi_def_cfa_register 13
 547              		@ sp needed
 548 0084 5DF8047B 		ldr	r7, [sp], #4
 549              	.LCFI32:
 550              		.cfi_restore 7
 551              		.cfi_def_cfa_offset 0
 552 0088 7047     		bx	lr
 553              		.cfi_endproc
 554              	.LFE4820:
 556              		.section	.text._ZSt3minIfERKT_S2_S2_,"axG",%progbits,_ZSt3minIfERKT_S2_S2_,comdat
 557              		.align	1
 558              		.weak	_ZSt3minIfERKT_S2_S2_
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 562              		.fpu fpv4-sp-d16
 564              	_ZSt3minIfERKT_S2_S2_:
 565              	.LFB4822:
 566              		.file 3 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_a
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
ARM GAS  /tmp/ccCNpeZo.s 			page 12


  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** /*
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  */
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  */
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** # include <type_traits>
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** # include <compare>
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
ARM GAS  /tmp/ccCNpeZo.s 			page 13


  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** {
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /*
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    */
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline int
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return 0;
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       else
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __iter_swap
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static void
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<>
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static void
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
ARM GAS  /tmp/ccCNpeZo.s 			page 14


 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif // C++03
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline void
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #else
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
ARM GAS  /tmp/ccCNpeZo.s 			page 15


 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __first2;
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Tp>
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline const _Tp&
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 567              		.loc 3 230 5
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 8
 570              		@ frame_needed = 1, uses_anonymous_args = 0
 571              		@ link register save eliminated.
 572 0000 80B4     		push	{r7}
 573              	.LCFI33:
 574              		.cfi_def_cfa_offset 4
 575              		.cfi_offset 7, -4
 576 0002 83B0     		sub	sp, sp, #12
 577              	.LCFI34:
 578              		.cfi_def_cfa_offset 16
 579 0004 00AF     		add	r7, sp, #0
 580              	.LCFI35:
 581              		.cfi_def_cfa_register 7
 582 0006 7860     		str	r0, [r7, #4]
 583 0008 3960     		str	r1, [r7]
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
ARM GAS  /tmp/ccCNpeZo.s 			page 16


 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       if (__b < __a)
 584              		.loc 3 235 15
 585 000a 3B68     		ldr	r3, [r7]
 586 000c 93ED007A 		vldr.32	s14, [r3]
 587 0010 7B68     		ldr	r3, [r7, #4]
 588 0012 D3ED007A 		vldr.32	s15, [r3]
 589              		.loc 3 235 7
 590 0016 B4EEE77A 		vcmpe.f32	s14, s15
 591 001a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 592 001e 01D5     		bpl	.L28
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 593              		.loc 3 236 9
 594 0020 3B68     		ldr	r3, [r7]
 595 0022 00E0     		b	.L26
 596              	.L28:
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __a;
 597              		.loc 3 237 14
 598 0024 7B68     		ldr	r3, [r7, #4]
 599              	.L26:
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 600              		.loc 3 238 5
 601 0026 1846     		mov	r0, r3
 602 0028 0C37     		adds	r7, r7, #12
 603              	.LCFI36:
 604              		.cfi_def_cfa_offset 4
 605 002a BD46     		mov	sp, r7
 606              	.LCFI37:
 607              		.cfi_def_cfa_register 13
 608              		@ sp needed
 609 002c 5DF8047B 		ldr	r7, [sp], #4
 610              	.LCFI38:
 611              		.cfi_restore 7
 612              		.cfi_def_cfa_offset 0
 613 0030 7047     		bx	lr
 614              		.cfi_endproc
 615              	.LFE4822:
 617              		.section	.text._ZNK24ThermistorCurrentLimiter17get_current_limitEf,"ax",%progbits
 618              		.align	1
 619              		.global	_ZNK24ThermistorCurrentLimiter17get_current_limitEf
 620              		.syntax unified
 621              		.thumb
 622              		.thumb_func
 623              		.fpu fpv4-sp-d16
 625              	_ZNK24ThermistorCurrentLimiter17get_current_limitEf:
 626              	.LFB4821:
  53:Src/thermistor.cpp **** 
  54:Src/thermistor.cpp **** float ThermistorCurrentLimiter::get_current_limit(float base_current_lim) const {
 627              		.loc 2 54 81
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 32
 630              		@ frame_needed = 1, uses_anonymous_args = 0
 631 0000 80B5     		push	{r7, lr}
 632              	.LCFI39:
 633              		.cfi_def_cfa_offset 8
 634              		.cfi_offset 7, -8
ARM GAS  /tmp/ccCNpeZo.s 			page 17


 635              		.cfi_offset 14, -4
 636 0002 88B0     		sub	sp, sp, #32
 637              	.LCFI40:
 638              		.cfi_def_cfa_offset 40
 639 0004 00AF     		add	r7, sp, #0
 640              	.LCFI41:
 641              		.cfi_def_cfa_register 7
 642 0006 7860     		str	r0, [r7, #4]
 643 0008 87ED000A 		vstr.32	s0, [r7]
  55:Src/thermistor.cpp ****     if (!enabled_) {
 644              		.loc 2 55 10
 645 000c 7B68     		ldr	r3, [r7, #4]
 646 000e DB6A     		ldr	r3, [r3, #44]
 647 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 648              		.loc 2 55 9
 649 0012 83F00103 		eor	r3, r3, #1
 650 0016 DBB2     		uxtb	r3, r3
 651              		.loc 2 55 5
 652 0018 002B     		cmp	r3, #0
 653 001a 01D0     		beq	.L30
  56:Src/thermistor.cpp ****         return base_current_lim;
 654              		.loc 2 56 16
 655 001c 3B68     		ldr	r3, [r7]	@ float
 656 001e 53E0     		b	.L33
 657              	.L30:
  57:Src/thermistor.cpp ****     }
  58:Src/thermistor.cpp **** 
  59:Src/thermistor.cpp ****     float aux_temp_margin = temp_limit_upper_ - aux_temperature_;
 658              		.loc 2 59 29
 659 0020 7B68     		ldr	r3, [r7, #4]
 660 0022 9B6A     		ldr	r3, [r3, #40]
 661 0024 93ED007A 		vldr.32	s14, [r3]
 662              		.loc 2 59 49
 663 0028 7B68     		ldr	r3, [r7, #4]
 664 002a D3ED077A 		vldr.32	s15, [r3, #28]
 665              		.loc 2 59 47
 666 002e 77EE677A 		vsub.f32	s15, s14, s15
 667              		.loc 2 59 11
 668 0032 C7ED057A 		vstr.32	s15, [r7, #20]
  60:Src/thermistor.cpp ****     float fet_temp_margin = temp_limit_upper_ - temperature_;
 669              		.loc 2 60 29
 670 0036 7B68     		ldr	r3, [r7, #4]
 671 0038 9B6A     		ldr	r3, [r3, #40]
 672 003a 93ED007A 		vldr.32	s14, [r3]
 673              		.loc 2 60 49
 674 003e 7B68     		ldr	r3, [r7, #4]
 675 0040 D3ED057A 		vldr.32	s15, [r3, #20]
 676              		.loc 2 60 47
 677 0044 77EE677A 		vsub.f32	s15, s14, s15
 678              		.loc 2 60 11
 679 0048 C7ED047A 		vstr.32	s15, [r7, #16]
  61:Src/thermistor.cpp ****     float temp_margin = std::min(aux_temp_margin, fet_temp_margin);
 680              		.loc 2 61 66
 681 004c 07F11002 		add	r2, r7, #16
 682 0050 07F11403 		add	r3, r7, #20
 683 0054 1146     		mov	r1, r2
 684 0056 1846     		mov	r0, r3
ARM GAS  /tmp/ccCNpeZo.s 			page 18


 685 0058 FFF7FEFF 		bl	_ZSt3minIfERKT_S2_S2_
 686 005c 0346     		mov	r3, r0
 687 005e 1B68     		ldr	r3, [r3]	@ float
 688 0060 FB61     		str	r3, [r7, #28]	@ float
  62:Src/thermistor.cpp ****     const float derating_range = temp_limit_upper_ - temp_limit_lower_;
 689              		.loc 2 62 34
 690 0062 7B68     		ldr	r3, [r7, #4]
 691 0064 9B6A     		ldr	r3, [r3, #40]
 692 0066 93ED007A 		vldr.32	s14, [r3]
 693              		.loc 2 62 54
 694 006a 7B68     		ldr	r3, [r7, #4]
 695 006c 5B6A     		ldr	r3, [r3, #36]
 696 006e D3ED007A 		vldr.32	s15, [r3]
 697              		.loc 2 62 17
 698 0072 77EE677A 		vsub.f32	s15, s14, s15
 699 0076 C7ED067A 		vstr.32	s15, [r7, #24]
  63:Src/thermistor.cpp ****     float thermal_current_lim = base_current_lim * (temp_margin / derating_range);
 700              		.loc 2 63 65
 701 007a D7ED076A 		vldr.32	s13, [r7, #28]
 702 007e D7ED067A 		vldr.32	s15, [r7, #24]
 703 0082 86EEA77A 		vdiv.f32	s14, s13, s15
 704              		.loc 2 63 50
 705 0086 D7ED007A 		vldr.32	s15, [r7]
 706 008a 67EE277A 		vmul.f32	s15, s14, s15
 707              		.loc 2 63 11
 708 008e C7ED037A 		vstr.32	s15, [r7, #12]
  64:Src/thermistor.cpp ****     if (!(thermal_current_lim >= 0.0f)) { // Funny polarity to also catch NaN
 709              		.loc 2 64 31
 710 0092 D7ED037A 		vldr.32	s15, [r7, #12]
 711 0096 F5EEC07A 		vcmpe.f32	s15, #0
 712 009a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 713 009e ACBF     		ite	ge
 714 00a0 0123     		movge	r3, #1
 715 00a2 0023     		movlt	r3, #0
 716 00a4 DBB2     		uxtb	r3, r3
 717              		.loc 2 64 9
 718 00a6 83F00103 		eor	r3, r3, #1
 719 00aa DBB2     		uxtb	r3, r3
 720              		.loc 2 64 5
 721 00ac 002B     		cmp	r3, #0
 722 00ae 02D0     		beq	.L32
  65:Src/thermistor.cpp ****         thermal_current_lim = 0.0f;
 723              		.loc 2 65 29
 724 00b0 4FF00003 		mov	r3, #0
 725 00b4 FB60     		str	r3, [r7, #12]	@ float
 726              	.L32:
  66:Src/thermistor.cpp ****     }
  67:Src/thermistor.cpp **** 
  68:Src/thermistor.cpp ****     return std::min(thermal_current_lim, base_current_lim);
 727              		.loc 2 68 58
 728 00b6 3A46     		mov	r2, r7
 729 00b8 07F10C03 		add	r3, r7, #12
 730 00bc 1146     		mov	r1, r2
 731 00be 1846     		mov	r0, r3
 732 00c0 FFF7FEFF 		bl	_ZSt3minIfERKT_S2_S2_
 733 00c4 0346     		mov	r3, r0
 734 00c6 1B68     		ldr	r3, [r3]	@ float
ARM GAS  /tmp/ccCNpeZo.s 			page 19


 735              	.L33:
  69:Src/thermistor.cpp **** }
 736              		.loc 2 69 1 discriminator 1
 737 00c8 07EE903A 		vmov	s15, r3
 738 00cc B0EE670A 		vmov.f32	s0, s15
 739 00d0 2037     		adds	r7, r7, #32
 740              	.LCFI42:
 741              		.cfi_def_cfa_offset 8
 742 00d2 BD46     		mov	sp, r7
 743              	.LCFI43:
 744              		.cfi_def_cfa_register 13
 745              		@ sp needed
 746 00d4 80BD     		pop	{r7, pc}
 747              		.cfi_endproc
 748              	.LFE4821:
 750              		.section	.text._ZN24ThermistorCurrentLimiterD2Ev,"axG",%progbits,_ZN24ThermistorCurrentLimiterD5Ev
 751              		.align	1
 752              		.weak	_ZN24ThermistorCurrentLimiterD2Ev
 753              		.syntax unified
 754              		.thumb
 755              		.thumb_func
 756              		.fpu fpv4-sp-d16
 758              	_ZN24ThermistorCurrentLimiterD2Ev:
 759              	.LFB4825:
 760              		.file 4 "Inc/thermistor.hpp"
   1:Inc/thermistor.hpp **** #ifndef __THERMISTOR_HPP
   2:Inc/thermistor.hpp **** #define __THERMISTOR_HPP
   3:Inc/thermistor.hpp **** 
   4:Inc/thermistor.hpp **** #include "main.h"
   5:Inc/thermistor.hpp **** #include "interfaces.hpp"
   6:Inc/thermistor.hpp **** #include "current_limiter.hpp"
   7:Inc/thermistor.hpp **** 
   8:Inc/thermistor.hpp **** #define THERMISTOR_CURRENT_LIMITER_MAX_TEMP 150.0f
   9:Inc/thermistor.hpp **** #define THERMISTOR_CURRENT_LIMITER_MIN_TEMP -40.0f
  10:Inc/thermistor.hpp **** 
  11:Inc/thermistor.hpp **** #define THERMISTOR_CURRENT_LIMITER_MAX_CURRENT 3.0f
  12:Inc/thermistor.hpp **** 
  13:Inc/thermistor.hpp **** class Axis;
  14:Inc/thermistor.hpp **** 
  15:Inc/thermistor.hpp **** 
  16:Inc/thermistor.hpp **** class ThermistorCurrentLimiter : public CurrentLimiter, public ODriveIntf::ThermistorCurrentLimiter
  17:Inc/thermistor.hpp **** public:
  18:Inc/thermistor.hpp ****     virtual ~ThermistorCurrentLimiter() = default;
 761              		.loc 4 18 13
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 8
 764              		@ frame_needed = 1, uses_anonymous_args = 0
 765 0000 80B5     		push	{r7, lr}
 766              	.LCFI44:
 767              		.cfi_def_cfa_offset 8
 768              		.cfi_offset 7, -8
 769              		.cfi_offset 14, -4
 770 0002 82B0     		sub	sp, sp, #8
 771              	.LCFI45:
 772              		.cfi_def_cfa_offset 16
 773 0004 00AF     		add	r7, sp, #0
 774              	.LCFI46:
ARM GAS  /tmp/ccCNpeZo.s 			page 20


 775              		.cfi_def_cfa_register 7
 776 0006 7860     		str	r0, [r7, #4]
 777              	.LBB5:
 778              		.loc 4 18 13
 779 0008 054A     		ldr	r2, .L36
 780 000a 7B68     		ldr	r3, [r7, #4]
 781 000c 1A60     		str	r2, [r3]
 782 000e 7B68     		ldr	r3, [r7, #4]
 783 0010 1846     		mov	r0, r3
 784 0012 FFF7FEFF 		bl	_ZN14CurrentLimiterD2Ev
 785              	.LBE5:
 786 0016 7B68     		ldr	r3, [r7, #4]
 787 0018 1846     		mov	r0, r3
 788 001a 0837     		adds	r7, r7, #8
 789              	.LCFI47:
 790              		.cfi_def_cfa_offset 8
 791 001c BD46     		mov	sp, r7
 792              	.LCFI48:
 793              		.cfi_def_cfa_register 13
 794              		@ sp needed
 795 001e 80BD     		pop	{r7, pc}
 796              	.L37:
 797              		.align	2
 798              	.L36:
 799 0020 08000000 		.word	_ZTV24ThermistorCurrentLimiter+8
 800              		.cfi_endproc
 801              	.LFE4825:
 803              		.weak	_ZN24ThermistorCurrentLimiterD1Ev
 804              		.thumb_set _ZN24ThermistorCurrentLimiterD1Ev,_ZN24ThermistorCurrentLimiterD2Ev
 805              		.section	.text._ZN24ThermistorCurrentLimiterD0Ev,"axG",%progbits,_ZN24ThermistorCurrentLimiterD5Ev
 806              		.align	1
 807              		.weak	_ZN24ThermistorCurrentLimiterD0Ev
 808              		.syntax unified
 809              		.thumb
 810              		.thumb_func
 811              		.fpu fpv4-sp-d16
 813              	_ZN24ThermistorCurrentLimiterD0Ev:
 814              	.LFB4827:
 815              		.loc 4 18 13
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 8
 818              		@ frame_needed = 1, uses_anonymous_args = 0
 819 0000 80B5     		push	{r7, lr}
 820              	.LCFI49:
 821              		.cfi_def_cfa_offset 8
 822              		.cfi_offset 7, -8
 823              		.cfi_offset 14, -4
 824 0002 82B0     		sub	sp, sp, #8
 825              	.LCFI50:
 826              		.cfi_def_cfa_offset 16
 827 0004 00AF     		add	r7, sp, #0
 828              	.LCFI51:
 829              		.cfi_def_cfa_register 7
 830 0006 7860     		str	r0, [r7, #4]
 831              		.loc 4 18 13
 832 0008 7868     		ldr	r0, [r7, #4]
 833 000a FFF7FEFF 		bl	_ZN24ThermistorCurrentLimiterD1Ev
ARM GAS  /tmp/ccCNpeZo.s 			page 21


 834 000e 7868     		ldr	r0, [r7, #4]
 835 0010 FFF7FEFF 		bl	_ZdlPv
 836 0014 7B68     		ldr	r3, [r7, #4]
 837 0016 1846     		mov	r0, r3
 838 0018 0837     		adds	r7, r7, #8
 839              	.LCFI52:
 840              		.cfi_def_cfa_offset 8
 841 001a BD46     		mov	sp, r7
 842              	.LCFI53:
 843              		.cfi_def_cfa_register 13
 844              		@ sp needed
 845 001c 80BD     		pop	{r7, pc}
 846              		.cfi_endproc
 847              	.LFE4827:
 849              		.section	.text._ZN31OnboardThermistorCurrentLimiterC2ERK26ThermistorHardwareConfig_tRNS_8Config_tE
 850              		.align	1
 851              		.global	_ZN31OnboardThermistorCurrentLimiterC2ERK26ThermistorHardwareConfig_tRNS_8Config_tE
 852              		.syntax unified
 853              		.thumb
 854              		.thumb_func
 855              		.fpu fpv4-sp-d16
 857              	_ZN31OnboardThermistorCurrentLimiterC2ERK26ThermistorHardwareConfig_tRNS_8Config_tE:
 858              	.LFB4828:
  70:Src/thermistor.cpp **** 
  71:Src/thermistor.cpp **** OnboardThermistorCurrentLimiter::OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& 
 859              		.loc 2 71 1
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 16
 862              		@ frame_needed = 1, uses_anonymous_args = 0
 863 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 864              	.LCFI54:
 865              		.cfi_def_cfa_offset 20
 866              		.cfi_offset 4, -20
 867              		.cfi_offset 5, -16
 868              		.cfi_offset 6, -12
 869              		.cfi_offset 7, -8
 870              		.cfi_offset 14, -4
 871 0002 89B0     		sub	sp, sp, #36
 872              	.LCFI55:
 873              		.cfi_def_cfa_offset 56
 874 0004 04AF     		add	r7, sp, #16
 875              	.LCFI56:
 876              		.cfi_def_cfa 7, 40
 877 0006 F860     		str	r0, [r7, #12]
 878 0008 B960     		str	r1, [r7, #8]
 879 000a 7A60     		str	r2, [r7, #4]
 880              	.LBB6:
  72:Src/thermistor.cpp ****     ThermistorCurrentLimiter(hw_config.adc_ch,
  73:Src/thermistor.cpp ****                              hw_config.coeffs,
  74:Src/thermistor.cpp ****                              hw_config.aux_coefficients,
  75:Src/thermistor.cpp ****                              hw_config.num_coeffs,
  76:Src/thermistor.cpp ****                              config.temp_limit_lower,
  77:Src/thermistor.cpp ****                              config.temp_limit_upper,
  78:Src/thermistor.cpp ****                              config.enabled),
  79:Src/thermistor.cpp ****     config_(config)
 881              		.loc 2 79 19
 882 000c FC68     		ldr	r4, [r7, #12]
ARM GAS  /tmp/ccCNpeZo.s 			page 22


  72:Src/thermistor.cpp ****     ThermistorCurrentLimiter(hw_config.adc_ch,
 883              		.loc 2 72 40
 884 000e BB68     		ldr	r3, [r7, #8]
 885 0010 DB68     		ldr	r3, [r3, #12]
 886              		.loc 2 79 19
 887 0012 9DB2     		uxth	r5, r3
  73:Src/thermistor.cpp ****                              hw_config.aux_coefficients,
 888              		.loc 2 73 40
 889 0014 BB68     		ldr	r3, [r7, #8]
 890 0016 1E68     		ldr	r6, [r3]
  74:Src/thermistor.cpp ****                              hw_config.num_coeffs,
 891              		.loc 2 74 40
 892 0018 BB68     		ldr	r3, [r7, #8]
 893 001a 5B68     		ldr	r3, [r3, #4]
 894 001c 3B60     		str	r3, [r7]
  75:Src/thermistor.cpp ****                              config.temp_limit_lower,
 895              		.loc 2 75 40
 896 001e BB68     		ldr	r3, [r7, #8]
 897 0020 9B68     		ldr	r3, [r3, #8]
  76:Src/thermistor.cpp ****                              config.temp_limit_upper,
 898              		.loc 2 76 37
 899 0022 7A68     		ldr	r2, [r7, #4]
  77:Src/thermistor.cpp ****                              config.enabled),
 900              		.loc 2 77 37
 901 0024 7968     		ldr	r1, [r7, #4]
 902 0026 0431     		adds	r1, r1, #4
  78:Src/thermistor.cpp ****     config_(config)
 903              		.loc 2 78 37
 904 0028 7868     		ldr	r0, [r7, #4]
 905 002a 0830     		adds	r0, r0, #8
 906              		.loc 2 79 19
 907 002c 0390     		str	r0, [sp, #12]
 908 002e 0291     		str	r1, [sp, #8]
 909 0030 0192     		str	r2, [sp, #4]
 910 0032 0093     		str	r3, [sp]
 911 0034 3B68     		ldr	r3, [r7]
 912 0036 3246     		mov	r2, r6
 913 0038 2946     		mov	r1, r5
 914 003a 2046     		mov	r0, r4
 915 003c FFF7FEFF 		bl	_ZN24ThermistorCurrentLimiterC2EtPKfS1_jRS0_S2_RKb
 916 0040 054A     		ldr	r2, .L42
 917 0042 FB68     		ldr	r3, [r7, #12]
 918 0044 1A60     		str	r2, [r3]
 919 0046 FB68     		ldr	r3, [r7, #12]
 920 0048 7A68     		ldr	r2, [r7, #4]
 921 004a 9A63     		str	r2, [r3, #56]
 922              	.LBE6:
  80:Src/thermistor.cpp **** {
  81:Src/thermistor.cpp **** }
 923              		.loc 2 81 1
 924 004c FB68     		ldr	r3, [r7, #12]
 925 004e 1846     		mov	r0, r3
 926 0050 1437     		adds	r7, r7, #20
 927              	.LCFI57:
 928              		.cfi_def_cfa_offset 20
 929 0052 BD46     		mov	sp, r7
 930              	.LCFI58:
ARM GAS  /tmp/ccCNpeZo.s 			page 23


 931              		.cfi_def_cfa_register 13
 932              		@ sp needed
 933 0054 F0BD     		pop	{r4, r5, r6, r7, pc}
 934              	.L43:
 935 0056 00BF     		.align	2
 936              	.L42:
 937 0058 08000000 		.word	_ZTV31OnboardThermistorCurrentLimiter+8
 938              		.cfi_endproc
 939              	.LFE4828:
 941              		.global	_ZN31OnboardThermistorCurrentLimiterC1ERK26ThermistorHardwareConfig_tRNS_8Config_tE
 942              		.thumb_set _ZN31OnboardThermistorCurrentLimiterC1ERK26ThermistorHardwareConfig_tRNS_8Config_tE,_ZN
 943              		.section	.text._ZN32OffboardThermistorCurrentLimiterC2ERNS_8Config_tE,"ax",%progbits
 944              		.align	1
 945              		.global	_ZN32OffboardThermistorCurrentLimiterC2ERNS_8Config_tE
 946              		.syntax unified
 947              		.thumb
 948              		.thumb_func
 949              		.fpu fpv4-sp-d16
 951              	_ZN32OffboardThermistorCurrentLimiterC2ERNS_8Config_tE:
 952              	.LFB4831:
  82:Src/thermistor.cpp **** 
  83:Src/thermistor.cpp **** OffboardThermistorCurrentLimiter::OffboardThermistorCurrentLimiter(Config_t& config) :
 953              		.loc 2 83 1
 954              		.cfi_startproc
 955              		@ args = 0, pretend = 0, frame = 8
 956              		@ frame_needed = 1, uses_anonymous_args = 0
 957 0000 B0B5     		push	{r4, r5, r7, lr}
 958              	.LCFI59:
 959              		.cfi_def_cfa_offset 16
 960              		.cfi_offset 4, -16
 961              		.cfi_offset 5, -12
 962              		.cfi_offset 7, -8
 963              		.cfi_offset 14, -4
 964 0002 86B0     		sub	sp, sp, #24
 965              	.LCFI60:
 966              		.cfi_def_cfa_offset 40
 967 0004 04AF     		add	r7, sp, #16
 968              	.LCFI61:
 969              		.cfi_def_cfa 7, 24
 970 0006 7860     		str	r0, [r7, #4]
 971 0008 3960     		str	r1, [r7]
 972              	.LBB7:
  84:Src/thermistor.cpp ****     ThermistorCurrentLimiter(UINT16_MAX,
  85:Src/thermistor.cpp ****                              &config.thermistor_poly_coeffs[0],
  86:Src/thermistor.cpp ****                              &config.thermistor_poly_coeffs2[0],
  87:Src/thermistor.cpp ****                              num_coeffs_,
  88:Src/thermistor.cpp ****                              config.temp_limit_lower,
  89:Src/thermistor.cpp ****                              config.temp_limit_upper,
  90:Src/thermistor.cpp ****                              config.enabled),
  91:Src/thermistor.cpp ****     config_(config)
 973              		.loc 2 91 19
 974 000a 7868     		ldr	r0, [r7, #4]
  85:Src/thermistor.cpp ****                              &config.thermistor_poly_coeffs2[0],
 975              		.loc 2 85 30
 976 000c 3C68     		ldr	r4, [r7]
  86:Src/thermistor.cpp ****                              num_coeffs_,
 977              		.loc 2 86 30
ARM GAS  /tmp/ccCNpeZo.s 			page 24


 978 000e 3B68     		ldr	r3, [r7]
 979 0010 03F11005 		add	r5, r3, #16
  88:Src/thermistor.cpp ****                              config.temp_limit_upper,
 980              		.loc 2 88 37
 981 0014 3B68     		ldr	r3, [r7]
 982 0016 2433     		adds	r3, r3, #36
  89:Src/thermistor.cpp ****                              config.enabled),
 983              		.loc 2 89 37
 984 0018 3A68     		ldr	r2, [r7]
 985 001a 2832     		adds	r2, r2, #40
  90:Src/thermistor.cpp ****     config_(config)
 986              		.loc 2 90 37
 987 001c 3968     		ldr	r1, [r7]
 988 001e 2C31     		adds	r1, r1, #44
 989              		.loc 2 91 19
 990 0020 0391     		str	r1, [sp, #12]
 991 0022 0292     		str	r2, [sp, #8]
 992 0024 0193     		str	r3, [sp, #4]
 993 0026 0423     		movs	r3, #4
 994 0028 0093     		str	r3, [sp]
 995 002a 2B46     		mov	r3, r5
 996 002c 2246     		mov	r2, r4
 997 002e 4FF6FF71 		movw	r1, #65535
 998 0032 FFF7FEFF 		bl	_ZN24ThermistorCurrentLimiterC2EtPKfS1_jRS0_S2_RKb
 999 0036 074A     		ldr	r2, .L46
 1000 0038 7B68     		ldr	r3, [r7, #4]
 1001 003a 1A60     		str	r2, [r3]
 1002 003c 7B68     		ldr	r3, [r7, #4]
 1003 003e 3A68     		ldr	r2, [r7]
 1004 0040 9A63     		str	r2, [r3, #56]
  92:Src/thermistor.cpp **** {
  93:Src/thermistor.cpp ****     decode_pin();
 1005              		.loc 2 93 15
 1006 0042 7868     		ldr	r0, [r7, #4]
 1007 0044 FFF7FEFF 		bl	_ZN32OffboardThermistorCurrentLimiter10decode_pinEv
 1008              	.LBE7:
  94:Src/thermistor.cpp **** }
 1009              		.loc 2 94 1
 1010 0048 7B68     		ldr	r3, [r7, #4]
 1011 004a 1846     		mov	r0, r3
 1012 004c 0837     		adds	r7, r7, #8
 1013              	.LCFI62:
 1014              		.cfi_def_cfa_offset 16
 1015 004e BD46     		mov	sp, r7
 1016              	.LCFI63:
 1017              		.cfi_def_cfa_register 13
 1018              		@ sp needed
 1019 0050 B0BD     		pop	{r4, r5, r7, pc}
 1020              	.L47:
 1021 0052 00BF     		.align	2
 1022              	.L46:
 1023 0054 08000000 		.word	_ZTV32OffboardThermistorCurrentLimiter+8
 1024              		.cfi_endproc
 1025              	.LFE4831:
 1027              		.global	_ZN32OffboardThermistorCurrentLimiterC1ERNS_8Config_tE
 1028              		.thumb_set _ZN32OffboardThermistorCurrentLimiterC1ERNS_8Config_tE,_ZN32OffboardThermistorCurrentLi
 1029              		.section	.text._ZN32OffboardThermistorCurrentLimiter10decode_pinEv,"ax",%progbits
ARM GAS  /tmp/ccCNpeZo.s 			page 25


 1030              		.align	1
 1031              		.global	_ZN32OffboardThermistorCurrentLimiter10decode_pinEv
 1032              		.syntax unified
 1033              		.thumb
 1034              		.thumb_func
 1035              		.fpu fpv4-sp-d16
 1037              	_ZN32OffboardThermistorCurrentLimiter10decode_pinEv:
 1038              	.LFB4833:
  95:Src/thermistor.cpp **** 
  96:Src/thermistor.cpp **** void OffboardThermistorCurrentLimiter::decode_pin() {
 1039              		.loc 2 96 53
 1040              		.cfi_startproc
 1041              		@ args = 0, pretend = 0, frame = 8
 1042              		@ frame_needed = 1, uses_anonymous_args = 0
 1043              		@ link register save eliminated.
 1044 0000 80B4     		push	{r7}
 1045              	.LCFI64:
 1046              		.cfi_def_cfa_offset 4
 1047              		.cfi_offset 7, -4
 1048 0002 83B0     		sub	sp, sp, #12
 1049              	.LCFI65:
 1050              		.cfi_def_cfa_offset 16
 1051 0004 00AF     		add	r7, sp, #0
 1052              	.LCFI66:
 1053              		.cfi_def_cfa_register 7
 1054 0006 7860     		str	r0, [r7, #4]
  97:Src/thermistor.cpp **** 
  98:Src/thermistor.cpp **** }
 1055              		.loc 2 98 1
 1056 0008 00BF     		nop
 1057 000a 0C37     		adds	r7, r7, #12
 1058              	.LCFI67:
 1059              		.cfi_def_cfa_offset 4
 1060 000c BD46     		mov	sp, r7
 1061              	.LCFI68:
 1062              		.cfi_def_cfa_register 13
 1063              		@ sp needed
 1064 000e 5DF8047B 		ldr	r7, [sp], #4
 1065              	.LCFI69:
 1066              		.cfi_restore 7
 1067              		.cfi_def_cfa_offset 0
 1068 0012 7047     		bx	lr
 1069              		.cfi_endproc
 1070              	.LFE4833:
 1072              		.weak	_ZTV32OffboardThermistorCurrentLimiter
 1073              		.section	.rodata._ZTV32OffboardThermistorCurrentLimiter,"aG",%progbits,_ZTV32OffboardThermistorCur
 1074              		.align	2
 1077              	_ZTV32OffboardThermistorCurrentLimiter:
 1078 0000 00000000 		.word	0
 1079 0004 00000000 		.word	0
 1080 0008 00000000 		.word	_ZN32OffboardThermistorCurrentLimiterD1Ev
 1081 000c 00000000 		.word	_ZN32OffboardThermistorCurrentLimiterD0Ev
 1082 0010 00000000 		.word	_ZNK24ThermistorCurrentLimiter17get_current_limitEf
 1083              		.section	.text._ZN32OffboardThermistorCurrentLimiterD2Ev,"axG",%progbits,_ZN32OffboardThermistorCu
 1084              		.align	1
 1085              		.weak	_ZN32OffboardThermistorCurrentLimiterD2Ev
 1086              		.syntax unified
ARM GAS  /tmp/ccCNpeZo.s 			page 26


 1087              		.thumb
 1088              		.thumb_func
 1089              		.fpu fpv4-sp-d16
 1091              	_ZN32OffboardThermistorCurrentLimiterD2Ev:
 1092              	.LFB4985:
  19:Inc/thermistor.hpp **** 
  20:Inc/thermistor.hpp ****     ThermistorCurrentLimiter(uint16_t adc_channel,
  21:Inc/thermistor.hpp ****                              const float* const coefficients,
  22:Inc/thermistor.hpp ****                              const float* const aux_coefficients,
  23:Inc/thermistor.hpp ****                              size_t num_coeffs,
  24:Inc/thermistor.hpp ****                              const float& temp_limit_lower,
  25:Inc/thermistor.hpp ****                              const float& temp_limit_upper,
  26:Inc/thermistor.hpp ****                              const bool& enabled);
  27:Inc/thermistor.hpp **** 
  28:Inc/thermistor.hpp ****     void update();
  29:Inc/thermistor.hpp ****     bool do_checks();
  30:Inc/thermistor.hpp ****     float get_current_limit(float base_current_lim) const override;
  31:Inc/thermistor.hpp **** 
  32:Inc/thermistor.hpp ****     uint16_t adc_channel_;
  33:Inc/thermistor.hpp ****     const float* const coefficients_;
  34:Inc/thermistor.hpp ****     const float* const aux_coefficients_;
  35:Inc/thermistor.hpp ****     const size_t num_coeffs_;
  36:Inc/thermistor.hpp ****     float temperature_;
  37:Inc/thermistor.hpp ****     int32_t temperature_int_;
  38:Inc/thermistor.hpp ****     float aux_temperature_;
  39:Inc/thermistor.hpp ****     int32_t aux_temperature_int_;
  40:Inc/thermistor.hpp ****     const float& temp_limit_lower_;
  41:Inc/thermistor.hpp ****     const float& temp_limit_upper_;
  42:Inc/thermistor.hpp ****     const bool& enabled_;
  43:Inc/thermistor.hpp ****     Error error_;
  44:Inc/thermistor.hpp ****     Axis* axis_ = nullptr; // set by Axis constructor
  45:Inc/thermistor.hpp **** };
  46:Inc/thermistor.hpp **** 
  47:Inc/thermistor.hpp **** class OnboardThermistorCurrentLimiter : public ThermistorCurrentLimiter, public ODriveIntf::Onboard
  48:Inc/thermistor.hpp **** public:
  49:Inc/thermistor.hpp ****     struct Config_t {
  50:Inc/thermistor.hpp ****         float temp_limit_lower = 100;
  51:Inc/thermistor.hpp ****         float temp_limit_upper = 120;
  52:Inc/thermistor.hpp ****         bool enabled = true;
  53:Inc/thermistor.hpp ****     };
  54:Inc/thermistor.hpp **** 
  55:Inc/thermistor.hpp ****     virtual ~OnboardThermistorCurrentLimiter() = default;
  56:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
  57:Inc/thermistor.hpp **** 
  58:Inc/thermistor.hpp ****     Config_t& config_;
  59:Inc/thermistor.hpp **** };
  60:Inc/thermistor.hpp **** 
  61:Inc/thermistor.hpp **** class OffboardThermistorCurrentLimiter : public ThermistorCurrentLimiter, public ODriveIntf::Offboa
  62:Inc/thermistor.hpp **** public:
  63:Inc/thermistor.hpp ****     static const size_t num_coeffs_ = 4;
  64:Inc/thermistor.hpp **** 
  65:Inc/thermistor.hpp ****     struct Config_t {
  66:Inc/thermistor.hpp ****         float thermistor_poly_coeffs[num_coeffs_];
  67:Inc/thermistor.hpp ****         float thermistor_poly_coeffs2[num_coeffs_];
  68:Inc/thermistor.hpp ****         uint16_t gpio_pin = 4;
  69:Inc/thermistor.hpp ****         float temp_limit_lower = 60;
  70:Inc/thermistor.hpp ****         float temp_limit_upper = 80;
ARM GAS  /tmp/ccCNpeZo.s 			page 27


  71:Inc/thermistor.hpp ****         bool enabled = true;
  72:Inc/thermistor.hpp **** 
  73:Inc/thermistor.hpp ****         // custom setters
  74:Inc/thermistor.hpp ****         OffboardThermistorCurrentLimiter* parent;
  75:Inc/thermistor.hpp ****         void set_gpio_pin(uint16_t value) { gpio_pin = value; parent->decode_pin(); }
  76:Inc/thermistor.hpp ****     };
  77:Inc/thermistor.hpp **** 
  78:Inc/thermistor.hpp ****     virtual ~OffboardThermistorCurrentLimiter() = default;
 1093              		.loc 4 78 13
 1094              		.cfi_startproc
 1095              		@ args = 0, pretend = 0, frame = 8
 1096              		@ frame_needed = 1, uses_anonymous_args = 0
 1097 0000 80B5     		push	{r7, lr}
 1098              	.LCFI70:
 1099              		.cfi_def_cfa_offset 8
 1100              		.cfi_offset 7, -8
 1101              		.cfi_offset 14, -4
 1102 0002 82B0     		sub	sp, sp, #8
 1103              	.LCFI71:
 1104              		.cfi_def_cfa_offset 16
 1105 0004 00AF     		add	r7, sp, #0
 1106              	.LCFI72:
 1107              		.cfi_def_cfa_register 7
 1108 0006 7860     		str	r0, [r7, #4]
 1109              	.LBB8:
 1110              		.loc 4 78 13
 1111 0008 054A     		ldr	r2, .L51
 1112 000a 7B68     		ldr	r3, [r7, #4]
 1113 000c 1A60     		str	r2, [r3]
 1114 000e 7B68     		ldr	r3, [r7, #4]
 1115 0010 1846     		mov	r0, r3
 1116 0012 FFF7FEFF 		bl	_ZN24ThermistorCurrentLimiterD2Ev
 1117              	.LBE8:
 1118 0016 7B68     		ldr	r3, [r7, #4]
 1119 0018 1846     		mov	r0, r3
 1120 001a 0837     		adds	r7, r7, #8
 1121              	.LCFI73:
 1122              		.cfi_def_cfa_offset 8
 1123 001c BD46     		mov	sp, r7
 1124              	.LCFI74:
 1125              		.cfi_def_cfa_register 13
 1126              		@ sp needed
 1127 001e 80BD     		pop	{r7, pc}
 1128              	.L52:
 1129              		.align	2
 1130              	.L51:
 1131 0020 08000000 		.word	_ZTV32OffboardThermistorCurrentLimiter+8
 1132              		.cfi_endproc
 1133              	.LFE4985:
 1135              		.weak	_ZN32OffboardThermistorCurrentLimiterD1Ev
 1136              		.thumb_set _ZN32OffboardThermistorCurrentLimiterD1Ev,_ZN32OffboardThermistorCurrentLimiterD2Ev
 1137              		.section	.text._ZN32OffboardThermistorCurrentLimiterD0Ev,"axG",%progbits,_ZN32OffboardThermistorCu
 1138              		.align	1
 1139              		.weak	_ZN32OffboardThermistorCurrentLimiterD0Ev
 1140              		.syntax unified
 1141              		.thumb
 1142              		.thumb_func
ARM GAS  /tmp/ccCNpeZo.s 			page 28


 1143              		.fpu fpv4-sp-d16
 1145              	_ZN32OffboardThermistorCurrentLimiterD0Ev:
 1146              	.LFB4987:
 1147              		.loc 4 78 13
 1148              		.cfi_startproc
 1149              		@ args = 0, pretend = 0, frame = 8
 1150              		@ frame_needed = 1, uses_anonymous_args = 0
 1151 0000 80B5     		push	{r7, lr}
 1152              	.LCFI75:
 1153              		.cfi_def_cfa_offset 8
 1154              		.cfi_offset 7, -8
 1155              		.cfi_offset 14, -4
 1156 0002 82B0     		sub	sp, sp, #8
 1157              	.LCFI76:
 1158              		.cfi_def_cfa_offset 16
 1159 0004 00AF     		add	r7, sp, #0
 1160              	.LCFI77:
 1161              		.cfi_def_cfa_register 7
 1162 0006 7860     		str	r0, [r7, #4]
 1163              		.loc 4 78 13
 1164 0008 7868     		ldr	r0, [r7, #4]
 1165 000a FFF7FEFF 		bl	_ZN32OffboardThermistorCurrentLimiterD1Ev
 1166 000e 7868     		ldr	r0, [r7, #4]
 1167 0010 FFF7FEFF 		bl	_ZdlPv
 1168 0014 7B68     		ldr	r3, [r7, #4]
 1169 0016 1846     		mov	r0, r3
 1170 0018 0837     		adds	r7, r7, #8
 1171              	.LCFI78:
 1172              		.cfi_def_cfa_offset 8
 1173 001a BD46     		mov	sp, r7
 1174              	.LCFI79:
 1175              		.cfi_def_cfa_register 13
 1176              		@ sp needed
 1177 001c 80BD     		pop	{r7, pc}
 1178              		.cfi_endproc
 1179              	.LFE4987:
 1181              		.weak	_ZTV31OnboardThermistorCurrentLimiter
 1182              		.section	.rodata._ZTV31OnboardThermistorCurrentLimiter,"aG",%progbits,_ZTV31OnboardThermistorCurre
 1183              		.align	2
 1186              	_ZTV31OnboardThermistorCurrentLimiter:
 1187 0000 00000000 		.word	0
 1188 0004 00000000 		.word	0
 1189 0008 00000000 		.word	_ZN31OnboardThermistorCurrentLimiterD1Ev
 1190 000c 00000000 		.word	_ZN31OnboardThermistorCurrentLimiterD0Ev
 1191 0010 00000000 		.word	_ZNK24ThermistorCurrentLimiter17get_current_limitEf
 1192              		.section	.text._ZN31OnboardThermistorCurrentLimiterD2Ev,"axG",%progbits,_ZN31OnboardThermistorCurr
 1193              		.align	1
 1194              		.weak	_ZN31OnboardThermistorCurrentLimiterD2Ev
 1195              		.syntax unified
 1196              		.thumb
 1197              		.thumb_func
 1198              		.fpu fpv4-sp-d16
 1200              	_ZN31OnboardThermistorCurrentLimiterD2Ev:
 1201              	.LFB4989:
  55:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
 1202              		.loc 4 55 13
 1203              		.cfi_startproc
ARM GAS  /tmp/ccCNpeZo.s 			page 29


 1204              		@ args = 0, pretend = 0, frame = 8
 1205              		@ frame_needed = 1, uses_anonymous_args = 0
 1206 0000 80B5     		push	{r7, lr}
 1207              	.LCFI80:
 1208              		.cfi_def_cfa_offset 8
 1209              		.cfi_offset 7, -8
 1210              		.cfi_offset 14, -4
 1211 0002 82B0     		sub	sp, sp, #8
 1212              	.LCFI81:
 1213              		.cfi_def_cfa_offset 16
 1214 0004 00AF     		add	r7, sp, #0
 1215              	.LCFI82:
 1216              		.cfi_def_cfa_register 7
 1217 0006 7860     		str	r0, [r7, #4]
 1218              	.LBB9:
  55:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
 1219              		.loc 4 55 13
 1220 0008 054A     		ldr	r2, .L57
 1221 000a 7B68     		ldr	r3, [r7, #4]
 1222 000c 1A60     		str	r2, [r3]
 1223 000e 7B68     		ldr	r3, [r7, #4]
 1224 0010 1846     		mov	r0, r3
 1225 0012 FFF7FEFF 		bl	_ZN24ThermistorCurrentLimiterD2Ev
 1226              	.LBE9:
 1227 0016 7B68     		ldr	r3, [r7, #4]
 1228 0018 1846     		mov	r0, r3
 1229 001a 0837     		adds	r7, r7, #8
 1230              	.LCFI83:
 1231              		.cfi_def_cfa_offset 8
 1232 001c BD46     		mov	sp, r7
 1233              	.LCFI84:
 1234              		.cfi_def_cfa_register 13
 1235              		@ sp needed
 1236 001e 80BD     		pop	{r7, pc}
 1237              	.L58:
 1238              		.align	2
 1239              	.L57:
 1240 0020 08000000 		.word	_ZTV31OnboardThermistorCurrentLimiter+8
 1241              		.cfi_endproc
 1242              	.LFE4989:
 1244              		.weak	_ZN31OnboardThermistorCurrentLimiterD1Ev
 1245              		.thumb_set _ZN31OnboardThermistorCurrentLimiterD1Ev,_ZN31OnboardThermistorCurrentLimiterD2Ev
 1246              		.section	.text._ZN31OnboardThermistorCurrentLimiterD0Ev,"axG",%progbits,_ZN31OnboardThermistorCurr
 1247              		.align	1
 1248              		.weak	_ZN31OnboardThermistorCurrentLimiterD0Ev
 1249              		.syntax unified
 1250              		.thumb
 1251              		.thumb_func
 1252              		.fpu fpv4-sp-d16
 1254              	_ZN31OnboardThermistorCurrentLimiterD0Ev:
 1255              	.LFB4991:
  55:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
 1256              		.loc 4 55 13
 1257              		.cfi_startproc
 1258              		@ args = 0, pretend = 0, frame = 8
 1259              		@ frame_needed = 1, uses_anonymous_args = 0
 1260 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccCNpeZo.s 			page 30


 1261              	.LCFI85:
 1262              		.cfi_def_cfa_offset 8
 1263              		.cfi_offset 7, -8
 1264              		.cfi_offset 14, -4
 1265 0002 82B0     		sub	sp, sp, #8
 1266              	.LCFI86:
 1267              		.cfi_def_cfa_offset 16
 1268 0004 00AF     		add	r7, sp, #0
 1269              	.LCFI87:
 1270              		.cfi_def_cfa_register 7
 1271 0006 7860     		str	r0, [r7, #4]
  55:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
 1272              		.loc 4 55 13
 1273 0008 7868     		ldr	r0, [r7, #4]
 1274 000a FFF7FEFF 		bl	_ZN31OnboardThermistorCurrentLimiterD1Ev
 1275 000e 7868     		ldr	r0, [r7, #4]
 1276 0010 FFF7FEFF 		bl	_ZdlPv
 1277 0014 7B68     		ldr	r3, [r7, #4]
 1278 0016 1846     		mov	r0, r3
 1279 0018 0837     		adds	r7, r7, #8
 1280              	.LCFI88:
 1281              		.cfi_def_cfa_offset 8
 1282 001a BD46     		mov	sp, r7
 1283              	.LCFI89:
 1284              		.cfi_def_cfa_register 13
 1285              		@ sp needed
 1286 001c 80BD     		pop	{r7, pc}
 1287              		.cfi_endproc
 1288              	.LFE4991:
 1290              		.global	_ZTV24ThermistorCurrentLimiter
 1291              		.section	.rodata._ZTV24ThermistorCurrentLimiter,"a"
 1292              		.align	2
 1295              	_ZTV24ThermistorCurrentLimiter:
 1296 0000 00000000 		.word	0
 1297 0004 00000000 		.word	0
 1298 0008 00000000 		.word	_ZN24ThermistorCurrentLimiterD1Ev
 1299 000c 00000000 		.word	_ZN24ThermistorCurrentLimiterD0Ev
 1300 0010 00000000 		.word	_ZNK24ThermistorCurrentLimiter17get_current_limitEf
 1301              		.weak	_ZTV14CurrentLimiter
 1302              		.section	.rodata._ZTV14CurrentLimiter,"aG",%progbits,_ZTV14CurrentLimiter,comdat
 1303              		.align	2
 1306              	_ZTV14CurrentLimiter:
 1307 0000 00000000 		.word	0
 1308 0004 00000000 		.word	0
 1309 0008 00000000 		.word	0
 1310 000c 00000000 		.word	0
 1311 0010 00000000 		.word	__cxa_pure_virtual
 1312              		.text
 1313              	.Letext0:
 1314              		.file 5 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_type
 1315              		.file 6 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 1316              		.file 7 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdint.h"
 1317              		.file 8 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 1318              		.file 9 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g4xx.h"
 1319              		.file 10 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/lib/gcc/arm-none-eabi/10.2.1/include/stdde
 1320              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 1321              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
ARM GAS  /tmp/ccCNpeZo.s 			page 31


 1322              		.file 13 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_tim.h"
 1323              		.file 14 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 1324              		.file 15 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 1325              		.file 16 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 1326              		.file 17 "Inc/mc_type.h"
 1327              		.file 18 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath"
 1328              		.file 19 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-
 1329              		.file 20 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/type_trai
 1330              		.file 21 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/debug/deb
 1331              		.file 22 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_
 1332              		.file 23 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/exce
 1333              		.file 24 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/enab
 1334              		.file 25 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional"
 1335              		.file 26 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/tr1/speci
 1336              		.file 27 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant"
 1337              		.file 28 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 1338              		.file 29 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_
 1339              		.file 30 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdlib"
 1340              		.file 31 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/algo
 1341              		.file 32 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/functiona
 1342              		.file 33 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array"
 1343              		.file 34 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 1344              		.file 35 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/refw
 1345              		.file 36 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdint"
 1346              		.file 37 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pars
 1347              		.file 38 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pred
 1348              		.file 39 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/math.h"
 1349              		.file 40 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdlib.h"
 1350              		.file 41 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/math.h"
 1351              		.file 42 "Inc/main.h"
 1352              		.file 43 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1353              		.file 44 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 1354              		.file 45 "Inc/interfaces.hpp"
 1355              		.file 46 "Inc/task_timer.hpp"
 1356              		.file 47 "Inc/component.hpp"
 1357              		.file 48 "Inc/utils.hpp"
 1358              		.file 49 "Inc/axis.hpp"
 1359              		.file 50 "Inc/motor.hpp"
 1360              		.file 51 "<built-in>"
 1361              		.file 52 "Inc/low_level.h"
ARM GAS  /tmp/ccCNpeZo.s 			page 32


DEFINED SYMBOLS
                            *ABS*:0000000000000000 thermistor.cpp
     /tmp/ccCNpeZo.s:18     .rodata._ZL16OFFSET_TAB_CCMRx:0000000000000000 $d
     /tmp/ccCNpeZo.s:21     .rodata._ZL16OFFSET_TAB_CCMRx:0000000000000000 _ZL16OFFSET_TAB_CCMRx
     /tmp/ccCNpeZo.s:24     .rodata._ZL14SHIFT_TAB_OCxx:0000000000000000 $d
     /tmp/ccCNpeZo.s:27     .rodata._ZL14SHIFT_TAB_OCxx:0000000000000000 _ZL14SHIFT_TAB_OCxx
     /tmp/ccCNpeZo.s:30     .rodata._ZL14SHIFT_TAB_ICxx:0000000000000000 $d
     /tmp/ccCNpeZo.s:33     .rodata._ZL14SHIFT_TAB_ICxx:0000000000000000 _ZL14SHIFT_TAB_ICxx
     /tmp/ccCNpeZo.s:36     .rodata._ZL14SHIFT_TAB_CCxP:0000000000000000 $d
     /tmp/ccCNpeZo.s:39     .rodata._ZL14SHIFT_TAB_CCxP:0000000000000000 _ZL14SHIFT_TAB_CCxP
     /tmp/ccCNpeZo.s:42     .rodata._ZL14SHIFT_TAB_OISx:0000000000000000 $d
     /tmp/ccCNpeZo.s:45     .rodata._ZL14SHIFT_TAB_OISx:0000000000000000 _ZL14SHIFT_TAB_OISx
     /tmp/ccCNpeZo.s:48     .rodata._ZL19USART_PRESCALER_TAB:0000000000000000 $d
     /tmp/ccCNpeZo.s:51     .rodata._ZL19USART_PRESCALER_TAB:0000000000000000 _ZL19USART_PRESCALER_TAB
     /tmp/ccCNpeZo.s:65     .rodata._ZL18CHANNEL_OFFSET_TAB:0000000000000000 $d
     /tmp/ccCNpeZo.s:68     .rodata._ZL18CHANNEL_OFFSET_TAB:0000000000000000 _ZL18CHANNEL_OFFSET_TAB
     /tmp/ccCNpeZo.s:71     .rodata._ZL12one_by_sqrt3:0000000000000000 $d
     /tmp/ccCNpeZo.s:74     .rodata._ZL12one_by_sqrt3:0000000000000000 _ZL12one_by_sqrt3
     /tmp/ccCNpeZo.s:77     .rodata._ZL12two_by_sqrt3:0000000000000000 $d
     /tmp/ccCNpeZo.s:80     .rodata._ZL12two_by_sqrt3:0000000000000000 _ZL12two_by_sqrt3
     /tmp/ccCNpeZo.s:83     .rodata._ZL10sqrt3_by_2:0000000000000000 $d
     /tmp/ccCNpeZo.s:86     .rodata._ZL10sqrt3_by_2:0000000000000000 _ZL10sqrt3_by_2
     /tmp/ccCNpeZo.s:89     .text._ZN14CurrentLimiterC2Ev:0000000000000000 $t
     /tmp/ccCNpeZo.s:97     .text._ZN14CurrentLimiterC2Ev:0000000000000000 _ZN14CurrentLimiterC2Ev
     /tmp/ccCNpeZo.s:139    .text._ZN14CurrentLimiterC2Ev:000000000000001c $d
     /tmp/ccCNpeZo.s:1306   .rodata._ZTV14CurrentLimiter:0000000000000000 _ZTV14CurrentLimiter
     /tmp/ccCNpeZo.s:97     .text._ZN14CurrentLimiterC2Ev:0000000000000000 _ZN14CurrentLimiterC1Ev
     /tmp/ccCNpeZo.s:146    .text._ZN14CurrentLimiterD2Ev:0000000000000000 $t
     /tmp/ccCNpeZo.s:153    .text._ZN14CurrentLimiterD2Ev:0000000000000000 _ZN14CurrentLimiterD2Ev
     /tmp/ccCNpeZo.s:194    .text._ZN14CurrentLimiterD2Ev:000000000000001c $d
     /tmp/ccCNpeZo.s:153    .text._ZN14CurrentLimiterD2Ev:0000000000000000 _ZN14CurrentLimiterD1Ev
     /tmp/ccCNpeZo.s:201    .text._ZN14CurrentLimiterD0Ev:0000000000000000 $t
     /tmp/ccCNpeZo.s:208    .text._ZN14CurrentLimiterD0Ev:0000000000000000 _ZN14CurrentLimiterD0Ev
     /tmp/ccCNpeZo.s:245    .text._ZN24ThermistorCurrentLimiterC2EtPKfS1_jRS0_S2_RKb:0000000000000000 $t
     /tmp/ccCNpeZo.s:252    .text._ZN24ThermistorCurrentLimiterC2EtPKfS1_jRS0_S2_RKb:0000000000000000 _ZN24ThermistorCurrentLimiterC2EtPKfS1_jRS0_S2_RKb
     /tmp/ccCNpeZo.s:328    .text._ZN24ThermistorCurrentLimiterC2EtPKfS1_jRS0_S2_RKb:0000000000000068 $d
     /tmp/ccCNpeZo.s:1295   .rodata._ZTV24ThermistorCurrentLimiter:0000000000000000 _ZTV24ThermistorCurrentLimiter
     /tmp/ccCNpeZo.s:252    .text._ZN24ThermistorCurrentLimiterC2EtPKfS1_jRS0_S2_RKb:0000000000000000 _ZN24ThermistorCurrentLimiterC1EtPKfS1_jRS0_S2_RKb
     /tmp/ccCNpeZo.s:336    .text._ZN24ThermistorCurrentLimiter6updateEv:0000000000000000 $t
     /tmp/ccCNpeZo.s:343    .text._ZN24ThermistorCurrentLimiter6updateEv:0000000000000000 _ZN24ThermistorCurrentLimiter6updateEv
     /tmp/ccCNpeZo.s:444    .text._ZN24ThermistorCurrentLimiter6updateEv:00000000000000a8 $d
     /tmp/ccCNpeZo.s:449    .text._ZN24ThermistorCurrentLimiter9do_checksEv:0000000000000000 $t
     /tmp/ccCNpeZo.s:456    .text._ZN24ThermistorCurrentLimiter9do_checksEv:0000000000000000 _ZN24ThermistorCurrentLimiter9do_checksEv
     /tmp/ccCNpeZo.s:557    .text._ZSt3minIfERKT_S2_S2_:0000000000000000 $t
     /tmp/ccCNpeZo.s:564    .text._ZSt3minIfERKT_S2_S2_:0000000000000000 _ZSt3minIfERKT_S2_S2_
     /tmp/ccCNpeZo.s:618    .text._ZNK24ThermistorCurrentLimiter17get_current_limitEf:0000000000000000 $t
     /tmp/ccCNpeZo.s:625    .text._ZNK24ThermistorCurrentLimiter17get_current_limitEf:0000000000000000 _ZNK24ThermistorCurrentLimiter17get_current_limitEf
     /tmp/ccCNpeZo.s:751    .text._ZN24ThermistorCurrentLimiterD2Ev:0000000000000000 $t
     /tmp/ccCNpeZo.s:758    .text._ZN24ThermistorCurrentLimiterD2Ev:0000000000000000 _ZN24ThermistorCurrentLimiterD2Ev
     /tmp/ccCNpeZo.s:799    .text._ZN24ThermistorCurrentLimiterD2Ev:0000000000000020 $d
     /tmp/ccCNpeZo.s:758    .text._ZN24ThermistorCurrentLimiterD2Ev:0000000000000000 _ZN24ThermistorCurrentLimiterD1Ev
     /tmp/ccCNpeZo.s:806    .text._ZN24ThermistorCurrentLimiterD0Ev:0000000000000000 $t
     /tmp/ccCNpeZo.s:813    .text._ZN24ThermistorCurrentLimiterD0Ev:0000000000000000 _ZN24ThermistorCurrentLimiterD0Ev
     /tmp/ccCNpeZo.s:850    .text._ZN31OnboardThermistorCurrentLimiterC2ERK26ThermistorHardwareConfig_tRNS_8Config_tE:0000000000000000 $t
     /tmp/ccCNpeZo.s:857    .text._ZN31OnboardThermistorCurrentLimiterC2ERK26ThermistorHardwareConfig_tRNS_8Config_tE:0000000000000000 _ZN31OnboardThermistorCurrentLimiterC2ERK26ThermistorHardwareConfig_tRNS_8Config_tE
     /tmp/ccCNpeZo.s:937    .text._ZN31OnboardThermistorCurrentLimiterC2ERK26ThermistorHardwareConfig_tRNS_8Config_tE:0000000000000058 $d
     /tmp/ccCNpeZo.s:1186   .rodata._ZTV31OnboardThermistorCurrentLimiter:0000000000000000 _ZTV31OnboardThermistorCurrentLimiter
ARM GAS  /tmp/ccCNpeZo.s 			page 33


     /tmp/ccCNpeZo.s:857    .text._ZN31OnboardThermistorCurrentLimiterC2ERK26ThermistorHardwareConfig_tRNS_8Config_tE:0000000000000000 _ZN31OnboardThermistorCurrentLimiterC1ERK26ThermistorHardwareConfig_tRNS_8Config_tE
     /tmp/ccCNpeZo.s:944    .text._ZN32OffboardThermistorCurrentLimiterC2ERNS_8Config_tE:0000000000000000 $t
     /tmp/ccCNpeZo.s:951    .text._ZN32OffboardThermistorCurrentLimiterC2ERNS_8Config_tE:0000000000000000 _ZN32OffboardThermistorCurrentLimiterC2ERNS_8Config_tE
     /tmp/ccCNpeZo.s:1037   .text._ZN32OffboardThermistorCurrentLimiter10decode_pinEv:0000000000000000 _ZN32OffboardThermistorCurrentLimiter10decode_pinEv
     /tmp/ccCNpeZo.s:1023   .text._ZN32OffboardThermistorCurrentLimiterC2ERNS_8Config_tE:0000000000000054 $d
     /tmp/ccCNpeZo.s:1077   .rodata._ZTV32OffboardThermistorCurrentLimiter:0000000000000000 _ZTV32OffboardThermistorCurrentLimiter
     /tmp/ccCNpeZo.s:951    .text._ZN32OffboardThermistorCurrentLimiterC2ERNS_8Config_tE:0000000000000000 _ZN32OffboardThermistorCurrentLimiterC1ERNS_8Config_tE
     /tmp/ccCNpeZo.s:1030   .text._ZN32OffboardThermistorCurrentLimiter10decode_pinEv:0000000000000000 $t
     /tmp/ccCNpeZo.s:1074   .rodata._ZTV32OffboardThermistorCurrentLimiter:0000000000000000 $d
     /tmp/ccCNpeZo.s:1091   .text._ZN32OffboardThermistorCurrentLimiterD2Ev:0000000000000000 _ZN32OffboardThermistorCurrentLimiterD1Ev
     /tmp/ccCNpeZo.s:1145   .text._ZN32OffboardThermistorCurrentLimiterD0Ev:0000000000000000 _ZN32OffboardThermistorCurrentLimiterD0Ev
     /tmp/ccCNpeZo.s:1084   .text._ZN32OffboardThermistorCurrentLimiterD2Ev:0000000000000000 $t
     /tmp/ccCNpeZo.s:1091   .text._ZN32OffboardThermistorCurrentLimiterD2Ev:0000000000000000 _ZN32OffboardThermistorCurrentLimiterD2Ev
     /tmp/ccCNpeZo.s:1131   .text._ZN32OffboardThermistorCurrentLimiterD2Ev:0000000000000020 $d
     /tmp/ccCNpeZo.s:1138   .text._ZN32OffboardThermistorCurrentLimiterD0Ev:0000000000000000 $t
     /tmp/ccCNpeZo.s:1183   .rodata._ZTV31OnboardThermistorCurrentLimiter:0000000000000000 $d
     /tmp/ccCNpeZo.s:1200   .text._ZN31OnboardThermistorCurrentLimiterD2Ev:0000000000000000 _ZN31OnboardThermistorCurrentLimiterD1Ev
     /tmp/ccCNpeZo.s:1254   .text._ZN31OnboardThermistorCurrentLimiterD0Ev:0000000000000000 _ZN31OnboardThermistorCurrentLimiterD0Ev
     /tmp/ccCNpeZo.s:1193   .text._ZN31OnboardThermistorCurrentLimiterD2Ev:0000000000000000 $t
     /tmp/ccCNpeZo.s:1200   .text._ZN31OnboardThermistorCurrentLimiterD2Ev:0000000000000000 _ZN31OnboardThermistorCurrentLimiterD2Ev
     /tmp/ccCNpeZo.s:1240   .text._ZN31OnboardThermistorCurrentLimiterD2Ev:0000000000000020 $d
     /tmp/ccCNpeZo.s:1247   .text._ZN31OnboardThermistorCurrentLimiterD0Ev:0000000000000000 $t
     /tmp/ccCNpeZo.s:1292   .rodata._ZTV24ThermistorCurrentLimiter:0000000000000000 $d
     /tmp/ccCNpeZo.s:1303   .rodata._ZTV14CurrentLimiter:0000000000000000 $d
                           .group:0000000000000000 _ZN14CurrentLimiterC5Ev
                           .group:0000000000000000 _ZN14CurrentLimiterD5Ev
                           .group:0000000000000000 _ZN24ThermistorCurrentLimiterD5Ev
                           .group:0000000000000000 _ZN32OffboardThermistorCurrentLimiterD5Ev
                           .group:0000000000000000 _ZN31OnboardThermistorCurrentLimiterD5Ev

UNDEFINED SYMBOLS
_ZdlPv
get_adc_voltage_channel
horner_fma
adc_ref_voltage
__cxa_pure_virtual
