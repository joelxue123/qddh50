ARM GAS  /tmp/ccNuAypp.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"thermistor.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._ZNK24ThermistorCurrentLimiter17get_current_limitEf,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	_ZNK24ThermistorCurrentLimiter17get_current_limitEf
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	_ZNK24ThermistorCurrentLimiter17get_current_limitEf:
  28              	.LVL0:
  29              	.LFB4822:
  30              		.file 1 "Src/thermistor.cpp"
   1:Src/thermistor.cpp **** #include "main.h"
   2:Src/thermistor.cpp **** #include "low_level.h"
   3:Src/thermistor.cpp **** #include "thermistor.hpp"
   4:Src/thermistor.cpp **** #include "axis.hpp"
   5:Src/thermistor.cpp **** #include "motor.hpp"
   6:Src/thermistor.cpp **** 
   7:Src/thermistor.cpp **** 
   8:Src/thermistor.cpp **** ThermistorCurrentLimiter::ThermistorCurrentLimiter(uint16_t adc_channel,
   9:Src/thermistor.cpp ****                                                    const float* const coefficients,
  10:Src/thermistor.cpp ****                                                    const float* const aux_coefficients,
  11:Src/thermistor.cpp ****                                                    size_t num_coeffs,
  12:Src/thermistor.cpp ****                                                    const float& temp_limit_lower,
  13:Src/thermistor.cpp ****                                                    const float& temp_limit_upper,
  14:Src/thermistor.cpp ****                                                    const bool& enabled) :
  15:Src/thermistor.cpp ****     adc_channel_(adc_channel),
  16:Src/thermistor.cpp ****     coefficients_(coefficients),
  17:Src/thermistor.cpp ****     aux_coefficients_(aux_coefficients),
  18:Src/thermistor.cpp ****     num_coeffs_(num_coeffs),
  19:Src/thermistor.cpp ****     temperature_(NAN),
  20:Src/thermistor.cpp ****     temp_limit_lower_(temp_limit_lower),
  21:Src/thermistor.cpp ****     temp_limit_upper_(temp_limit_upper),
  22:Src/thermistor.cpp ****     enabled_(enabled),
  23:Src/thermistor.cpp ****     error_(ERROR_NONE)
  24:Src/thermistor.cpp **** {
  25:Src/thermistor.cpp **** }
  26:Src/thermistor.cpp **** 
  27:Src/thermistor.cpp **** void ThermistorCurrentLimiter::update() {
  28:Src/thermistor.cpp ****     float voltage = get_adc_voltage_channel(14);
ARM GAS  /tmp/ccNuAypp.s 			page 2


  29:Src/thermistor.cpp ****     float normalized_voltage = voltage / adc_ref_voltage;
  30:Src/thermistor.cpp ****     temperature_ = horner_fma(normalized_voltage, coefficients_, num_coeffs_);
  31:Src/thermistor.cpp ****     temperature_int_ = (int32_t)temperature_;
  32:Src/thermistor.cpp ****     voltage = get_adc_voltage_channel(15);
  33:Src/thermistor.cpp ****     normalized_voltage = voltage / adc_ref_voltage;
  34:Src/thermistor.cpp ****     aux_temperature_ = horner_fma(normalized_voltage, aux_coefficients_, num_coeffs_);
  35:Src/thermistor.cpp ****     aux_temperature_int_ = (int32_t)aux_temperature_;
  36:Src/thermistor.cpp **** 
  37:Src/thermistor.cpp **** }
  38:Src/thermistor.cpp **** 
  39:Src/thermistor.cpp **** bool ThermistorCurrentLimiter::do_checks() {
  40:Src/thermistor.cpp ****     if (enabled_ && ( (temperature_ >= temp_limit_upper_ + 1 ) ||  (aux_temperature_ >= temp_limit_
  41:Src/thermistor.cpp ****         error_ = ERROR_OVER_TEMP;
  42:Src/thermistor.cpp ****         // Properly cast error flags when combining
  43:Src/thermistor.cpp ****         axis_->error_ = static_cast<Axis::Error>(
  44:Src/thermistor.cpp ****             static_cast<uint32_t>(axis_->error_) | 
  45:Src/thermistor.cpp ****             static_cast<uint32_t>(Axis::ERROR_OVER_TEMP)
  46:Src/thermistor.cpp ****         );
  47:Src/thermistor.cpp ****                 
  48:Src/thermistor.cpp ****         axis_->axis_state_.erro = Axis::ENCOS_ERRO::ENCOS_ERROR_OVER_TEMP;
  49:Src/thermistor.cpp ****         return false;
  50:Src/thermistor.cpp ****     }
  51:Src/thermistor.cpp ****     return true;
  52:Src/thermistor.cpp **** }
  53:Src/thermistor.cpp **** 
  54:Src/thermistor.cpp **** float ThermistorCurrentLimiter::get_current_limit(float base_current_lim) const {
  31              		.loc 1 54 81 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  55:Src/thermistor.cpp ****     if (!enabled_) {
  36              		.loc 1 55 5 view .LVU1
  37              		.loc 1 55 10 is_stmt 0 view .LVU2
  38 0000 C36A     		ldr	r3, [r0, #44]
  39              		.loc 1 55 5 view .LVU3
  40 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  41 0004 43B3     		cbz	r3, .L2
  56:Src/thermistor.cpp ****         return base_current_lim;
  57:Src/thermistor.cpp ****     }
  58:Src/thermistor.cpp **** 
  59:Src/thermistor.cpp ****     float aux_temp_margin = temp_limit_upper_ - aux_temperature_;
  42              		.loc 1 59 5 is_stmt 1 view .LVU4
  43              		.loc 1 59 29 is_stmt 0 view .LVU5
  44 0006 836A     		ldr	r3, [r0, #40]
  45              		.loc 1 59 47 view .LVU6
  46 0008 90ED076A 		vldr.32	s12, [r0, #28]
  47              		.loc 1 59 29 view .LVU7
  48 000c 93ED007A 		vldr.32	s14, [r3]
  60:Src/thermistor.cpp ****     float fet_temp_margin = temp_limit_upper_ - temperature_;
  49              		.loc 1 60 47 view .LVU8
  50 0010 D0ED057A 		vldr.32	s15, [r0, #20]
  61:Src/thermistor.cpp ****     float temp_margin = std::min(aux_temp_margin, fet_temp_margin);
  62:Src/thermistor.cpp ****     const float derating_range = temp_limit_upper_ - temp_limit_lower_;
  51              		.loc 1 62 54 view .LVU9
  52 0014 436A     		ldr	r3, [r0, #36]
  59:Src/thermistor.cpp ****     float fet_temp_margin = temp_limit_upper_ - temperature_;
ARM GAS  /tmp/ccNuAypp.s 			page 3


  53              		.loc 1 59 47 view .LVU10
  54 0016 37EE466A 		vsub.f32	s12, s14, s12
  55              	.LVL1:
  60:Src/thermistor.cpp ****     float fet_temp_margin = temp_limit_upper_ - temperature_;
  56              		.loc 1 60 5 is_stmt 1 view .LVU11
  60:Src/thermistor.cpp ****     float fet_temp_margin = temp_limit_upper_ - temperature_;
  57              		.loc 1 60 47 is_stmt 0 view .LVU12
  58 001a 77EE677A 		vsub.f32	s15, s14, s15
  59              	.LVL2:
  61:Src/thermistor.cpp ****     float temp_margin = std::min(aux_temp_margin, fet_temp_margin);
  60              		.loc 1 61 5 is_stmt 1 view .LVU13
  61              	.LBB53:
  62              	.LBI53:
  63              		.file 2 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_a
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** /*
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
ARM GAS  /tmp/ccNuAypp.s 			page 4


  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  */
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  */
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** # include <type_traits>
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** # include <compare>
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** {
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /*
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    */
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline int
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
ARM GAS  /tmp/ccNuAypp.s 			page 5


 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return 0;
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       else
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __iter_swap
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static void
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<>
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static void
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif // C++03
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline void
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
ARM GAS  /tmp/ccNuAypp.s 			page 6


 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #else
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __first2;
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
ARM GAS  /tmp/ccNuAypp.s 			page 7


 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Tp>
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline const _Tp&
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
  64              		.loc 2 230 5 view .LVU14
  65              	.LBE53:
  66              		.loc 1 62 17 is_stmt 0 view .LVU15
  67 001e D3ED006A 		vldr.32	s13, [r3]
  68              	.LBB56:
  69              	.LBB54:
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       if (__b < __a)
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __a;
  70              		.loc 2 237 14 view .LVU16
  71 0022 B4EEE76A 		vcmpe.f32	s12, s15
  72 0026 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  73              	.LBE54:
  74              	.LBE56:
  75              		.loc 1 62 17 view .LVU17
  76 002a 77EE666A 		vsub.f32	s13, s14, s13
  77              	.LBB57:
  78              	.LBB55:
  79              		.loc 2 237 14 view .LVU18
  80 002e D8BF     		it	le
  81 0030 F0EE467A 		vmovle.f32	s15, s12
  82              	.LVL3:
  83              		.loc 2 237 14 view .LVU19
  84              	.LBE55:
  85              	.LBE57:
  86              		.loc 1 62 5 is_stmt 1 view .LVU20
  63:Src/thermistor.cpp ****     float thermal_current_lim = base_current_lim * (temp_margin / derating_range);
  87              		.loc 1 63 5 view .LVU21
  88              		.loc 1 63 65 is_stmt 0 view .LVU22
  89 0034 87EEA67A 		vdiv.f32	s14, s15, s13
  90              	.LVL4:
  91              		.loc 1 63 50 view .LVU23
  92 0038 67EE007A 		vmul.f32	s15, s14, s0
  93              	.LVL5:
  64:Src/thermistor.cpp ****     if (!(thermal_current_lim >= 0.0f)) { // Funny polarity to also catch NaN
  94              		.loc 1 64 5 is_stmt 1 view .LVU24
  95 003c F5EEC07A 		vcmpe.f32	s15, #0
ARM GAS  /tmp/ccNuAypp.s 			page 8


  96 0040 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  65:Src/thermistor.cpp ****         thermal_current_lim = 0.0f;
  97              		.loc 1 65 29 is_stmt 0 view .LVU25
  98 0044 B8BF     		it	lt
  99 0046 DFED057A 		vldrlt.32	s15, .L9
 100              	.LVL6:
  66:Src/thermistor.cpp ****     }
  67:Src/thermistor.cpp **** 
  68:Src/thermistor.cpp ****     return std::min(thermal_current_lim, base_current_lim);
 101              		.loc 1 68 5 is_stmt 1 view .LVU26
 102              	.LBB58:
 103              	.LBI58:
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 104              		.loc 2 230 5 view .LVU27
 105              	.LBB59:
 106              		.loc 2 237 14 is_stmt 0 view .LVU28
 107 004a F4EEC07A 		vcmpe.f32	s15, s0
 108 004e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 109 0052 D8BF     		it	le
 110 0054 B0EE670A 		vmovle.f32	s0, s15
 111              	.LVL7:
 112              	.L2:
 113              		.loc 2 237 14 view .LVU29
 114              	.LBE59:
 115              	.LBE58:
  69:Src/thermistor.cpp **** }
 116              		.loc 1 69 1 view .LVU30
 117 0058 7047     		bx	lr
 118              	.L10:
 119 005a 00BF     		.align	2
 120              	.L9:
 121 005c 00000000 		.word	0
 122              		.cfi_endproc
 123              	.LFE4822:
 125              		.section	.text._ZN24ThermistorCurrentLimiterD2Ev,"axG",%progbits,_ZN24ThermistorCurrentLimiterD5Ev
 126              		.align	1
 127              		.p2align 2,,3
 128              		.weak	_ZN24ThermistorCurrentLimiterD2Ev
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu fpv4-sp-d16
 134              	_ZN24ThermistorCurrentLimiterD2Ev:
 135              	.LVL8:
 136              	.LFB4826:
 137              		.file 3 "Inc/thermistor.hpp"
   1:Inc/thermistor.hpp **** #ifndef __THERMISTOR_HPP
   2:Inc/thermistor.hpp **** #define __THERMISTOR_HPP
   3:Inc/thermistor.hpp **** 
   4:Inc/thermistor.hpp **** #include "main.h"
   5:Inc/thermistor.hpp **** #include "interfaces.hpp"
   6:Inc/thermistor.hpp **** #include "current_limiter.hpp"
   7:Inc/thermistor.hpp **** 
   8:Inc/thermistor.hpp **** #define THERMISTOR_CURRENT_LIMITER_MAX_TEMP 150.0f
   9:Inc/thermistor.hpp **** #define THERMISTOR_CURRENT_LIMITER_MIN_TEMP -40.0f
  10:Inc/thermistor.hpp **** 
  11:Inc/thermistor.hpp **** #define THERMISTOR_CURRENT_LIMITER_MAX_CURRENT 3.0f
ARM GAS  /tmp/ccNuAypp.s 			page 9


  12:Inc/thermistor.hpp **** 
  13:Inc/thermistor.hpp **** class Axis;
  14:Inc/thermistor.hpp **** 
  15:Inc/thermistor.hpp **** 
  16:Inc/thermistor.hpp **** class ThermistorCurrentLimiter : public CurrentLimiter, public ODriveIntf::ThermistorCurrentLimiter
  17:Inc/thermistor.hpp **** public:
  18:Inc/thermistor.hpp ****     virtual ~ThermistorCurrentLimiter() = default;
 138              		.loc 3 18 13 is_stmt 1 view -0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              		@ link register save eliminated.
 143              	.LBB60:
 144              	.LBI60:
 145              		.file 4 "Inc/current_limiter.hpp"
   1:Inc/current_limiter.hpp **** #ifndef __CURRENT_LIMITER_HPP
   2:Inc/current_limiter.hpp **** #define __CURRENT_LIMITER_HPP
   3:Inc/current_limiter.hpp **** 
   4:Inc/current_limiter.hpp **** 
   5:Inc/current_limiter.hpp **** 
   6:Inc/current_limiter.hpp **** class CurrentLimiter {
   7:Inc/current_limiter.hpp **** public:
   8:Inc/current_limiter.hpp ****     virtual ~CurrentLimiter() = default;
 146              		.loc 4 8 13 view .LVU32
 147              		.loc 4 8 13 is_stmt 0 view .LVU33
 148              	.LBE60:
 149              		.loc 3 18 13 view .LVU34
 150 0000 7047     		bx	lr
 151              		.cfi_endproc
 152              	.LFE4826:
 154              		.weak	_ZN24ThermistorCurrentLimiterD1Ev
 155              		.thumb_set _ZN24ThermistorCurrentLimiterD1Ev,_ZN24ThermistorCurrentLimiterD2Ev
 156 0002 00BF     		.section	.text._ZN32OffboardThermistorCurrentLimiterD2Ev,"axG",%progbits,_ZN32OffboardThermistorCu
 157              		.align	1
 158              		.p2align 2,,3
 159              		.weak	_ZN32OffboardThermistorCurrentLimiterD2Ev
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 163              		.fpu fpv4-sp-d16
 165              	_ZN32OffboardThermistorCurrentLimiterD2Ev:
 166              	.LVL9:
 167              	.LFB4985:
  19:Inc/thermistor.hpp **** 
  20:Inc/thermistor.hpp ****     ThermistorCurrentLimiter(uint16_t adc_channel,
  21:Inc/thermistor.hpp ****                              const float* const coefficients,
  22:Inc/thermistor.hpp ****                              const float* const aux_coefficients,
  23:Inc/thermistor.hpp ****                              size_t num_coeffs,
  24:Inc/thermistor.hpp ****                              const float& temp_limit_lower,
  25:Inc/thermistor.hpp ****                              const float& temp_limit_upper,
  26:Inc/thermistor.hpp ****                              const bool& enabled);
  27:Inc/thermistor.hpp **** 
  28:Inc/thermistor.hpp ****     void update();
  29:Inc/thermistor.hpp ****     bool do_checks();
  30:Inc/thermistor.hpp ****     float get_current_limit(float base_current_lim) const override;
  31:Inc/thermistor.hpp **** 
  32:Inc/thermistor.hpp ****     uint16_t adc_channel_;
ARM GAS  /tmp/ccNuAypp.s 			page 10


  33:Inc/thermistor.hpp ****     const float* const coefficients_;
  34:Inc/thermistor.hpp ****     const float* const aux_coefficients_;
  35:Inc/thermistor.hpp ****     const size_t num_coeffs_;
  36:Inc/thermistor.hpp ****     float temperature_;
  37:Inc/thermistor.hpp ****     int32_t temperature_int_;
  38:Inc/thermistor.hpp ****     float aux_temperature_;
  39:Inc/thermistor.hpp ****     int32_t aux_temperature_int_;
  40:Inc/thermistor.hpp ****     const float& temp_limit_lower_;
  41:Inc/thermistor.hpp ****     const float& temp_limit_upper_;
  42:Inc/thermistor.hpp ****     const bool& enabled_;
  43:Inc/thermistor.hpp ****     Error error_;
  44:Inc/thermistor.hpp ****     Axis* axis_ = nullptr; // set by Axis constructor
  45:Inc/thermistor.hpp **** };
  46:Inc/thermistor.hpp **** 
  47:Inc/thermistor.hpp **** class OnboardThermistorCurrentLimiter : public ThermistorCurrentLimiter, public ODriveIntf::Onboard
  48:Inc/thermistor.hpp **** public:
  49:Inc/thermistor.hpp ****     struct Config_t {
  50:Inc/thermistor.hpp ****         float temp_limit_lower = 100;
  51:Inc/thermistor.hpp ****         float temp_limit_upper = 120;
  52:Inc/thermistor.hpp ****         bool enabled = true;
  53:Inc/thermistor.hpp ****     };
  54:Inc/thermistor.hpp **** 
  55:Inc/thermistor.hpp ****     virtual ~OnboardThermistorCurrentLimiter() = default;
  56:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
  57:Inc/thermistor.hpp **** 
  58:Inc/thermistor.hpp ****     Config_t& config_;
  59:Inc/thermistor.hpp **** };
  60:Inc/thermistor.hpp **** 
  61:Inc/thermistor.hpp **** class OffboardThermistorCurrentLimiter : public ThermistorCurrentLimiter, public ODriveIntf::Offboa
  62:Inc/thermistor.hpp **** public:
  63:Inc/thermistor.hpp ****     static const size_t num_coeffs_ = 4;
  64:Inc/thermistor.hpp **** 
  65:Inc/thermistor.hpp ****     struct Config_t {
  66:Inc/thermistor.hpp ****         float thermistor_poly_coeffs[num_coeffs_];
  67:Inc/thermistor.hpp ****         float thermistor_poly_coeffs2[num_coeffs_];
  68:Inc/thermistor.hpp ****         uint16_t gpio_pin = 4;
  69:Inc/thermistor.hpp ****         float temp_limit_lower = 60;
  70:Inc/thermistor.hpp ****         float temp_limit_upper = 80;
  71:Inc/thermistor.hpp ****         bool enabled = true;
  72:Inc/thermistor.hpp **** 
  73:Inc/thermistor.hpp ****         // custom setters
  74:Inc/thermistor.hpp ****         OffboardThermistorCurrentLimiter* parent;
  75:Inc/thermistor.hpp ****         void set_gpio_pin(uint16_t value) { gpio_pin = value; parent->decode_pin(); }
  76:Inc/thermistor.hpp ****     };
  77:Inc/thermistor.hpp **** 
  78:Inc/thermistor.hpp ****     virtual ~OffboardThermistorCurrentLimiter() = default;
 168              		.loc 3 78 13 is_stmt 1 view -0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 0
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172              		@ link register save eliminated.
 173              	.LBB61:
 174              	.LBI61:
  18:Inc/thermistor.hpp **** 
 175              		.loc 3 18 13 view .LVU36
 176              	.LBB62:
 177              	.LBI62:
ARM GAS  /tmp/ccNuAypp.s 			page 11


 178              		.loc 4 8 13 view .LVU37
 179              		.loc 4 8 13 is_stmt 0 view .LVU38
 180              	.LBE62:
 181              	.LBE61:
 182              		.loc 3 78 13 view .LVU39
 183 0000 7047     		bx	lr
 184              		.cfi_endproc
 185              	.LFE4985:
 187              		.weak	_ZN32OffboardThermistorCurrentLimiterD1Ev
 188              		.thumb_set _ZN32OffboardThermistorCurrentLimiterD1Ev,_ZN32OffboardThermistorCurrentLimiterD2Ev
 189 0002 00BF     		.section	.text._ZN31OnboardThermistorCurrentLimiterD2Ev,"axG",%progbits,_ZN31OnboardThermistorCurr
 190              		.align	1
 191              		.p2align 2,,3
 192              		.weak	_ZN31OnboardThermistorCurrentLimiterD2Ev
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu fpv4-sp-d16
 198              	_ZN31OnboardThermistorCurrentLimiterD2Ev:
 199              	.LVL10:
 200              	.LFB4989:
  55:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
 201              		.loc 3 55 13 is_stmt 1 view -0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 206              	.LBB63:
 207              	.LBI63:
  18:Inc/thermistor.hpp **** 
 208              		.loc 3 18 13 view .LVU41
 209              	.LBB64:
 210              	.LBI64:
 211              		.loc 4 8 13 view .LVU42
 212              		.loc 4 8 13 is_stmt 0 view .LVU43
 213              	.LBE64:
 214              	.LBE63:
  55:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
 215              		.loc 3 55 13 view .LVU44
 216 0000 7047     		bx	lr
 217              		.cfi_endproc
 218              	.LFE4989:
 220              		.weak	_ZN31OnboardThermistorCurrentLimiterD1Ev
 221              		.thumb_set _ZN31OnboardThermistorCurrentLimiterD1Ev,_ZN31OnboardThermistorCurrentLimiterD2Ev
 222 0002 00BF     		.section	.text._ZN24ThermistorCurrentLimiterD0Ev,"axG",%progbits,_ZN24ThermistorCurrentLimiterD5Ev
 223              		.align	1
 224              		.p2align 2,,3
 225              		.weak	_ZN24ThermistorCurrentLimiterD0Ev
 226              		.syntax unified
 227              		.thumb
 228              		.thumb_func
 229              		.fpu fpv4-sp-d16
 231              	_ZN24ThermistorCurrentLimiterD0Ev:
 232              	.LVL11:
 233              	.LFB4828:
  18:Inc/thermistor.hpp **** 
 234              		.loc 3 18 13 is_stmt 1 view -0
ARM GAS  /tmp/ccNuAypp.s 			page 12


 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
  18:Inc/thermistor.hpp **** 
 238              		.loc 3 18 13 is_stmt 0 view .LVU46
 239 0000 10B5     		push	{r4, lr}
 240              	.LCFI0:
 241              		.cfi_def_cfa_offset 8
 242              		.cfi_offset 4, -8
 243              		.cfi_offset 14, -4
  18:Inc/thermistor.hpp **** 
 244              		.loc 3 18 13 view .LVU47
 245 0002 0446     		mov	r4, r0
 246              	.LVL12:
 247              	.LBB65:
 248              	.LBI65:
  18:Inc/thermistor.hpp **** 
 249              		.loc 3 18 13 is_stmt 1 view .LVU48
 250              	.LBB66:
 251              	.LBI66:
 252              		.loc 4 8 13 view .LVU49
 253              		.loc 4 8 13 is_stmt 0 view .LVU50
 254              	.LBE66:
 255              	.LBE65:
  18:Inc/thermistor.hpp **** 
 256              		.loc 3 18 13 view .LVU51
 257 0004 FFF7FEFF 		bl	_ZdlPv
 258              	.LVL13:
  18:Inc/thermistor.hpp **** 
 259              		.loc 3 18 13 view .LVU52
 260 0008 2046     		mov	r0, r4
 261 000a 10BD     		pop	{r4, pc}
  18:Inc/thermistor.hpp **** 
 262              		.loc 3 18 13 view .LVU53
 263              		.cfi_endproc
 264              	.LFE4828:
 266              		.section	.text._ZN31OnboardThermistorCurrentLimiterD0Ev,"axG",%progbits,_ZN31OnboardThermistorCurr
 267              		.align	1
 268              		.p2align 2,,3
 269              		.weak	_ZN31OnboardThermistorCurrentLimiterD0Ev
 270              		.syntax unified
 271              		.thumb
 272              		.thumb_func
 273              		.fpu fpv4-sp-d16
 275              	_ZN31OnboardThermistorCurrentLimiterD0Ev:
 276              	.LVL14:
 277              	.LFB4991:
  55:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
 278              		.loc 3 55 13 is_stmt 1 view -0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 0
 281              		@ frame_needed = 0, uses_anonymous_args = 0
  55:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
 282              		.loc 3 55 13 is_stmt 0 view .LVU55
 283 0000 10B5     		push	{r4, lr}
 284              	.LCFI1:
 285              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccNuAypp.s 			page 13


 286              		.cfi_offset 4, -8
 287              		.cfi_offset 14, -4
  55:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
 288              		.loc 3 55 13 view .LVU56
 289 0002 0446     		mov	r4, r0
 290              	.LVL15:
 291              	.LBB67:
 292              	.LBI67:
  55:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
 293              		.loc 3 55 13 is_stmt 1 view .LVU57
 294              	.LBB68:
 295              	.LBI68:
  18:Inc/thermistor.hpp **** 
 296              		.loc 3 18 13 view .LVU58
 297              	.LBB69:
 298              	.LBI69:
 299              		.loc 4 8 13 view .LVU59
 300              		.loc 4 8 13 is_stmt 0 view .LVU60
 301              	.LBE69:
 302              	.LBE68:
 303              	.LBE67:
  55:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
 304              		.loc 3 55 13 view .LVU61
 305 0004 FFF7FEFF 		bl	_ZdlPv
 306              	.LVL16:
  55:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
 307              		.loc 3 55 13 view .LVU62
 308 0008 2046     		mov	r0, r4
 309 000a 10BD     		pop	{r4, pc}
  55:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
 310              		.loc 3 55 13 view .LVU63
 311              		.cfi_endproc
 312              	.LFE4991:
 314              		.section	.text._ZN32OffboardThermistorCurrentLimiterD0Ev,"axG",%progbits,_ZN32OffboardThermistorCu
 315              		.align	1
 316              		.p2align 2,,3
 317              		.weak	_ZN32OffboardThermistorCurrentLimiterD0Ev
 318              		.syntax unified
 319              		.thumb
 320              		.thumb_func
 321              		.fpu fpv4-sp-d16
 323              	_ZN32OffboardThermistorCurrentLimiterD0Ev:
 324              	.LVL17:
 325              	.LFB4987:
 326              		.loc 3 78 13 is_stmt 1 view -0
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 0
 329              		@ frame_needed = 0, uses_anonymous_args = 0
 330              		.loc 3 78 13 is_stmt 0 view .LVU65
 331 0000 10B5     		push	{r4, lr}
 332              	.LCFI2:
 333              		.cfi_def_cfa_offset 8
 334              		.cfi_offset 4, -8
 335              		.cfi_offset 14, -4
 336              		.loc 3 78 13 view .LVU66
 337 0002 0446     		mov	r4, r0
 338              	.LVL18:
ARM GAS  /tmp/ccNuAypp.s 			page 14


 339              	.LBB70:
 340              	.LBI70:
 341              		.loc 3 78 13 is_stmt 1 view .LVU67
 342              	.LBB71:
 343              	.LBI71:
  18:Inc/thermistor.hpp **** 
 344              		.loc 3 18 13 view .LVU68
 345              	.LBB72:
 346              	.LBI72:
 347              		.loc 4 8 13 view .LVU69
 348              		.loc 4 8 13 is_stmt 0 view .LVU70
 349              	.LBE72:
 350              	.LBE71:
 351              	.LBE70:
 352              		.loc 3 78 13 view .LVU71
 353 0004 FFF7FEFF 		bl	_ZdlPv
 354              	.LVL19:
 355              		.loc 3 78 13 view .LVU72
 356 0008 2046     		mov	r0, r4
 357 000a 10BD     		pop	{r4, pc}
 358              		.loc 3 78 13 view .LVU73
 359              		.cfi_endproc
 360              	.LFE4987:
 362              		.section	.text._ZN24ThermistorCurrentLimiterC2EtPKfS1_jRS0_S2_RKb,"ax",%progbits
 363              		.align	1
 364              		.p2align 2,,3
 365              		.global	_ZN24ThermistorCurrentLimiterC2EtPKfS1_jRS0_S2_RKb
 366              		.syntax unified
 367              		.thumb
 368              		.thumb_func
 369              		.fpu fpv4-sp-d16
 371              	_ZN24ThermistorCurrentLimiterC2EtPKfS1_jRS0_S2_RKb:
 372              	.LVL20:
 373              	.LFB4818:
   8:Src/thermistor.cpp ****                                                    const float* const coefficients,
 374              		.loc 1 8 1 is_stmt 1 view -0
 375              		.cfi_startproc
 376              		@ args = 16, pretend = 0, frame = 0
 377              		@ frame_needed = 0, uses_anonymous_args = 0
 378              		@ link register save eliminated.
 379              	.LBB73:
 380              	.LBB74:
 381              	.LBI74:
   6:Inc/current_limiter.hpp **** public:
 382              		.loc 4 6 7 view .LVU75
   6:Inc/current_limiter.hpp **** public:
 383              		.loc 4 6 7 is_stmt 0 view .LVU76
 384              	.LBE74:
  23:Src/thermistor.cpp **** {
 385              		.loc 1 23 22 view .LVU77
 386 0000 C0E90223 		strd	r2, r3, [r0, #8]
 387 0004 0023     		movs	r3, #0
 388              	.LVL21:
  23:Src/thermistor.cpp **** {
 389              		.loc 1 23 22 view .LVU78
 390 0006 80F83030 		strb	r3, [r0, #48]
 391 000a 4363     		str	r3, [r0, #52]
ARM GAS  /tmp/ccNuAypp.s 			page 15


 392              	.LBE73:
   8:Src/thermistor.cpp ****                                                    const float* const coefficients,
 393              		.loc 1 8 1 view .LVU79
 394 000c 009B     		ldr	r3, [sp]
 395              	.LBB75:
  23:Src/thermistor.cpp **** {
 396              		.loc 1 23 22 view .LVU80
 397 000e 0361     		str	r3, [r0, #16]
 398              	.LBE75:
   8:Src/thermistor.cpp ****                                                    const float* const coefficients,
 399              		.loc 1 8 1 view .LVU81
 400 0010 019B     		ldr	r3, [sp, #4]
 401              	.LBB76:
  23:Src/thermistor.cpp **** {
 402              		.loc 1 23 22 view .LVU82
 403 0012 4362     		str	r3, [r0, #36]
 404              	.LBE76:
   8:Src/thermistor.cpp ****                                                    const float* const coefficients,
 405              		.loc 1 8 1 view .LVU83
 406 0014 DDE90223 		ldrd	r2, r3, [sp, #8]
 407              	.LVL22:
 408              	.LBB77:
  23:Src/thermistor.cpp **** {
 409              		.loc 1 23 22 view .LVU84
 410 0018 8180     		strh	r1, [r0, #4]	@ movhi
 411 001a 0349     		ldr	r1, .L21
 412              	.LVL23:
  23:Src/thermistor.cpp **** {
 413              		.loc 1 23 22 view .LVU85
 414 001c 4161     		str	r1, [r0, #20]	@ float
 415 001e 0349     		ldr	r1, .L21+4
 416 0020 0160     		str	r1, [r0]
 417 0022 C0E90A23 		strd	r2, r3, [r0, #40]
 418              	.LBE77:
  25:Src/thermistor.cpp **** 
 419              		.loc 1 25 1 view .LVU86
 420 0026 7047     		bx	lr
 421              	.L22:
 422              		.align	2
 423              	.L21:
 424 0028 0000C07F 		.word	2143289344
 425 002c 08000000 		.word	.LANCHOR0+8
 426              		.cfi_endproc
 427              	.LFE4818:
 429              		.global	_ZN24ThermistorCurrentLimiterC1EtPKfS1_jRS0_S2_RKb
 430              		.thumb_set _ZN24ThermistorCurrentLimiterC1EtPKfS1_jRS0_S2_RKb,_ZN24ThermistorCurrentLimiterC2EtPKf
 431              		.section	.text._ZN24ThermistorCurrentLimiter6updateEv,"ax",%progbits
 432              		.align	1
 433              		.p2align 2,,3
 434              		.global	_ZN24ThermistorCurrentLimiter6updateEv
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 438              		.fpu fpv4-sp-d16
 440              	_ZN24ThermistorCurrentLimiter6updateEv:
 441              	.LVL24:
 442              	.LFB4820:
ARM GAS  /tmp/ccNuAypp.s 			page 16


  27:Src/thermistor.cpp ****     float voltage = get_adc_voltage_channel(14);
 443              		.loc 1 27 41 is_stmt 1 view -0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 0
 446              		@ frame_needed = 0, uses_anonymous_args = 0
  28:Src/thermistor.cpp ****     float normalized_voltage = voltage / adc_ref_voltage;
 447              		.loc 1 28 5 view .LVU88
  27:Src/thermistor.cpp ****     float voltage = get_adc_voltage_channel(14);
 448              		.loc 1 27 41 is_stmt 0 view .LVU89
 449 0000 10B5     		push	{r4, lr}
 450              	.LCFI3:
 451              		.cfi_def_cfa_offset 8
 452              		.cfi_offset 4, -8
 453              		.cfi_offset 14, -4
 454 0002 0446     		mov	r4, r0
 455 0004 2DED028B 		vpush.64	{d8}
 456              	.LCFI4:
 457              		.cfi_def_cfa_offset 16
 458              		.cfi_offset 80, -16
 459              		.cfi_offset 81, -12
  28:Src/thermistor.cpp ****     float normalized_voltage = voltage / adc_ref_voltage;
 460              		.loc 1 28 44 view .LVU90
 461 0008 0E20     		movs	r0, #14
 462              	.LVL25:
  28:Src/thermistor.cpp ****     float normalized_voltage = voltage / adc_ref_voltage;
 463              		.loc 1 28 44 view .LVU91
 464 000a FFF7FEFF 		bl	get_adc_voltage_channel
 465              	.LVL26:
  29:Src/thermistor.cpp ****     temperature_ = horner_fma(normalized_voltage, coefficients_, num_coeffs_);
 466              		.loc 1 29 5 is_stmt 1 view .LVU92
  29:Src/thermistor.cpp ****     temperature_ = horner_fma(normalized_voltage, coefficients_, num_coeffs_);
 467              		.loc 1 29 42 is_stmt 0 view .LVU93
 468 000e 104B     		ldr	r3, .L25
  30:Src/thermistor.cpp ****     temperature_int_ = (int32_t)temperature_;
 469              		.loc 1 30 30 view .LVU94
 470 0010 2169     		ldr	r1, [r4, #16]
  29:Src/thermistor.cpp ****     temperature_ = horner_fma(normalized_voltage, coefficients_, num_coeffs_);
 471              		.loc 1 29 42 view .LVU95
 472 0012 93ED008A 		vldr.32	s16, [r3]
 473              	.LVL27:
  30:Src/thermistor.cpp ****     temperature_int_ = (int32_t)temperature_;
 474              		.loc 1 30 5 is_stmt 1 view .LVU96
  30:Src/thermistor.cpp ****     temperature_int_ = (int32_t)temperature_;
 475              		.loc 1 30 30 is_stmt 0 view .LVU97
 476 0016 A068     		ldr	r0, [r4, #8]
 477 0018 80EE080A 		vdiv.f32	s0, s0, s16
 478              	.LVL28:
  30:Src/thermistor.cpp ****     temperature_int_ = (int32_t)temperature_;
 479              		.loc 1 30 30 view .LVU98
 480 001c FFF7FEFF 		bl	horner_fma
 481              	.LVL29:
  32:Src/thermistor.cpp ****     normalized_voltage = voltage / adc_ref_voltage;
 482              		.loc 1 32 38 view .LVU99
 483 0020 0F20     		movs	r0, #15
  31:Src/thermistor.cpp ****     voltage = get_adc_voltage_channel(15);
 484              		.loc 1 31 24 view .LVU100
 485 0022 FDEEC07A 		vcvt.s32.f32	s15, s0
ARM GAS  /tmp/ccNuAypp.s 			page 17


  30:Src/thermistor.cpp ****     temperature_int_ = (int32_t)temperature_;
 486              		.loc 1 30 18 view .LVU101
 487 0026 84ED050A 		vstr.32	s0, [r4, #20]
  31:Src/thermistor.cpp ****     voltage = get_adc_voltage_channel(15);
 488              		.loc 1 31 5 is_stmt 1 view .LVU102
  31:Src/thermistor.cpp ****     voltage = get_adc_voltage_channel(15);
 489              		.loc 1 31 24 is_stmt 0 view .LVU103
 490 002a C4ED067A 		vstr.32	s15, [r4, #24]	@ int
  32:Src/thermistor.cpp ****     normalized_voltage = voltage / adc_ref_voltage;
 491              		.loc 1 32 5 is_stmt 1 view .LVU104
  32:Src/thermistor.cpp ****     normalized_voltage = voltage / adc_ref_voltage;
 492              		.loc 1 32 38 is_stmt 0 view .LVU105
 493 002e FFF7FEFF 		bl	get_adc_voltage_channel
 494              	.LVL30:
  33:Src/thermistor.cpp ****     aux_temperature_ = horner_fma(normalized_voltage, aux_coefficients_, num_coeffs_);
 495              		.loc 1 33 5 is_stmt 1 view .LVU106
  34:Src/thermistor.cpp ****     aux_temperature_int_ = (int32_t)aux_temperature_;
 496              		.loc 1 34 5 view .LVU107
  34:Src/thermistor.cpp ****     aux_temperature_int_ = (int32_t)aux_temperature_;
 497              		.loc 1 34 34 is_stmt 0 view .LVU108
 498 0032 2169     		ldr	r1, [r4, #16]
 499 0034 E068     		ldr	r0, [r4, #12]
 500 0036 80EE080A 		vdiv.f32	s0, s0, s16
 501              	.LVL31:
  34:Src/thermistor.cpp ****     aux_temperature_int_ = (int32_t)aux_temperature_;
 502              		.loc 1 34 34 view .LVU109
 503 003a FFF7FEFF 		bl	horner_fma
 504              	.LVL32:
  37:Src/thermistor.cpp **** 
 505              		.loc 1 37 1 view .LVU110
 506 003e BDEC028B 		vldm	sp!, {d8}
 507              	.LCFI5:
 508              		.cfi_restore 80
 509              		.cfi_restore 81
 510              		.cfi_def_cfa_offset 8
  35:Src/thermistor.cpp **** 
 511              		.loc 1 35 28 view .LVU111
 512 0042 FDEEC07A 		vcvt.s32.f32	s15, s0
  34:Src/thermistor.cpp ****     aux_temperature_int_ = (int32_t)aux_temperature_;
 513              		.loc 1 34 22 view .LVU112
 514 0046 84ED070A 		vstr.32	s0, [r4, #28]
  35:Src/thermistor.cpp **** 
 515              		.loc 1 35 5 is_stmt 1 view .LVU113
  35:Src/thermistor.cpp **** 
 516              		.loc 1 35 28 is_stmt 0 view .LVU114
 517 004a C4ED087A 		vstr.32	s15, [r4, #32]	@ int
  37:Src/thermistor.cpp **** 
 518              		.loc 1 37 1 view .LVU115
 519 004e 10BD     		pop	{r4, pc}
 520              	.LVL33:
 521              	.L26:
  37:Src/thermistor.cpp **** 
 522              		.loc 1 37 1 view .LVU116
 523              		.align	2
 524              	.L25:
 525 0050 00000000 		.word	adc_ref_voltage
 526              		.cfi_endproc
ARM GAS  /tmp/ccNuAypp.s 			page 18


 527              	.LFE4820:
 529              		.section	.text._ZN24ThermistorCurrentLimiter9do_checksEv,"ax",%progbits
 530              		.align	1
 531              		.p2align 2,,3
 532              		.global	_ZN24ThermistorCurrentLimiter9do_checksEv
 533              		.syntax unified
 534              		.thumb
 535              		.thumb_func
 536              		.fpu fpv4-sp-d16
 538              	_ZN24ThermistorCurrentLimiter9do_checksEv:
 539              	.LVL34:
 540              	.LFB4821:
  39:Src/thermistor.cpp ****     if (enabled_ && ( (temperature_ >= temp_limit_upper_ + 1 ) ||  (aux_temperature_ >= temp_limit_
 541              		.loc 1 39 44 is_stmt 1 view -0
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 0
 544              		@ frame_needed = 0, uses_anonymous_args = 0
 545              		@ link register save eliminated.
  40:Src/thermistor.cpp ****         error_ = ERROR_OVER_TEMP;
 546              		.loc 1 40 5 view .LVU118
  40:Src/thermistor.cpp ****         error_ = ERROR_OVER_TEMP;
 547              		.loc 1 40 9 is_stmt 0 view .LVU119
 548 0000 C36A     		ldr	r3, [r0, #44]
 549 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  40:Src/thermistor.cpp ****         error_ = ERROR_OVER_TEMP;
 550              		.loc 1 40 5 view .LVU120
 551 0004 1BB3     		cbz	r3, .L31
  40:Src/thermistor.cpp ****         error_ = ERROR_OVER_TEMP;
 552              		.loc 1 40 40 discriminator 1 view .LVU121
 553 0006 826A     		ldr	r2, [r0, #40]
  40:Src/thermistor.cpp ****         error_ = ERROR_OVER_TEMP;
 554              		.loc 1 40 18 discriminator 1 view .LVU122
 555 0008 90ED057A 		vldr.32	s14, [r0, #20]
  40:Src/thermistor.cpp ****         error_ = ERROR_OVER_TEMP;
 556              		.loc 1 40 58 discriminator 1 view .LVU123
 557 000c D2ED007A 		vldr.32	s15, [r2]
 558 0010 F7EE006A 		vmov.f32	s13, #1.0e+0
 559 0014 77EEA67A 		vadd.f32	s15, s15, s13
  40:Src/thermistor.cpp ****         error_ = ERROR_OVER_TEMP;
 560              		.loc 1 40 18 discriminator 1 view .LVU124
 561 0018 B4EEE77A 		vcmpe.f32	s14, s15
 562 001c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 563 0020 06DA     		bge	.L29
  40:Src/thermistor.cpp ****         error_ = ERROR_OVER_TEMP;
 564              		.loc 1 40 64 discriminator 2 view .LVU125
 565 0022 90ED077A 		vldr.32	s14, [r0, #28]
 566 0026 F4EEC77A 		vcmpe.f32	s15, s14
 567 002a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 568 002e 0FD8     		bhi	.L28
 569              	.L29:
  41:Src/thermistor.cpp ****         // Properly cast error flags when combining
 570              		.loc 1 41 9 is_stmt 1 view .LVU126
  44:Src/thermistor.cpp ****             static_cast<uint32_t>(Axis::ERROR_OVER_TEMP)
 571              		.loc 1 44 35 is_stmt 0 view .LVU127
 572 0030 436B     		ldr	r3, [r0, #52]
  44:Src/thermistor.cpp ****             static_cast<uint32_t>(Axis::ERROR_OVER_TEMP)
 573              		.loc 1 44 50 view .LVU128
ARM GAS  /tmp/ccNuAypp.s 			page 19


 574 0032 D3F85C21 		ldr	r2, [r3, #348]
  41:Src/thermistor.cpp ****         // Properly cast error flags when combining
 575              		.loc 1 41 16 view .LVU129
 576 0036 0121     		movs	r1, #1
  44:Src/thermistor.cpp ****             static_cast<uint32_t>(Axis::ERROR_OVER_TEMP)
 577              		.loc 1 44 50 view .LVU130
 578 0038 42F48022 		orr	r2, r2, #262144
  41:Src/thermistor.cpp ****         // Properly cast error flags when combining
 579              		.loc 1 41 16 view .LVU131
 580 003c 80F83010 		strb	r1, [r0, #48]
  43:Src/thermistor.cpp ****             static_cast<uint32_t>(axis_->error_) | 
 581              		.loc 1 43 9 is_stmt 1 view .LVU132
  43:Src/thermistor.cpp ****             static_cast<uint32_t>(axis_->error_) | 
 582              		.loc 1 43 23 is_stmt 0 view .LVU133
 583 0040 C3F85C21 		str	r2, [r3, #348]
  48:Src/thermistor.cpp ****         return false;
 584              		.loc 1 48 9 is_stmt 1 view .LVU134
  48:Src/thermistor.cpp ****         return false;
 585              		.loc 1 48 33 is_stmt 0 view .LVU135
 586 0044 83F89611 		strb	r1, [r3, #406]
  49:Src/thermistor.cpp ****     }
 587              		.loc 1 49 9 is_stmt 1 view .LVU136
  49:Src/thermistor.cpp ****     }
 588              		.loc 1 49 16 is_stmt 0 view .LVU137
 589 0048 0023     		movs	r3, #0
  52:Src/thermistor.cpp **** 
 590              		.loc 1 52 1 view .LVU138
 591 004a 1846     		mov	r0, r3
 592              	.LVL35:
  52:Src/thermistor.cpp **** 
 593              		.loc 1 52 1 view .LVU139
 594 004c 7047     		bx	lr
 595              	.LVL36:
 596              	.L31:
  51:Src/thermistor.cpp **** }
 597              		.loc 1 51 12 view .LVU140
 598 004e 0123     		movs	r3, #1
 599              	.L28:
  52:Src/thermistor.cpp **** 
 600              		.loc 1 52 1 view .LVU141
 601 0050 1846     		mov	r0, r3
 602              	.LVL37:
  52:Src/thermistor.cpp **** 
 603              		.loc 1 52 1 view .LVU142
 604 0052 7047     		bx	lr
 605              		.cfi_endproc
 606              	.LFE4821:
 608              		.section	.text._ZN31OnboardThermistorCurrentLimiterC2ERK26ThermistorHardwareConfig_tRNS_8Config_tE
 609              		.align	1
 610              		.p2align 2,,3
 611              		.global	_ZN31OnboardThermistorCurrentLimiterC2ERK26ThermistorHardwareConfig_tRNS_8Config_tE
 612              		.syntax unified
 613              		.thumb
 614              		.thumb_func
 615              		.fpu fpv4-sp-d16
 617              	_ZN31OnboardThermistorCurrentLimiterC2ERK26ThermistorHardwareConfig_tRNS_8Config_tE:
 618              	.LVL38:
ARM GAS  /tmp/ccNuAypp.s 			page 20


 619              	.LFB4829:
  70:Src/thermistor.cpp **** 
  71:Src/thermistor.cpp **** OnboardThermistorCurrentLimiter::OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& 
 620              		.loc 1 71 1 is_stmt 1 view -0
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 0
 623              		@ frame_needed = 0, uses_anonymous_args = 0
 624              		@ link register save eliminated.
 625              		.loc 1 71 1 is_stmt 0 view .LVU144
 626 0000 70B4     		push	{r4, r5, r6}
 627              	.LCFI6:
 628              		.cfi_def_cfa_offset 12
 629              		.cfi_offset 4, -12
 630              		.cfi_offset 5, -8
 631              		.cfi_offset 6, -4
 632              	.LBB78:
  72:Src/thermistor.cpp ****     ThermistorCurrentLimiter(hw_config.adc_ch,
  73:Src/thermistor.cpp ****                              hw_config.coeffs,
  74:Src/thermistor.cpp ****                              hw_config.aux_coefficients,
  75:Src/thermistor.cpp ****                              hw_config.num_coeffs,
 633              		.loc 1 75 40 view .LVU145
 634 0002 D1E90154 		ldrd	r5, r4, [r1, #4]
 635              	.LVL39:
  73:Src/thermistor.cpp ****                              hw_config.aux_coefficients,
 636              		.loc 1 73 40 view .LVU146
 637 0006 0E68     		ldr	r6, [r1]
 638              	.LVL40:
 639              	.LBB79:
 640              	.LBI79:
   8:Src/thermistor.cpp ****                                                    const float* const coefficients,
 641              		.loc 1 8 1 is_stmt 1 view .LVU147
 642              	.LBB80:
 643              	.LBB81:
 644              	.LBI81:
   6:Inc/current_limiter.hpp **** public:
 645              		.loc 4 6 7 view .LVU148
   6:Inc/current_limiter.hpp **** public:
 646              		.loc 4 6 7 is_stmt 0 view .LVU149
 647              	.LBE81:
 648              	.LBE80:
 649              	.LBE79:
  76:Src/thermistor.cpp ****                              config.temp_limit_lower,
  77:Src/thermistor.cpp ****                              config.temp_limit_upper,
  78:Src/thermistor.cpp ****                              config.enabled),
  79:Src/thermistor.cpp ****     config_(config)
 650              		.loc 1 79 19 view .LVU150
 651 0008 8263     		str	r2, [r0, #56]
 652 000a C968     		ldr	r1, [r1, #12]
 653              	.LVL41:
 654              	.LBB87:
 655              	.LBB82:
  23:Src/thermistor.cpp **** {
 656              		.loc 1 23 22 view .LVU151
 657 000c 0461     		str	r4, [r0, #16]
 658 000e 4262     		str	r2, [r0, #36]
 659              	.LBE82:
 660              	.LBE87:
ARM GAS  /tmp/ccNuAypp.s 			page 21


  77:Src/thermistor.cpp ****                              config.enabled),
 661              		.loc 1 77 37 view .LVU152
 662 0010 141D     		adds	r4, r2, #4
 663              	.LVL42:
  78:Src/thermistor.cpp ****     config_(config)
 664              		.loc 1 78 37 view .LVU153
 665 0012 0832     		adds	r2, r2, #8
 666              	.LVL43:
 667              	.LBB88:
 668              	.LBB83:
  23:Src/thermistor.cpp **** {
 669              		.loc 1 23 22 view .LVU154
 670 0014 DFF824C0 		ldr	ip, .L34+4
 671              	.LBE83:
 672              	.LBE88:
 673              		.loc 1 79 19 view .LVU155
 674 0018 8180     		strh	r1, [r0, #4]	@ movhi
 675              	.LBB89:
 676              	.LBB84:
  23:Src/thermistor.cpp **** {
 677              		.loc 1 23 22 view .LVU156
 678 001a C262     		str	r2, [r0, #44]
 679 001c 0021     		movs	r1, #0
 680              	.LBE84:
 681              	.LBE89:
 682              		.loc 1 79 19 view .LVU157
 683 001e 064A     		ldr	r2, .L34
 684              	.LVL44:
 685              	.LBB90:
 686              	.LBB85:
  23:Src/thermistor.cpp **** {
 687              		.loc 1 23 22 view .LVU158
 688 0020 8462     		str	r4, [r0, #40]
 689 0022 C0E90265 		strd	r6, r5, [r0, #8]
 690 0026 C0F814C0 		str	ip, [r0, #20]	@ float
 691              	.LBE85:
 692              	.LBE90:
 693              	.LBE78:
  80:Src/thermistor.cpp **** {
  81:Src/thermistor.cpp **** }
 694              		.loc 1 81 1 view .LVU159
 695 002a 70BC     		pop	{r4, r5, r6}
 696              	.LCFI7:
 697              		.cfi_restore 6
 698              		.cfi_restore 5
 699              		.cfi_restore 4
 700              		.cfi_def_cfa_offset 0
 701              	.LVL45:
 702              	.LBB92:
 703              	.LBB91:
 704              	.LBB86:
  23:Src/thermistor.cpp **** {
 705              		.loc 1 23 22 view .LVU160
 706 002c 80F83010 		strb	r1, [r0, #48]
 707 0030 4163     		str	r1, [r0, #52]
 708              	.LVL46:
  23:Src/thermistor.cpp **** {
ARM GAS  /tmp/ccNuAypp.s 			page 22


 709              		.loc 1 23 22 view .LVU161
 710              	.LBE86:
 711              	.LBE91:
  79:Src/thermistor.cpp **** {
 712              		.loc 1 79 19 view .LVU162
 713 0032 0260     		str	r2, [r0]
 714              	.LBE92:
 715              		.loc 1 81 1 view .LVU163
 716 0034 7047     		bx	lr
 717              	.L35:
 718 0036 00BF     		.align	2
 719              	.L34:
 720 0038 08000000 		.word	_ZTV31OnboardThermistorCurrentLimiter+8
 721 003c 0000C07F 		.word	2143289344
 722              		.cfi_endproc
 723              	.LFE4829:
 725              		.global	_ZN31OnboardThermistorCurrentLimiterC1ERK26ThermistorHardwareConfig_tRNS_8Config_tE
 726              		.thumb_set _ZN31OnboardThermistorCurrentLimiterC1ERK26ThermistorHardwareConfig_tRNS_8Config_tE,_ZN
 727              		.section	.text._ZN32OffboardThermistorCurrentLimiterC2ERNS_8Config_tE,"ax",%progbits
 728              		.align	1
 729              		.p2align 2,,3
 730              		.global	_ZN32OffboardThermistorCurrentLimiterC2ERNS_8Config_tE
 731              		.syntax unified
 732              		.thumb
 733              		.thumb_func
 734              		.fpu fpv4-sp-d16
 736              	_ZN32OffboardThermistorCurrentLimiterC2ERNS_8Config_tE:
 737              	.LVL47:
 738              	.LFB4832:
  82:Src/thermistor.cpp **** 
  83:Src/thermistor.cpp **** OffboardThermistorCurrentLimiter::OffboardThermistorCurrentLimiter(Config_t& config) :
 739              		.loc 1 83 1 is_stmt 1 view -0
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
 743              		@ link register save eliminated.
 744              	.LBB93:
 745              	.LBB94:
 746              	.LBI94:
   8:Src/thermistor.cpp ****                                                    const float* const coefficients,
 747              		.loc 1 8 1 view .LVU165
 748              	.LBB95:
 749              	.LBB96:
 750              	.LBI96:
   6:Inc/current_limiter.hpp **** public:
 751              		.loc 4 6 7 view .LVU166
   6:Inc/current_limiter.hpp **** public:
 752              		.loc 4 6 7 is_stmt 0 view .LVU167
 753              	.LBE96:
 754              	.LBE95:
 755              	.LBE94:
 756              	.LBE93:
 757              		.loc 1 83 1 view .LVU168
 758 0000 10B4     		push	{r4}
 759              	.LCFI8:
 760              		.cfi_def_cfa_offset 4
 761              		.cfi_offset 4, -4
ARM GAS  /tmp/ccNuAypp.s 			page 23


 762              	.LBB114:
 763              	.LBB105:
 764              	.LBB97:
  23:Src/thermistor.cpp **** {
 765              		.loc 1 23 22 view .LVU169
 766 0002 0F4C     		ldr	r4, .L38
 767 0004 4461     		str	r4, [r0, #20]	@ float
 768              	.LBE97:
 769              	.LBE105:
  84:Src/thermistor.cpp ****     ThermistorCurrentLimiter(UINT16_MAX,
  85:Src/thermistor.cpp ****                              &config.thermistor_poly_coeffs[0],
  86:Src/thermistor.cpp ****                              &config.thermistor_poly_coeffs2[0],
  87:Src/thermistor.cpp ****                              num_coeffs_,
  88:Src/thermistor.cpp ****                              config.temp_limit_lower,
 770              		.loc 1 88 37 view .LVU170
 771 0006 01F12404 		add	r4, r1, #36
 772              	.LVL48:
 773              	.LBB106:
 774              	.LBB98:
  23:Src/thermistor.cpp **** {
 775              		.loc 1 23 22 view .LVU171
 776 000a 4462     		str	r4, [r0, #36]
 777              	.LBE98:
 778              	.LBE106:
  89:Src/thermistor.cpp ****                              config.temp_limit_upper,
 779              		.loc 1 89 37 view .LVU172
 780 000c 01F12804 		add	r4, r1, #40
 781              	.LVL49:
 782              	.LBB107:
 783              	.LBB99:
  23:Src/thermistor.cpp **** {
 784              		.loc 1 23 22 view .LVU173
 785 0010 0022     		movs	r2, #0
 786 0012 8462     		str	r4, [r0, #40]
 787              	.LBE99:
 788              	.LBE107:
  90:Src/thermistor.cpp ****                              config.enabled),
 789              		.loc 1 90 37 view .LVU174
 790 0014 01F12C04 		add	r4, r1, #44
 791              	.LVL50:
 792              	.LBB108:
 793              	.LBB100:
  23:Src/thermistor.cpp **** {
 794              		.loc 1 23 22 view .LVU175
 795 0018 4FF6FF7C 		movw	ip, #65535
 796 001c 8160     		str	r1, [r0, #8]
 797 001e C462     		str	r4, [r0, #44]
 798 0020 80F83020 		strb	r2, [r0, #48]
 799              	.LBE100:
 800              	.LBE108:
  91:Src/thermistor.cpp ****     config_(config)
 801              		.loc 1 91 19 view .LVU176
 802 0024 074C     		ldr	r4, .L38+4
 803              	.LVL51:
 804              	.LBB109:
 805              	.LBB101:
  23:Src/thermistor.cpp **** {
ARM GAS  /tmp/ccNuAypp.s 			page 24


 806              		.loc 1 23 22 view .LVU177
 807 0026 4263     		str	r2, [r0, #52]
 808              	.LVL52:
  23:Src/thermistor.cpp **** {
 809              		.loc 1 23 22 view .LVU178
 810              	.LBE101:
 811              	.LBE109:
 812              		.loc 1 91 19 view .LVU179
 813 0028 8163     		str	r1, [r0, #56]
  92:Src/thermistor.cpp **** {
  93:Src/thermistor.cpp ****     decode_pin();
 814              		.loc 1 93 5 is_stmt 1 view .LVU180
 815              	.LVL53:
 816              	.LBB110:
 817              	.LBI110:
  94:Src/thermistor.cpp **** }
  95:Src/thermistor.cpp **** 
  96:Src/thermistor.cpp **** void OffboardThermistorCurrentLimiter::decode_pin() {
 818              		.loc 1 96 6 view .LVU181
 819              		.loc 1 96 6 is_stmt 0 view .LVU182
 820              	.LBE110:
 821              	.LBB111:
 822              	.LBB102:
  23:Src/thermistor.cpp **** {
 823              		.loc 1 23 22 view .LVU183
 824 002a 0422     		movs	r2, #4
 825              	.LBE102:
 826              	.LBE111:
  86:Src/thermistor.cpp ****                              num_coeffs_,
 827              		.loc 1 86 30 view .LVU184
 828 002c 1031     		adds	r1, r1, #16
 829              	.LVL54:
  91:Src/thermistor.cpp **** {
 830              		.loc 1 91 19 view .LVU185
 831 002e 0460     		str	r4, [r0]
 832              	.LBB112:
 833              	.LBB103:
  23:Src/thermistor.cpp **** {
 834              		.loc 1 23 22 view .LVU186
 835 0030 A0F804C0 		strh	ip, [r0, #4]	@ movhi
 836              	.LBE103:
 837              	.LBE112:
 838              	.LBE114:
  94:Src/thermistor.cpp **** 
 839              		.loc 1 94 1 view .LVU187
 840 0034 5DF8044B 		ldr	r4, [sp], #4
 841              	.LCFI9:
 842              		.cfi_restore 4
 843              		.cfi_def_cfa_offset 0
 844              	.LBB115:
 845              	.LBB113:
 846              	.LBB104:
  23:Src/thermistor.cpp **** {
 847              		.loc 1 23 22 view .LVU188
 848 0038 C160     		str	r1, [r0, #12]
 849 003a 0261     		str	r2, [r0, #16]
 850              	.LBE104:
ARM GAS  /tmp/ccNuAypp.s 			page 25


 851              	.LBE113:
 852              	.LBE115:
  94:Src/thermistor.cpp **** 
 853              		.loc 1 94 1 view .LVU189
 854 003c 7047     		bx	lr
 855              	.L39:
 856 003e 00BF     		.align	2
 857              	.L38:
 858 0040 0000C07F 		.word	2143289344
 859 0044 08000000 		.word	_ZTV32OffboardThermistorCurrentLimiter+8
 860              		.cfi_endproc
 861              	.LFE4832:
 863              		.global	_ZN32OffboardThermistorCurrentLimiterC1ERNS_8Config_tE
 864              		.thumb_set _ZN32OffboardThermistorCurrentLimiterC1ERNS_8Config_tE,_ZN32OffboardThermistorCurrentLi
 865              		.section	.text._ZN32OffboardThermistorCurrentLimiter10decode_pinEv,"ax",%progbits
 866              		.align	1
 867              		.p2align 2,,3
 868              		.global	_ZN32OffboardThermistorCurrentLimiter10decode_pinEv
 869              		.syntax unified
 870              		.thumb
 871              		.thumb_func
 872              		.fpu fpv4-sp-d16
 874              	_ZN32OffboardThermistorCurrentLimiter10decode_pinEv:
 875              	.LVL55:
 876              	.LFB4834:
 877              		.loc 1 96 53 is_stmt 1 view -0
 878              		.cfi_startproc
 879              		@ args = 0, pretend = 0, frame = 0
 880              		@ frame_needed = 0, uses_anonymous_args = 0
 881              		@ link register save eliminated.
  97:Src/thermistor.cpp **** 
  98:Src/thermistor.cpp **** }
 882              		.loc 1 98 1 is_stmt 0 view .LVU191
 883 0000 7047     		bx	lr
 884              		.cfi_endproc
 885              	.LFE4834:
 887              		.global	_ZTV24ThermistorCurrentLimiter
 888              		.weak	_ZTV31OnboardThermistorCurrentLimiter
 889 0002 00BF     		.section	.rodata._ZTV31OnboardThermistorCurrentLimiter,"aG",%progbits,_ZTV31OnboardThermistorCurre
 890              		.align	2
 893              	_ZTV31OnboardThermistorCurrentLimiter:
 894 0000 00000000 		.word	0
 895 0004 00000000 		.word	0
 896 0008 00000000 		.word	_ZN31OnboardThermistorCurrentLimiterD1Ev
 897 000c 00000000 		.word	_ZN31OnboardThermistorCurrentLimiterD0Ev
 898 0010 00000000 		.word	_ZNK24ThermistorCurrentLimiter17get_current_limitEf
 899              		.weak	_ZTV32OffboardThermistorCurrentLimiter
 900              		.section	.rodata._ZTV32OffboardThermistorCurrentLimiter,"aG",%progbits,_ZTV32OffboardThermistorCur
 901              		.align	2
 904              	_ZTV32OffboardThermistorCurrentLimiter:
 905 0000 00000000 		.word	0
 906 0004 00000000 		.word	0
 907 0008 00000000 		.word	_ZN32OffboardThermistorCurrentLimiterD1Ev
 908 000c 00000000 		.word	_ZN32OffboardThermistorCurrentLimiterD0Ev
 909 0010 00000000 		.word	_ZNK24ThermistorCurrentLimiter17get_current_limitEf
 910              		.section	.rodata._ZTV24ThermistorCurrentLimiter,"a"
 911              		.align	2
ARM GAS  /tmp/ccNuAypp.s 			page 26


 912              		.set	.LANCHOR0,. + 0
 915              	_ZTV24ThermistorCurrentLimiter:
 916 0000 00000000 		.word	0
 917 0004 00000000 		.word	0
 918 0008 00000000 		.word	_ZN24ThermistorCurrentLimiterD1Ev
 919 000c 00000000 		.word	_ZN24ThermistorCurrentLimiterD0Ev
 920 0010 00000000 		.word	_ZNK24ThermistorCurrentLimiter17get_current_limitEf
 921              		.text
 922              	.Letext0:
 923              		.file 5 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_type
 924              		.file 6 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 925              		.file 7 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdint.h"
 926              		.file 8 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 927              		.file 9 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/lib/gcc/arm-none-eabi/10.2.1/include/stddef
 928              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 929              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
 930              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_tim.h"
 931              		.file 13 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 932              		.file 14 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 933              		.file 15 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 934              		.file 16 "Inc/mc_type.h"
 935              		.file 17 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath"
 936              		.file 18 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-
 937              		.file 19 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/type_trai
 938              		.file 20 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/debug/deb
 939              		.file 21 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_
 940              		.file 22 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/exce
 941              		.file 23 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/enab
 942              		.file 24 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional"
 943              		.file 25 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/tr1/speci
 944              		.file 26 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant"
 945              		.file 27 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 946              		.file 28 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_
 947              		.file 29 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdlib"
 948              		.file 30 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/algo
 949              		.file 31 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/functiona
 950              		.file 32 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array"
 951              		.file 33 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 952              		.file 34 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/refw
 953              		.file 35 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdint"
 954              		.file 36 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pars
 955              		.file 37 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pred
 956              		.file 38 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/math.h"
 957              		.file 39 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdlib.h"
 958              		.file 40 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/math.h"
 959              		.file 41 "Inc/main.h"
 960              		.file 42 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 961              		.file 43 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 962              		.file 44 "Inc/interfaces.hpp"
 963              		.file 45 "Inc/task_timer.hpp"
 964              		.file 46 "Inc/component.hpp"
 965              		.file 47 "Inc/utils.hpp"
 966              		.file 48 "Inc/axis.hpp"
 967              		.file 49 "Inc/motor.hpp"
 968              		.file 50 "Inc/low_level.h"
 969              		.file 51 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new"
 970              		.file 52 "<built-in>"
ARM GAS  /tmp/ccNuAypp.s 			page 27


ARM GAS  /tmp/ccNuAypp.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 thermistor.cpp
     /tmp/ccNuAypp.s:18     .text._ZNK24ThermistorCurrentLimiter17get_current_limitEf:0000000000000000 $t
     /tmp/ccNuAypp.s:27     .text._ZNK24ThermistorCurrentLimiter17get_current_limitEf:0000000000000000 _ZNK24ThermistorCurrentLimiter17get_current_limitEf
     /tmp/ccNuAypp.s:121    .text._ZNK24ThermistorCurrentLimiter17get_current_limitEf:000000000000005c $d
     /tmp/ccNuAypp.s:126    .text._ZN24ThermistorCurrentLimiterD2Ev:0000000000000000 $t
     /tmp/ccNuAypp.s:134    .text._ZN24ThermistorCurrentLimiterD2Ev:0000000000000000 _ZN24ThermistorCurrentLimiterD2Ev
     /tmp/ccNuAypp.s:134    .text._ZN24ThermistorCurrentLimiterD2Ev:0000000000000000 _ZN24ThermistorCurrentLimiterD1Ev
     /tmp/ccNuAypp.s:157    .text._ZN32OffboardThermistorCurrentLimiterD2Ev:0000000000000000 $t
     /tmp/ccNuAypp.s:165    .text._ZN32OffboardThermistorCurrentLimiterD2Ev:0000000000000000 _ZN32OffboardThermistorCurrentLimiterD2Ev
     /tmp/ccNuAypp.s:165    .text._ZN32OffboardThermistorCurrentLimiterD2Ev:0000000000000000 _ZN32OffboardThermistorCurrentLimiterD1Ev
     /tmp/ccNuAypp.s:190    .text._ZN31OnboardThermistorCurrentLimiterD2Ev:0000000000000000 $t
     /tmp/ccNuAypp.s:198    .text._ZN31OnboardThermistorCurrentLimiterD2Ev:0000000000000000 _ZN31OnboardThermistorCurrentLimiterD2Ev
     /tmp/ccNuAypp.s:198    .text._ZN31OnboardThermistorCurrentLimiterD2Ev:0000000000000000 _ZN31OnboardThermistorCurrentLimiterD1Ev
     /tmp/ccNuAypp.s:223    .text._ZN24ThermistorCurrentLimiterD0Ev:0000000000000000 $t
     /tmp/ccNuAypp.s:231    .text._ZN24ThermistorCurrentLimiterD0Ev:0000000000000000 _ZN24ThermistorCurrentLimiterD0Ev
     /tmp/ccNuAypp.s:267    .text._ZN31OnboardThermistorCurrentLimiterD0Ev:0000000000000000 $t
     /tmp/ccNuAypp.s:275    .text._ZN31OnboardThermistorCurrentLimiterD0Ev:0000000000000000 _ZN31OnboardThermistorCurrentLimiterD0Ev
     /tmp/ccNuAypp.s:315    .text._ZN32OffboardThermistorCurrentLimiterD0Ev:0000000000000000 $t
     /tmp/ccNuAypp.s:323    .text._ZN32OffboardThermistorCurrentLimiterD0Ev:0000000000000000 _ZN32OffboardThermistorCurrentLimiterD0Ev
     /tmp/ccNuAypp.s:363    .text._ZN24ThermistorCurrentLimiterC2EtPKfS1_jRS0_S2_RKb:0000000000000000 $t
     /tmp/ccNuAypp.s:371    .text._ZN24ThermistorCurrentLimiterC2EtPKfS1_jRS0_S2_RKb:0000000000000000 _ZN24ThermistorCurrentLimiterC2EtPKfS1_jRS0_S2_RKb
     /tmp/ccNuAypp.s:424    .text._ZN24ThermistorCurrentLimiterC2EtPKfS1_jRS0_S2_RKb:0000000000000028 $d
     /tmp/ccNuAypp.s:371    .text._ZN24ThermistorCurrentLimiterC2EtPKfS1_jRS0_S2_RKb:0000000000000000 _ZN24ThermistorCurrentLimiterC1EtPKfS1_jRS0_S2_RKb
     /tmp/ccNuAypp.s:432    .text._ZN24ThermistorCurrentLimiter6updateEv:0000000000000000 $t
     /tmp/ccNuAypp.s:440    .text._ZN24ThermistorCurrentLimiter6updateEv:0000000000000000 _ZN24ThermistorCurrentLimiter6updateEv
     /tmp/ccNuAypp.s:525    .text._ZN24ThermistorCurrentLimiter6updateEv:0000000000000050 $d
     /tmp/ccNuAypp.s:530    .text._ZN24ThermistorCurrentLimiter9do_checksEv:0000000000000000 $t
     /tmp/ccNuAypp.s:538    .text._ZN24ThermistorCurrentLimiter9do_checksEv:0000000000000000 _ZN24ThermistorCurrentLimiter9do_checksEv
     /tmp/ccNuAypp.s:609    .text._ZN31OnboardThermistorCurrentLimiterC2ERK26ThermistorHardwareConfig_tRNS_8Config_tE:0000000000000000 $t
     /tmp/ccNuAypp.s:617    .text._ZN31OnboardThermistorCurrentLimiterC2ERK26ThermistorHardwareConfig_tRNS_8Config_tE:0000000000000000 _ZN31OnboardThermistorCurrentLimiterC2ERK26ThermistorHardwareConfig_tRNS_8Config_tE
     /tmp/ccNuAypp.s:720    .text._ZN31OnboardThermistorCurrentLimiterC2ERK26ThermistorHardwareConfig_tRNS_8Config_tE:0000000000000038 $d
     /tmp/ccNuAypp.s:893    .rodata._ZTV31OnboardThermistorCurrentLimiter:0000000000000000 _ZTV31OnboardThermistorCurrentLimiter
     /tmp/ccNuAypp.s:617    .text._ZN31OnboardThermistorCurrentLimiterC2ERK26ThermistorHardwareConfig_tRNS_8Config_tE:0000000000000000 _ZN31OnboardThermistorCurrentLimiterC1ERK26ThermistorHardwareConfig_tRNS_8Config_tE
     /tmp/ccNuAypp.s:728    .text._ZN32OffboardThermistorCurrentLimiterC2ERNS_8Config_tE:0000000000000000 $t
     /tmp/ccNuAypp.s:736    .text._ZN32OffboardThermistorCurrentLimiterC2ERNS_8Config_tE:0000000000000000 _ZN32OffboardThermistorCurrentLimiterC2ERNS_8Config_tE
     /tmp/ccNuAypp.s:858    .text._ZN32OffboardThermistorCurrentLimiterC2ERNS_8Config_tE:0000000000000040 $d
     /tmp/ccNuAypp.s:904    .rodata._ZTV32OffboardThermistorCurrentLimiter:0000000000000000 _ZTV32OffboardThermistorCurrentLimiter
     /tmp/ccNuAypp.s:736    .text._ZN32OffboardThermistorCurrentLimiterC2ERNS_8Config_tE:0000000000000000 _ZN32OffboardThermistorCurrentLimiterC1ERNS_8Config_tE
     /tmp/ccNuAypp.s:866    .text._ZN32OffboardThermistorCurrentLimiter10decode_pinEv:0000000000000000 $t
     /tmp/ccNuAypp.s:874    .text._ZN32OffboardThermistorCurrentLimiter10decode_pinEv:0000000000000000 _ZN32OffboardThermistorCurrentLimiter10decode_pinEv
     /tmp/ccNuAypp.s:915    .rodata._ZTV24ThermistorCurrentLimiter:0000000000000000 _ZTV24ThermistorCurrentLimiter
     /tmp/ccNuAypp.s:890    .rodata._ZTV31OnboardThermistorCurrentLimiter:0000000000000000 $d
     /tmp/ccNuAypp.s:901    .rodata._ZTV32OffboardThermistorCurrentLimiter:0000000000000000 $d
     /tmp/ccNuAypp.s:911    .rodata._ZTV24ThermistorCurrentLimiter:0000000000000000 $d
                           .group:0000000000000000 _ZN24ThermistorCurrentLimiterD5Ev
                           .group:0000000000000000 _ZN32OffboardThermistorCurrentLimiterD5Ev
                           .group:0000000000000000 _ZN31OnboardThermistorCurrentLimiterD5Ev

UNDEFINED SYMBOLS
_ZdlPv
get_adc_voltage_channel
horner_fma
adc_ref_voltage
