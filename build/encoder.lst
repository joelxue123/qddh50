ARM GAS  /tmp/ccqv0h9S.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"encoder.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._ZnwjPv,"axG",%progbits,_ZnwjPv,comdat
  18              		.align	1
  19              		.weak	_ZnwjPv
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	_ZnwjPv:
  27              	.LFB114:
  28              		.file 1 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // The -*- C++ -*- dynamic memory management header.
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // Copyright (C) 1994-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // This file is part of GCC.
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** //
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // GCC is free software; you can redistribute it and/or modify
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // it under the terms of the GNU General Public License as published by
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // any later version.
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // 
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // GCC is distributed in the hope that it will be useful,
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // GNU General Public License for more details.
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // 
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // 3.1, as published by the Free Software Foundation.
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // You should have received a copy of the GNU General Public License and
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // <http://www.gnu.org/licenses/>.
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** /** @file new
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  This is a Standard C++ Library header.
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  handling memory allocation errors; see
ARM GAS  /tmp/ccqv0h9S.s 			page 2


  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/dynamic_memory.html
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  for more.
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  */
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #ifndef _NEW
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #define _NEW
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #pragma GCC system_header
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #include <bits/c++config.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #include <exception>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #pragma GCC visibility push(default)
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** extern "C++" {
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** namespace std 
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** {
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /**
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  @brief  Exception possibly thrown by @c new.
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  @ingroup exceptions
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  errors from the throwing forms of @c new.  */
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   class bad_alloc : public exception 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   {
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   public:
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_alloc() throw() { }
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_alloc(const bad_alloc&) = default;
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_alloc& operator=(const bad_alloc&) = default;
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // This declaration is not useless:
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual ~bad_alloc() throw();
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // See comment in eh_exception.cc.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual const char* what() const throw();
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   };
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   class bad_array_new_length : public bad_alloc
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   {
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   public:
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_array_new_length() throw() { }
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // This declaration is not useless:
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual ~bad_array_new_length() throw();
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // See comment in eh_exception.cc.
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual const char* what() const throw();
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   };
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 3


  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_aligned_new
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   enum class align_val_t: size_t {};
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   struct nothrow_t
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   {
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     explicit nothrow_t() = default;
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   };
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   extern const nothrow_t nothrow;
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /** If you write your own error handler to be called by @c new, it must
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  be of this type.  */
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   typedef void (*new_handler)();
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /// Takes a replacement handler as the argument, returns the
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /// previous handler.
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   new_handler set_new_handler(new_handler) throw();
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /// Return the current new handler.
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   new_handler get_new_handler() noexcept;
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** } // namespace std
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** //@{
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** /** These are replaceable signatures:
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - normal array new and delete (same)
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *    @c NULL on error)
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - @c nothrow array new and delete (same)
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  Placement new and delete signatures (take a memory address argument,
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  does nothing) may not be replaced by a user's program.
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** */
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_sized_deallocation
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__, __malloc__));
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__, __malloc__));
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
ARM GAS  /tmp/ccqv0h9S.s 			page 4


 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_aligned_new
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::align_val_t)
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::align_val_t, const std::nothrow_t&)
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::align_val_t)
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_sized_deallocation
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::size_t, std::align_val_t)
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::size_t, std::align_val_t)
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif // __cpp_sized_deallocation
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif // __cpp_aligned_new
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // Default placement versions of operator new.
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** { return __p; }
  29              		.loc 1 175 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 7, -4
  38 0002 83B0     		sub	sp, sp, #12
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 16
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 7860     		str	r0, [r7, #4]
  45 0008 3960     		str	r1, [r7]
  46              		.loc 1 175 10
  47 000a 3B68     		ldr	r3, [r7]
  48              		.loc 1 175 15
  49 000c 1846     		mov	r0, r3
  50 000e 0C37     		adds	r7, r7, #12
  51              	.LCFI3:
  52              		.cfi_def_cfa_offset 4
  53 0010 BD46     		mov	sp, r7
  54              	.LCFI4:
ARM GAS  /tmp/ccqv0h9S.s 			page 5


  55              		.cfi_def_cfa_register 13
  56              		@ sp needed
  57 0012 5DF8047B 		ldr	r7, [sp], #4
  58              	.LCFI5:
  59              		.cfi_restore 7
  60              		.cfi_def_cfa_offset 0
  61 0016 7047     		bx	lr
  62              		.cfi_endproc
  63              	.LFE114:
  65              		.section	.text._ZSt26__throw_bad_variant_accessPKc,"axG",%progbits,_ZSt26__throw_bad_variant_acces
  66              		.align	1
  67              		.weak	_ZSt26__throw_bad_variant_accessPKc
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu fpv4-sp-d16
  73              	_ZSt26__throw_bad_variant_accessPKc:
  74              	.LFB422:
  75              		.file 2 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // <variant> -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // Copyright (C) 2016-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** /** @file variant
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****  *  This is the <variant> C++ Library header.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****  */
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #ifndef _GLIBCXX_VARIANT
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define _GLIBCXX_VARIANT 1
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #pragma GCC system_header
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #if __cplusplus >= 201703L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <type_traits>
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <utility>
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/enable_special_members.h>
ARM GAS  /tmp/ccqv0h9S.s 			page 6


  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/functexcept.h>
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/move.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/functional_hash.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/invoke.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <ext/aligned_buffer.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/parse_numbers.h>
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/stl_iterator_base_types.h>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/stl_iterator_base_funcs.h>
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/stl_construct.h>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #if __cplusplus > 201703L
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** # include <compare>
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #endif
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __detail
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __variant
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Nth_type;
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _First, typename... _Rest>
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Nth_type<_Np, _First, _Rest...>
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _Nth_type<_Np-1, _Rest...> { };
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _First, typename... _Rest>
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Nth_type<0, _First, _Rest...>
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = _First; };
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __variant
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __detail
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define __cpp_lib_variant 201606L
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types> class tuple;
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types> class variant;
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename> struct hash;
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size;
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<const _Variant> : variant_size<_Variant> {};
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<volatile _Variant> : variant_size<_Variant> {};
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<const volatile _Variant> : variant_size<_Variant> {};
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<variant<_Types...>>
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : std::integral_constant<size_t, sizeof...(_Types)> {};
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 7


  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr size_t variant_size_v = variant_size<_Variant>::value;
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative;
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _First, typename... _Rest>
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, variant<_First, _Rest...>>
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : variant_alternative<_Np-1, variant<_Rest...>> {};
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _First, typename... _Rest>
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<0, variant<_First, _Rest...>>
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = _First; };
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using variant_alternative_t =
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       typename variant_alternative<_Np, _Variant>::type;
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, const _Variant>
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = add_const_t<variant_alternative_t<_Np, _Variant>>; };
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, volatile _Variant>
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = add_volatile_t<variant_alternative_t<_Np, _Variant>>; };
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, const volatile _Variant>
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = add_cv_t<variant_alternative_t<_Np, _Variant>>; };
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   inline constexpr size_t variant_npos = -1;
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(variant<_Types...>&);
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&&
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(variant<_Types...>&&);
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>> const&
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(const variant<_Types...>&);
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>> const&&
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(const variant<_Types...>&&);
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants>
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __do_visit(_Visitor&& __visitor, _Variants&&... __variants);
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename... _Types, typename _Tp>
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     decltype(auto)
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __variant_cast(_Tp&& __rhs)
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if constexpr (is_lvalue_reference_v<_Tp>)
ARM GAS  /tmp/ccqv0h9S.s 			page 8


 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (is_const_v<remove_reference_t<_Tp>>)
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return static_cast<const variant<_Types...>&>(__rhs);
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return static_cast<variant<_Types...>&>(__rhs);
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       else
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         return static_cast<variant<_Types...>&&>(__rhs);
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __detail
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __variant
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns the first appearence of _Tp in _Types.
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns sizeof...(_Types) if _Tp is not in _Types.
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __index_of : std::integral_constant<size_t, 0> {};
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr size_t __index_of_v = __index_of<_Tp, _Types...>::value;
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _First, typename... _Rest>
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __index_of<_Tp, _First, _Rest...> :
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       std::integral_constant<size_t, is_same_v<_Tp, _First>
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	? 0 : __index_of_v<_Tp, _Rest...> + 1> {};
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // used for raw visitation
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   struct __variant_cookie {};
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // used for raw visitation with indices passed in
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   struct __variant_idx_cookie { using type = __variant_idx_cookie; };
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Used to enable deduction (and same-type checking) for std::visit:
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename> struct __deduce_visit_result { };
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Visit variants that might be valueless.
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Visitor, typename... _Variants>
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr void
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __raw_visit(_Visitor&& __visitor, _Variants&&... __variants)
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       std::__do_visit<__variant_cookie>(std::forward<_Visitor>(__visitor),
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				        std::forward<_Variants>(__variants)...);
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Visit variants that might be valueless, passing indices to the visitor.
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Visitor, typename... _Variants>
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr void
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __raw_idx_visit(_Visitor&& __visitor, _Variants&&... __variants)
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       std::__do_visit<__variant_idx_cookie>(std::forward<_Visitor>(__visitor),
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  std::forward<_Variants>(__variants)...);
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // _Uninitialized<T> is guaranteed to be a trivially destructible type,
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // even if T is not.
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Type, bool = std::is_trivially_destructible_v<_Type>>
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Uninitialized;
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 9


 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Type>
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Uninitialized<_Type, true>
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr const _Type& _M_get() const & noexcept
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr _Type& _M_get() & noexcept
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr const _Type&& _M_get() const && noexcept
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(_M_storage); }
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr _Type&& _M_get() && noexcept
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(_M_storage); }
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Type _M_storage;
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Type>
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Uninitialized<_Type, false>
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  ::new ((void*)std::addressof(_M_storage))
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    _Type(std::forward<_Args>(__args)...);
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       const _Type& _M_get() const & noexcept
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return *_M_storage._M_ptr(); }
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Type& _M_get() & noexcept
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return *_M_storage._M_ptr(); }
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       const _Type&& _M_get() const && noexcept
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(*_M_storage._M_ptr()); }
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Type&& _M_get() && noexcept
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(*_M_storage._M_ptr()); }
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __gnu_cxx::__aligned_membuf<_Type> _M_storage;
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Union>
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __get(in_place_index_t<0>, _Union&& __u) noexcept
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Union>
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
ARM GAS  /tmp/ccqv0h9S.s 			page 10


 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __variant::__get(in_place_index<_Np-1>,
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns the typed storage for __v.
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __get(_Variant&& __v) noexcept
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __variant::__get(std::in_place_index<_Np>,
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Variant>(__v)._M_u);
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Traits
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_default_ctor =
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  is_default_constructible_v<typename _Nth_type<0, _Types...>::type>;
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_copy_ctor =
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_copy_constructible_v<_Types> && ...);
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_move_ctor =
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_move_constructible_v<_Types> && ...);
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_copy_assign =
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_copy_ctor
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_copy_assignable_v<_Types> && ...);
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_move_assign =
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_move_ctor
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_move_assignable_v<_Types> && ...);
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_dtor =
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_trivially_destructible_v<_Types> && ...);
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_copy_ctor =
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_trivially_copy_constructible_v<_Types> && ...);
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_move_ctor =
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_trivially_move_constructible_v<_Types> && ...);
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_copy_assign =
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_trivial_dtor && _S_trivial_copy_ctor
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_trivially_copy_assignable_v<_Types> && ...);
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_move_assign =
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_trivial_dtor && _S_trivial_move_ctor
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_trivially_move_assignable_v<_Types> && ...);
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // The following nothrow traits are for non-trivial SMFs. Trivial SMFs
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // are always nothrow.
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_default_ctor =
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  is_nothrow_default_constructible_v<
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      typename _Nth_type<0, _Types...>::type>;
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_copy_ctor = false;
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_move_ctor =
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_nothrow_move_constructible_v<_Types> && ...);
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_copy_assign = false;
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_move_assign =
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_nothrow_move_ctor
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_nothrow_move_assignable_v<_Types> && ...);
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
ARM GAS  /tmp/ccqv0h9S.s 			page 11


 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Defines members and ctors.
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     union _Variadic_union { };
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _First, typename... _Rest>
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     union _Variadic_union<_First, _Rest...>
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr _Variadic_union() : _M_rest() { }
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Uninitialized<_First> _M_first;
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variadic_union<_Rest...> _M_rest;
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // _Never_valueless_alt is true for variant alternatives that can
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // always be placed in a variant without it becoming valueless.
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // For suitably-small, trivially copyable types we can create temporaries
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // on the stack and then memcpy them into place.
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp>
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Never_valueless_alt
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : __and_<bool_constant<sizeof(_Tp) <= 256>, is_trivially_copyable<_Tp>>
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { };
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Specialize _Never_valueless_alt for other types which have a
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // non-throwing and cheap move construction and move assignment operator,
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // so that emplacing the type will provide the strong exception-safety
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // guarantee, by creating and moving a temporary.
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Whether _Never_valueless_alt<T> is true or not affects the ABI of a
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // variant using that alternative, so we can't change the value later!
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // True if every alternative in _Types... can be emplaced in a variant
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // without it becoming valueless. If this is true, variant<_Types...>
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // can never be valueless, which enables some minor optimizations.
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename... _Types>
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr bool __never_valueless()
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return _Traits<_Types...>::_S_move_assign
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	&& (_Never_valueless_alt<_Types>::value && ...);
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Defines index and the dtor, possibly trivial.
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool __trivially_destructible, typename... _Types>
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_storage;
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename... _Types>
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using __select_index =
ARM GAS  /tmp/ccqv0h9S.s 			page 12


 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       typename __select_int::_Select_int_base<sizeof...(_Types),
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					      unsigned char,
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					      unsigned short>::type::value_type;
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_storage<false, _Types...>
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_storage()
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       : _M_index(static_cast<__index_type>(variant_npos))
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { }
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_index{_Np}
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void _M_reset()
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if (!_M_valid()) [[unlikely]]
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return;
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::__do_visit<void>([](auto&& __this_mem) mutable
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::_Destroy(std::__addressof(__this_mem));
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __variant_cast<_Types...>(*this));
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_index = static_cast<__index_type>(variant_npos);
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ~_Variant_storage()
 414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { _M_reset(); }
 415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void*
 417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_storage() const noexcept
 418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return const_cast<void*>(static_cast<const void*>(
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::addressof(_M_u)));
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr bool
 424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_valid() const noexcept
 425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (__variant::__never_valueless<_Types...>())
 427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return true;
 428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return this->_M_index != __index_type(variant_npos);
 429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variadic_union<_Types...> _M_u;
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using __index_type = __select_index<_Types...>;
 433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __index_type _M_index;
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_storage<true, _Types...>
ARM GAS  /tmp/ccqv0h9S.s 			page 13


 438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr
 440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_storage()
 441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       : _M_index(static_cast<__index_type>(variant_npos))
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { }
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_index{_Np}
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void _M_reset() noexcept
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { _M_index = static_cast<__index_type>(variant_npos); }
 453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void*
 455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_storage() const noexcept
 456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return const_cast<void*>(static_cast<const void*>(
 458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::addressof(_M_u)));
 459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr bool
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_valid() const noexcept
 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (__variant::__never_valueless<_Types...>())
 465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return true;
 466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return this->_M_index != static_cast<__index_type>(variant_npos);
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variadic_union<_Types...> _M_u;
 470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using __index_type = __select_index<_Types...>;
 471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __index_type _M_index;
 472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Variant_storage_alias =
 476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_storage<_Traits<_Types...>::_S_trivial_dtor, _Types...>;
 477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Up>
 479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void* __storage = std::addressof(__lhs._M_u);
 482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Type = remove_reference_t<decltype(__rhs_mem)>;
 483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if constexpr (!is_same_v<_Type, __variant_cookie>)
 484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         ::new (__storage)
 485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types, typename _Tp, typename _Up>
 489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void __variant_construct(_Tp&& __lhs, _Up&& __rhs)
 490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __lhs._M_index = __rhs._M_index;
 492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
 493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(std::forward<_Tp>(__lhs),
ARM GAS  /tmp/ccqv0h9S.s 			page 14


 495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      std::forward<decltype(__rhs_mem)>(__rhs_mem));
 496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}, __variant_cast<_Types...>(std::forward<_Up>(__rhs)));
 497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The following are (Copy|Move) (ctor|assign) layers for forwarding
 500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // triviality and handling non-trivial SMF behaviors.
 501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
 504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Variant_storage_alias<_Types...>;
 506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base(const _Copy_ctor_base& __rhs)
 509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_copy_ctor)
 510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant_construct<_Types...>(*this, __rhs);
 512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base(_Copy_ctor_base&&) = default;
 515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base& operator=(const _Copy_ctor_base&) = default;
 516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base& operator=(_Copy_ctor_base&&) = default;
 517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_ctor_base<true, _Types...> : _Variant_storage_alias<_Types...>
 521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Variant_storage_alias<_Types...>;
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Copy_ctor_alias =
 528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Copy_ctor_base<_Traits<_Types...>::_S_trivial_copy_ctor, _Types...>;
 529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
 532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_ctor_alias<_Types...>;
 534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base(_Move_ctor_base&& __rhs)
 537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_move_ctor)
 538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant_construct<_Types...>(*this, std::move(__rhs));
 540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
 544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, std::forward<_Up>(__rhs));
 547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
ARM GAS  /tmp/ccqv0h9S.s 			page 15


 552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, __rhs);
 555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base(const _Move_ctor_base&) = default;
 559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base& operator=(const _Move_ctor_base&) = default;
 560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base& operator=(_Move_ctor_base&&) = default;
 561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_ctor_base<true, _Types...> : _Copy_ctor_alias<_Types...>
 565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_ctor_alias<_Types...>;
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
 571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, std::forward<_Up>(__rhs));
 574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, __rhs);
 582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Move_ctor_alias =
 588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Move_ctor_base<_Traits<_Types...>::_S_trivial_move_ctor, _Types...>;
 589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_assign_base : _Move_ctor_alias<_Types...>
 592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Move_ctor_alias<_Types...>;
 594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base&
 597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       operator=(const _Copy_assign_base& __rhs)
 598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_copy_assign)
 599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant::__raw_idx_visit(
 601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
 604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
 605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (this->_M_index == __rhs_index)
 606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		else
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
ARM GAS  /tmp/ccqv0h9S.s 			page 16


 609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    using __rhs_type = __remove_cvref_t<decltype(__rhs_mem)>;
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    if constexpr (is_nothrow_copy_constructible_v<__rhs_type>
 611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			|| !is_nothrow_move_constructible_v<__rhs_type>)
 612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // The standard says this->emplace<__rhs_type>(__rhs_mem)
 613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // should be used here, but _M_destructive_copy is
 614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // equivalent in this case. Either copy construction
 615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // doesn't throw, so _M_destructive_copy gives strong
 616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // exception safety guarantee, or both copy construction
 617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // and move construction can throw, so emplace only gives
 618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // basic exception safety anyway.
 619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      this->_M_destructive_copy(__rhs_index, __rhs_mem);
 620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    else
 621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      __variant_cast<_Types...>(*this)
 622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			= variant<_Types...>(std::in_place_index<__rhs_index>,
 623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					     __rhs_mem);
 624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
 625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
 626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    else
 627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
 628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __variant_cast<_Types...>(__rhs));
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return *this;
 630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base(const _Copy_assign_base&) = default;
 633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base(_Copy_assign_base&&) = default;
 634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base& operator=(_Copy_assign_base&&) = default;
 635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_assign_base<true, _Types...> : _Move_ctor_alias<_Types...>
 639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Move_ctor_alias<_Types...>;
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Copy_assign_alias =
 646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base<_Traits<_Types...>::_S_trivial_copy_assign, _Types...>;
 647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_assign_base : _Copy_assign_alias<_Types...>
 650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_assign_alias<_Types...>;
 652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base&
 655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       operator=(_Move_assign_base&& __rhs)
 656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_move_assign)
 657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant::__raw_idx_visit(
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
 661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
 662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
 663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (this->_M_index == __rhs_index)
 664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		else
ARM GAS  /tmp/ccqv0h9S.s 			page 17


 666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant_cast<_Types...>(*this)
 667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
 669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    else
 670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
 671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __variant_cast<_Types...>(__rhs));
 672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return *this;
 673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base(const _Move_assign_base&) = default;
 676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base(_Move_assign_base&&) = default;
 677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base& operator=(const _Move_assign_base&) = default;
 678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_assign_base<true, _Types...> : _Copy_assign_alias<_Types...>
 682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_assign_alias<_Types...>;
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Move_assign_alias =
 689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base<_Traits<_Types...>::_S_trivial_move_assign, _Types...>;
 690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_base : _Move_assign_alias<_Types...>
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Move_assign_alias<_Types...>;
 695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base()
 698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       : _Variant_base(in_place_index<0>) { }
 700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 706:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 707:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base(const _Variant_base&) = default;
 708:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base(_Variant_base&&) = default;
 709:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base& operator=(const _Variant_base&) = default;
 710:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base& operator=(_Variant_base&&) = default;
 711:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 712:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 713:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // For how many times does _Tp appear in _Tuple?
 714:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Tuple>
 715:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __tuple_count;
 716:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 717:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Tuple>
 718:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr size_t __tuple_count_v =
 719:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __tuple_count<_Tp, _Tuple>::value;
 720:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 721:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 722:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __tuple_count<_Tp, tuple<_Types...>>
ARM GAS  /tmp/ccqv0h9S.s 			page 18


 723:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : integral_constant<size_t, 0> { };
 724:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 725:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _First, typename... _Rest>
 726:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __tuple_count<_Tp, tuple<_First, _Rest...>>
 727:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : integral_constant<
 728:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	size_t,
 729:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__tuple_count_v<_Tp, tuple<_Rest...>> + is_same_v<_Tp, _First>> { };
 730:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 731:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // TODO: Reuse this in <tuple> ?
 732:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 733:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr bool __exactly_once =
 734:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __tuple_count_v<_Tp, tuple<_Types...>> == 1;
 735:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 736:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Helper used to check for valid conversions that don't involve narrowing.
 737:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Ti> struct _Arr { _Ti _M_x[1]; };
 738:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 739:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Build an imaginary function FUN(Ti) for each alternative type Ti
 740:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti,
 741:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   bool _Ti_is_cv_bool = is_same_v<remove_cv_t<_Ti>, bool>,
 742:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename = void>
 743:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUN
 744:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 745:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // This function means 'using _Build_FUN<I, T, Ti>::_S_fun;' is valid,
 746:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // but only static functions will be considered in the call below.
 747:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void _S_fun();
 748:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 749:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 750:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // ... for which Ti x[] = {std::forward<T>(t)}; is well-formed,
 751:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti>
 752:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUN<_Ind, _Tp, _Ti, false,
 753:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      void_t<decltype(_Arr<_Ti>{{std::declval<_Tp>()}})>>
 754:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 755:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // This is the FUN function for type _Ti, with index _Ind
 756:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static integral_constant<size_t, _Ind> _S_fun(_Ti);
 757:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 758:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 759:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // ... and if Ti is cv bool, remove_cvref_t<T> is bool.
 760:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti>
 761:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUN<_Ind, _Tp, _Ti, true,
 762:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      enable_if_t<is_same_v<__remove_cvref_t<_Tp>, bool>>>
 763:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 764:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // This is the FUN function for when _Ti is cv bool, with index _Ind
 765:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static integral_constant<size_t, _Ind> _S_fun(_Ti);
 766:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 767:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 768:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant,
 769:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename = make_index_sequence<variant_size_v<_Variant>>>
 770:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUNs;
 771:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 772:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Ti, size_t... _Ind>
 773:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUNs<_Tp, variant<_Ti...>, index_sequence<_Ind...>>
 774:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _Build_FUN<_Ind, _Tp, _Ti>...
 775:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Build_FUN<_Ind, _Tp, _Ti>::_S_fun...;
 777:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The index j of the overload FUN(Tj) selected by overload resolution
ARM GAS  /tmp/ccqv0h9S.s 			page 19


 780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // for FUN(std::forward<_Tp>(t))
 781:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant>
 782:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _FUN_type
 783:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       = decltype(_Build_FUNs<_Tp, _Variant>::_S_fun(std::declval<_Tp>()));
 784:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 785:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The index selected for FUN(std::forward<T>(t)), or variant_npos if none.
 786:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant, typename = void>
 787:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __accepted_index
 788:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : integral_constant<size_t, variant_npos>
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { };
 790:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant>
 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __accepted_index<_Tp, _Variant, void_t<_FUN_type<_Tp, _Variant>>>
 793:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _FUN_type<_Tp, _Variant>
 794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { };
 795:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns the raw storage for __v.
 797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
 798:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void* __get_storage(_Variant&& __v) noexcept
 799:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return __v._M_storage(); }
 800:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 801:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename _Maybe_variant_cookie, typename _Variant>
 802:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Extra_visit_slot_needed
 803:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 804:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename> struct _Variant_never_valueless;
 805:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 806:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Types>
 807:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct _Variant_never_valueless<variant<_Types...>>
 808:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: bool_constant<__variant::__never_valueless<_Types...>()> {};
 809:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 810:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool value =
 811:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	(is_same_v<_Maybe_variant_cookie, __variant_cookie>
 812:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	 || is_same_v<_Maybe_variant_cookie, __variant_idx_cookie>)
 813:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	&& !_Variant_never_valueless<__remove_cvref_t<_Variant>>::value;
 814:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 815:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 816:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Used for storing a multi-dimensional vtable.
 817:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, size_t... _Dimensions>
 818:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Multi_array;
 819:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 820:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Partial specialization with rank zero, stores a single _Tp element.
 821:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp>
 822:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Multi_array<_Tp>
 823:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 824:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename>
 825:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result
 826:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 827:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = _Tp; };
 828:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 829:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Args>
 830:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<const void(*)(_Args...)>
 831:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 832:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = void(*)(_Args...); };
 833:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 834:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Args>
 835:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<__variant_cookie(*)(_Args...)>
 836:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
ARM GAS  /tmp/ccqv0h9S.s 			page 20


 837:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = void(*)(_Args...); };
 838:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 839:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Args>
 840:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<__variant_idx_cookie(*)(_Args...)>
 841:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 842:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = void(*)(_Args...); };
 843:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 844:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename _Res, typename... _Args>
 845:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<__deduce_visit_result<_Res>(*)(_Args...)>
 846:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: true_type
 847:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = _Res(*)(_Args...); };
 848:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 849:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using __result_is_deduced = __untag_result<_Tp>;
 850:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 851:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr const typename __untag_result<_Tp>::element_type&
 852:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_access() const
 853:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_data; }
 854:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 855:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       typename __untag_result<_Tp>::element_type _M_data;
 856:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 857:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 858:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Partial specialization with rank >= 1.
 859:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Ret,
 860:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename _Visitor,
 861:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename... _Variants,
 862:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   size_t __first, size_t... __rest>
 863:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Multi_array<_Ret(*)(_Visitor, _Variants...), __first, __rest...>
 864:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 865:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr size_t __index =
 866:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	sizeof...(_Variants) - sizeof...(__rest) - 1;
 867:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 868:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Variant = typename _Nth_type<__index, _Variants...>::type;
 869:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 870:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr int __do_cookie =
 871:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Extra_visit_slot_needed<_Ret, _Variant>::value ? 1 : 0;
 872:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 873:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Tp = _Ret(*)(_Visitor, _Variants...);
 874:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 875:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 876:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr decltype(auto)
 877:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_access(size_t __first_index, _Args... __rest_indices) const
 878:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 879:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return _M_arr[__first_index + __do_cookie]
 880:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    ._M_access(__rest_indices...);
 881:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 882:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 883:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Multi_array<_Tp, __rest...> _M_arr[__first + __do_cookie];
 884:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 885:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 886:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Creates a multi-dimensional vtable recursively.
 887:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //
 888:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // For example,
 889:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // visit([](auto, auto){},
 890:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //       variant<int, char>(),  // typedef'ed as V1
 891:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //       variant<float, double, long double>())  // typedef'ed as V2
 892:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // will trigger instantiations of:
 893:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 2, 3>,
ARM GAS  /tmp/ccqv0h9S.s 			page 21


 894:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                   tuple<V1&&, V2&&>, std::index_sequence<>>
 895:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //   __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 3>,
 896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                     tuple<V1&&, V2&&>, std::index_sequence<0>>
 897:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 898:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 0>>
 899:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 900:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 1>>
 901:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 902:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 2>>
 903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //   __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 3>,
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                     tuple<V1&&, V2&&>, std::index_sequence<1>>
 905:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 906:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 0>>
 907:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 1>>
 909:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 910:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 2>>
 911:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The returned multi-dimensional vtable can be fast accessed by the visitor
 912:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // using index calculation.
 913:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Array_type, typename _Index_seq>
 914:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable_impl;
 915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 916:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Defines the _S_apply() member that returns a _Multi_array populated
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // with function pointers that perform the visitation expressions e(m)
 918:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // for each valid pack of indexes into the variant types _Variants.
 919:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //
 920:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // This partial specialization builds up the index sequences by recursively
 921:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // calling _S_apply() on the next specialization of __gen_vtable_impl.
 922:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The base case of the recursion defines the actual function pointers.
 923:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, size_t... __dimensions,
 924:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename... _Variants, size_t... __indices>
 925:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable_impl<
 926:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Multi_array<_Result_type (*)(_Visitor, _Variants...), __dimensions...>,
 927:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::index_sequence<__indices...>>
 928:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 929:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Next =
 930:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  remove_reference_t<typename _Nth_type<sizeof...(__indices),
 931:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			     _Variants...>::type>;
 932:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Array_type =
 933:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...),
 934:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		       __dimensions...>;
 935:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 936:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr _Array_type
 937:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _S_apply()
 938:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 939:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Array_type __vtable{};
 940:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_S_apply_all_alts(
 941:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __vtable, make_index_sequence<variant_size_v<_Next>>());
 942:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return __vtable;
 943:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 944:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 945:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t... __var_indices>
 946:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr void
 947:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_S_apply_all_alts(_Array_type& __vtable,
 948:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			  std::index_sequence<__var_indices...>)
 949:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 950:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (_Extra_visit_slot_needed<_Result_type, _Next>::value)
ARM GAS  /tmp/ccqv0h9S.s 			page 22


 951:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    (_S_apply_single_alt<true, __var_indices>(
 952:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __vtable._M_arr[__var_indices + 1],
 953:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      &(__vtable._M_arr[0])), ...);
 954:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 955:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    (_S_apply_single_alt<false, __var_indices>(
 956:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __vtable._M_arr[__var_indices]), ...);
 957:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 958:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 959:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<bool __do_cookie, size_t __index, typename _Tp>
 960:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr void
 961:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_S_apply_single_alt(_Tp& __element, _Tp* __cookie_element = nullptr)
 962:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 963:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__do_cookie)
 964:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
 965:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element = __gen_vtable_impl<
 966:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Tp,
 967:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::index_sequence<__indices..., __index>>::_S_apply();
 968:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      *__cookie_element = __gen_vtable_impl<
 969:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Tp,
 970:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::index_sequence<__indices..., variant_npos>>::_S_apply();
 971:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
 972:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 973:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
 974:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element = __gen_vtable_impl<
 975:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		remove_reference_t<decltype(__element)>,
 976:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::index_sequence<__indices..., __index>>::_S_apply();
 977:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
 978:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 979:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 980:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 981:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // This partial specialization is the base case for the recursion.
 982:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // It populates a _Multi_array element with the address of a function
 983:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // that invokes the visitor with the alternatives specified by __indices.
 984:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants,
 985:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   size_t... __indices>
 986:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable_impl<
 987:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Multi_array<_Result_type (*)(_Visitor, _Variants...)>,
 988:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		   std::index_sequence<__indices...>>
 989:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 990:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Array_type =
 991:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...)>;
 992:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 993:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t __index, typename _Variant>
 994:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr decltype(auto)
 995:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__element_by_index_or_cookie(_Variant&& __var) noexcept
 996:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 997:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__index != variant_npos)
 998:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 999:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1000:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return __variant_cookie{};
1001:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1002:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1003:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr decltype(auto)
1004:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
1005:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
1006:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
1007:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // For raw visitation using indices, pass the indices to the visitor
ARM GAS  /tmp/ccqv0h9S.s 			page 23


1008:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // and discard the return value:
1009:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  std::__invoke(std::forward<_Visitor>(__visitor),
1010:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1011:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::forward<_Variants>(__vars))...,
1012:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      integral_constant<size_t, __indices>()...);
1013:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
1014:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // For raw visitation without indices, and discard the return value:
1015:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  std::__invoke(std::forward<_Visitor>(__visitor),
1016:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1017:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::forward<_Variants>(__vars))...);
1018:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (_Array_type::__result_is_deduced::value)
1019:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // For the usual std::visit case deduce the return value:
1020:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::__invoke(std::forward<_Visitor>(__visitor),
1021:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1022:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::forward<_Variants>(__vars))...);
1023:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else // for std::visit<R> use INVOKE<R>
1024:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::__invoke_r<_Result_type>(
1025:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      std::forward<_Visitor>(__visitor),
1026:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
1027:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
1028:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1029:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr auto
1030:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _S_apply()
1031:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _Array_type{&__visit_invoke}; }
1032:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
1033:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1034:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants>
1035:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable
1036:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1037:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Array_type =
1038:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...),
1039:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		       variant_size_v<remove_reference_t<_Variants>>...>;
1040:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1041:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr _Array_type _S_vtable
1042:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	= __gen_vtable_impl<_Array_type, std::index_sequence<>>::_S_apply();
1043:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
1044:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1045:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Tp>
1046:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Base_dedup : public _Tp { };
1047:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1048:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant, typename __indices>
1049:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_hash_base;
1050:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1051:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types, size_t... __indices>
1052:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_hash_base<variant<_Types...>,
1053:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::index_sequence<__indices...>>
1054:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _Base_dedup<__indices, __poison_hash<remove_const_t<_Types>>>... { };
1055:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1056:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __variant
1057:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __detail
1058:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1059:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant, typename... _Args>
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
1061:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __v._M_index = _Np;
1063:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ::new ((void*)std::addressof(__storage))
ARM GAS  /tmp/ccqv0h9S.s 			page 24


1065:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
1066:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (std::forward<_Args>(__args)...);
1067:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1068:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1069:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1070:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr bool
1071:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     holds_alternative(const variant<_Types...>& __v) noexcept
1072:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1073:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1074:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1075:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
1076:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1077:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1078:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1079:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr _Tp& get(variant<_Types...>& __v)
1080:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1081:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1082:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1083:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1084:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
1085:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1086:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1087:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1088:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr _Tp&& get(variant<_Types...>&& __v)
1089:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1090:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1091:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1092:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1093:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1094:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::move(__v));
1095:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1096:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1097:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1098:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr const _Tp& get(const variant<_Types...>& __v)
1099:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
1104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr const _Tp&& get(const variant<_Types...>&& __v)
1108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::move(__v));
1114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
1117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr add_pointer_t<variant_alternative_t<_Np, variant<_Types...>>>
1118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(variant<_Types...>* __ptr) noexcept
1119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
1121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(_Np < sizeof...(_Types),
ARM GAS  /tmp/ccqv0h9S.s 			page 25


1122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "The index must be in [0, number of alternatives)");
1123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
1124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if (__ptr && __ptr->index() == _Np)
1125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
1126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return nullptr;
1127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
1130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr
1131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     add_pointer_t<const variant_alternative_t<_Np, variant<_Types...>>>
1132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(const variant<_Types...>* __ptr) noexcept
1133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
1135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(_Np < sizeof...(_Types),
1136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "The index must be in [0, number of alternatives)");
1137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
1138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if (__ptr && __ptr->index() == _Np)
1139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
1140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return nullptr;
1141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr add_pointer_t<_Tp>
1145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(variant<_Types...>* __ptr) noexcept
1146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __ptr);
1152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr add_pointer_t<const _Tp>
1156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(const variant<_Types...>* __ptr) noexcept
1157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __ptr);
1163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   struct monostate { };
1166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP, __NAME) \
1168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types> \
1169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr bool operator __OP(const variant<_Types...>& __lhs, \
1170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				 const variant<_Types...>& __rhs) \
1171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { \
1172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       bool __ret = true; \
1173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __detail::__variant::__raw_idx_visit( \
1174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         [&__ret, &__lhs] (auto&& __rhs_mem, auto __rhs_index) mutable \
1175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         { \
1176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__rhs_index != variant_npos) \
1177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    { \
1178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      if (__lhs.index() == __rhs_index) \
ARM GAS  /tmp/ccqv0h9S.s 			page 26


1179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	        { \
1180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  auto& __this_mem = std::get<__rhs_index>(__lhs);	\
1181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****                   __ret = __this_mem __OP __rhs_mem; \
1182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****                 } \
1183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      else \
1184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		__ret = (__lhs.index() + 1) __OP (__rhs_index + 1); \
1185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****             } \
1186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****           else \
1187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****             __ret = (__lhs.index() + 1) __OP (__rhs_index + 1); \
1188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}, __rhs); \
1189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __ret; \
1190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)
1193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)
1194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(==, equal)
1195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(!=, not_equal)
1196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(>=, greater_equal)
1197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(>, greater)
1198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #undef _VARIANT_RELATION_FUNCTION_TEMPLATE
1200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator==(monostate, monostate) noexcept { return true; }
1202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #ifdef __cpp_lib_three_way_comparison
1204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     requires (three_way_comparable<_Types> && ...)
1206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr
1207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     common_comparison_category_t<compare_three_way_result_t<_Types>...>
1208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     operator<=>(const variant<_Types...>& __v, const variant<_Types...>& __w)
1209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       common_comparison_category_t<compare_three_way_result_t<_Types>...> __ret
1211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	= strong_ordering::equal;
1212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __detail::__variant::__raw_idx_visit(
1214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	[&__ret, &__v] (auto&& __w_mem, auto __w_index) mutable
1215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__w_index != variant_npos)
1217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      if (__v.index() == __w_index)
1219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  auto& __this_mem = std::get<__w_index>(__v);
1221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __ret = __this_mem <=> __w_mem;
1222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  return;
1223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __ret = (__v.index() + 1) <=> (__w_index + 1);
1226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}, __w);
1227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __ret;
1228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr strong_ordering
1231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   operator<=>(monostate, monostate) noexcept { return strong_ordering::equal; }
1232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #else
1233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator!=(monostate, monostate) noexcept { return false; }
1234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator<(monostate, monostate) noexcept { return false; }
1235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator>(monostate, monostate) noexcept { return false; }
ARM GAS  /tmp/ccqv0h9S.s 			page 27


1236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator<=(monostate, monostate) noexcept { return true; }
1237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator>=(monostate, monostate) noexcept { return true; }
1238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #endif
1239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Visitor, typename... _Variants>
1241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto) visit(_Visitor&&, _Variants&&...);
1242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline enable_if_t<(is_move_constructible_v<_Types> && ...)
1245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			&& (is_swappable_v<_Types> && ...)>
1246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     swap(variant<_Types...>& __lhs, variant<_Types...>& __rhs)
1247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     noexcept(noexcept(__lhs.swap(__rhs)))
1248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { __lhs.swap(__rhs); }
1249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     enable_if_t<!((is_move_constructible_v<_Types> && ...)
1252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		   && (is_swappable_v<_Types> && ...))>
1253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     swap(variant<_Types...>&, variant<_Types...>&) = delete;
1254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   class bad_variant_access : public exception
1256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   {
1257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   public:
1258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     bad_variant_access() noexcept { }
1259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     const char* what() const noexcept override
1261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return _M_reason; }
1262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   private:
1264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     bad_variant_access(const char* __reason) noexcept : _M_reason(__reason) { }
1265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     // Must point to a string with static storage duration:
1267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     const char* _M_reason = "bad variant access";
1268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     friend void __throw_bad_variant_access(const char* __what);
1270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   };
1271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Must only be called with a string literal
1273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   inline void
1274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   __throw_bad_variant_access(const char* __what)
1275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
  76              		.loc 2 1275 3
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 8
  79              		@ frame_needed = 1, uses_anonymous_args = 0
  80 0000 80B5     		push	{r7, lr}
  81              	.LCFI6:
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 7, -8
  84              		.cfi_offset 14, -4
  85 0002 82B0     		sub	sp, sp, #8
  86              	.LCFI7:
  87              		.cfi_def_cfa_offset 16
  88 0004 00AF     		add	r7, sp, #0
  89              	.LCFI8:
  90              		.cfi_def_cfa_register 7
  91 0006 7860     		str	r0, [r7, #4]
  92              		.loc 2 1275 5
ARM GAS  /tmp/ccqv0h9S.s 			page 28


  93 0008 FFF7FEFF 		bl	abort
  94              		.cfi_endproc
  95              	.LFE422:
  97              		.section	.rodata
  98              		.align	2
  99              	.LC0:
 100 0000 7374643A 		.ascii	"std::get: variant is valueless\000"
 100      3A676574 
 100      3A207661 
 100      7269616E 
 100      74206973 
 101 001f 00       		.align	2
 102              	.LC1:
 103 0020 7374643A 		.ascii	"std::get: wrong index for variant\000"
 103      3A676574 
 103      3A207772 
 103      6F6E6720 
 103      696E6465 
 104              		.section	.text._ZSt26__throw_bad_variant_accessb,"axG",%progbits,_ZSt26__throw_bad_variant_accessb
 105              		.align	1
 106              		.weak	_ZSt26__throw_bad_variant_accessb
 107              		.syntax unified
 108              		.thumb
 109              		.thumb_func
 110              		.fpu fpv4-sp-d16
 112              	_ZSt26__throw_bad_variant_accessb:
 113              	.LFB423:
1276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   inline void
1278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   __throw_bad_variant_access(bool __valueless)
1279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   {
 114              		.loc 2 1279 3
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 8
 117              		@ frame_needed = 1, uses_anonymous_args = 0
 118 0000 80B5     		push	{r7, lr}
 119              	.LCFI9:
 120              		.cfi_def_cfa_offset 8
 121              		.cfi_offset 7, -8
 122              		.cfi_offset 14, -4
 123 0002 82B0     		sub	sp, sp, #8
 124              	.LCFI10:
 125              		.cfi_def_cfa_offset 16
 126 0004 00AF     		add	r7, sp, #0
 127              	.LCFI11:
 128              		.cfi_def_cfa_register 7
 129 0006 0346     		mov	r3, r0
 130 0008 FB71     		strb	r3, [r7, #7]
1280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     if (__valueless) [[__unlikely__]]
 131              		.loc 2 1280 5
 132 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 133 000c 002B     		cmp	r3, #0
 134 000e 03D0     		beq	.L5
1281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __throw_bad_variant_access("std::get: variant is valueless");
 135              		.loc 2 1281 33 discriminator 1
 136 0010 0548     		ldr	r0, .L8
 137 0012 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessPKc
ARM GAS  /tmp/ccqv0h9S.s 			page 29


1282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     else
1283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __throw_bad_variant_access("std::get: wrong index for variant");
1284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   }
 138              		.loc 2 1284 3 discriminator 1
 139 0016 02E0     		b	.L7
 140              	.L5:
1283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   }
 141              		.loc 2 1283 33
 142 0018 0448     		ldr	r0, .L8+4
 143 001a FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessPKc
 144              	.L7:
 145              		.loc 2 1284 3
 146 001e 00BF     		nop
 147 0020 0837     		adds	r7, r7, #8
 148              	.LCFI12:
 149              		.cfi_def_cfa_offset 8
 150 0022 BD46     		mov	sp, r7
 151              	.LCFI13:
 152              		.cfi_def_cfa_register 13
 153              		@ sp needed
 154 0024 80BD     		pop	{r7, pc}
 155              	.L9:
 156 0026 00BF     		.align	2
 157              	.L8:
 158 0028 00000000 		.word	.LC0
 159 002c 20000000 		.word	.LC1
 160              		.cfi_endproc
 161              	.LFE423:
 163              		.section	.rodata._ZL16OFFSET_TAB_CCMRx,"a"
 164              		.align	2
 167              	_ZL16OFFSET_TAB_CCMRx:
 168 0000 00000000 		.ascii	"\000\000\000\000\004\004\004\00488"
 168      04040404 
 168      3838
 169              		.section	.rodata._ZL14SHIFT_TAB_OCxx,"a"
 170              		.align	2
 173              	_ZL14SHIFT_TAB_OCxx:
 174 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\010"
 174      00000800 
 174      0008
 175              		.section	.rodata._ZL14SHIFT_TAB_ICxx,"a"
 176              		.align	2
 179              	_ZL14SHIFT_TAB_ICxx:
 180 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\000"
 180      00000800 
 180      0000
 181              		.section	.rodata._ZL14SHIFT_TAB_CCxP,"a"
 182              		.align	2
 185              	_ZL14SHIFT_TAB_CCxP:
 186 0000 00020406 		.ascii	"\000\002\004\006\010\012\014\016\020\024"
 186      080A0C0E 
 186      1014
 187              		.section	.rodata._ZL14SHIFT_TAB_OISx,"a"
 188              		.align	2
 191              	_ZL14SHIFT_TAB_OISx:
 192 0000 00010203 		.ascii	"\000\001\002\003\004\005\006\007\010\012"
 192      04050607 
ARM GAS  /tmp/ccqv0h9S.s 			page 30


 192      080A
 193              		.section	.rodata._ZL19USART_PRESCALER_TAB,"a"
 194              		.align	2
 197              	_ZL19USART_PRESCALER_TAB:
 198 0000 01000000 		.word	1
 199 0004 02000000 		.word	2
 200 0008 04000000 		.word	4
 201 000c 06000000 		.word	6
 202 0010 08000000 		.word	8
 203 0014 0A000000 		.word	10
 204 0018 0C000000 		.word	12
 205 001c 10000000 		.word	16
 206 0020 20000000 		.word	32
 207 0024 40000000 		.word	64
 208 0028 80000000 		.word	128
 209 002c 00010000 		.word	256
 210              		.section	.rodata._ZL18CHANNEL_OFFSET_TAB,"a"
 211              		.align	2
 214              	_ZL18CHANNEL_OFFSET_TAB:
 215 0000 081C3044 		.ascii	"\010\0340DXl"
 215      586C
 216              		.section	.text._ZSt3absl,"axG",%progbits,_ZSt3absl,comdat
 217              		.align	1
 218              		.weak	_ZSt3absl
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu fpv4-sp-d16
 224              	_ZSt3absl:
 225              	.LFB2612:
 226              		.file 3 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_a
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // -*- C++ -*- C library enhancements header.
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // Copyright (C) 2016-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** /** @file include/bits/std_abs.h
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****  *  This is an internal header file, included by other library headers.
ARM GAS  /tmp/ccqv0h9S.s 			page 31


  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****  *  Do not attempt to use it directly. @headername{cmath, cstdlib}
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****  */
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifndef _GLIBCXX_BITS_STD_ABS_H
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #define _GLIBCXX_BITS_STD_ABS_H
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #pragma GCC system_header
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #include <bits/c++config.h>
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #include_next <stdlib.h>
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifdef __CORRECT_ISO_CPP_MATH_H_PROTO
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** # include_next <math.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #endif
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #undef abs
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** extern "C++"
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** {
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** namespace std _GLIBCXX_VISIBILITY(default)
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** {
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   using ::abs;
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   inline long
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   abs(long __i) { return __builtin_labs(__i); }
 227              		.loc 3 56 17
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 8
 230              		@ frame_needed = 1, uses_anonymous_args = 0
 231              		@ link register save eliminated.
 232 0000 80B4     		push	{r7}
 233              	.LCFI14:
 234              		.cfi_def_cfa_offset 4
 235              		.cfi_offset 7, -4
 236 0002 83B0     		sub	sp, sp, #12
 237              	.LCFI15:
 238              		.cfi_def_cfa_offset 16
 239 0004 00AF     		add	r7, sp, #0
 240              	.LCFI16:
 241              		.cfi_def_cfa_register 7
 242 0006 7860     		str	r0, [r7, #4]
 243              		.loc 3 56 44
 244 0008 7B68     		ldr	r3, [r7, #4]
 245 000a 002B     		cmp	r3, #0
 246 000c B8BF     		it	lt
 247 000e 5B42     		rsblt	r3, r3, #0
 248              		.loc 3 56 47
 249 0010 1846     		mov	r0, r3
 250 0012 0C37     		adds	r7, r7, #12
 251              	.LCFI17:
 252              		.cfi_def_cfa_offset 4
 253 0014 BD46     		mov	sp, r7
ARM GAS  /tmp/ccqv0h9S.s 			page 32


 254              	.LCFI18:
 255              		.cfi_def_cfa_register 13
 256              		@ sp needed
 257 0016 5DF8047B 		ldr	r7, [sp], #4
 258              	.LCFI19:
 259              		.cfi_restore 7
 260              		.cfi_def_cfa_offset 0
 261 001a 7047     		bx	lr
 262              		.cfi_endproc
 263              	.LFE2612:
 265              		.section	.text._ZSt3absf,"axG",%progbits,_ZSt3absf,comdat
 266              		.align	1
 267              		.weak	_ZSt3absf
 268              		.syntax unified
 269              		.thumb
 270              		.thumb_func
 271              		.fpu fpv4-sp-d16
 273              	_ZSt3absf:
 274              	.LFB2615:
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #endif
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifdef _GLIBCXX_USE_LONG_LONG
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   inline long long
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   abs(long long __x) { return __builtin_llabs (__x); }
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #endif
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // _GLIBCXX_RESOLVE_LIB_DEFECTS
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // 2192. Validity and return type of std::abs(0u) is unclear
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // 2294. <cstdlib> should declare abs(double)
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // 2735. std::abs(short), std::abs(signed char) and others should return int
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   inline _GLIBCXX_CONSTEXPR double
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   abs(double __x)
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   { return __builtin_fabs(__x); }
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   inline _GLIBCXX_CONSTEXPR float
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   abs(float __x)
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   { return __builtin_fabsf(__x); }
 275              		.loc 3 76 3
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 8
 278              		@ frame_needed = 1, uses_anonymous_args = 0
 279              		@ link register save eliminated.
 280 0000 80B4     		push	{r7}
 281              	.LCFI20:
 282              		.cfi_def_cfa_offset 4
 283              		.cfi_offset 7, -4
 284 0002 83B0     		sub	sp, sp, #12
 285              	.LCFI21:
 286              		.cfi_def_cfa_offset 16
 287 0004 00AF     		add	r7, sp, #0
 288              	.LCFI22:
 289              		.cfi_def_cfa_register 7
 290 0006 87ED010A 		vstr.32	s0, [r7, #4]
 291              		.loc 3 76 31
 292 000a D7ED017A 		vldr.32	s15, [r7, #4]
ARM GAS  /tmp/ccqv0h9S.s 			page 33


 293 000e F0EEE77A 		vabs.f32	s15, s15
 294              		.loc 3 76 34
 295 0012 B0EE670A 		vmov.f32	s0, s15
 296 0016 0C37     		adds	r7, r7, #12
 297              	.LCFI23:
 298              		.cfi_def_cfa_offset 4
 299 0018 BD46     		mov	sp, r7
 300              	.LCFI24:
 301              		.cfi_def_cfa_register 13
 302              		@ sp needed
 303 001a 5DF8047B 		ldr	r7, [sp], #4
 304              	.LCFI25:
 305              		.cfi_restore 7
 306              		.cfi_def_cfa_offset 0
 307 001e 7047     		bx	lr
 308              		.cfi_endproc
 309              	.LFE2615:
 311              		.section	.text._ZSt5floorf,"axG",%progbits,_ZSt5floorf,comdat
 312              		.align	1
 313              		.weak	_ZSt5floorf
 314              		.syntax unified
 315              		.thumb
 316              		.thumb_func
 317              		.fpu fpv4-sp-d16
 319              	_ZSt5floorf:
 320              	.LFB2644:
 321              		.file 4 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // -*- C++ -*- C forwarding header.
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** /** @file include/cmath
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  This is a Standard C++ Library file.  You should @c \#include this file
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  in your programs, rather than any of the @a *.h implementation files.
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  This is the C++ version of the Standard C Library header @c math.h,
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  and its contents are (mostly) the same as that header, but are all
ARM GAS  /tmp/ccqv0h9S.s 			page 34


  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  contained in the namespace @c std (except for names which are defined
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  as macros in C).
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  */
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** //
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // ISO C++ 14882: 26.5  C library
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** //
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #pragma GCC system_header
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <bits/c++config.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <bits/cpp_type_traits.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <ext/type_traits.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include_next <math.h>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <bits/std_abs.h>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef _GLIBCXX_CMATH
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #define _GLIBCXX_CMATH 1
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Get rid of those macros defined in <math.h> in lieu of real functions.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef div
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef acos
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef asin
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef atan
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef atan2
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef ceil
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef cos
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef cosh
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef exp
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef fabs
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef floor
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef fmod
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef frexp
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef ldexp
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef log
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef log10
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef modf
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef pow
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef sin
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef sinh
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef sqrt
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef tan
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef tanh
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** extern "C++"
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** {
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** {
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::acos;
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   acos(float __x)
ARM GAS  /tmp/ccqv0h9S.s 			page 35


  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_acosf(__x); }
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   acos(long double __x)
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_acosl(__x); }
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     acos(_Tp __x)
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_acos(__x); }
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::asin;
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   asin(float __x)
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_asinf(__x); }
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   asin(long double __x)
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_asinl(__x); }
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     asin(_Tp __x)
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_asin(__x); }
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::atan;
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan(float __x)
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atanf(__x); }
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan(long double __x)
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atanl(__x); }
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     atan(_Tp __x)
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_atan(__x); }
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::atan2;
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan2(float __y, float __x)
ARM GAS  /tmp/ccqv0h9S.s 			page 36


 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atan2f(__y, __x); }
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan2(long double __y, long double __x)
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atan2l(__y, __x); }
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp, typename _Up>
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     atan2(_Tp __y, _Up __x)
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     {
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       return atan2(__type(__y), __type(__x));
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     }
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::ceil;
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ceil(float __x)
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ceilf(__x); }
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ceil(long double __x)
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ceill(__x); }
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     ceil(_Tp __x)
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_ceil(__x); }
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::cos;
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cos(float __x)
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_cosf(__x); }
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cos(long double __x)
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_cosl(__x); }
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     cos(_Tp __x)
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_cos(__x); }
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::cosh;
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
ARM GAS  /tmp/ccqv0h9S.s 			page 37


 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cosh(float __x)
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_coshf(__x); }
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cosh(long double __x)
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_coshl(__x); }
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     cosh(_Tp __x)
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_cosh(__x); }
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::exp;
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   exp(float __x)
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_expf(__x); }
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   exp(long double __x)
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_expl(__x); }
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     exp(_Tp __x)
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_exp(__x); }
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::fabs;
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fabs(float __x)
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fabsf(__x); }
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fabs(long double __x)
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fabsl(__x); }
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     fabs(_Tp __x)
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_fabs(__x); }
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::floor;
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
ARM GAS  /tmp/ccqv0h9S.s 			page 38


 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   floor(float __x)
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_floorf(__x); }
 322              		.loc 4 261 3
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 8
 325              		@ frame_needed = 1, uses_anonymous_args = 0
 326 0000 80B5     		push	{r7, lr}
 327              	.LCFI26:
 328              		.cfi_def_cfa_offset 8
 329              		.cfi_offset 7, -8
 330              		.cfi_offset 14, -4
 331 0002 82B0     		sub	sp, sp, #8
 332              	.LCFI27:
 333              		.cfi_def_cfa_offset 16
 334 0004 00AF     		add	r7, sp, #0
 335              	.LCFI28:
 336              		.cfi_def_cfa_register 7
 337 0006 87ED010A 		vstr.32	s0, [r7, #4]
 338              		.loc 4 261 28
 339 000a 97ED010A 		vldr.32	s0, [r7, #4]
 340 000e FFF7FEFF 		bl	floorf
 341 0012 F0EE407A 		vmov.f32	s15, s0
 342              		.loc 4 261 35
 343 0016 B0EE670A 		vmov.f32	s0, s15
 344 001a 0837     		adds	r7, r7, #8
 345              	.LCFI29:
 346              		.cfi_def_cfa_offset 8
 347 001c BD46     		mov	sp, r7
 348              	.LCFI30:
 349              		.cfi_def_cfa_register 13
 350              		@ sp needed
 351 001e 80BD     		pop	{r7, pc}
 352              		.cfi_endproc
 353              	.LFE2644:
 355              		.section	.rodata._ZL12one_by_sqrt3,"a"
 356              		.align	2
 359              	_ZL12one_by_sqrt3:
 360 0000 3ACD133F 		.word	1058262330
 361              		.section	.rodata._ZL12two_by_sqrt3,"a"
 362              		.align	2
 365              	_ZL12two_by_sqrt3:
 366 0000 3ACD933F 		.word	1066650938
 367              		.section	.rodata._ZL10sqrt3_by_2,"a"
 368              		.align	2
 371              	_ZL10sqrt3_by_2:
 372 0000 D7B35D3F 		.word	1063105495
 373              		.section	.text.fmodf_pos,"ax",%progbits
 374              		.align	1
 375              		.syntax unified
 376              		.thumb
 377              		.thumb_func
 378              		.fpu fpv4-sp-d16
 380              	fmodf_pos:
 381              	.LFB3402:
 382              		.file 5 "Inc/utils.hpp"
   1:Inc/utils.hpp **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 39


   2:Inc/utils.hpp **** #ifndef __UTILS_H
   3:Inc/utils.hpp **** #define __UTILS_H
   4:Inc/utils.hpp **** 
   5:Inc/utils.hpp **** #include <stdint.h>
   6:Inc/utils.hpp **** #include <math.h>
   7:Inc/utils.hpp **** 
   8:Inc/utils.hpp **** /**
   9:Inc/utils.hpp ****  * @brief Flash size register address
  10:Inc/utils.hpp ****  */
  11:Inc/utils.hpp **** #define ID_FLASH_ADDRESS (0x1FFF7A22)
  12:Inc/utils.hpp **** 
  13:Inc/utils.hpp **** /**
  14:Inc/utils.hpp ****  * @brief Device ID register address
  15:Inc/utils.hpp ****  */
  16:Inc/utils.hpp **** #define ID_DBGMCU_IDCODE (0xE0042000)
  17:Inc/utils.hpp **** 
  18:Inc/utils.hpp **** /**
  19:Inc/utils.hpp ****  * "Returns" the device signature
  20:Inc/utils.hpp ****  *
  21:Inc/utils.hpp ****  * Possible returns:
  22:Inc/utils.hpp ****  *    - 0x0413: STM32F405xx/07xx and STM32F415xx/17xx)
  23:Inc/utils.hpp ****  *    - 0x0419: STM32F42xxx and STM32F43xxx
  24:Inc/utils.hpp ****  *    - 0x0423: STM32F401xB/C
  25:Inc/utils.hpp ****  *    - 0x0433: STM32F401xD/E
  26:Inc/utils.hpp ****  *    - 0x0431: STM32F411xC/E
  27:Inc/utils.hpp ****  *
  28:Inc/utils.hpp ****  * Returned data is in 16-bit mode, but only bits 11:0 are valid, bits 15:12 are always 0.
  29:Inc/utils.hpp ****  * Defined as macro
  30:Inc/utils.hpp ****  */
  31:Inc/utils.hpp **** #define STM_ID_GetSignature() ((*(uint16_t *)(ID_DBGMCU_IDCODE)) & 0x0FFF)
  32:Inc/utils.hpp **** 
  33:Inc/utils.hpp **** /**
  34:Inc/utils.hpp ****  * "Returns" the device revision
  35:Inc/utils.hpp ****  *
  36:Inc/utils.hpp ****  * Revisions possible:
  37:Inc/utils.hpp ****  *    - 0x1000: Revision A
  38:Inc/utils.hpp ****  *    - 0x1001: Revision Z
  39:Inc/utils.hpp ****  *    - 0x1003: Revision Y
  40:Inc/utils.hpp ****  *    - 0x1007: Revision 1
  41:Inc/utils.hpp ****  *    - 0x2001: Revision 3
  42:Inc/utils.hpp ****  *
  43:Inc/utils.hpp ****  * Returned data is in 16-bit mode.
  44:Inc/utils.hpp ****  */
  45:Inc/utils.hpp **** #define STM_ID_GetRevision() (*(uint16_t *)(ID_DBGMCU_IDCODE + 2))
  46:Inc/utils.hpp **** 
  47:Inc/utils.hpp **** /**
  48:Inc/utils.hpp **** * "Returns" the Flash size
  49:Inc/utils.hpp **** *
  50:Inc/utils.hpp **** * Returned data is in 16-bit mode, returned value is flash size in kB (kilo bytes).
  51:Inc/utils.hpp **** */
  52:Inc/utils.hpp **** #define STM_ID_GetFlashSize() (*(uint16_t *)(ID_FLASH_ADDRESS))
  53:Inc/utils.hpp **** 
  54:Inc/utils.hpp **** #ifdef M_PI
  55:Inc/utils.hpp **** #undef M_PI
  56:Inc/utils.hpp **** #endif
  57:Inc/utils.hpp **** #define M_PI (3.14159265358979323846f)
  58:Inc/utils.hpp **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 40


  59:Inc/utils.hpp **** #define MACRO_MAX(x, y) (((x) > (y)) ? (x) : (y))
  60:Inc/utils.hpp **** #define MACRO_MIN(x, y) (((x) < (y)) ? (x) : (y))
  61:Inc/utils.hpp **** 
  62:Inc/utils.hpp **** #define SQ(x) ((x) * (x))
  63:Inc/utils.hpp **** 
  64:Inc/utils.hpp **** #ifdef __cplusplus
  65:Inc/utils.hpp **** 
  66:Inc/utils.hpp **** #include <array>
  67:Inc/utils.hpp **** 
  68:Inc/utils.hpp **** /**
  69:Inc/utils.hpp ****  * @brief Small helper to make array with known size
  70:Inc/utils.hpp ****  * in contrast to initializer lists the number of arguments
  71:Inc/utils.hpp ****  * has to match exactly. Whereas initializer lists allow
  72:Inc/utils.hpp ****  * less arguments.
  73:Inc/utils.hpp ****  */
  74:Inc/utils.hpp **** template<class T, class... Tail>
  75:Inc/utils.hpp **** std::array<T, 1 + sizeof...(Tail)> make_array(T head, Tail... tail)
  76:Inc/utils.hpp **** {
  77:Inc/utils.hpp ****     return std::array<T, 1 + sizeof...(Tail)>({ head, tail ... });
  78:Inc/utils.hpp **** }
  79:Inc/utils.hpp **** 
  80:Inc/utils.hpp **** extern "C" {
  81:Inc/utils.hpp **** #endif
  82:Inc/utils.hpp **** 
  83:Inc/utils.hpp **** static const float one_by_sqrt3 = 0.57735026919f;
  84:Inc/utils.hpp **** static const float two_by_sqrt3 = 1.15470053838f;
  85:Inc/utils.hpp **** static const float sqrt3_by_2 = 0.86602540378f;
  86:Inc/utils.hpp **** 
  87:Inc/utils.hpp **** // like fmodf, but always positive
  88:Inc/utils.hpp **** static inline float fmodf_pos(float x, float y) {
 383              		.loc 5 88 49
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 16
 386              		@ frame_needed = 1, uses_anonymous_args = 0
 387 0000 80B5     		push	{r7, lr}
 388              	.LCFI31:
 389              		.cfi_def_cfa_offset 8
 390              		.cfi_offset 7, -8
 391              		.cfi_offset 14, -4
 392 0002 84B0     		sub	sp, sp, #16
 393              	.LCFI32:
 394              		.cfi_def_cfa_offset 24
 395 0004 00AF     		add	r7, sp, #0
 396              	.LCFI33:
 397              		.cfi_def_cfa_register 7
 398 0006 87ED010A 		vstr.32	s0, [r7, #4]
 399 000a C7ED000A 		vstr.32	s1, [r7]
  89:Inc/utils.hpp ****     float out = fmodf(x, y);
 400              		.loc 5 89 22
 401 000e D7ED000A 		vldr.32	s1, [r7]
 402 0012 97ED010A 		vldr.32	s0, [r7, #4]
 403 0016 FFF7FEFF 		bl	fmodf
 404 001a 87ED030A 		vstr.32	s0, [r7, #12]
  90:Inc/utils.hpp ****     if (out < 0.0f)
 405              		.loc 5 90 5
 406 001e D7ED037A 		vldr.32	s15, [r7, #12]
 407 0022 F5EEC07A 		vcmpe.f32	s15, #0
ARM GAS  /tmp/ccqv0h9S.s 			page 41


 408 0026 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 409 002a 07D5     		bpl	.L17
  91:Inc/utils.hpp ****         out += y;
 410              		.loc 5 91 13
 411 002c 97ED037A 		vldr.32	s14, [r7, #12]
 412 0030 D7ED007A 		vldr.32	s15, [r7]
 413 0034 77EE277A 		vadd.f32	s15, s14, s15
 414 0038 C7ED037A 		vstr.32	s15, [r7, #12]
 415              	.L17:
  92:Inc/utils.hpp ****     return out;
 416              		.loc 5 92 12
 417 003c FB68     		ldr	r3, [r7, #12]	@ float
 418 003e 07EE903A 		vmov	s15, r3
  93:Inc/utils.hpp **** }
 419              		.loc 5 93 1
 420 0042 B0EE670A 		vmov.f32	s0, s15
 421 0046 1037     		adds	r7, r7, #16
 422              	.LCFI34:
 423              		.cfi_def_cfa_offset 8
 424 0048 BD46     		mov	sp, r7
 425              	.LCFI35:
 426              		.cfi_def_cfa_register 13
 427              		@ sp needed
 428 004a 80BD     		pop	{r7, pc}
 429              		.cfi_endproc
 430              	.LFE3402:
 432              		.section	.text.wrap_pm,"ax",%progbits
 433              		.align	1
 434              		.syntax unified
 435              		.thumb
 436              		.thumb_func
 437              		.fpu fpv4-sp-d16
 439              	wrap_pm:
 440              	.LFB3403:
  94:Inc/utils.hpp **** 
  95:Inc/utils.hpp **** /**
  96:Inc/utils.hpp ****  * @brief Similar to modulo operator, except that the output range is centered
  97:Inc/utils.hpp ****  * around zero.
  98:Inc/utils.hpp ****  * The returned value is always in the range [-pm_range, pm_range).
  99:Inc/utils.hpp ****  */
 100:Inc/utils.hpp **** static inline float wrap_pm(float x, float pm_range) {
 441              		.loc 5 100 54
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 8
 444              		@ frame_needed = 1, uses_anonymous_args = 0
 445 0000 80B5     		push	{r7, lr}
 446              	.LCFI36:
 447              		.cfi_def_cfa_offset 8
 448              		.cfi_offset 7, -8
 449              		.cfi_offset 14, -4
 450 0002 82B0     		sub	sp, sp, #8
 451              	.LCFI37:
 452              		.cfi_def_cfa_offset 16
 453 0004 00AF     		add	r7, sp, #0
 454              	.LCFI38:
 455              		.cfi_def_cfa_register 7
 456 0006 87ED010A 		vstr.32	s0, [r7, #4]
ARM GAS  /tmp/ccqv0h9S.s 			page 42


 457 000a C7ED000A 		vstr.32	s1, [r7]
 101:Inc/utils.hpp ****     return fmodf_pos(x + pm_range, 2.0f * pm_range) - pm_range;
 458              		.loc 5 101 21
 459 000e 97ED017A 		vldr.32	s14, [r7, #4]
 460 0012 D7ED007A 		vldr.32	s15, [r7]
 461 0016 37EE277A 		vadd.f32	s14, s14, s15
 462 001a D7ED007A 		vldr.32	s15, [r7]
 463 001e 77EEA77A 		vadd.f32	s15, s15, s15
 464 0022 F0EE670A 		vmov.f32	s1, s15
 465 0026 B0EE470A 		vmov.f32	s0, s14
 466 002a FFF7FEFF 		bl	fmodf_pos
 467 002e B0EE407A 		vmov.f32	s14, s0
 468              		.loc 5 101 55
 469 0032 D7ED007A 		vldr.32	s15, [r7]
 470 0036 77EE677A 		vsub.f32	s15, s14, s15
 102:Inc/utils.hpp **** }
 471              		.loc 5 102 1
 472 003a B0EE670A 		vmov.f32	s0, s15
 473 003e 0837     		adds	r7, r7, #8
 474              	.LCFI39:
 475              		.cfi_def_cfa_offset 8
 476 0040 BD46     		mov	sp, r7
 477              	.LCFI40:
 478              		.cfi_def_cfa_register 13
 479              		@ sp needed
 480 0042 80BD     		pop	{r7, pc}
 481              		.cfi_endproc
 482              	.LFE3403:
 484              		.section	.text.wrap_pm_pi,"ax",%progbits
 485              		.align	1
 486              		.syntax unified
 487              		.thumb
 488              		.thumb_func
 489              		.fpu fpv4-sp-d16
 491              	wrap_pm_pi:
 492              	.LFB3404:
 103:Inc/utils.hpp **** 
 104:Inc/utils.hpp **** static inline float wrap_pm_pi(float theta) {
 493              		.loc 5 104 45
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 8
 496              		@ frame_needed = 1, uses_anonymous_args = 0
 497 0000 80B5     		push	{r7, lr}
 498              	.LCFI41:
 499              		.cfi_def_cfa_offset 8
 500              		.cfi_offset 7, -8
 501              		.cfi_offset 14, -4
 502 0002 82B0     		sub	sp, sp, #8
 503              	.LCFI42:
 504              		.cfi_def_cfa_offset 16
 505 0004 00AF     		add	r7, sp, #0
 506              	.LCFI43:
 507              		.cfi_def_cfa_register 7
 508 0006 87ED010A 		vstr.32	s0, [r7, #4]
 105:Inc/utils.hpp ****     return wrap_pm(theta, M_PI);
 509              		.loc 5 105 19
 510 000a DFED060A 		vldr.32	s1, .L25
ARM GAS  /tmp/ccqv0h9S.s 			page 43


 511 000e 97ED010A 		vldr.32	s0, [r7, #4]
 512 0012 FFF7FEFF 		bl	wrap_pm
 513 0016 F0EE407A 		vmov.f32	s15, s0
 106:Inc/utils.hpp **** }
 514              		.loc 5 106 1
 515 001a B0EE670A 		vmov.f32	s0, s15
 516 001e 0837     		adds	r7, r7, #8
 517              	.LCFI44:
 518              		.cfi_def_cfa_offset 8
 519 0020 BD46     		mov	sp, r7
 520              	.LCFI45:
 521              		.cfi_def_cfa_register 13
 522              		@ sp needed
 523 0022 80BD     		pop	{r7, pc}
 524              	.L26:
 525              		.align	2
 526              	.L25:
 527 0024 DB0F4940 		.word	1078530011
 528              		.cfi_endproc
 529              	.LFE3404:
 531              		.section	.text._ZNSt14_Function_baseC2Ev,"axG",%progbits,_ZNSt14_Function_baseC5Ev,comdat
 532              		.align	1
 533              		.weak	_ZNSt14_Function_baseC2Ev
 534              		.syntax unified
 535              		.thumb
 536              		.thumb_func
 537              		.fpu fpv4-sp-d16
 539              	_ZNSt14_Function_baseC2Ev:
 540              	.LFB3572:
 541              		.file 6 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_f
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // Implementation of std::function -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // Copyright (C) 2004-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** /** @file include/bits/std_function.h
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****  *  Do not attempt to use it directly. @headername{functional}
ARM GAS  /tmp/ccqv0h9S.s 			page 44


  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****  */
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #ifndef _GLIBCXX_STD_FUNCTION_H
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #define _GLIBCXX_STD_FUNCTION_H 1
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #pragma GCC system_header
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #if __cplusplus < 201103L
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** # include <bits/c++0x_warning.h>
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #else
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #if __cpp_rtti
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** # include <typeinfo>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #endif
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #include <bits/stl_function.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #include <bits/invoke.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #include <bits/refwrap.h>
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #include <bits/functexcept.h>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** namespace std _GLIBCXX_VISIBILITY(default)
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** {
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   /**
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  @brief Exception class thrown when class template function's
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  operator() is called with an empty target.
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  @ingroup exceptions
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    */
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   class bad_function_call : public std::exception
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   {
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   public:
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     virtual ~bad_function_call() noexcept;
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     const char* what() const noexcept;
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   };
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   /**
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  Trait identifying "location-invariant" types, meaning that the
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  address of the object (or any of its members) will not escape.
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  Trivially copyable types are location-invariant and users can
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  specialize this trait for other types.
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    */
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   template<typename _Tp>
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     struct __is_location_invariant
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     : is_trivially_copyable<_Tp>::type
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     { };
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   class _Undefined_class;
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   union _Nocopy_types
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   {
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     void*       _M_object;
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     const void* _M_const_object;
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     void (*_M_function_pointer)();
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     void (_Undefined_class::*_M_member_pointer)();
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   };
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 45


  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   union [[gnu::may_alias]] _Any_data
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   {
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     void*       _M_access()       { return &_M_pod_data[0]; }
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     const void* _M_access() const { return &_M_pod_data[0]; }
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     template<typename _Tp>
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       _Tp&
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       _M_access()
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       { return *static_cast<_Tp*>(_M_access()); }
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     template<typename _Tp>
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       const _Tp&
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       _M_access() const
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       { return *static_cast<const _Tp*>(_M_access()); }
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     _Nocopy_types _M_unused;
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     char _M_pod_data[sizeof(_Nocopy_types)];
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   };
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   enum _Manager_operation
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   {
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     __get_type_info,
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     __get_functor_ptr,
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     __clone_functor,
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     __destroy_functor
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   };
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   template<typename _Signature>
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     class function;
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   /// Base class of all polymorphic function object wrappers.
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   class _Function_base
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   {
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   public:
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     static const size_t _M_max_size = sizeof(_Nocopy_types);
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     static const size_t _M_max_align = __alignof__(_Nocopy_types);
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     template<typename _Functor>
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       class _Base_manager
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       {
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       protected:
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static const bool __stored_locally =
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	(__is_location_invariant<_Functor>::value
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	 && sizeof(_Functor) <= _M_max_size
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	 && __alignof__(_Functor) <= _M_max_align
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	 && (_M_max_align % __alignof__(_Functor) == 0));
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	typedef integral_constant<bool, __stored_locally> _Local_storage;
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	// Retrieve a pointer to the function object
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static _Functor*
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_get_pointer(const _Any_data& __source)
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  if _GLIBCXX17_CONSTEXPR (__stored_locally)
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    {
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      const _Functor& __f = __source._M_access<_Functor>();
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      return const_cast<_Functor*>(std::__addressof(__f));
ARM GAS  /tmp/ccqv0h9S.s 			page 46


 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    }
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  else // have stored a pointer
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    return __source._M_access<_Functor*>();
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	}
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	// Clone a location-invariant function object that fits within
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	// an _Any_data structure.
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static void
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	}
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	// Clone a function object that is not location-invariant or
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	// that cannot fit into an _Any_data structure.
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static void
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  __dest._M_access<_Functor*>() =
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    new _Functor(*__source._M_access<const _Functor*>());
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	}
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	// Destroying a location-invariant object may still require
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	// destruction.
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static void
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_destroy(_Any_data& __victim, true_type)
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  __victim._M_access<_Functor>().~_Functor();
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	}
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	// Destroying an object located on the heap.
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static void
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_destroy(_Any_data& __victim, false_type)
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  delete __victim._M_access<_Functor*>();
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	}
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       public:
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static bool
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_manager(_Any_data& __dest, const _Any_data& __source,
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 		   _Manager_operation __op)
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  switch (__op)
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    {
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #if __cpp_rtti
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    case __get_type_info:
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      break;
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #endif
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    case __get_functor_ptr:
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      break;
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    case __clone_functor:
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      _M_clone(__dest, __source, _Local_storage());
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      break;
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 47


 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    case __destroy_functor:
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      _M_destroy(__dest, _Local_storage());
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      break;
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    }
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  return false;
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	}
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static void
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	template<typename _Signature>
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  static bool
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  _M_not_empty_function(const function<_Signature>& __f)
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  { return static_cast<bool>(__f); }
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	template<typename _Tp>
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  static bool
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  _M_not_empty_function(_Tp* __fp)
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  { return __fp != nullptr; }
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	template<typename _Class, typename _Tp>
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  static bool
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  _M_not_empty_function(_Tp _Class::* __mp)
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  { return __mp != nullptr; }
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	template<typename _Tp>
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  static bool
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  _M_not_empty_function(const _Tp&)
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  { return true; }
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       private:
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static void
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static void
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       };
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     _Function_base() : _M_manager(nullptr) { }
 542              		.loc 6 240 5
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 8
 545              		@ frame_needed = 1, uses_anonymous_args = 0
 546              		@ link register save eliminated.
 547 0000 80B4     		push	{r7}
 548              	.LCFI46:
 549              		.cfi_def_cfa_offset 4
 550              		.cfi_offset 7, -4
 551 0002 83B0     		sub	sp, sp, #12
 552              	.LCFI47:
 553              		.cfi_def_cfa_offset 16
 554 0004 00AF     		add	r7, sp, #0
 555              	.LCFI48:
 556              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccqv0h9S.s 			page 48


 557 0006 7860     		str	r0, [r7, #4]
 558              	.LBB8:
 559              		.loc 6 240 42
 560 0008 7B68     		ldr	r3, [r7, #4]
 561 000a 0022     		movs	r2, #0
 562 000c 9A60     		str	r2, [r3, #8]
 563              	.LBE8:
 564              		.loc 6 240 46
 565 000e 7B68     		ldr	r3, [r7, #4]
 566 0010 1846     		mov	r0, r3
 567 0012 0C37     		adds	r7, r7, #12
 568              	.LCFI49:
 569              		.cfi_def_cfa_offset 4
 570 0014 BD46     		mov	sp, r7
 571              	.LCFI50:
 572              		.cfi_def_cfa_register 13
 573              		@ sp needed
 574 0016 5DF8047B 		ldr	r7, [sp], #4
 575              	.LCFI51:
 576              		.cfi_restore 7
 577              		.cfi_def_cfa_offset 0
 578 001a 7047     		bx	lr
 579              		.cfi_endproc
 580              	.LFE3572:
 582              		.weak	_ZNSt14_Function_baseC1Ev
 583              		.thumb_set _ZNSt14_Function_baseC1Ev,_ZNSt14_Function_baseC2Ev
 584              		.section	.text._ZNSt14_Function_baseD2Ev,"axG",%progbits,_ZNSt14_Function_baseD5Ev,comdat
 585              		.align	1
 586              		.weak	_ZNSt14_Function_baseD2Ev
 587              		.syntax unified
 588              		.thumb
 589              		.thumb_func
 590              		.fpu fpv4-sp-d16
 592              	_ZNSt14_Function_baseD2Ev:
 593              	.LFB3575:
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     ~_Function_base()
 594              		.loc 6 242 5
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 8
 597              		@ frame_needed = 1, uses_anonymous_args = 0
 598 0000 80B5     		push	{r7, lr}
 599              	.LCFI52:
 600              		.cfi_def_cfa_offset 8
 601              		.cfi_offset 7, -8
 602              		.cfi_offset 14, -4
 603 0002 82B0     		sub	sp, sp, #8
 604              	.LCFI53:
 605              		.cfi_def_cfa_offset 16
 606 0004 00AF     		add	r7, sp, #0
 607              	.LCFI54:
 608              		.cfi_def_cfa_register 7
 609 0006 7860     		str	r0, [r7, #4]
 610              	.LBB9:
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     {
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       if (_M_manager)
 611              		.loc 6 244 11
ARM GAS  /tmp/ccqv0h9S.s 			page 49


 612 0008 7B68     		ldr	r3, [r7, #4]
 613 000a 9B68     		ldr	r3, [r3, #8]
 614              		.loc 6 244 7
 615 000c 002B     		cmp	r3, #0
 616 000e 05D0     		beq	.L30
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_manager(_M_functor, _M_functor, __destroy_functor);
 617              		.loc 6 245 2
 618 0010 7B68     		ldr	r3, [r7, #4]
 619 0012 9B68     		ldr	r3, [r3, #8]
 620              		.loc 6 245 13
 621 0014 7868     		ldr	r0, [r7, #4]
 622              		.loc 6 245 25
 623 0016 7968     		ldr	r1, [r7, #4]
 624              		.loc 6 245 12
 625 0018 0322     		movs	r2, #3
 626 001a 9847     		blx	r3
 627              	.LVL0:
 628              	.L30:
 629              	.LBE9:
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     }
 630              		.loc 6 246 5
 631 001c 7B68     		ldr	r3, [r7, #4]
 632 001e 1846     		mov	r0, r3
 633 0020 0837     		adds	r7, r7, #8
 634              	.LCFI55:
 635              		.cfi_def_cfa_offset 8
 636 0022 BD46     		mov	sp, r7
 637              	.LCFI56:
 638              		.cfi_def_cfa_register 13
 639              		@ sp needed
 640 0024 80BD     		pop	{r7, pc}
 641              		.cfi_endproc
 642              	.LFE3575:
 644              		.weak	_ZNSt14_Function_baseD1Ev
 645              		.thumb_set _ZNSt14_Function_baseD1Ev,_ZNSt14_Function_baseD2Ev
 646              		.section	.text.cpu_enter_critical,"axG",%progbits,cpu_enter_critical,comdat
 647              		.align	1
 648              		.weak	cpu_enter_critical
 649              		.syntax unified
 650              		.thumb
 651              		.thumb_func
 652              		.fpu fpv4-sp-d16
 654              	cpu_enter_critical:
 655              	.LFB4793:
 656              		.file 7 "Inc/low_level.h"
   1:Inc/low_level.h **** /* Define to prevent recursive inclusion -------------------------------------*/
   2:Inc/low_level.h **** #ifndef __LOW_LEVEL_H
   3:Inc/low_level.h **** #define __LOW_LEVEL_H
   4:Inc/low_level.h **** 
   5:Inc/low_level.h **** 
   6:Inc/low_level.h **** #ifdef __cplusplus
   7:Inc/low_level.h **** // Forward declare Motor class before extern "C" block
   8:Inc/low_level.h **** class Motor;
   9:Inc/low_level.h **** 
  10:Inc/low_level.h **** extern "C" {
  11:Inc/low_level.h **** #endif
  12:Inc/low_level.h **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 50


  13:Inc/low_level.h **** /* Includes ------------------------------------------------------------------*/
  14:Inc/low_level.h **** #include <cmsis_os.h>
  15:Inc/low_level.h **** #include <stdbool.h>
  16:Inc/low_level.h **** #include "stm32g4xx_hal.h"  // Add this for ADC_HandleTypeDef and TIM_HandleTypeDef
  17:Inc/low_level.h **** #include "stm32g4xx_hal_adc.h" // Add this for TIM_HandleTypeDef
  18:Inc/low_level.h **** 
  19:Inc/low_level.h **** 
  20:Inc/low_level.h **** /* Exported types ------------------------------------------------------------*/
  21:Inc/low_level.h **** /* Exported constants --------------------------------------------------------*/
  22:Inc/low_level.h **** #define ADC_CHANNEL_COUNT 16
  23:Inc/low_level.h **** extern const float adc_full_scale;
  24:Inc/low_level.h **** extern const float adc_ref_voltage;
  25:Inc/low_level.h **** /* Exported variables --------------------------------------------------------*/
  26:Inc/low_level.h **** extern float vbus_voltage;
  27:Inc/low_level.h **** extern float ibus_;
  28:Inc/low_level.h **** extern bool brake_resistor_armed;
  29:Inc/low_level.h **** extern bool brake_resistor_saturated;
  30:Inc/low_level.h **** extern uint16_t adc_measurements_[ADC_CHANNEL_COUNT];
  31:Inc/low_level.h **** /* Exported macro ------------------------------------------------------------*/
  32:Inc/low_level.h **** /* Exported functions --------------------------------------------------------*/
  33:Inc/low_level.h **** 
  34:Inc/low_level.h **** void safety_critical_arm_motor_pwm(Motor& motor);
  35:Inc/low_level.h **** bool safety_critical_disarm_motor_pwm(Motor& motor);
  36:Inc/low_level.h **** void safety_critical_apply_motor_pwm_timings(Motor& motor, uint16_t timings[3]);
  37:Inc/low_level.h **** void safety_critical_arm_brake_resistor();
  38:Inc/low_level.h **** void safety_critical_disarm_brake_resistor();
  39:Inc/low_level.h **** void safety_critical_apply_brake_resistor_timings(uint32_t low_off, uint32_t high_on);
  40:Inc/low_level.h **** 
  41:Inc/low_level.h **** // called from STM platform code
  42:Inc/low_level.h **** extern "C" {
  43:Inc/low_level.h **** void pwm_trig_adc_cb(ADC_TypeDef* hadc, bool injected);
  44:Inc/low_level.h **** void vbus_sense_adc_cb(ADC_HandleTypeDef* hadc, bool injected);
  45:Inc/low_level.h **** void tim_update_cb(TIM_HandleTypeDef* htim);
  46:Inc/low_level.h **** void pwm_in_cb(int channel, uint32_t timestamp);
  47:Inc/low_level.h **** void send_notification(void);
  48:Inc/low_level.h **** }
  49:Inc/low_level.h **** 
  50:Inc/low_level.h **** // Initalisation
  51:Inc/low_level.h **** void start_adc_pwm();
  52:Inc/low_level.h **** void start_pwm(TIM_HandleTypeDef* htim);
  53:Inc/low_level.h **** void sync_timers(TIM_HandleTypeDef* htim_a, TIM_HandleTypeDef* htim_b,
  54:Inc/low_level.h ****                  uint16_t TIM_CLOCKSOURCE_ITRx, uint16_t count_offset,
  55:Inc/low_level.h ****                  TIM_HandleTypeDef* htim_refbase = nullptr);
  56:Inc/low_level.h **** void start_general_purpose_adc();
  57:Inc/low_level.h **** float get_adc_voltage(const GPIO_TypeDef* const GPIO_port, uint16_t GPIO_pin);
  58:Inc/low_level.h **** uint16_t channel_from_gpio(const GPIO_TypeDef* const GPIO_port, uint16_t GPIO_pin);
  59:Inc/low_level.h **** float get_adc_voltage_channel(uint16_t channel);
  60:Inc/low_level.h **** void pwm_in_init();
  61:Inc/low_level.h **** void start_analog_thread();
  62:Inc/low_level.h **** 
  63:Inc/low_level.h **** void update_brake_current();
  64:Inc/low_level.h **** 
  65:Inc/low_level.h **** inline uint32_t cpu_enter_critical() {
 657              		.loc 7 65 38
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 8
 660              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccqv0h9S.s 			page 51


 661              		@ link register save eliminated.
 662 0000 80B4     		push	{r7}
 663              	.LCFI57:
 664              		.cfi_def_cfa_offset 4
 665              		.cfi_offset 7, -4
 666 0002 83B0     		sub	sp, sp, #12
 667              	.LCFI58:
 668              		.cfi_def_cfa_offset 16
 669 0004 00AF     		add	r7, sp, #0
 670              	.LCFI59:
 671              		.cfi_def_cfa_register 7
 672              	.LBB10:
 673              	.LBB11:
 674              		.file 8 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
ARM GAS  /tmp/ccqv0h9S.s 			page 52


  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
ARM GAS  /tmp/ccqv0h9S.s 			page 53


 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
ARM GAS  /tmp/ccqv0h9S.s 			page 54


 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
ARM GAS  /tmp/ccqv0h9S.s 			page 55


 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 260:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccqv0h9S.s 			page 56


 272:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccqv0h9S.s 			page 57


 329:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccqv0h9S.s 			page 58


 386:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 402:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 419:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 59


 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 675              		.loc 8 453 3
 676              		.syntax unified
 677              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 678 0006 EFF31083 		MRS r3, primask
 679              	@ 0 "" 2
 680              		.thumb
 681              		.syntax unified
 682 000a 3B60     		str	r3, [r7]
 454:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 683              		.loc 8 454 16
 684 000c 3B68     		ldr	r3, [r7]
 685              	.LBE11:
 686              	.LBE10:
  66:Inc/low_level.h ****     uint32_t primask = __get_PRIMASK();
 687              		.loc 7 66 37
 688 000e 7B60     		str	r3, [r7, #4]
 689              	.LBB12:
 690              	.LBB13:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691              		.loc 8 209 3
 692              		.syntax unified
 693              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 694 0010 72B6     		cpsid i
 695              	@ 0 "" 2
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696              		.loc 8 210 1
 697              		.thumb
 698              		.syntax unified
 699 0012 00BF     		nop
 700              	.LBE13:
 701              	.LBE12:
  67:Inc/low_level.h ****     __disable_irq();
  68:Inc/low_level.h ****     return primask;
 702              		.loc 7 68 12
 703 0014 7B68     		ldr	r3, [r7, #4]
  69:Inc/low_level.h **** }
 704              		.loc 7 69 1
 705 0016 1846     		mov	r0, r3
 706 0018 0C37     		adds	r7, r7, #12
 707              	.LCFI60:
 708              		.cfi_def_cfa_offset 4
 709 001a BD46     		mov	sp, r7
 710              	.LCFI61:
 711              		.cfi_def_cfa_register 13
 712              		@ sp needed
 713 001c 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccqv0h9S.s 			page 60


 714              	.LCFI62:
 715              		.cfi_restore 7
 716              		.cfi_def_cfa_offset 0
 717 0020 7047     		bx	lr
 718              		.cfi_endproc
 719              	.LFE4793:
 721              		.section	.text.cpu_exit_critical,"axG",%progbits,cpu_exit_critical,comdat
 722              		.align	1
 723              		.weak	cpu_exit_critical
 724              		.syntax unified
 725              		.thumb
 726              		.thumb_func
 727              		.fpu fpv4-sp-d16
 729              	cpu_exit_critical:
 730              	.LFB4794:
  70:Inc/low_level.h **** 
  71:Inc/low_level.h **** inline void cpu_exit_critical(uint32_t priority_mask) {
 731              		.loc 7 71 55
 732              		.cfi_startproc
 733              		@ args = 0, pretend = 0, frame = 16
 734              		@ frame_needed = 1, uses_anonymous_args = 0
 735              		@ link register save eliminated.
 736 0000 80B4     		push	{r7}
 737              	.LCFI63:
 738              		.cfi_def_cfa_offset 4
 739              		.cfi_offset 7, -4
 740 0002 85B0     		sub	sp, sp, #20
 741              	.LCFI64:
 742              		.cfi_def_cfa_offset 24
 743 0004 00AF     		add	r7, sp, #0
 744              	.LCFI65:
 745              		.cfi_def_cfa_register 7
 746 0006 7860     		str	r0, [r7, #4]
 747 0008 7B68     		ldr	r3, [r7, #4]
 748 000a FB60     		str	r3, [r7, #12]
 749              	.LBB14:
 750              	.LBB15:
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccqv0h9S.s 			page 61


 475:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 751              		.loc 8 481 3
 752 000c FB68     		ldr	r3, [r7, #12]
 753              		.syntax unified
 754              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 755 000e 83F31088 		MSR primask, r3
 756              	@ 0 "" 2
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 757              		.loc 8 482 1
 758              		.thumb
 759              		.syntax unified
 760 0012 00BF     		nop
 761              	.LBE15:
 762              	.LBE14:
  72:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
  73:Inc/low_level.h **** }
 763              		.loc 7 73 1
 764 0014 00BF     		nop
 765 0016 1437     		adds	r7, r7, #20
 766              	.LCFI66:
 767              		.cfi_def_cfa_offset 4
 768 0018 BD46     		mov	sp, r7
 769              	.LCFI67:
 770              		.cfi_def_cfa_register 13
 771              		@ sp needed
 772 001a 5DF8047B 		ldr	r7, [sp], #4
 773              	.LCFI68:
 774              		.cfi_restore 7
 775              		.cfi_def_cfa_offset 0
 776 001e 7047     		bx	lr
 777              		.cfi_endproc
 778              	.LFE4794:
 780              		.section	.text._ZN7EncoderC2ERK23EncoderHardwareConfig_tRNS_8Config_tE,"ax",%progbits
 781              		.align	1
 782              		.global	_ZN7EncoderC2ERK23EncoderHardwareConfig_tRNS_8Config_tE
 783              		.syntax unified
 784              		.thumb
 785              		.thumb_func
 786              		.fpu fpv4-sp-d16
 788              	_ZN7EncoderC2ERK23EncoderHardwareConfig_tRNS_8Config_tE:
 789              	.LFB4820:
 790              		.file 9 "Src/encoder.cpp"
   1:Src/encoder.cpp **** #include "encoder.hpp"
   2:Src/encoder.cpp **** 
   3:Src/encoder.cpp **** #include "axis.hpp"
   4:Src/encoder.cpp **** #include "motor.hpp"
   5:Src/encoder.cpp **** #include "interfaces.hpp"
   6:Src/encoder.cpp **** #include "controller.hpp"
   7:Src/encoder.cpp **** #include "spi.h"
   8:Src/encoder.cpp **** 
   9:Src/encoder.cpp **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 62


  10:Src/encoder.cpp **** Encoder::Encoder(const EncoderHardwareConfig_t& hw_config,
 791              		.loc 9 10 1
 792              		.cfi_startproc
 793              		@ args = 0, pretend = 0, frame = 16
 794              		@ frame_needed = 1, uses_anonymous_args = 0
 795 0000 80B5     		push	{r7, lr}
 796              	.LCFI69:
 797              		.cfi_def_cfa_offset 8
 798              		.cfi_offset 7, -8
 799              		.cfi_offset 14, -4
 800 0002 84B0     		sub	sp, sp, #16
 801              	.LCFI70:
 802              		.cfi_def_cfa_offset 24
 803 0004 00AF     		add	r7, sp, #0
 804              	.LCFI71:
 805              		.cfi_def_cfa_register 7
 806 0006 F860     		str	r0, [r7, #12]
 807 0008 B960     		str	r1, [r7, #8]
 808 000a 7A60     		str	r2, [r7, #4]
 809              	.LBB16:
  11:Src/encoder.cpp ****                 Config_t& config) :
  12:Src/encoder.cpp ****         hw_config_(hw_config),
  13:Src/encoder.cpp ****         config_(config)
 810              		.loc 9 13 23
 811 000c FB68     		ldr	r3, [r7, #12]
 812 000e BA68     		ldr	r2, [r7, #8]
 813 0010 1A60     		str	r2, [r3]
 814 0012 FB68     		ldr	r3, [r7, #12]
 815 0014 7A68     		ldr	r2, [r7, #4]
 816 0016 5A60     		str	r2, [r3, #4]
 817 0018 FB68     		ldr	r3, [r7, #12]
 818 001a 0022     		movs	r2, #0
 819 001c 9A60     		str	r2, [r3, #8]
 820 001e FB68     		ldr	r3, [r7, #12]
 821 0020 0022     		movs	r2, #0
 822 0022 9A81     		strh	r2, [r3, #12]	@ movhi
 823 0024 FB68     		ldr	r3, [r7, #12]
 824 0026 0022     		movs	r2, #0
 825 0028 9A73     		strb	r2, [r3, #14]
 826 002a FB68     		ldr	r3, [r7, #12]
 827 002c 0022     		movs	r2, #0
 828 002e DA73     		strb	r2, [r3, #15]
 829 0030 FB68     		ldr	r3, [r7, #12]
 830 0032 0022     		movs	r2, #0
 831 0034 1A61     		str	r2, [r3, #16]
 832 0036 FB68     		ldr	r3, [r7, #12]
 833 0038 0022     		movs	r2, #0
 834 003a 5A61     		str	r2, [r3, #20]
 835 003c FB68     		ldr	r3, [r7, #12]
 836 003e 0022     		movs	r2, #0
 837 0040 9A61     		str	r2, [r3, #24]
 838 0042 FB68     		ldr	r3, [r7, #12]
 839 0044 0022     		movs	r2, #0
 840 0046 DA61     		str	r2, [r3, #28]
 841 0048 FB68     		ldr	r3, [r7, #12]
 842 004a 4FF00002 		mov	r2, #0
 843 004e 1A62     		str	r2, [r3, #32]	@ float
ARM GAS  /tmp/ccqv0h9S.s 			page 63


 844 0050 FB68     		ldr	r3, [r7, #12]
 845 0052 0022     		movs	r2, #0
 846 0054 5A62     		str	r2, [r3, #36]
 847 0056 FB68     		ldr	r3, [r7, #12]
 848 0058 0022     		movs	r2, #0
 849 005a 9A62     		str	r2, [r3, #40]
 850 005c FB68     		ldr	r3, [r7, #12]
 851 005e 4FF00002 		mov	r2, #0
 852 0062 DA62     		str	r2, [r3, #44]	@ float
 853 0064 FB68     		ldr	r3, [r7, #12]
 854 0066 3033     		adds	r3, r3, #48
 855 0068 9FED6F0A 		vldr.32	s0, .L39
 856 006c 1846     		mov	r0, r3
 857 006e FFF7FEFF 		bl	_ZN10OutputPortIfEC1Ef
 858 0072 FB68     		ldr	r3, [r7, #12]
 859 0074 3833     		adds	r3, r3, #56
 860 0076 9FED6C0A 		vldr.32	s0, .L39
 861 007a 1846     		mov	r0, r3
 862 007c FFF7FEFF 		bl	_ZN10OutputPortIfEC1Ef
 863 0080 FB68     		ldr	r3, [r7, #12]
 864 0082 4FF00002 		mov	r2, #0
 865 0086 1A64     		str	r2, [r3, #64]	@ float
 866 0088 FB68     		ldr	r3, [r7, #12]
 867 008a 4FF00002 		mov	r2, #0
 868 008e 5A64     		str	r2, [r3, #68]	@ float
 869 0090 FB68     		ldr	r3, [r7, #12]
 870 0092 4FF00002 		mov	r2, #0
 871 0096 9A64     		str	r2, [r3, #72]	@ float
 872 0098 FB68     		ldr	r3, [r7, #12]
 873 009a 4FF00002 		mov	r2, #0
 874 009e DA64     		str	r2, [r3, #76]	@ float
 875 00a0 FB68     		ldr	r3, [r7, #12]
 876 00a2 4FF00002 		mov	r2, #0
 877 00a6 1A65     		str	r2, [r3, #80]	@ float
 878 00a8 FB68     		ldr	r3, [r7, #12]
 879 00aa 4FF00002 		mov	r2, #0
 880 00ae 5A65     		str	r2, [r3, #84]	@ float
 881 00b0 FB68     		ldr	r3, [r7, #12]
 882 00b2 4FF00002 		mov	r2, #0
 883 00b6 9A65     		str	r2, [r3, #88]	@ float
 884 00b8 FB68     		ldr	r3, [r7, #12]
 885 00ba 4FF00002 		mov	r2, #0
 886 00be DA65     		str	r2, [r3, #92]	@ float
 887 00c0 FB68     		ldr	r3, [r7, #12]
 888 00c2 4FF00002 		mov	r2, #0
 889 00c6 1A66     		str	r2, [r3, #96]	@ float
 890 00c8 FB68     		ldr	r3, [r7, #12]
 891 00ca 0022     		movs	r2, #0
 892 00cc 5A66     		str	r2, [r3, #100]
 893 00ce FB68     		ldr	r3, [r7, #12]
 894 00d0 0022     		movs	r2, #0
 895 00d2 9A66     		str	r2, [r3, #104]
 896 00d4 FB68     		ldr	r3, [r7, #12]
 897 00d6 4FF00002 		mov	r2, #0
 898 00da DA66     		str	r2, [r3, #108]	@ float
 899 00dc FB68     		ldr	r3, [r7, #12]
 900 00de 7033     		adds	r3, r3, #112
ARM GAS  /tmp/ccqv0h9S.s 			page 64


 901 00e0 9FED510A 		vldr.32	s0, .L39
 902 00e4 1846     		mov	r0, r3
 903 00e6 FFF7FEFF 		bl	_ZN10OutputPortIfEC1Ef
 904 00ea FB68     		ldr	r3, [r7, #12]
 905 00ec 7833     		adds	r3, r3, #120
 906 00ee 9FED4E0A 		vldr.32	s0, .L39
 907 00f2 1846     		mov	r0, r3
 908 00f4 FFF7FEFF 		bl	_ZN10OutputPortIfEC1Ef
 909 00f8 FB68     		ldr	r3, [r7, #12]
 910 00fa 0022     		movs	r2, #0
 911 00fc C3F88020 		str	r2, [r3, #128]
 912 0100 FB68     		ldr	r3, [r7, #12]
 913 0102 4FF00002 		mov	r2, #0
 914 0106 C3F88420 		str	r2, [r3, #132]	@ float
 915 010a FB68     		ldr	r3, [r7, #12]
 916 010c 4FF00002 		mov	r2, #0
 917 0110 C3F88820 		str	r2, [r3, #136]	@ float
 918 0114 FB68     		ldr	r3, [r7, #12]
 919 0116 4FF00002 		mov	r2, #0
 920 011a C3F88C20 		str	r2, [r3, #140]	@ float
 921 011e FB68     		ldr	r3, [r7, #12]
 922 0120 0022     		movs	r2, #0
 923 0122 C3F89020 		str	r2, [r3, #144]
 924 0126 FB68     		ldr	r3, [r7, #12]
 925 0128 0022     		movs	r2, #0
 926 012a 83F89420 		strb	r2, [r3, #148]
 927 012e FB68     		ldr	r3, [r7, #12]
 928 0130 0022     		movs	r2, #0
 929 0132 83F89520 		strb	r2, [r3, #149]
 930 0136 FB68     		ldr	r3, [r7, #12]
 931 0138 3C4A     		ldr	r2, .L39+4
 932 013a C3F89820 		str	r2, [r3, #152]	@ float
 933 013e FB68     		ldr	r3, [r7, #12]
 934 0140 3A4A     		ldr	r2, .L39+4
 935 0142 C3F89C20 		str	r2, [r3, #156]	@ float
 936 0146 FB68     		ldr	r3, [r7, #12]
 937 0148 4FF00002 		mov	r2, #0
 938 014c C3F8A020 		str	r2, [r3, #160]	@ float
 939 0150 FB68     		ldr	r3, [r7, #12]
 940 0152 4FF00002 		mov	r2, #0
 941 0156 C3F8A420 		str	r2, [r3, #164]	@ float
 942 015a FB68     		ldr	r3, [r7, #12]
 943 015c 4FF00002 		mov	r2, #0
 944 0160 C3F8A820 		str	r2, [r3, #168]	@ float
 945 0164 FB68     		ldr	r3, [r7, #12]
 946 0166 0022     		movs	r2, #0
 947 0168 A3F8AC20 		strh	r2, [r3, #172]	@ movhi
 948 016c FB68     		ldr	r3, [r7, #12]
 949 016e 0022     		movs	r2, #0
 950 0170 83F8AE20 		strb	r2, [r3, #174]
 951 0174 FB68     		ldr	r3, [r7, #12]
 952 0176 4FF00002 		mov	r2, #0
 953 017a C3F8B020 		str	r2, [r3, #176]	@ float
 954 017e FB68     		ldr	r3, [r7, #12]
 955 0180 4FF00002 		mov	r2, #0
 956 0184 C3F8B420 		str	r2, [r3, #180]	@ float
 957 0188 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccqv0h9S.s 			page 65


 958 018a A622     		movs	r2, #166
 959 018c 83F8B820 		strb	r2, [r3, #184]
 960 0190 FB68     		ldr	r3, [r7, #12]
 961 0192 0022     		movs	r2, #0
 962 0194 83F8B920 		strb	r2, [r3, #185]
 963 0198 FB68     		ldr	r3, [r7, #12]
 964 019a 0022     		movs	r2, #0
 965 019c 83F8BA20 		strb	r2, [r3, #186]
 966 01a0 FB68     		ldr	r3, [r7, #12]
 967 01a2 0022     		movs	r2, #0
 968 01a4 83F8BB20 		strb	r2, [r3, #187]
 969 01a8 FB68     		ldr	r3, [r7, #12]
 970 01aa A622     		movs	r2, #166
 971 01ac 83F8C020 		strb	r2, [r3, #192]
 972 01b0 FB68     		ldr	r3, [r7, #12]
 973 01b2 0022     		movs	r2, #0
 974 01b4 83F8C120 		strb	r2, [r3, #193]
 975 01b8 FB68     		ldr	r3, [r7, #12]
 976 01ba 0022     		movs	r2, #0
 977 01bc 83F8C220 		strb	r2, [r3, #194]
 978 01c0 FB68     		ldr	r3, [r7, #12]
 979 01c2 0022     		movs	r2, #0
 980 01c4 83F8C320 		strb	r2, [r3, #195]
 981 01c8 FB68     		ldr	r3, [r7, #12]
 982 01ca A622     		movs	r2, #166
 983 01cc 83F8C820 		strb	r2, [r3, #200]
 984 01d0 FB68     		ldr	r3, [r7, #12]
 985 01d2 0022     		movs	r2, #0
 986 01d4 83F8C920 		strb	r2, [r3, #201]
 987 01d8 FB68     		ldr	r3, [r7, #12]
 988 01da 0022     		movs	r2, #0
 989 01dc 83F8CA20 		strb	r2, [r3, #202]
 990 01e0 FB68     		ldr	r3, [r7, #12]
 991 01e2 0022     		movs	r2, #0
 992 01e4 83F8CB20 		strb	r2, [r3, #203]
 993 01e8 FB68     		ldr	r3, [r7, #12]
 994 01ea 0022     		movs	r2, #0
 995 01ec 83F8D320 		strb	r2, [r3, #211]
 996 01f0 FB68     		ldr	r3, [r7, #12]
 997 01f2 0122     		movs	r2, #1
 998 01f4 83F8D420 		strb	r2, [r3, #212]
 999 01f8 FB68     		ldr	r3, [r7, #12]
 1000 01fa 40F20312 		movw	r2, #259
 1001 01fe A3F8D620 		strh	r2, [r3, #214]	@ movhi
 1002 0202 FB68     		ldr	r3, [r7, #12]
 1003 0204 0022     		movs	r2, #0
 1004 0206 C3F8F020 		str	r2, [r3, #240]
  14:Src/encoder.cpp **** {
  15:Src/encoder.cpp ****     update_pll_gains();
 1005              		.loc 9 15 21
 1006 020a F868     		ldr	r0, [r7, #12]
 1007 020c FFF7FEFF 		bl	_ZN7Encoder16update_pll_gainsEv
  16:Src/encoder.cpp **** 
  17:Src/encoder.cpp ****     if (config.pre_calibrated) {
 1008              		.loc 9 17 16
 1009 0210 7B68     		ldr	r3, [r7, #4]
 1010 0212 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
ARM GAS  /tmp/ccqv0h9S.s 			page 66


 1011              		.loc 9 17 5
 1012 0214 002B     		cmp	r3, #0
 1013 0216 02D0     		beq	.L37
  18:Src/encoder.cpp ****             is_ready_ = true;
 1014              		.loc 9 18 23
 1015 0218 FB68     		ldr	r3, [r7, #12]
 1016 021a 0122     		movs	r2, #1
 1017 021c DA73     		strb	r2, [r3, #15]
 1018              	.L37:
 1019              	.LBE16:
  19:Src/encoder.cpp ****     }
  20:Src/encoder.cpp **** }
 1020              		.loc 9 20 1
 1021 021e FB68     		ldr	r3, [r7, #12]
 1022 0220 1846     		mov	r0, r3
 1023 0222 1037     		adds	r7, r7, #16
 1024              	.LCFI72:
 1025              		.cfi_def_cfa_offset 8
 1026 0224 BD46     		mov	sp, r7
 1027              	.LCFI73:
 1028              		.cfi_def_cfa_register 13
 1029              		@ sp needed
 1030 0226 80BD     		pop	{r7, pc}
 1031              	.L40:
 1032              		.align	2
 1033              	.L39:
 1034 0228 00000000 		.word	0
 1035 022c 6F12833A 		.word	981668463
 1036              		.cfi_endproc
 1037              	.LFE4820:
 1039              		.global	_ZN7EncoderC1ERK23EncoderHardwareConfig_tRNS_8Config_tE
 1040              		.thumb_set _ZN7EncoderC1ERK23EncoderHardwareConfig_tRNS_8Config_tE,_ZN7EncoderC2ERK23EncoderHardwa
 1041              		.section	.text._ZL20enc_index_cb_wrapperPv,"ax",%progbits
 1042              		.align	1
 1043              		.syntax unified
 1044              		.thumb
 1045              		.thumb_func
 1046              		.fpu fpv4-sp-d16
 1048              	_ZL20enc_index_cb_wrapperPv:
 1049              	.LFB4822:
  21:Src/encoder.cpp **** 
  22:Src/encoder.cpp **** static void enc_index_cb_wrapper(void* ctx) {
 1050              		.loc 9 22 45
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 8
 1053              		@ frame_needed = 1, uses_anonymous_args = 0
 1054 0000 80B5     		push	{r7, lr}
 1055              	.LCFI74:
 1056              		.cfi_def_cfa_offset 8
 1057              		.cfi_offset 7, -8
 1058              		.cfi_offset 14, -4
 1059 0002 82B0     		sub	sp, sp, #8
 1060              	.LCFI75:
 1061              		.cfi_def_cfa_offset 16
 1062 0004 00AF     		add	r7, sp, #0
 1063              	.LCFI76:
 1064              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccqv0h9S.s 			page 67


 1065 0006 7860     		str	r0, [r7, #4]
  23:Src/encoder.cpp ****     reinterpret_cast<Encoder*>(ctx)->enc_index_cb();
 1066              		.loc 9 23 50
 1067 0008 7868     		ldr	r0, [r7, #4]
 1068 000a FFF7FEFF 		bl	_ZN7Encoder12enc_index_cbEv
  24:Src/encoder.cpp **** }
 1069              		.loc 9 24 1
 1070 000e 00BF     		nop
 1071 0010 0837     		adds	r7, r7, #8
 1072              	.LCFI77:
 1073              		.cfi_def_cfa_offset 8
 1074 0012 BD46     		mov	sp, r7
 1075              	.LCFI78:
 1076              		.cfi_def_cfa_register 13
 1077              		@ sp needed
 1078 0014 80BD     		pop	{r7, pc}
 1079              		.cfi_endproc
 1080              	.LFE4822:
 1082              		.section	.text._ZN7Encoder11set_cs_highEv,"ax",%progbits
 1083              		.align	1
 1084              		.global	_ZN7Encoder11set_cs_highEv
 1085              		.syntax unified
 1086              		.thumb
 1087              		.thumb_func
 1088              		.fpu fpv4-sp-d16
 1090              	_ZN7Encoder11set_cs_highEv:
 1091              	.LFB4823:
  25:Src/encoder.cpp **** 
  26:Src/encoder.cpp **** void Encoder::set_cs_high(void)
  27:Src/encoder.cpp **** {
 1092              		.loc 9 27 1
 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 8
 1095              		@ frame_needed = 1, uses_anonymous_args = 0
 1096 0000 80B5     		push	{r7, lr}
 1097              	.LCFI79:
 1098              		.cfi_def_cfa_offset 8
 1099              		.cfi_offset 7, -8
 1100              		.cfi_offset 14, -4
 1101 0002 82B0     		sub	sp, sp, #8
 1102              	.LCFI80:
 1103              		.cfi_def_cfa_offset 16
 1104 0004 00AF     		add	r7, sp, #0
 1105              	.LCFI81:
 1106              		.cfi_def_cfa_register 7
 1107 0006 7860     		str	r0, [r7, #4]
  28:Src/encoder.cpp ****     if(mode_ & MODE_FLAG_ABS)
 1108              		.loc 9 28 8
 1109 0008 7B68     		ldr	r3, [r7, #4]
 1110 000a B3F8D630 		ldrh	r3, [r3, #214]
 1111              		.loc 9 28 14
 1112 000e 03F48073 		and	r3, r3, #256
 1113              		.loc 9 28 5
 1114 0012 002B     		cmp	r3, #0
 1115 0014 13D0     		beq	.L44
  29:Src/encoder.cpp ****     {  
  30:Src/encoder.cpp ****         HAL_GPIO_WritePin(motor_spi_cs_port_, motor_spi_cs_pin_, GPIO_PIN_SET);
ARM GAS  /tmp/ccqv0h9S.s 			page 68


 1116              		.loc 9 30 26
 1117 0016 7B68     		ldr	r3, [r7, #4]
 1118 0018 D3F8D800 		ldr	r0, [r3, #216]
 1119 001c 7B68     		ldr	r3, [r7, #4]
 1120 001e B3F8DC30 		ldrh	r3, [r3, #220]
 1121 0022 0122     		movs	r2, #1
 1122 0024 1946     		mov	r1, r3
 1123 0026 FFF7FEFF 		bl	HAL_GPIO_WritePin
  31:Src/encoder.cpp ****         HAL_GPIO_WritePin(GearboxOutputEncoder_spi_cs_port_,GearboxOutputEncoder_spi_cs_pin_, GPIO_
 1124              		.loc 9 31 26
 1125 002a 7B68     		ldr	r3, [r7, #4]
 1126 002c D3F8E000 		ldr	r0, [r3, #224]
 1127 0030 7B68     		ldr	r3, [r7, #4]
 1128 0032 B3F8E430 		ldrh	r3, [r3, #228]
 1129 0036 0122     		movs	r2, #1
 1130 0038 1946     		mov	r1, r3
 1131 003a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1132              	.L44:
  32:Src/encoder.cpp ****     }    
  33:Src/encoder.cpp **** }
 1133              		.loc 9 33 1
 1134 003e 00BF     		nop
 1135 0040 0837     		adds	r7, r7, #8
 1136              	.LCFI82:
 1137              		.cfi_def_cfa_offset 8
 1138 0042 BD46     		mov	sp, r7
 1139              	.LCFI83:
 1140              		.cfi_def_cfa_register 13
 1141              		@ sp needed
 1142 0044 80BD     		pop	{r7, pc}
 1143              		.cfi_endproc
 1144              	.LFE4823:
 1146              		.section	.text._ZN7Encoder5setupEv,"ax",%progbits
 1147              		.align	1
 1148              		.global	_ZN7Encoder5setupEv
 1149              		.syntax unified
 1150              		.thumb
 1151              		.thumb_func
 1152              		.fpu fpv4-sp-d16
 1154              	_ZN7Encoder5setupEv:
 1155              	.LFB4824:
  34:Src/encoder.cpp **** 
  35:Src/encoder.cpp **** void Encoder::setup() {
 1156              		.loc 9 35 23
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 8
 1159              		@ frame_needed = 1, uses_anonymous_args = 0
 1160 0000 80B5     		push	{r7, lr}
 1161              	.LCFI84:
 1162              		.cfi_def_cfa_offset 8
 1163              		.cfi_offset 7, -8
 1164              		.cfi_offset 14, -4
 1165 0002 82B0     		sub	sp, sp, #8
 1166              	.LCFI85:
 1167              		.cfi_def_cfa_offset 16
 1168 0004 00AF     		add	r7, sp, #0
 1169              	.LCFI86:
ARM GAS  /tmp/ccqv0h9S.s 			page 69


 1170              		.cfi_def_cfa_register 7
 1171 0006 7860     		str	r0, [r7, #4]
  36:Src/encoder.cpp ****    // HAL_TIM_Encoder_Start(hw_config_.timer, TIM_CHANNEL_ALL);
  37:Src/encoder.cpp ****    // set_idx_subscribe();
  38:Src/encoder.cpp **** 
  39:Src/encoder.cpp ****     mode_ = config_.mode;
 1172              		.loc 9 39 13
 1173 0008 7B68     		ldr	r3, [r7, #4]
 1174 000a 5B68     		ldr	r3, [r3, #4]
 1175              		.loc 9 39 21
 1176 000c 1A88     		ldrh	r2, [r3]
 1177              		.loc 9 39 11
 1178 000e 7B68     		ldr	r3, [r7, #4]
 1179 0010 A3F8D620 		strh	r2, [r3, #214]	@ movhi
  40:Src/encoder.cpp ****     abs_spi_cs_pin_init();
 1180              		.loc 9 40 24
 1181 0014 7868     		ldr	r0, [r7, #4]
 1182 0016 FFF7FEFF 		bl	_ZN7Encoder19abs_spi_cs_pin_initEv
  41:Src/encoder.cpp ****     if(mode_ & MODE_FLAG_ABS){
 1183              		.loc 9 41 8
 1184 001a 7B68     		ldr	r3, [r7, #4]
 1185 001c B3F8D630 		ldrh	r3, [r3, #214]
 1186              		.loc 9 41 14
 1187 0020 03F48073 		and	r3, r3, #256
 1188              		.loc 9 41 5
 1189 0024 002B     		cmp	r3, #0
 1190 0026 11D0     		beq	.L46
  42:Src/encoder.cpp ****         
  43:Src/encoder.cpp ****         abs_spi_init();
 1191              		.loc 9 43 21
 1192 0028 7868     		ldr	r0, [r7, #4]
 1193 002a FFF7FEFF 		bl	_ZN7Encoder12abs_spi_initEv
  44:Src/encoder.cpp ****         if (axis_->controller_.config_.anticogging.pre_calibrated) {
 1194              		.loc 9 44 13
 1195 002e 7B68     		ldr	r3, [r7, #4]
 1196 0030 9B68     		ldr	r3, [r3, #8]
 1197              		.loc 9 44 20
 1198 0032 DB68     		ldr	r3, [r3, #12]
 1199              		.loc 9 44 32
 1200 0034 1B68     		ldr	r3, [r3]
 1201              		.loc 9 44 52
 1202 0036 93F84432 		ldrb	r3, [r3, #580]	@ zero_extendqisi2
 1203              		.loc 9 44 9
 1204 003a 002B     		cmp	r3, #0
 1205 003c 13D0     		beq	.L47
  45:Src/encoder.cpp ****             axis_->controller_.anticogging_valid_ = true;
 1206              		.loc 9 45 13
 1207 003e 7B68     		ldr	r3, [r7, #4]
 1208 0040 9B68     		ldr	r3, [r3, #8]
 1209              		.loc 9 45 20
 1210 0042 DB68     		ldr	r3, [r3, #12]
 1211              		.loc 9 45 51
 1212 0044 0122     		movs	r2, #1
 1213 0046 83F85220 		strb	r2, [r3, #82]
 1214 004a 0CE0     		b	.L47
 1215              	.L46:
  46:Src/encoder.cpp ****         }
ARM GAS  /tmp/ccqv0h9S.s 			page 70


  47:Src/encoder.cpp ****     }
  48:Src/encoder.cpp ****     else if(mode_ & MODE_FLAG_485_ABS)
 1216              		.loc 9 48 13
 1217 004c 7B68     		ldr	r3, [r7, #4]
 1218 004e B3F8D630 		ldrh	r3, [r3, #214]
 1219              		.loc 9 48 19
 1220 0052 03F40073 		and	r3, r3, #512
 1221              		.loc 9 48 10
 1222 0056 002B     		cmp	r3, #0
 1223 0058 05D0     		beq	.L47
  49:Src/encoder.cpp ****     {
  50:Src/encoder.cpp ****         abs_485_cs_pin_init();
 1224              		.loc 9 50 28
 1225 005a 7868     		ldr	r0, [r7, #4]
 1226 005c FFF7FEFF 		bl	_ZN7Encoder19abs_485_cs_pin_initEv
  51:Src/encoder.cpp ****         abs_485_init();
 1227              		.loc 9 51 21
 1228 0060 7868     		ldr	r0, [r7, #4]
 1229 0062 FFF7FEFF 		bl	_ZN7Encoder12abs_485_initEv
 1230              	.L47:
  52:Src/encoder.cpp ****     }
  53:Src/encoder.cpp ****     
  54:Src/encoder.cpp ****     cpr_inverse_ = 1.0f / config_.cpr;
 1231              		.loc 9 54 27
 1232 0066 7B68     		ldr	r3, [r7, #4]
 1233 0068 5B68     		ldr	r3, [r3, #4]
 1234              		.loc 9 54 35
 1235 006a 9B68     		ldr	r3, [r3, #8]
 1236              		.loc 9 54 25
 1237 006c 07EE903A 		vmov	s15, r3	@ int
 1238 0070 B8EEE77A 		vcvt.f32.s32	s14, s15
 1239 0074 F7EE006A 		vmov.f32	s13, #1.0e+0
 1240 0078 C6EE877A 		vdiv.f32	s15, s13, s14
 1241              		.loc 9 54 18
 1242 007c 7B68     		ldr	r3, [r7, #4]
 1243 007e C3ED267A 		vstr.32	s15, [r3, #152]
  55:Src/encoder.cpp ****     GearboxOutputEncoder_cpr_inverse_ = 1.0f / config_.GearboxOutputEncoder_cpr;
 1244              		.loc 9 55 48
 1245 0082 7B68     		ldr	r3, [r7, #4]
 1246 0084 5B68     		ldr	r3, [r3, #4]
 1247              		.loc 9 55 56
 1248 0086 5B6B     		ldr	r3, [r3, #52]
 1249              		.loc 9 55 46
 1250 0088 07EE903A 		vmov	s15, r3	@ int
 1251 008c B8EEE77A 		vcvt.f32.s32	s14, s15
 1252 0090 F7EE006A 		vmov.f32	s13, #1.0e+0
 1253 0094 C6EE877A 		vdiv.f32	s15, s13, s14
 1254              		.loc 9 55 39
 1255 0098 7B68     		ldr	r3, [r7, #4]
 1256 009a C3ED277A 		vstr.32	s15, [r3, #156]
  56:Src/encoder.cpp **** }
 1257              		.loc 9 56 1
 1258 009e 00BF     		nop
 1259 00a0 0837     		adds	r7, r7, #8
 1260              	.LCFI87:
 1261              		.cfi_def_cfa_offset 8
 1262 00a2 BD46     		mov	sp, r7
ARM GAS  /tmp/ccqv0h9S.s 			page 71


 1263              	.LCFI88:
 1264              		.cfi_def_cfa_register 13
 1265              		@ sp needed
 1266 00a4 80BD     		pop	{r7, pc}
 1267              		.cfi_endproc
 1268              	.LFE4824:
 1270              		.section	.text._ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE,"ax",%progbits
 1271              		.align	1
 1272              		.global	_ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE
 1273              		.syntax unified
 1274              		.thumb
 1275              		.thumb_func
 1276              		.fpu fpv4-sp-d16
 1278              	_ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE:
 1279              	.LFB4825:
  57:Src/encoder.cpp **** 
  58:Src/encoder.cpp **** void Encoder::set_error(Error error) {
 1280              		.loc 9 58 38
 1281              		.cfi_startproc
 1282              		@ args = 0, pretend = 0, frame = 8
 1283              		@ frame_needed = 1, uses_anonymous_args = 0
 1284              		@ link register save eliminated.
 1285 0000 80B4     		push	{r7}
 1286              	.LCFI89:
 1287              		.cfi_def_cfa_offset 4
 1288              		.cfi_offset 7, -4
 1289 0002 83B0     		sub	sp, sp, #12
 1290              	.LCFI90:
 1291              		.cfi_def_cfa_offset 16
 1292 0004 00AF     		add	r7, sp, #0
 1293              	.LCFI91:
 1294              		.cfi_def_cfa_register 7
 1295 0006 7860     		str	r0, [r7, #4]
 1296 0008 0B46     		mov	r3, r1
 1297 000a 7B80     		strh	r3, [r7, #2]	@ movhi
  59:Src/encoder.cpp ****     vel_estimate_valid_ = false;
 1298              		.loc 9 59 25
 1299 000c 7B68     		ldr	r3, [r7, #4]
 1300 000e 0022     		movs	r2, #0
 1301 0010 83F89520 		strb	r2, [r3, #149]
  60:Src/encoder.cpp ****     pos_estimate_valid_ = false;
 1302              		.loc 9 60 25
 1303 0014 7B68     		ldr	r3, [r7, #4]
 1304 0016 0022     		movs	r2, #0
 1305 0018 83F89420 		strb	r2, [r3, #148]
  61:Src/encoder.cpp ****     error_ = static_cast<Error>(static_cast<uint32_t>(error_) | static_cast<uint32_t>(error));
 1306              		.loc 9 61 55
 1307 001c 7B68     		ldr	r3, [r7, #4]
 1308 001e 9A89     		ldrh	r2, [r3, #12]
 1309              		.loc 9 61 63
 1310 0020 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1311 0022 1343     		orrs	r3, r3, r2
 1312 0024 9AB2     		uxth	r2, r3
 1313              		.loc 9 61 12
 1314 0026 7B68     		ldr	r3, [r7, #4]
 1315 0028 9A81     		strh	r2, [r3, #12]	@ movhi
  62:Src/encoder.cpp ****     axis_->error_ = static_cast<Axis::Error>(
ARM GAS  /tmp/ccqv0h9S.s 			page 72


  63:Src/encoder.cpp ****         static_cast<uint32_t>(axis_->error_) | 
 1316              		.loc 9 63 31
 1317 002a 7B68     		ldr	r3, [r7, #4]
 1318 002c 9B68     		ldr	r3, [r3, #8]
 1319              		.loc 9 63 38
 1320 002e D3F85C21 		ldr	r2, [r3, #348]
  62:Src/encoder.cpp ****     axis_->error_ = static_cast<Axis::Error>(
 1321              		.loc 9 62 5
 1322 0032 7B68     		ldr	r3, [r7, #4]
 1323 0034 9B68     		ldr	r3, [r3, #8]
 1324              		.loc 9 63 46
 1325 0036 42F48072 		orr	r2, r2, #256
  62:Src/encoder.cpp ****     axis_->error_ = static_cast<Axis::Error>(
 1326              		.loc 9 62 19
 1327 003a C3F85C21 		str	r2, [r3, #348]
  64:Src/encoder.cpp ****         static_cast<uint32_t>(Axis::ERROR_ENCODER_FAILED)
  65:Src/encoder.cpp ****     );
  66:Src/encoder.cpp **** 
  67:Src/encoder.cpp **** }
 1328              		.loc 9 67 1
 1329 003e 00BF     		nop
 1330 0040 0C37     		adds	r7, r7, #12
 1331              	.LCFI92:
 1332              		.cfi_def_cfa_offset 4
 1333 0042 BD46     		mov	sp, r7
 1334              	.LCFI93:
 1335              		.cfi_def_cfa_register 13
 1336              		@ sp needed
 1337 0044 5DF8047B 		ldr	r7, [sp], #4
 1338              	.LCFI94:
 1339              		.cfi_restore 7
 1340              		.cfi_def_cfa_offset 0
 1341 0048 7047     		bx	lr
 1342              		.cfi_endproc
 1343              	.LFE4825:
 1345              		.section	.text._ZN7Encoder9do_checksEv,"ax",%progbits
 1346              		.align	1
 1347              		.global	_ZN7Encoder9do_checksEv
 1348              		.syntax unified
 1349              		.thumb
 1350              		.thumb_func
 1351              		.fpu fpv4-sp-d16
 1353              	_ZN7Encoder9do_checksEv:
 1354              	.LFB4826:
  68:Src/encoder.cpp **** 
  69:Src/encoder.cpp **** bool Encoder::do_checks(){
 1355              		.loc 9 69 26
 1356              		.cfi_startproc
 1357              		@ args = 0, pretend = 0, frame = 8
 1358              		@ frame_needed = 1, uses_anonymous_args = 0
 1359              		@ link register save eliminated.
 1360 0000 80B4     		push	{r7}
 1361              	.LCFI95:
 1362              		.cfi_def_cfa_offset 4
 1363              		.cfi_offset 7, -4
 1364 0002 83B0     		sub	sp, sp, #12
 1365              	.LCFI96:
ARM GAS  /tmp/ccqv0h9S.s 			page 73


 1366              		.cfi_def_cfa_offset 16
 1367 0004 00AF     		add	r7, sp, #0
 1368              	.LCFI97:
 1369              		.cfi_def_cfa_register 7
 1370 0006 7860     		str	r0, [r7, #4]
  70:Src/encoder.cpp ****     return error_ == ERROR_NONE;
 1371              		.loc 9 70 12
 1372 0008 7B68     		ldr	r3, [r7, #4]
 1373 000a 9B89     		ldrh	r3, [r3, #12]
 1374              		.loc 9 70 22
 1375 000c 002B     		cmp	r3, #0
 1376 000e 0CBF     		ite	eq
 1377 0010 0123     		moveq	r3, #1
 1378 0012 0023     		movne	r3, #0
 1379 0014 DBB2     		uxtb	r3, r3
  71:Src/encoder.cpp **** }
 1380              		.loc 9 71 1
 1381 0016 1846     		mov	r0, r3
 1382 0018 0C37     		adds	r7, r7, #12
 1383              	.LCFI98:
 1384              		.cfi_def_cfa_offset 4
 1385 001a BD46     		mov	sp, r7
 1386              	.LCFI99:
 1387              		.cfi_def_cfa_register 13
 1388              		@ sp needed
 1389 001c 5DF8047B 		ldr	r7, [sp], #4
 1390              	.LCFI100:
 1391              		.cfi_restore 7
 1392              		.cfi_def_cfa_offset 0
 1393 0020 7047     		bx	lr
 1394              		.cfi_endproc
 1395              	.LFE4826:
 1397              		.section	.text._ZN7Encoder12enc_index_cbEv,"ax",%progbits
 1398              		.align	1
 1399              		.global	_ZN7Encoder12enc_index_cbEv
 1400              		.syntax unified
 1401              		.thumb
 1402              		.thumb_func
 1403              		.fpu fpv4-sp-d16
 1405              	_ZN7Encoder12enc_index_cbEv:
 1406              	.LFB4827:
  72:Src/encoder.cpp **** 
  73:Src/encoder.cpp **** //--------------------
  74:Src/encoder.cpp **** // Hardware Dependent
  75:Src/encoder.cpp **** //--------------------
  76:Src/encoder.cpp **** 
  77:Src/encoder.cpp **** // Triggered when an encoder passes over the "Index" pin
  78:Src/encoder.cpp **** // TODO: only arm index edge interrupt when we know encoder has powered up
  79:Src/encoder.cpp **** // (maybe by attaching the interrupt on start search, synergistic with following)
  80:Src/encoder.cpp **** void Encoder::enc_index_cb() {
 1407              		.loc 9 80 30
 1408              		.cfi_startproc
 1409              		@ args = 0, pretend = 0, frame = 8
 1410              		@ frame_needed = 1, uses_anonymous_args = 0
 1411 0000 80B5     		push	{r7, lr}
 1412              	.LCFI101:
 1413              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccqv0h9S.s 			page 74


 1414              		.cfi_offset 7, -8
 1415              		.cfi_offset 14, -4
 1416 0002 82B0     		sub	sp, sp, #8
 1417              	.LCFI102:
 1418              		.cfi_def_cfa_offset 16
 1419 0004 00AF     		add	r7, sp, #0
 1420              	.LCFI103:
 1421              		.cfi_def_cfa_register 7
 1422 0006 7860     		str	r0, [r7, #4]
  81:Src/encoder.cpp ****     if (config_.use_index) {
 1423              		.loc 9 81 9
 1424 0008 7B68     		ldr	r3, [r7, #4]
 1425 000a 5B68     		ldr	r3, [r3, #4]
 1426              		.loc 9 81 17
 1427 000c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1428              		.loc 9 81 5
 1429 000e 002B     		cmp	r3, #0
 1430 0010 2AD0     		beq	.L56
  82:Src/encoder.cpp ****         set_circular_count(0, false);
 1431              		.loc 9 82 27
 1432 0012 0022     		movs	r2, #0
 1433 0014 0021     		movs	r1, #0
 1434 0016 7868     		ldr	r0, [r7, #4]
 1435 0018 FFF7FEFF 		bl	_ZN7Encoder18set_circular_countElb
  83:Src/encoder.cpp ****         if (config_.zero_count_on_find_idx)
 1436              		.loc 9 83 13
 1437 001c 7B68     		ldr	r3, [r7, #4]
 1438 001e 5B68     		ldr	r3, [r3, #4]
 1439              		.loc 9 83 21
 1440 0020 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1441              		.loc 9 83 9
 1442 0022 002B     		cmp	r3, #0
 1443 0024 03D0     		beq	.L53
  84:Src/encoder.cpp ****             set_linear_count(0); // Avoid position control transient after search
 1444              		.loc 9 84 29
 1445 0026 0021     		movs	r1, #0
 1446 0028 7868     		ldr	r0, [r7, #4]
 1447 002a FFF7FEFF 		bl	_ZN7Encoder16set_linear_countEl
 1448              	.L53:
  85:Src/encoder.cpp ****         if (config_.pre_calibrated) {
 1449              		.loc 9 85 13
 1450 002e 7B68     		ldr	r3, [r7, #4]
 1451 0030 5B68     		ldr	r3, [r3, #4]
 1452              		.loc 9 85 21
 1453 0032 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1454              		.loc 9 85 9
 1455 0034 002B     		cmp	r3, #0
 1456 0036 11D0     		beq	.L54
  86:Src/encoder.cpp ****             is_ready_ = true;
 1457              		.loc 9 86 23
 1458 0038 7B68     		ldr	r3, [r7, #4]
 1459 003a 0122     		movs	r2, #1
 1460 003c DA73     		strb	r2, [r3, #15]
  87:Src/encoder.cpp ****             if(axis_->controller_.config_.anticogging.pre_calibrated){
 1461              		.loc 9 87 16
 1462 003e 7B68     		ldr	r3, [r7, #4]
 1463 0040 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/ccqv0h9S.s 			page 75


 1464              		.loc 9 87 23
 1465 0042 DB68     		ldr	r3, [r3, #12]
 1466              		.loc 9 87 35
 1467 0044 1B68     		ldr	r3, [r3]
 1468              		.loc 9 87 55
 1469 0046 93F84432 		ldrb	r3, [r3, #580]	@ zero_extendqisi2
 1470              		.loc 9 87 13
 1471 004a 002B     		cmp	r3, #0
 1472 004c 09D0     		beq	.L55
  88:Src/encoder.cpp ****                 axis_->controller_.anticogging_valid_ = true;
 1473              		.loc 9 88 17
 1474 004e 7B68     		ldr	r3, [r7, #4]
 1475 0050 9B68     		ldr	r3, [r3, #8]
 1476              		.loc 9 88 24
 1477 0052 DB68     		ldr	r3, [r3, #12]
 1478              		.loc 9 88 55
 1479 0054 0122     		movs	r2, #1
 1480 0056 83F85220 		strb	r2, [r3, #82]
 1481 005a 02E0     		b	.L55
 1482              	.L54:
  89:Src/encoder.cpp ****             }
  90:Src/encoder.cpp ****         } else {
  91:Src/encoder.cpp ****             // We can't use the update_offset facility in set_circular_count because
  92:Src/encoder.cpp ****             // we also set the linear count before there is a chance to update. Therefore:
  93:Src/encoder.cpp ****             // Invalidate offset calibration that may have happened before idx search
  94:Src/encoder.cpp ****             is_ready_ = false;
 1483              		.loc 9 94 23
 1484 005c 7B68     		ldr	r3, [r7, #4]
 1485 005e 0022     		movs	r2, #0
 1486 0060 DA73     		strb	r2, [r3, #15]
 1487              	.L55:
  95:Src/encoder.cpp ****         }
  96:Src/encoder.cpp ****         index_found_ = true;
 1488              		.loc 9 96 22
 1489 0062 7B68     		ldr	r3, [r7, #4]
 1490 0064 0122     		movs	r2, #1
 1491 0066 9A73     		strb	r2, [r3, #14]
 1492              	.L56:
  97:Src/encoder.cpp ****     }
  98:Src/encoder.cpp **** 
  99:Src/encoder.cpp ****     // Disable interrupt
 100:Src/encoder.cpp **** 
 101:Src/encoder.cpp **** }
 1493              		.loc 9 101 1
 1494 0068 00BF     		nop
 1495 006a 0837     		adds	r7, r7, #8
 1496              	.LCFI104:
 1497              		.cfi_def_cfa_offset 8
 1498 006c BD46     		mov	sp, r7
 1499              	.LCFI105:
 1500              		.cfi_def_cfa_register 13
 1501              		@ sp needed
 1502 006e 80BD     		pop	{r7, pc}
 1503              		.cfi_endproc
 1504              	.LFE4827:
 1506              		.section	.text._ZN7Encoder17set_idx_subscribeEb,"ax",%progbits
 1507              		.align	1
ARM GAS  /tmp/ccqv0h9S.s 			page 76


 1508              		.global	_ZN7Encoder17set_idx_subscribeEb
 1509              		.syntax unified
 1510              		.thumb
 1511              		.thumb_func
 1512              		.fpu fpv4-sp-d16
 1514              	_ZN7Encoder17set_idx_subscribeEb:
 1515              	.LFB4828:
 102:Src/encoder.cpp **** 
 103:Src/encoder.cpp **** void Encoder::set_idx_subscribe(bool override_enable) {
 1516              		.loc 9 103 55
 1517              		.cfi_startproc
 1518              		@ args = 0, pretend = 0, frame = 8
 1519              		@ frame_needed = 1, uses_anonymous_args = 0
 1520              		@ link register save eliminated.
 1521 0000 80B4     		push	{r7}
 1522              	.LCFI106:
 1523              		.cfi_def_cfa_offset 4
 1524              		.cfi_offset 7, -4
 1525 0002 83B0     		sub	sp, sp, #12
 1526              	.LCFI107:
 1527              		.cfi_def_cfa_offset 16
 1528 0004 00AF     		add	r7, sp, #0
 1529              	.LCFI108:
 1530              		.cfi_def_cfa_register 7
 1531 0006 7860     		str	r0, [r7, #4]
 1532 0008 0B46     		mov	r3, r1
 1533 000a FB70     		strb	r3, [r7, #3]
 104:Src/encoder.cpp **** }
 1534              		.loc 9 104 1
 1535 000c 00BF     		nop
 1536 000e 0C37     		adds	r7, r7, #12
 1537              	.LCFI109:
 1538              		.cfi_def_cfa_offset 4
 1539 0010 BD46     		mov	sp, r7
 1540              	.LCFI110:
 1541              		.cfi_def_cfa_register 13
 1542              		@ sp needed
 1543 0012 5DF8047B 		ldr	r7, [sp], #4
 1544              	.LCFI111:
 1545              		.cfi_restore 7
 1546              		.cfi_def_cfa_offset 0
 1547 0016 7047     		bx	lr
 1548              		.cfi_endproc
 1549              	.LFE4828:
 1551              		.section	.text._ZN7Encoder16update_pll_gainsEv,"ax",%progbits
 1552              		.align	1
 1553              		.global	_ZN7Encoder16update_pll_gainsEv
 1554              		.syntax unified
 1555              		.thumb
 1556              		.thumb_func
 1557              		.fpu fpv4-sp-d16
 1559              	_ZN7Encoder16update_pll_gainsEv:
 1560              	.LFB4829:
 105:Src/encoder.cpp **** 
 106:Src/encoder.cpp **** void Encoder::update_pll_gains() {
 1561              		.loc 9 106 34
 1562              		.cfi_startproc
ARM GAS  /tmp/ccqv0h9S.s 			page 77


 1563              		@ args = 0, pretend = 0, frame = 8
 1564              		@ frame_needed = 1, uses_anonymous_args = 0
 1565 0000 80B5     		push	{r7, lr}
 1566              	.LCFI112:
 1567              		.cfi_def_cfa_offset 8
 1568              		.cfi_offset 7, -8
 1569              		.cfi_offset 14, -4
 1570 0002 82B0     		sub	sp, sp, #8
 1571              	.LCFI113:
 1572              		.cfi_def_cfa_offset 16
 1573 0004 00AF     		add	r7, sp, #0
 1574              	.LCFI114:
 1575              		.cfi_def_cfa_register 7
 1576 0006 7860     		str	r0, [r7, #4]
 107:Src/encoder.cpp ****     pll_kp_ = 2.0f * config_.bandwidth;  // basic conversion to discrete time
 1577              		.loc 9 107 22
 1578 0008 7B68     		ldr	r3, [r7, #4]
 1579 000a 5B68     		ldr	r3, [r3, #4]
 1580              		.loc 9 107 30
 1581 000c D3ED097A 		vldr.32	s15, [r3, #36]
 1582              		.loc 9 107 20
 1583 0010 77EEA77A 		vadd.f32	s15, s15, s15
 1584              		.loc 9 107 13
 1585 0014 7B68     		ldr	r3, [r7, #4]
 1586 0016 C3ED147A 		vstr.32	s15, [r3, #80]
 108:Src/encoder.cpp ****     pll_ki_ = 0.25f * (pll_kp_ * pll_kp_); // Critically damped 0.025f
 1587              		.loc 9 108 24
 1588 001a 7B68     		ldr	r3, [r7, #4]
 1589 001c 93ED147A 		vldr.32	s14, [r3, #80]
 1590              		.loc 9 108 34
 1591 0020 7B68     		ldr	r3, [r7, #4]
 1592 0022 D3ED147A 		vldr.32	s15, [r3, #80]
 1593              		.loc 9 108 32
 1594 0026 67EE277A 		vmul.f32	s15, s14, s15
 1595              		.loc 9 108 21
 1596 002a B5EE007A 		vmov.f32	s14, #2.5e-1
 1597 002e 67EE877A 		vmul.f32	s15, s15, s14
 1598              		.loc 9 108 13
 1599 0032 7B68     		ldr	r3, [r7, #4]
 1600 0034 C3ED157A 		vstr.32	s15, [r3, #84]
 109:Src/encoder.cpp **** 
 110:Src/encoder.cpp ****     gear_pll_kp_ = 2.0f * config_.bandwidth;  // basic conversion to discrete time
 1601              		.loc 9 110 27
 1602 0038 7B68     		ldr	r3, [r7, #4]
 1603 003a 5B68     		ldr	r3, [r3, #4]
 1604              		.loc 9 110 35
 1605 003c D3ED097A 		vldr.32	s15, [r3, #36]
 1606              		.loc 9 110 25
 1607 0040 77EEA77A 		vadd.f32	s15, s15, s15
 1608              		.loc 9 110 18
 1609 0044 7B68     		ldr	r3, [r7, #4]
 1610 0046 C3ED167A 		vstr.32	s15, [r3, #88]
 111:Src/encoder.cpp ****     gear_pll_ki_ = 0.25f * (gear_pll_kp_ * gear_pll_kp_); // Critically damped 0.025f
 1611              		.loc 9 111 29
 1612 004a 7B68     		ldr	r3, [r7, #4]
 1613 004c 93ED167A 		vldr.32	s14, [r3, #88]
 1614              		.loc 9 111 44
ARM GAS  /tmp/ccqv0h9S.s 			page 78


 1615 0050 7B68     		ldr	r3, [r7, #4]
 1616 0052 D3ED167A 		vldr.32	s15, [r3, #88]
 1617              		.loc 9 111 42
 1618 0056 67EE277A 		vmul.f32	s15, s14, s15
 1619              		.loc 9 111 26
 1620 005a B5EE007A 		vmov.f32	s14, #2.5e-1
 1621 005e 67EE877A 		vmul.f32	s15, s15, s14
 1622              		.loc 9 111 18
 1623 0062 7B68     		ldr	r3, [r7, #4]
 1624 0064 C3ED177A 		vstr.32	s15, [r3, #92]
 112:Src/encoder.cpp ****     // Check that we don't get problems with discrete time approximation
 113:Src/encoder.cpp ****     if (!(current_meas_period * pll_kp_ < 1.0f)) {
 1625              		.loc 9 113 33
 1626 0068 7B68     		ldr	r3, [r7, #4]
 1627 006a 93ED147A 		vldr.32	s14, [r3, #80]
 1628              		.loc 9 113 31
 1629 006e 0E4B     		ldr	r3, .L61
 1630 0070 D3ED007A 		vldr.32	s15, [r3]
 1631 0074 67EE277A 		vmul.f32	s15, s14, s15
 1632              		.loc 9 113 41
 1633 0078 B7EE007A 		vmov.f32	s14, #1.0e+0
 1634 007c F4EEC77A 		vcmpe.f32	s15, s14
 1635 0080 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1636 0084 4CBF     		ite	mi
 1637 0086 0123     		movmi	r3, #1
 1638 0088 0023     		movpl	r3, #0
 1639 008a DBB2     		uxtb	r3, r3
 1640              		.loc 9 113 9
 1641 008c 83F00103 		eor	r3, r3, #1
 1642 0090 DBB2     		uxtb	r3, r3
 1643              		.loc 9 113 5
 1644 0092 002B     		cmp	r3, #0
 1645 0094 03D0     		beq	.L60
 114:Src/encoder.cpp ****         set_error(ERROR_UNSTABLE_GAIN);
 1646              		.loc 9 114 18
 1647 0096 0121     		movs	r1, #1
 1648 0098 7868     		ldr	r0, [r7, #4]
 1649 009a FFF7FEFF 		bl	_ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE
 1650              	.L60:
 115:Src/encoder.cpp ****     }
 116:Src/encoder.cpp **** }
 1651              		.loc 9 116 1
 1652 009e 00BF     		nop
 1653 00a0 0837     		adds	r7, r7, #8
 1654              	.LCFI115:
 1655              		.cfi_def_cfa_offset 8
 1656 00a2 BD46     		mov	sp, r7
 1657              	.LCFI116:
 1658              		.cfi_def_cfa_register 13
 1659              		@ sp needed
 1660 00a4 80BD     		pop	{r7, pc}
 1661              	.L62:
 1662 00a6 00BF     		.align	2
 1663              	.L61:
 1664 00a8 00000000 		.word	current_meas_period
 1665              		.cfi_endproc
 1666              	.LFE4829:
ARM GAS  /tmp/ccqv0h9S.s 			page 79


 1668              		.section	.text._ZN7Encoder20check_pre_calibratedEv,"ax",%progbits
 1669              		.align	1
 1670              		.global	_ZN7Encoder20check_pre_calibratedEv
 1671              		.syntax unified
 1672              		.thumb
 1673              		.thumb_func
 1674              		.fpu fpv4-sp-d16
 1676              	_ZN7Encoder20check_pre_calibratedEv:
 1677              	.LFB4830:
 117:Src/encoder.cpp **** 
 118:Src/encoder.cpp **** void Encoder::check_pre_calibrated() {
 1678              		.loc 9 118 38
 1679              		.cfi_startproc
 1680              		@ args = 0, pretend = 0, frame = 8
 1681              		@ frame_needed = 1, uses_anonymous_args = 0
 1682              		@ link register save eliminated.
 1683 0000 80B4     		push	{r7}
 1684              	.LCFI117:
 1685              		.cfi_def_cfa_offset 4
 1686              		.cfi_offset 7, -4
 1687 0002 83B0     		sub	sp, sp, #12
 1688              	.LCFI118:
 1689              		.cfi_def_cfa_offset 16
 1690 0004 00AF     		add	r7, sp, #0
 1691              	.LCFI119:
 1692              		.cfi_def_cfa_register 7
 1693 0006 7860     		str	r0, [r7, #4]
 119:Src/encoder.cpp ****     // TODO: restoring config from python backup is fragile here (ACIM motor type must be set first
 120:Src/encoder.cpp ****     if (!is_ready_ && axis_->motor_.config_.motor_type != Motor::MOTOR_TYPE_ACIM)
 1694              		.loc 9 120 10
 1695 0008 7B68     		ldr	r3, [r7, #4]
 1696 000a DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 1697              		.loc 9 120 9
 1698 000c 83F00103 		eor	r3, r3, #1
 1699 0010 DBB2     		uxtb	r3, r3
 1700              		.loc 9 120 5
 1701 0012 002B     		cmp	r3, #0
 1702 0014 0BD0     		beq	.L64
 1703              		.loc 9 120 23 discriminator 1
 1704 0016 7B68     		ldr	r3, [r7, #4]
 1705 0018 9B68     		ldr	r3, [r3, #8]
 1706              		.loc 9 120 30 discriminator 1
 1707 001a DB6E     		ldr	r3, [r3, #108]
 1708              		.loc 9 120 37 discriminator 1
 1709 001c 5B68     		ldr	r3, [r3, #4]
 1710              		.loc 9 120 45 discriminator 1
 1711 001e 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1712              		.loc 9 120 20 discriminator 1
 1713 0022 032B     		cmp	r3, #3
 1714 0024 03D0     		beq	.L64
 121:Src/encoder.cpp ****         config_.pre_calibrated = false;
 1715              		.loc 9 121 9
 1716 0026 7B68     		ldr	r3, [r7, #4]
 1717 0028 5B68     		ldr	r3, [r3, #4]
 1718              		.loc 9 121 32
 1719 002a 0022     		movs	r2, #0
 1720 002c DA70     		strb	r2, [r3, #3]
ARM GAS  /tmp/ccqv0h9S.s 			page 80


 1721              	.L64:
 122:Src/encoder.cpp ****     if (mode_ == MODE_INCREMENTAL && !index_found_)
 1722              		.loc 9 122 9
 1723 002e 7B68     		ldr	r3, [r7, #4]
 1724 0030 B3F8D630 		ldrh	r3, [r3, #214]
 1725              		.loc 9 122 5
 1726 0034 002B     		cmp	r3, #0
 1727 0036 0AD1     		bne	.L66
 1728              		.loc 9 122 39 discriminator 1
 1729 0038 7B68     		ldr	r3, [r7, #4]
 1730 003a 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1731              		.loc 9 122 38 discriminator 1
 1732 003c 83F00103 		eor	r3, r3, #1
 1733 0040 DBB2     		uxtb	r3, r3
 1734              		.loc 9 122 35 discriminator 1
 1735 0042 002B     		cmp	r3, #0
 1736 0044 03D0     		beq	.L66
 123:Src/encoder.cpp ****         config_.pre_calibrated = false;
 1737              		.loc 9 123 9
 1738 0046 7B68     		ldr	r3, [r7, #4]
 1739 0048 5B68     		ldr	r3, [r3, #4]
 1740              		.loc 9 123 32
 1741 004a 0022     		movs	r2, #0
 1742 004c DA70     		strb	r2, [r3, #3]
 1743              	.L66:
 124:Src/encoder.cpp **** }
 1744              		.loc 9 124 1
 1745 004e 00BF     		nop
 1746 0050 0C37     		adds	r7, r7, #12
 1747              	.LCFI120:
 1748              		.cfi_def_cfa_offset 4
 1749 0052 BD46     		mov	sp, r7
 1750              	.LCFI121:
 1751              		.cfi_def_cfa_register 13
 1752              		@ sp needed
 1753 0054 5DF8047B 		ldr	r7, [sp], #4
 1754              	.LCFI122:
 1755              		.cfi_restore 7
 1756              		.cfi_def_cfa_offset 0
 1757 0058 7047     		bx	lr
 1758              		.cfi_endproc
 1759              	.LFE4830:
 1761              		.section	.text._ZN7Encoder16set_linear_countEl,"ax",%progbits
 1762              		.align	1
 1763              		.global	_ZN7Encoder16set_linear_countEl
 1764              		.syntax unified
 1765              		.thumb
 1766              		.thumb_func
 1767              		.fpu fpv4-sp-d16
 1769              	_ZN7Encoder16set_linear_countEl:
 1770              	.LFB4831:
 125:Src/encoder.cpp **** 
 126:Src/encoder.cpp **** // Function that sets the current encoder count to a desired 32-bit value.
 127:Src/encoder.cpp **** void Encoder::set_linear_count(int32_t count) {
 1771              		.loc 9 127 47
 1772              		.cfi_startproc
 1773              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccqv0h9S.s 			page 81


 1774              		@ frame_needed = 1, uses_anonymous_args = 0
 1775 0000 80B5     		push	{r7, lr}
 1776              	.LCFI123:
 1777              		.cfi_def_cfa_offset 8
 1778              		.cfi_offset 7, -8
 1779              		.cfi_offset 14, -4
 1780 0002 84B0     		sub	sp, sp, #16
 1781              	.LCFI124:
 1782              		.cfi_def_cfa_offset 24
 1783 0004 00AF     		add	r7, sp, #0
 1784              	.LCFI125:
 1785              		.cfi_def_cfa_register 7
 1786 0006 7860     		str	r0, [r7, #4]
 1787 0008 3960     		str	r1, [r7]
 128:Src/encoder.cpp ****     // Disable interrupts to make a critical section to avoid race condition
 129:Src/encoder.cpp ****     uint32_t prim = cpu_enter_critical();
 1788              		.loc 9 129 39
 1789 000a FFF7FEFF 		bl	cpu_enter_critical
 1790 000e F860     		str	r0, [r7, #12]
 130:Src/encoder.cpp **** 
 131:Src/encoder.cpp ****     // Update states
 132:Src/encoder.cpp ****     shadow_count_ = count;
 1791              		.loc 9 132 19
 1792 0010 7B68     		ldr	r3, [r7, #4]
 1793 0012 3A68     		ldr	r2, [r7]
 1794 0014 1A61     		str	r2, [r3, #16]
 133:Src/encoder.cpp ****     pos_estimate_counts_ = (float)count;
 1795              		.loc 9 133 28
 1796 0016 3B68     		ldr	r3, [r7]
 1797 0018 07EE903A 		vmov	s15, r3	@ int
 1798 001c F8EEE77A 		vcvt.f32.s32	s15, s15
 1799              		.loc 9 133 26
 1800 0020 7B68     		ldr	r3, [r7, #4]
 1801 0022 C3ED117A 		vstr.32	s15, [r3, #68]
 134:Src/encoder.cpp ****     tim_cnt_sample_ = count;
 1802              		.loc 9 134 21
 1803 0026 3B68     		ldr	r3, [r7]
 1804 0028 1AB2     		sxth	r2, r3
 1805 002a 7B68     		ldr	r3, [r7, #4]
 1806 002c A3F8AC20 		strh	r2, [r3, #172]	@ movhi
 135:Src/encoder.cpp **** 
 136:Src/encoder.cpp ****     //Write hardware last
 137:Src/encoder.cpp ****     hw_config_.timer->Instance->CNT = count;
 1807              		.loc 9 137 5
 1808 0030 7B68     		ldr	r3, [r7, #4]
 1809 0032 1B68     		ldr	r3, [r3]
 1810              		.loc 9 137 16
 1811 0034 1B68     		ldr	r3, [r3]
 1812              		.loc 9 137 23
 1813 0036 1B68     		ldr	r3, [r3]
 1814              		.loc 9 137 39
 1815 0038 3A68     		ldr	r2, [r7]
 1816              		.loc 9 137 37
 1817 003a 5A62     		str	r2, [r3, #36]
 138:Src/encoder.cpp **** 
 139:Src/encoder.cpp ****     cpu_exit_critical(prim);
 1818              		.loc 9 139 22
ARM GAS  /tmp/ccqv0h9S.s 			page 82


 1819 003c F868     		ldr	r0, [r7, #12]
 1820 003e FFF7FEFF 		bl	cpu_exit_critical
 140:Src/encoder.cpp **** }
 1821              		.loc 9 140 1
 1822 0042 00BF     		nop
 1823 0044 1037     		adds	r7, r7, #16
 1824              	.LCFI126:
 1825              		.cfi_def_cfa_offset 8
 1826 0046 BD46     		mov	sp, r7
 1827              	.LCFI127:
 1828              		.cfi_def_cfa_register 13
 1829              		@ sp needed
 1830 0048 80BD     		pop	{r7, pc}
 1831              		.cfi_endproc
 1832              	.LFE4831:
 1834              		.section	.text._ZN7Encoder18set_circular_countElb,"ax",%progbits
 1835              		.align	1
 1836              		.global	_ZN7Encoder18set_circular_countElb
 1837              		.syntax unified
 1838              		.thumb
 1839              		.thumb_func
 1840              		.fpu fpv4-sp-d16
 1842              	_ZN7Encoder18set_circular_countElb:
 1843              	.LFB4832:
 141:Src/encoder.cpp **** 
 142:Src/encoder.cpp **** // Function that sets the CPR circular tracking encoder count to a desired 32-bit value.
 143:Src/encoder.cpp **** // Note that this will get mod'ed down to [0, cpr)
 144:Src/encoder.cpp **** void Encoder::set_circular_count(int32_t count, bool update_offset) {
 1844              		.loc 9 144 69
 1845              		.cfi_startproc
 1846              		@ args = 0, pretend = 0, frame = 24
 1847              		@ frame_needed = 1, uses_anonymous_args = 0
 1848 0000 90B5     		push	{r4, r7, lr}
 1849              	.LCFI128:
 1850              		.cfi_def_cfa_offset 12
 1851              		.cfi_offset 4, -12
 1852              		.cfi_offset 7, -8
 1853              		.cfi_offset 14, -4
 1854 0002 87B0     		sub	sp, sp, #28
 1855              	.LCFI129:
 1856              		.cfi_def_cfa_offset 40
 1857 0004 00AF     		add	r7, sp, #0
 1858              	.LCFI130:
 1859              		.cfi_def_cfa_register 7
 1860 0006 F860     		str	r0, [r7, #12]
 1861 0008 B960     		str	r1, [r7, #8]
 1862 000a 1346     		mov	r3, r2
 1863 000c FB71     		strb	r3, [r7, #7]
 145:Src/encoder.cpp ****     // Disable interrupts to make a critical section to avoid race condition
 146:Src/encoder.cpp ****     uint32_t prim = cpu_enter_critical();
 1864              		.loc 9 146 39
 1865 000e FFF7FEFF 		bl	cpu_enter_critical
 1866 0012 7861     		str	r0, [r7, #20]
 147:Src/encoder.cpp **** 
 148:Src/encoder.cpp ****     if (update_offset) {
 1867              		.loc 9 148 5
 1868 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  /tmp/ccqv0h9S.s 			page 83


 1869 0016 002B     		cmp	r3, #0
 1870 0018 17D0     		beq	.L69
 149:Src/encoder.cpp ****         config_.offset += count - count_in_cpr_;
 1871              		.loc 9 149 9
 1872 001a FB68     		ldr	r3, [r7, #12]
 1873 001c 5B68     		ldr	r3, [r3, #4]
 1874              		.loc 9 149 24
 1875 001e D968     		ldr	r1, [r3, #12]
 1876              		.loc 9 149 35
 1877 0020 FB68     		ldr	r3, [r7, #12]
 1878 0022 5B69     		ldr	r3, [r3, #20]
 1879              		.loc 9 149 33
 1880 0024 BA68     		ldr	r2, [r7, #8]
 1881 0026 D21A     		subs	r2, r2, r3
 1882              		.loc 9 149 9
 1883 0028 FB68     		ldr	r3, [r7, #12]
 1884 002a 5B68     		ldr	r3, [r3, #4]
 1885              		.loc 9 149 24
 1886 002c 0A44     		add	r2, r2, r1
 1887 002e DA60     		str	r2, [r3, #12]
 150:Src/encoder.cpp ****         config_.offset = mod(config_.offset, config_.cpr);
 1888              		.loc 9 150 30
 1889 0030 FB68     		ldr	r3, [r7, #12]
 1890 0032 5B68     		ldr	r3, [r3, #4]
 1891              		.loc 9 150 38
 1892 0034 DA68     		ldr	r2, [r3, #12]
 1893              		.loc 9 150 46
 1894 0036 FB68     		ldr	r3, [r7, #12]
 1895 0038 5B68     		ldr	r3, [r3, #4]
 1896              		.loc 9 150 54
 1897 003a 9968     		ldr	r1, [r3, #8]
 1898              		.loc 9 150 9
 1899 003c FB68     		ldr	r3, [r7, #12]
 1900 003e 5C68     		ldr	r4, [r3, #4]
 1901              		.loc 9 150 29
 1902 0040 1046     		mov	r0, r2
 1903 0042 FFF7FEFF 		bl	mod
 1904 0046 0346     		mov	r3, r0
 1905              		.loc 9 150 24
 1906 0048 E360     		str	r3, [r4, #12]
 1907              	.L69:
 151:Src/encoder.cpp ****     }
 152:Src/encoder.cpp **** 
 153:Src/encoder.cpp ****     // Update states
 154:Src/encoder.cpp ****     count_in_cpr_ = mod(count, config_.cpr);
 1908              		.loc 9 154 32
 1909 004a FB68     		ldr	r3, [r7, #12]
 1910 004c 5B68     		ldr	r3, [r3, #4]
 1911              		.loc 9 154 40
 1912 004e 9B68     		ldr	r3, [r3, #8]
 1913              		.loc 9 154 24
 1914 0050 1946     		mov	r1, r3
 1915 0052 B868     		ldr	r0, [r7, #8]
 1916 0054 FFF7FEFF 		bl	mod
 1917 0058 0246     		mov	r2, r0
 1918              		.loc 9 154 19
 1919 005a FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccqv0h9S.s 			page 84


 1920 005c 5A61     		str	r2, [r3, #20]
 155:Src/encoder.cpp ****     pos_cpr_counts_ = (float)count_in_cpr_;
 1921              		.loc 9 155 30
 1922 005e FB68     		ldr	r3, [r7, #12]
 1923 0060 5B69     		ldr	r3, [r3, #20]
 1924              		.loc 9 155 23
 1925 0062 07EE903A 		vmov	s15, r3	@ int
 1926 0066 F8EEE77A 		vcvt.f32.s32	s15, s15
 1927              		.loc 9 155 21
 1928 006a FB68     		ldr	r3, [r7, #12]
 1929 006c C3ED127A 		vstr.32	s15, [r3, #72]
 156:Src/encoder.cpp **** 
 157:Src/encoder.cpp ****     cpu_exit_critical(prim);
 1930              		.loc 9 157 22
 1931 0070 7869     		ldr	r0, [r7, #20]
 1932 0072 FFF7FEFF 		bl	cpu_exit_critical
 158:Src/encoder.cpp **** }
 1933              		.loc 9 158 1
 1934 0076 00BF     		nop
 1935 0078 1C37     		adds	r7, r7, #28
 1936              	.LCFI131:
 1937              		.cfi_def_cfa_offset 12
 1938 007a BD46     		mov	sp, r7
 1939              	.LCFI132:
 1940              		.cfi_def_cfa_register 13
 1941              		@ sp needed
 1942 007c 90BD     		pop	{r4, r7, pc}
 1943              		.cfi_endproc
 1944              	.LFE4832:
 1946              		.section	.text._ZNSt8functionIFbbEED2Ev,"axG",%progbits,_ZNSt8functionIFbbEED5Ev,comdat
 1947              		.align	1
 1948              		.weak	_ZNSt8functionIFbbEED2Ev
 1949              		.syntax unified
 1950              		.thumb
 1951              		.thumb_func
 1952              		.fpu fpv4-sp-d16
 1954              	_ZNSt8functionIFbbEED2Ev:
 1955              	.LFB4835:
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     bool _M_empty() const { return !_M_manager; }
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     typedef bool (*_Manager_type)(_Any_data&, const _Any_data&,
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 				  _Manager_operation);
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     _Any_data     _M_functor;
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     _Manager_type _M_manager;
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   };
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   template<typename _Signature, typename _Functor>
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     class _Function_handler;
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   template<typename _Res, typename _Functor, typename... _ArgTypes>
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     class _Function_handler<_Res(_ArgTypes...), _Functor>
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     : public _Function_base::_Base_manager<_Functor>
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     {
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       typedef _Function_base::_Base_manager<_Functor> _Base;
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 85


 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     public:
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       static bool
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       _M_manager(_Any_data& __dest, const _Any_data& __source,
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 		 _Manager_operation __op)
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       {
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	switch (__op)
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  {
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #if __cpp_rtti
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  case __get_type_info:
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    break;
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #endif
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  case __get_functor_ptr:
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    break;
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  default:
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    _Base::_M_manager(__dest, __source, __op);
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  }
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	return false;
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       }
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       static _Res
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       {
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 				     std::forward<_ArgTypes>(__args)...);
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       }
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     };
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   /**
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  @brief Primary class template for std::function.
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  @ingroup functors
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  Polymorphic function wrapper.
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    */
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   template<typename _Res, typename... _ArgTypes>
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     class function<_Res(_ArgTypes...)>
 1956              		.loc 6 303 11
 1957              		.cfi_startproc
 1958              		@ args = 0, pretend = 0, frame = 8
 1959              		@ frame_needed = 1, uses_anonymous_args = 0
 1960 0000 80B5     		push	{r7, lr}
 1961              	.LCFI133:
 1962              		.cfi_def_cfa_offset 8
 1963              		.cfi_offset 7, -8
 1964              		.cfi_offset 14, -4
 1965 0002 82B0     		sub	sp, sp, #8
 1966              	.LCFI134:
 1967              		.cfi_def_cfa_offset 16
 1968 0004 00AF     		add	r7, sp, #0
 1969              	.LCFI135:
 1970              		.cfi_def_cfa_register 7
 1971 0006 7860     		str	r0, [r7, #4]
 1972              	.LBB17:
 1973              		.loc 6 303 11
 1974 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccqv0h9S.s 			page 86


 1975 000a 1846     		mov	r0, r3
 1976 000c FFF7FEFF 		bl	_ZNSt14_Function_baseD2Ev
 1977              	.LBE17:
 1978 0010 7B68     		ldr	r3, [r7, #4]
 1979 0012 1846     		mov	r0, r3
 1980 0014 0837     		adds	r7, r7, #8
 1981              	.LCFI136:
 1982              		.cfi_def_cfa_offset 8
 1983 0016 BD46     		mov	sp, r7
 1984              	.LCFI137:
 1985              		.cfi_def_cfa_register 13
 1986              		@ sp needed
 1987 0018 80BD     		pop	{r7, pc}
 1988              		.cfi_endproc
 1989              	.LFE4835:
 1991              		.weak	_ZNSt8functionIFbbEED1Ev
 1992              		.thumb_set _ZNSt8functionIFbbEED1Ev,_ZNSt8functionIFbbEED2Ev
 1993              		.section	.text._ZN7Encoder16run_index_searchEv,"ax",%progbits
 1994              		.align	1
 1995              		.global	_ZN7Encoder16run_index_searchEv
 1996              		.syntax unified
 1997              		.thumb
 1998              		.thumb_func
 1999              		.fpu fpv4-sp-d16
 2001              	_ZN7Encoder16run_index_searchEv:
 2002              	.LFB4833:
 159:Src/encoder.cpp **** 
 160:Src/encoder.cpp **** 
 161:Src/encoder.cpp **** 
 162:Src/encoder.cpp **** bool Encoder::run_index_search() {
 2003              		.loc 9 162 34
 2004              		.cfi_startproc
 2005              		@ args = 0, pretend = 0, frame = 32
 2006              		@ frame_needed = 1, uses_anonymous_args = 0
 2007 0000 B0B5     		push	{r4, r5, r7, lr}
 2008              	.LCFI138:
 2009              		.cfi_def_cfa_offset 16
 2010              		.cfi_offset 4, -16
 2011              		.cfi_offset 5, -12
 2012              		.cfi_offset 7, -8
 2013              		.cfi_offset 14, -4
 2014 0002 88B0     		sub	sp, sp, #32
 2015              	.LCFI139:
 2016              		.cfi_def_cfa_offset 48
 2017 0004 00AF     		add	r7, sp, #0
 2018              	.LCFI140:
 2019              		.cfi_def_cfa_register 7
 2020 0006 7860     		str	r0, [r7, #4]
 163:Src/encoder.cpp ****     config_.use_index = true;
 2021              		.loc 9 163 5
 2022 0008 7B68     		ldr	r3, [r7, #4]
 2023 000a 5B68     		ldr	r3, [r3, #4]
 2024              		.loc 9 163 23
 2025 000c 0122     		movs	r2, #1
 2026 000e 9A70     		strb	r2, [r3, #2]
 164:Src/encoder.cpp ****     index_found_ = false;
 2027              		.loc 9 164 18
ARM GAS  /tmp/ccqv0h9S.s 			page 87


 2028 0010 7B68     		ldr	r3, [r7, #4]
 2029 0012 0022     		movs	r2, #0
 2030 0014 9A73     		strb	r2, [r3, #14]
 165:Src/encoder.cpp ****     if (!config_.idx_search_unidirectional && axis_->motor_.config_.direction == 0) {
 2031              		.loc 9 165 10
 2032 0016 7B68     		ldr	r3, [r7, #4]
 2033 0018 5B68     		ldr	r3, [r3, #4]
 2034              		.loc 9 165 18
 2035 001a 93F82930 		ldrb	r3, [r3, #41]	@ zero_extendqisi2
 2036              		.loc 9 165 9
 2037 001e 83F00103 		eor	r3, r3, #1
 2038 0022 DBB2     		uxtb	r3, r3
 2039              		.loc 9 165 5
 2040 0024 002B     		cmp	r3, #0
 2041 0026 0CD0     		beq	.L73
 2042              		.loc 9 165 47 discriminator 1
 2043 0028 7B68     		ldr	r3, [r7, #4]
 2044 002a 9B68     		ldr	r3, [r3, #8]
 2045              		.loc 9 165 54 discriminator 1
 2046 002c DB6E     		ldr	r3, [r3, #108]
 2047              		.loc 9 165 61 discriminator 1
 2048 002e 5B68     		ldr	r3, [r3, #4]
 2049              		.loc 9 165 69 discriminator 1
 2050 0030 5B6A     		ldr	r3, [r3, #36]
 2051              		.loc 9 165 44 discriminator 1
 2052 0032 002B     		cmp	r3, #0
 2053 0034 05D1     		bne	.L73
 166:Src/encoder.cpp ****         axis_->motor_.config_.direction = 1;
 2054              		.loc 9 166 9
 2055 0036 7B68     		ldr	r3, [r7, #4]
 2056 0038 9B68     		ldr	r3, [r3, #8]
 2057              		.loc 9 166 16
 2058 003a DB6E     		ldr	r3, [r3, #108]
 2059              		.loc 9 166 23
 2060 003c 5B68     		ldr	r3, [r3, #4]
 2061              		.loc 9 166 41
 2062 003e 0122     		movs	r2, #1
 2063 0040 5A62     		str	r2, [r3, #36]
 2064              	.L73:
 167:Src/encoder.cpp ****     }
 168:Src/encoder.cpp ****     set_idx_subscribe();
 2065              		.loc 9 168 22
 2066 0042 0021     		movs	r1, #0
 2067 0044 7868     		ldr	r0, [r7, #4]
 2068 0046 FFF7FEFF 		bl	_ZN7Encoder17set_idx_subscribeEb
 169:Src/encoder.cpp **** 
 170:Src/encoder.cpp ****     bool status = axis_->run_lockin_spin(axis_->config_.calibration_lockin,false);
 2069              		.loc 9 170 19
 2070 004a 7B68     		ldr	r3, [r7, #4]
 2071 004c 9C68     		ldr	r4, [r3, #8]
 2072              		.loc 9 170 42
 2073 004e 7B68     		ldr	r3, [r7, #4]
 2074 0050 9B68     		ldr	r3, [r3, #8]
 2075              		.loc 9 170 49
 2076 0052 5B68     		ldr	r3, [r3, #4]
 2077              		.loc 9 170 57
 2078 0054 03F11C05 		add	r5, r3, #28
ARM GAS  /tmp/ccqv0h9S.s 			page 88


 2079              		.loc 9 170 81
 2080 0058 07F10C03 		add	r3, r7, #12
 2081 005c 1846     		mov	r0, r3
 2082 005e FFF7FEFF 		bl	_ZNSt8functionIFbbEEC1Ev
 2083              		.loc 9 170 41
 2084 0062 07F10C03 		add	r3, r7, #12
 2085 0066 0022     		movs	r2, #0
 2086 0068 2946     		mov	r1, r5
 2087 006a 2046     		mov	r0, r4
 2088 006c FFF7FEFF 		bl	_ZN4Axis15run_lockin_spinERKNS_14LockinConfig_tEbSt8functionIFbbEE
 2089 0070 0346     		mov	r3, r0
 2090 0072 FB77     		strb	r3, [r7, #31]
 2091              		.loc 9 170 81
 2092 0074 07F10C03 		add	r3, r7, #12
 2093 0078 1846     		mov	r0, r3
 2094 007a FFF7FEFF 		bl	_ZNSt8functionIFbbEED1Ev
 171:Src/encoder.cpp ****     return status;
 2095              		.loc 9 171 12
 2096 007e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 172:Src/encoder.cpp **** }
 2097              		.loc 9 172 1
 2098 0080 1846     		mov	r0, r3
 2099 0082 2037     		adds	r7, r7, #32
 2100              	.LCFI141:
 2101              		.cfi_def_cfa_offset 16
 2102 0084 BD46     		mov	sp, r7
 2103              	.LCFI142:
 2104              		.cfi_def_cfa_register 13
 2105              		@ sp needed
 2106 0086 B0BD     		pop	{r4, r5, r7, pc}
 2107              		.cfi_endproc
 2108              	.LFE4833:
 2110              		.section	.text._ZN7Encoder18run_direction_findEv,"ax",%progbits
 2111              		.align	1
 2112              		.global	_ZN7Encoder18run_direction_findEv
 2113              		.syntax unified
 2114              		.thumb
 2115              		.thumb_func
 2116              		.fpu fpv4-sp-d16
 2118              	_ZN7Encoder18run_direction_findEv:
 2119              	.LFB4837:
 173:Src/encoder.cpp **** 
 174:Src/encoder.cpp **** bool Encoder::run_direction_find() {
 2120              		.loc 9 174 36
 2121              		.cfi_startproc
 2122              		@ args = 0, pretend = 0, frame = 64
 2123              		@ frame_needed = 1, uses_anonymous_args = 0
 2124 0000 B0B5     		push	{r4, r5, r7, lr}
 2125              	.LCFI143:
 2126              		.cfi_def_cfa_offset 16
 2127              		.cfi_offset 4, -16
 2128              		.cfi_offset 5, -12
 2129              		.cfi_offset 7, -8
 2130              		.cfi_offset 14, -4
 2131 0002 90B0     		sub	sp, sp, #64
 2132              	.LCFI144:
 2133              		.cfi_def_cfa_offset 80
ARM GAS  /tmp/ccqv0h9S.s 			page 89


 2134 0004 00AF     		add	r7, sp, #0
 2135              	.LCFI145:
 2136              		.cfi_def_cfa_register 7
 2137 0006 7860     		str	r0, [r7, #4]
 175:Src/encoder.cpp ****     int32_t init_enc_val = shadow_count_;
 2138              		.loc 9 175 13
 2139 0008 7B68     		ldr	r3, [r7, #4]
 2140 000a 1B69     		ldr	r3, [r3, #16]
 2141 000c FB63     		str	r3, [r7, #60]
 176:Src/encoder.cpp ****     axis_->motor_.config_.direction = 1; // Must test spin forwards for direction detect logic
 2142              		.loc 9 176 5
 2143 000e 7B68     		ldr	r3, [r7, #4]
 2144 0010 9B68     		ldr	r3, [r3, #8]
 2145              		.loc 9 176 12
 2146 0012 DB6E     		ldr	r3, [r3, #108]
 2147              		.loc 9 176 19
 2148 0014 5B68     		ldr	r3, [r3, #4]
 2149              		.loc 9 176 37
 2150 0016 0122     		movs	r2, #1
 2151 0018 5A62     		str	r2, [r3, #36]
 177:Src/encoder.cpp **** 
 178:Src/encoder.cpp ****     Axis::LockinConfig_t lockin_config = axis_->config_.calibration_lockin;
 2152              		.loc 9 178 42
 2153 001a 7B68     		ldr	r3, [r7, #4]
 2154 001c 9B68     		ldr	r3, [r3, #8]
 2155              		.loc 9 178 49
 2156 001e 5B68     		ldr	r3, [r3, #4]
 2157              		.loc 9 178 26
 2158 0020 07F10C04 		add	r4, r7, #12
 2159 0024 03F11C05 		add	r5, r3, #28
 2160 0028 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2161 002a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2162 002c 95E80700 		ldm	r5, {r0, r1, r2}
 2163 0030 84E80700 		stm	r4, {r0, r1, r2}
 179:Src/encoder.cpp ****     lockin_config.finish_distance = lockin_config.vel * 3.0f; // run for 3 seconds
 2164              		.loc 9 179 51
 2165 0034 D7ED077A 		vldr.32	s15, [r7, #28]
 2166              		.loc 9 179 55
 2167 0038 B0EE087A 		vmov.f32	s14, #3.0e+0
 2168 003c 67EE877A 		vmul.f32	s15, s15, s14
 2169              		.loc 9 179 35
 2170 0040 C7ED087A 		vstr.32	s15, [r7, #32]
 180:Src/encoder.cpp ****     lockin_config.finish_on_distance = true;
 2171              		.loc 9 180 38
 2172 0044 0123     		movs	r3, #1
 2173 0046 87F82530 		strb	r3, [r7, #37]
 181:Src/encoder.cpp ****     lockin_config.finish_on_enc_idx = false;
 2174              		.loc 9 181 37
 2175 004a 0023     		movs	r3, #0
 2176 004c 87F82630 		strb	r3, [r7, #38]
 182:Src/encoder.cpp ****     lockin_config.finish_on_vel = false;
 2177              		.loc 9 182 33
 2178 0050 0023     		movs	r3, #0
 2179 0052 87F82430 		strb	r3, [r7, #36]
 183:Src/encoder.cpp ****     bool status = axis_->run_lockin_spin(lockin_config,false);
 2180              		.loc 9 183 19
 2181 0056 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccqv0h9S.s 			page 90


 2182 0058 9C68     		ldr	r4, [r3, #8]
 2183              		.loc 9 183 61
 2184 005a 07F12803 		add	r3, r7, #40
 2185 005e 1846     		mov	r0, r3
 2186 0060 FFF7FEFF 		bl	_ZNSt8functionIFbbEEC1Ev
 2187              		.loc 9 183 41
 2188 0064 07F12803 		add	r3, r7, #40
 2189 0068 07F10C01 		add	r1, r7, #12
 2190 006c 0022     		movs	r2, #0
 2191 006e 2046     		mov	r0, r4
 2192 0070 FFF7FEFF 		bl	_ZN4Axis15run_lockin_spinERKNS_14LockinConfig_tEbSt8functionIFbbEE
 2193 0074 0346     		mov	r3, r0
 2194 0076 87F83B30 		strb	r3, [r7, #59]
 2195              		.loc 9 183 61
 2196 007a 07F12803 		add	r3, r7, #40
 2197 007e 1846     		mov	r0, r3
 2198 0080 FFF7FEFF 		bl	_ZNSt8functionIFbbEED1Ev
 184:Src/encoder.cpp **** 
 185:Src/encoder.cpp ****     if (status) {
 2199              		.loc 9 185 5
 2200 0084 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 2201 0088 002B     		cmp	r3, #0
 2202 008a 20D0     		beq	.L76
 186:Src/encoder.cpp ****         // Check response and direction
 187:Src/encoder.cpp ****         if (shadow_count_ > init_enc_val + 8) {
 2203              		.loc 9 187 13
 2204 008c 7B68     		ldr	r3, [r7, #4]
 2205 008e 1A69     		ldr	r2, [r3, #16]
 2206              		.loc 9 187 42
 2207 0090 FB6B     		ldr	r3, [r7, #60]
 2208 0092 0833     		adds	r3, r3, #8
 2209              		.loc 9 187 9
 2210 0094 9A42     		cmp	r2, r3
 2211 0096 06DD     		ble	.L77
 188:Src/encoder.cpp ****             // motor same dir as encoder
 189:Src/encoder.cpp ****             axis_->motor_.config_.direction = 1;
 2212              		.loc 9 189 13
 2213 0098 7B68     		ldr	r3, [r7, #4]
 2214 009a 9B68     		ldr	r3, [r3, #8]
 2215              		.loc 9 189 20
 2216 009c DB6E     		ldr	r3, [r3, #108]
 2217              		.loc 9 189 27
 2218 009e 5B68     		ldr	r3, [r3, #4]
 2219              		.loc 9 189 45
 2220 00a0 0122     		movs	r2, #1
 2221 00a2 5A62     		str	r2, [r3, #36]
 2222 00a4 13E0     		b	.L76
 2223              	.L77:
 190:Src/encoder.cpp ****         } else if (shadow_count_ < init_enc_val - 8) {
 2224              		.loc 9 190 20
 2225 00a6 7B68     		ldr	r3, [r7, #4]
 2226 00a8 1A69     		ldr	r2, [r3, #16]
 2227              		.loc 9 190 49
 2228 00aa FB6B     		ldr	r3, [r7, #60]
 2229 00ac 083B     		subs	r3, r3, #8
 2230              		.loc 9 190 16
 2231 00ae 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccqv0h9S.s 			page 91


 2232 00b0 07DA     		bge	.L78
 191:Src/encoder.cpp ****             // motor opposite dir as encoder
 192:Src/encoder.cpp ****             axis_->motor_.config_.direction = -1;
 2233              		.loc 9 192 13
 2234 00b2 7B68     		ldr	r3, [r7, #4]
 2235 00b4 9B68     		ldr	r3, [r3, #8]
 2236              		.loc 9 192 20
 2237 00b6 DB6E     		ldr	r3, [r3, #108]
 2238              		.loc 9 192 27
 2239 00b8 5B68     		ldr	r3, [r3, #4]
 2240              		.loc 9 192 45
 2241 00ba 4FF0FF32 		mov	r2, #-1
 2242 00be 5A62     		str	r2, [r3, #36]
 2243 00c0 05E0     		b	.L76
 2244              	.L78:
 193:Src/encoder.cpp ****         } else {
 194:Src/encoder.cpp ****             axis_->motor_.config_.direction = 0;
 2245              		.loc 9 194 13
 2246 00c2 7B68     		ldr	r3, [r7, #4]
 2247 00c4 9B68     		ldr	r3, [r3, #8]
 2248              		.loc 9 194 20
 2249 00c6 DB6E     		ldr	r3, [r3, #108]
 2250              		.loc 9 194 27
 2251 00c8 5B68     		ldr	r3, [r3, #4]
 2252              		.loc 9 194 45
 2253 00ca 0022     		movs	r2, #0
 2254 00cc 5A62     		str	r2, [r3, #36]
 2255              	.L76:
 195:Src/encoder.cpp ****         }
 196:Src/encoder.cpp ****     }
 197:Src/encoder.cpp **** 
 198:Src/encoder.cpp ****     return status;
 2256              		.loc 9 198 12
 2257 00ce 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 199:Src/encoder.cpp **** }
 2258              		.loc 9 199 1
 2259 00d2 1846     		mov	r0, r3
 2260 00d4 4037     		adds	r7, r7, #64
 2261              	.LCFI146:
 2262              		.cfi_def_cfa_offset 16
 2263 00d6 BD46     		mov	sp, r7
 2264              	.LCFI147:
 2265              		.cfi_def_cfa_register 13
 2266              		@ sp needed
 2267 00d8 B0BD     		pop	{r4, r5, r7, pc}
 2268              		.cfi_endproc
 2269              	.LFE4837:
 2271              		.global	__aeabi_ldivmod
 2272              		.section	.text._ZN7Encoder22run_offset_calibrationEv,"ax",%progbits
 2273              		.align	1
 2274              		.global	_ZN7Encoder22run_offset_calibrationEv
 2275              		.syntax unified
 2276              		.thumb
 2277              		.thumb_func
 2278              		.fpu fpv4-sp-d16
 2280              	_ZN7Encoder22run_offset_calibrationEv:
 2281              	.LFB4838:
ARM GAS  /tmp/ccqv0h9S.s 			page 92


 200:Src/encoder.cpp **** 
 201:Src/encoder.cpp **** // @brief Turns the motor in one direction for a bit and then in the other
 202:Src/encoder.cpp **** // direction in order to find the offset between the electrical phase 0
 203:Src/encoder.cpp **** // and the encoder state 0.
 204:Src/encoder.cpp **** // TODO: Do the scan with current, not voltage!
 205:Src/encoder.cpp **** bool Encoder::run_offset_calibration() {
 2282              		.loc 9 205 40
 2283              		.cfi_startproc
 2284              		@ args = 0, pretend = 0, frame = 136
 2285              		@ frame_needed = 1, uses_anonymous_args = 0
 2286 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2287              	.LCFI148:
 2288              		.cfi_def_cfa_offset 36
 2289              		.cfi_offset 4, -36
 2290              		.cfi_offset 5, -32
 2291              		.cfi_offset 6, -28
 2292              		.cfi_offset 7, -24
 2293              		.cfi_offset 8, -20
 2294              		.cfi_offset 9, -16
 2295              		.cfi_offset 10, -12
 2296              		.cfi_offset 11, -8
 2297              		.cfi_offset 14, -4
 2298 0004 A3B0     		sub	sp, sp, #140
 2299              	.LCFI149:
 2300              		.cfi_def_cfa_offset 176
 2301 0006 00AF     		add	r7, sp, #0
 2302              	.LCFI150:
 2303              		.cfi_def_cfa_register 7
 2304 0008 7861     		str	r0, [r7, #20]
 206:Src/encoder.cpp **** 
 207:Src/encoder.cpp ****     const float start_lock_duration = 1.0f;
 2305              		.loc 9 207 17
 2306 000a 4FF07E53 		mov	r3, #1065353216
 2307 000e 7B67     		str	r3, [r7, #116]	@ float
 208:Src/encoder.cpp ****     
 209:Src/encoder.cpp ****     // We use shadow_count_ to do the calibration, but the offset is used by count_in_cpr_
 210:Src/encoder.cpp ****     // Therefore we have to sync them for calibration
 211:Src/encoder.cpp ****     shadow_count_ = count_in_cpr_;
 2308              		.loc 9 211 21
 2309 0010 7B69     		ldr	r3, [r7, #20]
 2310 0012 5A69     		ldr	r2, [r3, #20]
 2311              		.loc 9 211 19
 2312 0014 7B69     		ldr	r3, [r7, #20]
 2313 0016 1A61     		str	r2, [r3, #16]
 212:Src/encoder.cpp **** 
 213:Src/encoder.cpp ****     uint32_t mask = cpu_enter_critical();
 2314              		.loc 9 213 39
 2315 0018 FFF7FEFF 		bl	cpu_enter_critical
 2316 001c 3867     		str	r0, [r7, #112]
 2317              	.LBB18:
 214:Src/encoder.cpp ****     {
 215:Src/encoder.cpp ****         // Reset state variables
 216:Src/encoder.cpp ****         axis_->open_loop_controller_.Idq_setpoint_ = {0.0f, 0.0f};
 2318              		.loc 9 216 55
 2319 001e 4FF00003 		mov	r3, #0
 2320 0022 7B62     		str	r3, [r7, #36]	@ float
 2321              		.loc 9 216 61
ARM GAS  /tmp/ccqv0h9S.s 			page 93


 2322 0024 4FF00003 		mov	r3, #0
 2323 0028 BB62     		str	r3, [r7, #40]	@ float
 2324              		.loc 9 216 65
 2325 002a 07F12802 		add	r2, r7, #40
 2326 002e 07F12401 		add	r1, r7, #36
 2327 0032 07F11C03 		add	r3, r7, #28
 2328 0036 1846     		mov	r0, r3
 2329 0038 FFF7FEFF 		bl	_ZNSt4pairIffEC1IffLb1EEEOT_OT0_
 2330              		.loc 9 216 9
 2331 003c 7B69     		ldr	r3, [r7, #20]
 2332 003e 9B68     		ldr	r3, [r3, #8]
 2333              		.loc 9 216 52
 2334 0040 3433     		adds	r3, r3, #52
 2335 0042 97ED077A 		vldr.32	s14, [r7, #28]
 2336 0046 D7ED087A 		vldr.32	s15, [r7, #32]
 2337 004a B0EE470A 		vmov.f32	s0, s14
 2338 004e F0EE670A 		vmov.f32	s1, s15
 2339 0052 1846     		mov	r0, r3
 2340 0054 FFF7FEFF 		bl	_ZN10OutputPortISt4pairIffEEaSES1_
 217:Src/encoder.cpp ****         axis_->open_loop_controller_.Vdq_setpoint_ = {0.0f, 0.0f};
 2341              		.loc 9 217 55
 2342 0058 4FF00003 		mov	r3, #0
 2343 005c 7B63     		str	r3, [r7, #52]	@ float
 2344              		.loc 9 217 61
 2345 005e 4FF00003 		mov	r3, #0
 2346 0062 BB63     		str	r3, [r7, #56]	@ float
 2347              		.loc 9 217 65
 2348 0064 07F13802 		add	r2, r7, #56
 2349 0068 07F13401 		add	r1, r7, #52
 2350 006c 07F12C03 		add	r3, r7, #44
 2351 0070 1846     		mov	r0, r3
 2352 0072 FFF7FEFF 		bl	_ZNSt4pairIffEC1IffLb1EEEOT_OT0_
 2353              		.loc 9 217 9
 2354 0076 7B69     		ldr	r3, [r7, #20]
 2355 0078 9B68     		ldr	r3, [r3, #8]
 2356              		.loc 9 217 52
 2357 007a 4033     		adds	r3, r3, #64
 2358 007c 97ED0B7A 		vldr.32	s14, [r7, #44]
 2359 0080 D7ED0C7A 		vldr.32	s15, [r7, #48]
 2360 0084 B0EE470A 		vmov.f32	s0, s14
 2361 0088 F0EE670A 		vmov.f32	s1, s15
 2362 008c 1846     		mov	r0, r3
 2363 008e FFF7FEFF 		bl	_ZN10OutputPortISt4pairIffEEaSES1_
 218:Src/encoder.cpp ****         axis_->open_loop_controller_.phase_ = 0.0f;
 2364              		.loc 9 218 9
 2365 0092 7B69     		ldr	r3, [r7, #20]
 2366 0094 9B68     		ldr	r3, [r3, #8]
 2367              		.loc 9 218 45
 2368 0096 4C33     		adds	r3, r3, #76
 2369 0098 9FED800A 		vldr.32	s0, .L103
 2370 009c 1846     		mov	r0, r3
 2371 009e FFF7FEFF 		bl	_ZN10OutputPortIfEaSEf
 219:Src/encoder.cpp ****         axis_->open_loop_controller_.phase_vel_ = 0.0f;
 2372              		.loc 9 219 9
 2373 00a2 7B69     		ldr	r3, [r7, #20]
 2374 00a4 9B68     		ldr	r3, [r3, #8]
 2375              		.loc 9 219 49
ARM GAS  /tmp/ccqv0h9S.s 			page 94


 2376 00a6 5433     		adds	r3, r3, #84
 2377 00a8 9FED7C0A 		vldr.32	s0, .L103
 2378 00ac 1846     		mov	r0, r3
 2379 00ae FFF7FEFF 		bl	_ZN10OutputPortIfEaSEf
 220:Src/encoder.cpp **** 
 221:Src/encoder.cpp ****         float max_current_ramp = axis_->motor_.config_.calibration_current / start_lock_duration * 
 2380              		.loc 9 221 34
 2381 00b2 7B69     		ldr	r3, [r7, #20]
 2382 00b4 9B68     		ldr	r3, [r3, #8]
 2383              		.loc 9 221 41
 2384 00b6 DB6E     		ldr	r3, [r3, #108]
 2385              		.loc 9 221 48
 2386 00b8 5B68     		ldr	r3, [r3, #4]
 2387              		.loc 9 221 56
 2388 00ba D3ED047A 		vldr.32	s15, [r3, #16]
 2389              		.loc 9 221 15
 2390 00be 77EEA77A 		vadd.f32	s15, s15, s15
 2391 00c2 C7ED1B7A 		vstr.32	s15, [r7, #108]
 222:Src/encoder.cpp ****         axis_->open_loop_controller_.max_current_ramp_ = max_current_ramp;
 2392              		.loc 9 222 9
 2393 00c6 7B69     		ldr	r3, [r7, #20]
 2394 00c8 9B68     		ldr	r3, [r3, #8]
 2395              		.loc 9 222 56
 2396 00ca FA6E     		ldr	r2, [r7, #108]	@ float
 2397 00cc 5A61     		str	r2, [r3, #20]	@ float
 223:Src/encoder.cpp ****         axis_->open_loop_controller_.max_voltage_ramp_ = max_current_ramp;
 2398              		.loc 9 223 9
 2399 00ce 7B69     		ldr	r3, [r7, #20]
 2400 00d0 9B68     		ldr	r3, [r3, #8]
 2401              		.loc 9 223 56
 2402 00d2 FA6E     		ldr	r2, [r7, #108]	@ float
 2403 00d4 9A61     		str	r2, [r3, #24]	@ float
 224:Src/encoder.cpp ****         axis_->open_loop_controller_.max_phase_vel_ramp_ = INFINITY;
 2404              		.loc 9 224 9
 2405 00d6 7B69     		ldr	r3, [r7, #20]
 2406 00d8 9B68     		ldr	r3, [r3, #8]
 2407              		.loc 9 224 58
 2408 00da 4FF0FF42 		mov	r2, #2139095040
 2409 00de DA61     		str	r2, [r3, #28]	@ float
 225:Src/encoder.cpp ****         axis_->open_loop_controller_.target_current_ = axis_->motor_.config_.motor_type != Motor::M
 2410              		.loc 9 225 56
 2411 00e0 7B69     		ldr	r3, [r7, #20]
 2412 00e2 9B68     		ldr	r3, [r3, #8]
 2413              		.loc 9 225 63
 2414 00e4 DB6E     		ldr	r3, [r3, #108]
 2415              		.loc 9 225 70
 2416 00e6 5B68     		ldr	r3, [r3, #4]
 2417              		.loc 9 225 78
 2418 00e8 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 2419              		.loc 9 225 117
 2420 00ec 022B     		cmp	r3, #2
 2421 00ee 05D0     		beq	.L81
 2422              		.loc 9 225 119 discriminator 1
 2423 00f0 7B69     		ldr	r3, [r7, #20]
 2424 00f2 9B68     		ldr	r3, [r3, #8]
 2425              		.loc 9 225 126 discriminator 1
 2426 00f4 DB6E     		ldr	r3, [r3, #108]
ARM GAS  /tmp/ccqv0h9S.s 			page 95


 2427              		.loc 9 225 133 discriminator 1
 2428 00f6 5B68     		ldr	r3, [r3, #4]
 2429              		.loc 9 225 117 discriminator 1
 2430 00f8 1B69     		ldr	r3, [r3, #16]	@ float
 2431 00fa 01E0     		b	.L82
 2432              	.L81:
 2433              		.loc 9 225 117 is_stmt 0 discriminator 2
 2434 00fc 4FF00003 		mov	r3, #0
 2435              	.L82:
 2436              		.loc 9 225 9 is_stmt 1 discriminator 4
 2437 0100 7A69     		ldr	r2, [r7, #20]
 2438 0102 9268     		ldr	r2, [r2, #8]
 2439              		.loc 9 225 54 discriminator 4
 2440 0104 5362     		str	r3, [r2, #36]	@ float
 226:Src/encoder.cpp ****         axis_->open_loop_controller_.target_voltage_ = axis_->motor_.config_.motor_type != Motor::M
 2441              		.loc 9 226 56 discriminator 4
 2442 0106 7B69     		ldr	r3, [r7, #20]
 2443 0108 9B68     		ldr	r3, [r3, #8]
 2444              		.loc 9 226 63 discriminator 4
 2445 010a DB6E     		ldr	r3, [r3, #108]
 2446              		.loc 9 226 70 discriminator 4
 2447 010c 5B68     		ldr	r3, [r3, #4]
 2448              		.loc 9 226 78 discriminator 4
 2449 010e 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 2450              		.loc 9 226 117 discriminator 4
 2451 0112 022B     		cmp	r3, #2
 2452 0114 05D1     		bne	.L83
 2453              		.loc 9 226 126 discriminator 1
 2454 0116 7B69     		ldr	r3, [r7, #20]
 2455 0118 9B68     		ldr	r3, [r3, #8]
 2456              		.loc 9 226 133 discriminator 1
 2457 011a DB6E     		ldr	r3, [r3, #108]
 2458              		.loc 9 226 140 discriminator 1
 2459 011c 5B68     		ldr	r3, [r3, #4]
 2460              		.loc 9 226 117 discriminator 1
 2461 011e 1B69     		ldr	r3, [r3, #16]	@ float
 2462 0120 01E0     		b	.L84
 2463              	.L83:
 2464              		.loc 9 226 117 is_stmt 0 discriminator 2
 2465 0122 4FF00003 		mov	r3, #0
 2466              	.L84:
 2467              		.loc 9 226 9 is_stmt 1 discriminator 4
 2468 0126 7A69     		ldr	r2, [r7, #20]
 2469 0128 9268     		ldr	r2, [r2, #8]
 2470              		.loc 9 226 54 discriminator 4
 2471 012a 9362     		str	r3, [r2, #40]	@ float
 227:Src/encoder.cpp ****         axis_->open_loop_controller_.target_vel_ = 0.0f;
 2472              		.loc 9 227 9 discriminator 4
 2473 012c 7B69     		ldr	r3, [r7, #20]
 2474 012e 9B68     		ldr	r3, [r3, #8]
 2475              		.loc 9 227 50 discriminator 4
 2476 0130 4FF00002 		mov	r2, #0
 2477 0134 1A62     		str	r2, [r3, #32]	@ float
 228:Src/encoder.cpp ****         axis_->open_loop_controller_.total_distance_ = 0.0f;
 2478              		.loc 9 228 9 discriminator 4
 2479 0136 7B69     		ldr	r3, [r7, #20]
 2480 0138 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/ccqv0h9S.s 			page 96


 2481              		.loc 9 228 54 discriminator 4
 2482 013a 5C33     		adds	r3, r3, #92
 2483 013c 9FED570A 		vldr.32	s0, .L103
 2484 0140 1846     		mov	r0, r3
 2485 0142 FFF7FEFF 		bl	_ZN10OutputPortIfEaSEf
 229:Src/encoder.cpp ****         axis_->open_loop_controller_.phase_ = axis_->open_loop_controller_.initial_phase_ = wrap_pm
 2486              		.loc 9 229 108 discriminator 4
 2487 0146 7B69     		ldr	r3, [r7, #20]
 2488 0148 5B68     		ldr	r3, [r3, #4]
 2489              		.loc 9 229 116 discriminator 4
 2490 014a 93ED077A 		vldr.32	s14, [r3, #28]
 2491              		.loc 9 229 136 discriminator 4
 2492 014e F0EE006A 		vmov.f32	s13, #2.0e+0
 2493 0152 C7EE267A 		vdiv.f32	s15, s14, s13
 2494              		.loc 9 229 103 discriminator 4
 2495 0156 9FED517A 		vldr.32	s14, .L103
 2496 015a 77EE677A 		vsub.f32	s15, s14, s15
 2497              		.loc 9 229 47 discriminator 4
 2498 015e 7B69     		ldr	r3, [r7, #20]
 2499 0160 9C68     		ldr	r4, [r3, #8]
 2500              		.loc 9 229 103 discriminator 4
 2501 0162 B0EE670A 		vmov.f32	s0, s15
 2502 0166 FFF7FEFF 		bl	wrap_pm_pi
 2503 016a F0EE407A 		vmov.f32	s15, s0
 2504              		.loc 9 229 45 discriminator 4
 2505 016e C4ED0B7A 		vstr.32	s15, [r4, #44]
 2506              		.loc 9 229 76 discriminator 4
 2507 0172 D4ED0B7A 		vldr.32	s15, [r4, #44]
 2508              		.loc 9 229 9 discriminator 4
 2509 0176 7B69     		ldr	r3, [r7, #20]
 2510 0178 9B68     		ldr	r3, [r3, #8]
 2511              		.loc 9 229 45 discriminator 4
 2512 017a 4C33     		adds	r3, r3, #76
 2513 017c B0EE670A 		vmov.f32	s0, s15
 2514 0180 1846     		mov	r0, r3
 2515 0182 FFF7FEFF 		bl	_ZN10OutputPortIfEaSEf
 230:Src/encoder.cpp **** 
 231:Src/encoder.cpp ****         axis_->motor_.current_control_.enable_current_control_src_ = (axis_->motor_.config_.motor_t
 2516              		.loc 9 231 71 discriminator 4
 2517 0186 7B69     		ldr	r3, [r7, #20]
 2518 0188 9B68     		ldr	r3, [r3, #8]
 2519              		.loc 9 231 78 discriminator 4
 2520 018a DB6E     		ldr	r3, [r3, #108]
 2521              		.loc 9 231 85 discriminator 4
 2522 018c 5B68     		ldr	r3, [r3, #4]
 2523              		.loc 9 231 93 discriminator 4
 2524 018e 93F82820 		ldrb	r2, [r3, #40]	@ zero_extendqisi2
 2525              		.loc 9 231 9 discriminator 4
 2526 0192 7B69     		ldr	r3, [r7, #20]
 2527 0194 9B68     		ldr	r3, [r3, #8]
 2528              		.loc 9 231 16 discriminator 4
 2529 0196 DB6E     		ldr	r3, [r3, #108]
 2530              		.loc 9 231 104 discriminator 4
 2531 0198 022A     		cmp	r2, #2
 2532 019a 14BF     		ite	ne
 2533 019c 0122     		movne	r2, #1
 2534 019e 0022     		moveq	r2, #0
ARM GAS  /tmp/ccqv0h9S.s 			page 97


 2535 01a0 D2B2     		uxtb	r2, r2
 2536              		.loc 9 231 68 discriminator 4
 2537 01a2 83F81423 		strb	r2, [r3, #788]
 232:Src/encoder.cpp ****         axis_->motor_.current_control_.Idq_setpoint_src_.connect_to(&axis_->open_loop_controller_.I
 2538              		.loc 9 232 9 discriminator 4
 2539 01a6 7B69     		ldr	r3, [r7, #20]
 2540 01a8 9B68     		ldr	r3, [r3, #8]
 2541              		.loc 9 232 16 discriminator 4
 2542 01aa DB6E     		ldr	r3, [r3, #108]
 2543              		.loc 9 232 68 discriminator 4
 2544 01ac 03F54672 		add	r2, r3, #792
 2545              		.loc 9 232 70 discriminator 4
 2546 01b0 7B69     		ldr	r3, [r7, #20]
 2547 01b2 9B68     		ldr	r3, [r3, #8]
 2548              		.loc 9 232 68 discriminator 4
 2549 01b4 3433     		adds	r3, r3, #52
 2550 01b6 1946     		mov	r1, r3
 2551 01b8 1046     		mov	r0, r2
 2552 01ba FFF7FEFF 		bl	_ZN9InputPortISt4pairIffEE10connect_toEP10OutputPortIS1_E
 233:Src/encoder.cpp ****         axis_->motor_.current_control_.Vdq_setpoint_src_.connect_to(&axis_->open_loop_controller_.V
 2553              		.loc 9 233 9 discriminator 4
 2554 01be 7B69     		ldr	r3, [r7, #20]
 2555 01c0 9B68     		ldr	r3, [r3, #8]
 2556              		.loc 9 233 16 discriminator 4
 2557 01c2 DB6E     		ldr	r3, [r3, #108]
 2558              		.loc 9 233 68 discriminator 4
 2559 01c4 03F54972 		add	r2, r3, #804
 2560              		.loc 9 233 70 discriminator 4
 2561 01c8 7B69     		ldr	r3, [r7, #20]
 2562 01ca 9B68     		ldr	r3, [r3, #8]
 2563              		.loc 9 233 68 discriminator 4
 2564 01cc 4033     		adds	r3, r3, #64
 2565 01ce 1946     		mov	r1, r3
 2566 01d0 1046     		mov	r0, r2
 2567 01d2 FFF7FEFF 		bl	_ZN9InputPortISt4pairIffEE10connect_toEP10OutputPortIS1_E
 234:Src/encoder.cpp ****         
 235:Src/encoder.cpp ****         axis_->motor_.current_control_.phase_src_.connect_to(&axis_->open_loop_controller_.phase_);
 2568              		.loc 9 235 9 discriminator 4
 2569 01d6 7B69     		ldr	r3, [r7, #20]
 2570 01d8 9B68     		ldr	r3, [r3, #8]
 2571              		.loc 9 235 16 discriminator 4
 2572 01da DB6E     		ldr	r3, [r3, #108]
 2573              		.loc 9 235 61 discriminator 4
 2574 01dc 03F54C72 		add	r2, r3, #816
 2575              		.loc 9 235 63 discriminator 4
 2576 01e0 7B69     		ldr	r3, [r7, #20]
 2577 01e2 9B68     		ldr	r3, [r3, #8]
 2578              		.loc 9 235 61 discriminator 4
 2579 01e4 4C33     		adds	r3, r3, #76
 2580 01e6 1946     		mov	r1, r3
 2581 01e8 1046     		mov	r0, r2
 2582 01ea FFF7FEFF 		bl	_ZN9InputPortIfE10connect_toEP10OutputPortIfE
 236:Src/encoder.cpp **** 
 237:Src/encoder.cpp ****         axis_->motor_.phase_vel_src_.connect_to(&axis_->open_loop_controller_.phase_vel_);
 2583              		.loc 9 237 9 discriminator 4
 2584 01ee 7B69     		ldr	r3, [r7, #20]
 2585 01f0 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/ccqv0h9S.s 			page 98


 2586              		.loc 9 237 16 discriminator 4
 2587 01f2 DB6E     		ldr	r3, [r3, #108]
 2588              		.loc 9 237 48 discriminator 4
 2589 01f4 03F56E72 		add	r2, r3, #952
 2590              		.loc 9 237 50 discriminator 4
 2591 01f8 7B69     		ldr	r3, [r7, #20]
 2592 01fa 9B68     		ldr	r3, [r3, #8]
 2593              		.loc 9 237 48 discriminator 4
 2594 01fc 5433     		adds	r3, r3, #84
 2595 01fe 1946     		mov	r1, r3
 2596 0200 1046     		mov	r0, r2
 2597 0202 FFF7FEFF 		bl	_ZN9InputPortIfE10connect_toEP10OutputPortIfE
 238:Src/encoder.cpp ****         axis_->motor_.current_control_.phase_vel_src_.connect_to(&axis_->open_loop_controller_.phas
 2598              		.loc 9 238 9 discriminator 4
 2599 0206 7B69     		ldr	r3, [r7, #20]
 2600 0208 9B68     		ldr	r3, [r3, #8]
 2601              		.loc 9 238 16 discriminator 4
 2602 020a DB6E     		ldr	r3, [r3, #108]
 2603              		.loc 9 238 65 discriminator 4
 2604 020c 03F54E72 		add	r2, r3, #824
 2605              		.loc 9 238 67 discriminator 4
 2606 0210 7B69     		ldr	r3, [r7, #20]
 2607 0212 9B68     		ldr	r3, [r3, #8]
 2608              		.loc 9 238 65 discriminator 4
 2609 0214 5433     		adds	r3, r3, #84
 2610 0216 1946     		mov	r1, r3
 2611 0218 1046     		mov	r0, r2
 2612 021a FFF7FEFF 		bl	_ZN9InputPortIfE10connect_toEP10OutputPortIfE
 2613              	.LBE18:
 239:Src/encoder.cpp ****     }
 240:Src/encoder.cpp ****     cpu_exit_critical(mask);
 2614              		.loc 9 240 22 discriminator 4
 2615 021e 386F     		ldr	r0, [r7, #112]
 2616 0220 FFF7FEFF 		bl	cpu_exit_critical
 241:Src/encoder.cpp **** 
 242:Src/encoder.cpp ****     axis_->wait_for_control_iteration();
 2617              		.loc 9 242 5 discriminator 4
 2618 0224 7B69     		ldr	r3, [r7, #20]
 2619 0226 9B68     		ldr	r3, [r3, #8]
 2620              		.loc 9 242 38 discriminator 4
 2621 0228 1846     		mov	r0, r3
 2622 022a FFF7FEFF 		bl	_ZN4Axis26wait_for_control_iterationEv
 243:Src/encoder.cpp **** 
 244:Src/encoder.cpp ****     axis_->motor_.arm(&axis_->motor_.current_control_);
 2623              		.loc 9 244 5 discriminator 4
 2624 022e 7B69     		ldr	r3, [r7, #20]
 2625 0230 9B68     		ldr	r3, [r3, #8]
 2626              		.loc 9 244 12 discriminator 4
 2627 0232 DA6E     		ldr	r2, [r3, #108]
 2628              		.loc 9 244 24 discriminator 4
 2629 0234 7B69     		ldr	r3, [r7, #20]
 2630 0236 9B68     		ldr	r3, [r3, #8]
 2631              		.loc 9 244 31 discriminator 4
 2632 0238 DB6E     		ldr	r3, [r3, #108]
 2633              		.loc 9 244 22 discriminator 4
 2634 023a 03F53F73 		add	r3, r3, #764
 2635 023e 1946     		mov	r1, r3
ARM GAS  /tmp/ccqv0h9S.s 			page 99


 2636 0240 1046     		mov	r0, r2
 2637 0242 FFF7FEFF 		bl	_ZN5Motor3armEP15PhaseControlLawILj3EE
 2638              	.LBB19:
 245:Src/encoder.cpp **** 
 246:Src/encoder.cpp ****     // go to start position of forward scan for start_lock_duration to get ready to scan
 247:Src/encoder.cpp ****     for (size_t i = 0; i < (size_t)(start_lock_duration * 1000.0f); ++i) {
 2639              		.loc 9 247 17 discriminator 4
 2640 0246 0023     		movs	r3, #0
 2641 0248 C7F88430 		str	r3, [r7, #132]
 2642              	.L89:
 2643              		.loc 9 247 26 discriminator 1
 2644 024c D7F88430 		ldr	r3, [r7, #132]
 2645 0250 B3F57A7F 		cmp	r3, #1000
 2646 0254 24D2     		bcs	.L85
 248:Src/encoder.cpp ****         if (!axis_->motor_.is_armed_) {
 2647              		.loc 9 248 14
 2648 0256 7B69     		ldr	r3, [r7, #20]
 2649 0258 9B68     		ldr	r3, [r3, #8]
 2650              		.loc 9 248 21
 2651 025a DB6E     		ldr	r3, [r3, #108]
 2652              		.loc 9 248 28
 2653 025c 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2654              		.loc 9 248 13
 2655 0260 83F00103 		eor	r3, r3, #1
 2656 0264 DBB2     		uxtb	r3, r3
 2657              		.loc 9 248 9
 2658 0266 002B     		cmp	r3, #0
 2659 0268 01D0     		beq	.L86
 249:Src/encoder.cpp ****             return false; // TODO: return "disarmed" error code
 2660              		.loc 9 249 20
 2661 026a 0023     		movs	r3, #0
 2662 026c B1E1     		b	.L87
 2663              	.L86:
 250:Src/encoder.cpp ****         }
 251:Src/encoder.cpp ****         if (axis_->requested_state_ != Axis::AXIS_STATE_UNDEFINED) {
 2664              		.loc 9 251 13
 2665 026e 7B69     		ldr	r3, [r7, #20]
 2666 0270 9B68     		ldr	r3, [r3, #8]
 2667              		.loc 9 251 20
 2668 0272 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 2669              		.loc 9 251 9
 2670 0276 002B     		cmp	r3, #0
 2671 0278 07D0     		beq	.L88
 252:Src/encoder.cpp ****             axis_->motor_.disarm();
 2672              		.loc 9 252 13
 2673 027a 7B69     		ldr	r3, [r7, #20]
 2674 027c 9B68     		ldr	r3, [r3, #8]
 2675              		.loc 9 252 20
 2676 027e DB6E     		ldr	r3, [r3, #108]
 2677              		.loc 9 252 33
 2678 0280 1846     		mov	r0, r3
 2679 0282 FFF7FEFF 		bl	_ZN5Motor6disarmEv
 253:Src/encoder.cpp ****             return false; // TODO: return "aborted" error code
 2680              		.loc 9 253 20
 2681 0286 0023     		movs	r3, #0
 2682 0288 A3E1     		b	.L87
 2683              	.L88:
ARM GAS  /tmp/ccqv0h9S.s 			page 100


 254:Src/encoder.cpp ****         }
 255:Src/encoder.cpp ****         osDelay(1);
 2684              		.loc 9 255 16 discriminator 2
 2685 028a 0120     		movs	r0, #1
 2686 028c FFF7FEFF 		bl	osDelay
 247:Src/encoder.cpp ****         if (!axis_->motor_.is_armed_) {
 2687              		.loc 9 247 5 discriminator 2
 2688 0290 D7F88430 		ldr	r3, [r7, #132]
 2689 0294 0133     		adds	r3, r3, #1
 2690 0296 C7F88430 		str	r3, [r7, #132]
 2691 029a D7E7     		b	.L89
 2692              	.L104:
 2693              		.align	2
 2694              	.L103:
 2695 029c 00000000 		.word	0
 2696              	.L85:
 2697              	.LBE19:
 256:Src/encoder.cpp ****     }
 257:Src/encoder.cpp **** 
 258:Src/encoder.cpp **** 
 259:Src/encoder.cpp ****     int32_t init_enc_val = shadow_count_;
 2698              		.loc 9 259 13
 2699 02a0 7B69     		ldr	r3, [r7, #20]
 2700 02a2 1B69     		ldr	r3, [r3, #16]
 2701 02a4 BB66     		str	r3, [r7, #104]
 260:Src/encoder.cpp ****     uint32_t num_steps = 0;
 2702              		.loc 9 260 14
 2703 02a6 0023     		movs	r3, #0
 2704 02a8 C7F88030 		str	r3, [r7, #128]
 261:Src/encoder.cpp ****     int64_t encvaluesum = 0;
 2705              		.loc 9 261 13
 2706 02ac 4FF00002 		mov	r2, #0
 2707 02b0 4FF00003 		mov	r3, #0
 2708 02b4 C7E91E23 		strd	r2, [r7, #120]
 262:Src/encoder.cpp **** 
 263:Src/encoder.cpp ****     mask = cpu_enter_critical();
 2709              		.loc 9 263 30
 2710 02b8 FFF7FEFF 		bl	cpu_enter_critical
 2711 02bc 3867     		str	r0, [r7, #112]
 264:Src/encoder.cpp ****     {
 265:Src/encoder.cpp ****         axis_->open_loop_controller_.target_vel_ = config_.calib_scan_omega;
 2712              		.loc 9 265 52
 2713 02be 7B69     		ldr	r3, [r7, #20]
 2714 02c0 5A68     		ldr	r2, [r3, #4]
 2715              		.loc 9 265 9
 2716 02c2 7B69     		ldr	r3, [r7, #20]
 2717 02c4 9B68     		ldr	r3, [r3, #8]
 2718              		.loc 9 265 60
 2719 02c6 126A     		ldr	r2, [r2, #32]	@ float
 2720              		.loc 9 265 50
 2721 02c8 1A62     		str	r2, [r3, #32]	@ float
 266:Src/encoder.cpp ****         axis_->open_loop_controller_.total_distance_ = 0.0f;
 2722              		.loc 9 266 9
 2723 02ca 7B69     		ldr	r3, [r7, #20]
 2724 02cc 9B68     		ldr	r3, [r3, #8]
 2725              		.loc 9 266 54
 2726 02ce 5C33     		adds	r3, r3, #92
ARM GAS  /tmp/ccqv0h9S.s 			page 101


 2727 02d0 1FED0E0A 		vldr.32	s0, .L103
 2728 02d4 1846     		mov	r0, r3
 2729 02d6 FFF7FEFF 		bl	_ZN10OutputPortIfEaSEf
 267:Src/encoder.cpp ****     }
 268:Src/encoder.cpp ****     cpu_exit_critical(mask);
 2730              		.loc 9 268 22
 2731 02da 386F     		ldr	r0, [r7, #112]
 2732 02dc FFF7FEFF 		bl	cpu_exit_critical
 2733              	.L92:
 269:Src/encoder.cpp **** 
 270:Src/encoder.cpp ****     // scan forward
 271:Src/encoder.cpp ****     while ((axis_->requested_state_ == Axis::AXIS_STATE_UNDEFINED) && axis_->motor_.is_armed_) {
 2734              		.loc 9 271 13
 2735 02e0 7B69     		ldr	r3, [r7, #20]
 2736 02e2 9B68     		ldr	r3, [r3, #8]
 2737              		.loc 9 271 20
 2738 02e4 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 2739              		.loc 9 271 68
 2740 02e8 002B     		cmp	r3, #0
 2741 02ea 4BD1     		bne	.L90
 2742              		.loc 9 271 71 discriminator 1
 2743 02ec 7B69     		ldr	r3, [r7, #20]
 2744 02ee 9B68     		ldr	r3, [r3, #8]
 2745              		.loc 9 271 78 discriminator 1
 2746 02f0 DB6E     		ldr	r3, [r3, #108]
 2747              		.loc 9 271 85 discriminator 1
 2748 02f2 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2749 02f6 83F00103 		eor	r3, r3, #1
 2750 02fa DBB2     		uxtb	r3, r3
 2751              		.loc 9 271 68 discriminator 1
 2752 02fc 002B     		cmp	r3, #0
 2753 02fe 41D1     		bne	.L90
 2754              	.LBB20:
 272:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(-INF
 2755              		.loc 9 272 36
 2756 0300 7B69     		ldr	r3, [r7, #20]
 2757 0302 9B68     		ldr	r3, [r3, #8]
 2758              		.loc 9 272 85
 2759 0304 03F15C02 		add	r2, r3, #92
 2760 0308 07F13C03 		add	r3, r7, #60
 2761 030c 1146     		mov	r1, r2
 2762 030e 1846     		mov	r0, r3
 2763 0310 FFF7FEFF 		bl	_ZN10OutputPortIfE3anyEv
 2764              		.loc 9 272 96
 2765 0314 B14B     		ldr	r3, .L105
 2766 0316 7B64     		str	r3, [r7, #68]	@ float
 2767              		.loc 9 272 95
 2768 0318 07F14402 		add	r2, r7, #68
 2769 031c 07F13C03 		add	r3, r7, #60
 2770 0320 1146     		mov	r1, r2
 2771 0322 1846     		mov	r0, r3
 2772 0324 FFF7FEFF 		bl	_ZNOSt8optionalIfE8value_orIfEEfOT_
 2773 0328 B0EE407A 		vmov.f32	s14, s0
 2774              		.loc 9 272 110
 2775 032c 7B69     		ldr	r3, [r7, #20]
 2776 032e 5B68     		ldr	r3, [r3, #4]
 2777              		.loc 9 272 118
ARM GAS  /tmp/ccqv0h9S.s 			page 102


 2778 0330 D3ED077A 		vldr.32	s15, [r3, #28]
 2779 0334 B4EEE77A 		vcmpe.f32	s14, s15
 2780 0338 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2781 033c ACBF     		ite	ge
 2782 033e 0123     		movge	r3, #1
 2783 0340 0023     		movlt	r3, #0
 2784 0342 87F86730 		strb	r3, [r7, #103]
 273:Src/encoder.cpp ****         if (reached_target_dist) {
 2785              		.loc 9 273 9
 2786 0346 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 2787 034a 002B     		cmp	r3, #0
 2788 034c 19D1     		bne	.L101
 274:Src/encoder.cpp ****             break;
 275:Src/encoder.cpp ****         }
 276:Src/encoder.cpp ****         encvaluesum += shadow_count_;
 2789              		.loc 9 276 24
 2790 034e 7B69     		ldr	r3, [r7, #20]
 2791 0350 1B69     		ldr	r3, [r3, #16]
 2792 0352 DA17     		asrs	r2, r3, #31
 2793 0354 9A46     		mov	r10, r3
 2794 0356 9346     		mov	fp, r2
 2795              		.loc 9 276 21
 2796 0358 D7E91E23 		ldrd	r2, [r7, #120]
 2797 035c 12EB0A01 		adds	r1, r2, r10
 2798 0360 3960     		str	r1, [r7]
 2799 0362 43EB0B03 		adc	r3, r3, fp
 2800 0366 7B60     		str	r3, [r7, #4]
 2801 0368 D7E90034 		ldrd	r3, [r7]
 2802 036c C7E91E34 		strd	r3, [r7, #120]
 277:Src/encoder.cpp ****         num_steps++;
 2803              		.loc 9 277 18
 2804 0370 D7F88030 		ldr	r3, [r7, #128]
 2805 0374 0133     		adds	r3, r3, #1
 2806 0376 C7F88030 		str	r3, [r7, #128]
 278:Src/encoder.cpp ****         osDelay(1);
 2807              		.loc 9 278 16
 2808 037a 0120     		movs	r0, #1
 2809 037c FFF7FEFF 		bl	osDelay
 2810              	.LBE20:
 271:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(-INF
 2811              		.loc 9 271 5
 2812 0380 AEE7     		b	.L92
 2813              	.L101:
 2814              	.LBB21:
 274:Src/encoder.cpp ****         }
 2815              		.loc 9 274 13
 2816 0382 00BF     		nop
 2817              	.L90:
 2818              	.LBE21:
 279:Src/encoder.cpp ****     }
 280:Src/encoder.cpp **** 
 281:Src/encoder.cpp ****     // Check response and direction
 282:Src/encoder.cpp ****     if (shadow_count_ > init_enc_val + 8) {
 2819              		.loc 9 282 9
 2820 0384 7B69     		ldr	r3, [r7, #20]
 2821 0386 1A69     		ldr	r2, [r3, #16]
 2822              		.loc 9 282 38
ARM GAS  /tmp/ccqv0h9S.s 			page 103


 2823 0388 BB6E     		ldr	r3, [r7, #104]
 2824 038a 0833     		adds	r3, r3, #8
 2825              		.loc 9 282 5
 2826 038c 9A42     		cmp	r2, r3
 2827 038e 04DD     		ble	.L93
 283:Src/encoder.cpp ****         // motor same dir as encoder
 284:Src/encoder.cpp ****         config_.direction = 1;
 2828              		.loc 9 284 9
 2829 0390 7B69     		ldr	r3, [r7, #20]
 2830 0392 5B68     		ldr	r3, [r3, #4]
 2831              		.loc 9 284 27
 2832 0394 0122     		movs	r2, #1
 2833 0396 DA63     		str	r2, [r3, #60]
 2834 0398 17E0     		b	.L94
 2835              	.L93:
 285:Src/encoder.cpp ****     } else if (shadow_count_ < init_enc_val - 8) {
 2836              		.loc 9 285 16
 2837 039a 7B69     		ldr	r3, [r7, #20]
 2838 039c 1A69     		ldr	r2, [r3, #16]
 2839              		.loc 9 285 45
 2840 039e BB6E     		ldr	r3, [r7, #104]
 2841 03a0 083B     		subs	r3, r3, #8
 2842              		.loc 9 285 12
 2843 03a2 9A42     		cmp	r2, r3
 2844 03a4 05DA     		bge	.L95
 286:Src/encoder.cpp ****         // motor opposite dir as encoder
 287:Src/encoder.cpp ****         config_.direction = -1;
 2845              		.loc 9 287 9
 2846 03a6 7B69     		ldr	r3, [r7, #20]
 2847 03a8 5B68     		ldr	r3, [r3, #4]
 2848              		.loc 9 287 27
 2849 03aa 4FF0FF32 		mov	r2, #-1
 2850 03ae DA63     		str	r2, [r3, #60]
 2851 03b0 0BE0     		b	.L94
 2852              	.L95:
 288:Src/encoder.cpp ****     } else {
 289:Src/encoder.cpp ****         // Encoder response error
 290:Src/encoder.cpp ****         set_error(ERROR_NO_RESPONSE);
 2853              		.loc 9 290 18
 2854 03b2 0421     		movs	r1, #4
 2855 03b4 7869     		ldr	r0, [r7, #20]
 2856 03b6 FFF7FEFF 		bl	_ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE
 291:Src/encoder.cpp ****         axis_->motor_.disarm();
 2857              		.loc 9 291 9
 2858 03ba 7B69     		ldr	r3, [r7, #20]
 2859 03bc 9B68     		ldr	r3, [r3, #8]
 2860              		.loc 9 291 16
 2861 03be DB6E     		ldr	r3, [r3, #108]
 2862              		.loc 9 291 29
 2863 03c0 1846     		mov	r0, r3
 2864 03c2 FFF7FEFF 		bl	_ZN5Motor6disarmEv
 292:Src/encoder.cpp ****         return false;
 2865              		.loc 9 292 16
 2866 03c6 0023     		movs	r3, #0
 2867 03c8 03E1     		b	.L87
 2868              	.L94:
 293:Src/encoder.cpp ****     }
ARM GAS  /tmp/ccqv0h9S.s 			page 104


 294:Src/encoder.cpp **** 
 295:Src/encoder.cpp ****     // Check CPR
 296:Src/encoder.cpp ****     float elec_rad_per_enc = axis_->motor_.config_.pole_pairs * 2 * M_PI * (1.0f / (float)(config_.
 2869              		.loc 9 296 30
 2870 03ca 7B69     		ldr	r3, [r7, #20]
 2871 03cc 9B68     		ldr	r3, [r3, #8]
 2872              		.loc 9 296 37
 2873 03ce DB6E     		ldr	r3, [r3, #108]
 2874              		.loc 9 296 44
 2875 03d0 5B68     		ldr	r3, [r3, #4]
 2876              		.loc 9 296 52
 2877 03d2 5B68     		ldr	r3, [r3, #4]
 2878              		.loc 9 296 63
 2879 03d4 5B00     		lsls	r3, r3, #1
 2880              		.loc 9 296 67
 2881 03d6 07EE903A 		vmov	s15, r3	@ int
 2882 03da F8EEE77A 		vcvt.f32.s32	s15, s15
 2883 03de 9FED807A 		vldr.32	s14, .L105+4
 2884 03e2 27EE877A 		vmul.f32	s14, s15, s14
 2885              		.loc 9 296 92
 2886 03e6 7B69     		ldr	r3, [r7, #20]
 2887 03e8 5B68     		ldr	r3, [r3, #4]
 2888              		.loc 9 296 100
 2889 03ea 9B68     		ldr	r3, [r3, #8]
 2890              		.loc 9 296 84
 2891 03ec 07EE903A 		vmov	s15, r3	@ int
 2892 03f0 F8EEE76A 		vcvt.f32.s32	s13, s15
 2893              		.loc 9 296 82
 2894 03f4 B7EE006A 		vmov.f32	s12, #1.0e+0
 2895 03f8 C6EE267A 		vdiv.f32	s15, s12, s13
 2896              		.loc 9 296 11
 2897 03fc 67EE277A 		vmul.f32	s15, s14, s15
 2898 0400 C7ED187A 		vstr.32	s15, [r7, #96]
 297:Src/encoder.cpp ****     float expected_encoder_delta = config_.calib_scan_distance / elec_rad_per_enc;
 2899              		.loc 9 297 36
 2900 0404 7B69     		ldr	r3, [r7, #20]
 2901 0406 5B68     		ldr	r3, [r3, #4]
 2902              		.loc 9 297 44
 2903 0408 D3ED076A 		vldr.32	s13, [r3, #28]
 2904              		.loc 9 297 11
 2905 040c 97ED187A 		vldr.32	s14, [r7, #96]
 2906 0410 C6EE877A 		vdiv.f32	s15, s13, s14
 2907 0414 C7ED177A 		vstr.32	s15, [r7, #92]
 298:Src/encoder.cpp ****     calib_scan_response_ = std::abs(shadow_count_ - init_enc_val);
 2908              		.loc 9 298 37
 2909 0418 7B69     		ldr	r3, [r7, #20]
 2910 041a 1A69     		ldr	r2, [r3, #16]
 2911              		.loc 9 298 36
 2912 041c BB6E     		ldr	r3, [r7, #104]
 2913 041e D31A     		subs	r3, r2, r3
 2914 0420 1846     		mov	r0, r3
 2915 0422 FFF7FEFF 		bl	_ZSt3absl
 2916 0426 07EE900A 		vmov	s15, r0	@ int
 2917              		.loc 9 298 26
 2918 042a F8EEE77A 		vcvt.f32.s32	s15, s15
 2919 042e 7B69     		ldr	r3, [r7, #20]
 2920 0430 C3ED187A 		vstr.32	s15, [r3, #96]
ARM GAS  /tmp/ccqv0h9S.s 			page 105


 299:Src/encoder.cpp ****     if (std::abs(calib_scan_response_ - expected_encoder_delta) / expected_encoder_delta > config_.
 2921              		.loc 9 299 18
 2922 0434 7B69     		ldr	r3, [r7, #20]
 2923 0436 93ED187A 		vldr.32	s14, [r3, #96]
 2924              		.loc 9 299 17
 2925 043a D7ED177A 		vldr.32	s15, [r7, #92]
 2926 043e 77EE677A 		vsub.f32	s15, s14, s15
 2927 0442 B0EE670A 		vmov.f32	s0, s15
 2928 0446 FFF7FEFF 		bl	_ZSt3absf
 2929 044a F0EE406A 		vmov.f32	s13, s0
 2930              		.loc 9 299 65
 2931 044e D7ED177A 		vldr.32	s15, [r7, #92]
 2932 0452 86EEA77A 		vdiv.f32	s14, s13, s15
 2933              		.loc 9 299 92
 2934 0456 7B69     		ldr	r3, [r7, #20]
 2935 0458 5B68     		ldr	r3, [r3, #4]
 2936              		.loc 9 299 100
 2937 045a D3ED067A 		vldr.32	s15, [r3, #24]
 2938              		.loc 9 299 90
 2939 045e B4EEE77A 		vcmpe.f32	s14, s15
 2940 0462 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2941 0466 CCBF     		ite	gt
 2942 0468 0123     		movgt	r3, #1
 2943 046a 0023     		movle	r3, #0
 2944 046c DBB2     		uxtb	r3, r3
 2945              		.loc 9 299 5
 2946 046e 002B     		cmp	r3, #0
 2947 0470 0BD0     		beq	.L96
 300:Src/encoder.cpp ****         set_error(ERROR_CPR_POLEPAIRS_MISMATCH);
 2948              		.loc 9 300 18
 2949 0472 0221     		movs	r1, #2
 2950 0474 7869     		ldr	r0, [r7, #20]
 2951 0476 FFF7FEFF 		bl	_ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE
 301:Src/encoder.cpp ****         axis_->motor_.disarm();
 2952              		.loc 9 301 9
 2953 047a 7B69     		ldr	r3, [r7, #20]
 2954 047c 9B68     		ldr	r3, [r3, #8]
 2955              		.loc 9 301 16
 2956 047e DB6E     		ldr	r3, [r3, #108]
 2957              		.loc 9 301 29
 2958 0480 1846     		mov	r0, r3
 2959 0482 FFF7FEFF 		bl	_ZN5Motor6disarmEv
 302:Src/encoder.cpp ****         return false;
 2960              		.loc 9 302 16
 2961 0486 0023     		movs	r3, #0
 2962 0488 A3E0     		b	.L87
 2963              	.L96:
 303:Src/encoder.cpp ****     }
 304:Src/encoder.cpp **** 
 305:Src/encoder.cpp ****     mask = cpu_enter_critical();
 2964              		.loc 9 305 30
 2965 048a FFF7FEFF 		bl	cpu_enter_critical
 2966 048e 3867     		str	r0, [r7, #112]
 306:Src/encoder.cpp ****     {
 307:Src/encoder.cpp ****         axis_->open_loop_controller_.target_vel_ = -config_.calib_scan_omega;
 2967              		.loc 9 307 53
 2968 0490 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/ccqv0h9S.s 			page 106


 2969 0492 5B68     		ldr	r3, [r3, #4]
 2970              		.loc 9 307 61
 2971 0494 D3ED087A 		vldr.32	s15, [r3, #32]
 2972              		.loc 9 307 9
 2973 0498 7B69     		ldr	r3, [r7, #20]
 2974 049a 9B68     		ldr	r3, [r3, #8]
 2975              		.loc 9 307 52
 2976 049c F1EE677A 		vneg.f32	s15, s15
 2977              		.loc 9 307 50
 2978 04a0 C3ED087A 		vstr.32	s15, [r3, #32]
 308:Src/encoder.cpp ****     }
 309:Src/encoder.cpp ****     cpu_exit_critical(mask);
 2979              		.loc 9 309 22
 2980 04a4 386F     		ldr	r0, [r7, #112]
 2981 04a6 FFF7FEFF 		bl	cpu_exit_critical
 2982              	.L99:
 310:Src/encoder.cpp **** 
 311:Src/encoder.cpp ****     // scan backwards
 312:Src/encoder.cpp ****     while ((axis_->requested_state_ == Axis::AXIS_STATE_UNDEFINED) && axis_->motor_.is_armed_) {
 2983              		.loc 9 312 13
 2984 04aa 7B69     		ldr	r3, [r7, #20]
 2985 04ac 9B68     		ldr	r3, [r3, #8]
 2986              		.loc 9 312 20
 2987 04ae 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 2988              		.loc 9 312 68
 2989 04b2 002B     		cmp	r3, #0
 2990 04b4 44D1     		bne	.L97
 2991              		.loc 9 312 71 discriminator 1
 2992 04b6 7B69     		ldr	r3, [r7, #20]
 2993 04b8 9B68     		ldr	r3, [r3, #8]
 2994              		.loc 9 312 78 discriminator 1
 2995 04ba DB6E     		ldr	r3, [r3, #108]
 2996              		.loc 9 312 85 discriminator 1
 2997 04bc 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2998 04c0 83F00103 		eor	r3, r3, #1
 2999 04c4 DBB2     		uxtb	r3, r3
 3000              		.loc 9 312 68 discriminator 1
 3001 04c6 002B     		cmp	r3, #0
 3002 04c8 3AD1     		bne	.L97
 3003              	.LBB22:
 313:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(INFI
 3004              		.loc 9 313 36
 3005 04ca 7B69     		ldr	r3, [r7, #20]
 3006 04cc 9B68     		ldr	r3, [r3, #8]
 3007              		.loc 9 313 85
 3008 04ce 03F15C02 		add	r2, r3, #92
 3009 04d2 07F14803 		add	r3, r7, #72
 3010 04d6 1146     		mov	r1, r2
 3011 04d8 1846     		mov	r0, r3
 3012 04da FFF7FEFF 		bl	_ZN10OutputPortIfE3anyEv
 3013              		.loc 9 313 96
 3014 04de 4FF0FF43 		mov	r3, #2139095040
 3015 04e2 3B65     		str	r3, [r7, #80]	@ float
 3016              		.loc 9 313 95
 3017 04e4 07F15002 		add	r2, r7, #80
 3018 04e8 07F14803 		add	r3, r7, #72
 3019 04ec 1146     		mov	r1, r2
ARM GAS  /tmp/ccqv0h9S.s 			page 107


 3020 04ee 1846     		mov	r0, r3
 3021 04f0 FFF7FEFF 		bl	_ZNOSt8optionalIfE8value_orIfEEfOT_
 3022 04f4 F0EE407A 		vmov.f32	s15, s0
 3023              		.loc 9 313 109
 3024 04f8 F5EEC07A 		vcmpe.f32	s15, #0
 3025 04fc F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3026 0500 94BF     		ite	ls
 3027 0502 0123     		movls	r3, #1
 3028 0504 0023     		movhi	r3, #0
 3029 0506 87F85B30 		strb	r3, [r7, #91]
 314:Src/encoder.cpp ****         if (reached_target_dist) {
 3030              		.loc 9 314 9
 3031 050a 97F85B30 		ldrb	r3, [r7, #91]	@ zero_extendqisi2
 3032 050e 002B     		cmp	r3, #0
 3033 0510 15D1     		bne	.L102
 315:Src/encoder.cpp ****             break;
 316:Src/encoder.cpp ****         }
 317:Src/encoder.cpp ****         encvaluesum += shadow_count_;
 3034              		.loc 9 317 24
 3035 0512 7B69     		ldr	r3, [r7, #20]
 3036 0514 1B69     		ldr	r3, [r3, #16]
 3037 0516 DA17     		asrs	r2, r3, #31
 3038 0518 9846     		mov	r8, r3
 3039 051a 9146     		mov	r9, r2
 3040              		.loc 9 317 21
 3041 051c D7E91E23 		ldrd	r2, [r7, #120]
 3042 0520 12EB0805 		adds	r5, r2, r8
 3043 0524 43EB0906 		adc	r6, r3, r9
 3044 0528 C7E91E56 		strd	r5, [r7, #120]
 318:Src/encoder.cpp ****         num_steps++;
 3045              		.loc 9 318 18
 3046 052c D7F88030 		ldr	r3, [r7, #128]
 3047 0530 0133     		adds	r3, r3, #1
 3048 0532 C7F88030 		str	r3, [r7, #128]
 319:Src/encoder.cpp ****         osDelay(1);
 3049              		.loc 9 319 16
 3050 0536 0120     		movs	r0, #1
 3051 0538 FFF7FEFF 		bl	osDelay
 3052              	.LBE22:
 312:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(INFI
 3053              		.loc 9 312 5
 3054 053c B5E7     		b	.L99
 3055              	.L102:
 3056              	.LBB23:
 315:Src/encoder.cpp ****         }
 3057              		.loc 9 315 13
 3058 053e 00BF     		nop
 3059              	.L97:
 3060              	.LBE23:
 320:Src/encoder.cpp ****     }
 321:Src/encoder.cpp **** 
 322:Src/encoder.cpp ****     // Motor disarmed because of an error
 323:Src/encoder.cpp ****     if (!axis_->motor_.is_armed_) {
 3061              		.loc 9 323 10
 3062 0540 7B69     		ldr	r3, [r7, #20]
 3063 0542 9B68     		ldr	r3, [r3, #8]
 3064              		.loc 9 323 17
ARM GAS  /tmp/ccqv0h9S.s 			page 108


 3065 0544 DB6E     		ldr	r3, [r3, #108]
 3066              		.loc 9 323 24
 3067 0546 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3068              		.loc 9 323 9
 3069 054a 83F00103 		eor	r3, r3, #1
 3070 054e DBB2     		uxtb	r3, r3
 3071              		.loc 9 323 5
 3072 0550 002B     		cmp	r3, #0
 3073 0552 01D0     		beq	.L100
 324:Src/encoder.cpp ****         return false;
 3074              		.loc 9 324 16
 3075 0554 0023     		movs	r3, #0
 3076 0556 3CE0     		b	.L87
 3077              	.L100:
 325:Src/encoder.cpp ****     }
 326:Src/encoder.cpp **** 
 327:Src/encoder.cpp ****     axis_->motor_.disarm();
 3078              		.loc 9 327 5
 3079 0558 7B69     		ldr	r3, [r7, #20]
 3080 055a 9B68     		ldr	r3, [r3, #8]
 3081              		.loc 9 327 12
 3082 055c DB6E     		ldr	r3, [r3, #108]
 3083              		.loc 9 327 25
 3084 055e 1846     		mov	r0, r3
 3085 0560 FFF7FEFF 		bl	_ZN5Motor6disarmEv
 328:Src/encoder.cpp **** 
 329:Src/encoder.cpp ****     config_.offset = encvaluesum / num_steps;
 3086              		.loc 9 329 36
 3087 0564 D7F88030 		ldr	r3, [r7, #128]
 3088 0568 0022     		movs	r2, #0
 3089 056a BB60     		str	r3, [r7, #8]
 3090 056c FA60     		str	r2, [r7, #12]
 3091              		.loc 9 329 34
 3092 056e D7E90223 		ldrd	r2, [r7, #8]
 3093 0572 D7E91E01 		ldrd	r0, [r7, #120]
 3094 0576 FFF7FEFF 		bl	__aeabi_ldivmod
 3095 057a 0246     		mov	r2, r0
 3096 057c 0B46     		mov	r3, r1
 3097 057e 1046     		mov	r0, r2
 3098 0580 1946     		mov	r1, r3
 3099              		.loc 9 329 5
 3100 0582 7B69     		ldr	r3, [r7, #20]
 3101 0584 5B68     		ldr	r3, [r3, #4]
 3102              		.loc 9 329 20
 3103 0586 0246     		mov	r2, r0
 3104 0588 DA60     		str	r2, [r3, #12]
 330:Src/encoder.cpp ****     int32_t residual = encvaluesum - ((int64_t)config_.offset * (int64_t)num_steps);
 3105              		.loc 9 330 36
 3106 058a BA6F     		ldr	r2, [r7, #120]
 3107              		.loc 9 330 48
 3108 058c 7B69     		ldr	r3, [r7, #20]
 3109 058e 5B68     		ldr	r3, [r3, #4]
 3110              		.loc 9 330 56
 3111 0590 DB68     		ldr	r3, [r3, #12]
 3112              		.loc 9 330 36
 3113 0592 1946     		mov	r1, r3
 3114 0594 D7F88030 		ldr	r3, [r7, #128]
ARM GAS  /tmp/ccqv0h9S.s 			page 109


 3115 0598 01FB03F3 		mul	r3, r1, r3
 3116 059c D31A     		subs	r3, r2, r3
 3117              		.loc 9 330 13
 3118 059e 7B65     		str	r3, [r7, #84]
 331:Src/encoder.cpp ****     config_.offset_float = (float)residual / (float)num_steps + 0.5f;  // add 0.5 to center-align s
 3119              		.loc 9 331 28
 3120 05a0 7B6D     		ldr	r3, [r7, #84]
 3121 05a2 07EE903A 		vmov	s15, r3	@ int
 3122 05a6 F8EEE76A 		vcvt.f32.s32	s13, s15
 3123              		.loc 9 331 46
 3124 05aa D7F88030 		ldr	r3, [r7, #128]
 3125 05ae 07EE903A 		vmov	s15, r3	@ int
 3126 05b2 B8EE677A 		vcvt.f32.u32	s14, s15
 3127              		.loc 9 331 44
 3128 05b6 C6EE877A 		vdiv.f32	s15, s13, s14
 3129              		.loc 9 331 5
 3130 05ba 7B69     		ldr	r3, [r7, #20]
 3131 05bc 5B68     		ldr	r3, [r3, #4]
 3132              		.loc 9 331 63
 3133 05be B6EE007A 		vmov.f32	s14, #5.0e-1
 3134 05c2 77EE877A 		vadd.f32	s15, s15, s14
 3135              		.loc 9 331 26
 3136 05c6 C3ED047A 		vstr.32	s15, [r3, #16]
 332:Src/encoder.cpp **** 
 333:Src/encoder.cpp ****     is_ready_ = true;
 3137              		.loc 9 333 15
 3138 05ca 7B69     		ldr	r3, [r7, #20]
 3139 05cc 0122     		movs	r2, #1
 3140 05ce DA73     		strb	r2, [r3, #15]
 334:Src/encoder.cpp ****     return true;
 3141              		.loc 9 334 12
 3142 05d0 0123     		movs	r3, #1
 3143              	.L87:
 335:Src/encoder.cpp **** 
 336:Src/encoder.cpp **** }
 3144              		.loc 9 336 1
 3145 05d2 1846     		mov	r0, r3
 3146 05d4 8C37     		adds	r7, r7, #140
 3147              	.LCFI151:
 3148              		.cfi_def_cfa_offset 36
 3149 05d6 BD46     		mov	sp, r7
 3150              	.LCFI152:
 3151              		.cfi_def_cfa_register 13
 3152              		@ sp needed
 3153 05d8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3154              	.L106:
 3155              		.align	2
 3156              	.L105:
 3157 05dc 000080FF 		.word	-8388608
 3158 05e0 DB0F4940 		.word	1078530011
 3159              		.cfi_endproc
 3160              	.LFE4838:
 3162              		.section	.text._ZL11decode_hallhPl,"ax",%progbits
 3163              		.align	1
 3164              		.syntax unified
 3165              		.thumb
 3166              		.thumb_func
ARM GAS  /tmp/ccqv0h9S.s 			page 110


 3167              		.fpu fpv4-sp-d16
 3169              	_ZL11decode_hallhPl:
 3170              	.LFB4839:
 337:Src/encoder.cpp **** 
 338:Src/encoder.cpp **** static bool decode_hall(uint8_t hall_state, int32_t* hall_cnt) {
 3171              		.loc 9 338 64
 3172              		.cfi_startproc
 3173              		@ args = 0, pretend = 0, frame = 8
 3174              		@ frame_needed = 1, uses_anonymous_args = 0
 3175              		@ link register save eliminated.
 3176 0000 80B4     		push	{r7}
 3177              	.LCFI153:
 3178              		.cfi_def_cfa_offset 4
 3179              		.cfi_offset 7, -4
 3180 0002 83B0     		sub	sp, sp, #12
 3181              	.LCFI154:
 3182              		.cfi_def_cfa_offset 16
 3183 0004 00AF     		add	r7, sp, #0
 3184              	.LCFI155:
 3185              		.cfi_def_cfa_register 7
 3186 0006 0346     		mov	r3, r0
 3187 0008 3960     		str	r1, [r7]
 3188 000a FB71     		strb	r3, [r7, #7]
 339:Src/encoder.cpp ****     switch (hall_state) {
 3189              		.loc 9 339 13
 3190 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3191 000e 013B     		subs	r3, r3, #1
 3192 0010 052B     		cmp	r3, #5
 3193 0012 2DD8     		bhi	.L108
 3194 0014 01A2     		adr	r2, .L110
 3195 0016 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3196 001a 00BF     		.p2align 2
 3197              	.L110:
 3198 001c 35000000 		.word	.L115+1
 3199 0020 49000000 		.word	.L114+1
 3200 0024 3F000000 		.word	.L113+1
 3201 0028 5D000000 		.word	.L112+1
 3202 002c 67000000 		.word	.L111+1
 3203 0030 53000000 		.word	.L109+1
 3204              		.p2align 1
 3205              	.L115:
 340:Src/encoder.cpp ****         case 0b001: *hall_cnt = 0; return true;
 3206              		.loc 9 340 31
 3207 0034 3B68     		ldr	r3, [r7]
 3208 0036 0022     		movs	r2, #0
 3209 0038 1A60     		str	r2, [r3]
 3210              		.loc 9 340 43
 3211 003a 0123     		movs	r3, #1
 3212 003c 19E0     		b	.L116
 3213              	.L113:
 341:Src/encoder.cpp ****         case 0b011: *hall_cnt = 1; return true;
 3214              		.loc 9 341 31
 3215 003e 3B68     		ldr	r3, [r7]
 3216 0040 0122     		movs	r2, #1
 3217 0042 1A60     		str	r2, [r3]
 3218              		.loc 9 341 43
 3219 0044 0123     		movs	r3, #1
ARM GAS  /tmp/ccqv0h9S.s 			page 111


 3220 0046 14E0     		b	.L116
 3221              	.L114:
 342:Src/encoder.cpp ****         case 0b010: *hall_cnt = 2; return true;
 3222              		.loc 9 342 31
 3223 0048 3B68     		ldr	r3, [r7]
 3224 004a 0222     		movs	r2, #2
 3225 004c 1A60     		str	r2, [r3]
 3226              		.loc 9 342 43
 3227 004e 0123     		movs	r3, #1
 3228 0050 0FE0     		b	.L116
 3229              	.L109:
 343:Src/encoder.cpp ****         case 0b110: *hall_cnt = 3; return true;
 3230              		.loc 9 343 31
 3231 0052 3B68     		ldr	r3, [r7]
 3232 0054 0322     		movs	r2, #3
 3233 0056 1A60     		str	r2, [r3]
 3234              		.loc 9 343 43
 3235 0058 0123     		movs	r3, #1
 3236 005a 0AE0     		b	.L116
 3237              	.L112:
 344:Src/encoder.cpp ****         case 0b100: *hall_cnt = 4; return true;
 3238              		.loc 9 344 31
 3239 005c 3B68     		ldr	r3, [r7]
 3240 005e 0422     		movs	r2, #4
 3241 0060 1A60     		str	r2, [r3]
 3242              		.loc 9 344 43
 3243 0062 0123     		movs	r3, #1
 3244 0064 05E0     		b	.L116
 3245              	.L111:
 345:Src/encoder.cpp ****         case 0b101: *hall_cnt = 5; return true;
 3246              		.loc 9 345 31
 3247 0066 3B68     		ldr	r3, [r7]
 3248 0068 0522     		movs	r2, #5
 3249 006a 1A60     		str	r2, [r3]
 3250              		.loc 9 345 43
 3251 006c 0123     		movs	r3, #1
 3252 006e 00E0     		b	.L116
 3253              	.L108:
 346:Src/encoder.cpp ****         default: return false;
 3254              		.loc 9 346 25
 3255 0070 0023     		movs	r3, #0
 3256              	.L116:
 347:Src/encoder.cpp ****     }
 348:Src/encoder.cpp **** }
 3257              		.loc 9 348 1
 3258 0072 1846     		mov	r0, r3
 3259 0074 0C37     		adds	r7, r7, #12
 3260              	.LCFI156:
 3261              		.cfi_def_cfa_offset 4
 3262 0076 BD46     		mov	sp, r7
 3263              	.LCFI157:
 3264              		.cfi_def_cfa_register 13
 3265              		@ sp needed
 3266 0078 5DF8047B 		ldr	r7, [sp], #4
 3267              	.LCFI158:
 3268              		.cfi_restore 7
 3269              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccqv0h9S.s 			page 112


 3270 007c 7047     		bx	lr
 3271              		.cfi_endproc
 3272              	.LFE4839:
 3274 007e 00BF     		.section	.text._ZN7Encoder10sample_nowEv,"ax",%progbits
 3275              		.align	1
 3276              		.global	_ZN7Encoder10sample_nowEv
 3277              		.syntax unified
 3278              		.thumb
 3279              		.thumb_func
 3280              		.fpu fpv4-sp-d16
 3282              	_ZN7Encoder10sample_nowEv:
 3283              	.LFB4840:
 349:Src/encoder.cpp **** 
 350:Src/encoder.cpp **** void Encoder::sample_now() {
 3284              		.loc 9 350 28
 3285              		.cfi_startproc
 3286              		@ args = 0, pretend = 0, frame = 8
 3287              		@ frame_needed = 1, uses_anonymous_args = 0
 3288 0000 80B5     		push	{r7, lr}
 3289              	.LCFI159:
 3290              		.cfi_def_cfa_offset 8
 3291              		.cfi_offset 7, -8
 3292              		.cfi_offset 14, -4
 3293 0002 82B0     		sub	sp, sp, #8
 3294              	.LCFI160:
 3295              		.cfi_def_cfa_offset 16
 3296 0004 00AF     		add	r7, sp, #0
 3297              	.LCFI161:
 3298              		.cfi_def_cfa_register 7
 3299 0006 7860     		str	r0, [r7, #4]
 351:Src/encoder.cpp ****     switch (mode_) {
 3300              		.loc 9 351 13
 3301 0008 7B68     		ldr	r3, [r7, #4]
 3302 000a B3F8D630 		ldrh	r3, [r3, #214]
 3303              		.loc 9 351 5
 3304 000e B3F5827F 		cmp	r3, #260
 3305 0012 1DDA     		bge	.L124
 3306 0014 B3F5807F 		cmp	r3, #256
 3307 0018 12DA     		bge	.L119
 3308 001a 022B     		cmp	r3, #2
 3309 001c 1AD0     		beq	.L125
 3310 001e 022B     		cmp	r3, #2
 3311 0020 16DC     		bgt	.L124
 3312 0022 002B     		cmp	r3, #0
 3313 0024 02D0     		beq	.L121
 3314 0026 012B     		cmp	r3, #1
 3315 0028 16D0     		beq	.L126
 352:Src/encoder.cpp ****         case MODE_INCREMENTAL: {
 353:Src/encoder.cpp ****             tim_cnt_sample_ = (int16_t)hw_config_.timer->Instance->CNT;
 354:Src/encoder.cpp ****         } break;
 355:Src/encoder.cpp **** 
 356:Src/encoder.cpp ****         case MODE_HALL: {
 357:Src/encoder.cpp ****             // do nothing: samples already captured in general GPIO capture
 358:Src/encoder.cpp ****         } break;
 359:Src/encoder.cpp **** 
 360:Src/encoder.cpp ****         case MODE_SINCOS: {
 361:Src/encoder.cpp ****         } break;
ARM GAS  /tmp/ccqv0h9S.s 			page 113


 362:Src/encoder.cpp **** 
 363:Src/encoder.cpp ****         case MODE_SPI_ABS_AMS:
 364:Src/encoder.cpp ****         case MODE_SPI_ABS_CUI:
 365:Src/encoder.cpp ****         case MODE_SPI_ABS_AEAT:
 366:Src/encoder.cpp ****         case MODE_SPI_ABS_RLS:
 367:Src/encoder.cpp ****         {
 368:Src/encoder.cpp ****             axis_->motor_.log_timing(ODriveIntf::TIMING_LOG_SAMPLE_NOW);
 369:Src/encoder.cpp ****             // Do nothing
 370:Src/encoder.cpp ****         } break;
 371:Src/encoder.cpp **** 
 372:Src/encoder.cpp ****         default: {
 373:Src/encoder.cpp ****            //set_error(ERROR_UNSUPPORTED_ENCODER_MODE);
 374:Src/encoder.cpp ****         } break;
 3316              		.loc 9 374 11
 3317 002a 11E0     		b	.L124
 3318              	.L121:
 353:Src/encoder.cpp ****         } break;
 3319              		.loc 9 353 40
 3320 002c 7B68     		ldr	r3, [r7, #4]
 3321 002e 1B68     		ldr	r3, [r3]
 353:Src/encoder.cpp ****         } break;
 3322              		.loc 9 353 51
 3323 0030 1B68     		ldr	r3, [r3]
 353:Src/encoder.cpp ****         } break;
 3324              		.loc 9 353 58
 3325 0032 1B68     		ldr	r3, [r3]
 353:Src/encoder.cpp ****         } break;
 3326              		.loc 9 353 68
 3327 0034 5B6A     		ldr	r3, [r3, #36]
 353:Src/encoder.cpp ****         } break;
 3328              		.loc 9 353 29
 3329 0036 1AB2     		sxth	r2, r3
 3330 0038 7B68     		ldr	r3, [r7, #4]
 3331 003a A3F8AC20 		strh	r2, [r3, #172]	@ movhi
 354:Src/encoder.cpp **** 
 3332              		.loc 9 354 11
 3333 003e 0CE0     		b	.L123
 3334              	.L119:
 368:Src/encoder.cpp ****             // Do nothing
 3335              		.loc 9 368 13
 3336 0040 7B68     		ldr	r3, [r7, #4]
 3337 0042 9B68     		ldr	r3, [r3, #8]
 368:Src/encoder.cpp ****             // Do nothing
 3338              		.loc 9 368 20
 3339 0044 DB6E     		ldr	r3, [r3, #108]
 368:Src/encoder.cpp ****             // Do nothing
 3340              		.loc 9 368 37
 3341 0046 0A21     		movs	r1, #10
 3342 0048 1846     		mov	r0, r3
 3343 004a FFF7FEFF 		bl	_ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE
 370:Src/encoder.cpp **** 
 3344              		.loc 9 370 11
 3345 004e 04E0     		b	.L123
 3346              	.L124:
 3347              		.loc 9 374 11
 3348 0050 00BF     		nop
 3349 0052 02E0     		b	.L127
ARM GAS  /tmp/ccqv0h9S.s 			page 114


 3350              	.L125:
 361:Src/encoder.cpp **** 
 3351              		.loc 9 361 11
 3352 0054 00BF     		nop
 3353 0056 00E0     		b	.L127
 3354              	.L126:
 358:Src/encoder.cpp **** 
 3355              		.loc 9 358 11
 3356 0058 00BF     		nop
 3357              	.L123:
 3358              	.L127:
 375:Src/encoder.cpp ****     }
 376:Src/encoder.cpp **** }
 3359              		.loc 9 376 1
 3360 005a 00BF     		nop
 3361 005c 0837     		adds	r7, r7, #8
 3362              	.LCFI162:
 3363              		.cfi_def_cfa_offset 8
 3364 005e BD46     		mov	sp, r7
 3365              	.LCFI163:
 3366              		.cfi_def_cfa_register 13
 3367              		@ sp needed
 3368 0060 80BD     		pop	{r7, pc}
 3369              		.cfi_endproc
 3370              	.LFE4840:
 3372              		.section	.text._ZN7Encoder12abs_spi_initEv,"ax",%progbits
 3373              		.align	1
 3374              		.global	_ZN7Encoder12abs_spi_initEv
 3375              		.syntax unified
 3376              		.thumb
 3377              		.thumb_func
 3378              		.fpu fpv4-sp-d16
 3380              	_ZN7Encoder12abs_spi_initEv:
 3381              	.LFB4841:
 377:Src/encoder.cpp **** 
 378:Src/encoder.cpp **** bool Encoder::abs_spi_init(){
 3382              		.loc 9 378 29
 3383              		.cfi_startproc
 3384              		@ args = 0, pretend = 0, frame = 8
 3385              		@ frame_needed = 1, uses_anonymous_args = 0
 3386              		@ link register save eliminated.
 3387 0000 80B4     		push	{r7}
 3388              	.LCFI164:
 3389              		.cfi_def_cfa_offset 4
 3390              		.cfi_offset 7, -4
 3391 0002 83B0     		sub	sp, sp, #12
 3392              	.LCFI165:
 3393              		.cfi_def_cfa_offset 16
 3394 0004 00AF     		add	r7, sp, #0
 3395              	.LCFI166:
 3396              		.cfi_def_cfa_register 7
 3397 0006 7860     		str	r0, [r7, #4]
 379:Src/encoder.cpp **** //     if ((mode_ & MODE_FLAG_ABS) == 0x0)
 380:Src/encoder.cpp **** //         return false;
 381:Src/encoder.cpp **** 
 382:Src/encoder.cpp **** //     SPI_HandleTypeDef * spi = hw_config_.motor_spi;
 383:Src/encoder.cpp **** //     spi->Init.Mode = SPI_MODE_MASTER;
ARM GAS  /tmp/ccqv0h9S.s 			page 115


 384:Src/encoder.cpp **** //     spi->Init.Direction = SPI_DIRECTION_2LINES;
 385:Src/encoder.cpp **** //     spi->Init.DataSize = SPI_DATASIZE_8BIT;
 386:Src/encoder.cpp **** //     spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 387:Src/encoder.cpp **** //     spi->Init.CLKPhase = SPI_PHASE_2EDGE;
 388:Src/encoder.cpp **** //     spi->Init.NSS = SPI_NSS_SOFT;
 389:Src/encoder.cpp **** //     spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 390:Src/encoder.cpp **** //     spi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 391:Src/encoder.cpp **** //     spi->Init.TIMode = SPI_TIMODE_DISABLE;
 392:Src/encoder.cpp **** //     spi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 393:Src/encoder.cpp **** //     spi->Init.CRCPolynomial = 7;
 394:Src/encoder.cpp **** //     if (mode_ == MODE_SPI_ABS_AEAT) {
 395:Src/encoder.cpp **** //         spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 396:Src/encoder.cpp **** //     }
 397:Src/encoder.cpp **** //     HAL_SPI_DeInit(spi);
 398:Src/encoder.cpp **** //     //HAL_SPI_Init(spi);
 399:Src/encoder.cpp **** //     __HAL_SPI_ENABLE(spi);
 400:Src/encoder.cpp **** 
 401:Src/encoder.cpp **** //     spi = hw_config_.GearboxOutputEncoder_spi;
 402:Src/encoder.cpp **** //     spi->Init.Mode = SPI_MODE_MASTER;
 403:Src/encoder.cpp **** //     spi->Init.Direction = SPI_DIRECTION_2LINES;
 404:Src/encoder.cpp **** //     spi->Init.DataSize = SPI_DATASIZE_8BIT;
 405:Src/encoder.cpp **** //     spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 406:Src/encoder.cpp **** //     spi->Init.CLKPhase = SPI_PHASE_2EDGE;
 407:Src/encoder.cpp **** //     spi->Init.NSS = SPI_NSS_SOFT;
 408:Src/encoder.cpp **** //     spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 409:Src/encoder.cpp **** //     spi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 410:Src/encoder.cpp **** //     spi->Init.TIMode = SPI_TIMODE_DISABLE;
 411:Src/encoder.cpp **** //     spi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 412:Src/encoder.cpp **** //     spi->Init.CRCPolynomial = 7;
 413:Src/encoder.cpp **** //     if (mode_ == MODE_SPI_ABS_AEAT) {
 414:Src/encoder.cpp **** //         spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 415:Src/encoder.cpp **** //     }
 416:Src/encoder.cpp **** //     HAL_SPI_DeInit(spi);
 417:Src/encoder.cpp **** //    // HAL_SPI_Init(spi);
 418:Src/encoder.cpp **** //     __HAL_SPI_ENABLE(spi);
 419:Src/encoder.cpp **** 
 420:Src/encoder.cpp **** //     return true;
 421:Src/encoder.cpp **** }
 3398              		.loc 9 421 1
 3399 0008 00BF     		nop
 3400 000a 1846     		mov	r0, r3
 3401 000c 0C37     		adds	r7, r7, #12
 3402              	.LCFI167:
 3403              		.cfi_def_cfa_offset 4
 3404 000e BD46     		mov	sp, r7
 3405              	.LCFI168:
 3406              		.cfi_def_cfa_register 13
 3407              		@ sp needed
 3408 0010 5DF8047B 		ldr	r7, [sp], #4
 3409              	.LCFI169:
 3410              		.cfi_restore 7
 3411              		.cfi_def_cfa_offset 0
 3412 0014 7047     		bx	lr
 3413              		.cfi_endproc
 3414              	.LFE4841:
 3416              		.section	.text._ZN7Encoder14set_spi_enableEv,"ax",%progbits
 3417              		.align	1
ARM GAS  /tmp/ccqv0h9S.s 			page 116


 3418              		.global	_ZN7Encoder14set_spi_enableEv
 3419              		.syntax unified
 3420              		.thumb
 3421              		.thumb_func
 3422              		.fpu fpv4-sp-d16
 3424              	_ZN7Encoder14set_spi_enableEv:
 3425              	.LFB4842:
 422:Src/encoder.cpp **** 
 423:Src/encoder.cpp **** 
 424:Src/encoder.cpp **** 
 425:Src/encoder.cpp **** void Encoder::set_spi_enable(void)
 426:Src/encoder.cpp **** {
 3426              		.loc 9 426 1
 3427              		.cfi_startproc
 3428              		@ args = 0, pretend = 0, frame = 16
 3429              		@ frame_needed = 1, uses_anonymous_args = 0
 3430 0000 80B5     		push	{r7, lr}
 3431              	.LCFI170:
 3432              		.cfi_def_cfa_offset 8
 3433              		.cfi_offset 7, -8
 3434              		.cfi_offset 14, -4
 3435 0002 84B0     		sub	sp, sp, #16
 3436              	.LCFI171:
 3437              		.cfi_def_cfa_offset 24
 3438 0004 00AF     		add	r7, sp, #0
 3439              	.LCFI172:
 3440              		.cfi_def_cfa_register 7
 3441 0006 7860     		str	r0, [r7, #4]
 427:Src/encoder.cpp ****     SPI_HandleTypeDef * spi;
 428:Src/encoder.cpp ****     if (config_.is_high_speed_encode_query_enabled == true) 
 3442              		.loc 9 428 9
 3443 0008 7B68     		ldr	r3, [r7, #4]
 3444 000a 5B68     		ldr	r3, [r3, #4]
 3445              		.loc 9 428 17
 3446 000c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3447              		.loc 9 428 5
 3448 000e 012B     		cmp	r3, #1
 3449 0010 06D1     		bne	.L130
 429:Src/encoder.cpp ****     {
 430:Src/encoder.cpp ****         abs_spi_cs_pin_init();
 3450              		.loc 9 430 28
 3451 0012 7868     		ldr	r0, [r7, #4]
 3452 0014 FFF7FEFF 		bl	_ZN7Encoder19abs_spi_cs_pin_initEv
 431:Src/encoder.cpp ****         abs_spi_init();
 3453              		.loc 9 431 21
 3454 0018 7868     		ldr	r0, [r7, #4]
 3455 001a FFF7FEFF 		bl	_ZN7Encoder12abs_spi_initEv
 432:Src/encoder.cpp **** 
 433:Src/encoder.cpp ****     } 
 434:Src/encoder.cpp ****     else 
 435:Src/encoder.cpp ****     {
 436:Src/encoder.cpp ****         
 437:Src/encoder.cpp ****         spi= hw_config_.motor_spi;
 438:Src/encoder.cpp ****         HAL_SPI_DeInit(spi);
 439:Src/encoder.cpp ****         spi = hw_config_.GearboxOutputEncoder_spi;
 440:Src/encoder.cpp ****         HAL_SPI_DeInit(spi);
 441:Src/encoder.cpp **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 117


 442:Src/encoder.cpp ****         motor_spi_cs_port_ = MU128_1_GPIO_Port;
 443:Src/encoder.cpp ****         motor_spi_cs_pin_ = MU128_1_Pin;
 444:Src/encoder.cpp ****         GearboxOutputEncoder_spi_cs_port_ = MU128_2_GPIO_Port;
 445:Src/encoder.cpp ****         GearboxOutputEncoder_spi_cs_pin_ = MU128_2_Pin;
 446:Src/encoder.cpp ****         // Init cs pin
 447:Src/encoder.cpp ****         HAL_GPIO_DeInit(motor_spi_cs_port_, motor_spi_cs_pin_);
 448:Src/encoder.cpp ****         HAL_GPIO_DeInit(GearboxOutputEncoder_spi_cs_port_, GearboxOutputEncoder_spi_cs_pin_);
 449:Src/encoder.cpp **** 
 450:Src/encoder.cpp ****     }
 451:Src/encoder.cpp **** 
 452:Src/encoder.cpp **** 
 453:Src/encoder.cpp **** }
 3456              		.loc 9 453 1
 3457 001e 34E0     		b	.L132
 3458              	.L130:
 437:Src/encoder.cpp ****         HAL_SPI_DeInit(spi);
 3459              		.loc 9 437 14
 3460 0020 7B68     		ldr	r3, [r7, #4]
 3461 0022 1B68     		ldr	r3, [r3]
 437:Src/encoder.cpp ****         HAL_SPI_DeInit(spi);
 3462              		.loc 9 437 12
 3463 0024 5B6A     		ldr	r3, [r3, #36]
 3464 0026 FB60     		str	r3, [r7, #12]
 438:Src/encoder.cpp ****         spi = hw_config_.GearboxOutputEncoder_spi;
 3465              		.loc 9 438 23
 3466 0028 F868     		ldr	r0, [r7, #12]
 3467 002a FFF7FEFF 		bl	HAL_SPI_DeInit
 439:Src/encoder.cpp ****         HAL_SPI_DeInit(spi);
 3468              		.loc 9 439 15
 3469 002e 7B68     		ldr	r3, [r7, #4]
 3470 0030 1B68     		ldr	r3, [r3]
 439:Src/encoder.cpp ****         HAL_SPI_DeInit(spi);
 3471              		.loc 9 439 13
 3472 0032 9B6A     		ldr	r3, [r3, #40]
 3473 0034 FB60     		str	r3, [r7, #12]
 440:Src/encoder.cpp **** 
 3474              		.loc 9 440 23
 3475 0036 F868     		ldr	r0, [r7, #12]
 3476 0038 FFF7FEFF 		bl	HAL_SPI_DeInit
 442:Src/encoder.cpp ****         motor_spi_cs_pin_ = MU128_1_Pin;
 3477              		.loc 9 442 28
 3478 003c 7B68     		ldr	r3, [r7, #4]
 3479 003e 4FF09042 		mov	r2, #1207959552
 3480 0042 C3F8D820 		str	r2, [r3, #216]
 443:Src/encoder.cpp ****         GearboxOutputEncoder_spi_cs_port_ = MU128_2_GPIO_Port;
 3481              		.loc 9 443 27
 3482 0046 7B68     		ldr	r3, [r7, #4]
 3483 0048 1022     		movs	r2, #16
 3484 004a A3F8DC20 		strh	r2, [r3, #220]	@ movhi
 444:Src/encoder.cpp ****         GearboxOutputEncoder_spi_cs_pin_ = MU128_2_Pin;
 3485              		.loc 9 444 43
 3486 004e 7B68     		ldr	r3, [r7, #4]
 3487 0050 4FF09042 		mov	r2, #1207959552
 3488 0054 C3F8E020 		str	r2, [r3, #224]
 445:Src/encoder.cpp ****         // Init cs pin
 3489              		.loc 9 445 42
 3490 0058 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccqv0h9S.s 			page 118


 3491 005a 4FF40042 		mov	r2, #32768
 3492 005e A3F8E420 		strh	r2, [r3, #228]	@ movhi
 447:Src/encoder.cpp ****         HAL_GPIO_DeInit(GearboxOutputEncoder_spi_cs_port_, GearboxOutputEncoder_spi_cs_pin_);
 3493              		.loc 9 447 24
 3494 0062 7B68     		ldr	r3, [r7, #4]
 3495 0064 D3F8D820 		ldr	r2, [r3, #216]
 447:Src/encoder.cpp ****         HAL_GPIO_DeInit(GearboxOutputEncoder_spi_cs_port_, GearboxOutputEncoder_spi_cs_pin_);
 3496              		.loc 9 447 45
 3497 0068 7B68     		ldr	r3, [r7, #4]
 3498 006a B3F8DC30 		ldrh	r3, [r3, #220]
 447:Src/encoder.cpp ****         HAL_GPIO_DeInit(GearboxOutputEncoder_spi_cs_port_, GearboxOutputEncoder_spi_cs_pin_);
 3499              		.loc 9 447 24
 3500 006e 1946     		mov	r1, r3
 3501 0070 1046     		mov	r0, r2
 3502 0072 FFF7FEFF 		bl	HAL_GPIO_DeInit
 448:Src/encoder.cpp **** 
 3503              		.loc 9 448 24
 3504 0076 7B68     		ldr	r3, [r7, #4]
 3505 0078 D3F8E020 		ldr	r2, [r3, #224]
 448:Src/encoder.cpp **** 
 3506              		.loc 9 448 60
 3507 007c 7B68     		ldr	r3, [r7, #4]
 3508 007e B3F8E430 		ldrh	r3, [r3, #228]
 448:Src/encoder.cpp **** 
 3509              		.loc 9 448 24
 3510 0082 1946     		mov	r1, r3
 3511 0084 1046     		mov	r0, r2
 3512 0086 FFF7FEFF 		bl	HAL_GPIO_DeInit
 3513              	.L132:
 3514              		.loc 9 453 1
 3515 008a 00BF     		nop
 3516 008c 1037     		adds	r7, r7, #16
 3517              	.LCFI173:
 3518              		.cfi_def_cfa_offset 8
 3519 008e BD46     		mov	sp, r7
 3520              	.LCFI174:
 3521              		.cfi_def_cfa_register 13
 3522              		@ sp needed
 3523 0090 80BD     		pop	{r7, pc}
 3524              		.cfi_endproc
 3525              	.LFE4842:
 3527              		.section	.text._ZN7Encoder12abs_485_initEv,"ax",%progbits
 3528              		.align	1
 3529              		.global	_ZN7Encoder12abs_485_initEv
 3530              		.syntax unified
 3531              		.thumb
 3532              		.thumb_func
 3533              		.fpu fpv4-sp-d16
 3535              	_ZN7Encoder12abs_485_initEv:
 3536              	.LFB4843:
 454:Src/encoder.cpp **** 
 455:Src/encoder.cpp **** bool Encoder::abs_485_init()
 456:Src/encoder.cpp **** {
 3537              		.loc 9 456 1
 3538              		.cfi_startproc
 3539              		@ args = 0, pretend = 0, frame = 8
 3540              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccqv0h9S.s 			page 119


 3541              		@ link register save eliminated.
 3542 0000 80B4     		push	{r7}
 3543              	.LCFI175:
 3544              		.cfi_def_cfa_offset 4
 3545              		.cfi_offset 7, -4
 3546 0002 83B0     		sub	sp, sp, #12
 3547              	.LCFI176:
 3548              		.cfi_def_cfa_offset 16
 3549 0004 00AF     		add	r7, sp, #0
 3550              	.LCFI177:
 3551              		.cfi_def_cfa_register 7
 3552 0006 7860     		str	r0, [r7, #4]
 457:Src/encoder.cpp ****     return true;
 3553              		.loc 9 457 12
 3554 0008 0123     		movs	r3, #1
 458:Src/encoder.cpp **** }
 3555              		.loc 9 458 1
 3556 000a 1846     		mov	r0, r3
 3557 000c 0C37     		adds	r7, r7, #12
 3558              	.LCFI178:
 3559              		.cfi_def_cfa_offset 4
 3560 000e BD46     		mov	sp, r7
 3561              	.LCFI179:
 3562              		.cfi_def_cfa_register 13
 3563              		@ sp needed
 3564 0010 5DF8047B 		ldr	r7, [sp], #4
 3565              	.LCFI180:
 3566              		.cfi_restore 7
 3567              		.cfi_def_cfa_offset 0
 3568 0014 7047     		bx	lr
 3569              		.cfi_endproc
 3570              	.LFE4843:
 3572              		.section	.text._ZN7Encoder19abs_485_cs_pin_initEv,"ax",%progbits
 3573              		.align	1
 3574              		.global	_ZN7Encoder19abs_485_cs_pin_initEv
 3575              		.syntax unified
 3576              		.thumb
 3577              		.thumb_func
 3578              		.fpu fpv4-sp-d16
 3580              	_ZN7Encoder19abs_485_cs_pin_initEv:
 3581              	.LFB4844:
 459:Src/encoder.cpp ****   
 460:Src/encoder.cpp **** void Encoder::abs_485_cs_pin_init(){
 3582              		.loc 9 460 36
 3583              		.cfi_startproc
 3584              		@ args = 0, pretend = 0, frame = 40
 3585              		@ frame_needed = 1, uses_anonymous_args = 0
 3586 0000 80B5     		push	{r7, lr}
 3587              	.LCFI181:
 3588              		.cfi_def_cfa_offset 8
 3589              		.cfi_offset 7, -8
 3590              		.cfi_offset 14, -4
 3591 0002 8AB0     		sub	sp, sp, #40
 3592              	.LCFI182:
 3593              		.cfi_def_cfa_offset 48
 3594 0004 00AF     		add	r7, sp, #0
 3595              	.LCFI183:
ARM GAS  /tmp/ccqv0h9S.s 			page 120


 3596              		.cfi_def_cfa_register 7
 3597 0006 7860     		str	r0, [r7, #4]
 461:Src/encoder.cpp ****     // Decode cs pin
 462:Src/encoder.cpp **** 
 463:Src/encoder.cpp ****     GPIO_TypeDef  *GPIOx = GPIOA;
 3598              		.loc 9 463 20
 3599 0008 4FF09043 		mov	r3, #1207959552
 3600 000c 7B62     		str	r3, [r7, #36]
 464:Src/encoder.cpp ****     uint32_t GPIO_Pin =  GPIO_PIN_2;
 3601              		.loc 9 464 14
 3602 000e 0423     		movs	r3, #4
 3603 0010 3B62     		str	r3, [r7, #32]
 465:Src/encoder.cpp **** 
 466:Src/encoder.cpp ****     // Init cs pin
 467:Src/encoder.cpp ****     HAL_GPIO_DeInit(GPIOx, GPIO_Pin);
 3604              		.loc 9 467 20
 3605 0012 396A     		ldr	r1, [r7, #32]
 3606 0014 786A     		ldr	r0, [r7, #36]
 3607 0016 FFF7FEFF 		bl	HAL_GPIO_DeInit
 468:Src/encoder.cpp ****     GPIO_InitTypeDef GPIO_InitStruct;
 469:Src/encoder.cpp ****     GPIO_InitStruct.Pin = GPIO_Pin;
 3608              		.loc 9 469 25
 3609 001a 3B6A     		ldr	r3, [r7, #32]
 3610 001c FB60     		str	r3, [r7, #12]
 470:Src/encoder.cpp ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 3611              		.loc 9 470 26
 3612 001e 0123     		movs	r3, #1
 3613 0020 3B61     		str	r3, [r7, #16]
 471:Src/encoder.cpp ****     GPIO_InitStruct.Pull = GPIO_PULLUP;
 3614              		.loc 9 471 26
 3615 0022 0123     		movs	r3, #1
 3616 0024 7B61     		str	r3, [r7, #20]
 472:Src/encoder.cpp ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 3617              		.loc 9 472 27
 3618 0026 0023     		movs	r3, #0
 3619 0028 BB61     		str	r3, [r7, #24]
 473:Src/encoder.cpp ****     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 3620              		.loc 9 473 18
 3621 002a 07F10C03 		add	r3, r7, #12
 3622 002e 1946     		mov	r1, r3
 3623 0030 786A     		ldr	r0, [r7, #36]
 3624 0032 FFF7FEFF 		bl	HAL_GPIO_Init
 474:Src/encoder.cpp **** 
 475:Src/encoder.cpp ****     // Write pin high
 476:Src/encoder.cpp ****     HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 3625              		.loc 9 476 22
 3626 0036 3B6A     		ldr	r3, [r7, #32]
 3627 0038 9BB2     		uxth	r3, r3
 3628 003a 0022     		movs	r2, #0
 3629 003c 1946     		mov	r1, r3
 3630 003e 786A     		ldr	r0, [r7, #36]
 3631 0040 FFF7FEFF 		bl	HAL_GPIO_WritePin
 477:Src/encoder.cpp **** }
 3632              		.loc 9 477 1
 3633 0044 00BF     		nop
 3634 0046 2837     		adds	r7, r7, #40
 3635              	.LCFI184:
ARM GAS  /tmp/ccqv0h9S.s 			page 121


 3636              		.cfi_def_cfa_offset 8
 3637 0048 BD46     		mov	sp, r7
 3638              	.LCFI185:
 3639              		.cfi_def_cfa_register 13
 3640              		@ sp needed
 3641 004a 80BD     		pop	{r7, pc}
 3642              		.cfi_endproc
 3643              	.LFE4844:
 3645              		.section	.text._ZN7Encoder21abs_start_transactionEv,"ax",%progbits
 3646              		.align	1
 3647              		.global	_ZN7Encoder21abs_start_transactionEv
 3648              		.syntax unified
 3649              		.thumb
 3650              		.thumb_func
 3651              		.fpu fpv4-sp-d16
 3653              	_ZN7Encoder21abs_start_transactionEv:
 3654              	.LFB4845:
 478:Src/encoder.cpp **** 
 479:Src/encoder.cpp **** bool Encoder::abs_start_transaction(){
 3655              		.loc 9 479 38
 3656              		.cfi_startproc
 3657              		@ args = 0, pretend = 0, frame = 8
 3658              		@ frame_needed = 1, uses_anonymous_args = 0
 3659 0000 80B5     		push	{r7, lr}
 3660              	.LCFI186:
 3661              		.cfi_def_cfa_offset 8
 3662              		.cfi_offset 7, -8
 3663              		.cfi_offset 14, -4
 3664 0002 82B0     		sub	sp, sp, #8
 3665              	.LCFI187:
 3666              		.cfi_def_cfa_offset 16
 3667 0004 00AF     		add	r7, sp, #0
 3668              	.LCFI188:
 3669              		.cfi_def_cfa_register 7
 3670 0006 7860     		str	r0, [r7, #4]
 480:Src/encoder.cpp **** 
 481:Src/encoder.cpp ****     if(config_.is_high_speed_encode_query_enabled == false)
 3671              		.loc 9 481 8
 3672 0008 7B68     		ldr	r3, [r7, #4]
 3673 000a 5B68     		ldr	r3, [r3, #4]
 3674              		.loc 9 481 16
 3675 000c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3676              		.loc 9 481 5
 3677 000e 002B     		cmp	r3, #0
 3678 0010 01D1     		bne	.L137
 482:Src/encoder.cpp ****     return true;
 3679              		.loc 9 482 12
 3680 0012 0123     		movs	r3, #1
 3681 0014 18E0     		b	.L138
 3682              	.L137:
 483:Src/encoder.cpp **** 
 484:Src/encoder.cpp ****     if (mode_ & MODE_FLAG_485_ABS){
 3683              		.loc 9 484 9
 3684 0016 7B68     		ldr	r3, [r7, #4]
 3685 0018 B3F8D630 		ldrh	r3, [r3, #214]
 3686              		.loc 9 484 15
 3687 001c 03F40073 		and	r3, r3, #512
ARM GAS  /tmp/ccqv0h9S.s 			page 122


 3688              		.loc 9 484 5
 3689 0020 002B     		cmp	r3, #0
 3690 0022 03D0     		beq	.L139
 485:Src/encoder.cpp ****         abs_485_start_transaction();
 3691              		.loc 9 485 34
 3692 0024 7868     		ldr	r0, [r7, #4]
 3693 0026 FFF7FEFF 		bl	_ZN7Encoder25abs_485_start_transactionEv
 3694 002a 0CE0     		b	.L140
 3695              	.L139:
 486:Src/encoder.cpp ****     }
 487:Src/encoder.cpp ****     else if(mode_ & MODE_FLAG_ABS)
 3696              		.loc 9 487 13
 3697 002c 7B68     		ldr	r3, [r7, #4]
 3698 002e B3F8D630 		ldrh	r3, [r3, #214]
 3699              		.loc 9 487 19
 3700 0032 03F48073 		and	r3, r3, #256
 3701              		.loc 9 487 10
 3702 0036 002B     		cmp	r3, #0
 3703 0038 03D0     		beq	.L141
 488:Src/encoder.cpp ****     {
 489:Src/encoder.cpp ****         abs_spi_start_transaction();
 3704              		.loc 9 489 34
 3705 003a 7868     		ldr	r0, [r7, #4]
 3706 003c FFF7FEFF 		bl	_ZN7Encoder25abs_spi_start_transactionEv
 3707 0040 01E0     		b	.L140
 3708              	.L141:
 490:Src/encoder.cpp ****         //abs_spi_pos_updated_ = false;
 491:Src/encoder.cpp ****     }
 492:Src/encoder.cpp ****     else
 493:Src/encoder.cpp ****     {
 494:Src/encoder.cpp ****          return true;
 3709              		.loc 9 494 17
 3710 0042 0123     		movs	r3, #1
 3711 0044 00E0     		b	.L138
 3712              	.L140:
 495:Src/encoder.cpp ****     }
 496:Src/encoder.cpp ****     return true; 
 3713              		.loc 9 496 12
 3714 0046 0123     		movs	r3, #1
 3715              	.L138:
 497:Src/encoder.cpp **** }
 3716              		.loc 9 497 1
 3717 0048 1846     		mov	r0, r3
 3718 004a 0837     		adds	r7, r7, #8
 3719              	.LCFI189:
 3720              		.cfi_def_cfa_offset 8
 3721 004c BD46     		mov	sp, r7
 3722              	.LCFI190:
 3723              		.cfi_def_cfa_register 13
 3724              		@ sp needed
 3725 004e 80BD     		pop	{r7, pc}
 3726              		.cfi_endproc
 3727              	.LFE4845:
 3729              		.section	.text._ZN7Encoder25abs_485_start_transactionEv,"ax",%progbits
 3730              		.align	1
 3731              		.global	_ZN7Encoder25abs_485_start_transactionEv
 3732              		.syntax unified
ARM GAS  /tmp/ccqv0h9S.s 			page 123


 3733              		.thumb
 3734              		.thumb_func
 3735              		.fpu fpv4-sp-d16
 3737              	_ZN7Encoder25abs_485_start_transactionEv:
 3738              	.LFB4846:
 498:Src/encoder.cpp **** 
 499:Src/encoder.cpp **** 
 500:Src/encoder.cpp **** 
 501:Src/encoder.cpp **** bool Encoder::abs_485_start_transaction(){
 3739              		.loc 9 501 42
 3740              		.cfi_startproc
 3741              		@ args = 0, pretend = 0, frame = 8
 3742              		@ frame_needed = 1, uses_anonymous_args = 0
 3743              		@ link register save eliminated.
 3744 0000 80B4     		push	{r7}
 3745              	.LCFI191:
 3746              		.cfi_def_cfa_offset 4
 3747              		.cfi_offset 7, -4
 3748 0002 83B0     		sub	sp, sp, #12
 3749              	.LCFI192:
 3750              		.cfi_def_cfa_offset 16
 3751 0004 00AF     		add	r7, sp, #0
 3752              	.LCFI193:
 3753              		.cfi_def_cfa_register 7
 3754 0006 7860     		str	r0, [r7, #4]
 502:Src/encoder.cpp **** 
 503:Src/encoder.cpp ****     return true;
 3755              		.loc 9 503 12
 3756 0008 0123     		movs	r3, #1
 504:Src/encoder.cpp **** }
 3757              		.loc 9 504 1
 3758 000a 1846     		mov	r0, r3
 3759 000c 0C37     		adds	r7, r7, #12
 3760              	.LCFI194:
 3761              		.cfi_def_cfa_offset 4
 3762 000e BD46     		mov	sp, r7
 3763              	.LCFI195:
 3764              		.cfi_def_cfa_register 13
 3765              		@ sp needed
 3766 0010 5DF8047B 		ldr	r7, [sp], #4
 3767              	.LCFI196:
 3768              		.cfi_restore 7
 3769              		.cfi_def_cfa_offset 0
 3770 0014 7047     		bx	lr
 3771              		.cfi_endproc
 3772              	.LFE4846:
 3774              		.section	.text._ZN7Encoder25abs_spi_start_transactionEv,"ax",%progbits
 3775              		.align	1
 3776              		.global	_ZN7Encoder25abs_spi_start_transactionEv
 3777              		.syntax unified
 3778              		.thumb
 3779              		.thumb_func
 3780              		.fpu fpv4-sp-d16
 3782              	_ZN7Encoder25abs_spi_start_transactionEv:
 3783              	.LFB4847:
 505:Src/encoder.cpp **** 
 506:Src/encoder.cpp **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 124


 507:Src/encoder.cpp **** bool Encoder::abs_spi_start_transaction(){
 3784              		.loc 9 507 42
 3785              		.cfi_startproc
 3786              		@ args = 0, pretend = 0, frame = 8
 3787              		@ frame_needed = 1, uses_anonymous_args = 0
 3788 0000 80B5     		push	{r7, lr}
 3789              	.LCFI197:
 3790              		.cfi_def_cfa_offset 8
 3791              		.cfi_offset 7, -8
 3792              		.cfi_offset 14, -4
 3793 0002 82B0     		sub	sp, sp, #8
 3794              	.LCFI198:
 3795              		.cfi_def_cfa_offset 16
 3796 0004 00AF     		add	r7, sp, #0
 3797              	.LCFI199:
 3798              		.cfi_def_cfa_register 7
 3799 0006 7860     		str	r0, [r7, #4]
 508:Src/encoder.cpp ****     if (mode_ & MODE_FLAG_ABS){
 3800              		.loc 9 508 9
 3801 0008 7B68     		ldr	r3, [r7, #4]
 3802 000a B3F8D630 		ldrh	r3, [r3, #214]
 3803              		.loc 9 508 15
 3804 000e 03F48073 		and	r3, r3, #256
 3805              		.loc 9 508 5
 3806 0012 002B     		cmp	r3, #0
 3807 0014 43D0     		beq	.L145
 509:Src/encoder.cpp ****         if(hw_config_.motor_spi->State != HAL_SPI_STATE_READY){  
 3808              		.loc 9 509 12
 3809 0016 7B68     		ldr	r3, [r7, #4]
 3810 0018 1B68     		ldr	r3, [r3]
 3811              		.loc 9 509 23
 3812 001a 5B6A     		ldr	r3, [r3, #36]
 3813              		.loc 9 509 34
 3814 001c 93F85D30 		ldrb	r3, [r3, #93]
 3815 0020 DBB2     		uxtb	r3, r3
 3816              		.loc 9 509 40
 3817 0022 012B     		cmp	r3, #1
 3818 0024 14BF     		ite	ne
 3819 0026 0123     		movne	r3, #1
 3820 0028 0023     		moveq	r3, #0
 3821 002a DBB2     		uxtb	r3, r3
 3822              		.loc 9 509 9
 3823 002c 002B     		cmp	r3, #0
 3824 002e 06D0     		beq	.L146
 510:Src/encoder.cpp ****             set_error(ERROR_ABS_SPI_NOT_READY);
 3825              		.loc 9 510 22
 3826 0030 4FF48071 		mov	r1, #256
 3827 0034 7868     		ldr	r0, [r7, #4]
 3828 0036 FFF7FEFF 		bl	_ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE
 511:Src/encoder.cpp ****             return false;
 3829              		.loc 9 511 20
 3830 003a 0023     		movs	r3, #0
 3831 003c 30E0     		b	.L147
 3832              	.L146:
 512:Src/encoder.cpp ****         }
 513:Src/encoder.cpp ****         HAL_GPIO_WritePin(motor_spi_cs_port_, motor_spi_cs_pin_, GPIO_PIN_RESET);
 3833              		.loc 9 513 26
ARM GAS  /tmp/ccqv0h9S.s 			page 125


 3834 003e 7B68     		ldr	r3, [r7, #4]
 3835 0040 D3F8D800 		ldr	r0, [r3, #216]
 3836 0044 7B68     		ldr	r3, [r7, #4]
 3837 0046 B3F8DC30 		ldrh	r3, [r3, #220]
 3838 004a 0022     		movs	r2, #0
 3839 004c 1946     		mov	r1, r3
 3840 004e FFF7FEFF 		bl	HAL_GPIO_WritePin
 514:Src/encoder.cpp ****         HAL_GPIO_WritePin(GearboxOutputEncoder_spi_cs_port_, GearboxOutputEncoder_spi_cs_pin_, GPIO
 3841              		.loc 9 514 26
 3842 0052 7B68     		ldr	r3, [r7, #4]
 3843 0054 D3F8E000 		ldr	r0, [r3, #224]
 3844 0058 7B68     		ldr	r3, [r7, #4]
 3845 005a B3F8E430 		ldrh	r3, [r3, #228]
 3846 005e 0022     		movs	r2, #0
 3847 0060 1946     		mov	r1, r3
 3848 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 515:Src/encoder.cpp ****         
 516:Src/encoder.cpp ****       //  HAL_SPI_TransmitReceive_DMA(hw_config_.GearboxOutputEncoder_spi, (uint8_t*)GearboxOutputE
 517:Src/encoder.cpp ****         transmit_spi(hw_config_.motor_spi, (uint8_t*)abs_spi_dma_tx_, (uint8_t*)abs_spi_dma_rx_, 3)
 3849              		.loc 9 517 22
 3850 0066 7B68     		ldr	r3, [r7, #4]
 3851 0068 1B68     		ldr	r3, [r3]
 3852              		.loc 9 517 33
 3853 006a 586A     		ldr	r0, [r3, #36]
 3854              		.loc 9 517 54
 3855 006c 7B68     		ldr	r3, [r7, #4]
 3856 006e 03F1B801 		add	r1, r3, #184
 3857              		.loc 9 517 81
 3858 0072 7B68     		ldr	r3, [r7, #4]
 3859 0074 03F1BC02 		add	r2, r3, #188
 3860              		.loc 9 517 21
 3861 0078 0323     		movs	r3, #3
 3862 007a FFF7FEFF 		bl	transmit_spi
 518:Src/encoder.cpp ****         
 519:Src/encoder.cpp ****       //  HAL_SPI_TransmitReceive_DMA(hw_config_.motor_spi, (uint8_t*)abs_spi_dma_tx_, (uint8_t*)ab
 520:Src/encoder.cpp ****         transmit_spi(hw_config_.GearboxOutputEncoder_spi, (uint8_t*)GearboxOutputEncoder_spi_dma_tx
 3863              		.loc 9 520 22
 3864 007e 7B68     		ldr	r3, [r7, #4]
 3865 0080 1B68     		ldr	r3, [r3]
 3866              		.loc 9 520 33
 3867 0082 986A     		ldr	r0, [r3, #40]
 3868              		.loc 9 520 69
 3869 0084 7B68     		ldr	r3, [r7, #4]
 3870 0086 03F1C001 		add	r1, r3, #192
 3871              		.loc 9 520 113
 3872 008a 7B68     		ldr	r3, [r7, #4]
 3873 008c 03F1C402 		add	r2, r3, #196
 3874              		.loc 9 520 21
 3875 0090 0423     		movs	r3, #4
 3876 0092 FFF7FEFF 		bl	transmit_spi
 521:Src/encoder.cpp ****         abs_spi_pos_updated_ = true;
 3877              		.loc 9 521 30
 3878 0096 7B68     		ldr	r3, [r7, #4]
 3879 0098 0122     		movs	r2, #1
 3880 009a 83F8D320 		strb	r2, [r3, #211]
 3881              	.L145:
 522:Src/encoder.cpp ****     }
ARM GAS  /tmp/ccqv0h9S.s 			page 126


 523:Src/encoder.cpp ****     return true;
 3882              		.loc 9 523 12
 3883 009e 0123     		movs	r3, #1
 3884              	.L147:
 524:Src/encoder.cpp **** }
 3885              		.loc 9 524 1
 3886 00a0 1846     		mov	r0, r3
 3887 00a2 0837     		adds	r7, r7, #8
 3888              	.LCFI200:
 3889              		.cfi_def_cfa_offset 8
 3890 00a4 BD46     		mov	sp, r7
 3891              	.LCFI201:
 3892              		.cfi_def_cfa_register 13
 3893              		@ sp needed
 3894 00a6 80BD     		pop	{r7, pc}
 3895              		.cfi_endproc
 3896              	.LFE4847:
 3898              		.section	.text._Z10ams_parityt,"ax",%progbits
 3899              		.align	1
 3900              		.global	_Z10ams_parityt
 3901              		.syntax unified
 3902              		.thumb
 3903              		.thumb_func
 3904              		.fpu fpv4-sp-d16
 3906              	_Z10ams_parityt:
 3907              	.LFB4848:
 525:Src/encoder.cpp **** 
 526:Src/encoder.cpp **** uint8_t ams_parity(uint16_t v) {
 3908              		.loc 9 526 32
 3909              		.cfi_startproc
 3910              		@ args = 0, pretend = 0, frame = 8
 3911              		@ frame_needed = 1, uses_anonymous_args = 0
 3912              		@ link register save eliminated.
 3913 0000 80B4     		push	{r7}
 3914              	.LCFI202:
 3915              		.cfi_def_cfa_offset 4
 3916              		.cfi_offset 7, -4
 3917 0002 83B0     		sub	sp, sp, #12
 3918              	.LCFI203:
 3919              		.cfi_def_cfa_offset 16
 3920 0004 00AF     		add	r7, sp, #0
 3921              	.LCFI204:
 3922              		.cfi_def_cfa_register 7
 3923 0006 0346     		mov	r3, r0
 3924 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 527:Src/encoder.cpp ****     v ^= v >> 8;
 3925              		.loc 9 527 12
 3926 000a FB88     		ldrh	r3, [r7, #6]
 3927 000c 1B0A     		lsrs	r3, r3, #8
 3928 000e 9AB2     		uxth	r2, r3
 3929              		.loc 9 527 7
 3930 0010 FB88     		ldrh	r3, [r7, #6]	@ movhi
 3931 0012 5340     		eors	r3, r3, r2
 3932 0014 FB80     		strh	r3, [r7, #6]	@ movhi
 528:Src/encoder.cpp ****     v ^= v >> 4;
 3933              		.loc 9 528 12
 3934 0016 FB88     		ldrh	r3, [r7, #6]
ARM GAS  /tmp/ccqv0h9S.s 			page 127


 3935 0018 1B09     		lsrs	r3, r3, #4
 3936 001a 9AB2     		uxth	r2, r3
 3937              		.loc 9 528 7
 3938 001c FB88     		ldrh	r3, [r7, #6]	@ movhi
 3939 001e 5340     		eors	r3, r3, r2
 3940 0020 FB80     		strh	r3, [r7, #6]	@ movhi
 529:Src/encoder.cpp ****     v ^= v >> 2;
 3941              		.loc 9 529 12
 3942 0022 FB88     		ldrh	r3, [r7, #6]
 3943 0024 9B08     		lsrs	r3, r3, #2
 3944 0026 9AB2     		uxth	r2, r3
 3945              		.loc 9 529 7
 3946 0028 FB88     		ldrh	r3, [r7, #6]	@ movhi
 3947 002a 5340     		eors	r3, r3, r2
 3948 002c FB80     		strh	r3, [r7, #6]	@ movhi
 530:Src/encoder.cpp ****     v ^= v >> 1;
 3949              		.loc 9 530 12
 3950 002e FB88     		ldrh	r3, [r7, #6]
 3951 0030 5B08     		lsrs	r3, r3, #1
 3952 0032 9AB2     		uxth	r2, r3
 3953              		.loc 9 530 7
 3954 0034 FB88     		ldrh	r3, [r7, #6]	@ movhi
 3955 0036 5340     		eors	r3, r3, r2
 3956 0038 FB80     		strh	r3, [r7, #6]	@ movhi
 531:Src/encoder.cpp ****     return v & 1;
 3957              		.loc 9 531 14
 3958 003a FB88     		ldrh	r3, [r7, #6]	@ movhi
 3959 003c DBB2     		uxtb	r3, r3
 3960              		.loc 9 531 16
 3961 003e 03F00103 		and	r3, r3, #1
 3962 0042 DBB2     		uxtb	r3, r3
 532:Src/encoder.cpp **** }
 3963              		.loc 9 532 1
 3964 0044 1846     		mov	r0, r3
 3965 0046 0C37     		adds	r7, r7, #12
 3966              	.LCFI205:
 3967              		.cfi_def_cfa_offset 4
 3968 0048 BD46     		mov	sp, r7
 3969              	.LCFI206:
 3970              		.cfi_def_cfa_register 13
 3971              		@ sp needed
 3972 004a 5DF8047B 		ldr	r7, [sp], #4
 3973              	.LCFI207:
 3974              		.cfi_restore 7
 3975              		.cfi_def_cfa_offset 0
 3976 004e 7047     		bx	lr
 3977              		.cfi_endproc
 3978              	.LFE4848:
 3980              		.section	.text._Z10cui_parityt,"ax",%progbits
 3981              		.align	1
 3982              		.global	_Z10cui_parityt
 3983              		.syntax unified
 3984              		.thumb
 3985              		.thumb_func
 3986              		.fpu fpv4-sp-d16
 3988              	_Z10cui_parityt:
 3989              	.LFB4849:
ARM GAS  /tmp/ccqv0h9S.s 			page 128


 533:Src/encoder.cpp **** 
 534:Src/encoder.cpp **** uint8_t cui_parity(uint16_t v) {
 3990              		.loc 9 534 32
 3991              		.cfi_startproc
 3992              		@ args = 0, pretend = 0, frame = 8
 3993              		@ frame_needed = 1, uses_anonymous_args = 0
 3994              		@ link register save eliminated.
 3995 0000 80B4     		push	{r7}
 3996              	.LCFI208:
 3997              		.cfi_def_cfa_offset 4
 3998              		.cfi_offset 7, -4
 3999 0002 83B0     		sub	sp, sp, #12
 4000              	.LCFI209:
 4001              		.cfi_def_cfa_offset 16
 4002 0004 00AF     		add	r7, sp, #0
 4003              	.LCFI210:
 4004              		.cfi_def_cfa_register 7
 4005 0006 0346     		mov	r3, r0
 4006 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 535:Src/encoder.cpp ****     v ^= v >> 8;
 4007              		.loc 9 535 12
 4008 000a FB88     		ldrh	r3, [r7, #6]
 4009 000c 1B0A     		lsrs	r3, r3, #8
 4010 000e 9AB2     		uxth	r2, r3
 4011              		.loc 9 535 7
 4012 0010 FB88     		ldrh	r3, [r7, #6]	@ movhi
 4013 0012 5340     		eors	r3, r3, r2
 4014 0014 FB80     		strh	r3, [r7, #6]	@ movhi
 536:Src/encoder.cpp ****     v ^= v >> 4;
 4015              		.loc 9 536 12
 4016 0016 FB88     		ldrh	r3, [r7, #6]
 4017 0018 1B09     		lsrs	r3, r3, #4
 4018 001a 9AB2     		uxth	r2, r3
 4019              		.loc 9 536 7
 4020 001c FB88     		ldrh	r3, [r7, #6]	@ movhi
 4021 001e 5340     		eors	r3, r3, r2
 4022 0020 FB80     		strh	r3, [r7, #6]	@ movhi
 537:Src/encoder.cpp ****     v ^= v >> 2;
 4023              		.loc 9 537 12
 4024 0022 FB88     		ldrh	r3, [r7, #6]
 4025 0024 9B08     		lsrs	r3, r3, #2
 4026 0026 9AB2     		uxth	r2, r3
 4027              		.loc 9 537 7
 4028 0028 FB88     		ldrh	r3, [r7, #6]	@ movhi
 4029 002a 5340     		eors	r3, r3, r2
 4030 002c FB80     		strh	r3, [r7, #6]	@ movhi
 538:Src/encoder.cpp ****     return ~v & 3;
 4031              		.loc 9 538 15
 4032 002e FB88     		ldrh	r3, [r7, #6]	@ movhi
 4033 0030 DBB2     		uxtb	r3, r3
 4034 0032 DB43     		mvns	r3, r3
 4035 0034 DBB2     		uxtb	r3, r3
 4036              		.loc 9 538 17
 4037 0036 03F00303 		and	r3, r3, #3
 4038 003a DBB2     		uxtb	r3, r3
 539:Src/encoder.cpp **** }
 4039              		.loc 9 539 1
ARM GAS  /tmp/ccqv0h9S.s 			page 129


 4040 003c 1846     		mov	r0, r3
 4041 003e 0C37     		adds	r7, r7, #12
 4042              	.LCFI211:
 4043              		.cfi_def_cfa_offset 4
 4044 0040 BD46     		mov	sp, r7
 4045              	.LCFI212:
 4046              		.cfi_def_cfa_register 13
 4047              		@ sp needed
 4048 0042 5DF8047B 		ldr	r7, [sp], #4
 4049              	.LCFI213:
 4050              		.cfi_restore 7
 4051              		.cfi_def_cfa_offset 0
 4052 0046 7047     		bx	lr
 4053              		.cfi_endproc
 4054              	.LFE4849:
 4056              		.section	.text._ZN7Encoder10abs_spi_cbEv,"ax",%progbits
 4057              		.align	1
 4058              		.global	_ZN7Encoder10abs_spi_cbEv
 4059              		.syntax unified
 4060              		.thumb
 4061              		.thumb_func
 4062              		.fpu fpv4-sp-d16
 4064              	_ZN7Encoder10abs_spi_cbEv:
 4065              	.LFB4850:
 540:Src/encoder.cpp **** 
 541:Src/encoder.cpp **** void Encoder::abs_spi_cb(){
 4066              		.loc 9 541 27
 4067              		.cfi_startproc
 4068              		@ args = 0, pretend = 0, frame = 24
 4069              		@ frame_needed = 1, uses_anonymous_args = 0
 4070 0000 80B5     		push	{r7, lr}
 4071              	.LCFI214:
 4072              		.cfi_def_cfa_offset 8
 4073              		.cfi_offset 7, -8
 4074              		.cfi_offset 14, -4
 4075 0002 86B0     		sub	sp, sp, #24
 4076              	.LCFI215:
 4077              		.cfi_def_cfa_offset 32
 4078 0004 00AF     		add	r7, sp, #0
 4079              	.LCFI216:
 4080              		.cfi_def_cfa_register 7
 4081 0006 7860     		str	r0, [r7, #4]
 542:Src/encoder.cpp ****     HAL_GPIO_WritePin(motor_spi_cs_port_, motor_spi_cs_pin_, GPIO_PIN_SET);
 4082              		.loc 9 542 22
 4083 0008 7B68     		ldr	r3, [r7, #4]
 4084 000a D3F8D800 		ldr	r0, [r3, #216]
 4085 000e 7B68     		ldr	r3, [r7, #4]
 4086 0010 B3F8DC30 		ldrh	r3, [r3, #220]
 4087 0014 0122     		movs	r2, #1
 4088 0016 1946     		mov	r1, r3
 4089 0018 FFF7FEFF 		bl	HAL_GPIO_WritePin
 543:Src/encoder.cpp ****     HAL_GPIO_WritePin(GearboxOutputEncoder_spi_cs_port_, GearboxOutputEncoder_spi_cs_pin_, GPIO_PIN
 4090              		.loc 9 543 22
 4091 001c 7B68     		ldr	r3, [r7, #4]
 4092 001e D3F8E000 		ldr	r0, [r3, #224]
 4093 0022 7B68     		ldr	r3, [r7, #4]
 4094 0024 B3F8E430 		ldrh	r3, [r3, #228]
ARM GAS  /tmp/ccqv0h9S.s 			page 130


 4095 0028 0122     		movs	r2, #1
 4096 002a 1946     		mov	r1, r3
 4097 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
 544:Src/encoder.cpp ****     axis_->motor_.log_timing(ODriveIntf::TIMING_LOG_SPI_END);
 4098              		.loc 9 544 5
 4099 0030 7B68     		ldr	r3, [r7, #4]
 4100 0032 9B68     		ldr	r3, [r3, #8]
 4101              		.loc 9 544 12
 4102 0034 DB6E     		ldr	r3, [r3, #108]
 4103              		.loc 9 544 29
 4104 0036 0B21     		movs	r1, #11
 4105 0038 1846     		mov	r0, r3
 4106 003a FFF7FEFF 		bl	_ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE
 4107              	.LBB24:
 545:Src/encoder.cpp **** 
 546:Src/encoder.cpp ****     uint32_t pos;
 547:Src/encoder.cpp **** 
 548:Src/encoder.cpp ****     switch (mode_) {
 4108              		.loc 9 548 13
 4109 003e 7B68     		ldr	r3, [r7, #4]
 4110 0040 B3F8D630 		ldrh	r3, [r3, #214]
 4111              		.loc 9 548 5
 4112 0044 40F20312 		movw	r2, #259
 4113 0048 9342     		cmp	r3, r2
 4114 004a 3AD0     		beq	.L153
 4115 004c B3F5827F 		cmp	r3, #260
 4116 0050 57DA     		bge	.L154
 4117 0052 B3F5807F 		cmp	r3, #256
 4118 0056 1FD0     		beq	.L155
 4119 0058 40F20112 		movw	r2, #257
 4120 005c 9342     		cmp	r3, r2
 4121 005e 50D1     		bne	.L154
 4122              	.LBB25:
 4123              	.LBB26:
 549:Src/encoder.cpp ****         case MODE_SPI_ABS_AMS: {
 550:Src/encoder.cpp ****             uint16_t rawVal = abs_spi_dma_rx_[0];
 4124              		.loc 9 550 48
 4125 0060 7B68     		ldr	r3, [r7, #4]
 4126 0062 93F8BC30 		ldrb	r3, [r3, #188]	@ zero_extendqisi2
 4127              		.loc 9 550 22
 4128 0066 FB81     		strh	r3, [r7, #14]	@ movhi
 551:Src/encoder.cpp ****             // check if parity is correct (even) and error flag clear
 552:Src/encoder.cpp ****             if (ams_parity(rawVal) || ((rawVal >> 14) & 1)) {
 4129              		.loc 9 552 27
 4130 0068 FB89     		ldrh	r3, [r7, #14]
 4131 006a 1846     		mov	r0, r3
 4132 006c FFF7FEFF 		bl	_Z10ams_parityt
 4133 0070 0346     		mov	r3, r0
 4134              		.loc 9 552 36
 4135 0072 002B     		cmp	r3, #0
 4136 0074 06D1     		bne	.L156
 4137              		.loc 9 552 48 discriminator 2
 4138 0076 FB89     		ldrh	r3, [r7, #14]
 4139 0078 9B0B     		lsrs	r3, r3, #14
 4140 007a 9BB2     		uxth	r3, r3
 4141              		.loc 9 552 55 discriminator 2
 4142 007c 03F00103 		and	r3, r3, #1
ARM GAS  /tmp/ccqv0h9S.s 			page 131


 4143              		.loc 9 552 36 discriminator 2
 4144 0080 002B     		cmp	r3, #0
 4145 0082 01D0     		beq	.L157
 4146              	.L156:
 4147              		.loc 9 552 36 is_stmt 0 discriminator 3
 4148 0084 0123     		movs	r3, #1
 4149 0086 00E0     		b	.L158
 4150              	.L157:
 4151              		.loc 9 552 36 discriminator 4
 4152 0088 0023     		movs	r3, #0
 4153              	.L158:
 4154              		.loc 9 552 13 is_stmt 1 discriminator 6
 4155 008a 002B     		cmp	r3, #0
 4156 008c 4ED1     		bne	.L163
 553:Src/encoder.cpp ****                 return;
 554:Src/encoder.cpp ****             }
 555:Src/encoder.cpp ****             pos = rawVal & 0x3fff;
 4157              		.loc 9 555 26
 4158 008e FB89     		ldrh	r3, [r7, #14]
 4159              		.loc 9 555 17
 4160 0090 C3F30D03 		ubfx	r3, r3, #0, #14
 4161 0094 7B61     		str	r3, [r7, #20]
 4162              	.LBE26:
 556:Src/encoder.cpp ****         } break;
 4163              		.loc 9 556 11
 4164 0096 39E0     		b	.L161
 4165              	.L155:
 4166              	.LBB27:
 557:Src/encoder.cpp **** 
 558:Src/encoder.cpp ****         case MODE_SPI_ABS_CUI: {
 559:Src/encoder.cpp ****             uint16_t rawVal = abs_spi_dma_rx_[0];
 4167              		.loc 9 559 48
 4168 0098 7B68     		ldr	r3, [r7, #4]
 4169 009a 93F8BC30 		ldrb	r3, [r3, #188]	@ zero_extendqisi2
 4170              		.loc 9 559 22
 4171 009e BB81     		strh	r3, [r7, #12]	@ movhi
 560:Src/encoder.cpp ****             // check if parity is correct
 561:Src/encoder.cpp ****             if (cui_parity(rawVal)) {
 4172              		.loc 9 561 27
 4173 00a0 BB89     		ldrh	r3, [r7, #12]
 4174 00a2 1846     		mov	r0, r3
 4175 00a4 FFF7FEFF 		bl	_Z10cui_parityt
 4176 00a8 0346     		mov	r3, r0
 4177 00aa 002B     		cmp	r3, #0
 4178 00ac 14BF     		ite	ne
 4179 00ae 0123     		movne	r3, #1
 4180 00b0 0023     		moveq	r3, #0
 4181 00b2 DBB2     		uxtb	r3, r3
 4182              		.loc 9 561 13
 4183 00b4 002B     		cmp	r3, #0
 4184 00b6 3BD1     		bne	.L164
 562:Src/encoder.cpp ****                 return;
 563:Src/encoder.cpp ****             }
 564:Src/encoder.cpp ****             pos = rawVal & 0x3fff;
 4185              		.loc 9 564 26
 4186 00b8 BB89     		ldrh	r3, [r7, #12]
 4187              		.loc 9 564 17
ARM GAS  /tmp/ccqv0h9S.s 			page 132


 4188 00ba C3F30D03 		ubfx	r3, r3, #0, #14
 4189 00be 7B61     		str	r3, [r7, #20]
 4190              	.LBE27:
 565:Src/encoder.cpp ****         } break;
 4191              		.loc 9 565 11
 4192 00c0 24E0     		b	.L161
 4193              	.L153:
 4194              	.LBB28:
 566:Src/encoder.cpp **** 
 567:Src/encoder.cpp ****         case MODE_SPI_ABS_RLS: {
 568:Src/encoder.cpp ****           //  uint16_t rawVal = abs_spi_dma_rx_[0];
 569:Src/encoder.cpp ****           //  pos = (rawVal >> 2) & 0x3fff;
 570:Src/encoder.cpp ****           uint32_t rawVal = *(uint32_t *)&abs_spi_dma_rx_[0];
 4195              		.loc 9 570 42
 4196 00c2 7B68     		ldr	r3, [r7, #4]
 4197 00c4 BC33     		adds	r3, r3, #188
 4198              		.loc 9 570 20
 4199 00c6 1B68     		ldr	r3, [r3]
 4200 00c8 3B61     		str	r3, [r7, #16]
 571:Src/encoder.cpp ****           pos = ((rawVal & 0x0000ff00)) | ( (rawVal & 0x00ff0000)>>16 ) ;
 4201              		.loc 9 571 26
 4202 00ca 3B69     		ldr	r3, [r7, #16]
 4203 00cc 03F47F42 		and	r2, r3, #65280
 4204              		.loc 9 571 66
 4205 00d0 3B69     		ldr	r3, [r7, #16]
 4206 00d2 1B0C     		lsrs	r3, r3, #16
 4207 00d4 DBB2     		uxtb	r3, r3
 4208              		.loc 9 571 15
 4209 00d6 1343     		orrs	r3, r3, r2
 4210 00d8 7B61     		str	r3, [r7, #20]
 572:Src/encoder.cpp ****           rawVal = *(uint32_t *)&GearboxOutputEncoder_spi_dma_rx_[0];
 4211              		.loc 9 572 33
 4212 00da 7B68     		ldr	r3, [r7, #4]
 4213 00dc C433     		adds	r3, r3, #196
 4214              		.loc 9 572 18
 4215 00de 1B68     		ldr	r3, [r3]
 4216 00e0 3B61     		str	r3, [r7, #16]
 573:Src/encoder.cpp ****           sencond_pos_abs_ =  ((rawVal & 0x0000ff00)<<8) | ( (rawVal & 0x00ff0000)>>8 )| ( (rawVal 
 4217              		.loc 9 573 53
 4218 00e2 3B69     		ldr	r3, [r7, #16]
 4219 00e4 1B02     		lsls	r3, r3, #8
 4220 00e6 03F47F02 		and	r2, r3, #16711680
 4221              		.loc 9 573 83
 4222 00ea 3B69     		ldr	r3, [r7, #16]
 4223 00ec 1B0A     		lsrs	r3, r3, #8
 4224 00ee 03F47F43 		and	r3, r3, #65280
 4225              		.loc 9 573 58
 4226 00f2 1A43     		orrs	r2, r2, r3
 4227              		.loc 9 573 113
 4228 00f4 3B69     		ldr	r3, [r7, #16]
 4229 00f6 1B0E     		lsrs	r3, r3, #24
 4230              		.loc 9 573 88
 4231 00f8 1343     		orrs	r3, r3, r2
 4232 00fa 1A46     		mov	r2, r3
 4233              		.loc 9 573 28
 4234 00fc 7B68     		ldr	r3, [r7, #4]
 4235 00fe 9A66     		str	r2, [r3, #104]
ARM GAS  /tmp/ccqv0h9S.s 			page 133


 4236              	.LBE28:
 574:Src/encoder.cpp ****         } break;
 4237              		.loc 9 574 11
 4238 0100 04E0     		b	.L161
 4239              	.L154:
 575:Src/encoder.cpp **** 
 576:Src/encoder.cpp ****         default: {
 577:Src/encoder.cpp ****            set_error(ERROR_UNSUPPORTED_ENCODER_MODE);
 4240              		.loc 9 577 21
 4241 0102 0821     		movs	r1, #8
 4242 0104 7868     		ldr	r0, [r7, #4]
 4243 0106 FFF7FEFF 		bl	_ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE
 578:Src/encoder.cpp ****            return;
 4244              		.loc 9 578 12
 4245 010a 12E0     		b	.L152
 4246              	.L161:
 4247              	.LBE25:
 4248              	.LBE24:
 579:Src/encoder.cpp ****         } break;
 580:Src/encoder.cpp ****     }
 581:Src/encoder.cpp **** 
 582:Src/encoder.cpp ****     pos_abs_ = pos;
 4249              		.loc 9 582 16
 4250 010c 7A69     		ldr	r2, [r7, #20]
 4251              		.loc 9 582 14
 4252 010e 7B68     		ldr	r3, [r7, #4]
 4253 0110 5A66     		str	r2, [r3, #100]
 583:Src/encoder.cpp ****     abs_spi_pos_updated_ = true;
 4254              		.loc 9 583 26
 4255 0112 7B68     		ldr	r3, [r7, #4]
 4256 0114 0122     		movs	r2, #1
 4257 0116 83F8D320 		strb	r2, [r3, #211]
 584:Src/encoder.cpp ****     if (config_.pre_calibrated) {
 4258              		.loc 9 584 9
 4259 011a 7B68     		ldr	r3, [r7, #4]
 4260 011c 5B68     		ldr	r3, [r3, #4]
 4261              		.loc 9 584 17
 4262 011e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 4263              		.loc 9 584 5
 4264 0120 002B     		cmp	r3, #0
 4265 0122 06D0     		beq	.L152
 585:Src/encoder.cpp ****         is_ready_ = true;
 4266              		.loc 9 585 19
 4267 0124 7B68     		ldr	r3, [r7, #4]
 4268 0126 0122     		movs	r2, #1
 4269 0128 DA73     		strb	r2, [r3, #15]
 4270 012a 02E0     		b	.L152
 4271              	.L163:
 4272              	.LBB32:
 4273              	.LBB31:
 4274              	.LBB29:
 553:Src/encoder.cpp ****             }
 4275              		.loc 9 553 17
 4276 012c 00BF     		nop
 4277 012e 00E0     		b	.L152
 4278              	.L164:
 4279              	.LBE29:
ARM GAS  /tmp/ccqv0h9S.s 			page 134


 4280              	.LBB30:
 562:Src/encoder.cpp ****             }
 4281              		.loc 9 562 17
 4282 0130 00BF     		nop
 4283              	.L152:
 4284              	.LBE30:
 4285              	.LBE31:
 4286              	.LBE32:
 586:Src/encoder.cpp ****     }
 587:Src/encoder.cpp **** }
 4287              		.loc 9 587 1
 4288 0132 1837     		adds	r7, r7, #24
 4289              	.LCFI217:
 4290              		.cfi_def_cfa_offset 8
 4291 0134 BD46     		mov	sp, r7
 4292              	.LCFI218:
 4293              		.cfi_def_cfa_register 13
 4294              		@ sp needed
 4295 0136 80BD     		pop	{r7, pc}
 4296              		.cfi_endproc
 4297              	.LFE4850:
 4299              		.section	.text._ZN7Encoder19abs_spi_cs_pin_initEv,"ax",%progbits
 4300              		.align	1
 4301              		.global	_ZN7Encoder19abs_spi_cs_pin_initEv
 4302              		.syntax unified
 4303              		.thumb
 4304              		.thumb_func
 4305              		.fpu fpv4-sp-d16
 4307              	_ZN7Encoder19abs_spi_cs_pin_initEv:
 4308              	.LFB4851:
 588:Src/encoder.cpp **** 
 589:Src/encoder.cpp **** void Encoder::abs_spi_cs_pin_init(){
 4309              		.loc 9 589 36
 4310              		.cfi_startproc
 4311              		@ args = 0, pretend = 0, frame = 32
 4312              		@ frame_needed = 1, uses_anonymous_args = 0
 4313 0000 80B5     		push	{r7, lr}
 4314              	.LCFI219:
 4315              		.cfi_def_cfa_offset 8
 4316              		.cfi_offset 7, -8
 4317              		.cfi_offset 14, -4
 4318 0002 88B0     		sub	sp, sp, #32
 4319              	.LCFI220:
 4320              		.cfi_def_cfa_offset 40
 4321 0004 00AF     		add	r7, sp, #0
 4322              	.LCFI221:
 4323              		.cfi_def_cfa_register 7
 4324 0006 7860     		str	r0, [r7, #4]
 590:Src/encoder.cpp ****     // Decode cs pin
 591:Src/encoder.cpp ****     motor_spi_cs_port_ = MU128_1_GPIO_Port;
 4325              		.loc 9 591 24
 4326 0008 7B68     		ldr	r3, [r7, #4]
 4327 000a 4FF09042 		mov	r2, #1207959552
 4328 000e C3F8D820 		str	r2, [r3, #216]
 592:Src/encoder.cpp ****     motor_spi_cs_pin_ = MU128_1_Pin;
 4329              		.loc 9 592 23
 4330 0012 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccqv0h9S.s 			page 135


 4331 0014 1022     		movs	r2, #16
 4332 0016 A3F8DC20 		strh	r2, [r3, #220]	@ movhi
 593:Src/encoder.cpp ****     GearboxOutputEncoder_spi_cs_port_ = MU128_2_GPIO_Port;
 4333              		.loc 9 593 39
 4334 001a 7B68     		ldr	r3, [r7, #4]
 4335 001c 4FF09042 		mov	r2, #1207959552
 4336 0020 C3F8E020 		str	r2, [r3, #224]
 594:Src/encoder.cpp ****     GearboxOutputEncoder_spi_cs_pin_ = MU128_2_Pin;
 4337              		.loc 9 594 38
 4338 0024 7B68     		ldr	r3, [r7, #4]
 4339 0026 4FF40042 		mov	r2, #32768
 4340 002a A3F8E420 		strh	r2, [r3, #228]	@ movhi
 595:Src/encoder.cpp ****     // Init cs pin
 596:Src/encoder.cpp ****     HAL_GPIO_DeInit(motor_spi_cs_port_, motor_spi_cs_pin_);
 4341              		.loc 9 596 20
 4342 002e 7B68     		ldr	r3, [r7, #4]
 4343 0030 D3F8D820 		ldr	r2, [r3, #216]
 4344              		.loc 9 596 41
 4345 0034 7B68     		ldr	r3, [r7, #4]
 4346 0036 B3F8DC30 		ldrh	r3, [r3, #220]
 4347              		.loc 9 596 20
 4348 003a 1946     		mov	r1, r3
 4349 003c 1046     		mov	r0, r2
 4350 003e FFF7FEFF 		bl	HAL_GPIO_DeInit
 597:Src/encoder.cpp ****     HAL_GPIO_DeInit(GearboxOutputEncoder_spi_cs_port_, GearboxOutputEncoder_spi_cs_pin_);
 4351              		.loc 9 597 20
 4352 0042 7B68     		ldr	r3, [r7, #4]
 4353 0044 D3F8E020 		ldr	r2, [r3, #224]
 4354              		.loc 9 597 56
 4355 0048 7B68     		ldr	r3, [r7, #4]
 4356 004a B3F8E430 		ldrh	r3, [r3, #228]
 4357              		.loc 9 597 20
 4358 004e 1946     		mov	r1, r3
 4359 0050 1046     		mov	r0, r2
 4360 0052 FFF7FEFF 		bl	HAL_GPIO_DeInit
 598:Src/encoder.cpp ****     GPIO_InitTypeDef GPIO_InitStruct;
 599:Src/encoder.cpp ****     GPIO_InitStruct.Pin = motor_spi_cs_pin_;
 4361              		.loc 9 599 27
 4362 0056 7B68     		ldr	r3, [r7, #4]
 4363 0058 B3F8DC30 		ldrh	r3, [r3, #220]
 4364              		.loc 9 599 25
 4365 005c FB60     		str	r3, [r7, #12]
 600:Src/encoder.cpp ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 4366              		.loc 9 600 26
 4367 005e 0123     		movs	r3, #1
 4368 0060 3B61     		str	r3, [r7, #16]
 601:Src/encoder.cpp ****     GPIO_InitStruct.Pull = GPIO_PULLUP;
 4369              		.loc 9 601 26
 4370 0062 0123     		movs	r3, #1
 4371 0064 7B61     		str	r3, [r7, #20]
 602:Src/encoder.cpp ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 4372              		.loc 9 602 27
 4373 0066 0023     		movs	r3, #0
 4374 0068 BB61     		str	r3, [r7, #24]
 603:Src/encoder.cpp ****     HAL_GPIO_Init(motor_spi_cs_port_, &GPIO_InitStruct);
 4375              		.loc 9 603 18
 4376 006a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccqv0h9S.s 			page 136


 4377 006c D3F8D830 		ldr	r3, [r3, #216]
 4378 0070 07F10C02 		add	r2, r7, #12
 4379 0074 1146     		mov	r1, r2
 4380 0076 1846     		mov	r0, r3
 4381 0078 FFF7FEFF 		bl	HAL_GPIO_Init
 604:Src/encoder.cpp **** 
 605:Src/encoder.cpp ****     GPIO_InitStruct.Pin = GearboxOutputEncoder_spi_cs_pin_;
 4382              		.loc 9 605 27
 4383 007c 7B68     		ldr	r3, [r7, #4]
 4384 007e B3F8E430 		ldrh	r3, [r3, #228]
 4385              		.loc 9 605 25
 4386 0082 FB60     		str	r3, [r7, #12]
 606:Src/encoder.cpp ****     HAL_GPIO_Init(GearboxOutputEncoder_spi_cs_port_, &GPIO_InitStruct);
 4387              		.loc 9 606 18
 4388 0084 7B68     		ldr	r3, [r7, #4]
 4389 0086 D3F8E030 		ldr	r3, [r3, #224]
 4390 008a 07F10C02 		add	r2, r7, #12
 4391 008e 1146     		mov	r1, r2
 4392 0090 1846     		mov	r0, r3
 4393 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 607:Src/encoder.cpp **** 
 608:Src/encoder.cpp ****     // Write pin high
 609:Src/encoder.cpp ****     HAL_GPIO_WritePin(motor_spi_cs_port_, motor_spi_cs_pin_, GPIO_PIN_SET);
 4394              		.loc 9 609 22
 4395 0096 7B68     		ldr	r3, [r7, #4]
 4396 0098 D3F8D800 		ldr	r0, [r3, #216]
 4397 009c 7B68     		ldr	r3, [r7, #4]
 4398 009e B3F8DC30 		ldrh	r3, [r3, #220]
 4399 00a2 0122     		movs	r2, #1
 4400 00a4 1946     		mov	r1, r3
 4401 00a6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 610:Src/encoder.cpp ****     HAL_GPIO_WritePin(GearboxOutputEncoder_spi_cs_port_, GearboxOutputEncoder_spi_cs_pin_, GPIO_PIN
 4402              		.loc 9 610 22
 4403 00aa 7B68     		ldr	r3, [r7, #4]
 4404 00ac D3F8E000 		ldr	r0, [r3, #224]
 4405 00b0 7B68     		ldr	r3, [r7, #4]
 4406 00b2 B3F8E430 		ldrh	r3, [r3, #228]
 4407 00b6 0122     		movs	r2, #1
 4408 00b8 1946     		mov	r1, r3
 4409 00ba FFF7FEFF 		bl	HAL_GPIO_WritePin
 611:Src/encoder.cpp **** }
 4410              		.loc 9 611 1
 4411 00be 00BF     		nop
 4412 00c0 2037     		adds	r7, r7, #32
 4413              	.LCFI222:
 4414              		.cfi_def_cfa_offset 8
 4415 00c2 BD46     		mov	sp, r7
 4416              	.LCFI223:
 4417              		.cfi_def_cfa_register 13
 4418              		@ sp needed
 4419 00c4 80BD     		pop	{r7, pc}
 4420              		.cfi_endproc
 4421              	.LFE4851:
 4423              		.section	.text._ZN7Encoder6updateEv,"ax",%progbits
 4424              		.align	1
 4425              		.global	_ZN7Encoder6updateEv
 4426              		.syntax unified
ARM GAS  /tmp/ccqv0h9S.s 			page 137


 4427              		.thumb
 4428              		.thumb_func
 4429              		.fpu fpv4-sp-d16
 4431              	_ZN7Encoder6updateEv:
 4432              	.LFB4852:
 612:Src/encoder.cpp **** 
 613:Src/encoder.cpp **** 
 614:Src/encoder.cpp **** bool Encoder::update() {
 4433              		.loc 9 614 24
 4434              		.cfi_startproc
 4435              		@ args = 0, pretend = 0, frame = 96
 4436              		@ frame_needed = 1, uses_anonymous_args = 0
 4437 0000 90B5     		push	{r4, r7, lr}
 4438              	.LCFI224:
 4439              		.cfi_def_cfa_offset 12
 4440              		.cfi_offset 4, -12
 4441              		.cfi_offset 7, -8
 4442              		.cfi_offset 14, -4
 4443 0002 99B0     		sub	sp, sp, #100
 4444              	.LCFI225:
 4445              		.cfi_def_cfa_offset 112
 4446 0004 00AF     		add	r7, sp, #0
 4447              	.LCFI226:
 4448              		.cfi_def_cfa_register 7
 4449 0006 7860     		str	r0, [r7, #4]
 615:Src/encoder.cpp ****     // update internal encoder state.
 616:Src/encoder.cpp ****     int32_t delta_enc = 0,gear_delta_enc = 0;
 4450              		.loc 9 616 13
 4451 0008 0023     		movs	r3, #0
 4452 000a FB65     		str	r3, [r7, #92]
 4453              		.loc 9 616 27
 4454 000c 0023     		movs	r3, #0
 4455 000e 3B65     		str	r3, [r7, #80]
 617:Src/encoder.cpp ****     int32_t pos_abs_latched = pos_abs_; //LATCH
 4456              		.loc 9 617 13
 4457 0010 7B68     		ldr	r3, [r7, #4]
 4458 0012 5B6E     		ldr	r3, [r3, #100]
 4459 0014 BB65     		str	r3, [r7, #88]
 4460              	.LBB33:
 618:Src/encoder.cpp ****     switch (mode_) {
 4461              		.loc 9 618 13
 4462 0016 7B68     		ldr	r3, [r7, #4]
 4463 0018 B3F8D630 		ldrh	r3, [r3, #214]
 4464              		.loc 9 618 5
 4465 001c B3F5827F 		cmp	r3, #260
 4466 0020 80F27D81 		bge	.L167
 4467 0024 B3F5807F 		cmp	r3, #256
 4468 0028 76DA     		bge	.L168
 4469 002a 022B     		cmp	r3, #2
 4470 002c 44D0     		beq	.L169
 4471 002e 022B     		cmp	r3, #2
 4472 0030 00F37581 		bgt	.L167
 4473 0034 002B     		cmp	r3, #0
 4474 0036 02D0     		beq	.L170
 4475 0038 012B     		cmp	r3, #1
 4476 003a 0FD0     		beq	.L171
 4477 003c 6FE1     		b	.L167
ARM GAS  /tmp/ccqv0h9S.s 			page 138


 4478              	.L170:
 4479              	.LBB34:
 4480              	.LBB35:
 619:Src/encoder.cpp ****         case MODE_INCREMENTAL: {
 620:Src/encoder.cpp ****             //TODO: use count_in_cpr_ instead as shadow_count_ can overflow
 621:Src/encoder.cpp ****             //or use 64 bit
 622:Src/encoder.cpp ****             int16_t delta_enc_16 = (int16_t)tim_cnt_sample_ - (int16_t)shadow_count_;
 4481              		.loc 9 622 45
 4482 003e 7B68     		ldr	r3, [r7, #4]
 4483 0040 B3F9AC30 		ldrsh	r3, [r3, #172]
 4484              		.loc 9 622 36
 4485 0044 9AB2     		uxth	r2, r3
 4486              		.loc 9 622 72
 4487 0046 7B68     		ldr	r3, [r7, #4]
 4488 0048 1B69     		ldr	r3, [r3, #16]
 4489              		.loc 9 622 61
 4490 004a 9BB2     		uxth	r3, r3
 4491 004c D31A     		subs	r3, r2, r3
 4492 004e 9BB2     		uxth	r3, r3
 4493              		.loc 9 622 21
 4494 0050 A7F84230 		strh	r3, [r7, #66]	@ movhi
 623:Src/encoder.cpp ****             delta_enc = (int32_t)delta_enc_16; //sign extend
 4495              		.loc 9 623 23
 4496 0054 B7F94230 		ldrsh	r3, [r7, #66]
 4497 0058 FB65     		str	r3, [r7, #92]
 4498              	.LBE35:
 624:Src/encoder.cpp ****         } break;
 4499              		.loc 9 624 11
 4500 005a 88E1     		b	.L172
 4501              	.L171:
 4502              	.LBB36:
 625:Src/encoder.cpp **** 
 626:Src/encoder.cpp ****         case MODE_HALL: {
 627:Src/encoder.cpp ****             int32_t hall_cnt;
 628:Src/encoder.cpp ****             if (decode_hall(hall_state_, &hall_cnt)) {
 4503              		.loc 9 628 28
 4504 005c 7B68     		ldr	r3, [r7, #4]
 4505 005e 93F8AE30 		ldrb	r3, [r3, #174]	@ zero_extendqisi2
 4506 0062 07F10C02 		add	r2, r7, #12
 4507 0066 1146     		mov	r1, r2
 4508 0068 1846     		mov	r0, r3
 4509 006a FFF7FEFF 		bl	_ZL11decode_hallhPl
 4510 006e 0346     		mov	r3, r0
 4511              		.loc 9 628 13
 4512 0070 002B     		cmp	r3, #0
 4513 0072 11D0     		beq	.L173
 629:Src/encoder.cpp ****                 delta_enc = hall_cnt - count_in_cpr_;
 4514              		.loc 9 629 38
 4515 0074 FA68     		ldr	r2, [r7, #12]
 4516              		.loc 9 629 40
 4517 0076 7B68     		ldr	r3, [r7, #4]
 4518 0078 5B69     		ldr	r3, [r3, #20]
 4519              		.loc 9 629 27
 4520 007a D31A     		subs	r3, r2, r3
 4521 007c FB65     		str	r3, [r7, #92]
 630:Src/encoder.cpp ****                 delta_enc = mod(delta_enc, 6);
 4522              		.loc 9 630 32
ARM GAS  /tmp/ccqv0h9S.s 			page 139


 4523 007e 0621     		movs	r1, #6
 4524 0080 F86D     		ldr	r0, [r7, #92]
 4525 0082 FFF7FEFF 		bl	mod
 4526 0086 F865     		str	r0, [r7, #92]
 631:Src/encoder.cpp ****                 if (delta_enc > 3)
 4527              		.loc 9 631 17
 4528 0088 FB6D     		ldr	r3, [r7, #92]
 4529 008a 032B     		cmp	r3, #3
 4530 008c 40F36A81 		ble	.L203
 632:Src/encoder.cpp ****                     delta_enc -= 6;
 4531              		.loc 9 632 31
 4532 0090 FB6D     		ldr	r3, [r7, #92]
 4533 0092 063B     		subs	r3, r3, #6
 4534 0094 FB65     		str	r3, [r7, #92]
 4535              	.LBE36:
 633:Src/encoder.cpp ****             } else {
 634:Src/encoder.cpp ****                 if (!config_.ignore_illegal_hall_state) {
 635:Src/encoder.cpp ****                     set_error(ERROR_ILLEGAL_HALL_STATE);
 636:Src/encoder.cpp ****                     return false;
 637:Src/encoder.cpp ****                 }
 638:Src/encoder.cpp ****             }
 639:Src/encoder.cpp ****         } break;
 4536              		.loc 9 639 11
 4537 0096 65E1     		b	.L203
 4538              	.L173:
 4539              	.LBB37:
 634:Src/encoder.cpp ****                     set_error(ERROR_ILLEGAL_HALL_STATE);
 4540              		.loc 9 634 22
 4541 0098 7B68     		ldr	r3, [r7, #4]
 4542 009a 5B68     		ldr	r3, [r3, #4]
 634:Src/encoder.cpp ****                     set_error(ERROR_ILLEGAL_HALL_STATE);
 4543              		.loc 9 634 30
 4544 009c 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 634:Src/encoder.cpp ****                     set_error(ERROR_ILLEGAL_HALL_STATE);
 4545              		.loc 9 634 21
 4546 00a0 83F00103 		eor	r3, r3, #1
 4547 00a4 DBB2     		uxtb	r3, r3
 634:Src/encoder.cpp ****                     set_error(ERROR_ILLEGAL_HALL_STATE);
 4548              		.loc 9 634 17
 4549 00a6 002B     		cmp	r3, #0
 4550 00a8 00F05C81 		beq	.L203
 635:Src/encoder.cpp ****                     return false;
 4551              		.loc 9 635 30
 4552 00ac 1021     		movs	r1, #16
 4553 00ae 7868     		ldr	r0, [r7, #4]
 4554 00b0 FFF7FEFF 		bl	_ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE
 636:Src/encoder.cpp ****                 }
 4555              		.loc 9 636 28
 4556 00b4 0023     		movs	r3, #0
 4557 00b6 FDE3     		b	.L175
 4558              	.L169:
 4559              	.LBE37:
 4560              	.LBB38:
 640:Src/encoder.cpp **** 
 641:Src/encoder.cpp ****         case MODE_SINCOS: {
 642:Src/encoder.cpp ****             float phase = fast_atan2(sincos_sample_s_, sincos_sample_c_);
 4561              		.loc 9 642 37
ARM GAS  /tmp/ccqv0h9S.s 			page 140


 4562 00b8 7B68     		ldr	r3, [r7, #4]
 4563 00ba D3ED2C7A 		vldr.32	s15, [r3, #176]
 4564 00be 7B68     		ldr	r3, [r7, #4]
 4565 00c0 93ED2D7A 		vldr.32	s14, [r3, #180]
 4566 00c4 F0EE470A 		vmov.f32	s1, s14
 4567 00c8 B0EE670A 		vmov.f32	s0, s15
 4568 00cc FFF7FEFF 		bl	fast_atan2
 4569 00d0 87ED120A 		vstr.32	s0, [r7, #72]
 643:Src/encoder.cpp ****             int fake_count = (int)(1000.0f * phase);
 4570              		.loc 9 643 44
 4571 00d4 D7ED127A 		vldr.32	s15, [r7, #72]
 4572 00d8 9FEDA07A 		vldr.32	s14, .L206
 4573 00dc 67EE877A 		vmul.f32	s15, s15, s14
 4574              		.loc 9 643 17
 4575 00e0 FDEEE77A 		vcvt.s32.f32	s15, s15
 4576 00e4 17EE903A 		vmov	r3, s15	@ int
 4577 00e8 7B64     		str	r3, [r7, #68]
 644:Src/encoder.cpp ****             //CPR = 6283 = 2pi * 1k
 645:Src/encoder.cpp **** 
 646:Src/encoder.cpp ****             delta_enc = fake_count - count_in_cpr_;
 4578              		.loc 9 646 38
 4579 00ea 7B68     		ldr	r3, [r7, #4]
 4580 00ec 5B69     		ldr	r3, [r3, #20]
 4581              		.loc 9 646 23
 4582 00ee 7A6C     		ldr	r2, [r7, #68]
 4583 00f0 D31A     		subs	r3, r2, r3
 4584 00f2 FB65     		str	r3, [r7, #92]
 647:Src/encoder.cpp ****             delta_enc = mod(delta_enc, 6283);
 4585              		.loc 9 647 28
 4586 00f4 41F68B01 		movw	r1, #6283
 4587 00f8 F86D     		ldr	r0, [r7, #92]
 4588 00fa FFF7FEFF 		bl	mod
 4589 00fe F865     		str	r0, [r7, #92]
 648:Src/encoder.cpp ****             if (delta_enc > 6283/2)
 4590              		.loc 9 648 13
 4591 0100 FB6D     		ldr	r3, [r7, #92]
 4592 0102 40F64542 		movw	r2, #3141
 4593 0106 9342     		cmp	r3, r2
 4594 0108 40F32E81 		ble	.L204
 649:Src/encoder.cpp ****                 delta_enc -= 6283;
 4595              		.loc 9 649 27
 4596 010c FB6D     		ldr	r3, [r7, #92]
 4597 010e A3F5C453 		sub	r3, r3, #6272
 4598 0112 0B3B     		subs	r3, r3, #11
 4599 0114 FB65     		str	r3, [r7, #92]
 4600              	.LBE38:
 650:Src/encoder.cpp ****         } break;
 4601              		.loc 9 650 11
 4602 0116 27E1     		b	.L204
 4603              	.L168:
 4604              	.LBB39:
 651:Src/encoder.cpp ****         
 652:Src/encoder.cpp ****         case MODE_SPI_ABS_RLS:
 653:Src/encoder.cpp ****         case MODE_SPI_ABS_AMS:
 654:Src/encoder.cpp ****         case MODE_SPI_ABS_CUI: 
 655:Src/encoder.cpp ****         case MODE_SPI_ABS_AEAT: {
 656:Src/encoder.cpp **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 141


 657:Src/encoder.cpp ****             uint32_t rawVal = *(uint32_t *)&abs_spi_dma_rx_[0];
 4605              		.loc 9 657 44
 4606 0118 7B68     		ldr	r3, [r7, #4]
 4607 011a BC33     		adds	r3, r3, #188
 4608              		.loc 9 657 22
 4609 011c 1B68     		ldr	r3, [r3]
 4610 011e FB64     		str	r3, [r7, #76]
 658:Src/encoder.cpp ****             pos_abs_  = ((rawVal & 0x0000ff00)) | ( (rawVal & 0x00ff0000)>>16 ) ;
 4611              		.loc 9 658 34
 4612 0120 FB6C     		ldr	r3, [r7, #76]
 4613 0122 03F47F42 		and	r2, r3, #65280
 4614              		.loc 9 658 74
 4615 0126 FB6C     		ldr	r3, [r7, #76]
 4616 0128 1B0C     		lsrs	r3, r3, #16
 4617 012a DBB2     		uxtb	r3, r3
 4618              		.loc 9 658 49
 4619 012c 1343     		orrs	r3, r3, r2
 4620 012e 1A46     		mov	r2, r3
 4621              		.loc 9 658 23
 4622 0130 7B68     		ldr	r3, [r7, #4]
 4623 0132 5A66     		str	r2, [r3, #100]
 659:Src/encoder.cpp ****             pos_abs_ = config_.cpr - pos_abs_; //取反
 4624              		.loc 9 659 24
 4625 0134 7B68     		ldr	r3, [r7, #4]
 4626 0136 5B68     		ldr	r3, [r3, #4]
 4627              		.loc 9 659 32
 4628 0138 9A68     		ldr	r2, [r3, #8]
 4629              		.loc 9 659 38
 4630 013a 7B68     		ldr	r3, [r7, #4]
 4631 013c 5B6E     		ldr	r3, [r3, #100]
 4632              		.loc 9 659 36
 4633 013e D21A     		subs	r2, r2, r3
 4634              		.loc 9 659 22
 4635 0140 7B68     		ldr	r3, [r7, #4]
 4636 0142 5A66     		str	r2, [r3, #100]
 660:Src/encoder.cpp **** 
 661:Src/encoder.cpp ****             bool encoder_error_detected = false;
 4637              		.loc 9 661 18
 4638 0144 0023     		movs	r3, #0
 4639 0146 87F85730 		strb	r3, [r7, #87]
 662:Src/encoder.cpp ****             
 663:Src/encoder.cpp ****             if (abs_spi_pos_updated_ == false) {
 4640              		.loc 9 663 17
 4641 014a 7B68     		ldr	r3, [r7, #4]
 4642 014c 93F8D330 		ldrb	r3, [r3, #211]	@ zero_extendqisi2
 4643              		.loc 9 663 13
 4644 0150 002B     		cmp	r3, #0
 4645 0152 12D0     		beq	.L177
 664:Src/encoder.cpp ****                     //todo                    
 665:Src/encoder.cpp ****             } else {
 666:Src/encoder.cpp ****                // bool dma_flag = __HAL_DMA_GET_FLAG(hw_config_.motor_spi->hdmatx, DMA_FLAG_TCIF1_5
 667:Src/encoder.cpp ****                 if( (abs_spi_dma_rx_[0] != 0xA6)  ) 
 4646              		.loc 9 667 39
 4647 0154 7B68     		ldr	r3, [r7, #4]
 4648 0156 93F8BC30 		ldrb	r3, [r3, #188]	@ zero_extendqisi2
 4649              		.loc 9 667 17
 4650 015a A62B     		cmp	r3, #166
ARM GAS  /tmp/ccqv0h9S.s 			page 142


 4651 015c 09D0     		beq	.L178
 668:Src/encoder.cpp ****                 {
 669:Src/encoder.cpp ****                     encoder_error_detected = true;
 4652              		.loc 9 669 44
 4653 015e 0123     		movs	r3, #1
 4654 0160 87F85730 		strb	r3, [r7, #87]
 670:Src/encoder.cpp ****                    raw_data1_++;
 4655              		.loc 9 670 20
 4656 0164 7B68     		ldr	r3, [r7, #4]
 4657 0166 D3F8F030 		ldr	r3, [r3, #240]
 4658              		.loc 9 670 30
 4659 016a 5A1C     		adds	r2, r3, #1
 4660 016c 7B68     		ldr	r3, [r7, #4]
 4661 016e C3F8F020 		str	r2, [r3, #240]
 4662              	.L178:
 671:Src/encoder.cpp ****                 }
 672:Src/encoder.cpp ****                 abs_spi_dma_rx_[0] = 0;
 4663              		.loc 9 672 36
 4664 0172 7B68     		ldr	r3, [r7, #4]
 4665 0174 0022     		movs	r2, #0
 4666 0176 83F8BC20 		strb	r2, [r3, #188]
 4667              	.L177:
 673:Src/encoder.cpp ****             }
 674:Src/encoder.cpp ****             
 675:Src/encoder.cpp ****             if(encoder_error_detected)
 4668              		.loc 9 675 13
 4669 017a 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 4670 017e 002B     		cmp	r3, #0
 4671 0180 08D0     		beq	.L179
 676:Src/encoder.cpp ****             {
 677:Src/encoder.cpp ****                 axis_->axis_state_.erro = Axis::ENCOS_ERRO::ENCOS_ERROR_ABS_SPI_COM_FAIL;
 4672              		.loc 9 677 17
 4673 0182 7B68     		ldr	r3, [r7, #4]
 4674 0184 9B68     		ldr	r3, [r3, #8]
 4675              		.loc 9 677 41
 4676 0186 0422     		movs	r2, #4
 4677 0188 83F89621 		strb	r2, [r3, #406]
 678:Src/encoder.cpp ****                 set_error(ERROR_ABS_SPI_COM_FAIL);
 4678              		.loc 9 678 26
 4679 018c 8021     		movs	r1, #128
 4680 018e 7868     		ldr	r0, [r7, #4]
 4681 0190 FFF7FEFF 		bl	_ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE
 4682              	.L179:
 679:Src/encoder.cpp ****             }
 680:Src/encoder.cpp **** 
 681:Src/encoder.cpp ****             pos_abs_latched = pos_abs_;
 4683              		.loc 9 681 29
 4684 0194 7B68     		ldr	r3, [r7, #4]
 4685 0196 5B6E     		ldr	r3, [r3, #100]
 4686 0198 BB65     		str	r3, [r7, #88]
 682:Src/encoder.cpp ****             abs_spi_pos_updated_ = false;
 4687              		.loc 9 682 34
 4688 019a 7B68     		ldr	r3, [r7, #4]
 4689 019c 0022     		movs	r2, #0
 4690 019e 83F8D320 		strb	r2, [r3, #211]
 683:Src/encoder.cpp ****             delta_enc = pos_abs_latched - count_in_cpr_; //LATCH
 4691              		.loc 9 683 43
ARM GAS  /tmp/ccqv0h9S.s 			page 143


 4692 01a2 7B68     		ldr	r3, [r7, #4]
 4693 01a4 5B69     		ldr	r3, [r3, #20]
 4694              		.loc 9 683 23
 4695 01a6 BA6D     		ldr	r2, [r7, #88]
 4696 01a8 D31A     		subs	r3, r2, r3
 4697 01aa FB65     		str	r3, [r7, #92]
 684:Src/encoder.cpp ****             delta_enc = mod(delta_enc, config_.cpr);
 4698              		.loc 9 684 40
 4699 01ac 7B68     		ldr	r3, [r7, #4]
 4700 01ae 5B68     		ldr	r3, [r3, #4]
 4701              		.loc 9 684 48
 4702 01b0 9B68     		ldr	r3, [r3, #8]
 4703              		.loc 9 684 28
 4704 01b2 1946     		mov	r1, r3
 4705 01b4 F86D     		ldr	r0, [r7, #92]
 4706 01b6 FFF7FEFF 		bl	mod
 4707 01ba F865     		str	r0, [r7, #92]
 685:Src/encoder.cpp ****             if (delta_enc > config_.cpr/2) {
 4708              		.loc 9 685 29
 4709 01bc 7B68     		ldr	r3, [r7, #4]
 4710 01be 5B68     		ldr	r3, [r3, #4]
 4711              		.loc 9 685 37
 4712 01c0 9B68     		ldr	r3, [r3, #8]
 4713              		.loc 9 685 40
 4714 01c2 DA0F     		lsrs	r2, r3, #31
 4715 01c4 1344     		add	r3, r3, r2
 4716 01c6 5B10     		asrs	r3, r3, #1
 4717 01c8 1A46     		mov	r2, r3
 4718              		.loc 9 685 13
 4719 01ca FB6D     		ldr	r3, [r7, #92]
 4720 01cc 9342     		cmp	r3, r2
 4721 01ce 05DD     		ble	.L180
 686:Src/encoder.cpp ****                 delta_enc -= config_.cpr;
 4722              		.loc 9 686 30
 4723 01d0 7B68     		ldr	r3, [r7, #4]
 4724 01d2 5B68     		ldr	r3, [r3, #4]
 4725              		.loc 9 686 38
 4726 01d4 9B68     		ldr	r3, [r3, #8]
 4727              		.loc 9 686 27
 4728 01d6 FA6D     		ldr	r2, [r7, #92]
 4729 01d8 D31A     		subs	r3, r2, r3
 4730 01da FB65     		str	r3, [r7, #92]
 4731              	.L180:
 687:Src/encoder.cpp ****             }
 688:Src/encoder.cpp **** 
 689:Src/encoder.cpp ****             rawVal = *(uint32_t *)&GearboxOutputEncoder_spi_dma_rx_[0];
 4732              		.loc 9 689 35
 4733 01dc 7B68     		ldr	r3, [r7, #4]
 4734 01de C433     		adds	r3, r3, #196
 4735              		.loc 9 689 20
 4736 01e0 1B68     		ldr	r3, [r3]
 4737 01e2 FB64     		str	r3, [r7, #76]
 690:Src/encoder.cpp ****             sencond_pos_abs_ =  ((rawVal & 0x0000ff00)<<8) | ( (rawVal & 0x00ff0000)>>8 )| ( (rawVa
 4738              		.loc 9 690 55
 4739 01e4 FB6C     		ldr	r3, [r7, #76]
 4740 01e6 1B02     		lsls	r3, r3, #8
 4741 01e8 03F47F02 		and	r2, r3, #16711680
ARM GAS  /tmp/ccqv0h9S.s 			page 144


 4742              		.loc 9 690 85
 4743 01ec FB6C     		ldr	r3, [r7, #76]
 4744 01ee 1B0A     		lsrs	r3, r3, #8
 4745 01f0 03F47F43 		and	r3, r3, #65280
 4746              		.loc 9 690 60
 4747 01f4 1A43     		orrs	r2, r2, r3
 4748              		.loc 9 690 115
 4749 01f6 FB6C     		ldr	r3, [r7, #76]
 4750 01f8 1B0E     		lsrs	r3, r3, #24
 4751              		.loc 9 690 90
 4752 01fa 1343     		orrs	r3, r3, r2
 4753 01fc 1A46     		mov	r2, r3
 4754              		.loc 9 690 30
 4755 01fe 7B68     		ldr	r3, [r7, #4]
 4756 0200 9A66     		str	r2, [r3, #104]
 691:Src/encoder.cpp ****             sencond_pos_abs_ >>= 6;
 4757              		.loc 9 691 30
 4758 0202 7B68     		ldr	r3, [r7, #4]
 4759 0204 9B6E     		ldr	r3, [r3, #104]
 4760 0206 9A11     		asrs	r2, r3, #6
 4761 0208 7B68     		ldr	r3, [r7, #4]
 4762 020a 9A66     		str	r2, [r3, #104]
 692:Src/encoder.cpp ****             sencond_pos_abs_ = config_.GearboxOutputEncoder_cpr - sencond_pos_abs_; //取反
 4763              		.loc 9 692 32
 4764 020c 7B68     		ldr	r3, [r7, #4]
 4765 020e 5B68     		ldr	r3, [r3, #4]
 4766              		.loc 9 692 40
 4767 0210 5A6B     		ldr	r2, [r3, #52]
 4768              		.loc 9 692 67
 4769 0212 7B68     		ldr	r3, [r7, #4]
 4770 0214 9B6E     		ldr	r3, [r3, #104]
 4771              		.loc 9 692 65
 4772 0216 D21A     		subs	r2, r2, r3
 4773              		.loc 9 692 30
 4774 0218 7B68     		ldr	r3, [r7, #4]
 4775 021a 9A66     		str	r2, [r3, #104]
 693:Src/encoder.cpp ****             
 694:Src/encoder.cpp ****             gear_single_turn_abs_ = sencond_pos_abs_;
 4776              		.loc 9 694 37
 4777 021c 7B68     		ldr	r3, [r7, #4]
 4778 021e 9A6E     		ldr	r2, [r3, #104]
 4779              		.loc 9 694 35
 4780 0220 7B68     		ldr	r3, [r7, #4]
 4781 0222 5A62     		str	r2, [r3, #36]
 695:Src/encoder.cpp **** 
 696:Src/encoder.cpp ****             gear_single_turn_abs_by_user_ = gear_single_turn_abs_ - config_.Gearoffset;
 4782              		.loc 9 696 45
 4783 0224 7B68     		ldr	r3, [r7, #4]
 4784 0226 5A6A     		ldr	r2, [r3, #36]
 4785              		.loc 9 696 69
 4786 0228 7B68     		ldr	r3, [r7, #4]
 4787 022a 5B68     		ldr	r3, [r3, #4]
 4788              		.loc 9 696 77
 4789 022c 9B6B     		ldr	r3, [r3, #56]
 4790              		.loc 9 696 67
 4791 022e D21A     		subs	r2, r2, r3
 4792              		.loc 9 696 43
ARM GAS  /tmp/ccqv0h9S.s 			page 145


 4793 0230 7B68     		ldr	r3, [r7, #4]
 4794 0232 9A62     		str	r2, [r3, #40]
 4795              	.L182:
 697:Src/encoder.cpp ****             while(gear_single_turn_abs_by_user_ > HALF_CPR) {
 4796              		.loc 9 697 19
 4797 0234 7B68     		ldr	r3, [r7, #4]
 4798 0236 9B6A     		ldr	r3, [r3, #40]
 4799              		.loc 9 697 49
 4800 0238 B3F5003F 		cmp	r3, #131072
 4801 023c 06DD     		ble	.L181
 698:Src/encoder.cpp ****                 gear_single_turn_abs_by_user_ -= 2 * HALF_CPR;
 4802              		.loc 9 698 47
 4803 023e 7B68     		ldr	r3, [r7, #4]
 4804 0240 9B6A     		ldr	r3, [r3, #40]
 4805 0242 A3F58022 		sub	r2, r3, #262144
 4806 0246 7B68     		ldr	r3, [r7, #4]
 4807 0248 9A62     		str	r2, [r3, #40]
 697:Src/encoder.cpp ****             while(gear_single_turn_abs_by_user_ > HALF_CPR) {
 4808              		.loc 9 697 13
 4809 024a F3E7     		b	.L182
 4810              	.L181:
 699:Src/encoder.cpp ****             }
 700:Src/encoder.cpp ****             while(gear_single_turn_abs_by_user_ < -HALF_CPR) {
 4811              		.loc 9 700 19
 4812 024c 7B68     		ldr	r3, [r7, #4]
 4813 024e 9B6A     		ldr	r3, [r3, #40]
 4814              		.loc 9 700 49
 4815 0250 13F5003F 		cmn	r3, #131072
 4816 0254 06DA     		bge	.L183
 701:Src/encoder.cpp ****                 gear_single_turn_abs_by_user_ += 2 * HALF_CPR;
 4817              		.loc 9 701 47
 4818 0256 7B68     		ldr	r3, [r7, #4]
 4819 0258 9B6A     		ldr	r3, [r3, #40]
 4820 025a 03F58022 		add	r2, r3, #262144
 4821 025e 7B68     		ldr	r3, [r7, #4]
 4822 0260 9A62     		str	r2, [r3, #40]
 700:Src/encoder.cpp ****                 gear_single_turn_abs_by_user_ += 2 * HALF_CPR;
 4823              		.loc 9 700 13
 4824 0262 F3E7     		b	.L181
 4825              	.L183:
 702:Src/encoder.cpp ****             }
 703:Src/encoder.cpp **** 
 704:Src/encoder.cpp ****             if(first_init_ == true)
 4826              		.loc 9 704 16
 4827 0264 7B68     		ldr	r3, [r7, #4]
 4828 0266 93F8D430 		ldrb	r3, [r3, #212]	@ zero_extendqisi2
 4829              		.loc 9 704 13
 4830 026a 012B     		cmp	r3, #1
 4831 026c 07D1     		bne	.L184
 705:Src/encoder.cpp ****             {
 706:Src/encoder.cpp ****                 GearboxOutputEncoder_count_in_cpr_ = gear_single_turn_abs_by_user_;
 4832              		.loc 9 706 54
 4833 026e 7B68     		ldr	r3, [r7, #4]
 4834 0270 9A6A     		ldr	r2, [r3, #40]
 4835              		.loc 9 706 52
 4836 0272 7B68     		ldr	r3, [r7, #4]
 4837 0274 9A61     		str	r2, [r3, #24]
ARM GAS  /tmp/ccqv0h9S.s 			page 146


 707:Src/encoder.cpp ****                 first_init_ = false;
 4838              		.loc 9 707 29
 4839 0276 7B68     		ldr	r3, [r7, #4]
 4840 0278 0022     		movs	r2, #0
 4841 027a 83F8D420 		strb	r2, [r3, #212]
 4842              	.L184:
 708:Src/encoder.cpp ****             }
 709:Src/encoder.cpp **** 
 710:Src/encoder.cpp ****             gear_delta_enc =  gear_single_turn_abs_by_user_ - GearboxOutputEncoder_count_in_cpr_; /
 4843              		.loc 9 710 31
 4844 027e 7B68     		ldr	r3, [r7, #4]
 4845 0280 9A6A     		ldr	r2, [r3, #40]
 4846              		.loc 9 710 63
 4847 0282 7B68     		ldr	r3, [r7, #4]
 4848 0284 9B69     		ldr	r3, [r3, #24]
 4849              		.loc 9 710 28
 4850 0286 D31A     		subs	r3, r2, r3
 4851 0288 3B65     		str	r3, [r7, #80]
 711:Src/encoder.cpp ****             GearboxOutputEncoder_count_in_cpr_ = gear_single_turn_abs_by_user_;
 4852              		.loc 9 711 50
 4853 028a 7B68     		ldr	r3, [r7, #4]
 4854 028c 9A6A     		ldr	r2, [r3, #40]
 4855              		.loc 9 711 48
 4856 028e 7B68     		ldr	r3, [r7, #4]
 4857 0290 9A61     		str	r2, [r3, #24]
 712:Src/encoder.cpp ****             if (gear_delta_enc > HALF_CPR) {
 4858              		.loc 9 712 13
 4859 0292 3B6D     		ldr	r3, [r7, #80]
 4860 0294 B3F5003F 		cmp	r3, #131072
 4861 0298 05DD     		ble	.L185
 713:Src/encoder.cpp ****                 GearboxOutputEncoder_turns_ -=  1;
 4862              		.loc 9 713 45
 4863 029a 7B68     		ldr	r3, [r7, #4]
 4864 029c DB69     		ldr	r3, [r3, #28]
 4865 029e 5A1E     		subs	r2, r3, #1
 4866 02a0 7B68     		ldr	r3, [r7, #4]
 4867 02a2 DA61     		str	r2, [r3, #28]
 4868 02a4 08E0     		b	.L186
 4869              	.L185:
 714:Src/encoder.cpp ****             }
 715:Src/encoder.cpp ****             else if (gear_delta_enc < -HALF_CPR) {
 4870              		.loc 9 715 18
 4871 02a6 3B6D     		ldr	r3, [r7, #80]
 4872 02a8 13F5003F 		cmn	r3, #131072
 4873 02ac 04DA     		bge	.L186
 716:Src/encoder.cpp ****                 GearboxOutputEncoder_turns_ +=  1;
 4874              		.loc 9 716 45
 4875 02ae 7B68     		ldr	r3, [r7, #4]
 4876 02b0 DB69     		ldr	r3, [r3, #28]
 4877 02b2 5A1C     		adds	r2, r3, #1
 4878 02b4 7B68     		ldr	r3, [r7, #4]
 4879 02b6 DA61     		str	r2, [r3, #28]
 4880              	.L186:
 717:Src/encoder.cpp ****             }
 718:Src/encoder.cpp ****             else
 719:Src/encoder.cpp ****             {}
 720:Src/encoder.cpp **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 147


 721:Src/encoder.cpp ****                           
 722:Src/encoder.cpp ****             if( (GearboxOutputEncoder_turns_ > 1) || (GearboxOutputEncoder_turns_ < -1) )
 4881              		.loc 9 722 18
 4882 02b8 7B68     		ldr	r3, [r7, #4]
 4883 02ba DB69     		ldr	r3, [r3, #28]
 4884              		.loc 9 722 13
 4885 02bc 012B     		cmp	r3, #1
 4886 02be 04DC     		bgt	.L187
 4887              		.loc 9 722 55 discriminator 1
 4888 02c0 7B68     		ldr	r3, [r7, #4]
 4889 02c2 DB69     		ldr	r3, [r3, #28]
 4890              		.loc 9 722 51 discriminator 1
 4891 02c4 B3F1FF3F 		cmp	r3, #-1
 4892 02c8 02DA     		bge	.L188
 4893              	.L187:
 723:Src/encoder.cpp ****             {
 724:Src/encoder.cpp ****                 GearboxOutputEncoder_turns_ = 0;
 4894              		.loc 9 724 45
 4895 02ca 7B68     		ldr	r3, [r7, #4]
 4896 02cc 0022     		movs	r2, #0
 4897 02ce DA61     		str	r2, [r3, #28]
 4898              	.L188:
 725:Src/encoder.cpp ****             }
 726:Src/encoder.cpp **** 
 727:Src/encoder.cpp ****             GearboxOutputEncoder_counts = GearboxOutputEncoder_turns_*2*HALF_CPR+ gear_single_turn_
 4899              		.loc 9 727 43
 4900 02d0 7B68     		ldr	r3, [r7, #4]
 4901 02d2 DB69     		ldr	r3, [r3, #28]
 4902              		.loc 9 727 72
 4903 02d4 9A04     		lsls	r2, r3, #18
 4904              		.loc 9 727 83
 4905 02d6 7B68     		ldr	r3, [r7, #4]
 4906 02d8 9B6A     		ldr	r3, [r3, #40]
 4907              		.loc 9 727 81
 4908 02da 1344     		add	r3, r3, r2
 4909              		.loc 9 727 41
 4910 02dc 07EE903A 		vmov	s15, r3	@ int
 4911 02e0 F8EEE77A 		vcvt.f32.s32	s15, s15
 4912 02e4 7B68     		ldr	r3, [r7, #4]
 4913 02e6 C3ED087A 		vstr.32	s15, [r3, #32]
 728:Src/encoder.cpp ****             gearboxpos_ = GearboxOutputEncoder_counts * GearboxOutputEncoder_cpr_inverse_;
 4914              		.loc 9 728 27
 4915 02ea 7B68     		ldr	r3, [r7, #4]
 4916 02ec 93ED087A 		vldr.32	s14, [r3, #32]
 4917              		.loc 9 728 57
 4918 02f0 7B68     		ldr	r3, [r7, #4]
 4919 02f2 D3ED277A 		vldr.32	s15, [r3, #156]
 4920              		.loc 9 728 55
 4921 02f6 67EE277A 		vmul.f32	s15, s14, s15
 4922              		.loc 9 728 25
 4923 02fa 7B68     		ldr	r3, [r7, #4]
 4924 02fc C3ED237A 		vstr.32	s15, [r3, #140]
 729:Src/encoder.cpp ****             gearboxpos_q15_ = (int32_t)(gearboxpos_ * 32768.f);
 4925              		.loc 9 729 41
 4926 0300 7B68     		ldr	r3, [r7, #4]
 4927 0302 D3ED237A 		vldr.32	s15, [r3, #140]
 4928              		.loc 9 729 53
ARM GAS  /tmp/ccqv0h9S.s 			page 148


 4929 0306 9FED167A 		vldr.32	s14, .L206+4
 4930 030a 67EE877A 		vmul.f32	s15, s15, s14
 4931              		.loc 9 729 31
 4932 030e FDEEE77A 		vcvt.s32.f32	s15, s15
 4933 0312 17EE902A 		vmov	r2, s15	@ int
 4934              		.loc 9 729 29
 4935 0316 7B68     		ldr	r3, [r7, #4]
 4936 0318 C3F89020 		str	r2, [r3, #144]
 4937              	.LBE39:
 730:Src/encoder.cpp ****             
 731:Src/encoder.cpp **** 
 732:Src/encoder.cpp ****         }break;
 4938              		.loc 9 732 10
 4939 031c 27E0     		b	.L172
 4940              	.L167:
 733:Src/encoder.cpp ****         default: {
 734:Src/encoder.cpp ****             delta_enc = pos_abs_latched - count_in_cpr_; //LATCH
 4941              		.loc 9 734 43
 4942 031e 7B68     		ldr	r3, [r7, #4]
 4943 0320 5B69     		ldr	r3, [r3, #20]
 4944              		.loc 9 734 23
 4945 0322 BA6D     		ldr	r2, [r7, #88]
 4946 0324 D31A     		subs	r3, r2, r3
 4947 0326 FB65     		str	r3, [r7, #92]
 735:Src/encoder.cpp ****             delta_enc = mod(delta_enc, config_.cpr);
 4948              		.loc 9 735 40
 4949 0328 7B68     		ldr	r3, [r7, #4]
 4950 032a 5B68     		ldr	r3, [r3, #4]
 4951              		.loc 9 735 48
 4952 032c 9B68     		ldr	r3, [r3, #8]
 4953              		.loc 9 735 28
 4954 032e 1946     		mov	r1, r3
 4955 0330 F86D     		ldr	r0, [r7, #92]
 4956 0332 FFF7FEFF 		bl	mod
 4957 0336 F865     		str	r0, [r7, #92]
 736:Src/encoder.cpp ****             if (delta_enc > config_.cpr/2) {
 4958              		.loc 9 736 29
 4959 0338 7B68     		ldr	r3, [r7, #4]
 4960 033a 5B68     		ldr	r3, [r3, #4]
 4961              		.loc 9 736 37
 4962 033c 9B68     		ldr	r3, [r3, #8]
 4963              		.loc 9 736 40
 4964 033e DA0F     		lsrs	r2, r3, #31
 4965 0340 1344     		add	r3, r3, r2
 4966 0342 5B10     		asrs	r3, r3, #1
 4967 0344 1A46     		mov	r2, r3
 4968              		.loc 9 736 13
 4969 0346 FB6D     		ldr	r3, [r7, #92]
 4970 0348 9342     		cmp	r3, r2
 4971 034a 0FDD     		ble	.L205
 737:Src/encoder.cpp ****                 delta_enc -= config_.cpr;
 4972              		.loc 9 737 30
 4973 034c 7B68     		ldr	r3, [r7, #4]
 4974 034e 5B68     		ldr	r3, [r3, #4]
 4975              		.loc 9 737 38
 4976 0350 9B68     		ldr	r3, [r3, #8]
 4977              		.loc 9 737 27
ARM GAS  /tmp/ccqv0h9S.s 			page 149


 4978 0352 FA6D     		ldr	r2, [r7, #92]
 4979 0354 D31A     		subs	r3, r2, r3
 4980 0356 FB65     		str	r3, [r7, #92]
 738:Src/encoder.cpp ****             }
 739:Src/encoder.cpp ****            //set_error(ERROR_UNSUPPORTED_ENCODER_MODE);
 740:Src/encoder.cpp ****            //return false;
 741:Src/encoder.cpp ****         } break;
 4981              		.loc 9 741 11
 4982 0358 08E0     		b	.L205
 4983              	.L207:
 4984 035a 00BF     		.align	2
 4985              	.L206:
 4986 035c 00007A44 		.word	1148846080
 4987 0360 00000047 		.word	1191182336
 4988              	.L203:
 639:Src/encoder.cpp **** 
 4989              		.loc 9 639 11
 4990 0364 00BF     		nop
 4991 0366 02E0     		b	.L172
 4992              	.L204:
 650:Src/encoder.cpp ****         
 4993              		.loc 9 650 11
 4994 0368 00BF     		nop
 4995 036a 00E0     		b	.L172
 4996              	.L205:
 4997              		.loc 9 741 11
 4998 036c 00BF     		nop
 4999              	.L172:
 5000              	.LBE34:
 5001              	.LBE33:
 742:Src/encoder.cpp ****     }
 743:Src/encoder.cpp **** 
 744:Src/encoder.cpp ****     shadow_count_ += delta_enc;
 5002              		.loc 9 744 19
 5003 036e 7B68     		ldr	r3, [r7, #4]
 5004 0370 1A69     		ldr	r2, [r3, #16]
 5005 0372 FB6D     		ldr	r3, [r7, #92]
 5006 0374 1A44     		add	r2, r2, r3
 5007 0376 7B68     		ldr	r3, [r7, #4]
 5008 0378 1A61     		str	r2, [r3, #16]
 745:Src/encoder.cpp ****     count_in_cpr_ += delta_enc;
 5009              		.loc 9 745 19
 5010 037a 7B68     		ldr	r3, [r7, #4]
 5011 037c 5A69     		ldr	r2, [r3, #20]
 5012 037e FB6D     		ldr	r3, [r7, #92]
 5013 0380 1A44     		add	r2, r2, r3
 5014 0382 7B68     		ldr	r3, [r7, #4]
 5015 0384 5A61     		str	r2, [r3, #20]
 746:Src/encoder.cpp ****     count_in_cpr_ = mod(count_in_cpr_, config_.cpr);
 5016              		.loc 9 746 25
 5017 0386 7B68     		ldr	r3, [r7, #4]
 5018 0388 5A69     		ldr	r2, [r3, #20]
 5019              		.loc 9 746 40
 5020 038a 7B68     		ldr	r3, [r7, #4]
 5021 038c 5B68     		ldr	r3, [r3, #4]
 5022              		.loc 9 746 48
 5023 038e 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/ccqv0h9S.s 			page 150


 5024              		.loc 9 746 24
 5025 0390 1946     		mov	r1, r3
 5026 0392 1046     		mov	r0, r2
 5027 0394 FFF7FEFF 		bl	mod
 5028 0398 0246     		mov	r2, r0
 5029              		.loc 9 746 19
 5030 039a 7B68     		ldr	r3, [r7, #4]
 5031 039c 5A61     		str	r2, [r3, #20]
 747:Src/encoder.cpp **** 
 748:Src/encoder.cpp ****     if( (mode_ & MODE_FLAG_ABS) | (mode_ & MODE_FLAG_485_ABS) )
 5032              		.loc 9 748 10
 5033 039e 7B68     		ldr	r3, [r7, #4]
 5034 03a0 B3F8D630 		ldrh	r3, [r3, #214]
 5035              		.loc 9 748 33
 5036 03a4 03F44073 		and	r3, r3, #768
 5037              		.loc 9 748 5
 5038 03a8 002B     		cmp	r3, #0
 5039 03aa 02D0     		beq	.L190
 749:Src/encoder.cpp ****     {
 750:Src/encoder.cpp ****         count_in_cpr_ = pos_abs_latched;
 5040              		.loc 9 750 23
 5041 03ac 7B68     		ldr	r3, [r7, #4]
 5042 03ae BA6D     		ldr	r2, [r7, #88]
 5043 03b0 5A61     		str	r2, [r3, #20]
 5044              	.L190:
 751:Src/encoder.cpp ****         
 752:Src/encoder.cpp **** 
 753:Src/encoder.cpp ****     }
 754:Src/encoder.cpp ****         
 755:Src/encoder.cpp **** 
 756:Src/encoder.cpp ****     //// run pll (for now pll is in units of encoder counts)
 757:Src/encoder.cpp ****     // Predict current pos
 758:Src/encoder.cpp ****     pos_estimate_counts_ += current_meas_period * vel_estimate_counts_;
 5045              		.loc 9 758 26
 5046 03b2 7B68     		ldr	r3, [r7, #4]
 5047 03b4 93ED117A 		vldr.32	s14, [r3, #68]
 5048              		.loc 9 758 51
 5049 03b8 7B68     		ldr	r3, [r7, #4]
 5050 03ba D3ED136A 		vldr.32	s13, [r3, #76]
 5051              		.loc 9 758 49
 5052 03be D14B     		ldr	r3, .L208
 5053 03c0 D3ED007A 		vldr.32	s15, [r3]
 5054 03c4 66EEA77A 		vmul.f32	s15, s13, s15
 5055              		.loc 9 758 26
 5056 03c8 77EE277A 		vadd.f32	s15, s14, s15
 5057 03cc 7B68     		ldr	r3, [r7, #4]
 5058 03ce C3ED117A 		vstr.32	s15, [r3, #68]
 759:Src/encoder.cpp ****     pos_cpr_counts_      += current_meas_period * vel_estimate_counts_;
 5059              		.loc 9 759 26
 5060 03d2 7B68     		ldr	r3, [r7, #4]
 5061 03d4 93ED127A 		vldr.32	s14, [r3, #72]
 5062              		.loc 9 759 51
 5063 03d8 7B68     		ldr	r3, [r7, #4]
 5064 03da D3ED136A 		vldr.32	s13, [r3, #76]
 5065              		.loc 9 759 49
 5066 03de C94B     		ldr	r3, .L208
 5067 03e0 D3ED007A 		vldr.32	s15, [r3]
ARM GAS  /tmp/ccqv0h9S.s 			page 151


 5068 03e4 66EEA77A 		vmul.f32	s15, s13, s15
 5069              		.loc 9 759 26
 5070 03e8 77EE277A 		vadd.f32	s15, s14, s15
 5071 03ec 7B68     		ldr	r3, [r7, #4]
 5072 03ee C3ED127A 		vstr.32	s15, [r3, #72]
 760:Src/encoder.cpp ****     gear_pos_cpr_counts_      += current_meas_period * gear_vel_estimate_counts_;
 5073              		.loc 9 760 31
 5074 03f2 7B68     		ldr	r3, [r7, #4]
 5075 03f4 93ED287A 		vldr.32	s14, [r3, #160]
 5076              		.loc 9 760 56
 5077 03f8 7B68     		ldr	r3, [r7, #4]
 5078 03fa D3ED296A 		vldr.32	s13, [r3, #164]
 5079              		.loc 9 760 54
 5080 03fe C14B     		ldr	r3, .L208
 5081 0400 D3ED007A 		vldr.32	s15, [r3]
 5082 0404 66EEA77A 		vmul.f32	s15, s13, s15
 5083              		.loc 9 760 31
 5084 0408 77EE277A 		vadd.f32	s15, s14, s15
 5085 040c 7B68     		ldr	r3, [r7, #4]
 5086 040e C3ED287A 		vstr.32	s15, [r3, #160]
 761:Src/encoder.cpp **** 
 762:Src/encoder.cpp ****     // discrete phase detector
 763:Src/encoder.cpp ****     float delta_pos_counts = (float)(shadow_count_ - (int32_t)std::floor(pos_estimate_counts_));
 5087              		.loc 9 763 38
 5088 0412 7B68     		ldr	r3, [r7, #4]
 5089 0414 1C69     		ldr	r4, [r3, #16]
 5090              		.loc 9 763 73
 5091 0416 7B68     		ldr	r3, [r7, #4]
 5092 0418 D3ED117A 		vldr.32	s15, [r3, #68]
 5093 041c B0EE670A 		vmov.f32	s0, s15
 5094 0420 FFF7FEFF 		bl	_ZSt5floorf
 5095 0424 F0EE407A 		vmov.f32	s15, s0
 5096              		.loc 9 763 54
 5097 0428 FDEEE77A 		vcvt.s32.f32	s15, s15
 5098 042c 17EE903A 		vmov	r3, s15	@ int
 5099              		.loc 9 763 52
 5100 0430 E31A     		subs	r3, r4, r3
 5101              		.loc 9 763 95
 5102 0432 07EE903A 		vmov	s15, r3	@ int
 5103 0436 F8EEE77A 		vcvt.f32.s32	s15, s15
 5104 043a C7ED0F7A 		vstr.32	s15, [r7, #60]
 764:Src/encoder.cpp ****     float delta_pos_cpr_counts = (float)(count_in_cpr_ - (int32_t)std::floor(pos_cpr_counts_));
 5105              		.loc 9 764 42
 5106 043e 7B68     		ldr	r3, [r7, #4]
 5107 0440 5C69     		ldr	r4, [r3, #20]
 5108              		.loc 9 764 77
 5109 0442 7B68     		ldr	r3, [r7, #4]
 5110 0444 D3ED127A 		vldr.32	s15, [r3, #72]
 5111 0448 B0EE670A 		vmov.f32	s0, s15
 5112 044c FFF7FEFF 		bl	_ZSt5floorf
 5113 0450 F0EE407A 		vmov.f32	s15, s0
 5114              		.loc 9 764 58
 5115 0454 FDEEE77A 		vcvt.s32.f32	s15, s15
 5116 0458 17EE903A 		vmov	r3, s15	@ int
 5117              		.loc 9 764 56
 5118 045c E31A     		subs	r3, r4, r3
 5119              		.loc 9 764 94
ARM GAS  /tmp/ccqv0h9S.s 			page 152


 5120 045e 07EE903A 		vmov	s15, r3	@ int
 5121 0462 F8EEE77A 		vcvt.f32.s32	s15, s15
 5122 0466 C7ED0E7A 		vstr.32	s15, [r7, #56]
 765:Src/encoder.cpp ****     delta_pos_cpr_counts = wrap_pm(delta_pos_cpr_counts, 0.5f * (float)(config_.cpr));
 5123              		.loc 9 765 73
 5124 046a 7B68     		ldr	r3, [r7, #4]
 5125 046c 5B68     		ldr	r3, [r3, #4]
 5126              		.loc 9 765 81
 5127 046e 9B68     		ldr	r3, [r3, #8]
 5128              		.loc 9 765 65
 5129 0470 07EE903A 		vmov	s15, r3	@ int
 5130 0474 F8EEE77A 		vcvt.f32.s32	s15, s15
 5131              		.loc 9 765 35
 5132 0478 B6EE007A 		vmov.f32	s14, #5.0e-1
 5133 047c 67EE877A 		vmul.f32	s15, s15, s14
 5134 0480 F0EE670A 		vmov.f32	s1, s15
 5135 0484 97ED0E0A 		vldr.32	s0, [r7, #56]
 5136 0488 FFF7FEFF 		bl	wrap_pm
 5137 048c 87ED0E0A 		vstr.32	s0, [r7, #56]
 766:Src/encoder.cpp **** 
 767:Src/encoder.cpp ****     float delta_pos_gear_counts = (float)(sencond_pos_abs_ - (int32_t)std::floor(gear_pos_cpr_count
 5138              		.loc 9 767 43
 5139 0490 7B68     		ldr	r3, [r7, #4]
 5140 0492 9C6E     		ldr	r4, [r3, #104]
 5141              		.loc 9 767 81
 5142 0494 7B68     		ldr	r3, [r7, #4]
 5143 0496 D3ED287A 		vldr.32	s15, [r3, #160]
 5144 049a B0EE670A 		vmov.f32	s0, s15
 5145 049e FFF7FEFF 		bl	_ZSt5floorf
 5146 04a2 F0EE407A 		vmov.f32	s15, s0
 5147              		.loc 9 767 62
 5148 04a6 FDEEE77A 		vcvt.s32.f32	s15, s15
 5149 04aa 17EE903A 		vmov	r3, s15	@ int
 5150              		.loc 9 767 60
 5151 04ae E31A     		subs	r3, r4, r3
 5152              		.loc 9 767 103
 5153 04b0 07EE903A 		vmov	s15, r3	@ int
 5154 04b4 F8EEE77A 		vcvt.f32.s32	s15, s15
 5155 04b8 C7ED0D7A 		vstr.32	s15, [r7, #52]
 768:Src/encoder.cpp ****     delta_pos_gear_counts = wrap_pm(delta_pos_gear_counts, 0.5f * (float)(config_.GearboxOutputEnco
 5156              		.loc 9 768 75
 5157 04bc 7B68     		ldr	r3, [r7, #4]
 5158 04be 5B68     		ldr	r3, [r3, #4]
 5159              		.loc 9 768 83
 5160 04c0 5B6B     		ldr	r3, [r3, #52]
 5161              		.loc 9 768 67
 5162 04c2 07EE903A 		vmov	s15, r3	@ int
 5163 04c6 F8EEE77A 		vcvt.f32.s32	s15, s15
 5164              		.loc 9 768 36
 5165 04ca B6EE007A 		vmov.f32	s14, #5.0e-1
 5166 04ce 67EE877A 		vmul.f32	s15, s15, s14
 5167 04d2 F0EE670A 		vmov.f32	s1, s15
 5168 04d6 97ED0D0A 		vldr.32	s0, [r7, #52]
 5169 04da FFF7FEFF 		bl	wrap_pm
 5170 04de 87ED0D0A 		vstr.32	s0, [r7, #52]
 769:Src/encoder.cpp **** 
 770:Src/encoder.cpp ****     // pll feedback
ARM GAS  /tmp/ccqv0h9S.s 			page 153


 771:Src/encoder.cpp ****     pos_estimate_counts_ += current_meas_period * pll_kp_ * delta_pos_counts;
 5171              		.loc 9 771 26
 5172 04e2 7B68     		ldr	r3, [r7, #4]
 5173 04e4 93ED117A 		vldr.32	s14, [r3, #68]
 5174              		.loc 9 771 51
 5175 04e8 7B68     		ldr	r3, [r7, #4]
 5176 04ea D3ED146A 		vldr.32	s13, [r3, #80]
 5177              		.loc 9 771 49
 5178 04ee 854B     		ldr	r3, .L208
 5179 04f0 D3ED007A 		vldr.32	s15, [r3]
 5180 04f4 66EEA76A 		vmul.f32	s13, s13, s15
 5181              		.loc 9 771 59
 5182 04f8 D7ED0F7A 		vldr.32	s15, [r7, #60]
 5183 04fc 66EEA77A 		vmul.f32	s15, s13, s15
 5184              		.loc 9 771 26
 5185 0500 77EE277A 		vadd.f32	s15, s14, s15
 5186 0504 7B68     		ldr	r3, [r7, #4]
 5187 0506 C3ED117A 		vstr.32	s15, [r3, #68]
 772:Src/encoder.cpp ****     pos_cpr_counts_ += current_meas_period * pll_kp_ * delta_pos_cpr_counts;
 5188              		.loc 9 772 21
 5189 050a 7B68     		ldr	r3, [r7, #4]
 5190 050c 93ED127A 		vldr.32	s14, [r3, #72]
 5191              		.loc 9 772 46
 5192 0510 7B68     		ldr	r3, [r7, #4]
 5193 0512 D3ED146A 		vldr.32	s13, [r3, #80]
 5194              		.loc 9 772 44
 5195 0516 7B4B     		ldr	r3, .L208
 5196 0518 D3ED007A 		vldr.32	s15, [r3]
 5197 051c 66EEA76A 		vmul.f32	s13, s13, s15
 5198              		.loc 9 772 54
 5199 0520 D7ED0E7A 		vldr.32	s15, [r7, #56]
 5200 0524 66EEA77A 		vmul.f32	s15, s13, s15
 5201              		.loc 9 772 21
 5202 0528 77EE277A 		vadd.f32	s15, s14, s15
 5203 052c 7B68     		ldr	r3, [r7, #4]
 5204 052e C3ED127A 		vstr.32	s15, [r3, #72]
 773:Src/encoder.cpp ****     pos_cpr_counts_ = fmodf_pos(pos_cpr_counts_, (float)(config_.cpr));
 5205              		.loc 9 773 32
 5206 0532 7B68     		ldr	r3, [r7, #4]
 5207 0534 D3ED127A 		vldr.32	s15, [r3, #72]
 5208              		.loc 9 773 58
 5209 0538 7B68     		ldr	r3, [r7, #4]
 5210 053a 5B68     		ldr	r3, [r3, #4]
 5211              		.loc 9 773 66
 5212 053c 9B68     		ldr	r3, [r3, #8]
 5213              		.loc 9 773 32
 5214 053e 07EE103A 		vmov	s14, r3	@ int
 5215 0542 B8EEC77A 		vcvt.f32.s32	s14, s14
 5216 0546 F0EE470A 		vmov.f32	s1, s14
 5217 054a B0EE670A 		vmov.f32	s0, s15
 5218 054e FFF7FEFF 		bl	fmodf_pos
 5219 0552 F0EE407A 		vmov.f32	s15, s0
 5220              		.loc 9 773 21
 5221 0556 7B68     		ldr	r3, [r7, #4]
 5222 0558 C3ED127A 		vstr.32	s15, [r3, #72]
 774:Src/encoder.cpp **** 
 775:Src/encoder.cpp ****     gear_pos_cpr_counts_ += current_meas_period * gear_pll_kp_ * delta_pos_gear_counts;
ARM GAS  /tmp/ccqv0h9S.s 			page 154


 5223              		.loc 9 775 26
 5224 055c 7B68     		ldr	r3, [r7, #4]
 5225 055e 93ED287A 		vldr.32	s14, [r3, #160]
 5226              		.loc 9 775 51
 5227 0562 7B68     		ldr	r3, [r7, #4]
 5228 0564 D3ED166A 		vldr.32	s13, [r3, #88]
 5229              		.loc 9 775 49
 5230 0568 664B     		ldr	r3, .L208
 5231 056a D3ED007A 		vldr.32	s15, [r3]
 5232 056e 66EEA76A 		vmul.f32	s13, s13, s15
 5233              		.loc 9 775 64
 5234 0572 D7ED0D7A 		vldr.32	s15, [r7, #52]
 5235 0576 66EEA77A 		vmul.f32	s15, s13, s15
 5236              		.loc 9 775 26
 5237 057a 77EE277A 		vadd.f32	s15, s14, s15
 5238 057e 7B68     		ldr	r3, [r7, #4]
 5239 0580 C3ED287A 		vstr.32	s15, [r3, #160]
 776:Src/encoder.cpp ****     gear_pos_cpr_counts_ = fmodf_pos(gear_pos_cpr_counts_, (float)(config_.GearboxOutputEncoder_cpr
 5240              		.loc 9 776 37
 5241 0584 7B68     		ldr	r3, [r7, #4]
 5242 0586 D3ED287A 		vldr.32	s15, [r3, #160]
 5243              		.loc 9 776 68
 5244 058a 7B68     		ldr	r3, [r7, #4]
 5245 058c 5B68     		ldr	r3, [r3, #4]
 5246              		.loc 9 776 76
 5247 058e 5B6B     		ldr	r3, [r3, #52]
 5248              		.loc 9 776 37
 5249 0590 07EE103A 		vmov	s14, r3	@ int
 5250 0594 B8EEC77A 		vcvt.f32.s32	s14, s14
 5251 0598 F0EE470A 		vmov.f32	s1, s14
 5252 059c B0EE670A 		vmov.f32	s0, s15
 5253 05a0 FFF7FEFF 		bl	fmodf_pos
 5254 05a4 F0EE407A 		vmov.f32	s15, s0
 5255              		.loc 9 776 26
 5256 05a8 7B68     		ldr	r3, [r7, #4]
 5257 05aa C3ED287A 		vstr.32	s15, [r3, #160]
 777:Src/encoder.cpp **** 
 778:Src/encoder.cpp ****     vel_estimate_counts_ += current_meas_period * pll_ki_ * delta_pos_cpr_counts;
 5258              		.loc 9 778 26
 5259 05ae 7B68     		ldr	r3, [r7, #4]
 5260 05b0 93ED137A 		vldr.32	s14, [r3, #76]
 5261              		.loc 9 778 51
 5262 05b4 7B68     		ldr	r3, [r7, #4]
 5263 05b6 D3ED156A 		vldr.32	s13, [r3, #84]
 5264              		.loc 9 778 49
 5265 05ba 524B     		ldr	r3, .L208
 5266 05bc D3ED007A 		vldr.32	s15, [r3]
 5267 05c0 66EEA76A 		vmul.f32	s13, s13, s15
 5268              		.loc 9 778 59
 5269 05c4 D7ED0E7A 		vldr.32	s15, [r7, #56]
 5270 05c8 66EEA77A 		vmul.f32	s15, s13, s15
 5271              		.loc 9 778 26
 5272 05cc 77EE277A 		vadd.f32	s15, s14, s15
 5273 05d0 7B68     		ldr	r3, [r7, #4]
 5274 05d2 C3ED137A 		vstr.32	s15, [r3, #76]
 779:Src/encoder.cpp ****     gear_vel_estimate_counts_ += current_meas_period * gear_pll_ki_ * delta_pos_gear_counts;
 5275              		.loc 9 779 31
ARM GAS  /tmp/ccqv0h9S.s 			page 155


 5276 05d6 7B68     		ldr	r3, [r7, #4]
 5277 05d8 93ED297A 		vldr.32	s14, [r3, #164]
 5278              		.loc 9 779 56
 5279 05dc 7B68     		ldr	r3, [r7, #4]
 5280 05de D3ED176A 		vldr.32	s13, [r3, #92]
 5281              		.loc 9 779 54
 5282 05e2 484B     		ldr	r3, .L208
 5283 05e4 D3ED007A 		vldr.32	s15, [r3]
 5284 05e8 66EEA76A 		vmul.f32	s13, s13, s15
 5285              		.loc 9 779 69
 5286 05ec D7ED0D7A 		vldr.32	s15, [r7, #52]
 5287 05f0 66EEA77A 		vmul.f32	s15, s13, s15
 5288              		.loc 9 779 31
 5289 05f4 77EE277A 		vadd.f32	s15, s14, s15
 5290 05f8 7B68     		ldr	r3, [r7, #4]
 5291 05fa C3ED297A 		vstr.32	s15, [r3, #164]
 780:Src/encoder.cpp **** 
 781:Src/encoder.cpp **** 
 782:Src/encoder.cpp ****     bool snap_to_zero_vel = false;
 5292              		.loc 9 782 10
 5293 05fe 0023     		movs	r3, #0
 5294 0600 87F85630 		strb	r3, [r7, #86]
 783:Src/encoder.cpp ****     if (std::abs(vel_estimate_counts_) < 0.5f * current_meas_period * pll_ki_) {
 5295              		.loc 9 783 17
 5296 0604 7B68     		ldr	r3, [r7, #4]
 5297 0606 D3ED137A 		vldr.32	s15, [r3, #76]
 5298 060a B0EE670A 		vmov.f32	s0, s15
 5299 060e FFF7FEFF 		bl	_ZSt3absf
 5300 0612 F0EE406A 		vmov.f32	s13, s0
 5301              		.loc 9 783 47
 5302 0616 3B4B     		ldr	r3, .L208
 5303 0618 D3ED007A 		vldr.32	s15, [r3]
 5304 061c B6EE007A 		vmov.f32	s14, #5.0e-1
 5305 0620 27EE877A 		vmul.f32	s14, s15, s14
 5306              		.loc 9 783 71
 5307 0624 7B68     		ldr	r3, [r7, #4]
 5308 0626 D3ED157A 		vldr.32	s15, [r3, #84]
 5309              		.loc 9 783 69
 5310 062a 67EE277A 		vmul.f32	s15, s14, s15
 5311              		.loc 9 783 40
 5312 062e F4EEE76A 		vcmpe.f32	s13, s15
 5313 0632 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5314 0636 4CBF     		ite	mi
 5315 0638 0123     		movmi	r3, #1
 5316 063a 0023     		movpl	r3, #0
 5317 063c DBB2     		uxtb	r3, r3
 5318              		.loc 9 783 5
 5319 063e 002B     		cmp	r3, #0
 5320 0640 06D0     		beq	.L191
 784:Src/encoder.cpp ****         vel_estimate_counts_ = 0.0f;  //align delta-sigma on zero to prevent jitter
 5321              		.loc 9 784 30
 5322 0642 7B68     		ldr	r3, [r7, #4]
 5323 0644 4FF00002 		mov	r2, #0
 5324 0648 DA64     		str	r2, [r3, #76]	@ float
 785:Src/encoder.cpp ****         snap_to_zero_vel = true;
 5325              		.loc 9 785 26
 5326 064a 0123     		movs	r3, #1
ARM GAS  /tmp/ccqv0h9S.s 			page 156


 5327 064c 87F85630 		strb	r3, [r7, #86]
 5328              	.L191:
 786:Src/encoder.cpp ****     }
 787:Src/encoder.cpp **** 
 788:Src/encoder.cpp **** 
 789:Src/encoder.cpp ****     vel_estimate_ = vel_estimate_counts_ * cpr_inverse_;
 5329              		.loc 9 789 21
 5330 0650 7B68     		ldr	r3, [r7, #4]
 5331 0652 93ED137A 		vldr.32	s14, [r3, #76]
 5332              		.loc 9 789 44
 5333 0656 7B68     		ldr	r3, [r7, #4]
 5334 0658 D3ED267A 		vldr.32	s15, [r3, #152]
 5335              		.loc 9 789 19
 5336 065c 67EE277A 		vmul.f32	s15, s14, s15
 5337 0660 7B68     		ldr	r3, [r7, #4]
 5338 0662 7833     		adds	r3, r3, #120
 5339 0664 B0EE670A 		vmov.f32	s0, s15
 5340 0668 1846     		mov	r0, r3
 5341 066a FFF7FEFF 		bl	_ZN10OutputPortIfEaSEf
 790:Src/encoder.cpp ****     vel_estimate_q11_ = (int32_t)(*vel_estimate_.present() * 2048.0f);
 5342              		.loc 9 790 58
 5343 066e 7B68     		ldr	r3, [r7, #4]
 5344 0670 03F17802 		add	r2, r3, #120
 5345 0674 07F11003 		add	r3, r7, #16
 5346 0678 1146     		mov	r1, r2
 5347 067a 1846     		mov	r0, r3
 5348 067c FFF7FEFF 		bl	_ZN10OutputPortIfE7presentEv
 5349 0680 07F11003 		add	r3, r7, #16
 5350 0684 1846     		mov	r0, r3
 5351 0686 FFF7FEFF 		bl	_ZNOSt8optionalIfEdeEv
 5352 068a 0346     		mov	r3, r0
 5353              		.loc 9 790 35
 5354 068c D3ED007A 		vldr.32	s15, [r3]
 5355              		.loc 9 790 60
 5356 0690 9FED1D7A 		vldr.32	s14, .L208+4
 5357 0694 67EE877A 		vmul.f32	s15, s15, s14
 5358              		.loc 9 790 25
 5359 0698 FDEEE77A 		vcvt.s32.f32	s15, s15
 5360 069c 17EE902A 		vmov	r2, s15	@ int
 5361              		.loc 9 790 23
 5362 06a0 7B68     		ldr	r3, [r7, #4]
 5363 06a2 C3F88020 		str	r2, [r3, #128]
 791:Src/encoder.cpp ****     gear_vel_estimate_ = gear_vel_estimate_counts_ * GearboxOutputEncoder_cpr_inverse_;
 5364              		.loc 9 791 26
 5365 06a6 7B68     		ldr	r3, [r7, #4]
 5366 06a8 93ED297A 		vldr.32	s14, [r3, #164]
 5367              		.loc 9 791 54
 5368 06ac 7B68     		ldr	r3, [r7, #4]
 5369 06ae D3ED277A 		vldr.32	s15, [r3, #156]
 5370              		.loc 9 791 52
 5371 06b2 67EE277A 		vmul.f32	s15, s14, s15
 5372              		.loc 9 791 24
 5373 06b6 7B68     		ldr	r3, [r7, #4]
 5374 06b8 C3ED2A7A 		vstr.32	s15, [r3, #168]
 792:Src/encoder.cpp **** 
 793:Src/encoder.cpp ****     float pos_cpr_last = pos_cpr_;
 5375              		.loc 9 793 11
ARM GAS  /tmp/ccqv0h9S.s 			page 157


 5376 06bc 7B68     		ldr	r3, [r7, #4]
 5377 06be D3F88430 		ldr	r3, [r3, #132]	@ float
 5378 06c2 3B63     		str	r3, [r7, #48]	@ float
 794:Src/encoder.cpp ****     (void)pos_cpr_last;
 795:Src/encoder.cpp **** 
 796:Src/encoder.cpp ****     pos_estimate_ = pos_estimate_counts_ / (float)config_.cpr;
 5379              		.loc 9 796 21
 5380 06c4 7B68     		ldr	r3, [r7, #4]
 5381 06c6 93ED117A 		vldr.32	s14, [r3, #68]
 5382              		.loc 9 796 51
 5383 06ca 7B68     		ldr	r3, [r7, #4]
 5384 06cc 5B68     		ldr	r3, [r3, #4]
 5385              		.loc 9 796 59
 5386 06ce 9B68     		ldr	r3, [r3, #8]
 5387              		.loc 9 796 44
 5388 06d0 07EE903A 		vmov	s15, r3	@ int
 5389 06d4 F8EEE77A 		vcvt.f32.s32	s15, s15
 5390              		.loc 9 796 19
 5391 06d8 C7EE276A 		vdiv.f32	s13, s14, s15
 5392 06dc 7B68     		ldr	r3, [r7, #4]
 5393 06de 7033     		adds	r3, r3, #112
 5394 06e0 B0EE660A 		vmov.f32	s0, s13
 5395 06e4 1846     		mov	r0, r3
 5396 06e6 FFF7FEFF 		bl	_ZN10OutputPortIfEaSEf
 797:Src/encoder.cpp ****     
 798:Src/encoder.cpp **** 
 799:Src/encoder.cpp ****     //// run encoder count interpolation
 800:Src/encoder.cpp ****     int32_t corrected_enc = count_in_cpr_ - config_.offset;
 5397              		.loc 9 800 29
 5398 06ea 7B68     		ldr	r3, [r7, #4]
 5399 06ec 5A69     		ldr	r2, [r3, #20]
 5400              		.loc 9 800 45
 5401 06ee 7B68     		ldr	r3, [r7, #4]
 5402 06f0 5B68     		ldr	r3, [r3, #4]
 5403              		.loc 9 800 53
 5404 06f2 DB68     		ldr	r3, [r3, #12]
 5405              		.loc 9 800 13
 5406 06f4 D31A     		subs	r3, r2, r3
 5407 06f6 FB62     		str	r3, [r7, #44]
 801:Src/encoder.cpp ****     // if we are stopped, make sure we don't randomly drift
 802:Src/encoder.cpp ****     if (snap_to_zero_vel || !config_.enable_phase_interpolation) {
 5408              		.loc 9 802 5
 5409 06f8 97F85630 		ldrb	r3, [r7, #86]	@ zero_extendqisi2
 5410 06fc 002B     		cmp	r3, #0
 5411 06fe 0DD1     		bne	.L192
 5412 0700 04E0     		b	.L209
 5413              	.L210:
 5414 0702 00BF     		.align	2
 5415              	.L208:
 5416 0704 00000000 		.word	current_meas_period
 5417 0708 00000045 		.word	1157627904
 5418              	.L209:
 5419              		.loc 9 802 30 discriminator 1
 5420 070c 7B68     		ldr	r3, [r7, #4]
 5421 070e 5B68     		ldr	r3, [r3, #4]
 5422              		.loc 9 802 38 discriminator 1
 5423 0710 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
ARM GAS  /tmp/ccqv0h9S.s 			page 158


 5424              		.loc 9 802 29 discriminator 1
 5425 0712 83F00103 		eor	r3, r3, #1
 5426 0716 DBB2     		uxtb	r3, r3
 5427              		.loc 9 802 26 discriminator 1
 5428 0718 002B     		cmp	r3, #0
 5429 071a 04D0     		beq	.L193
 5430              	.L192:
 803:Src/encoder.cpp ****         interpolation_ = 0.5f;
 5431              		.loc 9 803 24
 5432 071c 7B68     		ldr	r3, [r7, #4]
 5433 071e 4FF07C52 		mov	r2, #1056964608
 5434 0722 DA62     		str	r2, [r3, #44]	@ float
 5435 0724 39E0     		b	.L194
 5436              	.L193:
 804:Src/encoder.cpp ****     // reset interpolation if encoder edge comes
 805:Src/encoder.cpp ****     // TODO: This isn't correct. At high velocities the first phase in this count may very well not
 806:Src/encoder.cpp ****     } else if (delta_enc > 0) {
 5437              		.loc 9 806 12
 5438 0726 FB6D     		ldr	r3, [r7, #92]
 5439 0728 002B     		cmp	r3, #0
 5440 072a 04DD     		ble	.L195
 807:Src/encoder.cpp ****         interpolation_ = 0.0f;
 5441              		.loc 9 807 24
 5442 072c 7B68     		ldr	r3, [r7, #4]
 5443 072e 4FF00002 		mov	r2, #0
 5444 0732 DA62     		str	r2, [r3, #44]	@ float
 5445 0734 31E0     		b	.L194
 5446              	.L195:
 808:Src/encoder.cpp ****     } else if (delta_enc < 0) {
 5447              		.loc 9 808 12
 5448 0736 FB6D     		ldr	r3, [r7, #92]
 5449 0738 002B     		cmp	r3, #0
 5450 073a 04DA     		bge	.L196
 809:Src/encoder.cpp ****         interpolation_ = 1.0f;
 5451              		.loc 9 809 24
 5452 073c 7B68     		ldr	r3, [r7, #4]
 5453 073e 4FF07E52 		mov	r2, #1065353216
 5454 0742 DA62     		str	r2, [r3, #44]	@ float
 5455 0744 29E0     		b	.L194
 5456              	.L196:
 810:Src/encoder.cpp ****     } else {
 811:Src/encoder.cpp ****         // Interpolate (predict) between encoder counts using vel_estimate,
 812:Src/encoder.cpp ****         interpolation_ += current_meas_period * vel_estimate_counts_;
 5457              		.loc 9 812 24
 5458 0746 7B68     		ldr	r3, [r7, #4]
 5459 0748 93ED0B7A 		vldr.32	s14, [r3, #44]
 5460              		.loc 9 812 49
 5461 074c 7B68     		ldr	r3, [r7, #4]
 5462 074e D3ED136A 		vldr.32	s13, [r3, #76]
 5463              		.loc 9 812 47
 5464 0752 5A4B     		ldr	r3, .L211
 5465 0754 D3ED007A 		vldr.32	s15, [r3]
 5466 0758 66EEA77A 		vmul.f32	s15, s13, s15
 5467              		.loc 9 812 24
 5468 075c 77EE277A 		vadd.f32	s15, s14, s15
 5469 0760 7B68     		ldr	r3, [r7, #4]
 5470 0762 C3ED0B7A 		vstr.32	s15, [r3, #44]
ARM GAS  /tmp/ccqv0h9S.s 			page 159


 813:Src/encoder.cpp ****         // don't allow interpolation indicated position outside of [enc, enc+1)
 814:Src/encoder.cpp ****         if (interpolation_ > 1.0f) interpolation_ = 1.0f;
 5471              		.loc 9 814 13
 5472 0766 7B68     		ldr	r3, [r7, #4]
 5473 0768 D3ED0B7A 		vldr.32	s15, [r3, #44]
 5474              		.loc 9 814 9
 5475 076c B7EE007A 		vmov.f32	s14, #1.0e+0
 5476 0770 F4EEC77A 		vcmpe.f32	s15, s14
 5477 0774 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5478 0778 03DD     		ble	.L197
 5479              		.loc 9 814 51 discriminator 1
 5480 077a 7B68     		ldr	r3, [r7, #4]
 5481 077c 4FF07E52 		mov	r2, #1065353216
 5482 0780 DA62     		str	r2, [r3, #44]	@ float
 5483              	.L197:
 815:Src/encoder.cpp ****         if (interpolation_ < 0.0f) interpolation_ = 0.0f;
 5484              		.loc 9 815 13
 5485 0782 7B68     		ldr	r3, [r7, #4]
 5486 0784 D3ED0B7A 		vldr.32	s15, [r3, #44]
 5487              		.loc 9 815 9
 5488 0788 F5EEC07A 		vcmpe.f32	s15, #0
 5489 078c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5490 0790 03D5     		bpl	.L194
 5491              		.loc 9 815 51 discriminator 1
 5492 0792 7B68     		ldr	r3, [r7, #4]
 5493 0794 4FF00002 		mov	r2, #0
 5494 0798 DA62     		str	r2, [r3, #44]	@ float
 5495              	.L194:
 816:Src/encoder.cpp ****     }
 817:Src/encoder.cpp ****     interpolation_ = current_meas_period * vel_estimate_counts_;
 5496              		.loc 9 817 44
 5497 079a 7B68     		ldr	r3, [r7, #4]
 5498 079c 93ED137A 		vldr.32	s14, [r3, #76]
 5499              		.loc 9 817 42
 5500 07a0 464B     		ldr	r3, .L211
 5501 07a2 D3ED007A 		vldr.32	s15, [r3]
 5502 07a6 67EE277A 		vmul.f32	s15, s14, s15
 5503              		.loc 9 817 20
 5504 07aa 7B68     		ldr	r3, [r7, #4]
 5505 07ac C3ED0B7A 		vstr.32	s15, [r3, #44]
 818:Src/encoder.cpp ****     float interpolated_enc = corrected_enc + interpolation_;
 5506              		.loc 9 818 44
 5507 07b0 FB6A     		ldr	r3, [r7, #44]
 5508 07b2 07EE903A 		vmov	s15, r3	@ int
 5509 07b6 B8EEE77A 		vcvt.f32.s32	s14, s15
 5510              		.loc 9 818 46
 5511 07ba 7B68     		ldr	r3, [r7, #4]
 5512 07bc D3ED0B7A 		vldr.32	s15, [r3, #44]
 5513              		.loc 9 818 11
 5514 07c0 77EE277A 		vadd.f32	s15, s14, s15
 5515 07c4 C7ED0A7A 		vstr.32	s15, [r7, #40]
 819:Src/encoder.cpp **** 
 820:Src/encoder.cpp ****     //// compute electrical phase
 821:Src/encoder.cpp ****     //TODO avoid recomputing elec_rad_per_enc every time
 822:Src/encoder.cpp ****     float elec_rad_per_enc = axis_->motor_.config_.pole_pairs * 2 * M_PI * cpr_inverse_;
 5516              		.loc 9 822 30
 5517 07c8 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccqv0h9S.s 			page 160


 5518 07ca 9B68     		ldr	r3, [r3, #8]
 5519              		.loc 9 822 37
 5520 07cc DB6E     		ldr	r3, [r3, #108]
 5521              		.loc 9 822 44
 5522 07ce 5B68     		ldr	r3, [r3, #4]
 5523              		.loc 9 822 52
 5524 07d0 5B68     		ldr	r3, [r3, #4]
 5525              		.loc 9 822 63
 5526 07d2 5B00     		lsls	r3, r3, #1
 5527              		.loc 9 822 67
 5528 07d4 07EE903A 		vmov	s15, r3	@ int
 5529 07d8 F8EEE77A 		vcvt.f32.s32	s15, s15
 5530 07dc 9FED387A 		vldr.32	s14, .L211+4
 5531 07e0 27EE877A 		vmul.f32	s14, s15, s14
 5532              		.loc 9 822 76
 5533 07e4 7B68     		ldr	r3, [r7, #4]
 5534 07e6 D3ED267A 		vldr.32	s15, [r3, #152]
 5535              		.loc 9 822 11
 5536 07ea 67EE277A 		vmul.f32	s15, s14, s15
 5537 07ee C7ED097A 		vstr.32	s15, [r7, #36]
 823:Src/encoder.cpp ****     float ph = elec_rad_per_enc * (interpolated_enc - config_.offset_float);
 5538              		.loc 9 823 55
 5539 07f2 7B68     		ldr	r3, [r7, #4]
 5540 07f4 5B68     		ldr	r3, [r3, #4]
 5541              		.loc 9 823 63
 5542 07f6 D3ED047A 		vldr.32	s15, [r3, #16]
 5543              		.loc 9 823 53
 5544 07fa 97ED0A7A 		vldr.32	s14, [r7, #40]
 5545 07fe 77EE677A 		vsub.f32	s15, s14, s15
 5546              		.loc 9 823 11
 5547 0802 97ED097A 		vldr.32	s14, [r7, #36]
 5548 0806 67EE277A 		vmul.f32	s15, s14, s15
 5549 080a C7ED087A 		vstr.32	s15, [r7, #32]
 824:Src/encoder.cpp ****     // ph = fmodf(ph, 2*M_PI);
 825:Src/encoder.cpp **** 
 826:Src/encoder.cpp ****     vel_estimate_valid_ = true;
 5550              		.loc 9 826 25
 5551 080e 7B68     		ldr	r3, [r7, #4]
 5552 0810 0122     		movs	r2, #1
 5553 0812 83F89520 		strb	r2, [r3, #149]
 827:Src/encoder.cpp ****     pos_estimate_valid_ = true;
 5554              		.loc 9 827 25
 5555 0816 7B68     		ldr	r3, [r7, #4]
 5556 0818 0122     		movs	r2, #1
 5557 081a 83F89420 		strb	r2, [r3, #148]
 828:Src/encoder.cpp ****  
 829:Src/encoder.cpp ****    if (is_ready_) {
 5558              		.loc 9 829 8
 5559 081e 7B68     		ldr	r3, [r7, #4]
 5560 0820 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 5561              		.loc 9 829 4
 5562 0822 002B     		cmp	r3, #0
 5563 0824 45D0     		beq	.L200
 830:Src/encoder.cpp ****         phase_ = wrap_pm_pi(ph) * config_.direction;
 5564              		.loc 9 830 28
 5565 0826 97ED080A 		vldr.32	s0, [r7, #32]
 5566 082a FFF7FEFF 		bl	wrap_pm_pi
ARM GAS  /tmp/ccqv0h9S.s 			page 161


 5567 082e B0EE407A 		vmov.f32	s14, s0
 5568              		.loc 9 830 35
 5569 0832 7B68     		ldr	r3, [r7, #4]
 5570 0834 5B68     		ldr	r3, [r3, #4]
 5571              		.loc 9 830 43
 5572 0836 DB6B     		ldr	r3, [r3, #60]
 5573              		.loc 9 830 16
 5574 0838 07EE903A 		vmov	s15, r3	@ int
 5575 083c F8EEE77A 		vcvt.f32.s32	s15, s15
 5576 0840 67EE277A 		vmul.f32	s15, s14, s15
 5577 0844 7B68     		ldr	r3, [r7, #4]
 5578 0846 3033     		adds	r3, r3, #48
 5579 0848 B0EE670A 		vmov.f32	s0, s15
 5580 084c 1846     		mov	r0, r3
 5581 084e FFF7FEFF 		bl	_ZN10OutputPortIfEaSEf
 831:Src/encoder.cpp ****         phase_vel_ = (2*M_PI) * (*vel_estimate_.present())* axis_->motor_.config_.pole_pairs * conf
 5582              		.loc 9 831 57
 5583 0852 7B68     		ldr	r3, [r7, #4]
 5584 0854 03F17802 		add	r2, r3, #120
 5585 0858 07F11803 		add	r3, r7, #24
 5586 085c 1146     		mov	r1, r2
 5587 085e 1846     		mov	r0, r3
 5588 0860 FFF7FEFF 		bl	_ZN10OutputPortIfE7presentEv
 5589 0864 07F11803 		add	r3, r7, #24
 5590 0868 1846     		mov	r0, r3
 5591 086a FFF7FEFF 		bl	_ZNOSt8optionalIfEdeEv
 5592 086e 0346     		mov	r3, r0
 5593              		.loc 9 831 34
 5594 0870 D3ED007A 		vldr.32	s15, [r3]
 5595              		.loc 9 831 31
 5596 0874 9FED137A 		vldr.32	s14, .L211+8
 5597 0878 27EE877A 		vmul.f32	s14, s15, s14
 5598              		.loc 9 831 61
 5599 087c 7B68     		ldr	r3, [r7, #4]
 5600 087e 9B68     		ldr	r3, [r3, #8]
 5601              		.loc 9 831 68
 5602 0880 DB6E     		ldr	r3, [r3, #108]
 5603              		.loc 9 831 75
 5604 0882 5B68     		ldr	r3, [r3, #4]
 5605              		.loc 9 831 83
 5606 0884 5B68     		ldr	r3, [r3, #4]
 5607              		.loc 9 831 59
 5608 0886 07EE903A 		vmov	s15, r3	@ int
 5609 088a F8EEE77A 		vcvt.f32.s32	s15, s15
 5610 088e 27EE277A 		vmul.f32	s14, s14, s15
 5611              		.loc 9 831 96
 5612 0892 7B68     		ldr	r3, [r7, #4]
 5613 0894 5B68     		ldr	r3, [r3, #4]
 5614              		.loc 9 831 104
 5615 0896 DB6B     		ldr	r3, [r3, #60]
 5616              		.loc 9 831 20
 5617 0898 07EE903A 		vmov	s15, r3	@ int
 5618 089c F8EEE77A 		vcvt.f32.s32	s15, s15
 5619 08a0 67EE277A 		vmul.f32	s15, s14, s15
 5620 08a4 7B68     		ldr	r3, [r7, #4]
 5621 08a6 3833     		adds	r3, r3, #56
 5622 08a8 B0EE670A 		vmov.f32	s0, s15
ARM GAS  /tmp/ccqv0h9S.s 			page 162


 5623 08ac 1846     		mov	r0, r3
 5624 08ae FFF7FEFF 		bl	_ZN10OutputPortIfEaSEf
 5625              	.L200:
 832:Src/encoder.cpp ****     }
 833:Src/encoder.cpp **** 
 834:Src/encoder.cpp ****     return true;
 5626              		.loc 9 834 12
 5627 08b2 0123     		movs	r3, #1
 5628              	.L175:
 835:Src/encoder.cpp **** }
 5629              		.loc 9 835 1
 5630 08b4 1846     		mov	r0, r3
 5631 08b6 6437     		adds	r7, r7, #100
 5632              	.LCFI227:
 5633              		.cfi_def_cfa_offset 12
 5634 08b8 BD46     		mov	sp, r7
 5635              	.LCFI228:
 5636              		.cfi_def_cfa_register 13
 5637              		@ sp needed
 5638 08ba 90BD     		pop	{r4, r7, pc}
 5639              	.L212:
 5640              		.align	2
 5641              	.L211:
 5642 08bc 00000000 		.word	current_meas_period
 5643 08c0 DB0F4940 		.word	1078530011
 5644 08c4 DB0FC940 		.word	1086918619
 5645              		.cfi_endproc
 5646              	.LFE4852:
 5648              		.section	.text._ZN10OutputPortIfEC2Ef,"axG",%progbits,_ZN10OutputPortIfEC5Ef,comdat
 5649              		.align	1
 5650              		.weak	_ZN10OutputPortIfEC2Ef
 5651              		.syntax unified
 5652              		.thumb
 5653              		.thumb_func
 5654              		.fpu fpv4-sp-d16
 5656              	_ZN10OutputPortIfEC2Ef:
 5657              	.LFB4902:
 5658              		.file 10 "Inc/component.hpp"
   1:Inc/component.hpp **** #ifndef __COMPONENT_HPP
   2:Inc/component.hpp **** #define __COMPONENT_HPP
   3:Inc/component.hpp **** 
   4:Inc/component.hpp **** #include <stdint.h>
   5:Inc/component.hpp **** #include <optional>
   6:Inc/component.hpp **** #include <variant>
   7:Inc/component.hpp **** #include "user_int.hpp"
   8:Inc/component.hpp **** class ComponentBase {
   9:Inc/component.hpp **** public:
  10:Inc/component.hpp ****     /**
  11:Inc/component.hpp ****      * @brief Shall run the update action of this component.
  12:Inc/component.hpp ****      * 
  13:Inc/component.hpp ****      * This function gets called in a low priority interrupt context and is
  14:Inc/component.hpp ****      * allowed to call CMSIS functions.
  15:Inc/component.hpp ****      * 
  16:Inc/component.hpp ****      * @param timestamp: The timestamp (in HCLK ticks) for which this update
  17:Inc/component.hpp ****      * is run.
  18:Inc/component.hpp ****      */
  19:Inc/component.hpp ****     virtual void update(uint32_t timestamp) = 0;
ARM GAS  /tmp/ccqv0h9S.s 			page 163


  20:Inc/component.hpp **** };
  21:Inc/component.hpp **** 
  22:Inc/component.hpp **** 
  23:Inc/component.hpp **** template<typename T>
  24:Inc/component.hpp **** class InputPort;
  25:Inc/component.hpp **** 
  26:Inc/component.hpp **** /**
  27:Inc/component.hpp ****  * @brief An output port stores a value for consumption by a connecting input
  28:Inc/component.hpp ****  * port.
  29:Inc/component.hpp ****  * 
  30:Inc/component.hpp ****  * Output ports are supposed to be reset at the beginning of a control loop
  31:Inc/component.hpp ****  * iteration. This ensures that connecting input ports don't use an outdated
  32:Inc/component.hpp ****  * value and, more importantly, ensures proper handling if the producer of the
  33:Inc/component.hpp ****  * value is incapable of producing the value for any reason.
  34:Inc/component.hpp ****  * 
  35:Inc/component.hpp ****  * Member functions of this class are not thread-safe unless noted otherwise.
  36:Inc/component.hpp ****  */
  37:Inc/component.hpp **** template<typename T>
  38:Inc/component.hpp **** class OutputPort {
  39:Inc/component.hpp **** public:
  40:Inc/component.hpp ****     /**
  41:Inc/component.hpp ****      * @brief Initializes the output port with the specified value.
  42:Inc/component.hpp ****      * 
  43:Inc/component.hpp ****      * An initialization value is required for any() to work properly.
  44:Inc/component.hpp ****      * present() and previous() cannot be used to fetch the
  45:Inc/component.hpp ****      * initialization value.
  46:Inc/component.hpp ****      */
  47:Inc/component.hpp ****     OutputPort(T val) : content_(val) {}
 5659              		.loc 10 47 5
 5660              		.cfi_startproc
 5661              		@ args = 0, pretend = 0, frame = 8
 5662              		@ frame_needed = 1, uses_anonymous_args = 0
 5663              		@ link register save eliminated.
 5664 0000 80B4     		push	{r7}
 5665              	.LCFI229:
 5666              		.cfi_def_cfa_offset 4
 5667              		.cfi_offset 7, -4
 5668 0002 83B0     		sub	sp, sp, #12
 5669              	.LCFI230:
 5670              		.cfi_def_cfa_offset 16
 5671 0004 00AF     		add	r7, sp, #0
 5672              	.LCFI231:
 5673              		.cfi_def_cfa_register 7
 5674 0006 7860     		str	r0, [r7, #4]
 5675 0008 87ED000A 		vstr.32	s0, [r7]
 5676              	.LBB40:
 5677              		.loc 10 47 37
 5678 000c 7B68     		ldr	r3, [r7, #4]
 5679 000e 0222     		movs	r2, #2
 5680 0010 1A60     		str	r2, [r3]
 5681 0012 7B68     		ldr	r3, [r7, #4]
 5682 0014 3A68     		ldr	r2, [r7]	@ float
 5683 0016 5A60     		str	r2, [r3, #4]	@ float
 5684              	.LBE40:
 5685              		.loc 10 47 40
 5686 0018 7B68     		ldr	r3, [r7, #4]
 5687 001a 1846     		mov	r0, r3
ARM GAS  /tmp/ccqv0h9S.s 			page 164


 5688 001c 0C37     		adds	r7, r7, #12
 5689              	.LCFI232:
 5690              		.cfi_def_cfa_offset 4
 5691 001e BD46     		mov	sp, r7
 5692              	.LCFI233:
 5693              		.cfi_def_cfa_register 13
 5694              		@ sp needed
 5695 0020 5DF8047B 		ldr	r7, [sp], #4
 5696              	.LCFI234:
 5697              		.cfi_restore 7
 5698              		.cfi_def_cfa_offset 0
 5699 0024 7047     		bx	lr
 5700              		.cfi_endproc
 5701              	.LFE4902:
 5703              		.weak	_ZN10OutputPortIfEC1Ef
 5704              		.thumb_set _ZN10OutputPortIfEC1Ef,_ZN10OutputPortIfEC2Ef
 5705              		.section	.text._ZNSt4pairIffEC2IffLb1EEEOT_OT0_,"axG",%progbits,_ZNSt4pairIffEC5IffLb1EEEOT_OT0_,c
 5706              		.align	1
 5707              		.weak	_ZNSt4pairIffEC2IffLb1EEEOT_OT0_
 5708              		.syntax unified
 5709              		.thumb
 5710              		.thumb_func
 5711              		.fpu fpv4-sp-d16
 5713              	_ZNSt4pairIffEC2IffLb1EEEOT_OT0_:
 5714              	.LFB4906:
 5715              		.file 11 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** /*
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
ARM GAS  /tmp/ccqv0h9S.s 			page 165


  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  */
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  */
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** # include <type_traits> // for std::__decay_and_strip, std::is_reference_v
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus > 201703L
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** # include <compare>
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** # define __cpp_lib_constexpr_utility 201811L
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** {
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /**
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @addtogroup utilities
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @{
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    */
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// Tag type for piecewise construction of std::pair objects.
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   struct piecewise_construct_t { explicit piecewise_construct_t() = default; };
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// Tag for piecewise construction of std::pair objects.
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     piecewise_construct_t();
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// @cond undocumented
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // Forward declarations.
ARM GAS  /tmp/ccqv0h9S.s 			page 166


  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<typename...>
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     class tuple;
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<std::size_t...>
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct _Index_tuple;
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // Concept utility functions, reused in conditionally-explicit
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // constructors.
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // See PR 70437, don't look at is_constructible or
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // is_convertible if the types are the same to
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // avoid querying those properties for incomplete types.
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template <bool, typename _T1, typename _T2>
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct _PCC
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     {
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&>>::value;
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_convertible<const _U1&, _T1>,
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_convertible<const _U2&, _T2>>::value;
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>>::value;
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_convertible<_U1&&, _T1>,
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_convertible<_U2&&, _T2>>::value;
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _CopyMovePair()
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<const _U1&, _T1>,
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				  is_convertible<_U2&&, _T2>>;
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __do_converts,
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>,
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      __converts
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      >::value;
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
ARM GAS  /tmp/ccqv0h9S.s 			page 167


 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _MoveCopyPair()
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<_U1&&, _T1>,
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				  is_convertible<const _U2&, _T2>>;
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __do_converts,
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&&>,
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      __converts
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      >::value;
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   };
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template <typename _T1, typename _T2>
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct _PCC<false, _T1, _T2>
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     {
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   };
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif // C++11
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<typename _U1, typename _U2> class __pair_base
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   {
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     template<typename _T1, typename _T2> friend struct pair;
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     __pair_base() = default;
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     ~__pair_base() = default;
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     __pair_base(const __pair_base&) = default;
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     __pair_base& operator=(const __pair_base&) = delete;
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif // C++11
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   };
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// @endcond
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  /**
ARM GAS  /tmp/ccqv0h9S.s 			page 168


 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    */
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct pair
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     : private __pair_base<_T1, _T2>
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     {
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       typedef _T1 first_type;    ///< The type of the `first` member
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       typedef _T2 second_type;   ///< The type of the `second` member
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _T1 first;                 ///< The first member
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _T2 second;                ///< The second member
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // 265.  std::pair::pair() effects overly restrictive
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /** The default constructor creates @c first and @c second using their
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        *  respective default constructors.  */
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename _U2 = _T2,
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U1>,
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U2>>
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                    ::value, bool>::type = true>
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _GLIBCXX_CONSTEXPR pair()
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(), second() { }
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename _U2 = _T2,
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                        is_default_constructible<_U1>,
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                        is_default_constructible<_U2>,
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                        __not_<
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          __and_<__is_implicitly_default_constructible<_U1>,
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                 __is_implicitly_default_constructible<_U2>>>>
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                    ::value, bool>::type = false>
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       explicit constexpr pair()
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(), second() { }
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// Two objects may be passed to a @c pair constructor to be copied.
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       pair(const _T1& __a, const _T2& __b)
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #else
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that don't take pairs.
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @cond undocumented
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       using _PCCP = _PCC<true, _T1, _T2>;
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @endcond
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// Construct from two const lvalues, allowing implicit conversions.
ARM GAS  /tmp/ccqv0h9S.s 			page 169


 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1 = _T1, typename _U2=_T2, typename
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	                 && _PCCP::template
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       constexpr pair(const _T1& __a, const _T2& __b)
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// Construct from two const lvalues, disallowing implicit conversions.
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        template<typename _U1 = _T1, typename _U2=_T2, typename
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		enable_if<_PCCP::template
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    _ConstructiblePair<_U1, _U2>()
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	                  && !_PCCP::template
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    _ImplicitlyConvertiblePair<_U1, _U2>(),
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       explicit constexpr pair(const _T1& __a, const _T2& __b)
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// There is also a templated constructor to convert from other pairs.
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2>
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	pair(const pair<_U1, _U2>& __p)
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #else
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that take pairs.
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @cond undocumented
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         using _PCCFP = _PCC<!is_same<_T1, _U1>::value
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    || !is_same<_T2, _U2>::value,
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    _T1, _T2>;
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @endcond
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	                 && _PCCFP<_U1, _U2>::template
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  bool>::type=true>
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         constexpr pair(const pair<_U1, _U2>& __p)
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         : first(__p.first), second(__p.second) { }
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			 && !_PCCFP<_U1, _U2>::template
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	explicit constexpr pair(const pair<_U1, _U2>& __p)
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       constexpr pair(const pair&) = default;	///< Copy constructor
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       constexpr pair(pair&&) = default;		///< Move constructor
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 170


 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // DR 811.
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveCopyPair<true, _U1, _T2>(),
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        constexpr pair(_U1&& __x, const _T2& __y)
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveCopyPair<false, _U1, _T2>(),
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        explicit constexpr pair(_U1&& __x, const _T2& __y)
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U2, typename
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _CopyMovePair<true, _T1, _U2>(),
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        constexpr pair(const _T1& __x, _U2&& __y)
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U2, typename
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _CopyMovePair<false, _T1, _U2>(),
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        explicit pair(const _T1& __x, _U2&& __y)
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && _PCCP::template
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	constexpr pair(_U1&& __x, _U2&& __y)
 5716              		.loc 11 352 12
 5717              		.cfi_startproc
 5718              		@ args = 0, pretend = 0, frame = 16
 5719              		@ frame_needed = 1, uses_anonymous_args = 0
 5720 0000 80B5     		push	{r7, lr}
 5721              	.LCFI235:
 5722              		.cfi_def_cfa_offset 8
 5723              		.cfi_offset 7, -8
 5724              		.cfi_offset 14, -4
 5725 0002 84B0     		sub	sp, sp, #16
 5726              	.LCFI236:
 5727              		.cfi_def_cfa_offset 24
 5728 0004 00AF     		add	r7, sp, #0
 5729              	.LCFI237:
 5730              		.cfi_def_cfa_register 7
 5731 0006 F860     		str	r0, [r7, #12]
 5732 0008 B960     		str	r1, [r7, #8]
 5733 000a 7A60     		str	r2, [r7, #4]
 5734              	.LBB41:
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 5735              		.loc 11 353 27
ARM GAS  /tmp/ccqv0h9S.s 			page 171


 5736 000c B868     		ldr	r0, [r7, #8]
 5737 000e FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 5738 0012 0346     		mov	r3, r0
 5739              		.loc 11 353 64
 5740 0014 1A68     		ldr	r2, [r3]	@ float
 5741 0016 FB68     		ldr	r3, [r7, #12]
 5742 0018 1A60     		str	r2, [r3]	@ float
 5743              		.loc 11 353 59
 5744 001a 7868     		ldr	r0, [r7, #4]
 5745 001c FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 5746 0020 0346     		mov	r3, r0
 5747              		.loc 11 353 64
 5748 0022 1A68     		ldr	r2, [r3]	@ float
 5749 0024 FB68     		ldr	r3, [r7, #12]
 5750 0026 5A60     		str	r2, [r3, #4]	@ float
 5751              	.LBE41:
 5752              		.loc 11 353 68
 5753 0028 FB68     		ldr	r3, [r7, #12]
 5754 002a 1846     		mov	r0, r3
 5755 002c 1037     		adds	r7, r7, #16
 5756              	.LCFI238:
 5757              		.cfi_def_cfa_offset 8
 5758 002e BD46     		mov	sp, r7
 5759              	.LCFI239:
 5760              		.cfi_def_cfa_register 13
 5761              		@ sp needed
 5762 0030 80BD     		pop	{r7, pc}
 5763              		.cfi_endproc
 5764              	.LFE4906:
 5766              		.weak	_ZNSt4pairIffEC1IffLb1EEEOT_OT0_
 5767              		.thumb_set _ZNSt4pairIffEC1IffLb1EEEOT_OT0_,_ZNSt4pairIffEC2IffLb1EEEOT_OT0_
 5768              		.section	.text._ZNSt8functionIFbbEEC2Ev,"axG",%progbits,_ZNSt8functionIFbbEEC5Ev,comdat
 5769              		.align	1
 5770              		.weak	_ZNSt8functionIFbbEEC2Ev
 5771              		.syntax unified
 5772              		.thumb
 5773              		.thumb_func
 5774              		.fpu fpv4-sp-d16
 5776              	_ZNSt8functionIFbbEEC2Ev:
 5777              	.LFB4921:
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       private _Function_base
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     {
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       template<typename _Func,
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	       typename _Res2 = __invoke_result<_Func&, _ArgTypes...>>
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	struct _Callable
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	: __is_invocable_impl<_Res2, _Res>::type
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{ };
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       // Used so the return type convertibility checks aren't done when
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       // performing overload resolution for copy construction/assignment.
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       template<typename _Tp>
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	struct _Callable<function, _Tp> : false_type { };
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       template<typename _Cond, typename _Tp>
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	using _Requires = typename enable_if<_Cond::value, _Tp>::type;
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 172


 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     public:
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       typedef _Res result_type;
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       // [3.7.2.1] construct/copy/destroy
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       /**
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****        *  @brief Default construct creates an empty function call wrapper.
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****        *  @post @c !(bool)*this
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****        */
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       function() noexcept
 5778              		.loc 6 330 7
 5779              		.cfi_startproc
 5780              		@ args = 0, pretend = 0, frame = 8
 5781              		@ frame_needed = 1, uses_anonymous_args = 0
 5782 0000 80B5     		push	{r7, lr}
 5783              	.LCFI240:
 5784              		.cfi_def_cfa_offset 8
 5785              		.cfi_offset 7, -8
 5786              		.cfi_offset 14, -4
 5787 0002 82B0     		sub	sp, sp, #8
 5788              	.LCFI241:
 5789              		.cfi_def_cfa_offset 16
 5790 0004 00AF     		add	r7, sp, #0
 5791              	.LCFI242:
 5792              		.cfi_def_cfa_register 7
 5793 0006 7860     		str	r0, [r7, #4]
 5794              	.LBB42:
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       : _Function_base() { }
 5795              		.loc 6 331 24
 5796 0008 7B68     		ldr	r3, [r7, #4]
 5797 000a 1846     		mov	r0, r3
 5798 000c FFF7FEFF 		bl	_ZNSt14_Function_baseC2Ev
 5799              	.LBE42:
 5800              		.loc 6 331 28
 5801 0010 7B68     		ldr	r3, [r7, #4]
 5802 0012 1846     		mov	r0, r3
 5803 0014 0837     		adds	r7, r7, #8
 5804              	.LCFI243:
 5805              		.cfi_def_cfa_offset 8
 5806 0016 BD46     		mov	sp, r7
 5807              	.LCFI244:
 5808              		.cfi_def_cfa_register 13
 5809              		@ sp needed
 5810 0018 80BD     		pop	{r7, pc}
 5811              		.cfi_endproc
 5812              	.LFE4921:
 5814              		.weak	_ZNSt8functionIFbbEEC1Ev
 5815              		.thumb_set _ZNSt8functionIFbbEEC1Ev,_ZNSt8functionIFbbEEC2Ev
 5816              		.section	.text._ZN10OutputPortISt4pairIffEEaSES1_,"axG",%progbits,_ZN10OutputPortISt4pairIffEEaSES
 5817              		.align	1
 5818              		.weak	_ZN10OutputPortISt4pairIffEEaSES1_
 5819              		.syntax unified
 5820              		.thumb
 5821              		.thumb_func
 5822              		.fpu fpv4-sp-d16
 5824              	_ZN10OutputPortISt4pairIffEEaSES1_:
 5825              	.LFB4923:
ARM GAS  /tmp/ccqv0h9S.s 			page 173


  48:Inc/component.hpp ****     
  49:Inc/component.hpp ****     /**
  50:Inc/component.hpp ****      * @brief Updates the underlying value of this output port.
  51:Inc/component.hpp ****      */
  52:Inc/component.hpp ****     void operator=(T value) {
 5826              		.loc 10 52 10
 5827              		.cfi_startproc
 5828              		@ args = 0, pretend = 0, frame = 16
 5829              		@ frame_needed = 1, uses_anonymous_args = 0
 5830 0000 80B5     		push	{r7, lr}
 5831              	.LCFI245:
 5832              		.cfi_def_cfa_offset 8
 5833              		.cfi_offset 7, -8
 5834              		.cfi_offset 14, -4
 5835 0002 84B0     		sub	sp, sp, #16
 5836              	.LCFI246:
 5837              		.cfi_def_cfa_offset 24
 5838 0004 00AF     		add	r7, sp, #0
 5839              	.LCFI247:
 5840              		.cfi_def_cfa_register 7
 5841 0006 F860     		str	r0, [r7, #12]
 5842 0008 B0EE407A 		vmov.f32	s14, s0
 5843 000c F0EE607A 		vmov.f32	s15, s1
 5844 0010 87ED017A 		vstr.32	s14, [r7, #4]
 5845 0014 C7ED027A 		vstr.32	s15, [r7, #8]
  53:Inc/component.hpp ****         content_ = value;
 5846              		.loc 10 53 18
 5847 0018 FB68     		ldr	r3, [r7, #12]
 5848 001a 0433     		adds	r3, r3, #4
 5849 001c 3A1D     		adds	r2, r7, #4
 5850 001e 1146     		mov	r1, r2
 5851 0020 1846     		mov	r0, r3
 5852 0022 FFF7FEFF 		bl	_ZNSt4pairIffEaSERKS0_
  54:Inc/component.hpp ****         age_ = 0;
 5853              		.loc 10 54 14
 5854 0026 FB68     		ldr	r3, [r7, #12]
 5855 0028 0022     		movs	r2, #0
 5856 002a 1A60     		str	r2, [r3]
  55:Inc/component.hpp ****     }
 5857              		.loc 10 55 5
 5858 002c 00BF     		nop
 5859 002e 1037     		adds	r7, r7, #16
 5860              	.LCFI248:
 5861              		.cfi_def_cfa_offset 8
 5862 0030 BD46     		mov	sp, r7
 5863              	.LCFI249:
 5864              		.cfi_def_cfa_register 13
 5865              		@ sp needed
 5866 0032 80BD     		pop	{r7, pc}
 5867              		.cfi_endproc
 5868              	.LFE4923:
 5870              		.section	.text._ZN10OutputPortIfEaSEf,"axG",%progbits,_ZN10OutputPortIfEaSEf,comdat
 5871              		.align	1
 5872              		.weak	_ZN10OutputPortIfEaSEf
 5873              		.syntax unified
 5874              		.thumb
 5875              		.thumb_func
ARM GAS  /tmp/ccqv0h9S.s 			page 174


 5876              		.fpu fpv4-sp-d16
 5878              	_ZN10OutputPortIfEaSEf:
 5879              	.LFB4924:
  52:Inc/component.hpp ****         content_ = value;
 5880              		.loc 10 52 10
 5881              		.cfi_startproc
 5882              		@ args = 0, pretend = 0, frame = 8
 5883              		@ frame_needed = 1, uses_anonymous_args = 0
 5884              		@ link register save eliminated.
 5885 0000 80B4     		push	{r7}
 5886              	.LCFI250:
 5887              		.cfi_def_cfa_offset 4
 5888              		.cfi_offset 7, -4
 5889 0002 83B0     		sub	sp, sp, #12
 5890              	.LCFI251:
 5891              		.cfi_def_cfa_offset 16
 5892 0004 00AF     		add	r7, sp, #0
 5893              	.LCFI252:
 5894              		.cfi_def_cfa_register 7
 5895 0006 7860     		str	r0, [r7, #4]
 5896 0008 87ED000A 		vstr.32	s0, [r7]
  53:Inc/component.hpp ****         age_ = 0;
 5897              		.loc 10 53 18
 5898 000c 7B68     		ldr	r3, [r7, #4]
 5899 000e 3A68     		ldr	r2, [r7]	@ float
 5900 0010 5A60     		str	r2, [r3, #4]	@ float
  54:Inc/component.hpp ****     }
 5901              		.loc 10 54 14
 5902 0012 7B68     		ldr	r3, [r7, #4]
 5903 0014 0022     		movs	r2, #0
 5904 0016 1A60     		str	r2, [r3]
 5905              		.loc 10 55 5
 5906 0018 00BF     		nop
 5907 001a 0C37     		adds	r7, r7, #12
 5908              	.LCFI253:
 5909              		.cfi_def_cfa_offset 4
 5910 001c BD46     		mov	sp, r7
 5911              	.LCFI254:
 5912              		.cfi_def_cfa_register 13
 5913              		@ sp needed
 5914 001e 5DF8047B 		ldr	r7, [sp], #4
 5915              	.LCFI255:
 5916              		.cfi_restore 7
 5917              		.cfi_def_cfa_offset 0
 5918 0022 7047     		bx	lr
 5919              		.cfi_endproc
 5920              	.LFE4924:
 5922              		.section	.text._ZN9InputPortISt4pairIffEE10connect_toEP10OutputPortIS1_E,"axG",%progbits,_ZN9Input
 5923              		.align	1
 5924              		.weak	_ZN9InputPortISt4pairIffEE10connect_toEP10OutputPortIS1_E
 5925              		.syntax unified
 5926              		.thumb
 5927              		.thumb_func
 5928              		.fpu fpv4-sp-d16
 5930              	_ZN9InputPortISt4pairIffEE10connect_toEP10OutputPortIS1_E:
 5931              	.LFB4925:
  56:Inc/component.hpp **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 175


  57:Inc/component.hpp ****     /**
  58:Inc/component.hpp ****      * @brief Marks the contained value as outdated. The value is not actually
  59:Inc/component.hpp ****      * deleted and can still be accessed through some of the member functions
  60:Inc/component.hpp ****      * of this class.
  61:Inc/component.hpp ****      */
  62:Inc/component.hpp ****     void reset() {
  63:Inc/component.hpp ****         // This will eventually overflow to 0 so present() could
  64:Inc/component.hpp ****         // theoretically return a very old value however it is very likely that
  65:Inc/component.hpp ****         // the motor will be long disarmed by then.
  66:Inc/component.hpp ****         age_++;
  67:Inc/component.hpp ****     }
  68:Inc/component.hpp **** 
  69:Inc/component.hpp ****     /**
  70:Inc/component.hpp ****      * @brief Returns the value from this control loop iteration or std::nullopt
  71:Inc/component.hpp ****      * if the value was not yet set during this control loop iteration.
  72:Inc/component.hpp ****      */
  73:Inc/component.hpp ****     std::optional<T> present() {
  74:Inc/component.hpp ****         if (age_ == 0) {
  75:Inc/component.hpp ****             return content_;
  76:Inc/component.hpp ****         } else {
  77:Inc/component.hpp ****             return std::nullopt;
  78:Inc/component.hpp ****         }
  79:Inc/component.hpp ****     }
  80:Inc/component.hpp **** 
  81:Inc/component.hpp ****     /**
  82:Inc/component.hpp ****      * @brief Returns the value from exactly the previous control loop iteration.
  83:Inc/component.hpp ****      * 
  84:Inc/component.hpp ****      * If during the last iteration no value was set or the value was already
  85:Inc/component.hpp ****      * overwritten during this control loop iteration then this function returns
  86:Inc/component.hpp ****      * std::nullopt.
  87:Inc/component.hpp ****      */
  88:Inc/component.hpp ****     std::optional<T> previous() {
  89:Inc/component.hpp ****         if (age_ == 1) {
  90:Inc/component.hpp ****             return content_;
  91:Inc/component.hpp ****         } else {
  92:Inc/component.hpp ****             return std::nullopt;
  93:Inc/component.hpp ****         }
  94:Inc/component.hpp ****     }
  95:Inc/component.hpp **** 
  96:Inc/component.hpp ****     /**
  97:Inc/component.hpp ****      * @brief Returns the value contained in this output port with disregard of
  98:Inc/component.hpp ****      * when the value was set.
  99:Inc/component.hpp ****      * 
 100:Inc/component.hpp ****      * This function is thread-safe if load/store operations of T are atomic.
 101:Inc/component.hpp ****      */
 102:Inc/component.hpp ****     std::optional<T> any() {
 103:Inc/component.hpp ****         return content_;
 104:Inc/component.hpp ****     }
 105:Inc/component.hpp ****     
 106:Inc/component.hpp **** private:
 107:Inc/component.hpp ****     uint32_t age_ = 2; // Age in number of control loop iterations
 108:Inc/component.hpp ****     T content_;
 109:Inc/component.hpp **** };
 110:Inc/component.hpp **** 
 111:Inc/component.hpp **** /**
 112:Inc/component.hpp ****  * @brief An input port provides a value from the source to which it's configured.
 113:Inc/component.hpp ****  * 
ARM GAS  /tmp/ccqv0h9S.s 			page 176


 114:Inc/component.hpp ****  * The source can be one of:
 115:Inc/component.hpp ****  *  - an internally stored value
 116:Inc/component.hpp ****  *  - an externally stored value (referenced by a pointer)
 117:Inc/component.hpp ****  *  - an external OutputPort (referenced by a pointer)
 118:Inc/component.hpp ****  *  - none (all queries will return std::nullopt)
 119:Inc/component.hpp ****  * 
 120:Inc/component.hpp ****  * Member functions of this class are not thread-safe unless otherwise noted.
 121:Inc/component.hpp ****  */
 122:Inc/component.hpp **** template<typename T>
 123:Inc/component.hpp **** class InputPort {
 124:Inc/component.hpp **** public:
 125:Inc/component.hpp ****     void connect_to(OutputPort<T>* input_port) {
 5932              		.loc 10 125 10
 5933              		.cfi_startproc
 5934              		@ args = 0, pretend = 0, frame = 8
 5935              		@ frame_needed = 1, uses_anonymous_args = 0
 5936 0000 80B5     		push	{r7, lr}
 5937              	.LCFI256:
 5938              		.cfi_def_cfa_offset 8
 5939              		.cfi_offset 7, -8
 5940              		.cfi_offset 14, -4
 5941 0002 82B0     		sub	sp, sp, #8
 5942              	.LCFI257:
 5943              		.cfi_def_cfa_offset 16
 5944 0004 00AF     		add	r7, sp, #0
 5945              	.LCFI258:
 5946              		.cfi_def_cfa_register 7
 5947 0006 7860     		str	r0, [r7, #4]
 5948 0008 3960     		str	r1, [r7]
 126:Inc/component.hpp ****         content_ = input_port;
 5949              		.loc 10 126 18
 5950 000a 7B68     		ldr	r3, [r7, #4]
 5951 000c 3A46     		mov	r2, r7
 5952 000e 1146     		mov	r1, r2
 5953 0010 1846     		mov	r0, r3
 5954 0012 FFF7FEFF 		bl	_ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEEaSIRS5_EENSt9enable_ifIXaaaa14__exactly_onceI
 127:Inc/component.hpp ****     }
 5955              		.loc 10 127 5
 5956 0016 00BF     		nop
 5957 0018 0837     		adds	r7, r7, #8
 5958              	.LCFI259:
 5959              		.cfi_def_cfa_offset 8
 5960 001a BD46     		mov	sp, r7
 5961              	.LCFI260:
 5962              		.cfi_def_cfa_register 13
 5963              		@ sp needed
 5964 001c 80BD     		pop	{r7, pc}
 5965              		.cfi_endproc
 5966              	.LFE4925:
 5968              		.section	.text._ZN9InputPortIfE10connect_toEP10OutputPortIfE,"axG",%progbits,_ZN9InputPortIfE10con
 5969              		.align	1
 5970              		.weak	_ZN9InputPortIfE10connect_toEP10OutputPortIfE
 5971              		.syntax unified
 5972              		.thumb
 5973              		.thumb_func
 5974              		.fpu fpv4-sp-d16
 5976              	_ZN9InputPortIfE10connect_toEP10OutputPortIfE:
ARM GAS  /tmp/ccqv0h9S.s 			page 177


 5977              	.LFB4927:
 125:Inc/component.hpp ****         content_ = input_port;
 5978              		.loc 10 125 10
 5979              		.cfi_startproc
 5980              		@ args = 0, pretend = 0, frame = 8
 5981              		@ frame_needed = 1, uses_anonymous_args = 0
 5982 0000 80B5     		push	{r7, lr}
 5983              	.LCFI261:
 5984              		.cfi_def_cfa_offset 8
 5985              		.cfi_offset 7, -8
 5986              		.cfi_offset 14, -4
 5987 0002 82B0     		sub	sp, sp, #8
 5988              	.LCFI262:
 5989              		.cfi_def_cfa_offset 16
 5990 0004 00AF     		add	r7, sp, #0
 5991              	.LCFI263:
 5992              		.cfi_def_cfa_register 7
 5993 0006 7860     		str	r0, [r7, #4]
 5994 0008 3960     		str	r1, [r7]
 126:Inc/component.hpp ****         content_ = input_port;
 5995              		.loc 10 126 18
 5996 000a 7B68     		ldr	r3, [r7, #4]
 5997 000c 3A46     		mov	r2, r7
 5998 000e 1146     		mov	r1, r2
 5999 0010 1846     		mov	r0, r3
 6000 0012 FFF7FEFF 		bl	_ZNSt7variantIJfPfP10OutputPortIfEEEaSIRS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_a
 6001              		.loc 10 127 5
 6002 0016 00BF     		nop
 6003 0018 0837     		adds	r7, r7, #8
 6004              	.LCFI264:
 6005              		.cfi_def_cfa_offset 8
 6006 001a BD46     		mov	sp, r7
 6007              	.LCFI265:
 6008              		.cfi_def_cfa_register 13
 6009              		@ sp needed
 6010 001c 80BD     		pop	{r7, pc}
 6011              		.cfi_endproc
 6012              	.LFE4927:
 6014              		.section	.text._ZN10OutputPortIfE3anyEv,"axG",%progbits,_ZN10OutputPortIfE3anyEv,comdat
 6015              		.align	1
 6016              		.weak	_ZN10OutputPortIfE3anyEv
 6017              		.syntax unified
 6018              		.thumb
 6019              		.thumb_func
 6020              		.fpu fpv4-sp-d16
 6022              	_ZN10OutputPortIfE3anyEv:
 6023              	.LFB4929:
 102:Inc/component.hpp ****         return content_;
 6024              		.loc 10 102 22
 6025              		.cfi_startproc
 6026              		@ args = 0, pretend = 0, frame = 8
 6027              		@ frame_needed = 1, uses_anonymous_args = 0
 6028 0000 80B5     		push	{r7, lr}
 6029              	.LCFI266:
 6030              		.cfi_def_cfa_offset 8
 6031              		.cfi_offset 7, -8
 6032              		.cfi_offset 14, -4
ARM GAS  /tmp/ccqv0h9S.s 			page 178


 6033 0002 82B0     		sub	sp, sp, #8
 6034              	.LCFI267:
 6035              		.cfi_def_cfa_offset 16
 6036 0004 00AF     		add	r7, sp, #0
 6037              	.LCFI268:
 6038              		.cfi_def_cfa_register 7
 6039 0006 7860     		str	r0, [r7, #4]
 6040 0008 3960     		str	r1, [r7]
 103:Inc/component.hpp ****     }
 6041              		.loc 10 103 16
 6042 000a 3B68     		ldr	r3, [r7]
 6043 000c 0433     		adds	r3, r3, #4
 6044 000e 1946     		mov	r1, r3
 6045 0010 7868     		ldr	r0, [r7, #4]
 6046 0012 FFF7FEFF 		bl	_ZNSt8optionalIfEC1IRfLb1EEEOT_
 104:Inc/component.hpp ****     
 6047              		.loc 10 104 5
 6048 0016 7868     		ldr	r0, [r7, #4]
 6049 0018 0837     		adds	r7, r7, #8
 6050              	.LCFI269:
 6051              		.cfi_def_cfa_offset 8
 6052 001a BD46     		mov	sp, r7
 6053              	.LCFI270:
 6054              		.cfi_def_cfa_register 13
 6055              		@ sp needed
 6056 001c 80BD     		pop	{r7, pc}
 6057              		.cfi_endproc
 6058              	.LFE4929:
 6060              		.section	.text._ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv,"axG",
 6061              		.align	1
 6062              		.weak	_ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv
 6063              		.syntax unified
 6064              		.thumb
 6065              		.thumb_func
 6066              		.fpu fpv4-sp-d16
 6068              	_ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv:
 6069              	.LFB4931:
 6070              		.file 12 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // <optional> -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // Copyright (C) 2013-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 179


  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** /** @file include/optional
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****  *  This is a Standard C++ Library header.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****  */
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #ifndef _GLIBCXX_OPTIONAL
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #define _GLIBCXX_OPTIONAL 1
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #pragma GCC system_header
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #if __cplusplus >= 201703L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <utility>
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <type_traits>
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <exception>
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <new>
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <initializer_list>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <bits/exception_defines.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <bits/functional_hash.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <bits/enable_special_members.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #if __cplusplus > 201703L
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** # include <compare>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #endif
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** namespace std _GLIBCXX_VISIBILITY(default)
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** {
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @addtogroup utilities
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @{
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    */
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #define __cpp_lib_optional 201606L
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     class optional;
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /// Tag type to disengage optional objects.
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   struct nullopt_t
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   {
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // Do not user-declare default constructor at all for
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // optional_value = {} syntax to work.
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // nullopt_t() = delete;
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // Used for constructing nullopt.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     enum class _Construct { _Token };
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // Must be constexpr for nullopt_t to be literal.
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     explicit constexpr nullopt_t(_Construct) { }
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   };
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /// Tag to disengage optional objects.
ARM GAS  /tmp/ccqv0h9S.s 			page 180


  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   inline constexpr nullopt_t nullopt { nullopt_t::_Construct::_Token };
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @brief Exception class thrown when a disengaged optional object is
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  dereferenced.
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @ingroup exceptions
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    */
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   class bad_optional_access : public exception
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   {
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   public:
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     bad_optional_access() { }
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     virtual const char* what() const noexcept override
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return "bad optional access"; }
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     virtual ~bad_optional_access() noexcept = default;
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   };
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   void
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   __throw_bad_optional_access()
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   __attribute__((__noreturn__));
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // XXX Does not belong here.
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   inline void
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   __throw_bad_optional_access()
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // This class template manages construction/destruction of
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // the contained value for a std::optional.
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload_base
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Stored_type = remove_const_t<_Tp>;
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base() = default;
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_engaged(true)
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args>
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_Optional_payload_base(std::initializer_list<_Up> __il,
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			       _Args&&... __args)
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__il, std::forward<_Args>(__args)...),
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_engaged(true)
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructor used by _Optional_base copy constructor when the
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // contained value is not trivially copy constructible.
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(bool __engaged,
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			     const _Optional_payload_base& __other)
ARM GAS  /tmp/ccqv0h9S.s 			page 181


 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (__other._M_engaged)
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(__other._M_get());
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructor used by _Optional_base move constructor when the
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // contained value is not trivially move constructible.
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(bool __engaged,
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			     _Optional_payload_base&& __other)
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (__other._M_engaged)
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(std::move(__other._M_get()));
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy constructor is only used to when the contained value is
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // trivially copy constructible.
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(const _Optional_payload_base&) = default;
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Move constructor is only used to when the contained value is
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // trivially copy constructible.
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(_Optional_payload_base&&) = default;
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base&
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(const _Optional_payload_base&) = default;
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base&
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(_Optional_payload_base&&) = default;
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // used to perform non-trivial copy assignment.
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_copy_assign(const _Optional_payload_base& __other)
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         if (this->_M_engaged && __other._M_engaged)
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_get() = __other._M_get();
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         else
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    if (__other._M_engaged)
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_construct(__other._M_get());
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    else
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // used to perform non-trivial move assignment.
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_move_assign(_Optional_payload_base&& __other)
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (this->_M_engaged && __other._M_engaged)
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    if (__other._M_engaged)
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_construct(std::move(__other._M_get()));
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    else
ARM GAS  /tmp/ccqv0h9S.s 			page 182


 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       struct _Empty_byte { };
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, bool = is_trivially_destructible_v<_Up>>
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	union _Storage
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  constexpr _Storage() noexcept : _M_empty() { }
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename... _Args>
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(in_place_t, _Args&&... __args)
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename _Vp, typename... _Args>
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(__il, std::forward<_Args>(__args)...)
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _Empty_byte _M_empty;
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           _Up _M_value;
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	};
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	union _Storage<_Up, false>
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  constexpr _Storage() noexcept : _M_empty() { }
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename... _Args>
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(in_place_t, _Args&&... __args)
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename _Vp, typename... _Args>
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(__il, std::forward<_Args>(__args)...)
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  // User-provided destructor is needed when _Up has non-trivial dtor.
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ~_Storage() { }
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _Empty_byte _M_empty;
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           _Up _M_value;
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	};
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Storage<_Stored_type> _M_payload;
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       bool _M_engaged = false;
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         void
ARM GAS  /tmp/ccqv0h9S.s 			page 183


 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         _M_construct(_Args&&... __args)
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         {
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           ::new ((void *) std::__addressof(this->_M_payload))
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_engaged = true;
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         }
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_destroy() noexcept
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_engaged = false;
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_payload._M_value.~_Stored_type();
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // The _M_get() operations have _M_engaged as a precondition.
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // They exist to access the contained value with the appropriate
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // const-qualification, because _M_payload has had the const removed.
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() noexcept
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_payload._M_value; }
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() const noexcept
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_payload._M_value; }
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // _M_reset is a 'safe' operation with no precondition.
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_reset() noexcept
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (this->_M_engaged)
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_destroy();
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Class template that manages the payload for optionals.
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp,
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    bool /*_HasTrivialDestructor*/ =
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      is_trivially_destructible_v<_Tp>,
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    bool /*_HasTrivialCopy */ =
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      is_trivially_copy_assignable_v<_Tp>
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      && is_trivially_copy_constructible_v<_Tp>,
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    bool /*_HasTrivialMove */ =
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      is_trivially_move_assignable_v<_Tp>
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      && is_trivially_move_constructible_v<_Tp>>
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload;
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for potentially-constexpr optionals (trivial copy/move/destroy).
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, true, true>
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
ARM GAS  /tmp/ccqv0h9S.s 			page 184


 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial copy construction/assignment.
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, false, true>
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(_Optional_payload&&) = default;
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial copy assignment.
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(const _Optional_payload& __other)
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_copy_assign(__other);
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial move construction/assignment.
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, true, false>
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(const _Optional_payload&) = default;
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial move assignment.
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(_Optional_payload&& __other)
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_move_assign(std::move(__other));
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial copy and move assignment.
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, false, false>
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
ARM GAS  /tmp/ccqv0h9S.s 			page 185


 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial copy assignment.
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(const _Optional_payload& __other)
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_copy_assign(__other);
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial move assignment.
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(_Optional_payload&& __other)
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_move_assign(std::move(__other));
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial destructors.
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp, bool _Copy, bool _Move>
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, false, _Copy, _Move>
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload<_Tp, true, false, false>
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Base class implements all the constructors and assignment operators:
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload<_Tp, true, false, false>::_Optional_payload;
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(const _Optional_payload&) = default;
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(_Optional_payload&&) = default;
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Destructor needs to destroy the contained value:
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() { this->_M_reset(); }
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Common base class for _Optional_base<T> to avoid repeating these
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // member functions in each specialization.
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Dp>
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     class _Optional_base_impl
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     protected:
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Stored_type = remove_const_t<_Tp>;
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // The _M_construct operation has !_M_engaged as a precondition
 413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // while _M_destruct has _M_engaged as a precondition.
 414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	void
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_construct(_Args&&... __args)
 417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
ARM GAS  /tmp/ccqv0h9S.s 			page 186


 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ::new
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Stored_type(std::forward<_Args>(__args)...);
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_cast<_Dp*>(this)->_M_payload._M_engaged = true;
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       void
 426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_destruct() noexcept
 427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_destroy(); }
 428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // _M_reset is a 'safe' operation with no precondition.
 430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_reset() noexcept
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
 433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr bool _M_is_engaged() const noexcept
 6071              		.loc 12 434 22
 6072              		.cfi_startproc
 6073              		@ args = 0, pretend = 0, frame = 8
 6074              		@ frame_needed = 1, uses_anonymous_args = 0
 6075              		@ link register save eliminated.
 6076 0000 80B4     		push	{r7}
 6077              	.LCFI271:
 6078              		.cfi_def_cfa_offset 4
 6079              		.cfi_offset 7, -4
 6080 0002 83B0     		sub	sp, sp, #12
 6081              	.LCFI272:
 6082              		.cfi_def_cfa_offset 16
 6083 0004 00AF     		add	r7, sp, #0
 6084              	.LCFI273:
 6085              		.cfi_def_cfa_register 7
 6086 0006 7860     		str	r0, [r7, #4]
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 6087              		.loc 12 435 58
 6088 0008 7B68     		ldr	r3, [r7, #4]
 6089 000a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 6090              		.loc 12 435 70
 6091 000c 1846     		mov	r0, r3
 6092 000e 0C37     		adds	r7, r7, #12
 6093              	.LCFI274:
 6094              		.cfi_def_cfa_offset 4
 6095 0010 BD46     		mov	sp, r7
 6096              	.LCFI275:
 6097              		.cfi_def_cfa_register 13
 6098              		@ sp needed
 6099 0012 5DF8047B 		ldr	r7, [sp], #4
 6100              	.LCFI276:
 6101              		.cfi_restore 7
 6102              		.cfi_def_cfa_offset 0
 6103 0016 7047     		bx	lr
 6104              		.cfi_endproc
 6105              	.LFE4931:
 6107              		.section	.text._ZNOSt8optionalIfE8value_orIfEEfOT_,"axG",%progbits,_ZNOSt8optionalIfE8value_orIfEE
 6108              		.align	1
 6109              		.weak	_ZNOSt8optionalIfE8value_orIfEEfOT_
 6110              		.syntax unified
 6111              		.thumb
ARM GAS  /tmp/ccqv0h9S.s 			page 187


 6112              		.thumb_func
 6113              		.fpu fpv4-sp-d16
 6115              	_ZNOSt8optionalIfE8value_orIfEEfOT_:
 6116              	.LFB4930:
 436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // The _M_get operations have _M_engaged as a precondition.
 438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() noexcept
 440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__glibcxx_assert(this->_M_is_engaged());
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return static_cast<_Dp*>(this)->_M_payload._M_get();
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() const noexcept
 447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__glibcxx_assert(this->_M_is_engaged());
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return static_cast<const _Dp*>(this)->_M_payload._M_get();
 450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
 454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * @brief Class template that provides copy/move constructors of optional.
 455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * Such a separate base class template is necessary in order to
 457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * conditionally make copy/move constructors trivial.
 458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * When the contained value is trivially copy/move constructible,
 460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * the copy/move constructors of _Optional_base will invoke the
 461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * trivial copy/move constructor of _Optional_payload. Otherwise,
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * they will invoke _Optional_payload(bool, const _Optional_payload&)
 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * or _Optional_payload(bool, _Optional_payload&&) to initialize
 464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * the contained value, if copying/moving an engaged optional.
 465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * Whether the other special members are trivial is determined by the
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * _Optional_payload<_Tp> specialization used for the _M_payload member.
 468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * @see optional, _Enable_special_members
 470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     */
 471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp,
 472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	   bool = is_trivially_copy_constructible_v<_Tp>,
 473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	   bool = is_trivially_move_constructible_v<_Tp>>
 474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base
 475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
ARM GAS  /tmp/ccqv0h9S.s 			page 188


 489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other)
 500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __other._M_payload)
 502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other)
 505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>)
 506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::move(__other._M_payload))
 508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base<_Tp, false, true>
 519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other)
 544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __other._M_payload)
ARM GAS  /tmp/ccqv0h9S.s 			page 189


 546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other) = default;
 549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base<_Tp, true, false>
 559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other) = default;
 584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other)
 586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>)
 587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::move(__other._M_payload))
 589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base<_Tp, true, true>
 600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
ARM GAS  /tmp/ccqv0h9S.s 			page 190


 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other) = default;
 625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other) = default;
 626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   class optional;
 636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     using __converts_from_optional =
 639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       __or_<is_constructible<_Tp, const optional<_Up>&>,
 640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_constructible<_Tp, optional<_Up>&>,
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_constructible<_Tp, const optional<_Up>&&>,
 642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_constructible<_Tp, optional<_Up>&&>,
 643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<const optional<_Up>&, _Tp>,
 644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<optional<_Up>&, _Tp>,
 645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<const optional<_Up>&&, _Tp>,
 646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<optional<_Up>&&, _Tp>>;
 647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     using __assigns_from_optional =
 650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       __or_<is_assignable<_Tp&, const optional<_Up>&>,
 651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_assignable<_Tp&, optional<_Up>&>,
 652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_assignable<_Tp&, const optional<_Up>&&>,
 653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_assignable<_Tp&, optional<_Up>&&>>;
 654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
 656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * @brief Class template for optional values.
 657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     */
 658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     class optional
ARM GAS  /tmp/ccqv0h9S.s 			page 191


 660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : private _Optional_base<_Tp>,
 661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       private _Enable_copy_move<
 662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Copy constructor.
 663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	is_copy_constructible_v<_Tp>,
 664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Copy assignment.
 665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__and_v<is_copy_constructible<_Tp>, is_copy_assignable<_Tp>>,
 666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Move constructor.
 667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	is_move_constructible_v<_Tp>,
 668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Move assignment.
 669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__and_v<is_move_constructible<_Tp>, is_move_assignable<_Tp>>,
 670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Unique tag type.
 671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional<_Tp>>
 672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       static_assert(!is_same_v<remove_cv_t<_Tp>, nullopt_t>);
 674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       static_assert(!is_same_v<remove_cv_t<_Tp>, in_place_t>);
 675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       static_assert(!is_reference_v<_Tp>);
 676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     private:
 678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Base = _Optional_base<_Tp>;
 679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // SFINAE helpers
 681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using __not_self = __not_<is_same<optional, __remove_cvref_t<_Up>>>;
 683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using __not_tag = __not_<is_same<in_place_t, __remove_cvref_t<_Up>>>;
 685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Cond>
 686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using _Requires = enable_if_t<__and_v<_Cond...>, bool>;
 687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     public:
 689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using value_type = _Tp;
 690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr optional() = default;
 692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr optional(nullopt_t) noexcept { }
 694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Converting constructors for engaged optionals.
 696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up = _Tp,
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_self<_Up>, __not_tag<_Up>,
 698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, _Up&&>,
 699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_convertible<_Up&&, _Tp>> = true>
 700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(_Up&& __t)
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up = _Tp,
 705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_self<_Up>, __not_tag<_Up>,
 706:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, _Up&&>,
 707:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<is_convertible<_Up&&, _Tp>>> = false>
 708:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 709:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(_Up&& __t)
 710:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _Base(std::in_place, std::forward<_Up>(__t)) { }
 711:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 712:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up,
 713:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_<is_same<_Tp, _Up>>,
 714:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, const _Up&>,
 715:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_convertible<const _Up&, _Tp>,
 716:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<__converts_from_optional<_Tp, _Up>>> = true>
ARM GAS  /tmp/ccqv0h9S.s 			page 192


 717:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 718:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(const optional<_Up>& __t)
 719:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 720:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 721:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(*__t);
 722:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 723:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 724:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up,
 725:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_<is_same<_Tp, _Up>>,
 726:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, const _Up&>,
 727:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<is_convertible<const _Up&, _Tp>>,
 728:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 __not_<__converts_from_optional<_Tp, _Up>>> = false>
 729:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 730:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(const optional<_Up>& __t)
 731:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 732:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 733:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(*__t);
 734:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 735:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 736:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template <typename _Up,
 737:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		_Requires<__not_<is_same<_Tp, _Up>>,
 738:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  is_constructible<_Tp, _Up&&>,
 739:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  is_convertible<_Up&&, _Tp>,
 740:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  __not_<__converts_from_optional<_Tp, _Up>>> = true>
 741:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 742:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(optional<_Up>&& __t)
 743:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 744:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 745:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(std::move(*__t));
 746:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 747:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 748:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template <typename _Up,
 749:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		_Requires<__not_<is_same<_Tp, _Up>>,
 750:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  is_constructible<_Tp, _Up&&>,
 751:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  __not_<is_convertible<_Up&&, _Tp>>,
 752:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			  __not_<__converts_from_optional<_Tp, _Up>>> = false>
 753:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 754:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(optional<_Up>&& __t)
 755:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 756:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__t)
 757:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    emplace(std::move(*__t));
 758:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 759:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 760:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 761:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<is_constructible<_Tp, _Args&&...>> = false>
 762:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 763:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(in_place_t, _Args&&... __args)
 764:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Args>(__args)...) { }
 765:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 766:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 767:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<is_constructible<_Tp,
 768:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					  initializer_list<_Up>&,
 769:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					  _Args&&...>> = false>
 770:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	explicit constexpr
 771:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(in_place_t, initializer_list<_Up> __il, _Args&&... __args)
 772:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, __il, std::forward<_Args>(__args)...) { }
 773:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 193


 774:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 775:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       optional&
 776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(nullopt_t) noexcept
 777:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_reset();
 779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 781:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 782:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up = _Tp>
 783:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<__and_v<__not_self<_Up>,
 784:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__and_<is_scalar<_Tp>,
 785:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					  is_same<_Tp, decay_t<_Up>>>>,
 786:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_constructible<_Tp, _Up>,
 787:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_assignable<_Tp&, _Up>>,
 788:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		    optional&>
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	operator=(_Up&& __u)
 790:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (this->_M_is_engaged())
 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 793:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_construct(std::forward<_Up>(__u));
 795:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return *this;
 797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 798:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 799:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 800:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,
 801:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_constructible<_Tp, const _Up&>,
 802:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_assignable<_Tp&, _Up>,
 803:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__converts_from_optional<_Tp, _Up>>,
 804:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__assigns_from_optional<_Tp, _Up>>>,
 805:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		    optional&>
 806:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	operator=(const optional<_Up>& __u)
 807:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 808:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__u)
 809:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
 810:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      if (this->_M_is_engaged())
 811:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_get() = *__u;
 812:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      else
 813:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_construct(*__u);
 814:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 815:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 816:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
 817:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 818:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 819:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return *this;
 820:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 821:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 822:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 823:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         enable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,
 824:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_constructible<_Tp, _Up>,
 825:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    is_assignable<_Tp&, _Up>,
 826:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__converts_from_optional<_Tp, _Up>>,
 827:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			    __not_<__assigns_from_optional<_Tp, _Up>>>,
 828:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		    optional&>
 829:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	operator=(optional<_Up>&& __u)
 830:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
ARM GAS  /tmp/ccqv0h9S.s 			page 194


 831:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  if (__u)
 832:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
 833:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      if (this->_M_is_engaged())
 834:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_get() = std::move(*__u);
 835:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      else
 836:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		this->_M_construct(std::move(*__u));
 837:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 838:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  else
 839:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    {
 840:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 841:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    }
 842:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 843:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return *this;
 844:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 845:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 846:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 847:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<is_constructible_v<_Tp, _Args&&...>, _Tp&>
 848:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	emplace(_Args&&... __args)
 849:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 850:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_reset();
 851:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(std::forward<_Args>(__args)...);
 852:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_get();
 853:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 854:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 855:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args>
 856:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&,
 857:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 				       _Args&&...>, _Tp&>
 858:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
 859:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 860:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_reset();
 861:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(__il, std::forward<_Args>(__args)...);
 862:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_get();
 863:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 864:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 865:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Destructor is implicit, implemented in _Optional_base.
 866:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 867:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Swap.
 868:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       void
 869:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       swap(optional& __other)
 870:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>
 871:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       && is_nothrow_swappable_v<_Tp>)
 872:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 873:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using std::swap;
 874:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 875:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (this->_M_is_engaged() && __other._M_is_engaged())
 876:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  swap(this->_M_get(), __other._M_get());
 877:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else if (this->_M_is_engaged())
 878:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 879:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    __other._M_construct(std::move(this->_M_get()));
 880:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_destruct();
 881:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 882:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else if (__other._M_is_engaged())
 883:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 884:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    this->_M_construct(std::move(__other._M_get()));
 885:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    __other._M_destruct();
 886:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 887:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
ARM GAS  /tmp/ccqv0h9S.s 			page 195


 888:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 889:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Observers.
 890:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp*
 891:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator->() const
 892:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::__addressof(this->_M_get()); }
 893:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 894:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp*
 895:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator->()
 896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::__addressof(this->_M_get()); }
 897:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 898:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 899:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*() const&
 900:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_get(); }
 901:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 902:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*()&
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_get(); }
 905:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 906:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&&
 907:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*()&&
 908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::move(this->_M_get()); }
 909:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 910:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&&
 911:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator*() const&&
 912:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::move(this->_M_get()); }
 913:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 914:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr explicit operator bool() const noexcept
 915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 916:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr bool has_value() const noexcept
 918:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_is_engaged(); }
 919:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 920:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 921:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value() const&
 922:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 923:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 924:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? this->_M_get()
 925:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), this->_M_get());
 926:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 927:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 928:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 929:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value()&
 930:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 931:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 932:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? this->_M_get()
 933:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), this->_M_get());
 934:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 935:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 936:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&&
 937:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value()&&
 938:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 939:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 940:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? std::move(this->_M_get())
 941:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 942:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 943:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 944:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&&
ARM GAS  /tmp/ccqv0h9S.s 			page 196


 945:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       value() const&&
 946:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 947:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return this->_M_is_engaged()
 948:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ? std::move(this->_M_get())
 949:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 950:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 951:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 952:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 953:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr _Tp
 954:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	value_or(_Up&& __u) const&
 955:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 956:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_copy_constructible_v<_Tp>);
 957:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_convertible_v<_Up&&, _Tp>);
 958:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 959:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_is_engaged()
 960:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    ? this->_M_get() : static_cast<_Tp>(std::forward<_Up>(__u));
 961:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 962:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 963:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 964:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr _Tp
 965:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	value_or(_Up&& __u) &&
 6117              		.loc 12 965 2
 6118              		.cfi_startproc
 6119              		@ args = 0, pretend = 0, frame = 8
 6120              		@ frame_needed = 1, uses_anonymous_args = 0
 6121 0000 80B5     		push	{r7, lr}
 6122              	.LCFI277:
 6123              		.cfi_def_cfa_offset 8
 6124              		.cfi_offset 7, -8
 6125              		.cfi_offset 14, -4
 6126 0002 82B0     		sub	sp, sp, #8
 6127              	.LCFI278:
 6128              		.cfi_def_cfa_offset 16
 6129 0004 00AF     		add	r7, sp, #0
 6130              	.LCFI279:
 6131              		.cfi_def_cfa_register 7
 6132 0006 7860     		str	r0, [r7, #4]
 6133 0008 3960     		str	r1, [r7]
 966:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 967:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_move_constructible_v<_Tp>);
 968:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_assert(is_convertible_v<_Up&&, _Tp>);
 969:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 970:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  return this->_M_is_engaged()
 6134              		.loc 12 970 30
 6135 000a 7868     		ldr	r0, [r7, #4]
 6136 000c FFF7FEFF 		bl	_ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv
 6137 0010 0346     		mov	r3, r0
 971:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    ? std::move(this->_M_get())
 6138              		.loc 12 971 6
 6139 0012 002B     		cmp	r3, #0
 6140 0014 09D0     		beq	.L228
 6141              		.loc 12 971 17 discriminator 1
 6142 0016 7868     		ldr	r0, [r7, #4]
 6143 0018 FFF7FEFF 		bl	_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv
 6144 001c 0346     		mov	r3, r0
 6145 001e 1846     		mov	r0, r3
 6146 0020 FFF7FEFF 		bl	_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_
ARM GAS  /tmp/ccqv0h9S.s 			page 197


 6147 0024 0346     		mov	r3, r0
 6148              		.loc 12 971 6 discriminator 1
 6149 0026 1B68     		ldr	r3, [r3]	@ float
 972:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : static_cast<_Tp>(std::forward<_Up>(__u));
 6150              		.loc 12 972 47 discriminator 1
 6151 0028 04E0     		b	.L230
 6152              	.L228:
 6153              		.loc 12 972 42 discriminator 2
 6154 002a 3868     		ldr	r0, [r7]
 6155 002c FFF7FEFF 		bl	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 6156 0030 0346     		mov	r3, r0
 971:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    ? std::move(this->_M_get())
 6157              		.loc 12 971 6 discriminator 2
 6158 0032 1B68     		ldr	r3, [r3]	@ float
 6159              	.L230:
 6160              		.loc 12 972 47 discriminator 1
 6161 0034 07EE903A 		vmov	s15, r3
 973:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 6162              		.loc 12 973 2 discriminator 1
 6163 0038 B0EE670A 		vmov.f32	s0, s15
 6164 003c 0837     		adds	r7, r7, #8
 6165              	.LCFI280:
 6166              		.cfi_def_cfa_offset 8
 6167 003e BD46     		mov	sp, r7
 6168              	.LCFI281:
 6169              		.cfi_def_cfa_register 13
 6170              		@ sp needed
 6171 0040 80BD     		pop	{r7, pc}
 6172              		.cfi_endproc
 6173              	.LFE4930:
 6175              		.section	.text._ZN10OutputPortIfE7presentEv,"axG",%progbits,_ZN10OutputPortIfE7presentEv,comdat
 6176              		.align	1
 6177              		.weak	_ZN10OutputPortIfE7presentEv
 6178              		.syntax unified
 6179              		.thumb
 6180              		.thumb_func
 6181              		.fpu fpv4-sp-d16
 6183              	_ZN10OutputPortIfE7presentEv:
 6184              	.LFB4932:
  73:Inc/component.hpp ****         if (age_ == 0) {
 6185              		.loc 10 73 22
 6186              		.cfi_startproc
 6187              		@ args = 0, pretend = 0, frame = 8
 6188              		@ frame_needed = 1, uses_anonymous_args = 0
 6189 0000 80B5     		push	{r7, lr}
 6190              	.LCFI282:
 6191              		.cfi_def_cfa_offset 8
 6192              		.cfi_offset 7, -8
 6193              		.cfi_offset 14, -4
 6194 0002 82B0     		sub	sp, sp, #8
 6195              	.LCFI283:
 6196              		.cfi_def_cfa_offset 16
 6197 0004 00AF     		add	r7, sp, #0
 6198              	.LCFI284:
 6199              		.cfi_def_cfa_register 7
 6200 0006 7860     		str	r0, [r7, #4]
 6201 0008 3960     		str	r1, [r7]
ARM GAS  /tmp/ccqv0h9S.s 			page 198


  74:Inc/component.hpp ****             return content_;
 6202              		.loc 10 74 13
 6203 000a 3B68     		ldr	r3, [r7]
 6204 000c 1B68     		ldr	r3, [r3]
  74:Inc/component.hpp ****             return content_;
 6205              		.loc 10 74 9
 6206 000e 002B     		cmp	r3, #0
 6207 0010 06D1     		bne	.L232
  75:Inc/component.hpp ****         } else {
 6208              		.loc 10 75 20
 6209 0012 3B68     		ldr	r3, [r7]
 6210 0014 0433     		adds	r3, r3, #4
 6211 0016 1946     		mov	r1, r3
 6212 0018 7868     		ldr	r0, [r7, #4]
 6213 001a FFF7FEFF 		bl	_ZNSt8optionalIfEC1IRfLb1EEEOT_
 6214 001e 03E0     		b	.L233
 6215              	.L232:
  77:Inc/component.hpp ****         }
 6216              		.loc 10 77 25
 6217 0020 1146     		mov	r1, r2
 6218 0022 7868     		ldr	r0, [r7, #4]
 6219 0024 FFF7FEFF 		bl	_ZNSt8optionalIfEC1ESt9nullopt_t
 6220              	.L233:
  79:Inc/component.hpp **** 
 6221              		.loc 10 79 5
 6222 0028 7868     		ldr	r0, [r7, #4]
 6223 002a 0837     		adds	r7, r7, #8
 6224              	.LCFI285:
 6225              		.cfi_def_cfa_offset 8
 6226 002c BD46     		mov	sp, r7
 6227              	.LCFI286:
 6228              		.cfi_def_cfa_register 13
 6229              		@ sp needed
 6230 002e 80BD     		pop	{r7, pc}
 6231              		.cfi_endproc
 6232              	.LFE4932:
 6234              		.section	.text._ZNOSt8optionalIfEdeEv,"axG",%progbits,_ZNOSt8optionalIfEdeEv,comdat
 6235              		.align	1
 6236              		.weak	_ZNOSt8optionalIfEdeEv
 6237              		.syntax unified
 6238              		.thumb
 6239              		.thumb_func
 6240              		.fpu fpv4-sp-d16
 6242              	_ZNOSt8optionalIfEdeEv:
 6243              	.LFB4933:
 907:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return std::move(this->_M_get()); }
 6244              		.loc 12 907 7
 6245              		.cfi_startproc
 6246              		@ args = 0, pretend = 0, frame = 8
 6247              		@ frame_needed = 1, uses_anonymous_args = 0
 6248 0000 80B5     		push	{r7, lr}
 6249              	.LCFI287:
 6250              		.cfi_def_cfa_offset 8
 6251              		.cfi_offset 7, -8
 6252              		.cfi_offset 14, -4
 6253 0002 82B0     		sub	sp, sp, #8
 6254              	.LCFI288:
ARM GAS  /tmp/ccqv0h9S.s 			page 199


 6255              		.cfi_def_cfa_offset 16
 6256 0004 00AF     		add	r7, sp, #0
 6257              	.LCFI289:
 6258              		.cfi_def_cfa_register 7
 6259 0006 7860     		str	r0, [r7, #4]
 908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6260              		.loc 12 908 25
 6261 0008 7868     		ldr	r0, [r7, #4]
 6262 000a FFF7FEFF 		bl	_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv
 6263 000e 0346     		mov	r3, r0
 6264 0010 1846     		mov	r0, r3
 6265 0012 FFF7FEFF 		bl	_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_
 6266 0016 0346     		mov	r3, r0
 908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6267              		.loc 12 908 43
 6268 0018 1846     		mov	r0, r3
 6269 001a 0837     		adds	r7, r7, #8
 6270              	.LCFI290:
 6271              		.cfi_def_cfa_offset 8
 6272 001c BD46     		mov	sp, r7
 6273              	.LCFI291:
 6274              		.cfi_def_cfa_register 13
 6275              		@ sp needed
 6276 001e 80BD     		pop	{r7, pc}
 6277              		.cfi_endproc
 6278              	.LFE4933:
 6280              		.section	.text._ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE,"axG",%progbits,_ZSt7forwardIfE
 6281              		.align	1
 6282              		.weak	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
 6283              		.syntax unified
 6284              		.thumb
 6285              		.thumb_func
 6286              		.fpu fpv4-sp-d16
 6288              	_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE:
 6289              	.LFB4972:
 6290              		.file 13 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Copyright (C) 2007-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
ARM GAS  /tmp/ccqv0h9S.s 			page 200


  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** /** @file bits/move.h
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****  */
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #ifndef _MOVE_H
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #define _MOVE_H 1
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #include <bits/c++config.h>
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #if __cplusplus < 201103L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** # include <bits/concept_check.h>
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #endif
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** {
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief Same as C++11 std::addressof
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @ingroup utilities
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return __builtin_addressof(__r); }
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #if __cplusplus >= 201103L
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** } // namespace
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** {
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @addtogroup utilities
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @{
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief  Forward an lvalue.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @return The parameter cast to the specified type.
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     constexpr _Tp&&
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 6291              		.loc 13 76 5
 6292              		.cfi_startproc
ARM GAS  /tmp/ccqv0h9S.s 			page 201


 6293              		@ args = 0, pretend = 0, frame = 8
 6294              		@ frame_needed = 1, uses_anonymous_args = 0
 6295              		@ link register save eliminated.
 6296 0000 80B4     		push	{r7}
 6297              	.LCFI292:
 6298              		.cfi_def_cfa_offset 4
 6299              		.cfi_offset 7, -4
 6300 0002 83B0     		sub	sp, sp, #12
 6301              	.LCFI293:
 6302              		.cfi_def_cfa_offset 16
 6303 0004 00AF     		add	r7, sp, #0
 6304              	.LCFI294:
 6305              		.cfi_def_cfa_register 7
 6306 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 6307              		.loc 13 77 36
 6308 0008 7B68     		ldr	r3, [r7, #4]
 6309              		.loc 13 77 39
 6310 000a 1846     		mov	r0, r3
 6311 000c 0C37     		adds	r7, r7, #12
 6312              	.LCFI295:
 6313              		.cfi_def_cfa_offset 4
 6314 000e BD46     		mov	sp, r7
 6315              	.LCFI296:
 6316              		.cfi_def_cfa_register 13
 6317              		@ sp needed
 6318 0010 5DF8047B 		ldr	r7, [sp], #4
 6319              	.LCFI297:
 6320              		.cfi_restore 7
 6321              		.cfi_def_cfa_offset 0
 6322 0014 7047     		bx	lr
 6323              		.cfi_endproc
 6324              	.LFE4972:
 6326              		.section	.text._ZNSt4pairIffEaSERKS0_,"axG",%progbits,_ZNSt4pairIffEaSERKS0_,comdat
 6327              		.align	1
 6328              		.weak	_ZNSt4pairIffEaSERKS0_
 6329              		.syntax unified
 6330              		.thumb
 6331              		.thumb_func
 6332              		.fpu fpv4-sp-d16
 6334              	_ZNSt4pairIffEaSERKS0_:
 6335              	.LFB4976:
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && !_PCCP::template
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	explicit constexpr pair(_U1&& __x, _U2&& __y)
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && _PCCFP<_U1, _U2>::template
ARM GAS  /tmp/ccqv0h9S.s 			page 202


 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	constexpr pair(pair<_U1, _U2>&& __p)
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	  second(std::forward<_U2>(__p.second)) { }
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && !_PCCFP<_U1, _U2>::template
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	explicit constexpr pair(pair<_U1, _U2>&& __p)
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	  second(std::forward<_U2>(__p.second)) { }
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename... _Args1, typename... _Args2>
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	_GLIBCXX20_CONSTEXPR
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _GLIBCXX20_CONSTEXPR pair&
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       operator=(typename conditional<
 6336              		.loc 11 390 7
 6337              		.cfi_startproc
 6338              		@ args = 0, pretend = 0, frame = 8
 6339              		@ frame_needed = 1, uses_anonymous_args = 0
 6340              		@ link register save eliminated.
 6341 0000 80B4     		push	{r7}
 6342              	.LCFI298:
 6343              		.cfi_def_cfa_offset 4
 6344              		.cfi_offset 7, -4
 6345 0002 83B0     		sub	sp, sp, #12
 6346              	.LCFI299:
 6347              		.cfi_def_cfa_offset 16
 6348 0004 00AF     		add	r7, sp, #0
 6349              	.LCFI300:
 6350              		.cfi_def_cfa_register 7
 6351 0006 7860     		str	r0, [r7, #4]
 6352 0008 3960     		str	r1, [r7]
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		       is_copy_assignable<_T2>>::value,
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		const pair&, const __nonesuch&>::type __p)
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	first = __p.first;
 6353              		.loc 11 395 14
 6354 000a 3B68     		ldr	r3, [r7]
 6355 000c 1A68     		ldr	r2, [r3]	@ float
 6356              		.loc 11 395 8
 6357 000e 7B68     		ldr	r3, [r7, #4]
 6358 0010 1A60     		str	r2, [r3]	@ float
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = __p.second;
 6359              		.loc 11 396 15
 6360 0012 3B68     		ldr	r3, [r7]
 6361 0014 5A68     		ldr	r2, [r3, #4]	@ float
 6362              		.loc 11 396 9
 6363 0016 7B68     		ldr	r3, [r7, #4]
 6364 0018 5A60     		str	r2, [r3, #4]	@ float
ARM GAS  /tmp/ccqv0h9S.s 			page 203


 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return *this;
 6365              		.loc 11 397 10
 6366 001a 7B68     		ldr	r3, [r7, #4]
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 6367              		.loc 11 398 7
 6368 001c 1846     		mov	r0, r3
 6369 001e 0C37     		adds	r7, r7, #12
 6370              	.LCFI301:
 6371              		.cfi_def_cfa_offset 4
 6372 0020 BD46     		mov	sp, r7
 6373              	.LCFI302:
 6374              		.cfi_def_cfa_register 13
 6375              		@ sp needed
 6376 0022 5DF8047B 		ldr	r7, [sp], #4
 6377              	.LCFI303:
 6378              		.cfi_restore 7
 6379              		.cfi_def_cfa_offset 0
 6380 0026 7047     		bx	lr
 6381              		.cfi_endproc
 6382              	.LFE4976:
 6384              		.section	.text._ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE5indexEv,"axG",%progbits,_ZNKSt7
 6385              		.align	1
 6386              		.weak	_ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE5indexEv
 6387              		.syntax unified
 6388              		.thumb
 6389              		.thumb_func
 6390              		.fpu fpv4-sp-d16
 6392              	_ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE5indexEv:
 6393              	.LFB4978:
1285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     class variant
1288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : private __detail::__variant::_Variant_base<_Types...>,
1289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       private _Enable_default_constructor<
1290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_default_ctor,
1291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  variant<_Types...>>,
1292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       private _Enable_copy_move<
1293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_copy_ctor,
1294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_copy_assign,
1295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_move_ctor,
1296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_move_assign,
1297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant<_Types...>>
1298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     private:
1300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _UTypes, typename _Tp>
1301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend decltype(auto) __variant_cast(_Tp&&);
1302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Variant, typename... _Args>
1303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend void __variant_construct_by_index(_Variant& __v,
1304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						 _Args&&... __args);
1305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(sizeof...(_Types) > 0,
1307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "variant must have at least one alternative");
1308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!(std::is_reference_v<_Types> || ...),
1309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "variant must have no reference alternative");
1310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!(std::is_void_v<_Types> || ...),
1311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "variant must have no void alternative");
1312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccqv0h9S.s 			page 204


1313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = __detail::__variant::_Variant_base<_Types...>;
1314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Default_ctor_enabler =
1315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Enable_default_constructor<
1316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __detail::__variant::_Traits<_Types...>::_S_default_ctor,
1317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    variant<_Types...>>;
1318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr bool __not_self
1321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  = !is_same_v<__remove_cvref_t<_Tp>, variant>;
1322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr bool
1325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__exactly_once = __detail::__variant::__exactly_once<_Tp, _Types...>;
1326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr size_t __accepted_index
1329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  = __detail::__variant::__accepted_index<_Tp, variant>::value;
1330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename = enable_if_t<(_Np < sizeof...(_Types))>>
1332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	using __to_type = variant_alternative_t<_Np, variant>;
1333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename = enable_if_t<__not_self<_Tp>>>
1335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	using __accepted_type = __to_type<__accepted_index<_Tp>>;
1336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr size_t __index_of =
1339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __detail::__variant::__index_of_v<_Tp, _Types...>;
1340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Traits = __detail::__variant::_Traits<_Types...>;
1342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __is_in_place_tag : false_type { };
1345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __is_in_place_tag<in_place_type_t<_Tp>> : true_type { };
1347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np>
1348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __is_in_place_tag<in_place_index_t<_Np>> : true_type { };
1349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr bool __not_in_place_tag
1352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  = !__is_in_place_tag<__remove_cvref_t<_Tp>>::value;
1353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     public:
1355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant() = default;
1356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant(const variant& __rhs) = default;
1357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant(variant&&) = default;
1358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant& operator=(const variant&) = default;
1359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant& operator=(variant&&) = default;
1360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ~variant() = default;
1361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp,
1363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<sizeof...(_Types) != 0>,
1364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__not_in_place_tag<_Tp>>,
1365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename _Tj = __accepted_type<_Tp&&>,
1366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tj>
1367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				      && is_constructible_v<_Tj, _Tp>>>
1368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
1369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(_Tp&& __t)
ARM GAS  /tmp/ccqv0h9S.s 			page 205


1370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	noexcept(is_nothrow_constructible_v<_Tj, _Tp>)
1371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: variant(in_place_index<__accepted_index<_Tp>>,
1372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Tp>(__t))
1373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename... _Args,
1376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tp>
1377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				      && is_constructible_v<_Tp, _Args...>>>
1378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_type_t<_Tp>, _Args&&... __args)
1380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: variant(in_place_index<__index_of<_Tp>>,
1381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...)
1382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename _Up, typename... _Args,
1385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tp>
1386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				      && is_constructible_v<_Tp,
1387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					   initializer_list<_Up>&, _Args...>>>
1388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_type_t<_Tp>, initializer_list<_Up> __il,
1390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Args&&... __args)
1391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: variant(in_place_index<__index_of<_Tp>>, __il,
1392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...)
1393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args,
1396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename _Tp = __to_type<_Np>,
1397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<is_constructible_v<_Tp, _Args...>>>
1398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_index_t<_Np>, _Args&&... __args)
1400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(in_place_index<_Np>, std::forward<_Args>(__args)...),
1401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Default_ctor_enabler(_Enable_default_constructor_tag{})
1402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Up, typename... _Args,
1405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename _Tp = __to_type<_Np>,
1406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<is_constructible_v<_Tp,
1407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 							 initializer_list<_Up>&,
1408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 							 _Args...>>>
1409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_index_t<_Np>, initializer_list<_Up> __il,
1411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Args&&... __args)
1412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(in_place_index<_Np>, __il, std::forward<_Args>(__args)...),
1413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Default_ctor_enabler(_Enable_default_constructor_tag{})
1414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<__exactly_once<__accepted_type<_Tp&&>>
1418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    && is_constructible_v<__accepted_type<_Tp&&>, _Tp>
1419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    && is_assignable_v<__accepted_type<_Tp&&>&, _Tp>,
1420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    variant&>
1421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	operator=(_Tp&& __rhs)
1422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	noexcept(is_nothrow_assignable_v<__accepted_type<_Tp&&>&, _Tp>
1423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		 && is_nothrow_constructible_v<__accepted_type<_Tp&&>, _Tp>)
1424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  constexpr auto __index = __accepted_index<_Tp>;
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if (index() == __index)
ARM GAS  /tmp/ccqv0h9S.s 			page 206


1427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
1428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      using _Tj = __accepted_type<_Tp&&>;
1431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      if constexpr (is_nothrow_constructible_v<_Tj, _Tp>
1432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			    || !is_nothrow_move_constructible_v<_Tj>)
1433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		this->emplace<__index>(std::forward<_Tp>(__rhs));
1434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      else
1435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		operator=(variant(std::forward<_Tp>(__rhs)));
1436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return *this;
1438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename... _Args>
1441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<_Tp, _Args...> && __exactly_once<_Tp>,
1442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    _Tp&>
1443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(_Args&&... __args)
1444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  constexpr size_t __index = __index_of<_Tp>;
1446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return this->emplace<__index>(std::forward<_Args>(__args)...);
1447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename _Up, typename... _Args>
1450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>
1451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    && __exactly_once<_Tp>,
1452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    _Tp&>
1453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
1454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  constexpr size_t __index = __index_of<_Tp>;
1456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return this->emplace<__index>(__il, std::forward<_Args>(__args)...);
1457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
1460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,
1461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				       _Args...>,
1462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    variant_alternative_t<_Np, variant>&>
1463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(_Args&&... __args)
1464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  static_assert(_Np < sizeof...(_Types),
1466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			"The index must be in [0, number of alternatives)");
1467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  using type = variant_alternative_t<_Np, variant>;
1468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // Provide the strong exception-safety guarantee when possible,
1469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // to avoid becoming valueless.
1470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (is_nothrow_constructible_v<type, _Args...>)
1471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this,
1474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...);
1475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else if constexpr (is_scalar_v<type>)
1477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This might invoke a potentially-throwing conversion operator:
1479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      const type __tmp(std::forward<_Args>(__args)...);
1480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // But these steps won't throw:
1481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this, __tmp);
1483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
ARM GAS  /tmp/ccqv0h9S.s 			page 207


1484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
1485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      && _Traits::_S_move_assign)
1486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This construction might throw:
1488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      variant __tmp(in_place_index<_Np>,
1489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			    std::forward<_Args>(__args)...);
1490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // But _Never_valueless_alt<type> means this won't:
1491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      *this = std::move(__tmp);
1492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This case only provides the basic exception-safety guarantee,
1496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // i.e. the variant can become valueless.
1497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __try
1499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant_construct_by_index<_Np>(*this,
1501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    std::forward<_Args>(__args)...);
1502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __catch (...)
1504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  this->_M_index = variant_npos;
1506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __throw_exception_again;
1507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::get<_Np>(*this);
1510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Up, typename... _Args>
1513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,
1514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				       initializer_list<_Up>&, _Args...>,
1515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    variant_alternative_t<_Np, variant>&>
1516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
1517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  static_assert(_Np < sizeof...(_Types),
1519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			"The index must be in [0, number of alternatives)");
1520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  using type = variant_alternative_t<_Np, variant>;
1521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // Provide the strong exception-safety guarantee when possible,
1522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // to avoid becoming valueless.
1523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (is_nothrow_constructible_v<type,
1524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						   initializer_list<_Up>&,
1525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						   _Args...>)
1526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this, __il,
1529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...);
1530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
1532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      && _Traits::_S_move_assign)
1533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This construction might throw:
1535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      variant __tmp(in_place_index<_Np>, __il,
1536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			    std::forward<_Args>(__args)...);
1537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // But _Never_valueless_alt<type> means this won't:
1538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      *this = std::move(__tmp);
1539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
ARM GAS  /tmp/ccqv0h9S.s 			page 208


1541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This case only provides the basic exception-safety guarantee,
1543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // i.e. the variant can become valueless.
1544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __try
1546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant_construct_by_index<_Np>(*this, __il,
1548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    std::forward<_Args>(__args)...);
1549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __catch (...)
1551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  this->_M_index = variant_npos;
1553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __throw_exception_again;
1554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::get<_Np>(*this);
1557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr bool valueless_by_exception() const noexcept
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return !this->_M_valid(); }
1561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr size_t index() const noexcept
 6394              		.loc 2 1562 24
 6395              		.cfi_startproc
 6396              		@ args = 0, pretend = 0, frame = 8
 6397              		@ frame_needed = 1, uses_anonymous_args = 0
 6398              		@ link register save eliminated.
 6399 0000 80B4     		push	{r7}
 6400              	.LCFI304:
 6401              		.cfi_def_cfa_offset 4
 6402              		.cfi_offset 7, -4
 6403 0002 83B0     		sub	sp, sp, #12
 6404              	.LCFI305:
 6405              		.cfi_def_cfa_offset 16
 6406 0004 00AF     		add	r7, sp, #0
 6407              	.LCFI306:
 6408              		.cfi_def_cfa_register 7
 6409 0006 7860     		str	r0, [r7, #4]
1563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
1564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	using __index_type = typename _Base::__index_type;
1565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (__detail::__variant::__never_valueless<_Types...>())
1566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return this->_M_index;
1567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
1568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return make_signed_t<__index_type>(this->_M_index);
 6410              		.loc 2 1568 45
 6411 0008 7B68     		ldr	r3, [r7, #4]
 6412 000a 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 6413              		.loc 2 1568 11
 6414 000c 5BB2     		sxtb	r3, r3
1569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else
1570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return size_t(__index_type(this->_M_index + 1)) - 1;
1571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 6415              		.loc 2 1571 7
 6416 000e 1846     		mov	r0, r3
 6417 0010 0C37     		adds	r7, r7, #12
 6418              	.LCFI307:
 6419              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccqv0h9S.s 			page 209


 6420 0012 BD46     		mov	sp, r7
 6421              	.LCFI308:
 6422              		.cfi_def_cfa_register 13
 6423              		@ sp needed
 6424 0014 5DF8047B 		ldr	r7, [sp], #4
 6425              	.LCFI309:
 6426              		.cfi_restore 7
 6427              		.cfi_def_cfa_offset 0
 6428 0018 7047     		bx	lr
 6429              		.cfi_endproc
 6430              	.LFE4978:
 6432              		.section	.text._ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEEaSIRS5_EENSt9enable_ifIXaaaa14__e
 6433              		.align	1
 6434              		.weak	_ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEEaSIRS5_EENSt9enable_ifIXaaaa14__exactly_on
 6435              		.syntax unified
 6436              		.thumb
 6437              		.thumb_func
 6438              		.fpu fpv4-sp-d16
 6440              	_ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEEaSIRS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt1
 6441              	.LFB4977:
1421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	noexcept(is_nothrow_assignable_v<__accepted_type<_Tp&&>&, _Tp>
 6442              		.loc 2 1421 2
 6443              		.cfi_startproc
 6444              		@ args = 0, pretend = 0, frame = 16
 6445              		@ frame_needed = 1, uses_anonymous_args = 0
 6446 0000 90B5     		push	{r4, r7, lr}
 6447              	.LCFI310:
 6448              		.cfi_def_cfa_offset 12
 6449              		.cfi_offset 4, -12
 6450              		.cfi_offset 7, -8
 6451              		.cfi_offset 14, -4
 6452 0002 85B0     		sub	sp, sp, #20
 6453              	.LCFI311:
 6454              		.cfi_def_cfa_offset 32
 6455 0004 00AF     		add	r7, sp, #0
 6456              	.LCFI312:
 6457              		.cfi_def_cfa_register 7
 6458 0006 7860     		str	r0, [r7, #4]
 6459 0008 3960     		str	r1, [r7]
1425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if (index() == __index)
 6460              		.loc 2 1425 19
 6461 000a 0223     		movs	r3, #2
 6462 000c FB60     		str	r3, [r7, #12]
 6463              	.LBB43:
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 6464              		.loc 2 1426 13
 6465 000e 7868     		ldr	r0, [r7, #4]
 6466 0010 FFF7FEFF 		bl	_ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE5indexEv
 6467 0014 0346     		mov	r3, r0
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 6468              		.loc 2 1426 16
 6469 0016 022B     		cmp	r3, #2
 6470 0018 0CBF     		ite	eq
 6471 001a 0123     		moveq	r3, #1
 6472 001c 0023     		movne	r3, #0
 6473 001e DBB2     		uxtb	r3, r3
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
ARM GAS  /tmp/ccqv0h9S.s 			page 210


 6474              		.loc 2 1426 4
 6475 0020 002B     		cmp	r3, #0
 6476 0022 0AD0     		beq	.L243
1427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 6477              		.loc 2 1427 50
 6478 0024 3868     		ldr	r0, [r7]
 6479 0026 FFF7FEFF 		bl	_ZSt7forwardIRP10OutputPortISt4pairIffEEEOT_RNSt16remove_referenceIS6_E4typeE
 6480 002a 0346     		mov	r3, r0
1427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 6481              		.loc 2 1427 31
 6482 002c 1C68     		ldr	r4, [r3]
1427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 6483              		.loc 2 1427 23
 6484 002e 7868     		ldr	r0, [r7, #4]
 6485 0030 FFF7FEFF 		bl	_ZSt3getILj2EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0
 6486 0034 0346     		mov	r3, r0
1427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 6487              		.loc 2 1427 31
 6488 0036 1C60     		str	r4, [r3]
 6489 0038 07E0     		b	.L244
 6490              	.L243:
 6491              	.LBB44:
1433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      else
 6492              		.loc 2 1433 25
 6493 003a 3868     		ldr	r0, [r7]
 6494 003c FFF7FEFF 		bl	_ZSt7forwardIRP10OutputPortISt4pairIffEEEOT_RNSt16remove_referenceIS6_E4typeE
 6495 0040 0346     		mov	r3, r0
 6496 0042 1946     		mov	r1, r3
 6497 0044 7868     		ldr	r0, [r7, #4]
 6498 0046 FFF7FEFF 		bl	_ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE7emplaceILj2EJRS5_EEENSt9enable_ifIX18is_cons
 6499              	.L244:
 6500              	.LBE44:
 6501              	.LBE43:
1437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 6502              		.loc 2 1437 12
 6503 004a 7B68     		ldr	r3, [r7, #4]
1438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 6504              		.loc 2 1438 2
 6505 004c 1846     		mov	r0, r3
 6506 004e 1437     		adds	r7, r7, #20
 6507              	.LCFI313:
 6508              		.cfi_def_cfa_offset 12
 6509 0050 BD46     		mov	sp, r7
 6510              	.LCFI314:
 6511              		.cfi_def_cfa_register 13
 6512              		@ sp needed
 6513 0052 90BD     		pop	{r4, r7, pc}
 6514              		.cfi_endproc
 6515              	.LFE4977:
 6517              		.section	.text._ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv,"axG",%progbits,_ZNKSt7variantIJfPfP1
 6518              		.align	1
 6519              		.weak	_ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv
 6520              		.syntax unified
 6521              		.thumb
 6522              		.thumb_func
 6523              		.fpu fpv4-sp-d16
 6525              	_ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv:
ARM GAS  /tmp/ccqv0h9S.s 			page 211


 6526              	.LFB4981:
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 6527              		.loc 2 1562 24
 6528              		.cfi_startproc
 6529              		@ args = 0, pretend = 0, frame = 8
 6530              		@ frame_needed = 1, uses_anonymous_args = 0
 6531              		@ link register save eliminated.
 6532 0000 80B4     		push	{r7}
 6533              	.LCFI315:
 6534              		.cfi_def_cfa_offset 4
 6535              		.cfi_offset 7, -4
 6536 0002 83B0     		sub	sp, sp, #12
 6537              	.LCFI316:
 6538              		.cfi_def_cfa_offset 16
 6539 0004 00AF     		add	r7, sp, #0
 6540              	.LCFI317:
 6541              		.cfi_def_cfa_register 7
 6542 0006 7860     		str	r0, [r7, #4]
1566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
 6543              		.loc 2 1566 17
 6544 0008 7B68     		ldr	r3, [r7, #4]
 6545 000a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 6546              		.loc 2 1571 7
 6547 000c 1846     		mov	r0, r3
 6548 000e 0C37     		adds	r7, r7, #12
 6549              	.LCFI318:
 6550              		.cfi_def_cfa_offset 4
 6551 0010 BD46     		mov	sp, r7
 6552              	.LCFI319:
 6553              		.cfi_def_cfa_register 13
 6554              		@ sp needed
 6555 0012 5DF8047B 		ldr	r7, [sp], #4
 6556              	.LCFI320:
 6557              		.cfi_restore 7
 6558              		.cfi_def_cfa_offset 0
 6559 0016 7047     		bx	lr
 6560              		.cfi_endproc
 6561              	.LFE4981:
 6563              		.section	.text._ZNSt7variantIJfPfP10OutputPortIfEEEaSIRS3_EENSt9enable_ifIXaaaa14__exactly_onceINS
 6564              		.align	1
 6565              		.weak	_ZNSt7variantIJfPfP10OutputPortIfEEEaSIRS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19varian
 6566              		.syntax unified
 6567              		.thumb
 6568              		.thumb_func
 6569              		.fpu fpv4-sp-d16
 6571              	_ZNSt7variantIJfPfP10OutputPortIfEEEaSIRS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alter
 6572              	.LFB4980:
1421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	noexcept(is_nothrow_assignable_v<__accepted_type<_Tp&&>&, _Tp>
 6573              		.loc 2 1421 2
 6574              		.cfi_startproc
 6575              		@ args = 0, pretend = 0, frame = 16
 6576              		@ frame_needed = 1, uses_anonymous_args = 0
 6577 0000 90B5     		push	{r4, r7, lr}
 6578              	.LCFI321:
 6579              		.cfi_def_cfa_offset 12
 6580              		.cfi_offset 4, -12
 6581              		.cfi_offset 7, -8
ARM GAS  /tmp/ccqv0h9S.s 			page 212


 6582              		.cfi_offset 14, -4
 6583 0002 85B0     		sub	sp, sp, #20
 6584              	.LCFI322:
 6585              		.cfi_def_cfa_offset 32
 6586 0004 00AF     		add	r7, sp, #0
 6587              	.LCFI323:
 6588              		.cfi_def_cfa_register 7
 6589 0006 7860     		str	r0, [r7, #4]
 6590 0008 3960     		str	r1, [r7]
1425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if (index() == __index)
 6591              		.loc 2 1425 19
 6592 000a 0223     		movs	r3, #2
 6593 000c FB60     		str	r3, [r7, #12]
 6594              	.LBB45:
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 6595              		.loc 2 1426 13
 6596 000e 7868     		ldr	r0, [r7, #4]
 6597 0010 FFF7FEFF 		bl	_ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv
 6598 0014 0346     		mov	r3, r0
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 6599              		.loc 2 1426 16
 6600 0016 022B     		cmp	r3, #2
 6601 0018 0CBF     		ite	eq
 6602 001a 0123     		moveq	r3, #1
 6603 001c 0023     		movne	r3, #0
 6604 001e DBB2     		uxtb	r3, r3
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 6605              		.loc 2 1426 4
 6606 0020 002B     		cmp	r3, #0
 6607 0022 0AD0     		beq	.L249
1427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 6608              		.loc 2 1427 50
 6609 0024 3868     		ldr	r0, [r7]
 6610 0026 FFF7FEFF 		bl	_ZSt7forwardIRP10OutputPortIfEEOT_RNSt16remove_referenceIS4_E4typeE
 6611 002a 0346     		mov	r3, r0
1427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 6612              		.loc 2 1427 31
 6613 002c 1C68     		ldr	r4, [r3]
1427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 6614              		.loc 2 1427 23
 6615 002e 7868     		ldr	r0, [r7, #4]
 6616 0030 FFF7FEFF 		bl	_ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_
 6617 0034 0346     		mov	r3, r0
1427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 6618              		.loc 2 1427 31
 6619 0036 1C60     		str	r4, [r3]
 6620 0038 07E0     		b	.L250
 6621              	.L249:
 6622              	.LBB46:
1433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      else
 6623              		.loc 2 1433 25
 6624 003a 3868     		ldr	r0, [r7]
 6625 003c FFF7FEFF 		bl	_ZSt7forwardIRP10OutputPortIfEEOT_RNSt16remove_referenceIS4_E4typeE
 6626 0040 0346     		mov	r3, r0
 6627 0042 1946     		mov	r1, r3
 6628 0044 7868     		ldr	r0, [r7, #4]
 6629 0046 FFF7FEFF 		bl	_ZNSt7variantIJfPfP10OutputPortIfEEE7emplaceILj2EJRS3_EEENSt9enable_ifIX18is_constructible_vINS
ARM GAS  /tmp/ccqv0h9S.s 			page 213


 6630              	.L250:
 6631              	.LBE46:
 6632              	.LBE45:
1437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 6633              		.loc 2 1437 12
 6634 004a 7B68     		ldr	r3, [r7, #4]
1438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 6635              		.loc 2 1438 2
 6636 004c 1846     		mov	r0, r3
 6637 004e 1437     		adds	r7, r7, #20
 6638              	.LCFI324:
 6639              		.cfi_def_cfa_offset 12
 6640 0050 BD46     		mov	sp, r7
 6641              	.LCFI325:
 6642              		.cfi_def_cfa_register 13
 6643              		@ sp needed
 6644 0052 90BD     		pop	{r4, r7, pc}
 6645              		.cfi_endproc
 6646              	.LFE4980:
 6648              		.section	.text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_,"axG",
 6649              		.align	1
 6650              		.weak	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_
 6651              		.syntax unified
 6652              		.thumb
 6653              		.thumb_func
 6654              		.fpu fpv4-sp-d16
 6656              	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_:
 6657              	.LFB4988:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 6658              		.loc 12 204 6
 6659              		.cfi_startproc
 6660              		@ args = 0, pretend = 0, frame = 16
 6661              		@ frame_needed = 1, uses_anonymous_args = 0
 6662 0000 80B5     		push	{r7, lr}
 6663              	.LCFI326:
 6664              		.cfi_def_cfa_offset 8
 6665              		.cfi_offset 7, -8
 6666              		.cfi_offset 14, -4
 6667 0002 84B0     		sub	sp, sp, #16
 6668              	.LCFI327:
 6669              		.cfi_def_cfa_offset 24
 6670 0004 00AF     		add	r7, sp, #0
 6671              	.LCFI328:
 6672              		.cfi_def_cfa_register 7
 6673 0006 F860     		str	r0, [r7, #12]
 6674 0008 3972     		strb	r1, [r7, #8]
 6675 000a 7A60     		str	r2, [r7, #4]
 6676              	.LBB47:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 6677              		.loc 12 205 36
 6678 000c 7868     		ldr	r0, [r7, #4]
 6679 000e FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 6680 0012 0346     		mov	r3, r0
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 6681              		.loc 12 205 47
 6682 0014 1A68     		ldr	r2, [r3]	@ float
 6683 0016 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccqv0h9S.s 			page 214


 6684 0018 1A60     		str	r2, [r3]	@ float
 6685              	.LBE47:
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6686              		.loc 12 206 8
 6687 001a FB68     		ldr	r3, [r7, #12]
 6688 001c 1846     		mov	r0, r3
 6689 001e 1037     		adds	r7, r7, #16
 6690              	.LCFI329:
 6691              		.cfi_def_cfa_offset 8
 6692 0020 BD46     		mov	sp, r7
 6693              	.LCFI330:
 6694              		.cfi_def_cfa_register 13
 6695              		@ sp needed
 6696 0022 80BD     		pop	{r7, pc}
 6697              		.cfi_endproc
 6698              	.LFE4988:
 6700              		.weak	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJRfEEESt10in_place_tDpOT_
 6701              		.thumb_set _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJRfEEESt10in_place_tDpOT_,_ZNSt22_Op
 6702              		.section	.text._ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE,"axG",%progbits,_ZSt7forwardIR
 6703              		.align	1
 6704              		.weak	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 6705              		.syntax unified
 6706              		.thumb
 6707              		.thumb_func
 6708              		.fpu fpv4-sp-d16
 6710              	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE:
 6711              	.LFB4990:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 6712              		.loc 13 76 5
 6713              		.cfi_startproc
 6714              		@ args = 0, pretend = 0, frame = 8
 6715              		@ frame_needed = 1, uses_anonymous_args = 0
 6716              		@ link register save eliminated.
 6717 0000 80B4     		push	{r7}
 6718              	.LCFI331:
 6719              		.cfi_def_cfa_offset 4
 6720              		.cfi_offset 7, -4
 6721 0002 83B0     		sub	sp, sp, #12
 6722              	.LCFI332:
 6723              		.cfi_def_cfa_offset 16
 6724 0004 00AF     		add	r7, sp, #0
 6725              	.LCFI333:
 6726              		.cfi_def_cfa_register 7
 6727 0006 7860     		str	r0, [r7, #4]
 6728              		.loc 13 77 36
 6729 0008 7B68     		ldr	r3, [r7, #4]
 6730              		.loc 13 77 39
 6731 000a 1846     		mov	r0, r3
 6732 000c 0C37     		adds	r7, r7, #12
 6733              	.LCFI334:
 6734              		.cfi_def_cfa_offset 4
 6735 000e BD46     		mov	sp, r7
 6736              	.LCFI335:
 6737              		.cfi_def_cfa_register 13
 6738              		@ sp needed
 6739 0010 5DF8047B 		ldr	r7, [sp], #4
 6740              	.LCFI336:
ARM GAS  /tmp/ccqv0h9S.s 			page 215


 6741              		.cfi_restore 7
 6742              		.cfi_def_cfa_offset 0
 6743 0014 7047     		bx	lr
 6744              		.cfi_endproc
 6745              	.LFE4990:
 6747              		.section	.text._ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_,"axG",%progbits,_ZNSt2
 6748              		.align	1
 6749              		.weak	_ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_
 6750              		.syntax unified
 6751              		.thumb
 6752              		.thumb_func
 6753              		.fpu fpv4-sp-d16
 6755              	_ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_:
 6756              	.LFB4991:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 6757              		.loc 12 116 2
 6758              		.cfi_startproc
 6759              		@ args = 0, pretend = 0, frame = 16
 6760              		@ frame_needed = 1, uses_anonymous_args = 0
 6761 0000 B0B5     		push	{r4, r5, r7, lr}
 6762              	.LCFI337:
 6763              		.cfi_def_cfa_offset 16
 6764              		.cfi_offset 4, -16
 6765              		.cfi_offset 5, -12
 6766              		.cfi_offset 7, -8
 6767              		.cfi_offset 14, -4
 6768 0002 84B0     		sub	sp, sp, #16
 6769              	.LCFI338:
 6770              		.cfi_def_cfa_offset 32
 6771 0004 00AF     		add	r7, sp, #0
 6772              	.LCFI339:
 6773              		.cfi_def_cfa_register 7
 6774 0006 F860     		str	r0, [r7, #12]
 6775 0008 3972     		strb	r1, [r7, #8]
 6776 000a 7A60     		str	r2, [r7, #4]
 6777              	.LBB48:
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 6778              		.loc 12 118 19
 6779 000c FC68     		ldr	r4, [r7, #12]
 6780 000e 7868     		ldr	r0, [r7, #4]
 6781 0010 FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 6782 0014 0346     		mov	r3, r0
 6783 0016 1A46     		mov	r2, r3
 6784 0018 2946     		mov	r1, r5
 6785 001a 2046     		mov	r0, r4
 6786 001c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJRfEEESt10in_place_tDpOT_
 6787 0020 FB68     		ldr	r3, [r7, #12]
 6788 0022 0122     		movs	r2, #1
 6789 0024 1A71     		strb	r2, [r3, #4]
 6790              	.LBE48:
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6791              		.loc 12 119 4
 6792 0026 FB68     		ldr	r3, [r7, #12]
 6793 0028 1846     		mov	r0, r3
 6794 002a 1037     		adds	r7, r7, #16
 6795              	.LCFI340:
 6796              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccqv0h9S.s 			page 216


 6797 002c BD46     		mov	sp, r7
 6798              	.LCFI341:
 6799              		.cfi_def_cfa_register 13
 6800              		@ sp needed
 6801 002e B0BD     		pop	{r4, r5, r7, pc}
 6802              		.cfi_endproc
 6803              	.LFE4991:
 6805              		.weak	_ZNSt22_Optional_payload_baseIfEC1IJRfEEESt10in_place_tDpOT_
 6806              		.thumb_set _ZNSt22_Optional_payload_baseIfEC1IJRfEEESt10in_place_tDpOT_,_ZNSt22_Optional_payload_b
 6807              		.section	.text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10i
 6808              		.align	1
 6809              		.weak	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10in_place_t
 6810              		.syntax unified
 6811              		.thumb
 6812              		.thumb_func
 6813              		.fpu fpv4-sp-d16
 6815              	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_:
 6816              	.LFB4993:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6817              		.loc 12 301 42
 6818              		.cfi_startproc
 6819              		@ args = 0, pretend = 0, frame = 16
 6820              		@ frame_needed = 1, uses_anonymous_args = 0
 6821 0000 90B5     		push	{r4, r7, lr}
 6822              	.LCFI342:
 6823              		.cfi_def_cfa_offset 12
 6824              		.cfi_offset 4, -12
 6825              		.cfi_offset 7, -8
 6826              		.cfi_offset 14, -4
 6827 0002 85B0     		sub	sp, sp, #20
 6828              	.LCFI343:
 6829              		.cfi_def_cfa_offset 32
 6830 0004 00AF     		add	r7, sp, #0
 6831              	.LCFI344:
 6832              		.cfi_def_cfa_register 7
 6833 0006 F860     		str	r0, [r7, #12]
 6834 0008 3972     		strb	r1, [r7, #8]
 6835 000a 7A60     		str	r2, [r7, #4]
 6836              	.LBB49:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6837              		.loc 12 301 42
 6838 000c FB68     		ldr	r3, [r7, #12]
 6839 000e 7A68     		ldr	r2, [r7, #4]
 6840 0010 2146     		mov	r1, r4
 6841 0012 1846     		mov	r0, r3
 6842 0014 FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_
 6843              	.LBE49:
 6844 0018 FB68     		ldr	r3, [r7, #12]
 6845 001a 1846     		mov	r0, r3
 6846 001c 1437     		adds	r7, r7, #20
 6847              	.LCFI345:
 6848              		.cfi_def_cfa_offset 12
 6849 001e BD46     		mov	sp, r7
 6850              	.LCFI346:
 6851              		.cfi_def_cfa_register 13
 6852              		@ sp needed
 6853 0020 90BD     		pop	{r4, r7, pc}
ARM GAS  /tmp/ccqv0h9S.s 			page 217


 6854              		.cfi_endproc
 6855              	.LFE4993:
 6857              		.weak	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJRfEEESt10in_place_t
 6858              		.thumb_set _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJRfEEESt10in_pl
 6859              		.section	.text._ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_,"axG",%progbits,_Z
 6860              		.align	1
 6861              		.weak	_ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_
 6862              		.syntax unified
 6863              		.thumb
 6864              		.thumb_func
 6865              		.fpu fpv4-sp-d16
 6867              	_ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_:
 6868              	.LFB4995:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 6869              		.loc 12 608 28
 6870              		.cfi_startproc
 6871              		@ args = 0, pretend = 0, frame = 16
 6872              		@ frame_needed = 1, uses_anonymous_args = 0
 6873 0000 B0B5     		push	{r4, r5, r7, lr}
 6874              	.LCFI347:
 6875              		.cfi_def_cfa_offset 16
 6876              		.cfi_offset 4, -16
 6877              		.cfi_offset 5, -12
 6878              		.cfi_offset 7, -8
 6879              		.cfi_offset 14, -4
 6880 0002 84B0     		sub	sp, sp, #16
 6881              	.LCFI348:
 6882              		.cfi_def_cfa_offset 32
 6883 0004 00AF     		add	r7, sp, #0
 6884              	.LCFI349:
 6885              		.cfi_def_cfa_register 7
 6886 0006 F860     		str	r0, [r7, #12]
 6887 0008 3972     		strb	r1, [r7, #8]
 6888 000a 7A60     		str	r2, [r7, #4]
 6889              	.LBB50:
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6890              		.loc 12 610 38
 6891 000c FC68     		ldr	r4, [r7, #12]
 6892 000e 7868     		ldr	r0, [r7, #4]
 6893 0010 FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 6894 0014 0346     		mov	r3, r0
 6895 0016 1A46     		mov	r2, r3
 6896 0018 2946     		mov	r1, r5
 6897 001a 2046     		mov	r0, r4
 6898 001c FFF7FEFF 		bl	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpO
 6899              	.LBE50:
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6900              		.loc 12 610 42
 6901 0020 FB68     		ldr	r3, [r7, #12]
 6902 0022 1846     		mov	r0, r3
 6903 0024 1037     		adds	r7, r7, #16
 6904              	.LCFI350:
 6905              		.cfi_def_cfa_offset 16
 6906 0026 BD46     		mov	sp, r7
 6907              	.LCFI351:
 6908              		.cfi_def_cfa_register 13
 6909              		@ sp needed
ARM GAS  /tmp/ccqv0h9S.s 			page 218


 6910 0028 B0BD     		pop	{r4, r5, r7, pc}
 6911              		.cfi_endproc
 6912              	.LFE4995:
 6914              		.weak	_ZNSt14_Optional_baseIfLb1ELb1EEC1IJRfELb0EEESt10in_place_tDpOT_
 6915              		.thumb_set _ZNSt14_Optional_baseIfLb1ELb1EEC1IJRfELb0EEESt10in_place_tDpOT_,_ZNSt14_Optional_baseI
 6916              		.section	.text._ZNSt8optionalIfEC2IRfLb1EEEOT_,"axG",%progbits,_ZNSt8optionalIfEC5IRfLb1EEEOT_,com
 6917              		.align	1
 6918              		.weak	_ZNSt8optionalIfEC2IRfLb1EEEOT_
 6919              		.syntax unified
 6920              		.thumb
 6921              		.thumb_func
 6922              		.fpu fpv4-sp-d16
 6924              	_ZNSt8optionalIfEC2IRfLb1EEEOT_:
 6925              	.LFB4997:
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 6926              		.loc 12 701 2
 6927              		.cfi_startproc
 6928              		@ args = 0, pretend = 0, frame = 8
 6929              		@ frame_needed = 1, uses_anonymous_args = 0
 6930 0000 B0B5     		push	{r4, r5, r7, lr}
 6931              	.LCFI352:
 6932              		.cfi_def_cfa_offset 16
 6933              		.cfi_offset 4, -16
 6934              		.cfi_offset 5, -12
 6935              		.cfi_offset 7, -8
 6936              		.cfi_offset 14, -4
 6937 0002 82B0     		sub	sp, sp, #8
 6938              	.LCFI353:
 6939              		.cfi_def_cfa_offset 24
 6940 0004 00AF     		add	r7, sp, #0
 6941              	.LCFI354:
 6942              		.cfi_def_cfa_register 7
 6943 0006 7860     		str	r0, [r7, #4]
 6944 0008 3960     		str	r1, [r7]
 6945              	.LBB51:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6946              		.loc 12 702 47
 6947 000a 7C68     		ldr	r4, [r7, #4]
 6948 000c 3868     		ldr	r0, [r7]
 6949 000e FFF7FEFF 		bl	_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
 6950 0012 0346     		mov	r3, r0
 6951 0014 1A46     		mov	r2, r3
 6952 0016 2946     		mov	r1, r5
 6953 0018 2046     		mov	r0, r4
 6954 001a FFF7FEFF 		bl	_ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_
 6955              	.LBE51:
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 6956              		.loc 12 702 51
 6957 001e 7B68     		ldr	r3, [r7, #4]
 6958 0020 1846     		mov	r0, r3
 6959 0022 0837     		adds	r7, r7, #8
 6960              	.LCFI355:
 6961              		.cfi_def_cfa_offset 16
 6962 0024 BD46     		mov	sp, r7
 6963              	.LCFI356:
 6964              		.cfi_def_cfa_register 13
 6965              		@ sp needed
ARM GAS  /tmp/ccqv0h9S.s 			page 219


 6966 0026 B0BD     		pop	{r4, r5, r7, pc}
 6967              		.cfi_endproc
 6968              	.LFE4997:
 6970              		.weak	_ZNSt8optionalIfEC1IRfLb1EEEOT_
 6971              		.thumb_set _ZNSt8optionalIfEC1IRfLb1EEEOT_,_ZNSt8optionalIfEC2IRfLb1EEEOT_
 6972              		.section	.text._ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv,"axG",%progbits
 6973              		.align	1
 6974              		.weak	_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv
 6975              		.syntax unified
 6976              		.thumb
 6977              		.thumb_func
 6978              		.fpu fpv4-sp-d16
 6980              	_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv:
 6981              	.LFB4999:
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 6982              		.loc 12 439 7
 6983              		.cfi_startproc
 6984              		@ args = 0, pretend = 0, frame = 8
 6985              		@ frame_needed = 1, uses_anonymous_args = 0
 6986 0000 80B5     		push	{r7, lr}
 6987              	.LCFI357:
 6988              		.cfi_def_cfa_offset 8
 6989              		.cfi_offset 7, -8
 6990              		.cfi_offset 14, -4
 6991 0002 82B0     		sub	sp, sp, #8
 6992              	.LCFI358:
 6993              		.cfi_def_cfa_offset 16
 6994 0004 00AF     		add	r7, sp, #0
 6995              	.LCFI359:
 6996              		.cfi_def_cfa_register 7
 6997 0006 7860     		str	r0, [r7, #4]
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 6998              		.loc 12 442 51
 6999 0008 7B68     		ldr	r3, [r7, #4]
 7000 000a 1846     		mov	r0, r3
 7001 000c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfE6_M_getEv
 7002 0010 0346     		mov	r3, r0
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7003              		.loc 12 443 7
 7004 0012 1846     		mov	r0, r3
 7005 0014 0837     		adds	r7, r7, #8
 7006              	.LCFI360:
 7007              		.cfi_def_cfa_offset 8
 7008 0016 BD46     		mov	sp, r7
 7009              	.LCFI361:
 7010              		.cfi_def_cfa_register 13
 7011              		@ sp needed
 7012 0018 80BD     		pop	{r7, pc}
 7013              		.cfi_endproc
 7014              	.LFE4999:
 7016              		.section	.text._ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_,"axG",%progbits,_ZSt4moveIRfEONSt
 7017              		.align	1
 7018              		.weak	_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_
 7019              		.syntax unified
 7020              		.thumb
 7021              		.thumb_func
 7022              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccqv0h9S.s 			page 220


 7024              	_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_:
 7025              	.LFB5000:
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief  Forward an rvalue.
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @return The parameter cast to the specified type.
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     constexpr _Tp&&
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     {
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****       static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 		    " substituting _Tp is an lvalue reference type");
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****       return static_cast<_Tp&&>(__t);
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     }
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief  Convert a value to an rvalue.
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @param  __t  A thing of arbitrary type.
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @return The parameter cast to an rvalue-reference to allow moving it.
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   */
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     constexpr typename std::remove_reference<_Tp>::type&&
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     move(_Tp&& __t) noexcept
 7026              		.loc 13 101 5
 7027              		.cfi_startproc
 7028              		@ args = 0, pretend = 0, frame = 8
 7029              		@ frame_needed = 1, uses_anonymous_args = 0
 7030              		@ link register save eliminated.
 7031 0000 80B4     		push	{r7}
 7032              	.LCFI362:
 7033              		.cfi_def_cfa_offset 4
 7034              		.cfi_offset 7, -4
 7035 0002 83B0     		sub	sp, sp, #12
 7036              	.LCFI363:
 7037              		.cfi_def_cfa_offset 16
 7038 0004 00AF     		add	r7, sp, #0
 7039              	.LCFI364:
 7040              		.cfi_def_cfa_register 7
 7041 0006 7860     		str	r0, [r7, #4]
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 7042              		.loc 13 102 74
 7043 0008 7B68     		ldr	r3, [r7, #4]
 7044              		.loc 13 102 77
 7045 000a 1846     		mov	r0, r3
 7046 000c 0C37     		adds	r7, r7, #12
 7047              	.LCFI365:
 7048              		.cfi_def_cfa_offset 4
 7049 000e BD46     		mov	sp, r7
 7050              	.LCFI366:
 7051              		.cfi_def_cfa_register 13
 7052              		@ sp needed
 7053 0010 5DF8047B 		ldr	r7, [sp], #4
 7054              	.LCFI367:
 7055              		.cfi_restore 7
ARM GAS  /tmp/ccqv0h9S.s 			page 221


 7056              		.cfi_def_cfa_offset 0
 7057 0014 7047     		bx	lr
 7058              		.cfi_endproc
 7059              	.LFE5000:
 7061              		.section	.text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2Ev,"axG",%progbits,_ZNSt22_Option
 7062              		.align	1
 7063              		.weak	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2Ev
 7064              		.syntax unified
 7065              		.thumb
 7066              		.thumb_func
 7067              		.fpu fpv4-sp-d16
 7069              	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2Ev:
 7070              	.LFB5006:
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7071              		.loc 12 200 14
 7072              		.cfi_startproc
 7073              		@ args = 0, pretend = 0, frame = 8
 7074              		@ frame_needed = 1, uses_anonymous_args = 0
 7075              		@ link register save eliminated.
 7076 0000 80B4     		push	{r7}
 7077              	.LCFI368:
 7078              		.cfi_def_cfa_offset 4
 7079              		.cfi_offset 7, -4
 7080 0002 83B0     		sub	sp, sp, #12
 7081              	.LCFI369:
 7082              		.cfi_def_cfa_offset 16
 7083 0004 00AF     		add	r7, sp, #0
 7084              	.LCFI370:
 7085              		.cfi_def_cfa_register 7
 7086 0006 7860     		str	r0, [r7, #4]
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7087              		.loc 12 200 49
 7088 0008 7B68     		ldr	r3, [r7, #4]
 7089 000a 1846     		mov	r0, r3
 7090 000c 0C37     		adds	r7, r7, #12
 7091              	.LCFI371:
 7092              		.cfi_def_cfa_offset 4
 7093 000e BD46     		mov	sp, r7
 7094              	.LCFI372:
 7095              		.cfi_def_cfa_register 13
 7096              		@ sp needed
 7097 0010 5DF8047B 		ldr	r7, [sp], #4
 7098              	.LCFI373:
 7099              		.cfi_restore 7
 7100              		.cfi_def_cfa_offset 0
 7101 0014 7047     		bx	lr
 7102              		.cfi_endproc
 7103              	.LFE5006:
 7105              		.weak	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev
 7106              		.thumb_set _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev,_ZNSt22_Optional_payload_baseIfE8_
 7107              		.section	.text._ZNSt22_Optional_payload_baseIfEC2Ev,"axG",%progbits,_ZNSt22_Optional_payload_baseI
 7108              		.align	1
 7109              		.weak	_ZNSt22_Optional_payload_baseIfEC2Ev
 7110              		.syntax unified
 7111              		.thumb
 7112              		.thumb_func
 7113              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccqv0h9S.s 			page 222


 7115              	_ZNSt22_Optional_payload_baseIfEC2Ev:
 7116              	.LFB5008:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 7117              		.loc 12 111 7
 7118              		.cfi_startproc
 7119              		@ args = 0, pretend = 0, frame = 8
 7120              		@ frame_needed = 1, uses_anonymous_args = 0
 7121 0000 80B5     		push	{r7, lr}
 7122              	.LCFI374:
 7123              		.cfi_def_cfa_offset 8
 7124              		.cfi_offset 7, -8
 7125              		.cfi_offset 14, -4
 7126 0002 82B0     		sub	sp, sp, #8
 7127              	.LCFI375:
 7128              		.cfi_def_cfa_offset 16
 7129 0004 00AF     		add	r7, sp, #0
 7130              	.LCFI376:
 7131              		.cfi_def_cfa_register 7
 7132 0006 7860     		str	r0, [r7, #4]
 7133              	.LBB52:
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 7134              		.loc 12 111 7
 7135 0008 7B68     		ldr	r3, [r7, #4]
 7136 000a 1846     		mov	r0, r3
 7137 000c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev
 7138 0010 7B68     		ldr	r3, [r7, #4]
 7139 0012 0022     		movs	r2, #0
 7140 0014 1A71     		strb	r2, [r3, #4]
 7141              	.LBE52:
 7142 0016 7B68     		ldr	r3, [r7, #4]
 7143 0018 1846     		mov	r0, r3
 7144 001a 0837     		adds	r7, r7, #8
 7145              	.LCFI377:
 7146              		.cfi_def_cfa_offset 8
 7147 001c BD46     		mov	sp, r7
 7148              	.LCFI378:
 7149              		.cfi_def_cfa_register 13
 7150              		@ sp needed
 7151 001e 80BD     		pop	{r7, pc}
 7152              		.cfi_endproc
 7153              	.LFE5008:
 7155              		.weak	_ZNSt22_Optional_payload_baseIfEC1Ev
 7156              		.thumb_set _ZNSt22_Optional_payload_baseIfEC1Ev,_ZNSt22_Optional_payload_baseIfEC2Ev
 7157              		.section	.text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev,"axG",%progbits,_ZNSt17_Optional_payloa
 7158              		.align	1
 7159              		.weak	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev
 7160              		.syntax unified
 7161              		.thumb
 7162              		.thumb_func
 7163              		.fpu fpv4-sp-d16
 7165              	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev:
 7166              	.LFB5010:
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 7167              		.loc 12 303 7
 7168              		.cfi_startproc
 7169              		@ args = 0, pretend = 0, frame = 8
 7170              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccqv0h9S.s 			page 223


 7171 0000 80B5     		push	{r7, lr}
 7172              	.LCFI379:
 7173              		.cfi_def_cfa_offset 8
 7174              		.cfi_offset 7, -8
 7175              		.cfi_offset 14, -4
 7176 0002 82B0     		sub	sp, sp, #8
 7177              	.LCFI380:
 7178              		.cfi_def_cfa_offset 16
 7179 0004 00AF     		add	r7, sp, #0
 7180              	.LCFI381:
 7181              		.cfi_def_cfa_register 7
 7182 0006 7860     		str	r0, [r7, #4]
 7183              	.LBB53:
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 7184              		.loc 12 303 7
 7185 0008 7B68     		ldr	r3, [r7, #4]
 7186 000a 1846     		mov	r0, r3
 7187 000c FFF7FEFF 		bl	_ZNSt22_Optional_payload_baseIfEC2Ev
 7188              	.LBE53:
 7189 0010 7B68     		ldr	r3, [r7, #4]
 7190 0012 1846     		mov	r0, r3
 7191 0014 0837     		adds	r7, r7, #8
 7192              	.LCFI382:
 7193              		.cfi_def_cfa_offset 8
 7194 0016 BD46     		mov	sp, r7
 7195              	.LCFI383:
 7196              		.cfi_def_cfa_register 13
 7197              		@ sp needed
 7198 0018 80BD     		pop	{r7, pc}
 7199              		.cfi_endproc
 7200              	.LFE5010:
 7202              		.weak	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC1Ev
 7203              		.thumb_set _ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC1Ev,_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev
 7204              		.section	.text._ZNSt14_Optional_baseIfLb1ELb1EEC2Ev,"axG",%progbits,_ZNSt14_Optional_baseIfLb1ELb1
 7205              		.align	1
 7206              		.weak	_ZNSt14_Optional_baseIfLb1ELb1EEC2Ev
 7207              		.syntax unified
 7208              		.thumb
 7209              		.thumb_func
 7210              		.fpu fpv4-sp-d16
 7212              	_ZNSt14_Optional_baseIfLb1ELb1EEC2Ev:
 7213              	.LFB5012:
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7214              		.loc 12 603 17
 7215              		.cfi_startproc
 7216              		@ args = 0, pretend = 0, frame = 8
 7217              		@ frame_needed = 1, uses_anonymous_args = 0
 7218 0000 80B5     		push	{r7, lr}
 7219              	.LCFI384:
 7220              		.cfi_def_cfa_offset 8
 7221              		.cfi_offset 7, -8
 7222              		.cfi_offset 14, -4
 7223 0002 82B0     		sub	sp, sp, #8
 7224              	.LCFI385:
 7225              		.cfi_def_cfa_offset 16
 7226 0004 00AF     		add	r7, sp, #0
 7227              	.LCFI386:
ARM GAS  /tmp/ccqv0h9S.s 			page 224


 7228              		.cfi_def_cfa_register 7
 7229 0006 7860     		str	r0, [r7, #4]
 7230              	.LBB54:
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7231              		.loc 12 603 17
 7232 0008 7B68     		ldr	r3, [r7, #4]
 7233 000a 1846     		mov	r0, r3
 7234 000c FFF7FEFF 		bl	_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC1Ev
 7235              	.LBE54:
 7236 0010 7B68     		ldr	r3, [r7, #4]
 7237 0012 1846     		mov	r0, r3
 7238 0014 0837     		adds	r7, r7, #8
 7239              	.LCFI387:
 7240              		.cfi_def_cfa_offset 8
 7241 0016 BD46     		mov	sp, r7
 7242              	.LCFI388:
 7243              		.cfi_def_cfa_register 13
 7244              		@ sp needed
 7245 0018 80BD     		pop	{r7, pc}
 7246              		.cfi_endproc
 7247              	.LFE5012:
 7249              		.weak	_ZNSt14_Optional_baseIfLb1ELb1EEC1Ev
 7250              		.thumb_set _ZNSt14_Optional_baseIfLb1ELb1EEC1Ev,_ZNSt14_Optional_baseIfLb1ELb1EEC2Ev
 7251              		.section	.text._ZNSt8optionalIfEC2ESt9nullopt_t,"axG",%progbits,_ZNSt8optionalIfEC5ESt9nullopt_t,c
 7252              		.align	1
 7253              		.weak	_ZNSt8optionalIfEC2ESt9nullopt_t
 7254              		.syntax unified
 7255              		.thumb
 7256              		.thumb_func
 7257              		.fpu fpv4-sp-d16
 7259              	_ZNSt8optionalIfEC2ESt9nullopt_t:
 7260              	.LFB5014:
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7261              		.loc 12 693 17
 7262              		.cfi_startproc
 7263              		@ args = 0, pretend = 0, frame = 8
 7264              		@ frame_needed = 1, uses_anonymous_args = 0
 7265 0000 80B5     		push	{r7, lr}
 7266              	.LCFI389:
 7267              		.cfi_def_cfa_offset 8
 7268              		.cfi_offset 7, -8
 7269              		.cfi_offset 14, -4
 7270 0002 82B0     		sub	sp, sp, #8
 7271              	.LCFI390:
 7272              		.cfi_def_cfa_offset 16
 7273 0004 00AF     		add	r7, sp, #0
 7274              	.LCFI391:
 7275              		.cfi_def_cfa_register 7
 7276 0006 7860     		str	r0, [r7, #4]
 7277 0008 3970     		strb	r1, [r7]
 7278              	.LBB55:
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7279              		.loc 12 693 46
 7280 000a 7B68     		ldr	r3, [r7, #4]
 7281 000c 1846     		mov	r0, r3
 7282 000e FFF7FEFF 		bl	_ZNSt14_Optional_baseIfLb1ELb1EEC2Ev
 7283              	.LBE55:
ARM GAS  /tmp/ccqv0h9S.s 			page 225


 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 7284              		.loc 12 693 48
 7285 0012 7B68     		ldr	r3, [r7, #4]
 7286 0014 1846     		mov	r0, r3
 7287 0016 0837     		adds	r7, r7, #8
 7288              	.LCFI392:
 7289              		.cfi_def_cfa_offset 8
 7290 0018 BD46     		mov	sp, r7
 7291              	.LCFI393:
 7292              		.cfi_def_cfa_register 13
 7293              		@ sp needed
 7294 001a 80BD     		pop	{r7, pc}
 7295              		.cfi_endproc
 7296              	.LFE5014:
 7298              		.weak	_ZNSt8optionalIfEC1ESt9nullopt_t
 7299              		.thumb_set _ZNSt8optionalIfEC1ESt9nullopt_t,_ZNSt8optionalIfEC2ESt9nullopt_t
 7300              		.section	.text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortISt4pairIffEEEE
 7301              		.align	1
 7302              		.weak	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEEDcSt16
 7303              		.syntax unified
 7304              		.thumb
 7305              		.thumb_func
 7306              		.fpu fpv4-sp-d16
 7308              	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEEDcSt16in_plac
 7309              	.LFB5042:
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 7310              		.loc 2 262 5
 7311              		.cfi_startproc
 7312              		@ args = 0, pretend = 0, frame = 8
 7313              		@ frame_needed = 1, uses_anonymous_args = 0
 7314 0000 80B5     		push	{r7, lr}
 7315              	.LCFI394:
 7316              		.cfi_def_cfa_offset 8
 7317              		.cfi_offset 7, -8
 7318              		.cfi_offset 14, -4
 7319 0002 82B0     		sub	sp, sp, #8
 7320              	.LCFI395:
 7321              		.cfi_def_cfa_offset 16
 7322 0004 00AF     		add	r7, sp, #0
 7323              	.LCFI396:
 7324              		.cfi_def_cfa_register 7
 7325 0006 3871     		strb	r0, [r7, #4]
 7326 0008 3960     		str	r1, [r7]
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7327              		.loc 2 263 34
 7328 000a 3868     		ldr	r0, [r7]
 7329 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEOT_RNSt16r
 7330 0010 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7331              		.loc 2 263 55
 7332 0012 1846     		mov	r0, r3
 7333 0014 FFF7FEFF 		bl	_ZNRSt8__detail9__variant14_UninitializedIP10OutputPortISt4pairIffEELb1EE6_M_getEv
 7334 0018 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7335              		.loc 2 263 59
 7336 001a 1846     		mov	r0, r3
 7337 001c 0837     		adds	r7, r7, #8
ARM GAS  /tmp/ccqv0h9S.s 			page 226


 7338              	.LCFI397:
 7339              		.cfi_def_cfa_offset 8
 7340 001e BD46     		mov	sp, r7
 7341              	.LCFI398:
 7342              		.cfi_def_cfa_register 13
 7343              		@ sp needed
 7344 0020 80BD     		pop	{r7, pc}
 7345              		.cfi_endproc
 7346              	.LFE5042:
 7348              		.section	.text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPor
 7349              		.align	1
 7350              		.weak	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEE
 7351              		.syntax unified
 7352              		.thumb
 7353              		.thumb_func
 7354              		.fpu fpv4-sp-d16
 7356              	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEEDcSt1
 7357              	.LFB5041:
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 7358              		.loc 2 267 5
 7359              		.cfi_startproc
 7360              		@ args = 0, pretend = 0, frame = 8
 7361              		@ frame_needed = 1, uses_anonymous_args = 0
 7362 0000 90B5     		push	{r4, r7, lr}
 7363              	.LCFI399:
 7364              		.cfi_def_cfa_offset 12
 7365              		.cfi_offset 4, -12
 7366              		.cfi_offset 7, -8
 7367              		.cfi_offset 14, -4
 7368 0002 83B0     		sub	sp, sp, #12
 7369              	.LCFI400:
 7370              		.cfi_def_cfa_offset 24
 7371 0004 00AF     		add	r7, sp, #0
 7372              	.LCFI401:
 7373              		.cfi_def_cfa_register 7
 7374 0006 3871     		strb	r0, [r7, #4]
 7375 0008 3960     		str	r1, [r7]
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 7376              		.loc 2 270 30
 7377 000a 3868     		ldr	r0, [r7]
 7378 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEOT_RNS
 7379 0010 0346     		mov	r3, r0
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 7380              		.loc 2 269 30
 7381 0012 1946     		mov	r1, r3
 7382 0014 2046     		mov	r0, r4
 7383 0016 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEEDcSt16in_
 7384 001a 0346     		mov	r3, r0
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7385              		.loc 2 271 5
 7386 001c 1846     		mov	r0, r3
 7387 001e 0C37     		adds	r7, r7, #12
 7388              	.LCFI402:
 7389              		.cfi_def_cfa_offset 12
 7390 0020 BD46     		mov	sp, r7
 7391              	.LCFI403:
 7392              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccqv0h9S.s 			page 227


 7393              		@ sp needed
 7394 0022 90BD     		pop	{r4, r7, pc}
 7395              		.cfi_endproc
 7396              	.LFE5041:
 7398              		.section	.text._ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10Output
 7399              		.align	1
 7400              		.weak	_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_E
 7401              		.syntax unified
 7402              		.thumb
 7403              		.thumb_func
 7404              		.fpu fpv4-sp-d16
 7406              	_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEEDc
 7407              	.LFB5040:
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 7408              		.loc 2 267 5
 7409              		.cfi_startproc
 7410              		@ args = 0, pretend = 0, frame = 8
 7411              		@ frame_needed = 1, uses_anonymous_args = 0
 7412 0000 90B5     		push	{r4, r7, lr}
 7413              	.LCFI404:
 7414              		.cfi_def_cfa_offset 12
 7415              		.cfi_offset 4, -12
 7416              		.cfi_offset 7, -8
 7417              		.cfi_offset 14, -4
 7418 0002 83B0     		sub	sp, sp, #12
 7419              	.LCFI405:
 7420              		.cfi_def_cfa_offset 24
 7421 0004 00AF     		add	r7, sp, #0
 7422              	.LCFI406:
 7423              		.cfi_def_cfa_register 7
 7424 0006 3871     		strb	r0, [r7, #4]
 7425 0008 3960     		str	r1, [r7]
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 7426              		.loc 2 270 30
 7427 000a 3868     		ldr	r0, [r7]
 7428 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEOT_
 7429 0010 0346     		mov	r3, r0
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 7430              		.loc 2 269 30
 7431 0012 1946     		mov	r1, r3
 7432 0014 2046     		mov	r0, r4
 7433 0016 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEED
 7434 001a 0346     		mov	r3, r0
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7435              		.loc 2 271 5
 7436 001c 1846     		mov	r0, r3
 7437 001e 0C37     		adds	r7, r7, #12
 7438              	.LCFI407:
 7439              		.cfi_def_cfa_offset 12
 7440 0020 BD46     		mov	sp, r7
 7441              	.LCFI408:
 7442              		.cfi_def_cfa_register 13
 7443              		@ sp needed
 7444 0022 90BD     		pop	{r4, r7, pc}
 7445              		.cfi_endproc
 7446              	.LFE5040:
 7448              		.section	.text._ZNSt8__detail9__variant5__getILj2ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEE
ARM GAS  /tmp/ccqv0h9S.s 			page 228


 7449              		.align	1
 7450              		.weak	_ZNSt8__detail9__variant5__getILj2ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_
 7451              		.syntax unified
 7452              		.thumb
 7453              		.thumb_func
 7454              		.fpu fpv4-sp-d16
 7456              	_ZNSt8__detail9__variant5__getILj2ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_:
 7457              	.LFB5039:
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 7458              		.loc 2 276 5
 7459              		.cfi_startproc
 7460              		@ args = 0, pretend = 0, frame = 8
 7461              		@ frame_needed = 1, uses_anonymous_args = 0
 7462 0000 90B5     		push	{r4, r7, lr}
 7463              	.LCFI409:
 7464              		.cfi_def_cfa_offset 12
 7465              		.cfi_offset 4, -12
 7466              		.cfi_offset 7, -8
 7467              		.cfi_offset 14, -4
 7468 0002 83B0     		sub	sp, sp, #12
 7469              	.LCFI410:
 7470              		.cfi_def_cfa_offset 24
 7471 0004 00AF     		add	r7, sp, #0
 7472              	.LCFI411:
 7473              		.cfi_def_cfa_register 7
 7474 0006 7860     		str	r0, [r7, #4]
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 7475              		.loc 2 279 32
 7476 0008 7868     		ldr	r0, [r7, #4]
 7477 000a FFF7FEFF 		bl	_ZSt7forwardIRSt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEEOT_RNSt16remove_referenceIS9_E4ty
 7478 000e 0346     		mov	r3, r0
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Variant>(__v)._M_u);
 7479              		.loc 2 278 30
 7480 0010 1946     		mov	r1, r3
 7481 0012 2046     		mov	r0, r4
 7482 0014 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEE
 7483 0018 0346     		mov	r3, r0
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7484              		.loc 2 280 5
 7485 001a 1846     		mov	r0, r3
 7486 001c 0C37     		adds	r7, r7, #12
 7487              	.LCFI412:
 7488              		.cfi_def_cfa_offset 12
 7489 001e BD46     		mov	sp, r7
 7490              	.LCFI413:
 7491              		.cfi_def_cfa_register 13
 7492              		@ sp needed
 7493 0020 90BD     		pop	{r4, r7, pc}
 7494              		.cfi_endproc
 7495              	.LFE5039:
 7497              		.section	.text._ZSt3getILj2EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7v
 7498              		.align	1
 7499              		.weak	_ZSt3getILj2EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJD
 7500              		.syntax unified
 7501              		.thumb
 7502              		.thumb_func
 7503              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccqv0h9S.s 			page 229


 7505              	_ZSt3getILj2EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE
 7506              	.LFB5038:
1572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void
1574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       swap(variant& __rhs)
1575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       noexcept((__is_nothrow_swappable<_Types>::value && ...)
1576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       && is_nothrow_move_constructible_v<variant>)
1577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
1578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::__raw_idx_visit(
1579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
1580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
1581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
1582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
1583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (this->index() == __rhs_index)
1584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
1585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    auto& __this_mem =
1586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      std::get<__rhs_index>(*this);
1587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    using std::swap;
1588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    swap(__this_mem, __rhs_mem);
1589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
1590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		else
1591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
1592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    if (!this->valueless_by_exception()) [[__likely__]]
1593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      {
1594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			auto __tmp(std::move(__rhs_mem));
1595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			__rhs = std::move(*this);
1596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			this->_M_destructive_move(__rhs_index,
1597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						  std::move(__tmp));
1598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      }
1599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    else
1600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      {
1601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			this->_M_destructive_move(__rhs_index,
1602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						  std::move(__rhs_mem));
1603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			__rhs._M_reset();
1604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      }
1605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
1606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
1607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    else
1608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
1609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (!this->valueless_by_exception()) [[__likely__]]
1610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
1611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    __rhs = std::move(*this);
1612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    this->_M_reset();
1613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
1614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
1615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __rhs);
1616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
1617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     private:
1619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #if defined(__clang__) && __clang_major__ <= 7
1621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     public:
1622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_M_u; // See https://bugs.llvm.org/show_bug.cgi?id=31852
1623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     private:
1624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #endif
1625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Vp>
ARM GAS  /tmp/ccqv0h9S.s 			page 230


1627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend constexpr decltype(auto)
1628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::__get(_Vp&& __v) noexcept;
1629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Vp>
1631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend void*
1632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::__get_storage(_Vp&& __v) noexcept;
1633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP) \
1635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Tp> \
1636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend constexpr bool \
1637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	operator __OP(const variant<_Tp...>& __lhs, \
1638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      const variant<_Tp...>& __rhs);
1639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(<)
1641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(<=)
1642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(==)
1643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(!=)
1644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(>=)
1645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(>)
1646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #undef _VARIANT_RELATION_FUNCTION_TEMPLATE
1648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
1649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
1651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(variant<_Types...>& __v)
 7507              		.loc 2 1652 5
 7508              		.cfi_startproc
 7509              		@ args = 0, pretend = 0, frame = 8
 7510              		@ frame_needed = 1, uses_anonymous_args = 0
 7511 0000 80B5     		push	{r7, lr}
 7512              	.LCFI414:
 7513              		.cfi_def_cfa_offset 8
 7514              		.cfi_offset 7, -8
 7515              		.cfi_offset 14, -4
 7516 0002 82B0     		sub	sp, sp, #8
 7517              	.LCFI415:
 7518              		.cfi_def_cfa_offset 16
 7519 0004 00AF     		add	r7, sp, #0
 7520              	.LCFI416:
 7521              		.cfi_def_cfa_register 7
 7522 0006 7860     		str	r0, [r7, #4]
1653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(_Np < sizeof...(_Types),
1655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "The index must be in [0, number of alternatives)");
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if (__v.index() != _Np)
 7523              		.loc 2 1656 20
 7524 0008 7868     		ldr	r0, [r7, #4]
 7525 000a FFF7FEFF 		bl	_ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE5indexEv
 7526 000e 0346     		mov	r3, r0
 7527              		.loc 2 1656 23
 7528 0010 022B     		cmp	r3, #2
 7529 0012 14BF     		ite	ne
 7530 0014 0123     		movne	r3, #1
 7531 0016 0023     		moveq	r3, #0
 7532 0018 DBB2     		uxtb	r3, r3
 7533              		.loc 2 1656 7
ARM GAS  /tmp/ccqv0h9S.s 			page 231


 7534 001a 002B     		cmp	r3, #0
 7535 001c 06D0     		beq	.L287
1657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 7536              		.loc 2 1657 28
 7537 001e 7868     		ldr	r0, [r7, #4]
 7538 0020 FFF7FEFF 		bl	_ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE22valueless_by_exceptionEv
 7539 0024 0346     		mov	r3, r0
 7540 0026 1846     		mov	r0, r3
 7541 0028 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessb
 7542              	.L287:
1658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __detail::__variant::__get<_Np>(__v);
 7543              		.loc 2 1658 45
 7544 002c 7868     		ldr	r0, [r7, #4]
 7545 002e FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj2ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_
 7546 0032 0346     		mov	r3, r0
1659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 7547              		.loc 2 1659 5
 7548 0034 1846     		mov	r0, r3
 7549 0036 0837     		adds	r7, r7, #8
 7550              	.LCFI417:
 7551              		.cfi_def_cfa_offset 8
 7552 0038 BD46     		mov	sp, r7
 7553              	.LCFI418:
 7554              		.cfi_def_cfa_register 13
 7555              		@ sp needed
 7556 003a 80BD     		pop	{r7, pc}
 7557              		.cfi_endproc
 7558              	.LFE5038:
 7560              		.section	.text._ZSt7forwardIRP10OutputPortISt4pairIffEEEOT_RNSt16remove_referenceIS6_E4typeE,"axG"
 7561              		.align	1
 7562              		.weak	_ZSt7forwardIRP10OutputPortISt4pairIffEEEOT_RNSt16remove_referenceIS6_E4typeE
 7563              		.syntax unified
 7564              		.thumb
 7565              		.thumb_func
 7566              		.fpu fpv4-sp-d16
 7568              	_ZSt7forwardIRP10OutputPortISt4pairIffEEEOT_RNSt16remove_referenceIS6_E4typeE:
 7569              	.LFB5043:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 7570              		.loc 13 76 5
 7571              		.cfi_startproc
 7572              		@ args = 0, pretend = 0, frame = 8
 7573              		@ frame_needed = 1, uses_anonymous_args = 0
 7574              		@ link register save eliminated.
 7575 0000 80B4     		push	{r7}
 7576              	.LCFI419:
 7577              		.cfi_def_cfa_offset 4
 7578              		.cfi_offset 7, -4
 7579 0002 83B0     		sub	sp, sp, #12
 7580              	.LCFI420:
 7581              		.cfi_def_cfa_offset 16
 7582 0004 00AF     		add	r7, sp, #0
 7583              	.LCFI421:
 7584              		.cfi_def_cfa_register 7
 7585 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 7586              		.loc 13 77 36
 7587 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccqv0h9S.s 			page 232


  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 7588              		.loc 13 77 39
 7589 000a 1846     		mov	r0, r3
 7590 000c 0C37     		adds	r7, r7, #12
 7591              	.LCFI422:
 7592              		.cfi_def_cfa_offset 4
 7593 000e BD46     		mov	sp, r7
 7594              	.LCFI423:
 7595              		.cfi_def_cfa_register 13
 7596              		@ sp needed
 7597 0010 5DF8047B 		ldr	r7, [sp], #4
 7598              	.LCFI424:
 7599              		.cfi_restore 7
 7600              		.cfi_def_cfa_offset 0
 7601 0014 7047     		bx	lr
 7602              		.cfi_endproc
 7603              	.LFE5043:
 7605              		.section	.text._ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE7emplaceILj2EJRS5_EEENSt9enable_i
 7606              		.align	1
 7607              		.weak	_ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE7emplaceILj2EJRS5_EEENSt9enable_ifIX18is_c
 7608              		.syntax unified
 7609              		.thumb
 7610              		.thumb_func
 7611              		.fpu fpv4-sp-d16
 7613              	_ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE7emplaceILj2EJRS5_EEENSt9enable_ifIX18is_construc
 7614              	.LFB5044:
1463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 7615              		.loc 2 1463 2
 7616              		.cfi_startproc
 7617              		@ args = 0, pretend = 0, frame = 8
 7618              		@ frame_needed = 1, uses_anonymous_args = 0
 7619 0000 80B5     		push	{r7, lr}
 7620              	.LCFI425:
 7621              		.cfi_def_cfa_offset 8
 7622              		.cfi_offset 7, -8
 7623              		.cfi_offset 14, -4
 7624 0002 82B0     		sub	sp, sp, #8
 7625              	.LCFI426:
 7626              		.cfi_def_cfa_offset 16
 7627 0004 00AF     		add	r7, sp, #0
 7628              	.LCFI427:
 7629              		.cfi_def_cfa_register 7
 7630 0006 7860     		str	r0, [r7, #4]
 7631 0008 3960     		str	r1, [r7]
1472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this,
 7632              		.loc 2 1472 22
 7633 000a 7B68     		ldr	r3, [r7, #4]
 7634 000c 1846     		mov	r0, r3
 7635 000e FFF7FEFF 		bl	_ZNSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE8_M_resetEv
1473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...);
 7636              		.loc 2 1473 41
 7637 0012 3868     		ldr	r0, [r7]
 7638 0014 FFF7FEFF 		bl	_ZSt7forwardIRP10OutputPortISt4pairIffEEEOT_RNSt16remove_referenceIS6_E4typeE
 7639 0018 0346     		mov	r3, r0
 7640 001a 1946     		mov	r1, r3
 7641 001c 7868     		ldr	r0, [r7, #4]
 7642 001e FFF7FEFF 		bl	_ZSt28__variant_construct_by_indexILj2ESt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEJRS6_EEvR
ARM GAS  /tmp/ccqv0h9S.s 			page 233


1509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 7643              		.loc 2 1509 24
 7644 0022 7868     		ldr	r0, [r7, #4]
 7645 0024 FFF7FEFF 		bl	_ZSt3getILj2EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0
 7646 0028 0346     		mov	r3, r0
1510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7647              		.loc 2 1510 2
 7648 002a 1846     		mov	r0, r3
 7649 002c 0837     		adds	r7, r7, #8
 7650              	.LCFI428:
 7651              		.cfi_def_cfa_offset 8
 7652 002e BD46     		mov	sp, r7
 7653              	.LCFI429:
 7654              		.cfi_def_cfa_register 13
 7655              		@ sp needed
 7656 0030 80BD     		pop	{r7, pc}
 7657              		.cfi_endproc
 7658              	.LFE5044:
 7660              		.section	.text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16i
 7661              		.align	1
 7662              		.weak	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16in_place_i
 7663              		.syntax unified
 7664              		.thumb
 7665              		.thumb_func
 7666              		.fpu fpv4-sp-d16
 7668              	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16in_place_index_tI
 7669              	.LFB5049:
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 7670              		.loc 2 262 5
 7671              		.cfi_startproc
 7672              		@ args = 0, pretend = 0, frame = 8
 7673              		@ frame_needed = 1, uses_anonymous_args = 0
 7674 0000 80B5     		push	{r7, lr}
 7675              	.LCFI430:
 7676              		.cfi_def_cfa_offset 8
 7677              		.cfi_offset 7, -8
 7678              		.cfi_offset 14, -4
 7679 0002 82B0     		sub	sp, sp, #8
 7680              	.LCFI431:
 7681              		.cfi_def_cfa_offset 16
 7682 0004 00AF     		add	r7, sp, #0
 7683              	.LCFI432:
 7684              		.cfi_def_cfa_register 7
 7685 0006 3871     		strb	r0, [r7, #4]
 7686 0008 3960     		str	r1, [r7]
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7687              		.loc 2 263 34
 7688 000a 3868     		ldr	r0, [r7]
 7689 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt16remove_refe
 7690 0010 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7691              		.loc 2 263 55
 7692 0012 1846     		mov	r0, r3
 7693 0014 FFF7FEFF 		bl	_ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv
 7694 0018 0346     		mov	r3, r0
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7695              		.loc 2 263 59
ARM GAS  /tmp/ccqv0h9S.s 			page 234


 7696 001a 1846     		mov	r0, r3
 7697 001c 0837     		adds	r7, r7, #8
 7698              	.LCFI433:
 7699              		.cfi_def_cfa_offset 8
 7700 001e BD46     		mov	sp, r7
 7701              	.LCFI434:
 7702              		.cfi_def_cfa_register 13
 7703              		@ sp needed
 7704 0020 80BD     		pop	{r7, pc}
 7705              		.cfi_endproc
 7706              	.LFE5049:
 7708              		.section	.text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEED
 7709              		.align	1
 7710              		.weak	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_p
 7711              		.syntax unified
 7712              		.thumb
 7713              		.thumb_func
 7714              		.fpu fpv4-sp-d16
 7716              	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_in
 7717              	.LFB5048:
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 7718              		.loc 2 267 5
 7719              		.cfi_startproc
 7720              		@ args = 0, pretend = 0, frame = 8
 7721              		@ frame_needed = 1, uses_anonymous_args = 0
 7722 0000 90B5     		push	{r4, r7, lr}
 7723              	.LCFI435:
 7724              		.cfi_def_cfa_offset 12
 7725              		.cfi_offset 4, -12
 7726              		.cfi_offset 7, -8
 7727              		.cfi_offset 14, -4
 7728 0002 83B0     		sub	sp, sp, #12
 7729              	.LCFI436:
 7730              		.cfi_def_cfa_offset 24
 7731 0004 00AF     		add	r7, sp, #0
 7732              	.LCFI437:
 7733              		.cfi_def_cfa_register 7
 7734 0006 3871     		strb	r0, [r7, #4]
 7735 0008 3960     		str	r1, [r7]
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 7736              		.loc 2 270 30
 7737 000a 3868     		ldr	r0, [r7]
 7738 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove_re
 7739 0010 0346     		mov	r3, r0
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 7740              		.loc 2 269 30
 7741 0012 1946     		mov	r1, r3
 7742 0014 2046     		mov	r0, r4
 7743 0016 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16in_place_inde
 7744 001a 0346     		mov	r3, r0
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7745              		.loc 2 271 5
 7746 001c 1846     		mov	r0, r3
 7747 001e 0C37     		adds	r7, r7, #12
 7748              	.LCFI438:
 7749              		.cfi_def_cfa_offset 12
 7750 0020 BD46     		mov	sp, r7
ARM GAS  /tmp/ccqv0h9S.s 			page 235


 7751              	.LCFI439:
 7752              		.cfi_def_cfa_register 13
 7753              		@ sp needed
 7754 0022 90BD     		pop	{r4, r7, pc}
 7755              		.cfi_endproc
 7756              	.LFE5048:
 7758              		.section	.text._ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEE
 7759              		.align	1
 7760              		.weak	_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_
 7761              		.syntax unified
 7762              		.thumb
 7763              		.thumb_func
 7764              		.fpu fpv4-sp-d16
 7766              	_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_i
 7767              	.LFB5047:
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 7768              		.loc 2 267 5
 7769              		.cfi_startproc
 7770              		@ args = 0, pretend = 0, frame = 8
 7771              		@ frame_needed = 1, uses_anonymous_args = 0
 7772 0000 90B5     		push	{r4, r7, lr}
 7773              	.LCFI440:
 7774              		.cfi_def_cfa_offset 12
 7775              		.cfi_offset 4, -12
 7776              		.cfi_offset 7, -8
 7777              		.cfi_offset 14, -4
 7778 0002 83B0     		sub	sp, sp, #12
 7779              	.LCFI441:
 7780              		.cfi_def_cfa_offset 24
 7781 0004 00AF     		add	r7, sp, #0
 7782              	.LCFI442:
 7783              		.cfi_def_cfa_register 7
 7784 0006 3871     		strb	r0, [r7, #4]
 7785 0008 3960     		str	r1, [r7]
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 7786              		.loc 2 270 30
 7787 000a 3868     		ldr	r0, [r7]
 7788 000c FFF7FEFF 		bl	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remove_r
 7789 0010 0346     		mov	r3, r0
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 7790              		.loc 2 269 30
 7791 0012 1946     		mov	r1, r3
 7792 0014 2046     		mov	r0, r4
 7793 0016 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_plac
 7794 001a 0346     		mov	r3, r0
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7795              		.loc 2 271 5
 7796 001c 1846     		mov	r0, r3
 7797 001e 0C37     		adds	r7, r7, #12
 7798              	.LCFI443:
 7799              		.cfi_def_cfa_offset 12
 7800 0020 BD46     		mov	sp, r7
 7801              	.LCFI444:
 7802              		.cfi_def_cfa_register 13
 7803              		@ sp needed
 7804 0022 90BD     		pop	{r4, r7, pc}
 7805              		.cfi_endproc
ARM GAS  /tmp/ccqv0h9S.s 			page 236


 7806              	.LFE5047:
 7808              		.section	.text._ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_,"axG"
 7809              		.align	1
 7810              		.weak	_ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
 7811              		.syntax unified
 7812              		.thumb
 7813              		.thumb_func
 7814              		.fpu fpv4-sp-d16
 7816              	_ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:
 7817              	.LFB5046:
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 7818              		.loc 2 276 5
 7819              		.cfi_startproc
 7820              		@ args = 0, pretend = 0, frame = 8
 7821              		@ frame_needed = 1, uses_anonymous_args = 0
 7822 0000 90B5     		push	{r4, r7, lr}
 7823              	.LCFI445:
 7824              		.cfi_def_cfa_offset 12
 7825              		.cfi_offset 4, -12
 7826              		.cfi_offset 7, -8
 7827              		.cfi_offset 14, -4
 7828 0002 83B0     		sub	sp, sp, #12
 7829              	.LCFI446:
 7830              		.cfi_def_cfa_offset 24
 7831 0004 00AF     		add	r7, sp, #0
 7832              	.LCFI447:
 7833              		.cfi_def_cfa_register 7
 7834 0006 7860     		str	r0, [r7, #4]
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 7835              		.loc 2 279 32
 7836 0008 7868     		ldr	r0, [r7, #4]
 7837 000a FFF7FEFF 		bl	_ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE
 7838 000e 0346     		mov	r3, r0
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Variant>(__v)._M_u);
 7839              		.loc 2 278 30
 7840 0010 1946     		mov	r1, r3
 7841 0012 2046     		mov	r0, r4
 7842 0014 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_pla
 7843 0018 0346     		mov	r3, r0
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 7844              		.loc 2 280 5
 7845 001a 1846     		mov	r0, r3
 7846 001c 0C37     		adds	r7, r7, #12
 7847              	.LCFI448:
 7848              		.cfi_def_cfa_offset 12
 7849 001e BD46     		mov	sp, r7
 7850              	.LCFI449:
 7851              		.cfi_def_cfa_register 13
 7852              		@ sp needed
 7853 0020 90BD     		pop	{r4, r7, pc}
 7854              		.cfi_endproc
 7855              	.LFE5046:
 7857              		.section	.text._ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_E
 7858              		.align	1
 7859              		.weak	_ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeER
 7860              		.syntax unified
 7861              		.thumb
ARM GAS  /tmp/ccqv0h9S.s 			page 237


 7862              		.thumb_func
 7863              		.fpu fpv4-sp-d16
 7865              	_ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:
 7866              	.LFB5045:
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 7867              		.loc 2 1652 5
 7868              		.cfi_startproc
 7869              		@ args = 0, pretend = 0, frame = 8
 7870              		@ frame_needed = 1, uses_anonymous_args = 0
 7871 0000 80B5     		push	{r7, lr}
 7872              	.LCFI450:
 7873              		.cfi_def_cfa_offset 8
 7874              		.cfi_offset 7, -8
 7875              		.cfi_offset 14, -4
 7876 0002 82B0     		sub	sp, sp, #8
 7877              	.LCFI451:
 7878              		.cfi_def_cfa_offset 16
 7879 0004 00AF     		add	r7, sp, #0
 7880              	.LCFI452:
 7881              		.cfi_def_cfa_register 7
 7882 0006 7860     		str	r0, [r7, #4]
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 7883              		.loc 2 1656 20
 7884 0008 7868     		ldr	r0, [r7, #4]
 7885 000a FFF7FEFF 		bl	_ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv
 7886 000e 0346     		mov	r3, r0
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 7887              		.loc 2 1656 23
 7888 0010 022B     		cmp	r3, #2
 7889 0012 14BF     		ite	ne
 7890 0014 0123     		movne	r3, #1
 7891 0016 0023     		moveq	r3, #0
 7892 0018 DBB2     		uxtb	r3, r3
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 7893              		.loc 2 1656 7
 7894 001a 002B     		cmp	r3, #0
 7895 001c 06D0     		beq	.L302
1657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __detail::__variant::__get<_Np>(__v);
 7896              		.loc 2 1657 28
 7897 001e 7868     		ldr	r0, [r7, #4]
 7898 0020 FFF7FEFF 		bl	_ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv
 7899 0024 0346     		mov	r3, r0
 7900 0026 1846     		mov	r0, r3
 7901 0028 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessb
 7902              	.L302:
1658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 7903              		.loc 2 1658 45
 7904 002c 7868     		ldr	r0, [r7, #4]
 7905 002e FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
 7906 0032 0346     		mov	r3, r0
 7907              		.loc 2 1659 5
 7908 0034 1846     		mov	r0, r3
 7909 0036 0837     		adds	r7, r7, #8
 7910              	.LCFI453:
 7911              		.cfi_def_cfa_offset 8
 7912 0038 BD46     		mov	sp, r7
 7913              	.LCFI454:
ARM GAS  /tmp/ccqv0h9S.s 			page 238


 7914              		.cfi_def_cfa_register 13
 7915              		@ sp needed
 7916 003a 80BD     		pop	{r7, pc}
 7917              		.cfi_endproc
 7918              	.LFE5045:
 7920              		.section	.text._ZSt7forwardIRP10OutputPortIfEEOT_RNSt16remove_referenceIS4_E4typeE,"axG",%progbits
 7921              		.align	1
 7922              		.weak	_ZSt7forwardIRP10OutputPortIfEEOT_RNSt16remove_referenceIS4_E4typeE
 7923              		.syntax unified
 7924              		.thumb
 7925              		.thumb_func
 7926              		.fpu fpv4-sp-d16
 7928              	_ZSt7forwardIRP10OutputPortIfEEOT_RNSt16remove_referenceIS4_E4typeE:
 7929              	.LFB5050:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 7930              		.loc 13 76 5
 7931              		.cfi_startproc
 7932              		@ args = 0, pretend = 0, frame = 8
 7933              		@ frame_needed = 1, uses_anonymous_args = 0
 7934              		@ link register save eliminated.
 7935 0000 80B4     		push	{r7}
 7936              	.LCFI455:
 7937              		.cfi_def_cfa_offset 4
 7938              		.cfi_offset 7, -4
 7939 0002 83B0     		sub	sp, sp, #12
 7940              	.LCFI456:
 7941              		.cfi_def_cfa_offset 16
 7942 0004 00AF     		add	r7, sp, #0
 7943              	.LCFI457:
 7944              		.cfi_def_cfa_register 7
 7945 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 7946              		.loc 13 77 36
 7947 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 7948              		.loc 13 77 39
 7949 000a 1846     		mov	r0, r3
 7950 000c 0C37     		adds	r7, r7, #12
 7951              	.LCFI458:
 7952              		.cfi_def_cfa_offset 4
 7953 000e BD46     		mov	sp, r7
 7954              	.LCFI459:
 7955              		.cfi_def_cfa_register 13
 7956              		@ sp needed
 7957 0010 5DF8047B 		ldr	r7, [sp], #4
 7958              	.LCFI460:
 7959              		.cfi_restore 7
 7960              		.cfi_def_cfa_offset 0
 7961 0014 7047     		bx	lr
 7962              		.cfi_endproc
 7963              	.LFE5050:
 7965              		.section	.text._ZNSt7variantIJfPfP10OutputPortIfEEE7emplaceILj2EJRS3_EEENSt9enable_ifIX18is_constr
 7966              		.align	1
 7967              		.weak	_ZNSt7variantIJfPfP10OutputPortIfEEE7emplaceILj2EJRS3_EEENSt9enable_ifIX18is_constructible_v
 7968              		.syntax unified
 7969              		.thumb
 7970              		.thumb_func
ARM GAS  /tmp/ccqv0h9S.s 			page 239


 7971              		.fpu fpv4-sp-d16
 7973              	_ZNSt7variantIJfPfP10OutputPortIfEEE7emplaceILj2EJRS3_EEENSt9enable_ifIX18is_constructible_vINSt19v
 7974              	.LFB5051:
1463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 7975              		.loc 2 1463 2
 7976              		.cfi_startproc
 7977              		@ args = 0, pretend = 0, frame = 8
 7978              		@ frame_needed = 1, uses_anonymous_args = 0
 7979 0000 80B5     		push	{r7, lr}
 7980              	.LCFI461:
 7981              		.cfi_def_cfa_offset 8
 7982              		.cfi_offset 7, -8
 7983              		.cfi_offset 14, -4
 7984 0002 82B0     		sub	sp, sp, #8
 7985              	.LCFI462:
 7986              		.cfi_def_cfa_offset 16
 7987 0004 00AF     		add	r7, sp, #0
 7988              	.LCFI463:
 7989              		.cfi_def_cfa_register 7
 7990 0006 7860     		str	r0, [r7, #4]
 7991 0008 3960     		str	r1, [r7]
1472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this,
 7992              		.loc 2 1472 22
 7993 000a 7B68     		ldr	r3, [r7, #4]
 7994 000c 1846     		mov	r0, r3
 7995 000e FFF7FEFF 		bl	_ZNSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_resetEv
1473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...);
 7996              		.loc 2 1473 41
 7997 0012 3868     		ldr	r0, [r7]
 7998 0014 FFF7FEFF 		bl	_ZSt7forwardIRP10OutputPortIfEEOT_RNSt16remove_referenceIS4_E4typeE
 7999 0018 0346     		mov	r3, r0
 8000 001a 1946     		mov	r1, r3
 8001 001c 7868     		ldr	r0, [r7, #4]
 8002 001e FFF7FEFF 		bl	_ZSt28__variant_construct_by_indexILj2ESt7variantIJfPfP10OutputPortIfEEEJRS4_EEvRT0_DpOT1_
1509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 8003              		.loc 2 1509 24
 8004 0022 7868     		ldr	r0, [r7, #4]
 8005 0024 FFF7FEFF 		bl	_ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_
 8006 0028 0346     		mov	r3, r0
1510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8007              		.loc 2 1510 2
 8008 002a 1846     		mov	r0, r3
 8009 002c 0837     		adds	r7, r7, #8
 8010              	.LCFI464:
 8011              		.cfi_def_cfa_offset 8
 8012 002e BD46     		mov	sp, r7
 8013              	.LCFI465:
 8014              		.cfi_def_cfa_register 13
 8015              		@ sp needed
 8016 0030 80BD     		pop	{r7, pc}
 8017              		.cfi_endproc
 8018              	.LFE5051:
 8020              		.section	.text._ZNSt22_Optional_payload_baseIfE6_M_getEv,"axG",%progbits,_ZNSt22_Optional_payload_
 8021              		.align	1
 8022              		.weak	_ZNSt22_Optional_payload_baseIfE6_M_getEv
 8023              		.syntax unified
 8024              		.thumb
ARM GAS  /tmp/ccqv0h9S.s 			page 240


 8025              		.thumb_func
 8026              		.fpu fpv4-sp-d16
 8028              	_ZNSt22_Optional_payload_baseIfE6_M_getEv:
 8029              	.LFB5052:
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_payload._M_value; }
 8030              		.loc 12 268 7
 8031              		.cfi_startproc
 8032              		@ args = 0, pretend = 0, frame = 8
 8033              		@ frame_needed = 1, uses_anonymous_args = 0
 8034              		@ link register save eliminated.
 8035 0000 80B4     		push	{r7}
 8036              	.LCFI466:
 8037              		.cfi_def_cfa_offset 4
 8038              		.cfi_offset 7, -4
 8039 0002 83B0     		sub	sp, sp, #12
 8040              	.LCFI467:
 8041              		.cfi_def_cfa_offset 16
 8042 0004 00AF     		add	r7, sp, #0
 8043              	.LCFI468:
 8044              		.cfi_def_cfa_register 7
 8045 0006 7860     		str	r0, [r7, #4]
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 8046              		.loc 12 269 33
 8047 0008 7B68     		ldr	r3, [r7, #4]
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 8048              		.loc 12 269 43
 8049 000a 1846     		mov	r0, r3
 8050 000c 0C37     		adds	r7, r7, #12
 8051              	.LCFI469:
 8052              		.cfi_def_cfa_offset 4
 8053 000e BD46     		mov	sp, r7
 8054              	.LCFI470:
 8055              		.cfi_def_cfa_register 13
 8056              		@ sp needed
 8057 0010 5DF8047B 		ldr	r7, [sp], #4
 8058              	.LCFI471:
 8059              		.cfi_restore 7
 8060              		.cfi_def_cfa_offset 0
 8061 0014 7047     		bx	lr
 8062              		.cfi_endproc
 8063              	.LFE5052:
 8065              		.section	.text._ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE22valueless_by_exceptionEv,"axG"
 8066              		.align	1
 8067              		.weak	_ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE22valueless_by_exceptionEv
 8068              		.syntax unified
 8069              		.thumb
 8070              		.thumb_func
 8071              		.fpu fpv4-sp-d16
 8073              	_ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE22valueless_by_exceptionEv:
 8074              	.LFB5064:
1559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return !this->_M_valid(); }
 8075              		.loc 2 1559 22
 8076              		.cfi_startproc
 8077              		@ args = 0, pretend = 0, frame = 8
 8078              		@ frame_needed = 1, uses_anonymous_args = 0
 8079 0000 80B5     		push	{r7, lr}
 8080              	.LCFI472:
ARM GAS  /tmp/ccqv0h9S.s 			page 241


 8081              		.cfi_def_cfa_offset 8
 8082              		.cfi_offset 7, -8
 8083              		.cfi_offset 14, -4
 8084 0002 82B0     		sub	sp, sp, #8
 8085              	.LCFI473:
 8086              		.cfi_def_cfa_offset 16
 8087 0004 00AF     		add	r7, sp, #0
 8088              	.LCFI474:
 8089              		.cfi_def_cfa_register 7
 8090 0006 7860     		str	r0, [r7, #4]
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8091              		.loc 2 1560 31
 8092 0008 7B68     		ldr	r3, [r7, #4]
 8093 000a 1846     		mov	r0, r3
 8094 000c FFF7FEFF 		bl	_ZNKSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE8_M_validEv
 8095 0010 0346     		mov	r3, r0
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8096              		.loc 2 1560 32
 8097 0012 83F00103 		eor	r3, r3, #1
 8098 0016 DBB2     		uxtb	r3, r3
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8099              		.loc 2 1560 35
 8100 0018 1846     		mov	r0, r3
 8101 001a 0837     		adds	r7, r7, #8
 8102              	.LCFI475:
 8103              		.cfi_def_cfa_offset 8
 8104 001c BD46     		mov	sp, r7
 8105              	.LCFI476:
 8106              		.cfi_def_cfa_register 13
 8107              		@ sp needed
 8108 001e 80BD     		pop	{r7, pc}
 8109              		.cfi_endproc
 8110              	.LFE5064:
 8112              		.section	.text._ZSt7forwardIRSt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEEOT_RNSt16remove_refer
 8113              		.align	1
 8114              		.weak	_ZSt7forwardIRSt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEEOT_RNSt16remove_referenceIS9_E
 8115              		.syntax unified
 8116              		.thumb
 8117              		.thumb_func
 8118              		.fpu fpv4-sp-d16
 8120              	_ZSt7forwardIRSt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEEOT_RNSt16remove_referenceIS9_E4typeE:
 8121              	.LFB5065:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8122              		.loc 13 76 5
 8123              		.cfi_startproc
 8124              		@ args = 0, pretend = 0, frame = 8
 8125              		@ frame_needed = 1, uses_anonymous_args = 0
 8126              		@ link register save eliminated.
 8127 0000 80B4     		push	{r7}
 8128              	.LCFI477:
 8129              		.cfi_def_cfa_offset 4
 8130              		.cfi_offset 7, -4
 8131 0002 83B0     		sub	sp, sp, #12
 8132              	.LCFI478:
 8133              		.cfi_def_cfa_offset 16
 8134 0004 00AF     		add	r7, sp, #0
 8135              	.LCFI479:
ARM GAS  /tmp/ccqv0h9S.s 			page 242


 8136              		.cfi_def_cfa_register 7
 8137 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8138              		.loc 13 77 36
 8139 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8140              		.loc 13 77 39
 8141 000a 1846     		mov	r0, r3
 8142 000c 0C37     		adds	r7, r7, #12
 8143              	.LCFI480:
 8144              		.cfi_def_cfa_offset 4
 8145 000e BD46     		mov	sp, r7
 8146              	.LCFI481:
 8147              		.cfi_def_cfa_register 13
 8148              		@ sp needed
 8149 0010 5DF8047B 		ldr	r7, [sp], #4
 8150              	.LCFI482:
 8151              		.cfi_restore 7
 8152              		.cfi_def_cfa_offset 0
 8153 0014 7047     		bx	lr
 8154              		.cfi_endproc
 8155              	.LFE5065:
 8157              		.section	.text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS4_P10OutputPort
 8158              		.align	1
 8159              		.weak	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEE
 8160              		.syntax unified
 8161              		.thumb
 8162              		.thumb_func
 8163              		.fpu fpv4-sp-d16
 8165              	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEOT_RNSt
 8166              	.LFB5066:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8167              		.loc 13 76 5
 8168              		.cfi_startproc
 8169              		@ args = 0, pretend = 0, frame = 8
 8170              		@ frame_needed = 1, uses_anonymous_args = 0
 8171              		@ link register save eliminated.
 8172 0000 80B4     		push	{r7}
 8173              	.LCFI483:
 8174              		.cfi_def_cfa_offset 4
 8175              		.cfi_offset 7, -4
 8176 0002 83B0     		sub	sp, sp, #12
 8177              	.LCFI484:
 8178              		.cfi_def_cfa_offset 16
 8179 0004 00AF     		add	r7, sp, #0
 8180              	.LCFI485:
 8181              		.cfi_def_cfa_register 7
 8182 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8183              		.loc 13 77 36
 8184 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8185              		.loc 13 77 39
 8186 000a 1846     		mov	r0, r3
 8187 000c 0C37     		adds	r7, r7, #12
 8188              	.LCFI486:
 8189              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccqv0h9S.s 			page 243


 8190 000e BD46     		mov	sp, r7
 8191              	.LCFI487:
 8192              		.cfi_def_cfa_register 13
 8193              		@ sp needed
 8194 0010 5DF8047B 		ldr	r7, [sp], #4
 8195              	.LCFI488:
 8196              		.cfi_restore 7
 8197              		.cfi_def_cfa_offset 0
 8198 0014 7047     		bx	lr
 8199              		.cfi_endproc
 8200              	.LFE5066:
 8202              		.section	.text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4
 8203              		.align	1
 8204              		.weak	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEOT_
 8205              		.syntax unified
 8206              		.thumb
 8207              		.thumb_func
 8208              		.fpu fpv4-sp-d16
 8210              	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEOT_RNSt16r
 8211              	.LFB5067:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8212              		.loc 13 76 5
 8213              		.cfi_startproc
 8214              		@ args = 0, pretend = 0, frame = 8
 8215              		@ frame_needed = 1, uses_anonymous_args = 0
 8216              		@ link register save eliminated.
 8217 0000 80B4     		push	{r7}
 8218              	.LCFI489:
 8219              		.cfi_def_cfa_offset 4
 8220              		.cfi_offset 7, -4
 8221 0002 83B0     		sub	sp, sp, #12
 8222              	.LCFI490:
 8223              		.cfi_def_cfa_offset 16
 8224 0004 00AF     		add	r7, sp, #0
 8225              	.LCFI491:
 8226              		.cfi_def_cfa_register 7
 8227 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8228              		.loc 13 77 36
 8229 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8230              		.loc 13 77 39
 8231 000a 1846     		mov	r0, r3
 8232 000c 0C37     		adds	r7, r7, #12
 8233              	.LCFI492:
 8234              		.cfi_def_cfa_offset 4
 8235 000e BD46     		mov	sp, r7
 8236              	.LCFI493:
 8237              		.cfi_def_cfa_register 13
 8238              		@ sp needed
 8239 0010 5DF8047B 		ldr	r7, [sp], #4
 8240              	.LCFI494:
 8241              		.cfi_restore 7
 8242              		.cfi_def_cfa_offset 0
 8243 0014 7047     		bx	lr
 8244              		.cfi_endproc
 8245              	.LFE5067:
ARM GAS  /tmp/ccqv0h9S.s 			page 244


 8247              		.section	.text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortISt4pairIffEEEE
 8248              		.align	1
 8249              		.weak	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEOT_RNSt
 8250              		.syntax unified
 8251              		.thumb
 8252              		.thumb_func
 8253              		.fpu fpv4-sp-d16
 8255              	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEOT_RNSt16remov
 8256              	.LFB5068:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8257              		.loc 13 76 5
 8258              		.cfi_startproc
 8259              		@ args = 0, pretend = 0, frame = 8
 8260              		@ frame_needed = 1, uses_anonymous_args = 0
 8261              		@ link register save eliminated.
 8262 0000 80B4     		push	{r7}
 8263              	.LCFI495:
 8264              		.cfi_def_cfa_offset 4
 8265              		.cfi_offset 7, -4
 8266 0002 83B0     		sub	sp, sp, #12
 8267              	.LCFI496:
 8268              		.cfi_def_cfa_offset 16
 8269 0004 00AF     		add	r7, sp, #0
 8270              	.LCFI497:
 8271              		.cfi_def_cfa_register 7
 8272 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8273              		.loc 13 77 36
 8274 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8275              		.loc 13 77 39
 8276 000a 1846     		mov	r0, r3
 8277 000c 0C37     		adds	r7, r7, #12
 8278              	.LCFI498:
 8279              		.cfi_def_cfa_offset 4
 8280 000e BD46     		mov	sp, r7
 8281              	.LCFI499:
 8282              		.cfi_def_cfa_register 13
 8283              		@ sp needed
 8284 0010 5DF8047B 		ldr	r7, [sp], #4
 8285              	.LCFI500:
 8286              		.cfi_restore 7
 8287              		.cfi_def_cfa_offset 0
 8288 0014 7047     		bx	lr
 8289              		.cfi_endproc
 8290              	.LFE5068:
 8292              		.section	.text._ZNRSt8__detail9__variant14_UninitializedIP10OutputPortISt4pairIffEELb1EE6_M_getEv,
 8293              		.align	1
 8294              		.weak	_ZNRSt8__detail9__variant14_UninitializedIP10OutputPortISt4pairIffEELb1EE6_M_getEv
 8295              		.syntax unified
 8296              		.thumb
 8297              		.thumb_func
 8298              		.fpu fpv4-sp-d16
 8300              	_ZNRSt8__detail9__variant14_UninitializedIP10OutputPortISt4pairIffEELb1EE6_M_getEv:
 8301              	.LFB5069:
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 8302              		.loc 2 222 24
ARM GAS  /tmp/ccqv0h9S.s 			page 245


 8303              		.cfi_startproc
 8304              		@ args = 0, pretend = 0, frame = 8
 8305              		@ frame_needed = 1, uses_anonymous_args = 0
 8306              		@ link register save eliminated.
 8307 0000 80B4     		push	{r7}
 8308              	.LCFI501:
 8309              		.cfi_def_cfa_offset 4
 8310              		.cfi_offset 7, -4
 8311 0002 83B0     		sub	sp, sp, #12
 8312              	.LCFI502:
 8313              		.cfi_def_cfa_offset 16
 8314 0004 00AF     		add	r7, sp, #0
 8315              	.LCFI503:
 8316              		.cfi_def_cfa_register 7
 8317 0006 7860     		str	r0, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8318              		.loc 2 223 16
 8319 0008 7B68     		ldr	r3, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8320              		.loc 2 223 28
 8321 000a 1846     		mov	r0, r3
 8322 000c 0C37     		adds	r7, r7, #12
 8323              	.LCFI504:
 8324              		.cfi_def_cfa_offset 4
 8325 000e BD46     		mov	sp, r7
 8326              	.LCFI505:
 8327              		.cfi_def_cfa_register 13
 8328              		@ sp needed
 8329 0010 5DF8047B 		ldr	r7, [sp], #4
 8330              	.LCFI506:
 8331              		.cfi_restore 7
 8332              		.cfi_def_cfa_offset 0
 8333 0014 7047     		bx	lr
 8334              		.cfi_endproc
 8335              	.LFE5069:
 8337              		.section	.text._ZNSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE
 8338              		.align	1
 8339              		.weak	_ZNSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE8_M_reset
 8340              		.syntax unified
 8341              		.thumb
 8342              		.thumb_func
 8343              		.fpu fpv4-sp-d16
 8345              	_ZNSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE8_M_resetEv:
 8346              	.LFB5070:
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { _M_index = static_cast<__index_type>(variant_npos); }
 8347              		.loc 2 451 12
 8348              		.cfi_startproc
 8349              		@ args = 0, pretend = 0, frame = 8
 8350              		@ frame_needed = 1, uses_anonymous_args = 0
 8351              		@ link register save eliminated.
 8352 0000 80B4     		push	{r7}
 8353              	.LCFI507:
 8354              		.cfi_def_cfa_offset 4
 8355              		.cfi_offset 7, -4
 8356 0002 83B0     		sub	sp, sp, #12
 8357              	.LCFI508:
 8358              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccqv0h9S.s 			page 246


 8359 0004 00AF     		add	r7, sp, #0
 8360              	.LCFI509:
 8361              		.cfi_def_cfa_register 7
 8362 0006 7860     		str	r0, [r7, #4]
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8363              		.loc 2 452 18
 8364 0008 7B68     		ldr	r3, [r7, #4]
 8365 000a FF22     		movs	r2, #255
 8366 000c 1A72     		strb	r2, [r3, #8]
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8367              		.loc 2 452 61
 8368 000e 00BF     		nop
 8369 0010 0C37     		adds	r7, r7, #12
 8370              	.LCFI510:
 8371              		.cfi_def_cfa_offset 4
 8372 0012 BD46     		mov	sp, r7
 8373              	.LCFI511:
 8374              		.cfi_def_cfa_register 13
 8375              		@ sp needed
 8376 0014 5DF8047B 		ldr	r7, [sp], #4
 8377              	.LCFI512:
 8378              		.cfi_restore 7
 8379              		.cfi_def_cfa_offset 0
 8380 0018 7047     		bx	lr
 8381              		.cfi_endproc
 8382              	.LFE5070:
 8384              		.section	.text._ZSt28__variant_construct_by_indexILj2ESt7variantIJSt4pairIffEPS2_P10OutputPortIS2_
 8385              		.align	1
 8386              		.weak	_ZSt28__variant_construct_by_indexILj2ESt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEJRS6_E
 8387              		.syntax unified
 8388              		.thumb
 8389              		.thumb_func
 8390              		.fpu fpv4-sp-d16
 8392              	_ZSt28__variant_construct_by_indexILj2ESt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEJRS6_EEvRT0_D
 8393              	.LFB5071:
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 8394              		.loc 2 1060 10
 8395              		.cfi_startproc
 8396              		@ args = 0, pretend = 0, frame = 16
 8397              		@ frame_needed = 1, uses_anonymous_args = 0
 8398 0000 90B5     		push	{r4, r7, lr}
 8399              	.LCFI513:
 8400              		.cfi_def_cfa_offset 12
 8401              		.cfi_offset 4, -12
 8402              		.cfi_offset 7, -8
 8403              		.cfi_offset 14, -4
 8404 0002 85B0     		sub	sp, sp, #20
 8405              	.LCFI514:
 8406              		.cfi_def_cfa_offset 32
 8407 0004 00AF     		add	r7, sp, #0
 8408              	.LCFI515:
 8409              		.cfi_def_cfa_register 7
 8410 0006 7860     		str	r0, [r7, #4]
 8411 0008 3960     		str	r1, [r7]
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8412              		.loc 2 1062 20
 8413 000a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccqv0h9S.s 			page 247


 8414 000c 0222     		movs	r2, #2
 8415 000e 1A72     		strb	r2, [r3, #8]
1063:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ::new ((void*)std::addressof(__storage))
 8416              		.loc 2 1063 57
 8417 0010 7868     		ldr	r0, [r7, #4]
 8418 0012 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj2ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_
 8419 0016 F860     		str	r0, [r7, #12]
1066:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 8420              		.loc 2 1066 24
 8421 0018 3868     		ldr	r0, [r7]
 8422 001a FFF7FEFF 		bl	_ZSt7forwardIRP10OutputPortISt4pairIffEEEOT_RNSt16remove_referenceIS6_E4typeE
 8423 001e 0346     		mov	r3, r0
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
 8424              		.loc 2 1064 7
 8425 0020 1C68     		ldr	r4, [r3]
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
 8426              		.loc 2 1064 35
 8427 0022 F868     		ldr	r0, [r7, #12]
 8428 0024 FFF7FEFF 		bl	_ZSt9addressofIP10OutputPortISt4pairIffEEEPT_RS5_
 8429 0028 0346     		mov	r3, r0
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
 8430              		.loc 2 1064 7
 8431 002a 1946     		mov	r1, r3
 8432 002c 0420     		movs	r0, #4
 8433 002e FFF7FEFF 		bl	_ZnwjPv
 8434 0032 0346     		mov	r3, r0
 8435 0034 1C60     		str	r4, [r3]
1067:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8436              		.loc 2 1067 5
 8437 0036 00BF     		nop
 8438 0038 1437     		adds	r7, r7, #20
 8439              	.LCFI516:
 8440              		.cfi_def_cfa_offset 12
 8441 003a BD46     		mov	sp, r7
 8442              	.LCFI517:
 8443              		.cfi_def_cfa_register 13
 8444              		@ sp needed
 8445 003c 90BD     		pop	{r4, r7, pc}
 8446              		.cfi_endproc
 8447              	.LFE5071:
 8449              		.section	.text._ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv,"axG",%progbits,_ZN
 8450              		.align	1
 8451              		.weak	_ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv
 8452              		.syntax unified
 8453              		.thumb
 8454              		.thumb_func
 8455              		.fpu fpv4-sp-d16
 8457              	_ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv:
 8458              	.LFB5072:
1559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return !this->_M_valid(); }
 8459              		.loc 2 1559 22
 8460              		.cfi_startproc
 8461              		@ args = 0, pretend = 0, frame = 8
 8462              		@ frame_needed = 1, uses_anonymous_args = 0
 8463 0000 80B5     		push	{r7, lr}
 8464              	.LCFI518:
 8465              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccqv0h9S.s 			page 248


 8466              		.cfi_offset 7, -8
 8467              		.cfi_offset 14, -4
 8468 0002 82B0     		sub	sp, sp, #8
 8469              	.LCFI519:
 8470              		.cfi_def_cfa_offset 16
 8471 0004 00AF     		add	r7, sp, #0
 8472              	.LCFI520:
 8473              		.cfi_def_cfa_register 7
 8474 0006 7860     		str	r0, [r7, #4]
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8475              		.loc 2 1560 31
 8476 0008 7B68     		ldr	r3, [r7, #4]
 8477 000a 1846     		mov	r0, r3
 8478 000c FFF7FEFF 		bl	_ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv
 8479 0010 0346     		mov	r3, r0
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8480              		.loc 2 1560 32
 8481 0012 83F00103 		eor	r3, r3, #1
 8482 0016 DBB2     		uxtb	r3, r3
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8483              		.loc 2 1560 35
 8484 0018 1846     		mov	r0, r3
 8485 001a 0837     		adds	r7, r7, #8
 8486              	.LCFI521:
 8487              		.cfi_def_cfa_offset 8
 8488 001c BD46     		mov	sp, r7
 8489              	.LCFI522:
 8490              		.cfi_def_cfa_register 13
 8491              		@ sp needed
 8492 001e 80BD     		pop	{r7, pc}
 8493              		.cfi_endproc
 8494              	.LFE5072:
 8496              		.section	.text._ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4type
 8497              		.align	1
 8498              		.weak	_ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE
 8499              		.syntax unified
 8500              		.thumb
 8501              		.thumb_func
 8502              		.fpu fpv4-sp-d16
 8504              	_ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE:
 8505              	.LFB5073:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8506              		.loc 13 76 5
 8507              		.cfi_startproc
 8508              		@ args = 0, pretend = 0, frame = 8
 8509              		@ frame_needed = 1, uses_anonymous_args = 0
 8510              		@ link register save eliminated.
 8511 0000 80B4     		push	{r7}
 8512              	.LCFI523:
 8513              		.cfi_def_cfa_offset 4
 8514              		.cfi_offset 7, -4
 8515 0002 83B0     		sub	sp, sp, #12
 8516              	.LCFI524:
 8517              		.cfi_def_cfa_offset 16
 8518 0004 00AF     		add	r7, sp, #0
 8519              	.LCFI525:
 8520              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccqv0h9S.s 			page 249


 8521 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8522              		.loc 13 77 36
 8523 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8524              		.loc 13 77 39
 8525 000a 1846     		mov	r0, r3
 8526 000c 0C37     		adds	r7, r7, #12
 8527              	.LCFI526:
 8528              		.cfi_def_cfa_offset 4
 8529 000e BD46     		mov	sp, r7
 8530              	.LCFI527:
 8531              		.cfi_def_cfa_register 13
 8532              		@ sp needed
 8533 0010 5DF8047B 		ldr	r7, [sp], #4
 8534              	.LCFI528:
 8535              		.cfi_restore 7
 8536              		.cfi_def_cfa_offset 0
 8537 0014 7047     		bx	lr
 8538              		.cfi_endproc
 8539              	.LFE5073:
 8541              		.section	.text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RN
 8542              		.align	1
 8543              		.weak	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remov
 8544              		.syntax unified
 8545              		.thumb
 8546              		.thumb_func
 8547              		.fpu fpv4-sp-d16
 8549              	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remove_refer
 8550              	.LFB5074:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8551              		.loc 13 76 5
 8552              		.cfi_startproc
 8553              		@ args = 0, pretend = 0, frame = 8
 8554              		@ frame_needed = 1, uses_anonymous_args = 0
 8555              		@ link register save eliminated.
 8556 0000 80B4     		push	{r7}
 8557              	.LCFI529:
 8558              		.cfi_def_cfa_offset 4
 8559              		.cfi_offset 7, -4
 8560 0002 83B0     		sub	sp, sp, #12
 8561              	.LCFI530:
 8562              		.cfi_def_cfa_offset 16
 8563 0004 00AF     		add	r7, sp, #0
 8564              	.LCFI531:
 8565              		.cfi_def_cfa_register 7
 8566 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8567              		.loc 13 77 36
 8568 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8569              		.loc 13 77 39
 8570 000a 1846     		mov	r0, r3
 8571 000c 0C37     		adds	r7, r7, #12
 8572              	.LCFI532:
 8573              		.cfi_def_cfa_offset 4
 8574 000e BD46     		mov	sp, r7
ARM GAS  /tmp/ccqv0h9S.s 			page 250


 8575              	.LCFI533:
 8576              		.cfi_def_cfa_register 13
 8577              		@ sp needed
 8578 0010 5DF8047B 		ldr	r7, [sp], #4
 8579              	.LCFI534:
 8580              		.cfi_restore 7
 8581              		.cfi_def_cfa_offset 0
 8582 0014 7047     		bx	lr
 8583              		.cfi_endproc
 8584              	.LFE5074:
 8586              		.section	.text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNS
 8587              		.align	1
 8588              		.weak	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove
 8589              		.syntax unified
 8590              		.thumb
 8591              		.thumb_func
 8592              		.fpu fpv4-sp-d16
 8594              	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove_refere
 8595              	.LFB5075:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8596              		.loc 13 76 5
 8597              		.cfi_startproc
 8598              		@ args = 0, pretend = 0, frame = 8
 8599              		@ frame_needed = 1, uses_anonymous_args = 0
 8600              		@ link register save eliminated.
 8601 0000 80B4     		push	{r7}
 8602              	.LCFI535:
 8603              		.cfi_def_cfa_offset 4
 8604              		.cfi_offset 7, -4
 8605 0002 83B0     		sub	sp, sp, #12
 8606              	.LCFI536:
 8607              		.cfi_def_cfa_offset 16
 8608 0004 00AF     		add	r7, sp, #0
 8609              	.LCFI537:
 8610              		.cfi_def_cfa_register 7
 8611 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8612              		.loc 13 77 36
 8613 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8614              		.loc 13 77 39
 8615 000a 1846     		mov	r0, r3
 8616 000c 0C37     		adds	r7, r7, #12
 8617              	.LCFI538:
 8618              		.cfi_def_cfa_offset 4
 8619 000e BD46     		mov	sp, r7
 8620              	.LCFI539:
 8621              		.cfi_def_cfa_register 13
 8622              		@ sp needed
 8623 0010 5DF8047B 		ldr	r7, [sp], #4
 8624              	.LCFI540:
 8625              		.cfi_restore 7
 8626              		.cfi_def_cfa_offset 0
 8627 0014 7047     		bx	lr
 8628              		.cfi_endproc
 8629              	.LFE5075:
 8631              		.section	.text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt1
ARM GAS  /tmp/ccqv0h9S.s 			page 251


 8632              		.align	1
 8633              		.weak	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt16remove_r
 8634              		.syntax unified
 8635              		.thumb
 8636              		.thumb_func
 8637              		.fpu fpv4-sp-d16
 8639              	_ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt16remove_referenc
 8640              	.LFB5076:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8641              		.loc 13 76 5
 8642              		.cfi_startproc
 8643              		@ args = 0, pretend = 0, frame = 8
 8644              		@ frame_needed = 1, uses_anonymous_args = 0
 8645              		@ link register save eliminated.
 8646 0000 80B4     		push	{r7}
 8647              	.LCFI541:
 8648              		.cfi_def_cfa_offset 4
 8649              		.cfi_offset 7, -4
 8650 0002 83B0     		sub	sp, sp, #12
 8651              	.LCFI542:
 8652              		.cfi_def_cfa_offset 16
 8653 0004 00AF     		add	r7, sp, #0
 8654              	.LCFI543:
 8655              		.cfi_def_cfa_register 7
 8656 0006 7860     		str	r0, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8657              		.loc 13 77 36
 8658 0008 7B68     		ldr	r3, [r7, #4]
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 8659              		.loc 13 77 39
 8660 000a 1846     		mov	r0, r3
 8661 000c 0C37     		adds	r7, r7, #12
 8662              	.LCFI544:
 8663              		.cfi_def_cfa_offset 4
 8664 000e BD46     		mov	sp, r7
 8665              	.LCFI545:
 8666              		.cfi_def_cfa_register 13
 8667              		@ sp needed
 8668 0010 5DF8047B 		ldr	r7, [sp], #4
 8669              	.LCFI546:
 8670              		.cfi_restore 7
 8671              		.cfi_def_cfa_offset 0
 8672 0014 7047     		bx	lr
 8673              		.cfi_endproc
 8674              	.LFE5076:
 8676              		.section	.text._ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv,"axG",%pro
 8677              		.align	1
 8678              		.weak	_ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv
 8679              		.syntax unified
 8680              		.thumb
 8681              		.thumb_func
 8682              		.fpu fpv4-sp-d16
 8684              	_ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv:
 8685              	.LFB5077:
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 8686              		.loc 2 222 24
 8687              		.cfi_startproc
ARM GAS  /tmp/ccqv0h9S.s 			page 252


 8688              		@ args = 0, pretend = 0, frame = 8
 8689              		@ frame_needed = 1, uses_anonymous_args = 0
 8690              		@ link register save eliminated.
 8691 0000 80B4     		push	{r7}
 8692              	.LCFI547:
 8693              		.cfi_def_cfa_offset 4
 8694              		.cfi_offset 7, -4
 8695 0002 83B0     		sub	sp, sp, #12
 8696              	.LCFI548:
 8697              		.cfi_def_cfa_offset 16
 8698 0004 00AF     		add	r7, sp, #0
 8699              	.LCFI549:
 8700              		.cfi_def_cfa_register 7
 8701 0006 7860     		str	r0, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8702              		.loc 2 223 16
 8703 0008 7B68     		ldr	r3, [r7, #4]
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8704              		.loc 2 223 28
 8705 000a 1846     		mov	r0, r3
 8706 000c 0C37     		adds	r7, r7, #12
 8707              	.LCFI550:
 8708              		.cfi_def_cfa_offset 4
 8709 000e BD46     		mov	sp, r7
 8710              	.LCFI551:
 8711              		.cfi_def_cfa_register 13
 8712              		@ sp needed
 8713 0010 5DF8047B 		ldr	r7, [sp], #4
 8714              	.LCFI552:
 8715              		.cfi_restore 7
 8716              		.cfi_def_cfa_offset 0
 8717 0014 7047     		bx	lr
 8718              		.cfi_endproc
 8719              	.LFE5077:
 8721              		.section	.text._ZNSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_resetEv,"a
 8722              		.align	1
 8723              		.weak	_ZNSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_resetEv
 8724              		.syntax unified
 8725              		.thumb
 8726              		.thumb_func
 8727              		.fpu fpv4-sp-d16
 8729              	_ZNSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_resetEv:
 8730              	.LFB5078:
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { _M_index = static_cast<__index_type>(variant_npos); }
 8731              		.loc 2 451 12
 8732              		.cfi_startproc
 8733              		@ args = 0, pretend = 0, frame = 8
 8734              		@ frame_needed = 1, uses_anonymous_args = 0
 8735              		@ link register save eliminated.
 8736 0000 80B4     		push	{r7}
 8737              	.LCFI553:
 8738              		.cfi_def_cfa_offset 4
 8739              		.cfi_offset 7, -4
 8740 0002 83B0     		sub	sp, sp, #12
 8741              	.LCFI554:
 8742              		.cfi_def_cfa_offset 16
 8743 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccqv0h9S.s 			page 253


 8744              	.LCFI555:
 8745              		.cfi_def_cfa_register 7
 8746 0006 7860     		str	r0, [r7, #4]
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8747              		.loc 2 452 18
 8748 0008 7B68     		ldr	r3, [r7, #4]
 8749 000a FF22     		movs	r2, #255
 8750 000c 1A71     		strb	r2, [r3, #4]
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8751              		.loc 2 452 61
 8752 000e 00BF     		nop
 8753 0010 0C37     		adds	r7, r7, #12
 8754              	.LCFI556:
 8755              		.cfi_def_cfa_offset 4
 8756 0012 BD46     		mov	sp, r7
 8757              	.LCFI557:
 8758              		.cfi_def_cfa_register 13
 8759              		@ sp needed
 8760 0014 5DF8047B 		ldr	r7, [sp], #4
 8761              	.LCFI558:
 8762              		.cfi_restore 7
 8763              		.cfi_def_cfa_offset 0
 8764 0018 7047     		bx	lr
 8765              		.cfi_endproc
 8766              	.LFE5078:
 8768              		.section	.text._ZSt28__variant_construct_by_indexILj2ESt7variantIJfPfP10OutputPortIfEEEJRS4_EEvRT0
 8769              		.align	1
 8770              		.weak	_ZSt28__variant_construct_by_indexILj2ESt7variantIJfPfP10OutputPortIfEEEJRS4_EEvRT0_DpOT1_
 8771              		.syntax unified
 8772              		.thumb
 8773              		.thumb_func
 8774              		.fpu fpv4-sp-d16
 8776              	_ZSt28__variant_construct_by_indexILj2ESt7variantIJfPfP10OutputPortIfEEEJRS4_EEvRT0_DpOT1_:
 8777              	.LFB5079:
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 8778              		.loc 2 1060 10
 8779              		.cfi_startproc
 8780              		@ args = 0, pretend = 0, frame = 16
 8781              		@ frame_needed = 1, uses_anonymous_args = 0
 8782 0000 90B5     		push	{r4, r7, lr}
 8783              	.LCFI559:
 8784              		.cfi_def_cfa_offset 12
 8785              		.cfi_offset 4, -12
 8786              		.cfi_offset 7, -8
 8787              		.cfi_offset 14, -4
 8788 0002 85B0     		sub	sp, sp, #20
 8789              	.LCFI560:
 8790              		.cfi_def_cfa_offset 32
 8791 0004 00AF     		add	r7, sp, #0
 8792              	.LCFI561:
 8793              		.cfi_def_cfa_register 7
 8794 0006 7860     		str	r0, [r7, #4]
 8795 0008 3960     		str	r1, [r7]
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
 8796              		.loc 2 1062 20
 8797 000a 7B68     		ldr	r3, [r7, #4]
 8798 000c 0222     		movs	r2, #2
ARM GAS  /tmp/ccqv0h9S.s 			page 254


 8799 000e 1A71     		strb	r2, [r3, #4]
1063:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ::new ((void*)std::addressof(__storage))
 8800              		.loc 2 1063 57
 8801 0010 7868     		ldr	r0, [r7, #4]
 8802 0012 FFF7FEFF 		bl	_ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
 8803 0016 F860     		str	r0, [r7, #12]
1066:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 8804              		.loc 2 1066 24
 8805 0018 3868     		ldr	r0, [r7]
 8806 001a FFF7FEFF 		bl	_ZSt7forwardIRP10OutputPortIfEEOT_RNSt16remove_referenceIS4_E4typeE
 8807 001e 0346     		mov	r3, r0
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
 8808              		.loc 2 1064 7
 8809 0020 1C68     		ldr	r4, [r3]
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
 8810              		.loc 2 1064 35
 8811 0022 F868     		ldr	r0, [r7, #12]
 8812 0024 FFF7FEFF 		bl	_ZSt9addressofIP10OutputPortIfEEPT_RS3_
 8813 0028 0346     		mov	r3, r0
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
 8814              		.loc 2 1064 7
 8815 002a 1946     		mov	r1, r3
 8816 002c 0420     		movs	r0, #4
 8817 002e FFF7FEFF 		bl	_ZnwjPv
 8818 0032 0346     		mov	r3, r0
 8819 0034 1C60     		str	r4, [r3]
1067:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8820              		.loc 2 1067 5
 8821 0036 00BF     		nop
 8822 0038 1437     		adds	r7, r7, #20
 8823              	.LCFI562:
 8824              		.cfi_def_cfa_offset 12
 8825 003a BD46     		mov	sp, r7
 8826              	.LCFI563:
 8827              		.cfi_def_cfa_register 13
 8828              		@ sp needed
 8829 003c 90BD     		pop	{r4, r7, pc}
 8830              		.cfi_endproc
 8831              	.LFE5079:
 8833              		.section	.text._ZNKSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EE
 8834              		.align	1
 8835              		.weak	_ZNKSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE8_M_vali
 8836              		.syntax unified
 8837              		.thumb
 8838              		.thumb_func
 8839              		.fpu fpv4-sp-d16
 8841              	_ZNKSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE8_M_validEv:
 8842              	.LFB5080:
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 8843              		.loc 2 462 7
 8844              		.cfi_startproc
 8845              		@ args = 0, pretend = 0, frame = 8
 8846              		@ frame_needed = 1, uses_anonymous_args = 0
 8847              		@ link register save eliminated.
 8848 0000 80B4     		push	{r7}
 8849              	.LCFI564:
 8850              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccqv0h9S.s 			page 255


 8851              		.cfi_offset 7, -4
 8852 0002 83B0     		sub	sp, sp, #12
 8853              	.LCFI565:
 8854              		.cfi_def_cfa_offset 16
 8855 0004 00AF     		add	r7, sp, #0
 8856              	.LCFI566:
 8857              		.cfi_def_cfa_register 7
 8858 0006 7860     		str	r0, [r7, #4]
 466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 8859              		.loc 2 466 15
 8860 0008 7B68     		ldr	r3, [r7, #4]
 8861 000a 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 8862              		.loc 2 466 65
 8863 000c FF2B     		cmp	r3, #255
 8864 000e 14BF     		ite	ne
 8865 0010 0123     		movne	r3, #1
 8866 0012 0023     		moveq	r3, #0
 8867 0014 DBB2     		uxtb	r3, r3
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8868              		.loc 2 467 7
 8869 0016 1846     		mov	r0, r3
 8870 0018 0C37     		adds	r7, r7, #12
 8871              	.LCFI567:
 8872              		.cfi_def_cfa_offset 4
 8873 001a BD46     		mov	sp, r7
 8874              	.LCFI568:
 8875              		.cfi_def_cfa_register 13
 8876              		@ sp needed
 8877 001c 5DF8047B 		ldr	r7, [sp], #4
 8878              	.LCFI569:
 8879              		.cfi_restore 7
 8880              		.cfi_def_cfa_offset 0
 8881 0020 7047     		bx	lr
 8882              		.cfi_endproc
 8883              	.LFE5080:
 8885              		.section	.text._ZSt9addressofIP10OutputPortISt4pairIffEEEPT_RS5_,"axG",%progbits,_ZSt9addressofIP1
 8886              		.align	1
 8887              		.weak	_ZSt9addressofIP10OutputPortISt4pairIffEEEPT_RS5_
 8888              		.syntax unified
 8889              		.thumb
 8890              		.thumb_func
 8891              		.fpu fpv4-sp-d16
 8893              	_ZSt9addressofIP10OutputPortISt4pairIffEEEPT_RS5_:
 8894              	.LFB5081:
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     struct __move_if_noexcept_cond
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****                     is_copy_constructible<_Tp>>::type { };
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief  Conditionally convert a value to an rvalue.
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @param  __x  A thing of arbitrary type.
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @return The parameter, possibly cast to an rvalue-reference.
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *
ARM GAS  /tmp/ccqv0h9S.s 			page 256


 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  Same as std::move unless the type's move constructor could throw and the
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  type is copyable, in which case an lvalue-reference is returned instead.
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     constexpr typename
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     move_if_noexcept(_Tp& __x) noexcept
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return std::move(__x); }
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   // declval, from type_traits.
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #if __cplusplus > 201402L
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   // 2296. std::addressof should be constexpr
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** # define __cpp_lib_addressof_constexpr 201603
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #endif
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief Returns the actual address of the object or function
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *         referenced by r, even in the presence of an overloaded
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *         operator&.
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @param  __r  Reference to an object or function.
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @return   The actual address.
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   */
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     inline _GLIBCXX17_CONSTEXPR _Tp*
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     addressof(_Tp& __r) noexcept
 8895              		.loc 13 140 5
 8896              		.cfi_startproc
 8897              		@ args = 0, pretend = 0, frame = 8
 8898              		@ frame_needed = 1, uses_anonymous_args = 0
 8899 0000 80B5     		push	{r7, lr}
 8900              	.LCFI570:
 8901              		.cfi_def_cfa_offset 8
 8902              		.cfi_offset 7, -8
 8903              		.cfi_offset 14, -4
 8904 0002 82B0     		sub	sp, sp, #8
 8905              	.LCFI571:
 8906              		.cfi_def_cfa_offset 16
 8907 0004 00AF     		add	r7, sp, #0
 8908              	.LCFI572:
 8909              		.cfi_def_cfa_register 7
 8910 0006 7860     		str	r0, [r7, #4]
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return std::__addressof(__r); }
 8911              		.loc 13 141 30
 8912 0008 7868     		ldr	r0, [r7, #4]
 8913 000a FFF7FEFF 		bl	_ZSt11__addressofIP10OutputPortISt4pairIffEEEPT_RS5_
 8914 000e 0346     		mov	r3, r0
 8915              		.loc 13 141 37
 8916 0010 1846     		mov	r0, r3
 8917 0012 0837     		adds	r7, r7, #8
 8918              	.LCFI573:
 8919              		.cfi_def_cfa_offset 8
 8920 0014 BD46     		mov	sp, r7
 8921              	.LCFI574:
 8922              		.cfi_def_cfa_register 13
 8923              		@ sp needed
 8924 0016 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccqv0h9S.s 			page 257


 8925              		.cfi_endproc
 8926              	.LFE5081:
 8928              		.section	.text._ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv,"
 8929              		.align	1
 8930              		.weak	_ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv
 8931              		.syntax unified
 8932              		.thumb
 8933              		.thumb_func
 8934              		.fpu fpv4-sp-d16
 8936              	_ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv:
 8937              	.LFB5082:
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 8938              		.loc 2 462 7
 8939              		.cfi_startproc
 8940              		@ args = 0, pretend = 0, frame = 8
 8941              		@ frame_needed = 1, uses_anonymous_args = 0
 8942              		@ link register save eliminated.
 8943 0000 80B4     		push	{r7}
 8944              	.LCFI575:
 8945              		.cfi_def_cfa_offset 4
 8946              		.cfi_offset 7, -4
 8947 0002 83B0     		sub	sp, sp, #12
 8948              	.LCFI576:
 8949              		.cfi_def_cfa_offset 16
 8950 0004 00AF     		add	r7, sp, #0
 8951              	.LCFI577:
 8952              		.cfi_def_cfa_register 7
 8953 0006 7860     		str	r0, [r7, #4]
 465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return this->_M_index != static_cast<__index_type>(variant_npos);
 8954              		.loc 2 465 11
 8955 0008 0123     		movs	r3, #1
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 8956              		.loc 2 467 7
 8957 000a 1846     		mov	r0, r3
 8958 000c 0C37     		adds	r7, r7, #12
 8959              	.LCFI578:
 8960              		.cfi_def_cfa_offset 4
 8961 000e BD46     		mov	sp, r7
 8962              	.LCFI579:
 8963              		.cfi_def_cfa_register 13
 8964              		@ sp needed
 8965 0010 5DF8047B 		ldr	r7, [sp], #4
 8966              	.LCFI580:
 8967              		.cfi_restore 7
 8968              		.cfi_def_cfa_offset 0
 8969 0014 7047     		bx	lr
 8970              		.cfi_endproc
 8971              	.LFE5082:
 8973              		.section	.text._ZSt9addressofIP10OutputPortIfEEPT_RS3_,"axG",%progbits,_ZSt9addressofIP10OutputPor
 8974              		.align	1
 8975              		.weak	_ZSt9addressofIP10OutputPortIfEEPT_RS3_
 8976              		.syntax unified
 8977              		.thumb
 8978              		.thumb_func
 8979              		.fpu fpv4-sp-d16
 8981              	_ZSt9addressofIP10OutputPortIfEEPT_RS3_:
 8982              	.LFB5083:
ARM GAS  /tmp/ccqv0h9S.s 			page 258


 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return std::__addressof(__r); }
 8983              		.loc 13 140 5
 8984              		.cfi_startproc
 8985              		@ args = 0, pretend = 0, frame = 8
 8986              		@ frame_needed = 1, uses_anonymous_args = 0
 8987 0000 80B5     		push	{r7, lr}
 8988              	.LCFI581:
 8989              		.cfi_def_cfa_offset 8
 8990              		.cfi_offset 7, -8
 8991              		.cfi_offset 14, -4
 8992 0002 82B0     		sub	sp, sp, #8
 8993              	.LCFI582:
 8994              		.cfi_def_cfa_offset 16
 8995 0004 00AF     		add	r7, sp, #0
 8996              	.LCFI583:
 8997              		.cfi_def_cfa_register 7
 8998 0006 7860     		str	r0, [r7, #4]
 8999              		.loc 13 141 30
 9000 0008 7868     		ldr	r0, [r7, #4]
 9001 000a FFF7FEFF 		bl	_ZSt11__addressofIP10OutputPortIfEEPT_RS3_
 9002 000e 0346     		mov	r3, r0
 9003              		.loc 13 141 37
 9004 0010 1846     		mov	r0, r3
 9005 0012 0837     		adds	r7, r7, #8
 9006              	.LCFI584:
 9007              		.cfi_def_cfa_offset 8
 9008 0014 BD46     		mov	sp, r7
 9009              	.LCFI585:
 9010              		.cfi_def_cfa_register 13
 9011              		@ sp needed
 9012 0016 80BD     		pop	{r7, pc}
 9013              		.cfi_endproc
 9014              	.LFE5083:
 9016              		.section	.text._ZSt11__addressofIP10OutputPortISt4pairIffEEEPT_RS5_,"axG",%progbits,_ZSt11__addres
 9017              		.align	1
 9018              		.weak	_ZSt11__addressofIP10OutputPortISt4pairIffEEEPT_RS5_
 9019              		.syntax unified
 9020              		.thumb
 9021              		.thumb_func
 9022              		.fpu fpv4-sp-d16
 9024              	_ZSt11__addressofIP10OutputPortISt4pairIffEEEPT_RS5_:
 9025              	.LFB5084:
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return __builtin_addressof(__r); }
 9026              		.loc 13 49 5
 9027              		.cfi_startproc
 9028              		@ args = 0, pretend = 0, frame = 8
 9029              		@ frame_needed = 1, uses_anonymous_args = 0
 9030              		@ link register save eliminated.
 9031 0000 80B4     		push	{r7}
 9032              	.LCFI586:
 9033              		.cfi_def_cfa_offset 4
 9034              		.cfi_offset 7, -4
 9035 0002 83B0     		sub	sp, sp, #12
 9036              	.LCFI587:
 9037              		.cfi_def_cfa_offset 16
 9038 0004 00AF     		add	r7, sp, #0
 9039              	.LCFI588:
ARM GAS  /tmp/ccqv0h9S.s 			page 259


 9040              		.cfi_def_cfa_register 7
 9041 0006 7860     		str	r0, [r7, #4]
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 9042              		.loc 13 50 37
 9043 0008 7B68     		ldr	r3, [r7, #4]
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 9044              		.loc 13 50 40
 9045 000a 1846     		mov	r0, r3
 9046 000c 0C37     		adds	r7, r7, #12
 9047              	.LCFI589:
 9048              		.cfi_def_cfa_offset 4
 9049 000e BD46     		mov	sp, r7
 9050              	.LCFI590:
 9051              		.cfi_def_cfa_register 13
 9052              		@ sp needed
 9053 0010 5DF8047B 		ldr	r7, [sp], #4
 9054              	.LCFI591:
 9055              		.cfi_restore 7
 9056              		.cfi_def_cfa_offset 0
 9057 0014 7047     		bx	lr
 9058              		.cfi_endproc
 9059              	.LFE5084:
 9061              		.section	.text._ZSt11__addressofIP10OutputPortIfEEPT_RS3_,"axG",%progbits,_ZSt11__addressofIP10Out
 9062              		.align	1
 9063              		.weak	_ZSt11__addressofIP10OutputPortIfEEPT_RS3_
 9064              		.syntax unified
 9065              		.thumb
 9066              		.thumb_func
 9067              		.fpu fpv4-sp-d16
 9069              	_ZSt11__addressofIP10OutputPortIfEEPT_RS3_:
 9070              	.LFB5085:
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return __builtin_addressof(__r); }
 9071              		.loc 13 49 5
 9072              		.cfi_startproc
 9073              		@ args = 0, pretend = 0, frame = 8
 9074              		@ frame_needed = 1, uses_anonymous_args = 0
 9075              		@ link register save eliminated.
 9076 0000 80B4     		push	{r7}
 9077              	.LCFI592:
 9078              		.cfi_def_cfa_offset 4
 9079              		.cfi_offset 7, -4
 9080 0002 83B0     		sub	sp, sp, #12
 9081              	.LCFI593:
 9082              		.cfi_def_cfa_offset 16
 9083 0004 00AF     		add	r7, sp, #0
 9084              	.LCFI594:
 9085              		.cfi_def_cfa_register 7
 9086 0006 7860     		str	r0, [r7, #4]
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 9087              		.loc 13 50 37
 9088 0008 7B68     		ldr	r3, [r7, #4]
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
 9089              		.loc 13 50 40
 9090 000a 1846     		mov	r0, r3
 9091 000c 0C37     		adds	r7, r7, #12
 9092              	.LCFI595:
 9093              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccqv0h9S.s 			page 260


 9094 000e BD46     		mov	sp, r7
 9095              	.LCFI596:
 9096              		.cfi_def_cfa_register 13
 9097              		@ sp needed
 9098 0010 5DF8047B 		ldr	r7, [sp], #4
 9099              	.LCFI597:
 9100              		.cfi_restore 7
 9101              		.cfi_def_cfa_offset 0
 9102 0014 7047     		bx	lr
 9103              		.cfi_endproc
 9104              	.LFE5085:
 9106              		.text
 9107              	.Letext0:
 9108              		.file 14 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdint"
 9109              		.file 15 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/type_trai
 9110              		.file 16 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/exce
 9111              		.file 17 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility"
 9112              		.file 18 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-
 9113              		.file 19 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/enab
 9114              		.file 20 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/cpp_
 9115              		.file 21 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/debug/deb
 9116              		.file 22 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdlib"
 9117              		.file 23 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/algo
 9118              		.file 24 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/functiona
 9119              		.file 25 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array"
 9120              		.file 26 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 9121              		.file 27 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/refw
 9122              		.file 28 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pars
 9123              		.file 29 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pred
 9124              		.file 30 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_typ
 9125              		.file 31 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 9126              		.file 32 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdint.h"
 9127              		.file 33 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/lib/gcc/arm-none-eabi/10.2.1/include/stdde
 9128              		.file 34 "Inc/interfaces.hpp"
 9129              		.file 35 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 9130              		.file 36 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g4xx.h"
 9131              		.file 37 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 9132              		.file 38 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_gpio.h"
 9133              		.file 39 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
 9134              		.file 40 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_spi.h"
 9135              		.file 41 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_tim.h"
 9136              		.file 42 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 9137              		.file 43 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 9138              		.file 44 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 9139              		.file 45 "Inc/mc_type.h"
 9140              		.file 46 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/math.h"
 9141              		.file 47 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdlib.h"
 9142              		.file 48 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/math.h"
 9143              		.file 49 "Inc/main.h"
 9144              		.file 50 "Inc/encoder.hpp"
 9145              		.file 51 "Inc/axis.hpp"
 9146              		.file 52 "Inc/task_timer.hpp"
 9147              		.file 53 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 9148              		.file 54 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 9149              		.file 55 "Inc/controller.hpp"
 9150              		.file 56 "Inc/motor.hpp"
 9151              		.file 57 "<built-in>"
ARM GAS  /tmp/ccqv0h9S.s 			page 261


ARM GAS  /tmp/ccqv0h9S.s 			page 262


DEFINED SYMBOLS
                            *ABS*:0000000000000000 encoder.cpp
     /tmp/ccqv0h9S.s:18     .text._ZnwjPv:0000000000000000 $t
     /tmp/ccqv0h9S.s:26     .text._ZnwjPv:0000000000000000 _ZnwjPv
     /tmp/ccqv0h9S.s:66     .text._ZSt26__throw_bad_variant_accessPKc:0000000000000000 $t
     /tmp/ccqv0h9S.s:73     .text._ZSt26__throw_bad_variant_accessPKc:0000000000000000 _ZSt26__throw_bad_variant_accessPKc
     /tmp/ccqv0h9S.s:98     .rodata:0000000000000000 $d
     /tmp/ccqv0h9S.s:105    .text._ZSt26__throw_bad_variant_accessb:0000000000000000 $t
     /tmp/ccqv0h9S.s:112    .text._ZSt26__throw_bad_variant_accessb:0000000000000000 _ZSt26__throw_bad_variant_accessb
     /tmp/ccqv0h9S.s:158    .text._ZSt26__throw_bad_variant_accessb:0000000000000028 $d
     /tmp/ccqv0h9S.s:164    .rodata._ZL16OFFSET_TAB_CCMRx:0000000000000000 $d
     /tmp/ccqv0h9S.s:167    .rodata._ZL16OFFSET_TAB_CCMRx:0000000000000000 _ZL16OFFSET_TAB_CCMRx
     /tmp/ccqv0h9S.s:170    .rodata._ZL14SHIFT_TAB_OCxx:0000000000000000 $d
     /tmp/ccqv0h9S.s:173    .rodata._ZL14SHIFT_TAB_OCxx:0000000000000000 _ZL14SHIFT_TAB_OCxx
     /tmp/ccqv0h9S.s:176    .rodata._ZL14SHIFT_TAB_ICxx:0000000000000000 $d
     /tmp/ccqv0h9S.s:179    .rodata._ZL14SHIFT_TAB_ICxx:0000000000000000 _ZL14SHIFT_TAB_ICxx
     /tmp/ccqv0h9S.s:182    .rodata._ZL14SHIFT_TAB_CCxP:0000000000000000 $d
     /tmp/ccqv0h9S.s:185    .rodata._ZL14SHIFT_TAB_CCxP:0000000000000000 _ZL14SHIFT_TAB_CCxP
     /tmp/ccqv0h9S.s:188    .rodata._ZL14SHIFT_TAB_OISx:0000000000000000 $d
     /tmp/ccqv0h9S.s:191    .rodata._ZL14SHIFT_TAB_OISx:0000000000000000 _ZL14SHIFT_TAB_OISx
     /tmp/ccqv0h9S.s:194    .rodata._ZL19USART_PRESCALER_TAB:0000000000000000 $d
     /tmp/ccqv0h9S.s:197    .rodata._ZL19USART_PRESCALER_TAB:0000000000000000 _ZL19USART_PRESCALER_TAB
     /tmp/ccqv0h9S.s:211    .rodata._ZL18CHANNEL_OFFSET_TAB:0000000000000000 $d
     /tmp/ccqv0h9S.s:214    .rodata._ZL18CHANNEL_OFFSET_TAB:0000000000000000 _ZL18CHANNEL_OFFSET_TAB
     /tmp/ccqv0h9S.s:217    .text._ZSt3absl:0000000000000000 $t
     /tmp/ccqv0h9S.s:224    .text._ZSt3absl:0000000000000000 _ZSt3absl
     /tmp/ccqv0h9S.s:266    .text._ZSt3absf:0000000000000000 $t
     /tmp/ccqv0h9S.s:273    .text._ZSt3absf:0000000000000000 _ZSt3absf
     /tmp/ccqv0h9S.s:312    .text._ZSt5floorf:0000000000000000 $t
     /tmp/ccqv0h9S.s:319    .text._ZSt5floorf:0000000000000000 _ZSt5floorf
     /tmp/ccqv0h9S.s:356    .rodata._ZL12one_by_sqrt3:0000000000000000 $d
     /tmp/ccqv0h9S.s:359    .rodata._ZL12one_by_sqrt3:0000000000000000 _ZL12one_by_sqrt3
     /tmp/ccqv0h9S.s:362    .rodata._ZL12two_by_sqrt3:0000000000000000 $d
     /tmp/ccqv0h9S.s:365    .rodata._ZL12two_by_sqrt3:0000000000000000 _ZL12two_by_sqrt3
     /tmp/ccqv0h9S.s:368    .rodata._ZL10sqrt3_by_2:0000000000000000 $d
     /tmp/ccqv0h9S.s:371    .rodata._ZL10sqrt3_by_2:0000000000000000 _ZL10sqrt3_by_2
     /tmp/ccqv0h9S.s:374    .text.fmodf_pos:0000000000000000 $t
     /tmp/ccqv0h9S.s:380    .text.fmodf_pos:0000000000000000 fmodf_pos
     /tmp/ccqv0h9S.s:433    .text.wrap_pm:0000000000000000 $t
     /tmp/ccqv0h9S.s:439    .text.wrap_pm:0000000000000000 wrap_pm
     /tmp/ccqv0h9S.s:485    .text.wrap_pm_pi:0000000000000000 $t
     /tmp/ccqv0h9S.s:491    .text.wrap_pm_pi:0000000000000000 wrap_pm_pi
     /tmp/ccqv0h9S.s:527    .text.wrap_pm_pi:0000000000000024 $d
     /tmp/ccqv0h9S.s:532    .text._ZNSt14_Function_baseC2Ev:0000000000000000 $t
     /tmp/ccqv0h9S.s:539    .text._ZNSt14_Function_baseC2Ev:0000000000000000 _ZNSt14_Function_baseC2Ev
     /tmp/ccqv0h9S.s:539    .text._ZNSt14_Function_baseC2Ev:0000000000000000 _ZNSt14_Function_baseC1Ev
     /tmp/ccqv0h9S.s:585    .text._ZNSt14_Function_baseD2Ev:0000000000000000 $t
     /tmp/ccqv0h9S.s:592    .text._ZNSt14_Function_baseD2Ev:0000000000000000 _ZNSt14_Function_baseD2Ev
     /tmp/ccqv0h9S.s:592    .text._ZNSt14_Function_baseD2Ev:0000000000000000 _ZNSt14_Function_baseD1Ev
     /tmp/ccqv0h9S.s:647    .text.cpu_enter_critical:0000000000000000 $t
     /tmp/ccqv0h9S.s:654    .text.cpu_enter_critical:0000000000000000 cpu_enter_critical
     /tmp/ccqv0h9S.s:722    .text.cpu_exit_critical:0000000000000000 $t
     /tmp/ccqv0h9S.s:729    .text.cpu_exit_critical:0000000000000000 cpu_exit_critical
     /tmp/ccqv0h9S.s:781    .text._ZN7EncoderC2ERK23EncoderHardwareConfig_tRNS_8Config_tE:0000000000000000 $t
     /tmp/ccqv0h9S.s:788    .text._ZN7EncoderC2ERK23EncoderHardwareConfig_tRNS_8Config_tE:0000000000000000 _ZN7EncoderC2ERK23EncoderHardwareConfig_tRNS_8Config_tE
     /tmp/ccqv0h9S.s:5656   .text._ZN10OutputPortIfEC2Ef:0000000000000000 _ZN10OutputPortIfEC1Ef
     /tmp/ccqv0h9S.s:1559   .text._ZN7Encoder16update_pll_gainsEv:0000000000000000 _ZN7Encoder16update_pll_gainsEv
ARM GAS  /tmp/ccqv0h9S.s 			page 263


     /tmp/ccqv0h9S.s:1034   .text._ZN7EncoderC2ERK23EncoderHardwareConfig_tRNS_8Config_tE:0000000000000228 $d
     /tmp/ccqv0h9S.s:788    .text._ZN7EncoderC2ERK23EncoderHardwareConfig_tRNS_8Config_tE:0000000000000000 _ZN7EncoderC1ERK23EncoderHardwareConfig_tRNS_8Config_tE
     /tmp/ccqv0h9S.s:1042   .text._ZL20enc_index_cb_wrapperPv:0000000000000000 $t
     /tmp/ccqv0h9S.s:1048   .text._ZL20enc_index_cb_wrapperPv:0000000000000000 _ZL20enc_index_cb_wrapperPv
     /tmp/ccqv0h9S.s:1405   .text._ZN7Encoder12enc_index_cbEv:0000000000000000 _ZN7Encoder12enc_index_cbEv
     /tmp/ccqv0h9S.s:1083   .text._ZN7Encoder11set_cs_highEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:1090   .text._ZN7Encoder11set_cs_highEv:0000000000000000 _ZN7Encoder11set_cs_highEv
     /tmp/ccqv0h9S.s:1147   .text._ZN7Encoder5setupEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:1154   .text._ZN7Encoder5setupEv:0000000000000000 _ZN7Encoder5setupEv
     /tmp/ccqv0h9S.s:4307   .text._ZN7Encoder19abs_spi_cs_pin_initEv:0000000000000000 _ZN7Encoder19abs_spi_cs_pin_initEv
     /tmp/ccqv0h9S.s:3380   .text._ZN7Encoder12abs_spi_initEv:0000000000000000 _ZN7Encoder12abs_spi_initEv
     /tmp/ccqv0h9S.s:3580   .text._ZN7Encoder19abs_485_cs_pin_initEv:0000000000000000 _ZN7Encoder19abs_485_cs_pin_initEv
     /tmp/ccqv0h9S.s:3535   .text._ZN7Encoder12abs_485_initEv:0000000000000000 _ZN7Encoder12abs_485_initEv
     /tmp/ccqv0h9S.s:1271   .text._ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE:0000000000000000 $t
     /tmp/ccqv0h9S.s:1278   .text._ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE:0000000000000000 _ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE
     /tmp/ccqv0h9S.s:1346   .text._ZN7Encoder9do_checksEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:1353   .text._ZN7Encoder9do_checksEv:0000000000000000 _ZN7Encoder9do_checksEv
     /tmp/ccqv0h9S.s:1398   .text._ZN7Encoder12enc_index_cbEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:1842   .text._ZN7Encoder18set_circular_countElb:0000000000000000 _ZN7Encoder18set_circular_countElb
     /tmp/ccqv0h9S.s:1769   .text._ZN7Encoder16set_linear_countEl:0000000000000000 _ZN7Encoder16set_linear_countEl
     /tmp/ccqv0h9S.s:1507   .text._ZN7Encoder17set_idx_subscribeEb:0000000000000000 $t
     /tmp/ccqv0h9S.s:1514   .text._ZN7Encoder17set_idx_subscribeEb:0000000000000000 _ZN7Encoder17set_idx_subscribeEb
     /tmp/ccqv0h9S.s:1552   .text._ZN7Encoder16update_pll_gainsEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:1664   .text._ZN7Encoder16update_pll_gainsEv:00000000000000a8 $d
     /tmp/ccqv0h9S.s:1669   .text._ZN7Encoder20check_pre_calibratedEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:1676   .text._ZN7Encoder20check_pre_calibratedEv:0000000000000000 _ZN7Encoder20check_pre_calibratedEv
     /tmp/ccqv0h9S.s:1762   .text._ZN7Encoder16set_linear_countEl:0000000000000000 $t
     /tmp/ccqv0h9S.s:1835   .text._ZN7Encoder18set_circular_countElb:0000000000000000 $t
     /tmp/ccqv0h9S.s:1947   .text._ZNSt8functionIFbbEED2Ev:0000000000000000 $t
     /tmp/ccqv0h9S.s:1954   .text._ZNSt8functionIFbbEED2Ev:0000000000000000 _ZNSt8functionIFbbEED2Ev
     /tmp/ccqv0h9S.s:1954   .text._ZNSt8functionIFbbEED2Ev:0000000000000000 _ZNSt8functionIFbbEED1Ev
     /tmp/ccqv0h9S.s:1994   .text._ZN7Encoder16run_index_searchEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:2001   .text._ZN7Encoder16run_index_searchEv:0000000000000000 _ZN7Encoder16run_index_searchEv
     /tmp/ccqv0h9S.s:5776   .text._ZNSt8functionIFbbEEC2Ev:0000000000000000 _ZNSt8functionIFbbEEC1Ev
     /tmp/ccqv0h9S.s:2111   .text._ZN7Encoder18run_direction_findEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:2118   .text._ZN7Encoder18run_direction_findEv:0000000000000000 _ZN7Encoder18run_direction_findEv
     /tmp/ccqv0h9S.s:2273   .text._ZN7Encoder22run_offset_calibrationEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:2280   .text._ZN7Encoder22run_offset_calibrationEv:0000000000000000 _ZN7Encoder22run_offset_calibrationEv
     /tmp/ccqv0h9S.s:5713   .text._ZNSt4pairIffEC2IffLb1EEEOT_OT0_:0000000000000000 _ZNSt4pairIffEC1IffLb1EEEOT_OT0_
     /tmp/ccqv0h9S.s:5824   .text._ZN10OutputPortISt4pairIffEEaSES1_:0000000000000000 _ZN10OutputPortISt4pairIffEEaSES1_
     /tmp/ccqv0h9S.s:5878   .text._ZN10OutputPortIfEaSEf:0000000000000000 _ZN10OutputPortIfEaSEf
     /tmp/ccqv0h9S.s:5930   .text._ZN9InputPortISt4pairIffEE10connect_toEP10OutputPortIS1_E:0000000000000000 _ZN9InputPortISt4pairIffEE10connect_toEP10OutputPortIS1_E
     /tmp/ccqv0h9S.s:5976   .text._ZN9InputPortIfE10connect_toEP10OutputPortIfE:0000000000000000 _ZN9InputPortIfE10connect_toEP10OutputPortIfE
     /tmp/ccqv0h9S.s:2695   .text._ZN7Encoder22run_offset_calibrationEv:000000000000029c $d
     /tmp/ccqv0h9S.s:2699   .text._ZN7Encoder22run_offset_calibrationEv:00000000000002a0 $t
     /tmp/ccqv0h9S.s:6022   .text._ZN10OutputPortIfE3anyEv:0000000000000000 _ZN10OutputPortIfE3anyEv
     /tmp/ccqv0h9S.s:6115   .text._ZNOSt8optionalIfE8value_orIfEEfOT_:0000000000000000 _ZNOSt8optionalIfE8value_orIfEEfOT_
     /tmp/ccqv0h9S.s:3157   .text._ZN7Encoder22run_offset_calibrationEv:00000000000005dc $d
     /tmp/ccqv0h9S.s:3163   .text._ZL11decode_hallhPl:0000000000000000 $t
     /tmp/ccqv0h9S.s:3169   .text._ZL11decode_hallhPl:0000000000000000 _ZL11decode_hallhPl
     /tmp/ccqv0h9S.s:3198   .text._ZL11decode_hallhPl:000000000000001c $d
     /tmp/ccqv0h9S.s:3204   .text._ZL11decode_hallhPl:0000000000000034 $t
     /tmp/ccqv0h9S.s:3275   .text._ZN7Encoder10sample_nowEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:3282   .text._ZN7Encoder10sample_nowEv:0000000000000000 _ZN7Encoder10sample_nowEv
     /tmp/ccqv0h9S.s:3373   .text._ZN7Encoder12abs_spi_initEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:3417   .text._ZN7Encoder14set_spi_enableEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:3424   .text._ZN7Encoder14set_spi_enableEv:0000000000000000 _ZN7Encoder14set_spi_enableEv
ARM GAS  /tmp/ccqv0h9S.s 			page 264


     /tmp/ccqv0h9S.s:3528   .text._ZN7Encoder12abs_485_initEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:3573   .text._ZN7Encoder19abs_485_cs_pin_initEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:3646   .text._ZN7Encoder21abs_start_transactionEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:3653   .text._ZN7Encoder21abs_start_transactionEv:0000000000000000 _ZN7Encoder21abs_start_transactionEv
     /tmp/ccqv0h9S.s:3737   .text._ZN7Encoder25abs_485_start_transactionEv:0000000000000000 _ZN7Encoder25abs_485_start_transactionEv
     /tmp/ccqv0h9S.s:3782   .text._ZN7Encoder25abs_spi_start_transactionEv:0000000000000000 _ZN7Encoder25abs_spi_start_transactionEv
     /tmp/ccqv0h9S.s:3730   .text._ZN7Encoder25abs_485_start_transactionEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:3775   .text._ZN7Encoder25abs_spi_start_transactionEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:3899   .text._Z10ams_parityt:0000000000000000 $t
     /tmp/ccqv0h9S.s:3906   .text._Z10ams_parityt:0000000000000000 _Z10ams_parityt
     /tmp/ccqv0h9S.s:3981   .text._Z10cui_parityt:0000000000000000 $t
     /tmp/ccqv0h9S.s:3988   .text._Z10cui_parityt:0000000000000000 _Z10cui_parityt
     /tmp/ccqv0h9S.s:4057   .text._ZN7Encoder10abs_spi_cbEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:4064   .text._ZN7Encoder10abs_spi_cbEv:0000000000000000 _ZN7Encoder10abs_spi_cbEv
     /tmp/ccqv0h9S.s:4300   .text._ZN7Encoder19abs_spi_cs_pin_initEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:4424   .text._ZN7Encoder6updateEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:4431   .text._ZN7Encoder6updateEv:0000000000000000 _ZN7Encoder6updateEv
     /tmp/ccqv0h9S.s:4986   .text._ZN7Encoder6updateEv:000000000000035c $d
     /tmp/ccqv0h9S.s:4990   .text._ZN7Encoder6updateEv:0000000000000364 $t
     /tmp/ccqv0h9S.s:6183   .text._ZN10OutputPortIfE7presentEv:0000000000000000 _ZN10OutputPortIfE7presentEv
     /tmp/ccqv0h9S.s:6242   .text._ZNOSt8optionalIfEdeEv:0000000000000000 _ZNOSt8optionalIfEdeEv
     /tmp/ccqv0h9S.s:5416   .text._ZN7Encoder6updateEv:0000000000000704 $d
     /tmp/ccqv0h9S.s:5420   .text._ZN7Encoder6updateEv:000000000000070c $t
     /tmp/ccqv0h9S.s:5642   .text._ZN7Encoder6updateEv:00000000000008bc $d
     /tmp/ccqv0h9S.s:5649   .text._ZN10OutputPortIfEC2Ef:0000000000000000 $t
     /tmp/ccqv0h9S.s:5656   .text._ZN10OutputPortIfEC2Ef:0000000000000000 _ZN10OutputPortIfEC2Ef
     /tmp/ccqv0h9S.s:5706   .text._ZNSt4pairIffEC2IffLb1EEEOT_OT0_:0000000000000000 $t
     /tmp/ccqv0h9S.s:5713   .text._ZNSt4pairIffEC2IffLb1EEEOT_OT0_:0000000000000000 _ZNSt4pairIffEC2IffLb1EEEOT_OT0_
     /tmp/ccqv0h9S.s:6288   .text._ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE:0000000000000000 _ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE
     /tmp/ccqv0h9S.s:5769   .text._ZNSt8functionIFbbEEC2Ev:0000000000000000 $t
     /tmp/ccqv0h9S.s:5776   .text._ZNSt8functionIFbbEEC2Ev:0000000000000000 _ZNSt8functionIFbbEEC2Ev
     /tmp/ccqv0h9S.s:5817   .text._ZN10OutputPortISt4pairIffEEaSES1_:0000000000000000 $t
     /tmp/ccqv0h9S.s:6334   .text._ZNSt4pairIffEaSERKS0_:0000000000000000 _ZNSt4pairIffEaSERKS0_
     /tmp/ccqv0h9S.s:5871   .text._ZN10OutputPortIfEaSEf:0000000000000000 $t
     /tmp/ccqv0h9S.s:5923   .text._ZN9InputPortISt4pairIffEE10connect_toEP10OutputPortIS1_E:0000000000000000 $t
     /tmp/ccqv0h9S.s:6440   .text._ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEEaSIRS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES6_E4typeEE18is_constructible_vISE_SB_E15is_assignable_vIRSE_SB_EERS6_E4typeESC_:0000000000000000 _ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEEaSIRS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES6_E4typeEE18is_constructible_vISE_SB_E15is_assignable_vIRSE_SB_EERS6_E4typeESC_
     /tmp/ccqv0h9S.s:5969   .text._ZN9InputPortIfE10connect_toEP10OutputPortIfE:0000000000000000 $t
     /tmp/ccqv0h9S.s:6571   .text._ZNSt7variantIJfPfP10OutputPortIfEEEaSIRS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISC_S9_E15is_assignable_vIRSC_S9_EERS4_E4typeESA_:0000000000000000 _ZNSt7variantIJfPfP10OutputPortIfEEEaSIRS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISC_S9_E15is_assignable_vIRSC_S9_EERS4_E4typeESA_
     /tmp/ccqv0h9S.s:6015   .text._ZN10OutputPortIfE3anyEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:6924   .text._ZNSt8optionalIfEC2IRfLb1EEEOT_:0000000000000000 _ZNSt8optionalIfEC1IRfLb1EEEOT_
     /tmp/ccqv0h9S.s:6061   .text._ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:6068   .text._ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv:0000000000000000 _ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv
     /tmp/ccqv0h9S.s:6108   .text._ZNOSt8optionalIfE8value_orIfEEfOT_:0000000000000000 $t
     /tmp/ccqv0h9S.s:6980   .text._ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv:0000000000000000 _ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv
     /tmp/ccqv0h9S.s:7024   .text._ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_:0000000000000000 _ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_
     /tmp/ccqv0h9S.s:6176   .text._ZN10OutputPortIfE7presentEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:7259   .text._ZNSt8optionalIfEC2ESt9nullopt_t:0000000000000000 _ZNSt8optionalIfEC1ESt9nullopt_t
     /tmp/ccqv0h9S.s:6235   .text._ZNOSt8optionalIfEdeEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:6281   .text._ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE:0000000000000000 $t
     /tmp/ccqv0h9S.s:6327   .text._ZNSt4pairIffEaSERKS0_:0000000000000000 $t
     /tmp/ccqv0h9S.s:6385   .text._ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE5indexEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:6392   .text._ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE5indexEv:0000000000000000 _ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE5indexEv
     /tmp/ccqv0h9S.s:6433   .text._ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEEaSIRS5_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES6_E4typeEE18is_constructible_vISE_SB_E15is_assignable_vIRSE_SB_EERS6_E4typeESC_:0000000000000000 $t
     /tmp/ccqv0h9S.s:7568   .text._ZSt7forwardIRP10OutputPortISt4pairIffEEEOT_RNSt16remove_referenceIS6_E4typeE:0000000000000000 _ZSt7forwardIRP10OutputPortISt4pairIffEEEOT_RNSt16remove_referenceIS6_E4typeE
     /tmp/ccqv0h9S.s:7505   .text._ZSt3getILj2EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_:0000000000000000 _ZSt3getILj2EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_
     /tmp/ccqv0h9S.s:7613   .text._ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE7emplaceILj2EJRS5_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSC_E4typeEDpOSD_:0000000000000000 _ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE7emplaceILj2EJRS5_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSC_E4typeEDpOSD_
     /tmp/ccqv0h9S.s:6518   .text._ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv:0000000000000000 $t
ARM GAS  /tmp/ccqv0h9S.s 			page 265


     /tmp/ccqv0h9S.s:6525   .text._ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv:0000000000000000 _ZNKSt7variantIJfPfP10OutputPortIfEEE5indexEv
     /tmp/ccqv0h9S.s:6564   .text._ZNSt7variantIJfPfP10OutputPortIfEEEaSIRS3_EENSt9enable_ifIXaaaa14__exactly_onceINSt19variant_alternativeIX16__accepted_indexIOT_EES4_E4typeEE18is_constructible_vISC_S9_E15is_assignable_vIRSC_S9_EERS4_E4typeESA_:0000000000000000 $t
     /tmp/ccqv0h9S.s:7928   .text._ZSt7forwardIRP10OutputPortIfEEOT_RNSt16remove_referenceIS4_E4typeE:0000000000000000 _ZSt7forwardIRP10OutputPortIfEEOT_RNSt16remove_referenceIS4_E4typeE
     /tmp/ccqv0h9S.s:7865   .text._ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:0000000000000000 _ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_
     /tmp/ccqv0h9S.s:7973   .text._ZNSt7variantIJfPfP10OutputPortIfEEE7emplaceILj2EJRS3_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERSA_E4typeEDpOSB_:0000000000000000 _ZNSt7variantIJfPfP10OutputPortIfEEE7emplaceILj2EJRS3_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERSA_E4typeEDpOSB_
     /tmp/ccqv0h9S.s:6649   .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccqv0h9S.s:6656   .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_
     /tmp/ccqv0h9S.s:6710   .text._ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE:0000000000000000 _ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE
     /tmp/ccqv0h9S.s:6656   .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2IJRfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJRfEEESt10in_place_tDpOT_
     /tmp/ccqv0h9S.s:6703   .text._ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE:0000000000000000 $t
     /tmp/ccqv0h9S.s:6748   .text._ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccqv0h9S.s:6755   .text._ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_
     /tmp/ccqv0h9S.s:6755   .text._ZNSt22_Optional_payload_baseIfEC2IJRfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt22_Optional_payload_baseIfEC1IJRfEEESt10in_place_tDpOT_
     /tmp/ccqv0h9S.s:6808   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccqv0h9S.s:6815   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_
     /tmp/ccqv0h9S.s:6815   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI2St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_
     /tmp/ccqv0h9S.s:6860   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_:0000000000000000 $t
     /tmp/ccqv0h9S.s:6867   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_
     /tmp/ccqv0h9S.s:6867   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2IJRfELb0EEESt10in_place_tDpOT_:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC1IJRfELb0EEESt10in_place_tDpOT_
     /tmp/ccqv0h9S.s:6917   .text._ZNSt8optionalIfEC2IRfLb1EEEOT_:0000000000000000 $t
     /tmp/ccqv0h9S.s:6924   .text._ZNSt8optionalIfEC2IRfLb1EEEOT_:0000000000000000 _ZNSt8optionalIfEC2IRfLb1EEEOT_
     /tmp/ccqv0h9S.s:6973   .text._ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:8028   .text._ZNSt22_Optional_payload_baseIfE6_M_getEv:0000000000000000 _ZNSt22_Optional_payload_baseIfE6_M_getEv
     /tmp/ccqv0h9S.s:7017   .text._ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_:0000000000000000 $t
     /tmp/ccqv0h9S.s:7062   .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2Ev:0000000000000000 $t
     /tmp/ccqv0h9S.s:7069   .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2Ev:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2Ev
     /tmp/ccqv0h9S.s:7069   .text._ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC2Ev:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev
     /tmp/ccqv0h9S.s:7108   .text._ZNSt22_Optional_payload_baseIfEC2Ev:0000000000000000 $t
     /tmp/ccqv0h9S.s:7115   .text._ZNSt22_Optional_payload_baseIfEC2Ev:0000000000000000 _ZNSt22_Optional_payload_baseIfEC2Ev
     /tmp/ccqv0h9S.s:7115   .text._ZNSt22_Optional_payload_baseIfEC2Ev:0000000000000000 _ZNSt22_Optional_payload_baseIfEC1Ev
     /tmp/ccqv0h9S.s:7158   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev:0000000000000000 $t
     /tmp/ccqv0h9S.s:7165   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev
     /tmp/ccqv0h9S.s:7165   .text._ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC2Ev:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC1Ev
     /tmp/ccqv0h9S.s:7205   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2Ev:0000000000000000 $t
     /tmp/ccqv0h9S.s:7212   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2Ev:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC2Ev
     /tmp/ccqv0h9S.s:7212   .text._ZNSt14_Optional_baseIfLb1ELb1EEC2Ev:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC1Ev
     /tmp/ccqv0h9S.s:7252   .text._ZNSt8optionalIfEC2ESt9nullopt_t:0000000000000000 $t
     /tmp/ccqv0h9S.s:7259   .text._ZNSt8optionalIfEC2ESt9nullopt_t:0000000000000000 _ZNSt8optionalIfEC2ESt9nullopt_t
     /tmp/ccqv0h9S.s:7301   .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 $t
     /tmp/ccqv0h9S.s:7308   .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 _ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEEDcSt16in_place_index_tILj0EEOT_
     /tmp/ccqv0h9S.s:8255   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEOT_RNSt16remove_referenceISA_E4typeE:0000000000000000 _ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEOT_RNSt16remove_referenceISA_E4typeE
     /tmp/ccqv0h9S.s:8300   .text._ZNRSt8__detail9__variant14_UninitializedIP10OutputPortISt4pairIffEELb1EE6_M_getEv:0000000000000000 _ZNRSt8__detail9__variant14_UninitializedIP10OutputPortISt4pairIffEELb1EE6_M_getEv
     /tmp/ccqv0h9S.s:7349   .text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 $t
     /tmp/ccqv0h9S.s:7356   .text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEEDcSt16in_place_index_tIXT_EEOT0_
     /tmp/ccqv0h9S.s:8210   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEOT_RNSt16remove_referenceISB_E4typeE:0000000000000000 _ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEOT_RNSt16remove_referenceISB_E4typeE
     /tmp/ccqv0h9S.s:7399   .text._ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 $t
     /tmp/ccqv0h9S.s:7406   .text._ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEEDcSt16in_place_index_tIXT_EEOT0_
     /tmp/ccqv0h9S.s:8165   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEOT_RNSt16remove_referenceISB_E4typeE:0000000000000000 _ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEOT_RNSt16remove_referenceISB_E4typeE
     /tmp/ccqv0h9S.s:7449   .text._ZNSt8__detail9__variant5__getILj2ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_:0000000000000000 $t
     /tmp/ccqv0h9S.s:7456   .text._ZNSt8__detail9__variant5__getILj2ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj2ERSt7variantIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEDcOT0_
     /tmp/ccqv0h9S.s:8120   .text._ZSt7forwardIRSt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEEOT_RNSt16remove_referenceIS9_E4typeE:0000000000000000 _ZSt7forwardIRSt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEEOT_RNSt16remove_referenceIS9_E4typeE
     /tmp/ccqv0h9S.s:7498   .text._ZSt3getILj2EJSt4pairIffEPS1_P10OutputPortIS1_EEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSA_:0000000000000000 $t
     /tmp/ccqv0h9S.s:8073   .text._ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE22valueless_by_exceptionEv:0000000000000000 _ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE22valueless_by_exceptionEv
     /tmp/ccqv0h9S.s:7561   .text._ZSt7forwardIRP10OutputPortISt4pairIffEEEOT_RNSt16remove_referenceIS6_E4typeE:0000000000000000 $t
     /tmp/ccqv0h9S.s:7606   .text._ZNSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE7emplaceILj2EJRS5_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES6_E4typeEDpT0_EERSC_E4typeEDpOSD_:0000000000000000 $t
     /tmp/ccqv0h9S.s:8345   .text._ZNSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE8_M_resetEv:0000000000000000 _ZNSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE8_M_resetEv
     /tmp/ccqv0h9S.s:8392   .text._ZSt28__variant_construct_by_indexILj2ESt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEJRS6_EEvRT0_DpOT1_:0000000000000000 _ZSt28__variant_construct_by_indexILj2ESt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEJRS6_EEvRT0_DpOT1_
ARM GAS  /tmp/ccqv0h9S.s 			page 266


     /tmp/ccqv0h9S.s:7661   .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 $t
     /tmp/ccqv0h9S.s:7668   .text._ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_:0000000000000000 _ZNSt8__detail9__variant5__getIRNS0_15_Variadic_unionIJP10OutputPortIfEEEEEEDcSt16in_place_index_tILj0EEOT_
     /tmp/ccqv0h9S.s:8639   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS8_E4typeE:0000000000000000 _ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS8_E4typeE
     /tmp/ccqv0h9S.s:8684   .text._ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv:0000000000000000 _ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv
     /tmp/ccqv0h9S.s:7709   .text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 $t
     /tmp/ccqv0h9S.s:7716   .text._ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj1ERNS0_15_Variadic_unionIJPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_
     /tmp/ccqv0h9S.s:8594   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS9_E4typeE:0000000000000000 _ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS9_E4typeE
     /tmp/ccqv0h9S.s:7759   .text._ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 $t
     /tmp/ccqv0h9S.s:7766   .text._ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj2ERNS0_15_Variadic_unionIJfPfP10OutputPortIfEEEEEEDcSt16in_place_index_tIXT_EEOT0_
     /tmp/ccqv0h9S.s:8549   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS9_E4typeE:0000000000000000 _ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS9_E4typeE
     /tmp/ccqv0h9S.s:7809   .text._ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:0000000000000000 $t
     /tmp/ccqv0h9S.s:7816   .text._ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_:0000000000000000 _ZNSt8__detail9__variant5__getILj2ERSt7variantIJfPfP10OutputPortIfEEEEEDcOT0_
     /tmp/ccqv0h9S.s:8504   .text._ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE:0000000000000000 _ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE
     /tmp/ccqv0h9S.s:7858   .text._ZSt3getILj2EJfPfP10OutputPortIfEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERS8_:0000000000000000 $t
     /tmp/ccqv0h9S.s:8457   .text._ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv:0000000000000000 _ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv
     /tmp/ccqv0h9S.s:7921   .text._ZSt7forwardIRP10OutputPortIfEEOT_RNSt16remove_referenceIS4_E4typeE:0000000000000000 $t
     /tmp/ccqv0h9S.s:7966   .text._ZNSt7variantIJfPfP10OutputPortIfEEE7emplaceILj2EJRS3_EEENSt9enable_ifIX18is_constructible_vINSt19variant_alternativeIXT_ES4_E4typeEDpT0_EERSA_E4typeEDpOSB_:0000000000000000 $t
     /tmp/ccqv0h9S.s:8729   .text._ZNSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_resetEv:0000000000000000 _ZNSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_resetEv
     /tmp/ccqv0h9S.s:8776   .text._ZSt28__variant_construct_by_indexILj2ESt7variantIJfPfP10OutputPortIfEEEJRS4_EEvRT0_DpOT1_:0000000000000000 _ZSt28__variant_construct_by_indexILj2ESt7variantIJfPfP10OutputPortIfEEEJRS4_EEvRT0_DpOT1_
     /tmp/ccqv0h9S.s:8021   .text._ZNSt22_Optional_payload_baseIfE6_M_getEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:8066   .text._ZNKSt7variantIJSt4pairIffEPS1_P10OutputPortIS1_EEE22valueless_by_exceptionEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:8841   .text._ZNKSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE8_M_validEv:0000000000000000 _ZNKSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE8_M_validEv
     /tmp/ccqv0h9S.s:8113   .text._ZSt7forwardIRSt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEEOT_RNSt16remove_referenceIS9_E4typeE:0000000000000000 $t
     /tmp/ccqv0h9S.s:8158   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJSt4pairIffEPS4_P10OutputPortIS4_EEEEEOT_RNSt16remove_referenceISB_E4typeE:0000000000000000 $t
     /tmp/ccqv0h9S.s:8203   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPSt4pairIffEP10OutputPortIS4_EEEEEOT_RNSt16remove_referenceISB_E4typeE:0000000000000000 $t
     /tmp/ccqv0h9S.s:8248   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortISt4pairIffEEEEEEOT_RNSt16remove_referenceISA_E4typeE:0000000000000000 $t
     /tmp/ccqv0h9S.s:8293   .text._ZNRSt8__detail9__variant14_UninitializedIP10OutputPortISt4pairIffEELb1EE6_M_getEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:8338   .text._ZNSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE8_M_resetEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:8385   .text._ZSt28__variant_construct_by_indexILj2ESt7variantIJSt4pairIffEPS2_P10OutputPortIS2_EEEJRS6_EEvRT0_DpOT1_:0000000000000000 $t
     /tmp/ccqv0h9S.s:8893   .text._ZSt9addressofIP10OutputPortISt4pairIffEEEPT_RS5_:0000000000000000 _ZSt9addressofIP10OutputPortISt4pairIffEEEPT_RS5_
     /tmp/ccqv0h9S.s:8450   .text._ZNKSt7variantIJfPfP10OutputPortIfEEE22valueless_by_exceptionEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:8936   .text._ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv:0000000000000000 _ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv
     /tmp/ccqv0h9S.s:8497   .text._ZSt7forwardIRSt7variantIJfPfP10OutputPortIfEEEEOT_RNSt16remove_referenceIS7_E4typeE:0000000000000000 $t
     /tmp/ccqv0h9S.s:8542   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJfPfP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS9_E4typeE:0000000000000000 $t
     /tmp/ccqv0h9S.s:8587   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJPfP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS9_E4typeE:0000000000000000 $t
     /tmp/ccqv0h9S.s:8632   .text._ZSt7forwardIRNSt8__detail9__variant15_Variadic_unionIJP10OutputPortIfEEEEEOT_RNSt16remove_referenceIS8_E4typeE:0000000000000000 $t
     /tmp/ccqv0h9S.s:8677   .text._ZNRSt8__detail9__variant14_UninitializedIP10OutputPortIfELb1EE6_M_getEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:8722   .text._ZNSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_resetEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:8769   .text._ZSt28__variant_construct_by_indexILj2ESt7variantIJfPfP10OutputPortIfEEEJRS4_EEvRT0_DpOT1_:0000000000000000 $t
     /tmp/ccqv0h9S.s:8981   .text._ZSt9addressofIP10OutputPortIfEEPT_RS3_:0000000000000000 _ZSt9addressofIP10OutputPortIfEEPT_RS3_
     /tmp/ccqv0h9S.s:8834   .text._ZNKSt8__detail9__variant16_Variant_storageILb1EJSt4pairIffEPS3_P10OutputPortIS3_EEE8_M_validEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:8886   .text._ZSt9addressofIP10OutputPortISt4pairIffEEEPT_RS5_:0000000000000000 $t
     /tmp/ccqv0h9S.s:9024   .text._ZSt11__addressofIP10OutputPortISt4pairIffEEEPT_RS5_:0000000000000000 _ZSt11__addressofIP10OutputPortISt4pairIffEEEPT_RS5_
     /tmp/ccqv0h9S.s:8929   .text._ZNKSt8__detail9__variant16_Variant_storageILb1EJfPfP10OutputPortIfEEE8_M_validEv:0000000000000000 $t
     /tmp/ccqv0h9S.s:8974   .text._ZSt9addressofIP10OutputPortIfEEPT_RS3_:0000000000000000 $t
     /tmp/ccqv0h9S.s:9069   .text._ZSt11__addressofIP10OutputPortIfEEPT_RS3_:0000000000000000 _ZSt11__addressofIP10OutputPortIfEEPT_RS3_
     /tmp/ccqv0h9S.s:9017   .text._ZSt11__addressofIP10OutputPortISt4pairIffEEEPT_RS5_:0000000000000000 $t
     /tmp/ccqv0h9S.s:9062   .text._ZSt11__addressofIP10OutputPortIfEEPT_RS3_:0000000000000000 $t
                           .group:0000000000000000 _ZNSt14_Function_baseC5Ev
                           .group:0000000000000000 _ZNSt14_Function_baseD5Ev
                           .group:0000000000000000 _ZNSt8functionIFbbEED5Ev
                           .group:0000000000000000 _ZN10OutputPortIfEC5Ef
                           .group:0000000000000000 _ZNSt4pairIffEC5IffLb1EEEOT_OT0_
                           .group:0000000000000000 _ZNSt8functionIFbbEEC5Ev
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC5IJRfEEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseIfEC5IJRfEEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI5St22_Optional_payload_baseIfEIJRfEEESt10in_place_tDpOT_
ARM GAS  /tmp/ccqv0h9S.s 			page 267


                           .group:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC5IJRfELb0EEESt10in_place_tDpOT_
                           .group:0000000000000000 _ZNSt8optionalIfEC5IRfLb1EEEOT_
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC5Ev
                           .group:0000000000000000 _ZNSt22_Optional_payload_baseIfEC5Ev
                           .group:0000000000000000 _ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC5Ev
                           .group:0000000000000000 _ZNSt14_Optional_baseIfLb1ELb1EEC5Ev
                           .group:0000000000000000 _ZNSt8optionalIfEC5ESt9nullopt_t

UNDEFINED SYMBOLS
abort
floorf
fmodf
HAL_GPIO_WritePin
current_meas_period
mod
_ZN4Axis15run_lockin_spinERKNS_14LockinConfig_tEbSt8functionIFbbEE
__aeabi_ldivmod
_ZN4Axis26wait_for_control_iterationEv
_ZN5Motor3armEP15PhaseControlLawILj3EE
_ZN5Motor6disarmEv
osDelay
_ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE
HAL_SPI_DeInit
HAL_GPIO_DeInit
HAL_GPIO_Init
transmit_spi
fast_atan2
