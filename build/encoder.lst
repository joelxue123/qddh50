ARM GAS  /tmp/ccoPBaGE.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"encoder.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._ZN7Encoder11set_cs_highEv,"ax",%progbits
  18              		.align	1
  19              		.global	_ZN7Encoder11set_cs_highEv
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	_ZN7Encoder11set_cs_highEv:
  27              	.LVL0:
  28              	.LFB4945:
  29              		.file 1 "Src/encoder.cpp"
   1:Src/encoder.cpp **** #include "encoder.hpp"
   2:Src/encoder.cpp **** 
   3:Src/encoder.cpp **** #include "axis.hpp"
   4:Src/encoder.cpp **** #include "motor.hpp"
   5:Src/encoder.cpp **** #include "interfaces.hpp"
   6:Src/encoder.cpp **** #include "controller.hpp"
   7:Src/encoder.cpp **** #include "spi.h"
   8:Src/encoder.cpp **** 
   9:Src/encoder.cpp **** 
  10:Src/encoder.cpp **** Encoder::Encoder(const EncoderHardwareConfig_t& hw_config,
  11:Src/encoder.cpp ****                 Config_t& config) :
  12:Src/encoder.cpp ****         hw_config_(hw_config),
  13:Src/encoder.cpp ****         config_(config)
  14:Src/encoder.cpp **** {
  15:Src/encoder.cpp ****     update_pll_gains();
  16:Src/encoder.cpp **** 
  17:Src/encoder.cpp ****     if (config.pre_calibrated) {
  18:Src/encoder.cpp ****             is_ready_ = true;
  19:Src/encoder.cpp ****     }
  20:Src/encoder.cpp **** }
  21:Src/encoder.cpp **** 
  22:Src/encoder.cpp **** static void enc_index_cb_wrapper(void* ctx) {
  23:Src/encoder.cpp ****     reinterpret_cast<Encoder*>(ctx)->enc_index_cb();
  24:Src/encoder.cpp **** }
  25:Src/encoder.cpp **** 
  26:Src/encoder.cpp **** void Encoder::set_cs_high(void)
  27:Src/encoder.cpp **** {
  30              		.loc 1 27 1 view -0
  31              		.cfi_startproc
ARM GAS  /tmp/ccoPBaGE.s 			page 2


  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  28:Src/encoder.cpp ****     if(mode_ & MODE_FLAG_ABS)
  34              		.loc 1 28 5 view .LVU1
  35 0000 B0F8D630 		ldrh	r3, [r0, #214]
  36 0004 13F4807F 		tst	r3, #256
  37 0008 00D1     		bne	.L7
  38 000a 7047     		bx	lr
  39              	.L7:
  27:Src/encoder.cpp ****     if(mode_ & MODE_FLAG_ABS)
  40              		.loc 1 27 1 is_stmt 0 view .LVU2
  41 000c 10B5     		push	{r4, lr}
  42              	.LCFI0:
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 4, -8
  45              		.cfi_offset 14, -4
  46 000e 0446     		mov	r4, r0
  29:Src/encoder.cpp ****     {  
  30:Src/encoder.cpp ****         HAL_GPIO_WritePin(motor_spi_cs_port_, motor_spi_cs_pin_, GPIO_PIN_SET);
  47              		.loc 1 30 9 is_stmt 1 view .LVU3
  48              		.loc 1 30 26 is_stmt 0 view .LVU4
  49 0010 0122     		movs	r2, #1
  50 0012 B0F8DC10 		ldrh	r1, [r0, #220]
  51 0016 D0F8D800 		ldr	r0, [r0, #216]
  52              	.LVL1:
  53              		.loc 1 30 26 view .LVU5
  54 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
  55              	.LVL2:
  31:Src/encoder.cpp ****         HAL_GPIO_WritePin(GearboxOutputEncoder_spi_cs_port_,GearboxOutputEncoder_spi_cs_pin_, GPIO_
  56              		.loc 1 31 9 is_stmt 1 view .LVU6
  57              		.loc 1 31 26 is_stmt 0 view .LVU7
  58 001e 0122     		movs	r2, #1
  59 0020 B4F8E410 		ldrh	r1, [r4, #228]
  60 0024 D4F8E000 		ldr	r0, [r4, #224]
  61 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
  62              	.LVL3:
  32:Src/encoder.cpp ****     }    
  33:Src/encoder.cpp **** }
  63              		.loc 1 33 1 view .LVU8
  64 002c 10BD     		pop	{r4, pc}
  65              		.loc 1 33 1 view .LVU9
  66              		.cfi_endproc
  67              	.LFE4945:
  69              		.section	.text._ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE,"ax",%progbits
  70              		.align	1
  71              		.global	_ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE
  72              		.syntax unified
  73              		.thumb
  74              		.thumb_func
  75              		.fpu fpv4-sp-d16
  77              	_ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE:
  78              	.LVL4:
  79              	.LFB4947:
  34:Src/encoder.cpp **** 
  35:Src/encoder.cpp **** void Encoder::setup() {
  36:Src/encoder.cpp ****    // HAL_TIM_Encoder_Start(hw_config_.timer, TIM_CHANNEL_ALL);
  37:Src/encoder.cpp ****    // set_idx_subscribe();
ARM GAS  /tmp/ccoPBaGE.s 			page 3


  38:Src/encoder.cpp **** 
  39:Src/encoder.cpp ****     mode_ = config_.mode;
  40:Src/encoder.cpp ****     abs_spi_cs_pin_init();
  41:Src/encoder.cpp ****     if(mode_ & MODE_FLAG_ABS){
  42:Src/encoder.cpp ****         
  43:Src/encoder.cpp ****         abs_spi_init();
  44:Src/encoder.cpp ****         if (axis_->controller_.config_.anticogging.pre_calibrated) {
  45:Src/encoder.cpp ****             axis_->controller_.anticogging_valid_ = true;
  46:Src/encoder.cpp ****         }
  47:Src/encoder.cpp ****     }
  48:Src/encoder.cpp ****     else if(mode_ & MODE_FLAG_485_ABS)
  49:Src/encoder.cpp ****     {
  50:Src/encoder.cpp ****         abs_485_cs_pin_init();
  51:Src/encoder.cpp ****         abs_485_init();
  52:Src/encoder.cpp ****     }
  53:Src/encoder.cpp ****     
  54:Src/encoder.cpp ****     cpr_inverse_ = 1.0f / config_.cpr;
  55:Src/encoder.cpp ****     GearboxOutputEncoder_cpr_inverse_ = 1.0f / config_.GearboxOutputEncoder_cpr;
  56:Src/encoder.cpp **** }
  57:Src/encoder.cpp **** 
  58:Src/encoder.cpp **** void Encoder::set_error(Error error) {
  80              		.loc 1 58 38 is_stmt 1 view -0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84              		@ link register save eliminated.
  59:Src/encoder.cpp ****     vel_estimate_valid_ = false;
  85              		.loc 1 59 5 view .LVU11
  86              		.loc 1 59 25 is_stmt 0 view .LVU12
  87 0000 0023     		movs	r3, #0
  88 0002 80F89530 		strb	r3, [r0, #149]
  60:Src/encoder.cpp ****     pos_estimate_valid_ = false;
  89              		.loc 1 60 5 is_stmt 1 view .LVU13
  90              		.loc 1 60 25 is_stmt 0 view .LVU14
  91 0006 80F89430 		strb	r3, [r0, #148]
  61:Src/encoder.cpp ****     error_ = static_cast<Error>(static_cast<uint32_t>(error_) | static_cast<uint32_t>(error));
  92              		.loc 1 61 5 is_stmt 1 view .LVU15
  93              		.loc 1 61 63 is_stmt 0 view .LVU16
  94 000a 8389     		ldrh	r3, [r0, #12]
  95 000c 1943     		orrs	r1, r1, r3
  96              	.LVL5:
  97              		.loc 1 61 12 view .LVU17
  98 000e 8181     		strh	r1, [r0, #12]	@ movhi
  62:Src/encoder.cpp ****     axis_->error_ = static_cast<Axis::Error>(
  99              		.loc 1 62 5 is_stmt 1 view .LVU18
  63:Src/encoder.cpp ****         static_cast<uint32_t>(axis_->error_) | 
 100              		.loc 1 63 31 is_stmt 0 view .LVU19
 101 0010 8268     		ldr	r2, [r0, #8]
 102              		.loc 1 63 46 view .LVU20
 103 0012 D2F85C31 		ldr	r3, [r2, #348]
 104 0016 43F48073 		orr	r3, r3, #256
  62:Src/encoder.cpp ****     axis_->error_ = static_cast<Axis::Error>(
 105              		.loc 1 62 19 view .LVU21
 106 001a C2F85C31 		str	r3, [r2, #348]
  64:Src/encoder.cpp ****         static_cast<uint32_t>(Axis::ERROR_ENCODER_FAILED)
  65:Src/encoder.cpp ****     );
  66:Src/encoder.cpp **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 4


  67:Src/encoder.cpp **** }
 107              		.loc 1 67 1 view .LVU22
 108 001e 7047     		bx	lr
 109              		.cfi_endproc
 110              	.LFE4947:
 112              		.section	.text._ZN7Encoder9do_checksEv,"ax",%progbits
 113              		.align	1
 114              		.global	_ZN7Encoder9do_checksEv
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 118              		.fpu fpv4-sp-d16
 120              	_ZN7Encoder9do_checksEv:
 121              	.LVL6:
 122              	.LFB4948:
  68:Src/encoder.cpp **** 
  69:Src/encoder.cpp **** bool Encoder::do_checks(){
 123              		.loc 1 69 26 is_stmt 1 view -0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
 127              		@ link register save eliminated.
  70:Src/encoder.cpp ****     return error_ == ERROR_NONE;
 128              		.loc 1 70 5 view .LVU24
 129              		.loc 1 70 22 is_stmt 0 view .LVU25
 130 0000 8089     		ldrh	r0, [r0, #12]
 131              	.LVL7:
  71:Src/encoder.cpp **** }
 132              		.loc 1 71 1 view .LVU26
 133 0002 B0FA80F0 		clz	r0, r0
 134 0006 4009     		lsrs	r0, r0, #5
 135 0008 7047     		bx	lr
 136              		.cfi_endproc
 137              	.LFE4948:
 139              		.section	.text._ZN7Encoder17set_idx_subscribeEb,"ax",%progbits
 140              		.align	1
 141              		.global	_ZN7Encoder17set_idx_subscribeEb
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 145              		.fpu fpv4-sp-d16
 147              	_ZN7Encoder17set_idx_subscribeEb:
 148              	.LVL8:
 149              	.LFB4950:
  72:Src/encoder.cpp **** 
  73:Src/encoder.cpp **** //--------------------
  74:Src/encoder.cpp **** // Hardware Dependent
  75:Src/encoder.cpp **** //--------------------
  76:Src/encoder.cpp **** 
  77:Src/encoder.cpp **** // Triggered when an encoder passes over the "Index" pin
  78:Src/encoder.cpp **** // TODO: only arm index edge interrupt when we know encoder has powered up
  79:Src/encoder.cpp **** // (maybe by attaching the interrupt on start search, synergistic with following)
  80:Src/encoder.cpp **** void Encoder::enc_index_cb() {
  81:Src/encoder.cpp ****     if (config_.use_index) {
  82:Src/encoder.cpp ****         set_circular_count(0, false);
  83:Src/encoder.cpp ****         if (config_.zero_count_on_find_idx)
  84:Src/encoder.cpp ****             set_linear_count(0); // Avoid position control transient after search
ARM GAS  /tmp/ccoPBaGE.s 			page 5


  85:Src/encoder.cpp ****         if (config_.pre_calibrated) {
  86:Src/encoder.cpp ****             is_ready_ = true;
  87:Src/encoder.cpp ****             if(axis_->controller_.config_.anticogging.pre_calibrated){
  88:Src/encoder.cpp ****                 axis_->controller_.anticogging_valid_ = true;
  89:Src/encoder.cpp ****             }
  90:Src/encoder.cpp ****         } else {
  91:Src/encoder.cpp ****             // We can't use the update_offset facility in set_circular_count because
  92:Src/encoder.cpp ****             // we also set the linear count before there is a chance to update. Therefore:
  93:Src/encoder.cpp ****             // Invalidate offset calibration that may have happened before idx search
  94:Src/encoder.cpp ****             is_ready_ = false;
  95:Src/encoder.cpp ****         }
  96:Src/encoder.cpp ****         index_found_ = true;
  97:Src/encoder.cpp ****     }
  98:Src/encoder.cpp **** 
  99:Src/encoder.cpp ****     // Disable interrupt
 100:Src/encoder.cpp **** 
 101:Src/encoder.cpp **** }
 102:Src/encoder.cpp **** 
 103:Src/encoder.cpp **** void Encoder::set_idx_subscribe(bool override_enable) {
 150              		.loc 1 103 55 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              		@ link register save eliminated.
 104:Src/encoder.cpp **** }
 155              		.loc 1 104 1 is_stmt 0 view .LVU28
 156 0000 7047     		bx	lr
 157              		.cfi_endproc
 158              	.LFE4950:
 160              		.section	.text._ZN7Encoder16update_pll_gainsEv,"ax",%progbits
 161              		.align	1
 162              		.global	_ZN7Encoder16update_pll_gainsEv
 163              		.syntax unified
 164              		.thumb
 165              		.thumb_func
 166              		.fpu fpv4-sp-d16
 168              	_ZN7Encoder16update_pll_gainsEv:
 169              	.LVL9:
 170              	.LFB4951:
 105:Src/encoder.cpp **** 
 106:Src/encoder.cpp **** void Encoder::update_pll_gains() {
 171              		.loc 1 106 34 is_stmt 1 view -0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              		.loc 1 106 34 is_stmt 0 view .LVU30
 176 0000 08B5     		push	{r3, lr}
 177              	.LCFI1:
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 3, -8
 180              		.cfi_offset 14, -4
 107:Src/encoder.cpp ****     pll_kp_ = 2.0f * config_.bandwidth;  // basic conversion to discrete time
 181              		.loc 1 107 5 is_stmt 1 view .LVU31
 182              		.loc 1 107 22 is_stmt 0 view .LVU32
 183 0002 4368     		ldr	r3, [r0, #4]
 184              		.loc 1 107 20 view .LVU33
 185 0004 93ED097A 		vldr.32	s14, [r3, #36]
ARM GAS  /tmp/ccoPBaGE.s 			page 6


 186 0008 37EE077A 		vadd.f32	s14, s14, s14
 187              		.loc 1 107 13 view .LVU34
 188 000c 80ED147A 		vstr.32	s14, [r0, #80]
 108:Src/encoder.cpp ****     pll_ki_ = 0.25f * (pll_kp_ * pll_kp_); // Critically damped 0.025f
 189              		.loc 1 108 5 is_stmt 1 view .LVU35
 190              		.loc 1 108 32 is_stmt 0 view .LVU36
 191 0010 67EE076A 		vmul.f32	s13, s14, s14
 192              		.loc 1 108 21 view .LVU37
 193 0014 B5EE006A 		vmov.f32	s12, #2.5e-1
 194 0018 66EE866A 		vmul.f32	s13, s13, s12
 195              		.loc 1 108 13 view .LVU38
 196 001c C0ED156A 		vstr.32	s13, [r0, #84]
 109:Src/encoder.cpp **** 
 110:Src/encoder.cpp ****     gear_pll_kp_ = 2.0f * config_.bandwidth;  // basic conversion to discrete time
 197              		.loc 1 110 5 is_stmt 1 view .LVU39
 198              		.loc 1 110 25 is_stmt 0 view .LVU40
 199 0020 D3ED097A 		vldr.32	s15, [r3, #36]
 200 0024 77EEA77A 		vadd.f32	s15, s15, s15
 201              		.loc 1 110 18 view .LVU41
 202 0028 C0ED167A 		vstr.32	s15, [r0, #88]
 111:Src/encoder.cpp ****     gear_pll_ki_ = 0.25f * (gear_pll_kp_ * gear_pll_kp_); // Critically damped 0.025f
 203              		.loc 1 111 5 is_stmt 1 view .LVU42
 204              		.loc 1 111 42 is_stmt 0 view .LVU43
 205 002c 67EEA77A 		vmul.f32	s15, s15, s15
 206              		.loc 1 111 26 view .LVU44
 207 0030 67EE867A 		vmul.f32	s15, s15, s12
 208              		.loc 1 111 18 view .LVU45
 209 0034 C0ED177A 		vstr.32	s15, [r0, #92]
 112:Src/encoder.cpp ****     // Check that we don't get problems with discrete time approximation
 113:Src/encoder.cpp ****     if (!(current_meas_period * pll_kp_ < 1.0f)) {
 210              		.loc 1 113 5 is_stmt 1 view .LVU46
 211              		.loc 1 113 31 is_stmt 0 view .LVU47
 212 0038 084B     		ldr	r3, .L15
 213 003a D3ED007A 		vldr.32	s15, [r3]
 214 003e 27EE277A 		vmul.f32	s14, s14, s15
 215              		.loc 1 113 5 view .LVU48
 216 0042 F7EE007A 		vmov.f32	s15, #1.0e+0
 217 0046 B4EEE77A 		vcmpe.f32	s14, s15
 218 004a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 219 004e 00D5     		bpl	.L14
 220              	.LVL10:
 221              	.L11:
 114:Src/encoder.cpp ****         set_error(ERROR_UNSTABLE_GAIN);
 115:Src/encoder.cpp ****     }
 116:Src/encoder.cpp **** }
 222              		.loc 1 116 1 view .LVU49
 223 0050 08BD     		pop	{r3, pc}
 224              	.LVL11:
 225              	.L14:
 114:Src/encoder.cpp ****         set_error(ERROR_UNSTABLE_GAIN);
 226              		.loc 1 114 9 is_stmt 1 view .LVU50
 114:Src/encoder.cpp ****         set_error(ERROR_UNSTABLE_GAIN);
 227              		.loc 1 114 18 is_stmt 0 view .LVU51
 228 0052 0121     		movs	r1, #1
 229 0054 FFF7FEFF 		bl	_ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE
 230              	.LVL12:
 231              		.loc 1 116 1 view .LVU52
ARM GAS  /tmp/ccoPBaGE.s 			page 7


 232 0058 FAE7     		b	.L11
 233              	.L16:
 234 005a 00BF     		.align	2
 235              	.L15:
 236 005c 00000000 		.word	current_meas_period
 237              		.cfi_endproc
 238              	.LFE4951:
 240              		.section	.text._ZN7EncoderC2ERK23EncoderHardwareConfig_tRNS_8Config_tE,"ax",%progbits
 241              		.align	1
 242              		.global	_ZN7EncoderC2ERK23EncoderHardwareConfig_tRNS_8Config_tE
 243              		.syntax unified
 244              		.thumb
 245              		.thumb_func
 246              		.fpu fpv4-sp-d16
 248              	_ZN7EncoderC2ERK23EncoderHardwareConfig_tRNS_8Config_tE:
 249              	.LVL13:
 250              	.LFB4942:
  10:Src/encoder.cpp ****                 Config_t& config) :
 251              		.loc 1 10 1 is_stmt 1 view -0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 0, uses_anonymous_args = 0
  10:Src/encoder.cpp ****                 Config_t& config) :
 255              		.loc 1 10 1 is_stmt 0 view .LVU54
 256 0000 38B5     		push	{r3, r4, r5, lr}
 257              	.LCFI2:
 258              		.cfi_def_cfa_offset 16
 259              		.cfi_offset 3, -16
 260              		.cfi_offset 4, -12
 261              		.cfi_offset 5, -8
 262              		.cfi_offset 14, -4
 263 0002 0446     		mov	r4, r0
 264 0004 1546     		mov	r5, r2
 265              	.LBB583:
  13:Src/encoder.cpp **** {
 266              		.loc 1 13 23 view .LVU55
 267 0006 0160     		str	r1, [r0]
 268 0008 4260     		str	r2, [r0, #4]
 269 000a 0023     		movs	r3, #0
 270 000c 8360     		str	r3, [r0, #8]
 271 000e 8381     		strh	r3, [r0, #12]	@ movhi
 272 0010 8373     		strb	r3, [r0, #14]
 273 0012 C373     		strb	r3, [r0, #15]
 274 0014 0361     		str	r3, [r0, #16]
 275 0016 4361     		str	r3, [r0, #20]
 276 0018 8361     		str	r3, [r0, #24]
 277 001a C361     		str	r3, [r0, #28]
 278 001c 0021     		movs	r1, #0
 279              	.LVL14:
  13:Src/encoder.cpp **** {
 280              		.loc 1 13 23 view .LVU56
 281 001e 0162     		str	r1, [r0, #32]	@ float
 282 0020 4362     		str	r3, [r0, #36]
 283 0022 8362     		str	r3, [r0, #40]
 284 0024 C162     		str	r1, [r0, #44]	@ float
 285              	.LVL15:
 286              	.LBB584:
ARM GAS  /tmp/ccoPBaGE.s 			page 8


 287              	.LBI584:
 288              		.file 2 "Inc/component.hpp"
   1:Inc/component.hpp **** #ifndef __COMPONENT_HPP
   2:Inc/component.hpp **** #define __COMPONENT_HPP
   3:Inc/component.hpp **** 
   4:Inc/component.hpp **** #include <stdint.h>
   5:Inc/component.hpp **** #include <optional>
   6:Inc/component.hpp **** #include <variant>
   7:Inc/component.hpp **** #include "user_int.hpp"
   8:Inc/component.hpp **** class ComponentBase {
   9:Inc/component.hpp **** public:
  10:Inc/component.hpp ****     /**
  11:Inc/component.hpp ****      * @brief Shall run the update action of this component.
  12:Inc/component.hpp ****      * 
  13:Inc/component.hpp ****      * This function gets called in a low priority interrupt context and is
  14:Inc/component.hpp ****      * allowed to call CMSIS functions.
  15:Inc/component.hpp ****      * 
  16:Inc/component.hpp ****      * @param timestamp: The timestamp (in HCLK ticks) for which this update
  17:Inc/component.hpp ****      * is run.
  18:Inc/component.hpp ****      */
  19:Inc/component.hpp ****     virtual void update(uint32_t timestamp) = 0;
  20:Inc/component.hpp **** };
  21:Inc/component.hpp **** 
  22:Inc/component.hpp **** 
  23:Inc/component.hpp **** template<typename T>
  24:Inc/component.hpp **** class InputPort;
  25:Inc/component.hpp **** 
  26:Inc/component.hpp **** /**
  27:Inc/component.hpp ****  * @brief An output port stores a value for consumption by a connecting input
  28:Inc/component.hpp ****  * port.
  29:Inc/component.hpp ****  * 
  30:Inc/component.hpp ****  * Output ports are supposed to be reset at the beginning of a control loop
  31:Inc/component.hpp ****  * iteration. This ensures that connecting input ports don't use an outdated
  32:Inc/component.hpp ****  * value and, more importantly, ensures proper handling if the producer of the
  33:Inc/component.hpp ****  * value is incapable of producing the value for any reason.
  34:Inc/component.hpp ****  * 
  35:Inc/component.hpp ****  * Member functions of this class are not thread-safe unless noted otherwise.
  36:Inc/component.hpp ****  */
  37:Inc/component.hpp **** template<typename T>
  38:Inc/component.hpp **** class OutputPort {
  39:Inc/component.hpp **** public:
  40:Inc/component.hpp ****     /**
  41:Inc/component.hpp ****      * @brief Initializes the output port with the specified value.
  42:Inc/component.hpp ****      * 
  43:Inc/component.hpp ****      * An initialization value is required for any() to work properly.
  44:Inc/component.hpp ****      * present() and previous() cannot be used to fetch the
  45:Inc/component.hpp ****      * initialization value.
  46:Inc/component.hpp ****      */
  47:Inc/component.hpp ****     OutputPort(T val) : content_(val) {}
 289              		.loc 2 47 5 is_stmt 1 view .LVU57
 290              	.LBB585:
 291              		.loc 2 47 37 is_stmt 0 view .LVU58
 292 0026 0222     		movs	r2, #2
 293              	.LVL16:
 294              		.loc 2 47 37 view .LVU59
 295 0028 0263     		str	r2, [r0, #48]
 296 002a 4163     		str	r1, [r0, #52]	@ float
ARM GAS  /tmp/ccoPBaGE.s 			page 9


 297              	.LVL17:
 298              		.loc 2 47 37 view .LVU60
 299              	.LBE585:
 300              	.LBE584:
 301              	.LBB586:
 302              	.LBI586:
 303              		.loc 2 47 5 is_stmt 1 view .LVU61
 304              	.LBB587:
 305              		.loc 2 47 37 is_stmt 0 view .LVU62
 306 002c 8263     		str	r2, [r0, #56]
 307 002e C163     		str	r1, [r0, #60]	@ float
 308              	.LVL18:
 309              		.loc 2 47 37 view .LVU63
 310              	.LBE587:
 311              	.LBE586:
  13:Src/encoder.cpp **** {
 312              		.loc 1 13 23 view .LVU64
 313 0030 0164     		str	r1, [r0, #64]	@ float
 314 0032 4164     		str	r1, [r0, #68]	@ float
 315 0034 8164     		str	r1, [r0, #72]	@ float
 316 0036 C164     		str	r1, [r0, #76]	@ float
 317 0038 0165     		str	r1, [r0, #80]	@ float
 318 003a 4165     		str	r1, [r0, #84]	@ float
 319 003c 8165     		str	r1, [r0, #88]	@ float
 320 003e C165     		str	r1, [r0, #92]	@ float
 321 0040 0166     		str	r1, [r0, #96]	@ float
 322 0042 4366     		str	r3, [r0, #100]
 323 0044 8366     		str	r3, [r0, #104]
 324 0046 C166     		str	r1, [r0, #108]	@ float
 325              	.LVL19:
 326              	.LBB588:
 327              	.LBI588:
 328              		.loc 2 47 5 is_stmt 1 view .LVU65
 329              	.LBB589:
 330              		.loc 2 47 37 is_stmt 0 view .LVU66
 331 0048 0267     		str	r2, [r0, #112]
 332 004a 4167     		str	r1, [r0, #116]	@ float
 333              	.LVL20:
 334              		.loc 2 47 37 view .LVU67
 335              	.LBE589:
 336              	.LBE588:
 337              	.LBB590:
 338              	.LBI590:
 339              		.loc 2 47 5 is_stmt 1 view .LVU68
 340              	.LBB591:
 341              		.loc 2 47 37 is_stmt 0 view .LVU69
 342 004c 8267     		str	r2, [r0, #120]
 343 004e C167     		str	r1, [r0, #124]	@ float
 344              	.LVL21:
 345              		.loc 2 47 37 view .LVU70
 346              	.LBE591:
 347              	.LBE590:
  13:Src/encoder.cpp **** {
 348              		.loc 1 13 23 view .LVU71
 349 0050 C0F88030 		str	r3, [r0, #128]
 350 0054 C0F88410 		str	r1, [r0, #132]	@ float
 351 0058 C0F88810 		str	r1, [r0, #136]	@ float
ARM GAS  /tmp/ccoPBaGE.s 			page 10


 352 005c C0F88C10 		str	r1, [r0, #140]	@ float
 353 0060 C0F89030 		str	r3, [r0, #144]
 354 0064 80F89430 		strb	r3, [r0, #148]
 355 0068 80F89530 		strb	r3, [r0, #149]
 356 006c 1F4A     		ldr	r2, .L20
 357 006e C0F89820 		str	r2, [r0, #152]	@ float
 358 0072 C0F89C20 		str	r2, [r0, #156]	@ float
 359 0076 C0F8A010 		str	r1, [r0, #160]	@ float
 360 007a C0F8A410 		str	r1, [r0, #164]	@ float
 361 007e C0F8A810 		str	r1, [r0, #168]	@ float
 362 0082 A0F8AC30 		strh	r3, [r0, #172]	@ movhi
 363 0086 80F8AE30 		strb	r3, [r0, #174]
 364 008a C0F8B010 		str	r1, [r0, #176]	@ float
 365 008e C0F8B410 		str	r1, [r0, #180]	@ float
 366 0092 A622     		movs	r2, #166
 367 0094 80F8B820 		strb	r2, [r0, #184]
 368 0098 80F8B930 		strb	r3, [r0, #185]
 369 009c 80F8BA30 		strb	r3, [r0, #186]
 370 00a0 80F8BB30 		strb	r3, [r0, #187]
 371 00a4 80F8C020 		strb	r2, [r0, #192]
 372 00a8 80F8C130 		strb	r3, [r0, #193]
 373 00ac 80F8C230 		strb	r3, [r0, #194]
 374 00b0 80F8C330 		strb	r3, [r0, #195]
 375 00b4 80F8C820 		strb	r2, [r0, #200]
 376 00b8 80F8C930 		strb	r3, [r0, #201]
 377 00bc 80F8CA30 		strb	r3, [r0, #202]
 378 00c0 80F8CB30 		strb	r3, [r0, #203]
 379 00c4 80F8D330 		strb	r3, [r0, #211]
 380 00c8 0122     		movs	r2, #1
 381 00ca 80F8D420 		strb	r2, [r0, #212]
 382 00ce 40F20312 		movw	r2, #259
 383 00d2 A0F8D620 		strh	r2, [r0, #214]	@ movhi
 384 00d6 C0F8F030 		str	r3, [r0, #240]
  15:Src/encoder.cpp **** 
 385              		.loc 1 15 5 is_stmt 1 view .LVU72
  15:Src/encoder.cpp **** 
 386              		.loc 1 15 21 is_stmt 0 view .LVU73
 387 00da FFF7FEFF 		bl	_ZN7Encoder16update_pll_gainsEv
 388              	.LVL22:
  17:Src/encoder.cpp ****             is_ready_ = true;
 389              		.loc 1 17 5 is_stmt 1 view .LVU74
 390 00de EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
 391 00e0 0BB1     		cbz	r3, .L18
  18:Src/encoder.cpp ****     }
 392              		.loc 1 18 13 view .LVU75
  18:Src/encoder.cpp ****     }
 393              		.loc 1 18 23 is_stmt 0 view .LVU76
 394 00e2 0123     		movs	r3, #1
 395 00e4 E373     		strb	r3, [r4, #15]
 396              	.L18:
 397              	.LBE583:
  20:Src/encoder.cpp **** 
 398              		.loc 1 20 1 view .LVU77
 399 00e6 2046     		mov	r0, r4
 400 00e8 38BD     		pop	{r3, r4, r5, pc}
 401              	.LVL23:
 402              	.L21:
ARM GAS  /tmp/ccoPBaGE.s 			page 11


  20:Src/encoder.cpp **** 
 403              		.loc 1 20 1 view .LVU78
 404 00ea 00BF     		.align	2
 405              	.L20:
 406 00ec 6F12833A 		.word	981668463
 407              		.cfi_endproc
 408              	.LFE4942:
 410              		.global	_ZN7EncoderC1ERK23EncoderHardwareConfig_tRNS_8Config_tE
 411              		.thumb_set _ZN7EncoderC1ERK23EncoderHardwareConfig_tRNS_8Config_tE,_ZN7EncoderC2ERK23EncoderHardwa
 412              		.section	.text._ZN7Encoder20check_pre_calibratedEv,"ax",%progbits
 413              		.align	1
 414              		.global	_ZN7Encoder20check_pre_calibratedEv
 415              		.syntax unified
 416              		.thumb
 417              		.thumb_func
 418              		.fpu fpv4-sp-d16
 420              	_ZN7Encoder20check_pre_calibratedEv:
 421              	.LVL24:
 422              	.LFB4952:
 117:Src/encoder.cpp **** 
 118:Src/encoder.cpp **** void Encoder::check_pre_calibrated() {
 423              		.loc 1 118 38 is_stmt 1 view -0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 0
 426              		@ frame_needed = 0, uses_anonymous_args = 0
 427              		@ link register save eliminated.
 119:Src/encoder.cpp ****     // TODO: restoring config from python backup is fragile here (ACIM motor type must be set first
 120:Src/encoder.cpp ****     if (!is_ready_ && axis_->motor_.config_.motor_type != Motor::MOTOR_TYPE_ACIM)
 428              		.loc 1 120 5 view .LVU80
 429 0000 C37B     		ldrb	r3, [r0, #15]	@ zero_extendqisi2
 430 0002 4BB9     		cbnz	r3, .L23
 431              		.loc 1 120 30 is_stmt 0 discriminator 1 view .LVU81
 432 0004 8368     		ldr	r3, [r0, #8]
 433              		.loc 1 120 37 discriminator 1 view .LVU82
 434 0006 DB6E     		ldr	r3, [r3, #108]
 435              		.loc 1 120 45 discriminator 1 view .LVU83
 436 0008 5B68     		ldr	r3, [r3, #4]
 437              		.loc 1 120 20 discriminator 1 view .LVU84
 438 000a 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 439 000e 032B     		cmp	r3, #3
 440 0010 02D0     		beq	.L23
 121:Src/encoder.cpp ****         config_.pre_calibrated = false;
 441              		.loc 1 121 9 is_stmt 1 view .LVU85
 442 0012 4368     		ldr	r3, [r0, #4]
 443              		.loc 1 121 32 is_stmt 0 view .LVU86
 444 0014 0022     		movs	r2, #0
 445 0016 DA70     		strb	r2, [r3, #3]
 446              	.L23:
 122:Src/encoder.cpp ****     if (mode_ == MODE_INCREMENTAL && !index_found_)
 447              		.loc 1 122 5 is_stmt 1 view .LVU87
 448 0018 B0F8D630 		ldrh	r3, [r0, #214]
 449 001c 23B9     		cbnz	r3, .L22
 450              		.loc 1 122 35 is_stmt 0 discriminator 1 view .LVU88
 451 001e 837B     		ldrb	r3, [r0, #14]	@ zero_extendqisi2
 452 0020 13B9     		cbnz	r3, .L22
 123:Src/encoder.cpp ****         config_.pre_calibrated = false;
 453              		.loc 1 123 9 is_stmt 1 view .LVU89
ARM GAS  /tmp/ccoPBaGE.s 			page 12


 454 0022 4368     		ldr	r3, [r0, #4]
 455              		.loc 1 123 32 is_stmt 0 view .LVU90
 456 0024 0022     		movs	r2, #0
 457 0026 DA70     		strb	r2, [r3, #3]
 458              	.L22:
 124:Src/encoder.cpp **** }
 459              		.loc 1 124 1 view .LVU91
 460 0028 7047     		bx	lr
 461              		.cfi_endproc
 462              	.LFE4952:
 464              		.section	.text._ZN7Encoder16set_linear_countEl,"ax",%progbits
 465              		.align	1
 466              		.global	_ZN7Encoder16set_linear_countEl
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 470              		.fpu fpv4-sp-d16
 472              	_ZN7Encoder16set_linear_countEl:
 473              	.LVL25:
 474              	.LFB4953:
 125:Src/encoder.cpp **** 
 126:Src/encoder.cpp **** // Function that sets the current encoder count to a desired 32-bit value.
 127:Src/encoder.cpp **** void Encoder::set_linear_count(int32_t count) {
 475              		.loc 1 127 47 is_stmt 1 view -0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 0
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479              		@ link register save eliminated.
 128:Src/encoder.cpp ****     // Disable interrupts to make a critical section to avoid race condition
 129:Src/encoder.cpp ****     uint32_t prim = cpu_enter_critical();
 480              		.loc 1 129 5 view .LVU93
 481              	.LBB592:
 482              	.LBI592:
 483              		.file 3 "Inc/low_level.h"
   1:Inc/low_level.h **** /* Define to prevent recursive inclusion -------------------------------------*/
   2:Inc/low_level.h **** #ifndef __LOW_LEVEL_H
   3:Inc/low_level.h **** #define __LOW_LEVEL_H
   4:Inc/low_level.h **** 
   5:Inc/low_level.h **** 
   6:Inc/low_level.h **** #ifdef __cplusplus
   7:Inc/low_level.h **** // Forward declare Motor class before extern "C" block
   8:Inc/low_level.h **** class Motor;
   9:Inc/low_level.h **** 
  10:Inc/low_level.h **** extern "C" {
  11:Inc/low_level.h **** #endif
  12:Inc/low_level.h **** 
  13:Inc/low_level.h **** /* Includes ------------------------------------------------------------------*/
  14:Inc/low_level.h **** #include <cmsis_os.h>
  15:Inc/low_level.h **** #include <stdbool.h>
  16:Inc/low_level.h **** #include "stm32g4xx_hal.h"  // Add this for ADC_HandleTypeDef and TIM_HandleTypeDef
  17:Inc/low_level.h **** #include "stm32g4xx_hal_adc.h" // Add this for TIM_HandleTypeDef
  18:Inc/low_level.h **** 
  19:Inc/low_level.h **** 
  20:Inc/low_level.h **** /* Exported types ------------------------------------------------------------*/
  21:Inc/low_level.h **** /* Exported constants --------------------------------------------------------*/
  22:Inc/low_level.h **** #define ADC_CHANNEL_COUNT 16
  23:Inc/low_level.h **** extern const float adc_full_scale;
ARM GAS  /tmp/ccoPBaGE.s 			page 13


  24:Inc/low_level.h **** extern const float adc_ref_voltage;
  25:Inc/low_level.h **** /* Exported variables --------------------------------------------------------*/
  26:Inc/low_level.h **** extern float vbus_voltage;
  27:Inc/low_level.h **** extern float ibus_;
  28:Inc/low_level.h **** extern bool brake_resistor_armed;
  29:Inc/low_level.h **** extern bool brake_resistor_saturated;
  30:Inc/low_level.h **** extern uint16_t adc_measurements_[ADC_CHANNEL_COUNT];
  31:Inc/low_level.h **** /* Exported macro ------------------------------------------------------------*/
  32:Inc/low_level.h **** /* Exported functions --------------------------------------------------------*/
  33:Inc/low_level.h **** 
  34:Inc/low_level.h **** void safety_critical_arm_motor_pwm(Motor& motor);
  35:Inc/low_level.h **** bool safety_critical_disarm_motor_pwm(Motor& motor);
  36:Inc/low_level.h **** void safety_critical_apply_motor_pwm_timings(Motor& motor, uint16_t timings[3]);
  37:Inc/low_level.h **** void safety_critical_arm_brake_resistor();
  38:Inc/low_level.h **** void safety_critical_disarm_brake_resistor();
  39:Inc/low_level.h **** void safety_critical_apply_brake_resistor_timings(uint32_t low_off, uint32_t high_on);
  40:Inc/low_level.h **** 
  41:Inc/low_level.h **** // called from STM platform code
  42:Inc/low_level.h **** extern "C" {
  43:Inc/low_level.h **** void pwm_trig_adc_cb(ADC_TypeDef* hadc, bool injected);
  44:Inc/low_level.h **** void vbus_sense_adc_cb(ADC_HandleTypeDef* hadc, bool injected);
  45:Inc/low_level.h **** void tim_update_cb(TIM_HandleTypeDef* htim);
  46:Inc/low_level.h **** void pwm_in_cb(int channel, uint32_t timestamp);
  47:Inc/low_level.h **** void send_notification(void);
  48:Inc/low_level.h **** void axis_loop(void);
  49:Inc/low_level.h **** }
  50:Inc/low_level.h **** 
  51:Inc/low_level.h **** // Initalisation
  52:Inc/low_level.h **** void start_adc_pwm();
  53:Inc/low_level.h **** void start_pwm(TIM_HandleTypeDef* htim);
  54:Inc/low_level.h **** void sync_timers(TIM_HandleTypeDef* htim_a, TIM_HandleTypeDef* htim_b,
  55:Inc/low_level.h ****                  uint16_t TIM_CLOCKSOURCE_ITRx, uint16_t count_offset,
  56:Inc/low_level.h ****                  TIM_HandleTypeDef* htim_refbase = nullptr);
  57:Inc/low_level.h **** void start_general_purpose_adc();
  58:Inc/low_level.h **** float get_adc_voltage(const GPIO_TypeDef* const GPIO_port, uint16_t GPIO_pin);
  59:Inc/low_level.h **** uint16_t channel_from_gpio(const GPIO_TypeDef* const GPIO_port, uint16_t GPIO_pin);
  60:Inc/low_level.h **** float get_adc_voltage_channel(uint16_t channel);
  61:Inc/low_level.h **** void pwm_in_init();
  62:Inc/low_level.h **** void start_analog_thread();
  63:Inc/low_level.h **** 
  64:Inc/low_level.h **** void update_brake_current();
  65:Inc/low_level.h **** 
  66:Inc/low_level.h **** inline uint32_t cpu_enter_critical() {
 484              		.loc 3 66 17 view .LVU94
 485              	.LBB593:
  67:Inc/low_level.h ****     uint32_t primask = __get_PRIMASK();
 486              		.loc 3 67 5 view .LVU95
 487              	.LBB594:
 488              	.LBI594:
 489              		.file 4 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
ARM GAS  /tmp/ccoPBaGE.s 			page 14


   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
ARM GAS  /tmp/ccoPBaGE.s 			page 15


  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 16


 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
ARM GAS  /tmp/ccoPBaGE.s 			page 17


 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccoPBaGE.s 			page 18


 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 260:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccoPBaGE.s 			page 19


 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 20


 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 402:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
ARM GAS  /tmp/ccoPBaGE.s 			page 21


 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 419:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 490              		.loc 4 449 31 view .LVU96
 491              	.LBB595:
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 492              		.loc 4 451 3 view .LVU97
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 493              		.loc 4 453 3 view .LVU98
 494              		.syntax unified
 495              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 496 0000 EFF31083 		MRS r3, primask
 497              	@ 0 "" 2
 498              	.LVL26:
 454:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccoPBaGE.s 			page 22


 499              		.loc 4 454 3 view .LVU99
 500              		.loc 4 454 3 is_stmt 0 view .LVU100
 501              		.thumb
 502              		.syntax unified
 503              	.LBE595:
 504              	.LBE594:
  68:Inc/low_level.h ****     __disable_irq();
 505              		.loc 3 68 5 is_stmt 1 view .LVU101
 506              	.LBB596:
 507              	.LBI596:
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 508              		.loc 4 207 27 view .LVU102
 509              	.LBB597:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 510              		.loc 4 209 3 view .LVU103
 511              		.syntax unified
 512              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 513 0004 72B6     		cpsid i
 514              	@ 0 "" 2
 515              		.thumb
 516              		.syntax unified
 517              	.LBE597:
 518              	.LBE596:
  69:Inc/low_level.h ****     return primask;
 519              		.loc 3 69 5 view .LVU104
 520              	.LVL27:
 521              		.loc 3 69 5 is_stmt 0 view .LVU105
 522              	.LBE593:
 523              	.LBE592:
 130:Src/encoder.cpp **** 
 131:Src/encoder.cpp ****     // Update states
 132:Src/encoder.cpp ****     shadow_count_ = count;
 524              		.loc 1 132 5 is_stmt 1 view .LVU106
 525              		.loc 1 132 19 is_stmt 0 view .LVU107
 526 0006 0161     		str	r1, [r0, #16]
 133:Src/encoder.cpp ****     pos_estimate_counts_ = (float)count;
 527              		.loc 1 133 5 is_stmt 1 view .LVU108
 528              		.loc 1 133 28 is_stmt 0 view .LVU109
 529 0008 07EE901A 		vmov	s15, r1	@ int
 530 000c F8EEE77A 		vcvt.f32.s32	s15, s15
 531 0010 C0ED117A 		vstr.32	s15, [r0, #68]
 134:Src/encoder.cpp ****     tim_cnt_sample_ = count;
 532              		.loc 1 134 5 is_stmt 1 view .LVU110
 533              		.loc 1 134 21 is_stmt 0 view .LVU111
 534 0014 A0F8AC10 		strh	r1, [r0, #172]	@ movhi
 135:Src/encoder.cpp **** 
 136:Src/encoder.cpp ****     //Write hardware last
 137:Src/encoder.cpp **** 
 138:Src/encoder.cpp **** 
 139:Src/encoder.cpp ****     cpu_exit_critical(prim);
 535              		.loc 1 139 5 is_stmt 1 view .LVU112
 536              	.LVL28:
 537              	.LBB598:
 538              	.LBI598:
  70:Inc/low_level.h **** }
  71:Inc/low_level.h **** 
  72:Inc/low_level.h **** inline void cpu_exit_critical(uint32_t priority_mask) {
ARM GAS  /tmp/ccoPBaGE.s 			page 23


 539              		.loc 3 72 13 view .LVU113
 540              	.LBE598:
  73:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
 541              		.loc 3 73 5 view .LVU114
 542              	.LBB601:
 543              	.LBB599:
 544              	.LBI599:
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 545              		.loc 4 479 27 view .LVU115
 546              	.LBB600:
 480:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 547              		.loc 4 481 3 view .LVU116
 548              		.syntax unified
 549              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 550 0018 83F31088 		MSR primask, r3
 551              	@ 0 "" 2
 552              	.LVL29:
 553              		.loc 4 481 3 is_stmt 0 view .LVU117
 554              		.thumb
 555              		.syntax unified
 556              	.LBE600:
 557              	.LBE599:
 558              	.LBE601:
 140:Src/encoder.cpp **** }
 559              		.loc 1 140 1 view .LVU118
 560 001c 7047     		bx	lr
 561              		.cfi_endproc
 562              	.LFE4953:
 564              		.section	.text._ZN7Encoder18set_circular_countElb,"ax",%progbits
 565              		.align	1
 566              		.global	_ZN7Encoder18set_circular_countElb
 567              		.syntax unified
ARM GAS  /tmp/ccoPBaGE.s 			page 24


 568              		.thumb
 569              		.thumb_func
 570              		.fpu fpv4-sp-d16
 572              	_ZN7Encoder18set_circular_countElb:
 573              	.LVL30:
 574              	.LFB4954:
 141:Src/encoder.cpp **** 
 142:Src/encoder.cpp **** // Function that sets the CPR circular tracking encoder count to a desired 32-bit value.
 143:Src/encoder.cpp **** // Note that this will get mod'ed down to [0, cpr)
 144:Src/encoder.cpp **** void Encoder::set_circular_count(int32_t count, bool update_offset) {
 575              		.loc 1 144 69 is_stmt 1 view -0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 0
 578              		@ frame_needed = 0, uses_anonymous_args = 0
 579              		.loc 1 144 69 is_stmt 0 view .LVU120
 580 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 581              	.LCFI3:
 582              		.cfi_def_cfa_offset 24
 583              		.cfi_offset 3, -24
 584              		.cfi_offset 4, -20
 585              		.cfi_offset 5, -16
 586              		.cfi_offset 6, -12
 587              		.cfi_offset 7, -8
 588              		.cfi_offset 14, -4
 589 0002 0446     		mov	r4, r0
 590 0004 0D46     		mov	r5, r1
 145:Src/encoder.cpp ****     // Disable interrupts to make a critical section to avoid race condition
 146:Src/encoder.cpp ****     uint32_t prim = cpu_enter_critical();
 591              		.loc 1 146 5 is_stmt 1 view .LVU121
 592              	.LBB602:
 593              	.LBI602:
  66:Inc/low_level.h ****     uint32_t primask = __get_PRIMASK();
 594              		.loc 3 66 17 view .LVU122
 595              	.LBB603:
  67:Inc/low_level.h ****     __disable_irq();
 596              		.loc 3 67 5 view .LVU123
 597              	.LBB604:
 598              	.LBI604:
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 599              		.loc 4 449 31 view .LVU124
 600              	.LBB605:
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601              		.loc 4 451 3 view .LVU125
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 602              		.loc 4 453 3 view .LVU126
 603              		.syntax unified
 604              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 605 0006 EFF31086 		MRS r6, primask
 606              	@ 0 "" 2
 607              	.LVL31:
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 608              		.loc 4 454 3 view .LVU127
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 609              		.loc 4 454 3 is_stmt 0 view .LVU128
 610              		.thumb
 611              		.syntax unified
 612              	.LBE605:
ARM GAS  /tmp/ccoPBaGE.s 			page 25


 613              	.LBE604:
  68:Inc/low_level.h ****     return primask;
 614              		.loc 3 68 5 is_stmt 1 view .LVU129
 615              	.LBB606:
 616              	.LBI606:
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 617              		.loc 4 207 27 view .LVU130
 618              	.LBB607:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 619              		.loc 4 209 3 view .LVU131
 620              		.syntax unified
 621              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 622 000a 72B6     		cpsid i
 623              	@ 0 "" 2
 624              		.thumb
 625              		.syntax unified
 626              	.LBE607:
 627              	.LBE606:
  69:Inc/low_level.h **** }
 628              		.loc 3 69 5 view .LVU132
 629              	.LVL32:
  69:Inc/low_level.h **** }
 630              		.loc 3 69 5 is_stmt 0 view .LVU133
 631              	.LBE603:
 632              	.LBE602:
 147:Src/encoder.cpp **** 
 148:Src/encoder.cpp ****     if (update_offset) {
 633              		.loc 1 148 5 is_stmt 1 view .LVU134
 634 000c 72B9     		cbnz	r2, .L29
 635              	.LVL33:
 636              	.L27:
 149:Src/encoder.cpp ****         config_.offset += count - count_in_cpr_;
 150:Src/encoder.cpp ****         config_.offset = mod(config_.offset, config_.cpr);
 151:Src/encoder.cpp ****     }
 152:Src/encoder.cpp **** 
 153:Src/encoder.cpp ****     // Update states
 154:Src/encoder.cpp ****     count_in_cpr_ = mod(count, config_.cpr);
 637              		.loc 1 154 5 view .LVU135
 638              		.loc 1 154 40 is_stmt 0 view .LVU136
 639 000e 6368     		ldr	r3, [r4, #4]
 640              		.loc 1 154 24 view .LVU137
 641 0010 9968     		ldr	r1, [r3, #8]
 642 0012 2846     		mov	r0, r5
 643 0014 FFF7FEFF 		bl	mod
 644              	.LVL34:
 645              		.loc 1 154 19 view .LVU138
 646 0018 6061     		str	r0, [r4, #20]
 155:Src/encoder.cpp ****     pos_cpr_counts_ = (float)count_in_cpr_;
 647              		.loc 1 155 5 is_stmt 1 view .LVU139
 648              		.loc 1 155 23 is_stmt 0 view .LVU140
 649 001a 07EE900A 		vmov	s15, r0	@ int
 650 001e F8EEE77A 		vcvt.f32.s32	s15, s15
 651 0022 C4ED127A 		vstr.32	s15, [r4, #72]
 156:Src/encoder.cpp **** 
 157:Src/encoder.cpp ****     cpu_exit_critical(prim);
 652              		.loc 1 157 5 is_stmt 1 view .LVU141
 653              	.LVL35:
ARM GAS  /tmp/ccoPBaGE.s 			page 26


 654              	.LBB608:
 655              	.LBI608:
  72:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
 656              		.loc 3 72 13 view .LVU142
 657              	.LBE608:
 658              		.loc 3 73 5 view .LVU143
 659              	.LBB611:
 660              	.LBB609:
 661              	.LBI609:
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 662              		.loc 4 479 27 view .LVU144
 663              	.LBB610:
 664              		.loc 4 481 3 view .LVU145
 665              		.syntax unified
 666              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 667 0026 86F31088 		MSR primask, r6
 668              	@ 0 "" 2
 669              	.LVL36:
 670              		.loc 4 481 3 is_stmt 0 view .LVU146
 671              		.thumb
 672              		.syntax unified
 673              	.LBE610:
 674              	.LBE609:
 675              	.LBE611:
 158:Src/encoder.cpp **** }
 676              		.loc 1 158 1 view .LVU147
 677 002a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 678              	.LVL37:
 679              	.L29:
 149:Src/encoder.cpp ****         config_.offset = mod(config_.offset, config_.cpr);
 680              		.loc 1 149 9 is_stmt 1 view .LVU148
 681 002c 4168     		ldr	r1, [r0, #4]
 682              	.LVL38:
 149:Src/encoder.cpp ****         config_.offset = mod(config_.offset, config_.cpr);
 683              		.loc 1 149 33 is_stmt 0 view .LVU149
 684 002e 4369     		ldr	r3, [r0, #20]
 685 0030 EA1A     		subs	r2, r5, r3
 686              	.LVL39:
 149:Src/encoder.cpp ****         config_.offset = mod(config_.offset, config_.cpr);
 687              		.loc 1 149 24 view .LVU150
 688 0032 CB68     		ldr	r3, [r1, #12]
 689 0034 1344     		add	r3, r3, r2
 690 0036 CB60     		str	r3, [r1, #12]
 150:Src/encoder.cpp ****     }
 691              		.loc 1 150 9 is_stmt 1 view .LVU151
 150:Src/encoder.cpp ****     }
 692              		.loc 1 150 30 is_stmt 0 view .LVU152
 693 0038 4768     		ldr	r7, [r0, #4]
 150:Src/encoder.cpp ****     }
 694              		.loc 1 150 29 view .LVU153
 695 003a B968     		ldr	r1, [r7, #8]
 696 003c F868     		ldr	r0, [r7, #12]
 697              	.LVL40:
 150:Src/encoder.cpp ****     }
 698              		.loc 1 150 29 view .LVU154
 699 003e FFF7FEFF 		bl	mod
 700              	.LVL41:
ARM GAS  /tmp/ccoPBaGE.s 			page 27


 150:Src/encoder.cpp ****     }
 701              		.loc 1 150 24 view .LVU155
 702 0042 F860     		str	r0, [r7, #12]
 703 0044 E3E7     		b	.L27
 704              		.cfi_endproc
 705              	.LFE4954:
 707              		.section	.text._ZN7Encoder12enc_index_cbEv,"ax",%progbits
 708              		.align	1
 709              		.global	_ZN7Encoder12enc_index_cbEv
 710              		.syntax unified
 711              		.thumb
 712              		.thumb_func
 713              		.fpu fpv4-sp-d16
 715              	_ZN7Encoder12enc_index_cbEv:
 716              	.LVL42:
 717              	.LFB4949:
  80:Src/encoder.cpp ****     if (config_.use_index) {
 718              		.loc 1 80 30 is_stmt 1 view -0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 0
 721              		@ frame_needed = 0, uses_anonymous_args = 0
  81:Src/encoder.cpp ****         set_circular_count(0, false);
 722              		.loc 1 81 5 view .LVU157
  81:Src/encoder.cpp ****         set_circular_count(0, false);
 723              		.loc 1 81 17 is_stmt 0 view .LVU158
 724 0000 4368     		ldr	r3, [r0, #4]
  81:Src/encoder.cpp ****         set_circular_count(0, false);
 725              		.loc 1 81 5 view .LVU159
 726 0002 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 727 0004 03B9     		cbnz	r3, .L39
 728 0006 7047     		bx	lr
 729              	.L39:
  80:Src/encoder.cpp ****     if (config_.use_index) {
 730              		.loc 1 80 30 view .LVU160
 731 0008 10B5     		push	{r4, lr}
 732              	.LCFI4:
 733              		.cfi_def_cfa_offset 8
 734              		.cfi_offset 4, -8
 735              		.cfi_offset 14, -4
 736 000a 0446     		mov	r4, r0
  82:Src/encoder.cpp ****         if (config_.zero_count_on_find_idx)
 737              		.loc 1 82 9 is_stmt 1 view .LVU161
  82:Src/encoder.cpp ****         if (config_.zero_count_on_find_idx)
 738              		.loc 1 82 27 is_stmt 0 view .LVU162
 739 000c 0022     		movs	r2, #0
 740 000e 1146     		mov	r1, r2
 741 0010 FFF7FEFF 		bl	_ZN7Encoder18set_circular_countElb
 742              	.LVL43:
  83:Src/encoder.cpp ****             set_linear_count(0); // Avoid position control transient after search
 743              		.loc 1 83 9 is_stmt 1 view .LVU163
  83:Src/encoder.cpp ****             set_linear_count(0); // Avoid position control transient after search
 744              		.loc 1 83 21 is_stmt 0 view .LVU164
 745 0014 6368     		ldr	r3, [r4, #4]
  83:Src/encoder.cpp ****             set_linear_count(0); // Avoid position control transient after search
 746              		.loc 1 83 9 view .LVU165
 747 0016 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 748 0018 73B9     		cbnz	r3, .L40
ARM GAS  /tmp/ccoPBaGE.s 			page 28


 749              	.L32:
  85:Src/encoder.cpp ****             is_ready_ = true;
 750              		.loc 1 85 9 is_stmt 1 view .LVU166
  85:Src/encoder.cpp ****             is_ready_ = true;
 751              		.loc 1 85 21 is_stmt 0 view .LVU167
 752 001a 6368     		ldr	r3, [r4, #4]
  85:Src/encoder.cpp ****             is_ready_ = true;
 753              		.loc 1 85 9 view .LVU168
 754 001c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 755 001e 83B1     		cbz	r3, .L33
  86:Src/encoder.cpp ****             if(axis_->controller_.config_.anticogging.pre_calibrated){
 756              		.loc 1 86 13 is_stmt 1 view .LVU169
  86:Src/encoder.cpp ****             if(axis_->controller_.config_.anticogging.pre_calibrated){
 757              		.loc 1 86 23 is_stmt 0 view .LVU170
 758 0020 0123     		movs	r3, #1
 759 0022 E373     		strb	r3, [r4, #15]
  87:Src/encoder.cpp ****                 axis_->controller_.anticogging_valid_ = true;
 760              		.loc 1 87 13 is_stmt 1 view .LVU171
  87:Src/encoder.cpp ****                 axis_->controller_.anticogging_valid_ = true;
 761              		.loc 1 87 23 is_stmt 0 view .LVU172
 762 0024 A368     		ldr	r3, [r4, #8]
 763 0026 DB68     		ldr	r3, [r3, #12]
  87:Src/encoder.cpp ****                 axis_->controller_.anticogging_valid_ = true;
 764              		.loc 1 87 55 view .LVU173
 765 0028 1A68     		ldr	r2, [r3]
  87:Src/encoder.cpp ****                 axis_->controller_.anticogging_valid_ = true;
 766              		.loc 1 87 13 view .LVU174
 767 002a 92F84422 		ldrb	r2, [r2, #580]	@ zero_extendqisi2
 768 002e 52B1     		cbz	r2, .L34
  88:Src/encoder.cpp ****             }
 769              		.loc 1 88 17 is_stmt 1 view .LVU175
  88:Src/encoder.cpp ****             }
 770              		.loc 1 88 55 is_stmt 0 view .LVU176
 771 0030 0122     		movs	r2, #1
 772 0032 83F85220 		strb	r2, [r3, #82]
 773 0036 06E0     		b	.L34
 774              	.L40:
  84:Src/encoder.cpp ****         if (config_.pre_calibrated) {
 775              		.loc 1 84 13 is_stmt 1 view .LVU177
  84:Src/encoder.cpp ****         if (config_.pre_calibrated) {
 776              		.loc 1 84 29 is_stmt 0 view .LVU178
 777 0038 0021     		movs	r1, #0
 778 003a 2046     		mov	r0, r4
 779 003c FFF7FEFF 		bl	_ZN7Encoder16set_linear_countEl
 780              	.LVL44:
 781 0040 EBE7     		b	.L32
 782              	.L33:
  94:Src/encoder.cpp ****         }
 783              		.loc 1 94 13 is_stmt 1 view .LVU179
  94:Src/encoder.cpp ****         }
 784              		.loc 1 94 23 is_stmt 0 view .LVU180
 785 0042 0023     		movs	r3, #0
 786 0044 E373     		strb	r3, [r4, #15]
 787              	.L34:
  96:Src/encoder.cpp ****     }
 788              		.loc 1 96 9 is_stmt 1 view .LVU181
  96:Src/encoder.cpp ****     }
ARM GAS  /tmp/ccoPBaGE.s 			page 29


 789              		.loc 1 96 22 is_stmt 0 view .LVU182
 790 0046 0123     		movs	r3, #1
 791 0048 A373     		strb	r3, [r4, #14]
 101:Src/encoder.cpp **** 
 792              		.loc 1 101 1 view .LVU183
 793 004a 10BD     		pop	{r4, pc}
 101:Src/encoder.cpp **** 
 794              		.loc 1 101 1 view .LVU184
 795              		.cfi_endproc
 796              	.LFE4949:
 798              		.section	.text._ZN7Encoder16run_index_searchEv,"ax",%progbits
 799              		.align	1
 800              		.global	_ZN7Encoder16run_index_searchEv
 801              		.syntax unified
 802              		.thumb
 803              		.thumb_func
 804              		.fpu fpv4-sp-d16
 806              	_ZN7Encoder16run_index_searchEv:
 807              	.LVL45:
 808              	.LFB4955:
 159:Src/encoder.cpp **** 
 160:Src/encoder.cpp **** 
 161:Src/encoder.cpp **** 
 162:Src/encoder.cpp **** bool Encoder::run_index_search() {
 809              		.loc 1 162 34 is_stmt 1 view -0
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 16
 812              		@ frame_needed = 0, uses_anonymous_args = 0
 813              		.loc 1 162 34 is_stmt 0 view .LVU186
 814 0000 10B5     		push	{r4, lr}
 815              	.LCFI5:
 816              		.cfi_def_cfa_offset 8
 817              		.cfi_offset 4, -8
 818              		.cfi_offset 14, -4
 819 0002 84B0     		sub	sp, sp, #16
 820              	.LCFI6:
 821              		.cfi_def_cfa_offset 24
 163:Src/encoder.cpp ****     config_.use_index = true;
 822              		.loc 1 163 5 is_stmt 1 view .LVU187
 823 0004 4368     		ldr	r3, [r0, #4]
 824              		.loc 1 163 23 is_stmt 0 view .LVU188
 825 0006 0122     		movs	r2, #1
 826 0008 9A70     		strb	r2, [r3, #2]
 164:Src/encoder.cpp ****     index_found_ = false;
 827              		.loc 1 164 5 is_stmt 1 view .LVU189
 828              		.loc 1 164 18 is_stmt 0 view .LVU190
 829 000a 0023     		movs	r3, #0
 830 000c 8373     		strb	r3, [r0, #14]
 165:Src/encoder.cpp ****     if (!config_.idx_search_unidirectional && axis_->motor_.config_.direction == 0) {
 831              		.loc 1 165 5 is_stmt 1 view .LVU191
 832              		.loc 1 165 18 is_stmt 0 view .LVU192
 833 000e 4368     		ldr	r3, [r0, #4]
 834              		.loc 1 165 5 view .LVU193
 835 0010 93F82930 		ldrb	r3, [r3, #41]	@ zero_extendqisi2
 836 0014 33B9     		cbnz	r3, .L42
 837              		.loc 1 165 54 discriminator 1 view .LVU194
 838 0016 8368     		ldr	r3, [r0, #8]
ARM GAS  /tmp/ccoPBaGE.s 			page 30


 839              		.loc 1 165 61 discriminator 1 view .LVU195
 840 0018 DB6E     		ldr	r3, [r3, #108]
 841 001a 5B68     		ldr	r3, [r3, #4]
 842              		.loc 1 165 44 discriminator 1 view .LVU196
 843 001c 5A6A     		ldr	r2, [r3, #36]
 844 001e 0AB9     		cbnz	r2, .L42
 166:Src/encoder.cpp ****         axis_->motor_.config_.direction = 1;
 845              		.loc 1 166 9 is_stmt 1 view .LVU197
 846              		.loc 1 166 41 is_stmt 0 view .LVU198
 847 0020 0122     		movs	r2, #1
 848 0022 5A62     		str	r2, [r3, #36]
 849              	.L42:
 167:Src/encoder.cpp ****     }
 168:Src/encoder.cpp ****     set_idx_subscribe();
 850              		.loc 1 168 5 is_stmt 1 view .LVU199
 169:Src/encoder.cpp **** 
 170:Src/encoder.cpp ****     bool status = axis_->run_lockin_spin(axis_->config_.calibration_lockin,false);
 851              		.loc 1 170 5 view .LVU200
 852              		.loc 1 170 19 is_stmt 0 view .LVU201
 853 0024 8068     		ldr	r0, [r0, #8]
 854              	.LVL46:
 855              		.loc 1 170 57 view .LVU202
 856 0026 4168     		ldr	r1, [r0, #4]
 857              	.LVL47:
 858              	.LBB622:
 859              	.LBI622:
 860              		.file 5 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_f
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // Implementation of std::function -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // Copyright (C) 2004-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** /** @file include/bits/std_function.h
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****  *  Do not attempt to use it directly. @headername{functional}
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****  */
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #ifndef _GLIBCXX_STD_FUNCTION_H
ARM GAS  /tmp/ccoPBaGE.s 			page 31


  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #define _GLIBCXX_STD_FUNCTION_H 1
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #pragma GCC system_header
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #if __cplusplus < 201103L
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** # include <bits/c++0x_warning.h>
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #else
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #if __cpp_rtti
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** # include <typeinfo>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #endif
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #include <bits/stl_function.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #include <bits/invoke.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #include <bits/refwrap.h>
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #include <bits/functexcept.h>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** namespace std _GLIBCXX_VISIBILITY(default)
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** {
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   /**
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  @brief Exception class thrown when class template function's
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  operator() is called with an empty target.
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  @ingroup exceptions
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    */
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   class bad_function_call : public std::exception
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   {
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   public:
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     virtual ~bad_function_call() noexcept;
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     const char* what() const noexcept;
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   };
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   /**
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  Trait identifying "location-invariant" types, meaning that the
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  address of the object (or any of its members) will not escape.
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  Trivially copyable types are location-invariant and users can
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  specialize this trait for other types.
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    */
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   template<typename _Tp>
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     struct __is_location_invariant
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     : is_trivially_copyable<_Tp>::type
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     { };
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   class _Undefined_class;
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   union _Nocopy_types
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   {
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     void*       _M_object;
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     const void* _M_const_object;
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     void (*_M_function_pointer)();
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     void (_Undefined_class::*_M_member_pointer)();
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   };
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   union [[gnu::may_alias]] _Any_data
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   {
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     void*       _M_access()       { return &_M_pod_data[0]; }
ARM GAS  /tmp/ccoPBaGE.s 			page 32


  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     const void* _M_access() const { return &_M_pod_data[0]; }
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     template<typename _Tp>
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       _Tp&
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       _M_access()
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       { return *static_cast<_Tp*>(_M_access()); }
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     template<typename _Tp>
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       const _Tp&
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       _M_access() const
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       { return *static_cast<const _Tp*>(_M_access()); }
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     _Nocopy_types _M_unused;
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     char _M_pod_data[sizeof(_Nocopy_types)];
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   };
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   enum _Manager_operation
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   {
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     __get_type_info,
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     __get_functor_ptr,
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     __clone_functor,
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     __destroy_functor
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   };
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   template<typename _Signature>
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     class function;
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   /// Base class of all polymorphic function object wrappers.
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   class _Function_base
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   {
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   public:
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     static const size_t _M_max_size = sizeof(_Nocopy_types);
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     static const size_t _M_max_align = __alignof__(_Nocopy_types);
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     template<typename _Functor>
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       class _Base_manager
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       {
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       protected:
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static const bool __stored_locally =
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	(__is_location_invariant<_Functor>::value
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	 && sizeof(_Functor) <= _M_max_size
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	 && __alignof__(_Functor) <= _M_max_align
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	 && (_M_max_align % __alignof__(_Functor) == 0));
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	typedef integral_constant<bool, __stored_locally> _Local_storage;
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	// Retrieve a pointer to the function object
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static _Functor*
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_get_pointer(const _Any_data& __source)
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  if _GLIBCXX17_CONSTEXPR (__stored_locally)
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    {
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      const _Functor& __f = __source._M_access<_Functor>();
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      return const_cast<_Functor*>(std::__addressof(__f));
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    }
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  else // have stored a pointer
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    return __source._M_access<_Functor*>();
ARM GAS  /tmp/ccoPBaGE.s 			page 33


 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	}
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	// Clone a location-invariant function object that fits within
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	// an _Any_data structure.
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static void
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	}
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	// Clone a function object that is not location-invariant or
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	// that cannot fit into an _Any_data structure.
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static void
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  __dest._M_access<_Functor*>() =
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    new _Functor(*__source._M_access<const _Functor*>());
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	}
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	// Destroying a location-invariant object may still require
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	// destruction.
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static void
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_destroy(_Any_data& __victim, true_type)
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  __victim._M_access<_Functor>().~_Functor();
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	}
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	// Destroying an object located on the heap.
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static void
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_destroy(_Any_data& __victim, false_type)
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  delete __victim._M_access<_Functor*>();
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	}
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       public:
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static bool
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_manager(_Any_data& __dest, const _Any_data& __source,
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 		   _Manager_operation __op)
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  switch (__op)
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    {
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #if __cpp_rtti
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    case __get_type_info:
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      __dest._M_access<const type_info*>() = &typeid(_Functor);
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      break;
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #endif
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    case __get_functor_ptr:
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      break;
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    case __clone_functor:
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      _M_clone(__dest, __source, _Local_storage());
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      break;
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    case __destroy_functor:
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      _M_destroy(__dest, _Local_storage());
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	      break;
ARM GAS  /tmp/ccoPBaGE.s 			page 34


 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    }
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  return false;
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	}
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static void
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	template<typename _Signature>
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  static bool
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  _M_not_empty_function(const function<_Signature>& __f)
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  { return static_cast<bool>(__f); }
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	template<typename _Tp>
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  static bool
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  _M_not_empty_function(_Tp* __fp)
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  { return __fp != nullptr; }
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	template<typename _Class, typename _Tp>
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  static bool
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  _M_not_empty_function(_Tp _Class::* __mp)
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  { return __mp != nullptr; }
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	template<typename _Tp>
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  static bool
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  _M_not_empty_function(const _Tp&)
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  { return true; }
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       private:
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static void
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	static void
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       };
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     _Function_base() : _M_manager(nullptr) { }
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     ~_Function_base()
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     {
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       if (_M_manager)
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_manager(_M_functor, _M_functor, __destroy_functor);
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     }
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     bool _M_empty() const { return !_M_manager; }
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     typedef bool (*_Manager_type)(_Any_data&, const _Any_data&,
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 				  _Manager_operation);
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     _Any_data     _M_functor;
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     _Manager_type _M_manager;
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   };
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   template<typename _Signature, typename _Functor>
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     class _Function_handler;
ARM GAS  /tmp/ccoPBaGE.s 			page 35


 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   template<typename _Res, typename _Functor, typename... _ArgTypes>
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     class _Function_handler<_Res(_ArgTypes...), _Functor>
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     : public _Function_base::_Base_manager<_Functor>
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     {
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       typedef _Function_base::_Base_manager<_Functor> _Base;
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     public:
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       static bool
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       _M_manager(_Any_data& __dest, const _Any_data& __source,
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 		 _Manager_operation __op)
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       {
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	switch (__op)
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  {
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #if __cpp_rtti
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  case __get_type_info:
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    break;
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** #endif
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  case __get_functor_ptr:
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    break;
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  default:
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	    _Base::_M_manager(__dest, __source, __op);
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	  }
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	return false;
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       }
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       static _Res
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       {
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 				     std::forward<_ArgTypes>(__args)...);
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       }
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     };
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   /**
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  @brief Primary class template for std::function.
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  @ingroup functors
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    *  Polymorphic function wrapper.
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****    */
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****   template<typename _Res, typename... _ArgTypes>
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     class function<_Res(_ArgTypes...)>
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       private _Function_base
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     {
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       template<typename _Func,
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	       typename _Res2 = __invoke_result<_Func&, _ArgTypes...>>
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	struct _Callable
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	: __is_invocable_impl<_Res2, _Res>::type
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	{ };
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       // Used so the return type convertibility checks aren't done when
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       // performing overload resolution for copy construction/assignment.
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       template<typename _Tp>
ARM GAS  /tmp/ccoPBaGE.s 			page 36


 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	struct _Callable<function, _Tp> : false_type { };
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       template<typename _Cond, typename _Tp>
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	using _Requires = typename enable_if<_Cond::value, _Tp>::type;
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     public:
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       typedef _Res result_type;
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       // [3.7.2.1] construct/copy/destroy
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       /**
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****        *  @brief Default construct creates an empty function call wrapper.
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****        *  @post @c !(bool)*this
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****        */
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****       function() noexcept
 861              		.loc 5 330 7 is_stmt 1 view .LVU203
 862              	.LBB623:
 863              	.LBB624:
 864              	.LBI624:
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 865              		.loc 5 240 5 view .LVU204
 866              	.LBB625:
 867              	.LBB626:
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 868              		.loc 5 240 42 is_stmt 0 view .LVU205
 869 0028 0022     		movs	r2, #0
 870 002a 0292     		str	r2, [sp, #8]
 871              	.LVL48:
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 872              		.loc 5 240 42 view .LVU206
 873              	.LBE626:
 874              	.LBE625:
 875              	.LBE624:
 876              	.LBE623:
 877              	.LBE622:
 878              		.loc 1 170 41 view .LVU207
 879 002c 6B46     		mov	r3, sp
 880 002e 1C31     		adds	r1, r1, #28
 881 0030 FFF7FEFF 		bl	_ZN4Axis15run_lockin_spinERKNS_14LockinConfig_tEbSt8functionIFbbEE
 882              	.LVL49:
 883 0034 0446     		mov	r4, r0
 884              	.LVL50:
 885              	.LBB627:
 886              	.LBI627:
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
 887              		.loc 5 303 11 is_stmt 1 view .LVU208
 888              	.LBB628:
 889              	.LBB629:
 890              	.LBI629:
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     {
 891              		.loc 5 242 5 view .LVU209
 892              	.LBB630:
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_manager(_M_functor, _M_functor, __destroy_functor);
 893              		.loc 5 244 7 view .LVU210
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_manager(_M_functor, _M_functor, __destroy_functor);
 894              		.loc 5 244 11 is_stmt 0 view .LVU211
 895 0036 029B     		ldr	r3, [sp, #8]
ARM GAS  /tmp/ccoPBaGE.s 			page 37


 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_manager(_M_functor, _M_functor, __destroy_functor);
 896              		.loc 5 244 7 view .LVU212
 897 0038 1BB1     		cbz	r3, .L43
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     }
 898              		.loc 5 245 2 is_stmt 1 view .LVU213
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     }
 899              		.loc 5 245 12 is_stmt 0 view .LVU214
 900 003a 0322     		movs	r2, #3
 901 003c 6946     		mov	r1, sp
 902 003e 6846     		mov	r0, sp
 903 0040 9847     		blx	r3
 904              	.LVL51:
 905              	.L43:
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     }
 906              		.loc 5 245 12 view .LVU215
 907              	.LBE630:
 908              	.LBE629:
 909              	.LBE628:
 910              	.LBE627:
 171:Src/encoder.cpp ****     return status;
 911              		.loc 1 171 5 is_stmt 1 view .LVU216
 172:Src/encoder.cpp **** }
 912              		.loc 1 172 1 is_stmt 0 view .LVU217
 913 0042 2046     		mov	r0, r4
 914 0044 04B0     		add	sp, sp, #16
 915              	.LCFI7:
 916              		.cfi_def_cfa_offset 8
 917              		@ sp needed
 918 0046 10BD     		pop	{r4, pc}
 919              		.loc 1 172 1 view .LVU218
 920              		.cfi_endproc
 921              	.LFE4955:
 923              		.section	.text._ZN7Encoder18run_direction_findEv,"ax",%progbits
 924              		.align	1
 925              		.global	_ZN7Encoder18run_direction_findEv
 926              		.syntax unified
 927              		.thumb
 928              		.thumb_func
 929              		.fpu fpv4-sp-d16
 931              	_ZN7Encoder18run_direction_findEv:
 932              	.LVL52:
 933              	.LFB4959:
 173:Src/encoder.cpp **** 
 174:Src/encoder.cpp **** bool Encoder::run_direction_find() {
 934              		.loc 1 174 36 is_stmt 1 view -0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 48
 937              		@ frame_needed = 0, uses_anonymous_args = 0
 938              		.loc 1 174 36 is_stmt 0 view .LVU220
 939 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 940              	.LCFI8:
 941              		.cfi_def_cfa_offset 20
 942              		.cfi_offset 4, -20
 943              		.cfi_offset 5, -16
 944              		.cfi_offset 6, -12
 945              		.cfi_offset 7, -8
 946              		.cfi_offset 14, -4
ARM GAS  /tmp/ccoPBaGE.s 			page 38


 947 0002 8DB0     		sub	sp, sp, #52
 948              	.LCFI9:
 949              		.cfi_def_cfa_offset 72
 950 0004 0446     		mov	r4, r0
 175:Src/encoder.cpp ****     int32_t init_enc_val = shadow_count_;
 951              		.loc 1 175 5 is_stmt 1 view .LVU221
 952              		.loc 1 175 13 is_stmt 0 view .LVU222
 953 0006 0669     		ldr	r6, [r0, #16]
 954              	.LVL53:
 176:Src/encoder.cpp ****     axis_->motor_.config_.direction = 1; // Must test spin forwards for direction detect logic
 955              		.loc 1 176 5 is_stmt 1 view .LVU223
 956              		.loc 1 176 12 is_stmt 0 view .LVU224
 957 0008 8368     		ldr	r3, [r0, #8]
 958              		.loc 1 176 19 view .LVU225
 959 000a DB6E     		ldr	r3, [r3, #108]
 960 000c 5B68     		ldr	r3, [r3, #4]
 961              		.loc 1 176 37 view .LVU226
 962 000e 0127     		movs	r7, #1
 963 0010 5F62     		str	r7, [r3, #36]
 177:Src/encoder.cpp **** 
 178:Src/encoder.cpp ****     Axis::LockinConfig_t lockin_config = axis_->config_.calibration_lockin;
 964              		.loc 1 178 5 is_stmt 1 view .LVU227
 965              		.loc 1 178 42 is_stmt 0 view .LVU228
 966 0012 8568     		ldr	r5, [r0, #8]
 967              		.loc 1 178 49 view .LVU229
 968 0014 6B68     		ldr	r3, [r5, #4]
 969              		.loc 1 178 26 view .LVU230
 970 0016 0DF1040E 		add	lr, sp, #4
 971 001a 03F11C0C 		add	ip, r3, #28
 972 001e BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 973              	.LVL54:
 974              		.loc 1 178 26 view .LVU231
 975 0022 AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 976 0026 9CE80700 		ldm	ip, {r0, r1, r2}
 977 002a 8EE80700 		stm	lr, {r0, r1, r2}
 179:Src/encoder.cpp ****     lockin_config.finish_distance = lockin_config.vel * 3.0f; // run for 3 seconds
 978              		.loc 1 179 5 is_stmt 1 view .LVU232
 979              		.loc 1 179 55 is_stmt 0 view .LVU233
 980 002e DDED057A 		vldr.32	s15, [sp, #20]
 981 0032 B0EE087A 		vmov.f32	s14, #3.0e+0
 982 0036 67EE877A 		vmul.f32	s15, s15, s14
 983              		.loc 1 179 35 view .LVU234
 984 003a CDED067A 		vstr.32	s15, [sp, #24]
 180:Src/encoder.cpp ****     lockin_config.finish_on_distance = true;
 985              		.loc 1 180 5 is_stmt 1 view .LVU235
 986              		.loc 1 180 38 is_stmt 0 view .LVU236
 987 003e 8DF81D70 		strb	r7, [sp, #29]
 181:Src/encoder.cpp ****     lockin_config.finish_on_enc_idx = false;
 988              		.loc 1 181 5 is_stmt 1 view .LVU237
 989              		.loc 1 181 37 is_stmt 0 view .LVU238
 990 0042 0022     		movs	r2, #0
 991 0044 8DF81E20 		strb	r2, [sp, #30]
 182:Src/encoder.cpp ****     lockin_config.finish_on_vel = false;
 992              		.loc 1 182 5 is_stmt 1 view .LVU239
 993              		.loc 1 182 33 is_stmt 0 view .LVU240
 994 0048 8DF81C20 		strb	r2, [sp, #28]
 183:Src/encoder.cpp ****     bool status = axis_->run_lockin_spin(lockin_config,false);
ARM GAS  /tmp/ccoPBaGE.s 			page 39


 995              		.loc 1 183 5 is_stmt 1 view .LVU241
 996              	.LVL55:
 997              	.LBB641:
 998              	.LBI641:
 999              		.loc 5 330 7 view .LVU242
 1000              	.LBB642:
 1001              	.LBB643:
 1002              	.LBI643:
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 1003              		.loc 5 240 5 view .LVU243
 1004              	.LBB644:
 1005              	.LBB645:
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 1006              		.loc 5 240 42 is_stmt 0 view .LVU244
 1007 004c 0A92     		str	r2, [sp, #40]
 1008              	.LVL56:
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 
 1009              		.loc 5 240 42 view .LVU245
 1010              	.LBE645:
 1011              	.LBE644:
 1012              	.LBE643:
 1013              	.LBE642:
 1014              	.LBE641:
 1015              		.loc 1 183 41 view .LVU246
 1016 004e 08AB     		add	r3, sp, #32
 1017 0050 01A9     		add	r1, sp, #4
 1018 0052 2846     		mov	r0, r5
 1019 0054 FFF7FEFF 		bl	_ZN4Axis15run_lockin_spinERKNS_14LockinConfig_tEbSt8functionIFbbEE
 1020              	.LVL57:
 1021 0058 0546     		mov	r5, r0
 1022              	.LVL58:
 1023              	.LBB646:
 1024              	.LBI646:
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
 1025              		.loc 5 303 11 is_stmt 1 view .LVU247
 1026              	.LBB647:
 1027              	.LBB648:
 1028              	.LBI648:
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     {
 1029              		.loc 5 242 5 view .LVU248
 1030              	.LBB649:
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_manager(_M_functor, _M_functor, __destroy_functor);
 1031              		.loc 5 244 7 view .LVU249
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_manager(_M_functor, _M_functor, __destroy_functor);
 1032              		.loc 5 244 11 is_stmt 0 view .LVU250
 1033 005a 0A9B     		ldr	r3, [sp, #40]
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h **** 	_M_manager(_M_functor, _M_functor, __destroy_functor);
 1034              		.loc 5 244 7 view .LVU251
 1035 005c 1BB1     		cbz	r3, .L46
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     }
 1036              		.loc 5 245 2 is_stmt 1 view .LVU252
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     }
 1037              		.loc 5 245 12 is_stmt 0 view .LVU253
 1038 005e 0322     		movs	r2, #3
 1039 0060 08A9     		add	r1, sp, #32
 1040              	.LVL59:
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     }
ARM GAS  /tmp/ccoPBaGE.s 			page 40


 1041              		.loc 5 245 12 view .LVU254
 1042 0062 0846     		mov	r0, r1
 1043 0064 9847     		blx	r3
 1044              	.LVL60:
 1045              	.L46:
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_function.h ****     }
 1046              		.loc 5 245 12 view .LVU255
 1047              	.LBE649:
 1048              	.LBE648:
 1049              	.LBE647:
 1050              	.LBE646:
 184:Src/encoder.cpp **** 
 185:Src/encoder.cpp ****     if (status) {
 1051              		.loc 1 185 5 is_stmt 1 view .LVU256
 1052 0066 4DB1     		cbz	r5, .L47
 186:Src/encoder.cpp ****         // Check response and direction
 187:Src/encoder.cpp ****         if (shadow_count_ > init_enc_val + 8) {
 1053              		.loc 1 187 9 view .LVU257
 1054              		.loc 1 187 13 is_stmt 0 view .LVU258
 1055 0068 2369     		ldr	r3, [r4, #16]
 1056              		.loc 1 187 42 view .LVU259
 1057 006a 06F10802 		add	r2, r6, #8
 1058              		.loc 1 187 9 view .LVU260
 1059 006e 9342     		cmp	r3, r2
 1060 0070 07DD     		ble	.L48
 188:Src/encoder.cpp ****             // motor same dir as encoder
 189:Src/encoder.cpp ****             axis_->motor_.config_.direction = 1;
 1061              		.loc 1 189 13 is_stmt 1 view .LVU261
 1062              		.loc 1 189 20 is_stmt 0 view .LVU262
 1063 0072 A368     		ldr	r3, [r4, #8]
 1064              		.loc 1 189 27 view .LVU263
 1065 0074 DB6E     		ldr	r3, [r3, #108]
 1066 0076 5B68     		ldr	r3, [r3, #4]
 1067              		.loc 1 189 45 view .LVU264
 1068 0078 0122     		movs	r2, #1
 1069 007a 5A62     		str	r2, [r3, #36]
 1070              	.LVL61:
 1071              	.L47:
 190:Src/encoder.cpp ****         } else if (shadow_count_ < init_enc_val - 8) {
 191:Src/encoder.cpp ****             // motor opposite dir as encoder
 192:Src/encoder.cpp ****             axis_->motor_.config_.direction = -1;
 193:Src/encoder.cpp ****         } else {
 194:Src/encoder.cpp ****             axis_->motor_.config_.direction = 0;
 195:Src/encoder.cpp ****         }
 196:Src/encoder.cpp ****     }
 197:Src/encoder.cpp **** 
 198:Src/encoder.cpp ****     return status;
 1072              		.loc 1 198 5 is_stmt 1 view .LVU265
 199:Src/encoder.cpp **** }
 1073              		.loc 1 199 1 is_stmt 0 view .LVU266
 1074 007c 2846     		mov	r0, r5
 1075 007e 0DB0     		add	sp, sp, #52
 1076              	.LCFI10:
 1077              		.cfi_remember_state
 1078              		.cfi_def_cfa_offset 20
 1079              		@ sp needed
 1080 0080 F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccoPBaGE.s 			page 41


 1081              	.LVL62:
 1082              	.L48:
 1083              	.LCFI11:
 1084              		.cfi_restore_state
 190:Src/encoder.cpp ****         } else if (shadow_count_ < init_enc_val - 8) {
 1085              		.loc 1 190 16 is_stmt 1 view .LVU267
 190:Src/encoder.cpp ****         } else if (shadow_count_ < init_enc_val - 8) {
 1086              		.loc 1 190 49 is_stmt 0 view .LVU268
 1087 0082 083E     		subs	r6, r6, #8
 1088              	.LVL63:
 190:Src/encoder.cpp ****         } else if (shadow_count_ < init_enc_val - 8) {
 1089              		.loc 1 190 16 view .LVU269
 1090 0084 B342     		cmp	r3, r6
 192:Src/encoder.cpp ****         } else {
 1091              		.loc 1 192 13 is_stmt 1 view .LVU270
 192:Src/encoder.cpp ****         } else {
 1092              		.loc 1 192 20 is_stmt 0 view .LVU271
 1093 0086 A368     		ldr	r3, [r4, #8]
 192:Src/encoder.cpp ****         } else {
 1094              		.loc 1 192 27 view .LVU272
 1095 0088 DB6E     		ldr	r3, [r3, #108]
 1096 008a 5B68     		ldr	r3, [r3, #4]
 192:Src/encoder.cpp ****         } else {
 1097              		.loc 1 192 45 view .LVU273
 1098 008c B4BF     		ite	lt
 1099 008e 4FF0FF32 		movlt	r2, #-1
 1100              	.LVL64:
 194:Src/encoder.cpp ****         }
 1101              		.loc 1 194 13 is_stmt 1 view .LVU274
 194:Src/encoder.cpp ****         }
 1102              		.loc 1 194 45 is_stmt 0 view .LVU275
 1103 0092 0022     		movge	r2, #0
 1104 0094 5A62     		str	r2, [r3, #36]
 1105 0096 F1E7     		b	.L47
 1106              		.cfi_endproc
 1107              	.LFE4959:
 1109              		.global	__aeabi_ldivmod
 1110              		.section	.text._ZN7Encoder22run_offset_calibrationEv,"ax",%progbits
 1111              		.align	1
 1112              		.global	_ZN7Encoder22run_offset_calibrationEv
 1113              		.syntax unified
 1114              		.thumb
 1115              		.thumb_func
 1116              		.fpu fpv4-sp-d16
 1118              	_ZN7Encoder22run_offset_calibrationEv:
 1119              	.LVL65:
 1120              	.LFB4960:
 200:Src/encoder.cpp **** 
 201:Src/encoder.cpp **** // @brief Turns the motor in one direction for a bit and then in the other
 202:Src/encoder.cpp **** // direction in order to find the offset between the electrical phase 0
 203:Src/encoder.cpp **** // and the encoder state 0.
 204:Src/encoder.cpp **** // TODO: Do the scan with current, not voltage!
 205:Src/encoder.cpp **** bool Encoder::run_offset_calibration() {
 1121              		.loc 1 205 40 is_stmt 1 view -0
 1122              		.cfi_startproc
 1123              		@ args = 0, pretend = 0, frame = 0
 1124              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccoPBaGE.s 			page 42


 1125              		.loc 1 205 40 is_stmt 0 view .LVU277
 1126 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1127              	.LCFI12:
 1128              		.cfi_def_cfa_offset 32
 1129              		.cfi_offset 4, -32
 1130              		.cfi_offset 5, -28
 1131              		.cfi_offset 6, -24
 1132              		.cfi_offset 7, -20
 1133              		.cfi_offset 8, -16
 1134              		.cfi_offset 9, -12
 1135              		.cfi_offset 10, -8
 1136              		.cfi_offset 14, -4
 1137 0004 0446     		mov	r4, r0
 206:Src/encoder.cpp **** 
 207:Src/encoder.cpp ****     const float start_lock_duration = 1.0f;
 1138              		.loc 1 207 5 is_stmt 1 view .LVU278
 1139              	.LVL66:
 208:Src/encoder.cpp ****     
 209:Src/encoder.cpp ****     // We use shadow_count_ to do the calibration, but the offset is used by count_in_cpr_
 210:Src/encoder.cpp ****     // Therefore we have to sync them for calibration
 211:Src/encoder.cpp ****     shadow_count_ = count_in_cpr_;
 1140              		.loc 1 211 5 view .LVU279
 1141              		.loc 1 211 19 is_stmt 0 view .LVU280
 1142 0006 4369     		ldr	r3, [r0, #20]
 1143 0008 0361     		str	r3, [r0, #16]
 212:Src/encoder.cpp **** 
 213:Src/encoder.cpp ****     uint32_t mask = cpu_enter_critical();
 1144              		.loc 1 213 5 is_stmt 1 view .LVU281
 1145              	.LBB917:
 1146              	.LBI917:
  66:Inc/low_level.h ****     uint32_t primask = __get_PRIMASK();
 1147              		.loc 3 66 17 view .LVU282
 1148              	.LBB918:
  67:Inc/low_level.h ****     __disable_irq();
 1149              		.loc 3 67 5 view .LVU283
 1150              	.LBB919:
 1151              	.LBI919:
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1152              		.loc 4 449 31 view .LVU284
 1153              	.LBB920:
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 1154              		.loc 4 451 3 view .LVU285
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 1155              		.loc 4 453 3 view .LVU286
 1156              		.syntax unified
 1157              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1158 000a EFF31085 		MRS r5, primask
 1159              	@ 0 "" 2
 1160              	.LVL67:
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1161              		.loc 4 454 3 view .LVU287
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1162              		.loc 4 454 3 is_stmt 0 view .LVU288
 1163              		.thumb
 1164              		.syntax unified
 1165              	.LBE920:
 1166              	.LBE919:
ARM GAS  /tmp/ccoPBaGE.s 			page 43


  68:Inc/low_level.h ****     return primask;
 1167              		.loc 3 68 5 is_stmt 1 view .LVU289
 1168              	.LBB921:
 1169              	.LBI921:
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1170              		.loc 4 207 27 view .LVU290
 1171              	.LBB922:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1172              		.loc 4 209 3 view .LVU291
 1173              		.syntax unified
 1174              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1175 000e 72B6     		cpsid i
 1176              	@ 0 "" 2
 1177              		.thumb
 1178              		.syntax unified
 1179              	.LBE922:
 1180              	.LBE921:
  69:Inc/low_level.h **** }
 1181              		.loc 3 69 5 view .LVU292
 1182              	.LVL68:
  69:Inc/low_level.h **** }
 1183              		.loc 3 69 5 is_stmt 0 view .LVU293
 1184              	.LBE918:
 1185              	.LBE917:
 214:Src/encoder.cpp ****     {
 1186              		.loc 1 214 5 is_stmt 1 view .LVU294
 1187              	.LBB923:
 215:Src/encoder.cpp ****         // Reset state variables
 216:Src/encoder.cpp ****         axis_->open_loop_controller_.Idq_setpoint_ = {0.0f, 0.0f};
 1188              		.loc 1 216 9 view .LVU295
 1189              	.LBB924:
 1190              	.LBI924:
 1191              		.file 6 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_p
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 44


  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** /*
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  */
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  */
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** # include <type_traits> // for std::__decay_and_strip, std::is_reference_v
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus > 201703L
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** # include <compare>
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** # define __cpp_lib_constexpr_utility 201811L
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** {
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /**
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @addtogroup utilities
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @{
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    */
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// Tag type for piecewise construction of std::pair objects.
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   struct piecewise_construct_t { explicit piecewise_construct_t() = default; };
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 45


  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// Tag for piecewise construction of std::pair objects.
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     piecewise_construct_t();
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// @cond undocumented
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // Forward declarations.
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<typename...>
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     class tuple;
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<std::size_t...>
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct _Index_tuple;
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // Concept utility functions, reused in conditionally-explicit
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // constructors.
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // See PR 70437, don't look at is_constructible or
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // is_convertible if the types are the same to
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   // avoid querying those properties for incomplete types.
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template <bool, typename _T1, typename _T2>
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct _PCC
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     {
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&>>::value;
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_convertible<const _U1&, _T1>,
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_convertible<const _U2&, _T2>>::value;
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>>::value;
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_convertible<_U1&&, _T1>,
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_convertible<_U2&&, _T2>>::value;
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _CopyMovePair()
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<const _U1&, _T1>,
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				  is_convertible<_U2&&, _T2>>;
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __do_converts,
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
ARM GAS  /tmp/ccoPBaGE.s 			page 46


 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>,
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      __converts
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      >::value;
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _MoveCopyPair()
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<_U1&&, _T1>,
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				  is_convertible<const _U2&, _T2>>;
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __do_converts,
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&&>,
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      __converts
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		      >::value;
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   };
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template <typename _T1, typename _T2>
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct _PCC<false, _T1, _T2>
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     {
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	return false;
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       }
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   };
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif // C++11
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<typename _U1, typename _U2> class __pair_base
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   {
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     template<typename _T1, typename _T2> friend struct pair;
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     __pair_base() = default;
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     ~__pair_base() = default;
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     __pair_base(const __pair_base&) = default;
ARM GAS  /tmp/ccoPBaGE.s 			page 47


 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     __pair_base& operator=(const __pair_base&) = delete;
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif // C++11
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   };
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   /// @endcond
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****  /**
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****    */
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     struct pair
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     : private __pair_base<_T1, _T2>
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****     {
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       typedef _T1 first_type;    ///< The type of the `first` member
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       typedef _T2 second_type;   ///< The type of the `second` member
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _T1 first;                 ///< The first member
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _T2 second;                ///< The second member
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // 265.  std::pair::pair() effects overly restrictive
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /** The default constructor creates @c first and @c second using their
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        *  respective default constructors.  */
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename _U2 = _T2,
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U1>,
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U2>>
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                    ::value, bool>::type = true>
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _GLIBCXX_CONSTEXPR pair()
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(), second() { }
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename _U2 = _T2,
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                        is_default_constructible<_U1>,
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                        is_default_constructible<_U2>,
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                        __not_<
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          __and_<__is_implicitly_default_constructible<_U1>,
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                 __is_implicitly_default_constructible<_U2>>>>
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                                    ::value, bool>::type = false>
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       explicit constexpr pair()
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(), second() { }
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// Two objects may be passed to a @c pair constructor to be copied.
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       pair(const _T1& __a, const _T2& __b)
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
ARM GAS  /tmp/ccoPBaGE.s 			page 48


 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #else
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that don't take pairs.
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @cond undocumented
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       using _PCCP = _PCC<true, _T1, _T2>;
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @endcond
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// Construct from two const lvalues, allowing implicit conversions.
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1 = _T1, typename _U2=_T2, typename
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	                 && _PCCP::template
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       constexpr pair(const _T1& __a, const _T2& __b)
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// Construct from two const lvalues, disallowing implicit conversions.
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        template<typename _U1 = _T1, typename _U2=_T2, typename
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		enable_if<_PCCP::template
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    _ConstructiblePair<_U1, _U2>()
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	                  && !_PCCP::template
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    _ImplicitlyConvertiblePair<_U1, _U2>(),
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       explicit constexpr pair(const _T1& __a, const _T2& __b)
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// There is also a templated constructor to convert from other pairs.
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2>
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	pair(const pair<_U1, _U2>& __p)
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #else
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that take pairs.
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @cond undocumented
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         using _PCCFP = _PCC<!is_same<_T1, _U1>::value
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    || !is_same<_T2, _U2>::value,
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			    _T1, _T2>;
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       /// @endcond
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	                 && _PCCFP<_U1, _U2>::template
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  bool>::type=true>
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         constexpr pair(const pair<_U1, _U2>& __p)
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         : first(__p.first), second(__p.second) { }
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			 && !_PCCFP<_U1, _U2>::template
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	explicit constexpr pair(const pair<_U1, _U2>& __p)
ARM GAS  /tmp/ccoPBaGE.s 			page 49


 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #endif
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       constexpr pair(const pair&) = default;	///< Copy constructor
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       constexpr pair(pair&&) = default;		///< Move constructor
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       // DR 811.
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveCopyPair<true, _U1, _T2>(),
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        constexpr pair(_U1&& __x, const _T2& __y)
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveCopyPair<false, _U1, _T2>(),
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        explicit constexpr pair(_U1&& __x, const _T2& __y)
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U2, typename
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _CopyMovePair<true, _T1, _U2>(),
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        constexpr pair(const _T1& __x, _U2&& __y)
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U2, typename
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _CopyMovePair<false, _T1, _U2>(),
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        explicit pair(const _T1& __x, _U2&& __y)
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && _PCCP::template
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	constexpr pair(_U1&& __x, _U2&& __y)
 1192              		.loc 6 352 12 view .LVU296
 1193              	.LBB925:
 1194              	.LBI925:
 1195              		.file 7 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Copyright (C) 2007-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 50


  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** /** @file bits/move.h
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****  */
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #ifndef _MOVE_H
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #define _MOVE_H 1
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #include <bits/c++config.h>
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #if __cplusplus < 201103L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** # include <bits/concept_check.h>
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #endif
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** {
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief Same as C++11 std::addressof
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @ingroup utilities
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     { return __builtin_addressof(__r); }
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #if __cplusplus >= 201103L
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** } // namespace
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** {
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @addtogroup utilities
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @{
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 51


  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   /**
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @brief  Forward an lvalue.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  @return The parameter cast to the specified type.
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****    */
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****   template<typename _Tp>
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     constexpr _Tp&&
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 1196              		.loc 7 76 5 view .LVU297
 1197              		.loc 7 76 5 is_stmt 0 view .LVU298
 1198              	.LBE925:
 1199              	.LBB926:
 1200              	.LBI926:
 1201              		.loc 7 76 5 is_stmt 1 view .LVU299
 1202              		.loc 7 76 5 is_stmt 0 view .LVU300
 1203              	.LBE926:
 1204              	.LBE924:
 1205              		.loc 1 216 9 view .LVU301
 1206 0010 8168     		ldr	r1, [r0, #8]
 1207              	.LVL69:
 1208              	.LBB927:
 1209              	.LBI927:
  48:Inc/component.hpp ****     
  49:Inc/component.hpp ****     /**
  50:Inc/component.hpp ****      * @brief Updates the underlying value of this output port.
  51:Inc/component.hpp ****      */
  52:Inc/component.hpp ****     void operator=(T value) {
 1210              		.loc 2 52 10 is_stmt 1 view .LVU302
 1211              	.LBB928:
 1212              	.LBB929:
 1213              	.LBI929:
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && !_PCCP::template
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	explicit constexpr pair(_U1&& __x, _U2&& __y)
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && _PCCFP<_U1, _U2>::template
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=true>
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	constexpr pair(pair<_U1, _U2>&& __p)
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	  second(std::forward<_U2>(__p.second)) { }
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
ARM GAS  /tmp/ccoPBaGE.s 			page 52


 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			  && !_PCCFP<_U1, _U2>::template
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****                          bool>::type=false>
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	explicit constexpr pair(pair<_U1, _U2>&& __p)
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	  second(std::forward<_U2>(__p.second)) { }
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       template<typename... _Args1, typename... _Args2>
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	_GLIBCXX20_CONSTEXPR
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****         pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       _GLIBCXX20_CONSTEXPR pair&
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       operator=(typename conditional<
 1214              		.loc 6 390 7 view .LVU303
 1215              	.LBB930:
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		       is_copy_assignable<_T2>>::value,
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		const pair&, const __nonesuch&>::type __p)
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h ****       {
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	first = __p.first;
 1216              		.loc 6 395 8 is_stmt 0 view .LVU304
 1217 0012 0023     		movs	r3, #0
 1218 0014 8B63     		str	r3, [r1, #56]	@ float
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = __p.second;
 1219              		.loc 6 396 9 view .LVU305
 1220 0016 CB63     		str	r3, [r1, #60]	@ float
 1221              	.LVL70:
 1222              		.loc 6 396 9 view .LVU306
 1223              	.LBE930:
 1224              	.LBE929:
  53:Inc/component.hpp ****         content_ = value;
  54:Inc/component.hpp ****         age_ = 0;
 1225              		.loc 2 54 14 view .LVU307
 1226 0018 0022     		movs	r2, #0
 1227 001a 4A63     		str	r2, [r1, #52]
 1228              	.LVL71:
 1229              		.loc 2 54 14 view .LVU308
 1230              	.LBE928:
 1231              	.LBE927:
 217:Src/encoder.cpp ****         axis_->open_loop_controller_.Vdq_setpoint_ = {0.0f, 0.0f};
 1232              		.loc 1 217 9 is_stmt 1 view .LVU309
 1233              	.LBB931:
 1234              	.LBI931:
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 1235              		.loc 6 352 12 view .LVU310
 1236              	.LBB932:
 1237              	.LBI932:
 1238              		.loc 7 76 5 view .LVU311
 1239              		.loc 7 76 5 is_stmt 0 view .LVU312
 1240              	.LBE932:
 1241              	.LBB933:
 1242              	.LBI933:
 1243              		.loc 7 76 5 is_stmt 1 view .LVU313
 1244              		.loc 7 76 5 is_stmt 0 view .LVU314
 1245              	.LBE933:
 1246              	.LBE931:
 1247              		.loc 1 217 9 view .LVU315
ARM GAS  /tmp/ccoPBaGE.s 			page 53


 1248 001c 8168     		ldr	r1, [r0, #8]
 1249              	.LVL72:
 1250              	.LBB934:
 1251              	.LBI934:
  52:Inc/component.hpp ****         content_ = value;
 1252              		.loc 2 52 10 is_stmt 1 view .LVU316
 1253              	.LBB935:
 1254              	.LBB936:
 1255              	.LBI936:
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 1256              		.loc 6 390 7 view .LVU317
 1257              	.LBB937:
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_pair.h **** 	second = __p.second;
 1258              		.loc 6 395 8 is_stmt 0 view .LVU318
 1259 001e 4B64     		str	r3, [r1, #68]	@ float
 1260              		.loc 6 396 9 view .LVU319
 1261 0020 8B64     		str	r3, [r1, #72]	@ float
 1262              	.LVL73:
 1263              		.loc 6 396 9 view .LVU320
 1264              	.LBE937:
 1265              	.LBE936:
 1266              		.loc 2 54 14 view .LVU321
 1267 0022 0A64     		str	r2, [r1, #64]
 1268              	.LVL74:
 1269              		.loc 2 54 14 view .LVU322
 1270              	.LBE935:
 1271              	.LBE934:
 218:Src/encoder.cpp ****         axis_->open_loop_controller_.phase_ = 0.0f;
 1272              		.loc 1 218 9 is_stmt 1 view .LVU323
 1273 0024 8168     		ldr	r1, [r0, #8]
 1274              	.LVL75:
 1275              	.LBB938:
 1276              	.LBI938:
  52:Inc/component.hpp ****         content_ = value;
 1277              		.loc 2 52 10 view .LVU324
 1278              	.LBB939:
  53:Inc/component.hpp ****         age_ = 0;
 1279              		.loc 2 53 18 is_stmt 0 view .LVU325
 1280 0026 0B65     		str	r3, [r1, #80]	@ float
 1281              		.loc 2 54 14 view .LVU326
 1282 0028 CA64     		str	r2, [r1, #76]
 1283              	.LVL76:
 1284              		.loc 2 54 14 view .LVU327
 1285              	.LBE939:
 1286              	.LBE938:
 219:Src/encoder.cpp ****         axis_->open_loop_controller_.phase_vel_ = 0.0f;
 1287              		.loc 1 219 9 is_stmt 1 view .LVU328
 1288 002a 8168     		ldr	r1, [r0, #8]
 1289              	.LVL77:
 1290              	.LBB940:
 1291              	.LBI940:
  52:Inc/component.hpp ****         content_ = value;
 1292              		.loc 2 52 10 view .LVU329
 1293              	.LBB941:
  53:Inc/component.hpp ****         age_ = 0;
 1294              		.loc 2 53 18 is_stmt 0 view .LVU330
 1295 002c 8B65     		str	r3, [r1, #88]	@ float
ARM GAS  /tmp/ccoPBaGE.s 			page 54


 1296              		.loc 2 54 14 view .LVU331
 1297 002e 4A65     		str	r2, [r1, #84]
 1298              	.LVL78:
 1299              		.loc 2 54 14 view .LVU332
 1300              	.LBE941:
 1301              	.LBE940:
 220:Src/encoder.cpp **** 
 221:Src/encoder.cpp ****         float max_current_ramp = axis_->motor_.config_.calibration_current / start_lock_duration * 
 1302              		.loc 1 221 9 is_stmt 1 view .LVU333
 1303              		.loc 1 221 34 is_stmt 0 view .LVU334
 1304 0030 8368     		ldr	r3, [r0, #8]
 1305              		.loc 1 221 48 view .LVU335
 1306 0032 DA6E     		ldr	r2, [r3, #108]
 1307              		.loc 1 221 56 view .LVU336
 1308 0034 5268     		ldr	r2, [r2, #4]
 1309              		.loc 1 221 15 view .LVU337
 1310 0036 D2ED047A 		vldr.32	s15, [r2, #16]
 1311 003a 77EEA77A 		vadd.f32	s15, s15, s15
 1312              	.LVL79:
 222:Src/encoder.cpp ****         axis_->open_loop_controller_.max_current_ramp_ = max_current_ramp;
 1313              		.loc 1 222 9 is_stmt 1 view .LVU338
 1314              		.loc 1 222 56 is_stmt 0 view .LVU339
 1315 003e C3ED057A 		vstr.32	s15, [r3, #20]
 223:Src/encoder.cpp ****         axis_->open_loop_controller_.max_voltage_ramp_ = max_current_ramp;
 1316              		.loc 1 223 9 is_stmt 1 view .LVU340
 1317 0042 8368     		ldr	r3, [r0, #8]
 1318              		.loc 1 223 56 is_stmt 0 view .LVU341
 1319 0044 C3ED067A 		vstr.32	s15, [r3, #24]
 224:Src/encoder.cpp ****         axis_->open_loop_controller_.max_phase_vel_ramp_ = INFINITY;
 1320              		.loc 1 224 9 is_stmt 1 view .LVU342
 1321 0048 8368     		ldr	r3, [r0, #8]
 1322              		.loc 1 224 58 is_stmt 0 view .LVU343
 1323 004a 4FF0FF42 		mov	r2, #2139095040
 1324 004e DA61     		str	r2, [r3, #28]	@ float
 225:Src/encoder.cpp ****         axis_->open_loop_controller_.target_current_ = axis_->motor_.config_.motor_type != Motor::M
 1325              		.loc 1 225 9 is_stmt 1 view .LVU344
 1326              		.loc 1 225 56 is_stmt 0 view .LVU345
 1327 0050 8368     		ldr	r3, [r0, #8]
 1328              		.loc 1 225 70 view .LVU346
 1329 0052 DA6E     		ldr	r2, [r3, #108]
 1330 0054 5268     		ldr	r2, [r2, #4]
 1331              		.loc 1 225 117 view .LVU347
 1332 0056 92F82810 		ldrb	r1, [r2, #40]	@ zero_extendqisi2
 1333 005a 0229     		cmp	r1, #2
 1334 005c 14BF     		ite	ne
 1335 005e 1269     		ldrne	r2, [r2, #16]	@ float
 1336 0060 0022     		moveq	r2, #0
 1337              		.loc 1 225 54 view .LVU348
 1338 0062 5A62     		str	r2, [r3, #36]	@ float
 226:Src/encoder.cpp ****         axis_->open_loop_controller_.target_voltage_ = axis_->motor_.config_.motor_type != Motor::M
 1339              		.loc 1 226 9 is_stmt 1 view .LVU349
 1340              		.loc 1 226 56 is_stmt 0 view .LVU350
 1341 0064 8368     		ldr	r3, [r0, #8]
 1342              		.loc 1 226 70 view .LVU351
 1343 0066 DA6E     		ldr	r2, [r3, #108]
 1344 0068 5268     		ldr	r2, [r2, #4]
 1345              		.loc 1 226 117 view .LVU352
ARM GAS  /tmp/ccoPBaGE.s 			page 55


 1346 006a 92F82810 		ldrb	r1, [r2, #40]	@ zero_extendqisi2
 1347 006e 0229     		cmp	r1, #2
 1348 0070 0CBF     		ite	eq
 1349 0072 1269     		ldreq	r2, [r2, #16]	@ float
 1350 0074 0022     		movne	r2, #0
 1351              		.loc 1 226 54 view .LVU353
 1352 0076 9A62     		str	r2, [r3, #40]	@ float
 227:Src/encoder.cpp ****         axis_->open_loop_controller_.target_vel_ = 0.0f;
 1353              		.loc 1 227 9 is_stmt 1 view .LVU354
 1354 0078 8368     		ldr	r3, [r0, #8]
 1355              		.loc 1 227 50 is_stmt 0 view .LVU355
 1356 007a 9FEDC10A 		vldr.32	s0, .L93
 1357 007e 83ED080A 		vstr.32	s0, [r3, #32]
 228:Src/encoder.cpp ****         axis_->open_loop_controller_.total_distance_ = 0.0f;
 1358              		.loc 1 228 9 is_stmt 1 view .LVU356
 1359 0082 8368     		ldr	r3, [r0, #8]
 1360              	.LVL80:
 1361              	.LBB942:
 1362              	.LBI942:
  52:Inc/component.hpp ****         content_ = value;
 1363              		.loc 2 52 10 view .LVU357
 1364              	.LBB943:
  53:Inc/component.hpp ****         age_ = 0;
 1365              		.loc 2 53 18 is_stmt 0 view .LVU358
 1366 0084 83ED180A 		vstr.32	s0, [r3, #96]
 1367              		.loc 2 54 14 view .LVU359
 1368 0088 0022     		movs	r2, #0
 1369 008a DA65     		str	r2, [r3, #92]
 1370              	.LVL81:
 1371              		.loc 2 54 14 view .LVU360
 1372              	.LBE943:
 1373              	.LBE942:
 229:Src/encoder.cpp ****         axis_->open_loop_controller_.phase_ = axis_->open_loop_controller_.initial_phase_ = wrap_pm
 1374              		.loc 1 229 9 is_stmt 1 view .LVU361
 1375              		.loc 1 229 47 is_stmt 0 view .LVU362
 1376 008c 8668     		ldr	r6, [r0, #8]
 1377              	.LVL82:
 1378              	.LBB944:
 1379              	.LBI944:
 1380              		.file 8 "Inc/utils.hpp"
   1:Inc/utils.hpp **** 
   2:Inc/utils.hpp **** #ifndef __UTILS_H
   3:Inc/utils.hpp **** #define __UTILS_H
   4:Inc/utils.hpp **** 
   5:Inc/utils.hpp **** #include <stdint.h>
   6:Inc/utils.hpp **** #include <math.h>
   7:Inc/utils.hpp **** 
   8:Inc/utils.hpp **** /**
   9:Inc/utils.hpp ****  * @brief Flash size register address
  10:Inc/utils.hpp ****  */
  11:Inc/utils.hpp **** #define ID_FLASH_ADDRESS (0x1FFF7A22)
  12:Inc/utils.hpp **** 
  13:Inc/utils.hpp **** /**
  14:Inc/utils.hpp ****  * @brief Device ID register address
  15:Inc/utils.hpp ****  */
  16:Inc/utils.hpp **** #define ID_DBGMCU_IDCODE (0xE0042000)
  17:Inc/utils.hpp **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 56


  18:Inc/utils.hpp **** /**
  19:Inc/utils.hpp ****  * "Returns" the device signature
  20:Inc/utils.hpp ****  *
  21:Inc/utils.hpp ****  * Possible returns:
  22:Inc/utils.hpp ****  *    - 0x0413: STM32F405xx/07xx and STM32F415xx/17xx)
  23:Inc/utils.hpp ****  *    - 0x0419: STM32F42xxx and STM32F43xxx
  24:Inc/utils.hpp ****  *    - 0x0423: STM32F401xB/C
  25:Inc/utils.hpp ****  *    - 0x0433: STM32F401xD/E
  26:Inc/utils.hpp ****  *    - 0x0431: STM32F411xC/E
  27:Inc/utils.hpp ****  *
  28:Inc/utils.hpp ****  * Returned data is in 16-bit mode, but only bits 11:0 are valid, bits 15:12 are always 0.
  29:Inc/utils.hpp ****  * Defined as macro
  30:Inc/utils.hpp ****  */
  31:Inc/utils.hpp **** #define STM_ID_GetSignature() ((*(uint16_t *)(ID_DBGMCU_IDCODE)) & 0x0FFF)
  32:Inc/utils.hpp **** 
  33:Inc/utils.hpp **** /**
  34:Inc/utils.hpp ****  * "Returns" the device revision
  35:Inc/utils.hpp ****  *
  36:Inc/utils.hpp ****  * Revisions possible:
  37:Inc/utils.hpp ****  *    - 0x1000: Revision A
  38:Inc/utils.hpp ****  *    - 0x1001: Revision Z
  39:Inc/utils.hpp ****  *    - 0x1003: Revision Y
  40:Inc/utils.hpp ****  *    - 0x1007: Revision 1
  41:Inc/utils.hpp ****  *    - 0x2001: Revision 3
  42:Inc/utils.hpp ****  *
  43:Inc/utils.hpp ****  * Returned data is in 16-bit mode.
  44:Inc/utils.hpp ****  */
  45:Inc/utils.hpp **** #define STM_ID_GetRevision() (*(uint16_t *)(ID_DBGMCU_IDCODE + 2))
  46:Inc/utils.hpp **** 
  47:Inc/utils.hpp **** /**
  48:Inc/utils.hpp **** * "Returns" the Flash size
  49:Inc/utils.hpp **** *
  50:Inc/utils.hpp **** * Returned data is in 16-bit mode, returned value is flash size in kB (kilo bytes).
  51:Inc/utils.hpp **** */
  52:Inc/utils.hpp **** #define STM_ID_GetFlashSize() (*(uint16_t *)(ID_FLASH_ADDRESS))
  53:Inc/utils.hpp **** 
  54:Inc/utils.hpp **** #ifdef M_PI
  55:Inc/utils.hpp **** #undef M_PI
  56:Inc/utils.hpp **** #endif
  57:Inc/utils.hpp **** #define M_PI (3.14159265358979323846f)
  58:Inc/utils.hpp **** 
  59:Inc/utils.hpp **** #define MACRO_MAX(x, y) (((x) > (y)) ? (x) : (y))
  60:Inc/utils.hpp **** #define MACRO_MIN(x, y) (((x) < (y)) ? (x) : (y))
  61:Inc/utils.hpp **** 
  62:Inc/utils.hpp **** #define SQ(x) ((x) * (x))
  63:Inc/utils.hpp **** 
  64:Inc/utils.hpp **** #ifdef __cplusplus
  65:Inc/utils.hpp **** 
  66:Inc/utils.hpp **** #include <array>
  67:Inc/utils.hpp **** 
  68:Inc/utils.hpp **** /**
  69:Inc/utils.hpp ****  * @brief Small helper to make array with known size
  70:Inc/utils.hpp ****  * in contrast to initializer lists the number of arguments
  71:Inc/utils.hpp ****  * has to match exactly. Whereas initializer lists allow
  72:Inc/utils.hpp ****  * less arguments.
  73:Inc/utils.hpp ****  */
  74:Inc/utils.hpp **** template<class T, class... Tail>
ARM GAS  /tmp/ccoPBaGE.s 			page 57


  75:Inc/utils.hpp **** std::array<T, 1 + sizeof...(Tail)> make_array(T head, Tail... tail)
  76:Inc/utils.hpp **** {
  77:Inc/utils.hpp ****     return std::array<T, 1 + sizeof...(Tail)>({ head, tail ... });
  78:Inc/utils.hpp **** }
  79:Inc/utils.hpp **** 
  80:Inc/utils.hpp **** extern "C" {
  81:Inc/utils.hpp **** #endif
  82:Inc/utils.hpp **** 
  83:Inc/utils.hpp **** static const float one_by_sqrt3 = 0.57735026919f;
  84:Inc/utils.hpp **** static const float two_by_sqrt3 = 1.15470053838f;
  85:Inc/utils.hpp **** static const float sqrt3_by_2 = 0.86602540378f;
  86:Inc/utils.hpp **** 
  87:Inc/utils.hpp **** // like fmodf, but always positive
  88:Inc/utils.hpp **** static inline float fmodf_pos(float x, float y) {
  89:Inc/utils.hpp ****     float out = fmodf(x, y);
  90:Inc/utils.hpp ****     if (out < 0.0f)
  91:Inc/utils.hpp ****         out += y;
  92:Inc/utils.hpp ****     return out;
  93:Inc/utils.hpp **** }
  94:Inc/utils.hpp **** 
  95:Inc/utils.hpp **** /**
  96:Inc/utils.hpp ****  * @brief Similar to modulo operator, except that the output range is centered
  97:Inc/utils.hpp ****  * around zero.
  98:Inc/utils.hpp ****  * The returned value is always in the range [-pm_range, pm_range).
  99:Inc/utils.hpp ****  */
 100:Inc/utils.hpp **** static inline float wrap_pm(float x, float pm_range) {
 101:Inc/utils.hpp ****     return fmodf_pos(x + pm_range, 2.0f * pm_range) - pm_range;
 102:Inc/utils.hpp **** }
 103:Inc/utils.hpp **** 
 104:Inc/utils.hpp **** static inline float wrap_pm_pi(float theta) {
 1381              		.loc 8 104 21 is_stmt 1 view .LVU363
 1382              	.LBE944:
 1383              	.LBE923:
 105:Inc/utils.hpp ****     return wrap_pm(theta, M_PI);
 1384              		.loc 8 105 5 view .LVU364
 1385              	.LBB1052:
 1386              	.LBB953:
 1387              	.LBB945:
 1388              	.LBI945:
 100:Inc/utils.hpp ****     return fmodf_pos(x + pm_range, 2.0f * pm_range) - pm_range;
 1389              		.loc 8 100 21 view .LVU365
 1390              	.LBB946:
 101:Inc/utils.hpp **** }
 1391              		.loc 8 101 5 view .LVU366
 1392              	.LBB947:
 1393              	.LBI947:
  88:Inc/utils.hpp ****     float out = fmodf(x, y);
 1394              		.loc 8 88 21 view .LVU367
 1395              	.LBB948:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 1396              		.loc 8 89 5 view .LVU368
 1397              	.LBE948:
 1398              	.LBE947:
 1399              	.LBE946:
 1400              	.LBE945:
 1401              	.LBE953:
 1402              		.loc 1 229 116 is_stmt 0 view .LVU369
ARM GAS  /tmp/ccoPBaGE.s 			page 58


 1403 008e 4368     		ldr	r3, [r0, #4]
 1404              		.loc 1 229 136 view .LVU370
 1405 0090 D3ED077A 		vldr.32	s15, [r3, #28]
 1406              	.LVL83:
 1407              		.loc 1 229 136 view .LVU371
 1408 0094 B6EE007A 		vmov.f32	s14, #5.0e-1
 1409 0098 67EE877A 		vmul.f32	s15, s15, s14
 1410              		.loc 1 229 103 view .LVU372
 1411 009c 30EE670A 		vsub.f32	s0, s0, s15
 1412              	.LBB954:
 1413              	.LBB952:
 1414              	.LBB951:
 1415              	.LBB950:
 1416              	.LBB949:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 1417              		.loc 8 89 22 view .LVU373
 1418 00a0 DFEDB80A 		vldr.32	s1, .L93+4
 1419 00a4 DFEDB87A 		vldr.32	s15, .L93+8
 1420 00a8 30EE270A 		vadd.f32	s0, s0, s15
 1421 00ac FFF7FEFF 		bl	fmodf
 1422              	.LVL84:
  90:Inc/utils.hpp ****         out += y;
 1423              		.loc 8 90 5 is_stmt 1 view .LVU374
 1424 00b0 B5EEC00A 		vcmpe.f32	s0, #0
 1425 00b4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  91:Inc/utils.hpp ****     return out;
 1426              		.loc 8 91 9 view .LVU375
  91:Inc/utils.hpp ****     return out;
 1427              		.loc 8 91 13 is_stmt 0 view .LVU376
 1428 00b8 44BF     		itt	mi
 1429 00ba DFEDB27A 		vldrmi.32	s15, .L93+4
 1430 00be 30EE270A 		vaddmi.f32	s0, s0, s15
 1431              	.LVL85:
  92:Inc/utils.hpp **** }
 1432              		.loc 8 92 5 is_stmt 1 view .LVU377
  92:Inc/utils.hpp **** }
 1433              		.loc 8 92 5 is_stmt 0 view .LVU378
 1434              	.LBE949:
 1435              	.LBE950:
 101:Inc/utils.hpp **** }
 1436              		.loc 8 101 55 view .LVU379
 1437 00c2 DFEDB17A 		vldr.32	s15, .L93+8
 1438 00c6 30EE670A 		vsub.f32	s0, s0, s15
 1439              	.LVL86:
 101:Inc/utils.hpp **** }
 1440              		.loc 8 101 55 view .LVU380
 1441              	.LBE951:
 1442              	.LBE952:
 1443              	.LBE954:
 1444              		.loc 1 229 45 view .LVU381
 1445 00ca 86ED0B0A 		vstr.32	s0, [r6, #44]
 1446              		.loc 1 229 9 view .LVU382
 1447 00ce A368     		ldr	r3, [r4, #8]
 1448              	.LVL87:
 1449              	.LBB955:
 1450              	.LBI955:
  52:Inc/component.hpp ****         content_ = value;
ARM GAS  /tmp/ccoPBaGE.s 			page 59


 1451              		.loc 2 52 10 is_stmt 1 view .LVU383
 1452              	.LBB956:
  53:Inc/component.hpp ****         age_ = 0;
 1453              		.loc 2 53 18 is_stmt 0 view .LVU384
 1454 00d0 83ED140A 		vstr.32	s0, [r3, #80]
 1455              		.loc 2 54 14 view .LVU385
 1456 00d4 0022     		movs	r2, #0
 1457 00d6 DA64     		str	r2, [r3, #76]
 1458              	.LVL88:
 1459              		.loc 2 54 14 view .LVU386
 1460              	.LBE956:
 1461              	.LBE955:
 230:Src/encoder.cpp **** 
 231:Src/encoder.cpp ****         axis_->motor_.current_control_.enable_current_control_src_ = (axis_->motor_.config_.motor_t
 1462              		.loc 1 231 9 is_stmt 1 view .LVU387
 1463              		.loc 1 231 78 is_stmt 0 view .LVU388
 1464 00d8 A368     		ldr	r3, [r4, #8]
 1465 00da DA6E     		ldr	r2, [r3, #108]
 1466              		.loc 1 231 93 view .LVU389
 1467 00dc 5368     		ldr	r3, [r2, #4]
 1468              		.loc 1 231 104 view .LVU390
 1469 00de 93F82830 		ldrb	r3, [r3, #40]	@ zero_extendqisi2
 1470 00e2 023B     		subs	r3, r3, #2
 1471 00e4 18BF     		it	ne
 1472 00e6 0123     		movne	r3, #1
 1473 00e8 82F81433 		strb	r3, [r2, #788]
 232:Src/encoder.cpp ****         axis_->motor_.current_control_.Idq_setpoint_src_.connect_to(&axis_->open_loop_controller_.I
 1474              		.loc 1 232 9 is_stmt 1 view .LVU391
 1475 00ec A368     		ldr	r3, [r4, #8]
 1476              		.loc 1 232 16 is_stmt 0 view .LVU392
 1477 00ee DA6E     		ldr	r2, [r3, #108]
 1478              		.loc 1 232 68 view .LVU393
 1479 00f0 3433     		adds	r3, r3, #52
 1480              	.LVL89:
 1481              	.LBB957:
 1482              	.LBI957:
  55:Inc/component.hpp ****     }
  56:Inc/component.hpp **** 
  57:Inc/component.hpp ****     /**
  58:Inc/component.hpp ****      * @brief Marks the contained value as outdated. The value is not actually
  59:Inc/component.hpp ****      * deleted and can still be accessed through some of the member functions
  60:Inc/component.hpp ****      * of this class.
  61:Inc/component.hpp ****      */
  62:Inc/component.hpp ****     void reset() {
  63:Inc/component.hpp ****         // This will eventually overflow to 0 so present() could
  64:Inc/component.hpp ****         // theoretically return a very old value however it is very likely that
  65:Inc/component.hpp ****         // the motor will be long disarmed by then.
  66:Inc/component.hpp ****         age_++;
  67:Inc/component.hpp ****     }
  68:Inc/component.hpp **** 
  69:Inc/component.hpp ****     /**
  70:Inc/component.hpp ****      * @brief Returns the value from this control loop iteration or std::nullopt
  71:Inc/component.hpp ****      * if the value was not yet set during this control loop iteration.
  72:Inc/component.hpp ****      */
  73:Inc/component.hpp ****     std::optional<T> present() {
  74:Inc/component.hpp ****         if (age_ == 0) {
  75:Inc/component.hpp ****             return content_;
ARM GAS  /tmp/ccoPBaGE.s 			page 60


  76:Inc/component.hpp ****         } else {
  77:Inc/component.hpp ****             return std::nullopt;
  78:Inc/component.hpp ****         }
  79:Inc/component.hpp ****     }
  80:Inc/component.hpp **** 
  81:Inc/component.hpp ****     /**
  82:Inc/component.hpp ****      * @brief Returns the value from exactly the previous control loop iteration.
  83:Inc/component.hpp ****      * 
  84:Inc/component.hpp ****      * If during the last iteration no value was set or the value was already
  85:Inc/component.hpp ****      * overwritten during this control loop iteration then this function returns
  86:Inc/component.hpp ****      * std::nullopt.
  87:Inc/component.hpp ****      */
  88:Inc/component.hpp ****     std::optional<T> previous() {
  89:Inc/component.hpp ****         if (age_ == 1) {
  90:Inc/component.hpp ****             return content_;
  91:Inc/component.hpp ****         } else {
  92:Inc/component.hpp ****             return std::nullopt;
  93:Inc/component.hpp ****         }
  94:Inc/component.hpp ****     }
  95:Inc/component.hpp **** 
  96:Inc/component.hpp ****     /**
  97:Inc/component.hpp ****      * @brief Returns the value contained in this output port with disregard of
  98:Inc/component.hpp ****      * when the value was set.
  99:Inc/component.hpp ****      * 
 100:Inc/component.hpp ****      * This function is thread-safe if load/store operations of T are atomic.
 101:Inc/component.hpp ****      */
 102:Inc/component.hpp ****     std::optional<T> any() {
 103:Inc/component.hpp ****         return content_;
 104:Inc/component.hpp ****     }
 105:Inc/component.hpp ****     
 106:Inc/component.hpp **** private:
 107:Inc/component.hpp ****     uint32_t age_ = 2; // Age in number of control loop iterations
 108:Inc/component.hpp ****     T content_;
 109:Inc/component.hpp **** };
 110:Inc/component.hpp **** 
 111:Inc/component.hpp **** /**
 112:Inc/component.hpp ****  * @brief An input port provides a value from the source to which it's configured.
 113:Inc/component.hpp ****  * 
 114:Inc/component.hpp ****  * The source can be one of:
 115:Inc/component.hpp ****  *  - an internally stored value
 116:Inc/component.hpp ****  *  - an externally stored value (referenced by a pointer)
 117:Inc/component.hpp ****  *  - an external OutputPort (referenced by a pointer)
 118:Inc/component.hpp ****  *  - none (all queries will return std::nullopt)
 119:Inc/component.hpp ****  * 
 120:Inc/component.hpp ****  * Member functions of this class are not thread-safe unless otherwise noted.
 121:Inc/component.hpp ****  */
 122:Inc/component.hpp **** template<typename T>
 123:Inc/component.hpp **** class InputPort {
 124:Inc/component.hpp **** public:
 125:Inc/component.hpp ****     void connect_to(OutputPort<T>* input_port) {
 1483              		.loc 2 125 10 is_stmt 1 view .LVU394
 1484              	.LBB958:
 1485              	.LBI958:
 1486              		.file 9 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // <variant> -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // Copyright (C) 2016-2020 Free Software Foundation, Inc.
ARM GAS  /tmp/ccoPBaGE.s 			page 61


   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** /** @file variant
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****  *  This is the <variant> C++ Library header.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****  */
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #ifndef _GLIBCXX_VARIANT
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define _GLIBCXX_VARIANT 1
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #pragma GCC system_header
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #if __cplusplus >= 201703L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <type_traits>
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <utility>
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/enable_special_members.h>
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/functexcept.h>
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/move.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/functional_hash.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/invoke.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <ext/aligned_buffer.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/parse_numbers.h>
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/stl_iterator_base_types.h>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/stl_iterator_base_funcs.h>
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #include <bits/stl_construct.h>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #if __cplusplus > 201703L
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** # include <compare>
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #endif
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __detail
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __variant
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
ARM GAS  /tmp/ccoPBaGE.s 			page 62


  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Nth_type;
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _First, typename... _Rest>
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Nth_type<_Np, _First, _Rest...>
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _Nth_type<_Np-1, _Rest...> { };
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _First, typename... _Rest>
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Nth_type<0, _First, _Rest...>
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = _First; };
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __variant
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __detail
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define __cpp_lib_variant 201606L
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types> class tuple;
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types> class variant;
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename> struct hash;
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size;
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<const _Variant> : variant_size<_Variant> {};
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<volatile _Variant> : variant_size<_Variant> {};
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<const volatile _Variant> : variant_size<_Variant> {};
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_size<variant<_Types...>>
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : std::integral_constant<size_t, sizeof...(_Types)> {};
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr size_t variant_size_v = variant_size<_Variant>::value;
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative;
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _First, typename... _Rest>
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, variant<_First, _Rest...>>
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : variant_alternative<_Np-1, variant<_Rest...>> {};
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _First, typename... _Rest>
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<0, variant<_First, _Rest...>>
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = _First; };
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using variant_alternative_t =
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       typename variant_alternative<_Np, _Variant>::type;
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, const _Variant>
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = add_const_t<variant_alternative_t<_Np, _Variant>>; };
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 63


 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, volatile _Variant>
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = add_volatile_t<variant_alternative_t<_Np, _Variant>>; };
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct variant_alternative<_Np, const volatile _Variant>
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { using type = add_cv_t<variant_alternative_t<_Np, _Variant>>; };
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   inline constexpr size_t variant_npos = -1;
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(variant<_Types...>&);
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&&
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(variant<_Types...>&&);
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>> const&
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(const variant<_Types...>&);
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>> const&&
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get(const variant<_Types...>&&);
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants>
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __do_visit(_Visitor&& __visitor, _Variants&&... __variants);
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename... _Types, typename _Tp>
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     decltype(auto)
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __variant_cast(_Tp&& __rhs)
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if constexpr (is_lvalue_reference_v<_Tp>)
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (is_const_v<remove_reference_t<_Tp>>)
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return static_cast<const variant<_Types...>&>(__rhs);
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return static_cast<variant<_Types...>&>(__rhs);
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       else
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         return static_cast<variant<_Types...>&&>(__rhs);
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __detail
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** namespace __variant
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** {
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns the first appearence of _Tp in _Types.
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns sizeof...(_Types) if _Tp is not in _Types.
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __index_of : std::integral_constant<size_t, 0> {};
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr size_t __index_of_v = __index_of<_Tp, _Types...>::value;
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 64


 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _First, typename... _Rest>
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __index_of<_Tp, _First, _Rest...> :
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       std::integral_constant<size_t, is_same_v<_Tp, _First>
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	? 0 : __index_of_v<_Tp, _Rest...> + 1> {};
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // used for raw visitation
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   struct __variant_cookie {};
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // used for raw visitation with indices passed in
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   struct __variant_idx_cookie { using type = __variant_idx_cookie; };
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Used to enable deduction (and same-type checking) for std::visit:
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename> struct __deduce_visit_result { };
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Visit variants that might be valueless.
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Visitor, typename... _Variants>
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr void
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __raw_visit(_Visitor&& __visitor, _Variants&&... __variants)
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       std::__do_visit<__variant_cookie>(std::forward<_Visitor>(__visitor),
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				        std::forward<_Variants>(__variants)...);
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Visit variants that might be valueless, passing indices to the visitor.
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Visitor, typename... _Variants>
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr void
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __raw_idx_visit(_Visitor&& __visitor, _Variants&&... __variants)
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       std::__do_visit<__variant_idx_cookie>(std::forward<_Visitor>(__visitor),
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  std::forward<_Variants>(__variants)...);
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // _Uninitialized<T> is guaranteed to be a trivially destructible type,
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // even if T is not.
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Type, bool = std::is_trivially_destructible_v<_Type>>
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Uninitialized;
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Type>
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Uninitialized<_Type, true>
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr const _Type& _M_get() const & noexcept
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr _Type& _M_get() & noexcept
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_storage; }
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr const _Type&& _M_get() const && noexcept
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(_M_storage); }
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr _Type&& _M_get() && noexcept
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(_M_storage); }
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Type _M_storage;
ARM GAS  /tmp/ccoPBaGE.s 			page 65


 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Type>
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Uninitialized<_Type, false>
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  ::new ((void*)std::addressof(_M_storage))
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    _Type(std::forward<_Args>(__args)...);
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       const _Type& _M_get() const & noexcept
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return *_M_storage._M_ptr(); }
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Type& _M_get() & noexcept
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return *_M_storage._M_ptr(); }
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       const _Type&& _M_get() const && noexcept
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(*_M_storage._M_ptr()); }
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Type&& _M_get() && noexcept
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return std::move(*_M_storage._M_ptr()); }
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __gnu_cxx::__aligned_membuf<_Type> _M_storage;
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Union>
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __get(in_place_index_t<0>, _Union&& __u) noexcept
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Union>
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __variant::__get(in_place_index<_Np-1>,
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns the typed storage for __v.
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant>
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto)
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     __get(_Variant&& __v) noexcept
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __variant::__get(std::in_place_index<_Np>,
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::forward<_Variant>(__v)._M_u);
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Traits
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_default_ctor =
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  is_default_constructible_v<typename _Nth_type<0, _Types...>::type>;
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_copy_ctor =
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_copy_constructible_v<_Types> && ...);
ARM GAS  /tmp/ccoPBaGE.s 			page 66


 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_move_ctor =
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_move_constructible_v<_Types> && ...);
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_copy_assign =
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_copy_ctor
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_copy_assignable_v<_Types> && ...);
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_move_assign =
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_move_ctor
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_move_assignable_v<_Types> && ...);
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_dtor =
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_trivially_destructible_v<_Types> && ...);
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_copy_ctor =
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_trivially_copy_constructible_v<_Types> && ...);
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_move_ctor =
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_trivially_move_constructible_v<_Types> && ...);
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_copy_assign =
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_trivial_dtor && _S_trivial_copy_ctor
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_trivially_copy_assignable_v<_Types> && ...);
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_trivial_move_assign =
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_trivial_dtor && _S_trivial_move_ctor
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_trivially_move_assignable_v<_Types> && ...);
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // The following nothrow traits are for non-trivial SMFs. Trivial SMFs
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // are always nothrow.
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_default_ctor =
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  is_nothrow_default_constructible_v<
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      typename _Nth_type<0, _Types...>::type>;
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_copy_ctor = false;
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_move_ctor =
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (is_nothrow_move_constructible_v<_Types> && ...);
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_copy_assign = false;
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool _S_nothrow_move_assign =
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _S_nothrow_move_ctor
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  && (is_nothrow_move_assignable_v<_Types> && ...);
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Defines members and ctors.
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     union _Variadic_union { };
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _First, typename... _Rest>
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     union _Variadic_union<_First, _Rest...>
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr _Variadic_union() : _M_rest() { }
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Uninitialized<_First> _M_first;
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variadic_union<_Rest...> _M_rest;
ARM GAS  /tmp/ccoPBaGE.s 			page 67


 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // _Never_valueless_alt is true for variant alternatives that can
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // always be placed in a variant without it becoming valueless.
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // For suitably-small, trivially copyable types we can create temporaries
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // on the stack and then memcpy them into place.
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp>
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Never_valueless_alt
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : __and_<bool_constant<sizeof(_Tp) <= 256>, is_trivially_copyable<_Tp>>
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { };
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Specialize _Never_valueless_alt for other types which have a
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // non-throwing and cheap move construction and move assignment operator,
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // so that emplacing the type will provide the strong exception-safety
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // guarantee, by creating and moving a temporary.
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Whether _Never_valueless_alt<T> is true or not affects the ABI of a
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // variant using that alternative, so we can't change the value later!
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // True if every alternative in _Types... can be emplaced in a variant
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // without it becoming valueless. If this is true, variant<_Types...>
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // can never be valueless, which enables some minor optimizations.
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename... _Types>
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr bool __never_valueless()
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return _Traits<_Types...>::_S_move_assign
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	&& (_Never_valueless_alt<_Types>::value && ...);
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Defines index and the dtor, possibly trivial.
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool __trivially_destructible, typename... _Types>
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_storage;
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename... _Types>
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using __select_index =
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       typename __select_int::_Select_int_base<sizeof...(_Types),
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					      unsigned char,
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					      unsigned short>::type::value_type;
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_storage<false, _Types...>
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_storage()
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       : _M_index(static_cast<__index_type>(variant_npos))
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { }
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_index{_Np}
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void _M_reset()
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if (!_M_valid()) [[unlikely]]
ARM GAS  /tmp/ccoPBaGE.s 			page 68


 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return;
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::__do_visit<void>([](auto&& __this_mem) mutable
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::_Destroy(std::__addressof(__this_mem));
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __variant_cast<_Types...>(*this));
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_index = static_cast<__index_type>(variant_npos);
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ~_Variant_storage()
 414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { _M_reset(); }
 415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void*
 417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_storage() const noexcept
 418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return const_cast<void*>(static_cast<const void*>(
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::addressof(_M_u)));
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr bool
 424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_valid() const noexcept
 425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (__variant::__never_valueless<_Types...>())
 427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return true;
 428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return this->_M_index != __index_type(variant_npos);
 429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variadic_union<_Types...> _M_u;
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using __index_type = __select_index<_Types...>;
 433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __index_type _M_index;
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_storage<true, _Types...>
 438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr
 440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_storage()
 441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       : _M_index(static_cast<__index_type>(variant_npos))
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { }
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_index{_Np}
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void _M_reset() noexcept
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { _M_index = static_cast<__index_type>(variant_npos); }
 453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void*
 455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_storage() const noexcept
 456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return const_cast<void*>(static_cast<const void*>(
 458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::addressof(_M_u)));
 459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
ARM GAS  /tmp/ccoPBaGE.s 			page 69


 460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr bool
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_valid() const noexcept
 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (__variant::__never_valueless<_Types...>())
 465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return true;
 466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return this->_M_index != static_cast<__index_type>(variant_npos);
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variadic_union<_Types...> _M_u;
 470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using __index_type = __select_index<_Types...>;
 471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __index_type _M_index;
 472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Variant_storage_alias =
 476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_storage<_Traits<_Types...>::_S_trivial_dtor, _Types...>;
 477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Up>
 479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void* __storage = std::addressof(__lhs._M_u);
 482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Type = remove_reference_t<decltype(__rhs_mem)>;
 483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if constexpr (!is_same_v<_Type, __variant_cookie>)
 484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         ::new (__storage)
 485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types, typename _Tp, typename _Up>
 489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void __variant_construct(_Tp&& __lhs, _Up&& __rhs)
 490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __lhs._M_index = __rhs._M_index;
 492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
 493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(std::forward<_Tp>(__lhs),
 495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      std::forward<decltype(__rhs_mem)>(__rhs_mem));
 496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}, __variant_cast<_Types...>(std::forward<_Up>(__rhs)));
 497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
 498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The following are (Copy|Move) (ctor|assign) layers for forwarding
 500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // triviality and handling non-trivial SMF behaviors.
 501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
 504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Variant_storage_alias<_Types...>;
 506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base(const _Copy_ctor_base& __rhs)
 509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_copy_ctor)
 510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant_construct<_Types...>(*this, __rhs);
 512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base(_Copy_ctor_base&&) = default;
 515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base& operator=(const _Copy_ctor_base&) = default;
 516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_ctor_base& operator=(_Copy_ctor_base&&) = default;
ARM GAS  /tmp/ccoPBaGE.s 			page 70


 517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_ctor_base<true, _Types...> : _Variant_storage_alias<_Types...>
 521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Variant_storage_alias<_Types...>;
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Copy_ctor_alias =
 528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Copy_ctor_base<_Traits<_Types...>::_S_trivial_copy_ctor, _Types...>;
 529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
 532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_ctor_alias<_Types...>;
 534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base(_Move_ctor_base&& __rhs)
 537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_move_ctor)
 538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant_construct<_Types...>(*this, std::move(__rhs));
 540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
 544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, std::forward<_Up>(__rhs));
 547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, __rhs);
 555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base(const _Move_ctor_base&) = default;
 559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base& operator=(const _Move_ctor_base&) = default;
 560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_ctor_base& operator=(_Move_ctor_base&&) = default;
 561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_ctor_base<true, _Types...> : _Copy_ctor_alias<_Types...>
 565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_ctor_alias<_Types...>;
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
 571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, std::forward<_Up>(__rhs));
ARM GAS  /tmp/ccoPBaGE.s 			page 71


 574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Up>
 578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_reset();
 581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __variant_construct_single(*this, __rhs);
 582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  this->_M_index = __rhs_index;
 583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Move_ctor_alias =
 588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Move_ctor_base<_Traits<_Types...>::_S_trivial_move_ctor, _Types...>;
 589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_assign_base : _Move_ctor_alias<_Types...>
 592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Move_ctor_alias<_Types...>;
 594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base&
 597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       operator=(const _Copy_assign_base& __rhs)
 598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_copy_assign)
 599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant::__raw_idx_visit(
 601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
 604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
 605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (this->_M_index == __rhs_index)
 606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		else
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  {
 609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    using __rhs_type = __remove_cvref_t<decltype(__rhs_mem)>;
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    if constexpr (is_nothrow_copy_constructible_v<__rhs_type>
 611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			|| !is_nothrow_move_constructible_v<__rhs_type>)
 612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // The standard says this->emplace<__rhs_type>(__rhs_mem)
 613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // should be used here, but _M_destructive_copy is
 614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // equivalent in this case. Either copy construction
 615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // doesn't throw, so _M_destructive_copy gives strong
 616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // exception safety guarantee, or both copy construction
 617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // and move construction can throw, so emplace only gives
 618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      // basic exception safety anyway.
 619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      this->_M_destructive_copy(__rhs_index, __rhs_mem);
 620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    else
 621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      __variant_cast<_Types...>(*this)
 622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			= variant<_Types...>(std::in_place_index<__rhs_index>,
 623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					     __rhs_mem);
 624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  }
 625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
 626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    else
 627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
 628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __variant_cast<_Types...>(__rhs));
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return *this;
 630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
ARM GAS  /tmp/ccoPBaGE.s 			page 72


 631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base(const _Copy_assign_base&) = default;
 633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base(_Copy_assign_base&&) = default;
 634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base& operator=(_Copy_assign_base&&) = default;
 635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Copy_assign_base<true, _Types...> : _Move_ctor_alias<_Types...>
 639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Move_ctor_alias<_Types...>;
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Copy_assign_alias =
 646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Copy_assign_base<_Traits<_Types...>::_S_trivial_copy_assign, _Types...>;
 647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<bool, typename... _Types>
 649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_assign_base : _Copy_assign_alias<_Types...>
 650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_assign_alias<_Types...>;
 652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base&
 655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       operator=(_Move_assign_base&& __rhs)
 656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_move_assign)
 657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__variant::__raw_idx_visit(
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  {
 661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
 662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      {
 663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		if (this->_M_index == __rhs_index)
 664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		else
 666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant_cast<_Types...>(*this)
 667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      }
 669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    else
 670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
 671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  }, __variant_cast<_Types...>(__rhs));
 672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return *this;
 673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base(const _Move_assign_base&) = default;
 676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base(_Move_assign_base&&) = default;
 677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base& operator=(const _Move_assign_base&) = default;
 678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Move_assign_base<true, _Types...> : _Copy_assign_alias<_Types...>
 682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Copy_assign_alias<_Types...>;
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base::_Base;
 685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
ARM GAS  /tmp/ccoPBaGE.s 			page 73


 688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _Move_assign_alias =
 689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Move_assign_base<_Traits<_Types...>::_S_trivial_move_assign, _Types...>;
 690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
 692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_base : _Move_assign_alias<_Types...>
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = _Move_assign_alias<_Types...>;
 695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base()
 698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       : _Variant_base(in_place_index<0>) { }
 700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
 706:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 707:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base(const _Variant_base&) = default;
 708:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base(_Variant_base&&) = default;
 709:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base& operator=(const _Variant_base&) = default;
 710:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Variant_base& operator=(_Variant_base&&) = default;
 711:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 712:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 713:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // For how many times does _Tp appear in _Tuple?
 714:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Tuple>
 715:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __tuple_count;
 716:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 717:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Tuple>
 718:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr size_t __tuple_count_v =
 719:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __tuple_count<_Tp, _Tuple>::value;
 720:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 721:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 722:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __tuple_count<_Tp, tuple<_Types...>>
 723:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : integral_constant<size_t, 0> { };
 724:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 725:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _First, typename... _Rest>
 726:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __tuple_count<_Tp, tuple<_First, _Rest...>>
 727:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : integral_constant<
 728:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	size_t,
 729:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__tuple_count_v<_Tp, tuple<_Rest...>> + is_same_v<_Tp, _First>> { };
 730:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 731:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // TODO: Reuse this in <tuple> ?
 732:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
 733:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline constexpr bool __exactly_once =
 734:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __tuple_count_v<_Tp, tuple<_Types...>> == 1;
 735:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 736:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Helper used to check for valid conversions that don't involve narrowing.
 737:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Ti> struct _Arr { _Ti _M_x[1]; };
 738:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 739:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Build an imaginary function FUN(Ti) for each alternative type Ti
 740:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti,
 741:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   bool _Ti_is_cv_bool = is_same_v<remove_cv_t<_Ti>, bool>,
 742:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename = void>
 743:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUN
 744:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
ARM GAS  /tmp/ccoPBaGE.s 			page 74


 745:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // This function means 'using _Build_FUN<I, T, Ti>::_S_fun;' is valid,
 746:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // but only static functions will be considered in the call below.
 747:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       void _S_fun();
 748:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 749:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 750:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // ... for which Ti x[] = {std::forward<T>(t)}; is well-formed,
 751:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti>
 752:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUN<_Ind, _Tp, _Ti, false,
 753:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      void_t<decltype(_Arr<_Ti>{{std::declval<_Tp>()}})>>
 754:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 755:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // This is the FUN function for type _Ti, with index _Ind
 756:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static integral_constant<size_t, _Ind> _S_fun(_Ti);
 757:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 758:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 759:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // ... and if Ti is cv bool, remove_cvref_t<T> is bool.
 760:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti>
 761:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUN<_Ind, _Tp, _Ti, true,
 762:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		      enable_if_t<is_same_v<__remove_cvref_t<_Tp>, bool>>>
 763:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 764:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       // This is the FUN function for when _Ti is cv bool, with index _Ind
 765:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static integral_constant<size_t, _Ind> _S_fun(_Ti);
 766:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 767:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 768:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant,
 769:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename = make_index_sequence<variant_size_v<_Variant>>>
 770:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUNs;
 771:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 772:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Ti, size_t... _Ind>
 773:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Build_FUNs<_Tp, variant<_Ti...>, index_sequence<_Ind...>>
 774:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _Build_FUN<_Ind, _Tp, _Ti>...
 775:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Build_FUN<_Ind, _Tp, _Ti>::_S_fun...;
 777:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The index j of the overload FUN(Tj) selected by overload resolution
 780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // for FUN(std::forward<_Tp>(t))
 781:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant>
 782:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     using _FUN_type
 783:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       = decltype(_Build_FUNs<_Tp, _Variant>::_S_fun(std::declval<_Tp>()));
 784:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 785:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The index selected for FUN(std::forward<T>(t)), or variant_npos if none.
 786:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant, typename = void>
 787:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __accepted_index
 788:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : integral_constant<size_t, variant_npos>
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { };
 790:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename _Variant>
 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __accepted_index<_Tp, _Variant, void_t<_FUN_type<_Tp, _Variant>>>
 793:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _FUN_type<_Tp, _Variant>
 794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { };
 795:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Returns the raw storage for __v.
 797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant>
 798:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void* __get_storage(_Variant&& __v) noexcept
 799:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return __v._M_storage(); }
 800:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 801:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template <typename _Maybe_variant_cookie, typename _Variant>
ARM GAS  /tmp/ccoPBaGE.s 			page 75


 802:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Extra_visit_slot_needed
 803:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 804:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename> struct _Variant_never_valueless;
 805:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 806:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Types>
 807:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct _Variant_never_valueless<variant<_Types...>>
 808:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: bool_constant<__variant::__never_valueless<_Types...>()> {};
 809:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 810:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr bool value =
 811:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	(is_same_v<_Maybe_variant_cookie, __variant_cookie>
 812:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	 || is_same_v<_Maybe_variant_cookie, __variant_idx_cookie>)
 813:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	&& !_Variant_never_valueless<__remove_cvref_t<_Variant>>::value;
 814:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 815:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 816:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Used for storing a multi-dimensional vtable.
 817:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, size_t... _Dimensions>
 818:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Multi_array;
 819:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 820:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Partial specialization with rank zero, stores a single _Tp element.
 821:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp>
 822:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Multi_array<_Tp>
 823:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 824:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename>
 825:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result
 826:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 827:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = _Tp; };
 828:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 829:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Args>
 830:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<const void(*)(_Args...)>
 831:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 832:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = void(*)(_Args...); };
 833:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 834:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Args>
 835:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<__variant_cookie(*)(_Args...)>
 836:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 837:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = void(*)(_Args...); };
 838:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 839:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _Args>
 840:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<__variant_idx_cookie(*)(_Args...)>
 841:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: false_type
 842:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = void(*)(_Args...); };
 843:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 844:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename _Res, typename... _Args>
 845:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __untag_result<__deduce_visit_result<_Res>(*)(_Args...)>
 846:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: true_type
 847:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ using element_type = _Res(*)(_Args...); };
 848:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 849:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using __result_is_deduced = __untag_result<_Tp>;
 850:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 851:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr const typename __untag_result<_Tp>::element_type&
 852:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _M_access() const
 853:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _M_data; }
 854:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 855:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       typename __untag_result<_Tp>::element_type _M_data;
 856:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 857:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 858:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Partial specialization with rank >= 1.
ARM GAS  /tmp/ccoPBaGE.s 			page 76


 859:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Ret,
 860:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename _Visitor,
 861:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename... _Variants,
 862:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   size_t __first, size_t... __rest>
 863:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Multi_array<_Ret(*)(_Visitor, _Variants...), __first, __rest...>
 864:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 865:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr size_t __index =
 866:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	sizeof...(_Variants) - sizeof...(__rest) - 1;
 867:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 868:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Variant = typename _Nth_type<__index, _Variants...>::type;
 869:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 870:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr int __do_cookie =
 871:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Extra_visit_slot_needed<_Ret, _Variant>::value ? 1 : 0;
 872:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 873:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Tp = _Ret(*)(_Visitor, _Variants...);
 874:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 875:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename... _Args>
 876:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr decltype(auto)
 877:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_M_access(size_t __first_index, _Args... __rest_indices) const
 878:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 879:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return _M_arr[__first_index + __do_cookie]
 880:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    ._M_access(__rest_indices...);
 881:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 882:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 883:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Multi_array<_Tp, __rest...> _M_arr[__first + __do_cookie];
 884:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 885:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 886:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Creates a multi-dimensional vtable recursively.
 887:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //
 888:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // For example,
 889:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // visit([](auto, auto){},
 890:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //       variant<int, char>(),  // typedef'ed as V1
 891:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //       variant<float, double, long double>())  // typedef'ed as V2
 892:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // will trigger instantiations of:
 893:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 2, 3>,
 894:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                   tuple<V1&&, V2&&>, std::index_sequence<>>
 895:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //   __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 3>,
 896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                     tuple<V1&&, V2&&>, std::index_sequence<0>>
 897:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 898:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 0>>
 899:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 900:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 1>>
 901:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 902:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 2>>
 903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //   __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 3>,
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                     tuple<V1&&, V2&&>, std::index_sequence<1>>
 905:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 906:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 0>>
 907:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 1>>
 909:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 910:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 2>>
 911:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The returned multi-dimensional vtable can be fast accessed by the visitor
 912:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // using index calculation.
 913:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Array_type, typename _Index_seq>
 914:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable_impl;
 915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 77


 916:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Defines the _S_apply() member that returns a _Multi_array populated
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // with function pointers that perform the visitation expressions e(m)
 918:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // for each valid pack of indexes into the variant types _Variants.
 919:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   //
 920:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // This partial specialization builds up the index sequences by recursively
 921:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // calling _S_apply() on the next specialization of __gen_vtable_impl.
 922:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // The base case of the recursion defines the actual function pointers.
 923:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, size_t... __dimensions,
 924:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   typename... _Variants, size_t... __indices>
 925:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable_impl<
 926:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Multi_array<_Result_type (*)(_Visitor, _Variants...), __dimensions...>,
 927:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::index_sequence<__indices...>>
 928:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 929:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Next =
 930:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  remove_reference_t<typename _Nth_type<sizeof...(__indices),
 931:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			     _Variants...>::type>;
 932:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Array_type =
 933:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...),
 934:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		       __dimensions...>;
 935:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 936:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr _Array_type
 937:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _S_apply()
 938:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
 939:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Array_type __vtable{};
 940:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_S_apply_all_alts(
 941:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __vtable, make_index_sequence<variant_size_v<_Next>>());
 942:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return __vtable;
 943:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
 944:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 945:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t... __var_indices>
 946:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr void
 947:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_S_apply_all_alts(_Array_type& __vtable,
 948:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			  std::index_sequence<__var_indices...>)
 949:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 950:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (_Extra_visit_slot_needed<_Result_type, _Next>::value)
 951:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    (_S_apply_single_alt<true, __var_indices>(
 952:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __vtable._M_arr[__var_indices + 1],
 953:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      &(__vtable._M_arr[0])), ...);
 954:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
 955:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    (_S_apply_single_alt<false, __var_indices>(
 956:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __vtable._M_arr[__var_indices]), ...);
 957:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 958:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 959:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<bool __do_cookie, size_t __index, typename _Tp>
 960:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr void
 961:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_S_apply_single_alt(_Tp& __element, _Tp* __cookie_element = nullptr)
 962:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 963:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__do_cookie)
 964:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
 965:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element = __gen_vtable_impl<
 966:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Tp,
 967:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::index_sequence<__indices..., __index>>::_S_apply();
 968:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      *__cookie_element = __gen_vtable_impl<
 969:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Tp,
 970:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::index_sequence<__indices..., variant_npos>>::_S_apply();
 971:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
 972:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
ARM GAS  /tmp/ccoPBaGE.s 			page 78


 973:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
 974:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element = __gen_vtable_impl<
 975:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		remove_reference_t<decltype(__element)>,
 976:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::index_sequence<__indices..., __index>>::_S_apply();
 977:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
 978:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
 979:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
 980:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 981:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // This partial specialization is the base case for the recursion.
 982:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // It populates a _Multi_array element with the address of a function
 983:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // that invokes the visitor with the alternatives specified by __indices.
 984:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants,
 985:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	   size_t... __indices>
 986:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable_impl<
 987:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _Multi_array<_Result_type (*)(_Visitor, _Variants...)>,
 988:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		   std::index_sequence<__indices...>>
 989:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 990:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Array_type =
 991:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...)>;
 992:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
 993:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t __index, typename _Variant>
 994:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr decltype(auto)
 995:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__element_by_index_or_cookie(_Variant&& __var) noexcept
 996:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         {
 997:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__index != variant_npos)
 998:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 999:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1000:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    return __variant_cookie{};
1001:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1002:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1003:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr decltype(auto)
1004:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
1005:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       {
1006:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
1007:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // For raw visitation using indices, pass the indices to the visitor
1008:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // and discard the return value:
1009:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  std::__invoke(std::forward<_Visitor>(__visitor),
1010:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1011:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::forward<_Variants>(__vars))...,
1012:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      integral_constant<size_t, __indices>()...);
1013:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
1014:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // For raw visitation without indices, and discard the return value:
1015:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  std::__invoke(std::forward<_Visitor>(__visitor),
1016:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1017:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::forward<_Variants>(__vars))...);
1018:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else if constexpr (_Array_type::__result_is_deduced::value)
1019:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // For the usual std::visit case deduce the return value:
1020:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::__invoke(std::forward<_Visitor>(__visitor),
1021:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1022:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		std::forward<_Variants>(__vars))...);
1023:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	else // for std::visit<R> use INVOKE<R>
1024:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::__invoke_r<_Result_type>(
1025:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      std::forward<_Visitor>(__visitor),
1026:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
1027:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       }
1028:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1029:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr auto
ARM GAS  /tmp/ccoPBaGE.s 			page 79


1030:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       _S_apply()
1031:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return _Array_type{&__visit_invoke}; }
1032:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
1033:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1034:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants>
1035:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct __gen_vtable
1036:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1037:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Array_type =
1038:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...),
1039:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		       variant_size_v<remove_reference_t<_Variants>>...>;
1040:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1041:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static constexpr _Array_type _S_vtable
1042:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	= __gen_vtable_impl<_Array_type, std::index_sequence<>>::_S_apply();
1043:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     };
1044:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1045:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Tp>
1046:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Base_dedup : public _Tp { };
1047:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1048:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Variant, typename __indices>
1049:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_hash_base;
1050:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1051:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types, size_t... __indices>
1052:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     struct _Variant_hash_base<variant<_Types...>,
1053:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			      std::index_sequence<__indices...>>
1054:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : _Base_dedup<__indices, __poison_hash<remove_const_t<_Types>>>... { };
1055:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1056:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __variant
1057:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** } // namespace __detail
1058:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1059:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename _Variant, typename... _Args>
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
1061:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __v._M_index = _Np;
1063:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ::new ((void*)std::addressof(__storage))
1065:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
1066:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  (std::forward<_Args>(__args)...);
1067:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1068:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1069:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1070:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr bool
1071:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     holds_alternative(const variant<_Types...>& __v) noexcept
1072:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1073:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1074:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1075:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
1076:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1077:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1078:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1079:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr _Tp& get(variant<_Types...>& __v)
1080:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1081:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1082:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1083:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1084:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
1085:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1086:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 80


1087:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1088:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr _Tp&& get(variant<_Types...>&& __v)
1089:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1090:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1091:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1092:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1093:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1094:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::move(__v));
1095:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1096:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1097:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1098:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr const _Tp& get(const variant<_Types...>& __v)
1099:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
1104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr const _Tp&& get(const variant<_Types...>&& __v)
1108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	std::move(__v));
1114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
1117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr add_pointer_t<variant_alternative_t<_Np, variant<_Types...>>>
1118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(variant<_Types...>* __ptr) noexcept
1119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
1121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(_Np < sizeof...(_Types),
1122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "The index must be in [0, number of alternatives)");
1123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
1124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if (__ptr && __ptr->index() == _Np)
1125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
1126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return nullptr;
1127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<size_t _Np, typename... _Types>
1130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr
1131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     add_pointer_t<const variant_alternative_t<_Np, variant<_Types...>>>
1132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(const variant<_Types...>* __ptr) noexcept
1133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
1135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(_Np < sizeof...(_Types),
1136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "The index must be in [0, number of alternatives)");
1137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
1138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       if (__ptr && __ptr->index() == _Np)
1139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
1140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return nullptr;
1141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
ARM GAS  /tmp/ccoPBaGE.s 			page 81


1144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr add_pointer_t<_Tp>
1145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(variant<_Types...>* __ptr) noexcept
1146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __ptr);
1152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Tp, typename... _Types>
1155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr add_pointer_t<const _Tp>
1156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     get_if(const variant<_Types...>* __ptr) noexcept
1157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "T must occur exactly once in alternatives");
1160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __ptr);
1163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   struct monostate { };
1166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP, __NAME) \
1168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types> \
1169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr bool operator __OP(const variant<_Types...>& __lhs, \
1170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				 const variant<_Types...>& __rhs) \
1171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { \
1172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       bool __ret = true; \
1173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __detail::__variant::__raw_idx_visit( \
1174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         [&__ret, &__lhs] (auto&& __rhs_mem, auto __rhs_index) mutable \
1175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         { \
1176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__rhs_index != variant_npos) \
1177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    { \
1178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      if (__lhs.index() == __rhs_index) \
1179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	        { \
1180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  auto& __this_mem = std::get<__rhs_index>(__lhs);	\
1181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****                   __ret = __this_mem __OP __rhs_mem; \
1182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****                 } \
1183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      else \
1184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		__ret = (__lhs.index() + 1) __OP (__rhs_index + 1); \
1185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****             } \
1186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****           else \
1187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****             __ret = (__lhs.index() + 1) __OP (__rhs_index + 1); \
1188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}, __rhs); \
1189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __ret; \
1190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)
1193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)
1194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(==, equal)
1195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(!=, not_equal)
1196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(>=, greater_equal)
1197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(>, greater)
1198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #undef _VARIANT_RELATION_FUNCTION_TEMPLATE
1200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 82


1201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator==(monostate, monostate) noexcept { return true; }
1202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #ifdef __cpp_lib_three_way_comparison
1204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     requires (three_way_comparable<_Types> && ...)
1206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr
1207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     common_comparison_category_t<compare_three_way_result_t<_Types>...>
1208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     operator<=>(const variant<_Types...>& __v, const variant<_Types...>& __w)
1209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       common_comparison_category_t<compare_three_way_result_t<_Types>...> __ret
1211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	= strong_ordering::equal;
1212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __detail::__variant::__raw_idx_visit(
1214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	[&__ret, &__v] (auto&& __w_mem, auto __w_index) mutable
1215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (__w_index != variant_npos)
1217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      if (__v.index() == __w_index)
1219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  auto& __this_mem = std::get<__w_index>(__v);
1221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __ret = __this_mem <=> __w_mem;
1222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  return;
1223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __ret = (__v.index() + 1) <=> (__w_index + 1);
1226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}, __w);
1227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       return __ret;
1228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     }
1229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr strong_ordering
1231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   operator<=>(monostate, monostate) noexcept { return strong_ordering::equal; }
1232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #else
1233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator!=(monostate, monostate) noexcept { return false; }
1234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator<(monostate, monostate) noexcept { return false; }
1235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator>(monostate, monostate) noexcept { return false; }
1236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator<=(monostate, monostate) noexcept { return true; }
1237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   constexpr bool operator>=(monostate, monostate) noexcept { return true; }
1238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** #endif
1239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename _Visitor, typename... _Variants>
1241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     constexpr decltype(auto) visit(_Visitor&&, _Variants&&...);
1242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     inline enable_if_t<(is_move_constructible_v<_Types> && ...)
1245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			&& (is_swappable_v<_Types> && ...)>
1246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     swap(variant<_Types...>& __lhs, variant<_Types...>& __rhs)
1247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     noexcept(noexcept(__lhs.swap(__rhs)))
1248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { __lhs.swap(__rhs); }
1249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     enable_if_t<!((is_move_constructible_v<_Types> && ...)
1252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		   && (is_swappable_v<_Types> && ...))>
1253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     swap(variant<_Types...>&, variant<_Types...>&) = delete;
1254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   class bad_variant_access : public exception
1256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   {
1257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   public:
ARM GAS  /tmp/ccoPBaGE.s 			page 83


1258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     bad_variant_access() noexcept { }
1259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     const char* what() const noexcept override
1261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     { return _M_reason; }
1262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   private:
1264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     bad_variant_access(const char* __reason) noexcept : _M_reason(__reason) { }
1265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     // Must point to a string with static storage duration:
1267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     const char* _M_reason = "bad variant access";
1268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     friend void __throw_bad_variant_access(const char* __what);
1270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   };
1271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   // Must only be called with a string literal
1273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   inline void
1274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   __throw_bad_variant_access(const char* __what)
1275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
1276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   inline void
1278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   __throw_bad_variant_access(bool __valueless)
1279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   {
1280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     if (__valueless) [[__unlikely__]]
1281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __throw_bad_variant_access("std::get: variant is valueless");
1282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     else
1283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       __throw_bad_variant_access("std::get: wrong index for variant");
1284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   }
1285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****   template<typename... _Types>
1287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     class variant
1288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     : private __detail::__variant::_Variant_base<_Types...>,
1289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       private _Enable_default_constructor<
1290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_default_ctor,
1291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  variant<_Types...>>,
1292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       private _Enable_copy_move<
1293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_copy_ctor,
1294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_copy_assign,
1295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_move_ctor,
1296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_move_assign,
1297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant<_Types...>>
1298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
1299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     private:
1300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template <typename... _UTypes, typename _Tp>
1301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend decltype(auto) __variant_cast(_Tp&&);
1302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Variant, typename... _Args>
1303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	friend void __variant_construct_by_index(_Variant& __v,
1304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						 _Args&&... __args);
1305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(sizeof...(_Types) > 0,
1307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "variant must have at least one alternative");
1308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!(std::is_reference_v<_Types> || ...),
1309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "variant must have no reference alternative");
1310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       static_assert(!(std::is_void_v<_Types> || ...),
1311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    "variant must have no void alternative");
1312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Base = __detail::__variant::_Variant_base<_Types...>;
1314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Default_ctor_enabler =
ARM GAS  /tmp/ccoPBaGE.s 			page 84


1315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Enable_default_constructor<
1316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __detail::__variant::_Traits<_Types...>::_S_default_ctor,
1317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    variant<_Types...>>;
1318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr bool __not_self
1321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  = !is_same_v<__remove_cvref_t<_Tp>, variant>;
1322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr bool
1325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	__exactly_once = __detail::__variant::__exactly_once<_Tp, _Types...>;
1326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr size_t __accepted_index
1329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  = __detail::__variant::__accepted_index<_Tp, variant>::value;
1330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename = enable_if_t<(_Np < sizeof...(_Types))>>
1332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	using __to_type = variant_alternative_t<_Np, variant>;
1333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename = enable_if_t<__not_self<_Tp>>>
1335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	using __accepted_type = __to_type<__accepted_index<_Tp>>;
1336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr size_t __index_of =
1339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  __detail::__variant::__index_of_v<_Tp, _Types...>;
1340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       using _Traits = __detail::__variant::_Traits<_Types...>;
1342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __is_in_place_tag : false_type { };
1345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __is_in_place_tag<in_place_type_t<_Tp>> : true_type { };
1347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np>
1348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	struct __is_in_place_tag<in_place_index_t<_Np>> : true_type { };
1349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	static constexpr bool __not_in_place_tag
1352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  = !__is_in_place_tag<__remove_cvref_t<_Tp>>::value;
1353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     public:
1355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant() = default;
1356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant(const variant& __rhs) = default;
1357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant(variant&&) = default;
1358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant& operator=(const variant&) = default;
1359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       variant& operator=(variant&&) = default;
1360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       ~variant() = default;
1361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp,
1363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<sizeof...(_Types) != 0>,
1364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__not_in_place_tag<_Tp>>,
1365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename _Tj = __accepted_type<_Tp&&>,
1366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tj>
1367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				      && is_constructible_v<_Tj, _Tp>>>
1368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr
1369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(_Tp&& __t)
1370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	noexcept(is_nothrow_constructible_v<_Tj, _Tp>)
1371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: variant(in_place_index<__accepted_index<_Tp>>,
ARM GAS  /tmp/ccoPBaGE.s 			page 85


1372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Tp>(__t))
1373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename... _Args,
1376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tp>
1377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				      && is_constructible_v<_Tp, _Args...>>>
1378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_type_t<_Tp>, _Args&&... __args)
1380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: variant(in_place_index<__index_of<_Tp>>,
1381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...)
1382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename _Up, typename... _Args,
1385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tp>
1386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				      && is_constructible_v<_Tp,
1387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 					   initializer_list<_Up>&, _Args...>>>
1388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_type_t<_Tp>, initializer_list<_Up> __il,
1390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Args&&... __args)
1391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: variant(in_place_index<__index_of<_Tp>>, __il,
1392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...)
1393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args,
1396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename _Tp = __to_type<_Np>,
1397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<is_constructible_v<_Tp, _Args...>>>
1398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_index_t<_Np>, _Args&&... __args)
1400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(in_place_index<_Np>, std::forward<_Args>(__args)...),
1401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Default_ctor_enabler(_Enable_default_constructor_tag{})
1402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Up, typename... _Args,
1405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename _Tp = __to_type<_Np>,
1406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	       typename = enable_if_t<is_constructible_v<_Tp,
1407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 							 initializer_list<_Up>&,
1408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 							 _Args...>>>
1409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	constexpr explicit
1410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	variant(in_place_index_t<_Np>, initializer_list<_Up> __il,
1411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		_Args&&... __args)
1412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	: _Base(in_place_index<_Np>, __il, std::forward<_Args>(__args)...),
1413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	_Default_ctor_enabler(_Enable_default_constructor_tag{})
1414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{ }
1415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp>
1417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<__exactly_once<__accepted_type<_Tp&&>>
1418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    && is_constructible_v<__accepted_type<_Tp&&>, _Tp>
1419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    && is_assignable_v<__accepted_type<_Tp&&>&, _Tp>,
1420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    variant&>
1421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	operator=(_Tp&& __rhs)
 1487              		.loc 9 1421 2 view .LVU395
 1488              	.LBB959:
 1489              	.LBB960:
 1490              	.LBB961:
 1491              	.LBI961:
1422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	noexcept(is_nothrow_assignable_v<__accepted_type<_Tp&&>&, _Tp>
1423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		 && is_nothrow_constructible_v<__accepted_type<_Tp&&>, _Tp>)
ARM GAS  /tmp/ccoPBaGE.s 			page 86


1424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  constexpr auto __index = __accepted_index<_Tp>;
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if (index() == __index)
1427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
1428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      using _Tj = __accepted_type<_Tp&&>;
1431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      if constexpr (is_nothrow_constructible_v<_Tj, _Tp>
1432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			    || !is_nothrow_move_constructible_v<_Tj>)
1433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		this->emplace<__index>(std::forward<_Tp>(__rhs));
1434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      else
1435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		operator=(variant(std::forward<_Tp>(__rhs)));
1436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return *this;
1438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename... _Args>
1441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<_Tp, _Args...> && __exactly_once<_Tp>,
1442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    _Tp&>
1443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(_Args&&... __args)
1444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  constexpr size_t __index = __index_of<_Tp>;
1446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return this->emplace<__index>(std::forward<_Args>(__args)...);
1447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<typename _Tp, typename _Up, typename... _Args>
1450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>
1451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    && __exactly_once<_Tp>,
1452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    _Tp&>
1453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
1454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  constexpr size_t __index = __index_of<_Tp>;
1456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return this->emplace<__index>(__il, std::forward<_Args>(__args)...);
1457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename... _Args>
1460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,
1461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				       _Args...>,
1462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    variant_alternative_t<_Np, variant>&>
1463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(_Args&&... __args)
1464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  static_assert(_Np < sizeof...(_Types),
1466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			"The index must be in [0, number of alternatives)");
1467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  using type = variant_alternative_t<_Np, variant>;
1468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // Provide the strong exception-safety guarantee when possible,
1469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // to avoid becoming valueless.
1470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (is_nothrow_constructible_v<type, _Args...>)
1471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this,
1474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...);
1475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else if constexpr (is_scalar_v<type>)
1477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This might invoke a potentially-throwing conversion operator:
1479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      const type __tmp(std::forward<_Args>(__args)...);
1480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // But these steps won't throw:
ARM GAS  /tmp/ccoPBaGE.s 			page 87


1481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this, __tmp);
1483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
1485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      && _Traits::_S_move_assign)
1486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This construction might throw:
1488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      variant __tmp(in_place_index<_Np>,
1489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			    std::forward<_Args>(__args)...);
1490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // But _Never_valueless_alt<type> means this won't:
1491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      *this = std::move(__tmp);
1492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This case only provides the basic exception-safety guarantee,
1496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // i.e. the variant can become valueless.
1497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __try
1499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant_construct_by_index<_Np>(*this,
1501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    std::forward<_Args>(__args)...);
1502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __catch (...)
1504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  this->_M_index = variant_npos;
1506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __throw_exception_again;
1507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::get<_Np>(*this);
1510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       template<size_t _Np, typename _Up, typename... _Args>
1513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,
1514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 				       initializer_list<_Up>&, _Args...>,
1515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    variant_alternative_t<_Np, variant>&>
1516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
1517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
1518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  static_assert(_Np < sizeof...(_Types),
1519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			"The index must be in [0, number of alternatives)");
1520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  using type = variant_alternative_t<_Np, variant>;
1521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // Provide the strong exception-safety guarantee when possible,
1522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  // to avoid becoming valueless.
1523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  if constexpr (is_nothrow_constructible_v<type,
1524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						   initializer_list<_Up>&,
1525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 						   _Args...>)
1526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __variant_construct_by_index<_Np>(*this, __il,
1529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  std::forward<_Args>(__args)...);
1530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
1532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      && _Traits::_S_move_assign)
1533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This construction might throw:
1535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      variant __tmp(in_place_index<_Np>, __il,
1536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 			    std::forward<_Args>(__args)...);
1537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // But _Never_valueless_alt<type> means this won't:
ARM GAS  /tmp/ccoPBaGE.s 			page 88


1538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      *this = std::move(__tmp);
1539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  else
1541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    {
1542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // This case only provides the basic exception-safety guarantee,
1543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      // i.e. the variant can become valueless.
1544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      this->_M_reset();
1545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __try
1546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __variant_construct_by_index<_Np>(*this, __il,
1548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		    std::forward<_Args>(__args)...);
1549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	      __catch (...)
1551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		{
1552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  this->_M_index = variant_npos;
1553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		  __throw_exception_again;
1554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 		}
1555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    }
1556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	  return std::get<_Np>(*this);
1557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	}
1558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr bool valueless_by_exception() const noexcept
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       { return !this->_M_valid(); }
1561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       constexpr size_t index() const noexcept
 1492              		.loc 9 1562 24 view .LVU396
 1493              		.loc 9 1562 24 is_stmt 0 view .LVU397
 1494              	.LBE961:
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 1495              		.loc 9 1426 4 view .LVU398
 1496 00f2 92F82013 		ldrb	r1, [r2, #800]	@ zero_extendqisi2
 1497 00f6 0229     		cmp	r1, #2
 1498              	.LVL90:
 1499              	.LBB962:
 1500              	.LBB963:
 1501              	.LBI963:
1463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 1502              		.loc 9 1463 2 is_stmt 1 view .LVU399
 1503              	.LBB964:
 1504              	.LBB965:
 1505              	.LBI965:
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 1506              		.loc 9 1060 10 view .LVU400
 1507              	.LBB966:
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
 1508              		.loc 9 1062 20 is_stmt 0 view .LVU401
 1509 00f8 1CBF     		itt	ne
 1510 00fa 0221     		movne	r1, #2
 1511 00fc 82F82013 		strbne	r1, [r2, #800]
 1512              	.LVL91:
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
 1513              		.loc 9 1062 20 view .LVU402
 1514              	.LBE966:
 1515              	.LBE965:
 1516              	.LBE964:
 1517              	.LBE963:
 1518              	.LBE962:
ARM GAS  /tmp/ccoPBaGE.s 			page 89


 1519              	.LBE960:
 1520              	.LBE959:
 1521              	.LBE958:
 1522              	.LBE957:
 1523              	.LBE1052:
 1524              		.file 10 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // The -*- C++ -*- dynamic memory management header.
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // Copyright (C) 1994-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // This file is part of GCC.
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** //
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // GCC is free software; you can redistribute it and/or modify
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // it under the terms of the GNU General Public License as published by
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // any later version.
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // 
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // GCC is distributed in the hope that it will be useful,
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // GNU General Public License for more details.
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // 
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // 3.1, as published by the Free Software Foundation.
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // You should have received a copy of the GNU General Public License and
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // <http://www.gnu.org/licenses/>.
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** /** @file new
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  This is a Standard C++ Library header.
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  handling memory allocation errors; see
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/dynamic_memory.html
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  for more.
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  */
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #ifndef _NEW
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #define _NEW
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #pragma GCC system_header
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #include <bits/c++config.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #include <exception>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #pragma GCC visibility push(default)
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** extern "C++" {
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** namespace std 
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** {
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /**
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  @brief  Exception possibly thrown by @c new.
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  @ingroup exceptions
ARM GAS  /tmp/ccoPBaGE.s 			page 90


  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  errors from the throwing forms of @c new.  */
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   class bad_alloc : public exception 
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   {
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   public:
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_alloc() throw() { }
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_alloc(const bad_alloc&) = default;
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_alloc& operator=(const bad_alloc&) = default;
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // This declaration is not useless:
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual ~bad_alloc() throw();
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // See comment in eh_exception.cc.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual const char* what() const throw();
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   };
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   class bad_array_new_length : public bad_alloc
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   {
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   public:
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     bad_array_new_length() throw() { }
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // This declaration is not useless:
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual ~bad_array_new_length() throw();
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     // See comment in eh_exception.cc.
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     virtual const char* what() const throw();
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   };
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_aligned_new
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   enum class align_val_t: size_t {};
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   struct nothrow_t
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   {
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****     explicit nothrow_t() = default;
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   };
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   extern const nothrow_t nothrow;
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /** If you write your own error handler to be called by @c new, it must
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****    *  be of this type.  */
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   typedef void (*new_handler)();
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /// Takes a replacement handler as the argument, returns the
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /// previous handler.
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   new_handler set_new_handler(new_handler) throw();
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 91


 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cplusplus >= 201103L
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   /// Return the current new handler.
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   new_handler get_new_handler() noexcept;
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** } // namespace std
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** //@{
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** /** These are replaceable signatures:
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - normal array new and delete (same)
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *    @c NULL on error)
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  - @c nothrow array new and delete (same)
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  Placement new and delete signatures (take a memory address argument,
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****  *  does nothing) may not be replaced by a user's program.
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** */
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_sized_deallocation
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__, __malloc__));
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__, __malloc__));
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_aligned_new
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::align_val_t)
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::align_val_t, const std::nothrow_t&)
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   __attribute__((__externally_visible__));
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::align_val_t)
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #if __cpp_sized_deallocation
ARM GAS  /tmp/ccoPBaGE.s 			page 92


 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete(void*, std::size_t, std::align_val_t)
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** void operator delete[](void*, std::size_t, std::align_val_t)
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif // __cpp_sized_deallocation
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** #endif // __cpp_aligned_new
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** 
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** // Default placement versions of operator new.
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new **** { return __p; }
 1525              		.loc 10 175 3 is_stmt 1 view .LVU403
 1526              	.LBB1053:
 1527              	.LBB975:
 1528              	.LBB974:
 1529              	.LBB973:
 1530              	.LBB972:
 1531              	.LBB971:
 1532              	.LBB970:
 1533              	.LBB969:
 1534              	.LBB968:
 1535              	.LBB967:
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
 1536              		.loc 9 1064 7 is_stmt 0 view .LVU404
 1537 0100 C2F81833 		str	r3, [r2, #792]
 1538              	.LVL92:
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
 1539              		.loc 9 1064 7 view .LVU405
 1540              	.LBE967:
 1541              	.LBE968:
 1542              	.LBE969:
 1543              	.LBE970:
 1544              	.LBE971:
 1545              	.LBE972:
 1546              	.LBE973:
 1547              	.LBE974:
 1548              	.LBE975:
 233:Src/encoder.cpp ****         axis_->motor_.current_control_.Vdq_setpoint_src_.connect_to(&axis_->open_loop_controller_.V
 1549              		.loc 1 233 9 is_stmt 1 view .LVU406
 1550 0104 A368     		ldr	r3, [r4, #8]
 1551              		.loc 1 233 16 is_stmt 0 view .LVU407
 1552 0106 DA6E     		ldr	r2, [r3, #108]
 1553              	.LVL93:
 1554              		.loc 1 233 68 view .LVU408
 1555 0108 4033     		adds	r3, r3, #64
 1556              	.LVL94:
 1557              	.LBB976:
 1558              	.LBI976:
 1559              		.loc 2 125 10 is_stmt 1 view .LVU409
 1560              	.LBB977:
 1561              	.LBI977:
1421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	noexcept(is_nothrow_assignable_v<__accepted_type<_Tp&&>&, _Tp>
 1562              		.loc 9 1421 2 view .LVU410
 1563              	.LBB978:
 1564              	.LBB979:
 1565              	.LBB980:
 1566              	.LBI980:
 1567              		.loc 9 1562 24 view .LVU411
ARM GAS  /tmp/ccoPBaGE.s 			page 93


 1568              		.loc 9 1562 24 is_stmt 0 view .LVU412
 1569              	.LBE980:
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 1570              		.loc 9 1426 4 view .LVU413
 1571 010a 92F82C13 		ldrb	r1, [r2, #812]	@ zero_extendqisi2
 1572 010e 0229     		cmp	r1, #2
 1573              	.LVL95:
 1574              	.LBB981:
 1575              	.LBB982:
 1576              	.LBI982:
1463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 1577              		.loc 9 1463 2 is_stmt 1 view .LVU414
 1578              	.LBB983:
 1579              	.LBB984:
 1580              	.LBI984:
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 1581              		.loc 9 1060 10 view .LVU415
 1582              	.LBB985:
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
 1583              		.loc 9 1062 20 is_stmt 0 view .LVU416
 1584 0110 1CBF     		itt	ne
 1585 0112 0221     		movne	r1, #2
 1586 0114 82F82C13 		strbne	r1, [r2, #812]
 1587              	.LVL96:
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
 1588              		.loc 9 1062 20 view .LVU417
 1589              	.LBE985:
 1590              	.LBE984:
 1591              	.LBE983:
 1592              	.LBE982:
 1593              	.LBE981:
 1594              	.LBE979:
 1595              	.LBE978:
 1596              	.LBE977:
 1597              	.LBE976:
 1598              	.LBE1053:
 1599              		.loc 10 175 3 is_stmt 1 view .LVU418
 1600              	.LBB1054:
 1601              	.LBB994:
 1602              	.LBB993:
 1603              	.LBB992:
 1604              	.LBB991:
 1605              	.LBB990:
 1606              	.LBB989:
 1607              	.LBB988:
 1608              	.LBB987:
 1609              	.LBB986:
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
 1610              		.loc 9 1064 7 is_stmt 0 view .LVU419
 1611 0118 C2F82433 		str	r3, [r2, #804]
 1612              	.LVL97:
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
 1613              		.loc 9 1064 7 view .LVU420
 1614              	.LBE986:
 1615              	.LBE987:
 1616              	.LBE988:
 1617              	.LBE989:
ARM GAS  /tmp/ccoPBaGE.s 			page 94


 1618              	.LBE990:
 1619              	.LBE991:
 1620              	.LBE992:
 1621              	.LBE993:
 1622              	.LBE994:
 234:Src/encoder.cpp ****         
 235:Src/encoder.cpp ****         axis_->motor_.current_control_.phase_src_.connect_to(&axis_->open_loop_controller_.phase_);
 1623              		.loc 1 235 9 is_stmt 1 view .LVU421
 1624 011c A368     		ldr	r3, [r4, #8]
 1625              		.loc 1 235 16 is_stmt 0 view .LVU422
 1626 011e DA6E     		ldr	r2, [r3, #108]
 1627              	.LVL98:
 1628              		.loc 1 235 61 view .LVU423
 1629 0120 4C33     		adds	r3, r3, #76
 1630              	.LVL99:
 1631              	.LBB995:
 1632              	.LBI995:
 1633              		.loc 2 125 10 is_stmt 1 view .LVU424
 1634              	.LBB996:
 1635              	.LBI996:
1421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	noexcept(is_nothrow_assignable_v<__accepted_type<_Tp&&>&, _Tp>
 1636              		.loc 9 1421 2 view .LVU425
 1637              	.LBB997:
 1638              	.LBB998:
 1639              	.LBB999:
 1640              	.LBI999:
 1641              		.loc 9 1562 24 view .LVU426
 1642              		.loc 9 1562 24 is_stmt 0 view .LVU427
 1643              	.LBE999:
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 1644              		.loc 9 1426 4 view .LVU428
 1645 0122 92F83413 		ldrb	r1, [r2, #820]	@ zero_extendqisi2
 1646 0126 0229     		cmp	r1, #2
 1647              	.LVL100:
 1648              	.LBB1000:
 1649              	.LBB1001:
 1650              	.LBI1001:
1463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 1651              		.loc 9 1463 2 is_stmt 1 view .LVU429
 1652              	.LBB1002:
 1653              	.LBB1003:
 1654              	.LBI1003:
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 1655              		.loc 9 1060 10 view .LVU430
 1656              	.LBB1004:
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
 1657              		.loc 9 1062 20 is_stmt 0 view .LVU431
 1658 0128 1CBF     		itt	ne
 1659 012a 0221     		movne	r1, #2
 1660 012c 82F83413 		strbne	r1, [r2, #820]
 1661              	.LVL101:
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
 1662              		.loc 9 1062 20 view .LVU432
 1663              	.LBE1004:
 1664              	.LBE1003:
 1665              	.LBE1002:
 1666              	.LBE1001:
ARM GAS  /tmp/ccoPBaGE.s 			page 95


 1667              	.LBE1000:
 1668              	.LBE998:
 1669              	.LBE997:
 1670              	.LBE996:
 1671              	.LBE995:
 1672              	.LBE1054:
 1673              		.loc 10 175 3 is_stmt 1 view .LVU433
 1674              	.LBB1055:
 1675              	.LBB1013:
 1676              	.LBB1012:
 1677              	.LBB1011:
 1678              	.LBB1010:
 1679              	.LBB1009:
 1680              	.LBB1008:
 1681              	.LBB1007:
 1682              	.LBB1006:
 1683              	.LBB1005:
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
 1684              		.loc 9 1064 7 is_stmt 0 view .LVU434
 1685 0130 C2F83033 		str	r3, [r2, #816]
 1686              	.LVL102:
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
 1687              		.loc 9 1064 7 view .LVU435
 1688              	.LBE1005:
 1689              	.LBE1006:
 1690              	.LBE1007:
 1691              	.LBE1008:
 1692              	.LBE1009:
 1693              	.LBE1010:
 1694              	.LBE1011:
 1695              	.LBE1012:
 1696              	.LBE1013:
 236:Src/encoder.cpp **** 
 237:Src/encoder.cpp ****         axis_->motor_.phase_vel_src_.connect_to(&axis_->open_loop_controller_.phase_vel_);
 1697              		.loc 1 237 9 is_stmt 1 view .LVU436
 1698 0134 A368     		ldr	r3, [r4, #8]
 1699              		.loc 1 237 16 is_stmt 0 view .LVU437
 1700 0136 DA6E     		ldr	r2, [r3, #108]
 1701              	.LVL103:
 1702              		.loc 1 237 48 view .LVU438
 1703 0138 5433     		adds	r3, r3, #84
 1704              	.LVL104:
 1705              	.LBB1014:
 1706              	.LBI1014:
 1707              		.loc 2 125 10 is_stmt 1 view .LVU439
 1708              	.LBB1015:
 1709              	.LBI1015:
1421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	noexcept(is_nothrow_assignable_v<__accepted_type<_Tp&&>&, _Tp>
 1710              		.loc 9 1421 2 view .LVU440
 1711              	.LBB1016:
 1712              	.LBB1017:
 1713              	.LBB1018:
 1714              	.LBI1018:
 1715              		.loc 9 1562 24 view .LVU441
 1716              		.loc 9 1562 24 is_stmt 0 view .LVU442
 1717              	.LBE1018:
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
ARM GAS  /tmp/ccoPBaGE.s 			page 96


 1718              		.loc 9 1426 4 view .LVU443
 1719 013a 92F8BC13 		ldrb	r1, [r2, #956]	@ zero_extendqisi2
 1720 013e 0229     		cmp	r1, #2
 1721              	.LVL105:
 1722              	.LBB1019:
 1723              	.LBB1020:
 1724              	.LBI1020:
1463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 1725              		.loc 9 1463 2 is_stmt 1 view .LVU444
 1726              	.LBB1021:
 1727              	.LBB1022:
 1728              	.LBI1022:
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 1729              		.loc 9 1060 10 view .LVU445
 1730              	.LBB1023:
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
 1731              		.loc 9 1062 20 is_stmt 0 view .LVU446
 1732 0140 1CBF     		itt	ne
 1733 0142 0221     		movne	r1, #2
 1734 0144 82F8BC13 		strbne	r1, [r2, #956]
 1735              	.LVL106:
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
 1736              		.loc 9 1062 20 view .LVU447
 1737              	.LBE1023:
 1738              	.LBE1022:
 1739              	.LBE1021:
 1740              	.LBE1020:
 1741              	.LBE1019:
 1742              	.LBE1017:
 1743              	.LBE1016:
 1744              	.LBE1015:
 1745              	.LBE1014:
 1746              	.LBE1055:
 1747              		.loc 10 175 3 is_stmt 1 view .LVU448
 1748              	.LBB1056:
 1749              	.LBB1032:
 1750              	.LBB1031:
 1751              	.LBB1030:
 1752              	.LBB1029:
 1753              	.LBB1028:
 1754              	.LBB1027:
 1755              	.LBB1026:
 1756              	.LBB1025:
 1757              	.LBB1024:
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
 1758              		.loc 9 1064 7 is_stmt 0 view .LVU449
 1759 0148 C2F8B833 		str	r3, [r2, #952]
 1760              	.LVL107:
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
 1761              		.loc 9 1064 7 view .LVU450
 1762              	.LBE1024:
 1763              	.LBE1025:
 1764              	.LBE1026:
 1765              	.LBE1027:
 1766              	.LBE1028:
 1767              	.LBE1029:
 1768              	.LBE1030:
ARM GAS  /tmp/ccoPBaGE.s 			page 97


 1769              	.LBE1031:
 1770              	.LBE1032:
 238:Src/encoder.cpp ****         axis_->motor_.current_control_.phase_vel_src_.connect_to(&axis_->open_loop_controller_.phas
 1771              		.loc 1 238 9 is_stmt 1 view .LVU451
 1772 014c A368     		ldr	r3, [r4, #8]
 1773              		.loc 1 238 16 is_stmt 0 view .LVU452
 1774 014e DA6E     		ldr	r2, [r3, #108]
 1775              	.LVL108:
 1776              		.loc 1 238 65 view .LVU453
 1777 0150 5433     		adds	r3, r3, #84
 1778              	.LVL109:
 1779              	.LBB1033:
 1780              	.LBI1033:
 1781              		.loc 2 125 10 is_stmt 1 view .LVU454
 1782              	.LBB1034:
 1783              	.LBI1034:
1421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	noexcept(is_nothrow_assignable_v<__accepted_type<_Tp&&>&, _Tp>
 1784              		.loc 9 1421 2 view .LVU455
 1785              	.LBB1035:
 1786              	.LBB1036:
 1787              	.LBB1037:
 1788              	.LBI1037:
 1789              		.loc 9 1562 24 view .LVU456
 1790              		.loc 9 1562 24 is_stmt 0 view .LVU457
 1791              	.LBE1037:
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 1792              		.loc 9 1426 4 view .LVU458
 1793 0152 92F83C13 		ldrb	r1, [r2, #828]	@ zero_extendqisi2
 1794 0156 0229     		cmp	r1, #2
 1795              	.LVL110:
 1796              	.LBB1038:
 1797              	.LBB1039:
 1798              	.LBI1039:
1463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant **** 	{
 1799              		.loc 9 1463 2 is_stmt 1 view .LVU459
 1800              	.LBB1040:
 1801              	.LBB1041:
 1802              	.LBI1041:
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****     {
 1803              		.loc 9 1060 10 view .LVU460
 1804              	.LBB1042:
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
 1805              		.loc 9 1062 20 is_stmt 0 view .LVU461
 1806 0158 1CBF     		itt	ne
 1807 015a 0221     		movne	r1, #2
 1808 015c 82F83C13 		strbne	r1, [r2, #828]
 1809              	.LVL111:
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
 1810              		.loc 9 1062 20 view .LVU462
 1811              	.LBE1042:
 1812              	.LBE1041:
 1813              	.LBE1040:
 1814              	.LBE1039:
 1815              	.LBE1038:
 1816              	.LBE1036:
 1817              	.LBE1035:
 1818              	.LBE1034:
ARM GAS  /tmp/ccoPBaGE.s 			page 98


 1819              	.LBE1033:
 1820              	.LBE1056:
 1821              		.loc 10 175 3 is_stmt 1 view .LVU463
 1822              	.LBB1057:
 1823              	.LBB1051:
 1824              	.LBB1050:
 1825              	.LBB1049:
 1826              	.LBB1048:
 1827              	.LBB1047:
 1828              	.LBB1046:
 1829              	.LBB1045:
 1830              	.LBB1044:
 1831              	.LBB1043:
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
 1832              		.loc 9 1064 7 is_stmt 0 view .LVU464
 1833 0160 C2F83833 		str	r3, [r2, #824]
 1834              	.LVL112:
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant ****         remove_reference_t<decltype(__storage)>
 1835              		.loc 9 1064 7 view .LVU465
 1836              	.LBE1043:
 1837              	.LBE1044:
 1838              	.LBE1045:
 1839              	.LBE1046:
 1840              	.LBE1047:
 1841              	.LBE1048:
 1842              	.LBE1049:
 1843              	.LBE1050:
 1844              	.LBE1051:
 1845              	.LBE1057:
 239:Src/encoder.cpp ****     }
 240:Src/encoder.cpp ****     cpu_exit_critical(mask);
 1846              		.loc 1 240 5 is_stmt 1 view .LVU466
 1847              	.LBB1058:
 1848              	.LBI1058:
  72:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
 1849              		.loc 3 72 13 view .LVU467
 1850              	.LBE1058:
 1851              		.loc 3 73 5 view .LVU468
 1852              	.LBB1061:
 1853              	.LBB1059:
 1854              	.LBI1059:
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1855              		.loc 4 479 27 view .LVU469
 1856              	.LBB1060:
 1857              		.loc 4 481 3 view .LVU470
 1858              		.syntax unified
 1859              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1860 0164 85F31088 		MSR primask, r5
 1861              	@ 0 "" 2
 1862              	.LVL113:
 1863              		.loc 4 481 3 is_stmt 0 view .LVU471
 1864              		.thumb
 1865              		.syntax unified
 1866              	.LBE1060:
 1867              	.LBE1059:
 1868              	.LBE1061:
 241:Src/encoder.cpp **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 99


 242:Src/encoder.cpp ****     axis_->wait_for_control_iteration();
 1869              		.loc 1 242 5 is_stmt 1 view .LVU472
 1870              		.loc 1 242 38 is_stmt 0 view .LVU473
 1871 0168 A068     		ldr	r0, [r4, #8]
 1872 016a FFF7FEFF 		bl	_ZN4Axis26wait_for_control_iterationEv
 1873              	.LVL114:
 243:Src/encoder.cpp **** 
 244:Src/encoder.cpp ****     axis_->motor_.arm(&axis_->motor_.current_control_);
 1874              		.loc 1 244 5 is_stmt 1 view .LVU474
 1875              		.loc 1 244 12 is_stmt 0 view .LVU475
 1876 016e A368     		ldr	r3, [r4, #8]
 1877 0170 D86E     		ldr	r0, [r3, #108]
 1878              		.loc 1 244 22 view .LVU476
 1879 0172 00F53F71 		add	r1, r0, #764
 1880 0176 FFF7FEFF 		bl	_ZN5Motor3armEP15PhaseControlLawILj3EE
 1881              	.LVL115:
 245:Src/encoder.cpp **** 
 246:Src/encoder.cpp ****     // go to start position of forward scan for start_lock_duration to get ready to scan
 247:Src/encoder.cpp ****     for (size_t i = 0; i < (size_t)(start_lock_duration * 1000.0f); ++i) {
 1882              		.loc 1 247 5 is_stmt 1 view .LVU477
 1883              	.LBB1062:
 1884              		.loc 1 247 26 view .LVU478
 1885              	.LBE1062:
 244:Src/encoder.cpp **** 
 1886              		.loc 1 244 22 is_stmt 0 view .LVU479
 1887 017a 4FF47A75 		mov	r5, #1000
 1888              	.LVL116:
 1889              	.LBB1063:
 248:Src/encoder.cpp ****         if (!axis_->motor_.is_armed_) {
 249:Src/encoder.cpp ****             return false; // TODO: return "disarmed" error code
 250:Src/encoder.cpp ****         }
 251:Src/encoder.cpp ****         if (axis_->requested_state_ != Axis::AXIS_STATE_UNDEFINED) {
 252:Src/encoder.cpp ****             axis_->motor_.disarm();
 253:Src/encoder.cpp ****             return false; // TODO: return "aborted" error code
 254:Src/encoder.cpp ****         }
 255:Src/encoder.cpp ****         osDelay(1);
 1890              		.loc 1 255 16 view .LVU480
 1891 017e 0127     		movs	r7, #1
 1892              	.LVL117:
 1893              	.L68:
 248:Src/encoder.cpp ****         if (!axis_->motor_.is_armed_) {
 1894              		.loc 1 248 9 is_stmt 1 view .LVU481
 248:Src/encoder.cpp ****         if (!axis_->motor_.is_armed_) {
 1895              		.loc 1 248 14 is_stmt 0 view .LVU482
 1896 0180 A368     		ldr	r3, [r4, #8]
 248:Src/encoder.cpp ****         if (!axis_->motor_.is_armed_) {
 1897              		.loc 1 248 21 view .LVU483
 1898 0182 D86E     		ldr	r0, [r3, #108]
 248:Src/encoder.cpp ****         if (!axis_->motor_.is_armed_) {
 1899              		.loc 1 248 28 view .LVU484
 1900 0184 90F83860 		ldrb	r6, [r0, #56]	@ zero_extendqisi2
 248:Src/encoder.cpp ****         if (!axis_->motor_.is_armed_) {
 1901              		.loc 1 248 9 view .LVU485
 1902 0188 002E     		cmp	r6, #0
 1903 018a 00F0B180 		beq	.L66
 251:Src/encoder.cpp ****             axis_->motor_.disarm();
 1904              		.loc 1 251 9 is_stmt 1 view .LVU486
ARM GAS  /tmp/ccoPBaGE.s 			page 100


 1905 018e 93F87E31 		ldrb	r3, [r3, #382]	@ zero_extendqisi2
 1906 0192 002B     		cmp	r3, #0
 1907 0194 40F0A980 		bne	.L91
 1908              		.loc 1 255 9 discriminator 2 view .LVU487
 1909              		.loc 1 255 16 is_stmt 0 discriminator 2 view .LVU488
 1910 0198 3846     		mov	r0, r7
 1911 019a FFF7FEFF 		bl	osDelay
 1912              	.LVL118:
 247:Src/encoder.cpp ****         if (!axis_->motor_.is_armed_) {
 1913              		.loc 1 247 5 is_stmt 1 discriminator 2 view .LVU489
 247:Src/encoder.cpp ****         if (!axis_->motor_.is_armed_) {
 1914              		.loc 1 247 26 discriminator 2 view .LVU490
 1915 019e 013D     		subs	r5, r5, #1
 1916              	.LVL119:
 247:Src/encoder.cpp ****         if (!axis_->motor_.is_armed_) {
 1917              		.loc 1 247 26 is_stmt 0 discriminator 2 view .LVU491
 1918 01a0 EED1     		bne	.L68
 1919              	.LBE1063:
 256:Src/encoder.cpp ****     }
 257:Src/encoder.cpp **** 
 258:Src/encoder.cpp **** 
 259:Src/encoder.cpp ****     int32_t init_enc_val = shadow_count_;
 1920              		.loc 1 259 5 is_stmt 1 view .LVU492
 1921              		.loc 1 259 13 is_stmt 0 view .LVU493
 1922 01a2 D4F810A0 		ldr	r10, [r4, #16]
 1923              	.LVL120:
 260:Src/encoder.cpp ****     uint32_t num_steps = 0;
 1924              		.loc 1 260 5 is_stmt 1 view .LVU494
 261:Src/encoder.cpp ****     int64_t encvaluesum = 0;
 1925              		.loc 1 261 5 view .LVU495
 262:Src/encoder.cpp **** 
 263:Src/encoder.cpp ****     mask = cpu_enter_critical();
 1926              		.loc 1 263 5 view .LVU496
 1927              	.LBB1064:
 1928              	.LBI1064:
  66:Inc/low_level.h ****     uint32_t primask = __get_PRIMASK();
 1929              		.loc 3 66 17 view .LVU497
 1930              	.LBB1065:
  67:Inc/low_level.h ****     __disable_irq();
 1931              		.loc 3 67 5 view .LVU498
 1932              	.LBB1066:
 1933              	.LBI1066:
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1934              		.loc 4 449 31 view .LVU499
 1935              	.LBB1067:
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 1936              		.loc 4 451 3 view .LVU500
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 1937              		.loc 4 453 3 view .LVU501
 1938              		.syntax unified
 1939              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1940 01a6 EFF31082 		MRS r2, primask
 1941              	@ 0 "" 2
 1942              	.LVL121:
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1943              		.loc 4 454 3 view .LVU502
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccoPBaGE.s 			page 101


 1944              		.loc 4 454 3 is_stmt 0 view .LVU503
 1945              		.thumb
 1946              		.syntax unified
 1947              	.LBE1067:
 1948              	.LBE1066:
  68:Inc/low_level.h ****     return primask;
 1949              		.loc 3 68 5 is_stmt 1 view .LVU504
 1950              	.LBB1068:
 1951              	.LBI1068:
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1952              		.loc 4 207 27 view .LVU505
 1953              	.LBB1069:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1954              		.loc 4 209 3 view .LVU506
 1955              		.syntax unified
 1956              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1957 01aa 72B6     		cpsid i
 1958              	@ 0 "" 2
 1959              		.thumb
 1960              		.syntax unified
 1961              	.LBE1069:
 1962              	.LBE1068:
  69:Inc/low_level.h **** }
 1963              		.loc 3 69 5 view .LVU507
 1964              	.LVL122:
  69:Inc/low_level.h **** }
 1965              		.loc 3 69 5 is_stmt 0 view .LVU508
 1966              	.LBE1065:
 1967              	.LBE1064:
 264:Src/encoder.cpp ****     {
 1968              		.loc 1 264 5 is_stmt 1 view .LVU509
 265:Src/encoder.cpp ****         axis_->open_loop_controller_.target_vel_ = config_.calib_scan_omega;
 1969              		.loc 1 265 9 view .LVU510
 1970 01ac A368     		ldr	r3, [r4, #8]
 1971              		.loc 1 265 60 is_stmt 0 view .LVU511
 1972 01ae 6168     		ldr	r1, [r4, #4]
 1973 01b0 096A     		ldr	r1, [r1, #32]	@ float
 1974              		.loc 1 265 50 view .LVU512
 1975 01b2 1962     		str	r1, [r3, #32]	@ float
 266:Src/encoder.cpp ****         axis_->open_loop_controller_.total_distance_ = 0.0f;
 1976              		.loc 1 266 9 is_stmt 1 view .LVU513
 1977 01b4 A368     		ldr	r3, [r4, #8]
 1978              	.LVL123:
 1979              	.LBB1070:
 1980              	.LBI1070:
  52:Inc/component.hpp ****         content_ = value;
 1981              		.loc 2 52 10 view .LVU514
 1982              	.LBB1071:
  53:Inc/component.hpp ****         age_ = 0;
 1983              		.loc 2 53 18 is_stmt 0 view .LVU515
 1984 01b6 0021     		movs	r1, #0
 1985 01b8 1966     		str	r1, [r3, #96]	@ float
  54:Inc/component.hpp ****     }
 1986              		.loc 2 54 14 view .LVU516
 1987 01ba 0021     		movs	r1, #0
 1988 01bc D965     		str	r1, [r3, #92]
 1989              	.LVL124:
ARM GAS  /tmp/ccoPBaGE.s 			page 102


  54:Inc/component.hpp ****     }
 1990              		.loc 2 54 14 view .LVU517
 1991              	.LBE1071:
 1992              	.LBE1070:
 267:Src/encoder.cpp ****     }
 268:Src/encoder.cpp ****     cpu_exit_critical(mask);
 1993              		.loc 1 268 5 is_stmt 1 view .LVU518
 1994              	.LBB1072:
 1995              	.LBI1072:
  72:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
 1996              		.loc 3 72 13 view .LVU519
 1997              	.LBE1072:
 1998              		.loc 3 73 5 view .LVU520
 1999              	.LBB1075:
 2000              	.LBB1073:
 2001              	.LBI1073:
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2002              		.loc 4 479 27 view .LVU521
 2003              	.LBB1074:
 2004              		.loc 4 481 3 view .LVU522
 2005              		.syntax unified
 2006              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2007 01be 82F31088 		MSR primask, r2
 2008              	@ 0 "" 2
 2009              	.LVL125:
 2010              		.loc 4 481 3 is_stmt 0 view .LVU523
 2011              		.thumb
 2012              		.syntax unified
 2013              	.LBE1074:
 2014              	.LBE1073:
 2015              	.LBE1075:
 269:Src/encoder.cpp **** 
 270:Src/encoder.cpp ****     // scan forward
 271:Src/encoder.cpp ****     while ((axis_->requested_state_ == Axis::AXIS_STATE_UNDEFINED) && axis_->motor_.is_armed_) {
 2016              		.loc 1 271 5 is_stmt 1 view .LVU524
 2017              		.loc 1 271 68 view .LVU525
 2018              		.loc 1 271 13 is_stmt 0 view .LVU526
 2019 01c2 A368     		ldr	r3, [r4, #8]
 2020              		.loc 1 271 68 view .LVU527
 2021 01c4 93F87E21 		ldrb	r2, [r3, #382]	@ zero_extendqisi2
 2022              	.LVL126:
 2023              		.loc 1 271 68 view .LVU528
 2024 01c8 002A     		cmp	r2, #0
 2025 01ca 40F09480 		bne	.L81
 261:Src/encoder.cpp **** 
 2026              		.loc 1 261 13 view .LVU529
 2027 01ce 0F46     		mov	r7, r1
 2028 01d0 8846     		mov	r8, r1
 2029              	.LBB1076:
 272:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(-INF
 273:Src/encoder.cpp ****         if (reached_target_dist) {
 274:Src/encoder.cpp ****             break;
 275:Src/encoder.cpp ****         }
 276:Src/encoder.cpp ****         encvaluesum += shadow_count_;
 277:Src/encoder.cpp ****         num_steps++;
 278:Src/encoder.cpp ****         osDelay(1);
 2030              		.loc 1 278 16 view .LVU530
ARM GAS  /tmp/ccoPBaGE.s 			page 103


 2031 01d2 4FF00109 		mov	r9, #1
 2032              	.LVL127:
 2033              	.L70:
 2034              		.loc 1 278 16 view .LVU531
 2035              	.LBE1076:
 271:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(-INF
 2036              		.loc 1 271 85 discriminator 1 view .LVU532
 2037 01d6 DA6E     		ldr	r2, [r3, #108]
 271:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(-INF
 2038              		.loc 1 271 68 discriminator 1 view .LVU533
 2039 01d8 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
 2040 01dc B2B1     		cbz	r2, .L69
 2041              	.LBB1088:
 272:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(-INF
 2042              		.loc 1 272 9 is_stmt 1 view .LVU534
 2043              	.LVL128:
 2044              	.LBB1077:
 2045              	.LBI1077:
 102:Inc/component.hpp ****         return content_;
 2046              		.loc 2 102 22 view .LVU535
 2047              	.LBB1078:
 2048              	.LBI1078:
 2049              		.file 11 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // <optional> -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // Copyright (C) 2013-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** /** @file include/optional
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****  *  This is a Standard C++ Library header.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****  */
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #ifndef _GLIBCXX_OPTIONAL
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #define _GLIBCXX_OPTIONAL 1
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #pragma GCC system_header
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #if __cplusplus >= 201703L
ARM GAS  /tmp/ccoPBaGE.s 			page 104


  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <utility>
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <type_traits>
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <exception>
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <new>
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <initializer_list>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <bits/exception_defines.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <bits/functional_hash.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #include <bits/enable_special_members.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #if __cplusplus > 201703L
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** # include <compare>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #endif
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** namespace std _GLIBCXX_VISIBILITY(default)
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** {
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @addtogroup utilities
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @{
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    */
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** #define __cpp_lib_optional 201606L
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     class optional;
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /// Tag type to disengage optional objects.
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   struct nullopt_t
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   {
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // Do not user-declare default constructor at all for
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // optional_value = {} syntax to work.
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // nullopt_t() = delete;
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // Used for constructing nullopt.
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     enum class _Construct { _Token };
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     // Must be constexpr for nullopt_t to be literal.
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     explicit constexpr nullopt_t(_Construct) { }
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   };
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /// Tag to disengage optional objects.
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   inline constexpr nullopt_t nullopt { nullopt_t::_Construct::_Token };
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @brief Exception class thrown when a disengaged optional object is
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  dereferenced.
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    *  @ingroup exceptions
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****    */
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   class bad_optional_access : public exception
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   {
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   public:
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     bad_optional_access() { }
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     virtual const char* what() const noexcept override
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     { return "bad optional access"; }
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 105


  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     virtual ~bad_optional_access() noexcept = default;
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   };
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   void
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   __throw_bad_optional_access()
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   __attribute__((__noreturn__));
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // XXX Does not belong here.
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   inline void
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   __throw_bad_optional_access()
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // This class template manages construction/destruction of
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // the contained value for a std::optional.
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload_base
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Stored_type = remove_const_t<_Tp>;
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base() = default;
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload_base() = default;
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_engaged(true)
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args>
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_Optional_payload_base(std::initializer_list<_Up> __il,
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			       _Args&&... __args)
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__il, std::forward<_Args>(__args)...),
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_engaged(true)
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{ }
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructor used by _Optional_base copy constructor when the
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // contained value is not trivially copy constructible.
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(bool __engaged,
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			     const _Optional_payload_base& __other)
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (__other._M_engaged)
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(__other._M_get());
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructor used by _Optional_base move constructor when the
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // contained value is not trivially move constructible.
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(bool __engaged,
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			     _Optional_payload_base&& __other)
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (__other._M_engaged)
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_construct(std::move(__other._M_get()));
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 106


 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy constructor is only used to when the contained value is
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // trivially copy constructible.
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(const _Optional_payload_base&) = default;
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Move constructor is only used to when the contained value is
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // trivially copy constructible.
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base(_Optional_payload_base&&) = default;
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base&
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(const _Optional_payload_base&) = default;
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload_base&
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(_Optional_payload_base&&) = default;
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // used to perform non-trivial copy assignment.
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_copy_assign(const _Optional_payload_base& __other)
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         if (this->_M_engaged && __other._M_engaged)
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_get() = __other._M_get();
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         else
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    if (__other._M_engaged)
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_construct(__other._M_get());
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    else
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // used to perform non-trivial move assignment.
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_move_assign(_Optional_payload_base&& __other)
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (this->_M_engaged && __other._M_engaged)
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	else
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  {
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    if (__other._M_engaged)
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_construct(std::move(__other._M_get()));
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    else
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      this->_M_reset();
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  }
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       struct _Empty_byte { };
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, bool = is_trivially_destructible_v<_Up>>
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	union _Storage
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  constexpr _Storage() noexcept : _M_empty() { }
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename... _Args>
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(in_place_t, _Args&&... __args)
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
ARM GAS  /tmp/ccoPBaGE.s 			page 107


 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename _Vp, typename... _Args>
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(__il, std::forward<_Args>(__args)...)
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _Empty_byte _M_empty;
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           _Up _M_value;
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	};
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	union _Storage<_Up, false>
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  constexpr _Storage() noexcept : _M_empty() { }
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename... _Args>
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(in_place_t, _Args&&... __args)
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  template<typename _Vp, typename... _Args>
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    constexpr
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(__il, std::forward<_Args>(__args)...)
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  // User-provided destructor is needed when _Up has non-trivial dtor.
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ~_Storage() { }
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _Empty_byte _M_empty;
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           _Up _M_value;
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	};
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Storage<_Stored_type> _M_payload;
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       bool _M_engaged = false;
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         void
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         _M_construct(_Args&&... __args)
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         {
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           ::new ((void *) std::__addressof(this->_M_payload))
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****           this->_M_engaged = true;
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         }
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_destroy() noexcept
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_engaged = false;
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_payload._M_value.~_Stored_type();
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 108


 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // The _M_get() operations have _M_engaged as a precondition.
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // They exist to access the contained value with the appropriate
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // const-qualification, because _M_payload has had the const removed.
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() noexcept
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_payload._M_value; }
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() const noexcept
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return this->_M_payload._M_value; }
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // _M_reset is a 'safe' operation with no precondition.
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_reset() noexcept
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	if (this->_M_engaged)
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  _M_destroy();
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Class template that manages the payload for optionals.
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp,
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    bool /*_HasTrivialDestructor*/ =
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      is_trivially_destructible_v<_Tp>,
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    bool /*_HasTrivialCopy */ =
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      is_trivially_copy_assignable_v<_Tp>
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      && is_trivially_copy_constructible_v<_Tp>,
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    bool /*_HasTrivialMove */ =
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      is_trivially_move_assignable_v<_Tp>
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	      && is_trivially_move_constructible_v<_Tp>>
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload;
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for potentially-constexpr optionals (trivial copy/move/destroy).
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, true, true>
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial copy construction/assignment.
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, false, true>
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(_Optional_payload&&) = default;
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial copy assignment.
ARM GAS  /tmp/ccoPBaGE.s 			page 109


 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(const _Optional_payload& __other)
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_copy_assign(__other);
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial move construction/assignment.
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, true, false>
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(const _Optional_payload&) = default;
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial move assignment.
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(_Optional_payload&& __other)
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_move_assign(std::move(__other));
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial copy and move assignment.
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp>
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, true, false, false>
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload_base<_Tp>
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() = default;
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial copy assignment.
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(const _Optional_payload& __other)
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_copy_assign(__other);
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Non-trivial move assignment.
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr
ARM GAS  /tmp/ccoPBaGE.s 			page 110


 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload&
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       operator=(_Optional_payload&& __other)
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	this->_M_move_assign(std::move(__other));
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return *this;
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Payload for optionals with non-trivial destructors.
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template <typename _Tp, bool _Copy, bool _Move>
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_payload<_Tp, false, _Copy, _Move>
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : _Optional_payload<_Tp, true, false, false>
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Base class implements all the constructors and assignment operators:
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Optional_payload<_Tp, true, false, false>::_Optional_payload;
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload() = default;
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(const _Optional_payload&) = default;
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload& operator=(_Optional_payload&&) = default;
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Destructor needs to destroy the contained value:
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       ~_Optional_payload() { this->_M_reset(); }
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // Common base class for _Optional_base<T> to avoid repeating these
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   // member functions in each specialization.
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Dp>
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     class _Optional_base_impl
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     protected:
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Stored_type = remove_const_t<_Tp>;
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // The _M_construct operation has !_M_engaged as a precondition
 413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // while _M_destruct has _M_engaged as a precondition.
 414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args>
 415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	void
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	_M_construct(_Args&&... __args)
 417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	{
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  ::new
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    _Stored_type(std::forward<_Args>(__args)...);
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	  static_cast<_Dp*>(this)->_M_payload._M_engaged = true;
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	}
 424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       void
 426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_destruct() noexcept
 427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_destroy(); }
 428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // _M_reset is a 'safe' operation with no precondition.
 430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr void
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_reset() noexcept
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
 433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 111


 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr bool _M_is_engaged() const noexcept
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // The _M_get operations have _M_engaged as a precondition.
 438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Tp&
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() noexcept
 440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__glibcxx_assert(this->_M_is_engaged());
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return static_cast<_Dp*>(this)->_M_payload._M_get();
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr const _Tp&
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _M_get() const noexcept
 447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       {
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__glibcxx_assert(this->_M_is_engaged());
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	return static_cast<const _Dp*>(this)->_M_payload._M_get();
 450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       }
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
 454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * @brief Class template that provides copy/move constructors of optional.
 455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * Such a separate base class template is necessary in order to
 457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * conditionally make copy/move constructors trivial.
 458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * When the contained value is trivially copy/move constructible,
 460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * the copy/move constructors of _Optional_base will invoke the
 461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * trivial copy/move constructor of _Optional_payload. Otherwise,
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * they will invoke _Optional_payload(bool, const _Optional_payload&)
 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * or _Optional_payload(bool, _Optional_payload&&) to initialize
 464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * the contained value, if copying/moving an engaged optional.
 465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * Whether the other special members are trivial is determined by the
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * _Optional_payload<_Tp> specialization used for the _M_payload member.
 468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     *
 469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * @see optional, _Enable_special_members
 470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     */
 471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp,
 472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	   bool = is_trivially_copy_constructible_v<_Tp>,
 473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	   bool = is_trivially_move_constructible_v<_Tp>>
 474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base
 475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
ARM GAS  /tmp/ccoPBaGE.s 			page 112


 491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other)
 500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __other._M_payload)
 502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other)
 505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>)
 506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::move(__other._M_payload))
 508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base<_Tp, false, true>
 519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other)
 544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __other._M_payload)
 546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 113


 548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other) = default;
 549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base<_Tp, true, false>
 559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other) = default;
 584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other)
 586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>)
 587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::move(__other._M_payload))
 589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       { }
 590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     struct _Optional_base<_Tp, true, true>
 600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for disengaged optionals.
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base() = default;
 604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 114


 605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Constructors for engaged optionals.
 606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Args,
 607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     std::forward<_Args>(__args)...) { }
 611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up, typename... _Args,
 613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      initializer_list<_Up>&,
 615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 					      _Args&&...>, bool> = false>
 616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           initializer_list<_Up> __il,
 618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****                                           _Args&&... __args)
 619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         { }
 622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Copy and move constructors.
 624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(const _Optional_base& __other) = default;
 625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr _Optional_base(_Optional_base&& __other) = default;
 626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Assignment operators.
 628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       _Optional_payload<_Tp> _M_payload;
 632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     };
 633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   class optional;
 636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     using __converts_from_optional =
 639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       __or_<is_constructible<_Tp, const optional<_Up>&>,
 640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_constructible<_Tp, optional<_Up>&>,
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_constructible<_Tp, const optional<_Up>&&>,
 642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_constructible<_Tp, optional<_Up>&&>,
 643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<const optional<_Up>&, _Tp>,
 644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<optional<_Up>&, _Tp>,
 645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<const optional<_Up>&&, _Tp>,
 646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_convertible<optional<_Up>&&, _Tp>>;
 647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp, typename _Up>
 649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     using __assigns_from_optional =
 650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       __or_<is_assignable<_Tp&, const optional<_Up>&>,
 651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_assignable<_Tp&, optional<_Up>&>,
 652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_assignable<_Tp&, const optional<_Up>&&>,
 653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    is_assignable<_Tp&, optional<_Up>&&>>;
 654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   /**
 656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     * @brief Class template for optional values.
 657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     */
 658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****   template<typename _Tp>
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     class optional
 660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     : private _Optional_base<_Tp>,
 661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       private _Enable_copy_move<
ARM GAS  /tmp/ccoPBaGE.s 			page 115


 662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Copy constructor.
 663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	is_copy_constructible_v<_Tp>,
 664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Copy assignment.
 665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__and_v<is_copy_constructible<_Tp>, is_copy_assignable<_Tp>>,
 666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Move constructor.
 667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	is_move_constructible_v<_Tp>,
 668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Move assignment.
 669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	__and_v<is_move_constructible<_Tp>, is_move_assignable<_Tp>>,
 670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	// Unique tag type.
 671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional<_Tp>>
 672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     {
 673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       static_assert(!is_same_v<remove_cv_t<_Tp>, nullopt_t>);
 674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       static_assert(!is_same_v<remove_cv_t<_Tp>, in_place_t>);
 675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       static_assert(!is_reference_v<_Tp>);
 676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     private:
 678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using _Base = _Optional_base<_Tp>;
 679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // SFINAE helpers
 681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using __not_self = __not_<is_same<optional, __remove_cvref_t<_Up>>>;
 683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up>
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using __not_tag = __not_<is_same<in_place_t, __remove_cvref_t<_Up>>>;
 685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename... _Cond>
 686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	using _Requires = enable_if_t<__and_v<_Cond...>, bool>;
 687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****     public:
 689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       using value_type = _Tp;
 690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr optional() = default;
 692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       constexpr optional(nullopt_t) noexcept { }
 694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       // Converting constructors for engaged optionals.
 696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****       template<typename _Up = _Tp,
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	       _Requires<__not_self<_Up>, __not_tag<_Up>,
 698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_constructible<_Tp, _Up&&>,
 699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 			 is_convertible<_Up&&, _Tp>> = true>
 700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	constexpr
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	optional(_Up&& __t)
 2050              		.loc 11 701 2 view .LVU536
 2051              	.LBB1079:
 2052              	.LBI1079:
 2053              		.loc 7 76 5 view .LVU537
 2054              		.loc 7 76 5 is_stmt 0 view .LVU538
 2055              	.LBE1079:
 2056              	.LBB1080:
 2057              	.LBI1080:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 2058              		.loc 11 608 28 is_stmt 1 view .LVU539
 2059              	.LBB1081:
 2060              	.LBI1081:
 2061              		.loc 7 76 5 view .LVU540
 2062              		.loc 7 76 5 is_stmt 0 view .LVU541
 2063              	.LBE1081:
 2064              	.LBB1082:
 2065              	.LBI1082:
ARM GAS  /tmp/ccoPBaGE.s 			page 116


 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2066              		.loc 11 301 42 is_stmt 1 view .LVU542
 2067              	.LBB1083:
 2068              	.LBI1083:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 2069              		.loc 11 116 2 view .LVU543
 2070              	.LBB1084:
 2071              	.LBI1084:
 2072              		.loc 7 76 5 view .LVU544
 2073              		.loc 7 76 5 is_stmt 0 view .LVU545
 2074              	.LBE1084:
 2075              	.LBB1085:
 2076              	.LBI1085:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 2077              		.loc 11 204 6 is_stmt 1 view .LVU546
 2078              	.LBB1086:
 2079              	.LBB1087:
 2080              	.LBI1087:
 2081              		.loc 7 76 5 view .LVU547
 2082              		.loc 7 76 5 is_stmt 0 view .LVU548
 2083              	.LBE1087:
 2084              	.LBE1086:
 2085              	.LBE1085:
 2086              	.LBE1083:
 2087              	.LBE1082:
 2088              	.LBE1080:
 2089              	.LBE1078:
 2090              	.LBE1077:
 273:Src/encoder.cpp ****             break;
 2091              		.loc 1 273 9 is_stmt 1 view .LVU549
 272:Src/encoder.cpp ****         if (reached_target_dist) {
 2092              		.loc 1 272 118 is_stmt 0 view .LVU550
 2093 01de 6268     		ldr	r2, [r4, #4]
 273:Src/encoder.cpp ****             break;
 2094              		.loc 1 273 9 view .LVU551
 2095 01e0 92ED077A 		vldr.32	s14, [r2, #28]
 2096 01e4 D3ED187A 		vldr.32	s15, [r3, #96]
 2097 01e8 B4EEE77A 		vcmpe.f32	s14, s15
 2098 01ec F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2099 01f0 0CD9     		bls	.L69
 276:Src/encoder.cpp ****         num_steps++;
 2100              		.loc 1 276 9 is_stmt 1 view .LVU552
 276:Src/encoder.cpp ****         num_steps++;
 2101              		.loc 1 276 24 is_stmt 0 view .LVU553
 2102 01f2 2369     		ldr	r3, [r4, #16]
 2103              	.LVL129:
 276:Src/encoder.cpp ****         num_steps++;
 2104              		.loc 1 276 21 view .LVU554
 2105 01f4 DF19     		adds	r7, r3, r7
 2106              	.LVL130:
 276:Src/encoder.cpp ****         num_steps++;
 2107              		.loc 1 276 21 view .LVU555
 2108 01f6 48EBE378 		adc	r8, r8, r3, asr #31
 2109              	.LVL131:
 277:Src/encoder.cpp ****         osDelay(1);
 2110              		.loc 1 277 9 is_stmt 1 view .LVU556
 277:Src/encoder.cpp ****         osDelay(1);
ARM GAS  /tmp/ccoPBaGE.s 			page 117


 2111              		.loc 1 277 18 is_stmt 0 view .LVU557
 2112 01fa 0135     		adds	r5, r5, #1
 2113              	.LVL132:
 2114              		.loc 1 278 9 is_stmt 1 view .LVU558
 2115              		.loc 1 278 16 is_stmt 0 view .LVU559
 2116 01fc 4846     		mov	r0, r9
 2117 01fe FFF7FEFF 		bl	osDelay
 2118              	.LVL133:
 2119              		.loc 1 278 16 view .LVU560
 2120              	.LBE1088:
 271:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(-INF
 2121              		.loc 1 271 5 is_stmt 1 view .LVU561
 271:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(-INF
 2122              		.loc 1 271 68 view .LVU562
 271:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(-INF
 2123              		.loc 1 271 13 is_stmt 0 view .LVU563
 2124 0202 A368     		ldr	r3, [r4, #8]
 271:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(-INF
 2125              		.loc 1 271 68 view .LVU564
 2126 0204 93F87E21 		ldrb	r2, [r3, #382]	@ zero_extendqisi2
 2127 0208 002A     		cmp	r2, #0
 2128 020a E4D0     		beq	.L70
 2129              	.LVL134:
 2130              	.L69:
 279:Src/encoder.cpp ****     }
 280:Src/encoder.cpp **** 
 281:Src/encoder.cpp ****     // Check response and direction
 282:Src/encoder.cpp ****     if (shadow_count_ > init_enc_val + 8) {
 2131              		.loc 1 282 5 is_stmt 1 view .LVU565
 2132              		.loc 1 282 9 is_stmt 0 view .LVU566
 2133 020c 2369     		ldr	r3, [r4, #16]
 2134              		.loc 1 282 38 view .LVU567
 2135 020e 0AF10802 		add	r2, r10, #8
 2136              		.loc 1 282 5 view .LVU568
 2137 0212 9342     		cmp	r3, r2
 2138 0214 72DD     		ble	.L71
 283:Src/encoder.cpp ****         // motor same dir as encoder
 284:Src/encoder.cpp ****         config_.direction = 1;
 2139              		.loc 1 284 9 is_stmt 1 view .LVU569
 2140 0216 6368     		ldr	r3, [r4, #4]
 2141              		.loc 1 284 27 is_stmt 0 view .LVU570
 2142 0218 0122     		movs	r2, #1
 2143 021a DA63     		str	r2, [r3, #60]
 2144              	.L72:
 285:Src/encoder.cpp ****     } else if (shadow_count_ < init_enc_val - 8) {
 286:Src/encoder.cpp ****         // motor opposite dir as encoder
 287:Src/encoder.cpp ****         config_.direction = -1;
 288:Src/encoder.cpp ****     } else {
 289:Src/encoder.cpp ****         // Encoder response error
 290:Src/encoder.cpp ****         set_error(ERROR_NO_RESPONSE);
 291:Src/encoder.cpp ****         axis_->motor_.disarm();
 292:Src/encoder.cpp ****         return false;
 293:Src/encoder.cpp ****     }
 294:Src/encoder.cpp **** 
 295:Src/encoder.cpp ****     // Check CPR
 296:Src/encoder.cpp ****     float elec_rad_per_enc = axis_->motor_.config_.pole_pairs * 2 * M_PI * (1.0f / (float)(config_.
 2145              		.loc 1 296 5 is_stmt 1 view .LVU571
ARM GAS  /tmp/ccoPBaGE.s 			page 118


 2146              		.loc 1 296 92 is_stmt 0 view .LVU572
 2147 021c 6268     		ldr	r2, [r4, #4]
 2148              	.LVL135:
 297:Src/encoder.cpp ****     float expected_encoder_delta = config_.calib_scan_distance / elec_rad_per_enc;
 2149              		.loc 1 297 5 is_stmt 1 view .LVU573
 296:Src/encoder.cpp ****     float expected_encoder_delta = config_.calib_scan_distance / elec_rad_per_enc;
 2150              		.loc 1 296 37 is_stmt 0 view .LVU574
 2151 021e A368     		ldr	r3, [r4, #8]
 296:Src/encoder.cpp ****     float expected_encoder_delta = config_.calib_scan_distance / elec_rad_per_enc;
 2152              		.loc 1 296 44 view .LVU575
 2153 0220 DB6E     		ldr	r3, [r3, #108]
 296:Src/encoder.cpp ****     float expected_encoder_delta = config_.calib_scan_distance / elec_rad_per_enc;
 2154              		.loc 1 296 52 view .LVU576
 2155 0222 5B68     		ldr	r3, [r3, #4]
 296:Src/encoder.cpp ****     float expected_encoder_delta = config_.calib_scan_distance / elec_rad_per_enc;
 2156              		.loc 1 296 63 view .LVU577
 2157 0224 5B68     		ldr	r3, [r3, #4]
 2158 0226 5B00     		lsls	r3, r3, #1
 2159 0228 07EE903A 		vmov	s15, r3	@ int
 296:Src/encoder.cpp ****     float expected_encoder_delta = config_.calib_scan_distance / elec_rad_per_enc;
 2160              		.loc 1 296 67 view .LVU578
 2161 022c F8EEE77A 		vcvt.f32.s32	s15, s15
 2162 0230 9FED557A 		vldr.32	s14, .L93+8
 2163 0234 67EE877A 		vmul.f32	s15, s15, s14
 296:Src/encoder.cpp ****     float expected_encoder_delta = config_.calib_scan_distance / elec_rad_per_enc;
 2164              		.loc 1 296 84 view .LVU579
 2165 0238 92ED027A 		vldr.32	s14, [r2, #8]	@ int
 2166 023c B8EEC77A 		vcvt.f32.s32	s14, s14
 296:Src/encoder.cpp ****     float expected_encoder_delta = config_.calib_scan_distance / elec_rad_per_enc;
 2167              		.loc 1 296 82 view .LVU580
 2168 0240 B7EE006A 		vmov.f32	s12, #1.0e+0
 2169 0244 C6EE076A 		vdiv.f32	s13, s12, s14
 296:Src/encoder.cpp ****     float expected_encoder_delta = config_.calib_scan_distance / elec_rad_per_enc;
 2170              		.loc 1 296 11 view .LVU581
 2171 0248 67EEA67A 		vmul.f32	s15, s15, s13
 2172              		.loc 1 297 11 view .LVU582
 2173 024c D2ED076A 		vldr.32	s13, [r2, #28]
 2174 0250 86EEA77A 		vdiv.f32	s14, s13, s15
 2175              	.LVL136:
 298:Src/encoder.cpp ****     calib_scan_response_ = std::abs(shadow_count_ - init_enc_val);
 2176              		.loc 1 298 5 is_stmt 1 view .LVU583
 2177              	.LBB1089:
 2178              	.LBI1089:
 2179              		.file 12 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // -*- C++ -*- C library enhancements header.
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // Copyright (C) 2016-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
ARM GAS  /tmp/ccoPBaGE.s 			page 119


  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** /** @file include/bits/std_abs.h
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****  *  Do not attempt to use it directly. @headername{cmath, cstdlib}
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****  */
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifndef _GLIBCXX_BITS_STD_ABS_H
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #define _GLIBCXX_BITS_STD_ABS_H
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #pragma GCC system_header
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #include <bits/c++config.h>
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #include_next <stdlib.h>
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifdef __CORRECT_ISO_CPP_MATH_H_PROTO
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** # include_next <math.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #endif
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #undef abs
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** extern "C++"
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** {
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** namespace std _GLIBCXX_VISIBILITY(default)
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** {
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   using ::abs;
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   inline long
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   abs(long __i) { return __builtin_labs(__i); }
 2180              		.loc 12 56 3 view .LVU584
 2181              	.LBB1090:
 2182              		.loc 12 56 19 view .LVU585
 2183              		.loc 12 56 19 is_stmt 0 view .LVU586
 2184              	.LBE1090:
 2185              	.LBE1089:
 2186              		.loc 1 298 36 view .LVU587
 2187 0254 2369     		ldr	r3, [r4, #16]
 2188 0256 A3EB0A03 		sub	r3, r3, r10
 2189              	.LBB1092:
 2190              	.LBB1091:
 2191              		.loc 12 56 44 view .LVU588
 2192 025a 002B     		cmp	r3, #0
 2193 025c B8BF     		it	lt
ARM GAS  /tmp/ccoPBaGE.s 			page 120


 2194 025e 5B42     		rsblt	r3, r3, #0
 2195              	.LBE1091:
 2196              	.LBE1092:
 2197              		.loc 1 298 26 view .LVU589
 2198 0260 07EE903A 		vmov	s15, r3	@ int
 2199 0264 F8EEE77A 		vcvt.f32.s32	s15, s15
 2200 0268 C4ED187A 		vstr.32	s15, [r4, #96]
 2201              	.LVL137:
 299:Src/encoder.cpp ****     if (std::abs(calib_scan_response_ - expected_encoder_delta) / expected_encoder_delta > config_.
 2202              		.loc 1 299 5 is_stmt 1 view .LVU590
 2203              	.LBB1093:
 2204              	.LBI1093:
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #endif
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifdef _GLIBCXX_USE_LONG_LONG
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   inline long long
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   abs(long long __x) { return __builtin_llabs (__x); }
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #endif
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // _GLIBCXX_RESOLVE_LIB_DEFECTS
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // 2192. Validity and return type of std::abs(0u) is unclear
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // 2294. <cstdlib> should declare abs(double)
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** // 2735. std::abs(short), std::abs(signed char) and others should return int
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   inline _GLIBCXX_CONSTEXPR double
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   abs(double __x)
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   { return __builtin_fabs(__x); }
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h **** 
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   inline _GLIBCXX_CONSTEXPR float
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   abs(float __x)
 2205              		.loc 12 75 3 view .LVU591
 2206              	.LBB1094:
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   { return __builtin_fabsf(__x); }
 2207              		.loc 12 76 5 view .LVU592
 2208              		.loc 12 76 5 is_stmt 0 view .LVU593
 2209              	.LBE1094:
 2210              	.LBE1093:
 2211              		.loc 1 299 17 view .LVU594
 2212 026c 77EEC77A 		vsub.f32	s15, s15, s14
 2213              	.LBB1096:
 2214              	.LBB1095:
 2215              		.loc 12 76 31 view .LVU595
 2216 0270 F0EEE77A 		vabs.f32	s15, s15
 2217              	.LBE1095:
 2218              	.LBE1096:
 2219              		.loc 1 299 65 view .LVU596
 2220 0274 C7EE876A 		vdiv.f32	s13, s15, s14
 2221              		.loc 1 299 5 view .LVU597
 2222 0278 D2ED067A 		vldr.32	s15, [r2, #24]
 2223 027c F4EEE76A 		vcmpe.f32	s13, s15
 2224 0280 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2225 0284 4DDC     		bgt	.L92
 300:Src/encoder.cpp ****         set_error(ERROR_CPR_POLEPAIRS_MISMATCH);
 301:Src/encoder.cpp ****         axis_->motor_.disarm();
 302:Src/encoder.cpp ****         return false;
 303:Src/encoder.cpp ****     }
ARM GAS  /tmp/ccoPBaGE.s 			page 121


 304:Src/encoder.cpp **** 
 305:Src/encoder.cpp ****     mask = cpu_enter_critical();
 2226              		.loc 1 305 5 is_stmt 1 view .LVU598
 2227              	.LBB1097:
 2228              	.LBI1097:
  66:Inc/low_level.h ****     uint32_t primask = __get_PRIMASK();
 2229              		.loc 3 66 17 view .LVU599
 2230              	.LBB1098:
  67:Inc/low_level.h ****     __disable_irq();
 2231              		.loc 3 67 5 view .LVU600
 2232              	.LBB1099:
 2233              	.LBI1099:
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2234              		.loc 4 449 31 view .LVU601
 2235              	.LBB1100:
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 2236              		.loc 4 451 3 view .LVU602
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 2237              		.loc 4 453 3 view .LVU603
 2238              		.syntax unified
 2239              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2240 0286 EFF31083 		MRS r3, primask
 2241              	@ 0 "" 2
 2242              	.LVL138:
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2243              		.loc 4 454 3 view .LVU604
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2244              		.loc 4 454 3 is_stmt 0 view .LVU605
 2245              		.thumb
 2246              		.syntax unified
 2247              	.LBE1100:
 2248              	.LBE1099:
  68:Inc/low_level.h ****     return primask;
 2249              		.loc 3 68 5 is_stmt 1 view .LVU606
 2250              	.LBB1101:
 2251              	.LBI1101:
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2252              		.loc 4 207 27 view .LVU607
 2253              	.LBB1102:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2254              		.loc 4 209 3 view .LVU608
 2255              		.syntax unified
 2256              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2257 028a 72B6     		cpsid i
 2258              	@ 0 "" 2
 2259              		.thumb
 2260              		.syntax unified
 2261              	.LBE1102:
 2262              	.LBE1101:
  69:Inc/low_level.h **** }
 2263              		.loc 3 69 5 view .LVU609
 2264              	.LVL139:
  69:Inc/low_level.h **** }
 2265              		.loc 3 69 5 is_stmt 0 view .LVU610
 2266              	.LBE1098:
 2267              	.LBE1097:
 306:Src/encoder.cpp ****     {
ARM GAS  /tmp/ccoPBaGE.s 			page 122


 2268              		.loc 1 306 5 is_stmt 1 view .LVU611
 307:Src/encoder.cpp ****         axis_->open_loop_controller_.target_vel_ = -config_.calib_scan_omega;
 2269              		.loc 1 307 9 view .LVU612
 2270 028c A268     		ldr	r2, [r4, #8]
 2271              		.loc 1 307 61 is_stmt 0 view .LVU613
 2272 028e 6168     		ldr	r1, [r4, #4]
 2273              		.loc 1 307 52 view .LVU614
 2274 0290 D1ED087A 		vldr.32	s15, [r1, #32]
 2275 0294 F1EE677A 		vneg.f32	s15, s15
 2276              		.loc 1 307 50 view .LVU615
 2277 0298 C2ED087A 		vstr.32	s15, [r2, #32]
 308:Src/encoder.cpp ****     }
 309:Src/encoder.cpp ****     cpu_exit_critical(mask);
 2278              		.loc 1 309 5 is_stmt 1 view .LVU616
 2279              	.LVL140:
 2280              	.LBB1103:
 2281              	.LBI1103:
  72:Inc/low_level.h ****     __set_PRIMASK(priority_mask);
 2282              		.loc 3 72 13 view .LVU617
 2283              	.LBE1103:
 2284              		.loc 3 73 5 view .LVU618
 2285              	.LBB1106:
 2286              	.LBB1104:
 2287              	.LBI1104:
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2288              		.loc 4 479 27 view .LVU619
 2289              	.LBB1105:
 2290              		.loc 4 481 3 view .LVU620
 2291              		.syntax unified
 2292              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2293 029c 83F31088 		MSR primask, r3
 2294              	@ 0 "" 2
 2295              	.LVL141:
 2296              		.loc 4 481 3 is_stmt 0 view .LVU621
 2297              		.thumb
 2298              		.syntax unified
 2299              	.LBE1105:
 2300              	.LBE1104:
 2301              	.LBE1106:
 310:Src/encoder.cpp **** 
 311:Src/encoder.cpp ****     // scan backwards
 312:Src/encoder.cpp ****     while ((axis_->requested_state_ == Axis::AXIS_STATE_UNDEFINED) && axis_->motor_.is_armed_) {
 2302              		.loc 1 312 5 is_stmt 1 view .LVU622
 2303              		.loc 1 312 68 view .LVU623
 2304              		.loc 1 312 13 is_stmt 0 view .LVU624
 2305 02a0 A368     		ldr	r3, [r4, #8]
 2306              	.LVL142:
 2307              		.loc 1 312 68 view .LVU625
 2308 02a2 93F87E21 		ldrb	r2, [r3, #382]	@ zero_extendqisi2
 2309 02a6 D2B9     		cbnz	r2, .L76
 2310              	.LBB1107:
 313:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(INFI
 314:Src/encoder.cpp ****         if (reached_target_dist) {
 315:Src/encoder.cpp ****             break;
 316:Src/encoder.cpp ****         }
 317:Src/encoder.cpp ****         encvaluesum += shadow_count_;
 318:Src/encoder.cpp ****         num_steps++;
ARM GAS  /tmp/ccoPBaGE.s 			page 123


 319:Src/encoder.cpp ****         osDelay(1);
 2311              		.loc 1 319 16 view .LVU626
 2312 02a8 4FF00109 		mov	r9, #1
 2313              	.LVL143:
 2314              	.L78:
 2315              		.loc 1 319 16 view .LVU627
 2316              	.LBE1107:
 312:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(INFI
 2317              		.loc 1 312 78 discriminator 1 view .LVU628
 2318 02ac D86E     		ldr	r0, [r3, #108]
 312:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(INFI
 2319              		.loc 1 312 85 discriminator 1 view .LVU629
 2320 02ae 90F83820 		ldrb	r2, [r0, #56]	@ zero_extendqisi2
 312:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(INFI
 2321              		.loc 1 312 68 discriminator 1 view .LVU630
 2322 02b2 002A     		cmp	r2, #0
 2323 02b4 62D0     		beq	.L82
 2324              	.LBB1119:
 313:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(INFI
 2325              		.loc 1 313 9 is_stmt 1 view .LVU631
 2326              	.LVL144:
 2327              	.LBB1108:
 2328              	.LBI1108:
 102:Inc/component.hpp ****         return content_;
 2329              		.loc 2 102 22 view .LVU632
 2330              	.LBB1109:
 2331              	.LBI1109:
 2332              		.loc 11 701 2 view .LVU633
 2333              	.LBB1110:
 2334              	.LBI1110:
 2335              		.loc 7 76 5 view .LVU634
 2336              		.loc 7 76 5 is_stmt 0 view .LVU635
 2337              	.LBE1110:
 2338              	.LBB1111:
 2339              	.LBI1111:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 2340              		.loc 11 608 28 is_stmt 1 view .LVU636
 2341              	.LBB1112:
 2342              	.LBI1112:
 2343              		.loc 7 76 5 view .LVU637
 2344              		.loc 7 76 5 is_stmt 0 view .LVU638
 2345              	.LBE1112:
 2346              	.LBB1113:
 2347              	.LBI1113:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 2348              		.loc 11 301 42 is_stmt 1 view .LVU639
 2349              	.LBB1114:
 2350              	.LBI1114:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 2351              		.loc 11 116 2 view .LVU640
 2352              	.LBB1115:
 2353              	.LBI1115:
 2354              		.loc 7 76 5 view .LVU641
 2355              		.loc 7 76 5 is_stmt 0 view .LVU642
 2356              	.LBE1115:
 2357              	.LBB1116:
 2358              	.LBI1116:
ARM GAS  /tmp/ccoPBaGE.s 			page 124


 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 2359              		.loc 11 204 6 is_stmt 1 view .LVU643
 2360              	.LBB1117:
 2361              	.LBB1118:
 2362              	.LBI1118:
 2363              		.loc 7 76 5 view .LVU644
 2364              		.loc 7 76 5 is_stmt 0 view .LVU645
 2365              	.LBE1118:
 2366              	.LBE1117:
 2367              	.LBE1116:
 2368              	.LBE1114:
 2369              	.LBE1113:
 2370              	.LBE1111:
 2371              	.LBE1109:
 2372              	.LBE1108:
 314:Src/encoder.cpp ****             break;
 2373              		.loc 1 314 9 is_stmt 1 view .LVU646
 2374 02b6 D3ED187A 		vldr.32	s15, [r3, #96]
 2375 02ba F5EEC07A 		vcmpe.f32	s15, #0
 2376 02be F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2377 02c2 38D9     		bls	.L77
 317:Src/encoder.cpp ****         num_steps++;
 2378              		.loc 1 317 9 view .LVU647
 317:Src/encoder.cpp ****         num_steps++;
 2379              		.loc 1 317 24 is_stmt 0 view .LVU648
 2380 02c4 2369     		ldr	r3, [r4, #16]
 2381              	.LVL145:
 317:Src/encoder.cpp ****         num_steps++;
 2382              		.loc 1 317 21 view .LVU649
 2383 02c6 DF19     		adds	r7, r3, r7
 2384              	.LVL146:
 317:Src/encoder.cpp ****         num_steps++;
 2385              		.loc 1 317 21 view .LVU650
 2386 02c8 48EBE378 		adc	r8, r8, r3, asr #31
 2387              	.LVL147:
 318:Src/encoder.cpp ****         osDelay(1);
 2388              		.loc 1 318 9 is_stmt 1 view .LVU651
 318:Src/encoder.cpp ****         osDelay(1);
 2389              		.loc 1 318 18 is_stmt 0 view .LVU652
 2390 02cc 0135     		adds	r5, r5, #1
 2391              	.LVL148:
 2392              		.loc 1 319 9 is_stmt 1 view .LVU653
 2393              		.loc 1 319 16 is_stmt 0 view .LVU654
 2394 02ce 4846     		mov	r0, r9
 2395 02d0 FFF7FEFF 		bl	osDelay
 2396              	.LVL149:
 2397              		.loc 1 319 16 view .LVU655
 2398              	.LBE1119:
 312:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(INFI
 2399              		.loc 1 312 5 is_stmt 1 view .LVU656
 312:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(INFI
 2400              		.loc 1 312 68 view .LVU657
 312:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(INFI
 2401              		.loc 1 312 13 is_stmt 0 view .LVU658
 2402 02d4 A368     		ldr	r3, [r4, #8]
 312:Src/encoder.cpp ****         bool reached_target_dist = axis_->open_loop_controller_.total_distance_.any().value_or(INFI
 2403              		.loc 1 312 68 view .LVU659
ARM GAS  /tmp/ccoPBaGE.s 			page 125


 2404 02d6 93F87E21 		ldrb	r2, [r3, #382]	@ zero_extendqisi2
 2405 02da 002A     		cmp	r2, #0
 2406 02dc E6D0     		beq	.L78
 2407              	.LVL150:
 2408              	.L76:
 320:Src/encoder.cpp ****     }
 321:Src/encoder.cpp **** 
 322:Src/encoder.cpp ****     // Motor disarmed because of an error
 323:Src/encoder.cpp ****     if (!axis_->motor_.is_armed_) {
 2409              		.loc 1 323 5 is_stmt 1 view .LVU660
 2410              		.loc 1 323 17 is_stmt 0 view .LVU661
 2411 02de D86E     		ldr	r0, [r3, #108]
 2412              		.loc 1 323 24 view .LVU662
 2413 02e0 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 2414              		.loc 1 323 5 view .LVU663
 2415 02e4 3BBB     		cbnz	r3, .L77
 324:Src/encoder.cpp ****         return false;
 2416              		.loc 1 324 16 view .LVU664
 2417 02e6 1E46     		mov	r6, r3
 2418 02e8 02E0     		b	.L66
 2419              	.LVL151:
 2420              	.L91:
 2421              	.LBB1120:
 252:Src/encoder.cpp ****             return false; // TODO: return "aborted" error code
 2422              		.loc 1 252 13 is_stmt 1 view .LVU665
 252:Src/encoder.cpp ****             return false; // TODO: return "aborted" error code
 2423              		.loc 1 252 33 is_stmt 0 view .LVU666
 2424 02ea FFF7FEFF 		bl	_ZN5Motor6disarmEv
 2425              	.LVL152:
 253:Src/encoder.cpp ****         }
 2426              		.loc 1 253 13 is_stmt 1 view .LVU667
 253:Src/encoder.cpp ****         }
 2427              		.loc 1 253 20 is_stmt 0 view .LVU668
 2428 02ee 0026     		movs	r6, #0
 2429              	.LVL153:
 2430              	.L66:
 253:Src/encoder.cpp ****         }
 2431              		.loc 1 253 20 view .LVU669
 2432              	.LBE1120:
 325:Src/encoder.cpp ****     }
 326:Src/encoder.cpp **** 
 327:Src/encoder.cpp ****     axis_->motor_.disarm();
 328:Src/encoder.cpp **** 
 329:Src/encoder.cpp ****     config_.offset = encvaluesum / num_steps;
 330:Src/encoder.cpp ****     int32_t residual = encvaluesum - ((int64_t)config_.offset * (int64_t)num_steps);
 331:Src/encoder.cpp ****     config_.offset_float = (float)residual / (float)num_steps + 0.5f;  // add 0.5 to center-align s
 332:Src/encoder.cpp **** 
 333:Src/encoder.cpp ****     is_ready_ = true;
 334:Src/encoder.cpp ****     return true;
 335:Src/encoder.cpp **** 
 336:Src/encoder.cpp **** }
 2433              		.loc 1 336 1 view .LVU670
 2434 02f0 3046     		mov	r0, r6
 2435 02f2 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2436              	.LVL154:
 2437              	.L81:
 261:Src/encoder.cpp **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 126


 2438              		.loc 1 261 13 view .LVU671
 2439 02f6 0027     		movs	r7, #0
 2440 02f8 B846     		mov	r8, r7
 2441 02fa 87E7     		b	.L69
 2442              	.LVL155:
 2443              	.L71:
 285:Src/encoder.cpp ****         // motor opposite dir as encoder
 2444              		.loc 1 285 12 is_stmt 1 view .LVU672
 285:Src/encoder.cpp ****         // motor opposite dir as encoder
 2445              		.loc 1 285 45 is_stmt 0 view .LVU673
 2446 02fc AAF10802 		sub	r2, r10, #8
 285:Src/encoder.cpp ****         // motor opposite dir as encoder
 2447              		.loc 1 285 12 view .LVU674
 2448 0300 9342     		cmp	r3, r2
 2449 0302 04DA     		bge	.L73
 287:Src/encoder.cpp ****     } else {
 2450              		.loc 1 287 9 is_stmt 1 view .LVU675
 2451 0304 6368     		ldr	r3, [r4, #4]
 287:Src/encoder.cpp ****     } else {
 2452              		.loc 1 287 27 is_stmt 0 view .LVU676
 2453 0306 4FF0FF32 		mov	r2, #-1
 2454 030a DA63     		str	r2, [r3, #60]
 2455 030c 86E7     		b	.L72
 2456              	.L73:
 290:Src/encoder.cpp ****         axis_->motor_.disarm();
 2457              		.loc 1 290 9 is_stmt 1 view .LVU677
 290:Src/encoder.cpp ****         axis_->motor_.disarm();
 2458              		.loc 1 290 18 is_stmt 0 view .LVU678
 2459 030e 0421     		movs	r1, #4
 2460 0310 2046     		mov	r0, r4
 2461 0312 FFF7FEFF 		bl	_ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE
 2462              	.LVL156:
 291:Src/encoder.cpp ****         return false;
 2463              		.loc 1 291 9 is_stmt 1 view .LVU679
 291:Src/encoder.cpp ****         return false;
 2464              		.loc 1 291 16 is_stmt 0 view .LVU680
 2465 0316 A368     		ldr	r3, [r4, #8]
 291:Src/encoder.cpp ****         return false;
 2466              		.loc 1 291 29 view .LVU681
 2467 0318 D86E     		ldr	r0, [r3, #108]
 2468 031a FFF7FEFF 		bl	_ZN5Motor6disarmEv
 2469              	.LVL157:
 292:Src/encoder.cpp ****     }
 2470              		.loc 1 292 9 is_stmt 1 view .LVU682
 292:Src/encoder.cpp ****     }
 2471              		.loc 1 292 16 is_stmt 0 view .LVU683
 2472 031e 0026     		movs	r6, #0
 2473 0320 E6E7     		b	.L66
 2474              	.LVL158:
 2475              	.L92:
 300:Src/encoder.cpp ****         axis_->motor_.disarm();
 2476              		.loc 1 300 9 is_stmt 1 view .LVU684
 300:Src/encoder.cpp ****         axis_->motor_.disarm();
 2477              		.loc 1 300 18 is_stmt 0 view .LVU685
 2478 0322 0221     		movs	r1, #2
 2479 0324 2046     		mov	r0, r4
 2480 0326 FFF7FEFF 		bl	_ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE
ARM GAS  /tmp/ccoPBaGE.s 			page 127


 2481              	.LVL159:
 301:Src/encoder.cpp ****         return false;
 2482              		.loc 1 301 9 is_stmt 1 view .LVU686
 301:Src/encoder.cpp ****         return false;
 2483              		.loc 1 301 16 is_stmt 0 view .LVU687
 2484 032a A368     		ldr	r3, [r4, #8]
 301:Src/encoder.cpp ****         return false;
 2485              		.loc 1 301 29 view .LVU688
 2486 032c D86E     		ldr	r0, [r3, #108]
 2487 032e FFF7FEFF 		bl	_ZN5Motor6disarmEv
 2488              	.LVL160:
 302:Src/encoder.cpp ****     }
 2489              		.loc 1 302 9 is_stmt 1 view .LVU689
 302:Src/encoder.cpp ****     }
 2490              		.loc 1 302 16 is_stmt 0 view .LVU690
 2491 0332 0026     		movs	r6, #0
 2492 0334 DCE7     		b	.L66
 2493              	.LVL161:
 2494              	.L77:
 327:Src/encoder.cpp **** 
 2495              		.loc 1 327 5 is_stmt 1 view .LVU691
 327:Src/encoder.cpp **** 
 2496              		.loc 1 327 25 is_stmt 0 view .LVU692
 2497 0336 FFF7FEFF 		bl	_ZN5Motor6disarmEv
 2498              	.LVL162:
 329:Src/encoder.cpp ****     int32_t residual = encvaluesum - ((int64_t)config_.offset * (int64_t)num_steps);
 2499              		.loc 1 329 5 is_stmt 1 view .LVU693
 2500 033a D4F80490 		ldr	r9, [r4, #4]
 329:Src/encoder.cpp ****     int32_t residual = encvaluesum - ((int64_t)config_.offset * (int64_t)num_steps);
 2501              		.loc 1 329 34 is_stmt 0 view .LVU694
 2502 033e 2A46     		mov	r2, r5
 2503 0340 0023     		movs	r3, #0
 2504 0342 3846     		mov	r0, r7
 2505 0344 4146     		mov	r1, r8
 2506 0346 FFF7FEFF 		bl	__aeabi_ldivmod
 2507              	.LVL163:
 329:Src/encoder.cpp ****     int32_t residual = encvaluesum - ((int64_t)config_.offset * (int64_t)num_steps);
 2508              		.loc 1 329 20 view .LVU695
 2509 034a C9F80C00 		str	r0, [r9, #12]
 330:Src/encoder.cpp ****     config_.offset_float = (float)residual / (float)num_steps + 0.5f;  // add 0.5 to center-align s
 2510              		.loc 1 330 5 is_stmt 1 view .LVU696
 330:Src/encoder.cpp ****     config_.offset_float = (float)residual / (float)num_steps + 0.5f;  // add 0.5 to center-align s
 2511              		.loc 1 330 48 is_stmt 0 view .LVU697
 2512 034e 6368     		ldr	r3, [r4, #4]
 2513              	.LVL164:
 331:Src/encoder.cpp **** 
 2514              		.loc 1 331 5 is_stmt 1 view .LVU698
 330:Src/encoder.cpp ****     config_.offset_float = (float)residual / (float)num_steps + 0.5f;  // add 0.5 to center-align s
 2515              		.loc 1 330 36 is_stmt 0 view .LVU699
 2516 0350 DA68     		ldr	r2, [r3, #12]
 2517 0352 02FB1577 		mls	r7, r2, r5, r7
 2518              	.LVL165:
 331:Src/encoder.cpp **** 
 2519              		.loc 1 331 28 view .LVU700
 2520 0356 07EE907A 		vmov	s15, r7	@ int
 2521 035a B8EEE77A 		vcvt.f32.s32	s14, s15
 331:Src/encoder.cpp **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 128


 2522              		.loc 1 331 46 view .LVU701
 2523 035e 07EE905A 		vmov	s15, r5	@ int
 2524 0362 F8EE677A 		vcvt.f32.u32	s15, s15
 331:Src/encoder.cpp **** 
 2525              		.loc 1 331 44 view .LVU702
 2526 0366 C7EE276A 		vdiv.f32	s13, s14, s15
 331:Src/encoder.cpp **** 
 2527              		.loc 1 331 63 view .LVU703
 2528 036a F6EE007A 		vmov.f32	s15, #5.0e-1
 2529 036e 76EEA77A 		vadd.f32	s15, s13, s15
 331:Src/encoder.cpp **** 
 2530              		.loc 1 331 26 view .LVU704
 2531 0372 C3ED047A 		vstr.32	s15, [r3, #16]
 333:Src/encoder.cpp ****     return true;
 2532              		.loc 1 333 5 is_stmt 1 view .LVU705
 333:Src/encoder.cpp ****     return true;
 2533              		.loc 1 333 15 is_stmt 0 view .LVU706
 2534 0376 0123     		movs	r3, #1
 2535 0378 E373     		strb	r3, [r4, #15]
 334:Src/encoder.cpp **** 
 2536              		.loc 1 334 5 is_stmt 1 view .LVU707
 334:Src/encoder.cpp **** 
 2537              		.loc 1 334 12 is_stmt 0 view .LVU708
 2538 037a B9E7     		b	.L66
 2539              	.LVL166:
 2540              	.L82:
 324:Src/encoder.cpp ****     }
 2541              		.loc 1 324 16 view .LVU709
 2542 037c 1646     		mov	r6, r2
 2543 037e B7E7     		b	.L66
 2544              	.L94:
 2545              		.align	2
 2546              	.L93:
 2547 0380 00000000 		.word	0
 2548 0384 DB0FC940 		.word	1086918619
 2549 0388 DB0F4940 		.word	1078530011
 2550              		.cfi_endproc
 2551              	.LFE4960:
 2553              		.section	.text._ZN7Encoder10sample_nowEv,"ax",%progbits
 2554              		.align	1
 2555              		.global	_ZN7Encoder10sample_nowEv
 2556              		.syntax unified
 2557              		.thumb
 2558              		.thumb_func
 2559              		.fpu fpv4-sp-d16
 2561              	_ZN7Encoder10sample_nowEv:
 2562              	.LVL167:
 2563              	.LFB4962:
 337:Src/encoder.cpp **** 
 338:Src/encoder.cpp **** static bool decode_hall(uint8_t hall_state, int32_t* hall_cnt) {
 339:Src/encoder.cpp ****     switch (hall_state) {
 340:Src/encoder.cpp ****         case 0b001: *hall_cnt = 0; return true;
 341:Src/encoder.cpp ****         case 0b011: *hall_cnt = 1; return true;
 342:Src/encoder.cpp ****         case 0b010: *hall_cnt = 2; return true;
 343:Src/encoder.cpp ****         case 0b110: *hall_cnt = 3; return true;
 344:Src/encoder.cpp ****         case 0b100: *hall_cnt = 4; return true;
 345:Src/encoder.cpp ****         case 0b101: *hall_cnt = 5; return true;
ARM GAS  /tmp/ccoPBaGE.s 			page 129


 346:Src/encoder.cpp ****         default: return false;
 347:Src/encoder.cpp ****     }
 348:Src/encoder.cpp **** }
 349:Src/encoder.cpp **** 
 350:Src/encoder.cpp **** void Encoder::sample_now() {
 2564              		.loc 1 350 28 is_stmt 1 view -0
 2565              		.cfi_startproc
 2566              		@ args = 0, pretend = 0, frame = 0
 2567              		@ frame_needed = 0, uses_anonymous_args = 0
 2568              		.loc 1 350 28 is_stmt 0 view .LVU711
 2569 0000 08B5     		push	{r3, lr}
 2570              	.LCFI13:
 2571              		.cfi_def_cfa_offset 8
 2572              		.cfi_offset 3, -8
 2573              		.cfi_offset 14, -4
 351:Src/encoder.cpp ****     switch (mode_) {
 2574              		.loc 1 351 5 is_stmt 1 view .LVU712
 2575 0002 B0F8D630 		ldrh	r3, [r0, #214]
 2576 0006 A3F58073 		sub	r3, r3, #256
 2577 000a 9BB2     		uxth	r3, r3
 2578 000c 032B     		cmp	r3, #3
 2579 000e 00D9     		bls	.L98
 2580              	.LVL168:
 2581              	.L95:
 352:Src/encoder.cpp ****         case MODE_HALL: {
 353:Src/encoder.cpp ****             // do nothing: samples already captured in general GPIO capture
 354:Src/encoder.cpp ****         } break;
 355:Src/encoder.cpp **** 
 356:Src/encoder.cpp ****         case MODE_SINCOS: {
 357:Src/encoder.cpp ****         } break;
 358:Src/encoder.cpp **** 
 359:Src/encoder.cpp ****         case MODE_SPI_ABS_AMS:
 360:Src/encoder.cpp ****         case MODE_SPI_ABS_CUI:
 361:Src/encoder.cpp ****         case MODE_SPI_ABS_AEAT:
 362:Src/encoder.cpp ****         case MODE_SPI_ABS_RLS:
 363:Src/encoder.cpp ****         {
 364:Src/encoder.cpp ****             axis_->motor_.log_timing(ODriveIntf::TIMING_LOG_SAMPLE_NOW);
 365:Src/encoder.cpp ****             // Do nothing
 366:Src/encoder.cpp ****         } break;
 367:Src/encoder.cpp **** 
 368:Src/encoder.cpp ****         default: {
 369:Src/encoder.cpp ****            //set_error(ERROR_UNSUPPORTED_ENCODER_MODE);
 370:Src/encoder.cpp ****         } break;
 371:Src/encoder.cpp ****     }
 372:Src/encoder.cpp **** }
 2582              		.loc 1 372 1 is_stmt 0 view .LVU713
 2583 0010 08BD     		pop	{r3, pc}
 2584              	.LVL169:
 2585              	.L98:
 359:Src/encoder.cpp ****         case MODE_SPI_ABS_CUI:
 2586              		.loc 1 359 9 is_stmt 1 view .LVU714
 360:Src/encoder.cpp ****         case MODE_SPI_ABS_AEAT:
 2587              		.loc 1 360 9 view .LVU715
 361:Src/encoder.cpp ****         case MODE_SPI_ABS_RLS:
 2588              		.loc 1 361 9 view .LVU716
 362:Src/encoder.cpp ****         {
 2589              		.loc 1 362 9 view .LVU717
ARM GAS  /tmp/ccoPBaGE.s 			page 130


 363:Src/encoder.cpp ****             axis_->motor_.log_timing(ODriveIntf::TIMING_LOG_SAMPLE_NOW);
 2590              		.loc 1 363 9 view .LVU718
 364:Src/encoder.cpp ****             // Do nothing
 2591              		.loc 1 364 13 view .LVU719
 364:Src/encoder.cpp ****             // Do nothing
 2592              		.loc 1 364 20 is_stmt 0 view .LVU720
 2593 0012 8368     		ldr	r3, [r0, #8]
 364:Src/encoder.cpp ****             // Do nothing
 2594              		.loc 1 364 37 view .LVU721
 2595 0014 0A21     		movs	r1, #10
 2596 0016 D86E     		ldr	r0, [r3, #108]
 2597              	.LVL170:
 364:Src/encoder.cpp ****             // Do nothing
 2598              		.loc 1 364 37 view .LVU722
 2599 0018 FFF7FEFF 		bl	_ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE
 2600              	.LVL171:
 366:Src/encoder.cpp **** 
 2601              		.loc 1 366 11 is_stmt 1 view .LVU723
 2602              		.loc 1 372 1 is_stmt 0 view .LVU724
 2603 001c F8E7     		b	.L95
 2604              		.cfi_endproc
 2605              	.LFE4962:
 2607              		.section	.text._ZN7Encoder12abs_spi_initEv,"ax",%progbits
 2608              		.align	1
 2609              		.global	_ZN7Encoder12abs_spi_initEv
 2610              		.syntax unified
 2611              		.thumb
 2612              		.thumb_func
 2613              		.fpu fpv4-sp-d16
 2615              	_ZN7Encoder12abs_spi_initEv:
 2616              	.LFB4963:
 373:Src/encoder.cpp **** 
 374:Src/encoder.cpp **** bool Encoder::abs_spi_init(){
 2617              		.loc 1 374 29 is_stmt 1 view -0
 2618              		.cfi_startproc
 2619              		@ Volatile: function does not return.
 2620              		@ args = 0, pretend = 0, frame = 0
 2621              		@ frame_needed = 0, uses_anonymous_args = 0
 2622              		@ link register save eliminated.
 2623              		.loc 1 374 29 is_stmt 0 view .LVU726
 2624              		.cfi_endproc
 2625              	.LFE4963:
 2627              		.section	.text._ZN7Encoder12abs_485_initEv,"ax",%progbits
 2628              		.align	1
 2629              		.global	_ZN7Encoder12abs_485_initEv
 2630              		.syntax unified
 2631              		.thumb
 2632              		.thumb_func
 2633              		.fpu fpv4-sp-d16
 2635              	_ZN7Encoder12abs_485_initEv:
 2636              	.LVL172:
 2637              	.LFB4965:
 375:Src/encoder.cpp **** //     if ((mode_ & MODE_FLAG_ABS) == 0x0)
 376:Src/encoder.cpp **** //         return false;
 377:Src/encoder.cpp **** 
 378:Src/encoder.cpp **** //     SPI_HandleTypeDef * spi = hw_config_.motor_spi;
 379:Src/encoder.cpp **** //     spi->Init.Mode = SPI_MODE_MASTER;
ARM GAS  /tmp/ccoPBaGE.s 			page 131


 380:Src/encoder.cpp **** //     spi->Init.Direction = SPI_DIRECTION_2LINES;
 381:Src/encoder.cpp **** //     spi->Init.DataSize = SPI_DATASIZE_8BIT;
 382:Src/encoder.cpp **** //     spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 383:Src/encoder.cpp **** //     spi->Init.CLKPhase = SPI_PHASE_2EDGE;
 384:Src/encoder.cpp **** //     spi->Init.NSS = SPI_NSS_SOFT;
 385:Src/encoder.cpp **** //     spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 386:Src/encoder.cpp **** //     spi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 387:Src/encoder.cpp **** //     spi->Init.TIMode = SPI_TIMODE_DISABLE;
 388:Src/encoder.cpp **** //     spi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 389:Src/encoder.cpp **** //     spi->Init.CRCPolynomial = 7;
 390:Src/encoder.cpp **** //     if (mode_ == MODE_SPI_ABS_AEAT) {
 391:Src/encoder.cpp **** //         spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 392:Src/encoder.cpp **** //     }
 393:Src/encoder.cpp **** //     HAL_SPI_DeInit(spi);
 394:Src/encoder.cpp **** //     //HAL_SPI_Init(spi);
 395:Src/encoder.cpp **** //     __HAL_SPI_ENABLE(spi);
 396:Src/encoder.cpp **** 
 397:Src/encoder.cpp **** //     spi = hw_config_.GearboxOutputEncoder_spi;
 398:Src/encoder.cpp **** //     spi->Init.Mode = SPI_MODE_MASTER;
 399:Src/encoder.cpp **** //     spi->Init.Direction = SPI_DIRECTION_2LINES;
 400:Src/encoder.cpp **** //     spi->Init.DataSize = SPI_DATASIZE_8BIT;
 401:Src/encoder.cpp **** //     spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 402:Src/encoder.cpp **** //     spi->Init.CLKPhase = SPI_PHASE_2EDGE;
 403:Src/encoder.cpp **** //     spi->Init.NSS = SPI_NSS_SOFT;
 404:Src/encoder.cpp **** //     spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 405:Src/encoder.cpp **** //     spi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 406:Src/encoder.cpp **** //     spi->Init.TIMode = SPI_TIMODE_DISABLE;
 407:Src/encoder.cpp **** //     spi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 408:Src/encoder.cpp **** //     spi->Init.CRCPolynomial = 7;
 409:Src/encoder.cpp **** //     if (mode_ == MODE_SPI_ABS_AEAT) {
 410:Src/encoder.cpp **** //         spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 411:Src/encoder.cpp **** //     }
 412:Src/encoder.cpp **** //     HAL_SPI_DeInit(spi);
 413:Src/encoder.cpp **** //    // HAL_SPI_Init(spi);
 414:Src/encoder.cpp **** //     __HAL_SPI_ENABLE(spi);
 415:Src/encoder.cpp **** 
 416:Src/encoder.cpp **** //     return true;
 417:Src/encoder.cpp **** }
 418:Src/encoder.cpp **** 
 419:Src/encoder.cpp **** 
 420:Src/encoder.cpp **** 
 421:Src/encoder.cpp **** void Encoder::set_spi_enable(void)
 422:Src/encoder.cpp **** {
 423:Src/encoder.cpp ****     SPI_HandleTypeDef * spi;
 424:Src/encoder.cpp ****     if (config_.is_high_speed_encode_query_enabled == true) 
 425:Src/encoder.cpp ****     {
 426:Src/encoder.cpp ****         abs_spi_cs_pin_init();
 427:Src/encoder.cpp ****         abs_spi_init();
 428:Src/encoder.cpp **** 
 429:Src/encoder.cpp ****     } 
 430:Src/encoder.cpp ****     else 
 431:Src/encoder.cpp ****     {
 432:Src/encoder.cpp ****         
 433:Src/encoder.cpp ****         spi= hw_config_.motor_spi;
 434:Src/encoder.cpp ****         HAL_SPI_DeInit(spi);
 435:Src/encoder.cpp ****         spi = hw_config_.GearboxOutputEncoder_spi;
 436:Src/encoder.cpp ****         HAL_SPI_DeInit(spi);
ARM GAS  /tmp/ccoPBaGE.s 			page 132


 437:Src/encoder.cpp **** 
 438:Src/encoder.cpp ****         motor_spi_cs_port_ = MU128_1_GPIO_Port;
 439:Src/encoder.cpp ****         motor_spi_cs_pin_ = MU128_1_Pin;
 440:Src/encoder.cpp ****         GearboxOutputEncoder_spi_cs_port_ = MU128_2_GPIO_Port;
 441:Src/encoder.cpp ****         GearboxOutputEncoder_spi_cs_pin_ = MU128_2_Pin;
 442:Src/encoder.cpp ****         // Init cs pin
 443:Src/encoder.cpp ****         HAL_GPIO_DeInit(motor_spi_cs_port_, motor_spi_cs_pin_);
 444:Src/encoder.cpp ****         HAL_GPIO_DeInit(GearboxOutputEncoder_spi_cs_port_, GearboxOutputEncoder_spi_cs_pin_);
 445:Src/encoder.cpp **** 
 446:Src/encoder.cpp ****     }
 447:Src/encoder.cpp **** 
 448:Src/encoder.cpp **** 
 449:Src/encoder.cpp **** }
 450:Src/encoder.cpp **** 
 451:Src/encoder.cpp **** bool Encoder::abs_485_init()
 452:Src/encoder.cpp **** {
 2638              		.loc 1 452 1 is_stmt 1 view -0
 2639              		.cfi_startproc
 2640              		@ args = 0, pretend = 0, frame = 0
 2641              		@ frame_needed = 0, uses_anonymous_args = 0
 2642              		@ link register save eliminated.
 453:Src/encoder.cpp ****     return true;
 2643              		.loc 1 453 5 view .LVU728
 454:Src/encoder.cpp **** }
 2644              		.loc 1 454 1 is_stmt 0 view .LVU729
 2645 0000 0120     		movs	r0, #1
 2646              	.LVL173:
 2647              		.loc 1 454 1 view .LVU730
 2648 0002 7047     		bx	lr
 2649              		.cfi_endproc
 2650              	.LFE4965:
 2652              		.section	.text._ZN7Encoder19abs_485_cs_pin_initEv,"ax",%progbits
 2653              		.align	1
 2654              		.global	_ZN7Encoder19abs_485_cs_pin_initEv
 2655              		.syntax unified
 2656              		.thumb
 2657              		.thumb_func
 2658              		.fpu fpv4-sp-d16
 2660              	_ZN7Encoder19abs_485_cs_pin_initEv:
 2661              	.LVL174:
 2662              	.LFB4966:
 455:Src/encoder.cpp ****   
 456:Src/encoder.cpp **** void Encoder::abs_485_cs_pin_init(){
 2663              		.loc 1 456 36 is_stmt 1 view -0
 2664              		.cfi_startproc
 2665              		@ args = 0, pretend = 0, frame = 24
 2666              		@ frame_needed = 0, uses_anonymous_args = 0
 2667              		.loc 1 456 36 is_stmt 0 view .LVU732
 2668 0000 30B5     		push	{r4, r5, lr}
 2669              	.LCFI14:
 2670              		.cfi_def_cfa_offset 12
 2671              		.cfi_offset 4, -12
 2672              		.cfi_offset 5, -8
 2673              		.cfi_offset 14, -4
 2674 0002 87B0     		sub	sp, sp, #28
 2675              	.LCFI15:
 2676              		.cfi_def_cfa_offset 40
ARM GAS  /tmp/ccoPBaGE.s 			page 133


 457:Src/encoder.cpp ****     // Decode cs pin
 458:Src/encoder.cpp **** 
 459:Src/encoder.cpp ****     GPIO_TypeDef  *GPIOx = GPIOA;
 2677              		.loc 1 459 5 is_stmt 1 view .LVU733
 2678              	.LVL175:
 460:Src/encoder.cpp ****     uint32_t GPIO_Pin =  GPIO_PIN_2;
 2679              		.loc 1 460 5 view .LVU734
 461:Src/encoder.cpp **** 
 462:Src/encoder.cpp ****     // Init cs pin
 463:Src/encoder.cpp ****     HAL_GPIO_DeInit(GPIOx, GPIO_Pin);
 2680              		.loc 1 463 5 view .LVU735
 2681              		.loc 1 463 20 is_stmt 0 view .LVU736
 2682 0004 0421     		movs	r1, #4
 2683 0006 4FF09040 		mov	r0, #1207959552
 2684              	.LVL176:
 2685              		.loc 1 463 20 view .LVU737
 2686 000a FFF7FEFF 		bl	HAL_GPIO_DeInit
 2687              	.LVL177:
 464:Src/encoder.cpp ****     GPIO_InitTypeDef GPIO_InitStruct;
 2688              		.loc 1 464 5 is_stmt 1 view .LVU738
 465:Src/encoder.cpp ****     GPIO_InitStruct.Pin = GPIO_Pin;
 2689              		.loc 1 465 5 view .LVU739
 2690              		.loc 1 465 25 is_stmt 0 view .LVU740
 2691 000e 0424     		movs	r4, #4
 2692 0010 0194     		str	r4, [sp, #4]
 466:Src/encoder.cpp ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 2693              		.loc 1 466 5 is_stmt 1 view .LVU741
 2694              		.loc 1 466 26 is_stmt 0 view .LVU742
 2695 0012 0123     		movs	r3, #1
 2696 0014 0293     		str	r3, [sp, #8]
 467:Src/encoder.cpp ****     GPIO_InitStruct.Pull = GPIO_PULLUP;
 2697              		.loc 1 467 5 is_stmt 1 view .LVU743
 2698              		.loc 1 467 26 is_stmt 0 view .LVU744
 2699 0016 0393     		str	r3, [sp, #12]
 468:Src/encoder.cpp ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 2700              		.loc 1 468 5 is_stmt 1 view .LVU745
 2701              		.loc 1 468 27 is_stmt 0 view .LVU746
 2702 0018 0025     		movs	r5, #0
 2703 001a 0495     		str	r5, [sp, #16]
 469:Src/encoder.cpp ****     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 2704              		.loc 1 469 5 is_stmt 1 view .LVU747
 2705              		.loc 1 469 18 is_stmt 0 view .LVU748
 2706 001c 0DEB0401 		add	r1, sp, r4
 2707 0020 4FF09040 		mov	r0, #1207959552
 2708 0024 FFF7FEFF 		bl	HAL_GPIO_Init
 2709              	.LVL178:
 470:Src/encoder.cpp **** 
 471:Src/encoder.cpp ****     // Write pin high
 472:Src/encoder.cpp ****     HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 2710              		.loc 1 472 5 is_stmt 1 view .LVU749
 2711              		.loc 1 472 22 is_stmt 0 view .LVU750
 2712 0028 2A46     		mov	r2, r5
 2713 002a 2146     		mov	r1, r4
 2714 002c 4FF09040 		mov	r0, #1207959552
 2715 0030 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2716              	.LVL179:
 473:Src/encoder.cpp **** }
ARM GAS  /tmp/ccoPBaGE.s 			page 134


 2717              		.loc 1 473 1 view .LVU751
 2718 0034 07B0     		add	sp, sp, #28
 2719              	.LCFI16:
 2720              		.cfi_def_cfa_offset 12
 2721              		@ sp needed
 2722 0036 30BD     		pop	{r4, r5, pc}
 2723              		.cfi_endproc
 2724              	.LFE4966:
 2726              		.section	.text._ZN7Encoder25abs_485_start_transactionEv,"ax",%progbits
 2727              		.align	1
 2728              		.global	_ZN7Encoder25abs_485_start_transactionEv
 2729              		.syntax unified
 2730              		.thumb
 2731              		.thumb_func
 2732              		.fpu fpv4-sp-d16
 2734              	_ZN7Encoder25abs_485_start_transactionEv:
 2735              	.LVL180:
 2736              	.LFB4968:
 474:Src/encoder.cpp **** 
 475:Src/encoder.cpp **** bool Encoder::abs_start_transaction(){
 476:Src/encoder.cpp **** 
 477:Src/encoder.cpp ****     if(config_.is_high_speed_encode_query_enabled == false)
 478:Src/encoder.cpp ****     return true;
 479:Src/encoder.cpp **** 
 480:Src/encoder.cpp ****     if (mode_ & MODE_FLAG_485_ABS){
 481:Src/encoder.cpp ****         abs_485_start_transaction();
 482:Src/encoder.cpp ****     }
 483:Src/encoder.cpp ****     else if(mode_ & MODE_FLAG_ABS)
 484:Src/encoder.cpp ****     {
 485:Src/encoder.cpp ****         abs_spi_start_transaction();
 486:Src/encoder.cpp ****         //abs_spi_pos_updated_ = false;
 487:Src/encoder.cpp ****     }
 488:Src/encoder.cpp ****     else
 489:Src/encoder.cpp ****     {
 490:Src/encoder.cpp ****          return true;
 491:Src/encoder.cpp ****     }
 492:Src/encoder.cpp ****     return true; 
 493:Src/encoder.cpp **** }
 494:Src/encoder.cpp **** 
 495:Src/encoder.cpp **** 
 496:Src/encoder.cpp **** 
 497:Src/encoder.cpp **** bool Encoder::abs_485_start_transaction(){
 2737              		.loc 1 497 42 is_stmt 1 view -0
 2738              		.cfi_startproc
 2739              		@ args = 0, pretend = 0, frame = 0
 2740              		@ frame_needed = 0, uses_anonymous_args = 0
 2741              		@ link register save eliminated.
 498:Src/encoder.cpp **** 
 499:Src/encoder.cpp ****     return true;
 2742              		.loc 1 499 5 view .LVU753
 500:Src/encoder.cpp **** }
 2743              		.loc 1 500 1 is_stmt 0 view .LVU754
 2744 0000 0120     		movs	r0, #1
 2745              	.LVL181:
 2746              		.loc 1 500 1 view .LVU755
 2747 0002 7047     		bx	lr
 2748              		.cfi_endproc
ARM GAS  /tmp/ccoPBaGE.s 			page 135


 2749              	.LFE4968:
 2751              		.section	.text._ZN7Encoder25abs_spi_start_transactionEv,"ax",%progbits
 2752              		.align	1
 2753              		.global	_ZN7Encoder25abs_spi_start_transactionEv
 2754              		.syntax unified
 2755              		.thumb
 2756              		.thumb_func
 2757              		.fpu fpv4-sp-d16
 2759              	_ZN7Encoder25abs_spi_start_transactionEv:
 2760              	.LVL182:
 2761              	.LFB4969:
 501:Src/encoder.cpp **** 
 502:Src/encoder.cpp **** 
 503:Src/encoder.cpp **** bool Encoder::abs_spi_start_transaction(){
 2762              		.loc 1 503 42 is_stmt 1 view -0
 2763              		.cfi_startproc
 2764              		@ args = 0, pretend = 0, frame = 0
 2765              		@ frame_needed = 0, uses_anonymous_args = 0
 2766              		.loc 1 503 42 is_stmt 0 view .LVU757
 2767 0000 38B5     		push	{r3, r4, r5, lr}
 2768              	.LCFI17:
 2769              		.cfi_def_cfa_offset 16
 2770              		.cfi_offset 3, -16
 2771              		.cfi_offset 4, -12
 2772              		.cfi_offset 5, -8
 2773              		.cfi_offset 14, -4
 504:Src/encoder.cpp ****     if (mode_ & MODE_FLAG_ABS){
 2774              		.loc 1 504 5 is_stmt 1 view .LVU758
 2775 0002 B0F8D630 		ldrh	r3, [r0, #214]
 2776 0006 13F4807F 		tst	r3, #256
 2777 000a 32D0     		beq	.L107
 2778 000c 0446     		mov	r4, r0
 505:Src/encoder.cpp ****         if(hw_config_.motor_spi->State != HAL_SPI_STATE_READY){  
 2779              		.loc 1 505 9 view .LVU759
 2780              		.loc 1 505 23 is_stmt 0 view .LVU760
 2781 000e 0368     		ldr	r3, [r0]
 2782 0010 1B68     		ldr	r3, [r3]
 2783              		.loc 1 505 34 view .LVU761
 2784 0012 93F85D30 		ldrb	r3, [r3, #93]	@ zero_extendqisi2
 2785 0016 DBB2     		uxtb	r3, r3
 2786              		.loc 1 505 9 view .LVU762
 2787 0018 012B     		cmp	r3, #1
 2788 001a 05D0     		beq	.L106
 506:Src/encoder.cpp ****             set_error(ERROR_ABS_SPI_NOT_READY);
 2789              		.loc 1 506 13 is_stmt 1 view .LVU763
 2790              		.loc 1 506 22 is_stmt 0 view .LVU764
 2791 001c 4FF48071 		mov	r1, #256
 2792 0020 FFF7FEFF 		bl	_ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE
 2793              	.LVL183:
 507:Src/encoder.cpp ****             return false;
 2794              		.loc 1 507 13 is_stmt 1 view .LVU765
 2795              		.loc 1 507 20 is_stmt 0 view .LVU766
 2796 0024 0020     		movs	r0, #0
 2797 0026 25E0     		b	.L105
 2798              	.LVL184:
 2799              	.L106:
 508:Src/encoder.cpp ****         }
ARM GAS  /tmp/ccoPBaGE.s 			page 136


 509:Src/encoder.cpp ****         HAL_GPIO_WritePin(motor_spi_cs_port_, motor_spi_cs_pin_, GPIO_PIN_RESET);
 2800              		.loc 1 509 9 is_stmt 1 view .LVU767
 2801              		.loc 1 509 26 is_stmt 0 view .LVU768
 2802 0028 0022     		movs	r2, #0
 2803 002a B0F8DC10 		ldrh	r1, [r0, #220]
 2804 002e D0F8D800 		ldr	r0, [r0, #216]
 2805              	.LVL185:
 2806              		.loc 1 509 26 view .LVU769
 2807 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2808              	.LVL186:
 510:Src/encoder.cpp ****         HAL_GPIO_WritePin(GearboxOutputEncoder_spi_cs_port_, GearboxOutputEncoder_spi_cs_pin_, GPIO
 2809              		.loc 1 510 9 is_stmt 1 view .LVU770
 2810              		.loc 1 510 26 is_stmt 0 view .LVU771
 2811 0036 0022     		movs	r2, #0
 2812 0038 B4F8E410 		ldrh	r1, [r4, #228]
 2813 003c D4F8E000 		ldr	r0, [r4, #224]
 2814 0040 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2815              	.LVL187:
 511:Src/encoder.cpp ****         
 512:Src/encoder.cpp ****       //  HAL_SPI_TransmitReceive_DMA(hw_config_.GearboxOutputEncoder_spi, (uint8_t*)GearboxOutputE
 513:Src/encoder.cpp ****         transmit_spi(hw_config_.motor_spi, (uint8_t*)abs_spi_dma_tx_, (uint8_t*)abs_spi_dma_rx_, 3)
 2816              		.loc 1 513 9 is_stmt 1 view .LVU772
 2817              		.loc 1 513 33 is_stmt 0 view .LVU773
 2818 0044 2546     		mov	r5, r4
 2819 0046 55F8C40B 		ldr	r0, [r5], #196
 2820              		.loc 1 513 21 view .LVU774
 2821 004a 0323     		movs	r3, #3
 2822 004c 04F1BC02 		add	r2, r4, #188
 2823 0050 04F1B801 		add	r1, r4, #184
 2824 0054 0068     		ldr	r0, [r0]
 2825 0056 FFF7FEFF 		bl	transmit_spi
 2826              	.LVL188:
 514:Src/encoder.cpp ****         
 515:Src/encoder.cpp ****       //  HAL_SPI_TransmitReceive_DMA(hw_config_.motor_spi, (uint8_t*)abs_spi_dma_tx_, (uint8_t*)ab
 516:Src/encoder.cpp ****         transmit_spi(hw_config_.GearboxOutputEncoder_spi, (uint8_t*)GearboxOutputEncoder_spi_dma_tx
 2827              		.loc 1 516 9 is_stmt 1 view .LVU775
 2828              		.loc 1 516 69 is_stmt 0 view .LVU776
 2829 005a 2146     		mov	r1, r4
 2830              		.loc 1 516 33 view .LVU777
 2831 005c 51F8C00B 		ldr	r0, [r1], #192
 2832              		.loc 1 516 21 view .LVU778
 2833 0060 0423     		movs	r3, #4
 2834 0062 2A46     		mov	r2, r5
 2835 0064 4068     		ldr	r0, [r0, #4]
 2836 0066 FFF7FEFF 		bl	transmit_spi
 2837              	.LVL189:
 517:Src/encoder.cpp ****         abs_spi_pos_updated_ = true;
 2838              		.loc 1 517 9 is_stmt 1 view .LVU779
 2839              		.loc 1 517 30 is_stmt 0 view .LVU780
 2840 006a 0120     		movs	r0, #1
 2841 006c 84F8D300 		strb	r0, [r4, #211]
 2842 0070 00E0     		b	.L105
 2843              	.LVL190:
 2844              	.L107:
 518:Src/encoder.cpp ****     }
 519:Src/encoder.cpp ****     return true;
 2845              		.loc 1 519 12 view .LVU781
ARM GAS  /tmp/ccoPBaGE.s 			page 137


 2846 0072 0120     		movs	r0, #1
 2847              	.LVL191:
 2848              	.L105:
 520:Src/encoder.cpp **** }
 2849              		.loc 1 520 1 view .LVU782
 2850 0074 38BD     		pop	{r3, r4, r5, pc}
 2851              		.cfi_endproc
 2852              	.LFE4969:
 2854              		.section	.text._ZN7Encoder21abs_start_transactionEv,"ax",%progbits
 2855              		.align	1
 2856              		.global	_ZN7Encoder21abs_start_transactionEv
 2857              		.syntax unified
 2858              		.thumb
 2859              		.thumb_func
 2860              		.fpu fpv4-sp-d16
 2862              	_ZN7Encoder21abs_start_transactionEv:
 2863              	.LVL192:
 2864              	.LFB4967:
 475:Src/encoder.cpp **** 
 2865              		.loc 1 475 38 is_stmt 1 view -0
 2866              		.cfi_startproc
 2867              		@ args = 0, pretend = 0, frame = 0
 2868              		@ frame_needed = 0, uses_anonymous_args = 0
 475:Src/encoder.cpp **** 
 2869              		.loc 1 475 38 is_stmt 0 view .LVU784
 2870 0000 08B5     		push	{r3, lr}
 2871              	.LCFI18:
 2872              		.cfi_def_cfa_offset 8
 2873              		.cfi_offset 3, -8
 2874              		.cfi_offset 14, -4
 477:Src/encoder.cpp ****     return true;
 2875              		.loc 1 477 5 is_stmt 1 view .LVU785
 477:Src/encoder.cpp ****     return true;
 2876              		.loc 1 477 16 is_stmt 0 view .LVU786
 2877 0002 4368     		ldr	r3, [r0, #4]
 477:Src/encoder.cpp ****     return true;
 2878              		.loc 1 477 5 view .LVU787
 2879 0004 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2880 0006 3BB1     		cbz	r3, .L110
 480:Src/encoder.cpp ****         abs_485_start_transaction();
 2881              		.loc 1 480 5 is_stmt 1 view .LVU788
 480:Src/encoder.cpp ****         abs_485_start_transaction();
 2882              		.loc 1 480 9 is_stmt 0 view .LVU789
 2883 0008 B0F8D630 		ldrh	r3, [r0, #214]
 480:Src/encoder.cpp ****         abs_485_start_transaction();
 2884              		.loc 1 480 5 view .LVU790
 2885 000c 13F4007F 		tst	r3, #512
 2886 0010 02D1     		bne	.L110
 483:Src/encoder.cpp ****     {
 2887              		.loc 1 483 10 is_stmt 1 view .LVU791
 2888 0012 13F4807F 		tst	r3, #256
 2889 0016 01D1     		bne	.L112
 2890              	.LVL193:
 2891              	.L110:
 493:Src/encoder.cpp **** 
 2892              		.loc 1 493 1 is_stmt 0 view .LVU792
 2893 0018 0120     		movs	r0, #1
ARM GAS  /tmp/ccoPBaGE.s 			page 138


 2894 001a 08BD     		pop	{r3, pc}
 2895              	.LVL194:
 2896              	.L112:
 485:Src/encoder.cpp ****         //abs_spi_pos_updated_ = false;
 2897              		.loc 1 485 9 is_stmt 1 view .LVU793
 485:Src/encoder.cpp ****         //abs_spi_pos_updated_ = false;
 2898              		.loc 1 485 34 is_stmt 0 view .LVU794
 2899 001c FFF7FEFF 		bl	_ZN7Encoder25abs_spi_start_transactionEv
 2900              	.LVL195:
 485:Src/encoder.cpp ****         //abs_spi_pos_updated_ = false;
 2901              		.loc 1 485 34 view .LVU795
 2902 0020 FAE7     		b	.L110
 2903              		.cfi_endproc
 2904              	.LFE4967:
 2906              		.section	.text._Z10ams_parityt,"ax",%progbits
 2907              		.align	1
 2908              		.global	_Z10ams_parityt
 2909              		.syntax unified
 2910              		.thumb
 2911              		.thumb_func
 2912              		.fpu fpv4-sp-d16
 2914              	_Z10ams_parityt:
 2915              	.LVL196:
 2916              	.LFB4970:
 521:Src/encoder.cpp **** 
 522:Src/encoder.cpp **** uint8_t ams_parity(uint16_t v) {
 2917              		.loc 1 522 32 is_stmt 1 view -0
 2918              		.cfi_startproc
 2919              		@ args = 0, pretend = 0, frame = 0
 2920              		@ frame_needed = 0, uses_anonymous_args = 0
 2921              		@ link register save eliminated.
 523:Src/encoder.cpp ****     v ^= v >> 8;
 2922              		.loc 1 523 5 view .LVU797
 2923              		.loc 1 523 7 is_stmt 0 view .LVU798
 2924 0000 80EA1020 		eor	r0, r0, r0, lsr #8
 2925              	.LVL197:
 524:Src/encoder.cpp ****     v ^= v >> 4;
 2926              		.loc 1 524 5 is_stmt 1 view .LVU799
 2927              		.loc 1 524 7 is_stmt 0 view .LVU800
 2928 0004 80EA1010 		eor	r0, r0, r0, lsr #4
 2929              	.LVL198:
 525:Src/encoder.cpp ****     v ^= v >> 2;
 2930              		.loc 1 525 5 is_stmt 1 view .LVU801
 2931              		.loc 1 525 7 is_stmt 0 view .LVU802
 2932 0008 80EA9000 		eor	r0, r0, r0, lsr #2
 2933              	.LVL199:
 526:Src/encoder.cpp ****     v ^= v >> 1;
 2934              		.loc 1 526 5 is_stmt 1 view .LVU803
 527:Src/encoder.cpp ****     return v & 1;
 2935              		.loc 1 527 5 view .LVU804
 526:Src/encoder.cpp ****     v ^= v >> 1;
 2936              		.loc 1 526 7 is_stmt 0 view .LVU805
 2937 000c 80EA5000 		eor	r0, r0, r0, lsr #1
 2938              	.LVL200:
 528:Src/encoder.cpp **** }
 2939              		.loc 1 528 1 view .LVU806
 2940 0010 00F00100 		and	r0, r0, #1
ARM GAS  /tmp/ccoPBaGE.s 			page 139


 2941 0014 7047     		bx	lr
 2942              		.cfi_endproc
 2943              	.LFE4970:
 2945              		.section	.text._Z10cui_parityt,"ax",%progbits
 2946              		.align	1
 2947              		.global	_Z10cui_parityt
 2948              		.syntax unified
 2949              		.thumb
 2950              		.thumb_func
 2951              		.fpu fpv4-sp-d16
 2953              	_Z10cui_parityt:
 2954              	.LVL201:
 2955              	.LFB4971:
 529:Src/encoder.cpp **** 
 530:Src/encoder.cpp **** uint8_t cui_parity(uint16_t v) {
 2956              		.loc 1 530 32 is_stmt 1 view -0
 2957              		.cfi_startproc
 2958              		@ args = 0, pretend = 0, frame = 0
 2959              		@ frame_needed = 0, uses_anonymous_args = 0
 2960              		@ link register save eliminated.
 531:Src/encoder.cpp ****     v ^= v >> 8;
 2961              		.loc 1 531 5 view .LVU808
 2962              		.loc 1 531 7 is_stmt 0 view .LVU809
 2963 0000 80EA1020 		eor	r0, r0, r0, lsr #8
 2964              	.LVL202:
 532:Src/encoder.cpp ****     v ^= v >> 4;
 2965              		.loc 1 532 5 is_stmt 1 view .LVU810
 2966              		.loc 1 532 7 is_stmt 0 view .LVU811
 2967 0004 80EA1010 		eor	r0, r0, r0, lsr #4
 2968              	.LVL203:
 533:Src/encoder.cpp ****     v ^= v >> 2;
 2969              		.loc 1 533 5 is_stmt 1 view .LVU812
 534:Src/encoder.cpp ****     return ~v & 3;
 2970              		.loc 1 534 5 view .LVU813
 533:Src/encoder.cpp ****     v ^= v >> 2;
 2971              		.loc 1 533 7 is_stmt 0 view .LVU814
 2972 0008 80EA9000 		eor	r0, r0, r0, lsr #2
 2973              	.LVL204:
 2974              		.loc 1 534 15 view .LVU815
 2975 000c C043     		mvns	r0, r0
 535:Src/encoder.cpp **** }
 2976              		.loc 1 535 1 view .LVU816
 2977 000e 00F00300 		and	r0, r0, #3
 2978 0012 7047     		bx	lr
 2979              		.cfi_endproc
 2980              	.LFE4971:
 2982              		.section	.text._ZN7Encoder10abs_spi_cbEv,"ax",%progbits
 2983              		.align	1
 2984              		.global	_ZN7Encoder10abs_spi_cbEv
 2985              		.syntax unified
 2986              		.thumb
 2987              		.thumb_func
 2988              		.fpu fpv4-sp-d16
 2990              	_ZN7Encoder10abs_spi_cbEv:
 2991              	.LVL205:
 2992              	.LFB4972:
 536:Src/encoder.cpp **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 140


 537:Src/encoder.cpp **** void Encoder::abs_spi_cb(){
 2993              		.loc 1 537 27 is_stmt 1 view -0
 2994              		.cfi_startproc
 2995              		@ args = 0, pretend = 0, frame = 0
 2996              		@ frame_needed = 0, uses_anonymous_args = 0
 2997              		.loc 1 537 27 is_stmt 0 view .LVU818
 2998 0000 38B5     		push	{r3, r4, r5, lr}
 2999              	.LCFI19:
 3000              		.cfi_def_cfa_offset 16
 3001              		.cfi_offset 3, -16
 3002              		.cfi_offset 4, -12
 3003              		.cfi_offset 5, -8
 3004              		.cfi_offset 14, -4
 3005 0002 0446     		mov	r4, r0
 538:Src/encoder.cpp ****     HAL_GPIO_WritePin(motor_spi_cs_port_, motor_spi_cs_pin_, GPIO_PIN_SET);
 3006              		.loc 1 538 5 is_stmt 1 view .LVU819
 3007              		.loc 1 538 22 is_stmt 0 view .LVU820
 3008 0004 0122     		movs	r2, #1
 3009 0006 B0F8DC10 		ldrh	r1, [r0, #220]
 3010 000a D0F8D800 		ldr	r0, [r0, #216]
 3011              	.LVL206:
 3012              		.loc 1 538 22 view .LVU821
 3013 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 3014              	.LVL207:
 539:Src/encoder.cpp ****     HAL_GPIO_WritePin(GearboxOutputEncoder_spi_cs_port_, GearboxOutputEncoder_spi_cs_pin_, GPIO_PIN
 3015              		.loc 1 539 5 is_stmt 1 view .LVU822
 3016              		.loc 1 539 22 is_stmt 0 view .LVU823
 3017 0012 0122     		movs	r2, #1
 3018 0014 B4F8E410 		ldrh	r1, [r4, #228]
 3019 0018 D4F8E000 		ldr	r0, [r4, #224]
 3020 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 3021              	.LVL208:
 540:Src/encoder.cpp ****     axis_->motor_.log_timing(ODriveIntf::TIMING_LOG_SPI_END);
 3022              		.loc 1 540 5 is_stmt 1 view .LVU824
 3023              		.loc 1 540 12 is_stmt 0 view .LVU825
 3024 0020 A368     		ldr	r3, [r4, #8]
 3025              		.loc 1 540 29 view .LVU826
 3026 0022 0B21     		movs	r1, #11
 3027 0024 D86E     		ldr	r0, [r3, #108]
 3028 0026 FFF7FEFF 		bl	_ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE
 3029              	.LVL209:
 541:Src/encoder.cpp **** 
 542:Src/encoder.cpp ****     uint32_t pos;
 3030              		.loc 1 542 5 is_stmt 1 view .LVU827
 543:Src/encoder.cpp **** 
 544:Src/encoder.cpp ****     switch (mode_) {
 3031              		.loc 1 544 5 view .LVU828
 3032              	.LBB1121:
 3033              		.loc 1 544 13 is_stmt 0 view .LVU829
 3034 002a B4F8D630 		ldrh	r3, [r4, #214]
 3035              		.loc 1 544 5 view .LVU830
 3036 002e 40F20112 		movw	r2, #257
 3037 0032 9342     		cmp	r3, r2
 3038 0034 0BD0     		beq	.L116
 3039 0036 40F20312 		movw	r2, #259
 3040 003a 9342     		cmp	r3, r2
 3041 003c 15D0     		beq	.L117
ARM GAS  /tmp/ccoPBaGE.s 			page 141


 3042 003e B3F5807F 		cmp	r3, #256
 3043 0042 0BD0     		beq	.L124
 3044              	.LBB1122:
 545:Src/encoder.cpp ****         case MODE_SPI_ABS_AMS: {
 546:Src/encoder.cpp ****             uint16_t rawVal = abs_spi_dma_rx_[0];
 547:Src/encoder.cpp ****             // check if parity is correct (even) and error flag clear
 548:Src/encoder.cpp ****             if (ams_parity(rawVal) || ((rawVal >> 14) & 1)) {
 549:Src/encoder.cpp ****                 return;
 550:Src/encoder.cpp ****             }
 551:Src/encoder.cpp ****             pos = rawVal & 0x3fff;
 552:Src/encoder.cpp ****         } break;
 553:Src/encoder.cpp **** 
 554:Src/encoder.cpp ****         case MODE_SPI_ABS_CUI: {
 555:Src/encoder.cpp ****             uint16_t rawVal = abs_spi_dma_rx_[0];
 556:Src/encoder.cpp ****             // check if parity is correct
 557:Src/encoder.cpp ****             if (cui_parity(rawVal)) {
 558:Src/encoder.cpp ****                 return;
 559:Src/encoder.cpp ****             }
 560:Src/encoder.cpp ****             pos = rawVal & 0x3fff;
 561:Src/encoder.cpp ****         } break;
 562:Src/encoder.cpp **** 
 563:Src/encoder.cpp ****         case MODE_SPI_ABS_RLS: {
 564:Src/encoder.cpp ****           //  uint16_t rawVal = abs_spi_dma_rx_[0];
 565:Src/encoder.cpp ****           //  pos = (rawVal >> 2) & 0x3fff;
 566:Src/encoder.cpp ****           uint32_t rawVal = *(uint32_t *)&abs_spi_dma_rx_[0];
 567:Src/encoder.cpp ****           pos = ((rawVal & 0x0000ff00)) | ( (rawVal & 0x00ff0000)>>16 ) ;
 568:Src/encoder.cpp ****           rawVal = *(uint32_t *)&GearboxOutputEncoder_spi_dma_rx_[0];
 569:Src/encoder.cpp ****           sencond_pos_abs_ =  ((rawVal & 0x0000ff00)<<8) | ( (rawVal & 0x00ff0000)>>8 )| ( (rawVal 
 570:Src/encoder.cpp ****         } break;
 571:Src/encoder.cpp **** 
 572:Src/encoder.cpp ****         default: {
 3045              		.loc 1 572 9 is_stmt 1 view .LVU831
 3046              		.loc 1 572 18 view .LVU832
 573:Src/encoder.cpp ****            set_error(ERROR_UNSUPPORTED_ENCODER_MODE);
 3047              		.loc 1 573 12 view .LVU833
 3048              		.loc 1 573 21 is_stmt 0 view .LVU834
 3049 0044 0821     		movs	r1, #8
 3050 0046 2046     		mov	r0, r4
 3051 0048 FFF7FEFF 		bl	_ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE
 3052              	.LVL210:
 574:Src/encoder.cpp ****            return;
 3053              		.loc 1 574 12 is_stmt 1 view .LVU835
 3054 004c 2AE0     		b	.L115
 3055              	.L116:
 545:Src/encoder.cpp ****         case MODE_SPI_ABS_AMS: {
 3056              		.loc 1 545 9 view .LVU836
 545:Src/encoder.cpp ****         case MODE_SPI_ABS_AMS: {
 3057              		.loc 1 545 32 view .LVU837
 3058              	.LBB1123:
 546:Src/encoder.cpp ****             // check if parity is correct (even) and error flag clear
 3059              		.loc 1 546 13 view .LVU838
 546:Src/encoder.cpp ****             // check if parity is correct (even) and error flag clear
 3060              		.loc 1 546 48 is_stmt 0 view .LVU839
 3061 004e 94F8BC50 		ldrb	r5, [r4, #188]	@ zero_extendqisi2
 3062              	.LVL211:
 548:Src/encoder.cpp ****                 return;
 3063              		.loc 1 548 13 is_stmt 1 view .LVU840
ARM GAS  /tmp/ccoPBaGE.s 			page 142


 548:Src/encoder.cpp ****                 return;
 3064              		.loc 1 548 27 is_stmt 0 view .LVU841
 3065 0052 2846     		mov	r0, r5
 3066 0054 FFF7FEFF 		bl	_Z10ams_parityt
 3067              	.LVL212:
 548:Src/encoder.cpp ****                 return;
 3068              		.loc 1 548 36 view .LVU842
 3069 0058 D8B1     		cbz	r0, .L121
 3070 005a 23E0     		b	.L115
 3071              	.LVL213:
 3072              	.L124:
 548:Src/encoder.cpp ****                 return;
 3073              		.loc 1 548 36 view .LVU843
 3074              	.LBE1123:
 554:Src/encoder.cpp ****             uint16_t rawVal = abs_spi_dma_rx_[0];
 3075              		.loc 1 554 9 is_stmt 1 view .LVU844
 554:Src/encoder.cpp ****             uint16_t rawVal = abs_spi_dma_rx_[0];
 3076              		.loc 1 554 32 view .LVU845
 3077              	.LBB1124:
 555:Src/encoder.cpp ****             // check if parity is correct
 3078              		.loc 1 555 13 view .LVU846
 555:Src/encoder.cpp ****             // check if parity is correct
 3079              		.loc 1 555 48 is_stmt 0 view .LVU847
 3080 005c 94F8BC50 		ldrb	r5, [r4, #188]	@ zero_extendqisi2
 3081              	.LVL214:
 557:Src/encoder.cpp ****                 return;
 3082              		.loc 1 557 13 is_stmt 1 view .LVU848
 557:Src/encoder.cpp ****                 return;
 3083              		.loc 1 557 27 is_stmt 0 view .LVU849
 3084 0060 2846     		mov	r0, r5
 3085 0062 FFF7FEFF 		bl	_Z10cui_parityt
 3086              	.LVL215:
 557:Src/encoder.cpp ****                 return;
 3087              		.loc 1 557 13 view .LVU850
 3088 0066 A0B1     		cbz	r0, .L121
 3089 0068 1CE0     		b	.L115
 3090              	.LVL216:
 3091              	.L117:
 557:Src/encoder.cpp ****                 return;
 3092              		.loc 1 557 13 view .LVU851
 3093              	.LBE1124:
 563:Src/encoder.cpp ****           //  uint16_t rawVal = abs_spi_dma_rx_[0];
 3094              		.loc 1 563 9 is_stmt 1 view .LVU852
 563:Src/encoder.cpp ****           //  uint16_t rawVal = abs_spi_dma_rx_[0];
 3095              		.loc 1 563 32 view .LVU853
 3096              	.LBB1125:
 566:Src/encoder.cpp ****           pos = ((rawVal & 0x0000ff00)) | ( (rawVal & 0x00ff0000)>>16 ) ;
 3097              		.loc 1 566 11 view .LVU854
 566:Src/encoder.cpp ****           pos = ((rawVal & 0x0000ff00)) | ( (rawVal & 0x00ff0000)>>16 ) ;
 3098              		.loc 1 566 20 is_stmt 0 view .LVU855
 3099 006a D4F8BC30 		ldr	r3, [r4, #188]
 3100              	.LVL217:
 567:Src/encoder.cpp ****           rawVal = *(uint32_t *)&GearboxOutputEncoder_spi_dma_rx_[0];
 3101              		.loc 1 567 11 is_stmt 1 view .LVU856
 567:Src/encoder.cpp ****           rawVal = *(uint32_t *)&GearboxOutputEncoder_spi_dma_rx_[0];
 3102              		.loc 1 567 66 is_stmt 0 view .LVU857
 3103 006e C3F30740 		ubfx	r0, r3, #16, #8
ARM GAS  /tmp/ccoPBaGE.s 			page 143


 567:Src/encoder.cpp ****           rawVal = *(uint32_t *)&GearboxOutputEncoder_spi_dma_rx_[0];
 3104              		.loc 1 567 26 view .LVU858
 3105 0072 03F47F43 		and	r3, r3, #65280
 3106              	.LVL218:
 567:Src/encoder.cpp ****           rawVal = *(uint32_t *)&GearboxOutputEncoder_spi_dma_rx_[0];
 3107              		.loc 1 567 15 view .LVU859
 3108 0076 40EA0305 		orr	r5, r0, r3
 3109              	.LVL219:
 568:Src/encoder.cpp ****           sencond_pos_abs_ =  ((rawVal & 0x0000ff00)<<8) | ( (rawVal & 0x00ff0000)>>8 )| ( (rawVal 
 3110              		.loc 1 568 11 is_stmt 1 view .LVU860
 568:Src/encoder.cpp ****           sencond_pos_abs_ =  ((rawVal & 0x0000ff00)<<8) | ( (rawVal & 0x00ff0000)>>8 )| ( (rawVal 
 3111              		.loc 1 568 18 is_stmt 0 view .LVU861
 3112 007a D4F8C420 		ldr	r2, [r4, #196]
 3113              	.LVL220:
 569:Src/encoder.cpp ****         } break;
 3114              		.loc 1 569 11 is_stmt 1 view .LVU862
 569:Src/encoder.cpp ****         } break;
 3115              		.loc 1 569 53 is_stmt 0 view .LVU863
 3116 007e 1302     		lsls	r3, r2, #8
 3117 0080 03F47F03 		and	r3, r3, #16711680
 569:Src/encoder.cpp ****         } break;
 3118              		.loc 1 569 83 view .LVU864
 3119 0084 110A     		lsrs	r1, r2, #8
 3120 0086 01F47F41 		and	r1, r1, #65280
 569:Src/encoder.cpp ****         } break;
 3121              		.loc 1 569 58 view .LVU865
 3122 008a 0B43     		orrs	r3, r3, r1
 569:Src/encoder.cpp ****         } break;
 3123              		.loc 1 569 88 view .LVU866
 3124 008c 43EA1263 		orr	r3, r3, r2, lsr #24
 569:Src/encoder.cpp ****         } break;
 3125              		.loc 1 569 28 view .LVU867
 3126 0090 A366     		str	r3, [r4, #104]
 3127              	.LBE1125:
 570:Src/encoder.cpp **** 
 3128              		.loc 1 570 11 is_stmt 1 view .LVU868
 3129              	.LVL221:
 3130              	.L121:
 575:Src/encoder.cpp ****         } break;
 3131              		.loc 1 575 11 view .LVU869
 3132              	.LBE1122:
 3133              	.LBE1121:
 576:Src/encoder.cpp ****     }
 577:Src/encoder.cpp **** 
 578:Src/encoder.cpp ****     pos_abs_ = pos;
 3134              		.loc 1 578 5 view .LVU870
 3135              		.loc 1 578 14 is_stmt 0 view .LVU871
 3136 0092 6566     		str	r5, [r4, #100]
 579:Src/encoder.cpp ****     abs_spi_pos_updated_ = true;
 3137              		.loc 1 579 5 is_stmt 1 view .LVU872
 3138              		.loc 1 579 26 is_stmt 0 view .LVU873
 3139 0094 0123     		movs	r3, #1
 3140 0096 84F8D330 		strb	r3, [r4, #211]
 580:Src/encoder.cpp ****     if (config_.pre_calibrated) {
 3141              		.loc 1 580 5 is_stmt 1 view .LVU874
 3142              		.loc 1 580 17 is_stmt 0 view .LVU875
 3143 009a 6368     		ldr	r3, [r4, #4]
ARM GAS  /tmp/ccoPBaGE.s 			page 144


 3144              		.loc 1 580 5 view .LVU876
 3145 009c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 3146 009e 0BB1     		cbz	r3, .L115
 581:Src/encoder.cpp ****         is_ready_ = true;
 3147              		.loc 1 581 9 is_stmt 1 view .LVU877
 3148              		.loc 1 581 19 is_stmt 0 view .LVU878
 3149 00a0 0123     		movs	r3, #1
 3150 00a2 E373     		strb	r3, [r4, #15]
 3151              	.LVL222:
 3152              	.L115:
 582:Src/encoder.cpp ****     }
 583:Src/encoder.cpp **** }
 3153              		.loc 1 583 1 view .LVU879
 3154 00a4 38BD     		pop	{r3, r4, r5, pc}
 3155              		.loc 1 583 1 view .LVU880
 3156              		.cfi_endproc
 3157              	.LFE4972:
 3159              		.section	.text._ZN7Encoder19abs_spi_cs_pin_initEv,"ax",%progbits
 3160              		.align	1
 3161              		.global	_ZN7Encoder19abs_spi_cs_pin_initEv
 3162              		.syntax unified
 3163              		.thumb
 3164              		.thumb_func
 3165              		.fpu fpv4-sp-d16
 3167              	_ZN7Encoder19abs_spi_cs_pin_initEv:
 3168              	.LVL223:
 3169              	.LFB4973:
 584:Src/encoder.cpp **** 
 585:Src/encoder.cpp **** void Encoder::abs_spi_cs_pin_init(){
 3170              		.loc 1 585 36 is_stmt 1 view -0
 3171              		.cfi_startproc
 3172              		@ args = 0, pretend = 0, frame = 24
 3173              		@ frame_needed = 0, uses_anonymous_args = 0
 3174              		.loc 1 585 36 is_stmt 0 view .LVU882
 3175 0000 30B5     		push	{r4, r5, lr}
 3176              	.LCFI20:
 3177              		.cfi_def_cfa_offset 12
 3178              		.cfi_offset 4, -12
 3179              		.cfi_offset 5, -8
 3180              		.cfi_offset 14, -4
 3181 0002 87B0     		sub	sp, sp, #28
 3182              	.LCFI21:
 3183              		.cfi_def_cfa_offset 40
 3184 0004 0446     		mov	r4, r0
 586:Src/encoder.cpp ****     // Decode cs pin
 587:Src/encoder.cpp ****     motor_spi_cs_port_ = MU128_1_GPIO_Port;
 3185              		.loc 1 587 5 is_stmt 1 view .LVU883
 3186              		.loc 1 587 24 is_stmt 0 view .LVU884
 3187 0006 4FF09040 		mov	r0, #1207959552
 3188              	.LVL224:
 3189              		.loc 1 587 24 view .LVU885
 3190 000a C4F8D800 		str	r0, [r4, #216]
 588:Src/encoder.cpp ****     motor_spi_cs_pin_ = MU128_1_Pin;
 3191              		.loc 1 588 5 is_stmt 1 view .LVU886
 3192              		.loc 1 588 23 is_stmt 0 view .LVU887
 3193 000e 1021     		movs	r1, #16
 3194 0010 A4F8DC10 		strh	r1, [r4, #220]	@ movhi
ARM GAS  /tmp/ccoPBaGE.s 			page 145


 589:Src/encoder.cpp ****     GearboxOutputEncoder_spi_cs_port_ = MU128_2_GPIO_Port;
 3195              		.loc 1 589 5 is_stmt 1 view .LVU888
 3196              		.loc 1 589 39 is_stmt 0 view .LVU889
 3197 0014 C4F8E000 		str	r0, [r4, #224]
 590:Src/encoder.cpp ****     GearboxOutputEncoder_spi_cs_pin_ = MU128_2_Pin;
 3198              		.loc 1 590 5 is_stmt 1 view .LVU890
 3199              		.loc 1 590 38 is_stmt 0 view .LVU891
 3200 0018 4FF40043 		mov	r3, #32768
 3201 001c A4F8E430 		strh	r3, [r4, #228]	@ movhi
 591:Src/encoder.cpp ****     // Init cs pin
 592:Src/encoder.cpp ****     HAL_GPIO_DeInit(motor_spi_cs_port_, motor_spi_cs_pin_);
 3202              		.loc 1 592 5 is_stmt 1 view .LVU892
 3203              		.loc 1 592 20 is_stmt 0 view .LVU893
 3204 0020 FFF7FEFF 		bl	HAL_GPIO_DeInit
 3205              	.LVL225:
 593:Src/encoder.cpp ****     HAL_GPIO_DeInit(GearboxOutputEncoder_spi_cs_port_, GearboxOutputEncoder_spi_cs_pin_);
 3206              		.loc 1 593 5 is_stmt 1 view .LVU894
 3207              		.loc 1 593 20 is_stmt 0 view .LVU895
 3208 0024 B4F8E410 		ldrh	r1, [r4, #228]
 3209 0028 D4F8E000 		ldr	r0, [r4, #224]
 3210 002c FFF7FEFF 		bl	HAL_GPIO_DeInit
 3211              	.LVL226:
 594:Src/encoder.cpp ****     GPIO_InitTypeDef GPIO_InitStruct;
 3212              		.loc 1 594 5 is_stmt 1 view .LVU896
 595:Src/encoder.cpp ****     GPIO_InitStruct.Pin = motor_spi_cs_pin_;
 3213              		.loc 1 595 5 view .LVU897
 3214              		.loc 1 595 27 is_stmt 0 view .LVU898
 3215 0030 B4F8DC30 		ldrh	r3, [r4, #220]
 3216 0034 0193     		str	r3, [sp, #4]
 596:Src/encoder.cpp ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 3217              		.loc 1 596 5 is_stmt 1 view .LVU899
 3218              		.loc 1 596 26 is_stmt 0 view .LVU900
 3219 0036 0125     		movs	r5, #1
 3220 0038 0295     		str	r5, [sp, #8]
 597:Src/encoder.cpp ****     GPIO_InitStruct.Pull = GPIO_PULLUP;
 3221              		.loc 1 597 5 is_stmt 1 view .LVU901
 3222              		.loc 1 597 26 is_stmt 0 view .LVU902
 3223 003a 0395     		str	r5, [sp, #12]
 598:Src/encoder.cpp ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 3224              		.loc 1 598 5 is_stmt 1 view .LVU903
 3225              		.loc 1 598 27 is_stmt 0 view .LVU904
 3226 003c 0023     		movs	r3, #0
 3227 003e 0493     		str	r3, [sp, #16]
 599:Src/encoder.cpp ****     HAL_GPIO_Init(motor_spi_cs_port_, &GPIO_InitStruct);
 3228              		.loc 1 599 5 is_stmt 1 view .LVU905
 3229              		.loc 1 599 18 is_stmt 0 view .LVU906
 3230 0040 01A9     		add	r1, sp, #4
 3231 0042 D4F8D800 		ldr	r0, [r4, #216]
 3232 0046 FFF7FEFF 		bl	HAL_GPIO_Init
 3233              	.LVL227:
 600:Src/encoder.cpp **** 
 601:Src/encoder.cpp ****     GPIO_InitStruct.Pin = GearboxOutputEncoder_spi_cs_pin_;
 3234              		.loc 1 601 5 is_stmt 1 view .LVU907
 3235              		.loc 1 601 27 is_stmt 0 view .LVU908
 3236 004a B4F8E430 		ldrh	r3, [r4, #228]
 3237 004e 0193     		str	r3, [sp, #4]
 602:Src/encoder.cpp ****     HAL_GPIO_Init(GearboxOutputEncoder_spi_cs_port_, &GPIO_InitStruct);
ARM GAS  /tmp/ccoPBaGE.s 			page 146


 3238              		.loc 1 602 5 is_stmt 1 view .LVU909
 3239              		.loc 1 602 18 is_stmt 0 view .LVU910
 3240 0050 01A9     		add	r1, sp, #4
 3241 0052 D4F8E000 		ldr	r0, [r4, #224]
 3242 0056 FFF7FEFF 		bl	HAL_GPIO_Init
 3243              	.LVL228:
 603:Src/encoder.cpp **** 
 604:Src/encoder.cpp ****     // Write pin high
 605:Src/encoder.cpp ****     HAL_GPIO_WritePin(motor_spi_cs_port_, motor_spi_cs_pin_, GPIO_PIN_SET);
 3244              		.loc 1 605 5 is_stmt 1 view .LVU911
 3245              		.loc 1 605 22 is_stmt 0 view .LVU912
 3246 005a 2A46     		mov	r2, r5
 3247 005c B4F8DC10 		ldrh	r1, [r4, #220]
 3248 0060 D4F8D800 		ldr	r0, [r4, #216]
 3249 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 3250              	.LVL229:
 606:Src/encoder.cpp ****     HAL_GPIO_WritePin(GearboxOutputEncoder_spi_cs_port_, GearboxOutputEncoder_spi_cs_pin_, GPIO_PIN
 3251              		.loc 1 606 5 is_stmt 1 view .LVU913
 3252              		.loc 1 606 22 is_stmt 0 view .LVU914
 3253 0068 2A46     		mov	r2, r5
 3254 006a B4F8E410 		ldrh	r1, [r4, #228]
 3255 006e D4F8E000 		ldr	r0, [r4, #224]
 3256 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 3257              	.LVL230:
 607:Src/encoder.cpp **** }
 3258              		.loc 1 607 1 view .LVU915
 3259 0076 07B0     		add	sp, sp, #28
 3260              	.LCFI22:
 3261              		.cfi_def_cfa_offset 12
 3262              		@ sp needed
 3263 0078 30BD     		pop	{r4, r5, pc}
 3264              		.loc 1 607 1 view .LVU916
 3265              		.cfi_endproc
 3266              	.LFE4973:
 3268              		.section	.text._ZN7Encoder5setupEv,"ax",%progbits
 3269              		.align	1
 3270              		.global	_ZN7Encoder5setupEv
 3271              		.syntax unified
 3272              		.thumb
 3273              		.thumb_func
 3274              		.fpu fpv4-sp-d16
 3276              	_ZN7Encoder5setupEv:
 3277              	.LVL231:
 3278              	.LFB4946:
  35:Src/encoder.cpp ****    // HAL_TIM_Encoder_Start(hw_config_.timer, TIM_CHANNEL_ALL);
 3279              		.loc 1 35 23 is_stmt 1 view -0
 3280              		.cfi_startproc
 3281              		@ args = 0, pretend = 0, frame = 0
 3282              		@ frame_needed = 0, uses_anonymous_args = 0
  35:Src/encoder.cpp ****    // HAL_TIM_Encoder_Start(hw_config_.timer, TIM_CHANNEL_ALL);
 3283              		.loc 1 35 23 is_stmt 0 view .LVU918
 3284 0000 10B5     		push	{r4, lr}
 3285              	.LCFI23:
 3286              		.cfi_def_cfa_offset 8
 3287              		.cfi_offset 4, -8
 3288              		.cfi_offset 14, -4
 3289 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccoPBaGE.s 			page 147


  39:Src/encoder.cpp ****     abs_spi_cs_pin_init();
 3290              		.loc 1 39 5 is_stmt 1 view .LVU919
  39:Src/encoder.cpp ****     abs_spi_cs_pin_init();
 3291              		.loc 1 39 21 is_stmt 0 view .LVU920
 3292 0004 4368     		ldr	r3, [r0, #4]
 3293 0006 1B88     		ldrh	r3, [r3]
  39:Src/encoder.cpp ****     abs_spi_cs_pin_init();
 3294              		.loc 1 39 11 view .LVU921
 3295 0008 A0F8D630 		strh	r3, [r0, #214]	@ movhi
  40:Src/encoder.cpp ****     if(mode_ & MODE_FLAG_ABS){
 3296              		.loc 1 40 5 is_stmt 1 view .LVU922
  40:Src/encoder.cpp ****     if(mode_ & MODE_FLAG_ABS){
 3297              		.loc 1 40 24 is_stmt 0 view .LVU923
 3298 000c FFF7FEFF 		bl	_ZN7Encoder19abs_spi_cs_pin_initEv
 3299              	.LVL232:
  41:Src/encoder.cpp ****         
 3300              		.loc 1 41 5 is_stmt 1 view .LVU924
  48:Src/encoder.cpp ****     {
 3301              		.loc 1 48 10 view .LVU925
 3302 0010 B4F8D630 		ldrh	r3, [r4, #214]
 3303 0014 13F4007F 		tst	r3, #512
 3304 0018 13D1     		bne	.L130
 3305              	.L128:
  54:Src/encoder.cpp ****     GearboxOutputEncoder_cpr_inverse_ = 1.0f / config_.GearboxOutputEncoder_cpr;
 3306              		.loc 1 54 5 view .LVU926
  54:Src/encoder.cpp ****     GearboxOutputEncoder_cpr_inverse_ = 1.0f / config_.GearboxOutputEncoder_cpr;
 3307              		.loc 1 54 27 is_stmt 0 view .LVU927
 3308 001a 6368     		ldr	r3, [r4, #4]
  54:Src/encoder.cpp ****     GearboxOutputEncoder_cpr_inverse_ = 1.0f / config_.GearboxOutputEncoder_cpr;
 3309              		.loc 1 54 25 view .LVU928
 3310 001c D3ED027A 		vldr.32	s15, [r3, #8]	@ int
 3311 0020 F8EEE77A 		vcvt.f32.s32	s15, s15
 3312 0024 B7EE007A 		vmov.f32	s14, #1.0e+0
 3313 0028 C7EE276A 		vdiv.f32	s13, s14, s15
  54:Src/encoder.cpp ****     GearboxOutputEncoder_cpr_inverse_ = 1.0f / config_.GearboxOutputEncoder_cpr;
 3314              		.loc 1 54 18 view .LVU929
 3315 002c C4ED266A 		vstr.32	s13, [r4, #152]
  55:Src/encoder.cpp **** }
 3316              		.loc 1 55 5 is_stmt 1 view .LVU930
  55:Src/encoder.cpp **** }
 3317              		.loc 1 55 46 is_stmt 0 view .LVU931
 3318 0030 D3ED0D7A 		vldr.32	s15, [r3, #52]	@ int
 3319 0034 F8EEE77A 		vcvt.f32.s32	s15, s15
 3320 0038 C7EE276A 		vdiv.f32	s13, s14, s15
  55:Src/encoder.cpp **** }
 3321              		.loc 1 55 39 view .LVU932
 3322 003c C4ED276A 		vstr.32	s13, [r4, #156]
  56:Src/encoder.cpp **** 
 3323              		.loc 1 56 1 view .LVU933
 3324 0040 10BD     		pop	{r4, pc}
 3325              	.LVL233:
 3326              	.L130:
  50:Src/encoder.cpp ****         abs_485_init();
 3327              		.loc 1 50 9 is_stmt 1 view .LVU934
  50:Src/encoder.cpp ****         abs_485_init();
 3328              		.loc 1 50 28 is_stmt 0 view .LVU935
 3329 0042 2046     		mov	r0, r4
ARM GAS  /tmp/ccoPBaGE.s 			page 148


 3330 0044 FFF7FEFF 		bl	_ZN7Encoder19abs_485_cs_pin_initEv
 3331              	.LVL234:
  51:Src/encoder.cpp ****     }
 3332              		.loc 1 51 9 is_stmt 1 view .LVU936
 3333 0048 E7E7     		b	.L128
 3334              		.cfi_endproc
 3335              	.LFE4946:
 3337              		.section	.text._ZN7Encoder14set_spi_enableEv,"ax",%progbits
 3338              		.align	1
 3339              		.global	_ZN7Encoder14set_spi_enableEv
 3340              		.syntax unified
 3341              		.thumb
 3342              		.thumb_func
 3343              		.fpu fpv4-sp-d16
 3345              	_ZN7Encoder14set_spi_enableEv:
 3346              	.LVL235:
 3347              	.LFB4964:
 422:Src/encoder.cpp ****     SPI_HandleTypeDef * spi;
 3348              		.loc 1 422 1 view -0
 3349              		.cfi_startproc
 3350              		@ args = 0, pretend = 0, frame = 0
 3351              		@ frame_needed = 0, uses_anonymous_args = 0
 422:Src/encoder.cpp ****     SPI_HandleTypeDef * spi;
 3352              		.loc 1 422 1 is_stmt 0 view .LVU938
 3353 0000 10B5     		push	{r4, lr}
 3354              	.LCFI24:
 3355              		.cfi_def_cfa_offset 8
 3356              		.cfi_offset 4, -8
 3357              		.cfi_offset 14, -4
 3358 0002 0446     		mov	r4, r0
 423:Src/encoder.cpp ****     if (config_.is_high_speed_encode_query_enabled == true) 
 3359              		.loc 1 423 5 is_stmt 1 view .LVU939
 424:Src/encoder.cpp ****     {
 3360              		.loc 1 424 5 view .LVU940
 424:Src/encoder.cpp ****     {
 3361              		.loc 1 424 17 is_stmt 0 view .LVU941
 3362 0004 4368     		ldr	r3, [r0, #4]
 424:Src/encoder.cpp ****     {
 3363              		.loc 1 424 5 view .LVU942
 3364 0006 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3365 0008 EBB9     		cbnz	r3, .L134
 433:Src/encoder.cpp ****         HAL_SPI_DeInit(spi);
 3366              		.loc 1 433 9 is_stmt 1 view .LVU943
 3367              	.LVL236:
 434:Src/encoder.cpp ****         spi = hw_config_.GearboxOutputEncoder_spi;
 3368              		.loc 1 434 9 view .LVU944
 433:Src/encoder.cpp ****         HAL_SPI_DeInit(spi);
 3369              		.loc 1 433 12 is_stmt 0 view .LVU945
 3370 000a 0368     		ldr	r3, [r0]
 434:Src/encoder.cpp ****         spi = hw_config_.GearboxOutputEncoder_spi;
 3371              		.loc 1 434 23 view .LVU946
 3372 000c 1868     		ldr	r0, [r3]
 3373              	.LVL237:
 434:Src/encoder.cpp ****         spi = hw_config_.GearboxOutputEncoder_spi;
 3374              		.loc 1 434 23 view .LVU947
 3375 000e FFF7FEFF 		bl	HAL_SPI_DeInit
 3376              	.LVL238:
ARM GAS  /tmp/ccoPBaGE.s 			page 149


 435:Src/encoder.cpp ****         HAL_SPI_DeInit(spi);
 3377              		.loc 1 435 9 is_stmt 1 view .LVU948
 436:Src/encoder.cpp **** 
 3378              		.loc 1 436 9 view .LVU949
 435:Src/encoder.cpp ****         HAL_SPI_DeInit(spi);
 3379              		.loc 1 435 13 is_stmt 0 view .LVU950
 3380 0012 2368     		ldr	r3, [r4]
 436:Src/encoder.cpp **** 
 3381              		.loc 1 436 23 view .LVU951
 3382 0014 5868     		ldr	r0, [r3, #4]
 3383 0016 FFF7FEFF 		bl	HAL_SPI_DeInit
 3384              	.LVL239:
 438:Src/encoder.cpp ****         motor_spi_cs_pin_ = MU128_1_Pin;
 3385              		.loc 1 438 9 is_stmt 1 view .LVU952
 438:Src/encoder.cpp ****         motor_spi_cs_pin_ = MU128_1_Pin;
 3386              		.loc 1 438 28 is_stmt 0 view .LVU953
 3387 001a 4FF09040 		mov	r0, #1207959552
 3388 001e C4F8D800 		str	r0, [r4, #216]
 439:Src/encoder.cpp ****         GearboxOutputEncoder_spi_cs_port_ = MU128_2_GPIO_Port;
 3389              		.loc 1 439 9 is_stmt 1 view .LVU954
 439:Src/encoder.cpp ****         GearboxOutputEncoder_spi_cs_port_ = MU128_2_GPIO_Port;
 3390              		.loc 1 439 27 is_stmt 0 view .LVU955
 3391 0022 1021     		movs	r1, #16
 3392 0024 A4F8DC10 		strh	r1, [r4, #220]	@ movhi
 440:Src/encoder.cpp ****         GearboxOutputEncoder_spi_cs_pin_ = MU128_2_Pin;
 3393              		.loc 1 440 9 is_stmt 1 view .LVU956
 440:Src/encoder.cpp ****         GearboxOutputEncoder_spi_cs_pin_ = MU128_2_Pin;
 3394              		.loc 1 440 43 is_stmt 0 view .LVU957
 3395 0028 C4F8E000 		str	r0, [r4, #224]
 441:Src/encoder.cpp ****         // Init cs pin
 3396              		.loc 1 441 9 is_stmt 1 view .LVU958
 441:Src/encoder.cpp ****         // Init cs pin
 3397              		.loc 1 441 42 is_stmt 0 view .LVU959
 3398 002c 4FF40043 		mov	r3, #32768
 3399 0030 A4F8E430 		strh	r3, [r4, #228]	@ movhi
 443:Src/encoder.cpp ****         HAL_GPIO_DeInit(GearboxOutputEncoder_spi_cs_port_, GearboxOutputEncoder_spi_cs_pin_);
 3400              		.loc 1 443 9 is_stmt 1 view .LVU960
 443:Src/encoder.cpp ****         HAL_GPIO_DeInit(GearboxOutputEncoder_spi_cs_port_, GearboxOutputEncoder_spi_cs_pin_);
 3401              		.loc 1 443 24 is_stmt 0 view .LVU961
 3402 0034 FFF7FEFF 		bl	HAL_GPIO_DeInit
 3403              	.LVL240:
 444:Src/encoder.cpp **** 
 3404              		.loc 1 444 9 is_stmt 1 view .LVU962
 444:Src/encoder.cpp **** 
 3405              		.loc 1 444 24 is_stmt 0 view .LVU963
 3406 0038 B4F8E410 		ldrh	r1, [r4, #228]
 3407 003c D4F8E000 		ldr	r0, [r4, #224]
 3408 0040 FFF7FEFF 		bl	HAL_GPIO_DeInit
 3409              	.LVL241:
 449:Src/encoder.cpp **** 
 3410              		.loc 1 449 1 view .LVU964
 3411 0044 10BD     		pop	{r4, pc}
 3412              	.LVL242:
 3413              	.L134:
 426:Src/encoder.cpp ****         abs_spi_init();
 3414              		.loc 1 426 9 is_stmt 1 view .LVU965
 426:Src/encoder.cpp ****         abs_spi_init();
ARM GAS  /tmp/ccoPBaGE.s 			page 150


 3415              		.loc 1 426 28 is_stmt 0 view .LVU966
 3416 0046 FFF7FEFF 		bl	_ZN7Encoder19abs_spi_cs_pin_initEv
 3417              	.LVL243:
 427:Src/encoder.cpp **** 
 3418              		.loc 1 427 9 is_stmt 1 view .LVU967
 3419              	.LBB1130:
 3420              	.LBI1130:
 374:Src/encoder.cpp **** //     if ((mode_ & MODE_FLAG_ABS) == 0x0)
 3421              		.loc 1 374 6 view .LVU968
 3422              	.LBE1130:
 3423              		.cfi_endproc
 3424              	.LFE4964:
 3426              		.section	.text._ZN7Encoder6updateEv,"ax",%progbits
 3427              		.align	1
 3428              		.global	_ZN7Encoder6updateEv
 3429              		.syntax unified
 3430              		.thumb
 3431              		.thumb_func
 3432              		.fpu fpv4-sp-d16
 3434              	_ZN7Encoder6updateEv:
 3435              	.LVL244:
 3436              	.LFB4974:
 608:Src/encoder.cpp **** 
 609:Src/encoder.cpp **** 
 610:Src/encoder.cpp **** bool Encoder::update() {
 3437              		.loc 1 610 24 view -0
 3438              		.cfi_startproc
 3439              		@ args = 0, pretend = 0, frame = 0
 3440              		@ frame_needed = 0, uses_anonymous_args = 0
 3441              		.loc 1 610 24 is_stmt 0 view .LVU970
 3442 0000 70B5     		push	{r4, r5, r6, lr}
 3443              	.LCFI25:
 3444              		.cfi_def_cfa_offset 16
 3445              		.cfi_offset 4, -16
 3446              		.cfi_offset 5, -12
 3447              		.cfi_offset 6, -8
 3448              		.cfi_offset 14, -4
 3449 0002 2DED068B 		vpush.64	{d8, d9, d10}
 3450              	.LCFI26:
 3451              		.cfi_def_cfa_offset 40
 3452              		.cfi_offset 80, -40
 3453              		.cfi_offset 81, -36
 3454              		.cfi_offset 82, -32
 3455              		.cfi_offset 83, -28
 3456              		.cfi_offset 84, -24
 3457              		.cfi_offset 85, -20
 3458 0006 0446     		mov	r4, r0
 611:Src/encoder.cpp ****     // update internal encoder state.
 612:Src/encoder.cpp ****     int32_t delta_enc = 0,gear_delta_enc = 0;
 3459              		.loc 1 612 5 is_stmt 1 view .LVU971
 3460              	.LVL245:
 613:Src/encoder.cpp ****     int32_t pos_abs_latched = pos_abs_; //LATCH
 3461              		.loc 1 613 5 view .LVU972
 3462              		.loc 1 613 13 is_stmt 0 view .LVU973
 3463 0008 456E     		ldr	r5, [r0, #100]
 3464              	.LVL246:
 614:Src/encoder.cpp ****     switch (mode_) {
ARM GAS  /tmp/ccoPBaGE.s 			page 151


 3465              		.loc 1 614 5 is_stmt 1 view .LVU974
 3466              	.LBB1206:
 3467              		.loc 1 614 13 is_stmt 0 view .LVU975
 3468 000a B0F8D630 		ldrh	r3, [r0, #214]
 3469              		.loc 1 614 5 view .LVU976
 3470 000e 022B     		cmp	r3, #2
 3471 0010 00F0ED81 		beq	.L136
 3472 0014 10D8     		bhi	.L137
 3473 0016 002B     		cmp	r3, #0
 3474 0018 00F09B80 		beq	.L196
 3475              	.LBB1207:
 615:Src/encoder.cpp ****         case MODE_INCREMENTAL: {
 616:Src/encoder.cpp ****             //TODO: use count_in_cpr_ instead as shadow_count_ can overflow
 617:Src/encoder.cpp ****             //or use 64 bit
 618:Src/encoder.cpp ****             int16_t delta_enc_16 = (int16_t)tim_cnt_sample_ - (int16_t)shadow_count_;
 619:Src/encoder.cpp ****             delta_enc = (int32_t)delta_enc_16; //sign extend
 620:Src/encoder.cpp ****         } break;
 621:Src/encoder.cpp **** 
 622:Src/encoder.cpp ****         case MODE_HALL: {
 3476              		.loc 1 622 9 is_stmt 1 view .LVU977
 3477              		.loc 1 622 25 view .LVU978
 3478              	.LBB1208:
 623:Src/encoder.cpp ****             int32_t hall_cnt;
 3479              		.loc 1 623 13 view .LVU979
 624:Src/encoder.cpp ****             if (decode_hall(hall_state_, &hall_cnt)) {
 3480              		.loc 1 624 13 view .LVU980
 3481              	.LVL247:
 3482              	.LBB1209:
 3483              	.LBI1209:
 338:Src/encoder.cpp ****     switch (hall_state) {
 3484              		.loc 1 338 13 view .LVU981
 3485              	.LBB1210:
 339:Src/encoder.cpp ****         case 0b001: *hall_cnt = 0; return true;
 3486              		.loc 1 339 5 view .LVU982
 3487 001c 90F8AE30 		ldrb	r3, [r0, #174]	@ zero_extendqisi2
 3488 0020 013B     		subs	r3, r3, #1
 3489 0022 052B     		cmp	r3, #5
 3490 0024 00F2DA81 		bhi	.L143
 3491 0028 DFE813F0 		tbh	[pc, r3, lsl #1]
 3492              	.L145:
 3493 002c 8B02     		.2byte	(.L150-.L145)/2
 3494 002e 8D02     		.2byte	(.L180-.L145)/2
 3495 0030 C701     		.2byte	(.L148-.L145)/2
 3496 0032 D401     		.2byte	(.L147-.L145)/2
 3497 0034 D601     		.2byte	(.L146-.L145)/2
 3498 0036 D201     		.2byte	(.L144-.L145)/2
 3499              	.LVL248:
 3500              		.p2align 1
 3501              	.L137:
 339:Src/encoder.cpp ****         case 0b001: *hall_cnt = 0; return true;
 3502              		.loc 1 339 5 is_stmt 0 view .LVU983
 3503              	.LBE1210:
 3504              	.LBE1209:
 3505              	.LBE1208:
 3506              	.LBE1207:
 614:Src/encoder.cpp ****         case MODE_INCREMENTAL: {
 3507              		.loc 1 614 5 view .LVU984
ARM GAS  /tmp/ccoPBaGE.s 			page 152


 3508 0038 A3F58073 		sub	r3, r3, #256
 3509 003c 9BB2     		uxth	r3, r3
 3510 003e 032B     		cmp	r3, #3
 3511 0040 00F21482 		bhi	.L197
 3512              	.LBB1221:
 625:Src/encoder.cpp ****                 delta_enc = hall_cnt - count_in_cpr_;
 626:Src/encoder.cpp ****                 delta_enc = mod(delta_enc, 6);
 627:Src/encoder.cpp ****                 if (delta_enc > 3)
 628:Src/encoder.cpp ****                     delta_enc -= 6;
 629:Src/encoder.cpp ****             } else {
 630:Src/encoder.cpp ****                 if (!config_.ignore_illegal_hall_state) {
 631:Src/encoder.cpp ****                     set_error(ERROR_ILLEGAL_HALL_STATE);
 632:Src/encoder.cpp ****                     return false;
 633:Src/encoder.cpp ****                 }
 634:Src/encoder.cpp ****             }
 635:Src/encoder.cpp ****         } break;
 636:Src/encoder.cpp **** 
 637:Src/encoder.cpp ****         case MODE_SINCOS: {
 638:Src/encoder.cpp ****             float phase = fast_atan2(sincos_sample_s_, sincos_sample_c_);
 639:Src/encoder.cpp ****             int fake_count = (int)(1000.0f * phase);
 640:Src/encoder.cpp ****             //CPR = 6283 = 2pi * 1k
 641:Src/encoder.cpp **** 
 642:Src/encoder.cpp ****             delta_enc = fake_count - count_in_cpr_;
 643:Src/encoder.cpp ****             delta_enc = mod(delta_enc, 6283);
 644:Src/encoder.cpp ****             if (delta_enc > 6283/2)
 645:Src/encoder.cpp ****                 delta_enc -= 6283;
 646:Src/encoder.cpp ****         } break;
 647:Src/encoder.cpp ****         
 648:Src/encoder.cpp ****         case MODE_SPI_ABS_RLS:
 3513              		.loc 1 648 9 is_stmt 1 view .LVU985
 649:Src/encoder.cpp ****         case MODE_SPI_ABS_AMS:
 3514              		.loc 1 649 9 view .LVU986
 650:Src/encoder.cpp ****         case MODE_SPI_ABS_CUI: 
 3515              		.loc 1 650 9 view .LVU987
 651:Src/encoder.cpp ****         case MODE_SPI_ABS_AEAT: {
 3516              		.loc 1 651 9 view .LVU988
 3517              		.loc 1 651 33 view .LVU989
 3518              	.LBB1215:
 652:Src/encoder.cpp **** 
 653:Src/encoder.cpp ****             uint32_t rawVal = *(uint32_t *)&abs_spi_dma_rx_[0];
 3519              		.loc 1 653 13 view .LVU990
 3520              		.loc 1 653 22 is_stmt 0 view .LVU991
 3521 0044 D0F8BC20 		ldr	r2, [r0, #188]
 3522              	.LVL249:
 654:Src/encoder.cpp ****             pos_abs_  = ((rawVal & 0x0000ff00)) | ( (rawVal & 0x00ff0000)>>16 ) ;
 3523              		.loc 1 654 13 is_stmt 1 view .LVU992
 3524              		.loc 1 654 74 is_stmt 0 view .LVU993
 3525 0048 C2F30743 		ubfx	r3, r2, #16, #8
 3526              		.loc 1 654 34 view .LVU994
 3527 004c 02F47F42 		and	r2, r2, #65280
 3528              	.LVL250:
 3529              		.loc 1 654 49 view .LVU995
 3530 0050 1343     		orrs	r3, r3, r2
 3531              		.loc 1 654 23 view .LVU996
 3532 0052 4366     		str	r3, [r0, #100]
 655:Src/encoder.cpp ****             pos_abs_ = config_.cpr - pos_abs_; //取反
 3533              		.loc 1 655 13 is_stmt 1 view .LVU997
ARM GAS  /tmp/ccoPBaGE.s 			page 153


 3534              		.loc 1 655 32 is_stmt 0 view .LVU998
 3535 0054 4268     		ldr	r2, [r0, #4]
 3536              		.loc 1 655 36 view .LVU999
 3537 0056 9268     		ldr	r2, [r2, #8]
 3538 0058 D31A     		subs	r3, r2, r3
 3539              		.loc 1 655 22 view .LVU1000
 3540 005a 4366     		str	r3, [r0, #100]
 656:Src/encoder.cpp **** 
 657:Src/encoder.cpp ****             bool encoder_error_detected = false;
 3541              		.loc 1 657 13 is_stmt 1 view .LVU1001
 3542              	.LVL251:
 658:Src/encoder.cpp ****             
 659:Src/encoder.cpp ****             if (abs_spi_pos_updated_ == false) {
 3543              		.loc 1 659 13 view .LVU1002
 3544 005c 90F8D330 		ldrb	r3, [r0, #211]	@ zero_extendqisi2
 3545 0060 3BB1     		cbz	r3, .L152
 660:Src/encoder.cpp ****                     //todo                    
 661:Src/encoder.cpp ****             } else {
 662:Src/encoder.cpp ****                // bool dma_flag = __HAL_DMA_GET_FLAG(hw_config_.motor_spi->hdmatx, DMA_FLAG_TCIF1_5
 663:Src/encoder.cpp ****                 if( (abs_spi_dma_rx_[0] != 0xA6)  ) 
 3546              		.loc 1 663 17 view .LVU1003
 3547 0062 90F8BC30 		ldrb	r3, [r0, #188]	@ zero_extendqisi2
 3548 0066 A62B     		cmp	r3, #166
 3549 0068 40F0DE81 		bne	.L198
 664:Src/encoder.cpp ****                 {
 665:Src/encoder.cpp ****                     encoder_error_detected = true;
 666:Src/encoder.cpp ****                    raw_data1_++;
 667:Src/encoder.cpp ****                 }
 668:Src/encoder.cpp ****                 abs_spi_dma_rx_[0] = 0;
 3550              		.loc 1 668 17 view .LVU1004
 3551              		.loc 1 668 36 is_stmt 0 view .LVU1005
 3552 006c 0023     		movs	r3, #0
 3553 006e 80F8BC30 		strb	r3, [r0, #188]
 3554              	.LVL252:
 669:Src/encoder.cpp ****             }
 670:Src/encoder.cpp ****             
 671:Src/encoder.cpp ****             if(encoder_error_detected)
 3555              		.loc 1 671 13 is_stmt 1 view .LVU1006
 3556              	.L152:
 672:Src/encoder.cpp ****             {
 673:Src/encoder.cpp ****                 axis_->axis_state_.erro = Axis::ENCOS_ERRO::ENCOS_ERROR_ABS_SPI_COM_FAIL;
 674:Src/encoder.cpp ****                 set_error(ERROR_ABS_SPI_COM_FAIL);
 675:Src/encoder.cpp ****             }
 676:Src/encoder.cpp **** 
 677:Src/encoder.cpp ****             pos_abs_latched = pos_abs_;
 3557              		.loc 1 677 13 view .LVU1007
 3558              		.loc 1 677 29 is_stmt 0 view .LVU1008
 3559 0072 656E     		ldr	r5, [r4, #100]
 3560              	.LVL253:
 678:Src/encoder.cpp ****             abs_spi_pos_updated_ = false;
 3561              		.loc 1 678 13 is_stmt 1 view .LVU1009
 3562              		.loc 1 678 34 is_stmt 0 view .LVU1010
 3563 0074 0023     		movs	r3, #0
 3564 0076 84F8D330 		strb	r3, [r4, #211]
 679:Src/encoder.cpp ****             delta_enc = pos_abs_latched - count_in_cpr_; //LATCH
 3565              		.loc 1 679 13 is_stmt 1 view .LVU1011
 3566              		.loc 1 679 23 is_stmt 0 view .LVU1012
ARM GAS  /tmp/ccoPBaGE.s 			page 154


 3567 007a 6069     		ldr	r0, [r4, #20]
 3568              	.LVL254:
 680:Src/encoder.cpp ****             delta_enc = mod(delta_enc, config_.cpr);
 3569              		.loc 1 680 13 is_stmt 1 view .LVU1013
 3570              		.loc 1 680 48 is_stmt 0 view .LVU1014
 3571 007c 6368     		ldr	r3, [r4, #4]
 3572              		.loc 1 680 28 view .LVU1015
 3573 007e 9968     		ldr	r1, [r3, #8]
 3574 0080 281A     		subs	r0, r5, r0
 3575              	.LVL255:
 3576              		.loc 1 680 28 view .LVU1016
 3577 0082 FFF7FEFF 		bl	mod
 3578              	.LVL256:
 681:Src/encoder.cpp ****             if (delta_enc > config_.cpr/2) {
 3579              		.loc 1 681 13 is_stmt 1 view .LVU1017
 3580              		.loc 1 681 29 is_stmt 0 view .LVU1018
 3581 0086 6168     		ldr	r1, [r4, #4]
 3582              		.loc 1 681 37 view .LVU1019
 3583 0088 8B68     		ldr	r3, [r1, #8]
 3584              		.loc 1 681 40 view .LVU1020
 3585 008a 03EBD372 		add	r2, r3, r3, lsr #31
 3586              		.loc 1 681 13 view .LVU1021
 3587 008e B0EB620F 		cmp	r0, r2, asr #1
 682:Src/encoder.cpp ****                 delta_enc -= config_.cpr;
 3588              		.loc 1 682 17 is_stmt 1 view .LVU1022
 3589              		.loc 1 682 27 is_stmt 0 view .LVU1023
 3590 0092 C8BF     		it	gt
 3591 0094 C01A     		subgt	r0, r0, r3
 3592              	.LVL257:
 683:Src/encoder.cpp ****             }
 684:Src/encoder.cpp **** 
 685:Src/encoder.cpp ****             rawVal = *(uint32_t *)&GearboxOutputEncoder_spi_dma_rx_[0];
 3593              		.loc 1 685 13 is_stmt 1 view .LVU1024
 3594              		.loc 1 685 20 is_stmt 0 view .LVU1025
 3595 0096 D4F8C430 		ldr	r3, [r4, #196]
 3596              	.LVL258:
 686:Src/encoder.cpp ****             sencond_pos_abs_ =  ((rawVal & 0x0000ff00)<<8) | ( (rawVal & 0x00ff0000)>>8 )| ( (rawVa
 3597              		.loc 1 686 13 is_stmt 1 view .LVU1026
 687:Src/encoder.cpp ****             sencond_pos_abs_ >>= 6;
 3598              		.loc 1 687 13 view .LVU1027
 686:Src/encoder.cpp ****             sencond_pos_abs_ =  ((rawVal & 0x0000ff00)<<8) | ( (rawVal & 0x00ff0000)>>8 )| ( (rawVa
 3599              		.loc 1 686 55 is_stmt 0 view .LVU1028
 3600 009a 1A02     		lsls	r2, r3, #8
 3601 009c 02F47F02 		and	r2, r2, #16711680
 686:Src/encoder.cpp ****             sencond_pos_abs_ =  ((rawVal & 0x0000ff00)<<8) | ( (rawVal & 0x00ff0000)>>8 )| ( (rawVa
 3602              		.loc 1 686 85 view .LVU1029
 3603 00a0 1E0A     		lsrs	r6, r3, #8
 3604 00a2 06F47F46 		and	r6, r6, #65280
 686:Src/encoder.cpp ****             sencond_pos_abs_ =  ((rawVal & 0x0000ff00)<<8) | ( (rawVal & 0x00ff0000)>>8 )| ( (rawVa
 3605              		.loc 1 686 60 view .LVU1030
 3606 00a6 3243     		orrs	r2, r2, r6
 686:Src/encoder.cpp ****             sencond_pos_abs_ =  ((rawVal & 0x0000ff00)<<8) | ( (rawVal & 0x00ff0000)>>8 )| ( (rawVa
 3607              		.loc 1 686 90 view .LVU1031
 3608 00a8 42EA1362 		orr	r2, r2, r3, lsr #24
 3609              		.loc 1 687 30 view .LVU1032
 3610 00ac 9211     		asrs	r2, r2, #6
 3611 00ae A266     		str	r2, [r4, #104]
ARM GAS  /tmp/ccoPBaGE.s 			page 155


 688:Src/encoder.cpp ****             sencond_pos_abs_ = config_.GearboxOutputEncoder_cpr - sencond_pos_abs_; //取反
 3612              		.loc 1 688 13 is_stmt 1 view .LVU1033
 3613              		.loc 1 688 65 is_stmt 0 view .LVU1034
 3614 00b0 4B6B     		ldr	r3, [r1, #52]
 3615              	.LVL259:
 3616              		.loc 1 688 65 view .LVU1035
 3617 00b2 9A1A     		subs	r2, r3, r2
 3618              		.loc 1 688 30 view .LVU1036
 3619 00b4 A266     		str	r2, [r4, #104]
 689:Src/encoder.cpp ****             
 690:Src/encoder.cpp ****             gear_single_turn_abs_ = sencond_pos_abs_;
 3620              		.loc 1 690 13 is_stmt 1 view .LVU1037
 3621              		.loc 1 690 35 is_stmt 0 view .LVU1038
 3622 00b6 6262     		str	r2, [r4, #36]
 691:Src/encoder.cpp **** 
 692:Src/encoder.cpp ****             gear_single_turn_abs_by_user_ = gear_single_turn_abs_ - config_.Gearoffset;
 3623              		.loc 1 692 13 is_stmt 1 view .LVU1039
 3624              		.loc 1 692 67 is_stmt 0 view .LVU1040
 3625 00b8 8B6B     		ldr	r3, [r1, #56]
 3626 00ba D21A     		subs	r2, r2, r3
 3627              		.loc 1 692 43 view .LVU1041
 3628 00bc A262     		str	r2, [r4, #40]
 693:Src/encoder.cpp ****             while(gear_single_turn_abs_by_user_ > HALF_CPR) {
 3629              		.loc 1 693 13 is_stmt 1 view .LVU1042
 3630              		.loc 1 693 49 view .LVU1043
 3631 00be B2F5003F 		cmp	r2, #131072
 3632 00c2 C8BF     		it	gt
 3633 00c4 1346     		movgt	r3, r2
 3634 00c6 0DDD     		ble	.L159
 3635              	.L158:
 694:Src/encoder.cpp ****                 gear_single_turn_abs_by_user_ -= 2 * HALF_CPR;
 3636              		.loc 1 694 17 view .LVU1044
 693:Src/encoder.cpp ****             while(gear_single_turn_abs_by_user_ > HALF_CPR) {
 3637              		.loc 1 693 13 view .LVU1045
 693:Src/encoder.cpp ****             while(gear_single_turn_abs_by_user_ > HALF_CPR) {
 3638              		.loc 1 693 49 view .LVU1046
 3639 00c8 A3F58023 		sub	r3, r3, #262144
 3640 00cc B3F5003F 		cmp	r3, #131072
 3641 00d0 FADC     		bgt	.L158
 3642              		.loc 1 694 47 is_stmt 0 view .LVU1047
 3643 00d2 A2F50033 		sub	r3, r2, #131072
 3644 00d6 013B     		subs	r3, r3, #1
 3645 00d8 9B0C     		lsrs	r3, r3, #18
 3646 00da 9B04     		lsls	r3, r3, #18
 3647 00dc A2F58022 		sub	r2, r2, #262144
 3648 00e0 D21A     		subs	r2, r2, r3
 3649 00e2 A262     		str	r2, [r4, #40]
 3650              	.L159:
 695:Src/encoder.cpp ****             }
 696:Src/encoder.cpp ****             while(gear_single_turn_abs_by_user_ < -HALF_CPR) {
 3651              		.loc 1 696 13 is_stmt 1 view .LVU1048
 3652              		.loc 1 696 49 view .LVU1049
 3653              		.loc 1 696 19 is_stmt 0 view .LVU1050
 3654 00e4 A26A     		ldr	r2, [r4, #40]
 3655              		.loc 1 696 49 view .LVU1051
 3656 00e6 12F5003F 		cmn	r2, #131072
 3657 00ea 0FDA     		bge	.L156
ARM GAS  /tmp/ccoPBaGE.s 			page 156


 3658 00ec 1146     		mov	r1, r2
 3659 00ee 1346     		mov	r3, r2
 3660              	.L160:
 697:Src/encoder.cpp ****                 gear_single_turn_abs_by_user_ += 2 * HALF_CPR;
 3661              		.loc 1 697 17 is_stmt 1 view .LVU1052
 696:Src/encoder.cpp ****                 gear_single_turn_abs_by_user_ += 2 * HALF_CPR;
 3662              		.loc 1 696 13 view .LVU1053
 696:Src/encoder.cpp ****                 gear_single_turn_abs_by_user_ += 2 * HALF_CPR;
 3663              		.loc 1 696 49 view .LVU1054
 3664 00f0 03F58023 		add	r3, r3, #262144
 3665 00f4 13F5003F 		cmn	r3, #131072
 3666 00f8 FADB     		blt	.L160
 3667              		.loc 1 697 47 is_stmt 0 view .LVU1055
 3668 00fa 6FF40033 		mvn	r3, #131072
 3669 00fe 5B1A     		subs	r3, r3, r1
 3670 0100 9B0C     		lsrs	r3, r3, #18
 3671 0102 9B04     		lsls	r3, r3, #18
 3672 0104 02F58022 		add	r2, r2, #262144
 3673 0108 1A44     		add	r2, r2, r3
 3674 010a A262     		str	r2, [r4, #40]
 3675              	.L156:
 698:Src/encoder.cpp ****             }
 699:Src/encoder.cpp **** 
 700:Src/encoder.cpp ****             if(first_init_ == true)
 3676              		.loc 1 700 13 is_stmt 1 view .LVU1056
 3677 010c 94F8D430 		ldrb	r3, [r4, #212]	@ zero_extendqisi2
 3678 0110 002B     		cmp	r3, #0
 3679 0112 00F09981 		beq	.L161
 701:Src/encoder.cpp ****             {
 702:Src/encoder.cpp ****                 GearboxOutputEncoder_count_in_cpr_ = gear_single_turn_abs_by_user_;
 3680              		.loc 1 702 17 view .LVU1057
 3681              		.loc 1 702 52 is_stmt 0 view .LVU1058
 3682 0116 A261     		str	r2, [r4, #24]
 703:Src/encoder.cpp ****                 first_init_ = false;
 3683              		.loc 1 703 17 is_stmt 1 view .LVU1059
 3684              		.loc 1 703 29 is_stmt 0 view .LVU1060
 3685 0118 0023     		movs	r3, #0
 3686 011a 84F8D430 		strb	r3, [r4, #212]
 704:Src/encoder.cpp ****             }
 705:Src/encoder.cpp **** 
 706:Src/encoder.cpp ****             gear_delta_enc =  gear_single_turn_abs_by_user_ - GearboxOutputEncoder_count_in_cpr_; /
 3687              		.loc 1 706 13 is_stmt 1 view .LVU1061
 707:Src/encoder.cpp ****             GearboxOutputEncoder_count_in_cpr_ = gear_single_turn_abs_by_user_;
 3688              		.loc 1 707 13 view .LVU1062
 708:Src/encoder.cpp ****             if (gear_delta_enc > HALF_CPR) {
 3689              		.loc 1 708 13 view .LVU1063
 3690              	.LVL260:
 3691              	.L162:
 709:Src/encoder.cpp ****                 GearboxOutputEncoder_turns_ -=  1;
 710:Src/encoder.cpp ****             }
 711:Src/encoder.cpp ****             else if (gear_delta_enc < -HALF_CPR) {
 712:Src/encoder.cpp ****                 GearboxOutputEncoder_turns_ +=  1;
 713:Src/encoder.cpp ****             }
 714:Src/encoder.cpp ****             else
 715:Src/encoder.cpp ****             {}
 716:Src/encoder.cpp **** 
 717:Src/encoder.cpp ****                           
ARM GAS  /tmp/ccoPBaGE.s 			page 157


 718:Src/encoder.cpp ****             if( (GearboxOutputEncoder_turns_ > 1) || (GearboxOutputEncoder_turns_ < -1) )
 3692              		.loc 1 718 13 view .LVU1064
 3693              		.loc 1 718 51 is_stmt 0 view .LVU1065
 3694 011e E369     		ldr	r3, [r4, #28]
 3695 0120 0133     		adds	r3, r3, #1
 3696              		.loc 1 718 13 view .LVU1066
 3697 0122 022B     		cmp	r3, #2
 719:Src/encoder.cpp ****             {
 720:Src/encoder.cpp ****                 GearboxOutputEncoder_turns_ = 0;
 3698              		.loc 1 720 17 is_stmt 1 view .LVU1067
 3699              		.loc 1 720 45 is_stmt 0 view .LVU1068
 3700 0124 84BF     		itt	hi
 3701 0126 0023     		movhi	r3, #0
 3702 0128 E361     		strhi	r3, [r4, #28]
 721:Src/encoder.cpp ****             }
 722:Src/encoder.cpp **** 
 723:Src/encoder.cpp ****             GearboxOutputEncoder_counts = GearboxOutputEncoder_turns_*2*HALF_CPR+ gear_single_turn_
 3703              		.loc 1 723 13 is_stmt 1 view .LVU1069
 3704              		.loc 1 723 72 is_stmt 0 view .LVU1070
 3705 012a E369     		ldr	r3, [r4, #28]
 3706              		.loc 1 723 81 view .LVU1071
 3707 012c 02EB8343 		add	r3, r2, r3, lsl #18
 3708 0130 07EE903A 		vmov	s15, r3	@ int
 3709              		.loc 1 723 41 view .LVU1072
 3710 0134 F8EEE77A 		vcvt.f32.s32	s15, s15
 3711 0138 C4ED087A 		vstr.32	s15, [r4, #32]
 724:Src/encoder.cpp ****             gearboxpos_ = GearboxOutputEncoder_counts * GearboxOutputEncoder_cpr_inverse_;
 3712              		.loc 1 724 13 is_stmt 1 view .LVU1073
 3713              		.loc 1 724 55 is_stmt 0 view .LVU1074
 3714 013c 94ED277A 		vldr.32	s14, [r4, #156]
 3715 0140 67EE877A 		vmul.f32	s15, s15, s14
 3716              		.loc 1 724 25 view .LVU1075
 3717 0144 C4ED237A 		vstr.32	s15, [r4, #140]
 725:Src/encoder.cpp ****             gearboxpos_q15_ = (int32_t)(gearboxpos_ * 32768.f);
 3718              		.loc 1 725 13 is_stmt 1 view .LVU1076
 3719              		.loc 1 725 31 is_stmt 0 view .LVU1077
 3720 0148 FEEEE87A 		vcvt.s32.f32	s15, s15, #15
 3721 014c C4ED247A 		vstr.32	s15, [r4, #144]	@ int
 3722              	.LBE1215:
 726:Src/encoder.cpp ****             
 727:Src/encoder.cpp **** 
 728:Src/encoder.cpp ****         }break;
 3723              		.loc 1 728 10 is_stmt 1 view .LVU1078
 3724 0150 04E0     		b	.L142
 3725              	.LVL261:
 3726              	.L196:
 615:Src/encoder.cpp ****             //TODO: use count_in_cpr_ instead as shadow_count_ can overflow
 3727              		.loc 1 615 9 view .LVU1079
 615:Src/encoder.cpp ****             //TODO: use count_in_cpr_ instead as shadow_count_ can overflow
 3728              		.loc 1 615 32 view .LVU1080
 3729              	.LBB1216:
 618:Src/encoder.cpp ****             delta_enc = (int32_t)delta_enc_16; //sign extend
 3730              		.loc 1 618 13 view .LVU1081
 619:Src/encoder.cpp ****         } break;
 3731              		.loc 1 619 13 view .LVU1082
 618:Src/encoder.cpp ****             delta_enc = (int32_t)delta_enc_16; //sign extend
 3732              		.loc 1 618 61 is_stmt 0 view .LVU1083
ARM GAS  /tmp/ccoPBaGE.s 			page 158


 3733 0152 0369     		ldr	r3, [r0, #16]
 3734 0154 B0F8AC00 		ldrh	r0, [r0, #172]
 3735              	.LVL262:
 618:Src/encoder.cpp ****             delta_enc = (int32_t)delta_enc_16; //sign extend
 3736              		.loc 1 618 61 view .LVU1084
 3737 0158 C01A     		subs	r0, r0, r3
 619:Src/encoder.cpp ****         } break;
 3738              		.loc 1 619 23 view .LVU1085
 3739 015a 00B2     		sxth	r0, r0
 3740              	.LVL263:
 619:Src/encoder.cpp ****         } break;
 3741              		.loc 1 619 23 view .LVU1086
 3742              	.LBE1216:
 620:Src/encoder.cpp **** 
 3743              		.loc 1 620 11 is_stmt 1 view .LVU1087
 3744              	.L142:
 620:Src/encoder.cpp **** 
 3745              		.loc 1 620 11 is_stmt 0 view .LVU1088
 3746              	.LBE1221:
 3747              	.LBE1206:
 729:Src/encoder.cpp ****         default: {
 730:Src/encoder.cpp ****             delta_enc = pos_abs_latched - count_in_cpr_; //LATCH
 731:Src/encoder.cpp ****             delta_enc = mod(delta_enc, config_.cpr);
 732:Src/encoder.cpp ****             if (delta_enc > config_.cpr/2) {
 733:Src/encoder.cpp ****                 delta_enc -= config_.cpr;
 734:Src/encoder.cpp ****             }
 735:Src/encoder.cpp ****            //set_error(ERROR_UNSUPPORTED_ENCODER_MODE);
 736:Src/encoder.cpp ****            //return false;
 737:Src/encoder.cpp ****         } break;
 738:Src/encoder.cpp ****     }
 739:Src/encoder.cpp **** 
 740:Src/encoder.cpp ****     shadow_count_ += delta_enc;
 3748              		.loc 1 740 5 is_stmt 1 view .LVU1089
 3749              		.loc 1 740 19 is_stmt 0 view .LVU1090
 3750 015c 2369     		ldr	r3, [r4, #16]
 3751 015e 0344     		add	r3, r3, r0
 3752 0160 2361     		str	r3, [r4, #16]
 741:Src/encoder.cpp ****     count_in_cpr_ += delta_enc;
 3753              		.loc 1 741 5 is_stmt 1 view .LVU1091
 3754              		.loc 1 741 19 is_stmt 0 view .LVU1092
 3755 0162 6369     		ldr	r3, [r4, #20]
 3756 0164 1844     		add	r0, r0, r3
 3757              	.LVL264:
 3758              		.loc 1 741 19 view .LVU1093
 3759 0166 6061     		str	r0, [r4, #20]
 742:Src/encoder.cpp ****     count_in_cpr_ = mod(count_in_cpr_, config_.cpr);
 3760              		.loc 1 742 5 is_stmt 1 view .LVU1094
 3761              		.loc 1 742 48 is_stmt 0 view .LVU1095
 3762 0168 6368     		ldr	r3, [r4, #4]
 3763              		.loc 1 742 24 view .LVU1096
 3764 016a 9968     		ldr	r1, [r3, #8]
 3765 016c FFF7FEFF 		bl	mod
 3766              	.LVL265:
 743:Src/encoder.cpp **** 
 744:Src/encoder.cpp ****     if( (mode_ & MODE_FLAG_ABS) | (mode_ & MODE_FLAG_485_ABS) )
 3767              		.loc 1 744 5 is_stmt 1 view .LVU1097
 3768 0170 B4F8D630 		ldrh	r3, [r4, #214]
ARM GAS  /tmp/ccoPBaGE.s 			page 159


 3769 0174 03F44073 		and	r3, r3, #768
 745:Src/encoder.cpp ****     {
 746:Src/encoder.cpp ****         count_in_cpr_ = pos_abs_latched;
 3770              		.loc 1 746 23 is_stmt 0 view .LVU1098
 3771 0178 002B     		cmp	r3, #0
 3772 017a 08BF     		it	eq
 3773 017c 0546     		moveq	r5, r0
 3774              	.LVL266:
 3775              		.loc 1 746 23 view .LVU1099
 3776 017e 6561     		str	r5, [r4, #20]
 747:Src/encoder.cpp ****         
 748:Src/encoder.cpp **** 
 749:Src/encoder.cpp ****     }
 750:Src/encoder.cpp ****         
 751:Src/encoder.cpp **** 
 752:Src/encoder.cpp ****     //// run pll (for now pll is in units of encoder counts)
 753:Src/encoder.cpp ****     // Predict current pos
 754:Src/encoder.cpp ****     pos_estimate_counts_ += current_meas_period * vel_estimate_counts_;
 3777              		.loc 1 754 5 is_stmt 1 view .LVU1100
 3778              		.loc 1 754 49 is_stmt 0 view .LVU1101
 3779 0180 C34B     		ldr	r3, .L200
 3780 0182 D3ED007A 		vldr.32	s15, [r3]
 3781 0186 D4ED138A 		vldr.32	s17, [r4, #76]
 3782 018a 67EEA88A 		vmul.f32	s17, s15, s17
 3783              		.loc 1 754 26 view .LVU1102
 3784 018e 94ED110A 		vldr.32	s0, [r4, #68]
 3785 0192 38EE800A 		vadd.f32	s0, s17, s0
 3786 0196 84ED110A 		vstr.32	s0, [r4, #68]
 755:Src/encoder.cpp ****     pos_cpr_counts_      += current_meas_period * vel_estimate_counts_;
 3787              		.loc 1 755 5 is_stmt 1 view .LVU1103
 3788              		.loc 1 755 26 is_stmt 0 view .LVU1104
 3789 019a 94ED127A 		vldr.32	s14, [r4, #72]
 3790 019e 78EE878A 		vadd.f32	s17, s17, s14
 3791 01a2 C4ED128A 		vstr.32	s17, [r4, #72]
 756:Src/encoder.cpp ****     gear_pos_cpr_counts_      += current_meas_period * gear_vel_estimate_counts_;
 3792              		.loc 1 756 5 is_stmt 1 view .LVU1105
 3793              		.loc 1 756 54 is_stmt 0 view .LVU1106
 3794 01a6 94ED297A 		vldr.32	s14, [r4, #164]
 3795 01aa 67EE877A 		vmul.f32	s15, s15, s14
 3796              		.loc 1 756 31 view .LVU1107
 3797 01ae 94ED287A 		vldr.32	s14, [r4, #160]
 3798 01b2 77EE277A 		vadd.f32	s15, s14, s15
 3799 01b6 C4ED287A 		vstr.32	s15, [r4, #160]
 757:Src/encoder.cpp **** 
 758:Src/encoder.cpp ****     // discrete phase detector
 759:Src/encoder.cpp ****     float delta_pos_counts = (float)(shadow_count_ - (int32_t)std::floor(pos_estimate_counts_));
 3800              		.loc 1 759 5 is_stmt 1 view .LVU1108
 3801              	.LVL267:
 3802              	.LBB1224:
 3803              	.LBI1224:
 3804              		.file 13 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // -*- C++ -*- C forwarding header.
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // software; you can redistribute it and/or modify it under the
ARM GAS  /tmp/ccoPBaGE.s 			page 160


   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** /** @file include/cmath
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  This is a Standard C++ Library file.  You should @c \#include this file
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  in your programs, rather than any of the @a *.h implementation files.
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  This is the C++ version of the Standard C Library header @c math.h,
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  and its contents are (mostly) the same as that header, but are all
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  contained in the namespace @c std (except for names which are defined
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  *  as macros in C).
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****  */
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** //
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // ISO C++ 14882: 26.5  C library
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** //
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #pragma GCC system_header
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <bits/c++config.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <bits/cpp_type_traits.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <ext/type_traits.h>
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include_next <math.h>
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #include <bits/std_abs.h>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef _GLIBCXX_CMATH
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #define _GLIBCXX_CMATH 1
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** // Get rid of those macros defined in <math.h> in lieu of real functions.
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef div
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef acos
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef asin
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef atan
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef atan2
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef ceil
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef cos
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef cosh
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef exp
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef fabs
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef floor
ARM GAS  /tmp/ccoPBaGE.s 			page 161


  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef fmod
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef frexp
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef ldexp
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef log
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef log10
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef modf
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef pow
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef sin
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef sinh
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef sqrt
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef tan
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #undef tanh
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** extern "C++"
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** {
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** {
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::acos;
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   acos(float __x)
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_acosf(__x); }
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   acos(long double __x)
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_acosl(__x); }
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     acos(_Tp __x)
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_acos(__x); }
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::asin;
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   asin(float __x)
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_asinf(__x); }
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   asin(long double __x)
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_asinl(__x); }
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     asin(_Tp __x)
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_asin(__x); }
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
ARM GAS  /tmp/ccoPBaGE.s 			page 162


 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::atan;
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan(float __x)
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atanf(__x); }
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan(long double __x)
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atanl(__x); }
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     atan(_Tp __x)
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_atan(__x); }
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::atan2;
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan2(float __y, float __x)
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atan2f(__y, __x); }
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   atan2(long double __y, long double __x)
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_atan2l(__y, __x); }
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp, typename _Up>
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     atan2(_Tp __y, _Up __x)
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     {
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****       return atan2(__type(__y), __type(__x));
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     }
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::ceil;
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ceil(float __x)
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ceilf(__x); }
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   ceil(long double __x)
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_ceill(__x); }
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     ceil(_Tp __x)
ARM GAS  /tmp/ccoPBaGE.s 			page 163


 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_ceil(__x); }
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::cos;
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cos(float __x)
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_cosf(__x); }
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cos(long double __x)
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_cosl(__x); }
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     cos(_Tp __x)
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_cos(__x); }
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::cosh;
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cosh(float __x)
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_coshf(__x); }
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   cosh(long double __x)
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_coshl(__x); }
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     cosh(_Tp __x)
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_cosh(__x); }
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::exp;
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   exp(float __x)
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_expf(__x); }
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   exp(long double __x)
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_expl(__x); }
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     exp(_Tp __x)
ARM GAS  /tmp/ccoPBaGE.s 			page 164


 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_exp(__x); }
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::fabs;
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fabs(float __x)
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fabsf(__x); }
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   fabs(long double __x)
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_fabsl(__x); }
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #endif
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   template<typename _Tp>
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****                                     double>::__type
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     fabs(_Tp __x)
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****     { return __builtin_fabs(__x); }
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   using ::floor;
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** 
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   floor(float __x)
 3805              		.loc 13 260 3 view .LVU1109
 3806              	.LBB1225:
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_floorf(__x); }
 3807              		.loc 13 261 5 view .LVU1110
 3808              		.loc 13 261 28 is_stmt 0 view .LVU1111
 3809 01ba FFF7FEFF 		bl	floorf
 3810              	.LVL268:
 3811              		.loc 13 261 28 view .LVU1112
 3812              	.LBE1225:
 3813              	.LBE1224:
 3814              		.loc 1 759 54 view .LVU1113
 3815 01be BDEEC00A 		vcvt.s32.f32	s0, s0
 3816              		.loc 1 759 52 view .LVU1114
 3817 01c2 2369     		ldr	r3, [r4, #16]
 3818 01c4 10EE102A 		vmov	r2, s0	@ int
 3819 01c8 9B1A     		subs	r3, r3, r2
 3820              		.loc 1 759 95 view .LVU1115
 3821 01ca 07EE903A 		vmov	s15, r3	@ int
 3822 01ce F8EEE79A 		vcvt.f32.s32	s19, s15
 3823              	.LVL269:
 760:Src/encoder.cpp ****     float delta_pos_cpr_counts = (float)(count_in_cpr_ - (int32_t)std::floor(pos_cpr_counts_));
 3824              		.loc 1 760 5 is_stmt 1 view .LVU1116
 3825              	.LBB1226:
 3826              	.LBI1226:
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_floorf(__x); }
 3827              		.loc 13 260 3 view .LVU1117
 3828              	.LBB1227:
 3829              		.loc 13 261 5 view .LVU1118
 3830              		.loc 13 261 28 is_stmt 0 view .LVU1119
 3831 01d2 B0EE680A 		vmov.f32	s0, s17
 3832 01d6 FFF7FEFF 		bl	floorf
ARM GAS  /tmp/ccoPBaGE.s 			page 165


 3833              	.LVL270:
 3834              		.loc 13 261 28 view .LVU1120
 3835              	.LBE1227:
 3836              	.LBE1226:
 761:Src/encoder.cpp ****     delta_pos_cpr_counts = wrap_pm(delta_pos_cpr_counts, 0.5f * (float)(config_.cpr));
 3837              		.loc 1 761 5 is_stmt 1 view .LVU1121
 3838              		.loc 1 761 81 is_stmt 0 view .LVU1122
 3839 01da 6368     		ldr	r3, [r4, #4]
 3840              		.loc 1 761 65 view .LVU1123
 3841 01dc D3ED028A 		vldr.32	s17, [r3, #8]	@ int
 3842              		.loc 1 761 35 view .LVU1124
 3843 01e0 FAEEEF8A 		vcvt.f32.s32	s17, s17, #1
 3844              	.LVL271:
 3845              	.LBB1228:
 3846              	.LBI1228:
 100:Inc/utils.hpp ****     return fmodf_pos(x + pm_range, 2.0f * pm_range) - pm_range;
 3847              		.loc 8 100 21 is_stmt 1 view .LVU1125
 3848              	.LBB1229:
 101:Inc/utils.hpp **** }
 3849              		.loc 8 101 5 view .LVU1126
 101:Inc/utils.hpp **** }
 3850              		.loc 8 101 21 is_stmt 0 view .LVU1127
 3851 01e4 38EEA89A 		vadd.f32	s18, s17, s17
 3852              	.LVL272:
 3853              	.LBB1230:
 3854              	.LBI1230:
  88:Inc/utils.hpp ****     float out = fmodf(x, y);
 3855              		.loc 8 88 21 is_stmt 1 view .LVU1128
 3856              	.LBB1231:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 3857              		.loc 8 89 5 view .LVU1129
 3858              	.LBE1231:
 3859              	.LBE1230:
 3860              	.LBE1229:
 3861              	.LBE1228:
 760:Src/encoder.cpp ****     delta_pos_cpr_counts = wrap_pm(delta_pos_cpr_counts, 0.5f * (float)(config_.cpr));
 3862              		.loc 1 760 58 is_stmt 0 view .LVU1130
 3863 01e8 BDEEC00A 		vcvt.s32.f32	s0, s0
 3864              	.LVL273:
 760:Src/encoder.cpp ****     delta_pos_cpr_counts = wrap_pm(delta_pos_cpr_counts, 0.5f * (float)(config_.cpr));
 3865              		.loc 1 760 56 view .LVU1131
 3866 01ec 10EE102A 		vmov	r2, s0	@ int
 3867 01f0 AB1A     		subs	r3, r5, r2
 3868 01f2 00EE103A 		vmov	s0, r3	@ int
 760:Src/encoder.cpp ****     delta_pos_cpr_counts = wrap_pm(delta_pos_cpr_counts, 0.5f * (float)(config_.cpr));
 3869              		.loc 1 760 94 view .LVU1132
 3870 01f6 B8EEC00A 		vcvt.f32.s32	s0, s0
 3871              	.LBB1235:
 3872              	.LBB1234:
 3873              	.LBB1233:
 3874              	.LBB1232:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 3875              		.loc 8 89 22 view .LVU1133
 3876 01fa F0EE490A 		vmov.f32	s1, s18
 3877 01fe 30EE280A 		vadd.f32	s0, s0, s17
 3878 0202 FFF7FEFF 		bl	fmodf
 3879              	.LVL274:
ARM GAS  /tmp/ccoPBaGE.s 			page 166


  90:Inc/utils.hpp ****         out += y;
 3880              		.loc 8 90 5 is_stmt 1 view .LVU1134
 3881 0206 B5EEC00A 		vcmpe.f32	s0, #0
 3882 020a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  91:Inc/utils.hpp ****     return out;
 3883              		.loc 8 91 9 view .LVU1135
  91:Inc/utils.hpp ****     return out;
 3884              		.loc 8 91 13 is_stmt 0 view .LVU1136
 3885 020e 48BF     		it	mi
 3886 0210 30EE090A 		vaddmi.f32	s0, s0, s18
 3887              	.LVL275:
  92:Inc/utils.hpp **** }
 3888              		.loc 8 92 5 is_stmt 1 view .LVU1137
  92:Inc/utils.hpp **** }
 3889              		.loc 8 92 5 is_stmt 0 view .LVU1138
 3890              	.LBE1232:
 3891              	.LBE1233:
 101:Inc/utils.hpp **** }
 3892              		.loc 8 101 55 view .LVU1139
 3893 0214 30EE689A 		vsub.f32	s18, s0, s17
 3894              	.LVL276:
 101:Inc/utils.hpp **** }
 3895              		.loc 8 101 55 view .LVU1140
 3896              	.LBE1234:
 3897              	.LBE1235:
 762:Src/encoder.cpp **** 
 763:Src/encoder.cpp ****     float delta_pos_gear_counts = (float)(sencond_pos_abs_ - (int32_t)std::floor(gear_pos_cpr_count
 3898              		.loc 1 763 5 is_stmt 1 view .LVU1141
 3899              	.LBB1236:
 3900              	.LBI1236:
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath ****   { return __builtin_floorf(__x); }
 3901              		.loc 13 260 3 view .LVU1142
 3902              	.LBB1237:
 3903              		.loc 13 261 5 view .LVU1143
 3904              		.loc 13 261 28 is_stmt 0 view .LVU1144
 3905 0218 94ED280A 		vldr.32	s0, [r4, #160]
 3906 021c FFF7FEFF 		bl	floorf
 3907              	.LVL277:
 3908              		.loc 13 261 28 view .LVU1145
 3909              	.LBE1237:
 3910              	.LBE1236:
 764:Src/encoder.cpp ****     delta_pos_gear_counts = wrap_pm(delta_pos_gear_counts, 0.5f * (float)(config_.GearboxOutputEnco
 3911              		.loc 1 764 5 is_stmt 1 view .LVU1146
 3912              		.loc 1 764 83 is_stmt 0 view .LVU1147
 3913 0220 6368     		ldr	r3, [r4, #4]
 3914              		.loc 1 764 67 view .LVU1148
 3915 0222 93ED0DAA 		vldr.32	s20, [r3, #52]	@ int
 3916              		.loc 1 764 36 view .LVU1149
 3917 0226 BAEEEFAA 		vcvt.f32.s32	s20, s20, #1
 3918              	.LVL278:
 3919              	.LBB1238:
 3920              	.LBI1238:
 100:Inc/utils.hpp ****     return fmodf_pos(x + pm_range, 2.0f * pm_range) - pm_range;
 3921              		.loc 8 100 21 is_stmt 1 view .LVU1150
 3922              	.LBB1239:
 101:Inc/utils.hpp **** }
 3923              		.loc 8 101 5 view .LVU1151
ARM GAS  /tmp/ccoPBaGE.s 			page 167


 101:Inc/utils.hpp **** }
 3924              		.loc 8 101 21 is_stmt 0 view .LVU1152
 3925 022a 7AEE0A8A 		vadd.f32	s17, s20, s20
 3926              	.LVL279:
 3927              	.LBB1240:
 3928              	.LBI1240:
  88:Inc/utils.hpp ****     float out = fmodf(x, y);
 3929              		.loc 8 88 21 is_stmt 1 view .LVU1153
 3930              	.LBB1241:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 3931              		.loc 8 89 5 view .LVU1154
 3932              	.LBE1241:
 3933              	.LBE1240:
 3934              	.LBE1239:
 3935              	.LBE1238:
 763:Src/encoder.cpp ****     delta_pos_gear_counts = wrap_pm(delta_pos_gear_counts, 0.5f * (float)(config_.GearboxOutputEnco
 3936              		.loc 1 763 62 is_stmt 0 view .LVU1155
 3937 022e BDEEC00A 		vcvt.s32.f32	s0, s0
 3938              	.LVL280:
 763:Src/encoder.cpp ****     delta_pos_gear_counts = wrap_pm(delta_pos_gear_counts, 0.5f * (float)(config_.GearboxOutputEnco
 3939              		.loc 1 763 60 view .LVU1156
 3940 0232 A36E     		ldr	r3, [r4, #104]
 3941 0234 10EE102A 		vmov	r2, s0	@ int
 3942 0238 9B1A     		subs	r3, r3, r2
 3943 023a 00EE103A 		vmov	s0, r3	@ int
 763:Src/encoder.cpp ****     delta_pos_gear_counts = wrap_pm(delta_pos_gear_counts, 0.5f * (float)(config_.GearboxOutputEnco
 3944              		.loc 1 763 103 view .LVU1157
 3945 023e B8EEC00A 		vcvt.f32.s32	s0, s0
 3946              	.LBB1245:
 3947              	.LBB1244:
 3948              	.LBB1243:
 3949              	.LBB1242:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 3950              		.loc 8 89 22 view .LVU1158
 3951 0242 F0EE680A 		vmov.f32	s1, s17
 3952 0246 30EE0A0A 		vadd.f32	s0, s0, s20
 3953 024a FFF7FEFF 		bl	fmodf
 3954              	.LVL281:
  90:Inc/utils.hpp ****         out += y;
 3955              		.loc 8 90 5 is_stmt 1 view .LVU1159
 3956 024e B5EEC00A 		vcmpe.f32	s0, #0
 3957 0252 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  91:Inc/utils.hpp ****     return out;
 3958              		.loc 8 91 9 view .LVU1160
  91:Inc/utils.hpp ****     return out;
 3959              		.loc 8 91 13 is_stmt 0 view .LVU1161
 3960 0256 48BF     		it	mi
 3961 0258 30EE280A 		vaddmi.f32	s0, s0, s17
 3962              	.LVL282:
  92:Inc/utils.hpp **** }
 3963              		.loc 8 92 5 is_stmt 1 view .LVU1162
  92:Inc/utils.hpp **** }
 3964              		.loc 8 92 5 is_stmt 0 view .LVU1163
 3965              	.LBE1242:
 3966              	.LBE1243:
 101:Inc/utils.hpp **** }
 3967              		.loc 8 101 55 view .LVU1164
ARM GAS  /tmp/ccoPBaGE.s 			page 168


 3968 025c 30EE4AAA 		vsub.f32	s20, s0, s20
 3969              	.LVL283:
 101:Inc/utils.hpp **** }
 3970              		.loc 8 101 55 view .LVU1165
 3971              	.LBE1244:
 3972              	.LBE1245:
 765:Src/encoder.cpp **** 
 766:Src/encoder.cpp ****     // pll feedback
 767:Src/encoder.cpp ****     pos_estimate_counts_ += current_meas_period * pll_kp_ * delta_pos_counts;
 3973              		.loc 1 767 5 is_stmt 1 view .LVU1166
 3974              		.loc 1 767 49 is_stmt 0 view .LVU1167
 3975 0260 94ED140A 		vldr.32	s0, [r4, #80]
 3976 0264 8A4B     		ldr	r3, .L200
 3977 0266 D3ED007A 		vldr.32	s15, [r3]
 3978 026a 20EE270A 		vmul.f32	s0, s0, s15
 3979              		.loc 1 767 59 view .LVU1168
 3980 026e 60EE299A 		vmul.f32	s19, s0, s19
 3981              	.LVL284:
 3982              		.loc 1 767 26 view .LVU1169
 3983 0272 D4ED117A 		vldr.32	s15, [r4, #68]
 3984 0276 77EEA99A 		vadd.f32	s19, s15, s19
 3985 027a C4ED119A 		vstr.32	s19, [r4, #68]
 768:Src/encoder.cpp ****     pos_cpr_counts_ += current_meas_period * pll_kp_ * delta_pos_cpr_counts;
 3986              		.loc 1 768 5 is_stmt 1 view .LVU1170
 3987              		.loc 1 768 54 is_stmt 0 view .LVU1171
 3988 027e 20EE090A 		vmul.f32	s0, s0, s18
 3989              		.loc 1 768 21 view .LVU1172
 3990 0282 D4ED127A 		vldr.32	s15, [r4, #72]
 3991 0286 30EE270A 		vadd.f32	s0, s0, s15
 3992 028a 84ED120A 		vstr.32	s0, [r4, #72]
 769:Src/encoder.cpp ****     pos_cpr_counts_ = fmodf_pos(pos_cpr_counts_, (float)(config_.cpr));
 3993              		.loc 1 769 5 is_stmt 1 view .LVU1173
 3994              		.loc 1 769 66 is_stmt 0 view .LVU1174
 3995 028e 6368     		ldr	r3, [r4, #4]
 3996              		.loc 1 769 32 view .LVU1175
 3997 0290 D3ED029A 		vldr.32	s19, [r3, #8]	@ int
 3998 0294 F8EEE99A 		vcvt.f32.s32	s19, s19
 3999              	.LVL285:
 4000              	.LBB1246:
 4001              	.LBI1246:
  88:Inc/utils.hpp ****     float out = fmodf(x, y);
 4002              		.loc 8 88 21 is_stmt 1 view .LVU1176
 4003              	.LBB1247:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 4004              		.loc 8 89 5 view .LVU1177
  89:Inc/utils.hpp ****     if (out < 0.0f)
 4005              		.loc 8 89 22 is_stmt 0 view .LVU1178
 4006 0298 F0EE690A 		vmov.f32	s1, s19
 4007 029c FFF7FEFF 		bl	fmodf
 4008              	.LVL286:
  90:Inc/utils.hpp ****         out += y;
 4009              		.loc 8 90 5 is_stmt 1 view .LVU1179
 4010 02a0 B5EEC00A 		vcmpe.f32	s0, #0
 4011 02a4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  91:Inc/utils.hpp ****     return out;
 4012              		.loc 8 91 9 view .LVU1180
  91:Inc/utils.hpp ****     return out;
ARM GAS  /tmp/ccoPBaGE.s 			page 169


 4013              		.loc 8 91 13 is_stmt 0 view .LVU1181
 4014 02a8 48BF     		it	mi
 4015 02aa 30EE290A 		vaddmi.f32	s0, s0, s19
 4016              	.LVL287:
  92:Inc/utils.hpp **** }
 4017              		.loc 8 92 5 is_stmt 1 view .LVU1182
  92:Inc/utils.hpp **** }
 4018              		.loc 8 92 5 is_stmt 0 view .LVU1183
 4019              	.LBE1247:
 4020              	.LBE1246:
 4021              		.loc 1 769 21 view .LVU1184
 4022 02ae 84ED120A 		vstr.32	s0, [r4, #72]
 770:Src/encoder.cpp **** 
 771:Src/encoder.cpp ****     gear_pos_cpr_counts_ += current_meas_period * gear_pll_kp_ * delta_pos_gear_counts;
 4023              		.loc 1 771 5 is_stmt 1 view .LVU1185
 4024              		.loc 1 771 49 is_stmt 0 view .LVU1186
 4025 02b2 94ED160A 		vldr.32	s0, [r4, #88]
 4026 02b6 764B     		ldr	r3, .L200
 4027 02b8 D3ED007A 		vldr.32	s15, [r3]
 4028 02bc 20EE270A 		vmul.f32	s0, s0, s15
 4029              		.loc 1 771 64 view .LVU1187
 4030 02c0 20EE0A0A 		vmul.f32	s0, s0, s20
 4031              		.loc 1 771 26 view .LVU1188
 4032 02c4 D4ED287A 		vldr.32	s15, [r4, #160]
 4033 02c8 30EE270A 		vadd.f32	s0, s0, s15
 4034 02cc 84ED280A 		vstr.32	s0, [r4, #160]
 772:Src/encoder.cpp ****     gear_pos_cpr_counts_ = fmodf_pos(gear_pos_cpr_counts_, (float)(config_.GearboxOutputEncoder_cpr
 4035              		.loc 1 772 5 is_stmt 1 view .LVU1189
 4036              		.loc 1 772 76 is_stmt 0 view .LVU1190
 4037 02d0 6368     		ldr	r3, [r4, #4]
 4038              		.loc 1 772 37 view .LVU1191
 4039 02d2 D3ED0D9A 		vldr.32	s19, [r3, #52]	@ int
 4040 02d6 F8EEE99A 		vcvt.f32.s32	s19, s19
 4041              	.LVL288:
 4042              	.LBB1248:
 4043              	.LBI1248:
  88:Inc/utils.hpp ****     float out = fmodf(x, y);
 4044              		.loc 8 88 21 is_stmt 1 view .LVU1192
 4045              	.LBB1249:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 4046              		.loc 8 89 5 view .LVU1193
  89:Inc/utils.hpp ****     if (out < 0.0f)
 4047              		.loc 8 89 22 is_stmt 0 view .LVU1194
 4048 02da F0EE690A 		vmov.f32	s1, s19
 4049 02de FFF7FEFF 		bl	fmodf
 4050              	.LVL289:
  90:Inc/utils.hpp ****         out += y;
 4051              		.loc 8 90 5 is_stmt 1 view .LVU1195
 4052 02e2 B5EEC00A 		vcmpe.f32	s0, #0
 4053 02e6 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  91:Inc/utils.hpp ****     return out;
 4054              		.loc 8 91 9 view .LVU1196
  91:Inc/utils.hpp ****     return out;
 4055              		.loc 8 91 13 is_stmt 0 view .LVU1197
 4056 02ea 48BF     		it	mi
 4057 02ec 30EE290A 		vaddmi.f32	s0, s0, s19
 4058              	.LVL290:
ARM GAS  /tmp/ccoPBaGE.s 			page 170


  92:Inc/utils.hpp **** }
 4059              		.loc 8 92 5 is_stmt 1 view .LVU1198
  92:Inc/utils.hpp **** }
 4060              		.loc 8 92 5 is_stmt 0 view .LVU1199
 4061              	.LBE1249:
 4062              	.LBE1248:
 4063              		.loc 1 772 26 view .LVU1200
 4064 02f0 84ED280A 		vstr.32	s0, [r4, #160]
 773:Src/encoder.cpp **** 
 774:Src/encoder.cpp ****     vel_estimate_counts_ += current_meas_period * pll_ki_ * delta_pos_cpr_counts;
 4065              		.loc 1 774 5 is_stmt 1 view .LVU1201
 4066              		.loc 1 774 51 is_stmt 0 view .LVU1202
 4067 02f4 D4ED155A 		vldr.32	s11, [r4, #84]
 4068              		.loc 1 774 49 view .LVU1203
 4069 02f8 654B     		ldr	r3, .L200
 4070 02fa D3ED006A 		vldr.32	s13, [r3]
 4071 02fe 25EEA67A 		vmul.f32	s14, s11, s13
 4072              		.loc 1 774 59 view .LVU1204
 4073 0302 27EE097A 		vmul.f32	s14, s14, s18
 4074              		.loc 1 774 26 view .LVU1205
 4075 0306 D4ED137A 		vldr.32	s15, [r4, #76]
 4076 030a 37EE277A 		vadd.f32	s14, s14, s15
 4077 030e 84ED137A 		vstr.32	s14, [r4, #76]
 775:Src/encoder.cpp ****     gear_vel_estimate_counts_ += current_meas_period * gear_pll_ki_ * delta_pos_gear_counts;
 4078              		.loc 1 775 5 is_stmt 1 view .LVU1206
 4079              		.loc 1 775 54 is_stmt 0 view .LVU1207
 4080 0312 D4ED177A 		vldr.32	s15, [r4, #92]
 4081 0316 66EEA77A 		vmul.f32	s15, s13, s15
 4082              		.loc 1 775 69 view .LVU1208
 4083 031a 67EE8A7A 		vmul.f32	s15, s15, s20
 4084              		.loc 1 775 31 view .LVU1209
 4085 031e 94ED296A 		vldr.32	s12, [r4, #164]
 4086 0322 77EE867A 		vadd.f32	s15, s15, s12
 4087 0326 C4ED297A 		vstr.32	s15, [r4, #164]
 776:Src/encoder.cpp **** 
 777:Src/encoder.cpp **** 
 778:Src/encoder.cpp ****     bool snap_to_zero_vel = false;
 4088              		.loc 1 778 5 is_stmt 1 view .LVU1210
 4089              	.LVL291:
 779:Src/encoder.cpp ****     if (std::abs(vel_estimate_counts_) < 0.5f * current_meas_period * pll_ki_) {
 4090              		.loc 1 779 5 view .LVU1211
 4091              	.LBB1250:
 4092              	.LBI1250:
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_abs.h ****   { return __builtin_fabsf(__x); }
 4093              		.loc 12 75 3 view .LVU1212
 4094              	.LBB1251:
 4095              		.loc 12 76 5 view .LVU1213
 4096              		.loc 12 76 5 is_stmt 0 view .LVU1214
 4097              	.LBE1251:
 4098              	.LBE1250:
 4099              		.loc 1 779 47 view .LVU1215
 4100 032a B6EE006A 		vmov.f32	s12, #5.0e-1
 4101 032e 26EE866A 		vmul.f32	s12, s13, s12
 4102              		.loc 1 779 69 view .LVU1216
 4103 0332 26EE256A 		vmul.f32	s12, s12, s11
 4104              	.LBB1253:
 4105              	.LBB1252:
ARM GAS  /tmp/ccoPBaGE.s 			page 171


 4106              		.loc 12 76 31 view .LVU1217
 4107 0336 B0EEC77A 		vabs.f32	s14, s14
 4108              	.LBE1252:
 4109              	.LBE1253:
 4110              		.loc 1 779 5 view .LVU1218
 4111 033a B4EEC76A 		vcmpe.f32	s12, s14
 4112 033e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 780:Src/encoder.cpp ****         vel_estimate_counts_ = 0.0f;  //align delta-sigma on zero to prevent jitter
 4113              		.loc 1 780 9 is_stmt 1 view .LVU1219
 4114              		.loc 1 780 30 is_stmt 0 view .LVU1220
 4115 0342 C4BF     		itt	gt
 4116 0344 0023     		movgt	r3, #0
 4117 0346 E364     		strgt	r3, [r4, #76]	@ float
 781:Src/encoder.cpp ****         snap_to_zero_vel = true;
 4118              		.loc 1 781 9 is_stmt 1 view .LVU1221
 4119              	.LVL292:
 782:Src/encoder.cpp ****     }
 783:Src/encoder.cpp **** 
 784:Src/encoder.cpp **** 
 785:Src/encoder.cpp ****     vel_estimate_ = vel_estimate_counts_ * cpr_inverse_;
 4120              		.loc 1 785 5 view .LVU1222
 4121              		.loc 1 785 21 is_stmt 0 view .LVU1223
 4122 0348 94ED136A 		vldr.32	s12, [r4, #76]
 4123              		.loc 1 785 44 view .LVU1224
 4124 034c D4ED265A 		vldr.32	s11, [r4, #152]
 4125              		.loc 1 785 19 view .LVU1225
 4126 0350 26EE257A 		vmul.f32	s14, s12, s11
 4127              	.LVL293:
 4128              	.LBB1254:
 4129              	.LBI1254:
  52:Inc/component.hpp ****         content_ = value;
 4130              		.loc 2 52 10 is_stmt 1 view .LVU1226
 4131              	.LBB1255:
  53:Inc/component.hpp ****         age_ = 0;
 4132              		.loc 2 53 18 is_stmt 0 view .LVU1227
 4133 0354 84ED1F7A 		vstr.32	s14, [r4, #124]
  54:Inc/component.hpp ****     }
 4134              		.loc 2 54 14 view .LVU1228
 4135 0358 0023     		movs	r3, #0
 4136 035a A367     		str	r3, [r4, #120]
 4137              	.LVL294:
  54:Inc/component.hpp ****     }
 4138              		.loc 2 54 14 view .LVU1229
 4139              	.LBE1255:
 4140              	.LBE1254:
 786:Src/encoder.cpp ****     vel_estimate_q11_ = (int32_t)(*vel_estimate_.present() * 2048.0f);
 4141              		.loc 1 786 5 is_stmt 1 view .LVU1230
 4142              	.LBB1256:
 4143              	.LBI1256:
  73:Inc/component.hpp ****         if (age_ == 0) {
 4144              		.loc 2 73 22 view .LVU1231
 4145              	.LBB1257:
 4146              	.LBI1257:
 4147              		.loc 11 701 2 view .LVU1232
 4148              	.LBB1258:
 4149              	.LBI1258:
 4150              		.loc 7 76 5 view .LVU1233
ARM GAS  /tmp/ccoPBaGE.s 			page 172


 4151              		.loc 7 76 5 is_stmt 0 view .LVU1234
 4152              	.LBE1258:
 4153              	.LBB1259:
 4154              	.LBI1259:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 4155              		.loc 11 608 28 is_stmt 1 view .LVU1235
 4156              	.LBB1260:
 4157              	.LBI1260:
 4158              		.loc 7 76 5 view .LVU1236
 4159              		.loc 7 76 5 is_stmt 0 view .LVU1237
 4160              	.LBE1260:
 4161              	.LBB1261:
 4162              	.LBI1261:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4163              		.loc 11 301 42 is_stmt 1 view .LVU1238
 4164              	.LBB1262:
 4165              	.LBI1262:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 4166              		.loc 11 116 2 view .LVU1239
 4167              	.LBB1263:
 4168              	.LBI1263:
 4169              		.loc 7 76 5 view .LVU1240
 4170              		.loc 7 76 5 is_stmt 0 view .LVU1241
 4171              	.LBE1263:
 4172              	.LBB1264:
 4173              	.LBI1264:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 4174              		.loc 11 204 6 is_stmt 1 view .LVU1242
 4175              	.LBB1265:
 4176              	.LBI1265:
 4177              		.loc 7 76 5 view .LVU1243
 4178              		.loc 7 76 5 is_stmt 0 view .LVU1244
 4179              	.LBE1265:
 4180              	.LBE1264:
 4181              	.LBE1262:
 4182              	.LBE1261:
 4183              	.LBE1259:
 4184              	.LBE1257:
 4185              	.LBE1256:
 4186              		.loc 1 786 25 view .LVU1245
 4187 035c BEEEEA7A 		vcvt.s32.f32	s14, s14, #11
 4188 0360 84ED207A 		vstr.32	s14, [r4, #128]	@ int
 787:Src/encoder.cpp ****     gear_vel_estimate_ = gear_vel_estimate_counts_ * GearboxOutputEncoder_cpr_inverse_;
 4189              		.loc 1 787 5 is_stmt 1 view .LVU1246
 4190              		.loc 1 787 52 is_stmt 0 view .LVU1247
 4191 0364 94ED277A 		vldr.32	s14, [r4, #156]
 4192 0368 67EE277A 		vmul.f32	s15, s14, s15
 4193              		.loc 1 787 24 view .LVU1248
 4194 036c C4ED2A7A 		vstr.32	s15, [r4, #168]
 788:Src/encoder.cpp **** 
 789:Src/encoder.cpp ****     float pos_cpr_last = pos_cpr_;
 4195              		.loc 1 789 5 is_stmt 1 view .LVU1249
 4196              	.LVL295:
 790:Src/encoder.cpp ****     (void)pos_cpr_last;
 4197              		.loc 1 790 5 view .LVU1250
 791:Src/encoder.cpp **** 
 792:Src/encoder.cpp ****     pos_estimate_ = pos_estimate_counts_ / (float)config_.cpr;
ARM GAS  /tmp/ccoPBaGE.s 			page 173


 4198              		.loc 1 792 5 view .LVU1251
 4199              		.loc 1 792 51 is_stmt 0 view .LVU1252
 4200 0370 6268     		ldr	r2, [r4, #4]
 4201              	.LVL296:
 4202              	.LBB1266:
 4203              	.LBI1266:
  52:Inc/component.hpp ****         content_ = value;
 4204              		.loc 2 52 10 is_stmt 1 view .LVU1253
 4205              	.LBE1266:
 4206              		.loc 1 792 44 is_stmt 0 view .LVU1254
 4207 0372 D2ED027A 		vldr.32	s15, [r2, #8]	@ int
 4208 0376 F8EEE77A 		vcvt.f32.s32	s15, s15
 4209              		.loc 1 792 19 view .LVU1255
 4210 037a 94ED115A 		vldr.32	s10, [r4, #68]
 4211 037e 85EE277A 		vdiv.f32	s14, s10, s15
 4212              	.LVL297:
 4213              	.LBB1268:
 4214              	.LBB1267:
  53:Inc/component.hpp ****         age_ = 0;
 4215              		.loc 2 53 18 view .LVU1256
 4216 0382 84ED1D7A 		vstr.32	s14, [r4, #116]
  54:Inc/component.hpp ****     }
 4217              		.loc 2 54 14 view .LVU1257
 4218 0386 2367     		str	r3, [r4, #112]
 4219              	.LVL298:
  54:Inc/component.hpp ****     }
 4220              		.loc 2 54 14 view .LVU1258
 4221              	.LBE1267:
 4222              	.LBE1268:
 793:Src/encoder.cpp ****     
 794:Src/encoder.cpp **** 
 795:Src/encoder.cpp ****     //// run encoder count interpolation
 796:Src/encoder.cpp ****     int32_t corrected_enc = count_in_cpr_ - config_.offset;
 4223              		.loc 1 796 5 is_stmt 1 view .LVU1259
 4224              		.loc 1 796 29 is_stmt 0 view .LVU1260
 4225 0388 6369     		ldr	r3, [r4, #20]
 4226              		.loc 1 796 53 view .LVU1261
 4227 038a D068     		ldr	r0, [r2, #12]
 4228              	.LVL299:
 797:Src/encoder.cpp ****     // if we are stopped, make sure we don't randomly drift
 798:Src/encoder.cpp ****     if (snap_to_zero_vel || !config_.enable_phase_interpolation) {
 4229              		.loc 1 798 5 is_stmt 1 view .LVU1262
 799:Src/encoder.cpp ****         interpolation_ = 0.5f;
 800:Src/encoder.cpp ****     // reset interpolation if encoder edge comes
 801:Src/encoder.cpp ****     // TODO: This isn't correct. At high velocities the first phase in this count may very well not
 802:Src/encoder.cpp ****     } else if (delta_enc > 0) {
 803:Src/encoder.cpp ****         interpolation_ = 0.0f;
 804:Src/encoder.cpp ****     } else if (delta_enc < 0) {
 805:Src/encoder.cpp ****         interpolation_ = 1.0f;
 806:Src/encoder.cpp ****     } else {
 807:Src/encoder.cpp ****         // Interpolate (predict) between encoder counts using vel_estimate,
 808:Src/encoder.cpp ****         interpolation_ += current_meas_period * vel_estimate_counts_;
 809:Src/encoder.cpp ****         // don't allow interpolation indicated position outside of [enc, enc+1)
 810:Src/encoder.cpp ****         if (interpolation_ > 1.0f) interpolation_ = 1.0f;
 811:Src/encoder.cpp ****         if (interpolation_ < 0.0f) interpolation_ = 0.0f;
 812:Src/encoder.cpp ****     }
 813:Src/encoder.cpp ****     interpolation_ = current_meas_period * vel_estimate_counts_;
ARM GAS  /tmp/ccoPBaGE.s 			page 174


 4230              		.loc 1 813 5 view .LVU1263
 4231              		.loc 1 813 42 is_stmt 0 view .LVU1264
 4232 038c 66EE866A 		vmul.f32	s13, s13, s12
 4233              		.loc 1 813 20 view .LVU1265
 4234 0390 C4ED0B6A 		vstr.32	s13, [r4, #44]
 814:Src/encoder.cpp ****     float interpolated_enc = corrected_enc + interpolation_;
 4235              		.loc 1 814 5 is_stmt 1 view .LVU1266
 4236              	.LVL300:
 815:Src/encoder.cpp **** 
 816:Src/encoder.cpp ****     //// compute electrical phase
 817:Src/encoder.cpp ****     //TODO avoid recomputing elec_rad_per_enc every time
 818:Src/encoder.cpp ****     float elec_rad_per_enc = axis_->motor_.config_.pole_pairs * 2 * M_PI * cpr_inverse_;
 4237              		.loc 1 818 5 view .LVU1267
 4238              		.loc 1 818 37 is_stmt 0 view .LVU1268
 4239 0394 A168     		ldr	r1, [r4, #8]
 4240              		.loc 1 818 44 view .LVU1269
 4241 0396 C96E     		ldr	r1, [r1, #108]
 4242              		.loc 1 818 52 view .LVU1270
 4243 0398 4968     		ldr	r1, [r1, #4]
 4244 039a 4968     		ldr	r1, [r1, #4]
 4245              	.LVL301:
 819:Src/encoder.cpp ****     float ph = elec_rad_per_enc * (interpolated_enc - config_.offset_float);
 4246              		.loc 1 819 5 is_stmt 1 view .LVU1271
 4247              		.loc 1 819 63 is_stmt 0 view .LVU1272
 4248 039c 92ED040A 		vldr.32	s0, [r2, #16]
 4249              	.LVL302:
 820:Src/encoder.cpp ****     // ph = fmodf(ph, 2*M_PI);
 821:Src/encoder.cpp **** 
 822:Src/encoder.cpp ****     vel_estimate_valid_ = true;
 4250              		.loc 1 822 5 is_stmt 1 view .LVU1273
 4251              		.loc 1 822 25 is_stmt 0 view .LVU1274
 4252 03a0 0122     		movs	r2, #1
 4253 03a2 84F89520 		strb	r2, [r4, #149]
 823:Src/encoder.cpp ****     pos_estimate_valid_ = true;
 4254              		.loc 1 823 5 is_stmt 1 view .LVU1275
 4255              		.loc 1 823 25 is_stmt 0 view .LVU1276
 4256 03a6 84F89420 		strb	r2, [r4, #148]
 824:Src/encoder.cpp ****  
 825:Src/encoder.cpp ****    if (is_ready_) {
 4257              		.loc 1 825 4 is_stmt 1 view .LVU1277
 4258              		.loc 1 825 8 is_stmt 0 view .LVU1278
 4259 03aa E67B     		ldrb	r6, [r4, #15]	@ zero_extendqisi2
 4260              		.loc 1 825 4 view .LVU1279
 4261 03ac 002E     		cmp	r6, #0
 4262 03ae 77D1     		bne	.L199
 826:Src/encoder.cpp ****         phase_ = wrap_pm_pi(ph) * config_.direction;
 827:Src/encoder.cpp ****         phase_vel_ = (2*M_PI) * (*vel_estimate_.present())* axis_->motor_.config_.pole_pairs * conf
 828:Src/encoder.cpp ****     }
 829:Src/encoder.cpp **** 
 830:Src/encoder.cpp ****     return true;
 4263              		.loc 1 830 12 view .LVU1280
 4264 03b0 0126     		movs	r6, #1
 4265              	.LVL303:
 4266              	.L193:
 831:Src/encoder.cpp **** }
 4267              		.loc 1 831 1 view .LVU1281
 4268 03b2 3046     		mov	r0, r6
ARM GAS  /tmp/ccoPBaGE.s 			page 175


 4269 03b4 BDEC068B 		vldm	sp!, {d8-d10}
 4270              	.LCFI27:
 4271              		.cfi_remember_state
 4272              		.cfi_restore 84
 4273              		.cfi_restore 85
 4274              		.cfi_restore 82
 4275              		.cfi_restore 83
 4276              		.cfi_restore 80
 4277              		.cfi_restore 81
 4278              		.cfi_def_cfa_offset 16
 4279 03b8 70BD     		pop	{r4, r5, r6, pc}
 4280              	.LVL304:
 4281              	.L148:
 4282              	.LCFI28:
 4283              		.cfi_restore_state
 4284              	.LBB1269:
 4285              	.LBB1222:
 4286              	.LBB1217:
 624:Src/encoder.cpp ****                 delta_enc = hall_cnt - count_in_cpr_;
 4287              		.loc 1 624 28 view .LVU1282
 4288 03ba 0123     		movs	r3, #1
 4289              	.L149:
 4290              	.LVL305:
 625:Src/encoder.cpp ****                 delta_enc = mod(delta_enc, 6);
 4291              		.loc 1 625 17 is_stmt 1 view .LVU1283
 625:Src/encoder.cpp ****                 delta_enc = mod(delta_enc, 6);
 4292              		.loc 1 625 27 is_stmt 0 view .LVU1284
 4293 03bc 6069     		ldr	r0, [r4, #20]
 4294              	.LVL306:
 626:Src/encoder.cpp ****                 if (delta_enc > 3)
 4295              		.loc 1 626 17 is_stmt 1 view .LVU1285
 626:Src/encoder.cpp ****                 if (delta_enc > 3)
 4296              		.loc 1 626 32 is_stmt 0 view .LVU1286
 4297 03be 0621     		movs	r1, #6
 4298 03c0 181A     		subs	r0, r3, r0
 4299              	.LVL307:
 626:Src/encoder.cpp ****                 if (delta_enc > 3)
 4300              		.loc 1 626 32 view .LVU1287
 4301 03c2 FFF7FEFF 		bl	mod
 4302              	.LVL308:
 627:Src/encoder.cpp ****                     delta_enc -= 6;
 4303              		.loc 1 627 17 is_stmt 1 view .LVU1288
 4304 03c6 0328     		cmp	r0, #3
 4305 03c8 7FF7C8AE 		ble	.L142
 628:Src/encoder.cpp ****             } else {
 4306              		.loc 1 628 21 view .LVU1289
 628:Src/encoder.cpp ****             } else {
 4307              		.loc 1 628 31 is_stmt 0 view .LVU1290
 4308 03cc 0638     		subs	r0, r0, #6
 4309              	.LVL309:
 628:Src/encoder.cpp ****             } else {
 4310              		.loc 1 628 31 view .LVU1291
 4311 03ce C5E6     		b	.L142
 4312              	.LVL310:
 4313              	.L144:
 4314              	.LBB1213:
 4315              	.LBB1211:
ARM GAS  /tmp/ccoPBaGE.s 			page 176


 343:Src/encoder.cpp ****         case 0b100: *hall_cnt = 4; return true;
 4316              		.loc 1 343 9 is_stmt 1 view .LVU1292
 343:Src/encoder.cpp ****         case 0b100: *hall_cnt = 4; return true;
 4317              		.loc 1 343 21 view .LVU1293
 343:Src/encoder.cpp ****         case 0b100: *hall_cnt = 4; return true;
 4318              		.loc 1 343 36 view .LVU1294
 343:Src/encoder.cpp ****         case 0b100: *hall_cnt = 4; return true;
 4319              		.loc 1 343 31 is_stmt 0 view .LVU1295
 4320 03d0 0323     		movs	r3, #3
 343:Src/encoder.cpp ****         case 0b100: *hall_cnt = 4; return true;
 4321              		.loc 1 343 43 view .LVU1296
 4322 03d2 F3E7     		b	.L149
 4323              	.LVL311:
 4324              	.L147:
 344:Src/encoder.cpp ****         case 0b101: *hall_cnt = 5; return true;
 4325              		.loc 1 344 9 is_stmt 1 view .LVU1297
 344:Src/encoder.cpp ****         case 0b101: *hall_cnt = 5; return true;
 4326              		.loc 1 344 21 view .LVU1298
 344:Src/encoder.cpp ****         case 0b101: *hall_cnt = 5; return true;
 4327              		.loc 1 344 36 view .LVU1299
 344:Src/encoder.cpp ****         case 0b101: *hall_cnt = 5; return true;
 4328              		.loc 1 344 31 is_stmt 0 view .LVU1300
 4329 03d4 0423     		movs	r3, #4
 344:Src/encoder.cpp ****         case 0b101: *hall_cnt = 5; return true;
 4330              		.loc 1 344 43 view .LVU1301
 4331 03d6 F1E7     		b	.L149
 4332              	.LVL312:
 4333              	.L146:
 345:Src/encoder.cpp ****         default: return false;
 4334              		.loc 1 345 9 is_stmt 1 view .LVU1302
 345:Src/encoder.cpp ****         default: return false;
 4335              		.loc 1 345 21 view .LVU1303
 345:Src/encoder.cpp ****         default: return false;
 4336              		.loc 1 345 36 view .LVU1304
 345:Src/encoder.cpp ****         default: return false;
 4337              		.loc 1 345 31 is_stmt 0 view .LVU1305
 4338 03d8 0523     		movs	r3, #5
 345:Src/encoder.cpp ****         default: return false;
 4339              		.loc 1 345 43 view .LVU1306
 4340 03da EFE7     		b	.L149
 4341              	.LVL313:
 4342              	.L143:
 345:Src/encoder.cpp ****         default: return false;
 4343              		.loc 1 345 43 view .LVU1307
 4344              	.LBE1211:
 4345              	.LBE1213:
 630:Src/encoder.cpp ****                     set_error(ERROR_ILLEGAL_HALL_STATE);
 4346              		.loc 1 630 17 is_stmt 1 view .LVU1308
 630:Src/encoder.cpp ****                     set_error(ERROR_ILLEGAL_HALL_STATE);
 4347              		.loc 1 630 30 is_stmt 0 view .LVU1309
 4348 03dc 4368     		ldr	r3, [r0, #4]
 4349 03de 93F82A60 		ldrb	r6, [r3, #42]	@ zero_extendqisi2
 630:Src/encoder.cpp ****                     set_error(ERROR_ILLEGAL_HALL_STATE);
 4350              		.loc 1 630 17 view .LVU1310
 4351 03e2 002E     		cmp	r6, #0
 4352 03e4 52D1     		bne	.L181
 631:Src/encoder.cpp ****                     return false;
ARM GAS  /tmp/ccoPBaGE.s 			page 177


 4353              		.loc 1 631 21 is_stmt 1 view .LVU1311
 631:Src/encoder.cpp ****                     return false;
 4354              		.loc 1 631 30 is_stmt 0 view .LVU1312
 4355 03e6 1021     		movs	r1, #16
 4356 03e8 FFF7FEFF 		bl	_ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE
 4357              	.LVL314:
 632:Src/encoder.cpp ****                 }
 4358              		.loc 1 632 21 is_stmt 1 view .LVU1313
 4359 03ec E1E7     		b	.L193
 4360              	.LVL315:
 4361              	.L136:
 632:Src/encoder.cpp ****                 }
 4362              		.loc 1 632 21 is_stmt 0 view .LVU1314
 4363              	.LBE1217:
 637:Src/encoder.cpp ****             float phase = fast_atan2(sincos_sample_s_, sincos_sample_c_);
 4364              		.loc 1 637 9 is_stmt 1 view .LVU1315
 637:Src/encoder.cpp ****             float phase = fast_atan2(sincos_sample_s_, sincos_sample_c_);
 4365              		.loc 1 637 27 view .LVU1316
 4366              	.LBB1218:
 638:Src/encoder.cpp ****             int fake_count = (int)(1000.0f * phase);
 4367              		.loc 1 638 13 view .LVU1317
 638:Src/encoder.cpp ****             int fake_count = (int)(1000.0f * phase);
 4368              		.loc 1 638 37 is_stmt 0 view .LVU1318
 4369 03ee D0ED2D0A 		vldr.32	s1, [r0, #180]
 4370 03f2 90ED2C0A 		vldr.32	s0, [r0, #176]
 4371 03f6 FFF7FEFF 		bl	fast_atan2
 4372              	.LVL316:
 639:Src/encoder.cpp ****             //CPR = 6283 = 2pi * 1k
 4373              		.loc 1 639 13 is_stmt 1 view .LVU1319
 642:Src/encoder.cpp ****             delta_enc = mod(delta_enc, 6283);
 4374              		.loc 1 642 13 view .LVU1320
 639:Src/encoder.cpp ****             //CPR = 6283 = 2pi * 1k
 4375              		.loc 1 639 44 is_stmt 0 view .LVU1321
 4376 03fa DFED267A 		vldr.32	s15, .L200+4
 4377 03fe 20EE270A 		vmul.f32	s0, s0, s15
 4378              	.LVL317:
 639:Src/encoder.cpp ****             //CPR = 6283 = 2pi * 1k
 4379              		.loc 1 639 17 view .LVU1322
 4380 0402 FDEEC07A 		vcvt.s32.f32	s15, s0
 4381 0406 17EE900A 		vmov	r0, s15	@ int
 642:Src/encoder.cpp ****             delta_enc = mod(delta_enc, 6283);
 4382              		.loc 1 642 23 view .LVU1323
 4383 040a 6369     		ldr	r3, [r4, #20]
 4384              	.LVL318:
 643:Src/encoder.cpp ****             if (delta_enc > 6283/2)
 4385              		.loc 1 643 13 is_stmt 1 view .LVU1324
 643:Src/encoder.cpp ****             if (delta_enc > 6283/2)
 4386              		.loc 1 643 28 is_stmt 0 view .LVU1325
 4387 040c 41F68B01 		movw	r1, #6283
 4388 0410 C01A     		subs	r0, r0, r3
 4389              	.LVL319:
 643:Src/encoder.cpp ****             if (delta_enc > 6283/2)
 4390              		.loc 1 643 28 view .LVU1326
 4391 0412 FFF7FEFF 		bl	mod
 4392              	.LVL320:
 644:Src/encoder.cpp ****                 delta_enc -= 6283;
 4393              		.loc 1 644 13 is_stmt 1 view .LVU1327
ARM GAS  /tmp/ccoPBaGE.s 			page 178


 4394 0416 40F64543 		movw	r3, #3141
 4395 041a 9842     		cmp	r0, r3
 4396 041c 7FF79EAE 		ble	.L142
 645:Src/encoder.cpp ****         } break;
 4397              		.loc 1 645 17 view .LVU1328
 645:Src/encoder.cpp ****         } break;
 4398              		.loc 1 645 27 is_stmt 0 view .LVU1329
 4399 0420 A0F5C450 		sub	r0, r0, #6272
 4400              	.LVL321:
 645:Src/encoder.cpp ****         } break;
 4401              		.loc 1 645 27 view .LVU1330
 4402 0424 0B38     		subs	r0, r0, #11
 4403              	.LVL322:
 645:Src/encoder.cpp ****         } break;
 4404              		.loc 1 645 27 view .LVU1331
 4405 0426 99E6     		b	.L142
 4406              	.LVL323:
 4407              	.L198:
 645:Src/encoder.cpp ****         } break;
 4408              		.loc 1 645 27 view .LVU1332
 4409              	.LBE1218:
 4410              	.LBB1219:
 665:Src/encoder.cpp ****                    raw_data1_++;
 4411              		.loc 1 665 21 is_stmt 1 view .LVU1333
 666:Src/encoder.cpp ****                 }
 4412              		.loc 1 666 20 view .LVU1334
 666:Src/encoder.cpp ****                 }
 4413              		.loc 1 666 30 is_stmt 0 view .LVU1335
 4414 0428 D0F8F030 		ldr	r3, [r0, #240]
 4415 042c 0133     		adds	r3, r3, #1
 4416 042e C0F8F030 		str	r3, [r0, #240]
 668:Src/encoder.cpp ****             }
 4417              		.loc 1 668 17 is_stmt 1 view .LVU1336
 668:Src/encoder.cpp ****             }
 4418              		.loc 1 668 36 is_stmt 0 view .LVU1337
 4419 0432 0023     		movs	r3, #0
 4420 0434 80F8BC30 		strb	r3, [r0, #188]
 4421              	.LVL324:
 671:Src/encoder.cpp ****             {
 4422              		.loc 1 671 13 is_stmt 1 view .LVU1338
 673:Src/encoder.cpp ****                 set_error(ERROR_ABS_SPI_COM_FAIL);
 4423              		.loc 1 673 17 view .LVU1339
 4424 0438 8368     		ldr	r3, [r0, #8]
 673:Src/encoder.cpp ****                 set_error(ERROR_ABS_SPI_COM_FAIL);
 4425              		.loc 1 673 41 is_stmt 0 view .LVU1340
 4426 043a 0422     		movs	r2, #4
 4427 043c 83F89621 		strb	r2, [r3, #406]
 674:Src/encoder.cpp ****             }
 4428              		.loc 1 674 17 is_stmt 1 view .LVU1341
 674:Src/encoder.cpp ****             }
 4429              		.loc 1 674 26 is_stmt 0 view .LVU1342
 4430 0440 8021     		movs	r1, #128
 4431 0442 FFF7FEFF 		bl	_ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE
 4432              	.LVL325:
 674:Src/encoder.cpp ****             }
 4433              		.loc 1 674 26 view .LVU1343
 4434 0446 14E6     		b	.L152
ARM GAS  /tmp/ccoPBaGE.s 			page 179


 4435              	.LVL326:
 4436              	.L161:
 706:Src/encoder.cpp ****             GearboxOutputEncoder_count_in_cpr_ = gear_single_turn_abs_by_user_;
 4437              		.loc 1 706 13 is_stmt 1 view .LVU1344
 706:Src/encoder.cpp ****             GearboxOutputEncoder_count_in_cpr_ = gear_single_turn_abs_by_user_;
 4438              		.loc 1 706 28 is_stmt 0 view .LVU1345
 4439 0448 A369     		ldr	r3, [r4, #24]
 4440 044a D31A     		subs	r3, r2, r3
 4441              	.LVL327:
 707:Src/encoder.cpp ****             if (gear_delta_enc > HALF_CPR) {
 4442              		.loc 1 707 13 is_stmt 1 view .LVU1346
 707:Src/encoder.cpp ****             if (gear_delta_enc > HALF_CPR) {
 4443              		.loc 1 707 48 is_stmt 0 view .LVU1347
 4444 044c A261     		str	r2, [r4, #24]
 708:Src/encoder.cpp ****                 GearboxOutputEncoder_turns_ -=  1;
 4445              		.loc 1 708 13 is_stmt 1 view .LVU1348
 4446 044e B3F5003F 		cmp	r3, #131072
 4447 0452 03DD     		ble	.L163
 709:Src/encoder.cpp ****             }
 4448              		.loc 1 709 17 view .LVU1349
 709:Src/encoder.cpp ****             }
 4449              		.loc 1 709 45 is_stmt 0 view .LVU1350
 4450 0454 E369     		ldr	r3, [r4, #28]
 4451              	.LVL328:
 709:Src/encoder.cpp ****             }
 4452              		.loc 1 709 45 view .LVU1351
 4453 0456 013B     		subs	r3, r3, #1
 4454 0458 E361     		str	r3, [r4, #28]
 4455 045a 60E6     		b	.L162
 4456              	.LVL329:
 4457              	.L163:
 711:Src/encoder.cpp ****                 GearboxOutputEncoder_turns_ +=  1;
 4458              		.loc 1 711 18 is_stmt 1 view .LVU1352
 4459 045c 13F5003F 		cmn	r3, #131072
 4460 0460 BFF65DAE 		bge	.L162
 712:Src/encoder.cpp ****             }
 4461              		.loc 1 712 17 view .LVU1353
 712:Src/encoder.cpp ****             }
 4462              		.loc 1 712 45 is_stmt 0 view .LVU1354
 4463 0464 E369     		ldr	r3, [r4, #28]
 4464              	.LVL330:
 712:Src/encoder.cpp ****             }
 4465              		.loc 1 712 45 view .LVU1355
 4466 0466 0133     		adds	r3, r3, #1
 4467 0468 E361     		str	r3, [r4, #28]
 4468 046a 58E6     		b	.L162
 4469              	.LVL331:
 4470              	.L197:
 712:Src/encoder.cpp ****             }
 4471              		.loc 1 712 45 view .LVU1356
 4472              	.LBE1219:
 729:Src/encoder.cpp ****             delta_enc = pos_abs_latched - count_in_cpr_; //LATCH
 4473              		.loc 1 729 9 is_stmt 1 view .LVU1357
 729:Src/encoder.cpp ****             delta_enc = pos_abs_latched - count_in_cpr_; //LATCH
 4474              		.loc 1 729 18 view .LVU1358
 730:Src/encoder.cpp ****             delta_enc = mod(delta_enc, config_.cpr);
 4475              		.loc 1 730 13 view .LVU1359
ARM GAS  /tmp/ccoPBaGE.s 			page 180


 730:Src/encoder.cpp ****             delta_enc = mod(delta_enc, config_.cpr);
 4476              		.loc 1 730 23 is_stmt 0 view .LVU1360
 4477 046c 4069     		ldr	r0, [r0, #20]
 4478              	.LVL332:
 731:Src/encoder.cpp ****             if (delta_enc > config_.cpr/2) {
 4479              		.loc 1 731 13 is_stmt 1 view .LVU1361
 731:Src/encoder.cpp ****             if (delta_enc > config_.cpr/2) {
 4480              		.loc 1 731 48 is_stmt 0 view .LVU1362
 4481 046e 6368     		ldr	r3, [r4, #4]
 731:Src/encoder.cpp ****             if (delta_enc > config_.cpr/2) {
 4482              		.loc 1 731 28 view .LVU1363
 4483 0470 9968     		ldr	r1, [r3, #8]
 4484 0472 281A     		subs	r0, r5, r0
 4485              	.LVL333:
 731:Src/encoder.cpp ****             if (delta_enc > config_.cpr/2) {
 4486              		.loc 1 731 28 view .LVU1364
 4487 0474 FFF7FEFF 		bl	mod
 4488              	.LVL334:
 732:Src/encoder.cpp ****                 delta_enc -= config_.cpr;
 4489              		.loc 1 732 13 is_stmt 1 view .LVU1365
 732:Src/encoder.cpp ****                 delta_enc -= config_.cpr;
 4490              		.loc 1 732 37 is_stmt 0 view .LVU1366
 4491 0478 6368     		ldr	r3, [r4, #4]
 4492 047a 9B68     		ldr	r3, [r3, #8]
 732:Src/encoder.cpp ****                 delta_enc -= config_.cpr;
 4493              		.loc 1 732 40 view .LVU1367
 4494 047c 03EBD372 		add	r2, r3, r3, lsr #31
 732:Src/encoder.cpp ****                 delta_enc -= config_.cpr;
 4495              		.loc 1 732 13 view .LVU1368
 4496 0480 B0EB620F 		cmp	r0, r2, asr #1
 4497 0484 7FF76AAE 		ble	.L142
 733:Src/encoder.cpp ****             }
 4498              		.loc 1 733 17 is_stmt 1 view .LVU1369
 733:Src/encoder.cpp ****             }
 4499              		.loc 1 733 27 is_stmt 0 view .LVU1370
 4500 0488 C01A     		subs	r0, r0, r3
 4501              	.LVL335:
 733:Src/encoder.cpp ****             }
 4502              		.loc 1 733 27 view .LVU1371
 4503 048a 67E6     		b	.L142
 4504              	.LVL336:
 4505              	.L181:
 733:Src/encoder.cpp ****             }
 4506              		.loc 1 733 27 view .LVU1372
 4507              	.LBE1222:
 4508              	.LBE1269:
 612:Src/encoder.cpp ****     int32_t pos_abs_latched = pos_abs_; //LATCH
 4509              		.loc 1 612 13 view .LVU1373
 4510 048c 0020     		movs	r0, #0
 4511              	.LVL337:
 612:Src/encoder.cpp ****     int32_t pos_abs_latched = pos_abs_; //LATCH
 4512              		.loc 1 612 13 view .LVU1374
 4513 048e 65E6     		b	.L142
 4514              	.L201:
 4515              		.align	2
 4516              	.L200:
 4517 0490 00000000 		.word	current_meas_period
ARM GAS  /tmp/ccoPBaGE.s 			page 181


 4518 0494 00007A44 		.word	1148846080
 4519 0498 DB0F4940 		.word	1078530011
 4520 049c DB0FC940 		.word	1086918619
 4521              	.LVL338:
 4522              	.L199:
 826:Src/encoder.cpp ****         phase_vel_ = (2*M_PI) * (*vel_estimate_.present())* axis_->motor_.config_.pole_pairs * conf
 4523              		.loc 1 826 9 is_stmt 1 view .LVU1375
 4524              	.LBB1270:
 4525              	.LBI1270:
 104:Inc/utils.hpp ****     return wrap_pm(theta, M_PI);
 4526              		.loc 8 104 21 view .LVU1376
 4527              	.LBE1270:
 4528              		.loc 8 105 5 view .LVU1377
 4529              	.LBB1281:
 4530              	.LBB1271:
 4531              	.LBI1271:
 100:Inc/utils.hpp ****     return fmodf_pos(x + pm_range, 2.0f * pm_range) - pm_range;
 4532              		.loc 8 100 21 view .LVU1378
 4533              	.LBB1272:
 101:Inc/utils.hpp **** }
 4534              		.loc 8 101 5 view .LVU1379
 4535              	.LBB1273:
 4536              	.LBI1273:
  88:Inc/utils.hpp ****     float out = fmodf(x, y);
 4537              		.loc 8 88 21 view .LVU1380
 4538              	.LBB1274:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 4539              		.loc 8 89 5 view .LVU1381
 4540              	.LBE1274:
 4541              	.LBE1273:
 4542              	.LBE1272:
 4543              	.LBE1271:
 4544              	.LBE1281:
 796:Src/encoder.cpp ****     // if we are stopped, make sure we don't randomly drift
 4545              		.loc 1 796 13 is_stmt 0 view .LVU1382
 4546 04a0 1B1A     		subs	r3, r3, r0
 4547              	.LVL339:
 814:Src/encoder.cpp **** 
 4548              		.loc 1 814 44 view .LVU1383
 4549 04a2 07EE903A 		vmov	s15, r3	@ int
 4550 04a6 F8EEE77A 		vcvt.f32.s32	s15, s15
 4551              	.LVL340:
 814:Src/encoder.cpp **** 
 4552              		.loc 1 814 11 view .LVU1384
 4553 04aa 77EEA66A 		vadd.f32	s13, s15, s13
 4554              	.LVL341:
 819:Src/encoder.cpp ****     // ph = fmodf(ph, 2*M_PI);
 4555              		.loc 1 819 53 view .LVU1385
 4556 04ae 76EEC06A 		vsub.f32	s13, s13, s0
 818:Src/encoder.cpp ****     float ph = elec_rad_per_enc * (interpolated_enc - config_.offset_float);
 4557              		.loc 1 818 63 view .LVU1386
 4558 04b2 01FA02F3 		lsl	r3, r1, r2
 4559 04b6 07EE903A 		vmov	s15, r3	@ int
 4560              	.LVL342:
 818:Src/encoder.cpp ****     float ph = elec_rad_per_enc * (interpolated_enc - config_.offset_float);
 4561              		.loc 1 818 67 view .LVU1387
 4562 04ba F8EEE77A 		vcvt.f32.s32	s15, s15
ARM GAS  /tmp/ccoPBaGE.s 			page 182


 4563 04be 1FED0A0A 		vldr.32	s0, .L200+8
 4564              	.LVL343:
 818:Src/encoder.cpp ****     float ph = elec_rad_per_enc * (interpolated_enc - config_.offset_float);
 4565              		.loc 1 818 67 view .LVU1388
 4566 04c2 67EE807A 		vmul.f32	s15, s15, s0
 818:Src/encoder.cpp ****     float ph = elec_rad_per_enc * (interpolated_enc - config_.offset_float);
 4567              		.loc 1 818 11 view .LVU1389
 4568 04c6 67EEA57A 		vmul.f32	s15, s15, s11
 819:Src/encoder.cpp ****     // ph = fmodf(ph, 2*M_PI);
 4569              		.loc 1 819 11 view .LVU1390
 4570 04ca 66EEA76A 		vmul.f32	s13, s13, s15
 4571              	.LBB1282:
 4572              	.LBB1279:
 4573              	.LBB1277:
 4574              	.LBB1276:
 4575              	.LBB1275:
  89:Inc/utils.hpp ****     if (out < 0.0f)
 4576              		.loc 8 89 22 view .LVU1391
 4577 04ce 5FED0D0A 		vldr.32	s1, .L200+12
 4578 04d2 36EE800A 		vadd.f32	s0, s13, s0
 4579 04d6 FFF7FEFF 		bl	fmodf
 4580              	.LVL344:
  90:Inc/utils.hpp ****         out += y;
 4581              		.loc 8 90 5 is_stmt 1 view .LVU1392
 4582 04da B5EEC00A 		vcmpe.f32	s0, #0
 4583 04de F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  91:Inc/utils.hpp ****     return out;
 4584              		.loc 8 91 9 view .LVU1393
  91:Inc/utils.hpp ****     return out;
 4585              		.loc 8 91 13 is_stmt 0 view .LVU1394
 4586 04e2 44BF     		itt	mi
 4587 04e4 5FED137A 		vldrmi.32	s15, .L200+12
 4588 04e8 30EE270A 		vaddmi.f32	s0, s0, s15
 4589              	.LVL345:
  92:Inc/utils.hpp **** }
 4590              		.loc 8 92 5 is_stmt 1 view .LVU1395
  92:Inc/utils.hpp **** }
 4591              		.loc 8 92 5 is_stmt 0 view .LVU1396
 4592              	.LBE1275:
 4593              	.LBE1276:
 4594              	.LBE1277:
 4595              	.LBE1279:
 4596              	.LBE1282:
 826:Src/encoder.cpp ****         phase_vel_ = (2*M_PI) * (*vel_estimate_.present())* axis_->motor_.config_.pole_pairs * conf
 4597              		.loc 1 826 35 view .LVU1397
 4598 04ec 6368     		ldr	r3, [r4, #4]
 4599              	.LVL346:
 4600              	.LBB1283:
 4601              	.LBI1283:
  52:Inc/component.hpp ****         content_ = value;
 4602              		.loc 2 52 10 is_stmt 1 view .LVU1398
 4603              	.LBE1283:
 826:Src/encoder.cpp ****         phase_vel_ = (2*M_PI) * (*vel_estimate_.present())* axis_->motor_.config_.pole_pairs * conf
 4604              		.loc 1 826 16 is_stmt 0 view .LVU1399
 4605 04ee D3ED0F7A 		vldr.32	s15, [r3, #60]	@ int
 4606 04f2 F8EEE77A 		vcvt.f32.s32	s15, s15
 4607              	.LBB1285:
ARM GAS  /tmp/ccoPBaGE.s 			page 183


 4608              	.LBB1280:
 4609              	.LBB1278:
 101:Inc/utils.hpp **** }
 4610              		.loc 8 101 55 view .LVU1400
 4611 04f6 1FED187A 		vldr.32	s14, .L200+8
 4612 04fa 30EE470A 		vsub.f32	s0, s0, s14
 4613              	.LVL347:
 101:Inc/utils.hpp **** }
 4614              		.loc 8 101 55 view .LVU1401
 4615              	.LBE1278:
 4616              	.LBE1280:
 4617              	.LBE1285:
 826:Src/encoder.cpp ****         phase_vel_ = (2*M_PI) * (*vel_estimate_.present())* axis_->motor_.config_.pole_pairs * conf
 4618              		.loc 1 826 16 view .LVU1402
 4619 04fe 27EE800A 		vmul.f32	s0, s15, s0
 4620              	.LVL348:
 4621              	.LBB1286:
 4622              	.LBB1284:
  53:Inc/component.hpp ****         age_ = 0;
 4623              		.loc 2 53 18 view .LVU1403
 4624 0502 84ED0D0A 		vstr.32	s0, [r4, #52]
  54:Inc/component.hpp ****     }
 4625              		.loc 2 54 14 view .LVU1404
 4626 0506 0022     		movs	r2, #0
 4627 0508 2263     		str	r2, [r4, #48]
 4628              	.LVL349:
  54:Inc/component.hpp ****     }
 4629              		.loc 2 54 14 view .LVU1405
 4630              	.LBE1284:
 4631              	.LBE1286:
 827:Src/encoder.cpp ****     }
 4632              		.loc 1 827 9 is_stmt 1 view .LVU1406
 4633              	.LBB1287:
 4634              	.LBI1287:
  73:Inc/component.hpp ****         if (age_ == 0) {
 4635              		.loc 2 73 22 view .LVU1407
 4636              	.LBB1288:
  74:Inc/component.hpp ****             return content_;
 4637              		.loc 2 74 9 is_stmt 0 view .LVU1408
 4638 050a A26F     		ldr	r2, [r4, #120]
 4639 050c 0AB9     		cbnz	r2, .L178
 4640              	.LVL350:
 4641              	.LBB1289:
 4642              	.LBI1289:
 4643              		.loc 11 701 2 is_stmt 1 view .LVU1409
 4644              	.LBB1290:
 4645              	.LBB1291:
 4646              	.LBI1291:
 4647              		.loc 7 76 5 view .LVU1410
 4648              		.loc 7 76 5 is_stmt 0 view .LVU1411
 4649              	.LBE1291:
 4650              	.LBB1292:
 4651              	.LBI1292:
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional ****         : _M_payload(in_place,
 4652              		.loc 11 608 28 is_stmt 1 view .LVU1412
 4653              	.LBB1293:
 4654              	.LBI1293:
ARM GAS  /tmp/ccoPBaGE.s 			page 184


 4655              		.loc 7 76 5 view .LVU1413
 4656              		.loc 7 76 5 is_stmt 0 view .LVU1414
 4657              	.LBE1293:
 4658              	.LBB1294:
 4659              	.LBI1294:
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 
 4660              		.loc 11 301 42 is_stmt 1 view .LVU1415
 4661              	.LBB1295:
 4662              	.LBI1295:
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 4663              		.loc 11 116 2 view .LVU1416
 4664              	.LBB1296:
 4665              	.LBI1296:
 4666              		.loc 7 76 5 view .LVU1417
 4667              		.loc 7 76 5 is_stmt 0 view .LVU1418
 4668              	.LBE1296:
 4669              	.LBB1297:
 4670              	.LBI1297:
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 4671              		.loc 11 204 6 is_stmt 1 view .LVU1419
 4672              	.LBB1298:
 4673              	.LBB1299:
 4674              	.LBI1299:
 4675              		.loc 7 76 5 view .LVU1420
 4676              		.loc 7 76 5 is_stmt 0 view .LVU1421
 4677              	.LBE1299:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 4678              		.loc 11 205 47 view .LVU1422
 4679 050e 94ED1F8A 		vldr.32	s16, [r4, #124]
 4680              	.LVL351:
 4681              	.L178:
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional **** 	    { }
 4682              		.loc 11 205 47 view .LVU1423
 4683              	.LBE1298:
 4684              	.LBE1297:
 4685              	.LBE1295:
 4686              	.LBE1294:
 4687              	.LBE1292:
 4688              	.LBE1290:
 4689              	.LBE1289:
 4690              	.LBE1288:
 4691              	.LBE1287:
 4692              	.LBB1300:
 4693              	.LBI1300:
  52:Inc/component.hpp ****         content_ = value;
 4694              		.loc 2 52 10 is_stmt 1 view .LVU1424
 4695              	.LBE1300:
 827:Src/encoder.cpp ****     }
 4696              		.loc 1 827 68 is_stmt 0 view .LVU1425
 4697 0512 A268     		ldr	r2, [r4, #8]
 827:Src/encoder.cpp ****     }
 4698              		.loc 1 827 75 view .LVU1426
 4699 0514 D26E     		ldr	r2, [r2, #108]
 827:Src/encoder.cpp ****     }
 4700              		.loc 1 827 83 view .LVU1427
 4701 0516 5268     		ldr	r2, [r2, #4]
 827:Src/encoder.cpp ****     }
ARM GAS  /tmp/ccoPBaGE.s 			page 185


 4702              		.loc 1 827 59 view .LVU1428
 4703 0518 D2ED017A 		vldr.32	s15, [r2, #4]	@ int
 4704 051c F8EEE77A 		vcvt.f32.s32	s15, s15
 827:Src/encoder.cpp ****     }
 4705              		.loc 1 827 31 view .LVU1429
 4706 0520 1FED227A 		vldr.32	s14, .L200+12
 4707 0524 28EE078A 		vmul.f32	s16, s16, s14
 4708              	.LVL352:
 827:Src/encoder.cpp ****     }
 4709              		.loc 1 827 59 view .LVU1430
 4710 0528 67EE887A 		vmul.f32	s15, s15, s16
 827:Src/encoder.cpp ****     }
 4711              		.loc 1 827 20 view .LVU1431
 4712 052c 93ED0F8A 		vldr.32	s16, [r3, #60]	@ int
 4713 0530 B8EEC88A 		vcvt.f32.s32	s16, s16
 4714 0534 27EE888A 		vmul.f32	s16, s15, s16
 4715              	.LBB1302:
 4716              	.LBB1301:
  53:Inc/component.hpp ****         age_ = 0;
 4717              		.loc 2 53 18 view .LVU1432
 4718 0538 84ED0F8A 		vstr.32	s16, [r4, #60]
  54:Inc/component.hpp ****     }
 4719              		.loc 2 54 14 view .LVU1433
 4720 053c 0023     		movs	r3, #0
 4721 053e A363     		str	r3, [r4, #56]
 4722              	.LVL353:
  54:Inc/component.hpp ****     }
 4723              		.loc 2 54 14 view .LVU1434
 4724              	.LBE1301:
 4725              	.LBE1302:
 4726 0540 37E7     		b	.L193
 4727              	.LVL354:
 4728              	.L150:
 4729              	.LBB1303:
 4730              	.LBB1223:
 4731              	.LBB1220:
 4732              	.LBB1214:
 4733              	.LBB1212:
 340:Src/encoder.cpp ****         case 0b011: *hall_cnt = 1; return true;
 4734              		.loc 1 340 31 view .LVU1435
 4735 0542 0023     		movs	r3, #0
 4736 0544 3AE7     		b	.L149
 4737              	.L180:
 342:Src/encoder.cpp ****         case 0b110: *hall_cnt = 3; return true;
 4738              		.loc 1 342 31 view .LVU1436
 4739 0546 0223     		movs	r3, #2
 4740 0548 38E7     		b	.L149
 4741              	.LBE1212:
 4742              	.LBE1214:
 4743              	.LBE1220:
 4744              	.LBE1223:
 4745              	.LBE1303:
 4746              		.cfi_endproc
 4747              	.LFE4974:
 4749 054a 00BF     		.text
 4750              	.Letext0:
 4751              		.file 14 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdint"
ARM GAS  /tmp/ccoPBaGE.s 			page 186


 4752              		.file 15 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/type_trai
 4753              		.file 16 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/exce
 4754              		.file 17 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/utility"
 4755              		.file 18 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-
 4756              		.file 19 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/enab
 4757              		.file 20 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/debug/deb
 4758              		.file 21 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdlib"
 4759              		.file 22 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/algo
 4760              		.file 23 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/functiona
 4761              		.file 24 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array"
 4762              		.file 25 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 4763              		.file 26 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/refw
 4764              		.file 27 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pars
 4765              		.file 28 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pred
 4766              		.file 29 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_typ
 4767              		.file 30 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 4768              		.file 31 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdint.h"
 4769              		.file 32 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/lib/gcc/arm-none-eabi/10.2.1/include/stdde
 4770              		.file 33 "Inc/interfaces.hpp"
 4771              		.file 34 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 4772              		.file 35 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 4773              		.file 36 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_gpio.h"
 4774              		.file 37 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
 4775              		.file 38 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_spi.h"
 4776              		.file 39 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_tim.h"
 4777              		.file 40 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 4778              		.file 41 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 4779              		.file 42 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 4780              		.file 43 "Inc/mc_type.h"
 4781              		.file 44 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/math.h"
 4782              		.file 45 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdlib.h"
 4783              		.file 46 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/math.h"
 4784              		.file 47 "Inc/main.h"
 4785              		.file 48 "Inc/encoder.hpp"
 4786              		.file 49 "Inc/axis.hpp"
 4787              		.file 50 "Inc/task_timer.hpp"
 4788              		.file 51 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 4789              		.file 52 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 4790              		.file 53 "Inc/controller.hpp"
 4791              		.file 54 "Inc/motor.hpp"
 4792              		.file 55 "Inc/spi.h"
 4793              		.file 56 "<built-in>"
ARM GAS  /tmp/ccoPBaGE.s 			page 187


DEFINED SYMBOLS
                            *ABS*:0000000000000000 encoder.cpp
     /tmp/ccoPBaGE.s:18     .text._ZN7Encoder11set_cs_highEv:0000000000000000 $t
     /tmp/ccoPBaGE.s:26     .text._ZN7Encoder11set_cs_highEv:0000000000000000 _ZN7Encoder11set_cs_highEv
     /tmp/ccoPBaGE.s:70     .text._ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE:0000000000000000 $t
     /tmp/ccoPBaGE.s:77     .text._ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE:0000000000000000 _ZN7Encoder9set_errorEN10ODriveIntf11EncoderIntf5ErrorE
     /tmp/ccoPBaGE.s:113    .text._ZN7Encoder9do_checksEv:0000000000000000 $t
     /tmp/ccoPBaGE.s:120    .text._ZN7Encoder9do_checksEv:0000000000000000 _ZN7Encoder9do_checksEv
     /tmp/ccoPBaGE.s:140    .text._ZN7Encoder17set_idx_subscribeEb:0000000000000000 $t
     /tmp/ccoPBaGE.s:147    .text._ZN7Encoder17set_idx_subscribeEb:0000000000000000 _ZN7Encoder17set_idx_subscribeEb
     /tmp/ccoPBaGE.s:161    .text._ZN7Encoder16update_pll_gainsEv:0000000000000000 $t
     /tmp/ccoPBaGE.s:168    .text._ZN7Encoder16update_pll_gainsEv:0000000000000000 _ZN7Encoder16update_pll_gainsEv
     /tmp/ccoPBaGE.s:236    .text._ZN7Encoder16update_pll_gainsEv:000000000000005c $d
     /tmp/ccoPBaGE.s:241    .text._ZN7EncoderC2ERK23EncoderHardwareConfig_tRNS_8Config_tE:0000000000000000 $t
     /tmp/ccoPBaGE.s:248    .text._ZN7EncoderC2ERK23EncoderHardwareConfig_tRNS_8Config_tE:0000000000000000 _ZN7EncoderC2ERK23EncoderHardwareConfig_tRNS_8Config_tE
     /tmp/ccoPBaGE.s:406    .text._ZN7EncoderC2ERK23EncoderHardwareConfig_tRNS_8Config_tE:00000000000000ec $d
     /tmp/ccoPBaGE.s:248    .text._ZN7EncoderC2ERK23EncoderHardwareConfig_tRNS_8Config_tE:0000000000000000 _ZN7EncoderC1ERK23EncoderHardwareConfig_tRNS_8Config_tE
     /tmp/ccoPBaGE.s:413    .text._ZN7Encoder20check_pre_calibratedEv:0000000000000000 $t
     /tmp/ccoPBaGE.s:420    .text._ZN7Encoder20check_pre_calibratedEv:0000000000000000 _ZN7Encoder20check_pre_calibratedEv
     /tmp/ccoPBaGE.s:465    .text._ZN7Encoder16set_linear_countEl:0000000000000000 $t
     /tmp/ccoPBaGE.s:472    .text._ZN7Encoder16set_linear_countEl:0000000000000000 _ZN7Encoder16set_linear_countEl
     /tmp/ccoPBaGE.s:565    .text._ZN7Encoder18set_circular_countElb:0000000000000000 $t
     /tmp/ccoPBaGE.s:572    .text._ZN7Encoder18set_circular_countElb:0000000000000000 _ZN7Encoder18set_circular_countElb
     /tmp/ccoPBaGE.s:708    .text._ZN7Encoder12enc_index_cbEv:0000000000000000 $t
     /tmp/ccoPBaGE.s:715    .text._ZN7Encoder12enc_index_cbEv:0000000000000000 _ZN7Encoder12enc_index_cbEv
     /tmp/ccoPBaGE.s:799    .text._ZN7Encoder16run_index_searchEv:0000000000000000 $t
     /tmp/ccoPBaGE.s:806    .text._ZN7Encoder16run_index_searchEv:0000000000000000 _ZN7Encoder16run_index_searchEv
     /tmp/ccoPBaGE.s:924    .text._ZN7Encoder18run_direction_findEv:0000000000000000 $t
     /tmp/ccoPBaGE.s:931    .text._ZN7Encoder18run_direction_findEv:0000000000000000 _ZN7Encoder18run_direction_findEv
     /tmp/ccoPBaGE.s:1111   .text._ZN7Encoder22run_offset_calibrationEv:0000000000000000 $t
     /tmp/ccoPBaGE.s:1118   .text._ZN7Encoder22run_offset_calibrationEv:0000000000000000 _ZN7Encoder22run_offset_calibrationEv
     /tmp/ccoPBaGE.s:2547   .text._ZN7Encoder22run_offset_calibrationEv:0000000000000380 $d
     /tmp/ccoPBaGE.s:2554   .text._ZN7Encoder10sample_nowEv:0000000000000000 $t
     /tmp/ccoPBaGE.s:2561   .text._ZN7Encoder10sample_nowEv:0000000000000000 _ZN7Encoder10sample_nowEv
     /tmp/ccoPBaGE.s:2615   .text._ZN7Encoder12abs_spi_initEv:0000000000000000 _ZN7Encoder12abs_spi_initEv
     /tmp/ccoPBaGE.s:2628   .text._ZN7Encoder12abs_485_initEv:0000000000000000 $t
     /tmp/ccoPBaGE.s:2635   .text._ZN7Encoder12abs_485_initEv:0000000000000000 _ZN7Encoder12abs_485_initEv
     /tmp/ccoPBaGE.s:2653   .text._ZN7Encoder19abs_485_cs_pin_initEv:0000000000000000 $t
     /tmp/ccoPBaGE.s:2660   .text._ZN7Encoder19abs_485_cs_pin_initEv:0000000000000000 _ZN7Encoder19abs_485_cs_pin_initEv
     /tmp/ccoPBaGE.s:2727   .text._ZN7Encoder25abs_485_start_transactionEv:0000000000000000 $t
     /tmp/ccoPBaGE.s:2734   .text._ZN7Encoder25abs_485_start_transactionEv:0000000000000000 _ZN7Encoder25abs_485_start_transactionEv
     /tmp/ccoPBaGE.s:2752   .text._ZN7Encoder25abs_spi_start_transactionEv:0000000000000000 $t
     /tmp/ccoPBaGE.s:2759   .text._ZN7Encoder25abs_spi_start_transactionEv:0000000000000000 _ZN7Encoder25abs_spi_start_transactionEv
     /tmp/ccoPBaGE.s:2855   .text._ZN7Encoder21abs_start_transactionEv:0000000000000000 $t
     /tmp/ccoPBaGE.s:2862   .text._ZN7Encoder21abs_start_transactionEv:0000000000000000 _ZN7Encoder21abs_start_transactionEv
     /tmp/ccoPBaGE.s:2907   .text._Z10ams_parityt:0000000000000000 $t
     /tmp/ccoPBaGE.s:2914   .text._Z10ams_parityt:0000000000000000 _Z10ams_parityt
     /tmp/ccoPBaGE.s:2946   .text._Z10cui_parityt:0000000000000000 $t
     /tmp/ccoPBaGE.s:2953   .text._Z10cui_parityt:0000000000000000 _Z10cui_parityt
     /tmp/ccoPBaGE.s:2983   .text._ZN7Encoder10abs_spi_cbEv:0000000000000000 $t
     /tmp/ccoPBaGE.s:2990   .text._ZN7Encoder10abs_spi_cbEv:0000000000000000 _ZN7Encoder10abs_spi_cbEv
     /tmp/ccoPBaGE.s:3160   .text._ZN7Encoder19abs_spi_cs_pin_initEv:0000000000000000 $t
     /tmp/ccoPBaGE.s:3167   .text._ZN7Encoder19abs_spi_cs_pin_initEv:0000000000000000 _ZN7Encoder19abs_spi_cs_pin_initEv
     /tmp/ccoPBaGE.s:3269   .text._ZN7Encoder5setupEv:0000000000000000 $t
     /tmp/ccoPBaGE.s:3276   .text._ZN7Encoder5setupEv:0000000000000000 _ZN7Encoder5setupEv
     /tmp/ccoPBaGE.s:3338   .text._ZN7Encoder14set_spi_enableEv:0000000000000000 $t
     /tmp/ccoPBaGE.s:3345   .text._ZN7Encoder14set_spi_enableEv:0000000000000000 _ZN7Encoder14set_spi_enableEv
ARM GAS  /tmp/ccoPBaGE.s 			page 188


     /tmp/ccoPBaGE.s:3427   .text._ZN7Encoder6updateEv:0000000000000000 $t
     /tmp/ccoPBaGE.s:3434   .text._ZN7Encoder6updateEv:0000000000000000 _ZN7Encoder6updateEv
     /tmp/ccoPBaGE.s:3493   .text._ZN7Encoder6updateEv:000000000000002c $d
     /tmp/ccoPBaGE.s:3500   .text._ZN7Encoder6updateEv:0000000000000038 $t
     /tmp/ccoPBaGE.s:4517   .text._ZN7Encoder6updateEv:0000000000000490 $d
     /tmp/ccoPBaGE.s:4546   .text._ZN7Encoder6updateEv:00000000000004a0 $t

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
current_meas_period
mod
_ZN4Axis15run_lockin_spinERKNS_14LockinConfig_tEbSt8functionIFbbEE
__aeabi_ldivmod
fmodf
_ZN4Axis26wait_for_control_iterationEv
_ZN5Motor3armEP15PhaseControlLawILj3EE
osDelay
_ZN5Motor6disarmEv
_ZN5Motor10log_timingEN10ODriveIntf11TimingLog_tE
HAL_GPIO_DeInit
HAL_GPIO_Init
transmit_spi
HAL_SPI_DeInit
floorf
fast_atan2
