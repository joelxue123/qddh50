ARM GAS  /tmp/ccsEPjy3.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"main_.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._Z18save_configurationv,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	_Z18save_configurationv
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	_Z18save_configurationv:
  28              	.LFB5671:
  29              		.file 1 "Src/main_.cpp"
   1:Src/main_.cpp **** 
   2:Src/main_.cpp **** #define __MAIN_CPP__
   3:Src/main_.cpp **** 
   4:Src/main_.cpp **** #include "freertos_vars.h"
   5:Src/main_.cpp **** #include <interface_can.hpp>
   6:Src/main_.cpp **** 
   7:Src/main_.cpp **** #include "main_.hpp"
   8:Src/main_.cpp **** #include "low_level.h"
   9:Src/main_.cpp **** 
  10:Src/main_.cpp **** BoardConfig_t board_config;
  11:Src/main_.cpp **** SystemStats_t system_stats;
  12:Src/main_.cpp **** 
  13:Src/main_.cpp **** 
  14:Src/main_.cpp **** float current_meas_period = CURRENT_MEAS_PERIOD;
  15:Src/main_.cpp **** ODriveCAN::Config_t can_config;
  16:Src/main_.cpp **** Encoder::Config_t encoder_configs;
  17:Src/main_.cpp **** Controller::Config_t controller_configs;
  18:Src/main_.cpp **** Motor::Config_t motor_configs;
  19:Src/main_.cpp **** OnboardThermistorCurrentLimiter::Config_t fet_thermistor_configs;
  20:Src/main_.cpp **** OffboardThermistorCurrentLimiter::Config_t motor_thermistor_configs;
  21:Src/main_.cpp **** Axis::Config_t axis_configs;
  22:Src/main_.cpp **** 
  23:Src/main_.cpp **** Axis* axes;
  24:Src/main_.cpp **** ODriveCAN *odCAN = nullptr;
  25:Src/main_.cpp **** 
  26:Src/main_.cpp **** // 声明全局变量
  27:Src/main_.cpp ****  MotorParams motor_params;
  28:Src/main_.cpp ****  MotorRuntime motor_runtime;
  29:Src/main_.cpp **** 
ARM GAS  /tmp/ccsEPjy3.s 			page 2


  30:Src/main_.cpp **** 
  31:Src/main_.cpp **** 
  32:Src/main_.cpp **** void save_configuration(void) {
  30              		.loc 1 32 31 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  33:Src/main_.cpp ****     // if (ConfigFormat::safe_store_config(
  34:Src/main_.cpp ****     //         &board_config,
  35:Src/main_.cpp ****     //         &can_config,
  36:Src/main_.cpp ****     //         &encoder_configs,
  37:Src/main_.cpp ****     //         &controller_configs,
  38:Src/main_.cpp ****     //         &motor_configs,
  39:Src/main_.cpp ****     //         &fet_thermistor_configs,
  40:Src/main_.cpp ****     //         &motor_thermistor_configs,
  41:Src/main_.cpp ****     //         &axis_configs)) {
  42:Src/main_.cpp ****     //     printf("saving configuration failed\r\n"); osDelay(5);
  43:Src/main_.cpp ****     // } else {
  44:Src/main_.cpp ****     //     user_config_loaded_ = true;
  45:Src/main_.cpp ****     // }
  46:Src/main_.cpp **** }
  35              		.loc 1 46 1 is_stmt 0 view .LVU1
  36 0000 7047     		bx	lr
  37              		.cfi_endproc
  38              	.LFE5671:
  40 0002 00BF     		.section	.text.unlikely.load_configuration,"ax",%progbits
  41              		.align	1
  42              		.global	load_configuration
  43              		.syntax unified
  44              		.thumb
  45              		.thumb_func
  46              		.fpu fpv4-sp-d16
  48              	load_configuration:
  49              	.LFB5672:
  47:Src/main_.cpp **** 
  48:Src/main_.cpp **** extern "C" int load_configuration(void) {
  50              		.loc 1 48 41 is_stmt 1 view -0
  51              		.cfi_startproc
  52              		@ Volatile: function does not return.
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
  56              		.cfi_endproc
  57              	.LFE5672:
  59              		.section	.text._Z19erase_configurationv,"ax",%progbits
  60              		.align	1
  61              		.p2align 2,,3
  62              		.global	_Z19erase_configurationv
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	_Z19erase_configurationv:
  69              	.LFB6312:
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccsEPjy3.s 			page 3


  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              		@ link register save eliminated.
  74 0000 7047     		bx	lr
  75              		.cfi_endproc
  76              	.LFE6312:
  78 0002 00BF     		.section	.text.unlikely.construct_objects,"ax",%progbits
  79              		.align	1
  80              		.global	construct_objects
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  84              		.fpu fpv4-sp-d16
  86              	construct_objects:
  87              	.LFB5674:
  49:Src/main_.cpp **** //     // Try to load configs
  50:Src/main_.cpp **** //     if (NVM_init() ||
  51:Src/main_.cpp **** //         ConfigFormat::safe_load_config(
  52:Src/main_.cpp **** //                 &board_config,
  53:Src/main_.cpp **** //                 &can_config,
  54:Src/main_.cpp **** //                 &encoder_configs,
  55:Src/main_.cpp **** //                 &controller_configs,
  56:Src/main_.cpp **** //                 &motor_configs,
  57:Src/main_.cpp **** //                 &fet_thermistor_configs,
  58:Src/main_.cpp **** //                 &motor_thermistor_configs,
  59:Src/main_.cpp **** //                 &axis_configs)) {
  60:Src/main_.cpp **** //         //If loading failed, restore defaults
  61:Src/main_.cpp **** //         board_config = BoardConfig_t();
  62:Src/main_.cpp **** //         can_config = ODriveCAN::Config_t();
  63:Src/main_.cpp **** //         for (size_t i = 0; i < AXIS_COUNT; ++i) {
  64:Src/main_.cpp **** //             encoder_configs[i] = Encoder::Config_t();
  65:Src/main_.cpp **** //             controller_configs[i] = Controller::Config_t();
  66:Src/main_.cpp **** //             motor_configs[i] = Motor::Config_t();
  67:Src/main_.cpp **** //             fet_thermistor_configs[i] = OnboardThermistorCurrentLimiter::Config_t();
  68:Src/main_.cpp **** //             motor_thermistor_configs[i] = OffboardThermistorCurrentLimiter::Config_t();
  69:Src/main_.cpp **** //             axis_configs[i] = Axis::Config_t();
  70:Src/main_.cpp **** //             // Default step/dir pins are different, so we need to explicitly load them
  71:Src/main_.cpp **** //          //   Axis::load_default_can_id(i, axis_configs[i]);
  72:Src/main_.cpp **** 
  73:Src/main_.cpp **** //             controller_configs[i].load_encoder_axis = i;
  74:Src/main_.cpp **** //         }
  75:Src/main_.cpp **** //     } else {
  76:Src/main_.cpp **** //         odrv.user_config_loaded_ = true;
  77:Src/main_.cpp **** //     }
  78:Src/main_.cpp **** //  //   encoder_configs[0].mode = Encoder::MODE_UART_ABS_KING;
  79:Src/main_.cpp **** //     return odrv.user_config_loaded_;
  80:Src/main_.cpp **** }
  81:Src/main_.cpp **** 
  82:Src/main_.cpp **** void erase_configuration(void) {
  83:Src/main_.cpp ****     // NVM_erase();
  84:Src/main_.cpp **** 
  85:Src/main_.cpp ****     // // FIXME: this reboot is a workaround because we don't want the next save_configuration
  86:Src/main_.cpp ****     // // to write back the old configuration from RAM to NVM. The proper action would
  87:Src/main_.cpp ****     // // be to reset the values in RAM to default. However right now that's not
  88:Src/main_.cpp ****     // // practical because several startup actions depend on the config. The
  89:Src/main_.cpp ****     // // other problem is that the stack overflows if we reset to default here.
  90:Src/main_.cpp ****     // NVIC_SystemReset();
  91:Src/main_.cpp **** }
ARM GAS  /tmp/ccsEPjy3.s 			page 4


  92:Src/main_.cpp **** 
  93:Src/main_.cpp **** extern "C" int construct_objects(){
  88              		.loc 1 93 35 view -0
  89              		.cfi_startproc
  90              		@ Volatile: function does not return.
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  93              		@ link register save eliminated.
  94              		.cfi_endproc
  95              	.LFE5674:
  97              		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
  98              		.align	1
  99              		.p2align 2,,3
 100              		.global	vApplicationStackOverflowHook
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 104              		.fpu fpv4-sp-d16
 106              	vApplicationStackOverflowHook:
 107              	.LVL0:
 108              	.LFB5675:
  94:Src/main_.cpp **** // #if HW_VERSION_MAJOR == 3 && HW_VERSION_MINOR >= 3
  95:Src/main_.cpp **** //     if (odrv.config_.enable_i2c_instead_of_can) {
  96:Src/main_.cpp **** //         // Set up the direction GPIO as input
  97:Src/main_.cpp **** //         GPIO_InitTypeDef GPIO_InitStruct;
  98:Src/main_.cpp **** //         GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  99:Src/main_.cpp **** //         GPIO_InitStruct.Pull = GPIO_PULLUP;
 100:Src/main_.cpp **** 
 101:Src/main_.cpp **** //         GPIO_InitStruct.Pin = I2C_A0_PIN;
 102:Src/main_.cpp **** //         HAL_GPIO_Init(I2C_A0_PORT, &GPIO_InitStruct);
 103:Src/main_.cpp **** //         GPIO_InitStruct.Pin = I2C_A1_PIN;
 104:Src/main_.cpp **** //         HAL_GPIO_Init(I2C_A1_PORT, &GPIO_InitStruct);
 105:Src/main_.cpp **** //         GPIO_InitStruct.Pin = I2C_A2_PIN;
 106:Src/main_.cpp **** //         HAL_GPIO_Init(I2C_A2_PORT, &GPIO_InitStruct);
 107:Src/main_.cpp **** 
 108:Src/main_.cpp **** //         osDelay(1);
 109:Src/main_.cpp **** //         i2c_stats_.addr = (0xD << 3);
 110:Src/main_.cpp **** //         i2c_stats_.addr |= HAL_GPIO_ReadPin(I2C_A0_PORT, I2C_A0_PIN) != GPIO_PIN_RESET ? 0x1 : 0
 111:Src/main_.cpp **** //         i2c_stats_.addr |= HAL_GPIO_ReadPin(I2C_A1_PORT, I2C_A1_PIN) != GPIO_PIN_RESET ? 0x2 : 0
 112:Src/main_.cpp **** //         i2c_stats_.addr |= HAL_GPIO_ReadPin(I2C_A2_PORT, I2C_A2_PIN) != GPIO_PIN_RESET ? 0x4 : 0
 113:Src/main_.cpp **** //         MX_I2C1_Init(i2c_stats_.addr);
 114:Src/main_.cpp **** //     } else
 115:Src/main_.cpp **** // #endif
 116:Src/main_.cpp **** //         MX_CAN1_Init();
 117:Src/main_.cpp **** 
 118:Src/main_.cpp **** //     HAL_UART_DeInit(&huart4);
 119:Src/main_.cpp **** //     huart4.Init.BaudRate = odrv.config_.uart_baudrate;
 120:Src/main_.cpp **** //     HAL_UART_Init(&huart4);
 121:Src/main_.cpp **** 
 122:Src/main_.cpp **** //     // Init general user ADC on some GPIOs.
 123:Src/main_.cpp **** //     GPIO_InitTypeDef GPIO_InitStruct;
 124:Src/main_.cpp **** //     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 125:Src/main_.cpp **** //     GPIO_InitStruct.Pull = GPIO_NOPULL;
 126:Src/main_.cpp **** //     GPIO_InitStruct.Pin = GPIO_1_Pin;
 127:Src/main_.cpp **** //     HAL_GPIO_Init(GPIO_1_GPIO_Port, &GPIO_InitStruct);
 128:Src/main_.cpp **** //     GPIO_InitStruct.Pin = GPIO_2_Pin;
 129:Src/main_.cpp **** //     HAL_GPIO_Init(GPIO_2_GPIO_Port, &GPIO_InitStruct);
ARM GAS  /tmp/ccsEPjy3.s 			page 5


 130:Src/main_.cpp **** //     GPIO_InitStruct.Pin = GPIO_3_Pin;
 131:Src/main_.cpp **** //     HAL_GPIO_Init(GPIO_3_GPIO_Port, &GPIO_InitStruct);
 132:Src/main_.cpp **** //     GPIO_InitStruct.Pin = GPIO_4_Pin;
 133:Src/main_.cpp **** //     HAL_GPIO_Init(GPIO_4_GPIO_Port, &GPIO_InitStruct);
 134:Src/main_.cpp **** // #if HW_VERSION_MAJOR == 3 && HW_VERSION_MINOR >= 5
 135:Src/main_.cpp **** //     GPIO_InitStruct.Pin = GPIO_5_Pin;
 136:Src/main_.cpp **** //     HAL_GPIO_Init(GPIO_5_GPIO_Port, &GPIO_InitStruct);
 137:Src/main_.cpp **** // #endif
 138:Src/main_.cpp **** 
 139:Src/main_.cpp **** //     // Construct all objects.
 140:Src/main_.cpp **** //     odCAN = new ODriveCAN(can_config, &hcan1);
 141:Src/main_.cpp **** //     for (size_t i = 0; i < AXIS_COUNT; ++i) {
 142:Src/main_.cpp **** //         Encoder *encoder = new Encoder(hw_configs[i].encoder_config,
 143:Src/main_.cpp **** //                                        encoder_configs[i], motor_configs[i]);
 144:Src/main_.cpp **** //         Controller *controller = new Controller(controller_configs[i]);
 145:Src/main_.cpp **** 
 146:Src/main_.cpp **** //         OnboardThermistorCurrentLimiter *fet_thermistor = new OnboardThermistorCurrentLimiter(hw
 147:Src/main_.cpp **** //                                                                                               fe
 148:Src/main_.cpp **** //         OffboardThermistorCurrentLimiter *motor_thermistor = new OffboardThermistorCurrentLimite
 149:Src/main_.cpp **** 
 150:Src/main_.cpp **** //         Motor *motor = new Motor(hw_configs[i].motor_config,
 151:Src/main_.cpp **** //                                  hw_configs[i].gate_driver_config,
 152:Src/main_.cpp **** //                                  motor_configs[i]);
 153:Src/main_.cpp **** //         axes[i] = new Axis(i, hw_configs[i].axis_config, axis_configs[i],
 154:Src/main_.cpp **** //                 *encoder, *controller, *fet_thermistor,
 155:Src/main_.cpp **** //                 *motor_thermistor, *motor);
 156:Src/main_.cpp **** 
 157:Src/main_.cpp **** //         controller_configs[i].parent = controller;
 158:Src/main_.cpp **** //         encoder_configs[i].parent = encoder;
 159:Src/main_.cpp **** //         motor_thermistor_configs[i].parent = motor_thermistor;
 160:Src/main_.cpp **** //         motor_configs[i].parent = motor;
 161:Src/main_.cpp **** //         axis_configs[i].parent = axes[i];
 162:Src/main_.cpp **** //     }
 163:Src/main_.cpp **** //     return 0;
 164:Src/main_.cpp **** }
 165:Src/main_.cpp **** 
 166:Src/main_.cpp **** extern "C" {
 167:Src/main_.cpp **** int odrive_main(void);
 168:Src/main_.cpp **** void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed portCHAR *pcTaskName) {
 109              		.loc 1 168 86 view -0
 110              		.cfi_startproc
 111              		@ Volatile: function does not return.
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 169:Src/main_.cpp **** 
 170:Src/main_.cpp ****         safety_critical_disarm_motor_pwm(axes->motor_);
 114              		.loc 1 170 9 view .LVU5
 168:Src/main_.cpp **** 
 115              		.loc 1 168 86 is_stmt 0 view .LVU6
 116 0000 08B5     		push	{r3, lr}
 117              	.LCFI0:
 118              		.cfi_def_cfa_offset 8
 119              		.cfi_offset 3, -8
 120              		.cfi_offset 14, -4
 121              		.loc 1 170 41 view .LVU7
 122 0002 044B     		ldr	r3, .L9
 123 0004 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccsEPjy3.s 			page 6


 124 0006 D86E     		ldr	r0, [r3, #108]
 125              	.LVL1:
 126              		.loc 1 170 41 view .LVU8
 127 0008 FFF7FEFF 		bl	safety_critical_disarm_motor_pwm
 128              	.LVL2:
 171:Src/main_.cpp **** 
 172:Src/main_.cpp ****         safety_critical_disarm_brake_resistor();
 129              		.loc 1 172 9 is_stmt 1 view .LVU9
 130              		.loc 1 172 46 is_stmt 0 view .LVU10
 131 000c FFF7FEFF 		bl	safety_critical_disarm_brake_resistor
 132              	.LVL3:
 133              	.L7:
 173:Src/main_.cpp ****     for (;;); // TODO: safe action
 134              		.loc 1 173 5 is_stmt 1 discriminator 1 view .LVU11
 135              		.loc 1 173 5 discriminator 1 view .LVU12
 136              		.loc 1 173 5 discriminator 1 view .LVU13
 137              		.loc 1 173 5 discriminator 1 view .LVU14
 138 0010 FEE7     		b	.L7
 139              	.L10:
 140 0012 00BF     		.align	2
 141              	.L9:
 142 0014 00000000 		.word	.LANCHOR0
 143              		.cfi_endproc
 144              	.LFE5675:
 146              		.section	.text.vApplicationIdleHook,"ax",%progbits
 147              		.align	1
 148              		.p2align 2,,3
 149              		.global	vApplicationIdleHook
 150              		.syntax unified
 151              		.thumb
 152              		.thumb_func
 153              		.fpu fpv4-sp-d16
 155              	vApplicationIdleHook:
 156              	.LFB5676:
 174:Src/main_.cpp **** }
 175:Src/main_.cpp **** void vApplicationIdleHook(void) {
 157              		.loc 1 175 33 view -0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 176:Src/main_.cpp ****     if (system_stats.fully_booted) {
 161              		.loc 1 176 5 view .LVU16
 175:Src/main_.cpp ****     if (system_stats.fully_booted) {
 162              		.loc 1 175 33 is_stmt 0 view .LVU17
 163 0000 38B5     		push	{r3, r4, r5, lr}
 164              	.LCFI1:
 165              		.cfi_def_cfa_offset 16
 166              		.cfi_offset 3, -16
 167              		.cfi_offset 4, -12
 168              		.cfi_offset 5, -8
 169              		.cfi_offset 14, -4
 170              	.LBB44:
 171              		.loc 1 176 22 view .LVU18
 172 0002 0A4B     		ldr	r3, .L17
 173              		.loc 1 176 5 view .LVU19
 174 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 175 0006 7BB1     		cbz	r3, .L11
ARM GAS  /tmp/ccsEPjy3.s 			page 7


 176              	.LBB45:
 177:Src/main_.cpp ****         // system_stats.uptime = xTaskGetTickCount();
 178:Src/main_.cpp ****         // system_stats.min_heap_space = xPortGetMinimumEverFreeHeapSize();
 179:Src/main_.cpp ****         // system_stats.min_stack_space_comms = uxTaskGetStackHighWaterMark(comm_thread) * sizeof(S
 180:Src/main_.cpp ****         // system_stats.min_stack_space_axis0 = uxTaskGetStackHighWaterMark(axes[0]->thread_id_) * 
 181:Src/main_.cpp ****         // system_stats.min_stack_space_uart = uxTaskGetStackHighWaterMark(uart_thread) * sizeof(St
 182:Src/main_.cpp ****         // system_stats.min_stack_space_startup = uxTaskGetStackHighWaterMark(defaultTaskHandle) * 
 183:Src/main_.cpp ****         // system_stats.min_stack_space_can = uxTaskGetStackHighWaterMark(odCAN->thread_id_) * size
 184:Src/main_.cpp **** 
 185:Src/main_.cpp ****         // // Actual usage, in bytes, so we don't have to math
 186:Src/main_.cpp ****         // system_stats.stack_usage_axis0 = axes[0]->stack_size_ - system_stats_.min_stack_space_ax
 187:Src/main_.cpp ****         // system_stats.stack_usage_comms = stack_size_comm_thread - system_stats_.min_stack_space_
 188:Src/main_.cpp ****         // system_stats.stack_usage_uart = stack_size_uart_thread - system_stats_.min_stack_space_u
 189:Src/main_.cpp ****         // system_stats.stack_usage_startup = stack_size_default_task - system_stats_.min_stack_spa
 190:Src/main_.cpp ****         // system_stats.stack_usage_can = odCAN->stack_size_ - system_stats_.min_stack_space_can;
 191:Src/main_.cpp ****         for (ThermistorCurrentLimiter* thermistor : axes->thermistors_) {
 177              		.loc 1 191 9 is_stmt 1 view .LVU20
 178              	.LBB46:
 179              		.loc 1 191 59 is_stmt 0 view .LVU21
 180 0008 094C     		ldr	r4, .L17+4
 181 000a 2568     		ldr	r5, [r4]
 182              	.LVL4:
 183              		.loc 1 191 59 is_stmt 1 view .LVU22
 192:Src/main_.cpp ****             thermistor->update();
 184              		.loc 1 192 13 view .LVU23
 185              		.loc 1 192 31 is_stmt 0 view .LVU24
 186 000c D5F84801 		ldr	r0, [r5, #328]
 187 0010 FFF7FEFF 		bl	_ZN24ThermistorCurrentLimiter6updateEv
 188              	.LVL5:
 191:Src/main_.cpp ****             thermistor->update();
 189              		.loc 1 191 9 is_stmt 1 view .LVU25
 191:Src/main_.cpp ****             thermistor->update();
 190              		.loc 1 191 59 view .LVU26
 191              		.loc 1 192 13 view .LVU27
 192              		.loc 1 192 31 is_stmt 0 view .LVU28
 193 0014 D5F84C01 		ldr	r0, [r5, #332]
 194 0018 FFF7FEFF 		bl	_ZN24ThermistorCurrentLimiter6updateEv
 195              	.LVL6:
 191:Src/main_.cpp ****             thermistor->update();
 196              		.loc 1 191 9 is_stmt 1 view .LVU29
 191:Src/main_.cpp ****             thermistor->update();
 197              		.loc 1 191 59 view .LVU30
 198              	.LBE46:
 193:Src/main_.cpp ****         }
 194:Src/main_.cpp ****        
 195:Src/main_.cpp ****        axes->checks_ok_ = axes->do_checks();
 199              		.loc 1 195 8 view .LVU31
 200              		.loc 1 195 42 is_stmt 0 view .LVU32
 201 001c 2468     		ldr	r4, [r4]
 202 001e 2046     		mov	r0, r4
 203 0020 FFF7FEFF 		bl	_ZN4Axis9do_checksEv
 204              	.LVL7:
 205              		.loc 1 195 25 view .LVU33
 206 0024 84F8DC01 		strb	r0, [r4, #476]
 207              	.LVL8:
 208              	.L11:
 209              		.loc 1 195 25 view .LVU34
ARM GAS  /tmp/ccsEPjy3.s 			page 8


 210              	.LBE45:
 211              	.LBE44:
 196:Src/main_.cpp ****        
 197:Src/main_.cpp **** 
 198:Src/main_.cpp ****     }
 199:Src/main_.cpp **** }
 212              		.loc 1 199 1 view .LVU35
 213 0028 38BD     		pop	{r3, r4, r5, pc}
 214              	.L18:
 215 002a 00BF     		.align	2
 216              	.L17:
 217 002c 00000000 		.word	.LANCHOR1
 218 0030 00000000 		.word	.LANCHOR0
 219              		.cfi_endproc
 220              	.LFE5676:
 222              		.section	.text.odrive_main,"ax",%progbits
 223              		.align	1
 224              		.p2align 2,,3
 225              		.global	odrive_main
 226              		.syntax unified
 227              		.thumb
 228              		.thumb_func
 229              		.fpu fpv4-sp-d16
 231              	odrive_main:
 232              	.LFB5677:
 200:Src/main_.cpp **** }
 201:Src/main_.cpp **** 
 202:Src/main_.cpp **** int odrive_main(void) {
 233              		.loc 1 202 23 is_stmt 1 view -0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 0, uses_anonymous_args = 0
 203:Src/main_.cpp ****     // Start ADC for temperature measurements and user measurements
 204:Src/main_.cpp ****     start_general_purpose_adc();
 237              		.loc 1 204 5 view .LVU37
 202:Src/main_.cpp ****     // Start ADC for temperature measurements and user measurements
 238              		.loc 1 202 23 is_stmt 0 view .LVU38
 239 0000 38B5     		push	{r3, r4, r5, lr}
 240              	.LCFI2:
 241              		.cfi_def_cfa_offset 16
 242              		.cfi_offset 3, -16
 243              		.cfi_offset 4, -12
 244              		.cfi_offset 5, -8
 245              		.cfi_offset 14, -4
 205:Src/main_.cpp **** 
 206:Src/main_.cpp ****     // TODO: make dynamically reconfigurable
 207:Src/main_.cpp **** #if HW_VERSION_MAJOR == 3 && HW_VERSION_MINOR >= 3
 208:Src/main_.cpp ****     if (odrv.config_.enable_uart) {
 209:Src/main_.cpp ****         SetGPIO12toUART();
 210:Src/main_.cpp ****     }
 211:Src/main_.cpp **** #endif
 212:Src/main_.cpp ****     //osDelay(100);
 213:Src/main_.cpp ****     // Init communications (this requires the axis objects to be constructed)
 214:Src/main_.cpp ****     // Start pwm-in compare modules
 215:Src/main_.cpp ****     // must happen after communication is initialized
 216:Src/main_.cpp ****     pwm_in_init();
 217:Src/main_.cpp **** 
ARM GAS  /tmp/ccsEPjy3.s 			page 9


 218:Src/main_.cpp ****     // Set up the CS pins for absolute encoders
 219:Src/main_.cpp **** 
 220:Src/main_.cpp ****     if(axes->encoder_.config_.mode & Encoder::MODE_FLAG_ABS){
 246              		.loc 1 220 14 view .LVU39
 247 0002 1D4D     		ldr	r5, .L28
 204:Src/main_.cpp **** 
 248              		.loc 1 204 30 view .LVU40
 249 0004 FFF7FEFF 		bl	start_general_purpose_adc
 250              	.LVL9:
 216:Src/main_.cpp **** 
 251              		.loc 1 216 5 is_stmt 1 view .LVU41
 216:Src/main_.cpp **** 
 252              		.loc 1 216 16 is_stmt 0 view .LVU42
 253 0008 FFF7FEFF 		bl	pwm_in_init
 254              	.LVL10:
 255              		.loc 1 220 5 is_stmt 1 view .LVU43
 256              		.loc 1 220 14 is_stmt 0 view .LVU44
 257 000c 2B68     		ldr	r3, [r5]
 258 000e 9868     		ldr	r0, [r3, #8]
 259              		.loc 1 220 31 view .LVU45
 260 0010 4268     		ldr	r2, [r0, #4]
 261              		.loc 1 220 5 view .LVU46
 262 0012 1288     		ldrh	r2, [r2]
 263 0014 D205     		lsls	r2, r2, #23
 264 0016 2BD4     		bmi	.L27
 265              	.L20:
 221:Src/main_.cpp ****         axes->encoder_.abs_spi_cs_pin_init();
 222:Src/main_.cpp ****     }
 223:Src/main_.cpp **** 
 224:Src/main_.cpp **** 
 225:Src/main_.cpp ****     // Setup motors (DRV8301 SPI transactions here)
 226:Src/main_.cpp ****    // for(auto& axis : axes){
 227:Src/main_.cpp ****     axes->motor_.setup();
 266              		.loc 1 227 5 is_stmt 1 view .LVU47
 267              		.loc 1 227 11 is_stmt 0 view .LVU48
 268 0018 DC6E     		ldr	r4, [r3, #108]
 269              	.LVL11:
 270              	.LBB50:
 271              	.LBI50:
 272              		.file 2 "Inc/motor.hpp"
   1:Inc/motor.hpp **** #ifndef __MOTOR_HPP
   2:Inc/motor.hpp **** #define __MOTOR_HPP
   3:Inc/motor.hpp **** 
   4:Inc/motor.hpp **** 
   5:Inc/motor.hpp **** #include <cstdint>  // Add this for uint32_t
   6:Inc/motor.hpp **** #include "component.hpp"
   7:Inc/motor.hpp **** 
   8:Inc/motor.hpp **** #include "interfaces.hpp"
   9:Inc/motor.hpp **** #include "phase_control_law.hpp"
  10:Inc/motor.hpp **** #include "main.h"
  11:Inc/motor.hpp **** #include "current_limiter.hpp"
  12:Inc/motor.hpp **** #include "foc.hpp"
  13:Inc/motor.hpp **** 
  14:Inc/motor.hpp **** 
  15:Inc/motor.hpp **** class FieldOrientedController;
  16:Inc/motor.hpp **** class Axis;
  17:Inc/motor.hpp **** 
ARM GAS  /tmp/ccsEPjy3.s 			page 10


  18:Inc/motor.hpp **** class Motor : public ODriveIntf::MotorIntf{
  19:Inc/motor.hpp **** public:
  20:Inc/motor.hpp ****     struct Iph_BC_t {
  21:Inc/motor.hpp ****         float phA;
  22:Inc/motor.hpp ****         float phB;
  23:Inc/motor.hpp ****         float phC;
  24:Inc/motor.hpp ****     };
  25:Inc/motor.hpp **** 
  26:Inc/motor.hpp ****     enum MotorType {
  27:Inc/motor.hpp ****         MOTOR_TYPE_HIGH_CURRENT          = 0,
  28:Inc/motor.hpp ****         MOTOR_TYPE_GIMBAL                = 2,
  29:Inc/motor.hpp ****         MOTOR_TYPE_ACIM                  = 3,
  30:Inc/motor.hpp ****     };
  31:Inc/motor.hpp **** 
  32:Inc/motor.hpp ****     struct CurrentControl_t{
  33:Inc/motor.hpp ****         float p_gain; // [V/A]
  34:Inc/motor.hpp ****         float i_gain; // [V/As]
  35:Inc/motor.hpp ****         float v_current_control_integral_d; // [V]
  36:Inc/motor.hpp ****         float v_current_control_integral_q; // [V]
  37:Inc/motor.hpp ****         float Ibus; // DC bus current [A]
  38:Inc/motor.hpp ****         // Voltage applied at end of cycle:
  39:Inc/motor.hpp ****         float final_v_alpha; // [V]
  40:Inc/motor.hpp ****         float final_v_beta; // [V]
  41:Inc/motor.hpp **** 
  42:Inc/motor.hpp ****         float final_v_d; // [V]
  43:Inc/motor.hpp ****         float final_v_q; // [V]
  44:Inc/motor.hpp **** 
  45:Inc/motor.hpp ****         float Id_setpoint; // [A]
  46:Inc/motor.hpp ****         float Iq_setpoint; // [A]
  47:Inc/motor.hpp ****         float Iq_measured; // [A]
  48:Inc/motor.hpp ****         float Id_measured; // [A]
  49:Inc/motor.hpp ****         float I_measured_report_filter_k;
  50:Inc/motor.hpp ****         float max_allowed_current; // [A]
  51:Inc/motor.hpp ****         float overcurrent_trip_level; // [A]
  52:Inc/motor.hpp ****         float acim_rotor_flux; // [A]
  53:Inc/motor.hpp ****         float async_phase_vel; // [rad/s electrical]
  54:Inc/motor.hpp ****         float async_phase_offset; // [rad electrical]
  55:Inc/motor.hpp ****     };
  56:Inc/motor.hpp ****     static constexpr int32_t NUM_LINEARITY_SEG = 60;
  57:Inc/motor.hpp ****     static constexpr float CALIBRATION_INCREMENT = 1;
  58:Inc/motor.hpp ****     // NOTE: for gimbal motors, all units of Nm are instead V.
  59:Inc/motor.hpp ****     // example: vel_gain is [V/(turn/s)] instead of [Nm/(turn/s)]
  60:Inc/motor.hpp ****     // example: current_lim and calibration_current will instead determine the maximum voltage appl
  61:Inc/motor.hpp ****     struct Config_t {
  62:Inc/motor.hpp ****         bool pre_calibrated = false; // can be set to true to indicate that all values here are val
  63:Inc/motor.hpp ****         int32_t pole_pairs = 21;
  64:Inc/motor.hpp ****         int32_t gear_ratio = 16;
  65:Inc/motor.hpp ****         float motor_torque_base = 60.0f; // [Nm]
  66:Inc/motor.hpp ****         float calibration_current = 10.0f;    // [A]
  67:Inc/motor.hpp ****         float resistance_calib_max_voltage = 2.0f; // [V] - You may need to increase this if this v
  68:Inc/motor.hpp ****         float phase_inductance = 0.000055f;        // to be set by measure_phase_inductance
  69:Inc/motor.hpp ****         float phase_resistance = 0.07f;        // to be set by measure_phase_resistance
  70:Inc/motor.hpp ****         float torque_constant = 0.087f;         // [Nm/A] for PM motors, [Nm/A^2] for induction mot
  71:Inc/motor.hpp ****         int32_t direction = 1;                // 1 or -1 (0 = unspecified)
  72:Inc/motor.hpp ****         MotorType motor_type = MOTOR_TYPE_HIGH_CURRENT;
  73:Inc/motor.hpp ****         // Read out max_allowed_current to see max supported value for current_lim.
  74:Inc/motor.hpp ****         // float current_lim = 70.0f; //[A]
ARM GAS  /tmp/ccsEPjy3.s 			page 11


  75:Inc/motor.hpp ****         float current_lim = 10.0f;          //[A]
  76:Inc/motor.hpp ****         float current_lim_margin = 8.0f;    // Maximum violation of current_lim
  77:Inc/motor.hpp ****         float torque_lim = std::numeric_limits<float>::infinity();           //[Nm]. 
  78:Inc/motor.hpp ****         // Value used to compute shunt amplifier gains
  79:Inc/motor.hpp ****         float requested_current_range = 60.0f; // [A]
  80:Inc/motor.hpp ****         float current_control_bandwidth = 3000.0f;  // [rad/s]
  81:Inc/motor.hpp ****         float inverter_temp_limit_lower = 100;
  82:Inc/motor.hpp ****         float inverter_temp_limit_upper = 120;
  83:Inc/motor.hpp ****         float acim_slip_velocity = 14.706f; // [rad/s electrical] = 1/rotor_tau
  84:Inc/motor.hpp ****         float acim_gain_min_flux = 10; // [A]
  85:Inc/motor.hpp ****         float acim_autoflux_min_Id = 10; // [A]
  86:Inc/motor.hpp ****         bool acim_autoflux_enable = false;
  87:Inc/motor.hpp ****         float acim_autoflux_attack_gain = 10.0f;
  88:Inc/motor.hpp ****         float acim_autoflux_decay_gain = 1.0f;
  89:Inc/motor.hpp **** 
  90:Inc/motor.hpp ****         float Torque_LINEARITY_[NUM_LINEARITY_SEG];
  91:Inc/motor.hpp ****         float CURRENT_LINEARITY_[NUM_LINEARITY_SEG];
  92:Inc/motor.hpp **** 
  93:Inc/motor.hpp ****         float CURRENT2TORQUE_COEFF[2*NUM_LINEARITY_SEG];
  94:Inc/motor.hpp **** 
  95:Inc/motor.hpp ****         bool R_wL_FF_enable = false; // Enable feedforwards for R*I and w*L*I terms
  96:Inc/motor.hpp ****         bool bEMF_FF_enable = false; // Enable feedforward for bEMF
  97:Inc/motor.hpp **** 
  98:Inc/motor.hpp ****         float I_bus_hard_min = -INFINITY;
  99:Inc/motor.hpp ****         float I_bus_hard_max = INFINITY;
 100:Inc/motor.hpp ****         // custom property setters
 101:Inc/motor.hpp ****         Motor* parent = nullptr;
 102:Inc/motor.hpp ****         void set_pre_calibrated(bool value) {
 103:Inc/motor.hpp ****             pre_calibrated = value;
 104:Inc/motor.hpp ****             parent->is_calibrated_ = parent->is_calibrated_ || parent->config_.pre_calibrated;
 105:Inc/motor.hpp ****         }
 106:Inc/motor.hpp ****         void set_phase_inductance(float value) { phase_inductance = value; parent->update_current_c
 107:Inc/motor.hpp ****         void set_phase_resistance(float value) { phase_resistance = value; parent->update_current_c
 108:Inc/motor.hpp ****         void set_current_control_bandwidth(float value) { current_control_bandwidth = value; parent
 109:Inc/motor.hpp ****     };
 110:Inc/motor.hpp **** 
 111:Inc/motor.hpp ****     Motor(const MotorHardwareConfig_t& hw_config,
 112:Inc/motor.hpp ****          Config_t& config);
 113:Inc/motor.hpp **** 
 114:Inc/motor.hpp **** 
 115:Inc/motor.hpp ****     bool arm(PhaseControlLaw<3>* control_law);
 116:Inc/motor.hpp ****     bool disarm();
 117:Inc/motor.hpp **** 
 118:Inc/motor.hpp ****     void current_meas_cb(uint32_t timestamp);
 119:Inc/motor.hpp ****     void pwm_update_cb(uint32_t output_timestamp);
 120:Inc/motor.hpp **** 
 121:Inc/motor.hpp ****     void setup() {
 273              		.loc 2 121 10 is_stmt 1 view .LVU49
 274              	.LBB51:
 122:Inc/motor.hpp ****         int32_t index = 0;
 275              		.loc 2 122 9 view .LVU50
 123:Inc/motor.hpp ****         DRV8301_setup();
 276              		.loc 2 123 9 view .LVU51
 277              		.loc 2 123 22 is_stmt 0 view .LVU52
 278 001a 2046     		mov	r0, r4
 279 001c FFF7FEFF 		bl	_ZN5Motor13DRV8301_setupEv
 280              	.LVL12:
ARM GAS  /tmp/ccsEPjy3.s 			page 12


 124:Inc/motor.hpp ****         for( index = 0;index < NUM_LINEARITY_SEG;index++)
 281              		.loc 2 124 9 is_stmt 1 view .LVU53
 282              		.loc 2 124 30 view .LVU54
 125:Inc/motor.hpp ****         {
 126:Inc/motor.hpp ****             L_Slop_Array_P_[index] = config_.Torque_LINEARITY_[index];
 283              		.loc 2 126 38 is_stmt 0 view .LVU55
 284 0020 6168     		ldr	r1, [r4, #4]
 285 0022 04F1D000 		add	r0, r4, #208
 286 0026 01F16003 		add	r3, r1, #96
 287 002a 01F5A871 		add	r1, r1, #336
 288              	.LVL13:
 289              	.L21:
 290              		.loc 2 126 13 is_stmt 1 view .LVU56
 291              		.loc 2 126 69 is_stmt 0 view .LVU57
 292 002e 53F8042B 		ldr	r2, [r3], #4	@ float
 293              		.loc 2 126 36 view .LVU58
 294 0032 40F8042B 		str	r2, [r0], #4	@ float
 127:Inc/motor.hpp ****             L_Slop_Array_N_[index] = config_.CURRENT_LINEARITY_[index];
 295              		.loc 2 127 13 is_stmt 1 view .LVU59
 124:Inc/motor.hpp ****         for( index = 0;index < NUM_LINEARITY_SEG;index++)
 296              		.loc 2 124 30 is_stmt 0 view .LVU60
 297 0036 8B42     		cmp	r3, r1
 298              		.loc 2 127 70 view .LVU61
 299 0038 D3F8EC20 		ldr	r2, [r3, #236]	@ float
 300              		.loc 2 127 36 view .LVU62
 301 003c C0F8EC20 		str	r2, [r0, #236]	@ float
 124:Inc/motor.hpp ****         for( index = 0;index < NUM_LINEARITY_SEG;index++)
 302              		.loc 2 124 9 is_stmt 1 view .LVU63
 124:Inc/motor.hpp ****         for( index = 0;index < NUM_LINEARITY_SEG;index++)
 303              		.loc 2 124 30 view .LVU64
 304 0040 F5D1     		bne	.L21
 305              	.LVL14:
 124:Inc/motor.hpp ****         for( index = 0;index < NUM_LINEARITY_SEG;index++)
 306              		.loc 2 124 30 is_stmt 0 view .LVU65
 307              	.LBE51:
 308              	.LBE50:
 228:Src/main_.cpp ****    // }
 229:Src/main_.cpp **** 
 230:Src/main_.cpp ****     // Setup encoders (Starts encoder SPI transactions)
 231:Src/main_.cpp **** 
 232:Src/main_.cpp ****     axes->encoder_.setup();
 309              		.loc 1 232 5 is_stmt 1 view .LVU66
 310              		.loc 1 232 11 is_stmt 0 view .LVU67
 311 0042 2B68     		ldr	r3, [r5]
 312              		.loc 1 232 25 view .LVU68
 313 0044 9868     		ldr	r0, [r3, #8]
 314 0046 FFF7FEFF 		bl	_ZN7Encoder5setupEv
 315              	.LVL15:
 233:Src/main_.cpp **** 
 234:Src/main_.cpp **** 
 235:Src/main_.cpp ****     // Setup anything remaining in each axis
 236:Src/main_.cpp ****     axes->setup();
 316              		.loc 1 236 5 is_stmt 1 view .LVU69
 317              		.loc 1 236 16 is_stmt 0 view .LVU70
 318 004a 2868     		ldr	r0, [r5]
 319 004c FFF7FEFF 		bl	_ZN4Axis5setupEv
 320              	.LVL16:
ARM GAS  /tmp/ccsEPjy3.s 			page 13


 237:Src/main_.cpp **** 
 238:Src/main_.cpp ****     // Start PWM and enable adc interrupts/callbacks
 239:Src/main_.cpp ****     start_adc_pwm();
 321              		.loc 1 239 5 is_stmt 1 view .LVU71
 322              		.loc 1 239 18 is_stmt 0 view .LVU72
 323 0050 FFF7FEFF 		bl	start_adc_pwm
 324              	.LVL17:
 240:Src/main_.cpp ****     // This delay serves two purposes:
 241:Src/main_.cpp ****     //  - Let the current sense calibration converge (the current
 242:Src/main_.cpp ****     //    sense interrupts are firing in background by now)
 243:Src/main_.cpp ****     //  - Allow a user to interrupt the code, e.g. by flashing a new code,
 244:Src/main_.cpp ****     //    before it does anything crazy
 245:Src/main_.cpp ****     // TODO make timing a function of calibration filter tau
 246:Src/main_.cpp ****     osDelay(1500);
 325              		.loc 1 246 5 is_stmt 1 view .LVU73
 326              		.loc 1 246 12 is_stmt 0 view .LVU74
 327 0054 40F2DC50 		movw	r0, #1500
 328 0058 FFF7FEFF 		bl	osDelay
 329              	.LVL18:
 247:Src/main_.cpp **** 
 248:Src/main_.cpp ****     // Start state machine threads. Each thread will go through various calibration
 249:Src/main_.cpp ****     // procedures and then run the actual controller loops.
 250:Src/main_.cpp ****     // TODO: generalize for AXIS_COUNT != 2
 251:Src/main_.cpp ****     for (size_t i = 0; i < 1; ++i) {
 330              		.loc 1 251 5 is_stmt 1 view .LVU75
 331              	.LBB52:
 332              		.loc 1 251 26 view .LVU76
 252:Src/main_.cpp ****         axes->start_thread();
 333              		.loc 1 252 9 view .LVU77
 334              		.loc 1 252 27 is_stmt 0 view .LVU78
 335 005c 2868     		ldr	r0, [r5]
 336 005e FFF7FEFF 		bl	_ZN4Axis12start_threadEv
 337              	.LVL19:
 251:Src/main_.cpp ****         axes->start_thread();
 338              		.loc 1 251 5 is_stmt 1 view .LVU79
 251:Src/main_.cpp ****         axes->start_thread();
 339              		.loc 1 251 26 view .LVU80
 340              	.LBE52:
 253:Src/main_.cpp ****     }
 254:Src/main_.cpp **** 
 255:Src/main_.cpp ****     start_analog_thread();
 341              		.loc 1 255 5 view .LVU81
 342              		.loc 1 255 24 is_stmt 0 view .LVU82
 343 0062 FFF7FEFF 		bl	start_analog_thread
 344              	.LVL20:
 256:Src/main_.cpp **** 
 257:Src/main_.cpp ****     system_stats.fully_booted = true;
 345              		.loc 1 257 5 is_stmt 1 view .LVU83
 346              		.loc 1 257 31 is_stmt 0 view .LVU84
 347 0066 054B     		ldr	r3, .L28+4
 348 0068 0122     		movs	r2, #1
 349 006a 1A70     		strb	r2, [r3]
 258:Src/main_.cpp ****     return 0;
 350              		.loc 1 258 5 is_stmt 1 view .LVU85
 259:Src/main_.cpp **** }
 351              		.loc 1 259 1 is_stmt 0 view .LVU86
 352 006c 0020     		movs	r0, #0
ARM GAS  /tmp/ccsEPjy3.s 			page 14


 353 006e 38BD     		pop	{r3, r4, r5, pc}
 354              	.LVL21:
 355              	.L27:
 221:Src/main_.cpp ****     }
 356              		.loc 1 221 9 is_stmt 1 view .LVU87
 221:Src/main_.cpp ****     }
 357              		.loc 1 221 43 is_stmt 0 view .LVU88
 358 0070 FFF7FEFF 		bl	_ZN7Encoder19abs_spi_cs_pin_initEv
 359              	.LVL22:
 227:Src/main_.cpp ****    // }
 360              		.loc 1 227 23 view .LVU89
 361 0074 2B68     		ldr	r3, [r5]
 362 0076 CFE7     		b	.L20
 363              	.L29:
 364              		.align	2
 365              	.L28:
 366 0078 00000000 		.word	.LANCHOR0
 367 007c 00000000 		.word	.LANCHOR1
 368              		.cfi_endproc
 369              	.LFE5677:
 371              		.section	.text.startup._GLOBAL__sub_I_board_config,"ax",%progbits
 372              		.align	1
 373              		.p2align 2,,3
 374              		.syntax unified
 375              		.thumb
 376              		.thumb_func
 377              		.fpu fpv4-sp-d16
 379              	_GLOBAL__sub_I_board_config:
 380              	.LFB6310:
 381              		.loc 1 259 1 is_stmt 1 view -0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385              	.LBB68:
 386              	.LBI68:
 387              		.loc 1 259 1 view .LVU91
 388              	.LVL23:
 389              	.LBB69:
 390              	.LBB70:
 391              	.LBI70:
 392              		.file 3 "Inc/controller.hpp"
   1:Inc/controller.hpp **** #ifndef __CONTROLLER_HPP
   2:Inc/controller.hpp **** #define __CONTROLLER_HPP
   3:Inc/controller.hpp **** 
   4:Inc/controller.hpp **** 
   5:Inc/controller.hpp **** #include "component.hpp"
   6:Inc/controller.hpp **** 
   7:Inc/controller.hpp **** #include "interfaces.hpp"
   8:Inc/controller.hpp **** 
   9:Inc/controller.hpp **** class Axis;
  10:Inc/controller.hpp **** 
  11:Inc/controller.hpp **** class Controller : public ODriveIntf::ControllerIntf{
  12:Inc/controller.hpp **** public:
  13:Inc/controller.hpp ****     typedef struct {
  14:Inc/controller.hpp ****         uint32_t index = 0;
  15:Inc/controller.hpp ****         float cogging_map[128];
  16:Inc/controller.hpp ****         bool pre_calibrated = false;
ARM GAS  /tmp/ccsEPjy3.s 			page 15


  17:Inc/controller.hpp ****         bool calib_anticogging = false;
  18:Inc/controller.hpp ****         float calib_pos_threshold = 1.0f;
  19:Inc/controller.hpp ****         float calib_vel_threshold = 1.0f;
  20:Inc/controller.hpp ****         float cogging_ratio = 1.0f;
  21:Inc/controller.hpp ****         bool anticogging_enabled = true;
  22:Inc/controller.hpp ****     } Anticogging_t;
  23:Inc/controller.hpp **** 
  24:Inc/controller.hpp ****     struct Config_t {
 393              		.loc 3 24 12 view .LVU92
 394              	.LBE70:
 395              	.LBE69:
 396              	.LBE68:
 397              		.loc 1 259 1 is_stmt 0 view .LVU93
 398 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 399              	.LCFI3:
 400              		.cfi_def_cfa_offset 40
 401              		.cfi_offset 3, -40
 402              		.cfi_offset 4, -36
 403              		.cfi_offset 5, -32
 404              		.cfi_offset 6, -28
 405              		.cfi_offset 7, -24
 406              		.cfi_offset 8, -20
 407              		.cfi_offset 9, -16
 408              		.cfi_offset 10, -12
 409              		.cfi_offset 11, -8
 410              		.cfi_offset 14, -4
 411              	.LBB145:
 412              	.LBB142:
 413              	.LBB85:
 414              	.LBB71:
 415              		.loc 3 24 12 view .LVU94
 416 0004 694A     		ldr	r2, .L32
 417 0006 6A49     		ldr	r1, .L32+4
 418 0008 6A4C     		ldr	r4, .L32+8
 419 000a 6B48     		ldr	r0, .L32+12
 420 000c DFF8FCB1 		ldr	fp, .L32+96
 421 0010 6A4E     		ldr	r6, .L32+16
 422              	.LBE71:
 423              	.LBE85:
 424              	.LBB86:
 425              	.LBB87:
 426              		.file 4 "Inc/thermistor.hpp"
   1:Inc/thermistor.hpp **** #ifndef __THERMISTOR_HPP
   2:Inc/thermistor.hpp **** #define __THERMISTOR_HPP
   3:Inc/thermistor.hpp **** 
   4:Inc/thermistor.hpp **** #include "main.h"
   5:Inc/thermistor.hpp **** #include "interfaces.hpp"
   6:Inc/thermistor.hpp **** #include "current_limiter.hpp"
   7:Inc/thermistor.hpp **** 
   8:Inc/thermistor.hpp **** #define THERMISTOR_CURRENT_LIMITER_MAX_TEMP 150.0f
   9:Inc/thermistor.hpp **** #define THERMISTOR_CURRENT_LIMITER_MIN_TEMP -40.0f
  10:Inc/thermistor.hpp **** 
  11:Inc/thermistor.hpp **** #define THERMISTOR_CURRENT_LIMITER_MAX_CURRENT 3.0f
  12:Inc/thermistor.hpp **** 
  13:Inc/thermistor.hpp **** class Axis;
  14:Inc/thermistor.hpp **** 
  15:Inc/thermistor.hpp **** 
ARM GAS  /tmp/ccsEPjy3.s 			page 16


  16:Inc/thermistor.hpp **** class ThermistorCurrentLimiter : public CurrentLimiter, public ODriveIntf::ThermistorCurrentLimiter
  17:Inc/thermistor.hpp **** public:
  18:Inc/thermistor.hpp ****     virtual ~ThermistorCurrentLimiter() = default;
  19:Inc/thermistor.hpp **** 
  20:Inc/thermistor.hpp ****     ThermistorCurrentLimiter(uint16_t adc_channel,
  21:Inc/thermistor.hpp ****                              const float* const coefficients,
  22:Inc/thermistor.hpp ****                              const float* const aux_coefficients,
  23:Inc/thermistor.hpp ****                              size_t num_coeffs,
  24:Inc/thermistor.hpp ****                              const float& temp_limit_lower,
  25:Inc/thermistor.hpp ****                              const float& temp_limit_upper,
  26:Inc/thermistor.hpp ****                              const bool& enabled);
  27:Inc/thermistor.hpp **** 
  28:Inc/thermistor.hpp ****     void update();
  29:Inc/thermistor.hpp ****     bool do_checks();
  30:Inc/thermistor.hpp ****     float get_current_limit(float base_current_lim) const override;
  31:Inc/thermistor.hpp **** 
  32:Inc/thermistor.hpp ****     uint16_t adc_channel_;
  33:Inc/thermistor.hpp ****     const float* const coefficients_;
  34:Inc/thermistor.hpp ****     const float* const aux_coefficients_;
  35:Inc/thermistor.hpp ****     const size_t num_coeffs_;
  36:Inc/thermistor.hpp ****     float temperature_;
  37:Inc/thermistor.hpp ****     int32_t temperature_int_;
  38:Inc/thermistor.hpp ****     float aux_temperature_;
  39:Inc/thermistor.hpp ****     int32_t aux_temperature_int_;
  40:Inc/thermistor.hpp ****     const float& temp_limit_lower_;
  41:Inc/thermistor.hpp ****     const float& temp_limit_upper_;
  42:Inc/thermistor.hpp ****     const bool& enabled_;
  43:Inc/thermistor.hpp ****     Error error_;
  44:Inc/thermistor.hpp ****     Axis* axis_ = nullptr; // set by Axis constructor
  45:Inc/thermistor.hpp **** };
  46:Inc/thermistor.hpp **** 
  47:Inc/thermistor.hpp **** class OnboardThermistorCurrentLimiter : public ThermistorCurrentLimiter, public ODriveIntf::Onboard
  48:Inc/thermistor.hpp **** public:
  49:Inc/thermistor.hpp ****     struct Config_t {
  50:Inc/thermistor.hpp ****         float temp_limit_lower = 100;
  51:Inc/thermistor.hpp ****         float temp_limit_upper = 120;
  52:Inc/thermistor.hpp ****         bool enabled = true;
  53:Inc/thermistor.hpp ****     };
  54:Inc/thermistor.hpp **** 
  55:Inc/thermistor.hpp ****     virtual ~OnboardThermistorCurrentLimiter() = default;
  56:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
  57:Inc/thermistor.hpp **** 
  58:Inc/thermistor.hpp ****     Config_t& config_;
  59:Inc/thermistor.hpp **** };
  60:Inc/thermistor.hpp **** 
  61:Inc/thermistor.hpp **** class OffboardThermistorCurrentLimiter : public ThermistorCurrentLimiter, public ODriveIntf::Offboa
  62:Inc/thermistor.hpp **** public:
  63:Inc/thermistor.hpp ****     static const size_t num_coeffs_ = 4;
  64:Inc/thermistor.hpp **** 
  65:Inc/thermistor.hpp ****     struct Config_t {
 427              		.loc 4 65 12 view .LVU95
 428 0012 DFF8FCC1 		ldr	ip, .L32+100
 429              	.LBE87:
 430              	.LBE86:
 431              	.LBB92:
 432              	.LBB93:
  61:Inc/motor.hpp ****         bool pre_calibrated = false; // can be set to true to indicate that all values here are val
ARM GAS  /tmp/ccsEPjy3.s 			page 17


 433              		.loc 2 61 12 view .LVU96
 434 0016 DFF8FC81 		ldr	r8, .L32+104
 435 001a DFED697A 		vldr.32	s15, .L32+20
 436 001e DFED693A 		vldr.32	s7, .L32+24
 437 0022 9FED694A 		vldr.32	s8, .L32+28
 438 0026 DFED694A 		vldr.32	s9, .L32+32
 439 002a 9FED695A 		vldr.32	s10, .L32+36
 440 002e DFED695A 		vldr.32	s11, .L32+40
 441 0032 9FED696A 		vldr.32	s12, .L32+44
 442 0036 9FED693A 		vldr.32	s6, .L32+48
 443              	.LBE93:
 444              	.LBE92:
 445              	.LBB101:
 446              	.LBB88:
 447              		.loc 4 65 12 view .LVU97
 448 003a DFED696A 		vldr.32	s13, .L32+52
 449              	.LBE88:
 450              	.LBE101:
 451              	.LBB102:
 452              	.LBB103:
 453              		.file 5 "Inc/axis.hpp"
   1:Inc/axis.hpp  **** #ifndef __AXIS_HPP
   2:Inc/axis.hpp  **** #define __AXIS_HPP
   3:Inc/axis.hpp  **** 
   4:Inc/axis.hpp  **** 
   5:Inc/axis.hpp  **** #include "task_timer.hpp"
   6:Inc/axis.hpp  **** #include <array>
   7:Inc/axis.hpp  **** #include "interfaces.hpp"
   8:Inc/axis.hpp  **** #include "open_loop_controller.hpp"
   9:Inc/axis.hpp  **** #include <functional>
  10:Inc/axis.hpp  **** #include "low_level.h"  // Add this for safety_critical_disarm_motor_pwm declaration
  11:Inc/axis.hpp  **** #include  "current_limiter.hpp"
  12:Inc/axis.hpp  **** #include "utils.hpp"
  13:Inc/axis.hpp  **** 
  14:Inc/axis.hpp  **** class Motor;
  15:Inc/axis.hpp  **** class Controller;
  16:Inc/axis.hpp  **** class Encoder;
  17:Inc/axis.hpp  **** class OpenLoopController;
  18:Inc/axis.hpp  **** class  OnboardThermistorCurrentLimiter;
  19:Inc/axis.hpp  **** class  OffboardThermistorCurrentLimiter;
  20:Inc/axis.hpp  **** class ThermistorCurrentLimiter;
  21:Inc/axis.hpp  **** 
  22:Inc/axis.hpp  **** class Axis : public ODriveIntf::AxisIntf{
  23:Inc/axis.hpp  **** public:
  24:Inc/axis.hpp  ****     struct LockinConfig_t {
  25:Inc/axis.hpp  ****         float current = 10.0f;           // [A]
  26:Inc/axis.hpp  ****         float ramp_time = 0.4f;          // [s]
  27:Inc/axis.hpp  ****         float ramp_distance = 1 * M_PI;  // [rad]
  28:Inc/axis.hpp  ****         float accel = 20.0f;     // [rad/s^2]
  29:Inc/axis.hpp  ****         float vel = 40.0f; // [rad/s]
  30:Inc/axis.hpp  ****         float finish_distance = 100.0f;  // [rad]
  31:Inc/axis.hpp  ****         bool finish_on_vel = false;
  32:Inc/axis.hpp  ****         bool finish_on_distance = false;
  33:Inc/axis.hpp  ****         bool finish_on_enc_idx = false;
  34:Inc/axis.hpp  ****     };
  35:Inc/axis.hpp  ****     struct TaskTimes {
  36:Inc/axis.hpp  ****         TaskTimer thermistor_update;
ARM GAS  /tmp/ccsEPjy3.s 			page 18


  37:Inc/axis.hpp  ****         TaskTimer encoder_update;
  38:Inc/axis.hpp  ****         TaskTimer sensorless_estimator_update;
  39:Inc/axis.hpp  ****         TaskTimer endstop_update;
  40:Inc/axis.hpp  ****         TaskTimer can_heartbeat;
  41:Inc/axis.hpp  ****         TaskTimer controller_update;
  42:Inc/axis.hpp  ****         TaskTimer open_loop_controller_update;
  43:Inc/axis.hpp  ****         TaskTimer acim_estimator_update;
  44:Inc/axis.hpp  ****         TaskTimer motor_update;
  45:Inc/axis.hpp  ****         TaskTimer current_controller_update;
  46:Inc/axis.hpp  ****         TaskTimer dc_calib;
  47:Inc/axis.hpp  ****         TaskTimer current_sense;
  48:Inc/axis.hpp  ****         TaskTimer pwm_update;
  49:Inc/axis.hpp  ****     };
  50:Inc/axis.hpp  **** 
  51:Inc/axis.hpp  **** 
  52:Inc/axis.hpp  **** 
  53:Inc/axis.hpp  **** 
  54:Inc/axis.hpp  **** 
  55:Inc/axis.hpp  ****    enum ENCOS_ERRO
  56:Inc/axis.hpp  ****    {
  57:Inc/axis.hpp  ****       ENCOS_ERROR_NONE = 0,
  58:Inc/axis.hpp  ****       ENCOS_ERROR_OVER_TEMP = 1,
  59:Inc/axis.hpp  ****       ENCOS_ERROR_CURRENT_LIMIT_VIOLATION =2,
  60:Inc/axis.hpp  ****       ENCOS_ERROR_DC_BUS_UNDER_VOLTAGE =3,
  61:Inc/axis.hpp  ****       ENCOS_ERROR_ABS_SPI_COM_FAIL=4,
  62:Inc/axis.hpp  ****       ENCOS_ERROR_DC_BUS_OVER_VOLTAGE =6,
  63:Inc/axis.hpp  ****       ENCOS_ERROR_DRV_FAULT=7,
  64:Inc/axis.hpp  ****    };
  65:Inc/axis.hpp  **** 
  66:Inc/axis.hpp  **** 
  67:Inc/axis.hpp  **** 
  68:Inc/axis.hpp  ****     static constexpr uint32_t PARAM_LEN = 128;
  69:Inc/axis.hpp  ****     enum EXT_CONFIG_REG
  70:Inc/axis.hpp  ****     {
  71:Inc/axis.hpp  ****         EXT_CONFIG_REG_ENABLE_NOTCH_FILTER = 0,
  72:Inc/axis.hpp  ****         EXT_CONFIG_REG_ENABLE_DC_BUS_OVER_VOLTAGE_FILTER = 1,
  73:Inc/axis.hpp  ****         EXT_CONFIG_REG_ENABLE_DC_BUS_UNDER_VOLTAGE_FILTER = 2,
  74:Inc/axis.hpp  ****         EXT_CONFIG_REG_ENABLE_OVER_TEMP_FILTER = 3,
  75:Inc/axis.hpp  ****         EXT_CONFIG_REG_ENABLE_CURRENT_LIMIT_VIOLATION_FILTER = 4
  76:Inc/axis.hpp  ****     };
  77:Inc/axis.hpp  **** 
  78:Inc/axis.hpp  **** 
  79:Inc/axis.hpp  **** 
  80:Inc/axis.hpp  ****     static LockinConfig_t default_calibration();
  81:Inc/axis.hpp  ****     static LockinConfig_t default_sensorless();
  82:Inc/axis.hpp  ****     static LockinConfig_t default_lockin();
  83:Inc/axis.hpp  **** 
  84:Inc/axis.hpp  ****     struct Config_t {
 454              		.loc 5 84 12 view .LVU98
 455 003e 9FED697A 		vldr.32	s14, .L32+56
 456              	.LBE103:
 457              	.LBE102:
 458              	.LBB118:
 459              	.LBB79:
 460              		.loc 3 24 12 view .LVU99
 461 0042 0023     		movs	r3, #0
 462              	.LBE79:
ARM GAS  /tmp/ccsEPjy3.s 			page 19


 463              	.LBE118:
 464              	.LBE142:
 465              	.LBE145:
 466              		.loc 1 259 1 view .LVU100
 467 0044 2DED028B 		vpush.64	{d8}
 468              	.LCFI4:
 469              		.cfi_def_cfa_offset 48
 470              		.cfi_offset 80, -48
 471              		.cfi_offset 81, -44
 472              	.LBB146:
 473              	.LBB143:
 474              	.LBB119:
 475              	.LBB80:
 476              		.loc 3 24 12 view .LVU101
 477 0048 D160     		str	r1, [r2, #12]	@ float
 478 004a 5162     		str	r1, [r2, #36]	@ float
 479 004c 1361     		str	r3, [r2, #16]	@ float
 480 004e 5363     		str	r3, [r2, #52]	@ float
 481 0050 6549     		ldr	r1, .L32+60
 482 0052 9460     		str	r4, [r2, #8]	@ float
 483 0054 4FF07A53 		mov	r3, #1048576000
 484 0058 0025     		movs	r5, #0
 485 005a 4FF0804E 		mov	lr, #1073741824
 486              	.LBB72:
 487              	.LBB73:
  22:Inc/controller.hpp **** 
 488              		.loc 3 22 7 view .LVU102
 489 005e 0127     		movs	r7, #1
 490              	.LBE73:
 491              	.LBE72:
 492              		.loc 3 24 12 view .LVU103
 493 0060 F3EE048A 		vmov.f32	s17, #2.0e+1
 494 0064 5061     		str	r0, [r2, #20]	@ float
 495 0066 D363     		str	r3, [r2, #60]	@ float
 496              	.LVL24:
 497              	.LBB76:
 498              	.LBI72:
  22:Inc/controller.hpp **** 
 499              		.loc 3 22 7 is_stmt 1 view .LVU104
 500              	.LBE76:
 501              		.loc 3 24 12 is_stmt 0 view .LVU105
 502 0068 D161     		str	r1, [r2, #28]	@ float
 503              	.LBE80:
 504              	.LBE119:
 505              	.LBB120:
 506              	.LBB94:
  61:Inc/motor.hpp ****         bool pre_calibrated = false; // can be set to true to indicate that all values here are val
 507              		.loc 2 61 12 view .LVU106
 508 006a 604B     		ldr	r3, .L32+64
 509              	.LBE94:
 510              	.LBE120:
 511              	.LBB121:
 512              	.LBB81:
 513              		.loc 3 24 12 view .LVU107
 514 006c C2F85CB2 		str	fp, [r2, #604]
 515 0070 4FF07E51 		mov	r1, #1065353216
 516 0074 FF20     		movs	r0, #255
ARM GAS  /tmp/ccsEPjy3.s 			page 20


 517 0076 4FF48274 		mov	r4, #260
 518 007a 4FF4806B 		mov	fp, #1024
 519 007e 1162     		str	r1, [r2, #32]	@ float
 520 0080 D162     		str	r1, [r2, #44]	@ float
 521              	.LBB77:
 522              	.LBB74:
  22:Inc/controller.hpp **** 
 523              		.loc 3 22 7 view .LVU108
 524 0082 C2F84812 		str	r1, [r2, #584]	@ float
 525 0086 C2F84C12 		str	r1, [r2, #588]	@ float
 526 008a C2F85012 		str	r1, [r2, #592]	@ float
 527              	.LBE74:
 528              	.LBE77:
 529              		.loc 3 24 12 view .LVU109
 530 008e C2F86412 		str	r1, [r2, #612]	@ float
 531 0092 C2F818E0 		str	lr, [r2, #24]	@ float
 532 0096 C2F838E0 		str	lr, [r2, #56]	@ float
 533              	.LBE81:
 534              	.LBE121:
 535              	.LBB122:
 536              	.LBB95:
  61:Inc/motor.hpp ****         bool pre_calibrated = false; // can be set to true to indicate that all values here are val
 537              		.loc 2 61 12 view .LVU110
 538 009a 9FED558A 		vldr.32	s16, .L32+68
 539              	.LBE95:
 540              	.LBE122:
 541              	.LBB123:
 542              	.LBB82:
 543              		.loc 3 24 12 view .LVU111
 544 009e 1480     		strh	r4, [r2]	@ movhi
 545 00a0 C2ED018A 		vstr.32	s17, [r2, #4]
 546              	.LBE82:
 547              	.LBE123:
 548              	.LBB124:
 549              	.LBB112:
 550              		.loc 5 84 12 view .LVU112
 551 00a4 534C     		ldr	r4, .L32+72
 552              	.LBE112:
 553              	.LBE124:
 554              	.LBB125:
 555              	.LBB83:
 556              		.loc 3 24 12 view .LVU113
 557 00a6 82F86002 		strb	r0, [r2, #608]
 558 00aa 82F86802 		strb	r0, [r2, #616]
 559 00ae C2F830B0 		str	fp, [r2, #48]
 560 00b2 82F82850 		strb	r5, [r2, #40]
 561              	.LBB78:
 562              	.LBB75:
  22:Inc/controller.hpp **** 
 563              		.loc 3 22 7 view .LVU114
 564 00b6 1564     		str	r5, [r2, #64]
 565 00b8 A2F84452 		strh	r5, [r2, #580]	@ movhi
 566 00bc 82F85472 		strb	r7, [r2, #596]
 567              	.LVL25:
  22:Inc/controller.hpp **** 
 568              		.loc 3 22 7 view .LVU115
 569              	.LBE75:
ARM GAS  /tmp/ccsEPjy3.s 			page 21


 570              	.LBE78:
 571              	.LBE83:
 572              	.LBE125:
 573              	.LBB126:
 574              	.LBI92:
  61:Inc/motor.hpp ****         bool pre_calibrated = false; // can be set to true to indicate that all values here are val
 575              		.loc 2 61 12 is_stmt 1 view .LVU116
 576              	.LBE126:
 577              	.LBB127:
 578              	.LBB84:
 579              		.loc 3 24 12 is_stmt 0 view .LVU117
 580 00c0 C2F85862 		str	r6, [r2, #600]	@ float
 581              	.LBE84:
 582              	.LBE127:
 583              	.LBB128:
 584              	.LBB96:
  61:Inc/motor.hpp ****         bool pre_calibrated = false; // can be set to true to indicate that all values here are val
 585              		.loc 2 61 12 view .LVU118
 586 00c4 4FF0150B 		mov	fp, #21
 587 00c8 1022     		movs	r2, #16
 588 00ca 1D70     		strb	r5, [r3]
 589 00cc C3F80C80 		str	r8, [r3, #12]	@ float
 590 00d0 1E61     		str	r6, [r3, #16]	@ float
 591 00d2 03F2244A 		addw	r10, r3, #1060
 592 00d6 C3E901B2 		strd	fp, r2, [r3, #4]
 593 00da 03F58569 		add	r9, r3, #1064
 594 00de 4FF08242 		mov	r2, #1090519040
 595 00e2 D965     		str	r1, [r3, #92]	@ float
 596 00e4 C3F814E0 		str	lr, [r3, #20]	@ float
 597 00e8 C3ED063A 		vstr.32	s7, [r3, #24]
 598 00ec 83ED074A 		vstr.32	s8, [r3, #28]
 599 00f0 C3ED084A 		vstr.32	s9, [r3, #32]
 600 00f4 83ED0F5A 		vstr.32	s10, [r3, #60]
 601 00f8 C3ED115A 		vstr.32	s11, [r3, #68]
 602 00fc 83ED126A 		vstr.32	s12, [r3, #72]
 603 0100 C3ED0D7A 		vstr.32	s15, [r3, #52]
 604              	.LBE96:
 605              	.LBE128:
 606              	.LBB129:
 607              	.LBB113:
 608              		.loc 5 84 12 view .LVU119
 609 0104 2161     		str	r1, [r4, #16]	@ float
 610              	.LBE113:
 611              	.LBE129:
 612              	.LBB130:
 613              	.LBB97:
  61:Inc/motor.hpp ****         bool pre_calibrated = false; // can be set to true to indicate that all values here are val
 614              		.loc 2 61 12 view .LVU120
 615 0106 8AED003A 		vstr.32	s6, [r10]
 616 010a C9ED007A 		vstr.32	s15, [r9]
 617              	.LBE97:
 618              	.LBE130:
 619              	.LBB131:
 620              	.LBB89:
 621              		.loc 4 65 12 view .LVU121
 622 010e CCED0A6A 		vstr.32	s13, [ip, #40]
 623              	.LBE89:
ARM GAS  /tmp/ccsEPjy3.s 			page 22


 624              	.LBE131:
 625              	.LBB132:
 626              	.LBB114:
 627              		.loc 5 84 12 view .LVU122
 628 0112 84ED027A 		vstr.32	s14, [r4, #8]
 629              	.LBE114:
 630              	.LBE132:
 631              	.LBB133:
 632              	.LBB98:
  61:Inc/motor.hpp ****         bool pre_calibrated = false; // can be set to true to indicate that all values here are val
 633              		.loc 2 61 12 view .LVU123
 634 0116 83ED108A 		vstr.32	s16, [r3, #64]
 635              	.LBE98:
 636              	.LBE133:
 637              	.LBB134:
 638              	.LBB90:
 639              		.loc 4 65 12 view .LVU124
 640 011a CCF82480 		str	r8, [ip, #36]	@ float
 641 011e 8CF82C70 		strb	r7, [ip, #44]
 642              	.LBE90:
 643              	.LBE134:
 644              	.LBB135:
 645              	.LBB99:
  61:Inc/motor.hpp ****         bool pre_calibrated = false; // can be set to true to indicate that all values here are val
 646              		.loc 2 61 12 view .LVU125
 647 0122 5F62     		str	r7, [r3, #36]
 648 0124 83F82850 		strb	r5, [r3, #40]
 649 0128 DE62     		str	r6, [r3, #44]	@ float
 650 012a C3F83880 		str	r8, [r3, #56]	@ float
 651 012e DE64     		str	r6, [r3, #76]	@ float
 652 0130 1E65     		str	r6, [r3, #80]	@ float
 653 0132 83F85450 		strb	r5, [r3, #84]
 654 0136 9E65     		str	r6, [r3, #88]	@ float
 655 0138 A3F82054 		strh	r5, [r3, #1056]	@ movhi
 656 013c C3F82C54 		str	r5, [r3, #1068]
 657              	.LVL26:
  61:Inc/motor.hpp ****         bool pre_calibrated = false; // can be set to true to indicate that all values here are val
 658              		.loc 2 61 12 view .LVU126
 659              	.LBE99:
 660              	.LBE135:
 661              	.LBB136:
 662              	.LBI86:
 663              		.loc 4 65 12 is_stmt 1 view .LVU127
 664              		.loc 4 65 12 is_stmt 0 view .LVU128
 665              	.LBE136:
 666              	.LBB137:
 667              	.LBI102:
 668              		.loc 5 84 12 is_stmt 1 view .LVU129
 669              	.LBB115:
 670 0140 C4E90055 		strd	r5, r5, [r4]
 671 0144 2573     		strb	r5, [r4, #12]
 672 0146 2775     		strb	r7, [r4, #20]
 673              	.LBE115:
 674              	.LBE137:
 675              	.LBB138:
 676              	.LBB100:
  61:Inc/motor.hpp ****         bool pre_calibrated = false; // can be set to true to indicate that all values here are val
ARM GAS  /tmp/ccsEPjy3.s 			page 23


 677              		.loc 2 61 12 is_stmt 0 view .LVU130
 678 0148 1A63     		str	r2, [r3, #48]	@ float
 679              	.LBE100:
 680              	.LBE138:
 681              	.LBB139:
 682              	.LBB91:
 683              		.loc 4 65 12 view .LVU131
 684 014a 0423     		movs	r3, #4
 685 014c ACF82030 		strh	r3, [ip, #32]	@ movhi
 686              	.LBE91:
 687              	.LBE139:
 688              	.LBB140:
 689              	.LBB116:
 690              		.loc 5 84 12 view .LVU132
 691 0150 04F11C00 		add	r0, r4, #28
 692 0154 C4F81650 		str	r5, [r4, #22]	@ unaligned
 693 0158 FFF7FEFF 		bl	_ZN4Axis19default_calibrationEv
 694              	.LVL27:
 695 015c 04F13800 		add	r0, r4, #56
 696 0160 FFF7FEFF 		bl	_ZN4Axis18default_sensorlessEv
 697              	.LVL28:
 698              	.LBB104:
 699              	.LBI104:
  24:Inc/axis.hpp  ****         float current = 10.0f;           // [A]
 700              		.loc 5 24 12 is_stmt 1 view .LVU133
 701              	.LBB105:
 702 0164 C4ED188A 		vstr.32	s17, [r4, #96]
 703 0168 84ED1A8A 		vstr.32	s16, [r4, #104]
 704              	.LBE105:
 705              	.LBE104:
 706              	.LBE116:
 707              	.LBE140:
 708              	.LBE143:
 709              	.LBE146:
 710              		.loc 1 259 1 is_stmt 0 view .LVU134
 711 016c BDEC028B 		vldm	sp!, {d8}
 712              	.LCFI5:
 713              		.cfi_restore 80
 714              		.cfi_restore 81
 715              		.cfi_def_cfa_offset 40
 716              	.LBB147:
 717              	.LBB144:
 718              	.LBB141:
 719              	.LBB117:
 720              		.loc 5 84 12 view .LVU135
 721 0170 6423     		movs	r3, #100
 722 0172 214A     		ldr	r2, .L32+76
 723 0174 A367     		str	r3, [r4, #120]
 724 0176 214B     		ldr	r3, .L32+80
 725              	.LBB109:
 726              	.LBB106:
  24:Inc/axis.hpp  ****         float current = 10.0f;           // [A]
 727              		.loc 5 24 12 view .LVU136
 728 0178 2149     		ldr	r1, .L32+84
 729              	.LBE106:
 730              	.LBE109:
 731              		.loc 5 84 12 view .LVU137
ARM GAS  /tmp/ccsEPjy3.s 			page 24


 732 017a C4F88022 		str	r2, [r4, #640]	@ float
 733 017e C4F88432 		str	r3, [r4, #644]	@ float
 734              	.LBB110:
 735              	.LBB107:
  24:Inc/axis.hpp  ****         float current = 10.0f;           // [A]
 736              		.loc 5 24 12 view .LVU138
 737 0182 204A     		ldr	r2, .L32+88
 738 0184 204B     		ldr	r3, .L32+92
 739 0186 6665     		str	r6, [r4, #84]	@ float
 740 0188 A4F86C50 		strh	r5, [r4, #108]	@ movhi
 741 018c 84F86E50 		strb	r5, [r4, #110]
 742              	.LVL29:
  24:Inc/axis.hpp  ****         float current = 10.0f;           // [A]
 743              		.loc 5 24 12 view .LVU139
 744              	.LBE107:
 745              	.LBE110:
 746              		.loc 5 84 12 view .LVU140
 747 0190 2767     		str	r7, [r4, #112]
 748 0192 84F87450 		strb	r5, [r4, #116]
 749 0196 C4F88882 		str	r8, [r4, #648]	@ float
 750 019a 84F88C52 		strb	r5, [r4, #652]
 751 019e C4F89052 		str	r5, [r4, #656]
 752              	.LVL30:
 753              	.LBB111:
 754              	.LBB108:
  24:Inc/axis.hpp  ****         float current = 10.0f;           // [A]
 755              		.loc 5 24 12 view .LVU141
 756 01a2 A165     		str	r1, [r4, #88]	@ float
 757 01a4 E265     		str	r2, [r4, #92]	@ float
 758 01a6 6366     		str	r3, [r4, #100]	@ float
 759              	.LBE108:
 760              	.LBE111:
 761              	.LBE117:
 762              	.LBE141:
 763              	.LBE144:
 764              	.LBE147:
 765              		.loc 1 259 1 view .LVU142
 766 01a8 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 767              	.L33:
 768              		.align	2
 769              	.L32:
 770 01ac 00000000 		.word	.LANCHOR2
 771 01b0 0AD7233C 		.word	1008981770
 772 01b4 ABAA2A3E 		.word	1042983595
 773 01b8 ABAAAA3E 		.word	1051372203
 774 01bc 00002041 		.word	1092616192
 775 01c0 0000807F 		.word	2139095040
 776 01c4 CDAF6638 		.word	946253773
 777 01c8 295C8F3D 		.word	1032805417
 778 01cc 0E2DB23D 		.word	1035087118
 779 01d0 00803B45 		.word	1161527296
 780 01d4 0000F042 		.word	1123024896
 781 01d8 C74B6B41 		.word	1097550791
 782 01dc 000080FF 		.word	-8388608
 783 01e0 0000A042 		.word	1117782016
 784 01e4 0000803A 		.word	981467136
 785 01e8 9A99993F 		.word	1067030938
ARM GAS  /tmp/ccsEPjy3.s 			page 25


 786 01ec 00000000 		.word	.LANCHOR3
 787 01f0 0000C842 		.word	1120403456
 788 01f4 00000000 		.word	.LANCHOR5
 789 01f8 00004841 		.word	1095237632
 790 01fc 00009041 		.word	1099956224
 791 0200 CDCCCC3E 		.word	1053609165
 792 0204 DB0F4940 		.word	1078530011
 793 0208 00002042 		.word	1109393408
 794 020c 00010101 		.word	16843008
 795 0210 00000000 		.word	.LANCHOR4
 796 0214 00007042 		.word	1114636288
 797              		.cfi_endproc
 798              	.LFE6310:
 800              		.section	.init_array,"aw",%init_array
 801              		.align	2
 802 0000 00000000 		.word	_GLOBAL__sub_I_board_config(target1)
 803              		.global	motor_runtime
 804              		.global	motor_params
 805              		.global	odCAN
 806              		.global	axes
 807              		.global	axis_configs
 808              		.global	motor_thermistor_configs
 809              		.global	fet_thermistor_configs
 810              		.global	motor_configs
 811              		.global	controller_configs
 812              		.global	encoder_configs
 813              		.global	can_config
 814              		.global	current_meas_period
 815              		.global	system_stats
 816              		.global	board_config
 817              		.section	.bss.axes,"aw",%nobits
 818              		.align	2
 819              		.set	.LANCHOR0,. + 0
 822              	axes:
 823 0000 00000000 		.space	4
 824              		.section	.bss.axis_configs,"aw",%nobits
 825              		.align	2
 826              		.set	.LANCHOR5,. + 0
 829              	axis_configs:
 830 0000 00000000 		.space	660
 830      00000000 
 830      00000000 
 830      00000000 
 830      00000000 
 831              		.section	.bss.controller_configs,"aw",%nobits
 832              		.align	2
 833              		.set	.LANCHOR2,. + 0
 836              	controller_configs:
 837 0000 00000000 		.space	624
 837      00000000 
 837      00000000 
 837      00000000 
 837      00000000 
 838              		.section	.bss.motor_configs,"aw",%nobits
 839              		.align	2
 840              		.set	.LANCHOR3,. + 0
 843              	motor_configs:
ARM GAS  /tmp/ccsEPjy3.s 			page 26


 844 0000 00000000 		.space	1072
 844      00000000 
 844      00000000 
 844      00000000 
 844      00000000 
 845              		.section	.bss.motor_params,"aw",%nobits
 846              		.align	2
 849              	motor_params:
 850 0000 00000000 		.space	48
 850      00000000 
 850      00000000 
 850      00000000 
 850      00000000 
 851              		.section	.bss.motor_runtime,"aw",%nobits
 852              		.align	2
 855              	motor_runtime:
 856 0000 00000000 		.space	32
 856      00000000 
 856      00000000 
 856      00000000 
 856      00000000 
 857              		.section	.bss.motor_thermistor_configs,"aw",%nobits
 858              		.align	2
 859              		.set	.LANCHOR4,. + 0
 862              	motor_thermistor_configs:
 863 0000 00000000 		.space	52
 863      00000000 
 863      00000000 
 863      00000000 
 863      00000000 
 864              		.section	.bss.odCAN,"aw",%nobits
 865              		.align	2
 868              	odCAN:
 869 0000 00000000 		.space	4
 870              		.section	.bss.system_stats,"aw",%nobits
 871              		.align	2
 872              		.set	.LANCHOR1,. + 0
 875              	system_stats:
 876 0000 00000000 		.space	76
 876      00000000 
 876      00000000 
 876      00000000 
 876      00000000 
 877              		.section	.data.board_config,"aw"
 878              		.align	2
 881              	board_config:
 882 0000 00       		.byte	0
 883 0001 01       		.byte	1
 884 0002 00       		.byte	0
 885 0003 01       		.byte	1
 886 0004 00000000 		.word	0
 887 0008 D7A3F03E 		.word	1055957975
 888 000c 00000041 		.word	1090519040
 889 0010 67668642 		.word	1116104295
 890 0014 00       		.byte	0
 891 0015 000000   		.space	3
 892 0018 15AE6F42 		.word	1114615317
ARM GAS  /tmp/ccsEPjy3.s 			page 27


 893 001c 15AE6F42 		.word	1114615317
 894 0020 0000807F 		.word	2139095040
 895 0024 BD3786B5 		.word	-1249495107
 896 0028 00C20100 		.word	115200
 897              		.section	.data.can_config,"aw"
 898              		.align	2
 901              	can_config:
 902 0000 40420F00 		.word	1000000
 903 0004 01       		.byte	1
 904 0005 000000   		.space	3
 905              		.section	.data.current_meas_period,"aw"
 906              		.align	2
 909              	current_meas_period:
 910 0000 17B75138 		.word	944879383
 911              		.section	.data.encoder_configs,"aw"
 912              		.align	2
 915              	encoder_configs:
 916 0000 0301     		.short	259
 917 0002 00       		.byte	0
 918 0003 00       		.byte	0
 919 0004 01       		.byte	1
 920 0005 01       		.byte	1
 921 0006 0000     		.space	2
 922 0008 00000100 		.word	65536
 923 000c 00000000 		.word	0
 924 0010 00000000 		.word	0
 925 0014 01       		.byte	1
 926 0015 000000   		.space	3
 927 0018 6F12033B 		.word	990057071
 928 001c DB0F4942 		.word	1112084443
 929 0020 DB0F4941 		.word	1095307227
 930 0024 00007A45 		.word	1165623296
 931 0028 00       		.byte	0
 932 0029 00       		.byte	0
 933 002a 00       		.byte	0
 934 002b 00       		.space	1
 935 002c 0100     		.short	1
 936 002e 0300     		.short	3
 937 0030 0400     		.short	4
 938 0032 0200     		.short	2
 939 0034 00000400 		.word	262144
 940 0038 00000000 		.word	0
 941 003c 01000000 		.word	1
 942 0040 00000000 		.word	0
 943              		.section	.data.fet_thermistor_configs,"aw"
 944              		.align	2
 947              	fet_thermistor_configs:
 948 0000 0000C842 		.word	1120403456
 949 0004 0000F042 		.word	1123024896
 950 0008 01       		.byte	1
 951 0009 000000   		.space	3
 952              		.text
 953              	.Letext0:
 954              		.file 6 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/lib/gcc/arm-none-eabi/10.2.1/include/stddef
 955              		.file 7 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_type
 956              		.file 8 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 957              		.file 9 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdint.h"
ARM GAS  /tmp/ccsEPjy3.s 			page 28


 958              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 959              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 960              		.file 12 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 961              		.file 13 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g4xx.h"
 962              		.file 14 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 963              		.file 15 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
 964              		.file 16 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_fdcan.h"
 965              		.file 17 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_spi.h"
 966              		.file 18 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_tim.h"
 967              		.file 19 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/type_trai
 968              		.file 20 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-
 969              		.file 21 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/debug/deb
 970              		.file 22 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdlib"
 971              		.file 23 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/algo
 972              		.file 24 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/exce
 973              		.file 25 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_
 974              		.file 26 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 975              		.file 27 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant"
 976              		.file 28 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/enab
 977              		.file 29 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional"
 978              		.file 30 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/functiona
 979              		.file 31 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstring"
 980              		.file 32 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cwchar"
 981              		.file 33 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/clocale"
 982              		.file 34 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdint"
 983              		.file 35 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/string_vi
 984              		.file 36 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/basi
 985              		.file 37 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdio"
 986              		.file 38 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath"
 987              		.file 39 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_
 988              		.file 40 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 989              		.file 41 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array"
 990              		.file 42 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 991              		.file 43 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/refw
 992              		.file 44 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pars
 993              		.file 45 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pred
 994              		.file 46 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_types.h"
 995              		.file 47 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/reent.h"
 996              		.file 48 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/lock.h"
 997              		.file 49 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdlib.h"
 998              		.file 50 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/pstl/exec
 999              		.file 51 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/string.h"
 1000              		.file 52 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/lib/gcc/arm-none-eabi/10.2.1/include/stdar
 1001              		.file 53 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/wchar.h"
 1002              		.file 54 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/locale.h"
 1003              		.file 55 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdio.h"
 1004              		.file 56 "Inc/can_helpers.hpp"
 1005              		.file 57 "Inc/interfaces.hpp"
 1006              		.file 58 "Inc/interface_can.hpp"
 1007              		.file 59 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 1008              		.file 60 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 1009              		.file 61 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 1010              		.file 62 "Inc/mc_type.h"
 1011              		.file 63 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/math.h"
 1012              		.file 64 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/math.h"
 1013              		.file 65 "Inc/main.h"
 1014              		.file 66 "Inc/task_timer.hpp"
ARM GAS  /tmp/ccsEPjy3.s 			page 29


 1015              		.file 67 "Inc/component.hpp"
 1016              		.file 68 "Inc/utils.hpp"
 1017              		.file 69 "Inc/encoder.hpp"
 1018              		.file 70 "<built-in>"
 1019              		.file 71 "Inc/main_.hpp"
 1020              		.file 72 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/stdlib.h"
 1021              		.file 73 "Inc/low_level.h"
ARM GAS  /tmp/ccsEPjy3.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main_.cpp
     /tmp/ccsEPjy3.s:18     .text._Z18save_configurationv:0000000000000000 $t
     /tmp/ccsEPjy3.s:27     .text._Z18save_configurationv:0000000000000000 _Z18save_configurationv
     /tmp/ccsEPjy3.s:48     .text.unlikely.load_configuration:0000000000000000 load_configuration
     /tmp/ccsEPjy3.s:60     .text._Z19erase_configurationv:0000000000000000 $t
     /tmp/ccsEPjy3.s:68     .text._Z19erase_configurationv:0000000000000000 _Z19erase_configurationv
     /tmp/ccsEPjy3.s:86     .text.unlikely.construct_objects:0000000000000000 construct_objects
     /tmp/ccsEPjy3.s:98     .text.vApplicationStackOverflowHook:0000000000000000 $t
     /tmp/ccsEPjy3.s:106    .text.vApplicationStackOverflowHook:0000000000000000 vApplicationStackOverflowHook
     /tmp/ccsEPjy3.s:142    .text.vApplicationStackOverflowHook:0000000000000014 $d
     /tmp/ccsEPjy3.s:147    .text.vApplicationIdleHook:0000000000000000 $t
     /tmp/ccsEPjy3.s:155    .text.vApplicationIdleHook:0000000000000000 vApplicationIdleHook
     /tmp/ccsEPjy3.s:217    .text.vApplicationIdleHook:000000000000002c $d
     /tmp/ccsEPjy3.s:223    .text.odrive_main:0000000000000000 $t
     /tmp/ccsEPjy3.s:231    .text.odrive_main:0000000000000000 odrive_main
     /tmp/ccsEPjy3.s:366    .text.odrive_main:0000000000000078 $d
     /tmp/ccsEPjy3.s:372    .text.startup._GLOBAL__sub_I_board_config:0000000000000000 $t
     /tmp/ccsEPjy3.s:379    .text.startup._GLOBAL__sub_I_board_config:0000000000000000 _GLOBAL__sub_I_board_config
     /tmp/ccsEPjy3.s:770    .text.startup._GLOBAL__sub_I_board_config:00000000000001ac $d
     /tmp/ccsEPjy3.s:801    .init_array:0000000000000000 $d
     /tmp/ccsEPjy3.s:855    .bss.motor_runtime:0000000000000000 motor_runtime
     /tmp/ccsEPjy3.s:849    .bss.motor_params:0000000000000000 motor_params
     /tmp/ccsEPjy3.s:868    .bss.odCAN:0000000000000000 odCAN
     /tmp/ccsEPjy3.s:822    .bss.axes:0000000000000000 axes
     /tmp/ccsEPjy3.s:829    .bss.axis_configs:0000000000000000 axis_configs
     /tmp/ccsEPjy3.s:862    .bss.motor_thermistor_configs:0000000000000000 motor_thermistor_configs
     /tmp/ccsEPjy3.s:947    .data.fet_thermistor_configs:0000000000000000 fet_thermistor_configs
     /tmp/ccsEPjy3.s:843    .bss.motor_configs:0000000000000000 motor_configs
     /tmp/ccsEPjy3.s:836    .bss.controller_configs:0000000000000000 controller_configs
     /tmp/ccsEPjy3.s:915    .data.encoder_configs:0000000000000000 encoder_configs
     /tmp/ccsEPjy3.s:901    .data.can_config:0000000000000000 can_config
     /tmp/ccsEPjy3.s:909    .data.current_meas_period:0000000000000000 current_meas_period
     /tmp/ccsEPjy3.s:875    .bss.system_stats:0000000000000000 system_stats
     /tmp/ccsEPjy3.s:881    .data.board_config:0000000000000000 board_config
     /tmp/ccsEPjy3.s:818    .bss.axes:0000000000000000 $d
     /tmp/ccsEPjy3.s:825    .bss.axis_configs:0000000000000000 $d
     /tmp/ccsEPjy3.s:832    .bss.controller_configs:0000000000000000 $d
     /tmp/ccsEPjy3.s:839    .bss.motor_configs:0000000000000000 $d
     /tmp/ccsEPjy3.s:846    .bss.motor_params:0000000000000000 $d
     /tmp/ccsEPjy3.s:852    .bss.motor_runtime:0000000000000000 $d
     /tmp/ccsEPjy3.s:858    .bss.motor_thermistor_configs:0000000000000000 $d
     /tmp/ccsEPjy3.s:865    .bss.odCAN:0000000000000000 $d
     /tmp/ccsEPjy3.s:871    .bss.system_stats:0000000000000000 $d
     /tmp/ccsEPjy3.s:878    .data.board_config:0000000000000000 $d
     /tmp/ccsEPjy3.s:898    .data.can_config:0000000000000000 $d
     /tmp/ccsEPjy3.s:906    .data.current_meas_period:0000000000000000 $d
     /tmp/ccsEPjy3.s:912    .data.encoder_configs:0000000000000000 $d
     /tmp/ccsEPjy3.s:944    .data.fet_thermistor_configs:0000000000000000 $d

UNDEFINED SYMBOLS
safety_critical_disarm_motor_pwm
safety_critical_disarm_brake_resistor
_ZN24ThermistorCurrentLimiter6updateEv
_ZN4Axis9do_checksEv
start_general_purpose_adc
pwm_in_init
ARM GAS  /tmp/ccsEPjy3.s 			page 31


_ZN5Motor13DRV8301_setupEv
_ZN7Encoder5setupEv
_ZN4Axis5setupEv
start_adc_pwm
osDelay
_ZN4Axis12start_threadEv
start_analog_thread
_ZN7Encoder19abs_spi_cs_pin_initEv
_ZN4Axis19default_calibrationEv
_ZN4Axis18default_sensorlessEv
