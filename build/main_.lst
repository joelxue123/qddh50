ARM GAS  /tmp/ccIKyBPQ.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"main_.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._ZN31OnboardThermistorCurrentLimiterD2Ev,"axG",%progbits,_ZN31OnboardThermistorCurr
  18              		.align	1
  19              		.weak	_ZN31OnboardThermistorCurrentLimiterD2Ev
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	_ZN31OnboardThermistorCurrentLimiterD2Ev:
  27              	.LVL0:
  28              	.LFB6440:
  29              		.file 1 "Inc/thermistor.hpp"
   1:Inc/thermistor.hpp **** #ifndef __THERMISTOR_HPP
   2:Inc/thermistor.hpp **** #define __THERMISTOR_HPP
   3:Inc/thermistor.hpp **** 
   4:Inc/thermistor.hpp **** #include "main.h"
   5:Inc/thermistor.hpp **** #include "interfaces.hpp"
   6:Inc/thermistor.hpp **** #include "current_limiter.hpp"
   7:Inc/thermistor.hpp **** 
   8:Inc/thermistor.hpp **** #define THERMISTOR_CURRENT_LIMITER_MAX_TEMP 150.0f
   9:Inc/thermistor.hpp **** #define THERMISTOR_CURRENT_LIMITER_MIN_TEMP -40.0f
  10:Inc/thermistor.hpp **** 
  11:Inc/thermistor.hpp **** #define THERMISTOR_CURRENT_LIMITER_MAX_CURRENT 3.0f
  12:Inc/thermistor.hpp **** 
  13:Inc/thermistor.hpp **** class Axis;
  14:Inc/thermistor.hpp **** 
  15:Inc/thermistor.hpp **** 
  16:Inc/thermistor.hpp **** class ThermistorCurrentLimiter : public CurrentLimiter, public ODriveIntf::ThermistorCurrentLimiter
  17:Inc/thermistor.hpp **** public:
  18:Inc/thermistor.hpp ****     virtual ~ThermistorCurrentLimiter() = default;
  19:Inc/thermistor.hpp **** 
  20:Inc/thermistor.hpp ****     ThermistorCurrentLimiter(uint16_t adc_channel,
  21:Inc/thermistor.hpp ****                              const float* const coefficients,
  22:Inc/thermistor.hpp ****                              const float* const aux_coefficients,
  23:Inc/thermistor.hpp ****                              size_t num_coeffs,
  24:Inc/thermistor.hpp ****                              const float& temp_limit_lower,
  25:Inc/thermistor.hpp ****                              const float& temp_limit_upper,
  26:Inc/thermistor.hpp ****                              const bool& enabled);
  27:Inc/thermistor.hpp **** 
  28:Inc/thermistor.hpp ****     void update();
  29:Inc/thermistor.hpp ****     bool do_checks();
ARM GAS  /tmp/ccIKyBPQ.s 			page 2


  30:Inc/thermistor.hpp ****     float get_current_limit(float base_current_lim) const override;
  31:Inc/thermistor.hpp **** 
  32:Inc/thermistor.hpp ****     uint16_t adc_channel_;
  33:Inc/thermistor.hpp ****     const float* const coefficients_;
  34:Inc/thermistor.hpp ****     const float* const aux_coefficients_;
  35:Inc/thermistor.hpp ****     const size_t num_coeffs_;
  36:Inc/thermistor.hpp ****     float temperature_;
  37:Inc/thermistor.hpp ****     int32_t temperature_int_;
  38:Inc/thermistor.hpp ****     float aux_temperature_;
  39:Inc/thermistor.hpp ****     int32_t aux_temperature_int_;
  40:Inc/thermistor.hpp ****     const float& temp_limit_lower_;
  41:Inc/thermistor.hpp ****     const float& temp_limit_upper_;
  42:Inc/thermistor.hpp ****     const bool& enabled_;
  43:Inc/thermistor.hpp ****     Error error_;
  44:Inc/thermistor.hpp ****     Axis* axis_ = nullptr; // set by Axis constructor
  45:Inc/thermistor.hpp **** };
  46:Inc/thermistor.hpp **** 
  47:Inc/thermistor.hpp **** class OnboardThermistorCurrentLimiter : public ThermistorCurrentLimiter, public ODriveIntf::Onboard
  48:Inc/thermistor.hpp **** public:
  49:Inc/thermistor.hpp ****     struct Config_t {
  50:Inc/thermistor.hpp ****         float temp_limit_lower = 100;
  51:Inc/thermistor.hpp ****         float temp_limit_upper = 120;
  52:Inc/thermistor.hpp ****         bool enabled = true;
  53:Inc/thermistor.hpp ****     };
  54:Inc/thermistor.hpp **** 
  55:Inc/thermistor.hpp ****     virtual ~OnboardThermistorCurrentLimiter() = default;
  30              		.loc 1 55 13 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.LBB59:
  36              	.LBI59:
  18:Inc/thermistor.hpp **** 
  37              		.loc 1 18 13 view .LVU1
  38              	.LBB60:
  39              	.LBI60:
  40              		.file 2 "Inc/current_limiter.hpp"
   1:Inc/current_limiter.hpp **** #ifndef __CURRENT_LIMITER_HPP
   2:Inc/current_limiter.hpp **** #define __CURRENT_LIMITER_HPP
   3:Inc/current_limiter.hpp **** 
   4:Inc/current_limiter.hpp **** 
   5:Inc/current_limiter.hpp **** 
   6:Inc/current_limiter.hpp **** class CurrentLimiter {
   7:Inc/current_limiter.hpp **** public:
   8:Inc/current_limiter.hpp ****     virtual ~CurrentLimiter() = default;
  41              		.loc 2 8 13 view .LVU2
  42              		.loc 2 8 13 is_stmt 0 view .LVU3
  43              	.LBE60:
  44              	.LBE59:
  45              		.loc 1 55 13 view .LVU4
  46 0000 7047     		bx	lr
  47              		.cfi_endproc
  48              	.LFE6440:
  50              		.weak	_ZN31OnboardThermistorCurrentLimiterD1Ev
  51              		.thumb_set _ZN31OnboardThermistorCurrentLimiterD1Ev,_ZN31OnboardThermistorCurrentLimiterD2Ev
  52              		.section	.text._ZN32OffboardThermistorCurrentLimiterD2Ev,"axG",%progbits,_ZN32OffboardThermistorCu
ARM GAS  /tmp/ccIKyBPQ.s 			page 3


  53              		.align	1
  54              		.weak	_ZN32OffboardThermistorCurrentLimiterD2Ev
  55              		.syntax unified
  56              		.thumb
  57              		.thumb_func
  58              		.fpu fpv4-sp-d16
  60              	_ZN32OffboardThermistorCurrentLimiterD2Ev:
  61              	.LVL1:
  62              	.LFB6444:
  56:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
  57:Inc/thermistor.hpp **** 
  58:Inc/thermistor.hpp ****     Config_t& config_;
  59:Inc/thermistor.hpp **** };
  60:Inc/thermistor.hpp **** 
  61:Inc/thermistor.hpp **** class OffboardThermistorCurrentLimiter : public ThermistorCurrentLimiter, public ODriveIntf::Offboa
  62:Inc/thermistor.hpp **** public:
  63:Inc/thermistor.hpp ****     static const size_t num_coeffs_ = 4;
  64:Inc/thermistor.hpp **** 
  65:Inc/thermistor.hpp ****     struct Config_t {
  66:Inc/thermistor.hpp ****         float thermistor_poly_coeffs[num_coeffs_];
  67:Inc/thermistor.hpp ****         float thermistor_poly_coeffs2[num_coeffs_];
  68:Inc/thermistor.hpp ****         uint16_t gpio_pin = 4;
  69:Inc/thermistor.hpp ****         float temp_limit_lower = 60;
  70:Inc/thermistor.hpp ****         float temp_limit_upper = 80;
  71:Inc/thermistor.hpp ****         bool enabled = true;
  72:Inc/thermistor.hpp **** 
  73:Inc/thermistor.hpp ****         // custom setters
  74:Inc/thermistor.hpp ****         OffboardThermistorCurrentLimiter* parent;
  75:Inc/thermistor.hpp ****         void set_gpio_pin(uint16_t value) { gpio_pin = value; parent->decode_pin(); }
  76:Inc/thermistor.hpp ****     };
  77:Inc/thermistor.hpp **** 
  78:Inc/thermistor.hpp ****     virtual ~OffboardThermistorCurrentLimiter() = default;
  63              		.loc 1 78 13 is_stmt 1 view -0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              		@ link register save eliminated.
  68              	.LBB61:
  69              	.LBI61:
  18:Inc/thermistor.hpp **** 
  70              		.loc 1 18 13 view .LVU6
  71              	.LBB62:
  72              	.LBI62:
  73              		.loc 2 8 13 view .LVU7
  74              		.loc 2 8 13 is_stmt 0 view .LVU8
  75              	.LBE62:
  76              	.LBE61:
  77              		.loc 1 78 13 view .LVU9
  78 0000 7047     		bx	lr
  79              		.cfi_endproc
  80              	.LFE6444:
  82              		.weak	_ZN32OffboardThermistorCurrentLimiterD1Ev
  83              		.thumb_set _ZN32OffboardThermistorCurrentLimiterD1Ev,_ZN32OffboardThermistorCurrentLimiterD2Ev
  84              		.section	.text._Z18save_configurationv,"ax",%progbits
  85              		.align	1
  86              		.global	_Z18save_configurationv
  87              		.syntax unified
ARM GAS  /tmp/ccIKyBPQ.s 			page 4


  88              		.thumb
  89              		.thumb_func
  90              		.fpu fpv4-sp-d16
  92              	_Z18save_configurationv:
  93              	.LFB5792:
  94              		.file 3 "Src/main_.cpp"
   1:Src/main_.cpp **** 
   2:Src/main_.cpp **** #define __MAIN_CPP__
   3:Src/main_.cpp **** 
   4:Src/main_.cpp **** #include "freertos_vars.h"
   5:Src/main_.cpp **** #include <interface_can.hpp>
   6:Src/main_.cpp **** 
   7:Src/main_.cpp **** #include "main_.hpp"
   8:Src/main_.cpp **** #include "low_level.h"
   9:Src/main_.cpp **** 
  10:Src/main_.cpp **** BoardConfig_t board_config;
  11:Src/main_.cpp **** SystemStats_t system_stats;
  12:Src/main_.cpp **** 
  13:Src/main_.cpp **** 
  14:Src/main_.cpp **** const float fet_thermistor_poly_coeffs[] =
  15:Src/main_.cpp ****     {257.61f, -324.08f,  258.34f, -23.12f};  //3300 Ohm
  16:Src/main_.cpp **** const float fet_thermistor_poly_coeffs2[] =
  17:Src/main_.cpp ****     {432.91f,-634.23f, 383.988f, -62.37f};  //100000 Ohm
  18:Src/main_.cpp **** const size_t fet_thermistor_num_coeffs = sizeof(fet_thermistor_poly_coeffs)/sizeof(fet_thermistor_p
  19:Src/main_.cpp **** 
  20:Src/main_.cpp **** 
  21:Src/main_.cpp **** float current_meas_period = CURRENT_MEAS_PERIOD;
  22:Src/main_.cpp **** ODriveCAN::Config_t can_config;
  23:Src/main_.cpp **** Encoder::Config_t encoder_configs;
  24:Src/main_.cpp **** Controller::Config_t controller_configs;
  25:Src/main_.cpp **** Motor::Config_t motor_configs;
  26:Src/main_.cpp **** OnboardThermistorCurrentLimiter::Config_t fet_thermistor_configs;
  27:Src/main_.cpp **** OffboardThermistorCurrentLimiter::Config_t motor_thermistor_configs;
  28:Src/main_.cpp **** Axis::Config_t axis_configs;
  29:Src/main_.cpp **** 
  30:Src/main_.cpp **** EncoderHardwareConfig_t encoder_hardware_config;
  31:Src/main_.cpp **** MotorHardwareConfig_t motor_hardware_config;
  32:Src/main_.cpp **** ThermistorHardwareConfig_t thermistor_hardware_config = {
  33:Src/main_.cpp ****     .coeffs = fet_thermistor_poly_coeffs,
  34:Src/main_.cpp ****     .aux_coefficients = fet_thermistor_poly_coeffs2,
  35:Src/main_.cpp **** };
  36:Src/main_.cpp **** 
  37:Src/main_.cpp **** 
  38:Src/main_.cpp ****  Encoder encoder(encoder_hardware_config,encoder_configs);
  39:Src/main_.cpp ****  Controller controller(controller_configs);
  40:Src/main_.cpp **** 
  41:Src/main_.cpp ****  OnboardThermistorCurrentLimiter fet_thermistor(thermistor_hardware_config,fet_thermistor_configs);
  42:Src/main_.cpp ****  OffboardThermistorCurrentLimiter motor_thermistor(motor_thermistor_configs);
  43:Src/main_.cpp **** 
  44:Src/main_.cpp ****  Motor motor(motor_hardware_config,motor_configs);
  45:Src/main_.cpp **** 
  46:Src/main_.cpp **** // 初始化 Axis 对象
  47:Src/main_.cpp ****  Axis axis(0, axis_configs, encoder, controller, 
  48:Src/main_.cpp ****                     fet_thermistor, motor_thermistor, motor);
  49:Src/main_.cpp **** 
  50:Src/main_.cpp **** 
  51:Src/main_.cpp **** ODriveCAN *odCAN = nullptr;
ARM GAS  /tmp/ccIKyBPQ.s 			page 5


  52:Src/main_.cpp **** 
  53:Src/main_.cpp **** // 声明全局变量
  54:Src/main_.cpp ****  MotorParams motor_params;
  55:Src/main_.cpp ****  MotorRuntime motor_runtime;
  56:Src/main_.cpp **** 
  57:Src/main_.cpp **** 
  58:Src/main_.cpp **** 
  59:Src/main_.cpp **** void save_configuration(void) {
  95              		.loc 3 59 31 is_stmt 1 view -0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              		@ link register save eliminated.
  60:Src/main_.cpp ****     // if (ConfigFormat::safe_store_config(
  61:Src/main_.cpp ****     //         &board_config,
  62:Src/main_.cpp ****     //         &can_config,
  63:Src/main_.cpp ****     //         &encoder_configs,
  64:Src/main_.cpp ****     //         &controller_configs,
  65:Src/main_.cpp ****     //         &motor_configs,
  66:Src/main_.cpp ****     //         &fet_thermistor_configs,
  67:Src/main_.cpp ****     //         &motor_thermistor_configs,
  68:Src/main_.cpp ****     //         &axis_configs)) {
  69:Src/main_.cpp ****     //     printf("saving configuration failed\r\n"); osDelay(5);
  70:Src/main_.cpp ****     // } else {
  71:Src/main_.cpp ****     //     user_config_loaded_ = true;
  72:Src/main_.cpp ****     // }
  73:Src/main_.cpp **** }
 100              		.loc 3 73 1 is_stmt 0 view .LVU11
 101 0000 7047     		bx	lr
 102              		.cfi_endproc
 103              	.LFE5792:
 105              		.section	.text.load_configuration,"ax",%progbits
 106              		.align	1
 107              		.global	load_configuration
 108              		.syntax unified
 109              		.thumb
 110              		.thumb_func
 111              		.fpu fpv4-sp-d16
 113              	load_configuration:
 114              	.LFB5793:
  74:Src/main_.cpp **** 
  75:Src/main_.cpp **** extern "C" int load_configuration(void) {
 115              		.loc 3 75 41 is_stmt 1 view -0
 116              		.cfi_startproc
 117              		@ Volatile: function does not return.
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121              		.cfi_endproc
 122              	.LFE5793:
 124              		.section	.text._Z19erase_configurationv,"ax",%progbits
 125              		.align	1
 126              		.global	_Z19erase_configurationv
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 130              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccIKyBPQ.s 			page 6


 132              	_Z19erase_configurationv:
 133              	.LFB5794:
  76:Src/main_.cpp **** 
  77:Src/main_.cpp **** 
  78:Src/main_.cpp **** 
  79:Src/main_.cpp **** //     // Try to load configs
  80:Src/main_.cpp **** //     if (NVM_init() ||
  81:Src/main_.cpp **** //         ConfigFormat::safe_load_config(
  82:Src/main_.cpp **** //                 &board_config,
  83:Src/main_.cpp **** //                 &can_config,
  84:Src/main_.cpp **** //                 &encoder_configs,
  85:Src/main_.cpp **** //                 &controller_configs,
  86:Src/main_.cpp **** //                 &motor_configs,
  87:Src/main_.cpp **** //                 &fet_thermistor_configs,
  88:Src/main_.cpp **** //                 &motor_thermistor_configs,
  89:Src/main_.cpp **** //                 &axis_configs)) {
  90:Src/main_.cpp **** //         //If loading failed, restore defaults
  91:Src/main_.cpp **** //         board_config = BoardConfig_t();
  92:Src/main_.cpp **** //         can_config = ODriveCAN::Config_t();
  93:Src/main_.cpp **** //         for (size_t i = 0; i < AXIS_COUNT; ++i) {
  94:Src/main_.cpp **** //             encoder_configs[i] = Encoder::Config_t();
  95:Src/main_.cpp **** //             controller_configs[i] = Controller::Config_t();
  96:Src/main_.cpp **** //             motor_configs[i] = Motor::Config_t();
  97:Src/main_.cpp **** //             fet_thermistor_configs[i] = OnboardThermistorCurrentLimiter::Config_t();
  98:Src/main_.cpp **** //             motor_thermistor_configs[i] = OffboardThermistorCurrentLimiter::Config_t();
  99:Src/main_.cpp **** //             axis_configs[i] = Axis::Config_t();
 100:Src/main_.cpp **** //             // Default step/dir pins are different, so we need to explicitly load them
 101:Src/main_.cpp **** //          //   Axis::load_default_can_id(i, axis_configs[i]);
 102:Src/main_.cpp **** 
 103:Src/main_.cpp **** //             controller_configs[i].load_encoder_axis = i;
 104:Src/main_.cpp **** //         }
 105:Src/main_.cpp **** //     } else {
 106:Src/main_.cpp **** //         odrv.user_config_loaded_ = true;
 107:Src/main_.cpp **** //     }
 108:Src/main_.cpp **** //  //   encoder_configs[0].mode = Encoder::MODE_UART_ABS_KING;
 109:Src/main_.cpp **** //     return odrv.user_config_loaded_;
 110:Src/main_.cpp **** }
 111:Src/main_.cpp **** 
 112:Src/main_.cpp **** void erase_configuration(void) {
 134              		.loc 3 112 32 view -0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138              		@ link register save eliminated.
 113:Src/main_.cpp ****     // NVM_erase();
 114:Src/main_.cpp **** 
 115:Src/main_.cpp ****     // // FIXME: this reboot is a workaround because we don't want the next save_configuration
 116:Src/main_.cpp ****     // // to write back the old configuration from RAM to NVM. The proper action would
 117:Src/main_.cpp ****     // // be to reset the values in RAM to default. However right now that's not
 118:Src/main_.cpp ****     // // practical because several startup actions depend on the config. The
 119:Src/main_.cpp ****     // // other problem is that the stack overflows if we reset to default here.
 120:Src/main_.cpp ****     // NVIC_SystemReset();
 121:Src/main_.cpp **** }
 139              		.loc 3 121 1 is_stmt 0 view .LVU14
 140 0000 7047     		bx	lr
 141              		.cfi_endproc
 142              	.LFE5794:
ARM GAS  /tmp/ccIKyBPQ.s 			page 7


 144              		.section	.text.construct_objects,"ax",%progbits
 145              		.align	1
 146              		.global	construct_objects
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu fpv4-sp-d16
 152              	construct_objects:
 153              	.LFB5795:
 122:Src/main_.cpp **** 
 123:Src/main_.cpp **** extern "C" int construct_objects(){
 154              		.loc 3 123 35 is_stmt 1 view -0
 155              		.cfi_startproc
 156              		@ Volatile: function does not return.
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159              		@ link register save eliminated.
 160              		.cfi_endproc
 161              	.LFE5795:
 163              		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
 164              		.align	1
 165              		.global	vApplicationStackOverflowHook
 166              		.syntax unified
 167              		.thumb
 168              		.thumb_func
 169              		.fpu fpv4-sp-d16
 171              	vApplicationStackOverflowHook:
 172              	.LVL2:
 173              	.LFB5796:
 124:Src/main_.cpp **** // #if HW_VERSION_MAJOR == 3 && HW_VERSION_MINOR >= 3
 125:Src/main_.cpp **** //     if (odrv.config_.enable_i2c_instead_of_can) {
 126:Src/main_.cpp **** //         // Set up the direction GPIO as input
 127:Src/main_.cpp **** //         GPIO_InitTypeDef GPIO_InitStruct;
 128:Src/main_.cpp **** //         GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 129:Src/main_.cpp **** //         GPIO_InitStruct.Pull = GPIO_PULLUP;
 130:Src/main_.cpp **** 
 131:Src/main_.cpp **** //         GPIO_InitStruct.Pin = I2C_A0_PIN;
 132:Src/main_.cpp **** //         HAL_GPIO_Init(I2C_A0_PORT, &GPIO_InitStruct);
 133:Src/main_.cpp **** //         GPIO_InitStruct.Pin = I2C_A1_PIN;
 134:Src/main_.cpp **** //         HAL_GPIO_Init(I2C_A1_PORT, &GPIO_InitStruct);
 135:Src/main_.cpp **** //         GPIO_InitStruct.Pin = I2C_A2_PIN;
 136:Src/main_.cpp **** //         HAL_GPIO_Init(I2C_A2_PORT, &GPIO_InitStruct);
 137:Src/main_.cpp **** 
 138:Src/main_.cpp **** //         osDelay(1);
 139:Src/main_.cpp **** //         i2c_stats_.addr = (0xD << 3);
 140:Src/main_.cpp **** //         i2c_stats_.addr |= HAL_GPIO_ReadPin(I2C_A0_PORT, I2C_A0_PIN) != GPIO_PIN_RESET ? 0x1 : 0
 141:Src/main_.cpp **** //         i2c_stats_.addr |= HAL_GPIO_ReadPin(I2C_A1_PORT, I2C_A1_PIN) != GPIO_PIN_RESET ? 0x2 : 0
 142:Src/main_.cpp **** //         i2c_stats_.addr |= HAL_GPIO_ReadPin(I2C_A2_PORT, I2C_A2_PIN) != GPIO_PIN_RESET ? 0x4 : 0
 143:Src/main_.cpp **** //         MX_I2C1_Init(i2c_stats_.addr);
 144:Src/main_.cpp **** //     } else
 145:Src/main_.cpp **** // #endif
 146:Src/main_.cpp **** //         MX_CAN1_Init();
 147:Src/main_.cpp **** 
 148:Src/main_.cpp **** //     HAL_UART_DeInit(&huart4);
 149:Src/main_.cpp **** //     huart4.Init.BaudRate = odrv.config_.uart_baudrate;
 150:Src/main_.cpp **** //     HAL_UART_Init(&huart4);
 151:Src/main_.cpp **** 
ARM GAS  /tmp/ccIKyBPQ.s 			page 8


 152:Src/main_.cpp **** //     // Init general user ADC on some GPIOs.
 153:Src/main_.cpp **** //     GPIO_InitTypeDef GPIO_InitStruct;
 154:Src/main_.cpp **** //     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 155:Src/main_.cpp **** //     GPIO_InitStruct.Pull = GPIO_NOPULL;
 156:Src/main_.cpp **** //     GPIO_InitStruct.Pin = GPIO_1_Pin;
 157:Src/main_.cpp **** //     HAL_GPIO_Init(GPIO_1_GPIO_Port, &GPIO_InitStruct);
 158:Src/main_.cpp **** //     GPIO_InitStruct.Pin = GPIO_2_Pin;
 159:Src/main_.cpp **** //     HAL_GPIO_Init(GPIO_2_GPIO_Port, &GPIO_InitStruct);
 160:Src/main_.cpp **** //     GPIO_InitStruct.Pin = GPIO_3_Pin;
 161:Src/main_.cpp **** //     HAL_GPIO_Init(GPIO_3_GPIO_Port, &GPIO_InitStruct);
 162:Src/main_.cpp **** //     GPIO_InitStruct.Pin = GPIO_4_Pin;
 163:Src/main_.cpp **** //     HAL_GPIO_Init(GPIO_4_GPIO_Port, &GPIO_InitStruct);
 164:Src/main_.cpp **** // #if HW_VERSION_MAJOR == 3 && HW_VERSION_MINOR >= 5
 165:Src/main_.cpp **** //     GPIO_InitStruct.Pin = GPIO_5_Pin;
 166:Src/main_.cpp **** //     HAL_GPIO_Init(GPIO_5_GPIO_Port, &GPIO_InitStruct);
 167:Src/main_.cpp **** // #endif
 168:Src/main_.cpp **** 
 169:Src/main_.cpp **** //     // Construct all objects.
 170:Src/main_.cpp **** //     odCAN = new ODriveCAN(can_config, &hcan1);
 171:Src/main_.cpp **** //     for (size_t i = 0; i < AXIS_COUNT; ++i) {
 172:Src/main_.cpp **** //         Encoder *encoder = new Encoder(hw_configs[i].encoder_config,
 173:Src/main_.cpp **** //                                        encoder_configs[i], motor_configs[i]);
 174:Src/main_.cpp **** //         Controller *controller = new Controller(controller_configs[i]);
 175:Src/main_.cpp **** 
 176:Src/main_.cpp **** //         OnboardThermistorCurrentLimiter *fet_thermistor = new OnboardThermistorCurrentLimiter(hw
 177:Src/main_.cpp **** //                                                                                               fe
 178:Src/main_.cpp **** //         OffboardThermistorCurrentLimiter *motor_thermistor = new OffboardThermistorCurrentLimite
 179:Src/main_.cpp **** 
 180:Src/main_.cpp **** //         Motor *motor = new Motor(hw_configs[i].motor_config,
 181:Src/main_.cpp **** //                                  hw_configs[i].gate_driver_config,
 182:Src/main_.cpp **** //                                  motor_configs[i]);
 183:Src/main_.cpp **** //         axes[i] = new Axis(i, hw_configs[i].axis_config, axis_configs[i],
 184:Src/main_.cpp **** //                 *encoder, *controller, *fet_thermistor,
 185:Src/main_.cpp **** //                 *motor_thermistor, *motor);
 186:Src/main_.cpp **** 
 187:Src/main_.cpp **** //         controller_configs[i].parent = controller;
 188:Src/main_.cpp **** //         encoder_configs[i].parent = encoder;
 189:Src/main_.cpp **** //         motor_thermistor_configs[i].parent = motor_thermistor;
 190:Src/main_.cpp **** //         motor_configs[i].parent = motor;
 191:Src/main_.cpp **** //         axis_configs[i].parent = axes[i];
 192:Src/main_.cpp **** //     }
 193:Src/main_.cpp **** //     return 0;
 194:Src/main_.cpp **** }
 195:Src/main_.cpp **** 
 196:Src/main_.cpp **** extern "C" {
 197:Src/main_.cpp **** int odrive_main(void);
 198:Src/main_.cpp **** void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed portCHAR *pcTaskName) {
 174              		.loc 3 198 86 view -0
 175              		.cfi_startproc
 176              		@ Volatile: function does not return.
 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179              		.loc 3 198 86 is_stmt 0 view .LVU17
 180 0000 08B5     		push	{r3, lr}
 181              	.LCFI0:
 182              		.cfi_def_cfa_offset 8
 183              		.cfi_offset 3, -8
ARM GAS  /tmp/ccIKyBPQ.s 			page 9


 184              		.cfi_offset 14, -4
 199:Src/main_.cpp **** 
 200:Src/main_.cpp ****         safety_critical_disarm_motor_pwm(axes->motor_);
 185              		.loc 3 200 9 is_stmt 1 view .LVU18
 186              		.loc 3 200 41 is_stmt 0 view .LVU19
 187 0002 044B     		ldr	r3, .L10
 188 0004 1B68     		ldr	r3, [r3]
 189 0006 D86E     		ldr	r0, [r3, #108]
 190              	.LVL3:
 191              		.loc 3 200 41 view .LVU20
 192 0008 FFF7FEFF 		bl	safety_critical_disarm_motor_pwm
 193              	.LVL4:
 201:Src/main_.cpp **** 
 202:Src/main_.cpp ****         safety_critical_disarm_brake_resistor();
 194              		.loc 3 202 9 is_stmt 1 view .LVU21
 195              		.loc 3 202 46 is_stmt 0 view .LVU22
 196 000c FFF7FEFF 		bl	safety_critical_disarm_brake_resistor
 197              	.LVL5:
 198              	.L8:
 203:Src/main_.cpp ****     for (;;); // TODO: safe action
 199              		.loc 3 203 5 is_stmt 1 discriminator 1 view .LVU23
 200              		.loc 3 203 5 discriminator 1 view .LVU24
 201 0010 FEE7     		b	.L8
 202              	.L11:
 203 0012 00BF     		.align	2
 204              	.L10:
 205 0014 00000000 		.word	axes
 206              		.cfi_endproc
 207              	.LFE5796:
 209              		.section	.text.vApplicationIdleHook,"ax",%progbits
 210              		.align	1
 211              		.global	vApplicationIdleHook
 212              		.syntax unified
 213              		.thumb
 214              		.thumb_func
 215              		.fpu fpv4-sp-d16
 217              	vApplicationIdleHook:
 218              	.LFB5797:
 204:Src/main_.cpp **** }
 205:Src/main_.cpp **** void vApplicationIdleHook(void) {
 219              		.loc 3 205 33 view -0
 220              		.cfi_startproc
 221              		@ args = 0, pretend = 0, frame = 0
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 223 0000 38B5     		push	{r3, r4, r5, lr}
 224              	.LCFI1:
 225              		.cfi_def_cfa_offset 16
 226              		.cfi_offset 3, -16
 227              		.cfi_offset 4, -12
 228              		.cfi_offset 5, -8
 229              		.cfi_offset 14, -4
 206:Src/main_.cpp ****     if (system_stats.fully_booted) {
 230              		.loc 3 206 5 view .LVU26
 231              	.LBB63:
 232              		.loc 3 206 22 is_stmt 0 view .LVU27
 233 0002 0A4B     		ldr	r3, .L15
 234              		.loc 3 206 5 view .LVU28
ARM GAS  /tmp/ccIKyBPQ.s 			page 10


 235 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 236 0006 7BB1     		cbz	r3, .L12
 237              	.LBB64:
 207:Src/main_.cpp ****         // system_stats.uptime = xTaskGetTickCount();
 208:Src/main_.cpp ****         // system_stats.min_heap_space = xPortGetMinimumEverFreeHeapSize();
 209:Src/main_.cpp ****         // system_stats.min_stack_space_comms = uxTaskGetStackHighWaterMark(comm_thread) * sizeof(S
 210:Src/main_.cpp ****         // system_stats.min_stack_space_axis0 = uxTaskGetStackHighWaterMark(axes[0]->thread_id_) * 
 211:Src/main_.cpp ****         // system_stats.min_stack_space_uart = uxTaskGetStackHighWaterMark(uart_thread) * sizeof(St
 212:Src/main_.cpp ****         // system_stats.min_stack_space_startup = uxTaskGetStackHighWaterMark(defaultTaskHandle) * 
 213:Src/main_.cpp ****         // system_stats.min_stack_space_can = uxTaskGetStackHighWaterMark(odCAN->thread_id_) * size
 214:Src/main_.cpp **** 
 215:Src/main_.cpp ****         // // Actual usage, in bytes, so we don't have to math
 216:Src/main_.cpp ****         // system_stats.stack_usage_axis0 = axes[0]->stack_size_ - system_stats_.min_stack_space_ax
 217:Src/main_.cpp ****         // system_stats.stack_usage_comms = stack_size_comm_thread - system_stats_.min_stack_space_
 218:Src/main_.cpp ****         // system_stats.stack_usage_uart = stack_size_uart_thread - system_stats_.min_stack_space_u
 219:Src/main_.cpp ****         // system_stats.stack_usage_startup = stack_size_default_task - system_stats_.min_stack_spa
 220:Src/main_.cpp ****         // system_stats.stack_usage_can = odCAN->stack_size_ - system_stats_.min_stack_space_can;
 221:Src/main_.cpp ****         for (ThermistorCurrentLimiter* thermistor : axes->thermistors_) {
 238              		.loc 3 221 9 is_stmt 1 view .LVU29
 239              	.LBB65:
 240              		.loc 3 221 59 is_stmt 0 view .LVU30
 241 0008 094C     		ldr	r4, .L15+4
 242 000a 2568     		ldr	r5, [r4]
 243              	.LVL6:
 244              		.loc 3 221 59 is_stmt 1 view .LVU31
 222:Src/main_.cpp ****             thermistor->update();
 245              		.loc 3 222 13 view .LVU32
 246              		.loc 3 222 31 is_stmt 0 view .LVU33
 247 000c D5F84801 		ldr	r0, [r5, #328]
 248 0010 FFF7FEFF 		bl	_ZN24ThermistorCurrentLimiter6updateEv
 249              	.LVL7:
 221:Src/main_.cpp ****             thermistor->update();
 250              		.loc 3 221 9 is_stmt 1 view .LVU34
 221:Src/main_.cpp ****             thermistor->update();
 251              		.loc 3 221 59 view .LVU35
 252              		.loc 3 222 13 view .LVU36
 253              		.loc 3 222 31 is_stmt 0 view .LVU37
 254 0014 D5F84C01 		ldr	r0, [r5, #332]
 255 0018 FFF7FEFF 		bl	_ZN24ThermistorCurrentLimiter6updateEv
 256              	.LVL8:
 221:Src/main_.cpp ****             thermistor->update();
 257              		.loc 3 221 9 is_stmt 1 view .LVU38
 221:Src/main_.cpp ****             thermistor->update();
 258              		.loc 3 221 59 view .LVU39
 259              	.LBE65:
 223:Src/main_.cpp ****         }
 224:Src/main_.cpp ****        
 225:Src/main_.cpp ****        axes->checks_ok_ = axes->do_checks();
 260              		.loc 3 225 8 view .LVU40
 261              		.loc 3 225 42 is_stmt 0 view .LVU41
 262 001c 2468     		ldr	r4, [r4]
 263 001e 2046     		mov	r0, r4
 264 0020 FFF7FEFF 		bl	_ZN4Axis9do_checksEv
 265              	.LVL9:
 266              		.loc 3 225 25 view .LVU42
 267 0024 84F8DC01 		strb	r0, [r4, #476]
 268              	.LVL10:
ARM GAS  /tmp/ccIKyBPQ.s 			page 11


 269              	.L12:
 270              		.loc 3 225 25 view .LVU43
 271              	.LBE64:
 272              	.LBE63:
 226:Src/main_.cpp ****        
 227:Src/main_.cpp **** 
 228:Src/main_.cpp ****     }
 229:Src/main_.cpp **** }
 273              		.loc 3 229 1 view .LVU44
 274 0028 38BD     		pop	{r3, r4, r5, pc}
 275              	.L16:
 276 002a 00BF     		.align	2
 277              	.L15:
 278 002c 00000000 		.word	.LANCHOR0
 279 0030 00000000 		.word	axes
 280              		.cfi_endproc
 281              	.LFE5797:
 283              		.section	.text.odrive_main,"ax",%progbits
 284              		.align	1
 285              		.global	odrive_main
 286              		.syntax unified
 287              		.thumb
 288              		.thumb_func
 289              		.fpu fpv4-sp-d16
 291              	odrive_main:
 292              	.LFB5798:
 230:Src/main_.cpp **** }
 231:Src/main_.cpp **** 
 232:Src/main_.cpp **** int odrive_main(void) {
 293              		.loc 3 232 23 is_stmt 1 view -0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297 0000 10B5     		push	{r4, lr}
 298              	.LCFI2:
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 4, -8
 301              		.cfi_offset 14, -4
 233:Src/main_.cpp ****     // Start ADC for temperature measurements and user measurements
 234:Src/main_.cpp ****     start_general_purpose_adc();
 302              		.loc 3 234 5 view .LVU46
 303              		.loc 3 234 30 is_stmt 0 view .LVU47
 304 0002 FFF7FEFF 		bl	start_general_purpose_adc
 305              	.LVL11:
 235:Src/main_.cpp **** 
 236:Src/main_.cpp ****     // TODO: make dynamically reconfigurable
 237:Src/main_.cpp **** #if HW_VERSION_MAJOR == 3 && HW_VERSION_MINOR >= 3
 238:Src/main_.cpp ****     if (odrv.config_.enable_uart) {
 239:Src/main_.cpp ****         SetGPIO12toUART();
 240:Src/main_.cpp ****     }
 241:Src/main_.cpp **** #endif
 242:Src/main_.cpp ****     //osDelay(100);
 243:Src/main_.cpp ****     // Init communications (this requires the axis objects to be constructed)
 244:Src/main_.cpp ****     // Start pwm-in compare modules
 245:Src/main_.cpp ****     // must happen after communication is initialized
 246:Src/main_.cpp ****     pwm_in_init();
 306              		.loc 3 246 5 is_stmt 1 view .LVU48
ARM GAS  /tmp/ccIKyBPQ.s 			page 12


 307              		.loc 3 246 16 is_stmt 0 view .LVU49
 308 0006 FFF7FEFF 		bl	pwm_in_init
 309              	.LVL12:
 247:Src/main_.cpp **** 
 248:Src/main_.cpp ****     // Set up the CS pins for absolute encoders
 249:Src/main_.cpp **** 
 250:Src/main_.cpp ****     if(axes->encoder_.config_.mode & Encoder::MODE_FLAG_ABS){
 310              		.loc 3 250 5 is_stmt 1 view .LVU50
 311              		.loc 3 250 14 is_stmt 0 view .LVU51
 312 000a 1D4B     		ldr	r3, .L23
 313 000c 1B68     		ldr	r3, [r3]
 314 000e 9868     		ldr	r0, [r3, #8]
 315              		.loc 3 250 31 view .LVU52
 316 0010 4368     		ldr	r3, [r0, #4]
 317              		.loc 3 250 5 view .LVU53
 318 0012 1B88     		ldrh	r3, [r3]
 319 0014 13F4807F 		tst	r3, #256
 320 0018 2ED1     		bne	.L22
 321              	.L18:
 251:Src/main_.cpp ****         axes->encoder_.abs_spi_cs_pin_init();
 252:Src/main_.cpp ****     }
 253:Src/main_.cpp **** 
 254:Src/main_.cpp **** 
 255:Src/main_.cpp ****     // Setup motors (DRV8301 SPI transactions here)
 256:Src/main_.cpp ****    // for(auto& axis : axes){
 257:Src/main_.cpp ****     axes->motor_.setup();
 322              		.loc 3 257 5 is_stmt 1 view .LVU54
 323              		.loc 3 257 11 is_stmt 0 view .LVU55
 324 001a 194B     		ldr	r3, .L23
 325 001c 1B68     		ldr	r3, [r3]
 326 001e DC6E     		ldr	r4, [r3, #108]
 327              	.LVL13:
 328              	.LBB69:
 329              	.LBI69:
 330              		.file 4 "Inc/motor.hpp"
   1:Inc/motor.hpp **** #ifndef __MOTOR_HPP
   2:Inc/motor.hpp **** #define __MOTOR_HPP
   3:Inc/motor.hpp **** 
   4:Inc/motor.hpp **** 
   5:Inc/motor.hpp **** #include <cstdint>  // Add this for uint32_t
   6:Inc/motor.hpp **** #include "component.hpp"
   7:Inc/motor.hpp **** 
   8:Inc/motor.hpp **** #include "interfaces.hpp"
   9:Inc/motor.hpp **** #include "phase_control_law.hpp"
  10:Inc/motor.hpp **** #include "main.h"
  11:Inc/motor.hpp **** #include "current_limiter.hpp"
  12:Inc/motor.hpp **** #include "foc.hpp"
  13:Inc/motor.hpp **** 
  14:Inc/motor.hpp **** 
  15:Inc/motor.hpp **** class FieldOrientedController;
  16:Inc/motor.hpp **** class Axis;
  17:Inc/motor.hpp **** 
  18:Inc/motor.hpp **** class Motor : public ODriveIntf::MotorIntf{
  19:Inc/motor.hpp **** public:
  20:Inc/motor.hpp ****     struct Iph_BC_t {
  21:Inc/motor.hpp ****         float phA;
  22:Inc/motor.hpp ****         float phB;
ARM GAS  /tmp/ccIKyBPQ.s 			page 13


  23:Inc/motor.hpp ****         float phC;
  24:Inc/motor.hpp ****     };
  25:Inc/motor.hpp **** 
  26:Inc/motor.hpp ****     enum MotorType {
  27:Inc/motor.hpp ****         MOTOR_TYPE_HIGH_CURRENT          = 0,
  28:Inc/motor.hpp ****         MOTOR_TYPE_GIMBAL                = 2,
  29:Inc/motor.hpp ****         MOTOR_TYPE_ACIM                  = 3,
  30:Inc/motor.hpp ****     };
  31:Inc/motor.hpp **** 
  32:Inc/motor.hpp ****     struct CurrentControl_t{
  33:Inc/motor.hpp ****         float p_gain; // [V/A]
  34:Inc/motor.hpp ****         float i_gain; // [V/As]
  35:Inc/motor.hpp ****         float v_current_control_integral_d; // [V]
  36:Inc/motor.hpp ****         float v_current_control_integral_q; // [V]
  37:Inc/motor.hpp ****         float Ibus; // DC bus current [A]
  38:Inc/motor.hpp ****         // Voltage applied at end of cycle:
  39:Inc/motor.hpp ****         float final_v_alpha; // [V]
  40:Inc/motor.hpp ****         float final_v_beta; // [V]
  41:Inc/motor.hpp **** 
  42:Inc/motor.hpp ****         float final_v_d; // [V]
  43:Inc/motor.hpp ****         float final_v_q; // [V]
  44:Inc/motor.hpp **** 
  45:Inc/motor.hpp ****         float Id_setpoint; // [A]
  46:Inc/motor.hpp ****         float Iq_setpoint; // [A]
  47:Inc/motor.hpp ****         float Iq_measured; // [A]
  48:Inc/motor.hpp ****         float Id_measured; // [A]
  49:Inc/motor.hpp ****         float I_measured_report_filter_k;
  50:Inc/motor.hpp ****         float max_allowed_current; // [A]
  51:Inc/motor.hpp ****         float overcurrent_trip_level; // [A]
  52:Inc/motor.hpp ****         float acim_rotor_flux; // [A]
  53:Inc/motor.hpp ****         float async_phase_vel; // [rad/s electrical]
  54:Inc/motor.hpp ****         float async_phase_offset; // [rad electrical]
  55:Inc/motor.hpp ****     };
  56:Inc/motor.hpp ****     static constexpr int32_t NUM_LINEARITY_SEG = 60;
  57:Inc/motor.hpp ****     static constexpr float CALIBRATION_INCREMENT = 1;
  58:Inc/motor.hpp ****     // NOTE: for gimbal motors, all units of Nm are instead V.
  59:Inc/motor.hpp ****     // example: vel_gain is [V/(turn/s)] instead of [Nm/(turn/s)]
  60:Inc/motor.hpp ****     // example: current_lim and calibration_current will instead determine the maximum voltage appl
  61:Inc/motor.hpp ****     struct Config_t {
  62:Inc/motor.hpp ****         bool pre_calibrated = false; // can be set to true to indicate that all values here are val
  63:Inc/motor.hpp ****         int32_t pole_pairs = 21;
  64:Inc/motor.hpp ****         int32_t gear_ratio = 16;
  65:Inc/motor.hpp ****         float motor_torque_base = 60.0f; // [Nm]
  66:Inc/motor.hpp ****         float calibration_current = 10.0f;    // [A]
  67:Inc/motor.hpp ****         float resistance_calib_max_voltage = 2.0f; // [V] - You may need to increase this if this v
  68:Inc/motor.hpp ****         float phase_inductance = 0.000055f;        // to be set by measure_phase_inductance
  69:Inc/motor.hpp ****         float phase_resistance = 0.07f;        // to be set by measure_phase_resistance
  70:Inc/motor.hpp ****         float torque_constant = 0.087f;         // [Nm/A] for PM motors, [Nm/A^2] for induction mot
  71:Inc/motor.hpp ****         int32_t direction = 1;                // 1 or -1 (0 = unspecified)
  72:Inc/motor.hpp ****         MotorType motor_type = MOTOR_TYPE_HIGH_CURRENT;
  73:Inc/motor.hpp ****         // Read out max_allowed_current to see max supported value for current_lim.
  74:Inc/motor.hpp ****         // float current_lim = 70.0f; //[A]
  75:Inc/motor.hpp ****         float current_lim = 10.0f;          //[A]
  76:Inc/motor.hpp ****         float current_lim_margin = 8.0f;    // Maximum violation of current_lim
  77:Inc/motor.hpp ****         float torque_lim = std::numeric_limits<float>::infinity();           //[Nm]. 
  78:Inc/motor.hpp ****         // Value used to compute shunt amplifier gains
  79:Inc/motor.hpp ****         float requested_current_range = 60.0f; // [A]
ARM GAS  /tmp/ccIKyBPQ.s 			page 14


  80:Inc/motor.hpp ****         float current_control_bandwidth = 3000.0f;  // [rad/s]
  81:Inc/motor.hpp ****         float inverter_temp_limit_lower = 100;
  82:Inc/motor.hpp ****         float inverter_temp_limit_upper = 120;
  83:Inc/motor.hpp ****         float acim_slip_velocity = 14.706f; // [rad/s electrical] = 1/rotor_tau
  84:Inc/motor.hpp ****         float acim_gain_min_flux = 10; // [A]
  85:Inc/motor.hpp ****         float acim_autoflux_min_Id = 10; // [A]
  86:Inc/motor.hpp ****         bool acim_autoflux_enable = false;
  87:Inc/motor.hpp ****         float acim_autoflux_attack_gain = 10.0f;
  88:Inc/motor.hpp ****         float acim_autoflux_decay_gain = 1.0f;
  89:Inc/motor.hpp **** 
  90:Inc/motor.hpp ****         float Torque_LINEARITY_[NUM_LINEARITY_SEG];
  91:Inc/motor.hpp ****         float CURRENT_LINEARITY_[NUM_LINEARITY_SEG];
  92:Inc/motor.hpp **** 
  93:Inc/motor.hpp ****         float CURRENT2TORQUE_COEFF[2*NUM_LINEARITY_SEG];
  94:Inc/motor.hpp **** 
  95:Inc/motor.hpp ****         bool R_wL_FF_enable = false; // Enable feedforwards for R*I and w*L*I terms
  96:Inc/motor.hpp ****         bool bEMF_FF_enable = false; // Enable feedforward for bEMF
  97:Inc/motor.hpp **** 
  98:Inc/motor.hpp ****         float I_bus_hard_min = -INFINITY;
  99:Inc/motor.hpp ****         float I_bus_hard_max = INFINITY;
 100:Inc/motor.hpp ****         // custom property setters
 101:Inc/motor.hpp ****         Motor* parent = nullptr;
 102:Inc/motor.hpp ****         void set_pre_calibrated(bool value) {
 103:Inc/motor.hpp ****             pre_calibrated = value;
 104:Inc/motor.hpp ****             parent->is_calibrated_ = parent->is_calibrated_ || parent->config_.pre_calibrated;
 105:Inc/motor.hpp ****         }
 106:Inc/motor.hpp ****         void set_phase_inductance(float value) { phase_inductance = value; parent->update_current_c
 107:Inc/motor.hpp ****         void set_phase_resistance(float value) { phase_resistance = value; parent->update_current_c
 108:Inc/motor.hpp ****         void set_current_control_bandwidth(float value) { current_control_bandwidth = value; parent
 109:Inc/motor.hpp ****     };
 110:Inc/motor.hpp **** 
 111:Inc/motor.hpp ****     Motor(const MotorHardwareConfig_t& hw_config,
 112:Inc/motor.hpp ****          Config_t& config);
 113:Inc/motor.hpp **** 
 114:Inc/motor.hpp **** 
 115:Inc/motor.hpp ****     bool arm(PhaseControlLaw<3>* control_law);
 116:Inc/motor.hpp ****     bool disarm();
 117:Inc/motor.hpp **** 
 118:Inc/motor.hpp ****     void current_meas_cb(uint32_t timestamp);
 119:Inc/motor.hpp ****     void pwm_update_cb(uint32_t output_timestamp);
 120:Inc/motor.hpp **** 
 121:Inc/motor.hpp ****     void setup() {
 331              		.loc 4 121 10 is_stmt 1 view .LVU56
 332              	.LBB70:
 122:Inc/motor.hpp ****         int32_t index = 0;
 333              		.loc 4 122 9 view .LVU57
 123:Inc/motor.hpp ****         DRV8301_setup();
 334              		.loc 4 123 9 view .LVU58
 335              		.loc 4 123 22 is_stmt 0 view .LVU59
 336 0020 2046     		mov	r0, r4
 337 0022 FFF7FEFF 		bl	_ZN5Motor13DRV8301_setupEv
 338              	.LVL14:
 124:Inc/motor.hpp ****         for( index = 0;index < NUM_LINEARITY_SEG;index++)
 339              		.loc 4 124 9 is_stmt 1 view .LVU60
 340              		.loc 4 124 30 view .LVU61
 125:Inc/motor.hpp ****         {
 126:Inc/motor.hpp ****             L_Slop_Array_P_[index] = config_.Torque_LINEARITY_[index];
ARM GAS  /tmp/ccIKyBPQ.s 			page 15


 341              		.loc 4 126 38 is_stmt 0 view .LVU62
 342 0026 6068     		ldr	r0, [r4, #4]
 343 0028 00F16003 		add	r3, r0, #96
 344 002c 04F1D002 		add	r2, r4, #208
 345 0030 00F5A870 		add	r0, r0, #336
 346              	.LVL15:
 347              	.L19:
 348              		.loc 4 126 13 is_stmt 1 view .LVU63
 349              		.loc 4 126 69 is_stmt 0 view .LVU64
 350 0034 53F8041B 		ldr	r1, [r3], #4	@ float
 351              		.loc 4 126 36 view .LVU65
 352 0038 42F8041B 		str	r1, [r2], #4	@ float
 127:Inc/motor.hpp ****             L_Slop_Array_N_[index] = config_.CURRENT_LINEARITY_[index];
 353              		.loc 4 127 13 is_stmt 1 view .LVU66
 354              		.loc 4 127 70 is_stmt 0 view .LVU67
 355 003c D3F8EC10 		ldr	r1, [r3, #236]	@ float
 356              		.loc 4 127 36 view .LVU68
 357 0040 C2F8EC10 		str	r1, [r2, #236]	@ float
 124:Inc/motor.hpp ****         for( index = 0;index < NUM_LINEARITY_SEG;index++)
 358              		.loc 4 124 9 is_stmt 1 view .LVU69
 124:Inc/motor.hpp ****         for( index = 0;index < NUM_LINEARITY_SEG;index++)
 359              		.loc 4 124 30 view .LVU70
 360 0044 8342     		cmp	r3, r0
 361 0046 F5D1     		bne	.L19
 362              	.LVL16:
 124:Inc/motor.hpp ****         for( index = 0;index < NUM_LINEARITY_SEG;index++)
 363              		.loc 4 124 30 is_stmt 0 view .LVU71
 364              	.LBE70:
 365              	.LBE69:
 258:Src/main_.cpp ****    // }
 259:Src/main_.cpp **** 
 260:Src/main_.cpp ****     // Setup encoders (Starts encoder SPI transactions)
 261:Src/main_.cpp **** 
 262:Src/main_.cpp ****     axes->encoder_.setup();
 366              		.loc 3 262 5 is_stmt 1 view .LVU72
 367              		.loc 3 262 11 is_stmt 0 view .LVU73
 368 0048 0D4C     		ldr	r4, .L23
 369 004a 2368     		ldr	r3, [r4]
 370              		.loc 3 262 25 view .LVU74
 371 004c 9868     		ldr	r0, [r3, #8]
 372 004e FFF7FEFF 		bl	_ZN7Encoder5setupEv
 373              	.LVL17:
 263:Src/main_.cpp **** 
 264:Src/main_.cpp **** 
 265:Src/main_.cpp ****     // Setup anything remaining in each axis
 266:Src/main_.cpp ****     axes->setup();
 374              		.loc 3 266 5 is_stmt 1 view .LVU75
 375              		.loc 3 266 16 is_stmt 0 view .LVU76
 376 0052 2068     		ldr	r0, [r4]
 377 0054 FFF7FEFF 		bl	_ZN4Axis5setupEv
 378              	.LVL18:
 267:Src/main_.cpp **** 
 268:Src/main_.cpp ****     // Start PWM and enable adc interrupts/callbacks
 269:Src/main_.cpp ****     start_adc_pwm();
 379              		.loc 3 269 5 is_stmt 1 view .LVU77
 380              		.loc 3 269 18 is_stmt 0 view .LVU78
 381 0058 FFF7FEFF 		bl	start_adc_pwm
ARM GAS  /tmp/ccIKyBPQ.s 			page 16


 382              	.LVL19:
 270:Src/main_.cpp ****     // This delay serves two purposes:
 271:Src/main_.cpp ****     //  - Let the current sense calibration converge (the current
 272:Src/main_.cpp ****     //    sense interrupts are firing in background by now)
 273:Src/main_.cpp ****     //  - Allow a user to interrupt the code, e.g. by flashing a new code,
 274:Src/main_.cpp ****     //    before it does anything crazy
 275:Src/main_.cpp ****     // TODO make timing a function of calibration filter tau
 276:Src/main_.cpp ****     osDelay(1500);
 383              		.loc 3 276 5 is_stmt 1 view .LVU79
 384              		.loc 3 276 12 is_stmt 0 view .LVU80
 385 005c 40F2DC50 		movw	r0, #1500
 386 0060 FFF7FEFF 		bl	osDelay
 387              	.LVL20:
 277:Src/main_.cpp **** 
 278:Src/main_.cpp ****     // Start state machine threads. Each thread will go through various calibration
 279:Src/main_.cpp ****     // procedures and then run the actual controller loops.
 280:Src/main_.cpp ****     // TODO: generalize for AXIS_COUNT != 2
 281:Src/main_.cpp ****     for (size_t i = 0; i < 1; ++i) {
 388              		.loc 3 281 5 is_stmt 1 view .LVU81
 389              	.LBB71:
 390              		.loc 3 281 26 view .LVU82
 282:Src/main_.cpp ****         axes->start_thread();
 391              		.loc 3 282 9 view .LVU83
 392              		.loc 3 282 27 is_stmt 0 view .LVU84
 393 0064 2068     		ldr	r0, [r4]
 394 0066 FFF7FEFF 		bl	_ZN4Axis12start_threadEv
 395              	.LVL21:
 281:Src/main_.cpp ****         axes->start_thread();
 396              		.loc 3 281 5 is_stmt 1 view .LVU85
 281:Src/main_.cpp ****         axes->start_thread();
 397              		.loc 3 281 26 view .LVU86
 281:Src/main_.cpp ****         axes->start_thread();
 398              		.loc 3 281 26 is_stmt 0 view .LVU87
 399              	.LBE71:
 283:Src/main_.cpp ****     }
 284:Src/main_.cpp **** 
 285:Src/main_.cpp ****     start_analog_thread();
 400              		.loc 3 285 5 is_stmt 1 view .LVU88
 401              		.loc 3 285 24 is_stmt 0 view .LVU89
 402 006a FFF7FEFF 		bl	start_analog_thread
 403              	.LVL22:
 286:Src/main_.cpp **** 
 287:Src/main_.cpp ****     system_stats.fully_booted = true;
 404              		.loc 3 287 5 is_stmt 1 view .LVU90
 405              		.loc 3 287 31 is_stmt 0 view .LVU91
 406 006e 054B     		ldr	r3, .L23+4
 407 0070 0122     		movs	r2, #1
 408 0072 1A70     		strb	r2, [r3]
 288:Src/main_.cpp ****     return 0;
 409              		.loc 3 288 5 is_stmt 1 view .LVU92
 289:Src/main_.cpp **** }
 410              		.loc 3 289 1 is_stmt 0 view .LVU93
 411 0074 0020     		movs	r0, #0
 412 0076 10BD     		pop	{r4, pc}
 413              	.LVL23:
 414              	.L22:
 251:Src/main_.cpp ****     }
ARM GAS  /tmp/ccIKyBPQ.s 			page 17


 415              		.loc 3 251 9 is_stmt 1 view .LVU94
 251:Src/main_.cpp ****     }
 416              		.loc 3 251 43 is_stmt 0 view .LVU95
 417 0078 FFF7FEFF 		bl	_ZN7Encoder19abs_spi_cs_pin_initEv
 418              	.LVL24:
 419 007c CDE7     		b	.L18
 420              	.L24:
 421 007e 00BF     		.align	2
 422              	.L23:
 423 0080 00000000 		.word	axes
 424 0084 00000000 		.word	.LANCHOR0
 425              		.cfi_endproc
 426              	.LFE5798:
 428              		.section	.text._ZN31OnboardThermistorCurrentLimiterD0Ev,"axG",%progbits,_ZN31OnboardThermistorCurr
 429              		.align	1
 430              		.weak	_ZN31OnboardThermistorCurrentLimiterD0Ev
 431              		.syntax unified
 432              		.thumb
 433              		.thumb_func
 434              		.fpu fpv4-sp-d16
 436              	_ZN31OnboardThermistorCurrentLimiterD0Ev:
 437              	.LVL25:
 438              	.LFB6442:
  55:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
 439              		.loc 1 55 13 is_stmt 1 view -0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 0
 442              		@ frame_needed = 0, uses_anonymous_args = 0
  55:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
 443              		.loc 1 55 13 is_stmt 0 view .LVU97
 444 0000 10B5     		push	{r4, lr}
 445              	.LCFI3:
 446              		.cfi_def_cfa_offset 8
 447              		.cfi_offset 4, -8
 448              		.cfi_offset 14, -4
 449 0002 0446     		mov	r4, r0
 450              	.LVL26:
 451              	.LBB72:
 452              	.LBI72:
  55:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
 453              		.loc 1 55 13 is_stmt 1 view .LVU98
 454              	.LBB73:
 455              	.LBI73:
  18:Inc/thermistor.hpp **** 
 456              		.loc 1 18 13 view .LVU99
 457              	.LBB74:
 458              	.LBI74:
 459              		.loc 2 8 13 view .LVU100
 460              		.loc 2 8 13 is_stmt 0 view .LVU101
 461              	.LBE74:
 462              	.LBE73:
 463              	.LBE72:
  55:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
 464              		.loc 1 55 13 view .LVU102
 465 0004 FFF7FEFF 		bl	_ZdlPv
 466              	.LVL27:
  55:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
ARM GAS  /tmp/ccIKyBPQ.s 			page 18


 467              		.loc 1 55 13 view .LVU103
 468 0008 2046     		mov	r0, r4
 469 000a 10BD     		pop	{r4, pc}
  55:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
 470              		.loc 1 55 13 view .LVU104
 471              		.cfi_endproc
 472              	.LFE6442:
 474              		.section	.text._ZN32OffboardThermistorCurrentLimiterD0Ev,"axG",%progbits,_ZN32OffboardThermistorCu
 475              		.align	1
 476              		.weak	_ZN32OffboardThermistorCurrentLimiterD0Ev
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	_ZN32OffboardThermistorCurrentLimiterD0Ev:
 483              	.LVL28:
 484              	.LFB6446:
 485              		.loc 1 78 13 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489              		.loc 1 78 13 is_stmt 0 view .LVU106
 490 0000 10B5     		push	{r4, lr}
 491              	.LCFI4:
 492              		.cfi_def_cfa_offset 8
 493              		.cfi_offset 4, -8
 494              		.cfi_offset 14, -4
 495 0002 0446     		mov	r4, r0
 496              	.LVL29:
 497              	.LBB75:
 498              	.LBI75:
 499              		.loc 1 78 13 is_stmt 1 view .LVU107
 500              	.LBB76:
 501              	.LBI76:
  18:Inc/thermistor.hpp **** 
 502              		.loc 1 18 13 view .LVU108
 503              	.LBB77:
 504              	.LBI77:
 505              		.loc 2 8 13 view .LVU109
 506              		.loc 2 8 13 is_stmt 0 view .LVU110
 507              	.LBE77:
 508              	.LBE76:
 509              	.LBE75:
 510              		.loc 1 78 13 view .LVU111
 511 0004 FFF7FEFF 		bl	_ZdlPv
 512              	.LVL30:
 513              		.loc 1 78 13 view .LVU112
 514 0008 2046     		mov	r0, r4
 515 000a 10BD     		pop	{r4, pc}
 516              		.loc 1 78 13 view .LVU113
 517              		.cfi_endproc
 518              	.LFE6446:
 520              		.section	.text._GLOBAL__sub_I_board_config,"ax",%progbits
 521              		.align	1
 522              		.syntax unified
 523              		.thumb
 524              		.thumb_func
ARM GAS  /tmp/ccIKyBPQ.s 			page 19


 525              		.fpu fpv4-sp-d16
 527              	_GLOBAL__sub_I_board_config:
 528              	.LFB6447:
 529              		.loc 3 289 1 is_stmt 1 view -0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 0
 532              		@ frame_needed = 0, uses_anonymous_args = 0
 533 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 534              	.LCFI5:
 535              		.cfi_def_cfa_offset 36
 536              		.cfi_offset 4, -36
 537              		.cfi_offset 5, -32
 538              		.cfi_offset 6, -28
 539              		.cfi_offset 7, -24
 540              		.cfi_offset 8, -20
 541              		.cfi_offset 9, -16
 542              		.cfi_offset 10, -12
 543              		.cfi_offset 11, -8
 544              		.cfi_offset 14, -4
 545 0004 2DED028B 		vpush.64	{d8}
 546              	.LCFI6:
 547              		.cfi_def_cfa_offset 44
 548              		.cfi_offset 80, -44
 549              		.cfi_offset 81, -40
 550 0008 85B0     		sub	sp, sp, #20
 551              	.LCFI7:
 552              		.cfi_def_cfa_offset 64
 553              	.LVL31:
 554              	.LBB95:
 555              	.LBI95:
 556              		.loc 3 289 1 view .LVU115
 557              	.LBB96:
 558              	.LBB97:
 559              	.LBI97:
 560              		.file 5 "Inc/controller.hpp"
   1:Inc/controller.hpp **** #ifndef __CONTROLLER_HPP
   2:Inc/controller.hpp **** #define __CONTROLLER_HPP
   3:Inc/controller.hpp **** 
   4:Inc/controller.hpp **** 
   5:Inc/controller.hpp **** #include "component.hpp"
   6:Inc/controller.hpp **** 
   7:Inc/controller.hpp **** #include "interfaces.hpp"
   8:Inc/controller.hpp **** 
   9:Inc/controller.hpp **** class Axis;
  10:Inc/controller.hpp **** 
  11:Inc/controller.hpp **** class Controller : public ODriveIntf::ControllerIntf{
  12:Inc/controller.hpp **** public:
  13:Inc/controller.hpp ****     typedef struct {
  14:Inc/controller.hpp ****         uint32_t index = 0;
  15:Inc/controller.hpp ****         float cogging_map[128];
  16:Inc/controller.hpp ****         bool pre_calibrated = false;
  17:Inc/controller.hpp ****         bool calib_anticogging = false;
  18:Inc/controller.hpp ****         float calib_pos_threshold = 1.0f;
  19:Inc/controller.hpp ****         float calib_vel_threshold = 1.0f;
  20:Inc/controller.hpp ****         float cogging_ratio = 1.0f;
  21:Inc/controller.hpp ****         bool anticogging_enabled = true;
  22:Inc/controller.hpp ****     } Anticogging_t;
ARM GAS  /tmp/ccIKyBPQ.s 			page 20


  23:Inc/controller.hpp **** 
  24:Inc/controller.hpp ****     struct Config_t {
 561              		.loc 5 24 12 view .LVU116
 562              	.LBB98:
 563 000a DFF8B082 		ldr	r8, .L31+124
 564 000e 0421     		movs	r1, #4
 565 0010 88F80010 		strb	r1, [r8]
 566 0014 4FF00109 		mov	r9, #1
 567 0018 88F80190 		strb	r9, [r8, #1]
 568 001c F3EE048A 		vmov.f32	s17, #2.0e+1
 569 0020 C8ED018A 		vstr.32	s17, [r8, #4]
 570 0024 864B     		ldr	r3, .L31
 571 0026 C8F80830 		str	r3, [r8, #8]	@ float
 572 002a 864C     		ldr	r4, .L31+4
 573 002c C8F80C40 		str	r4, [r8, #12]	@ float
 574 0030 0020     		movs	r0, #0
 575 0032 C8F81000 		str	r0, [r8, #16]	@ float
 576 0036 844B     		ldr	r3, .L31+8
 577 0038 C8F81430 		str	r3, [r8, #20]	@ float
 578 003c 4FF08042 		mov	r2, #1073741824
 579 0040 C8F81820 		str	r2, [r8, #24]	@ float
 580 0044 814B     		ldr	r3, .L31+12
 581 0046 C8F81C30 		str	r3, [r8, #28]	@ float
 582 004a 4FF07E53 		mov	r3, #1065353216
 583 004e C8F82030 		str	r3, [r8, #32]	@ float
 584 0052 C8F82440 		str	r4, [r8, #36]	@ float
 585 0056 0026     		movs	r6, #0
 586 0058 88F82860 		strb	r6, [r8, #40]
 587 005c C8F82C30 		str	r3, [r8, #44]	@ float
 588 0060 4FF48064 		mov	r4, #1024
 589 0064 C8F83040 		str	r4, [r8, #48]
 590 0068 C8F83400 		str	r0, [r8, #52]	@ float
 591 006c C8F83820 		str	r2, [r8, #56]	@ float
 592 0070 4FF07A50 		mov	r0, #1048576000
 593 0074 C8F83C00 		str	r0, [r8, #60]	@ float
 594              	.LVL32:
 595              	.LBB99:
 596              	.LBI99:
  22:Inc/controller.hpp **** 
 597              		.loc 5 22 7 view .LVU117
 598              	.LBB100:
 599 0078 C8F84060 		str	r6, [r8, #64]
 600 007c 88F84462 		strb	r6, [r8, #580]
 601 0080 88F84562 		strb	r6, [r8, #581]
 602 0084 C8F84832 		str	r3, [r8, #584]	@ float
 603 0088 C8F84C32 		str	r3, [r8, #588]	@ float
 604 008c C8F85032 		str	r3, [r8, #592]	@ float
 605 0090 88F85492 		strb	r9, [r8, #596]
 606              	.LVL33:
  22:Inc/controller.hpp **** 
 607              		.loc 5 22 7 is_stmt 0 view .LVU118
 608              	.LBE100:
 609              	.LBE99:
 610              		.loc 5 24 12 view .LVU119
 611 0094 DFF828A2 		ldr	r10, .L31+128
 612 0098 C8F858A2 		str	r10, [r8, #600]	@ float
 613 009c 88F85C62 		strb	r6, [r8, #604]
ARM GAS  /tmp/ccIKyBPQ.s 			page 21


 614 00a0 88F85D92 		strb	r9, [r8, #605]
 615 00a4 88F85E92 		strb	r9, [r8, #606]
 616 00a8 88F85F92 		strb	r9, [r8, #607]
 617 00ac FF20     		movs	r0, #255
 618 00ae 88F86002 		strb	r0, [r8, #608]
 619 00b2 C8F86432 		str	r3, [r8, #612]	@ float
 620 00b6 88F86802 		strb	r0, [r8, #616]
 621              	.LVL34:
 622              		.loc 5 24 12 view .LVU120
 623              	.LBE98:
 624              	.LBE97:
 625              	.LBB101:
 626              	.LBI101:
  61:Inc/motor.hpp ****         bool pre_calibrated = false; // can be set to true to indicate that all values here are val
 627              		.loc 4 61 12 is_stmt 1 view .LVU121
 628              	.LBB102:
 629 00ba 654D     		ldr	r5, .L31+16
 630 00bc 2E70     		strb	r6, [r5]
 631 00be 1520     		movs	r0, #21
 632 00c0 6860     		str	r0, [r5, #4]
 633 00c2 1020     		movs	r0, #16
 634 00c4 A860     		str	r0, [r5, #8]
 635 00c6 DFF8FCB1 		ldr	fp, .L31+132
 636 00ca C5F80CB0 		str	fp, [r5, #12]	@ float
 637 00ce C5F810A0 		str	r10, [r5, #16]	@ float
 638 00d2 6A61     		str	r2, [r5, #20]	@ float
 639 00d4 5F4A     		ldr	r2, .L31+20
 640 00d6 AA61     		str	r2, [r5, #24]	@ float
 641 00d8 5F4A     		ldr	r2, .L31+24
 642 00da EA61     		str	r2, [r5, #28]	@ float
 643 00dc 5F4A     		ldr	r2, .L31+28
 644 00de 2A62     		str	r2, [r5, #32]	@ float
 645 00e0 C5F82490 		str	r9, [r5, #36]
 646 00e4 85F82860 		strb	r6, [r5, #40]
 647 00e8 C5F82CA0 		str	r10, [r5, #44]	@ float
 648 00ec 4FF08242 		mov	r2, #1090519040
 649 00f0 2A63     		str	r2, [r5, #48]	@ float
 650 00f2 4FF0FF42 		mov	r2, #2139095040
 651 00f6 6A63     		str	r2, [r5, #52]	@ float
 652 00f8 C5F838B0 		str	fp, [r5, #56]	@ float
 653 00fc 5848     		ldr	r0, .L31+32
 654 00fe E863     		str	r0, [r5, #60]	@ float
 655 0100 9FED588A 		vldr.32	s16, .L31+36
 656 0104 85ED108A 		vstr.32	s16, [r5, #64]
 657 0108 5748     		ldr	r0, .L31+40
 658 010a 6864     		str	r0, [r5, #68]	@ float
 659 010c 5748     		ldr	r0, .L31+44
 660 010e A864     		str	r0, [r5, #72]	@ float
 661 0110 C5F84CA0 		str	r10, [r5, #76]	@ float
 662 0114 C5F850A0 		str	r10, [r5, #80]	@ float
 663 0118 85F85460 		strb	r6, [r5, #84]
 664 011c C5F858A0 		str	r10, [r5, #88]	@ float
 665 0120 EB65     		str	r3, [r5, #92]	@ float
 666 0122 85F82064 		strb	r6, [r5, #1056]
 667 0126 85F82164 		strb	r6, [r5, #1057]
 668 012a 05F22440 		addw	r0, r5, #1060
 669 012e 504C     		ldr	r4, .L31+48
ARM GAS  /tmp/ccIKyBPQ.s 			page 22


 670 0130 0460     		str	r4, [r0]	@ float
 671 0132 05F58560 		add	r0, r5, #1064
 672 0136 0260     		str	r2, [r0]	@ float
 673 0138 C5F82C64 		str	r6, [r5, #1068]
 674              	.LVL35:
  61:Inc/motor.hpp ****         bool pre_calibrated = false; // can be set to true to indicate that all values here are val
 675              		.loc 4 61 12 is_stmt 0 view .LVU122
 676              	.LBE102:
 677              	.LBE101:
 678              	.LBB103:
 679              	.LBI103:
  65:Inc/thermistor.hpp ****         float thermistor_poly_coeffs[num_coeffs_];
 680              		.loc 1 65 12 is_stmt 1 view .LVU123
 681              	.LBB104:
 682 013c 4D4F     		ldr	r7, .L31+52
 683 013e 3984     		strh	r1, [r7, #32]	@ movhi
 684 0140 C7F824B0 		str	fp, [r7, #36]	@ float
 685 0144 4C4A     		ldr	r2, .L31+56
 686 0146 BA62     		str	r2, [r7, #40]	@ float
 687 0148 87F82C90 		strb	r9, [r7, #44]
 688              	.LVL36:
  65:Inc/thermistor.hpp ****         float thermistor_poly_coeffs[num_coeffs_];
 689              		.loc 1 65 12 is_stmt 0 view .LVU124
 690              	.LBE104:
 691              	.LBE103:
 692              	.LBB105:
 693              	.LBI105:
 694              		.file 6 "Inc/axis.hpp"
   1:Inc/axis.hpp  **** #ifndef __AXIS_HPP
   2:Inc/axis.hpp  **** #define __AXIS_HPP
   3:Inc/axis.hpp  **** 
   4:Inc/axis.hpp  **** 
   5:Inc/axis.hpp  **** #include "task_timer.hpp"
   6:Inc/axis.hpp  **** #include <array>
   7:Inc/axis.hpp  **** #include "interfaces.hpp"
   8:Inc/axis.hpp  **** #include "open_loop_controller.hpp"
   9:Inc/axis.hpp  **** #include <functional>
  10:Inc/axis.hpp  **** #include "low_level.h"  // Add this for safety_critical_disarm_motor_pwm declaration
  11:Inc/axis.hpp  **** #include  "current_limiter.hpp"
  12:Inc/axis.hpp  **** #include "utils.hpp"
  13:Inc/axis.hpp  **** 
  14:Inc/axis.hpp  **** class Motor;
  15:Inc/axis.hpp  **** class Controller;
  16:Inc/axis.hpp  **** class Encoder;
  17:Inc/axis.hpp  **** class OpenLoopController;
  18:Inc/axis.hpp  **** class  OnboardThermistorCurrentLimiter;
  19:Inc/axis.hpp  **** class  OffboardThermistorCurrentLimiter;
  20:Inc/axis.hpp  **** class ThermistorCurrentLimiter;
  21:Inc/axis.hpp  **** 
  22:Inc/axis.hpp  **** class Axis : public ODriveIntf::AxisIntf{
  23:Inc/axis.hpp  **** public:
  24:Inc/axis.hpp  ****     struct LockinConfig_t {
  25:Inc/axis.hpp  ****         float current = 10.0f;           // [A]
  26:Inc/axis.hpp  ****         float ramp_time = 0.4f;          // [s]
  27:Inc/axis.hpp  ****         float ramp_distance = 1 * M_PI;  // [rad]
  28:Inc/axis.hpp  ****         float accel = 20.0f;     // [rad/s^2]
  29:Inc/axis.hpp  ****         float vel = 40.0f; // [rad/s]
ARM GAS  /tmp/ccIKyBPQ.s 			page 23


  30:Inc/axis.hpp  ****         float finish_distance = 100.0f;  // [rad]
  31:Inc/axis.hpp  ****         bool finish_on_vel = false;
  32:Inc/axis.hpp  ****         bool finish_on_distance = false;
  33:Inc/axis.hpp  ****         bool finish_on_enc_idx = false;
  34:Inc/axis.hpp  ****     };
  35:Inc/axis.hpp  ****     struct TaskTimes {
  36:Inc/axis.hpp  ****         TaskTimer thermistor_update;
  37:Inc/axis.hpp  ****         TaskTimer encoder_update;
  38:Inc/axis.hpp  ****         TaskTimer sensorless_estimator_update;
  39:Inc/axis.hpp  ****         TaskTimer endstop_update;
  40:Inc/axis.hpp  ****         TaskTimer can_heartbeat;
  41:Inc/axis.hpp  ****         TaskTimer controller_update;
  42:Inc/axis.hpp  ****         TaskTimer open_loop_controller_update;
  43:Inc/axis.hpp  ****         TaskTimer acim_estimator_update;
  44:Inc/axis.hpp  ****         TaskTimer motor_update;
  45:Inc/axis.hpp  ****         TaskTimer current_controller_update;
  46:Inc/axis.hpp  ****         TaskTimer dc_calib;
  47:Inc/axis.hpp  ****         TaskTimer current_sense;
  48:Inc/axis.hpp  ****         TaskTimer pwm_update;
  49:Inc/axis.hpp  ****     };
  50:Inc/axis.hpp  **** 
  51:Inc/axis.hpp  **** 
  52:Inc/axis.hpp  **** 
  53:Inc/axis.hpp  **** 
  54:Inc/axis.hpp  **** 
  55:Inc/axis.hpp  ****    enum ENCOS_ERRO
  56:Inc/axis.hpp  ****    {
  57:Inc/axis.hpp  ****       ENCOS_ERROR_NONE = 0,
  58:Inc/axis.hpp  ****       ENCOS_ERROR_OVER_TEMP = 1,
  59:Inc/axis.hpp  ****       ENCOS_ERROR_CURRENT_LIMIT_VIOLATION =2,
  60:Inc/axis.hpp  ****       ENCOS_ERROR_DC_BUS_UNDER_VOLTAGE =3,
  61:Inc/axis.hpp  ****       ENCOS_ERROR_ABS_SPI_COM_FAIL=4,
  62:Inc/axis.hpp  ****       ENCOS_ERROR_DC_BUS_OVER_VOLTAGE =6,
  63:Inc/axis.hpp  ****       ENCOS_ERROR_DRV_FAULT=7,
  64:Inc/axis.hpp  ****    };
  65:Inc/axis.hpp  **** 
  66:Inc/axis.hpp  **** 
  67:Inc/axis.hpp  **** 
  68:Inc/axis.hpp  ****     static constexpr uint32_t PARAM_LEN = 128;
  69:Inc/axis.hpp  ****     enum EXT_CONFIG_REG
  70:Inc/axis.hpp  ****     {
  71:Inc/axis.hpp  ****         EXT_CONFIG_REG_ENABLE_NOTCH_FILTER = 0,
  72:Inc/axis.hpp  ****         EXT_CONFIG_REG_ENABLE_DC_BUS_OVER_VOLTAGE_FILTER = 1,
  73:Inc/axis.hpp  ****         EXT_CONFIG_REG_ENABLE_DC_BUS_UNDER_VOLTAGE_FILTER = 2,
  74:Inc/axis.hpp  ****         EXT_CONFIG_REG_ENABLE_OVER_TEMP_FILTER = 3,
  75:Inc/axis.hpp  ****         EXT_CONFIG_REG_ENABLE_CURRENT_LIMIT_VIOLATION_FILTER = 4
  76:Inc/axis.hpp  ****     };
  77:Inc/axis.hpp  **** 
  78:Inc/axis.hpp  **** 
  79:Inc/axis.hpp  **** 
  80:Inc/axis.hpp  ****     static LockinConfig_t default_calibration();
  81:Inc/axis.hpp  ****     static LockinConfig_t default_sensorless();
  82:Inc/axis.hpp  ****     static LockinConfig_t default_lockin();
  83:Inc/axis.hpp  **** 
  84:Inc/axis.hpp  ****     struct Config_t {
 695              		.loc 6 84 12 is_stmt 1 view .LVU125
 696              	.LBB106:
ARM GAS  /tmp/ccIKyBPQ.s 			page 24


 697 014c 4B4C     		ldr	r4, .L31+60
 698 014e 2670     		strb	r6, [r4]
 699 0150 6670     		strb	r6, [r4, #1]
 700 0152 A670     		strb	r6, [r4, #2]
 701 0154 E670     		strb	r6, [r4, #3]
 702 0156 2671     		strb	r6, [r4, #4]
 703 0158 6671     		strb	r6, [r4, #5]
 704 015a A671     		strb	r6, [r4, #6]
 705 015c E671     		strb	r6, [r4, #7]
 706 015e 4FF06A52 		mov	r2, #981467136
 707 0162 A260     		str	r2, [r4, #8]	@ float
 708 0164 2673     		strb	r6, [r4, #12]
 709 0166 2361     		str	r3, [r4, #16]	@ float
 710 0168 84F81490 		strb	r9, [r4, #20]
 711 016c E682     		strh	r6, [r4, #22]	@ movhi
 712 016e 2683     		strh	r6, [r4, #24]	@ movhi
 713 0170 04F11C00 		add	r0, r4, #28
 714 0174 FFF7FEFF 		bl	_ZN4Axis19default_calibrationEv
 715              	.LVL37:
 716 0178 04F13800 		add	r0, r4, #56
 717 017c FFF7FEFF 		bl	_ZN4Axis18default_sensorlessEv
 718              	.LVL38:
 719              	.LBB107:
 720              	.LBI107:
  24:Inc/axis.hpp  ****         float current = 10.0f;           // [A]
 721              		.loc 6 24 12 view .LVU126
 722              	.LBB108:
 723 0180 C4F854A0 		str	r10, [r4, #84]	@ float
 724 0184 3E4B     		ldr	r3, .L31+64
 725 0186 A365     		str	r3, [r4, #88]	@ float
 726 0188 3E4B     		ldr	r3, .L31+68
 727 018a E365     		str	r3, [r4, #92]	@ float
 728 018c C4ED188A 		vstr.32	s17, [r4, #96]
 729 0190 3D4B     		ldr	r3, .L31+72
 730 0192 6366     		str	r3, [r4, #100]	@ float
 731 0194 84ED1A8A 		vstr.32	s16, [r4, #104]
 732 0198 84F86C60 		strb	r6, [r4, #108]
 733 019c 84F86D60 		strb	r6, [r4, #109]
 734 01a0 84F86E60 		strb	r6, [r4, #110]
 735              	.LVL39:
  24:Inc/axis.hpp  ****         float current = 10.0f;           // [A]
 736              		.loc 6 24 12 is_stmt 0 view .LVU127
 737              	.LBE108:
 738              	.LBE107:
 739              		.loc 6 84 12 view .LVU128
 740 01a4 C4F87090 		str	r9, [r4, #112]
 741 01a8 84F87460 		strb	r6, [r4, #116]
 742 01ac 6423     		movs	r3, #100
 743 01ae A367     		str	r3, [r4, #120]
 744 01b0 364B     		ldr	r3, .L31+76
 745 01b2 C4F88032 		str	r3, [r4, #640]	@ float
 746 01b6 364B     		ldr	r3, .L31+80
 747 01b8 C4F88432 		str	r3, [r4, #644]	@ float
 748 01bc C4F888B2 		str	fp, [r4, #648]	@ float
 749 01c0 84F88C62 		strb	r6, [r4, #652]
 750 01c4 C4F89062 		str	r6, [r4, #656]
 751              	.LVL40:
ARM GAS  /tmp/ccIKyBPQ.s 			page 25


 752              		.loc 6 84 12 view .LVU129
 753              	.LBE106:
 754              	.LBE105:
  38:Src/main_.cpp ****  Controller controller(controller_configs);
 755              		.loc 3 38 57 view .LVU130
 756 01c8 324A     		ldr	r2, .L31+84
 757 01ca 3349     		ldr	r1, .L31+88
 758 01cc 3348     		ldr	r0, .L31+92
 759 01ce FFF7FEFF 		bl	_ZN7EncoderC1ERK23EncoderHardwareConfig_tRNS_8Config_tE
 760              	.LVL41:
  39:Src/main_.cpp **** 
 761              		.loc 3 39 42 view .LVU131
 762 01d2 DFF8F4A0 		ldr	r10, .L31+136
 763 01d6 4146     		mov	r1, r8
 764 01d8 5046     		mov	r0, r10
 765 01da FFF7FEFF 		bl	_ZN10ControllerC1ERNS_8Config_tE
 766              	.LVL42:
  41:Src/main_.cpp ****  OffboardThermistorCurrentLimiter motor_thermistor(motor_thermistor_configs);
 767              		.loc 3 41 98 view .LVU132
 768 01de DFF8EC80 		ldr	r8, .L31+140
 769 01e2 2F4A     		ldr	r2, .L31+96
 770 01e4 2F49     		ldr	r1, .L31+100
 771 01e6 4046     		mov	r0, r8
 772 01e8 FFF7FEFF 		bl	_ZN31OnboardThermistorCurrentLimiterC1ERK26ThermistorHardwareConfig_tRNS_8Config_tE
 773              	.LVL43:
  41:Src/main_.cpp ****  OffboardThermistorCurrentLimiter motor_thermistor(motor_thermistor_configs);
 774              		.loc 3 41 34 view .LVU133
 775 01ec DFF8E0B0 		ldr	fp, .L31+144
 776 01f0 5A46     		mov	r2, fp
 777 01f2 2D49     		ldr	r1, .L31+104
 778 01f4 4046     		mov	r0, r8
 779 01f6 FFF7FEFF 		bl	__aeabi_atexit
 780              	.LVL44:
  42:Src/main_.cpp **** 
 781              		.loc 3 42 76 view .LVU134
 782 01fa DFF8D890 		ldr	r9, .L31+148
 783 01fe 3946     		mov	r1, r7
 784 0200 4846     		mov	r0, r9
 785 0202 FFF7FEFF 		bl	_ZN32OffboardThermistorCurrentLimiterC1ERNS_8Config_tE
 786              	.LVL45:
  42:Src/main_.cpp **** 
 787              		.loc 3 42 35 view .LVU135
 788 0206 5A46     		mov	r2, fp
 789 0208 2849     		ldr	r1, .L31+108
 790 020a 4846     		mov	r0, r9
 791 020c FFF7FEFF 		bl	__aeabi_atexit
 792              	.LVL46:
  44:Src/main_.cpp **** 
 793              		.loc 3 44 49 view .LVU136
 794 0210 274F     		ldr	r7, .L31+112
 795 0212 2A46     		mov	r2, r5
 796 0214 2749     		ldr	r1, .L31+116
 797 0216 3846     		mov	r0, r7
 798 0218 FFF7FEFF 		bl	_ZN5MotorC1ERK21MotorHardwareConfig_tRNS_8Config_tE
 799              	.LVL47:
  48:Src/main_.cpp **** 
 800              		.loc 3 48 60 view .LVU137
ARM GAS  /tmp/ccIKyBPQ.s 			page 26


 801 021c 0397     		str	r7, [sp, #12]
 802 021e CDF80890 		str	r9, [sp, #8]
 803 0222 CDF80480 		str	r8, [sp, #4]
 804 0226 CDF800A0 		str	r10, [sp]
 805 022a 1C4B     		ldr	r3, .L31+92
 806 022c 2246     		mov	r2, r4
 807 022e 3146     		mov	r1, r6
 808 0230 2148     		ldr	r0, .L31+120
 809 0232 FFF7FEFF 		bl	_ZN4AxisC1EiRNS_8Config_tER7EncoderR10ControllerR31OnboardThermistorCurrentLimiterR32OffboardTh
 810              	.LVL48:
  48:Src/main_.cpp **** 
 811              		.loc 3 48 60 view .LVU138
 812              	.LBE96:
 813              	.LBE95:
 814              		.loc 3 289 1 view .LVU139
 815 0236 05B0     		add	sp, sp, #20
 816              	.LCFI8:
 817              		.cfi_def_cfa_offset 44
 818              		@ sp needed
 819 0238 BDEC028B 		vldm	sp!, {d8}
 820              	.LCFI9:
 821              		.cfi_restore 80
 822              		.cfi_restore 81
 823              		.cfi_def_cfa_offset 36
 824 023c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 825              	.L32:
 826              		.align	2
 827              	.L31:
 828 0240 ABAA2A3E 		.word	1042983595
 829 0244 0AD7233C 		.word	1008981770
 830 0248 ABAAAA3E 		.word	1051372203
 831 024c 9A99993F 		.word	1067030938
 832 0250 00000000 		.word	.LANCHOR2
 833 0254 CDAF6638 		.word	946253773
 834 0258 295C8F3D 		.word	1032805417
 835 025c 0E2DB23D 		.word	1035087118
 836 0260 00803B45 		.word	1161527296
 837 0264 0000C842 		.word	1120403456
 838 0268 0000F042 		.word	1123024896
 839 026c C74B6B41 		.word	1097550791
 840 0270 000080FF 		.word	-8388608
 841 0274 00000000 		.word	.LANCHOR3
 842 0278 0000A042 		.word	1117782016
 843 027c 00000000 		.word	.LANCHOR4
 844 0280 CDCCCC3E 		.word	1053609165
 845 0284 DB0F4940 		.word	1078530011
 846 0288 00002042 		.word	1109393408
 847 028c 00004841 		.word	1095237632
 848 0290 00009041 		.word	1099956224
 849 0294 00000000 		.word	.LANCHOR5
 850 0298 00000000 		.word	.LANCHOR6
 851 029c 00000000 		.word	.LANCHOR7
 852 02a0 00000000 		.word	.LANCHOR9
 853 02a4 00000000 		.word	.LANCHOR10
 854 02a8 00000000 		.word	_ZN31OnboardThermistorCurrentLimiterD1Ev
 855 02ac 00000000 		.word	_ZN32OffboardThermistorCurrentLimiterD1Ev
 856 02b0 00000000 		.word	.LANCHOR14
ARM GAS  /tmp/ccIKyBPQ.s 			page 27


 857 02b4 00000000 		.word	.LANCHOR13
 858 02b8 00000000 		.word	.LANCHOR15
 859 02bc 00000000 		.word	.LANCHOR1
 860 02c0 00002041 		.word	1092616192
 861 02c4 00007042 		.word	1114636288
 862 02c8 00000000 		.word	.LANCHOR8
 863 02cc 00000000 		.word	.LANCHOR11
 864 02d0 00000000 		.word	__dso_handle
 865 02d4 00000000 		.word	.LANCHOR12
 866              		.cfi_endproc
 867              	.LFE6447:
 869              		.section	.init_array,"aw",%init_array
 870              		.align	2
 871 0000 00000000 		.word	_GLOBAL__sub_I_board_config(target1)
 872              		.global	motor_runtime
 873              		.global	motor_params
 874              		.global	odCAN
 875              		.global	axis
 876              		.global	motor
 877              		.global	motor_thermistor
 878              		.global	fet_thermistor
 879              		.global	controller
 880              		.global	encoder
 881              		.global	thermistor_hardware_config
 882              		.global	motor_hardware_config
 883              		.global	encoder_hardware_config
 884              		.global	axis_configs
 885              		.global	motor_thermistor_configs
 886              		.global	fet_thermistor_configs
 887              		.global	motor_configs
 888              		.global	controller_configs
 889              		.global	encoder_configs
 890              		.global	can_config
 891              		.global	current_meas_period
 892              		.global	system_stats
 893              		.global	board_config
 894              		.section	.bss.axis,"aw",%nobits
 895              		.align	3
 896              		.set	.LANCHOR15,. + 0
 899              	axis:
 900 0000 00000000 		.space	488
 900      00000000 
 900      00000000 
 900      00000000 
 900      00000000 
 901              		.section	.bss.axis_configs,"aw",%nobits
 902              		.align	2
 903              		.set	.LANCHOR4,. + 0
 906              	axis_configs:
 907 0000 00000000 		.space	660
 907      00000000 
 907      00000000 
 907      00000000 
 907      00000000 
 908              		.section	.bss.controller,"aw",%nobits
 909              		.align	2
 910              		.set	.LANCHOR8,. + 0
ARM GAS  /tmp/ccIKyBPQ.s 			page 28


 913              	controller:
 914 0000 00000000 		.space	92
 914      00000000 
 914      00000000 
 914      00000000 
 914      00000000 
 915              		.section	.bss.controller_configs,"aw",%nobits
 916              		.align	2
 917              		.set	.LANCHOR1,. + 0
 920              	controller_configs:
 921 0000 00000000 		.space	624
 921      00000000 
 921      00000000 
 921      00000000 
 921      00000000 
 922              		.section	.bss.encoder,"aw",%nobits
 923              		.align	2
 924              		.set	.LANCHOR7,. + 0
 927              	encoder:
 928 0000 00000000 		.space	244
 928      00000000 
 928      00000000 
 928      00000000 
 928      00000000 
 929              		.section	.bss.encoder_hardware_config,"aw",%nobits
 930              		.align	2
 931              		.set	.LANCHOR6,. + 0
 934              	encoder_hardware_config:
 935 0000 00000000 		.space	8
 935      00000000 
 936              		.section	.bss.fet_thermistor,"aw",%nobits
 937              		.align	2
 938              		.set	.LANCHOR11,. + 0
 941              	fet_thermistor:
 942 0000 00000000 		.space	60
 942      00000000 
 942      00000000 
 942      00000000 
 942      00000000 
 943              		.section	.bss.motor,"aw",%nobits
 944              		.align	2
 945              		.set	.LANCHOR14,. + 0
 948              	motor:
 949 0000 00000000 		.space	988
 949      00000000 
 949      00000000 
 949      00000000 
 949      00000000 
 950              		.section	.bss.motor_configs,"aw",%nobits
 951              		.align	2
 952              		.set	.LANCHOR2,. + 0
 955              	motor_configs:
 956 0000 00000000 		.space	1072
 956      00000000 
 956      00000000 
 956      00000000 
 956      00000000 
ARM GAS  /tmp/ccIKyBPQ.s 			page 29


 957              		.section	.bss.motor_hardware_config,"aw",%nobits
 958              		.align	2
 959              		.set	.LANCHOR13,. + 0
 962              	motor_hardware_config:
 963 0000 00000000 		.space	12
 963      00000000 
 963      00000000 
 964              		.section	.bss.motor_params,"aw",%nobits
 965              		.align	2
 968              	motor_params:
 969 0000 00000000 		.space	48
 969      00000000 
 969      00000000 
 969      00000000 
 969      00000000 
 970              		.section	.bss.motor_runtime,"aw",%nobits
 971              		.align	2
 974              	motor_runtime:
 975 0000 00000000 		.space	32
 975      00000000 
 975      00000000 
 975      00000000 
 975      00000000 
 976              		.section	.bss.motor_thermistor,"aw",%nobits
 977              		.align	2
 978              		.set	.LANCHOR12,. + 0
 981              	motor_thermistor:
 982 0000 00000000 		.space	60
 982      00000000 
 982      00000000 
 982      00000000 
 982      00000000 
 983              		.section	.bss.motor_thermistor_configs,"aw",%nobits
 984              		.align	2
 985              		.set	.LANCHOR3,. + 0
 988              	motor_thermistor_configs:
 989 0000 00000000 		.space	52
 989      00000000 
 989      00000000 
 989      00000000 
 989      00000000 
 990              		.section	.bss.odCAN,"aw",%nobits
 991              		.align	2
 994              	odCAN:
 995 0000 00000000 		.space	4
 996              		.section	.bss.system_stats,"aw",%nobits
 997              		.align	2
 998              		.set	.LANCHOR0,. + 0
 1001              	system_stats:
 1002 0000 00000000 		.space	76
 1002      00000000 
 1002      00000000 
 1002      00000000 
 1002      00000000 
 1003              		.section	.data.board_config,"aw"
 1004              		.align	2
 1007              	board_config:
ARM GAS  /tmp/ccIKyBPQ.s 			page 30


 1008 0000 00       		.byte	0
 1009 0001 01       		.byte	1
 1010 0002 00       		.byte	0
 1011 0003 01       		.byte	1
 1012 0004 00000000 		.word	0
 1013 0008 D7A3F03E 		.word	1055957975
 1014 000c 00000041 		.word	1090519040
 1015 0010 67668642 		.word	1116104295
 1016 0014 00       		.byte	0
 1017 0015 000000   		.space	3
 1018 0018 15AE6F42 		.word	1114615317
 1019 001c 15AE6F42 		.word	1114615317
 1020 0020 0000807F 		.word	2139095040
 1021 0024 BD3786B5 		.word	-1249495107
 1022 0028 00C20100 		.word	115200
 1023              		.section	.data.can_config,"aw"
 1024              		.align	2
 1027              	can_config:
 1028 0000 40420F00 		.word	1000000
 1029 0004 01       		.byte	1
 1030 0005 000000   		.space	3
 1031              		.section	.data.current_meas_period,"aw"
 1032              		.align	2
 1035              	current_meas_period:
 1036 0000 17B75138 		.word	944879383
 1037              		.section	.data.encoder_configs,"aw"
 1038              		.align	2
 1039              		.set	.LANCHOR5,. + 0
 1042              	encoder_configs:
 1043 0000 0301     		.short	259
 1044 0002 00       		.byte	0
 1045 0003 00       		.byte	0
 1046 0004 01       		.byte	1
 1047 0005 01       		.byte	1
 1048 0006 0000     		.space	2
 1049 0008 00000100 		.word	65536
 1050 000c 00000000 		.word	0
 1051 0010 00000000 		.word	0
 1052 0014 01       		.byte	1
 1053 0015 000000   		.space	3
 1054 0018 6F12033B 		.word	990057071
 1055 001c DB0F4942 		.word	1112084443
 1056 0020 DB0F4941 		.word	1095307227
 1057 0024 00007A45 		.word	1165623296
 1058 0028 00       		.byte	0
 1059 0029 00       		.byte	0
 1060 002a 00       		.byte	0
 1061 002b 00       		.space	1
 1062 002c 0100     		.short	1
 1063 002e 0300     		.short	3
 1064 0030 0400     		.short	4
 1065 0032 0200     		.short	2
 1066 0034 00000400 		.word	262144
 1067 0038 00000000 		.word	0
 1068 003c 01000000 		.word	1
 1069 0040 00000000 		.word	0
 1070              		.section	.data.fet_thermistor_configs,"aw"
ARM GAS  /tmp/ccIKyBPQ.s 			page 31


 1071              		.align	2
 1072              		.set	.LANCHOR9,. + 0
 1075              	fet_thermistor_configs:
 1076 0000 0000C842 		.word	1120403456
 1077 0004 0000F042 		.word	1123024896
 1078 0008 01       		.byte	1
 1079 0009 000000   		.space	3
 1080              		.section	.data.thermistor_hardware_config,"aw"
 1081              		.align	2
 1082              		.set	.LANCHOR10,. + 0
 1085              	thermistor_hardware_config:
 1086 0000 00000000 		.word	_ZL26fet_thermistor_poly_coeffs
 1087 0004 00000000 		.word	_ZL27fet_thermistor_poly_coeffs2
 1088 0008 00000000 		.space	12
 1088      00000000 
 1088      00000000 
 1089              		.section	.rodata._ZL26fet_thermistor_poly_coeffs,"a"
 1090              		.align	2
 1093              	_ZL26fet_thermistor_poly_coeffs:
 1094 0000 14CE8043 		.word	1132514836
 1095 0004 3D0AA2C3 		.word	-1012790723
 1096 0008 852B8143 		.word	1132538757
 1097 000c C3F5B8C1 		.word	-1044843069
 1098              		.section	.rodata._ZL27fet_thermistor_poly_coeffs2,"a"
 1099              		.align	2
 1102              	_ZL27fet_thermistor_poly_coeffs2:
 1103 0000 7B74D843 		.word	1138259067
 1104 0004 B88E1EC4 		.word	-1004630344
 1105 0008 77FEBF43 		.word	1136655991
 1106 000c E17A79C2 		.word	-1032226079
 1107              		.text
 1108              	.Letext0:
 1109              		.file 7 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/lib/gcc/arm-none-eabi/10.2.1/include/stddef
 1110              		.file 8 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_type
 1111              		.file 9 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 1112              		.file 10 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdint.h"
 1113              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1114              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 1115              		.file 13 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 1116              		.file 14 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g4xx.h"
 1117              		.file 15 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 1118              		.file 16 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
 1119              		.file 17 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_fdcan.h"
 1120              		.file 18 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_spi.h"
 1121              		.file 19 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_tim.h"
 1122              		.file 20 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/type_trai
 1123              		.file 21 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-
 1124              		.file 22 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/debug/deb
 1125              		.file 23 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdlib"
 1126              		.file 24 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/algo
 1127              		.file 25 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/exce
 1128              		.file 26 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_
 1129              		.file 27 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 1130              		.file 28 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant"
 1131              		.file 29 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/enab
 1132              		.file 30 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional"
 1133              		.file 31 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/functiona
ARM GAS  /tmp/ccIKyBPQ.s 			page 32


 1134              		.file 32 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstring"
 1135              		.file 33 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cwchar"
 1136              		.file 34 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/clocale"
 1137              		.file 35 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdint"
 1138              		.file 36 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/string_vi
 1139              		.file 37 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/basi
 1140              		.file 38 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdio"
 1141              		.file 39 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath"
 1142              		.file 40 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_
 1143              		.file 41 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 1144              		.file 42 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array"
 1145              		.file 43 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 1146              		.file 44 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/refw
 1147              		.file 45 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pars
 1148              		.file 46 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pred
 1149              		.file 47 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_types.h"
 1150              		.file 48 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/reent.h"
 1151              		.file 49 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/lock.h"
 1152              		.file 50 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdlib.h"
 1153              		.file 51 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/pstl/exec
 1154              		.file 52 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/string.h"
 1155              		.file 53 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/lib/gcc/arm-none-eabi/10.2.1/include/stdar
 1156              		.file 54 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/wchar.h"
 1157              		.file 55 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/locale.h"
 1158              		.file 56 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdio.h"
 1159              		.file 57 "Inc/can_helpers.hpp"
 1160              		.file 58 "Inc/interfaces.hpp"
 1161              		.file 59 "Inc/interface_can.hpp"
 1162              		.file 60 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 1163              		.file 61 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 1164              		.file 62 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 1165              		.file 63 "Inc/mc_type.h"
 1166              		.file 64 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/math.h"
 1167              		.file 65 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/math.h"
 1168              		.file 66 "Inc/main.h"
 1169              		.file 67 "Inc/task_timer.hpp"
 1170              		.file 68 "Inc/component.hpp"
 1171              		.file 69 "Inc/utils.hpp"
 1172              		.file 70 "Inc/encoder.hpp"
 1173              		.file 71 "Inc/main_.hpp"
 1174              		.file 72 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/stdlib.h"
 1175              		.file 73 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new"
 1176              		.file 74 "Inc/low_level.h"
 1177              		.file 75 "<built-in>"
ARM GAS  /tmp/ccIKyBPQ.s 			page 33


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main_.cpp
     /tmp/ccIKyBPQ.s:18     .text._ZN31OnboardThermistorCurrentLimiterD2Ev:0000000000000000 $t
     /tmp/ccIKyBPQ.s:26     .text._ZN31OnboardThermistorCurrentLimiterD2Ev:0000000000000000 _ZN31OnboardThermistorCurrentLimiterD2Ev
     /tmp/ccIKyBPQ.s:26     .text._ZN31OnboardThermistorCurrentLimiterD2Ev:0000000000000000 _ZN31OnboardThermistorCurrentLimiterD1Ev
     /tmp/ccIKyBPQ.s:53     .text._ZN32OffboardThermistorCurrentLimiterD2Ev:0000000000000000 $t
     /tmp/ccIKyBPQ.s:60     .text._ZN32OffboardThermistorCurrentLimiterD2Ev:0000000000000000 _ZN32OffboardThermistorCurrentLimiterD2Ev
     /tmp/ccIKyBPQ.s:60     .text._ZN32OffboardThermistorCurrentLimiterD2Ev:0000000000000000 _ZN32OffboardThermistorCurrentLimiterD1Ev
     /tmp/ccIKyBPQ.s:85     .text._Z18save_configurationv:0000000000000000 $t
     /tmp/ccIKyBPQ.s:92     .text._Z18save_configurationv:0000000000000000 _Z18save_configurationv
     /tmp/ccIKyBPQ.s:113    .text.load_configuration:0000000000000000 load_configuration
     /tmp/ccIKyBPQ.s:125    .text._Z19erase_configurationv:0000000000000000 $t
     /tmp/ccIKyBPQ.s:132    .text._Z19erase_configurationv:0000000000000000 _Z19erase_configurationv
     /tmp/ccIKyBPQ.s:152    .text.construct_objects:0000000000000000 construct_objects
     /tmp/ccIKyBPQ.s:164    .text.vApplicationStackOverflowHook:0000000000000000 $t
     /tmp/ccIKyBPQ.s:171    .text.vApplicationStackOverflowHook:0000000000000000 vApplicationStackOverflowHook
     /tmp/ccIKyBPQ.s:205    .text.vApplicationStackOverflowHook:0000000000000014 $d
     /tmp/ccIKyBPQ.s:210    .text.vApplicationIdleHook:0000000000000000 $t
     /tmp/ccIKyBPQ.s:217    .text.vApplicationIdleHook:0000000000000000 vApplicationIdleHook
     /tmp/ccIKyBPQ.s:278    .text.vApplicationIdleHook:000000000000002c $d
     /tmp/ccIKyBPQ.s:284    .text.odrive_main:0000000000000000 $t
     /tmp/ccIKyBPQ.s:291    .text.odrive_main:0000000000000000 odrive_main
     /tmp/ccIKyBPQ.s:423    .text.odrive_main:0000000000000080 $d
     /tmp/ccIKyBPQ.s:429    .text._ZN31OnboardThermistorCurrentLimiterD0Ev:0000000000000000 $t
     /tmp/ccIKyBPQ.s:436    .text._ZN31OnboardThermistorCurrentLimiterD0Ev:0000000000000000 _ZN31OnboardThermistorCurrentLimiterD0Ev
     /tmp/ccIKyBPQ.s:475    .text._ZN32OffboardThermistorCurrentLimiterD0Ev:0000000000000000 $t
     /tmp/ccIKyBPQ.s:482    .text._ZN32OffboardThermistorCurrentLimiterD0Ev:0000000000000000 _ZN32OffboardThermistorCurrentLimiterD0Ev
     /tmp/ccIKyBPQ.s:521    .text._GLOBAL__sub_I_board_config:0000000000000000 $t
     /tmp/ccIKyBPQ.s:527    .text._GLOBAL__sub_I_board_config:0000000000000000 _GLOBAL__sub_I_board_config
     /tmp/ccIKyBPQ.s:828    .text._GLOBAL__sub_I_board_config:0000000000000240 $d
     /tmp/ccIKyBPQ.s:870    .init_array:0000000000000000 $d
     /tmp/ccIKyBPQ.s:974    .bss.motor_runtime:0000000000000000 motor_runtime
     /tmp/ccIKyBPQ.s:968    .bss.motor_params:0000000000000000 motor_params
     /tmp/ccIKyBPQ.s:994    .bss.odCAN:0000000000000000 odCAN
     /tmp/ccIKyBPQ.s:899    .bss.axis:0000000000000000 axis
     /tmp/ccIKyBPQ.s:948    .bss.motor:0000000000000000 motor
     /tmp/ccIKyBPQ.s:981    .bss.motor_thermistor:0000000000000000 motor_thermistor
     /tmp/ccIKyBPQ.s:941    .bss.fet_thermistor:0000000000000000 fet_thermistor
     /tmp/ccIKyBPQ.s:913    .bss.controller:0000000000000000 controller
     /tmp/ccIKyBPQ.s:927    .bss.encoder:0000000000000000 encoder
     /tmp/ccIKyBPQ.s:1085   .data.thermistor_hardware_config:0000000000000000 thermistor_hardware_config
     /tmp/ccIKyBPQ.s:962    .bss.motor_hardware_config:0000000000000000 motor_hardware_config
     /tmp/ccIKyBPQ.s:934    .bss.encoder_hardware_config:0000000000000000 encoder_hardware_config
     /tmp/ccIKyBPQ.s:906    .bss.axis_configs:0000000000000000 axis_configs
     /tmp/ccIKyBPQ.s:988    .bss.motor_thermistor_configs:0000000000000000 motor_thermistor_configs
     /tmp/ccIKyBPQ.s:1075   .data.fet_thermistor_configs:0000000000000000 fet_thermistor_configs
     /tmp/ccIKyBPQ.s:955    .bss.motor_configs:0000000000000000 motor_configs
     /tmp/ccIKyBPQ.s:920    .bss.controller_configs:0000000000000000 controller_configs
     /tmp/ccIKyBPQ.s:1042   .data.encoder_configs:0000000000000000 encoder_configs
     /tmp/ccIKyBPQ.s:1027   .data.can_config:0000000000000000 can_config
     /tmp/ccIKyBPQ.s:1035   .data.current_meas_period:0000000000000000 current_meas_period
     /tmp/ccIKyBPQ.s:1001   .bss.system_stats:0000000000000000 system_stats
     /tmp/ccIKyBPQ.s:1007   .data.board_config:0000000000000000 board_config
     /tmp/ccIKyBPQ.s:895    .bss.axis:0000000000000000 $d
     /tmp/ccIKyBPQ.s:902    .bss.axis_configs:0000000000000000 $d
     /tmp/ccIKyBPQ.s:909    .bss.controller:0000000000000000 $d
     /tmp/ccIKyBPQ.s:916    .bss.controller_configs:0000000000000000 $d
ARM GAS  /tmp/ccIKyBPQ.s 			page 34


     /tmp/ccIKyBPQ.s:923    .bss.encoder:0000000000000000 $d
     /tmp/ccIKyBPQ.s:930    .bss.encoder_hardware_config:0000000000000000 $d
     /tmp/ccIKyBPQ.s:937    .bss.fet_thermistor:0000000000000000 $d
     /tmp/ccIKyBPQ.s:944    .bss.motor:0000000000000000 $d
     /tmp/ccIKyBPQ.s:951    .bss.motor_configs:0000000000000000 $d
     /tmp/ccIKyBPQ.s:958    .bss.motor_hardware_config:0000000000000000 $d
     /tmp/ccIKyBPQ.s:965    .bss.motor_params:0000000000000000 $d
     /tmp/ccIKyBPQ.s:971    .bss.motor_runtime:0000000000000000 $d
     /tmp/ccIKyBPQ.s:977    .bss.motor_thermistor:0000000000000000 $d
     /tmp/ccIKyBPQ.s:984    .bss.motor_thermistor_configs:0000000000000000 $d
     /tmp/ccIKyBPQ.s:991    .bss.odCAN:0000000000000000 $d
     /tmp/ccIKyBPQ.s:997    .bss.system_stats:0000000000000000 $d
     /tmp/ccIKyBPQ.s:1004   .data.board_config:0000000000000000 $d
     /tmp/ccIKyBPQ.s:1024   .data.can_config:0000000000000000 $d
     /tmp/ccIKyBPQ.s:1032   .data.current_meas_period:0000000000000000 $d
     /tmp/ccIKyBPQ.s:1038   .data.encoder_configs:0000000000000000 $d
     /tmp/ccIKyBPQ.s:1071   .data.fet_thermistor_configs:0000000000000000 $d
     /tmp/ccIKyBPQ.s:1081   .data.thermistor_hardware_config:0000000000000000 $d
     /tmp/ccIKyBPQ.s:1093   .rodata._ZL26fet_thermistor_poly_coeffs:0000000000000000 _ZL26fet_thermistor_poly_coeffs
     /tmp/ccIKyBPQ.s:1102   .rodata._ZL27fet_thermistor_poly_coeffs2:0000000000000000 _ZL27fet_thermistor_poly_coeffs2
     /tmp/ccIKyBPQ.s:1090   .rodata._ZL26fet_thermistor_poly_coeffs:0000000000000000 $d
     /tmp/ccIKyBPQ.s:1099   .rodata._ZL27fet_thermistor_poly_coeffs2:0000000000000000 $d
                           .group:0000000000000000 _ZN31OnboardThermistorCurrentLimiterD5Ev
                           .group:0000000000000000 _ZN32OffboardThermistorCurrentLimiterD5Ev

UNDEFINED SYMBOLS
safety_critical_disarm_motor_pwm
safety_critical_disarm_brake_resistor
axes
_ZN24ThermistorCurrentLimiter6updateEv
_ZN4Axis9do_checksEv
start_general_purpose_adc
pwm_in_init
_ZN5Motor13DRV8301_setupEv
_ZN7Encoder5setupEv
_ZN4Axis5setupEv
start_adc_pwm
osDelay
_ZN4Axis12start_threadEv
start_analog_thread
_ZN7Encoder19abs_spi_cs_pin_initEv
_ZdlPv
_ZN4Axis19default_calibrationEv
_ZN4Axis18default_sensorlessEv
_ZN7EncoderC1ERK23EncoderHardwareConfig_tRNS_8Config_tE
_ZN10ControllerC1ERNS_8Config_tE
_ZN31OnboardThermistorCurrentLimiterC1ERK26ThermistorHardwareConfig_tRNS_8Config_tE
__aeabi_atexit
_ZN32OffboardThermistorCurrentLimiterC1ERNS_8Config_tE
_ZN5MotorC1ERK21MotorHardwareConfig_tRNS_8Config_tE
_ZN4AxisC1EiRNS_8Config_tER7EncoderR10ControllerR31OnboardThermistorCurrentLimiterR32OffboardThermistorCurrentLimiterR5Motor
__dso_handle
