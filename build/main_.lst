ARM GAS  /tmp/ccjRbsN5.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"main_.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._ZNSt14numeric_limitsIfE8infinityEv,"axG",%progbits,_ZNSt14numeric_limitsIfE8infini
  18              		.align	1
  19              		.weak	_ZNSt14numeric_limitsIfE8infinityEv
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	_ZNSt14numeric_limitsIfE8infinityEv:
  27              	.LFB765:
  28              		.file 1 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // The template and inlines for the numeric_limits classes. -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // Copyright (C) 1999-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** /** @file include/limits
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  *  This is a Standard C++ Library header.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  */
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // Note: this is not a conforming implementation.
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // Written by Gabriel Dos Reis <gdr@codesourcery.com>
ARM GAS  /tmp/ccjRbsN5.s 			page 2


  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // ISO 14882:1998
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // 18.2.1
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #ifndef _GLIBCXX_NUMERIC_LIMITS
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #define _GLIBCXX_NUMERIC_LIMITS 1
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #pragma GCC system_header
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #include <bits/c++config.h>
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // The numeric_limits<> traits document implementation-defined aspects
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // of fundamental arithmetic data types (integers and floating points).
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // From Standard C++ point of view, there are 14 such types:
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //   * integers
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //         bool							(1)
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //         char, signed char, unsigned char, wchar_t            (4)
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //         short, unsigned short				(2)
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //         int, unsigned					(2)
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //         long, unsigned long					(2)
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //   * floating points
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //         float						(1)
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //         double						(1)
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //         long double						(1)
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // GNU C++ understands (where supported by the host C-library)
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //   * integer
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //         long long, unsigned long long			(2)
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // which brings us to 16 fundamental arithmetic data types in GNU C++.
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // Since a numeric_limits<> is a bit tricky to get right, we rely on
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // an interface composed of macros which should be defined in config/os
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // or config/cpu when they differ from the generic (read arbitrary)
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // definitions given here.
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // These values can be overridden in the target configuration file.
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // The default values are appropriate for many 32-bit targets.
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // GCC only intrinsically supports modulo integral types.  The only remaining
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // integral exceptional values is division by zero.  Only targets that do not
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // signal division by zero in some "hard to ignore" way should use false.
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #ifndef __glibcxx_integral_traps
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** # define __glibcxx_integral_traps true
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // float
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** //
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // Default values.  Should be overridden in configuration files if necessary.
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
ARM GAS  /tmp/ccjRbsN5.s 			page 3


  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #ifndef __glibcxx_float_has_denorm_loss
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #  define __glibcxx_float_has_denorm_loss false
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #ifndef __glibcxx_float_traps
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #  define __glibcxx_float_traps false
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #ifndef __glibcxx_float_tinyness_before
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #  define __glibcxx_float_tinyness_before false
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // double
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // Default values.  Should be overridden in configuration files if necessary.
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #ifndef __glibcxx_double_has_denorm_loss
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #  define __glibcxx_double_has_denorm_loss false
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #ifndef __glibcxx_double_traps
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #  define __glibcxx_double_traps false
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #ifndef __glibcxx_double_tinyness_before
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #  define __glibcxx_double_tinyness_before false
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // long double
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // Default values.  Should be overridden in configuration files if necessary.
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #ifndef __glibcxx_long_double_has_denorm_loss
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #  define __glibcxx_long_double_has_denorm_loss false
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #ifndef __glibcxx_long_double_traps
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #  define __glibcxx_long_double_traps false
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #ifndef __glibcxx_long_double_tinyness_before
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #  define __glibcxx_long_double_tinyness_before false
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // You should not need to define any macros below this point.
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #define __glibcxx_signed_b(T,B)	((T)(-1) < 0)
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #define __glibcxx_min_b(T,B)					\
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   (__glibcxx_signed_b (T,B) ? -__glibcxx_max_b (T,B) - 1 : (T)0)
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #define __glibcxx_max_b(T,B)						\
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   (__glibcxx_signed_b (T,B) ?						\
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    (((((T)1 << (__glibcxx_digits_b (T,B) - 1)) - 1) << 1) + 1) : ~(T)0)
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #define __glibcxx_digits_b(T,B)				\
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   (B - __glibcxx_signed_b (T,B))
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** // The fraction 643/2136 approximates log10(2) to 7 significant digits.
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #define __glibcxx_digits10_b(T,B)		\
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   (__glibcxx_digits_b (T,B) * 643L / 2136)
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #define __glibcxx_signed(T) \
ARM GAS  /tmp/ccjRbsN5.s 			page 4


 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   __glibcxx_signed_b (T, sizeof(T) * __CHAR_BIT__)
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #define __glibcxx_min(T) \
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   __glibcxx_min_b (T, sizeof(T) * __CHAR_BIT__)
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #define __glibcxx_max(T) \
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   __glibcxx_max_b (T, sizeof(T) * __CHAR_BIT__)
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #define __glibcxx_digits(T) \
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   __glibcxx_digits_b (T, sizeof(T) * __CHAR_BIT__)
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #define __glibcxx_digits10(T) \
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   __glibcxx_digits10_b (T, sizeof(T) * __CHAR_BIT__)
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #define __glibcxx_max_digits10(T) \
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   (2 + (T) * 643L / 2136)
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** namespace std _GLIBCXX_VISIBILITY(default)
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** {
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /**
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *  @brief Describes the rounding style for floating-point types.
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *  This is used in the std::numeric_limits class.
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   */
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   enum float_round_style
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   {
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     round_indeterminate       = -1,    /// Intermediate.
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     round_toward_zero         = 0,     /// To zero.
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     round_to_nearest          = 1,     /// To the nearest representable value.
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     round_toward_infinity     = 2,     /// To infinity.
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     round_toward_neg_infinity = 3      /// To negative infinity.
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   };
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /**
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *  @brief Describes the denormalization for floating-point types.
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *  These values represent the presence or absence of a variable number
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *  of exponent bits.  This type is used in the std::numeric_limits class.
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   */
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   enum float_denorm_style
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   {
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /// Indeterminate at compile time whether denormalized values are allowed.
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     denorm_indeterminate = -1,
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /// The type does not allow denormalized values.
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     denorm_absent        = 0,
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /// The type allows denormalized values.
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     denorm_present       = 1
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   };
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /**
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *  @brief Part of std::numeric_limits.
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *  The @c static @c const members are usable as integral constant
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *  expressions.
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *  @note This is a separate class for purposes of efficiency; you
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *        should only access these members as part of an instantiation
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *        of the std::numeric_limits class.
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   */
ARM GAS  /tmp/ccjRbsN5.s 			page 5


 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   struct __numeric_limits_base
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   {
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** This will be true for all fundamental types (which have
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	specializations), and false for everything else.  */
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR bool is_specialized = false;
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** The number of @c radix digits that be represented without change:  for
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	integer types, the number of non-sign bits in the mantissa; for
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	floating types, the number of @c radix digits in the mantissa.  */
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR int digits = 0;
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** The number of base 10 digits that can be represented without change. */
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR int digits10 = 0;
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** The number of base 10 digits required to ensure that values which
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	differ are always differentiated.  */
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static constexpr int max_digits10 = 0;
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** True if the type is signed.  */
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** True if the type is integer.  */
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** True if the type uses an exact representation. All integer types are
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	exact, but not all exact types are integer.  For example, rational and
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	fixed-exponent representations are exact but not integer. */
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** For integer types, specifies the base of the representation.  For
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	floating types, specifies the base of the exponent representation.  */
 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR int radix = 0;
 236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** The minimum negative integer such that @c radix raised to the power of
 238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	(one less than that integer) is a normalized floating point number.  */
 239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
 240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** The minimum negative integer such that 10 raised to that power is in
 242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	the range of normalized floating point numbers.  */
 243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
 244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** The maximum positive integer such that @c radix raised to the power of
 246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	(one less than that integer) is a representable finite floating point
 247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	number.  */
 248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
 249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** The maximum positive integer such that 10 raised to that power is in
 251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	the range of representable finite floating point numbers.  */
 252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
 253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** True if the type has a representation for positive infinity.  */
 255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
 256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** True if the type has a representation for a quiet (non-signaling)
 258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	Not a Number.  */
ARM GAS  /tmp/ccjRbsN5.s 			page 6


 259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
 260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** True if the type has a representation for a signaling
 262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	Not a Number.  */
 263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
 264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** See std::float_denorm_style for more information.  */
 266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm = denorm_absent;
 267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** True if loss of accuracy is detected as a denormalization loss,
 269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	rather than as an inexact result. */
 270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
 271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** True if-and-only-if the type adheres to the IEC 559 standard, also
 273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	known as IEEE 754.  (Only makes sense for floating point types.)  */
 274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
 275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** True if the set of values representable by the type is
 277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	finite.  All built-in types are bounded, this member would be
 278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	false for arbitrary precision types. */
 279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR bool is_bounded = false;
 280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** True if the type is @e modulo. A type is modulo if, for any
 282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	operation involving +, -, or * on values of that type whose
 283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	result would fall outside the range [min(),max()], the value
 284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	returned differs from the true value by an integer multiple of
 285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	max() - min() + 1. On most machines, this is false for floating
 286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	types, true for unsigned integers, and true for signed integers.
 287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	See PR22200 about signed integers.  */
 288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false;
 289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** True if trapping is implemented for this type.  */
 291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR bool traps = false;
 292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** True if tininess is detected before rounding.  (see IEC 559)  */
 294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
 295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     /** See std::float_round_style for more information.  This is only
 297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	meaningful for floating types; integer types will all be
 298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	round_toward_zero.  */
 299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     static _GLIBCXX_USE_CONSTEXPR float_round_style round_style =
 300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 						    round_toward_zero;
 301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   };
 302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /**
 304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *  @brief Properties of fundamental types.
 305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *
 306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *  This class allows a program to obtain information about the
 307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *  representation of a fundamental type on a given platform.  For
 308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *  non-fundamental types, the functions will return 0 and the data
 309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****    *  members will all be @c false.
 310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   */
 311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<typename _Tp>
 312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits : public __numeric_limits_base
 313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     {
 314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       /** The minimum finite value, or for floating types with
 315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	  denormalization, the minimum positive normalized value.  */
ARM GAS  /tmp/ccjRbsN5.s 			page 7


 316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR _Tp
 317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }
 318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       /** The maximum finite value.  */
 320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR _Tp
 321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }
 322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
 324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       /** A finite value x such that there is no other finite value y
 325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        *  where y < x.  */
 326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr _Tp
 327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() noexcept { return _Tp(); }
 328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       /** The @e machine @e epsilon:  the difference between 1 and the least
 331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	  value greater than 1 that is representable.  */
 332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR _Tp
 333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }
 334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       /** The maximum rounding error measurement (see LIA-1).  */
 336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR _Tp
 337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }
 338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       /** The representation of positive infinity, if @c has_infinity.  */
 340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR _Tp
 341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }
 342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       /** The representation of a quiet Not a Number,
 344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	  if @c has_quiet_NaN. */
 345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR _Tp
 346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }
 347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       /** The representation of a signaling Not a Number, if
 349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	  @c has_signaling_NaN. */
 350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR _Tp
 351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }
 352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       /** The minimum positive denormalized value.  For types where
 354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	  @c has_denorm is false, this is the minimum positive normalized
 355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	  value.  */
 356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR _Tp
 357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }
 358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     };
 359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   // 559. numeric_limits<const T>
 362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<typename _Tp>
 364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<const _Tp>
 365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     : public numeric_limits<_Tp> { };
 366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<typename _Tp>
 368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<volatile _Tp>
 369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     : public numeric_limits<_Tp> { };
 370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<typename _Tp>
 372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<const volatile _Tp>
ARM GAS  /tmp/ccjRbsN5.s 			page 8


 373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     : public numeric_limits<_Tp> { };
 374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   // Now there follow 16 explicit specializations.  Yes, 16.  Make sure
 376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   // you get the count right. (18 in C++11 mode, with char16_t and char32_t.)
 377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   // (+1 if char8_t is enabled.)
 378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   // 184. numeric_limits<bool> wording problems
 381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /// numeric_limits<bool> specialization.
 383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<>
 384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<bool>
 385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     {
 386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
 387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR bool
 389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return false; }
 390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR bool
 392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return true; }
 393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
 395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool
 396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() noexcept { return min(); }
 397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits = 1;
 399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 = 0;
 400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
 401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_digits10 = 0;
 402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;
 404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
 405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
 406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
 407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR bool
 409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return false; }
 410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR bool
 412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return false; }
 413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
 415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
 416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
 417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
 418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
 420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
 421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
 422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm
 423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = denorm_absent;
 424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
 425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR bool
 427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return false; }
 428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR bool
ARM GAS  /tmp/ccjRbsN5.s 			page 9


 430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return false; }
 431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR bool
 433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return false; }
 434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR bool
 436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT { return false; }
 437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
 439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
 440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false;
 441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       // It is not clear what it means for a boolean type to trap.
 443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       // This is a DR on the LWG issue list.  Here, I use integer
 444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       // promotion semantics.
 445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
 446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
 447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style
 448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = round_toward_zero;
 449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     };
 450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /// numeric_limits<char> specialization.
 452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<>
 453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<char>
 454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     {
 455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
 456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR char
 458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_min(char); }
 459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR char
 461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max(char); }
 462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
 464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr char
 465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() noexcept { return min(); }
 466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (char);
 469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 = __glibcxx_digits10 (char);
 470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
 471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_digits10 = 0;
 472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = __glibcxx_signed (char);
 474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
 475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
 476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
 477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR char
 479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
 480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR char
 482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
 483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
 485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
 486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
ARM GAS  /tmp/ccjRbsN5.s 			page 10


 487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
 488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
 490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
 491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
 492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm
 493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = denorm_absent;
 494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
 495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR
 497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       char infinity() _GLIBCXX_USE_NOEXCEPT { return char(); }
 498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR char
 500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return char(); }
 501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR char
 503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return char(); }
 504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR char
 506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<char>(0); }
 507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
 509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
 510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = !is_signed;
 511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
 513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
 514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style
 515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = round_toward_zero;
 516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     };
 517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /// numeric_limits<signed char> specialization.
 519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<>
 520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<signed char>
 521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     {
 522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
 523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR signed char
 525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR signed char
 528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
 531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr signed char
 532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() noexcept { return min(); }
 533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (signed char);
 536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10
 537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = __glibcxx_digits10 (signed char);
 538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
 539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_digits10 = 0;
 540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;
 542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
 543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
ARM GAS  /tmp/ccjRbsN5.s 			page 11


 544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
 545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR signed char
 547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
 548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR signed char
 550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
 551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
 553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
 554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
 555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
 556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
 558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
 559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
 560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm
 561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = denorm_absent;
 562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
 563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR signed char
 565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<signed char>(0); }
 566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR signed char
 568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<signed char>(0); }
 569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR signed char
 571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT
 572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<signed char>(0); }
 573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR signed char
 575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT
 576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<signed char>(0); }
 577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
 579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
 580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false;
 581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
 583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
 584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style
 585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = round_toward_zero;
 586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     };
 587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /// numeric_limits<unsigned char> specialization.
 589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<>
 590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<unsigned char>
 591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     {
 592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
 593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned char
 595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned char
 598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
ARM GAS  /tmp/ccjRbsN5.s 			page 12


 601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr unsigned char
 602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() noexcept { return min(); }
 603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits
 606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = __glibcxx_digits (unsigned char);
 607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10
 608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = __glibcxx_digits10 (unsigned char);
 609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
 610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_digits10 = 0;
 611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;
 613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
 614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
 615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
 616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned char
 618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
 619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned char
 621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
 622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
 624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
 625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
 626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
 627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
 629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
 630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
 631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm
 632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = denorm_absent;
 633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
 634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned char
 636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT
 637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned char>(0); }
 638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned char
 640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT
 641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned char>(0); }
 642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned char
 644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT
 645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned char>(0); }
 646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned char
 648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT
 649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned char>(0); }
 650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
 652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
 653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true;
 654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
 656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
 657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style
ARM GAS  /tmp/ccjRbsN5.s 			page 13


 658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = round_toward_zero;
 659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     };
 660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /// numeric_limits<wchar_t> specialization.
 662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<>
 663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<wchar_t>
 664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     {
 665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
 666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR wchar_t
 668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_min (wchar_t); }
 669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR wchar_t
 671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max (wchar_t); }
 672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
 674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr wchar_t
 675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() noexcept { return min(); }
 676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (wchar_t);
 679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10
 680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = __glibcxx_digits10 (wchar_t);
 681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
 682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_digits10 = 0;
 683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = __glibcxx_signed (wchar_t);
 685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
 686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
 687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
 688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR wchar_t
 690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
 691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR wchar_t
 693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
 694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
 696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
 697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
 698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
 699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
 701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
 702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
 703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm
 704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = denorm_absent;
 705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
 706:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 707:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR wchar_t
 708:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return wchar_t(); }
 709:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 710:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR wchar_t
 711:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return wchar_t(); }
 712:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 713:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR wchar_t
 714:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return wchar_t(); }
ARM GAS  /tmp/ccjRbsN5.s 			page 14


 715:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 716:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR wchar_t
 717:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT { return wchar_t(); }
 718:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 719:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
 720:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
 721:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = !is_signed;
 722:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 723:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
 724:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
 725:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style
 726:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = round_toward_zero;
 727:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     };
 728:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 729:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if _GLIBCXX_USE_CHAR8_T
 730:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /// numeric_limits<char8_t> specialization.
 731:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<>
 732:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<char8_t>
 733:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     {
 734:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
 735:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 736:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR char8_t
 737:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_min (char8_t); }
 738:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 739:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR char8_t
 740:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max (char8_t); }
 741:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 742:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR char8_t
 743:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() _GLIBCXX_USE_NOEXCEPT { return min(); }
 744:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 745:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (char8_t);
 746:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 = __glibcxx_digits10 (char8_t);
 747:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_digits10 = 0;
 748:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = __glibcxx_signed (char8_t);
 749:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
 750:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
 751:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
 752:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 753:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR char8_t
 754:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
 755:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 756:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR char8_t
 757:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
 758:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 759:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
 760:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
 761:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
 762:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
 763:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 764:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
 765:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
 766:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
 767:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm
 768:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	= denorm_absent;
 769:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
 770:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 771:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR char8_t
ARM GAS  /tmp/ccjRbsN5.s 			page 15


 772:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return char8_t(); }
 773:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 774:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR char8_t
 775:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return char8_t(); }
 776:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 777:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR char8_t
 778:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return char8_t(); }
 779:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 780:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR char8_t
 781:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT { return char8_t(); }
 782:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 783:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
 784:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
 785:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = !is_signed;
 786:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 787:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
 788:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
 789:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style
 790:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	= round_toward_zero;
 791:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     };
 792:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 793:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 794:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
 795:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /// numeric_limits<char16_t> specialization.
 796:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<>
 797:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<char16_t>
 798:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     {
 799:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool is_specialized = true;
 800:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 801:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr char16_t
 802:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       min() noexcept { return __glibcxx_min (char16_t); }
 803:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 804:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr char16_t
 805:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() noexcept { return __glibcxx_max (char16_t); }
 806:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 807:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr char16_t
 808:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() noexcept { return min(); }
 809:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 810:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int digits = __glibcxx_digits (char16_t);
 811:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int digits10 = __glibcxx_digits10 (char16_t);
 812:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_digits10 = 0;
 813:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool is_signed = __glibcxx_signed (char16_t);
 814:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool is_integer = true;
 815:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool is_exact = true;
 816:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int radix = 2;
 817:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 818:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr char16_t
 819:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() noexcept { return 0; }
 820:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 821:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr char16_t
 822:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() noexcept { return 0; }
 823:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 824:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int min_exponent = 0;
 825:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int min_exponent10 = 0;
 826:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_exponent = 0;
 827:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_exponent10 = 0;
 828:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
ARM GAS  /tmp/ccjRbsN5.s 			page 16


 829:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool has_infinity = false;
 830:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool has_quiet_NaN = false;
 831:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool has_signaling_NaN = false;
 832:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr float_denorm_style has_denorm = denorm_absent;
 833:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool has_denorm_loss = false;
 834:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 835:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr char16_t
 836:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       infinity() noexcept { return char16_t(); }
 837:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 838:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr char16_t
 839:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       quiet_NaN() noexcept { return char16_t(); }
 840:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 841:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr char16_t
 842:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       signaling_NaN() noexcept { return char16_t(); }
 843:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 844:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr char16_t
 845:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       denorm_min() noexcept { return char16_t(); }
 846:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 847:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool is_iec559 = false;
 848:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool is_bounded = true;
 849:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool is_modulo = !is_signed;
 850:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 851:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool traps = __glibcxx_integral_traps;
 852:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool tinyness_before = false;
 853:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr float_round_style round_style = round_toward_zero;
 854:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     };
 855:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 856:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /// numeric_limits<char32_t> specialization.
 857:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<>
 858:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<char32_t>
 859:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     {
 860:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool is_specialized = true;
 861:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 862:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr char32_t
 863:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       min() noexcept { return __glibcxx_min (char32_t); }
 864:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 865:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr char32_t
 866:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() noexcept { return __glibcxx_max (char32_t); }
 867:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 868:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr char32_t
 869:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() noexcept { return min(); }
 870:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 871:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int digits = __glibcxx_digits (char32_t);
 872:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int digits10 = __glibcxx_digits10 (char32_t);
 873:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_digits10 = 0;
 874:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool is_signed = __glibcxx_signed (char32_t);
 875:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool is_integer = true;
 876:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool is_exact = true;
 877:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int radix = 2;
 878:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 879:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr char32_t
 880:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() noexcept { return 0; }
 881:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 882:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr char32_t
 883:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() noexcept { return 0; }
 884:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 885:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int min_exponent = 0;
ARM GAS  /tmp/ccjRbsN5.s 			page 17


 886:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int min_exponent10 = 0;
 887:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_exponent = 0;
 888:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_exponent10 = 0;
 889:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 890:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool has_infinity = false;
 891:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool has_quiet_NaN = false;
 892:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool has_signaling_NaN = false;
 893:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr float_denorm_style has_denorm = denorm_absent;
 894:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool has_denorm_loss = false;
 895:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 896:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr char32_t
 897:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       infinity() noexcept { return char32_t(); }
 898:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 899:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr char32_t
 900:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       quiet_NaN() noexcept { return char32_t(); }
 901:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 902:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr char32_t
 903:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       signaling_NaN() noexcept { return char32_t(); }
 904:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 905:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr char32_t
 906:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       denorm_min() noexcept { return char32_t(); }
 907:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 908:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool is_iec559 = false;
 909:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool is_bounded = true;
 910:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool is_modulo = !is_signed;
 911:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 912:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool traps = __glibcxx_integral_traps;
 913:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr bool tinyness_before = false;
 914:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr float_round_style round_style = round_toward_zero;
 915:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     };
 916:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 917:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 918:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /// numeric_limits<short> specialization.
 919:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<>
 920:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<short>
 921:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     {
 922:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
 923:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 924:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR short
 925:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 926:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 927:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR short
 928:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 929:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 930:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
 931:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr short
 932:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() noexcept { return min(); }
 933:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 934:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 935:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (short);
 936:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 = __glibcxx_digits10 (short);
 937:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
 938:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_digits10 = 0;
 939:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
 940:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;
 941:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
 942:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
ARM GAS  /tmp/ccjRbsN5.s 			page 18


 943:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
 944:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 945:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR short
 946:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
 947:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 948:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR short
 949:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
 950:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 951:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
 952:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
 953:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
 954:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
 955:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 956:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
 957:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
 958:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
 959:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm
 960:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = denorm_absent;
 961:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
 962:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 963:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR short
 964:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return short(); }
 965:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 966:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR short
 967:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return short(); }
 968:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 969:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR short
 970:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return short(); }
 971:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 972:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR short
 973:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT { return short(); }
 974:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 975:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
 976:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
 977:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false;
 978:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 979:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
 980:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
 981:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style
 982:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = round_toward_zero;
 983:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     };
 984:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 985:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /// numeric_limits<unsigned short> specialization.
 986:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<>
 987:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<unsigned short>
 988:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     {
 989:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
 990:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 991:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned short
 992:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 993:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 994:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned short
 995:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__ * 2U + 1; }
 996:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
 997:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
 998:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr unsigned short
 999:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() noexcept { return min(); }
ARM GAS  /tmp/ccjRbsN5.s 			page 19


1000:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1001:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1002:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits
1003:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = __glibcxx_digits (unsigned short);
1004:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10
1005:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = __glibcxx_digits10 (unsigned short);
1006:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
1007:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_digits10 = 0;
1008:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1009:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;
1010:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
1011:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
1012:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
1013:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1014:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned short
1015:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
1016:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1017:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned short
1018:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
1019:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1020:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
1021:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
1022:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
1023:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
1024:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1025:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
1026:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
1027:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
1028:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm
1029:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = denorm_absent;
1030:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
1031:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1032:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned short
1033:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT
1034:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned short>(0); }
1035:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1036:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned short
1037:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT
1038:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned short>(0); }
1039:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1040:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned short
1041:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT
1042:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned short>(0); }
1043:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1044:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned short
1045:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT
1046:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned short>(0); }
1047:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1048:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
1049:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
1050:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true;
1051:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1052:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
1053:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
1054:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style
1055:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = round_toward_zero;
1056:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     };
ARM GAS  /tmp/ccjRbsN5.s 			page 20


1057:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1058:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /// numeric_limits<int> specialization.
1059:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<>
1060:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<int>
1061:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     {
1062:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
1063:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1064:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR int
1065:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return -__INT_MAX__ - 1; }
1066:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1067:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR int
1068:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __INT_MAX__; }
1069:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1070:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
1071:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int
1072:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() noexcept { return min(); }
1073:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1074:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1075:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (int);
1076:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 = __glibcxx_digits10 (int);
1077:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
1078:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_digits10 = 0;
1079:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1080:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;
1081:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
1082:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
1083:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
1084:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1085:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR int
1086:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
1087:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1088:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR int
1089:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
1090:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1091:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
1092:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
1093:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
1094:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
1095:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1096:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
1097:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
1098:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
1099:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm
1100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = denorm_absent;
1101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
1102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR int
1104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<int>(0); }
1105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR int
1107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<int>(0); }
1108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR int
1110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<int>(0); }
1111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR int
1113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<int>(0); }
ARM GAS  /tmp/ccjRbsN5.s 			page 21


1114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
1116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
1117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false;
1118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
1120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
1121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style
1122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = round_toward_zero;
1123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     };
1124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /// numeric_limits<unsigned int> specialization.
1126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<>
1127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<unsigned int>
1128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     {
1129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
1130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned int
1132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return 0; }
1133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned int
1135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __INT_MAX__ * 2U + 1; }
1136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
1138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr unsigned int
1139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() noexcept { return min(); }
1140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits
1143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = __glibcxx_digits (unsigned int);
1144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10
1145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = __glibcxx_digits10 (unsigned int);
1146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
1147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_digits10 = 0;
1148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;
1150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
1151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
1152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
1153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned int
1155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
1156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned int
1158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
1159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
1161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
1162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
1163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
1164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
1166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
1167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
1168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm
1169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = denorm_absent;
1170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
ARM GAS  /tmp/ccjRbsN5.s 			page 22


1171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned int
1173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<unsigned int>(0); }
1174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned int
1176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT
1177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned int>(0); }
1178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned int
1180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT
1181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned int>(0); }
1182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned int
1184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT
1185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned int>(0); }
1186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
1188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
1189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true;
1190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
1192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
1193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style
1194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = round_toward_zero;
1195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     };
1196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /// numeric_limits<long> specialization.
1198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<>
1199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<long>
1200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     {
1201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
1202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR long
1204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
1205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR long
1207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
1208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
1210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr long
1211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() noexcept { return min(); }
1212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (long);
1215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 = __glibcxx_digits10 (long);
1216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
1217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_digits10 = 0;
1218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;
1220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
1221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
1222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
1223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR long
1225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
1226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR long
ARM GAS  /tmp/ccjRbsN5.s 			page 23


1228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
1229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
1231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
1232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
1233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
1234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
1236:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
1237:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
1238:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm
1239:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = denorm_absent;
1240:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
1241:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1242:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR long
1243:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<long>(0); }
1244:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1245:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR long
1246:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<long>(0); }
1247:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1248:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR long
1249:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<long>(0); }
1250:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1251:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR long
1252:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<long>(0); }
1253:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1254:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
1255:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
1256:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false;
1257:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1258:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
1259:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
1260:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style
1261:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = round_toward_zero;
1262:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     };
1263:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1264:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /// numeric_limits<unsigned long> specialization.
1265:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<>
1266:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<unsigned long>
1267:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     {
1268:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
1269:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1270:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned long
1271:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return 0; }
1272:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1273:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned long
1274:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__ * 2UL + 1; }
1275:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1276:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
1277:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr unsigned long
1278:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() noexcept { return min(); }
1279:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1280:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1281:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits
1282:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = __glibcxx_digits (unsigned long);
1283:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10
1284:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = __glibcxx_digits10 (unsigned long);
ARM GAS  /tmp/ccjRbsN5.s 			page 24


1285:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
1286:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_digits10 = 0;
1287:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1288:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;
1289:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
1290:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
1291:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
1292:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1293:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned long
1294:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
1295:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1296:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned long
1297:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
1298:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1299:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
1300:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
1301:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
1302:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
1303:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1304:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
1305:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
1306:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
1307:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm
1308:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = denorm_absent;
1309:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
1310:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1311:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned long
1312:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT
1313:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned long>(0); }
1314:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1315:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned long
1316:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT
1317:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned long>(0); }
1318:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1319:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned long
1320:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT
1321:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned long>(0); }
1322:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1323:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned long
1324:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT
1325:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned long>(0); }
1326:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1327:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
1328:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
1329:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true;
1330:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1331:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
1332:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
1333:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style
1334:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = round_toward_zero;
1335:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     };
1336:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1337:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /// numeric_limits<long long> specialization.
1338:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<>
1339:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<long long>
1340:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     {
1341:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
ARM GAS  /tmp/ccjRbsN5.s 			page 25


1342:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1343:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR long long
1344:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }
1345:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1346:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR long long
1347:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
1348:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1349:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
1350:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr long long
1351:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() noexcept { return min(); }
1352:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1353:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1354:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits
1355:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = __glibcxx_digits (long long);
1356:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10
1357:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = __glibcxx_digits10 (long long);
1358:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
1359:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_digits10 = 0;
1360:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1361:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;
1362:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
1363:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
1364:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
1365:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1366:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR long long
1367:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
1368:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1369:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR long long
1370:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
1371:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1372:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
1373:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
1374:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
1375:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
1376:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1377:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
1378:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
1379:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
1380:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm
1381:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = denorm_absent;
1382:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
1383:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1384:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR long long
1385:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<long long>(0); }
1386:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1387:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR long long
1388:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<long long>(0); }
1389:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1390:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR long long
1391:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT
1392:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<long long>(0); }
1393:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1394:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR long long
1395:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<long long>(0); }
1396:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1397:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
1398:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
ARM GAS  /tmp/ccjRbsN5.s 			page 26


1399:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false;
1400:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1401:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
1402:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
1403:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style
1404:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = round_toward_zero;
1405:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     };
1406:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1407:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /// numeric_limits<unsigned long long> specialization.
1408:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<>
1409:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<unsigned long long>
1410:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     {
1411:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
1412:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1413:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned long long
1414:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return 0; }
1415:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1416:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned long long
1417:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__ * 2ULL + 1; }
1418:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1419:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
1420:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr unsigned long long
1421:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() noexcept { return min(); }
1422:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1423:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1424:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits
1425:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = __glibcxx_digits (unsigned long long);
1426:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10
1427:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = __glibcxx_digits10 (unsigned long long);
1428:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
1429:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_digits10 = 0;
1430:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1431:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;
1432:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
1433:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
1434:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
1435:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1436:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned long long
1437:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
1438:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1439:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned long long
1440:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
1441:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1442:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
1443:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
1444:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
1445:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
1446:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1447:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
1448:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
1449:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
1450:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm
1451:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = denorm_absent;
1452:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
1453:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1454:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned long long
1455:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT
ARM GAS  /tmp/ccjRbsN5.s 			page 27


1456:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned long long>(0); }
1457:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1458:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned long long
1459:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT
1460:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned long long>(0); }
1461:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1462:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned long long
1463:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT
1464:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned long long>(0); }
1465:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1466:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned long long
1467:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT
1468:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned long long>(0); }
1469:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1470:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
1471:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
1472:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true;
1473:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1474:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
1475:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
1476:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style
1477:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = round_toward_zero;
1478:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     };
1479:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1480:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if !defined(__STRICT_ANSI__)
1481:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1482:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #define __INT_N(TYPE, BITSIZE, EXT, UEXT)			\
1483:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<> 									\
1484:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<TYPE> 						\
1485:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     { 										\
1486:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true; 		\
1487:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1488:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR TYPE 						\
1489:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_min_b (TYPE, BITSIZE); } \
1490:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1491:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR TYPE 						\
1492:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max_b (TYPE, BITSIZE); } 	\
1493:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1494:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits 					\
1495:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = BITSIZE - 1; 								\
1496:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 				\
1497:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = (BITSIZE - 1) * 643L / 2136; 						\
1498:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       										\
1499:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true; 			\
1500:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true; 			\
1501:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true; 			\
1502:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2; 				\
1503:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1504:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR TYPE 						\
1505:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; } 				\
1506:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1507:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR TYPE 						\
1508:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; } 			\
1509:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1510:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       EXT									\
1511:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1512:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0; 			\
ARM GAS  /tmp/ccjRbsN5.s 			page 28


1513:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0; 			\
1514:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0; 			\
1515:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0; 			\
1516:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1517:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false; 			\
1518:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false; 		\
1519:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false; 		\
1520:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm 		\
1521:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = denorm_absent; 							\
1522:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false; 		\
1523:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1524:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR TYPE 						\
1525:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT 						\
1526:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<TYPE>(0); } 						\
1527:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1528:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR TYPE 						\
1529:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT 					\
1530:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<TYPE>(0); } 						\
1531:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        										\
1532:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR TYPE 						\
1533:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT 					\
1534:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<TYPE>(0); } 						\
1535:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        										\
1536:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR TYPE 						\
1537:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT 					\
1538:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<TYPE>(0); } 						\
1539:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1540:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false; 			\
1541:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true; 			\
1542:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false; 			\
1543:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1544:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps 					\
1545:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = __glibcxx_integral_traps; 						\
1546:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false; 		\
1547:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style 		\
1548:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = round_toward_zero; 							\
1549:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     }; 										\
1550:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1551:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<> 									\
1552:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<unsigned TYPE> 					\
1553:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     { 										\
1554:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true; 		\
1555:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1556:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned TYPE 					\
1557:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return 0; } 				\
1558:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1559:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned TYPE 					\
1560:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() _GLIBCXX_USE_NOEXCEPT						\
1561:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return  __glibcxx_max_b (unsigned TYPE, BITSIZE); }			\
1562:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1563:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       UEXT									\
1564:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1565:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits 					\
1566:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = BITSIZE; 								\
1567:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 				\
1568:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = BITSIZE * 643L / 2136; 						\
1569:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false; 			\
ARM GAS  /tmp/ccjRbsN5.s 			page 29


1570:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true; 			\
1571:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true; 			\
1572:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2; 				\
1573:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1574:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned TYPE 					\
1575:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; } 				\
1576:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1577:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned TYPE 					\
1578:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; } 			\
1579:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1580:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0; 			\
1581:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0; 			\
1582:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0; 			\
1583:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0; 			\
1584:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1585:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false; 			\
1586:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false; 		\
1587:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false; 		\
1588:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm 		\
1589:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = denorm_absent; 							\
1590:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false; 		\
1591:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1592:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned TYPE 					\
1593:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT 						\
1594:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned TYPE>(0); } 				\
1595:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1596:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned TYPE 					\
1597:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT 					\
1598:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned TYPE>(0); } 				\
1599:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1600:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned TYPE 					\
1601:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT 					\
1602:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned TYPE>(0); } 				\
1603:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1604:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR unsigned TYPE 					\
1605:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT 					\
1606:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       { return static_cast<unsigned TYPE>(0); } 				\
1607:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1608:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false; 			\
1609:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true; 			\
1610:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true; 			\
1611:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****  										\
1612:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps; 	\
1613:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false; 		\
1614:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style 		\
1615:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = round_toward_zero; 							\
1616:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     };
1617:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1618:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
1619:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1620:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #define __INT_N_201103(TYPE)							\
1621:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr TYPE 							\
1622:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() noexcept { return min(); }					\
1623:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_digits10 = 0;
1624:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1625:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #define __INT_N_U201103(TYPE)							\
1626:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr unsigned TYPE 						\
ARM GAS  /tmp/ccjRbsN5.s 			page 30


1627:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() noexcept { return min(); }					\
1628:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_digits10 = 0;
1629:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1630:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #else
1631:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #define __INT_N_201103(TYPE)
1632:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #define __INT_N_U201103(TYPE)
1633:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1634:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1635:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #ifdef __GLIBCXX_TYPE_INT_N_0
1636:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   __INT_N(__GLIBCXX_TYPE_INT_N_0, __GLIBCXX_BITSIZE_INT_N_0,
1637:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	  __INT_N_201103 (__GLIBCXX_TYPE_INT_N_0), __INT_N_U201103 (__GLIBCXX_TYPE_INT_N_0))
1638:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1639:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #ifdef __GLIBCXX_TYPE_INT_N_1
1640:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   __INT_N (__GLIBCXX_TYPE_INT_N_1, __GLIBCXX_BITSIZE_INT_N_1,
1641:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	  __INT_N_201103 (__GLIBCXX_TYPE_INT_N_1), __INT_N_U201103 (__GLIBCXX_TYPE_INT_N_1))
1642:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1643:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #ifdef __GLIBCXX_TYPE_INT_N_2
1644:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   __INT_N (__GLIBCXX_TYPE_INT_N_2, __GLIBCXX_BITSIZE_INT_N_2,
1645:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	  __INT_N_201103 (__GLIBCXX_TYPE_INT_N_2), __INT_N_U201103 (__GLIBCXX_TYPE_INT_N_2))
1646:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1647:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #ifdef __GLIBCXX_TYPE_INT_N_3
1648:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   __INT_N (__GLIBCXX_TYPE_INT_N_3, __GLIBCXX_BITSIZE_INT_N_3,
1649:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	  __INT_N_201103 (__GLIBCXX_TYPE_INT_N_3), __INT_N_U201103 (__GLIBCXX_TYPE_INT_N_3))
1650:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1651:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1652:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #undef __INT_N
1653:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #undef __INT_N_201103
1654:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #undef __INT_N_U201103
1655:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1656:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1657:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1658:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   /// numeric_limits<float> specialization.
1659:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****   template<>
1660:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     struct numeric_limits<float>
1661:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****     {
1662:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
1663:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1664:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR float
1665:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }
1666:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1667:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR float
1668:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
1669:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1670:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
1671:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr float
1672:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       lowest() noexcept { return -__FLT_MAX__; }
1673:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1674:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1675:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits = __FLT_MANT_DIG__;
1676:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 = __FLT_DIG__;
1677:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #if __cplusplus >= 201103L
1678:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static constexpr int max_digits10
1679:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	 = __glibcxx_max_digits10 (__FLT_MANT_DIG__);
1680:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** #endif
1681:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;
1682:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
1683:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
ARM GAS  /tmp/ccjRbsN5.s 			page 31


1684:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;
1685:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1686:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR float
1687:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return __FLT_EPSILON__; }
1688:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1689:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR float
1690:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0.5F; }
1691:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1692:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = __FLT_MIN_EXP__;
1693:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = __FLT_MIN_10_EXP__;
1694:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = __FLT_MAX_EXP__;
1695:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = __FLT_MAX_10_EXP__;
1696:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1697:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = __FLT_HAS_INFINITY__;
1698:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = __FLT_HAS_QUIET_NAN__;
1699:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = has_quiet_NaN;
1700:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm
1701:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
1702:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
1703:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****        = __glibcxx_float_has_denorm_loss;
1704:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits **** 
1705:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       static _GLIBCXX_CONSTEXPR float
1706:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
  29              		.loc 1 1706 7
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 7, -4
  38 0002 00AF     		add	r7, sp, #0
  39              	.LCFI1:
  40              		.cfi_def_cfa_register 7
  41              		.loc 1 1706 69
  42 0004 4FF0FF43 		mov	r3, #2139095040
  43 0008 07EE903A 		vmov	s15, r3
  44              		.loc 1 1706 72
  45 000c B0EE670A 		vmov.f32	s0, s15
  46 0010 BD46     		mov	sp, r7
  47              	.LCFI2:
  48              		.cfi_def_cfa_register 13
  49              		@ sp needed
  50 0012 5DF8047B 		ldr	r7, [sp], #4
  51              	.LCFI3:
  52              		.cfi_restore 7
  53              		.cfi_def_cfa_offset 0
  54 0016 7047     		bx	lr
  55              		.cfi_endproc
  56              	.LFE765:
  58              		.section	.rodata._ZN6__pstl9execution2v1L3seqE,"a"
  59              		.align	2
  62              	_ZN6__pstl9execution2v1L3seqE:
  63 0000 00       		.space	1
  64              		.section	.rodata._ZN6__pstl9execution2v1L3parE,"a"
  65              		.align	2
ARM GAS  /tmp/ccjRbsN5.s 			page 32


  68              	_ZN6__pstl9execution2v1L3parE:
  69 0000 00       		.space	1
  70              		.section	.rodata._ZN6__pstl9execution2v1L9par_unseqE,"a"
  71              		.align	2
  74              	_ZN6__pstl9execution2v1L9par_unseqE:
  75 0000 00       		.space	1
  76              		.section	.rodata._ZN6__pstl9execution2v1L5unseqE,"a"
  77              		.align	2
  80              	_ZN6__pstl9execution2v1L5unseqE:
  81 0000 00       		.space	1
  82              		.section	.text._ZL20__gthread_key_deletei,"ax",%progbits
  83              		.align	1
  84              		.syntax unified
  85              		.thumb
  86              		.thumb_func
  87              		.fpu fpv4-sp-d16
  89              	_ZL20__gthread_key_deletei:
  90              	.LFB2573:
  91              		.file 2 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-e
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Threads compatibility routines for libgcc2 and libobjc.  */
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Compile this one with gcc.  */
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Copyright (C) 1997-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** This file is part of GCC.
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** GCC is free software; you can redistribute it and/or modify it under
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** the terms of the GNU General Public License as published by the Free
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** Software Foundation; either version 3, or (at your option) any later
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** version.
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** GCC is distributed in the hope that it will be useful, but WITHOUT ANY
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** WARRANTY; without even the implied warranty of MERCHANTABILITY or
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** for more details.
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** Under Section 7 of GPL version 3, you are granted additional
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** permissions described in the GCC Runtime Library Exception, version
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 3.1, as published by the Free Software Foundation.
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** You should have received a copy of the GNU General Public License and
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** <http://www.gnu.org/licenses/>.  */
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** #ifndef _GLIBCXX_GCC_GTHR_SINGLE_H
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** #define _GLIBCXX_GCC_GTHR_SINGLE_H
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Just provide compatibility for mutex handling.  */
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** typedef int __gthread_key_t;
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** typedef int __gthread_once_t;
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** typedef int __gthread_mutex_t;
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** typedef int __gthread_recursive_mutex_t;
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** #define __GTHREAD_ONCE_INIT 0
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** #define __GTHREAD_MUTEX_INIT 0
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** #define __GTHREAD_MUTEX_INIT_FUNCTION(mx) do {} while (0)
ARM GAS  /tmp/ccjRbsN5.s 			page 33


  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** #define __GTHREAD_RECURSIVE_MUTEX_INIT 0
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** #define _GLIBCXX_UNUSED __attribute__((__unused__))
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** #ifdef _LIBOBJC
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Thread local storage for a single thread */
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static void *thread_local_storage = NULL;
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Backend initialization functions */
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Initialize the threads subsystem.  */
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_init_thread_system (void)
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* No thread support available */
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return -1;
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Close the threads subsystem.  */
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_close_thread_system (void)
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* No thread support available */
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return -1;
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Backend thread functions */
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Create a new thread of execution.  */
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline objc_thread_t
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_thread_detach (void (* func)(void *), void * arg _GLIBCXX_UNUSED)
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* No thread support available */
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return NULL;
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Set the current thread's priority.  */
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_thread_set_priority (int priority _GLIBCXX_UNUSED)
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* No thread support available */
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return -1;
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Return the current thread's priority.  */
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_thread_get_priority (void)
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return OBJC_THREAD_INTERACTIVE_PRIORITY;
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Yield our process time to another thread.  */
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline void
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_thread_yield (void)
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return;
ARM GAS  /tmp/ccjRbsN5.s 			page 34


  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Terminate the current thread.  */
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_thread_exit (void)
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* No thread support available */
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* Should we really exit the program */
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* exit (&__objc_thread_exit_status); */
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return -1;
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Returns an integer value which uniquely describes a thread.  */
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline objc_thread_t
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_thread_id (void)
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* No thread support, use 1.  */
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return (objc_thread_t) 1;
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Sets the thread's local storage pointer.  */
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_thread_set_data (void *value)
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   thread_local_storage = value;
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Returns the thread's local storage pointer.  */
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline void *
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_thread_get_data (void)
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return thread_local_storage;
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Backend mutex functions */
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Allocate a mutex.  */
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_mutex_allocate (objc_mutex_t mutex _GLIBCXX_UNUSED)
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Deallocate a mutex.  */
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_mutex_deallocate (objc_mutex_t mutex _GLIBCXX_UNUSED)
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Grab a lock on a mutex.  */
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_mutex_lock (objc_mutex_t mutex _GLIBCXX_UNUSED)
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* There can only be one thread, so we always get the lock */
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
ARM GAS  /tmp/ccjRbsN5.s 			page 35


 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Try to grab a lock on a mutex.  */
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_mutex_trylock (objc_mutex_t mutex _GLIBCXX_UNUSED)
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   /* There can only be one thread, so we always get the lock */
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Unlock the mutex */
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_mutex_unlock (objc_mutex_t mutex _GLIBCXX_UNUSED)
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Backend condition mutex functions */
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Allocate a condition.  */
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_condition_allocate (objc_condition_t condition _GLIBCXX_UNUSED)
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Deallocate a condition.  */
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_condition_deallocate (objc_condition_t condition _GLIBCXX_UNUSED)
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Wait on the condition */
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_condition_wait (objc_condition_t condition _GLIBCXX_UNUSED,
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 			       objc_mutex_t mutex _GLIBCXX_UNUSED)
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Wake up all threads waiting on this condition.  */
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_condition_broadcast (objc_condition_t condition _GLIBCXX_UNUSED)
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** /* Wake up one thread waiting on this condition.  */
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_objc_condition_signal (objc_condition_t condition _GLIBCXX_UNUSED)
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** #else /* _LIBOBJC */
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
ARM GAS  /tmp/ccjRbsN5.s 			page 36


 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_active_p (void)
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_once (__gthread_once_t *__once _GLIBCXX_UNUSED, void (*__func) (void) _GLIBCXX_UNUSED)
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static inline int _GLIBCXX_UNUSED
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_key_create (__gthread_key_t *__key _GLIBCXX_UNUSED, void (*__func) (void *) _GLIBCXX_UNUS
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** 
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** static int _GLIBCXX_UNUSED
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** __gthread_key_delete (__gthread_key_t __key _GLIBCXX_UNUSED)
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** {
  92              		.loc 2 230 1
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 8
  95              		@ frame_needed = 1, uses_anonymous_args = 0
  96              		@ link register save eliminated.
  97 0000 80B4     		push	{r7}
  98              	.LCFI4:
  99              		.cfi_def_cfa_offset 4
 100              		.cfi_offset 7, -4
 101 0002 83B0     		sub	sp, sp, #12
 102              	.LCFI5:
 103              		.cfi_def_cfa_offset 16
 104 0004 00AF     		add	r7, sp, #0
 105              	.LCFI6:
 106              		.cfi_def_cfa_register 7
 107 0006 7860     		str	r0, [r7, #4]
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h ****   return 0;
 108              		.loc 2 231 10
 109 0008 0023     		movs	r3, #0
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/gthr-default.h **** }
 110              		.loc 2 232 1
 111 000a 1846     		mov	r0, r3
 112 000c 0C37     		adds	r7, r7, #12
 113              	.LCFI7:
 114              		.cfi_def_cfa_offset 4
 115 000e BD46     		mov	sp, r7
 116              	.LCFI8:
 117              		.cfi_def_cfa_register 13
 118              		@ sp needed
 119 0010 5DF8047B 		ldr	r7, [sp], #4
 120              	.LCFI9:
 121              		.cfi_restore 7
 122              		.cfi_def_cfa_offset 0
 123 0014 7047     		bx	lr
 124              		.cfi_endproc
 125              	.LFE2573:
ARM GAS  /tmp/ccjRbsN5.s 			page 37


 127              		.section	.rodata._ZL16OFFSET_TAB_CCMRx,"a"
 128              		.align	2
 131              	_ZL16OFFSET_TAB_CCMRx:
 132 0000 00000000 		.ascii	"\000\000\000\000\004\004\004\00488"
 132      04040404 
 132      3838
 133              		.section	.rodata._ZL14SHIFT_TAB_OCxx,"a"
 134              		.align	2
 137              	_ZL14SHIFT_TAB_OCxx:
 138 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\010"
 138      00000800 
 138      0008
 139              		.section	.rodata._ZL14SHIFT_TAB_ICxx,"a"
 140              		.align	2
 143              	_ZL14SHIFT_TAB_ICxx:
 144 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\000"
 144      00000800 
 144      0000
 145              		.section	.rodata._ZL14SHIFT_TAB_CCxP,"a"
 146              		.align	2
 149              	_ZL14SHIFT_TAB_CCxP:
 150 0000 00020406 		.ascii	"\000\002\004\006\010\012\014\016\020\024"
 150      080A0C0E 
 150      1014
 151              		.section	.rodata._ZL14SHIFT_TAB_OISx,"a"
 152              		.align	2
 155              	_ZL14SHIFT_TAB_OISx:
 156 0000 00010203 		.ascii	"\000\001\002\003\004\005\006\007\010\012"
 156      04050607 
 156      080A
 157              		.section	.rodata._ZL19USART_PRESCALER_TAB,"a"
 158              		.align	2
 161              	_ZL19USART_PRESCALER_TAB:
 162 0000 01000000 		.word	1
 163 0004 02000000 		.word	2
 164 0008 04000000 		.word	4
 165 000c 06000000 		.word	6
 166 0010 08000000 		.word	8
 167 0014 0A000000 		.word	10
 168 0018 0C000000 		.word	12
 169 001c 10000000 		.word	16
 170 0020 20000000 		.word	32
 171 0024 40000000 		.word	64
 172 0028 80000000 		.word	128
 173 002c 00010000 		.word	256
 174              		.section	.rodata._ZL18CHANNEL_OFFSET_TAB,"a"
 175              		.align	2
 178              	_ZL18CHANNEL_OFFSET_TAB:
 179 0000 081C3044 		.ascii	"\010\0340DXl"
 179      586C
 180              		.section	.rodata._ZL12one_by_sqrt3,"a"
 181              		.align	2
 184              	_ZL12one_by_sqrt3:
 185 0000 3ACD133F 		.word	1058262330
 186              		.section	.rodata._ZL12two_by_sqrt3,"a"
 187              		.align	2
 190              	_ZL12two_by_sqrt3:
ARM GAS  /tmp/ccjRbsN5.s 			page 38


 191 0000 3ACD933F 		.word	1066650938
 192              		.section	.rodata._ZL10sqrt3_by_2,"a"
 193              		.align	2
 196              	_ZL10sqrt3_by_2:
 197 0000 D7B35D3F 		.word	1063105495
 198              		.section	.text._ZN5Motor5setupEv,"axG",%progbits,_ZN5Motor5setupEv,comdat
 199              		.align	1
 200              		.weak	_ZN5Motor5setupEv
 201              		.syntax unified
 202              		.thumb
 203              		.thumb_func
 204              		.fpu fpv4-sp-d16
 206              	_ZN5Motor5setupEv:
 207              	.LFB5604:
 208              		.file 3 "Inc/motor.hpp"
   1:Inc/motor.hpp **** #ifndef __MOTOR_HPP
   2:Inc/motor.hpp **** #define __MOTOR_HPP
   3:Inc/motor.hpp **** 
   4:Inc/motor.hpp **** 
   5:Inc/motor.hpp **** #include <cstdint>  // Add this for uint32_t
   6:Inc/motor.hpp **** #include "component.hpp"
   7:Inc/motor.hpp **** 
   8:Inc/motor.hpp **** #include "interfaces.hpp"
   9:Inc/motor.hpp **** #include "phase_control_law.hpp"
  10:Inc/motor.hpp **** #include "main.h"
  11:Inc/motor.hpp **** #include "current_limiter.hpp"
  12:Inc/motor.hpp **** #include "foc.hpp"
  13:Inc/motor.hpp **** 
  14:Inc/motor.hpp **** 
  15:Inc/motor.hpp **** class FieldOrientedController;
  16:Inc/motor.hpp **** class Axis;
  17:Inc/motor.hpp **** 
  18:Inc/motor.hpp **** class Motor : public ODriveIntf::MotorIntf{
  19:Inc/motor.hpp **** public:
  20:Inc/motor.hpp ****     struct Iph_BC_t {
  21:Inc/motor.hpp ****         float phA;
  22:Inc/motor.hpp ****         float phB;
  23:Inc/motor.hpp ****         float phC;
  24:Inc/motor.hpp ****     };
  25:Inc/motor.hpp **** 
  26:Inc/motor.hpp ****     enum MotorType {
  27:Inc/motor.hpp ****         MOTOR_TYPE_HIGH_CURRENT          = 0,
  28:Inc/motor.hpp ****         MOTOR_TYPE_GIMBAL                = 2,
  29:Inc/motor.hpp ****         MOTOR_TYPE_ACIM                  = 3,
  30:Inc/motor.hpp ****     };
  31:Inc/motor.hpp **** 
  32:Inc/motor.hpp ****     struct CurrentControl_t{
  33:Inc/motor.hpp ****         float p_gain; // [V/A]
  34:Inc/motor.hpp ****         float i_gain; // [V/As]
  35:Inc/motor.hpp ****         float v_current_control_integral_d; // [V]
  36:Inc/motor.hpp ****         float v_current_control_integral_q; // [V]
  37:Inc/motor.hpp ****         float Ibus; // DC bus current [A]
  38:Inc/motor.hpp ****         // Voltage applied at end of cycle:
  39:Inc/motor.hpp ****         float final_v_alpha; // [V]
  40:Inc/motor.hpp ****         float final_v_beta; // [V]
  41:Inc/motor.hpp **** 
  42:Inc/motor.hpp ****         float final_v_d; // [V]
ARM GAS  /tmp/ccjRbsN5.s 			page 39


  43:Inc/motor.hpp ****         float final_v_q; // [V]
  44:Inc/motor.hpp **** 
  45:Inc/motor.hpp ****         float Id_setpoint; // [A]
  46:Inc/motor.hpp ****         float Iq_setpoint; // [A]
  47:Inc/motor.hpp ****         float Iq_measured; // [A]
  48:Inc/motor.hpp ****         float Id_measured; // [A]
  49:Inc/motor.hpp ****         float I_measured_report_filter_k;
  50:Inc/motor.hpp ****         float max_allowed_current; // [A]
  51:Inc/motor.hpp ****         float overcurrent_trip_level; // [A]
  52:Inc/motor.hpp ****         float acim_rotor_flux; // [A]
  53:Inc/motor.hpp ****         float async_phase_vel; // [rad/s electrical]
  54:Inc/motor.hpp ****         float async_phase_offset; // [rad electrical]
  55:Inc/motor.hpp ****     };
  56:Inc/motor.hpp ****     static constexpr int32_t NUM_LINEARITY_SEG = 60;
  57:Inc/motor.hpp ****     static constexpr float CALIBRATION_INCREMENT = 1;
  58:Inc/motor.hpp ****     // NOTE: for gimbal motors, all units of Nm are instead V.
  59:Inc/motor.hpp ****     // example: vel_gain is [V/(turn/s)] instead of [Nm/(turn/s)]
  60:Inc/motor.hpp ****     // example: current_lim and calibration_current will instead determine the maximum voltage appl
  61:Inc/motor.hpp ****     struct Config_t {
  62:Inc/motor.hpp ****         bool pre_calibrated = false; // can be set to true to indicate that all values here are val
  63:Inc/motor.hpp ****         int32_t pole_pairs = 21;
  64:Inc/motor.hpp ****         int32_t gear_ratio = 16;
  65:Inc/motor.hpp ****         float motor_torque_base = 60.0f; // [Nm]
  66:Inc/motor.hpp ****         float calibration_current = 10.0f;    // [A]
  67:Inc/motor.hpp ****         float resistance_calib_max_voltage = 2.0f; // [V] - You may need to increase this if this v
  68:Inc/motor.hpp ****         float phase_inductance = 0.000055f;        // to be set by measure_phase_inductance
  69:Inc/motor.hpp ****         float phase_resistance = 0.07f;        // to be set by measure_phase_resistance
  70:Inc/motor.hpp ****         float torque_constant = 0.087f;         // [Nm/A] for PM motors, [Nm/A^2] for induction mot
  71:Inc/motor.hpp ****         int32_t direction = 1;                // 1 or -1 (0 = unspecified)
  72:Inc/motor.hpp ****         MotorType motor_type = MOTOR_TYPE_HIGH_CURRENT;
  73:Inc/motor.hpp ****         // Read out max_allowed_current to see max supported value for current_lim.
  74:Inc/motor.hpp ****         // float current_lim = 70.0f; //[A]
  75:Inc/motor.hpp ****         float current_lim = 10.0f;          //[A]
  76:Inc/motor.hpp ****         float current_lim_margin = 8.0f;    // Maximum violation of current_lim
  77:Inc/motor.hpp ****         float torque_lim = std::numeric_limits<float>::infinity();           //[Nm]. 
  78:Inc/motor.hpp ****         // Value used to compute shunt amplifier gains
  79:Inc/motor.hpp ****         float requested_current_range = 60.0f; // [A]
  80:Inc/motor.hpp ****         float current_control_bandwidth = 3000.0f;  // [rad/s]
  81:Inc/motor.hpp ****         float inverter_temp_limit_lower = 100;
  82:Inc/motor.hpp ****         float inverter_temp_limit_upper = 120;
  83:Inc/motor.hpp ****         float acim_slip_velocity = 14.706f; // [rad/s electrical] = 1/rotor_tau
  84:Inc/motor.hpp ****         float acim_gain_min_flux = 10; // [A]
  85:Inc/motor.hpp ****         float acim_autoflux_min_Id = 10; // [A]
  86:Inc/motor.hpp ****         bool acim_autoflux_enable = false;
  87:Inc/motor.hpp ****         float acim_autoflux_attack_gain = 10.0f;
  88:Inc/motor.hpp ****         float acim_autoflux_decay_gain = 1.0f;
  89:Inc/motor.hpp **** 
  90:Inc/motor.hpp ****         float Torque_LINEARITY_[NUM_LINEARITY_SEG];
  91:Inc/motor.hpp ****         float CURRENT_LINEARITY_[NUM_LINEARITY_SEG];
  92:Inc/motor.hpp **** 
  93:Inc/motor.hpp ****         float CURRENT2TORQUE_COEFF[2*NUM_LINEARITY_SEG];
  94:Inc/motor.hpp **** 
  95:Inc/motor.hpp ****         bool R_wL_FF_enable = false; // Enable feedforwards for R*I and w*L*I terms
  96:Inc/motor.hpp ****         bool bEMF_FF_enable = false; // Enable feedforward for bEMF
  97:Inc/motor.hpp **** 
  98:Inc/motor.hpp ****         float I_bus_hard_min = -INFINITY;
  99:Inc/motor.hpp ****         float I_bus_hard_max = INFINITY;
ARM GAS  /tmp/ccjRbsN5.s 			page 40


 100:Inc/motor.hpp ****         // custom property setters
 101:Inc/motor.hpp ****         Motor* parent = nullptr;
 102:Inc/motor.hpp ****         void set_pre_calibrated(bool value) {
 103:Inc/motor.hpp ****             pre_calibrated = value;
 104:Inc/motor.hpp ****             parent->is_calibrated_ = parent->is_calibrated_ || parent->config_.pre_calibrated;
 105:Inc/motor.hpp ****         }
 106:Inc/motor.hpp ****         void set_phase_inductance(float value) { phase_inductance = value; parent->update_current_c
 107:Inc/motor.hpp ****         void set_phase_resistance(float value) { phase_resistance = value; parent->update_current_c
 108:Inc/motor.hpp ****         void set_current_control_bandwidth(float value) { current_control_bandwidth = value; parent
 109:Inc/motor.hpp ****     };
 110:Inc/motor.hpp **** 
 111:Inc/motor.hpp ****     Motor(const MotorHardwareConfig_t& hw_config,
 112:Inc/motor.hpp ****          Config_t& config);
 113:Inc/motor.hpp **** 
 114:Inc/motor.hpp **** 
 115:Inc/motor.hpp ****     bool arm(PhaseControlLaw<3>* control_law);
 116:Inc/motor.hpp ****     bool disarm();
 117:Inc/motor.hpp **** 
 118:Inc/motor.hpp ****     void current_meas_cb(uint32_t timestamp);
 119:Inc/motor.hpp ****     void pwm_update_cb(uint32_t output_timestamp);
 120:Inc/motor.hpp **** 
 121:Inc/motor.hpp ****     void setup() {
 209              		.loc 3 121 10
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 16
 212              		@ frame_needed = 1, uses_anonymous_args = 0
 213 0000 80B5     		push	{r7, lr}
 214              	.LCFI10:
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 7, -8
 217              		.cfi_offset 14, -4
 218 0002 84B0     		sub	sp, sp, #16
 219              	.LCFI11:
 220              		.cfi_def_cfa_offset 24
 221 0004 00AF     		add	r7, sp, #0
 222              	.LCFI12:
 223              		.cfi_def_cfa_register 7
 224 0006 7860     		str	r0, [r7, #4]
 122:Inc/motor.hpp ****         int32_t index = 0;
 225              		.loc 3 122 17
 226 0008 0023     		movs	r3, #0
 227 000a FB60     		str	r3, [r7, #12]
 123:Inc/motor.hpp ****         DRV8301_setup();
 228              		.loc 3 123 22
 229 000c 7868     		ldr	r0, [r7, #4]
 230 000e FFF7FEFF 		bl	_ZN5Motor13DRV8301_setupEv
 124:Inc/motor.hpp ****         for( index = 0;index < NUM_LINEARITY_SEG;index++)
 231              		.loc 3 124 20
 232 0012 0023     		movs	r3, #0
 233 0014 FB60     		str	r3, [r7, #12]
 234              	.L7:
 235              		.loc 3 124 30 discriminator 3
 236 0016 FB68     		ldr	r3, [r7, #12]
 237 0018 3B2B     		cmp	r3, #59
 238 001a 1DDC     		bgt	.L8
 125:Inc/motor.hpp ****         {
 126:Inc/motor.hpp ****             L_Slop_Array_P_[index] = config_.Torque_LINEARITY_[index];
ARM GAS  /tmp/ccjRbsN5.s 			page 41


 239              		.loc 3 126 38 discriminator 2
 240 001c 7B68     		ldr	r3, [r7, #4]
 241 001e 5A68     		ldr	r2, [r3, #4]
 242              		.loc 3 126 69 discriminator 2
 243 0020 FB68     		ldr	r3, [r7, #12]
 244 0022 1833     		adds	r3, r3, #24
 245 0024 9B00     		lsls	r3, r3, #2
 246 0026 1344     		add	r3, r3, r2
 247 0028 1A68     		ldr	r2, [r3]	@ float
 248              		.loc 3 126 36 discriminator 2
 249 002a 7968     		ldr	r1, [r7, #4]
 250 002c FB68     		ldr	r3, [r7, #12]
 251 002e 3433     		adds	r3, r3, #52
 252 0030 9B00     		lsls	r3, r3, #2
 253 0032 0B44     		add	r3, r3, r1
 254 0034 1A60     		str	r2, [r3]	@ float
 127:Inc/motor.hpp ****             L_Slop_Array_N_[index] = config_.CURRENT_LINEARITY_[index];
 255              		.loc 3 127 38 discriminator 2
 256 0036 7B68     		ldr	r3, [r7, #4]
 257 0038 5A68     		ldr	r2, [r3, #4]
 258              		.loc 3 127 70 discriminator 2
 259 003a FB68     		ldr	r3, [r7, #12]
 260 003c 5433     		adds	r3, r3, #84
 261 003e 9B00     		lsls	r3, r3, #2
 262 0040 1344     		add	r3, r3, r2
 263 0042 1A68     		ldr	r2, [r3]	@ float
 264              		.loc 3 127 36 discriminator 2
 265 0044 7968     		ldr	r1, [r7, #4]
 266 0046 FB68     		ldr	r3, [r7, #12]
 267 0048 7033     		adds	r3, r3, #112
 268 004a 9B00     		lsls	r3, r3, #2
 269 004c 0B44     		add	r3, r3, r1
 270 004e 1A60     		str	r2, [r3]	@ float
 124:Inc/motor.hpp ****         for( index = 0;index < NUM_LINEARITY_SEG;index++)
 271              		.loc 3 124 9 discriminator 2
 272 0050 FB68     		ldr	r3, [r7, #12]
 273 0052 0133     		adds	r3, r3, #1
 274 0054 FB60     		str	r3, [r7, #12]
 275 0056 DEE7     		b	.L7
 276              	.L8:
 128:Inc/motor.hpp ****         }
 129:Inc/motor.hpp **** 
 130:Inc/motor.hpp ****     }
 277              		.loc 3 130 5
 278 0058 00BF     		nop
 279 005a 1037     		adds	r7, r7, #16
 280              	.LCFI13:
 281              		.cfi_def_cfa_offset 8
 282 005c BD46     		mov	sp, r7
 283              	.LCFI14:
 284              		.cfi_def_cfa_register 13
 285              		@ sp needed
 286 005e 80BD     		pop	{r7, pc}
 287              		.cfi_endproc
 288              	.LFE5604:
 290              		.global	board_config
 291              		.section	.data.board_config,"aw"
ARM GAS  /tmp/ccjRbsN5.s 			page 42


 292              		.align	2
 295              	board_config:
 296 0000 00       		.byte	0
 297 0001 01       		.byte	1
 298 0002 00       		.byte	0
 299 0003 01       		.byte	1
 300 0004 00000000 		.word	0
 301 0008 D7A3F03E 		.word	1055957975
 302 000c 00000041 		.word	1090519040
 303 0010 67668642 		.word	1116104295
 304 0014 00       		.byte	0
 305 0015 000000   		.space	3
 306 0018 15AE6F42 		.word	1114615317
 307 001c 15AE6F42 		.word	1114615317
 308 0020 0000807F 		.word	2139095040
 309 0024 BD3786B5 		.word	-1249495107
 310 0028 00C20100 		.word	115200
 311              		.global	system_stats
 312              		.section	.bss.system_stats,"aw",%nobits
 313              		.align	2
 316              	system_stats:
 317 0000 00000000 		.space	76
 317      00000000 
 317      00000000 
 317      00000000 
 317      00000000 
 318              		.global	current_meas_period
 319              		.section	.data.current_meas_period,"aw"
 320              		.align	2
 323              	current_meas_period:
 324 0000 17B75138 		.word	944879383
 325              		.global	can_config
 326              		.section	.data.can_config,"aw"
 327              		.align	2
 330              	can_config:
 331 0000 40420F00 		.word	1000000
 332 0004 01       		.byte	1
 333 0005 000000   		.space	3
 334              		.global	encoder_configs
 335              		.section	.data.encoder_configs,"aw"
 336              		.align	2
 339              	encoder_configs:
 340 0000 0301     		.short	259
 341 0002 00       		.byte	0
 342 0003 00       		.byte	0
 343 0004 01       		.byte	1
 344 0005 01       		.byte	1
 345 0006 0000     		.space	2
 346 0008 00000100 		.word	65536
 347 000c 00000000 		.word	0
 348 0010 00000000 		.word	0
 349 0014 01       		.byte	1
 350 0015 000000   		.space	3
 351 0018 6F12033B 		.word	990057071
 352 001c DB0F4942 		.word	1112084443
 353 0020 DB0F4941 		.word	1095307227
 354 0024 00007A45 		.word	1165623296
ARM GAS  /tmp/ccjRbsN5.s 			page 43


 355 0028 00       		.byte	0
 356 0029 00       		.byte	0
 357 002a 00       		.byte	0
 358 002b 00       		.space	1
 359 002c 0100     		.short	1
 360 002e 0300     		.short	3
 361 0030 0400     		.short	4
 362 0032 0200     		.short	2
 363 0034 00000400 		.word	262144
 364 0038 00000000 		.word	0
 365 003c 01000000 		.word	1
 366 0040 00000000 		.word	0
 367              		.section	.text._ZN10Controller13Anticogging_tC2Ev,"axG",%progbits,_ZN10Controller13Anticogging_tC5
 368              		.align	1
 369              		.weak	_ZN10Controller13Anticogging_tC2Ev
 370              		.syntax unified
 371              		.thumb
 372              		.thumb_func
 373              		.fpu fpv4-sp-d16
 375              	_ZN10Controller13Anticogging_tC2Ev:
 376              	.LFB5632:
 377              		.file 4 "Inc/controller.hpp"
   1:Inc/controller.hpp **** #ifndef __CONTROLLER_HPP
   2:Inc/controller.hpp **** #define __CONTROLLER_HPP
   3:Inc/controller.hpp **** 
   4:Inc/controller.hpp **** 
   5:Inc/controller.hpp **** #include "component.hpp"
   6:Inc/controller.hpp **** 
   7:Inc/controller.hpp **** #include "interfaces.hpp"
   8:Inc/controller.hpp **** 
   9:Inc/controller.hpp **** class Axis;
  10:Inc/controller.hpp **** 
  11:Inc/controller.hpp **** class Controller : public ODriveIntf::ControllerIntf{
  12:Inc/controller.hpp **** public:
  13:Inc/controller.hpp ****     typedef struct {
  14:Inc/controller.hpp ****         uint32_t index = 0;
  15:Inc/controller.hpp ****         float cogging_map[128];
  16:Inc/controller.hpp ****         bool pre_calibrated = false;
  17:Inc/controller.hpp ****         bool calib_anticogging = false;
  18:Inc/controller.hpp ****         float calib_pos_threshold = 1.0f;
  19:Inc/controller.hpp ****         float calib_vel_threshold = 1.0f;
  20:Inc/controller.hpp ****         float cogging_ratio = 1.0f;
  21:Inc/controller.hpp ****         bool anticogging_enabled = true;
  22:Inc/controller.hpp ****     } Anticogging_t;
 378              		.loc 4 22 7
 379              		.cfi_startproc
 380              		@ args = 0, pretend = 0, frame = 8
 381              		@ frame_needed = 1, uses_anonymous_args = 0
 382              		@ link register save eliminated.
 383 0000 80B4     		push	{r7}
 384              	.LCFI15:
 385              		.cfi_def_cfa_offset 4
 386              		.cfi_offset 7, -4
 387 0002 83B0     		sub	sp, sp, #12
 388              	.LCFI16:
 389              		.cfi_def_cfa_offset 16
 390 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccjRbsN5.s 			page 44


 391              	.LCFI17:
 392              		.cfi_def_cfa_register 7
 393 0006 7860     		str	r0, [r7, #4]
 394              	.LBB2:
 395              		.loc 4 22 7
 396 0008 7B68     		ldr	r3, [r7, #4]
 397 000a 0022     		movs	r2, #0
 398 000c 1A60     		str	r2, [r3]
 399 000e 7B68     		ldr	r3, [r7, #4]
 400 0010 0022     		movs	r2, #0
 401 0012 83F80422 		strb	r2, [r3, #516]
 402 0016 7B68     		ldr	r3, [r7, #4]
 403 0018 0022     		movs	r2, #0
 404 001a 83F80522 		strb	r2, [r3, #517]
 405 001e 7B68     		ldr	r3, [r7, #4]
 406 0020 4FF07E52 		mov	r2, #1065353216
 407 0024 C3F80822 		str	r2, [r3, #520]	@ float
 408 0028 7B68     		ldr	r3, [r7, #4]
 409 002a 4FF07E52 		mov	r2, #1065353216
 410 002e C3F80C22 		str	r2, [r3, #524]	@ float
 411 0032 7B68     		ldr	r3, [r7, #4]
 412 0034 4FF07E52 		mov	r2, #1065353216
 413 0038 C3F81022 		str	r2, [r3, #528]	@ float
 414 003c 7B68     		ldr	r3, [r7, #4]
 415 003e 0122     		movs	r2, #1
 416 0040 83F81422 		strb	r2, [r3, #532]
 417              	.LBE2:
 418 0044 7B68     		ldr	r3, [r7, #4]
 419 0046 1846     		mov	r0, r3
 420 0048 0C37     		adds	r7, r7, #12
 421              	.LCFI18:
 422              		.cfi_def_cfa_offset 4
 423 004a BD46     		mov	sp, r7
 424              	.LCFI19:
 425              		.cfi_def_cfa_register 13
 426              		@ sp needed
 427 004c 5DF8047B 		ldr	r7, [sp], #4
 428              	.LCFI20:
 429              		.cfi_restore 7
 430              		.cfi_def_cfa_offset 0
 431 0050 7047     		bx	lr
 432              		.cfi_endproc
 433              	.LFE5632:
 435              		.weak	_ZN10Controller13Anticogging_tC1Ev
 436              		.thumb_set _ZN10Controller13Anticogging_tC1Ev,_ZN10Controller13Anticogging_tC2Ev
 437              		.section	.text._ZN10Controller8Config_tC2Ev,"axG",%progbits,_ZN10Controller8Config_tC5Ev,comdat
 438              		.align	1
 439              		.weak	_ZN10Controller8Config_tC2Ev
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu fpv4-sp-d16
 445              	_ZN10Controller8Config_tC2Ev:
 446              	.LFB5634:
  23:Inc/controller.hpp **** 
  24:Inc/controller.hpp ****     struct Config_t {
 447              		.loc 4 24 12
ARM GAS  /tmp/ccjRbsN5.s 			page 45


 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 8
 450              		@ frame_needed = 1, uses_anonymous_args = 0
 451 0000 80B5     		push	{r7, lr}
 452              	.LCFI21:
 453              		.cfi_def_cfa_offset 8
 454              		.cfi_offset 7, -8
 455              		.cfi_offset 14, -4
 456 0002 82B0     		sub	sp, sp, #8
 457              	.LCFI22:
 458              		.cfi_def_cfa_offset 16
 459 0004 00AF     		add	r7, sp, #0
 460              	.LCFI23:
 461              		.cfi_def_cfa_register 7
 462 0006 7860     		str	r0, [r7, #4]
 463              	.LBB3:
 464              		.loc 4 24 12
 465 0008 7B68     		ldr	r3, [r7, #4]
 466 000a 0422     		movs	r2, #4
 467 000c 1A70     		strb	r2, [r3]
 468 000e 7B68     		ldr	r3, [r7, #4]
 469 0010 0122     		movs	r2, #1
 470 0012 5A70     		strb	r2, [r3, #1]
 471 0014 7B68     		ldr	r3, [r7, #4]
 472 0016 304A     		ldr	r2, .L13
 473 0018 5A60     		str	r2, [r3, #4]	@ float
 474 001a 7B68     		ldr	r3, [r7, #4]
 475 001c 2F4A     		ldr	r2, .L13+4
 476 001e 9A60     		str	r2, [r3, #8]	@ float
 477 0020 7B68     		ldr	r3, [r7, #4]
 478 0022 2F4A     		ldr	r2, .L13+8
 479 0024 DA60     		str	r2, [r3, #12]	@ float
 480 0026 7B68     		ldr	r3, [r7, #4]
 481 0028 4FF00002 		mov	r2, #0
 482 002c 1A61     		str	r2, [r3, #16]	@ float
 483 002e 7B68     		ldr	r3, [r7, #4]
 484 0030 2C4A     		ldr	r2, .L13+12
 485 0032 5A61     		str	r2, [r3, #20]	@ float
 486 0034 7B68     		ldr	r3, [r7, #4]
 487 0036 4FF08042 		mov	r2, #1073741824
 488 003a 9A61     		str	r2, [r3, #24]	@ float
 489 003c 7B68     		ldr	r3, [r7, #4]
 490 003e 2A4A     		ldr	r2, .L13+16
 491 0040 DA61     		str	r2, [r3, #28]	@ float
 492 0042 7B68     		ldr	r3, [r7, #4]
 493 0044 4FF07E52 		mov	r2, #1065353216
 494 0048 1A62     		str	r2, [r3, #32]	@ float
 495 004a 7B68     		ldr	r3, [r7, #4]
 496 004c 244A     		ldr	r2, .L13+8
 497 004e 5A62     		str	r2, [r3, #36]	@ float
 498 0050 7B68     		ldr	r3, [r7, #4]
 499 0052 0022     		movs	r2, #0
 500 0054 83F82820 		strb	r2, [r3, #40]
 501 0058 7B68     		ldr	r3, [r7, #4]
 502 005a 4FF07E52 		mov	r2, #1065353216
 503 005e DA62     		str	r2, [r3, #44]	@ float
 504 0060 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccjRbsN5.s 			page 46


 505 0062 4FF48062 		mov	r2, #1024
 506 0066 1A63     		str	r2, [r3, #48]
 507 0068 7B68     		ldr	r3, [r7, #4]
 508 006a 4FF00002 		mov	r2, #0
 509 006e 5A63     		str	r2, [r3, #52]	@ float
 510 0070 7B68     		ldr	r3, [r7, #4]
 511 0072 4FF08042 		mov	r2, #1073741824
 512 0076 9A63     		str	r2, [r3, #56]	@ float
 513 0078 7B68     		ldr	r3, [r7, #4]
 514 007a 4FF07A52 		mov	r2, #1048576000
 515 007e DA63     		str	r2, [r3, #60]	@ float
 516 0080 7B68     		ldr	r3, [r7, #4]
 517 0082 4033     		adds	r3, r3, #64
 518 0084 1846     		mov	r0, r3
 519 0086 FFF7FEFF 		bl	_ZN10Controller13Anticogging_tC1Ev
 520 008a 7B68     		ldr	r3, [r7, #4]
 521 008c 174A     		ldr	r2, .L13+20
 522 008e C3F85822 		str	r2, [r3, #600]	@ float
 523 0092 7B68     		ldr	r3, [r7, #4]
 524 0094 0022     		movs	r2, #0
 525 0096 83F85C22 		strb	r2, [r3, #604]
 526 009a 7B68     		ldr	r3, [r7, #4]
 527 009c 0122     		movs	r2, #1
 528 009e 83F85D22 		strb	r2, [r3, #605]
 529 00a2 7B68     		ldr	r3, [r7, #4]
 530 00a4 0122     		movs	r2, #1
 531 00a6 83F85E22 		strb	r2, [r3, #606]
 532 00aa 7B68     		ldr	r3, [r7, #4]
 533 00ac 0122     		movs	r2, #1
 534 00ae 83F85F22 		strb	r2, [r3, #607]
 535 00b2 7B68     		ldr	r3, [r7, #4]
 536 00b4 FF22     		movs	r2, #255
 537 00b6 83F86022 		strb	r2, [r3, #608]
 538 00ba 7B68     		ldr	r3, [r7, #4]
 539 00bc 4FF07E52 		mov	r2, #1065353216
 540 00c0 C3F86422 		str	r2, [r3, #612]	@ float
 541 00c4 7B68     		ldr	r3, [r7, #4]
 542 00c6 FF22     		movs	r2, #255
 543 00c8 83F86822 		strb	r2, [r3, #616]
 544              	.LBE3:
 545 00cc 7B68     		ldr	r3, [r7, #4]
 546 00ce 1846     		mov	r0, r3
 547 00d0 0837     		adds	r7, r7, #8
 548              	.LCFI24:
 549              		.cfi_def_cfa_offset 8
 550 00d2 BD46     		mov	sp, r7
 551              	.LCFI25:
 552              		.cfi_def_cfa_register 13
 553              		@ sp needed
 554 00d4 80BD     		pop	{r7, pc}
 555              	.L14:
 556 00d6 00BF     		.align	2
 557              	.L13:
 558 00d8 0000A041 		.word	1101004800
 559 00dc ABAA2A3E 		.word	1042983595
 560 00e0 0AD7233C 		.word	1008981770
 561 00e4 ABAAAA3E 		.word	1051372203
ARM GAS  /tmp/ccjRbsN5.s 			page 47


 562 00e8 9A99993F 		.word	1067030938
 563 00ec 00002041 		.word	1092616192
 564              		.cfi_endproc
 565              	.LFE5634:
 567              		.weak	_ZN10Controller8Config_tC1Ev
 568              		.thumb_set _ZN10Controller8Config_tC1Ev,_ZN10Controller8Config_tC2Ev
 569              		.global	controller_configs
 570              		.section	.bss.controller_configs,"aw",%nobits
 571              		.align	2
 574              	controller_configs:
 575 0000 00000000 		.space	624
 575      00000000 
 575      00000000 
 575      00000000 
 575      00000000 
 576              		.section	.text._ZN5Motor8Config_tC2Ev,"axG",%progbits,_ZN5Motor8Config_tC5Ev,comdat
 577              		.align	1
 578              		.weak	_ZN5Motor8Config_tC2Ev
 579              		.syntax unified
 580              		.thumb
 581              		.thumb_func
 582              		.fpu fpv4-sp-d16
 584              	_ZN5Motor8Config_tC2Ev:
 585              	.LFB5637:
  61:Inc/motor.hpp ****         bool pre_calibrated = false; // can be set to true to indicate that all values here are val
 586              		.loc 3 61 12
 587              		.cfi_startproc
 588              		@ args = 0, pretend = 0, frame = 8
 589              		@ frame_needed = 1, uses_anonymous_args = 0
 590 0000 80B5     		push	{r7, lr}
 591              	.LCFI26:
 592              		.cfi_def_cfa_offset 8
 593              		.cfi_offset 7, -8
 594              		.cfi_offset 14, -4
 595 0002 82B0     		sub	sp, sp, #8
 596              	.LCFI27:
 597              		.cfi_def_cfa_offset 16
 598 0004 00AF     		add	r7, sp, #0
 599              	.LCFI28:
 600              		.cfi_def_cfa_register 7
 601 0006 7860     		str	r0, [r7, #4]
 602              	.LBB4:
  61:Inc/motor.hpp ****         bool pre_calibrated = false; // can be set to true to indicate that all values here are val
 603              		.loc 3 61 12
 604 0008 7B68     		ldr	r3, [r7, #4]
 605 000a 0022     		movs	r2, #0
 606 000c 1A70     		strb	r2, [r3]
 607 000e 7B68     		ldr	r3, [r7, #4]
 608 0010 1522     		movs	r2, #21
 609 0012 5A60     		str	r2, [r3, #4]
 610 0014 7B68     		ldr	r3, [r7, #4]
 611 0016 1022     		movs	r2, #16
 612 0018 9A60     		str	r2, [r3, #8]
 613 001a 7B68     		ldr	r3, [r7, #4]
 614 001c 314A     		ldr	r2, .L17
 615 001e DA60     		str	r2, [r3, #12]	@ float
 616 0020 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccjRbsN5.s 			page 48


 617 0022 314A     		ldr	r2, .L17+4
 618 0024 1A61     		str	r2, [r3, #16]	@ float
 619 0026 7B68     		ldr	r3, [r7, #4]
 620 0028 4FF08042 		mov	r2, #1073741824
 621 002c 5A61     		str	r2, [r3, #20]	@ float
 622 002e 7B68     		ldr	r3, [r7, #4]
 623 0030 2E4A     		ldr	r2, .L17+8
 624 0032 9A61     		str	r2, [r3, #24]	@ float
 625 0034 7B68     		ldr	r3, [r7, #4]
 626 0036 2E4A     		ldr	r2, .L17+12
 627 0038 DA61     		str	r2, [r3, #28]	@ float
 628 003a 7B68     		ldr	r3, [r7, #4]
 629 003c 2D4A     		ldr	r2, .L17+16
 630 003e 1A62     		str	r2, [r3, #32]	@ float
 631 0040 7B68     		ldr	r3, [r7, #4]
 632 0042 0122     		movs	r2, #1
 633 0044 5A62     		str	r2, [r3, #36]
 634 0046 7B68     		ldr	r3, [r7, #4]
 635 0048 0022     		movs	r2, #0
 636 004a 83F82820 		strb	r2, [r3, #40]
 637 004e 7B68     		ldr	r3, [r7, #4]
 638 0050 254A     		ldr	r2, .L17+4
 639 0052 DA62     		str	r2, [r3, #44]	@ float
 640 0054 7B68     		ldr	r3, [r7, #4]
 641 0056 4FF08242 		mov	r2, #1090519040
 642 005a 1A63     		str	r2, [r3, #48]	@ float
 643 005c FFF7FEFF 		bl	_ZNSt14numeric_limitsIfE8infinityEv
 644 0060 F0EE407A 		vmov.f32	s15, s0
 645 0064 7B68     		ldr	r3, [r7, #4]
 646 0066 C3ED0D7A 		vstr.32	s15, [r3, #52]
 647 006a 7B68     		ldr	r3, [r7, #4]
 648 006c 1D4A     		ldr	r2, .L17
 649 006e 9A63     		str	r2, [r3, #56]	@ float
 650 0070 7B68     		ldr	r3, [r7, #4]
 651 0072 214A     		ldr	r2, .L17+20
 652 0074 DA63     		str	r2, [r3, #60]	@ float
 653 0076 7B68     		ldr	r3, [r7, #4]
 654 0078 204A     		ldr	r2, .L17+24
 655 007a 1A64     		str	r2, [r3, #64]	@ float
 656 007c 7B68     		ldr	r3, [r7, #4]
 657 007e 204A     		ldr	r2, .L17+28
 658 0080 5A64     		str	r2, [r3, #68]	@ float
 659 0082 7B68     		ldr	r3, [r7, #4]
 660 0084 1F4A     		ldr	r2, .L17+32
 661 0086 9A64     		str	r2, [r3, #72]	@ float
 662 0088 7B68     		ldr	r3, [r7, #4]
 663 008a 174A     		ldr	r2, .L17+4
 664 008c DA64     		str	r2, [r3, #76]	@ float
 665 008e 7B68     		ldr	r3, [r7, #4]
 666 0090 154A     		ldr	r2, .L17+4
 667 0092 1A65     		str	r2, [r3, #80]	@ float
 668 0094 7B68     		ldr	r3, [r7, #4]
 669 0096 0022     		movs	r2, #0
 670 0098 83F85420 		strb	r2, [r3, #84]
 671 009c 7B68     		ldr	r3, [r7, #4]
 672 009e 124A     		ldr	r2, .L17+4
 673 00a0 9A65     		str	r2, [r3, #88]	@ float
ARM GAS  /tmp/ccjRbsN5.s 			page 49


 674 00a2 7B68     		ldr	r3, [r7, #4]
 675 00a4 4FF07E52 		mov	r2, #1065353216
 676 00a8 DA65     		str	r2, [r3, #92]	@ float
 677 00aa 7B68     		ldr	r3, [r7, #4]
 678 00ac 0022     		movs	r2, #0
 679 00ae 83F82024 		strb	r2, [r3, #1056]
 680 00b2 7B68     		ldr	r3, [r7, #4]
 681 00b4 0022     		movs	r2, #0
 682 00b6 83F82124 		strb	r2, [r3, #1057]
 683 00ba 7B68     		ldr	r3, [r7, #4]
 684 00bc 03F22443 		addw	r3, r3, #1060
 685 00c0 114A     		ldr	r2, .L17+36
 686 00c2 1A60     		str	r2, [r3]	@ float
 687 00c4 7B68     		ldr	r3, [r7, #4]
 688 00c6 03F58563 		add	r3, r3, #1064
 689 00ca 4FF0FF42 		mov	r2, #2139095040
 690 00ce 1A60     		str	r2, [r3]	@ float
 691 00d0 7B68     		ldr	r3, [r7, #4]
 692 00d2 0022     		movs	r2, #0
 693 00d4 C3F82C24 		str	r2, [r3, #1068]
 694              	.LBE4:
 695 00d8 7B68     		ldr	r3, [r7, #4]
 696 00da 1846     		mov	r0, r3
 697 00dc 0837     		adds	r7, r7, #8
 698              	.LCFI29:
 699              		.cfi_def_cfa_offset 8
 700 00de BD46     		mov	sp, r7
 701              	.LCFI30:
 702              		.cfi_def_cfa_register 13
 703              		@ sp needed
 704 00e0 80BD     		pop	{r7, pc}
 705              	.L18:
 706 00e2 00BF     		.align	2
 707              	.L17:
 708 00e4 00007042 		.word	1114636288
 709 00e8 00002041 		.word	1092616192
 710 00ec CDAF6638 		.word	946253773
 711 00f0 295C8F3D 		.word	1032805417
 712 00f4 0E2DB23D 		.word	1035087118
 713 00f8 00803B45 		.word	1161527296
 714 00fc 0000C842 		.word	1120403456
 715 0100 0000F042 		.word	1123024896
 716 0104 C74B6B41 		.word	1097550791
 717 0108 000080FF 		.word	-8388608
 718              		.cfi_endproc
 719              	.LFE5637:
 721              		.weak	_ZN5Motor8Config_tC1Ev
 722              		.thumb_set _ZN5Motor8Config_tC1Ev,_ZN5Motor8Config_tC2Ev
 723              		.global	motor_configs
 724              		.section	.bss.motor_configs,"aw",%nobits
 725              		.align	2
 728              	motor_configs:
 729 0000 00000000 		.space	1072
 729      00000000 
 729      00000000 
 729      00000000 
 729      00000000 
ARM GAS  /tmp/ccjRbsN5.s 			page 50


 730              		.global	fet_thermistor_configs
 731              		.section	.data.fet_thermistor_configs,"aw"
 732              		.align	2
 735              	fet_thermistor_configs:
 736 0000 0000C842 		.word	1120403456
 737 0004 0000F042 		.word	1123024896
 738 0008 01       		.byte	1
 739 0009 000000   		.space	3
 740              		.section	.text._ZN32OffboardThermistorCurrentLimiter8Config_tC2Ev,"axG",%progbits,_ZN32OffboardThe
 741              		.align	1
 742              		.weak	_ZN32OffboardThermistorCurrentLimiter8Config_tC2Ev
 743              		.syntax unified
 744              		.thumb
 745              		.thumb_func
 746              		.fpu fpv4-sp-d16
 748              	_ZN32OffboardThermistorCurrentLimiter8Config_tC2Ev:
 749              	.LFB5643:
 750              		.file 5 "Inc/thermistor.hpp"
   1:Inc/thermistor.hpp **** #ifndef __THERMISTOR_HPP
   2:Inc/thermistor.hpp **** #define __THERMISTOR_HPP
   3:Inc/thermistor.hpp **** 
   4:Inc/thermistor.hpp **** #include "main.h"
   5:Inc/thermistor.hpp **** #include "interfaces.hpp"
   6:Inc/thermistor.hpp **** #include "current_limiter.hpp"
   7:Inc/thermistor.hpp **** 
   8:Inc/thermistor.hpp **** #define THERMISTOR_CURRENT_LIMITER_MAX_TEMP 150.0f
   9:Inc/thermistor.hpp **** #define THERMISTOR_CURRENT_LIMITER_MIN_TEMP -40.0f
  10:Inc/thermistor.hpp **** 
  11:Inc/thermistor.hpp **** #define THERMISTOR_CURRENT_LIMITER_MAX_CURRENT 3.0f
  12:Inc/thermistor.hpp **** 
  13:Inc/thermistor.hpp **** class Axis;
  14:Inc/thermistor.hpp **** 
  15:Inc/thermistor.hpp **** 
  16:Inc/thermistor.hpp **** class ThermistorCurrentLimiter : public CurrentLimiter, public ODriveIntf::ThermistorCurrentLimiter
  17:Inc/thermistor.hpp **** public:
  18:Inc/thermistor.hpp ****     virtual ~ThermistorCurrentLimiter() = default;
  19:Inc/thermistor.hpp **** 
  20:Inc/thermistor.hpp ****     ThermistorCurrentLimiter(uint16_t adc_channel,
  21:Inc/thermistor.hpp ****                              const float* const coefficients,
  22:Inc/thermistor.hpp ****                              const float* const aux_coefficients,
  23:Inc/thermistor.hpp ****                              size_t num_coeffs,
  24:Inc/thermistor.hpp ****                              const float& temp_limit_lower,
  25:Inc/thermistor.hpp ****                              const float& temp_limit_upper,
  26:Inc/thermistor.hpp ****                              const bool& enabled);
  27:Inc/thermistor.hpp **** 
  28:Inc/thermistor.hpp ****     void update();
  29:Inc/thermistor.hpp ****     bool do_checks();
  30:Inc/thermistor.hpp ****     float get_current_limit(float base_current_lim) const override;
  31:Inc/thermistor.hpp **** 
  32:Inc/thermistor.hpp ****     uint16_t adc_channel_;
  33:Inc/thermistor.hpp ****     const float* const coefficients_;
  34:Inc/thermistor.hpp ****     const float* const aux_coefficients_;
  35:Inc/thermistor.hpp ****     const size_t num_coeffs_;
  36:Inc/thermistor.hpp ****     float temperature_;
  37:Inc/thermistor.hpp ****     int32_t temperature_int_;
  38:Inc/thermistor.hpp ****     float aux_temperature_;
  39:Inc/thermistor.hpp ****     int32_t aux_temperature_int_;
ARM GAS  /tmp/ccjRbsN5.s 			page 51


  40:Inc/thermistor.hpp ****     const float& temp_limit_lower_;
  41:Inc/thermistor.hpp ****     const float& temp_limit_upper_;
  42:Inc/thermistor.hpp ****     const bool& enabled_;
  43:Inc/thermistor.hpp ****     Error error_;
  44:Inc/thermistor.hpp ****     Axis* axis_ = nullptr; // set by Axis constructor
  45:Inc/thermistor.hpp **** };
  46:Inc/thermistor.hpp **** 
  47:Inc/thermistor.hpp **** class OnboardThermistorCurrentLimiter : public ThermistorCurrentLimiter, public ODriveIntf::Onboard
  48:Inc/thermistor.hpp **** public:
  49:Inc/thermistor.hpp ****     struct Config_t {
  50:Inc/thermistor.hpp ****         float temp_limit_lower = 100;
  51:Inc/thermistor.hpp ****         float temp_limit_upper = 120;
  52:Inc/thermistor.hpp ****         bool enabled = true;
  53:Inc/thermistor.hpp ****     };
  54:Inc/thermistor.hpp **** 
  55:Inc/thermistor.hpp ****     virtual ~OnboardThermistorCurrentLimiter() = default;
  56:Inc/thermistor.hpp ****     OnboardThermistorCurrentLimiter(const ThermistorHardwareConfig_t& hw_config, Config_t& config);
  57:Inc/thermistor.hpp **** 
  58:Inc/thermistor.hpp ****     Config_t& config_;
  59:Inc/thermistor.hpp **** };
  60:Inc/thermistor.hpp **** 
  61:Inc/thermistor.hpp **** class OffboardThermistorCurrentLimiter : public ThermistorCurrentLimiter, public ODriveIntf::Offboa
  62:Inc/thermistor.hpp **** public:
  63:Inc/thermistor.hpp ****     static const size_t num_coeffs_ = 4;
  64:Inc/thermistor.hpp **** 
  65:Inc/thermistor.hpp ****     struct Config_t {
 751              		.loc 5 65 12
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 8
 754              		@ frame_needed = 1, uses_anonymous_args = 0
 755              		@ link register save eliminated.
 756 0000 80B4     		push	{r7}
 757              	.LCFI31:
 758              		.cfi_def_cfa_offset 4
 759              		.cfi_offset 7, -4
 760 0002 83B0     		sub	sp, sp, #12
 761              	.LCFI32:
 762              		.cfi_def_cfa_offset 16
 763 0004 00AF     		add	r7, sp, #0
 764              	.LCFI33:
 765              		.cfi_def_cfa_register 7
 766 0006 7860     		str	r0, [r7, #4]
 767              	.LBB5:
 768              		.loc 5 65 12
 769 0008 7B68     		ldr	r3, [r7, #4]
 770 000a 0422     		movs	r2, #4
 771 000c 1A84     		strh	r2, [r3, #32]	@ movhi
 772 000e 7B68     		ldr	r3, [r7, #4]
 773 0010 074A     		ldr	r2, .L21
 774 0012 5A62     		str	r2, [r3, #36]	@ float
 775 0014 7B68     		ldr	r3, [r7, #4]
 776 0016 074A     		ldr	r2, .L21+4
 777 0018 9A62     		str	r2, [r3, #40]	@ float
 778 001a 7B68     		ldr	r3, [r7, #4]
 779 001c 0122     		movs	r2, #1
 780 001e 83F82C20 		strb	r2, [r3, #44]
 781              	.LBE5:
ARM GAS  /tmp/ccjRbsN5.s 			page 52


 782 0022 7B68     		ldr	r3, [r7, #4]
 783 0024 1846     		mov	r0, r3
 784 0026 0C37     		adds	r7, r7, #12
 785              	.LCFI34:
 786              		.cfi_def_cfa_offset 4
 787 0028 BD46     		mov	sp, r7
 788              	.LCFI35:
 789              		.cfi_def_cfa_register 13
 790              		@ sp needed
 791 002a 5DF8047B 		ldr	r7, [sp], #4
 792              	.LCFI36:
 793              		.cfi_restore 7
 794              		.cfi_def_cfa_offset 0
 795 002e 7047     		bx	lr
 796              	.L22:
 797              		.align	2
 798              	.L21:
 799 0030 00007042 		.word	1114636288
 800 0034 0000A042 		.word	1117782016
 801              		.cfi_endproc
 802              	.LFE5643:
 804              		.weak	_ZN32OffboardThermistorCurrentLimiter8Config_tC1Ev
 805              		.thumb_set _ZN32OffboardThermistorCurrentLimiter8Config_tC1Ev,_ZN32OffboardThermistorCurrentLimite
 806              		.global	motor_thermistor_configs
 807              		.section	.bss.motor_thermistor_configs,"aw",%nobits
 808              		.align	2
 811              	motor_thermistor_configs:
 812 0000 00000000 		.space	52
 812      00000000 
 812      00000000 
 812      00000000 
 812      00000000 
 813              		.section	.text._ZN4Axis14LockinConfig_tC2Ev,"axG",%progbits,_ZN4Axis14LockinConfig_tC5Ev,comdat
 814              		.align	1
 815              		.weak	_ZN4Axis14LockinConfig_tC2Ev
 816              		.syntax unified
 817              		.thumb
 818              		.thumb_func
 819              		.fpu fpv4-sp-d16
 821              	_ZN4Axis14LockinConfig_tC2Ev:
 822              	.LFB5647:
 823              		.file 6 "Inc/axis.hpp"
   1:Inc/axis.hpp  **** #ifndef __AXIS_HPP
   2:Inc/axis.hpp  **** #define __AXIS_HPP
   3:Inc/axis.hpp  **** 
   4:Inc/axis.hpp  **** 
   5:Inc/axis.hpp  **** #include "task_timer.hpp"
   6:Inc/axis.hpp  **** #include <array>
   7:Inc/axis.hpp  **** #include "interfaces.hpp"
   8:Inc/axis.hpp  **** #include "open_loop_controller.hpp"
   9:Inc/axis.hpp  **** #include <functional>
  10:Inc/axis.hpp  **** #include "low_level.h"  // Add this for safety_critical_disarm_motor_pwm declaration
  11:Inc/axis.hpp  **** #include  "current_limiter.hpp"
  12:Inc/axis.hpp  **** #include "utils.hpp"
  13:Inc/axis.hpp  **** 
  14:Inc/axis.hpp  **** class Motor;
  15:Inc/axis.hpp  **** class Controller;
ARM GAS  /tmp/ccjRbsN5.s 			page 53


  16:Inc/axis.hpp  **** class Encoder;
  17:Inc/axis.hpp  **** class OpenLoopController;
  18:Inc/axis.hpp  **** class  OnboardThermistorCurrentLimiter;
  19:Inc/axis.hpp  **** class  OffboardThermistorCurrentLimiter;
  20:Inc/axis.hpp  **** class ThermistorCurrentLimiter;
  21:Inc/axis.hpp  **** 
  22:Inc/axis.hpp  **** class Axis : public ODriveIntf::AxisIntf{
  23:Inc/axis.hpp  **** public:
  24:Inc/axis.hpp  ****     struct LockinConfig_t {
 824              		.loc 6 24 12
 825              		.cfi_startproc
 826              		@ args = 0, pretend = 0, frame = 8
 827              		@ frame_needed = 1, uses_anonymous_args = 0
 828              		@ link register save eliminated.
 829 0000 80B4     		push	{r7}
 830              	.LCFI37:
 831              		.cfi_def_cfa_offset 4
 832              		.cfi_offset 7, -4
 833 0002 83B0     		sub	sp, sp, #12
 834              	.LCFI38:
 835              		.cfi_def_cfa_offset 16
 836 0004 00AF     		add	r7, sp, #0
 837              	.LCFI39:
 838              		.cfi_def_cfa_register 7
 839 0006 7860     		str	r0, [r7, #4]
 840              	.LBB6:
 841              		.loc 6 24 12
 842 0008 7B68     		ldr	r3, [r7, #4]
 843 000a 104A     		ldr	r2, .L25
 844 000c 1A60     		str	r2, [r3]	@ float
 845 000e 7B68     		ldr	r3, [r7, #4]
 846 0010 0F4A     		ldr	r2, .L25+4
 847 0012 5A60     		str	r2, [r3, #4]	@ float
 848 0014 7B68     		ldr	r3, [r7, #4]
 849 0016 0F4A     		ldr	r2, .L25+8
 850 0018 9A60     		str	r2, [r3, #8]	@ float
 851 001a 7B68     		ldr	r3, [r7, #4]
 852 001c 0E4A     		ldr	r2, .L25+12
 853 001e DA60     		str	r2, [r3, #12]	@ float
 854 0020 7B68     		ldr	r3, [r7, #4]
 855 0022 0E4A     		ldr	r2, .L25+16
 856 0024 1A61     		str	r2, [r3, #16]	@ float
 857 0026 7B68     		ldr	r3, [r7, #4]
 858 0028 0D4A     		ldr	r2, .L25+20
 859 002a 5A61     		str	r2, [r3, #20]	@ float
 860 002c 7B68     		ldr	r3, [r7, #4]
 861 002e 0022     		movs	r2, #0
 862 0030 1A76     		strb	r2, [r3, #24]
 863 0032 7B68     		ldr	r3, [r7, #4]
 864 0034 0022     		movs	r2, #0
 865 0036 5A76     		strb	r2, [r3, #25]
 866 0038 7B68     		ldr	r3, [r7, #4]
 867 003a 0022     		movs	r2, #0
 868 003c 9A76     		strb	r2, [r3, #26]
 869              	.LBE6:
 870 003e 7B68     		ldr	r3, [r7, #4]
 871 0040 1846     		mov	r0, r3
ARM GAS  /tmp/ccjRbsN5.s 			page 54


 872 0042 0C37     		adds	r7, r7, #12
 873              	.LCFI40:
 874              		.cfi_def_cfa_offset 4
 875 0044 BD46     		mov	sp, r7
 876              	.LCFI41:
 877              		.cfi_def_cfa_register 13
 878              		@ sp needed
 879 0046 5DF8047B 		ldr	r7, [sp], #4
 880              	.LCFI42:
 881              		.cfi_restore 7
 882              		.cfi_def_cfa_offset 0
 883 004a 7047     		bx	lr
 884              	.L26:
 885              		.align	2
 886              	.L25:
 887 004c 00002041 		.word	1092616192
 888 0050 CDCCCC3E 		.word	1053609165
 889 0054 DB0F4940 		.word	1078530011
 890 0058 0000A041 		.word	1101004800
 891 005c 00002042 		.word	1109393408
 892 0060 0000C842 		.word	1120403456
 893              		.cfi_endproc
 894              	.LFE5647:
 896              		.weak	_ZN4Axis14LockinConfig_tC1Ev
 897              		.thumb_set _ZN4Axis14LockinConfig_tC1Ev,_ZN4Axis14LockinConfig_tC2Ev
 898              		.section	.text._ZN4Axis8Config_tC2Ev,"axG",%progbits,_ZN4Axis8Config_tC5Ev,comdat
 899              		.align	1
 900              		.weak	_ZN4Axis8Config_tC2Ev
 901              		.syntax unified
 902              		.thumb
 903              		.thumb_func
 904              		.fpu fpv4-sp-d16
 906              	_ZN4Axis8Config_tC2Ev:
 907              	.LFB5649:
  25:Inc/axis.hpp  ****         float current = 10.0f;           // [A]
  26:Inc/axis.hpp  ****         float ramp_time = 0.4f;          // [s]
  27:Inc/axis.hpp  ****         float ramp_distance = 1 * M_PI;  // [rad]
  28:Inc/axis.hpp  ****         float accel = 20.0f;     // [rad/s^2]
  29:Inc/axis.hpp  ****         float vel = 40.0f; // [rad/s]
  30:Inc/axis.hpp  ****         float finish_distance = 100.0f;  // [rad]
  31:Inc/axis.hpp  ****         bool finish_on_vel = false;
  32:Inc/axis.hpp  ****         bool finish_on_distance = false;
  33:Inc/axis.hpp  ****         bool finish_on_enc_idx = false;
  34:Inc/axis.hpp  ****     };
  35:Inc/axis.hpp  ****     struct TaskTimes {
  36:Inc/axis.hpp  ****         TaskTimer thermistor_update;
  37:Inc/axis.hpp  ****         TaskTimer encoder_update;
  38:Inc/axis.hpp  ****         TaskTimer sensorless_estimator_update;
  39:Inc/axis.hpp  ****         TaskTimer endstop_update;
  40:Inc/axis.hpp  ****         TaskTimer can_heartbeat;
  41:Inc/axis.hpp  ****         TaskTimer controller_update;
  42:Inc/axis.hpp  ****         TaskTimer open_loop_controller_update;
  43:Inc/axis.hpp  ****         TaskTimer acim_estimator_update;
  44:Inc/axis.hpp  ****         TaskTimer motor_update;
  45:Inc/axis.hpp  ****         TaskTimer current_controller_update;
  46:Inc/axis.hpp  ****         TaskTimer dc_calib;
  47:Inc/axis.hpp  ****         TaskTimer current_sense;
ARM GAS  /tmp/ccjRbsN5.s 			page 55


  48:Inc/axis.hpp  ****         TaskTimer pwm_update;
  49:Inc/axis.hpp  ****     };
  50:Inc/axis.hpp  **** 
  51:Inc/axis.hpp  **** 
  52:Inc/axis.hpp  **** 
  53:Inc/axis.hpp  **** 
  54:Inc/axis.hpp  **** 
  55:Inc/axis.hpp  ****    enum ENCOS_ERRO
  56:Inc/axis.hpp  ****    {
  57:Inc/axis.hpp  ****       ENCOS_ERROR_NONE = 0,
  58:Inc/axis.hpp  ****       ENCOS_ERROR_OVER_TEMP = 1,
  59:Inc/axis.hpp  ****       ENCOS_ERROR_CURRENT_LIMIT_VIOLATION =2,
  60:Inc/axis.hpp  ****       ENCOS_ERROR_DC_BUS_UNDER_VOLTAGE =3,
  61:Inc/axis.hpp  ****       ENCOS_ERROR_ABS_SPI_COM_FAIL=4,
  62:Inc/axis.hpp  ****       ENCOS_ERROR_DC_BUS_OVER_VOLTAGE =6,
  63:Inc/axis.hpp  ****       ENCOS_ERROR_DRV_FAULT=7,
  64:Inc/axis.hpp  ****    };
  65:Inc/axis.hpp  **** 
  66:Inc/axis.hpp  **** 
  67:Inc/axis.hpp  **** 
  68:Inc/axis.hpp  ****     static constexpr uint32_t PARAM_LEN = 128;
  69:Inc/axis.hpp  ****     enum EXT_CONFIG_REG
  70:Inc/axis.hpp  ****     {
  71:Inc/axis.hpp  ****         EXT_CONFIG_REG_ENABLE_NOTCH_FILTER = 0,
  72:Inc/axis.hpp  ****         EXT_CONFIG_REG_ENABLE_DC_BUS_OVER_VOLTAGE_FILTER = 1,
  73:Inc/axis.hpp  ****         EXT_CONFIG_REG_ENABLE_DC_BUS_UNDER_VOLTAGE_FILTER = 2,
  74:Inc/axis.hpp  ****         EXT_CONFIG_REG_ENABLE_OVER_TEMP_FILTER = 3,
  75:Inc/axis.hpp  ****         EXT_CONFIG_REG_ENABLE_CURRENT_LIMIT_VIOLATION_FILTER = 4
  76:Inc/axis.hpp  ****     };
  77:Inc/axis.hpp  **** 
  78:Inc/axis.hpp  **** 
  79:Inc/axis.hpp  **** 
  80:Inc/axis.hpp  ****     static LockinConfig_t default_calibration();
  81:Inc/axis.hpp  ****     static LockinConfig_t default_sensorless();
  82:Inc/axis.hpp  ****     static LockinConfig_t default_lockin();
  83:Inc/axis.hpp  **** 
  84:Inc/axis.hpp  ****     struct Config_t {
 908              		.loc 6 84 12
 909              		.cfi_startproc
 910              		@ args = 0, pretend = 0, frame = 8
 911              		@ frame_needed = 1, uses_anonymous_args = 0
 912 0000 80B5     		push	{r7, lr}
 913              	.LCFI43:
 914              		.cfi_def_cfa_offset 8
 915              		.cfi_offset 7, -8
 916              		.cfi_offset 14, -4
 917 0002 82B0     		sub	sp, sp, #8
 918              	.LCFI44:
 919              		.cfi_def_cfa_offset 16
 920 0004 00AF     		add	r7, sp, #0
 921              	.LCFI45:
 922              		.cfi_def_cfa_register 7
 923 0006 7860     		str	r0, [r7, #4]
 924              	.LBB7:
 925              		.loc 6 84 12
 926 0008 7B68     		ldr	r3, [r7, #4]
 927 000a 0022     		movs	r2, #0
ARM GAS  /tmp/ccjRbsN5.s 			page 56


 928 000c 1A70     		strb	r2, [r3]
 929 000e 7B68     		ldr	r3, [r7, #4]
 930 0010 0022     		movs	r2, #0
 931 0012 5A70     		strb	r2, [r3, #1]
 932 0014 7B68     		ldr	r3, [r7, #4]
 933 0016 0022     		movs	r2, #0
 934 0018 9A70     		strb	r2, [r3, #2]
 935 001a 7B68     		ldr	r3, [r7, #4]
 936 001c 0022     		movs	r2, #0
 937 001e DA70     		strb	r2, [r3, #3]
 938 0020 7B68     		ldr	r3, [r7, #4]
 939 0022 0022     		movs	r2, #0
 940 0024 1A71     		strb	r2, [r3, #4]
 941 0026 7B68     		ldr	r3, [r7, #4]
 942 0028 0022     		movs	r2, #0
 943 002a 5A71     		strb	r2, [r3, #5]
 944 002c 7B68     		ldr	r3, [r7, #4]
 945 002e 0022     		movs	r2, #0
 946 0030 9A71     		strb	r2, [r3, #6]
 947 0032 7B68     		ldr	r3, [r7, #4]
 948 0034 0022     		movs	r2, #0
 949 0036 DA71     		strb	r2, [r3, #7]
 950 0038 7B68     		ldr	r3, [r7, #4]
 951 003a 4FF06A52 		mov	r2, #981467136
 952 003e 9A60     		str	r2, [r3, #8]	@ float
 953 0040 7B68     		ldr	r3, [r7, #4]
 954 0042 0022     		movs	r2, #0
 955 0044 1A73     		strb	r2, [r3, #12]
 956 0046 7B68     		ldr	r3, [r7, #4]
 957 0048 4FF07E52 		mov	r2, #1065353216
 958 004c 1A61     		str	r2, [r3, #16]	@ float
 959 004e 7B68     		ldr	r3, [r7, #4]
 960 0050 0122     		movs	r2, #1
 961 0052 1A75     		strb	r2, [r3, #20]
 962 0054 7B68     		ldr	r3, [r7, #4]
 963 0056 0022     		movs	r2, #0
 964 0058 DA82     		strh	r2, [r3, #22]	@ movhi
 965 005a 7B68     		ldr	r3, [r7, #4]
 966 005c 0022     		movs	r2, #0
 967 005e 1A83     		strh	r2, [r3, #24]	@ movhi
 968 0060 7B68     		ldr	r3, [r7, #4]
 969 0062 1C33     		adds	r3, r3, #28
 970 0064 1846     		mov	r0, r3
 971 0066 FFF7FEFF 		bl	_ZN4Axis19default_calibrationEv
 972 006a 7B68     		ldr	r3, [r7, #4]
 973 006c 3833     		adds	r3, r3, #56
 974 006e 1846     		mov	r0, r3
 975 0070 FFF7FEFF 		bl	_ZN4Axis18default_sensorlessEv
 976 0074 7B68     		ldr	r3, [r7, #4]
 977 0076 5433     		adds	r3, r3, #84
 978 0078 1846     		mov	r0, r3
 979 007a FFF7FEFF 		bl	_ZN4Axis14LockinConfig_tC1Ev
 980 007e 7B68     		ldr	r3, [r7, #4]
 981 0080 0122     		movs	r2, #1
 982 0082 1A67     		str	r2, [r3, #112]
 983 0084 7B68     		ldr	r3, [r7, #4]
 984 0086 0022     		movs	r2, #0
ARM GAS  /tmp/ccjRbsN5.s 			page 57


 985 0088 83F87420 		strb	r2, [r3, #116]
 986 008c 7B68     		ldr	r3, [r7, #4]
 987 008e 6422     		movs	r2, #100
 988 0090 9A67     		str	r2, [r3, #120]
 989 0092 7B68     		ldr	r3, [r7, #4]
 990 0094 0B4A     		ldr	r2, .L29
 991 0096 C3F88022 		str	r2, [r3, #640]	@ float
 992 009a 7B68     		ldr	r3, [r7, #4]
 993 009c 0A4A     		ldr	r2, .L29+4
 994 009e C3F88422 		str	r2, [r3, #644]	@ float
 995 00a2 7B68     		ldr	r3, [r7, #4]
 996 00a4 094A     		ldr	r2, .L29+8
 997 00a6 C3F88822 		str	r2, [r3, #648]	@ float
 998 00aa 7B68     		ldr	r3, [r7, #4]
 999 00ac 0022     		movs	r2, #0
 1000 00ae 83F88C22 		strb	r2, [r3, #652]
 1001 00b2 7B68     		ldr	r3, [r7, #4]
 1002 00b4 0022     		movs	r2, #0
 1003 00b6 C3F89022 		str	r2, [r3, #656]
 1004              	.LBE7:
 1005 00ba 7B68     		ldr	r3, [r7, #4]
 1006 00bc 1846     		mov	r0, r3
 1007 00be 0837     		adds	r7, r7, #8
 1008              	.LCFI46:
 1009              		.cfi_def_cfa_offset 8
 1010 00c0 BD46     		mov	sp, r7
 1011              	.LCFI47:
 1012              		.cfi_def_cfa_register 13
 1013              		@ sp needed
 1014 00c2 80BD     		pop	{r7, pc}
 1015              	.L30:
 1016              		.align	2
 1017              	.L29:
 1018 00c4 00004841 		.word	1095237632
 1019 00c8 00009041 		.word	1099956224
 1020 00cc 00007042 		.word	1114636288
 1021              		.cfi_endproc
 1022              	.LFE5649:
 1024              		.weak	_ZN4Axis8Config_tC1Ev
 1025              		.thumb_set _ZN4Axis8Config_tC1Ev,_ZN4Axis8Config_tC2Ev
 1026              		.global	axis_configs
 1027              		.section	.bss.axis_configs,"aw",%nobits
 1028              		.align	2
 1031              	axis_configs:
 1032 0000 00000000 		.space	660
 1032      00000000 
 1032      00000000 
 1032      00000000 
 1032      00000000 
 1033              		.global	axes
 1034              		.section	.bss.axes,"aw",%nobits
 1035              		.align	2
 1038              	axes:
 1039 0000 00000000 		.space	4
 1040              		.global	odCAN
 1041              		.section	.bss.odCAN,"aw",%nobits
 1042              		.align	2
ARM GAS  /tmp/ccjRbsN5.s 			page 58


 1045              	odCAN:
 1046 0000 00000000 		.space	4
 1047              		.global	motor_params
 1048              		.section	.bss.motor_params,"aw",%nobits
 1049              		.align	2
 1052              	motor_params:
 1053 0000 00000000 		.space	48
 1053      00000000 
 1053      00000000 
 1053      00000000 
 1053      00000000 
 1054              		.global	motor_runtime
 1055              		.section	.bss.motor_runtime,"aw",%nobits
 1056              		.align	2
 1059              	motor_runtime:
 1060 0000 00000000 		.space	32
 1060      00000000 
 1060      00000000 
 1060      00000000 
 1060      00000000 
 1061              		.section	.text._Z18save_configurationv,"ax",%progbits
 1062              		.align	1
 1063              		.global	_Z18save_configurationv
 1064              		.syntax unified
 1065              		.thumb
 1066              		.thumb_func
 1067              		.fpu fpv4-sp-d16
 1069              	_Z18save_configurationv:
 1070              	.LFB5651:
 1071              		.file 7 "Src/main_.cpp"
   1:Src/main_.cpp **** 
   2:Src/main_.cpp **** #define __MAIN_CPP__
   3:Src/main_.cpp **** 
   4:Src/main_.cpp **** #include "freertos_vars.h"
   5:Src/main_.cpp **** #include <interface_can.hpp>
   6:Src/main_.cpp **** 
   7:Src/main_.cpp **** #include "main_.hpp"
   8:Src/main_.cpp **** #include "low_level.h"
   9:Src/main_.cpp **** 
  10:Src/main_.cpp **** BoardConfig_t board_config;
  11:Src/main_.cpp **** SystemStats_t system_stats;
  12:Src/main_.cpp **** 
  13:Src/main_.cpp **** 
  14:Src/main_.cpp **** float current_meas_period = CURRENT_MEAS_PERIOD;
  15:Src/main_.cpp **** ODriveCAN::Config_t can_config;
  16:Src/main_.cpp **** Encoder::Config_t encoder_configs;
  17:Src/main_.cpp **** Controller::Config_t controller_configs;
  18:Src/main_.cpp **** Motor::Config_t motor_configs;
  19:Src/main_.cpp **** OnboardThermistorCurrentLimiter::Config_t fet_thermistor_configs;
  20:Src/main_.cpp **** OffboardThermistorCurrentLimiter::Config_t motor_thermistor_configs;
  21:Src/main_.cpp **** Axis::Config_t axis_configs;
  22:Src/main_.cpp **** 
  23:Src/main_.cpp **** Axis* axes;
  24:Src/main_.cpp **** ODriveCAN *odCAN = nullptr;
  25:Src/main_.cpp **** 
  26:Src/main_.cpp **** // 声明全局变量
  27:Src/main_.cpp ****  MotorParams motor_params;
ARM GAS  /tmp/ccjRbsN5.s 			page 59


  28:Src/main_.cpp ****  MotorRuntime motor_runtime;
  29:Src/main_.cpp **** 
  30:Src/main_.cpp **** 
  31:Src/main_.cpp **** 
  32:Src/main_.cpp **** void save_configuration(void) {
 1072              		.loc 7 32 31
 1073              		.cfi_startproc
 1074              		@ args = 0, pretend = 0, frame = 0
 1075              		@ frame_needed = 1, uses_anonymous_args = 0
 1076              		@ link register save eliminated.
 1077 0000 80B4     		push	{r7}
 1078              	.LCFI48:
 1079              		.cfi_def_cfa_offset 4
 1080              		.cfi_offset 7, -4
 1081 0002 00AF     		add	r7, sp, #0
 1082              	.LCFI49:
 1083              		.cfi_def_cfa_register 7
  33:Src/main_.cpp ****     // if (ConfigFormat::safe_store_config(
  34:Src/main_.cpp ****     //         &board_config,
  35:Src/main_.cpp ****     //         &can_config,
  36:Src/main_.cpp ****     //         &encoder_configs,
  37:Src/main_.cpp ****     //         &controller_configs,
  38:Src/main_.cpp ****     //         &motor_configs,
  39:Src/main_.cpp ****     //         &fet_thermistor_configs,
  40:Src/main_.cpp ****     //         &motor_thermistor_configs,
  41:Src/main_.cpp ****     //         &axis_configs)) {
  42:Src/main_.cpp ****     //     printf("saving configuration failed\r\n"); osDelay(5);
  43:Src/main_.cpp ****     // } else {
  44:Src/main_.cpp ****     //     user_config_loaded_ = true;
  45:Src/main_.cpp ****     // }
  46:Src/main_.cpp **** }
 1084              		.loc 7 46 1
 1085 0004 00BF     		nop
 1086 0006 BD46     		mov	sp, r7
 1087              	.LCFI50:
 1088              		.cfi_def_cfa_register 13
 1089              		@ sp needed
 1090 0008 5DF8047B 		ldr	r7, [sp], #4
 1091              	.LCFI51:
 1092              		.cfi_restore 7
 1093              		.cfi_def_cfa_offset 0
 1094 000c 7047     		bx	lr
 1095              		.cfi_endproc
 1096              	.LFE5651:
 1098              		.section	.text.load_configuration,"ax",%progbits
 1099              		.align	1
 1100              		.global	load_configuration
 1101              		.syntax unified
 1102              		.thumb
 1103              		.thumb_func
 1104              		.fpu fpv4-sp-d16
 1106              	load_configuration:
 1107              	.LFB5652:
  47:Src/main_.cpp **** 
  48:Src/main_.cpp **** extern "C" int load_configuration(void) {
 1108              		.loc 7 48 41
 1109              		.cfi_startproc
ARM GAS  /tmp/ccjRbsN5.s 			page 60


 1110              		@ args = 0, pretend = 0, frame = 0
 1111              		@ frame_needed = 1, uses_anonymous_args = 0
 1112              		@ link register save eliminated.
 1113 0000 80B4     		push	{r7}
 1114              	.LCFI52:
 1115              		.cfi_def_cfa_offset 4
 1116              		.cfi_offset 7, -4
 1117 0002 00AF     		add	r7, sp, #0
 1118              	.LCFI53:
 1119              		.cfi_def_cfa_register 7
  49:Src/main_.cpp **** //     // Try to load configs
  50:Src/main_.cpp **** //     if (NVM_init() ||
  51:Src/main_.cpp **** //         ConfigFormat::safe_load_config(
  52:Src/main_.cpp **** //                 &board_config,
  53:Src/main_.cpp **** //                 &can_config,
  54:Src/main_.cpp **** //                 &encoder_configs,
  55:Src/main_.cpp **** //                 &controller_configs,
  56:Src/main_.cpp **** //                 &motor_configs,
  57:Src/main_.cpp **** //                 &fet_thermistor_configs,
  58:Src/main_.cpp **** //                 &motor_thermistor_configs,
  59:Src/main_.cpp **** //                 &axis_configs)) {
  60:Src/main_.cpp **** //         //If loading failed, restore defaults
  61:Src/main_.cpp **** //         board_config = BoardConfig_t();
  62:Src/main_.cpp **** //         can_config = ODriveCAN::Config_t();
  63:Src/main_.cpp **** //         for (size_t i = 0; i < AXIS_COUNT; ++i) {
  64:Src/main_.cpp **** //             encoder_configs[i] = Encoder::Config_t();
  65:Src/main_.cpp **** //             controller_configs[i] = Controller::Config_t();
  66:Src/main_.cpp **** //             motor_configs[i] = Motor::Config_t();
  67:Src/main_.cpp **** //             fet_thermistor_configs[i] = OnboardThermistorCurrentLimiter::Config_t();
  68:Src/main_.cpp **** //             motor_thermistor_configs[i] = OffboardThermistorCurrentLimiter::Config_t();
  69:Src/main_.cpp **** //             axis_configs[i] = Axis::Config_t();
  70:Src/main_.cpp **** //             // Default step/dir pins are different, so we need to explicitly load them
  71:Src/main_.cpp **** //          //   Axis::load_default_can_id(i, axis_configs[i]);
  72:Src/main_.cpp **** 
  73:Src/main_.cpp **** //             controller_configs[i].load_encoder_axis = i;
  74:Src/main_.cpp **** //         }
  75:Src/main_.cpp **** //     } else {
  76:Src/main_.cpp **** //         odrv.user_config_loaded_ = true;
  77:Src/main_.cpp **** //     }
  78:Src/main_.cpp **** //  //   encoder_configs[0].mode = Encoder::MODE_UART_ABS_KING;
  79:Src/main_.cpp **** //     return odrv.user_config_loaded_;
  80:Src/main_.cpp **** }
 1120              		.loc 7 80 1
 1121 0004 00BF     		nop
 1122 0006 1846     		mov	r0, r3
 1123 0008 BD46     		mov	sp, r7
 1124              	.LCFI54:
 1125              		.cfi_def_cfa_register 13
 1126              		@ sp needed
 1127 000a 5DF8047B 		ldr	r7, [sp], #4
 1128              	.LCFI55:
 1129              		.cfi_restore 7
 1130              		.cfi_def_cfa_offset 0
 1131 000e 7047     		bx	lr
 1132              		.cfi_endproc
 1133              	.LFE5652:
 1135              		.section	.text._Z19erase_configurationv,"ax",%progbits
ARM GAS  /tmp/ccjRbsN5.s 			page 61


 1136              		.align	1
 1137              		.global	_Z19erase_configurationv
 1138              		.syntax unified
 1139              		.thumb
 1140              		.thumb_func
 1141              		.fpu fpv4-sp-d16
 1143              	_Z19erase_configurationv:
 1144              	.LFB5653:
  81:Src/main_.cpp **** 
  82:Src/main_.cpp **** void erase_configuration(void) {
 1145              		.loc 7 82 32
 1146              		.cfi_startproc
 1147              		@ args = 0, pretend = 0, frame = 0
 1148              		@ frame_needed = 1, uses_anonymous_args = 0
 1149              		@ link register save eliminated.
 1150 0000 80B4     		push	{r7}
 1151              	.LCFI56:
 1152              		.cfi_def_cfa_offset 4
 1153              		.cfi_offset 7, -4
 1154 0002 00AF     		add	r7, sp, #0
 1155              	.LCFI57:
 1156              		.cfi_def_cfa_register 7
  83:Src/main_.cpp ****     // NVM_erase();
  84:Src/main_.cpp **** 
  85:Src/main_.cpp ****     // // FIXME: this reboot is a workaround because we don't want the next save_configuration
  86:Src/main_.cpp ****     // // to write back the old configuration from RAM to NVM. The proper action would
  87:Src/main_.cpp ****     // // be to reset the values in RAM to default. However right now that's not
  88:Src/main_.cpp ****     // // practical because several startup actions depend on the config. The
  89:Src/main_.cpp ****     // // other problem is that the stack overflows if we reset to default here.
  90:Src/main_.cpp ****     // NVIC_SystemReset();
  91:Src/main_.cpp **** }
 1157              		.loc 7 91 1
 1158 0004 00BF     		nop
 1159 0006 BD46     		mov	sp, r7
 1160              	.LCFI58:
 1161              		.cfi_def_cfa_register 13
 1162              		@ sp needed
 1163 0008 5DF8047B 		ldr	r7, [sp], #4
 1164              	.LCFI59:
 1165              		.cfi_restore 7
 1166              		.cfi_def_cfa_offset 0
 1167 000c 7047     		bx	lr
 1168              		.cfi_endproc
 1169              	.LFE5653:
 1171              		.section	.text.construct_objects,"ax",%progbits
 1172              		.align	1
 1173              		.global	construct_objects
 1174              		.syntax unified
 1175              		.thumb
 1176              		.thumb_func
 1177              		.fpu fpv4-sp-d16
 1179              	construct_objects:
 1180              	.LFB5654:
  92:Src/main_.cpp **** 
  93:Src/main_.cpp **** extern "C" int construct_objects(){
 1181              		.loc 7 93 35
 1182              		.cfi_startproc
ARM GAS  /tmp/ccjRbsN5.s 			page 62


 1183              		@ args = 0, pretend = 0, frame = 0
 1184              		@ frame_needed = 1, uses_anonymous_args = 0
 1185              		@ link register save eliminated.
 1186 0000 80B4     		push	{r7}
 1187              	.LCFI60:
 1188              		.cfi_def_cfa_offset 4
 1189              		.cfi_offset 7, -4
 1190 0002 00AF     		add	r7, sp, #0
 1191              	.LCFI61:
 1192              		.cfi_def_cfa_register 7
  94:Src/main_.cpp **** // #if HW_VERSION_MAJOR == 3 && HW_VERSION_MINOR >= 3
  95:Src/main_.cpp **** //     if (odrv.config_.enable_i2c_instead_of_can) {
  96:Src/main_.cpp **** //         // Set up the direction GPIO as input
  97:Src/main_.cpp **** //         GPIO_InitTypeDef GPIO_InitStruct;
  98:Src/main_.cpp **** //         GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  99:Src/main_.cpp **** //         GPIO_InitStruct.Pull = GPIO_PULLUP;
 100:Src/main_.cpp **** 
 101:Src/main_.cpp **** //         GPIO_InitStruct.Pin = I2C_A0_PIN;
 102:Src/main_.cpp **** //         HAL_GPIO_Init(I2C_A0_PORT, &GPIO_InitStruct);
 103:Src/main_.cpp **** //         GPIO_InitStruct.Pin = I2C_A1_PIN;
 104:Src/main_.cpp **** //         HAL_GPIO_Init(I2C_A1_PORT, &GPIO_InitStruct);
 105:Src/main_.cpp **** //         GPIO_InitStruct.Pin = I2C_A2_PIN;
 106:Src/main_.cpp **** //         HAL_GPIO_Init(I2C_A2_PORT, &GPIO_InitStruct);
 107:Src/main_.cpp **** 
 108:Src/main_.cpp **** //         osDelay(1);
 109:Src/main_.cpp **** //         i2c_stats_.addr = (0xD << 3);
 110:Src/main_.cpp **** //         i2c_stats_.addr |= HAL_GPIO_ReadPin(I2C_A0_PORT, I2C_A0_PIN) != GPIO_PIN_RESET ? 0x1 : 0
 111:Src/main_.cpp **** //         i2c_stats_.addr |= HAL_GPIO_ReadPin(I2C_A1_PORT, I2C_A1_PIN) != GPIO_PIN_RESET ? 0x2 : 0
 112:Src/main_.cpp **** //         i2c_stats_.addr |= HAL_GPIO_ReadPin(I2C_A2_PORT, I2C_A2_PIN) != GPIO_PIN_RESET ? 0x4 : 0
 113:Src/main_.cpp **** //         MX_I2C1_Init(i2c_stats_.addr);
 114:Src/main_.cpp **** //     } else
 115:Src/main_.cpp **** // #endif
 116:Src/main_.cpp **** //         MX_CAN1_Init();
 117:Src/main_.cpp **** 
 118:Src/main_.cpp **** //     HAL_UART_DeInit(&huart4);
 119:Src/main_.cpp **** //     huart4.Init.BaudRate = odrv.config_.uart_baudrate;
 120:Src/main_.cpp **** //     HAL_UART_Init(&huart4);
 121:Src/main_.cpp **** 
 122:Src/main_.cpp **** //     // Init general user ADC on some GPIOs.
 123:Src/main_.cpp **** //     GPIO_InitTypeDef GPIO_InitStruct;
 124:Src/main_.cpp **** //     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 125:Src/main_.cpp **** //     GPIO_InitStruct.Pull = GPIO_NOPULL;
 126:Src/main_.cpp **** //     GPIO_InitStruct.Pin = GPIO_1_Pin;
 127:Src/main_.cpp **** //     HAL_GPIO_Init(GPIO_1_GPIO_Port, &GPIO_InitStruct);
 128:Src/main_.cpp **** //     GPIO_InitStruct.Pin = GPIO_2_Pin;
 129:Src/main_.cpp **** //     HAL_GPIO_Init(GPIO_2_GPIO_Port, &GPIO_InitStruct);
 130:Src/main_.cpp **** //     GPIO_InitStruct.Pin = GPIO_3_Pin;
 131:Src/main_.cpp **** //     HAL_GPIO_Init(GPIO_3_GPIO_Port, &GPIO_InitStruct);
 132:Src/main_.cpp **** //     GPIO_InitStruct.Pin = GPIO_4_Pin;
 133:Src/main_.cpp **** //     HAL_GPIO_Init(GPIO_4_GPIO_Port, &GPIO_InitStruct);
 134:Src/main_.cpp **** // #if HW_VERSION_MAJOR == 3 && HW_VERSION_MINOR >= 5
 135:Src/main_.cpp **** //     GPIO_InitStruct.Pin = GPIO_5_Pin;
 136:Src/main_.cpp **** //     HAL_GPIO_Init(GPIO_5_GPIO_Port, &GPIO_InitStruct);
 137:Src/main_.cpp **** // #endif
 138:Src/main_.cpp **** 
 139:Src/main_.cpp **** //     // Construct all objects.
 140:Src/main_.cpp **** //     odCAN = new ODriveCAN(can_config, &hcan1);
ARM GAS  /tmp/ccjRbsN5.s 			page 63


 141:Src/main_.cpp **** //     for (size_t i = 0; i < AXIS_COUNT; ++i) {
 142:Src/main_.cpp **** //         Encoder *encoder = new Encoder(hw_configs[i].encoder_config,
 143:Src/main_.cpp **** //                                        encoder_configs[i], motor_configs[i]);
 144:Src/main_.cpp **** //         Controller *controller = new Controller(controller_configs[i]);
 145:Src/main_.cpp **** 
 146:Src/main_.cpp **** //         OnboardThermistorCurrentLimiter *fet_thermistor = new OnboardThermistorCurrentLimiter(hw
 147:Src/main_.cpp **** //                                                                                               fe
 148:Src/main_.cpp **** //         OffboardThermistorCurrentLimiter *motor_thermistor = new OffboardThermistorCurrentLimite
 149:Src/main_.cpp **** 
 150:Src/main_.cpp **** //         Motor *motor = new Motor(hw_configs[i].motor_config,
 151:Src/main_.cpp **** //                                  hw_configs[i].gate_driver_config,
 152:Src/main_.cpp **** //                                  motor_configs[i]);
 153:Src/main_.cpp **** //         axes[i] = new Axis(i, hw_configs[i].axis_config, axis_configs[i],
 154:Src/main_.cpp **** //                 *encoder, *controller, *fet_thermistor,
 155:Src/main_.cpp **** //                 *motor_thermistor, *motor);
 156:Src/main_.cpp **** 
 157:Src/main_.cpp **** //         controller_configs[i].parent = controller;
 158:Src/main_.cpp **** //         encoder_configs[i].parent = encoder;
 159:Src/main_.cpp **** //         motor_thermistor_configs[i].parent = motor_thermistor;
 160:Src/main_.cpp **** //         motor_configs[i].parent = motor;
 161:Src/main_.cpp **** //         axis_configs[i].parent = axes[i];
 162:Src/main_.cpp **** //     }
 163:Src/main_.cpp **** //     return 0;
 164:Src/main_.cpp **** }
 1193              		.loc 7 164 1
 1194 0004 00BF     		nop
 1195 0006 1846     		mov	r0, r3
 1196 0008 BD46     		mov	sp, r7
 1197              	.LCFI62:
 1198              		.cfi_def_cfa_register 13
 1199              		@ sp needed
 1200 000a 5DF8047B 		ldr	r7, [sp], #4
 1201              	.LCFI63:
 1202              		.cfi_restore 7
 1203              		.cfi_def_cfa_offset 0
 1204 000e 7047     		bx	lr
 1205              		.cfi_endproc
 1206              	.LFE5654:
 1208              		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
 1209              		.align	1
 1210              		.global	vApplicationStackOverflowHook
 1211              		.syntax unified
 1212              		.thumb
 1213              		.thumb_func
 1214              		.fpu fpv4-sp-d16
 1216              	vApplicationStackOverflowHook:
 1217              	.LFB5655:
 165:Src/main_.cpp **** 
 166:Src/main_.cpp **** extern "C" {
 167:Src/main_.cpp **** int odrive_main(void);
 168:Src/main_.cpp **** void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed portCHAR *pcTaskName) {
 1218              		.loc 7 168 86
 1219              		.cfi_startproc
 1220              		@ args = 0, pretend = 0, frame = 8
 1221              		@ frame_needed = 1, uses_anonymous_args = 0
 1222 0000 80B5     		push	{r7, lr}
 1223              	.LCFI64:
ARM GAS  /tmp/ccjRbsN5.s 			page 64


 1224              		.cfi_def_cfa_offset 8
 1225              		.cfi_offset 7, -8
 1226              		.cfi_offset 14, -4
 1227 0002 82B0     		sub	sp, sp, #8
 1228              	.LCFI65:
 1229              		.cfi_def_cfa_offset 16
 1230 0004 00AF     		add	r7, sp, #0
 1231              	.LCFI66:
 1232              		.cfi_def_cfa_register 7
 1233 0006 7860     		str	r0, [r7, #4]
 1234 0008 3960     		str	r1, [r7]
 169:Src/main_.cpp **** 
 170:Src/main_.cpp ****         safety_critical_disarm_motor_pwm(axes->motor_);
 1235              		.loc 7 170 41
 1236 000a 044B     		ldr	r3, .L37
 1237 000c 1B68     		ldr	r3, [r3]
 1238 000e DB6E     		ldr	r3, [r3, #108]
 1239 0010 1846     		mov	r0, r3
 1240 0012 FFF7FEFF 		bl	safety_critical_disarm_motor_pwm
 171:Src/main_.cpp **** 
 172:Src/main_.cpp ****         safety_critical_disarm_brake_resistor();
 1241              		.loc 7 172 46
 1242 0016 FFF7FEFF 		bl	safety_critical_disarm_brake_resistor
 1243              	.L36:
 173:Src/main_.cpp ****     for (;;); // TODO: safe action
 1244              		.loc 7 173 5 discriminator 1
 1245 001a FEE7     		b	.L36
 1246              	.L38:
 1247              		.align	2
 1248              	.L37:
 1249 001c 00000000 		.word	axes
 1250              		.cfi_endproc
 1251              	.LFE5655:
 1253              		.section	.text.vApplicationIdleHook,"ax",%progbits
 1254              		.align	1
 1255              		.global	vApplicationIdleHook
 1256              		.syntax unified
 1257              		.thumb
 1258              		.thumb_func
 1259              		.fpu fpv4-sp-d16
 1261              	vApplicationIdleHook:
 1262              	.LFB5656:
 174:Src/main_.cpp **** }
 175:Src/main_.cpp **** void vApplicationIdleHook(void) {
 1263              		.loc 7 175 33
 1264              		.cfi_startproc
 1265              		@ args = 0, pretend = 0, frame = 16
 1266              		@ frame_needed = 1, uses_anonymous_args = 0
 1267 0000 90B5     		push	{r4, r7, lr}
 1268              	.LCFI67:
 1269              		.cfi_def_cfa_offset 12
 1270              		.cfi_offset 4, -12
 1271              		.cfi_offset 7, -8
 1272              		.cfi_offset 14, -4
 1273 0002 85B0     		sub	sp, sp, #20
 1274              	.LCFI68:
 1275              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccjRbsN5.s 			page 65


 1276 0004 00AF     		add	r7, sp, #0
 1277              	.LCFI69:
 1278              		.cfi_def_cfa_register 7
 1279              	.LBB8:
 176:Src/main_.cpp ****     if (system_stats.fully_booted) {
 1280              		.loc 7 176 22
 1281 0006 164B     		ldr	r3, .L44
 1282 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1283              		.loc 7 176 5
 1284 000a 002B     		cmp	r3, #0
 1285 000c 24D0     		beq	.L43
 1286              	.LBB9:
 1287              	.LBB10:
 177:Src/main_.cpp ****         // system_stats.uptime = xTaskGetTickCount();
 178:Src/main_.cpp ****         // system_stats.min_heap_space = xPortGetMinimumEverFreeHeapSize();
 179:Src/main_.cpp ****         // system_stats.min_stack_space_comms = uxTaskGetStackHighWaterMark(comm_thread) * sizeof(S
 180:Src/main_.cpp ****         // system_stats.min_stack_space_axis0 = uxTaskGetStackHighWaterMark(axes[0]->thread_id_) * 
 181:Src/main_.cpp ****         // system_stats.min_stack_space_uart = uxTaskGetStackHighWaterMark(uart_thread) * sizeof(St
 182:Src/main_.cpp ****         // system_stats.min_stack_space_startup = uxTaskGetStackHighWaterMark(defaultTaskHandle) * 
 183:Src/main_.cpp ****         // system_stats.min_stack_space_can = uxTaskGetStackHighWaterMark(odCAN->thread_id_) * size
 184:Src/main_.cpp **** 
 185:Src/main_.cpp ****         // // Actual usage, in bytes, so we don't have to math
 186:Src/main_.cpp ****         // system_stats.stack_usage_axis0 = axes[0]->stack_size_ - system_stats_.min_stack_space_ax
 187:Src/main_.cpp ****         // system_stats.stack_usage_comms = stack_size_comm_thread - system_stats_.min_stack_space_
 188:Src/main_.cpp ****         // system_stats.stack_usage_uart = stack_size_uart_thread - system_stats_.min_stack_space_u
 189:Src/main_.cpp ****         // system_stats.stack_usage_startup = stack_size_default_task - system_stats_.min_stack_spa
 190:Src/main_.cpp ****         // system_stats.stack_usage_can = odCAN->stack_size_ - system_stats_.min_stack_space_can;
 191:Src/main_.cpp ****         for (ThermistorCurrentLimiter* thermistor : axes->thermistors_) {
 1288              		.loc 7 191 59
 1289 000e 154B     		ldr	r3, .L44+4
 1290 0010 1B68     		ldr	r3, [r3]
 1291 0012 03F5A473 		add	r3, r3, #328
 1292 0016 BB60     		str	r3, [r7, #8]
 1293 0018 B868     		ldr	r0, [r7, #8]
 1294 001a FFF7FEFF 		bl	_ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE5beginEv
 1295 001e F860     		str	r0, [r7, #12]
 1296 0020 B868     		ldr	r0, [r7, #8]
 1297 0022 FFF7FEFF 		bl	_ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE3endEv
 1298 0026 7860     		str	r0, [r7, #4]
 1299              	.L42:
 1300              		.loc 7 191 59 is_stmt 0 discriminator 3
 1301 0028 FA68     		ldr	r2, [r7, #12]
 1302 002a 7B68     		ldr	r3, [r7, #4]
 1303 002c 9A42     		cmp	r2, r3
 1304 002e 09D0     		beq	.L41
 1305              		.loc 7 191 40 is_stmt 1 discriminator 2
 1306 0030 FB68     		ldr	r3, [r7, #12]
 1307 0032 1B68     		ldr	r3, [r3]
 1308 0034 3B60     		str	r3, [r7]
 192:Src/main_.cpp ****             thermistor->update();
 1309              		.loc 7 192 31 discriminator 2
 1310 0036 3868     		ldr	r0, [r7]
 1311 0038 FFF7FEFF 		bl	_ZN24ThermistorCurrentLimiter6updateEv
 191:Src/main_.cpp ****             thermistor->update();
 1312              		.loc 7 191 9 discriminator 2
 1313 003c FB68     		ldr	r3, [r7, #12]
 1314 003e 0433     		adds	r3, r3, #4
ARM GAS  /tmp/ccjRbsN5.s 			page 66


 1315 0040 FB60     		str	r3, [r7, #12]
 1316 0042 F1E7     		b	.L42
 1317              	.L41:
 1318              	.LBE10:
 193:Src/main_.cpp ****         }
 194:Src/main_.cpp ****        
 195:Src/main_.cpp ****        axes->checks_ok_ = axes->do_checks();
 1319              		.loc 7 195 42
 1320 0044 074B     		ldr	r3, .L44+4
 1321 0046 1B68     		ldr	r3, [r3]
 1322              		.loc 7 195 14
 1323 0048 064A     		ldr	r2, .L44+4
 1324 004a 1468     		ldr	r4, [r2]
 1325              		.loc 7 195 42
 1326 004c 1846     		mov	r0, r3
 1327 004e FFF7FEFF 		bl	_ZN4Axis9do_checksEv
 1328 0052 0346     		mov	r3, r0
 1329              		.loc 7 195 25
 1330 0054 84F8DC31 		strb	r3, [r4, #476]
 1331              	.L43:
 1332              	.LBE9:
 1333              	.LBE8:
 196:Src/main_.cpp ****        
 197:Src/main_.cpp **** 
 198:Src/main_.cpp ****     }
 199:Src/main_.cpp **** }
 1334              		.loc 7 199 1
 1335 0058 00BF     		nop
 1336 005a 1437     		adds	r7, r7, #20
 1337              	.LCFI70:
 1338              		.cfi_def_cfa_offset 12
 1339 005c BD46     		mov	sp, r7
 1340              	.LCFI71:
 1341              		.cfi_def_cfa_register 13
 1342              		@ sp needed
 1343 005e 90BD     		pop	{r4, r7, pc}
 1344              	.L45:
 1345              		.align	2
 1346              	.L44:
 1347 0060 00000000 		.word	system_stats
 1348 0064 00000000 		.word	axes
 1349              		.cfi_endproc
 1350              	.LFE5656:
 1352              		.section	.text.odrive_main,"ax",%progbits
 1353              		.align	1
 1354              		.global	odrive_main
 1355              		.syntax unified
 1356              		.thumb
 1357              		.thumb_func
 1358              		.fpu fpv4-sp-d16
 1360              	odrive_main:
 1361              	.LFB5657:
 200:Src/main_.cpp **** }
 201:Src/main_.cpp **** 
 202:Src/main_.cpp **** int odrive_main(void) {
 1362              		.loc 7 202 23
 1363              		.cfi_startproc
ARM GAS  /tmp/ccjRbsN5.s 			page 67


 1364              		@ args = 0, pretend = 0, frame = 8
 1365              		@ frame_needed = 1, uses_anonymous_args = 0
 1366 0000 80B5     		push	{r7, lr}
 1367              	.LCFI72:
 1368              		.cfi_def_cfa_offset 8
 1369              		.cfi_offset 7, -8
 1370              		.cfi_offset 14, -4
 1371 0002 82B0     		sub	sp, sp, #8
 1372              	.LCFI73:
 1373              		.cfi_def_cfa_offset 16
 1374 0004 00AF     		add	r7, sp, #0
 1375              	.LCFI74:
 1376              		.cfi_def_cfa_register 7
 203:Src/main_.cpp ****     // Start ADC for temperature measurements and user measurements
 204:Src/main_.cpp ****     start_general_purpose_adc();
 1377              		.loc 7 204 30
 1378 0006 FFF7FEFF 		bl	start_general_purpose_adc
 205:Src/main_.cpp **** 
 206:Src/main_.cpp ****     // TODO: make dynamically reconfigurable
 207:Src/main_.cpp **** #if HW_VERSION_MAJOR == 3 && HW_VERSION_MINOR >= 3
 208:Src/main_.cpp ****     if (odrv.config_.enable_uart) {
 209:Src/main_.cpp ****         SetGPIO12toUART();
 210:Src/main_.cpp ****     }
 211:Src/main_.cpp **** #endif
 212:Src/main_.cpp ****     //osDelay(100);
 213:Src/main_.cpp ****     // Init communications (this requires the axis objects to be constructed)
 214:Src/main_.cpp ****     // Start pwm-in compare modules
 215:Src/main_.cpp ****     // must happen after communication is initialized
 216:Src/main_.cpp ****     pwm_in_init();
 1379              		.loc 7 216 16
 1380 000a FFF7FEFF 		bl	pwm_in_init
 217:Src/main_.cpp **** 
 218:Src/main_.cpp ****     // Set up the CS pins for absolute encoders
 219:Src/main_.cpp **** 
 220:Src/main_.cpp ****     if(axes->encoder_.config_.mode & Encoder::MODE_FLAG_ABS){
 1381              		.loc 7 220 14
 1382 000e 1F4B     		ldr	r3, .L51
 1383 0010 1B68     		ldr	r3, [r3]
 1384 0012 9B68     		ldr	r3, [r3, #8]
 1385              		.loc 7 220 23
 1386 0014 5B68     		ldr	r3, [r3, #4]
 1387              		.loc 7 220 31
 1388 0016 1B88     		ldrh	r3, [r3]
 1389              		.loc 7 220 36
 1390 0018 03F48073 		and	r3, r3, #256
 1391              		.loc 7 220 5
 1392 001c 002B     		cmp	r3, #0
 1393 001e 05D0     		beq	.L47
 221:Src/main_.cpp ****         axes->encoder_.abs_spi_cs_pin_init();
 1394              		.loc 7 221 43
 1395 0020 1A4B     		ldr	r3, .L51
 1396 0022 1B68     		ldr	r3, [r3]
 1397              		.loc 7 221 15
 1398 0024 9B68     		ldr	r3, [r3, #8]
 1399              		.loc 7 221 43
 1400 0026 1846     		mov	r0, r3
 1401 0028 FFF7FEFF 		bl	_ZN7Encoder19abs_spi_cs_pin_initEv
ARM GAS  /tmp/ccjRbsN5.s 			page 68


 1402              	.L47:
 222:Src/main_.cpp ****     }
 223:Src/main_.cpp **** 
 224:Src/main_.cpp **** 
 225:Src/main_.cpp ****     // Setup motors (DRV8301 SPI transactions here)
 226:Src/main_.cpp ****    // for(auto& axis : axes){
 227:Src/main_.cpp ****     axes->motor_.setup();
 1403              		.loc 7 227 23
 1404 002c 174B     		ldr	r3, .L51
 1405 002e 1B68     		ldr	r3, [r3]
 1406              		.loc 7 227 11
 1407 0030 DB6E     		ldr	r3, [r3, #108]
 1408              		.loc 7 227 23
 1409 0032 1846     		mov	r0, r3
 1410 0034 FFF7FEFF 		bl	_ZN5Motor5setupEv
 228:Src/main_.cpp ****    // }
 229:Src/main_.cpp **** 
 230:Src/main_.cpp ****     // Setup encoders (Starts encoder SPI transactions)
 231:Src/main_.cpp **** 
 232:Src/main_.cpp ****     axes->encoder_.setup();
 1411              		.loc 7 232 25
 1412 0038 144B     		ldr	r3, .L51
 1413 003a 1B68     		ldr	r3, [r3]
 1414              		.loc 7 232 11
 1415 003c 9B68     		ldr	r3, [r3, #8]
 1416              		.loc 7 232 25
 1417 003e 1846     		mov	r0, r3
 1418 0040 FFF7FEFF 		bl	_ZN7Encoder5setupEv
 233:Src/main_.cpp **** 
 234:Src/main_.cpp **** 
 235:Src/main_.cpp ****     // Setup anything remaining in each axis
 236:Src/main_.cpp ****     axes->setup();
 1419              		.loc 7 236 16
 1420 0044 114B     		ldr	r3, .L51
 1421 0046 1B68     		ldr	r3, [r3]
 1422 0048 1846     		mov	r0, r3
 1423 004a FFF7FEFF 		bl	_ZN4Axis5setupEv
 237:Src/main_.cpp **** 
 238:Src/main_.cpp ****     // Start PWM and enable adc interrupts/callbacks
 239:Src/main_.cpp ****     start_adc_pwm();
 1424              		.loc 7 239 18
 1425 004e FFF7FEFF 		bl	start_adc_pwm
 240:Src/main_.cpp ****     // This delay serves two purposes:
 241:Src/main_.cpp ****     //  - Let the current sense calibration converge (the current
 242:Src/main_.cpp ****     //    sense interrupts are firing in background by now)
 243:Src/main_.cpp ****     //  - Allow a user to interrupt the code, e.g. by flashing a new code,
 244:Src/main_.cpp ****     //    before it does anything crazy
 245:Src/main_.cpp ****     // TODO make timing a function of calibration filter tau
 246:Src/main_.cpp ****     osDelay(1500);
 1426              		.loc 7 246 12
 1427 0052 40F2DC50 		movw	r0, #1500
 1428 0056 FFF7FEFF 		bl	osDelay
 1429              	.LBB11:
 247:Src/main_.cpp **** 
 248:Src/main_.cpp ****     // Start state machine threads. Each thread will go through various calibration
 249:Src/main_.cpp ****     // procedures and then run the actual controller loops.
 250:Src/main_.cpp ****     // TODO: generalize for AXIS_COUNT != 2
ARM GAS  /tmp/ccjRbsN5.s 			page 69


 251:Src/main_.cpp ****     for (size_t i = 0; i < 1; ++i) {
 1430              		.loc 7 251 17
 1431 005a 0023     		movs	r3, #0
 1432 005c 7B60     		str	r3, [r7, #4]
 1433              	.L49:
 1434              		.loc 7 251 26 discriminator 3
 1435 005e 7B68     		ldr	r3, [r7, #4]
 1436 0060 002B     		cmp	r3, #0
 1437 0062 08D1     		bne	.L48
 252:Src/main_.cpp ****         axes->start_thread();
 1438              		.loc 7 252 27 discriminator 2
 1439 0064 094B     		ldr	r3, .L51
 1440 0066 1B68     		ldr	r3, [r3]
 1441 0068 1846     		mov	r0, r3
 1442 006a FFF7FEFF 		bl	_ZN4Axis12start_threadEv
 251:Src/main_.cpp ****         axes->start_thread();
 1443              		.loc 7 251 5 discriminator 2
 1444 006e 7B68     		ldr	r3, [r7, #4]
 1445 0070 0133     		adds	r3, r3, #1
 1446 0072 7B60     		str	r3, [r7, #4]
 1447 0074 F3E7     		b	.L49
 1448              	.L48:
 1449              	.LBE11:
 253:Src/main_.cpp ****     }
 254:Src/main_.cpp **** 
 255:Src/main_.cpp ****     start_analog_thread();
 1450              		.loc 7 255 24
 1451 0076 FFF7FEFF 		bl	start_analog_thread
 256:Src/main_.cpp **** 
 257:Src/main_.cpp ****     system_stats.fully_booted = true;
 1452              		.loc 7 257 31
 1453 007a 054B     		ldr	r3, .L51+4
 1454 007c 0122     		movs	r2, #1
 1455 007e 1A70     		strb	r2, [r3]
 258:Src/main_.cpp ****     return 0;
 1456              		.loc 7 258 12
 1457 0080 0023     		movs	r3, #0
 259:Src/main_.cpp **** }
 1458              		.loc 7 259 1
 1459 0082 1846     		mov	r0, r3
 1460 0084 0837     		adds	r7, r7, #8
 1461              	.LCFI75:
 1462              		.cfi_def_cfa_offset 8
 1463 0086 BD46     		mov	sp, r7
 1464              	.LCFI76:
 1465              		.cfi_def_cfa_register 13
 1466              		@ sp needed
 1467 0088 80BD     		pop	{r7, pc}
 1468              	.L52:
 1469 008a 00BF     		.align	2
 1470              	.L51:
 1471 008c 00000000 		.word	axes
 1472 0090 00000000 		.word	system_stats
 1473              		.cfi_endproc
 1474              	.LFE5657:
 1476              		.section	.text._ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE5beginEv,"axG",%progbits,_ZNSt5arrayIP2
 1477              		.align	1
ARM GAS  /tmp/ccjRbsN5.s 			page 70


 1478              		.weak	_ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE5beginEv
 1479              		.syntax unified
 1480              		.thumb
 1481              		.thumb_func
 1482              		.fpu fpv4-sp-d16
 1484              	_ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE5beginEv:
 1485              	.LFB5988:
 1486              		.file 8 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array"
   1:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // <array> -*- C++ -*-
   2:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
   3:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // Copyright (C) 2007-2020 Free Software Foundation, Inc.
   4:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** //
   5:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // software; you can redistribute it and/or modify it under the
   7:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // terms of the GNU General Public License as published by the
   8:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // any later version.
  10:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  11:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // This library is distributed in the hope that it will be useful,
  12:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // GNU General Public License for more details.
  15:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  16:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // 3.1, as published by the Free Software Foundation.
  19:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  20:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // You should have received a copy of the GNU General Public License and
  21:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** // <http://www.gnu.org/licenses/>.
  24:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  25:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** /** @file include/array
  26:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****  *  This is a Standard C++ Library header.
  27:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****  */
  28:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  29:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #ifndef _GLIBCXX_ARRAY
  30:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #define _GLIBCXX_ARRAY 1
  31:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  32:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #pragma GCC system_header
  33:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  34:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #if __cplusplus < 201103L
  35:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** # include <bits/c++0x_warning.h>
  36:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #else
  37:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  38:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #include <utility>
  39:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #include <bits/functexcept.h>
  40:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #include <bits/stl_algobase.h>
  41:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** #include <bits/range_access.h>
  42:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  43:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** namespace std _GLIBCXX_VISIBILITY(default)
  44:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** {
  45:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  46:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  47:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****   template<typename _Tp, std::size_t _Nm>
  48:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****     struct __array_traits
  49:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****     {
ARM GAS  /tmp/ccjRbsN5.s 			page 71


  50:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef _Tp _Type[_Nm];
  51:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef __is_swappable<_Tp> _Is_swappable;
  52:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;
  53:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  54:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       static constexpr _Tp&
  55:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _S_ref(const _Type& __t, std::size_t __n) noexcept
  56:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_cast<_Tp&>(__t[__n]); }
  57:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  58:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       static constexpr _Tp*
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _S_ptr(const _Type& __t) noexcept
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_cast<_Tp*>(__t); }
  61:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****     };
  62:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  63:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****  template<typename _Tp>
  64:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    struct __array_traits<_Tp, 0>
  65:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    {
  66:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      struct _Type { };
  67:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      typedef true_type _Is_swappable;
  68:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      typedef true_type _Is_nothrow_swappable;
  69:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  70:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      static constexpr _Tp&
  71:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      _S_ref(const _Type&, std::size_t) noexcept
  72:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      { return *static_cast<_Tp*>(nullptr); }
  73:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  74:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      static constexpr _Tp*
  75:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      _S_ptr(const _Type&) noexcept
  76:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****      { return nullptr; }
  77:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    };
  78:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
  79:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****   /**
  80:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  @brief A standard container for storing a fixed size sequence of elements.
  81:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *
  82:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  @ingroup sequences
  83:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *
  84:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  85:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  <a href="tables.html#66">reversible container</a>, and a
  86:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  <a href="tables.html#67">sequence</a>.
  87:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *
  88:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  Sets support random access iterators.
  89:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *
  90:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  @tparam  Tp  Type of element. Required to be a complete type.
  91:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****    *  @tparam  Nm  Number of elements.
  92:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****   */
  93:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****   template<typename _Tp, std::size_t _Nm>
  94:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****     struct array
  95:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****     {
  96:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef _Tp 	    			      value_type;
  97:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef value_type*			      pointer;
  98:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef const value_type*                       const_pointer;
  99:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef value_type&                   	      reference;
 100:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef const value_type&             	      const_reference;
 101:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef value_type*          		      iterator;
 102:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef const value_type*			      const_iterator;
 103:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef std::size_t                    	      size_type;
 104:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef std::ptrdiff_t                   	      difference_type;
 105:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef std::reverse_iterator<iterator>	      reverse_iterator;
 106:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef std::reverse_iterator<const_iterator>   const_reverse_iterator;
ARM GAS  /tmp/ccjRbsN5.s 			page 72


 107:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 108:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       // Support for zero-sized arrays mandatory.
 109:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typedef _GLIBCXX_STD_C::__array_traits<_Tp, _Nm> _AT_Type;
 110:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       typename _AT_Type::_Type                         _M_elems;
 111:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 112:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       // No explicit construct/copy/destroy for aggregate type.
 113:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 114:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       // DR 776.
 115:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX20_CONSTEXPR void
 116:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       fill(const value_type& __u)
 117:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { std::fill_n(begin(), size(), __u); }
 118:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 119:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX20_CONSTEXPR void
 120:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       swap(array& __other)
 121:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       noexcept(_AT_Type::_Is_nothrow_swappable::value)
 122:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { std::swap_ranges(begin(), end(), __other.begin()); }
 123:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 124:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       // Iterators.
 125:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR iterator
 126:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       begin() noexcept
 1487              		.loc 8 126 7
 1488              		.cfi_startproc
 1489              		@ args = 0, pretend = 0, frame = 8
 1490              		@ frame_needed = 1, uses_anonymous_args = 0
 1491 0000 80B5     		push	{r7, lr}
 1492              	.LCFI77:
 1493              		.cfi_def_cfa_offset 8
 1494              		.cfi_offset 7, -8
 1495              		.cfi_offset 14, -4
 1496 0002 82B0     		sub	sp, sp, #8
 1497              	.LCFI78:
 1498              		.cfi_def_cfa_offset 16
 1499 0004 00AF     		add	r7, sp, #0
 1500              	.LCFI79:
 1501              		.cfi_def_cfa_register 7
 1502 0006 7860     		str	r0, [r7, #4]
 127:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return iterator(data()); }
 1503              		.loc 8 127 29
 1504 0008 7868     		ldr	r0, [r7, #4]
 1505 000a FFF7FEFF 		bl	_ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE4dataEv
 1506 000e 0346     		mov	r3, r0
 1507              		.loc 8 127 34
 1508 0010 1846     		mov	r0, r3
 1509 0012 0837     		adds	r7, r7, #8
 1510              	.LCFI80:
 1511              		.cfi_def_cfa_offset 8
 1512 0014 BD46     		mov	sp, r7
 1513              	.LCFI81:
 1514              		.cfi_def_cfa_register 13
 1515              		@ sp needed
 1516 0016 80BD     		pop	{r7, pc}
 1517              		.cfi_endproc
 1518              	.LFE5988:
 1520              		.section	.text._ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE3endEv,"axG",%progbits,_ZNSt5arrayIP24T
 1521              		.align	1
 1522              		.weak	_ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE3endEv
 1523              		.syntax unified
ARM GAS  /tmp/ccjRbsN5.s 			page 73


 1524              		.thumb
 1525              		.thumb_func
 1526              		.fpu fpv4-sp-d16
 1528              	_ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE3endEv:
 1529              	.LFB5989:
 128:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 129:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 130:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       begin() const noexcept
 131:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_iterator(data()); }
 132:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 133:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR iterator
 134:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       end() noexcept
 1530              		.loc 8 134 7
 1531              		.cfi_startproc
 1532              		@ args = 0, pretend = 0, frame = 8
 1533              		@ frame_needed = 1, uses_anonymous_args = 0
 1534 0000 80B5     		push	{r7, lr}
 1535              	.LCFI82:
 1536              		.cfi_def_cfa_offset 8
 1537              		.cfi_offset 7, -8
 1538              		.cfi_offset 14, -4
 1539 0002 82B0     		sub	sp, sp, #8
 1540              	.LCFI83:
 1541              		.cfi_def_cfa_offset 16
 1542 0004 00AF     		add	r7, sp, #0
 1543              	.LCFI84:
 1544              		.cfi_def_cfa_register 7
 1545 0006 7860     		str	r0, [r7, #4]
 135:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return iterator(data() + _Nm); }
 1546              		.loc 8 135 29
 1547 0008 7868     		ldr	r0, [r7, #4]
 1548 000a FFF7FEFF 		bl	_ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE4dataEv
 1549 000e 0346     		mov	r3, r0
 1550              		.loc 8 135 37
 1551 0010 0833     		adds	r3, r3, #8
 1552              		.loc 8 135 40
 1553 0012 1846     		mov	r0, r3
 1554 0014 0837     		adds	r7, r7, #8
 1555              	.LCFI85:
 1556              		.cfi_def_cfa_offset 8
 1557 0016 BD46     		mov	sp, r7
 1558              	.LCFI86:
 1559              		.cfi_def_cfa_register 13
 1560              		@ sp needed
 1561 0018 80BD     		pop	{r7, pc}
 1562              		.cfi_endproc
 1563              	.LFE5989:
 1565              		.section	.text._ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE4dataEv,"axG",%progbits,_ZNSt5arrayIP24
 1566              		.align	1
 1567              		.weak	_ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE4dataEv
 1568              		.syntax unified
 1569              		.thumb
 1570              		.thumb_func
 1571              		.fpu fpv4-sp-d16
 1573              	_ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE4dataEv:
 1574              	.LFB6109:
 136:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
ARM GAS  /tmp/ccjRbsN5.s 			page 74


 137:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 138:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       end() const noexcept
 139:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_iterator(data() + _Nm); }
 140:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 141:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 142:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       rbegin() noexcept
 143:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return reverse_iterator(end()); }
 144:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 145:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 146:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       rbegin() const noexcept
 147:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_reverse_iterator(end()); }
 148:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 149:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 150:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       rend() noexcept
 151:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return reverse_iterator(begin()); }
 152:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 153:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 154:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       rend() const noexcept
 155:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_reverse_iterator(begin()); }
 156:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 157:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 158:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       cbegin() const noexcept
 159:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_iterator(data()); }
 160:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 161:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 162:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       cend() const noexcept
 163:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_iterator(data() + _Nm); }
 164:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 165:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 166:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       crbegin() const noexcept
 167:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_reverse_iterator(end()); }
 168:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 169:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 170:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       crend() const noexcept
 171:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_reverse_iterator(begin()); }
 172:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 173:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       // Capacity.
 174:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       constexpr size_type
 175:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       size() const noexcept { return _Nm; }
 176:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 177:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       constexpr size_type
 178:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       max_size() const noexcept { return _Nm; }
 179:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 180:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX_NODISCARD constexpr bool
 181:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       empty() const noexcept { return size() == 0; }
 182:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 183:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       // Element access.
 184:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR reference
 185:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       operator[](size_type __n) noexcept
 186:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return _AT_Type::_S_ref(_M_elems, __n); }
 187:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 188:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       constexpr const_reference
 189:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       operator[](size_type __n) const noexcept
 190:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return _AT_Type::_S_ref(_M_elems, __n); }
 191:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 192:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR reference
 193:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       at(size_type __n)
ARM GAS  /tmp/ccjRbsN5.s 			page 75


 194:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       {
 195:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 	if (__n >= _Nm)
 196:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 	  std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 197:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 					    ">= _Nm (which is %zu)"),
 198:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 					__n, _Nm);
 199:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 	return _AT_Type::_S_ref(_M_elems, __n);
 200:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       }
 201:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 202:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       constexpr const_reference
 203:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       at(size_type __n) const
 204:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       {
 205:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 	// Result of conditional expression must be an lvalue so use
 206:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 	// boolean ? lvalue : (throw-expr, lvalue)
 207:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 	return __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)
 208:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 	  : (std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 209:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 					       ">= _Nm (which is %zu)"),
 210:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 					   __n, _Nm),
 211:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 	     _AT_Type::_S_ref(_M_elems, 0));
 212:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       }
 213:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 214:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR reference
 215:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       front() noexcept
 216:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return *begin(); }
 217:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 218:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       constexpr const_reference
 219:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       front() const noexcept
 220:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return _AT_Type::_S_ref(_M_elems, 0); }
 221:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 222:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR reference
 223:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       back() noexcept
 224:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return _Nm ? *(end() - 1) : *end(); }
 225:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 226:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       constexpr const_reference
 227:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       back() const noexcept
 228:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       {
 229:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 230:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****  	           : _AT_Type::_S_ref(_M_elems, 0);
 231:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       }
 232:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array **** 
 233:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       _GLIBCXX17_CONSTEXPR pointer
 234:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       data() noexcept
 1575              		.loc 8 234 7
 1576              		.cfi_startproc
 1577              		@ args = 0, pretend = 0, frame = 8
 1578              		@ frame_needed = 1, uses_anonymous_args = 0
 1579 0000 80B5     		push	{r7, lr}
 1580              	.LCFI87:
 1581              		.cfi_def_cfa_offset 8
 1582              		.cfi_offset 7, -8
 1583              		.cfi_offset 14, -4
 1584 0002 82B0     		sub	sp, sp, #8
 1585              	.LCFI88:
 1586              		.cfi_def_cfa_offset 16
 1587 0004 00AF     		add	r7, sp, #0
 1588              	.LCFI89:
 1589              		.cfi_def_cfa_register 7
 1590 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccjRbsN5.s 			page 76


 235:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return _AT_Type::_S_ptr(_M_elems); }
 1591              		.loc 8 235 33
 1592 0008 7B68     		ldr	r3, [r7, #4]
 1593              		.loc 8 235 32
 1594 000a 1846     		mov	r0, r3
 1595 000c FFF7FEFF 		bl	_ZNSt14__array_traitsIP24ThermistorCurrentLimiterLj2EE6_S_ptrERA2_KS1_
 1596 0010 0346     		mov	r3, r0
 1597              		.loc 8 235 44
 1598 0012 1846     		mov	r0, r3
 1599 0014 0837     		adds	r7, r7, #8
 1600              	.LCFI90:
 1601              		.cfi_def_cfa_offset 8
 1602 0016 BD46     		mov	sp, r7
 1603              	.LCFI91:
 1604              		.cfi_def_cfa_register 13
 1605              		@ sp needed
 1606 0018 80BD     		pop	{r7, pc}
 1607              		.cfi_endproc
 1608              	.LFE6109:
 1610              		.section	.text._ZNSt14__array_traitsIP24ThermistorCurrentLimiterLj2EE6_S_ptrERA2_KS1_,"axG",%progb
 1611              		.align	1
 1612              		.weak	_ZNSt14__array_traitsIP24ThermistorCurrentLimiterLj2EE6_S_ptrERA2_KS1_
 1613              		.syntax unified
 1614              		.thumb
 1615              		.thumb_func
 1616              		.fpu fpv4-sp-d16
 1618              	_ZNSt14__array_traitsIP24ThermistorCurrentLimiterLj2EE6_S_ptrERA2_KS1_:
 1619              	.LFB6166:
  59:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****       { return const_cast<_Tp*>(__t); }
 1620              		.loc 8 59 7
 1621              		.cfi_startproc
 1622              		@ args = 0, pretend = 0, frame = 8
 1623              		@ frame_needed = 1, uses_anonymous_args = 0
 1624              		@ link register save eliminated.
 1625 0000 80B4     		push	{r7}
 1626              	.LCFI92:
 1627              		.cfi_def_cfa_offset 4
 1628              		.cfi_offset 7, -4
 1629 0002 83B0     		sub	sp, sp, #12
 1630              	.LCFI93:
 1631              		.cfi_def_cfa_offset 16
 1632 0004 00AF     		add	r7, sp, #0
 1633              	.LCFI94:
 1634              		.cfi_def_cfa_register 7
 1635 0006 7860     		str	r0, [r7, #4]
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****     };
 1636              		.loc 8 60 36
 1637 0008 7B68     		ldr	r3, [r7, #4]
  60:/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/array ****     };
 1638              		.loc 8 60 39
 1639 000a 1846     		mov	r0, r3
 1640 000c 0C37     		adds	r7, r7, #12
 1641              	.LCFI95:
 1642              		.cfi_def_cfa_offset 4
 1643 000e BD46     		mov	sp, r7
 1644              	.LCFI96:
 1645              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccjRbsN5.s 			page 77


 1646              		@ sp needed
 1647 0010 5DF8047B 		ldr	r7, [sp], #4
 1648              	.LCFI97:
 1649              		.cfi_restore 7
 1650              		.cfi_def_cfa_offset 0
 1651 0014 7047     		bx	lr
 1652              		.cfi_endproc
 1653              	.LFE6166:
 1655              		.section	.text._Z41__static_initialization_and_destruction_0ii,"ax",%progbits
 1656              		.align	1
 1657              		.syntax unified
 1658              		.thumb
 1659              		.thumb_func
 1660              		.fpu fpv4-sp-d16
 1662              	_Z41__static_initialization_and_destruction_0ii:
 1663              	.LFB6309:
 1664              		.loc 7 259 1
 1665              		.cfi_startproc
 1666              		@ args = 0, pretend = 0, frame = 8
 1667              		@ frame_needed = 1, uses_anonymous_args = 0
 1668 0000 80B5     		push	{r7, lr}
 1669              	.LCFI98:
 1670              		.cfi_def_cfa_offset 8
 1671              		.cfi_offset 7, -8
 1672              		.cfi_offset 14, -4
 1673 0002 82B0     		sub	sp, sp, #8
 1674              	.LCFI99:
 1675              		.cfi_def_cfa_offset 16
 1676 0004 00AF     		add	r7, sp, #0
 1677              	.LCFI100:
 1678              		.cfi_def_cfa_register 7
 1679 0006 7860     		str	r0, [r7, #4]
 1680 0008 3960     		str	r1, [r7]
 1681              		.loc 7 259 1
 1682 000a 7B68     		ldr	r3, [r7, #4]
 1683 000c 012B     		cmp	r3, #1
 1684 000e 10D1     		bne	.L63
 1685              		.loc 7 259 1 is_stmt 0 discriminator 1
 1686 0010 3B68     		ldr	r3, [r7]
 1687 0012 4FF6FF72 		movw	r2, #65535
 1688 0016 9342     		cmp	r3, r2
 1689 0018 0BD1     		bne	.L63
  17:Src/main_.cpp **** Motor::Config_t motor_configs;
 1690              		.loc 7 17 22 is_stmt 1
 1691 001a 0848     		ldr	r0, .L64
 1692 001c FFF7FEFF 		bl	_ZN10Controller8Config_tC1Ev
  18:Src/main_.cpp **** OnboardThermistorCurrentLimiter::Config_t fet_thermistor_configs;
 1693              		.loc 7 18 17
 1694 0020 0748     		ldr	r0, .L64+4
 1695 0022 FFF7FEFF 		bl	_ZN5Motor8Config_tC1Ev
  20:Src/main_.cpp **** Axis::Config_t axis_configs;
 1696              		.loc 7 20 44
 1697 0026 0748     		ldr	r0, .L64+8
 1698 0028 FFF7FEFF 		bl	_ZN32OffboardThermistorCurrentLimiter8Config_tC1Ev
  21:Src/main_.cpp **** 
 1699              		.loc 7 21 16
 1700 002c 0648     		ldr	r0, .L64+12
ARM GAS  /tmp/ccjRbsN5.s 			page 78


 1701 002e FFF7FEFF 		bl	_ZN4Axis8Config_tC1Ev
 1702              	.L63:
 1703              		.loc 7 259 1
 1704 0032 00BF     		nop
 1705 0034 0837     		adds	r7, r7, #8
 1706              	.LCFI101:
 1707              		.cfi_def_cfa_offset 8
 1708 0036 BD46     		mov	sp, r7
 1709              	.LCFI102:
 1710              		.cfi_def_cfa_register 13
 1711              		@ sp needed
 1712 0038 80BD     		pop	{r7, pc}
 1713              	.L65:
 1714 003a 00BF     		.align	2
 1715              	.L64:
 1716 003c 00000000 		.word	controller_configs
 1717 0040 00000000 		.word	motor_configs
 1718 0044 00000000 		.word	motor_thermistor_configs
 1719 0048 00000000 		.word	axis_configs
 1720              		.cfi_endproc
 1721              	.LFE6309:
 1723              		.section	.text._GLOBAL__sub_I_board_config,"ax",%progbits
 1724              		.align	1
 1725              		.syntax unified
 1726              		.thumb
 1727              		.thumb_func
 1728              		.fpu fpv4-sp-d16
 1730              	_GLOBAL__sub_I_board_config:
 1731              	.LFB6310:
 1732              		.loc 7 259 1
 1733              		.cfi_startproc
 1734              		@ args = 0, pretend = 0, frame = 0
 1735              		@ frame_needed = 1, uses_anonymous_args = 0
 1736 0000 80B5     		push	{r7, lr}
 1737              	.LCFI103:
 1738              		.cfi_def_cfa_offset 8
 1739              		.cfi_offset 7, -8
 1740              		.cfi_offset 14, -4
 1741 0002 00AF     		add	r7, sp, #0
 1742              	.LCFI104:
 1743              		.cfi_def_cfa_register 7
 1744              		.loc 7 259 1
 1745 0004 4FF6FF71 		movw	r1, #65535
 1746 0008 0120     		movs	r0, #1
 1747 000a FFF7FEFF 		bl	_Z41__static_initialization_and_destruction_0ii
 1748 000e 80BD     		pop	{r7, pc}
 1749              		.cfi_endproc
 1750              	.LFE6310:
 1752              		.section	.init_array,"aw",%init_array
 1753              		.align	2
 1754 0000 00000000 		.word	_GLOBAL__sub_I_board_config(target1)
 1755              		.text
 1756              	.Letext0:
 1757              		.file 9 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/lib/gcc/arm-none-eabi/10.2.1/include/stddef
 1758              		.file 10 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_typ
 1759              		.file 11 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 1760              		.file 12 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdint.h"
ARM GAS  /tmp/ccjRbsN5.s 			page 79


 1761              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1762              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 1763              		.file 15 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 1764              		.file 16 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g4xx.h"
 1765              		.file 17 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 1766              		.file 18 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
 1767              		.file 19 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_fdcan.h"
 1768              		.file 20 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_spi.h"
 1769              		.file 21 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_tim.h"
 1770              		.file 22 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/basi
 1771              		.file 23 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/type_trai
 1772              		.file 24 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-
 1773              		.file 25 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/debug/deb
 1774              		.file 26 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdlib"
 1775              		.file 27 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/algo
 1776              		.file 28 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/exce
 1777              		.file 29 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_
 1778              		.file 30 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allo
 1779              		.file 31 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 1780              		.file 32 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/variant"
 1781              		.file 33 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/enab
 1782              		.file 34 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/optional"
 1783              		.file 35 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/functiona
 1784              		.file 36 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstring"
 1785              		.file 37 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cwchar"
 1786              		.file 38 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/clocale"
 1787              		.file 39 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/char
 1788              		.file 40 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdint"
 1789              		.file 41 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/string_vi
 1790              		.file 42 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstdio"
 1791              		.file 43 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allo
 1792              		.file 44 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/initializ
 1793              		.file 45 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stri
 1794              		.file 46 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/loca
 1795              		.file 47 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/ios_
 1796              		.file 48 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath"
 1797              		.file 49 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_
 1798              		.file 50 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 1799              		.file 51 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 1800              		.file 52 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/refw
 1801              		.file 53 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pars
 1802              		.file 54 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 1803              		.file 55 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pred
 1804              		.file 56 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_a
 1805              		.file 57 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/alloc
 1806              		.file 58 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_
 1807              		.file 59 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_types.h"
 1808              		.file 60 "<built-in>"
 1809              		.file 61 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/reent.h"
 1810              		.file 62 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/lock.h"
 1811              		.file 63 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdlib.h"
 1812              		.file 64 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/pstl/exec
 1813              		.file 65 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/string.h"
 1814              		.file 66 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/lib/gcc/arm-none-eabi/10.2.1/include/stdar
 1815              		.file 67 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/wchar.h"
 1816              		.file 68 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/locale.h"
 1817              		.file 69 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-
ARM GAS  /tmp/ccjRbsN5.s 			page 80


 1818              		.file 70 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdio.h"
 1819              		.file 71 "Inc/can_helpers.hpp"
 1820              		.file 72 "Inc/interfaces.hpp"
 1821              		.file 73 "Inc/interface_can.hpp"
 1822              		.file 74 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 1823              		.file 75 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 1824              		.file 76 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 1825              		.file 77 "Inc/mc_type.h"
 1826              		.file 78 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/math.h"
 1827              		.file 79 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/math.h"
 1828              		.file 80 "Inc/main.h"
 1829              		.file 81 "Inc/task_timer.hpp"
 1830              		.file 82 "Inc/component.hpp"
 1831              		.file 83 "Inc/utils.hpp"
 1832              		.file 84 "Inc/encoder.hpp"
 1833              		.file 85 "Inc/main_.hpp"
 1834              		.file 86 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/stdlib.h"
ARM GAS  /tmp/ccjRbsN5.s 			page 81


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main_.cpp
     /tmp/ccjRbsN5.s:18     .text._ZNSt14numeric_limitsIfE8infinityEv:0000000000000000 $t
     /tmp/ccjRbsN5.s:26     .text._ZNSt14numeric_limitsIfE8infinityEv:0000000000000000 _ZNSt14numeric_limitsIfE8infinityEv
     /tmp/ccjRbsN5.s:59     .rodata._ZN6__pstl9execution2v1L3seqE:0000000000000000 $d
     /tmp/ccjRbsN5.s:62     .rodata._ZN6__pstl9execution2v1L3seqE:0000000000000000 _ZN6__pstl9execution2v1L3seqE
     /tmp/ccjRbsN5.s:65     .rodata._ZN6__pstl9execution2v1L3parE:0000000000000000 $d
     /tmp/ccjRbsN5.s:68     .rodata._ZN6__pstl9execution2v1L3parE:0000000000000000 _ZN6__pstl9execution2v1L3parE
     /tmp/ccjRbsN5.s:71     .rodata._ZN6__pstl9execution2v1L9par_unseqE:0000000000000000 $d
     /tmp/ccjRbsN5.s:74     .rodata._ZN6__pstl9execution2v1L9par_unseqE:0000000000000000 _ZN6__pstl9execution2v1L9par_unseqE
     /tmp/ccjRbsN5.s:77     .rodata._ZN6__pstl9execution2v1L5unseqE:0000000000000000 $d
     /tmp/ccjRbsN5.s:80     .rodata._ZN6__pstl9execution2v1L5unseqE:0000000000000000 _ZN6__pstl9execution2v1L5unseqE
     /tmp/ccjRbsN5.s:83     .text._ZL20__gthread_key_deletei:0000000000000000 $t
     /tmp/ccjRbsN5.s:89     .text._ZL20__gthread_key_deletei:0000000000000000 _ZL20__gthread_key_deletei
     /tmp/ccjRbsN5.s:128    .rodata._ZL16OFFSET_TAB_CCMRx:0000000000000000 $d
     /tmp/ccjRbsN5.s:131    .rodata._ZL16OFFSET_TAB_CCMRx:0000000000000000 _ZL16OFFSET_TAB_CCMRx
     /tmp/ccjRbsN5.s:134    .rodata._ZL14SHIFT_TAB_OCxx:0000000000000000 $d
     /tmp/ccjRbsN5.s:137    .rodata._ZL14SHIFT_TAB_OCxx:0000000000000000 _ZL14SHIFT_TAB_OCxx
     /tmp/ccjRbsN5.s:140    .rodata._ZL14SHIFT_TAB_ICxx:0000000000000000 $d
     /tmp/ccjRbsN5.s:143    .rodata._ZL14SHIFT_TAB_ICxx:0000000000000000 _ZL14SHIFT_TAB_ICxx
     /tmp/ccjRbsN5.s:146    .rodata._ZL14SHIFT_TAB_CCxP:0000000000000000 $d
     /tmp/ccjRbsN5.s:149    .rodata._ZL14SHIFT_TAB_CCxP:0000000000000000 _ZL14SHIFT_TAB_CCxP
     /tmp/ccjRbsN5.s:152    .rodata._ZL14SHIFT_TAB_OISx:0000000000000000 $d
     /tmp/ccjRbsN5.s:155    .rodata._ZL14SHIFT_TAB_OISx:0000000000000000 _ZL14SHIFT_TAB_OISx
     /tmp/ccjRbsN5.s:158    .rodata._ZL19USART_PRESCALER_TAB:0000000000000000 $d
     /tmp/ccjRbsN5.s:161    .rodata._ZL19USART_PRESCALER_TAB:0000000000000000 _ZL19USART_PRESCALER_TAB
     /tmp/ccjRbsN5.s:175    .rodata._ZL18CHANNEL_OFFSET_TAB:0000000000000000 $d
     /tmp/ccjRbsN5.s:178    .rodata._ZL18CHANNEL_OFFSET_TAB:0000000000000000 _ZL18CHANNEL_OFFSET_TAB
     /tmp/ccjRbsN5.s:181    .rodata._ZL12one_by_sqrt3:0000000000000000 $d
     /tmp/ccjRbsN5.s:184    .rodata._ZL12one_by_sqrt3:0000000000000000 _ZL12one_by_sqrt3
     /tmp/ccjRbsN5.s:187    .rodata._ZL12two_by_sqrt3:0000000000000000 $d
     /tmp/ccjRbsN5.s:190    .rodata._ZL12two_by_sqrt3:0000000000000000 _ZL12two_by_sqrt3
     /tmp/ccjRbsN5.s:193    .rodata._ZL10sqrt3_by_2:0000000000000000 $d
     /tmp/ccjRbsN5.s:196    .rodata._ZL10sqrt3_by_2:0000000000000000 _ZL10sqrt3_by_2
     /tmp/ccjRbsN5.s:199    .text._ZN5Motor5setupEv:0000000000000000 $t
     /tmp/ccjRbsN5.s:206    .text._ZN5Motor5setupEv:0000000000000000 _ZN5Motor5setupEv
     /tmp/ccjRbsN5.s:295    .data.board_config:0000000000000000 board_config
     /tmp/ccjRbsN5.s:292    .data.board_config:0000000000000000 $d
     /tmp/ccjRbsN5.s:316    .bss.system_stats:0000000000000000 system_stats
     /tmp/ccjRbsN5.s:313    .bss.system_stats:0000000000000000 $d
     /tmp/ccjRbsN5.s:323    .data.current_meas_period:0000000000000000 current_meas_period
     /tmp/ccjRbsN5.s:320    .data.current_meas_period:0000000000000000 $d
     /tmp/ccjRbsN5.s:330    .data.can_config:0000000000000000 can_config
     /tmp/ccjRbsN5.s:327    .data.can_config:0000000000000000 $d
     /tmp/ccjRbsN5.s:339    .data.encoder_configs:0000000000000000 encoder_configs
     /tmp/ccjRbsN5.s:336    .data.encoder_configs:0000000000000000 $d
     /tmp/ccjRbsN5.s:368    .text._ZN10Controller13Anticogging_tC2Ev:0000000000000000 $t
     /tmp/ccjRbsN5.s:375    .text._ZN10Controller13Anticogging_tC2Ev:0000000000000000 _ZN10Controller13Anticogging_tC2Ev
     /tmp/ccjRbsN5.s:375    .text._ZN10Controller13Anticogging_tC2Ev:0000000000000000 _ZN10Controller13Anticogging_tC1Ev
     /tmp/ccjRbsN5.s:438    .text._ZN10Controller8Config_tC2Ev:0000000000000000 $t
     /tmp/ccjRbsN5.s:445    .text._ZN10Controller8Config_tC2Ev:0000000000000000 _ZN10Controller8Config_tC2Ev
     /tmp/ccjRbsN5.s:558    .text._ZN10Controller8Config_tC2Ev:00000000000000d8 $d
     /tmp/ccjRbsN5.s:445    .text._ZN10Controller8Config_tC2Ev:0000000000000000 _ZN10Controller8Config_tC1Ev
     /tmp/ccjRbsN5.s:574    .bss.controller_configs:0000000000000000 controller_configs
     /tmp/ccjRbsN5.s:571    .bss.controller_configs:0000000000000000 $d
     /tmp/ccjRbsN5.s:577    .text._ZN5Motor8Config_tC2Ev:0000000000000000 $t
     /tmp/ccjRbsN5.s:584    .text._ZN5Motor8Config_tC2Ev:0000000000000000 _ZN5Motor8Config_tC2Ev
ARM GAS  /tmp/ccjRbsN5.s 			page 82


     /tmp/ccjRbsN5.s:708    .text._ZN5Motor8Config_tC2Ev:00000000000000e4 $d
     /tmp/ccjRbsN5.s:584    .text._ZN5Motor8Config_tC2Ev:0000000000000000 _ZN5Motor8Config_tC1Ev
     /tmp/ccjRbsN5.s:728    .bss.motor_configs:0000000000000000 motor_configs
     /tmp/ccjRbsN5.s:725    .bss.motor_configs:0000000000000000 $d
     /tmp/ccjRbsN5.s:735    .data.fet_thermistor_configs:0000000000000000 fet_thermistor_configs
     /tmp/ccjRbsN5.s:732    .data.fet_thermistor_configs:0000000000000000 $d
     /tmp/ccjRbsN5.s:741    .text._ZN32OffboardThermistorCurrentLimiter8Config_tC2Ev:0000000000000000 $t
     /tmp/ccjRbsN5.s:748    .text._ZN32OffboardThermistorCurrentLimiter8Config_tC2Ev:0000000000000000 _ZN32OffboardThermistorCurrentLimiter8Config_tC2Ev
     /tmp/ccjRbsN5.s:799    .text._ZN32OffboardThermistorCurrentLimiter8Config_tC2Ev:0000000000000030 $d
     /tmp/ccjRbsN5.s:748    .text._ZN32OffboardThermistorCurrentLimiter8Config_tC2Ev:0000000000000000 _ZN32OffboardThermistorCurrentLimiter8Config_tC1Ev
     /tmp/ccjRbsN5.s:811    .bss.motor_thermistor_configs:0000000000000000 motor_thermistor_configs
     /tmp/ccjRbsN5.s:808    .bss.motor_thermistor_configs:0000000000000000 $d
     /tmp/ccjRbsN5.s:814    .text._ZN4Axis14LockinConfig_tC2Ev:0000000000000000 $t
     /tmp/ccjRbsN5.s:821    .text._ZN4Axis14LockinConfig_tC2Ev:0000000000000000 _ZN4Axis14LockinConfig_tC2Ev
     /tmp/ccjRbsN5.s:887    .text._ZN4Axis14LockinConfig_tC2Ev:000000000000004c $d
     /tmp/ccjRbsN5.s:821    .text._ZN4Axis14LockinConfig_tC2Ev:0000000000000000 _ZN4Axis14LockinConfig_tC1Ev
     /tmp/ccjRbsN5.s:899    .text._ZN4Axis8Config_tC2Ev:0000000000000000 $t
     /tmp/ccjRbsN5.s:906    .text._ZN4Axis8Config_tC2Ev:0000000000000000 _ZN4Axis8Config_tC2Ev
     /tmp/ccjRbsN5.s:1018   .text._ZN4Axis8Config_tC2Ev:00000000000000c4 $d
     /tmp/ccjRbsN5.s:906    .text._ZN4Axis8Config_tC2Ev:0000000000000000 _ZN4Axis8Config_tC1Ev
     /tmp/ccjRbsN5.s:1031   .bss.axis_configs:0000000000000000 axis_configs
     /tmp/ccjRbsN5.s:1028   .bss.axis_configs:0000000000000000 $d
     /tmp/ccjRbsN5.s:1038   .bss.axes:0000000000000000 axes
     /tmp/ccjRbsN5.s:1035   .bss.axes:0000000000000000 $d
     /tmp/ccjRbsN5.s:1045   .bss.odCAN:0000000000000000 odCAN
     /tmp/ccjRbsN5.s:1042   .bss.odCAN:0000000000000000 $d
     /tmp/ccjRbsN5.s:1052   .bss.motor_params:0000000000000000 motor_params
     /tmp/ccjRbsN5.s:1049   .bss.motor_params:0000000000000000 $d
     /tmp/ccjRbsN5.s:1059   .bss.motor_runtime:0000000000000000 motor_runtime
     /tmp/ccjRbsN5.s:1056   .bss.motor_runtime:0000000000000000 $d
     /tmp/ccjRbsN5.s:1062   .text._Z18save_configurationv:0000000000000000 $t
     /tmp/ccjRbsN5.s:1069   .text._Z18save_configurationv:0000000000000000 _Z18save_configurationv
     /tmp/ccjRbsN5.s:1099   .text.load_configuration:0000000000000000 $t
     /tmp/ccjRbsN5.s:1106   .text.load_configuration:0000000000000000 load_configuration
     /tmp/ccjRbsN5.s:1136   .text._Z19erase_configurationv:0000000000000000 $t
     /tmp/ccjRbsN5.s:1143   .text._Z19erase_configurationv:0000000000000000 _Z19erase_configurationv
     /tmp/ccjRbsN5.s:1172   .text.construct_objects:0000000000000000 $t
     /tmp/ccjRbsN5.s:1179   .text.construct_objects:0000000000000000 construct_objects
     /tmp/ccjRbsN5.s:1209   .text.vApplicationStackOverflowHook:0000000000000000 $t
     /tmp/ccjRbsN5.s:1216   .text.vApplicationStackOverflowHook:0000000000000000 vApplicationStackOverflowHook
     /tmp/ccjRbsN5.s:1249   .text.vApplicationStackOverflowHook:000000000000001c $d
     /tmp/ccjRbsN5.s:1254   .text.vApplicationIdleHook:0000000000000000 $t
     /tmp/ccjRbsN5.s:1261   .text.vApplicationIdleHook:0000000000000000 vApplicationIdleHook
     /tmp/ccjRbsN5.s:1484   .text._ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE5beginEv:0000000000000000 _ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE5beginEv
     /tmp/ccjRbsN5.s:1528   .text._ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE3endEv:0000000000000000 _ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE3endEv
     /tmp/ccjRbsN5.s:1347   .text.vApplicationIdleHook:0000000000000060 $d
     /tmp/ccjRbsN5.s:1353   .text.odrive_main:0000000000000000 $t
     /tmp/ccjRbsN5.s:1360   .text.odrive_main:0000000000000000 odrive_main
     /tmp/ccjRbsN5.s:1471   .text.odrive_main:000000000000008c $d
     /tmp/ccjRbsN5.s:1477   .text._ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE5beginEv:0000000000000000 $t
     /tmp/ccjRbsN5.s:1573   .text._ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE4dataEv:0000000000000000 _ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE4dataEv
     /tmp/ccjRbsN5.s:1521   .text._ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE3endEv:0000000000000000 $t
     /tmp/ccjRbsN5.s:1566   .text._ZNSt5arrayIP24ThermistorCurrentLimiterLj2EE4dataEv:0000000000000000 $t
     /tmp/ccjRbsN5.s:1618   .text._ZNSt14__array_traitsIP24ThermistorCurrentLimiterLj2EE6_S_ptrERA2_KS1_:0000000000000000 _ZNSt14__array_traitsIP24ThermistorCurrentLimiterLj2EE6_S_ptrERA2_KS1_
     /tmp/ccjRbsN5.s:1611   .text._ZNSt14__array_traitsIP24ThermistorCurrentLimiterLj2EE6_S_ptrERA2_KS1_:0000000000000000 $t
     /tmp/ccjRbsN5.s:1656   .text._Z41__static_initialization_and_destruction_0ii:0000000000000000 $t
     /tmp/ccjRbsN5.s:1662   .text._Z41__static_initialization_and_destruction_0ii:0000000000000000 _Z41__static_initialization_and_destruction_0ii
ARM GAS  /tmp/ccjRbsN5.s 			page 83


     /tmp/ccjRbsN5.s:1716   .text._Z41__static_initialization_and_destruction_0ii:000000000000003c $d
     /tmp/ccjRbsN5.s:1724   .text._GLOBAL__sub_I_board_config:0000000000000000 $t
     /tmp/ccjRbsN5.s:1730   .text._GLOBAL__sub_I_board_config:0000000000000000 _GLOBAL__sub_I_board_config
     /tmp/ccjRbsN5.s:1753   .init_array:0000000000000000 $d
                           .group:0000000000000000 _ZN10Controller13Anticogging_tC5Ev
                           .group:0000000000000000 _ZN10Controller8Config_tC5Ev
                           .group:0000000000000000 _ZN5Motor8Config_tC5Ev
                           .group:0000000000000000 _ZN32OffboardThermistorCurrentLimiter8Config_tC5Ev
                           .group:0000000000000000 _ZN4Axis14LockinConfig_tC5Ev
                           .group:0000000000000000 _ZN4Axis8Config_tC5Ev

UNDEFINED SYMBOLS
_ZN5Motor13DRV8301_setupEv
_ZN4Axis19default_calibrationEv
_ZN4Axis18default_sensorlessEv
safety_critical_disarm_motor_pwm
safety_critical_disarm_brake_resistor
_ZN24ThermistorCurrentLimiter6updateEv
_ZN4Axis9do_checksEv
start_general_purpose_adc
pwm_in_init
_ZN7Encoder19abs_spi_cs_pin_initEv
_ZN7Encoder5setupEv
_ZN4Axis5setupEv
start_adc_pwm
osDelay
_ZN4Axis12start_threadEv
start_analog_thread
