ARM GAS  /tmp/ccLmOb0L.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"pwm_curr_fdbk_ovm.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.OFFSET_TAB_CCMRx,"a"
  18              		.align	2
  21              	OFFSET_TAB_CCMRx:
  22 0000 00000000 		.ascii	"\000\000\000\000\004\004\004\00488"
  22      04040404 
  22      3838
  23              		.section	.rodata.SHIFT_TAB_OCxx,"a"
  24              		.align	2
  27              	SHIFT_TAB_OCxx:
  28 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\010"
  28      00000800 
  28      0008
  29              		.section	.rodata.SHIFT_TAB_ICxx,"a"
  30              		.align	2
  33              	SHIFT_TAB_ICxx:
  34 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\000"
  34      00000800 
  34      0000
  35              		.section	.rodata.SHIFT_TAB_CCxP,"a"
  36              		.align	2
  39              	SHIFT_TAB_CCxP:
  40 0000 00020406 		.ascii	"\000\002\004\006\010\012\014\016\020\024"
  40      080A0C0E 
  40      1014
  41              		.section	.rodata.SHIFT_TAB_OISx,"a"
  42              		.align	2
  45              	SHIFT_TAB_OISx:
  46 0000 00010203 		.ascii	"\000\001\002\003\004\005\006\007\010\012"
  46      04050607 
  46      080A
  47              		.section	.rodata.USART_PRESCALER_TAB,"a"
  48              		.align	2
  51              	USART_PRESCALER_TAB:
  52 0000 01000000 		.word	1
  53 0004 02000000 		.word	2
  54 0008 04000000 		.word	4
  55 000c 06000000 		.word	6
  56 0010 08000000 		.word	8
  57 0014 0A000000 		.word	10
  58 0018 0C000000 		.word	12
  59 001c 10000000 		.word	16
ARM GAS  /tmp/ccLmOb0L.s 			page 2


  60 0020 20000000 		.word	32
  61 0024 40000000 		.word	64
  62 0028 80000000 		.word	128
  63 002c 00010000 		.word	256
  64              		.section	.rodata.CHANNEL_OFFSET_TAB,"a"
  65              		.align	2
  68              	CHANNEL_OFFSET_TAB:
  69 0000 081C3044 		.ascii	"\010\0340DXl"
  69      586C
  70              		.section	.text.LL_CORDIC_IsActiveFlag_RRDY,"ax",%progbits
  71              		.align	1
  72              		.arch armv7e-m
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
  76              		.fpu fpv4-sp-d16
  78              	LL_CORDIC_IsActiveFlag_RRDY:
  79              	.LFB1427:
  80              		.file 1 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h"
   1:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
   2:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   ******************************************************************************
   3:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @file    stm32g4xx_ll_cordic.h
   4:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @author  MCD Application Team
   5:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief   Header file of CORDIC LL module.
   6:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   ******************************************************************************
   7:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @attention
   8:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *
   9:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * Copyright (c) 2019 STMicroelectronics.
  10:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * All rights reserved.
  11:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *
  12:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * in the root directory of this software component.
  14:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *
  16:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   ******************************************************************************
  17:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  18:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  19:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #ifndef STM32G4xx_LL_CORDIC_H
  21:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define STM32G4xx_LL_CORDIC_H
  22:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  23:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #ifdef __cplusplus
  24:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** extern "C" {
  25:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #endif
  26:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  27:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #include "stm32g4xx.h"
  29:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  30:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @addtogroup STM32G4xx_LL_Driver
  31:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  32:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  33:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  34:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #if defined(CORDIC)
  35:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  36:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL CORDIC
  37:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  38:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
ARM GAS  /tmp/ccLmOb0L.s 			page 3


  39:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  40:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Private variables ---------------------------------------------------------*/
  41:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  42:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Private constants ---------------------------------------------------------*/
  43:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  44:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Private macros ------------------------------------------------------------*/
  45:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  46:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported types ------------------------------------------------------------*/
  47:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  48:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported constants --------------------------------------------------------*/
  49:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_Exported_Constants CORDIC Exported Constants
  50:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  51:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  52:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  53:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_GET_FLAG Get Flags Defines
  54:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief    Flags defines which can be used with LL_CORDIC_ReadReg function.
  55:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  56:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  57:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FLAG_RRDY                CORDIC_CSR_RRDY
  58:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
  59:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
  60:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  61:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  62:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_IT IT Defines
  63:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief    IT defines which can be used with LL_CORDIC_ReadReg and LL_CORDIC_WriteReg functions.
  64:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  65:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  66:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_IT_IEN                   CORDIC_CSR_IEN            /*!< Result Ready interrupt en
  67:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
  68:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
  69:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  70:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  71:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_FUNCTION FUNCTION
  72:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  73:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  74:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_COSINE          (0x00000000U)                                           
  75:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_SINE            ((uint32_t)(CORDIC_CSR_FUNC_0))                         
  76:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_PHASE           ((uint32_t)(CORDIC_CSR_FUNC_1))                         
  77:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_MODULUS         ((uint32_t)(CORDIC_CSR_FUNC_1 | CORDIC_CSR_FUNC_0))     
  78:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_ARCTANGENT      ((uint32_t)(CORDIC_CSR_FUNC_2))                         
  79:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_HCOSINE         ((uint32_t)(CORDIC_CSR_FUNC_2 | CORDIC_CSR_FUNC_0))     
  80:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_HSINE           ((uint32_t)(CORDIC_CSR_FUNC_2 | CORDIC_CSR_FUNC_1))     
  81:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_HARCTANGENT     ((uint32_t)(CORDIC_CSR_FUNC_2 | CORDIC_CSR_FUNC_1 | CORD
  82:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_NATURALLOG      ((uint32_t)(CORDIC_CSR_FUNC_3))                         
  83:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_SQUAREROOT      ((uint32_t)(CORDIC_CSR_FUNC_3 | CORDIC_CSR_FUNC_0))     
  84:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
  85:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
  86:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  87:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  88:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_PRECISION PRECISION
  89:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  90:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  91:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_1CYCLE         ((uint32_t)(CORDIC_CSR_PRECISION_0))
  92:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_2CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_1))
  93:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_3CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_1 | CORDIC_CSR_PRECISIO
  94:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_4CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2))
  95:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_5CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECISIO
ARM GAS  /tmp/ccLmOb0L.s 			page 4


  96:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_6CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECISIO
  97:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_7CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2\
  98:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_1 | CORDIC_CSR_PRECIS
  99:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_8CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_3))
 100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_9CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_3 | CORDIC_CSR_PRECISIO
 101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_10CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3 | CORDIC_CSR_PRECISIO
 102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_11CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_1 | CORDIC_CSR_PRECIS
 104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_12CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3 | CORDIC_CSR_PRECISIO
 105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_13CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECIS
 107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_14CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECIS
 109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_15CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECIS
 111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_0))
 112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_SCALE SCALE
 117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_0                  (0x00000000U)
 120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_1                  ((uint32_t)(CORDIC_CSR_SCALE_0))
 121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_2                  ((uint32_t)(CORDIC_CSR_SCALE_1))
 122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_3                  ((uint32_t)(CORDIC_CSR_SCALE_1 | CORDIC_CSR_SCALE_0))
 123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_4                  ((uint32_t)(CORDIC_CSR_SCALE_2))
 124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_5                  ((uint32_t)(CORDIC_CSR_SCALE_2 | CORDIC_CSR_SCALE_0))
 125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_6                  ((uint32_t)(CORDIC_CSR_SCALE_2 | CORDIC_CSR_SCALE_1))
 126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_7                  ((uint32_t)(CORDIC_CSR_SCALE_2 | CORDIC_CSR_SCALE_1 | CO
 127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_NBWRITE NBWRITE
 132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBWRITE_1                (0x00000000U)             /*!< One 32-bits write contain
 135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           32-bit data input (Q1.31 
 136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           16-bit data input (Q1.15 
 137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           in one 32 bits Data */
 138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBWRITE_2                CORDIC_CSR_NARGS          /*!< Two 32-bit write containi
 139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           (Q1.31 format) */
 140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_NBREAD NBREAD
 145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBREAD_1                 (0x00000000U)             /*!< One 32-bits read containi
 148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           32-bit data output (Q1.31
 149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           16-bit data output (Q1.15
 150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           in one 32 bits Data */
 151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBREAD_2                 CORDIC_CSR_NRES           /*!< Two 32-bit Data containin
 152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           (Q1.31 format) */
ARM GAS  /tmp/ccLmOb0L.s 			page 5


 153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_INSIZE INSIZE
 158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_INSIZE_32BITS            (0x00000000U)             /*!< 32 bits input data size (
 161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_INSIZE_16BITS            CORDIC_CSR_ARGSIZE        /*!< 16 bits input data size (
 162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_OUTSIZE OUTSIZE
 167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_OUTSIZE_32BITS           (0x00000000U)             /*!< 32 bits output data size 
 170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_OUTSIZE_16BITS           CORDIC_CSR_RESSIZE        /*!< 16 bits output data size 
 171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_DMA_REG_DATA DMA register data
 176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_DMA_REG_DATA_IN          (0x00000000U)             /*!< Get address of input data
 179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_DMA_REG_DATA_OUT         (0x00000001U)             /*!< Get address of output dat
 180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported macro ------------------------------------------------------------*/
 189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_Exported_Macros CORDIC Exported Macros
 190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EM_WRITE_READ Common Write and read registers Macros
 194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Write a value in CORDIC register.
 199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __INSTANCE__ CORDIC Instance
 200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __REG__ Register to be written
 201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __VALUE__ Value to be written in the register
 202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VA
 205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Read a value in CORDIC register.
 208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __INSTANCE__ CORDIC Instance
 209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __REG__ Register to be read
ARM GAS  /tmp/ccLmOb0L.s 			page 6


 210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Register value
 211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported functions --------------------------------------------------------*/
 223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_Exported_Functions CORDIC Exported Functions
 225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_Configuration CORDIC Configuration functions
 229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure the CORDIC processing.
 234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @note   This function set all parameters of CORDIC processing.
 235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         These parameters can also be set individually using
 236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         dedicated functions:
 237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetFunction()
 238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetPrecision()
 239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetScale()
 240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetNbWrite()
 241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetNbRead()
 242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetInSize()
 243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetOutSize()
 244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          FUNC          LL_CORDIC_Config\n
 245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          PRECISION     LL_CORDIC_Config\n
 246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          SCALE         LL_CORDIC_Config\n
 247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          NARGS         LL_CORDIC_Config\n
 248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          NRES          LL_CORDIC_Config\n
 249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          ARGSIZE       LL_CORDIC_Config\n
 250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          RESIZE        LL_CORDIC_Config
 251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC instance
 252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Function parameter can be one of the following values:
 253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_COSINE
 254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SINE
 255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_PHASE
 256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_MODULUS
 257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_ARCTANGENT
 258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HCOSINE
 259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HSINE
 260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HARCTANGENT
 261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_NATURALLOG
 262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SQUAREROOT
 263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Precision parameter can be one of the following values:
 264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_1CYCLE
 265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_2CYCLES
 266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_3CYCLES
ARM GAS  /tmp/ccLmOb0L.s 			page 7


 267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_4CYCLES
 268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_5CYCLES
 269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_6CYCLES
 270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_7CYCLES
 271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_8CYCLES
 272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_9CYCLES
 273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_10CYCLES
 274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_11CYCLES
 275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_12CYCLES
 276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_13CYCLES
 277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_14CYCLES
 278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_15CYCLES
 279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Scale parameter can be one of the following values:
 280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_0
 281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_1
 282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_2
 283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_3
 284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_4
 285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_5
 286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_6
 287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_7
 288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbWrite parameter can be one of the following values:
 289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_1
 290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_2
 291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbRead parameter can be one of the following values:
 292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_1
 293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_2
 294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  InSize parameter can be one of the following values:
 295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_32BITS
 296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_16BITS
 297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  OutSize parameter can be one of the following values:
 298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_32BITS
 299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
 300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_Config(CORDIC_TypeDef *CORDICx, uint32_t Function, uint32_t Precisio
 303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                       uint32_t NbWrite, uint32_t NbRead, uint32_t InSize, uint32_t 
 304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR,
 306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              CORDIC_CSR_FUNC | CORDIC_CSR_PRECISION | CORDIC_CSR_SCALE |
 307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              CORDIC_CSR_NARGS | CORDIC_CSR_NRES | CORDIC_CSR_ARGSIZE | CORDIC_CSR_RESSIZE,
 308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              Function | Precision | Scale |
 309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              NbWrite | NbRead | InSize | OutSize);
 310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure function.
 314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          FUNC          LL_CORDIC_SetFunction
 315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Function parameter can be one of the following values:
 317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_COSINE
 318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SINE
 319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_PHASE
 320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_MODULUS
 321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_ARCTANGENT
 322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HCOSINE
 323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HSINE
ARM GAS  /tmp/ccLmOb0L.s 			page 8


 324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HARCTANGENT
 325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_NATURALLOG
 326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SQUAREROOT
 327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetFunction(CORDIC_TypeDef *CORDICx, uint32_t Function)
 330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_FUNC, Function);
 332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return function.
 336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          FUNC          LL_CORDIC_GetFunction
 337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_COSINE
 340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SINE
 341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_PHASE
 342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_MODULUS
 343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_ARCTANGENT
 344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HCOSINE
 345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HSINE
 346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HARCTANGENT
 347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_NATURALLOG
 348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SQUAREROOT
 349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetFunction(const CORDIC_TypeDef *CORDICx)
 351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_FUNC));
 353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure precision in cycles number.
 357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          PRECISION     LL_CORDIC_SetPrecision
 358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Precision parameter can be one of the following values:
 360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_1CYCLE
 361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_2CYCLES
 362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_3CYCLES
 363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_4CYCLES
 364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_5CYCLES
 365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_6CYCLES
 366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_7CYCLES
 367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_8CYCLES
 368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_9CYCLES
 369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_10CYCLES
 370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_11CYCLES
 371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_12CYCLES
 372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_13CYCLES
 373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_14CYCLES
 374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_15CYCLES
 375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetPrecision(CORDIC_TypeDef *CORDICx, uint32_t Precision)
 378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_PRECISION, Precision);
 380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
ARM GAS  /tmp/ccLmOb0L.s 			page 9


 381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return precision in cycles number.
 384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          PRECISION     LL_CORDIC_GetPrecision
 385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_1CYCLE
 388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_2CYCLES
 389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_3CYCLES
 390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_4CYCLES
 391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_5CYCLES
 392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_6CYCLES
 393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_7CYCLES
 394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_8CYCLES
 395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_9CYCLES
 396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_10CYCLES
 397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_11CYCLES
 398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_12CYCLES
 399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_13CYCLES
 400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_14CYCLES
 401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_15CYCLES
 402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetPrecision(const CORDIC_TypeDef *CORDICx)
 404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_PRECISION));
 406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure scaling factor.
 410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          SCALE         LL_CORDIC_SetScale
 411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Scale parameter can be one of the following values:
 413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_0
 414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_1
 415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_2
 416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_3
 417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_4
 418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_5
 419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_6
 420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_7
 421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetScale(CORDIC_TypeDef *CORDICx, uint32_t Scale)
 424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_SCALE, Scale);
 426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return scaling factor.
 430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          SCALE         LL_CORDIC_GetScale
 431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_0
 434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_1
 435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_2
 436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_3
 437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_4
ARM GAS  /tmp/ccLmOb0L.s 			page 10


 438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_5
 439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_6
 440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_7
 441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetScale(const CORDIC_TypeDef *CORDICx)
 443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_SCALE));
 445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure number of 32-bit write expected for one calculation.
 449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NARGS         LL_CORDIC_SetNbWrite
 450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbWrite parameter can be one of the following values:
 452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_1
 453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_2
 454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetNbWrite(CORDIC_TypeDef *CORDICx, uint32_t NbWrite)
 457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_NARGS, NbWrite);
 459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return number of 32-bit write expected for one calculation.
 463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NARGS         LL_CORDIC_GetNbWrite
 464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_1
 467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_2
 468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetNbWrite(const CORDIC_TypeDef *CORDICx)
 470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_NARGS));
 472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure number of 32-bit read expected after one calculation.
 476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NRES          LL_CORDIC_SetNbRead
 477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbRead parameter can be one of the following values:
 479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_1
 480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_2
 481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetNbRead(CORDIC_TypeDef *CORDICx, uint32_t NbRead)
 484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_NRES, NbRead);
 486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return number of 32-bit read expected after one calculation.
 490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NRES          LL_CORDIC_GetNbRead
 491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_1
 494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_2
ARM GAS  /tmp/ccLmOb0L.s 			page 11


 495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetNbRead(const CORDIC_TypeDef *CORDICx)
 497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_NRES));
 499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure width of input data.
 503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          ARGSIZE       LL_CORDIC_SetInSize
 504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  InSize parameter can be one of the following values:
 506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_32BITS
 507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_16BITS
 508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetInSize(CORDIC_TypeDef *CORDICx, uint32_t InSize)
 511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_ARGSIZE, InSize);
 513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return width of input data.
 517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          ARGSIZE       LL_CORDIC_GetInSize
 518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_32BITS
 521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_16BITS
 522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetInSize(const CORDIC_TypeDef *CORDICx)
 524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_ARGSIZE));
 526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure width of output data.
 530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          RESIZE       LL_CORDIC_SetOutSize
 531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  OutSize parameter can be one of the following values:
 533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_32BITS
 534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
 535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetOutSize(CORDIC_TypeDef *CORDICx, uint32_t OutSize)
 538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_RESSIZE, OutSize);
 540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return width of output data.
 544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          RESIZE       LL_CORDIC_GetOutSize
 545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_32BITS
 548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
 549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetOutSize(const CORDIC_TypeDef *CORDICx)
 551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
ARM GAS  /tmp/ccLmOb0L.s 			page 12


 552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_RESSIZE));
 553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_IT_Management IT_Management
 560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Enable CORDIC result ready interrupt
 565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          IEN           LL_CORDIC_EnableIT
 566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_EnableIT(CORDIC_TypeDef *CORDICx)
 570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   SET_BIT(CORDICx->CSR, CORDIC_CSR_IEN);
 572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Disable CORDIC result ready interrupt
 576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          IEN           LL_CORDIC_DisableIT
 577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_DisableIT(CORDIC_TypeDef *CORDICx)
 581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   CLEAR_BIT(CORDICx->CSR, CORDIC_CSR_IEN);
 583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC result ready interrupt state.
 587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          IEN           LL_CORDIC_IsEnabledIT
 588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsEnabledIT(const CORDIC_TypeDef *CORDICx)
 592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_IEN) == (CORDIC_CSR_IEN)) ? 1U : 0U);
 594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_DMA_Management DMA_Management
 601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Enable CORDIC DMA read channel request.
 606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAREN        LL_CORDIC_EnableDMAReq_RD
 607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
ARM GAS  /tmp/ccLmOb0L.s 			page 13


 609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_EnableDMAReq_RD(CORDIC_TypeDef *CORDICx)
 611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   SET_BIT(CORDICx->CSR, CORDIC_CSR_DMAREN);
 613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Disable CORDIC DMA read channel request.
 617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAREN        LL_CORDIC_DisableDMAReq_RD
 618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_DisableDMAReq_RD(CORDIC_TypeDef *CORDICx)
 622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   CLEAR_BIT(CORDICx->CSR, CORDIC_CSR_DMAREN);
 624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC DMA read channel request state.
 628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAREN        LL_CORDIC_IsEnabledDMAReq_RD
 629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsEnabledDMAReq_RD(const CORDIC_TypeDef *CORDICx)
 633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_DMAREN) == (CORDIC_CSR_DMAREN)) ? 1U : 0U);
 635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Enable CORDIC DMA write channel request.
 639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAWEN        LL_CORDIC_EnableDMAReq_WR
 640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_EnableDMAReq_WR(CORDIC_TypeDef *CORDICx)
 644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   SET_BIT(CORDICx->CSR, CORDIC_CSR_DMAWEN);
 646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Disable CORDIC DMA write channel request.
 650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAWEN        LL_CORDIC_DisableDMAReq_WR
 651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_DisableDMAReq_WR(CORDIC_TypeDef *CORDICx)
 655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   CLEAR_BIT(CORDICx->CSR, CORDIC_CSR_DMAWEN);
 657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC DMA write channel request state.
 661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAWEN        LL_CORDIC_IsEnabledDMAReq_WR
 662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsEnabledDMAReq_WR(const CORDIC_TypeDef *CORDICx)
ARM GAS  /tmp/ccLmOb0L.s 			page 14


 666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_DMAWEN) == (CORDIC_CSR_DMAWEN)) ? 1U : 0U);
 668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Get the CORDIC data register address used for DMA transfer.
 672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll RDATA        RES           LL_CORDIC_DMA_GetRegAddr\n
 673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll WDATA        ARG           LL_CORDIC_DMA_GetRegAddr
 674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Direction parameter can be one of the following values:
 676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_DMA_REG_DATA_IN
 677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_DMA_REG_DATA_OUT
 678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Address of data register
 679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_DMA_GetRegAddr(const CORDIC_TypeDef *CORDICx, uint32_t Direction
 681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   uint32_t data_reg_addr;
 683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   if (Direction == LL_CORDIC_DMA_REG_DATA_OUT)
 685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   {
 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     /* return address of RDATA register */
 687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     data_reg_addr = (uint32_t) &(CORDICx->RDATA);
 688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   }
 689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   else
 690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   {
 691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     /* return address of WDATA register */
 692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     data_reg_addr = (uint32_t) &(CORDICx->WDATA);
 693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   }
 694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return data_reg_addr;
 696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_FLAG_Management FLAG_Management
 703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC result ready flag state.
 708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          RRDY          LL_CORDIC_IsActiveFlag_RRDY
 709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsActiveFlag_RRDY(const CORDIC_TypeDef *CORDICx)
 713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
  81              		.loc 1 713 1
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 8
  84              		@ frame_needed = 1, uses_anonymous_args = 0
  85              		@ link register save eliminated.
  86 0000 80B4     		push	{r7}
  87              	.LCFI0:
  88              		.cfi_def_cfa_offset 4
  89              		.cfi_offset 7, -4
ARM GAS  /tmp/ccLmOb0L.s 			page 15


  90 0002 83B0     		sub	sp, sp, #12
  91              	.LCFI1:
  92              		.cfi_def_cfa_offset 16
  93 0004 00AF     		add	r7, sp, #0
  94              	.LCFI2:
  95              		.cfi_def_cfa_register 7
  96 0006 7860     		str	r0, [r7, #4]
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_RRDY) == (CORDIC_CSR_RRDY)) ? 1U : 0U);
  97              		.loc 1 714 12
  98 0008 7B68     		ldr	r3, [r7, #4]
  99 000a 1B68     		ldr	r3, [r3]
 100 000c 03F00043 		and	r3, r3, #-2147483648
 101              		.loc 1 714 79
 102 0010 B3F1004F 		cmp	r3, #-2147483648
 103 0014 01D1     		bne	.L2
 104              		.loc 1 714 79 is_stmt 0 discriminator 1
 105 0016 0123     		movs	r3, #1
 106 0018 00E0     		b	.L4
 107              	.L2:
 108              		.loc 1 714 79 discriminator 2
 109 001a 0023     		movs	r3, #0
 110              	.L4:
 715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 111              		.loc 1 715 1 is_stmt 1 discriminator 5
 112 001c 1846     		mov	r0, r3
 113 001e 0C37     		adds	r7, r7, #12
 114              	.LCFI3:
 115              		.cfi_def_cfa_offset 4
 116 0020 BD46     		mov	sp, r7
 117              	.LCFI4:
 118              		.cfi_def_cfa_register 13
 119              		@ sp needed
 120 0022 5DF8047B 		ldr	r7, [sp], #4
 121              	.LCFI5:
 122              		.cfi_restore 7
 123              		.cfi_def_cfa_offset 0
 124 0026 7047     		bx	lr
 125              		.cfi_endproc
 126              	.LFE1427:
 128              		.section	.text.LL_CORDIC_WriteData,"ax",%progbits
 129              		.align	1
 130              		.syntax unified
 131              		.thumb
 132              		.thumb_func
 133              		.fpu fpv4-sp-d16
 135              	LL_CORDIC_WriteData:
 136              	.LFB1428:
 716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_Data_Management Data_Management
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
ARM GAS  /tmp/ccLmOb0L.s 			page 16


 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Write 32-bit input data for the CORDIC processing.
 727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll WDATA        ARG           LL_CORDIC_WriteData
 728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processin
 730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
 733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 137              		.loc 1 733 1
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 8
 140              		@ frame_needed = 1, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 142 0000 80B4     		push	{r7}
 143              	.LCFI6:
 144              		.cfi_def_cfa_offset 4
 145              		.cfi_offset 7, -4
 146 0002 83B0     		sub	sp, sp, #12
 147              	.LCFI7:
 148              		.cfi_def_cfa_offset 16
 149 0004 00AF     		add	r7, sp, #0
 150              	.LCFI8:
 151              		.cfi_def_cfa_register 7
 152 0006 7860     		str	r0, [r7, #4]
 153 0008 3960     		str	r1, [r7]
 734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   WRITE_REG(CORDICx->WDATA, InData);
 154              		.loc 1 734 3
 155 000a 7B68     		ldr	r3, [r7, #4]
 156 000c 3A68     		ldr	r2, [r7]
 157 000e 5A60     		str	r2, [r3, #4]
 735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 158              		.loc 1 735 1
 159 0010 00BF     		nop
 160 0012 0C37     		adds	r7, r7, #12
 161              	.LCFI9:
 162              		.cfi_def_cfa_offset 4
 163 0014 BD46     		mov	sp, r7
 164              	.LCFI10:
 165              		.cfi_def_cfa_register 13
 166              		@ sp needed
 167 0016 5DF8047B 		ldr	r7, [sp], #4
 168              	.LCFI11:
 169              		.cfi_restore 7
 170              		.cfi_def_cfa_offset 0
 171 001a 7047     		bx	lr
 172              		.cfi_endproc
 173              	.LFE1428:
 175              		.section	.text.LL_CORDIC_ReadData,"ax",%progbits
 176              		.align	1
 177              		.syntax unified
 178              		.thumb
 179              		.thumb_func
 180              		.fpu fpv4-sp-d16
 182              	LL_CORDIC_ReadData:
 183              	.LFB1429:
 736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
ARM GAS  /tmp/ccLmOb0L.s 			page 17


 738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return 32-bit output data of CORDIC processing.
 739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll RDATA        RES           LL_CORDIC_ReadData
 740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval 32-bit output data of CORDIC processing.
 742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
 744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 184              		.loc 1 744 1
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 8
 187              		@ frame_needed = 1, uses_anonymous_args = 0
 188              		@ link register save eliminated.
 189 0000 80B4     		push	{r7}
 190              	.LCFI12:
 191              		.cfi_def_cfa_offset 4
 192              		.cfi_offset 7, -4
 193 0002 83B0     		sub	sp, sp, #12
 194              	.LCFI13:
 195              		.cfi_def_cfa_offset 16
 196 0004 00AF     		add	r7, sp, #0
 197              	.LCFI14:
 198              		.cfi_def_cfa_register 7
 199 0006 7860     		str	r0, [r7, #4]
 745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_REG(CORDICx->RDATA));
 200              		.loc 1 745 10
 201 0008 7B68     		ldr	r3, [r7, #4]
 202 000a 9B68     		ldr	r3, [r3, #8]
 746:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 203              		.loc 1 746 1
 204 000c 1846     		mov	r0, r3
 205 000e 0C37     		adds	r7, r7, #12
 206              	.LCFI15:
 207              		.cfi_def_cfa_offset 4
 208 0010 BD46     		mov	sp, r7
 209              	.LCFI16:
 210              		.cfi_def_cfa_register 13
 211              		@ sp needed
 212 0012 5DF8047B 		ldr	r7, [sp], #4
 213              	.LCFI17:
 214              		.cfi_restore 7
 215              		.cfi_def_cfa_offset 0
 216 0016 7047     		bx	lr
 217              		.cfi_endproc
 218              	.LFE1429:
 220              		.section	.text.MCM_Modulus,"ax",%progbits
 221              		.align	1
 222              		.syntax unified
 223              		.thumb
 224              		.thumb_func
 225              		.fpu fpv4-sp-d16
 227              	MCM_Modulus:
 228              	.LFB1438:
 229              		.file 2 "Inc/mc_math.h"
   1:Inc/mc_math.h **** 
   2:Inc/mc_math.h **** /**
   3:Inc/mc_math.h ****   ******************************************************************************
   4:Inc/mc_math.h ****   * @file    mc_math.h
ARM GAS  /tmp/ccLmOb0L.s 			page 18


   5:Inc/mc_math.h ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Inc/mc_math.h ****   * @brief   This file provides mathematics functions useful for and specific to
   7:Inc/mc_math.h ****   *          Motor Control.
   8:Inc/mc_math.h ****   *
   9:Inc/mc_math.h ****   ******************************************************************************
  10:Inc/mc_math.h ****   * @attention
  11:Inc/mc_math.h ****   *
  12:Inc/mc_math.h ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  13:Inc/mc_math.h ****   * All rights reserved.</center></h2>
  14:Inc/mc_math.h ****   *
  15:Inc/mc_math.h ****   * This software component is licensed by ST under Ultimate Liberty license
  16:Inc/mc_math.h ****   * SLA0044, the "License"; You may not use this file except in compliance with
  17:Inc/mc_math.h ****   * the License. You may obtain a copy of the License at:
  18:Inc/mc_math.h ****   *                             www.st.com/SLA0044
  19:Inc/mc_math.h ****   *
  20:Inc/mc_math.h ****   ******************************************************************************
  21:Inc/mc_math.h ****   * @ingroup MC_Math
  22:Inc/mc_math.h ****   */
  23:Inc/mc_math.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  24:Inc/mc_math.h **** #ifndef MC_MATH_H
  25:Inc/mc_math.h **** #define MC_MATH_H
  26:Inc/mc_math.h **** 
  27:Inc/mc_math.h **** /* Includes ------------------------------------------------------------------*/
  28:Inc/mc_math.h **** #include "mc_type.h"
  29:Inc/mc_math.h **** 
  30:Inc/mc_math.h **** /** @addtogroup MCSDK
  31:Inc/mc_math.h ****   * @{
  32:Inc/mc_math.h ****   */
  33:Inc/mc_math.h **** 
  34:Inc/mc_math.h **** /** @addtogroup MC_Math
  35:Inc/mc_math.h ****   * @{
  36:Inc/mc_math.h ****   */
  37:Inc/mc_math.h **** #define SQRT_2  1.4142
  38:Inc/mc_math.h **** #define SQRT_3  1.732
  39:Inc/mc_math.h **** 
  40:Inc/mc_math.h **** /* CORDIC coprocessor configuration register settings */
  41:Inc/mc_math.h **** 
  42:Inc/mc_math.h **** /* CORDIC FUNCTION: PHASE q1.31 (Electrical Angle computation) */
  43:Inc/mc_math.h **** #define CORDIC_CONFIG_PHASE     (LL_CORDIC_FUNCTION_PHASE | LL_CORDIC_PRECISION_6CYCLES | LL_CORDIC
  44:Inc/mc_math.h ****          LL_CORDIC_NBWRITE_2 | LL_CORDIC_NBREAD_1 |\
  45:Inc/mc_math.h ****          LL_CORDIC_INSIZE_32BITS | LL_CORDIC_OUTSIZE_32BITS)
  46:Inc/mc_math.h **** 
  47:Inc/mc_math.h **** /* CORDIC FUNCTION: SQUAREROOT q1.31 */
  48:Inc/mc_math.h **** #define CORDIC_CONFIG_SQRT      (LL_CORDIC_FUNCTION_SQUAREROOT | LL_CORDIC_PRECISION_6CYCLES | LL_C
  49:Inc/mc_math.h ****          LL_CORDIC_NBWRITE_1 | LL_CORDIC_NBREAD_1 |\
  50:Inc/mc_math.h ****          LL_CORDIC_INSIZE_32BITS | LL_CORDIC_OUTSIZE_32BITS)
  51:Inc/mc_math.h **** 
  52:Inc/mc_math.h **** /* CORDIC FUNCTION: COSINE q1.15 */
  53:Inc/mc_math.h **** #define CORDIC_CONFIG_COSINE    (LL_CORDIC_FUNCTION_COSINE | LL_CORDIC_PRECISION_6CYCLES | LL_CORDI
  54:Inc/mc_math.h ****          LL_CORDIC_NBWRITE_1 | LL_CORDIC_NBREAD_1 |\
  55:Inc/mc_math.h ****          LL_CORDIC_INSIZE_16BITS | LL_CORDIC_OUTSIZE_16BITS)
  56:Inc/mc_math.h **** 
  57:Inc/mc_math.h **** /* CORDIC FUNCTION: MODULUS q1.15 */
  58:Inc/mc_math.h **** #define CORDIC_CONFIG_MODULUS   (LL_CORDIC_FUNCTION_MODULUS | LL_CORDIC_PRECISION_6CYCLES | LL_CORD
  59:Inc/mc_math.h ****          LL_CORDIC_NBWRITE_1 | LL_CORDIC_NBREAD_1 |\
  60:Inc/mc_math.h ****          LL_CORDIC_INSIZE_16BITS | LL_CORDIC_OUTSIZE_16BITS)
  61:Inc/mc_math.h **** 
ARM GAS  /tmp/ccLmOb0L.s 			page 19


  62:Inc/mc_math.h **** /**
  63:Inc/mc_math.h ****   * @brief  Macro to compute logarithm of two
  64:Inc/mc_math.h ****   */
  65:Inc/mc_math.h **** #define LOG2(x) \
  66:Inc/mc_math.h ****   (((x) == 65535 ) ? 16 : \
  67:Inc/mc_math.h ****    (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 15 : \
  68:Inc/mc_math.h ****     (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 14 : \
  69:Inc/mc_math.h ****      (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 13 : \
  70:Inc/mc_math.h ****       (((x) == (2*2*2*2*2*2*2*2*2*2*2*2)) ? 12 : \
  71:Inc/mc_math.h ****        (((x) == (2*2*2*2*2*2*2*2*2*2*2)) ? 11 : \
  72:Inc/mc_math.h ****         (((x) == (2*2*2*2*2*2*2*2*2*2)) ? 10 : \
  73:Inc/mc_math.h ****          (((x) == (2*2*2*2*2*2*2*2*2)) ? 9 : \
  74:Inc/mc_math.h ****           (((x) == (2*2*2*2*2*2*2*2)) ? 8 : \
  75:Inc/mc_math.h ****            (((x) == (2*2*2*2*2*2*2)) ? 7 : \
  76:Inc/mc_math.h ****             (((x) == (2*2*2*2*2*2)) ? 6 : \
  77:Inc/mc_math.h ****              (((x) == (2*2*2*2*2)) ? 5 : \
  78:Inc/mc_math.h ****               (((x) == (2*2*2*2)) ? 4 : \
  79:Inc/mc_math.h ****                (((x) == (2*2*2)) ? 3 : \
  80:Inc/mc_math.h ****                 (((x) == (2*2)) ? 2 : \
  81:Inc/mc_math.h ****                  (((x) == 2) ? 1 : \
  82:Inc/mc_math.h ****                   (((x) == 1) ? 0 : -1)))))))))))))))))
  83:Inc/mc_math.h **** 
  84:Inc/mc_math.h **** /**
  85:Inc/mc_math.h ****   * @brief  Trigonometrical functions type definition
  86:Inc/mc_math.h ****   */
  87:Inc/mc_math.h **** typedef struct
  88:Inc/mc_math.h **** {
  89:Inc/mc_math.h ****   int16_t hCos;
  90:Inc/mc_math.h ****   int16_t hSin;
  91:Inc/mc_math.h **** } Trig_Components;
  92:Inc/mc_math.h **** 
  93:Inc/mc_math.h **** /**
  94:Inc/mc_math.h ****   * @brief  This function transforms stator currents Ia and qIb (which are
  95:Inc/mc_math.h ****   *         directed along axes each displaced by 120 degrees) into currents
  96:Inc/mc_math.h ****   *         Ialpha and Ibeta in a stationary qd reference frame.
  97:Inc/mc_math.h ****   *                               Ialpha = Ia
  98:Inc/mc_math.h ****   *                       Ibeta = -(2*Ib+Ia)/sqrt(3)
  99:Inc/mc_math.h ****   * @param  Curr_Input: stator current Ia and Ib in ab_t format.
 100:Inc/mc_math.h ****   * @retval Stator current Ialpha and Ibeta in alphabeta_t format.
 101:Inc/mc_math.h ****   */
 102:Inc/mc_math.h **** alphabeta_t MCM_Clarke(ab_t Input);
 103:Inc/mc_math.h **** 
 104:Inc/mc_math.h **** /**
 105:Inc/mc_math.h ****   * @brief  This function transforms stator values alpha and beta, which
 106:Inc/mc_math.h ****   *         belong to a stationary qd reference frame, to a rotor flux
 107:Inc/mc_math.h ****   *         synchronous reference frame (properly oriented), so as Iq and Id.
 108:Inc/mc_math.h ****   *                   Id= Ialpha *sin(theta)+qIbeta *cos(Theta)
 109:Inc/mc_math.h ****   *                   Iq=qIalpha *cos(Theta)-qIbeta *sin(Theta)
 110:Inc/mc_math.h ****   * @param  Curr_Input: stator values alpha and beta in alphabeta_t format.
 111:Inc/mc_math.h ****   * @param  Theta: rotating frame angular position in q1.15 format.
 112:Inc/mc_math.h ****   * @retval Stator current q and d in qd_t format.
 113:Inc/mc_math.h ****   */
 114:Inc/mc_math.h **** qd_t MCM_Park(alphabeta_t Input, int16_t Theta);
 115:Inc/mc_math.h **** 
 116:Inc/mc_math.h **** /**
 117:Inc/mc_math.h ****   * @brief  This function transforms stator voltage qVq and qVd, that belong to
 118:Inc/mc_math.h ****   *         a rotor flux synchronous rotating frame, to a stationary reference
ARM GAS  /tmp/ccLmOb0L.s 			page 20


 119:Inc/mc_math.h ****   *         frame, so as to obtain qValpha and qVbeta:
 120:Inc/mc_math.h ****   *                  Valfa= Vq*Cos(theta)+ Vd*Sin(theta)
 121:Inc/mc_math.h ****   *                  Vbeta=-Vq*Sin(theta)+ Vd*Cos(theta)
 122:Inc/mc_math.h ****   * @param  Curr_Input: stator voltage Vq and Vd in qd_t format.
 123:Inc/mc_math.h ****   * @param  Theta: rotating frame angular position in q1.15 format.
 124:Inc/mc_math.h ****   * @retval Stator values alpha and beta in alphabeta_t format.
 125:Inc/mc_math.h ****   */
 126:Inc/mc_math.h **** alphabeta_t MCM_Rev_Park(qd_t Input, int16_t Theta);
 127:Inc/mc_math.h **** 
 128:Inc/mc_math.h **** /**
 129:Inc/mc_math.h ****   * @brief  This function returns cosine and sine functions of the angle fed in input.
 130:Inc/mc_math.h ****   * @param  hAngle: angle in q1.15 format.
 131:Inc/mc_math.h ****   * @retval Trig_Components Cos(angle) and Sin(angle) in Trig_Components format.
 132:Inc/mc_math.h ****   */
 133:Inc/mc_math.h **** Trig_Components MCM_Trig_Functions(int16_t hAngle);
 134:Inc/mc_math.h **** 
 135:Inc/mc_math.h **** /**
 136:Inc/mc_math.h ****   * @brief  It calculates the square root of a non-negative s32. It returns 0 for negative s32.
 137:Inc/mc_math.h ****   * @param  Input int32_t number.
 138:Inc/mc_math.h ****   * @retval int32_t Square root of Input (0 if Input<0).
 139:Inc/mc_math.h ****   */
 140:Inc/mc_math.h **** int32_t MCM_Sqrt(int32_t wInput);
 141:Inc/mc_math.h **** 
 142:Inc/mc_math.h **** /**
 143:Inc/mc_math.h ****   * @brief  Sqrt table used by Circle Limitation function
 144:Inc/mc_math.h ****   *         used for STM32F0/STM32G0 series only
 145:Inc/mc_math.h ****   */
 146:Inc/mc_math.h **** #define SQRT_CIRCLE_LIMITATION {\
 147:Inc/mc_math.h ****      0 , 1023 , 1448 , 1773 , 2047 , 2289 , 2508 , 2709,\
 148:Inc/mc_math.h ****      2896 , 3071 , 3238 , 3396 , 3547 , 3691 , 3831 , 3965,\
 149:Inc/mc_math.h ****      4095 , 4221 , 4344 , 4463 , 4579 , 4692 , 4802 , 4910,\
 150:Inc/mc_math.h ****      5016 , 5119 , 5221 , 5320 , 5418 , 5514 , 5608 , 5701,\
 151:Inc/mc_math.h ****      5792 , 5882 , 5970 , 6057 , 6143 , 6228 , 6312 , 6394,\
 152:Inc/mc_math.h ****      6476 , 6556 , 6636 , 6714 , 6792 , 6868 , 6944 , 7019,\
 153:Inc/mc_math.h ****      7094 , 7167 , 7240 , 7312 , 7383 , 7454 , 7524 , 7593,\
 154:Inc/mc_math.h ****      7662 , 7730 , 7798 , 7865 , 7931 , 7997 , 8062 , 8127,\
 155:Inc/mc_math.h ****      8191 , 8255 , 8318 , 8381 , 8443 , 8505 , 8567 , 8628,\
 156:Inc/mc_math.h ****      8688 , 8748 , 8808 , 8867 , 8926 , 8985 , 9043 , 9101,\
 157:Inc/mc_math.h ****      9158 , 9215 , 9272 , 9328 , 9384 , 9440 , 9495 , 9550,\
 158:Inc/mc_math.h ****      9605 , 9660 , 9714 , 9768 , 9821 , 9874 , 9927 , 9980,\
 159:Inc/mc_math.h ****      10032 , 10084 , 10136 , 10188 , 10239 , 10290 , 10341 , 10392,\
 160:Inc/mc_math.h ****      10442 , 10492 , 10542 , 10592 , 10641 , 10690 , 10739 , 10788,\
 161:Inc/mc_math.h ****      10836 , 10884 , 10932 , 10980 , 11028 , 11075 , 11123 , 11170,\
 162:Inc/mc_math.h ****      11217 , 11263 , 11310 , 11356 , 11402 , 11448 , 11494 , 11539,\
 163:Inc/mc_math.h ****      11584 , 11630 , 11675 , 11719 , 11764 , 11808 , 11853 , 11897,\
 164:Inc/mc_math.h ****      11941 , 11985 , 12028 , 12072 , 12115 , 12158 , 12201 , 12244,\
 165:Inc/mc_math.h ****      12287 , 12330 , 12372 , 12414 , 12457 , 12499 , 12541 , 12582,\
 166:Inc/mc_math.h ****      12624 , 12665 , 12707 , 12748 , 12789 , 12830 , 12871 , 12911,\
 167:Inc/mc_math.h ****      12952 , 12992 , 13032 , 13073 , 13113 , 13153 , 13192 , 13232,\
 168:Inc/mc_math.h ****      13272 , 13311 , 13350 , 13390 , 13429 , 13468 , 13507 , 13545,\
 169:Inc/mc_math.h ****      13584 , 13623 , 13661 , 13699 , 13737 , 13776 , 13814 , 13851,\
 170:Inc/mc_math.h ****      13889 , 13927 , 13965 , 14002 , 14039 , 14077 , 14114 , 14151,\
 171:Inc/mc_math.h ****      14188 , 14225 , 14262 , 14298 , 14335 , 14372 , 14408 , 14444,\
 172:Inc/mc_math.h ****      14481 , 14517 , 14553 , 14589 , 14625 , 14661 , 14696 , 14732,\
 173:Inc/mc_math.h ****      14767 , 14803 , 14838 , 14874 , 14909 , 14944 , 14979 , 15014,\
 174:Inc/mc_math.h ****      15049 , 15084 , 15118 , 15153 , 15187 , 15222 , 15256 , 15291,\
 175:Inc/mc_math.h ****      15325 , 15359 , 15393 , 15427 , 15461 , 15495 , 15529 , 15562,\
ARM GAS  /tmp/ccLmOb0L.s 			page 21


 176:Inc/mc_math.h ****      15596 , 15630 , 15663 , 15697 , 15730 , 15763 , 15797 , 15830,\
 177:Inc/mc_math.h ****      15863 , 15896 , 15929 , 15962 , 15994 , 16027 , 16060 , 16092,\
 178:Inc/mc_math.h ****      16125 , 16157 , 16190 , 16222 , 16254 , 16287 , 16319 , 16351,\
 179:Inc/mc_math.h ****      16383 , 16415 , 16447 , 16479 , 16510 , 16542 , 16574 , 16605,\
 180:Inc/mc_math.h ****      16637 , 16669 , 16700 , 16731 , 16763 , 16794 , 16825 , 16856,\
 181:Inc/mc_math.h ****      16887 , 16918 , 16949 , 16980 , 17011 , 17042 , 17072 , 17103,\
 182:Inc/mc_math.h ****      17134 , 17164 , 17195 , 17225 , 17256 , 17286 , 17316 , 17347,\
 183:Inc/mc_math.h ****      17377 , 17407 , 17437 , 17467 , 17497 , 17527 , 17557 , 17587,\
 184:Inc/mc_math.h ****      17617 , 17646 , 17676 , 17706 , 17735 , 17765 , 17794 , 17824,\
 185:Inc/mc_math.h ****      17853 , 17882 , 17912 , 17941 , 17970 , 17999 , 18028 , 18057,\
 186:Inc/mc_math.h ****      18086 , 18115 , 18144 , 18173 , 18202 , 18231 , 18259 , 18288,\
 187:Inc/mc_math.h ****      18317 , 18345 , 18374 , 18402 , 18431 , 18459 , 18488 , 18516,\
 188:Inc/mc_math.h ****      18544 , 18573 , 18601 , 18629 , 18657 , 18685 , 18713 , 18741,\
 189:Inc/mc_math.h ****      18769 , 18797 , 18825 , 18853 , 18881 , 18908 , 18936 , 18964,\
 190:Inc/mc_math.h ****      18991 , 19019 , 19046 , 19074 , 19101 , 19129 , 19156 , 19184,\
 191:Inc/mc_math.h ****      19211 , 19238 , 19265 , 19293 , 19320 , 19347 , 19374 , 19401,\
 192:Inc/mc_math.h ****      19428 , 19455 , 19482 , 19509 , 19536 , 19562 , 19589 , 19616,\
 193:Inc/mc_math.h ****      19643 , 19669 , 19696 , 19723 , 19749 , 19776 , 19802 , 19829,\
 194:Inc/mc_math.h ****      19855 , 19881 , 19908 , 19934 , 19960 , 19987 , 20013 , 20039,\
 195:Inc/mc_math.h ****      20065 , 20091 , 20117 , 20143 , 20169 , 20235 , 20231 , 20247,\
 196:Inc/mc_math.h ****      20273 , 20299 , 20325 , 20350 , 20376 , 20402 , 20428 , 20453,\
 197:Inc/mc_math.h ****      20479 , 20504 , 20530 , 20556 , 20581 , 20606 , 20632 , 20657,\
 198:Inc/mc_math.h ****      20683 , 20708 , 20733 , 20759 , 20784 , 20809 , 20834 , 20859,\
 199:Inc/mc_math.h ****      20884 , 20910 , 20935 , 20960 , 20985 , 21010 , 21035 , 21059,\
 200:Inc/mc_math.h ****      21084 , 21109 , 21134 , 21159 , 21184 , 21208 , 21233 , 21258,\
 201:Inc/mc_math.h ****      21282 , 21307 , 21331 , 21356 , 21381 , 21405 , 21430 , 21454,\
 202:Inc/mc_math.h ****      21478 , 21503 , 21527 , 21552 , 21576 , 21600 , 21624 , 21649,\
 203:Inc/mc_math.h ****      21673 , 21697 , 21721 , 21745 , 21769 , 21793 , 21817 , 21841,\
 204:Inc/mc_math.h ****      21865 , 21889 , 21913 , 21937 , 21961 , 21985 , 22009 , 22033,\
 205:Inc/mc_math.h ****      22056 , 22080 , 22104 , 22128 , 22151 , 22175 , 22199 , 22222,\
 206:Inc/mc_math.h ****      22246 , 22269 , 22293 , 22316 , 22340 , 22363 , 22387 , 22410,\
 207:Inc/mc_math.h ****      22434 , 22457 , 22480 , 22504 , 22527 , 22550 , 22573 , 22597,\
 208:Inc/mc_math.h ****      22620 , 22643 , 22666 , 22689 , 22712 , 22735 , 22758 , 22781,\
 209:Inc/mc_math.h ****      22804 , 22827 , 22850 , 22873 , 22896 , 22919 , 22942 , 22965,\
 210:Inc/mc_math.h ****      22988 , 23010 , 23033 , 23056 , 23079 , 23101 , 23124 , 23147,\
 211:Inc/mc_math.h ****      23169 , 23192 , 23214 , 23237 , 23260 , 23282 , 23305 , 23327,\
 212:Inc/mc_math.h ****      23350 , 23372 , 23394 , 23417 , 23439 , 23462 , 23484 , 23506,\
 213:Inc/mc_math.h ****      23529 , 23551 , 23573 , 23595 , 23617 , 23640 , 23662 , 23684,\
 214:Inc/mc_math.h ****      23706 , 23728 , 23750 , 23772 , 23794 , 23816 , 23838 , 23860,\
 215:Inc/mc_math.h ****      23882 , 23904 , 23926 , 23948 , 23970 , 23992 , 24014 , 24036,\
 216:Inc/mc_math.h ****      24057 , 24079 , 24101 , 24123 , 24144 , 24166 , 24188 , 24209,\
 217:Inc/mc_math.h ****      24231 , 24253 , 24274 , 24296 , 24317 , 24339 , 24360 , 24382,\
 218:Inc/mc_math.h ****      24403 , 24425 , 24446 , 24468 , 24489 , 24511 , 24532 , 24553,\
 219:Inc/mc_math.h ****      24575 , 24596 , 24617 , 24639 , 24660 , 24681 , 24702 , 24724,\
 220:Inc/mc_math.h ****      24745 , 24766 , 24787 , 24808 , 24829 , 24851 , 24872 , 24893,\
 221:Inc/mc_math.h ****      24914 , 24935 , 24956 , 24977 , 24998 , 25019 , 25040 , 25061,\
 222:Inc/mc_math.h ****      25082 , 25102 , 25123 , 25144 , 25165 , 25186 , 25207 , 25227,\
 223:Inc/mc_math.h ****      25248 , 25269 , 25290 , 25310 , 25331 , 25352 , 25372 , 25393,\
 224:Inc/mc_math.h ****      25414 , 25434 , 25455 , 25476 , 25496 , 25517 , 25537 , 25558,\
 225:Inc/mc_math.h ****      25578 , 25599 , 25619 , 25640 , 25660 , 25681 , 25701 , 25721,\
 226:Inc/mc_math.h ****      25742 , 25762 , 25782 , 25803 , 25823 , 25843 , 25864 , 25884,\
 227:Inc/mc_math.h ****      25904 , 25924 , 25945 , 25965 , 25985 , 26005 , 26025 , 26045,\
 228:Inc/mc_math.h ****      26065 , 26086 , 26106 , 26126 , 26146 , 26166 , 26186 , 26206,\
 229:Inc/mc_math.h ****      26226 , 26246 , 26266 , 26286 , 26306 , 26326 , 26346 , 26365,\
 230:Inc/mc_math.h ****      26385 , 26405 , 26425 , 26445 , 26465 , 26484 , 26504 , 26524,\
 231:Inc/mc_math.h ****      26544 , 26564 , 26583 , 26603 , 26623 , 26642 , 26662 , 26682,\
 232:Inc/mc_math.h ****      26701 , 26721 , 26741 , 26760 , 26780 , 26799 , 26819 , 26838,\
ARM GAS  /tmp/ccLmOb0L.s 			page 22


 233:Inc/mc_math.h ****      26858 , 26877 , 26897 , 26916 , 26936 , 26955 , 26975 , 26994,\
 234:Inc/mc_math.h ****      27014 , 27033 , 27052 , 27072 , 27091 , 27111 , 27130 , 27149,\
 235:Inc/mc_math.h ****      27168 , 27188 , 27207 , 27226 , 27246 , 27265 , 27284 , 27303,\
 236:Inc/mc_math.h ****      27322 , 27342 , 27361 , 27380 , 27399 , 27418 , 27437 , 27456,\
 237:Inc/mc_math.h ****      27475 , 27495 , 27514 , 27533 , 27552 , 27571 , 27590 , 27609,\
 238:Inc/mc_math.h ****      27628 , 27647 , 27666 , 27685 , 27703 , 27722 , 27741 , 27760,\
 239:Inc/mc_math.h ****      27779 , 27798 , 27817 , 27836 , 27854 , 27873 , 27892 , 27911,\
 240:Inc/mc_math.h ****      27930 , 27948 , 27967 , 27986 , 28005 , 28023 , 28042 , 28061,\
 241:Inc/mc_math.h ****      28079 , 28098 , 28117 , 28135 , 28154 , 28173 , 28191 , 28210,\
 242:Inc/mc_math.h ****      28228 , 28247 , 28265 , 28284 , 28303 , 28321 , 28340 , 28358,\
 243:Inc/mc_math.h ****      28377 , 28395 , 28413 , 28432 , 28450 , 28469 , 28487 , 28506,\
 244:Inc/mc_math.h ****      28524 , 28542 , 28561 , 28579 , 28597 , 28616 , 28634 , 28652,\
 245:Inc/mc_math.h ****      28671 , 28689 , 28707 , 28725 , 28744 , 28762 , 28780 , 28798,\
 246:Inc/mc_math.h ****      28817 , 28835 , 28853 , 28871 , 28889 , 28907 , 28925 , 28944,\
 247:Inc/mc_math.h ****      28962 , 28980 , 28998 , 29016 , 29034 , 29052 , 29070 , 29088,\
 248:Inc/mc_math.h ****      29106 , 29124 , 29142 , 29160 , 29178 , 29196 , 29214 , 29232,\
 249:Inc/mc_math.h ****      29250 , 29268 , 29286 , 29304 , 29322 , 29339 , 29357 , 29375,\
 250:Inc/mc_math.h ****      29393 , 29411 , 29429 , 29446 , 29464 , 29482 , 29500 , 29518,\
 251:Inc/mc_math.h ****      29535 , 29553 , 29571 , 29588 , 29606 , 29624 , 29642 , 29659,\
 252:Inc/mc_math.h ****      29677 , 29695 , 29712 , 29730 , 29748 , 29765 , 29783 , 29800,\
 253:Inc/mc_math.h ****      29818 , 29835 , 29853 , 29871 , 29888 , 29906 , 29923 , 29941,\
 254:Inc/mc_math.h ****      29958 , 29976 , 29993 , 30011 , 30028 , 30046 , 30063 , 30080,\
 255:Inc/mc_math.h ****      30098 , 30115 , 30133 , 30150 , 30168 , 30185 , 30202 , 30220,\
 256:Inc/mc_math.h ****      30237 , 30254 , 30272 , 30289 , 30306 , 30324 , 30341 , 30358,\
 257:Inc/mc_math.h ****      30375 , 30393 , 30410 , 30427 , 30444 , 30461 , 30479 , 30496,\
 258:Inc/mc_math.h ****      30513 , 30530 , 30547 , 30565 , 30582 , 30599 , 30616 , 30633,\
 259:Inc/mc_math.h ****      30650 , 30667 , 30684 , 30701 , 30719 , 30736 , 30753 , 30770,\
 260:Inc/mc_math.h ****      30787 , 30804 , 30821 , 30838 , 30855 , 30872 , 30889 , 30906,\
 261:Inc/mc_math.h ****      30923 , 30940 , 30957 , 30973 , 30990 , 31007 , 31024 , 31041,\
 262:Inc/mc_math.h ****      31058 , 31075 , 31092 , 31109 , 31125 , 31142 , 31159 , 31176,\
 263:Inc/mc_math.h ****      31193 , 31210 , 31226 , 31243 , 31260 , 31277 , 31293 , 31310,\
 264:Inc/mc_math.h ****      31327 , 31344 , 31360 , 31377 , 31394 , 31410 , 31427 , 31444,\
 265:Inc/mc_math.h ****      31461 , 31477 , 31494 , 31510 , 31527 , 31544 , 31560 , 31577,\
 266:Inc/mc_math.h ****      31594 , 31610 , 31627 , 31643 , 31660 , 31676 , 31693 , 31709,\
 267:Inc/mc_math.h ****      31726 , 31743 , 31759 , 31776 , 31792 , 31809 , 31825 , 31841,\
 268:Inc/mc_math.h ****      31858 , 31874 , 31891 , 31907 , 31924 , 31940 , 31957 , 31973,\
 269:Inc/mc_math.h ****      31989 , 32006 , 32023 , 32038 , 32055 , 32071 , 32087 , 32104,\
 270:Inc/mc_math.h ****      32120 , 32136 , 32153 , 32169 , 32185 , 32202 , 32218 , 32234,\
 271:Inc/mc_math.h ****      32250 , 32267 , 32283 , 32299 , 32315 , 32332 , 32348 , 32364,\
 272:Inc/mc_math.h ****      32380 , 32396 , 32413 , 32429 , 32445 , 32461 , 32477 , 32493,\
 273:Inc/mc_math.h ****      32509 , 32526 , 32542 , 32558 , 32574 , 32590 , 32606 , 32622,\
 274:Inc/mc_math.h ****      32638 , 32654 , 32670 , 32686 , 32702 , 32718 , 32734 , 32750,\
 275:Inc/mc_math.h ****      32767 }
 276:Inc/mc_math.h **** 
 277:Inc/mc_math.h **** #define ATAN1DIV1     (int16_t)8192
 278:Inc/mc_math.h **** #define ATAN1DIV2     (int16_t)4836
 279:Inc/mc_math.h **** #define ATAN1DIV4     (int16_t)2555
 280:Inc/mc_math.h **** #define ATAN1DIV8     (int16_t)1297
 281:Inc/mc_math.h **** #define ATAN1DIV16    (int16_t)651
 282:Inc/mc_math.h **** #define ATAN1DIV32    (int16_t)326
 283:Inc/mc_math.h **** #define ATAN1DIV64    (int16_t)163
 284:Inc/mc_math.h **** #define ATAN1DIV128   (int16_t)81
 285:Inc/mc_math.h **** #define ATAN1DIV256   (int16_t)41
 286:Inc/mc_math.h **** #define ATAN1DIV512   (int16_t)20
 287:Inc/mc_math.h **** #define ATAN1DIV1024  (int16_t)10
 288:Inc/mc_math.h **** #define ATAN1DIV2048  (int16_t)5
 289:Inc/mc_math.h **** #define ATAN1DIV4096  (int16_t)3
ARM GAS  /tmp/ccLmOb0L.s 			page 23


 290:Inc/mc_math.h **** #define ATAN1DIV8192  (int16_t)1
 291:Inc/mc_math.h **** 
 292:Inc/mc_math.h **** /**
 293:Inc/mc_math.h ****   * @brief  It executes Modulus algorithm.
 294:Inc/mc_math.h ****   * @param  alpha component,
 295:Inc/mc_math.h ****   *         beta component.
 296:Inc/mc_math.h ****   * @retval int16_t Modulus.
 297:Inc/mc_math.h ****   */
 298:Inc/mc_math.h **** static inline int16_t MCM_Modulus(int16_t alpha, int16_t beta)
 299:Inc/mc_math.h **** {
 230              		.loc 2 299 1
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 16
 233              		@ frame_needed = 1, uses_anonymous_args = 0
 234 0000 80B5     		push	{r7, lr}
 235              	.LCFI18:
 236              		.cfi_def_cfa_offset 8
 237              		.cfi_offset 7, -8
 238              		.cfi_offset 14, -4
 239 0002 84B0     		sub	sp, sp, #16
 240              	.LCFI19:
 241              		.cfi_def_cfa_offset 24
 242 0004 00AF     		add	r7, sp, #0
 243              	.LCFI20:
 244              		.cfi_def_cfa_register 7
 245 0006 0346     		mov	r3, r0
 246 0008 0A46     		mov	r2, r1
 247 000a FB80     		strh	r3, [r7, #6]	@ movhi
 248 000c 1346     		mov	r3, r2	@ movhi
 249 000e BB80     		strh	r3, [r7, #4]	@ movhi
 250              	.LBB6:
 251              	.LBB7:
 252              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccLmOb0L.s 			page 24


  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  /tmp/ccLmOb0L.s 			page 25


  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
ARM GAS  /tmp/ccLmOb0L.s 			page 26


 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccLmOb0L.s 			page 27


 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 253              		.loc 3 209 3
 254              		.syntax unified
 255              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 256 0010 72B6     		cpsid i
 257              	@ 0 "" 2
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 258              		.loc 3 210 1
 259              		.thumb
 260              		.syntax unified
 261 0012 00BF     		nop
 262              	.LBE7:
 263              	.LBE6:
 300:Inc/mc_math.h ****   uint32_t temp_val;
 301:Inc/mc_math.h ****   __disable_irq();
 302:Inc/mc_math.h ****   /* Configure and call to CORDIC- */
 303:Inc/mc_math.h ****   WRITE_REG(CORDIC->CSR,CORDIC_CONFIG_MODULUS);
 264              		.loc 2 303 3
 265 0014 114B     		ldr	r3, .L11
 266 0016 124A     		ldr	r2, .L11+4
 267 0018 1A60     		str	r2, [r3]
 304:Inc/mc_math.h ****   LL_CORDIC_WriteData(CORDIC, (((uint32_t)beta << 16U) | (((uint32_t)alpha) & 0x0000FFFFU)));
 268              		.loc 2 304 33
 269 001a B7F90430 		ldrsh	r3, [r7, #4]
 270              		.loc 2 304 48
 271 001e 1A04     		lsls	r2, r3, #16
 272              		.loc 2 304 60
 273 0020 B7F90630 		ldrsh	r3, [r7, #6]
 274              		.loc 2 304 77
 275 0024 9BB2     		uxth	r3, r3
 276              		.loc 2 304 3
 277 0026 1343     		orrs	r3, r3, r2
 278 0028 1946     		mov	r1, r3
 279 002a 0C48     		ldr	r0, .L11
 280 002c FFF7FEFF 		bl	LL_CORDIC_WriteData
 305:Inc/mc_math.h ****   /* Wait for result */
 306:Inc/mc_math.h ****   while(LL_CORDIC_IsActiveFlag_RRDY(CORDIC) == 0U)
 281              		.loc 2 306 8
 282 0030 00BF     		nop
 283              	.L9:
 284              		.loc 2 306 9 discriminator 1
 285 0032 0A48     		ldr	r0, .L11
 286 0034 FFF7FEFF 		bl	LL_CORDIC_IsActiveFlag_RRDY
 287 0038 0346     		mov	r3, r0
ARM GAS  /tmp/ccLmOb0L.s 			page 28


 288              		.loc 2 306 8 discriminator 1
 289 003a 002B     		cmp	r3, #0
 290 003c F9D0     		beq	.L9
 307:Inc/mc_math.h ****   {
 308:Inc/mc_math.h ****     /* Nothing to do */
 309:Inc/mc_math.h ****   }
 310:Inc/mc_math.h ****   /* Read computed modulus */
 311:Inc/mc_math.h ****   temp_val = ((LL_CORDIC_ReadData(CORDIC) << 16U) >> 16U); /* Avoid Over/underflow when cast to int
 291              		.loc 2 311 16
 292 003e 0748     		ldr	r0, .L11
 293 0040 FFF7FEFF 		bl	LL_CORDIC_ReadData
 294 0044 0346     		mov	r3, r0
 295              		.loc 2 311 12
 296 0046 9BB2     		uxth	r3, r3
 297 0048 FB60     		str	r3, [r7, #12]
 298              	.LBB8:
 299              	.LBB9:
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 300              		.loc 3 198 3
 301              		.syntax unified
 302              	@ 198 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 303 004a 62B6     		cpsie i
 304              	@ 0 "" 2
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305              		.loc 3 199 1
 306              		.thumb
 307              		.syntax unified
 308 004c 00BF     		nop
 309              	.LBE9:
 310              	.LBE8:
 312:Inc/mc_math.h ****   __enable_irq();
 313:Inc/mc_math.h ****   return ((int16_t)temp_val);
 311              		.loc 2 313 11
 312 004e FB68     		ldr	r3, [r7, #12]
 313 0050 1BB2     		sxth	r3, r3
 314:Inc/mc_math.h **** 
 315:Inc/mc_math.h **** }
 314              		.loc 2 315 1
 315 0052 1846     		mov	r0, r3
 316 0054 1037     		adds	r7, r7, #16
 317              	.LCFI21:
 318              		.cfi_def_cfa_offset 8
 319 0056 BD46     		mov	sp, r7
 320              	.LCFI22:
 321              		.cfi_def_cfa_register 13
 322              		@ sp needed
 323 0058 80BD     		pop	{r7, pc}
 324              	.L12:
 325 005a 00BF     		.align	2
 326              	.L11:
 327 005c 000C0240 		.word	1073875968
 328 0060 63006000 		.word	6291555
 329              		.cfi_endproc
 330              	.LFE1438:
 332              		.section	.text.PWMC_RecalcT1T2_OVM,"ax",%progbits
 333              		.align	1
 334              		.syntax unified
ARM GAS  /tmp/ccLmOb0L.s 			page 29


 335              		.thumb
 336              		.thumb_func
 337              		.fpu fpv4-sp-d16
 339              	PWMC_RecalcT1T2_OVM:
 340              	.LFB1440:
 341              		.file 4 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c"
   1:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** /**
   2:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   ******************************************************************************
   3:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * @file    pwm_curr_fdbk_ovm.c
   4:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * @author  Motor Control SDK Team, ST Microelectronics
   5:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * @brief   This file provides firmware functions that implement the following features
   6:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   *          of the PWM & Current Feedback component of the Motor Control SDK:
   7:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   *
   8:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   *           * current sensing
   9:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   *           * regular ADC conversion execution
  10:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   *           * space vector modulation
  11:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   *
  12:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   ******************************************************************************
  13:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * @attention
  14:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   *
  15:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  16:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * All rights reserved.</center></h2>
  17:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   *
  18:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * This software component is licensed by ST under Ultimate Liberty license
  19:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  20:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * the License. You may obtain a copy of the License at:
  21:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   *                             www.st.com/SLA0044
  22:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   *
  23:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   ******************************************************************************
  24:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * @ingroup pwm_curr_fdbk
  25:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   */
  26:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
  27:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** /* Includes ------------------------------------------------------------------*/
  28:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #include "pwm_curr_fdbk.h"
  29:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #include "mc_math.h"
  30:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #include "mc_type.h"
  31:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
  32:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
  33:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
  34:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** /* Private defines ------------------------------------------------------------*/
  35:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
  36:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** /* @brief The float number 1.0 equal to 32768 ; represents the vector from center to an angle of th
  37:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #define    OVM_ONE_POINT_ZERO     ((int32_t)32768)
  38:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #define    OVM_GAIN_ARRAY_SIZE    ((int32_t)192)
  39:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #define    OVM_GAMMA_ARRAY_SIZE   ((int32_t)100)
  40:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #define    OVM_GAMMA_ARRAY_OFFSET ((int32_t)92)
  41:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #define    OVM_VREF_MODE1_START   ((int32_t)29717)
  42:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #define    OVM_VREF_MODE2_START   ((int32_t)31186)
  43:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #define    OVM_VREF_MODE2_END     ((int32_t)32768)
  44:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #define    OVM_VREF_INDEX_STEP    ((int32_t)16)
  45:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #define    OVM_1_DIV_SQRT3        ((int32_t)18919)
  46:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #define    OVM_1_DIV_PI           ((int32_t)10430)
  47:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #define    OVM_PI_DIV_6           ((int32_t)17157)
  48:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #define    OVM_3_DIV_PI           ((int32_t)31291)
  49:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #define    OVM_SQRT3              ((int32_t)56754)
  50:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
  51:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** /** @addtogroup MCSDK
ARM GAS  /tmp/ccLmOb0L.s 			page 30


  52:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * @{
  53:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   */
  54:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
  55:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** /** @addtogroup pwm_curr_fdbk 
  56:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * 
  57:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * @{
  58:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   */
  59:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
  60:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** /* Private variables ----------------------------------------------------------*/
  61:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
  62:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** /**
  63:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****  * @brief Vector modules T1 and T2. Specified in @ref overmodulation.md 
  64:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****  */
  65:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** typedef struct
  66:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** {
  67:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   int32_t T1;
  68:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   int32_t T2;
  69:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** } Vector_Time_t;
  70:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
  71:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** /**
  72:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****  * @brief Overmodulation modes. Specified in @ref overmodulation.md
  73:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****  */
  74:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** typedef enum
  75:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** {
  76:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   OVM_LINEAR = 0,   /**< Linear mode. */
  77:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   OVM_1 = 1,        /**< Overmodulation mode 1. */
  78:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   OVM_2 = 2,        /**< Overmodulation mode 2. */
  79:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   OVM_ERROR = 3     /**< Error output. */
  80:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** } OVM_Mode_t;
  81:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
  82:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** /**
  83:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * @}
  84:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   */
  85:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
  86:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** /**
  87:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * @}
  88:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   */
  89:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****  
  90:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** /* Private function prototypes -----------------------------------------------*/
  91:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** static Vector_Time_t PWMC_RecalcT1T2_OVM(Vector_Time_t time, OVM_Mode_t mode, int16_t gamma);
  92:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
  93:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
  94:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #if defined (CCMRAM)
  95:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #if defined (__ICCARM__)
  96:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #pragma location = ".ccmram"
  97:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #elif defined (__CC_ARM) || defined(__GNUC__)
  98:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** __attribute__((section(".ccmram")))
  99:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #endif
 100:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #endif
 101:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****  /*
 102:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * @brief Recalculates vectors T1 and T2 stored in @p time structure,
 103:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   *        depending on the overmodulation @p mode and @p gamma gain. 
 104:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * 
 105:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * @retval New values of T1 & T2.
 106:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   */
 107:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** static Vector_Time_t PWMC_RecalcT1T2_OVM(Vector_Time_t time, OVM_Mode_t mode, int16_t gamma)
 108:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** {
ARM GAS  /tmp/ccLmOb0L.s 			page 31


 342              		.loc 4 108 1
 343              		.cfi_startproc
 344              		@ args = 4, pretend = 0, frame = 40
 345              		@ frame_needed = 1, uses_anonymous_args = 0
 346              		@ link register save eliminated.
 347 0000 80B4     		push	{r7}
 348              	.LCFI23:
 349              		.cfi_def_cfa_offset 4
 350              		.cfi_offset 7, -4
 351 0002 8BB0     		sub	sp, sp, #44
 352              	.LCFI24:
 353              		.cfi_def_cfa_offset 48
 354 0004 00AF     		add	r7, sp, #0
 355              	.LCFI25:
 356              		.cfi_def_cfa_register 7
 357 0006 F860     		str	r0, [r7, #12]
 358 0008 381D     		adds	r0, r7, #4
 359 000a 80E80600 		stm	r0, {r1, r2}
 360 000e FB70     		strb	r3, [r7, #3]
 109:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   int32_t sum_t1_t2;
 110:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   int32_t offset;
 111:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   int32_t gain;
 112:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   int32_t t1_temp;
 113:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   Vector_Time_t time_prime;
 114:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
 115:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   time_prime.T1 = 0;
 361              		.loc 4 115 17
 362 0010 0023     		movs	r3, #0
 363 0012 3B61     		str	r3, [r7, #16]
 116:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   time_prime.T2 = 0;
 364              		.loc 4 116 17
 365 0014 0023     		movs	r3, #0
 366 0016 7B61     		str	r3, [r7, #20]
 117:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
 118:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   if ((OVM_LINEAR == mode) || (OVM_1 == mode))
 367              		.loc 4 118 6
 368 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 369 001a 002B     		cmp	r3, #0
 370 001c 02D0     		beq	.L14
 371              		.loc 4 118 28 discriminator 1
 372 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 373 0020 012B     		cmp	r3, #1
 374 0022 17D1     		bne	.L15
 375              	.L14:
 119:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   {
 120:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     sum_t1_t2 = time.T1 + time.T2;
 376              		.loc 4 120 21
 377 0024 7A68     		ldr	r2, [r7, #4]
 378              		.loc 4 120 31
 379 0026 BB68     		ldr	r3, [r7, #8]
 380              		.loc 4 120 15
 381 0028 1344     		add	r3, r3, r2
 382 002a BB61     		str	r3, [r7, #24]
 121:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
 122:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     if (sum_t1_t2 > OVM_ONE_POINT_ZERO)
 383              		.loc 4 122 8
 384 002c BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/ccLmOb0L.s 			page 32


 385 002e B3F5004F 		cmp	r3, #32768
 386 0032 0ADD     		ble	.L16
 123:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     {
 124:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       time_prime.T1 = ((time.T1 * OVM_ONE_POINT_ZERO) / sum_t1_t2);
 387              		.loc 4 124 29
 388 0034 7B68     		ldr	r3, [r7, #4]
 389              		.loc 4 124 33
 390 0036 DA03     		lsls	r2, r3, #15
 391              		.loc 4 124 55
 392 0038 BB69     		ldr	r3, [r7, #24]
 393 003a 92FBF3F3 		sdiv	r3, r2, r3
 394              		.loc 4 124 21
 395 003e 3B61     		str	r3, [r7, #16]
 125:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       time_prime.T2 = OVM_ONE_POINT_ZERO - time_prime.T1;
 396              		.loc 4 125 54
 397 0040 3B69     		ldr	r3, [r7, #16]
 398              		.loc 4 125 42
 399 0042 C3F50043 		rsb	r3, r3, #32768
 400              		.loc 4 125 21
 401 0046 7B61     		str	r3, [r7, #20]
 122:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     {
 402              		.loc 4 122 8
 403 0048 78E0     		b	.L18
 404              	.L16:
 126:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     }
 127:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     else
 128:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     {
 129:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       time_prime.T1 = time.T1;
 405              		.loc 4 129 27
 406 004a 7B68     		ldr	r3, [r7, #4]
 407              		.loc 4 129 21
 408 004c 3B61     		str	r3, [r7, #16]
 130:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       time_prime.T2 = time.T2;
 409              		.loc 4 130 27
 410 004e BB68     		ldr	r3, [r7, #8]
 411              		.loc 4 130 21
 412 0050 7B61     		str	r3, [r7, #20]
 122:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     {
 413              		.loc 4 122 8
 414 0052 73E0     		b	.L18
 415              	.L15:
 131:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     }
 132:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   }
 133:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   else if (OVM_2 == mode)
 416              		.loc 4 133 11
 417 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 418 0056 022B     		cmp	r3, #2
 419 0058 6CD1     		bne	.L19
 134:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   {
 135:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     if (time.T1 > OVM_ONE_POINT_ZERO)
 420              		.loc 4 135 13
 421 005a 7B68     		ldr	r3, [r7, #4]
 422              		.loc 4 135 8
 423 005c B3F5004F 		cmp	r3, #32768
 424 0060 05DD     		ble	.L20
 136:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     {
 137:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       time_prime.T1 = OVM_ONE_POINT_ZERO;
ARM GAS  /tmp/ccLmOb0L.s 			page 33


 425              		.loc 4 137 21
 426 0062 4FF40043 		mov	r3, #32768
 427 0066 3B61     		str	r3, [r7, #16]
 138:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       time_prime.T2 = 0;
 428              		.loc 4 138 21
 429 0068 0023     		movs	r3, #0
 430 006a 7B61     		str	r3, [r7, #20]
 431 006c 66E0     		b	.L18
 432              	.L20:
 139:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     }
 140:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     else if (time.T2 > OVM_ONE_POINT_ZERO)
 433              		.loc 4 140 18
 434 006e BB68     		ldr	r3, [r7, #8]
 435              		.loc 4 140 13
 436 0070 B3F5004F 		cmp	r3, #32768
 437 0074 05DD     		ble	.L21
 141:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     {
 142:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       time_prime.T1 = 0;
 438              		.loc 4 142 21
 439 0076 0023     		movs	r3, #0
 440 0078 3B61     		str	r3, [r7, #16]
 143:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       time_prime.T2 = OVM_ONE_POINT_ZERO;
 441              		.loc 4 143 21
 442 007a 4FF40043 		mov	r3, #32768
 443 007e 7B61     		str	r3, [r7, #20]
 444 0080 5CE0     		b	.L18
 445              	.L21:
 144:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     }
 145:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     else
 146:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     {
 147:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       offset = (OVM_3_DIV_PI * gamma) / OVM_ONE_POINT_ZERO;
 446              		.loc 4 147 30
 447 0082 B7F93030 		ldrsh	r3, [r7, #48]
 448 0086 47F63B22 		movw	r2, #31291
 449 008a 02FB03F3 		mul	r3, r2, r3
 450              		.loc 4 147 14
 451 008e 002B     		cmp	r3, #0
 452 0090 02DA     		bge	.L22
 453 0092 03F5FF43 		add	r3, r3, #32640
 454 0096 7F33     		adds	r3, r3, #127
 455              	.L22:
 456 0098 DB13     		asrs	r3, r3, #15
 457 009a 3B62     		str	r3, [r7, #32]
 148:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       gain = (OVM_PI_DIV_6 * OVM_ONE_POINT_ZERO) / (OVM_PI_DIV_6 - gamma);
 458              		.loc 4 148 66
 459 009c B7F93030 		ldrsh	r3, [r7, #48]
 460 00a0 C3F58643 		rsb	r3, r3, #17152
 461 00a4 0533     		adds	r3, r3, #5
 462              		.loc 4 148 12
 463 00a6 2C4A     		ldr	r2, .L32
 464 00a8 92FBF3F3 		sdiv	r3, r2, r3
 465 00ac FB61     		str	r3, [r7, #28]
 149:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
 150:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       sum_t1_t2 = time.T1 + time.T2;
 466              		.loc 4 150 23
 467 00ae 7A68     		ldr	r2, [r7, #4]
 468              		.loc 4 150 33
ARM GAS  /tmp/ccLmOb0L.s 			page 34


 469 00b0 BB68     		ldr	r3, [r7, #8]
 470              		.loc 4 150 17
 471 00b2 1344     		add	r3, r3, r2
 472 00b4 BB61     		str	r3, [r7, #24]
 151:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       sum_t1_t2 = ((0 == sum_t1_t2) ? 1 : sum_t1_t2);
 473              		.loc 4 151 41
 474 00b6 BB69     		ldr	r3, [r7, #24]
 475 00b8 002B     		cmp	r3, #0
 476 00ba 01D0     		beq	.L23
 477              		.loc 4 151 41 is_stmt 0 discriminator 1
 478 00bc BB69     		ldr	r3, [r7, #24]
 479 00be 00E0     		b	.L24
 480              	.L23:
 481              		.loc 4 151 41 discriminator 2
 482 00c0 0123     		movs	r3, #1
 483              	.L24:
 484              		.loc 4 151 17 is_stmt 1 discriminator 4
 485 00c2 BB61     		str	r3, [r7, #24]
 152:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       t1_temp = (time.T1 * OVM_ONE_POINT_ZERO) / sum_t1_t2;
 486              		.loc 4 152 22 discriminator 4
 487 00c4 7B68     		ldr	r3, [r7, #4]
 488              		.loc 4 152 26 discriminator 4
 489 00c6 DA03     		lsls	r2, r3, #15
 490              		.loc 4 152 15 discriminator 4
 491 00c8 BB69     		ldr	r3, [r7, #24]
 492 00ca 92FBF3F3 		sdiv	r3, r2, r3
 493 00ce 7B62     		str	r3, [r7, #36]
 153:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       t1_temp = t1_temp - offset;
 494              		.loc 4 153 15 discriminator 4
 495 00d0 7A6A     		ldr	r2, [r7, #36]
 496 00d2 3B6A     		ldr	r3, [r7, #32]
 497 00d4 D31A     		subs	r3, r2, r3
 498 00d6 7B62     		str	r3, [r7, #36]
 154:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       if (t1_temp < 0)
 499              		.loc 4 154 10 discriminator 4
 500 00d8 7B6A     		ldr	r3, [r7, #36]
 501 00da 002B     		cmp	r3, #0
 502 00dc 01DA     		bge	.L25
 155:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       {
 156:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         t1_temp = 0;
 503              		.loc 4 156 17
 504 00de 0023     		movs	r3, #0
 505 00e0 7B62     		str	r3, [r7, #36]
 506              	.L25:
 157:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       }
 158:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       else
 159:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       {
 160:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         /* Nothing to do */
 161:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       }
 162:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       if (gain > OVM_ONE_POINT_ZERO)
 507              		.loc 4 162 10
 508 00e2 FB69     		ldr	r3, [r7, #28]
 509 00e4 B3F5004F 		cmp	r3, #32768
 510 00e8 0DDD     		ble	.L26
 163:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       {
 164:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         gain = gain / OVM_ONE_POINT_ZERO;
 511              		.loc 4 164 14
ARM GAS  /tmp/ccLmOb0L.s 			page 35


 512 00ea FB69     		ldr	r3, [r7, #28]
 513 00ec 002B     		cmp	r3, #0
 514 00ee 02DA     		bge	.L27
 515 00f0 03F5FF43 		add	r3, r3, #32640
 516 00f4 7F33     		adds	r3, r3, #127
 517              	.L27:
 518 00f6 DB13     		asrs	r3, r3, #15
 519 00f8 FB61     		str	r3, [r7, #28]
 165:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         time_prime.T1 = t1_temp * gain;
 520              		.loc 4 165 33
 521 00fa 7B6A     		ldr	r3, [r7, #36]
 522 00fc FA69     		ldr	r2, [r7, #28]
 523 00fe 02FB03F3 		mul	r3, r2, r3
 524              		.loc 4 165 23
 525 0102 3B61     		str	r3, [r7, #16]
 526 0104 0AE0     		b	.L28
 527              	.L26:
 166:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       }
 167:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       else
 168:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       {
 169:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         time_prime.T1 = (t1_temp * gain) / OVM_ONE_POINT_ZERO;
 528              		.loc 4 169 34
 529 0106 7B6A     		ldr	r3, [r7, #36]
 530 0108 FA69     		ldr	r2, [r7, #28]
 531 010a 02FB03F3 		mul	r3, r2, r3
 532              		.loc 4 169 42
 533 010e 002B     		cmp	r3, #0
 534 0110 02DA     		bge	.L29
 535 0112 03F5FF43 		add	r3, r3, #32640
 536 0116 7F33     		adds	r3, r3, #127
 537              	.L29:
 538 0118 DB13     		asrs	r3, r3, #15
 539              		.loc 4 169 23
 540 011a 3B61     		str	r3, [r7, #16]
 541              	.L28:
 170:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       }
 171:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       if (time_prime.T1 > OVM_ONE_POINT_ZERO)
 542              		.loc 4 171 21
 543 011c 3B69     		ldr	r3, [r7, #16]
 544              		.loc 4 171 10
 545 011e B3F5004F 		cmp	r3, #32768
 546 0122 02DD     		ble	.L30
 172:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       {
 173:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         time_prime.T1 = OVM_ONE_POINT_ZERO;
 547              		.loc 4 173 23
 548 0124 4FF40043 		mov	r3, #32768
 549 0128 3B61     		str	r3, [r7, #16]
 550              	.L30:
 174:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       }
 175:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       else
 176:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       {
 177:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         /* Nothing to do */
 178:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       }
 179:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       time_prime.T2 = OVM_ONE_POINT_ZERO - time_prime.T1;
 551              		.loc 4 179 54
 552 012a 3B69     		ldr	r3, [r7, #16]
 553              		.loc 4 179 42
ARM GAS  /tmp/ccLmOb0L.s 			page 36


 554 012c C3F50043 		rsb	r3, r3, #32768
 555              		.loc 4 179 21
 556 0130 7B61     		str	r3, [r7, #20]
 557 0132 03E0     		b	.L18
 558              	.L19:
 180:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     }
 181:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   }
 182:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   else  /* Error mode output 0 to protect */
 183:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   {
 184:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     time_prime.T1 = 0;
 559              		.loc 4 184 19
 560 0134 0023     		movs	r3, #0
 561 0136 3B61     		str	r3, [r7, #16]
 185:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     time_prime.T2 = 0;
 562              		.loc 4 185 19
 563 0138 0023     		movs	r3, #0
 564 013a 7B61     		str	r3, [r7, #20]
 565              	.L18:
 186:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   }
 187:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   return (time_prime);
 566              		.loc 4 187 10
 567 013c FB68     		ldr	r3, [r7, #12]
 568 013e 1A46     		mov	r2, r3
 569 0140 07F11003 		add	r3, r7, #16
 570 0144 93E80300 		ldm	r3, {r0, r1}
 571 0148 82E80300 		stm	r2, {r0, r1}
 188:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** }
 572              		.loc 4 188 1
 573 014c F868     		ldr	r0, [r7, #12]
 574 014e 2C37     		adds	r7, r7, #44
 575              	.LCFI26:
 576              		.cfi_def_cfa_offset 4
 577 0150 BD46     		mov	sp, r7
 578              	.LCFI27:
 579              		.cfi_def_cfa_register 13
 580              		@ sp needed
 581 0152 5DF8047B 		ldr	r7, [sp], #4
 582              	.LCFI28:
 583              		.cfi_restore 7
 584              		.cfi_def_cfa_offset 0
 585 0156 7047     		bx	lr
 586              	.L33:
 587              		.align	2
 588              	.L32:
 589 0158 00808221 		.word	562200576
 590              		.cfi_endproc
 591              	.LFE1440:
 593              		.section	.text.PWMC_SetPhaseVoltage_OVM,"ax",%progbits
 594              		.align	1
 595              		.global	PWMC_SetPhaseVoltage_OVM
 596              		.syntax unified
 597              		.thumb
 598              		.thumb_func
 599              		.fpu fpv4-sp-d16
 601              	PWMC_SetPhaseVoltage_OVM:
 602              	.LFB1441:
 189:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
ARM GAS  /tmp/ccLmOb0L.s 			page 37


 190:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** /** @addtogroup MCSDK
 191:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * @{
 192:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   */
 193:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
 194:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** /** @addtogroup pwm_curr_fdbk 
 195:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * 
 196:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * @{
 197:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   */
 198:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
 199:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #if defined (CCMRAM)
 200:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #if defined (__ICCARM__)
 201:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #pragma location = ".ccmram"
 202:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #elif defined (__CC_ARM) || defined(__GNUC__)
 203:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** __attribute__((section(".ccmram")))
 204:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #endif
 205:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #endif
 206:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** /**
 207:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * @brief  Converts input voltage components @f$ V_{\alpha} @f$ and @f$ V_{\beta} @f$ into duty cy
 208:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   *         and feeds them to the inverter with overmodulation function.
 209:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * 
 210:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * @param  pHandle: Handler of the current instance of the PWM component.
 211:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
 212:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
 213:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   *         set too late for being taken into account in the next PWM cycle.
 214:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   */
 215:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** uint16_t PWMC_SetPhaseVoltage_OVM(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
 216:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** {
 603              		.loc 4 216 1
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 88
 606              		@ frame_needed = 1, uses_anonymous_args = 0
 607 0000 80B5     		push	{r7, lr}
 608              	.LCFI29:
 609              		.cfi_def_cfa_offset 8
 610              		.cfi_offset 7, -8
 611              		.cfi_offset 14, -4
 612 0002 98B0     		sub	sp, sp, #96
 613              	.LCFI30:
 614              		.cfi_def_cfa_offset 104
 615 0004 02AF     		add	r7, sp, #8
 616              	.LCFI31:
 617              		.cfi_def_cfa 7, 96
 618 0006 F860     		str	r0, [r7, #12]
 619 0008 B960     		str	r1, [r7, #8]
 217:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   /* Private variables ----------------------------------------------------------*/
 218:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   /* Overmodulation gain array */
 219:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   static const uint16_t aOVMGain[OVM_GAIN_ARRAY_SIZE]={\
 220:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   31291,31291,31293,31295,31298,31300,31302,31306,31309,31314,\
 221:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   31319,31322,31328,31334,31338,31344,31350,31357,31364,31371,\
 222:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   31379,31386,31394,31402,31410,31419,31427,31439,31448,31457,\
 223:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   31470,31479,31492,31502,31515,31526,31539,31554,31568,31579,\
 224:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   31594,31609,31624,31639,31655,31675,31691,31707,31728,31745,\
 225:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   31766,31783,31805,31827,31845,31868,31891,31914,31942,31966,\
 226:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   31990,32019,32044,32074,32104,32134,32165,32202,32233,32271,\
 227:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   32303,32341,32386,32425,32470,32516,32562,32609,32662,32716,\
 228:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   32777,32838,32907,32982,33059,33144,33236,33343,33466,33612,\
 229:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   33797,34106,34463,34507,34551,34596,34640,34684,34729,34779,\
ARM GAS  /tmp/ccLmOb0L.s 			page 38


 230:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   34824,34869,34920,34971,35017,35068,35120,35178,35230,35282,\
 231:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   35340,35392,35451,35509,35568,35627,35686,35752,35811,35877,\
 232:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   35943,36009,36075,36148,36214,36287,36360,36434,36507,36581,\
 233:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   36661,36742,36822,36903,36990,37078,37159,37253,37342,37436,\
 234:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   37531,37627,37729,37831,37933,38042,38152,38261,38378,38495,\
 235:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   38612,38736,38860,38991,39122,39261,39399,39545,39691,39844,\
 236:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   40004,40165,40332,40507,40682,40871,41061,41264,41469,41680,\
 237:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   41906,42139,42387,42649,42911,43188,43488,43801,44137,44487,\
 238:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   44866,45275,45713,46195,46715,47300,47958,48720,49629,50759,\
 239:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   52346,56660,\
 240:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   };
 241:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
 242:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   /* Overmodulation gamma array */
 243:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   static const int16_t aOVMGamma[OVM_GAMMA_ARRAY_SIZE]={\
 244:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   52,154,255,354,453,551,648,757,852,947,\
 245:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   1052,1157,1249,1352,1454,1566,1666,1765,1875,1972,\
 246:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   2079,2186,2291,2395,2499,2612,2713,2824,2934,3042,\
 247:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   3150,3266,3372,3486,3599,3711,3821,3931,4049,4166,\
 248:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   4281,4395,4517,4637,4748,4875,4992,5115,5238,5359,\
 249:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   5487,5614,5739,5870,6000,6129,6263,6396,6528,6665,\
 250:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   6800,6941,7080,7224,7367,7514,7659,7809,7963,8115,\
 251:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   8272,8432,8590,8757,8922,9096,9268,9442,9624,9809,\
 252:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   10001,10200,10395,10597,10810,11028,11255,11487,11731,11987,\
 253:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   12254,12539,12835,13158,13507,13895,14335,14853,15530,17125,\
 254:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   };
 255:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
 256:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   uint16_t retvalue;
 257:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #ifdef NULL_PTR_CHECK_PWM_CUR_FDB_OVM
 258:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   if (NULL == pHandle)
 259:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   {
 260:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     retvalue = 0U;
 261:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   }
 262:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   else
 263:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   {
 264:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #endif
 265:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     int32_t wX;
 266:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     int32_t wY;
 267:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     int32_t wZ;
 268:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     int32_t wUAlpha;
 269:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     int32_t wUBeta;
 270:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     int32_t vref;
 271:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     int32_t gain;
 272:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     int32_t neg_beta_cmd_div_sqrt3;
 273:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     int32_t duty_a;
 274:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     int32_t duty_b;
 275:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     int32_t duty_c;
 276:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     int32_t gama = 0;
 620              		.loc 4 276 13
 621 000a 0023     		movs	r3, #0
 622 000c 3B64     		str	r3, [r7, #64]
 277:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     int16_t index;
 278:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
 279:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     OVM_Mode_t ovm_mode_flag;
 280:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     Vector_Time_t vector_time;
 281:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
 282:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     /* Transfer vref to vcmd */
 283:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     vref = (int32_t)MCM_Modulus( Valfa_beta.alpha, Valfa_beta.beta );
ARM GAS  /tmp/ccLmOb0L.s 			page 39


 623              		.loc 4 283 21
 624 000e B7F90830 		ldrsh	r3, [r7, #8]
 625 0012 B7F90A20 		ldrsh	r2, [r7, #10]
 626 0016 1146     		mov	r1, r2
 627 0018 1846     		mov	r0, r3
 628 001a FFF7FEFF 		bl	MCM_Modulus
 629 001e 0346     		mov	r3, r0
 630              		.loc 4 283 10
 631 0020 BB63     		str	r3, [r7, #56]
 284:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
 285:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     if (vref < OVM_VREF_MODE1_START)      /* Linear range */
 632              		.loc 4 285 8
 633 0022 BB6B     		ldr	r3, [r7, #56]
 634 0024 47F21442 		movw	r2, #29716
 635 0028 9342     		cmp	r3, r2
 636 002a 09DC     		bgt	.L35
 286:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     {
 287:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       wUAlpha = Valfa_beta.alpha;
 637              		.loc 4 287 27
 638 002c B7F90830 		ldrsh	r3, [r7, #8]
 639              		.loc 4 287 15
 640 0030 7B65     		str	r3, [r7, #84]
 288:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       wUBeta = Valfa_beta.beta;
 641              		.loc 4 288 26
 642 0032 B7F90A30 		ldrsh	r3, [r7, #10]
 643              		.loc 4 288 14
 644 0036 3B65     		str	r3, [r7, #80]
 289:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       ovm_mode_flag = OVM_LINEAR;
 645              		.loc 4 289 21
 646 0038 0023     		movs	r3, #0
 647 003a 87F83F30 		strb	r3, [r7, #63]
 648 003e 79E0     		b	.L36
 649              	.L35:
 290:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     }
 291:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     else if (vref < OVM_VREF_MODE2_START) /* OVM mode 1 range */
 650              		.loc 4 291 13
 651 0040 BB6B     		ldr	r3, [r7, #56]
 652 0042 47F6D112 		movw	r2, #31185
 653 0046 9342     		cmp	r3, r2
 654 0048 2CDC     		bgt	.L37
 292:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     {
 293:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       index = (int16_t)((vref - OVM_VREF_MODE1_START) / OVM_VREF_INDEX_STEP);
 655              		.loc 4 293 31
 656 004a BB6B     		ldr	r3, [r7, #56]
 657 004c A3F5E843 		sub	r3, r3, #29696
 658 0050 153B     		subs	r3, r3, #21
 659              		.loc 4 293 55
 660 0052 002B     		cmp	r3, #0
 661 0054 00DA     		bge	.L38
 662 0056 0F33     		adds	r3, r3, #15
 663              	.L38:
 664 0058 1B11     		asrs	r3, r3, #4
 665              		.loc 4 293 13
 666 005a FB86     		strh	r3, [r7, #54]	@ movhi
 294:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       gain = (int32_t)aOVMGain[index];
 667              		.loc 4 294 31
 668 005c B7F93630 		ldrsh	r3, [r7, #54]
ARM GAS  /tmp/ccLmOb0L.s 			page 40


 669 0060 A54A     		ldr	r2, .L55
 670 0062 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 671              		.loc 4 294 12
 672 0066 3B63     		str	r3, [r7, #48]
 295:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       wUAlpha = (Valfa_beta.alpha * gain) / OVM_ONE_POINT_ZERO;
 673              		.loc 4 295 28
 674 0068 B7F90830 		ldrsh	r3, [r7, #8]
 675 006c 1A46     		mov	r2, r3
 676              		.loc 4 295 35
 677 006e 3B6B     		ldr	r3, [r7, #48]
 678 0070 02FB03F3 		mul	r3, r2, r3
 679              		.loc 4 295 15
 680 0074 002B     		cmp	r3, #0
 681 0076 02DA     		bge	.L39
 682 0078 03F5FF43 		add	r3, r3, #32640
 683 007c 7F33     		adds	r3, r3, #127
 684              	.L39:
 685 007e DB13     		asrs	r3, r3, #15
 686 0080 7B65     		str	r3, [r7, #84]
 296:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       wUBeta = (Valfa_beta.beta * gain) / OVM_ONE_POINT_ZERO;
 687              		.loc 4 296 27
 688 0082 B7F90A30 		ldrsh	r3, [r7, #10]
 689 0086 1A46     		mov	r2, r3
 690              		.loc 4 296 33
 691 0088 3B6B     		ldr	r3, [r7, #48]
 692 008a 02FB03F3 		mul	r3, r2, r3
 693              		.loc 4 296 14
 694 008e 002B     		cmp	r3, #0
 695 0090 02DA     		bge	.L40
 696 0092 03F5FF43 		add	r3, r3, #32640
 697 0096 7F33     		adds	r3, r3, #127
 698              	.L40:
 699 0098 DB13     		asrs	r3, r3, #15
 700 009a 3B65     		str	r3, [r7, #80]
 297:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       ovm_mode_flag = OVM_1;
 701              		.loc 4 297 21
 702 009c 0123     		movs	r3, #1
 703 009e 87F83F30 		strb	r3, [r7, #63]
 704 00a2 47E0     		b	.L36
 705              	.L37:
 298:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     }
 299:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     else if (vref < OVM_VREF_MODE2_END)  /* OVM mode 2 range */
 706              		.loc 4 299 13
 707 00a4 BB6B     		ldr	r3, [r7, #56]
 708 00a6 B3F5004F 		cmp	r3, #32768
 709 00aa 3CDA     		bge	.L41
 300:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     {
 301:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       index = (int16_t)((vref - OVM_VREF_MODE1_START) / OVM_VREF_INDEX_STEP);
 710              		.loc 4 301 31
 711 00ac BB6B     		ldr	r3, [r7, #56]
 712 00ae A3F5E843 		sub	r3, r3, #29696
 713 00b2 153B     		subs	r3, r3, #21
 714              		.loc 4 301 55
 715 00b4 002B     		cmp	r3, #0
 716 00b6 00DA     		bge	.L42
 717 00b8 0F33     		adds	r3, r3, #15
 718              	.L42:
ARM GAS  /tmp/ccLmOb0L.s 			page 41


 719 00ba 1B11     		asrs	r3, r3, #4
 720              		.loc 4 301 13
 721 00bc FB86     		strh	r3, [r7, #54]	@ movhi
 302:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       gain = (int32_t)aOVMGain[index];
 722              		.loc 4 302 31
 723 00be B7F93630 		ldrsh	r3, [r7, #54]
 724 00c2 8D4A     		ldr	r2, .L55
 725 00c4 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 726              		.loc 4 302 12
 727 00c8 3B63     		str	r3, [r7, #48]
 303:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       wUAlpha = (Valfa_beta.alpha * gain) / OVM_ONE_POINT_ZERO;
 728              		.loc 4 303 28
 729 00ca B7F90830 		ldrsh	r3, [r7, #8]
 730 00ce 1A46     		mov	r2, r3
 731              		.loc 4 303 35
 732 00d0 3B6B     		ldr	r3, [r7, #48]
 733 00d2 02FB03F3 		mul	r3, r2, r3
 734              		.loc 4 303 15
 735 00d6 002B     		cmp	r3, #0
 736 00d8 02DA     		bge	.L43
 737 00da 03F5FF43 		add	r3, r3, #32640
 738 00de 7F33     		adds	r3, r3, #127
 739              	.L43:
 740 00e0 DB13     		asrs	r3, r3, #15
 741 00e2 7B65     		str	r3, [r7, #84]
 304:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       wUBeta = (Valfa_beta.beta * gain) / OVM_ONE_POINT_ZERO;
 742              		.loc 4 304 27
 743 00e4 B7F90A30 		ldrsh	r3, [r7, #10]
 744 00e8 1A46     		mov	r2, r3
 745              		.loc 4 304 33
 746 00ea 3B6B     		ldr	r3, [r7, #48]
 747 00ec 02FB03F3 		mul	r3, r2, r3
 748              		.loc 4 304 14
 749 00f0 002B     		cmp	r3, #0
 750 00f2 02DA     		bge	.L44
 751 00f4 03F5FF43 		add	r3, r3, #32640
 752 00f8 7F33     		adds	r3, r3, #127
 753              	.L44:
 754 00fa DB13     		asrs	r3, r3, #15
 755 00fc 3B65     		str	r3, [r7, #80]
 305:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       if (index > OVM_GAMMA_ARRAY_OFFSET)
 756              		.loc 4 305 10
 757 00fe B7F93630 		ldrsh	r3, [r7, #54]
 758 0102 5C2B     		cmp	r3, #92
 759 0104 07DD     		ble	.L45
 306:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       {
 307:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         gama = aOVMGamma[index - OVM_GAMMA_ARRAY_OFFSET];
 760              		.loc 4 307 32
 761 0106 B7F93630 		ldrsh	r3, [r7, #54]
 762 010a 5C3B     		subs	r3, r3, #92
 763              		.loc 4 307 25
 764 010c 7B4A     		ldr	r2, .L55+4
 765 010e 32F91330 		ldrsh	r3, [r2, r3, lsl #1]
 766              		.loc 4 307 14
 767 0112 3B64     		str	r3, [r7, #64]
 768 0114 03E0     		b	.L46
 769              	.L45:
ARM GAS  /tmp/ccLmOb0L.s 			page 42


 308:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       }
 309:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       else
 310:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       {
 311:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         gama = aOVMGamma[0];
 770              		.loc 4 311 25
 771 0116 794B     		ldr	r3, .L55+4
 772 0118 B3F90030 		ldrsh	r3, [r3]
 773              		.loc 4 311 14
 774 011c 3B64     		str	r3, [r7, #64]
 775              	.L46:
 312:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       }
 313:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       ovm_mode_flag = OVM_2;
 776              		.loc 4 313 21
 777 011e 0223     		movs	r3, #2
 778 0120 87F83F30 		strb	r3, [r7, #63]
 779 0124 06E0     		b	.L36
 780              	.L41:
 314:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     }
 315:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     else      /* Out of OVM mode 2 range only a protection to prevent the code to a undefined branc
 316:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     {
 317:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       wUAlpha = 0;
 781              		.loc 4 317 15
 782 0126 0023     		movs	r3, #0
 783 0128 7B65     		str	r3, [r7, #84]
 318:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       wUBeta = 0;
 784              		.loc 4 318 14
 785 012a 0023     		movs	r3, #0
 786 012c 3B65     		str	r3, [r7, #80]
 319:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       ovm_mode_flag = OVM_ERROR;
 787              		.loc 4 319 21
 788 012e 0323     		movs	r3, #3
 789 0130 87F83F30 		strb	r3, [r7, #63]
 790              	.L36:
 320:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     }
 321:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
 322:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     /* Vcmd to X, Y, Z */
 323:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     neg_beta_cmd_div_sqrt3 = ((-wUBeta) * OVM_1_DIV_SQRT3) / OVM_ONE_POINT_ZERO;
 791              		.loc 4 323 41
 792 0134 3B6D     		ldr	r3, [r7, #80]
 793 0136 724A     		ldr	r2, .L55+8
 794 0138 02FB03F3 		mul	r3, r2, r3
 795              		.loc 4 323 28
 796 013c 002B     		cmp	r3, #0
 797 013e 02DA     		bge	.L47
 798 0140 03F5FF43 		add	r3, r3, #32640
 799 0144 7F33     		adds	r3, r3, #127
 800              	.L47:
 801 0146 DB13     		asrs	r3, r3, #15
 802 0148 FB62     		str	r3, [r7, #44]
 324:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     wX = neg_beta_cmd_div_sqrt3 * 2;           /* x=-(2/sqrt(3))*beta */
 803              		.loc 4 324 8
 804 014a FB6A     		ldr	r3, [r7, #44]
 805 014c 5B00     		lsls	r3, r3, #1
 806 014e BB62     		str	r3, [r7, #40]
 325:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     wY = wUAlpha + neg_beta_cmd_div_sqrt3;     /* x=alpha-(1/sqrt(3))*beta */
 807              		.loc 4 325 8
 808 0150 7A6D     		ldr	r2, [r7, #84]
ARM GAS  /tmp/ccLmOb0L.s 			page 43


 809 0152 FB6A     		ldr	r3, [r7, #44]
 810 0154 1344     		add	r3, r3, r2
 811 0156 7B62     		str	r3, [r7, #36]
 326:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     wZ = -wUAlpha + neg_beta_cmd_div_sqrt3;;   /* x=-alpha-(1/sqrt(3))*beta */
 812              		.loc 4 326 8
 813 0158 FA6A     		ldr	r2, [r7, #44]
 814 015a 7B6D     		ldr	r3, [r7, #84]
 815 015c D31A     		subs	r3, r2, r3
 816 015e 3B62     		str	r3, [r7, #32]
 327:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
 328:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     /* Sector calculation from wX, wY, wZ */
 329:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     if (wY < 0)
 817              		.loc 4 329 8
 818 0160 7B6A     		ldr	r3, [r7, #36]
 819 0162 002B     		cmp	r3, #0
 820 0164 80F23181 		bge	.L48
 330:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     {
 331:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       if (wZ < 0)
 821              		.loc 4 331 10
 822 0168 3B6A     		ldr	r3, [r7, #32]
 823 016a 002B     		cmp	r3, #0
 824 016c 5DDA     		bge	.L49
 332:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       {
 333:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         pHandle->Sector = SECTOR_5;
 825              		.loc 4 333 25
 826 016e FB68     		ldr	r3, [r7, #12]
 827 0170 0422     		movs	r2, #4
 828 0172 83F87A20 		strb	r2, [r3, #122]
 334:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         vector_time.T1 = -wY;
 829              		.loc 4 334 26
 830 0176 7B6A     		ldr	r3, [r7, #36]
 831 0178 5B42     		rsbs	r3, r3, #0
 832              		.loc 4 334 24
 833 017a 7B61     		str	r3, [r7, #20]
 335:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         vector_time.T2 = -wZ;
 834              		.loc 4 335 26
 835 017c 3B6A     		ldr	r3, [r7, #32]
 836 017e 5B42     		rsbs	r3, r3, #0
 837              		.loc 4 335 24
 838 0180 BB61     		str	r3, [r7, #24]
 336:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         vector_time = PWMC_RecalcT1T2_OVM( vector_time, ovm_mode_flag, (int16_t)gama );
 839              		.loc 4 336 23
 840 0182 3B6C     		ldr	r3, [r7, #64]
 841 0184 1BB2     		sxth	r3, r3
 842 0186 07F11400 		add	r0, r7, #20
 843 018a 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 844 018e 0093     		str	r3, [sp]
 845 0190 1346     		mov	r3, r2
 846 0192 07F11402 		add	r2, r7, #20
 847 0196 06CA     		ldm	r2, {r1, r2}
 848 0198 FFF7FEFF 		bl	PWMC_RecalcT1T2_OVM
 337:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_a = 16384 + ((-vector_time.T1 + vector_time.T2) / 2);
 849              		.loc 4 337 57
 850 019c BA69     		ldr	r2, [r7, #24]
 851              		.loc 4 337 40
 852 019e 7B69     		ldr	r3, [r7, #20]
 853              		.loc 4 337 44
ARM GAS  /tmp/ccLmOb0L.s 			page 44


 854 01a0 D31A     		subs	r3, r2, r3
 855              		.loc 4 337 62
 856 01a2 DA0F     		lsrs	r2, r3, #31
 857 01a4 1344     		add	r3, r3, r2
 858 01a6 5B10     		asrs	r3, r3, #1
 859              		.loc 4 337 16
 860 01a8 03F58043 		add	r3, r3, #16384
 861 01ac FB64     		str	r3, [r7, #76]
 338:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #ifndef FULL_MISRA_C_COMPLIANCY_PW_CURR_FDB_OVM
 339:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 340:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_a = (((int32_t)pHandle->PWMperiod) * duty_a) >> 16;
 862              		.loc 4 340 36
 863 01ae FB68     		ldr	r3, [r7, #12]
 864 01b0 B3F87030 		ldrh	r3, [r3, #112]
 865              		.loc 4 340 20
 866 01b4 1A46     		mov	r2, r3
 867              		.loc 4 340 49
 868 01b6 FB6C     		ldr	r3, [r7, #76]
 869 01b8 02FB03F3 		mul	r3, r2, r3
 870              		.loc 4 340 16
 871 01bc 1B14     		asrs	r3, r3, #16
 872 01be FB64     		str	r3, [r7, #76]
 341:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_b = 16384 + ((-vector_time.T1 - vector_time.T2) / 2);
 873              		.loc 4 341 40
 874 01c0 7B69     		ldr	r3, [r7, #20]
 875              		.loc 4 341 28
 876 01c2 5A42     		rsbs	r2, r3, #0
 877              		.loc 4 341 57
 878 01c4 BB69     		ldr	r3, [r7, #24]
 879              		.loc 4 341 44
 880 01c6 D31A     		subs	r3, r2, r3
 881              		.loc 4 341 62
 882 01c8 DA0F     		lsrs	r2, r3, #31
 883 01ca 1344     		add	r3, r3, r2
 884 01cc 5B10     		asrs	r3, r3, #1
 885              		.loc 4 341 16
 886 01ce 03F58043 		add	r3, r3, #16384
 887 01d2 BB64     		str	r3, [r7, #72]
 342:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 343:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_b = (((int32_t)pHandle->PWMperiod) * duty_b) >> 16;
 888              		.loc 4 343 36
 889 01d4 FB68     		ldr	r3, [r7, #12]
 890 01d6 B3F87030 		ldrh	r3, [r3, #112]
 891              		.loc 4 343 20
 892 01da 1A46     		mov	r2, r3
 893              		.loc 4 343 49
 894 01dc BB6C     		ldr	r3, [r7, #72]
 895 01de 02FB03F3 		mul	r3, r2, r3
 896              		.loc 4 343 16
 897 01e2 1B14     		asrs	r3, r3, #16
 898 01e4 BB64     		str	r3, [r7, #72]
 344:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_c = 16384 + ((vector_time.T1 + vector_time.T2) / 2);
 899              		.loc 4 344 39
 900 01e6 7A69     		ldr	r2, [r7, #20]
 901              		.loc 4 344 56
 902 01e8 BB69     		ldr	r3, [r7, #24]
 903              		.loc 4 344 43
ARM GAS  /tmp/ccLmOb0L.s 			page 45


 904 01ea 1344     		add	r3, r3, r2
 905              		.loc 4 344 61
 906 01ec DA0F     		lsrs	r2, r3, #31
 907 01ee 1344     		add	r3, r3, r2
 908 01f0 5B10     		asrs	r3, r3, #1
 909              		.loc 4 344 16
 910 01f2 03F58043 		add	r3, r3, #16384
 911 01f6 7B64     		str	r3, [r7, #68]
 345:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 346:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_c = (((int32_t)pHandle->PWMperiod) * duty_c) >> 16;
 912              		.loc 4 346 36
 913 01f8 FB68     		ldr	r3, [r7, #12]
 914 01fa B3F87030 		ldrh	r3, [r3, #112]
 915              		.loc 4 346 20
 916 01fe 1A46     		mov	r2, r3
 917              		.loc 4 346 49
 918 0200 7B6C     		ldr	r3, [r7, #68]
 919 0202 02FB03F3 		mul	r3, r2, r3
 920              		.loc 4 346 16
 921 0206 1B14     		asrs	r3, r3, #16
 922 0208 7B64     		str	r3, [r7, #68]
 347:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #else
 348:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_a = (((int32_t)pHandle->PWMperiod) * duty_a) / 65536;
 349:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_b = 16384 + ((-vector_time.T1 - vector_time.T2) / 2);
 350:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_b = (((int32_t)pHandle->PWMperiod) * duty_b) / 65536;
 351:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_c = 16384 + ((vector_time.T1 + vector_time.T2) / 2);
 352:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_c = (((int32_t)pHandle->PWMperiod) * duty_c) / 65536;
 353:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #endif
 354:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         pHandle->lowDuty = (uint16_t)duty_c;
 923              		.loc 4 354 28
 924 020a 7B6C     		ldr	r3, [r7, #68]
 925 020c 9AB2     		uxth	r2, r3
 926              		.loc 4 354 26
 927 020e FB68     		ldr	r3, [r7, #12]
 928 0210 A3F85820 		strh	r2, [r3, #88]	@ movhi
 355:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         pHandle->midDuty = (uint16_t)duty_a;
 929              		.loc 4 355 28
 930 0214 FB6C     		ldr	r3, [r7, #76]
 931 0216 9AB2     		uxth	r2, r3
 932              		.loc 4 355 26
 933 0218 FB68     		ldr	r3, [r7, #12]
 934 021a A3F85A20 		strh	r2, [r3, #90]	@ movhi
 356:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         pHandle->highDuty = (uint16_t)duty_b;
 935              		.loc 4 356 29
 936 021e BB6C     		ldr	r3, [r7, #72]
 937 0220 9AB2     		uxth	r2, r3
 938              		.loc 4 356 27
 939 0222 FB68     		ldr	r3, [r7, #12]
 940 0224 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 941 0228 FCE1     		b	.L50
 942              	.L49:
 357:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
 358:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       }
 359:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       else /* wZ >= 0 */
 360:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         if (wX <= 0)
 943              		.loc 4 360 12
 944 022a BB6A     		ldr	r3, [r7, #40]
ARM GAS  /tmp/ccLmOb0L.s 			page 46


 945 022c 002B     		cmp	r3, #0
 946 022e 69DC     		bgt	.L51
 361:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         {
 362:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           pHandle->Sector = SECTOR_4;
 947              		.loc 4 362 27
 948 0230 FB68     		ldr	r3, [r7, #12]
 949 0232 0322     		movs	r2, #3
 950 0234 83F87A20 		strb	r2, [r3, #122]
 363:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           vector_time.T1 = wZ;
 951              		.loc 4 363 26
 952 0238 3B6A     		ldr	r3, [r7, #32]
 953 023a 7B61     		str	r3, [r7, #20]
 364:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           vector_time.T2 = -wX;
 954              		.loc 4 364 28
 955 023c BB6A     		ldr	r3, [r7, #40]
 956 023e 5B42     		rsbs	r3, r3, #0
 957              		.loc 4 364 26
 958 0240 BB61     		str	r3, [r7, #24]
 365:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           vector_time = PWMC_RecalcT1T2_OVM( vector_time, ovm_mode_flag, (int16_t)gama );
 959              		.loc 4 365 25
 960 0242 3B6C     		ldr	r3, [r7, #64]
 961 0244 1BB2     		sxth	r3, r3
 962 0246 3846     		mov	r0, r7
 963 0248 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 964 024c 0093     		str	r3, [sp]
 965 024e 1346     		mov	r3, r2
 966 0250 07F11402 		add	r2, r7, #20
 967 0254 06CA     		ldm	r2, {r1, r2}
 968 0256 FFF7FEFF 		bl	PWMC_RecalcT1T2_OVM
 969 025a 07F11403 		add	r3, r7, #20
 970 025e 3A46     		mov	r2, r7
 971 0260 92E80300 		ldm	r2, {r0, r1}
 972 0264 83E80300 		stm	r3, {r0, r1}
 366:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_a = 16384 + ((- vector_time.T1 - vector_time.T2) / 2);
 973              		.loc 4 366 43
 974 0268 7B69     		ldr	r3, [r7, #20]
 975              		.loc 4 366 30
 976 026a 5A42     		rsbs	r2, r3, #0
 977              		.loc 4 366 60
 978 026c BB69     		ldr	r3, [r7, #24]
 979              		.loc 4 366 47
 980 026e D31A     		subs	r3, r2, r3
 981              		.loc 4 366 65
 982 0270 DA0F     		lsrs	r2, r3, #31
 983 0272 1344     		add	r3, r3, r2
 984 0274 5B10     		asrs	r3, r3, #1
 985              		.loc 4 366 18
 986 0276 03F58043 		add	r3, r3, #16384
 987 027a FB64     		str	r3, [r7, #76]
 367:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #ifndef FULL_MISRA_C_COMPLIANCY_PW_CURR_FDB_OVM
 368:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 369:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_a = (((int32_t)pHandle->PWMperiod) * duty_a) >> 16;
 988              		.loc 4 369 38
 989 027c FB68     		ldr	r3, [r7, #12]
 990 027e B3F87030 		ldrh	r3, [r3, #112]
 991              		.loc 4 369 22
 992 0282 1A46     		mov	r2, r3
ARM GAS  /tmp/ccLmOb0L.s 			page 47


 993              		.loc 4 369 51
 994 0284 FB6C     		ldr	r3, [r7, #76]
 995 0286 02FB03F3 		mul	r3, r2, r3
 996              		.loc 4 369 18
 997 028a 1B14     		asrs	r3, r3, #16
 998 028c FB64     		str	r3, [r7, #76]
 370:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_b = 16384 + ((vector_time.T1 - vector_time.T2) / 2);
 999              		.loc 4 370 41
 1000 028e 7A69     		ldr	r2, [r7, #20]
 1001              		.loc 4 370 58
 1002 0290 BB69     		ldr	r3, [r7, #24]
 1003              		.loc 4 370 45
 1004 0292 D31A     		subs	r3, r2, r3
 1005              		.loc 4 370 63
 1006 0294 DA0F     		lsrs	r2, r3, #31
 1007 0296 1344     		add	r3, r3, r2
 1008 0298 5B10     		asrs	r3, r3, #1
 1009              		.loc 4 370 18
 1010 029a 03F58043 		add	r3, r3, #16384
 1011 029e BB64     		str	r3, [r7, #72]
 371:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 372:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_b = (((int32_t)pHandle->PWMperiod) * duty_b) >> 16;
 1012              		.loc 4 372 38
 1013 02a0 FB68     		ldr	r3, [r7, #12]
 1014 02a2 B3F87030 		ldrh	r3, [r3, #112]
 1015              		.loc 4 372 22
 1016 02a6 1A46     		mov	r2, r3
 1017              		.loc 4 372 51
 1018 02a8 BB6C     		ldr	r3, [r7, #72]
 1019 02aa 02FB03F3 		mul	r3, r2, r3
 1020              		.loc 4 372 18
 1021 02ae 1B14     		asrs	r3, r3, #16
 1022 02b0 BB64     		str	r3, [r7, #72]
 373:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_c = 16384 + ((vector_time.T1 + vector_time.T2) / 2);
 1023              		.loc 4 373 41
 1024 02b2 7A69     		ldr	r2, [r7, #20]
 1025              		.loc 4 373 58
 1026 02b4 BB69     		ldr	r3, [r7, #24]
 1027              		.loc 4 373 45
 1028 02b6 1344     		add	r3, r3, r2
 1029              		.loc 4 373 63
 1030 02b8 DA0F     		lsrs	r2, r3, #31
 1031 02ba 1344     		add	r3, r3, r2
 1032 02bc 5B10     		asrs	r3, r3, #1
 1033              		.loc 4 373 18
 1034 02be 03F58043 		add	r3, r3, #16384
 1035 02c2 7B64     		str	r3, [r7, #68]
 374:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 375:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_c = (((int32_t)pHandle->PWMperiod) * duty_c) >> 16;
 1036              		.loc 4 375 38
 1037 02c4 FB68     		ldr	r3, [r7, #12]
 1038 02c6 B3F87030 		ldrh	r3, [r3, #112]
 1039              		.loc 4 375 22
 1040 02ca 1A46     		mov	r2, r3
 1041              		.loc 4 375 51
 1042 02cc 7B6C     		ldr	r3, [r7, #68]
 1043 02ce 02FB03F3 		mul	r3, r2, r3
ARM GAS  /tmp/ccLmOb0L.s 			page 48


 1044              		.loc 4 375 18
 1045 02d2 1B14     		asrs	r3, r3, #16
 1046 02d4 7B64     		str	r3, [r7, #68]
 376:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #else
 377:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_a = (((int32_t)pHandle->PWMperiod) * duty_a) / 65536;
 378:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_b = 16384 + ((vector_time.T1 - vector_time.T2) / 2);
 379:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_b = (((int32_t)pHandle->PWMperiod) * duty_b) / 65536;
 380:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_c = 16384 + ((vector_time.T1 + vector_time.T2) / 2);
 381:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_c = (((int32_t)pHandle->PWMperiod) * duty_c) / 65536;
 382:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #endif
 383:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           pHandle->lowDuty = (uint16_t)duty_c;
 1047              		.loc 4 383 30
 1048 02d6 7B6C     		ldr	r3, [r7, #68]
 1049 02d8 9AB2     		uxth	r2, r3
 1050              		.loc 4 383 28
 1051 02da FB68     		ldr	r3, [r7, #12]
 1052 02dc A3F85820 		strh	r2, [r3, #88]	@ movhi
 384:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           pHandle->midDuty = (uint16_t)duty_b;
 1053              		.loc 4 384 30
 1054 02e0 BB6C     		ldr	r3, [r7, #72]
 1055 02e2 9AB2     		uxth	r2, r3
 1056              		.loc 4 384 28
 1057 02e4 FB68     		ldr	r3, [r7, #12]
 1058 02e6 A3F85A20 		strh	r2, [r3, #90]	@ movhi
 385:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           pHandle->highDuty = (uint16_t)duty_a;
 1059              		.loc 4 385 31
 1060 02ea FB6C     		ldr	r3, [r7, #76]
 1061 02ec 9AB2     		uxth	r2, r3
 1062              		.loc 4 385 29
 1063 02ee FB68     		ldr	r3, [r7, #12]
 1064 02f0 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1065 02f4 96E1     		b	.L50
 1066              	.L56:
 1067 02f6 00BF     		.align	2
 1068              	.L55:
 1069 02f8 00000000 		.word	aOVMGain.1
 1070 02fc 00000000 		.word	aOVMGamma.0
 1071 0300 19B6FFFF 		.word	-18919
 1072              	.L51:
 386:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         }
 387:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         else /* wX > 0 */
 388:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         {
 389:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           pHandle->Sector = SECTOR_3;
 1073              		.loc 4 389 27
 1074 0304 FB68     		ldr	r3, [r7, #12]
 1075 0306 0222     		movs	r2, #2
 1076 0308 83F87A20 		strb	r2, [r3, #122]
 390:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           vector_time.T1 = wX;
 1077              		.loc 4 390 26
 1078 030c BB6A     		ldr	r3, [r7, #40]
 1079 030e 7B61     		str	r3, [r7, #20]
 391:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           vector_time.T2 = -wY;
 1080              		.loc 4 391 28
 1081 0310 7B6A     		ldr	r3, [r7, #36]
 1082 0312 5B42     		rsbs	r3, r3, #0
 1083              		.loc 4 391 26
 1084 0314 BB61     		str	r3, [r7, #24]
ARM GAS  /tmp/ccLmOb0L.s 			page 49


 392:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           vector_time = PWMC_RecalcT1T2_OVM( vector_time, ovm_mode_flag, (int16_t)gama );
 1085              		.loc 4 392 25
 1086 0316 3B6C     		ldr	r3, [r7, #64]
 1087 0318 1BB2     		sxth	r3, r3
 1088 031a 3846     		mov	r0, r7
 1089 031c 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1090 0320 0093     		str	r3, [sp]
 1091 0322 1346     		mov	r3, r2
 1092 0324 07F11402 		add	r2, r7, #20
 1093 0328 06CA     		ldm	r2, {r1, r2}
 1094 032a FFF7FEFF 		bl	PWMC_RecalcT1T2_OVM
 1095 032e 07F11403 		add	r3, r7, #20
 1096 0332 3A46     		mov	r2, r7
 1097 0334 92E80300 		ldm	r2, {r0, r1}
 1098 0338 83E80300 		stm	r3, {r0, r1}
 393:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_a = 16384 + ((-vector_time.T1 - vector_time.T2) / 2);
 1099              		.loc 4 393 42
 1100 033c 7B69     		ldr	r3, [r7, #20]
 1101              		.loc 4 393 30
 1102 033e 5A42     		rsbs	r2, r3, #0
 1103              		.loc 4 393 59
 1104 0340 BB69     		ldr	r3, [r7, #24]
 1105              		.loc 4 393 46
 1106 0342 D31A     		subs	r3, r2, r3
 1107              		.loc 4 393 64
 1108 0344 DA0F     		lsrs	r2, r3, #31
 1109 0346 1344     		add	r3, r3, r2
 1110 0348 5B10     		asrs	r3, r3, #1
 1111              		.loc 4 393 18
 1112 034a 03F58043 		add	r3, r3, #16384
 1113 034e FB64     		str	r3, [r7, #76]
 394:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #ifndef FULL_MISRA_C_COMPLIANCY_PW_CURR_FDB_OVM
 395:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 396:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_a = (((int32_t)pHandle->PWMperiod) * duty_a) >> 16;
 1114              		.loc 4 396 38
 1115 0350 FB68     		ldr	r3, [r7, #12]
 1116 0352 B3F87030 		ldrh	r3, [r3, #112]
 1117              		.loc 4 396 22
 1118 0356 1A46     		mov	r2, r3
 1119              		.loc 4 396 51
 1120 0358 FB6C     		ldr	r3, [r7, #76]
 1121 035a 02FB03F3 		mul	r3, r2, r3
 1122              		.loc 4 396 18
 1123 035e 1B14     		asrs	r3, r3, #16
 1124 0360 FB64     		str	r3, [r7, #76]
 397:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_b = 16384 + ((vector_time.T1 + vector_time.T2) / 2);
 1125              		.loc 4 397 41
 1126 0362 7A69     		ldr	r2, [r7, #20]
 1127              		.loc 4 397 58
 1128 0364 BB69     		ldr	r3, [r7, #24]
 1129              		.loc 4 397 45
 1130 0366 1344     		add	r3, r3, r2
 1131              		.loc 4 397 63
 1132 0368 DA0F     		lsrs	r2, r3, #31
 1133 036a 1344     		add	r3, r3, r2
 1134 036c 5B10     		asrs	r3, r3, #1
 1135              		.loc 4 397 18
ARM GAS  /tmp/ccLmOb0L.s 			page 50


 1136 036e 03F58043 		add	r3, r3, #16384
 1137 0372 BB64     		str	r3, [r7, #72]
 398:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 399:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_b = (((int32_t)pHandle->PWMperiod) * duty_b) >> 16;
 1138              		.loc 4 399 38
 1139 0374 FB68     		ldr	r3, [r7, #12]
 1140 0376 B3F87030 		ldrh	r3, [r3, #112]
 1141              		.loc 4 399 22
 1142 037a 1A46     		mov	r2, r3
 1143              		.loc 4 399 51
 1144 037c BB6C     		ldr	r3, [r7, #72]
 1145 037e 02FB03F3 		mul	r3, r2, r3
 1146              		.loc 4 399 18
 1147 0382 1B14     		asrs	r3, r3, #16
 1148 0384 BB64     		str	r3, [r7, #72]
 400:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_c = 16384 + ((- vector_time.T1 + vector_time.T2) / 2);
 1149              		.loc 4 400 60
 1150 0386 BA69     		ldr	r2, [r7, #24]
 1151              		.loc 4 400 43
 1152 0388 7B69     		ldr	r3, [r7, #20]
 1153              		.loc 4 400 47
 1154 038a D31A     		subs	r3, r2, r3
 1155              		.loc 4 400 65
 1156 038c DA0F     		lsrs	r2, r3, #31
 1157 038e 1344     		add	r3, r3, r2
 1158 0390 5B10     		asrs	r3, r3, #1
 1159              		.loc 4 400 18
 1160 0392 03F58043 		add	r3, r3, #16384
 1161 0396 7B64     		str	r3, [r7, #68]
 401:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 402:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_c = (((int32_t)pHandle->PWMperiod) * duty_c) >> 16;
 1162              		.loc 4 402 38
 1163 0398 FB68     		ldr	r3, [r7, #12]
 1164 039a B3F87030 		ldrh	r3, [r3, #112]
 1165              		.loc 4 402 22
 1166 039e 1A46     		mov	r2, r3
 1167              		.loc 4 402 51
 1168 03a0 7B6C     		ldr	r3, [r7, #68]
 1169 03a2 02FB03F3 		mul	r3, r2, r3
 1170              		.loc 4 402 18
 1171 03a6 1B14     		asrs	r3, r3, #16
 1172 03a8 7B64     		str	r3, [r7, #68]
 403:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #else
 404:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_a = (((int32_t)pHandle->PWMperiod) * duty_a) / 65536;
 405:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_b = 16384 + ((vector_time.T1 + vector_time.T2) / 2);
 406:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_b = (((int32_t)pHandle->PWMperiod) * duty_b) / 65536;
 407:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_c = 16384 + ((- vector_time.T1 + vector_time.T2) / 2);
 408:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_c = (((int32_t)pHandle->PWMperiod) * duty_c) / 65536;
 409:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #endif
 410:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           pHandle->lowDuty = (uint16_t)duty_b;
 1173              		.loc 4 410 30
 1174 03aa BB6C     		ldr	r3, [r7, #72]
 1175 03ac 9AB2     		uxth	r2, r3
 1176              		.loc 4 410 28
 1177 03ae FB68     		ldr	r3, [r7, #12]
 1178 03b0 A3F85820 		strh	r2, [r3, #88]	@ movhi
 411:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           pHandle->midDuty = (uint16_t)duty_c;
ARM GAS  /tmp/ccLmOb0L.s 			page 51


 1179              		.loc 4 411 30
 1180 03b4 7B6C     		ldr	r3, [r7, #68]
 1181 03b6 9AB2     		uxth	r2, r3
 1182              		.loc 4 411 28
 1183 03b8 FB68     		ldr	r3, [r7, #12]
 1184 03ba A3F85A20 		strh	r2, [r3, #90]	@ movhi
 412:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           pHandle->highDuty = (uint16_t)duty_a;
 1185              		.loc 4 412 31
 1186 03be FB6C     		ldr	r3, [r7, #76]
 1187 03c0 9AB2     		uxth	r2, r3
 1188              		.loc 4 412 29
 1189 03c2 FB68     		ldr	r3, [r7, #12]
 1190 03c4 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1191 03c8 2CE1     		b	.L50
 1192              	.L48:
 413:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
 414:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         }
 415:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     }
 416:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     else /* wY > 0 */
 417:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     {
 418:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       if (wZ >= 0)
 1193              		.loc 4 418 10
 1194 03ca 3B6A     		ldr	r3, [r7, #32]
 1195 03cc 002B     		cmp	r3, #0
 1196 03ce 61DB     		blt	.L52
 419:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       {
 420:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         pHandle->Sector = SECTOR_2;
 1197              		.loc 4 420 25
 1198 03d0 FB68     		ldr	r3, [r7, #12]
 1199 03d2 0122     		movs	r2, #1
 1200 03d4 83F87A20 		strb	r2, [r3, #122]
 421:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         vector_time.T1 = wY;
 1201              		.loc 4 421 24
 1202 03d8 7B6A     		ldr	r3, [r7, #36]
 1203 03da 7B61     		str	r3, [r7, #20]
 422:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         vector_time.T2 = wZ;
 1204              		.loc 4 422 24
 1205 03dc 3B6A     		ldr	r3, [r7, #32]
 1206 03de BB61     		str	r3, [r7, #24]
 423:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         vector_time = PWMC_RecalcT1T2_OVM( vector_time, ovm_mode_flag, (int16_t)gama);
 1207              		.loc 4 423 23
 1208 03e0 3B6C     		ldr	r3, [r7, #64]
 1209 03e2 1BB2     		sxth	r3, r3
 1210 03e4 3846     		mov	r0, r7
 1211 03e6 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1212 03ea 0093     		str	r3, [sp]
 1213 03ec 1346     		mov	r3, r2
 1214 03ee 07F11402 		add	r2, r7, #20
 1215 03f2 06CA     		ldm	r2, {r1, r2}
 1216 03f4 FFF7FEFF 		bl	PWMC_RecalcT1T2_OVM
 1217 03f8 07F11403 		add	r3, r7, #20
 1218 03fc 3A46     		mov	r2, r7
 1219 03fe 92E80300 		ldm	r2, {r0, r1}
 1220 0402 83E80300 		stm	r3, {r0, r1}
 424:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_a = 16384 + ((vector_time.T1 - vector_time.T2) / 2);
 1221              		.loc 4 424 39
 1222 0406 7A69     		ldr	r2, [r7, #20]
ARM GAS  /tmp/ccLmOb0L.s 			page 52


 1223              		.loc 4 424 56
 1224 0408 BB69     		ldr	r3, [r7, #24]
 1225              		.loc 4 424 43
 1226 040a D31A     		subs	r3, r2, r3
 1227              		.loc 4 424 61
 1228 040c DA0F     		lsrs	r2, r3, #31
 1229 040e 1344     		add	r3, r3, r2
 1230 0410 5B10     		asrs	r3, r3, #1
 1231              		.loc 4 424 16
 1232 0412 03F58043 		add	r3, r3, #16384
 1233 0416 FB64     		str	r3, [r7, #76]
 425:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #ifndef FULL_MISRA_C_COMPLIANCY_PW_CURR_FDB_OVM
 426:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 427:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_a = (((int32_t)pHandle->PWMperiod) * duty_a) >> 16;
 1234              		.loc 4 427 36
 1235 0418 FB68     		ldr	r3, [r7, #12]
 1236 041a B3F87030 		ldrh	r3, [r3, #112]
 1237              		.loc 4 427 20
 1238 041e 1A46     		mov	r2, r3
 1239              		.loc 4 427 49
 1240 0420 FB6C     		ldr	r3, [r7, #76]
 1241 0422 02FB03F3 		mul	r3, r2, r3
 1242              		.loc 4 427 16
 1243 0426 1B14     		asrs	r3, r3, #16
 1244 0428 FB64     		str	r3, [r7, #76]
 428:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_b = 16384 + ((vector_time.T1 + vector_time.T2) / 2);
 1245              		.loc 4 428 39
 1246 042a 7A69     		ldr	r2, [r7, #20]
 1247              		.loc 4 428 56
 1248 042c BB69     		ldr	r3, [r7, #24]
 1249              		.loc 4 428 43
 1250 042e 1344     		add	r3, r3, r2
 1251              		.loc 4 428 61
 1252 0430 DA0F     		lsrs	r2, r3, #31
 1253 0432 1344     		add	r3, r3, r2
 1254 0434 5B10     		asrs	r3, r3, #1
 1255              		.loc 4 428 16
 1256 0436 03F58043 		add	r3, r3, #16384
 1257 043a BB64     		str	r3, [r7, #72]
 429:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 430:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_b = (((int32_t)pHandle->PWMperiod) * duty_b) >> 16;
 1258              		.loc 4 430 36
 1259 043c FB68     		ldr	r3, [r7, #12]
 1260 043e B3F87030 		ldrh	r3, [r3, #112]
 1261              		.loc 4 430 20
 1262 0442 1A46     		mov	r2, r3
 1263              		.loc 4 430 49
 1264 0444 BB6C     		ldr	r3, [r7, #72]
 1265 0446 02FB03F3 		mul	r3, r2, r3
 1266              		.loc 4 430 16
 1267 044a 1B14     		asrs	r3, r3, #16
 1268 044c BB64     		str	r3, [r7, #72]
 431:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_c = 16384 + ((-vector_time.T1 - vector_time.T2) / 2);
 1269              		.loc 4 431 40
 1270 044e 7B69     		ldr	r3, [r7, #20]
 1271              		.loc 4 431 28
 1272 0450 5A42     		rsbs	r2, r3, #0
ARM GAS  /tmp/ccLmOb0L.s 			page 53


 1273              		.loc 4 431 57
 1274 0452 BB69     		ldr	r3, [r7, #24]
 1275              		.loc 4 431 44
 1276 0454 D31A     		subs	r3, r2, r3
 1277              		.loc 4 431 62
 1278 0456 DA0F     		lsrs	r2, r3, #31
 1279 0458 1344     		add	r3, r3, r2
 1280 045a 5B10     		asrs	r3, r3, #1
 1281              		.loc 4 431 16
 1282 045c 03F58043 		add	r3, r3, #16384
 1283 0460 7B64     		str	r3, [r7, #68]
 432:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 433:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_c = (((int32_t)pHandle->PWMperiod) * duty_c) >> 16;
 1284              		.loc 4 433 36
 1285 0462 FB68     		ldr	r3, [r7, #12]
 1286 0464 B3F87030 		ldrh	r3, [r3, #112]
 1287              		.loc 4 433 20
 1288 0468 1A46     		mov	r2, r3
 1289              		.loc 4 433 49
 1290 046a 7B6C     		ldr	r3, [r7, #68]
 1291 046c 02FB03F3 		mul	r3, r2, r3
 1292              		.loc 4 433 16
 1293 0470 1B14     		asrs	r3, r3, #16
 1294 0472 7B64     		str	r3, [r7, #68]
 434:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #else
 435:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_a = (((int32_t)pHandle->PWMperiod) * duty_a) / 65536;
 436:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_b = 16384 + ((vector_time.T1 + vector_time.T2) / 2);
 437:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_b = (((int32_t)pHandle->PWMperiod) * duty_b) / 65536;
 438:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_c = 16384 + ((-vector_time.T1 - vector_time.T2) / 2);
 439:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         duty_c = (((int32_t)pHandle->PWMperiod) * duty_c) / 65536;
 440:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #endif
 441:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         pHandle->lowDuty = (uint16_t)duty_b;
 1295              		.loc 4 441 28
 1296 0474 BB6C     		ldr	r3, [r7, #72]
 1297 0476 9AB2     		uxth	r2, r3
 1298              		.loc 4 441 26
 1299 0478 FB68     		ldr	r3, [r7, #12]
 1300 047a A3F85820 		strh	r2, [r3, #88]	@ movhi
 442:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         pHandle->midDuty = (uint16_t)duty_a;
 1301              		.loc 4 442 28
 1302 047e FB6C     		ldr	r3, [r7, #76]
 1303 0480 9AB2     		uxth	r2, r3
 1304              		.loc 4 442 26
 1305 0482 FB68     		ldr	r3, [r7, #12]
 1306 0484 A3F85A20 		strh	r2, [r3, #90]	@ movhi
 443:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         pHandle->highDuty = (uint16_t)duty_c;
 1307              		.loc 4 443 29
 1308 0488 7B6C     		ldr	r3, [r7, #68]
 1309 048a 9AB2     		uxth	r2, r3
 1310              		.loc 4 443 27
 1311 048c FB68     		ldr	r3, [r7, #12]
 1312 048e A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1313 0492 C7E0     		b	.L50
 1314              	.L52:
 444:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       }
 445:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****       else /* wZ < 0 */
 446:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         if (wX <= 0)
ARM GAS  /tmp/ccLmOb0L.s 			page 54


 1315              		.loc 4 446 12
 1316 0494 BB6A     		ldr	r3, [r7, #40]
 1317 0496 002B     		cmp	r3, #0
 1318 0498 62DC     		bgt	.L53
 447:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         {
 448:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           pHandle->Sector = SECTOR_6;
 1319              		.loc 4 448 27
 1320 049a FB68     		ldr	r3, [r7, #12]
 1321 049c 0522     		movs	r2, #5
 1322 049e 83F87A20 		strb	r2, [r3, #122]
 449:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           vector_time.T1 = -wX;
 1323              		.loc 4 449 28
 1324 04a2 BB6A     		ldr	r3, [r7, #40]
 1325 04a4 5B42     		rsbs	r3, r3, #0
 1326              		.loc 4 449 26
 1327 04a6 7B61     		str	r3, [r7, #20]
 450:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           vector_time.T2 = wY;
 1328              		.loc 4 450 26
 1329 04a8 7B6A     		ldr	r3, [r7, #36]
 1330 04aa BB61     		str	r3, [r7, #24]
 451:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           vector_time = PWMC_RecalcT1T2_OVM( vector_time, ovm_mode_flag, (int16_t)gama);
 1331              		.loc 4 451 25
 1332 04ac 3B6C     		ldr	r3, [r7, #64]
 1333 04ae 1BB2     		sxth	r3, r3
 1334 04b0 3846     		mov	r0, r7
 1335 04b2 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1336 04b6 0093     		str	r3, [sp]
 1337 04b8 1346     		mov	r3, r2
 1338 04ba 07F11402 		add	r2, r7, #20
 1339 04be 06CA     		ldm	r2, {r1, r2}
 1340 04c0 FFF7FEFF 		bl	PWMC_RecalcT1T2_OVM
 1341 04c4 07F11403 		add	r3, r7, #20
 1342 04c8 3A46     		mov	r2, r7
 1343 04ca 92E80300 		ldm	r2, {r0, r1}
 1344 04ce 83E80300 		stm	r3, {r0, r1}
 452:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_a = 16384 + ((vector_time.T1 + vector_time.T2) / 2);
 1345              		.loc 4 452 41
 1346 04d2 7A69     		ldr	r2, [r7, #20]
 1347              		.loc 4 452 58
 1348 04d4 BB69     		ldr	r3, [r7, #24]
 1349              		.loc 4 452 45
 1350 04d6 1344     		add	r3, r3, r2
 1351              		.loc 4 452 63
 1352 04d8 DA0F     		lsrs	r2, r3, #31
 1353 04da 1344     		add	r3, r3, r2
 1354 04dc 5B10     		asrs	r3, r3, #1
 1355              		.loc 4 452 18
 1356 04de 03F58043 		add	r3, r3, #16384
 1357 04e2 FB64     		str	r3, [r7, #76]
 453:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #ifndef FULL_MISRA_C_COMPLIANCY_PW_CURR_FDB_OVM
 454:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 455:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_a = (((int32_t)pHandle->PWMperiod) * duty_a) >> 16;
 1358              		.loc 4 455 38
 1359 04e4 FB68     		ldr	r3, [r7, #12]
 1360 04e6 B3F87030 		ldrh	r3, [r3, #112]
 1361              		.loc 4 455 22
 1362 04ea 1A46     		mov	r2, r3
ARM GAS  /tmp/ccLmOb0L.s 			page 55


 1363              		.loc 4 455 51
 1364 04ec FB6C     		ldr	r3, [r7, #76]
 1365 04ee 02FB03F3 		mul	r3, r2, r3
 1366              		.loc 4 455 18
 1367 04f2 1B14     		asrs	r3, r3, #16
 1368 04f4 FB64     		str	r3, [r7, #76]
 456:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_b = 16384 + ((-vector_time.T1 - vector_time.T2) / 2);
 1369              		.loc 4 456 42
 1370 04f6 7B69     		ldr	r3, [r7, #20]
 1371              		.loc 4 456 30
 1372 04f8 5A42     		rsbs	r2, r3, #0
 1373              		.loc 4 456 59
 1374 04fa BB69     		ldr	r3, [r7, #24]
 1375              		.loc 4 456 46
 1376 04fc D31A     		subs	r3, r2, r3
 1377              		.loc 4 456 64
 1378 04fe DA0F     		lsrs	r2, r3, #31
 1379 0500 1344     		add	r3, r3, r2
 1380 0502 5B10     		asrs	r3, r3, #1
 1381              		.loc 4 456 18
 1382 0504 03F58043 		add	r3, r3, #16384
 1383 0508 BB64     		str	r3, [r7, #72]
 457:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 458:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_b = (((int32_t)pHandle->PWMperiod) * duty_b) >> 16;
 1384              		.loc 4 458 38
 1385 050a FB68     		ldr	r3, [r7, #12]
 1386 050c B3F87030 		ldrh	r3, [r3, #112]
 1387              		.loc 4 458 22
 1388 0510 1A46     		mov	r2, r3
 1389              		.loc 4 458 51
 1390 0512 BB6C     		ldr	r3, [r7, #72]
 1391 0514 02FB03F3 		mul	r3, r2, r3
 1392              		.loc 4 458 18
 1393 0518 1B14     		asrs	r3, r3, #16
 1394 051a BB64     		str	r3, [r7, #72]
 459:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_c = 16384 + ((vector_time.T1 - vector_time.T2) / 2);
 1395              		.loc 4 459 41
 1396 051c 7A69     		ldr	r2, [r7, #20]
 1397              		.loc 4 459 58
 1398 051e BB69     		ldr	r3, [r7, #24]
 1399              		.loc 4 459 45
 1400 0520 D31A     		subs	r3, r2, r3
 1401              		.loc 4 459 63
 1402 0522 DA0F     		lsrs	r2, r3, #31
 1403 0524 1344     		add	r3, r3, r2
 1404 0526 5B10     		asrs	r3, r3, #1
 1405              		.loc 4 459 18
 1406 0528 03F58043 		add	r3, r3, #16384
 1407 052c 7B64     		str	r3, [r7, #68]
 460:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 461:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_c = (((int32_t)pHandle->PWMperiod) * duty_c) >> 16;
 1408              		.loc 4 461 38
 1409 052e FB68     		ldr	r3, [r7, #12]
 1410 0530 B3F87030 		ldrh	r3, [r3, #112]
 1411              		.loc 4 461 22
 1412 0534 1A46     		mov	r2, r3
 1413              		.loc 4 461 51
ARM GAS  /tmp/ccLmOb0L.s 			page 56


 1414 0536 7B6C     		ldr	r3, [r7, #68]
 1415 0538 02FB03F3 		mul	r3, r2, r3
 1416              		.loc 4 461 18
 1417 053c 1B14     		asrs	r3, r3, #16
 1418 053e 7B64     		str	r3, [r7, #68]
 462:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #else
 463:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_a = (((int32_t)pHandle->PWMperiod) * duty_a) / 65536;
 464:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_b = 16384 + ((-vector_time.T1 - vector_time.T2) / 2);
 465:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_b = (((int32_t)pHandle->PWMperiod) * duty_b) / 65536;
 466:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_c = 16384 + ((vector_time.T1 - vector_time.T2) / 2);
 467:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_c = (((int32_t)pHandle->PWMperiod) * duty_c) / 65536;
 468:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #endif
 469:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           pHandle->lowDuty = (uint16_t)duty_a;
 1419              		.loc 4 469 30
 1420 0540 FB6C     		ldr	r3, [r7, #76]
 1421 0542 9AB2     		uxth	r2, r3
 1422              		.loc 4 469 28
 1423 0544 FB68     		ldr	r3, [r7, #12]
 1424 0546 A3F85820 		strh	r2, [r3, #88]	@ movhi
 470:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           pHandle->midDuty = (uint16_t)duty_c;
 1425              		.loc 4 470 30
 1426 054a 7B6C     		ldr	r3, [r7, #68]
 1427 054c 9AB2     		uxth	r2, r3
 1428              		.loc 4 470 28
 1429 054e FB68     		ldr	r3, [r7, #12]
 1430 0550 A3F85A20 		strh	r2, [r3, #90]	@ movhi
 471:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           pHandle->highDuty = (uint16_t)duty_b;
 1431              		.loc 4 471 31
 1432 0554 BB6C     		ldr	r3, [r7, #72]
 1433 0556 9AB2     		uxth	r2, r3
 1434              		.loc 4 471 29
 1435 0558 FB68     		ldr	r3, [r7, #12]
 1436 055a A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1437 055e 61E0     		b	.L50
 1438              	.L53:
 472:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         }
 473:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         else /* wX > 0 */
 474:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         {
 475:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           pHandle->Sector = SECTOR_1;
 1439              		.loc 4 475 27
 1440 0560 FB68     		ldr	r3, [r7, #12]
 1441 0562 0022     		movs	r2, #0
 1442 0564 83F87A20 		strb	r2, [r3, #122]
 476:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           vector_time.T1 = -wZ;
 1443              		.loc 4 476 28
 1444 0568 3B6A     		ldr	r3, [r7, #32]
 1445 056a 5B42     		rsbs	r3, r3, #0
 1446              		.loc 4 476 26
 1447 056c 7B61     		str	r3, [r7, #20]
 477:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           vector_time.T2 = wX;
 1448              		.loc 4 477 26
 1449 056e BB6A     		ldr	r3, [r7, #40]
 1450 0570 BB61     		str	r3, [r7, #24]
 478:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           vector_time = PWMC_RecalcT1T2_OVM( vector_time, ovm_mode_flag, (int16_t)gama);
 1451              		.loc 4 478 25
 1452 0572 3B6C     		ldr	r3, [r7, #64]
 1453 0574 1BB2     		sxth	r3, r3
ARM GAS  /tmp/ccLmOb0L.s 			page 57


 1454 0576 3846     		mov	r0, r7
 1455 0578 97F83F20 		ldrb	r2, [r7, #63]	@ zero_extendqisi2
 1456 057c 0093     		str	r3, [sp]
 1457 057e 1346     		mov	r3, r2
 1458 0580 07F11402 		add	r2, r7, #20
 1459 0584 06CA     		ldm	r2, {r1, r2}
 1460 0586 FFF7FEFF 		bl	PWMC_RecalcT1T2_OVM
 1461 058a 07F11403 		add	r3, r7, #20
 1462 058e 3A46     		mov	r2, r7
 1463 0590 92E80300 		ldm	r2, {r0, r1}
 1464 0594 83E80300 		stm	r3, {r0, r1}
 479:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_a = 16384 + ((vector_time.T1 + vector_time.T2) / 2);
 1465              		.loc 4 479 41
 1466 0598 7A69     		ldr	r2, [r7, #20]
 1467              		.loc 4 479 58
 1468 059a BB69     		ldr	r3, [r7, #24]
 1469              		.loc 4 479 45
 1470 059c 1344     		add	r3, r3, r2
 1471              		.loc 4 479 63
 1472 059e DA0F     		lsrs	r2, r3, #31
 1473 05a0 1344     		add	r3, r3, r2
 1474 05a2 5B10     		asrs	r3, r3, #1
 1475              		.loc 4 479 18
 1476 05a4 03F58043 		add	r3, r3, #16384
 1477 05a8 FB64     		str	r3, [r7, #76]
 480:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #ifndef FULL_MISRA_C_COMPLIANCY_PW_CURR_FDB_OVM
 481:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 482:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_a = (((int32_t)pHandle->PWMperiod) * duty_a) >> 16;
 1478              		.loc 4 482 38
 1479 05aa FB68     		ldr	r3, [r7, #12]
 1480 05ac B3F87030 		ldrh	r3, [r3, #112]
 1481              		.loc 4 482 22
 1482 05b0 1A46     		mov	r2, r3
 1483              		.loc 4 482 51
 1484 05b2 FB6C     		ldr	r3, [r7, #76]
 1485 05b4 02FB03F3 		mul	r3, r2, r3
 1486              		.loc 4 482 18
 1487 05b8 1B14     		asrs	r3, r3, #16
 1488 05ba FB64     		str	r3, [r7, #76]
 483:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_b = 16384 + ((-vector_time.T1 + vector_time.T2) / 2);
 1489              		.loc 4 483 59
 1490 05bc BA69     		ldr	r2, [r7, #24]
 1491              		.loc 4 483 42
 1492 05be 7B69     		ldr	r3, [r7, #20]
 1493              		.loc 4 483 46
 1494 05c0 D31A     		subs	r3, r2, r3
 1495              		.loc 4 483 64
 1496 05c2 DA0F     		lsrs	r2, r3, #31
 1497 05c4 1344     		add	r3, r3, r2
 1498 05c6 5B10     		asrs	r3, r3, #1
 1499              		.loc 4 483 18
 1500 05c8 03F58043 		add	r3, r3, #16384
 1501 05cc BB64     		str	r3, [r7, #72]
 484:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 485:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_b = (((int32_t)pHandle->PWMperiod) * duty_b) >> 16;
 1502              		.loc 4 485 38
 1503 05ce FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccLmOb0L.s 			page 58


 1504 05d0 B3F87030 		ldrh	r3, [r3, #112]
 1505              		.loc 4 485 22
 1506 05d4 1A46     		mov	r2, r3
 1507              		.loc 4 485 51
 1508 05d6 BB6C     		ldr	r3, [r7, #72]
 1509 05d8 02FB03F3 		mul	r3, r2, r3
 1510              		.loc 4 485 18
 1511 05dc 1B14     		asrs	r3, r3, #16
 1512 05de BB64     		str	r3, [r7, #72]
 486:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_c = 16384 + ((-vector_time.T1 - vector_time.T2) / 2);
 1513              		.loc 4 486 42
 1514 05e0 7B69     		ldr	r3, [r7, #20]
 1515              		.loc 4 486 30
 1516 05e2 5A42     		rsbs	r2, r3, #0
 1517              		.loc 4 486 59
 1518 05e4 BB69     		ldr	r3, [r7, #24]
 1519              		.loc 4 486 46
 1520 05e6 D31A     		subs	r3, r2, r3
 1521              		.loc 4 486 64
 1522 05e8 DA0F     		lsrs	r2, r3, #31
 1523 05ea 1344     		add	r3, r3, r2
 1524 05ec 5B10     		asrs	r3, r3, #1
 1525              		.loc 4 486 18
 1526 05ee 03F58043 		add	r3, r3, #16384
 1527 05f2 7B64     		str	r3, [r7, #68]
 487:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 488:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_c = (((int32_t)pHandle->PWMperiod) * duty_c) >> 16;
 1528              		.loc 4 488 38
 1529 05f4 FB68     		ldr	r3, [r7, #12]
 1530 05f6 B3F87030 		ldrh	r3, [r3, #112]
 1531              		.loc 4 488 22
 1532 05fa 1A46     		mov	r2, r3
 1533              		.loc 4 488 51
 1534 05fc 7B6C     		ldr	r3, [r7, #68]
 1535 05fe 02FB03F3 		mul	r3, r2, r3
 1536              		.loc 4 488 18
 1537 0602 1B14     		asrs	r3, r3, #16
 1538 0604 7B64     		str	r3, [r7, #68]
 489:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #else
 490:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_a = (((int32_t)pHandle->PWMperiod) * duty_a) / 65536;
 491:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_b = 16384 + ((-vector_time.T1 + vector_time.T2) / 2);
 492:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_b = (((int32_t)pHandle->PWMperiod) * duty_b) / 65536;
 493:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_c = 16384 + ((-vector_time.T1 - vector_time.T2) / 2);
 494:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           duty_c = (((int32_t)pHandle->PWMperiod) * duty_c) / 65536;
 495:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #endif
 496:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           pHandle->lowDuty = (uint16_t)duty_a;
 1539              		.loc 4 496 30
 1540 0606 FB6C     		ldr	r3, [r7, #76]
 1541 0608 9AB2     		uxth	r2, r3
 1542              		.loc 4 496 28
 1543 060a FB68     		ldr	r3, [r7, #12]
 1544 060c A3F85820 		strh	r2, [r3, #88]	@ movhi
 497:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           pHandle->midDuty = (uint16_t)duty_b;
 1545              		.loc 4 497 30
 1546 0610 BB6C     		ldr	r3, [r7, #72]
 1547 0612 9AB2     		uxth	r2, r3
 1548              		.loc 4 497 28
ARM GAS  /tmp/ccLmOb0L.s 			page 59


 1549 0614 FB68     		ldr	r3, [r7, #12]
 1550 0616 A3F85A20 		strh	r2, [r3, #90]	@ movhi
 498:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****           pHandle->highDuty = (uint16_t)duty_c;
 1551              		.loc 4 498 31
 1552 061a 7B6C     		ldr	r3, [r7, #68]
 1553 061c 9AB2     		uxth	r2, r3
 1554              		.loc 4 498 29
 1555 061e FB68     		ldr	r3, [r7, #12]
 1556 0620 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1557              	.L50:
 499:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****         }
 500:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     }
 501:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** 
 502:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     pHandle->CntPhA = (uint16_t)duty_a ;
 1558              		.loc 4 502 23
 1559 0624 FB6C     		ldr	r3, [r7, #76]
 1560 0626 9AB2     		uxth	r2, r3
 1561              		.loc 4 502 21
 1562 0628 FB68     		ldr	r3, [r7, #12]
 1563 062a A3F85020 		strh	r2, [r3, #80]	@ movhi
 503:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     pHandle->CntPhB = (uint16_t)duty_b ;
 1564              		.loc 4 503 23
 1565 062e BB6C     		ldr	r3, [r7, #72]
 1566 0630 9AB2     		uxth	r2, r3
 1567              		.loc 4 503 21
 1568 0632 FB68     		ldr	r3, [r7, #12]
 1569 0634 A3F85220 		strh	r2, [r3, #82]	@ movhi
 504:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     pHandle->CntPhC = (uint16_t)duty_c;
 1570              		.loc 4 504 23
 1571 0638 7B6C     		ldr	r3, [r7, #68]
 1572 063a 9AB2     		uxth	r2, r3
 1573              		.loc 4 504 21
 1574 063c FB68     		ldr	r3, [r7, #12]
 1575 063e A3F85420 		strh	r2, [r3, #84]	@ movhi
 505:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****     retvalue = pHandle->pFctSetADCSampPointSectX(pHandle);
 1576              		.loc 4 505 23
 1577 0642 FB68     		ldr	r3, [r7, #12]
 1578 0644 5B69     		ldr	r3, [r3, #20]
 1579              		.loc 4 505 16
 1580 0646 F868     		ldr	r0, [r7, #12]
 1581 0648 9847     		blx	r3
 1582              	.LVL0:
 1583 064a 0346     		mov	r3, r0
 1584 064c FB83     		strh	r3, [r7, #30]	@ movhi
 506:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #ifdef NULL_PTR_CHECK_PWM_CUR_FDB_OVM
 507:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   }
 508:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** #endif
 509:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c ****   return (retvalue);
 1585              		.loc 4 509 10
 1586 064e FB8B     		ldrh	r3, [r7, #30]
 510:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Src/pwm_curr_fdbk_ovm.c **** }
 1587              		.loc 4 510 1
 1588 0650 1846     		mov	r0, r3
 1589 0652 5837     		adds	r7, r7, #88
 1590              	.LCFI32:
 1591              		.cfi_def_cfa_offset 8
 1592 0654 BD46     		mov	sp, r7
ARM GAS  /tmp/ccLmOb0L.s 			page 60


 1593              	.LCFI33:
 1594              		.cfi_def_cfa_register 13
 1595              		@ sp needed
 1596 0656 80BD     		pop	{r7, pc}
 1597              		.cfi_endproc
 1598              	.LFE1441:
 1600              		.section	.rodata.aOVMGain.1,"a"
 1601              		.align	2
 1604              	aOVMGain.1:
 1605 0000 3B7A     		.short	31291
 1606 0002 3B7A     		.short	31291
 1607 0004 3D7A     		.short	31293
 1608 0006 3F7A     		.short	31295
 1609 0008 427A     		.short	31298
 1610 000a 447A     		.short	31300
 1611 000c 467A     		.short	31302
 1612 000e 4A7A     		.short	31306
 1613 0010 4D7A     		.short	31309
 1614 0012 527A     		.short	31314
 1615 0014 577A     		.short	31319
 1616 0016 5A7A     		.short	31322
 1617 0018 607A     		.short	31328
 1618 001a 667A     		.short	31334
 1619 001c 6A7A     		.short	31338
 1620 001e 707A     		.short	31344
 1621 0020 767A     		.short	31350
 1622 0022 7D7A     		.short	31357
 1623 0024 847A     		.short	31364
 1624 0026 8B7A     		.short	31371
 1625 0028 937A     		.short	31379
 1626 002a 9A7A     		.short	31386
 1627 002c A27A     		.short	31394
 1628 002e AA7A     		.short	31402
 1629 0030 B27A     		.short	31410
 1630 0032 BB7A     		.short	31419
 1631 0034 C37A     		.short	31427
 1632 0036 CF7A     		.short	31439
 1633 0038 D87A     		.short	31448
 1634 003a E17A     		.short	31457
 1635 003c EE7A     		.short	31470
 1636 003e F77A     		.short	31479
 1637 0040 047B     		.short	31492
 1638 0042 0E7B     		.short	31502
 1639 0044 1B7B     		.short	31515
 1640 0046 267B     		.short	31526
 1641 0048 337B     		.short	31539
 1642 004a 427B     		.short	31554
 1643 004c 507B     		.short	31568
 1644 004e 5B7B     		.short	31579
 1645 0050 6A7B     		.short	31594
 1646 0052 797B     		.short	31609
 1647 0054 887B     		.short	31624
 1648 0056 977B     		.short	31639
 1649 0058 A77B     		.short	31655
 1650 005a BB7B     		.short	31675
 1651 005c CB7B     		.short	31691
 1652 005e DB7B     		.short	31707
ARM GAS  /tmp/ccLmOb0L.s 			page 61


 1653 0060 F07B     		.short	31728
 1654 0062 017C     		.short	31745
 1655 0064 167C     		.short	31766
 1656 0066 277C     		.short	31783
 1657 0068 3D7C     		.short	31805
 1658 006a 537C     		.short	31827
 1659 006c 657C     		.short	31845
 1660 006e 7C7C     		.short	31868
 1661 0070 937C     		.short	31891
 1662 0072 AA7C     		.short	31914
 1663 0074 C67C     		.short	31942
 1664 0076 DE7C     		.short	31966
 1665 0078 F67C     		.short	31990
 1666 007a 137D     		.short	32019
 1667 007c 2C7D     		.short	32044
 1668 007e 4A7D     		.short	32074
 1669 0080 687D     		.short	32104
 1670 0082 867D     		.short	32134
 1671 0084 A57D     		.short	32165
 1672 0086 CA7D     		.short	32202
 1673 0088 E97D     		.short	32233
 1674 008a 0F7E     		.short	32271
 1675 008c 2F7E     		.short	32303
 1676 008e 557E     		.short	32341
 1677 0090 827E     		.short	32386
 1678 0092 A97E     		.short	32425
 1679 0094 D67E     		.short	32470
 1680 0096 047F     		.short	32516
 1681 0098 327F     		.short	32562
 1682 009a 617F     		.short	32609
 1683 009c 967F     		.short	32662
 1684 009e CC7F     		.short	32716
 1685 00a0 0980     		.short	-32759
 1686 00a2 4680     		.short	-32698
 1687 00a4 8B80     		.short	-32629
 1688 00a6 D680     		.short	-32554
 1689 00a8 2381     		.short	-32477
 1690 00aa 7881     		.short	-32392
 1691 00ac D481     		.short	-32300
 1692 00ae 3F82     		.short	-32193
 1693 00b0 BA82     		.short	-32070
 1694 00b2 4C83     		.short	-31924
 1695 00b4 0584     		.short	-31739
 1696 00b6 3A85     		.short	-31430
 1697 00b8 9F86     		.short	-31073
 1698 00ba CB86     		.short	-31029
 1699 00bc F786     		.short	-30985
 1700 00be 2487     		.short	-30940
 1701 00c0 5087     		.short	-30896
 1702 00c2 7C87     		.short	-30852
 1703 00c4 A987     		.short	-30807
 1704 00c6 DB87     		.short	-30757
 1705 00c8 0888     		.short	-30712
 1706 00ca 3588     		.short	-30667
 1707 00cc 6888     		.short	-30616
 1708 00ce 9B88     		.short	-30565
 1709 00d0 C988     		.short	-30519
ARM GAS  /tmp/ccLmOb0L.s 			page 62


 1710 00d2 FC88     		.short	-30468
 1711 00d4 3089     		.short	-30416
 1712 00d6 6A89     		.short	-30358
 1713 00d8 9E89     		.short	-30306
 1714 00da D289     		.short	-30254
 1715 00dc 0C8A     		.short	-30196
 1716 00de 408A     		.short	-30144
 1717 00e0 7B8A     		.short	-30085
 1718 00e2 B58A     		.short	-30027
 1719 00e4 F08A     		.short	-29968
 1720 00e6 2B8B     		.short	-29909
 1721 00e8 668B     		.short	-29850
 1722 00ea A88B     		.short	-29784
 1723 00ec E38B     		.short	-29725
 1724 00ee 258C     		.short	-29659
 1725 00f0 678C     		.short	-29593
 1726 00f2 A98C     		.short	-29527
 1727 00f4 EB8C     		.short	-29461
 1728 00f6 348D     		.short	-29388
 1729 00f8 768D     		.short	-29322
 1730 00fa BF8D     		.short	-29249
 1731 00fc 088E     		.short	-29176
 1732 00fe 528E     		.short	-29102
 1733 0100 9B8E     		.short	-29029
 1734 0102 E58E     		.short	-28955
 1735 0104 358F     		.short	-28875
 1736 0106 868F     		.short	-28794
 1737 0108 D68F     		.short	-28714
 1738 010a 2790     		.short	-28633
 1739 010c 7E90     		.short	-28546
 1740 010e D690     		.short	-28458
 1741 0110 2791     		.short	-28377
 1742 0112 8591     		.short	-28283
 1743 0114 DE91     		.short	-28194
 1744 0116 3C92     		.short	-28100
 1745 0118 9B92     		.short	-28005
 1746 011a FB92     		.short	-27909
 1747 011c 6193     		.short	-27807
 1748 011e C793     		.short	-27705
 1749 0120 2D94     		.short	-27603
 1750 0122 9A94     		.short	-27494
 1751 0124 0895     		.short	-27384
 1752 0126 7595     		.short	-27275
 1753 0128 EA95     		.short	-27158
 1754 012a 5F96     		.short	-27041
 1755 012c D496     		.short	-26924
 1756 012e 5097     		.short	-26800
 1757 0130 CC97     		.short	-26676
 1758 0132 4F98     		.short	-26545
 1759 0134 D298     		.short	-26414
 1760 0136 5D99     		.short	-26275
 1761 0138 E799     		.short	-26137
 1762 013a 799A     		.short	-25991
 1763 013c 0B9B     		.short	-25845
 1764 013e A49B     		.short	-25692
 1765 0140 449C     		.short	-25532
 1766 0142 E59C     		.short	-25371
ARM GAS  /tmp/ccLmOb0L.s 			page 63


 1767 0144 8C9D     		.short	-25204
 1768 0146 3B9E     		.short	-25029
 1769 0148 EA9E     		.short	-24854
 1770 014a A79F     		.short	-24665
 1771 014c 65A0     		.short	-24475
 1772 014e 30A1     		.short	-24272
 1773 0150 FDA1     		.short	-24067
 1774 0152 D0A2     		.short	-23856
 1775 0154 B2A3     		.short	-23630
 1776 0156 9BA4     		.short	-23397
 1777 0158 93A5     		.short	-23149
 1778 015a 99A6     		.short	-22887
 1779 015c 9FA7     		.short	-22625
 1780 015e B4A8     		.short	-22348
 1781 0160 E0A9     		.short	-22048
 1782 0162 19AB     		.short	-21735
 1783 0164 69AC     		.short	-21399
 1784 0166 C7AD     		.short	-21049
 1785 0168 42AF     		.short	-20670
 1786 016a DBB0     		.short	-20261
 1787 016c 91B2     		.short	-19823
 1788 016e 73B4     		.short	-19341
 1789 0170 7BB6     		.short	-18821
 1790 0172 C4B8     		.short	-18236
 1791 0174 56BB     		.short	-17578
 1792 0176 50BE     		.short	-16816
 1793 0178 DDC1     		.short	-15907
 1794 017a 47C6     		.short	-14777
 1795 017c 7ACC     		.short	-13190
 1796 017e 54DD     		.short	-8876
 1797              		.section	.rodata.aOVMGamma.0,"a"
 1798              		.align	2
 1801              	aOVMGamma.0:
 1802 0000 3400     		.short	52
 1803 0002 9A00     		.short	154
 1804 0004 FF00     		.short	255
 1805 0006 6201     		.short	354
 1806 0008 C501     		.short	453
 1807 000a 2702     		.short	551
 1808 000c 8802     		.short	648
 1809 000e F502     		.short	757
 1810 0010 5403     		.short	852
 1811 0012 B303     		.short	947
 1812 0014 1C04     		.short	1052
 1813 0016 8504     		.short	1157
 1814 0018 E104     		.short	1249
 1815 001a 4805     		.short	1352
 1816 001c AE05     		.short	1454
 1817 001e 1E06     		.short	1566
 1818 0020 8206     		.short	1666
 1819 0022 E506     		.short	1765
 1820 0024 5307     		.short	1875
 1821 0026 B407     		.short	1972
 1822 0028 1F08     		.short	2079
 1823 002a 8A08     		.short	2186
 1824 002c F308     		.short	2291
 1825 002e 5B09     		.short	2395
ARM GAS  /tmp/ccLmOb0L.s 			page 64


 1826 0030 C309     		.short	2499
 1827 0032 340A     		.short	2612
 1828 0034 990A     		.short	2713
 1829 0036 080B     		.short	2824
 1830 0038 760B     		.short	2934
 1831 003a E20B     		.short	3042
 1832 003c 4E0C     		.short	3150
 1833 003e C20C     		.short	3266
 1834 0040 2C0D     		.short	3372
 1835 0042 9E0D     		.short	3486
 1836 0044 0F0E     		.short	3599
 1837 0046 7F0E     		.short	3711
 1838 0048 ED0E     		.short	3821
 1839 004a 5B0F     		.short	3931
 1840 004c D10F     		.short	4049
 1841 004e 4610     		.short	4166
 1842 0050 B910     		.short	4281
 1843 0052 2B11     		.short	4395
 1844 0054 A511     		.short	4517
 1845 0056 1D12     		.short	4637
 1846 0058 8C12     		.short	4748
 1847 005a 0B13     		.short	4875
 1848 005c 8013     		.short	4992
 1849 005e FB13     		.short	5115
 1850 0060 7614     		.short	5238
 1851 0062 EF14     		.short	5359
 1852 0064 6F15     		.short	5487
 1853 0066 EE15     		.short	5614
 1854 0068 6B16     		.short	5739
 1855 006a EE16     		.short	5870
 1856 006c 7017     		.short	6000
 1857 006e F117     		.short	6129
 1858 0070 7718     		.short	6263
 1859 0072 FC18     		.short	6396
 1860 0074 8019     		.short	6528
 1861 0076 091A     		.short	6665
 1862 0078 901A     		.short	6800
 1863 007a 1D1B     		.short	6941
 1864 007c A81B     		.short	7080
 1865 007e 381C     		.short	7224
 1866 0080 C71C     		.short	7367
 1867 0082 5A1D     		.short	7514
 1868 0084 EB1D     		.short	7659
 1869 0086 811E     		.short	7809
 1870 0088 1B1F     		.short	7963
 1871 008a B31F     		.short	8115
 1872 008c 5020     		.short	8272
 1873 008e F020     		.short	8432
 1874 0090 8E21     		.short	8590
 1875 0092 3522     		.short	8757
 1876 0094 DA22     		.short	8922
 1877 0096 8823     		.short	9096
 1878 0098 3424     		.short	9268
 1879 009a E224     		.short	9442
 1880 009c 9825     		.short	9624
 1881 009e 5126     		.short	9809
 1882 00a0 1127     		.short	10001
ARM GAS  /tmp/ccLmOb0L.s 			page 65


 1883 00a2 D827     		.short	10200
 1884 00a4 9B28     		.short	10395
 1885 00a6 6529     		.short	10597
 1886 00a8 3A2A     		.short	10810
 1887 00aa 142B     		.short	11028
 1888 00ac F72B     		.short	11255
 1889 00ae DF2C     		.short	11487
 1890 00b0 D32D     		.short	11731
 1891 00b2 D32E     		.short	11987
 1892 00b4 DE2F     		.short	12254
 1893 00b6 FB30     		.short	12539
 1894 00b8 2332     		.short	12835
 1895 00ba 6633     		.short	13158
 1896 00bc C334     		.short	13507
 1897 00be 4736     		.short	13895
 1898 00c0 FF37     		.short	14335
 1899 00c2 053A     		.short	14853
 1900 00c4 AA3C     		.short	15530
 1901 00c6 E542     		.short	17125
 1902              		.text
 1903              	.Letext0:
 1904              		.file 5 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_type
 1905              		.file 6 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 1906              		.file 7 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 1907              		.file 8 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 1908              		.file 9 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 1909              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 1910              		.file 11 "Inc/mc_type.h"
 1911              		.file 12 "Inc/pwm_curr_fdbk.h"
ARM GAS  /tmp/ccLmOb0L.s 			page 66


DEFINED SYMBOLS
                            *ABS*:0000000000000000 pwm_curr_fdbk_ovm.c
     /tmp/ccLmOb0L.s:18     .rodata.OFFSET_TAB_CCMRx:0000000000000000 $d
     /tmp/ccLmOb0L.s:21     .rodata.OFFSET_TAB_CCMRx:0000000000000000 OFFSET_TAB_CCMRx
     /tmp/ccLmOb0L.s:24     .rodata.SHIFT_TAB_OCxx:0000000000000000 $d
     /tmp/ccLmOb0L.s:27     .rodata.SHIFT_TAB_OCxx:0000000000000000 SHIFT_TAB_OCxx
     /tmp/ccLmOb0L.s:30     .rodata.SHIFT_TAB_ICxx:0000000000000000 $d
     /tmp/ccLmOb0L.s:33     .rodata.SHIFT_TAB_ICxx:0000000000000000 SHIFT_TAB_ICxx
     /tmp/ccLmOb0L.s:36     .rodata.SHIFT_TAB_CCxP:0000000000000000 $d
     /tmp/ccLmOb0L.s:39     .rodata.SHIFT_TAB_CCxP:0000000000000000 SHIFT_TAB_CCxP
     /tmp/ccLmOb0L.s:42     .rodata.SHIFT_TAB_OISx:0000000000000000 $d
     /tmp/ccLmOb0L.s:45     .rodata.SHIFT_TAB_OISx:0000000000000000 SHIFT_TAB_OISx
     /tmp/ccLmOb0L.s:48     .rodata.USART_PRESCALER_TAB:0000000000000000 $d
     /tmp/ccLmOb0L.s:51     .rodata.USART_PRESCALER_TAB:0000000000000000 USART_PRESCALER_TAB
     /tmp/ccLmOb0L.s:65     .rodata.CHANNEL_OFFSET_TAB:0000000000000000 $d
     /tmp/ccLmOb0L.s:68     .rodata.CHANNEL_OFFSET_TAB:0000000000000000 CHANNEL_OFFSET_TAB
     /tmp/ccLmOb0L.s:71     .text.LL_CORDIC_IsActiveFlag_RRDY:0000000000000000 $t
     /tmp/ccLmOb0L.s:78     .text.LL_CORDIC_IsActiveFlag_RRDY:0000000000000000 LL_CORDIC_IsActiveFlag_RRDY
     /tmp/ccLmOb0L.s:129    .text.LL_CORDIC_WriteData:0000000000000000 $t
     /tmp/ccLmOb0L.s:135    .text.LL_CORDIC_WriteData:0000000000000000 LL_CORDIC_WriteData
     /tmp/ccLmOb0L.s:176    .text.LL_CORDIC_ReadData:0000000000000000 $t
     /tmp/ccLmOb0L.s:182    .text.LL_CORDIC_ReadData:0000000000000000 LL_CORDIC_ReadData
     /tmp/ccLmOb0L.s:221    .text.MCM_Modulus:0000000000000000 $t
     /tmp/ccLmOb0L.s:227    .text.MCM_Modulus:0000000000000000 MCM_Modulus
     /tmp/ccLmOb0L.s:327    .text.MCM_Modulus:000000000000005c $d
     /tmp/ccLmOb0L.s:333    .text.PWMC_RecalcT1T2_OVM:0000000000000000 $t
     /tmp/ccLmOb0L.s:339    .text.PWMC_RecalcT1T2_OVM:0000000000000000 PWMC_RecalcT1T2_OVM
     /tmp/ccLmOb0L.s:589    .text.PWMC_RecalcT1T2_OVM:0000000000000158 $d
     /tmp/ccLmOb0L.s:594    .text.PWMC_SetPhaseVoltage_OVM:0000000000000000 $t
     /tmp/ccLmOb0L.s:601    .text.PWMC_SetPhaseVoltage_OVM:0000000000000000 PWMC_SetPhaseVoltage_OVM
     /tmp/ccLmOb0L.s:1069   .text.PWMC_SetPhaseVoltage_OVM:00000000000002f8 $d
     /tmp/ccLmOb0L.s:1604   .rodata.aOVMGain.1:0000000000000000 aOVMGain.1
     /tmp/ccLmOb0L.s:1801   .rodata.aOVMGamma.0:0000000000000000 aOVMGamma.0
     /tmp/ccLmOb0L.s:1074   .text.PWMC_SetPhaseVoltage_OVM:0000000000000304 $t
     /tmp/ccLmOb0L.s:1601   .rodata.aOVMGain.1:0000000000000000 $d
     /tmp/ccLmOb0L.s:1798   .rodata.aOVMGamma.0:0000000000000000 $d

NO UNDEFINED SYMBOLS
