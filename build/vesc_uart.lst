ARM GAS  /tmp/ccZgF6fk.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"vesc_uart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.VESC_UART_Init,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	VESC_UART_Init
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	VESC_UART_Init:
  28              	.LFB1873:
  29              		.file 1 "Src/vesc_uart.c"
   1:Src/vesc_uart.c **** #include "vesc_uart.h"
   2:Src/vesc_uart.c **** #include "freertos_vars.h"
   3:Src/vesc_uart.c **** #include "main.h"
   4:Src/vesc_uart.c **** 
   5:Src/vesc_uart.c **** /* Static Variables */
   6:Src/vesc_uart.c **** static UART_Handle_t uart_handle;
   7:Src/vesc_uart.c **** volatile bool tx_in_progress = false;
   8:Src/vesc_uart.c **** static volatile bool dma_busy = false;
   9:Src/vesc_uart.c **** 
  10:Src/vesc_uart.c **** 
  11:Src/vesc_uart.c **** /* Private Function Prototypes */
  12:Src/vesc_uart.c **** static void ConfigureDMA(void)
  13:Src/vesc_uart.c **** {
  14:Src/vesc_uart.c ****     /* Configure DMA1 Channel 1 for UART RX */
  15:Src/vesc_uart.c ****     LL_DMA_DisableChannel(VESC_DMA, VESC_DMA_RX_CHANNEL);
  16:Src/vesc_uart.c ****     
  17:Src/vesc_uart.c ****     /* Configure RX DMA parameters */
  18:Src/vesc_uart.c ****     LL_DMA_SetPeriphAddress(VESC_DMA, VESC_DMA_RX_CHANNEL, (uint32_t)&VESC_UART->RDR);
  19:Src/vesc_uart.c ****     LL_DMA_SetMode(VESC_DMA, VESC_DMA_RX_CHANNEL, LL_DMA_MODE_CIRCULAR);
  20:Src/vesc_uart.c ****     LL_DMA_SetPeriphIncMode(VESC_DMA, VESC_DMA_RX_CHANNEL, LL_DMA_PERIPH_NOINCREMENT);
  21:Src/vesc_uart.c ****     LL_DMA_SetMemoryIncMode(VESC_DMA, VESC_DMA_RX_CHANNEL, LL_DMA_MEMORY_INCREMENT);
  22:Src/vesc_uart.c ****     LL_DMA_SetPeriphSize(VESC_DMA, VESC_DMA_RX_CHANNEL, LL_DMA_PDATAALIGN_BYTE);
  23:Src/vesc_uart.c ****     LL_DMA_SetMemorySize(VESC_DMA, VESC_DMA_RX_CHANNEL, LL_DMA_MDATAALIGN_BYTE);
  24:Src/vesc_uart.c ****     LL_DMA_SetChannelPriorityLevel(VESC_DMA, VESC_DMA_RX_CHANNEL, LL_DMA_PRIORITY_HIGH);
  25:Src/vesc_uart.c ****     LL_DMA_EnableIT_TC(VESC_DMA, VESC_DMA_RX_CHANNEL);
  26:Src/vesc_uart.c **** 
  27:Src/vesc_uart.c ****     /* Configure DMA1 Channel 2 for UART TX */
  28:Src/vesc_uart.c ****     LL_DMA_DisableChannel(VESC_DMA, VESC_DMA_TX_CHANNEL);
  29:Src/vesc_uart.c ****     
ARM GAS  /tmp/ccZgF6fk.s 			page 2


  30:Src/vesc_uart.c ****     /* Configure TX DMA parameters */
  31:Src/vesc_uart.c ****     LL_DMA_SetPeriphAddress(VESC_DMA, VESC_DMA_TX_CHANNEL, (uint32_t)&VESC_UART->TDR);
  32:Src/vesc_uart.c ****     LL_DMA_SetMode(VESC_DMA, VESC_DMA_TX_CHANNEL, LL_DMA_MODE_NORMAL);
  33:Src/vesc_uart.c ****     LL_DMA_SetPeriphIncMode(VESC_DMA, VESC_DMA_TX_CHANNEL, LL_DMA_PERIPH_NOINCREMENT);
  34:Src/vesc_uart.c ****     LL_DMA_SetMemoryIncMode(VESC_DMA, VESC_DMA_TX_CHANNEL, LL_DMA_MEMORY_INCREMENT);
  35:Src/vesc_uart.c ****     LL_DMA_SetPeriphSize(VESC_DMA, VESC_DMA_TX_CHANNEL, LL_DMA_PDATAALIGN_BYTE);
  36:Src/vesc_uart.c ****     LL_DMA_SetMemorySize(VESC_DMA, VESC_DMA_TX_CHANNEL, LL_DMA_MDATAALIGN_BYTE);
  37:Src/vesc_uart.c ****     LL_DMA_SetChannelPriorityLevel(VESC_DMA, VESC_DMA_TX_CHANNEL, LL_DMA_PRIORITY_HIGH);
  38:Src/vesc_uart.c ****     LL_DMA_EnableIT_TC(VESC_DMA, VESC_DMA_TX_CHANNEL);
  39:Src/vesc_uart.c **** 
  40:Src/vesc_uart.c ****     /* Enable DMA requests */
  41:Src/vesc_uart.c ****     LL_USART_EnableDMAReq_RX(VESC_UART);
  42:Src/vesc_uart.c ****     LL_USART_EnableDMAReq_TX(VESC_UART);
  43:Src/vesc_uart.c **** 
  44:Src/vesc_uart.c ****     /* Configure NVIC for DMA interrupts */
  45:Src/vesc_uart.c ****     // NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
  46:Src/vesc_uart.c ****     // NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
  47:Src/vesc_uart.c ****     // NVIC_EnableIRQ(DMA1_Channel1_IRQn);
  48:Src/vesc_uart.c ****     // NVIC_EnableIRQ(DMA1_Channel2_IRQn);
  49:Src/vesc_uart.c **** };
  50:Src/vesc_uart.c **** 
  51:Src/vesc_uart.c **** 
  52:Src/vesc_uart.c **** void VESC_UART_Init(void)
  53:Src/vesc_uart.c **** {
  30              		.loc 1 53 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 8
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  54:Src/vesc_uart.c ****     /* Reset handle structure */
  55:Src/vesc_uart.c ****     uart_handle.rx_pos = 0;
  35              		.loc 1 55 5 view .LVU1
  36              	.LBB163:
  56:Src/vesc_uart.c ****     uart_handle.rx_complete = false;
  57:Src/vesc_uart.c ****     uart_handle.last_rx_size = 0;
  58:Src/vesc_uart.c ****     uart_handle.last_alive_time = 0;
  59:Src/vesc_uart.c **** 
  60:Src/vesc_uart.c ****     /* Enable DMA1 clock */
  61:Src/vesc_uart.c ****     __HAL_RCC_DMA1_CLK_ENABLE();
  37              		.loc 1 61 5 is_stmt 0 view .LVU2
  38 0000 454A     		ldr	r2, .L10+8
  39              	.LBE163:
  40              	.LBB164:
  41              	.LBB165:
  42              	.LBB166:
  43              		.file 2 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
   1:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
   2:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   ******************************************************************************
   3:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @file    stm32g4xx_ll_dma.h
   4:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @author  MCD Application Team
   5:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief   Header file of DMA LL module.
   6:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   ******************************************************************************
   7:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @attention
   8:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *
   9:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * Copyright (c) 2019 STMicroelectronics.
  10:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * All rights reserved.
  11:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *
ARM GAS  /tmp/ccZgF6fk.s 			page 3


  12:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * in the root directory of this software component.
  14:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *
  16:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   ******************************************************************************
  17:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
  18:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
  19:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #ifndef __STM32G4xx_LL_DMA_H
  21:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define __STM32G4xx_LL_DMA_H
  22:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
  23:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #ifdef __cplusplus
  24:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** extern "C" {
  25:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif
  26:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
  27:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #include "stm32g4xx.h"
  29:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #include "stm32g4xx_ll_dmamux.h"
  30:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
  31:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @addtogroup STM32G4xx_LL_Driver
  32:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
  33:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
  34:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
  35:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1) || defined (DMA2)
  36:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
  37:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL DMA
  38:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
  39:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
  40:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
  41:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Variables DMA Private Variables
  44:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
  45:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
  46:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /* Array used to get the DMA channel register offset versus channel index LL_DMA_CHANNEL_x */
  47:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** static const uint8_t CHANNEL_OFFSET_TAB[] =
  48:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
  49:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   (uint8_t)(DMA1_Channel1_BASE - DMA1_BASE),
  50:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   (uint8_t)(DMA1_Channel2_BASE - DMA1_BASE),
  51:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   (uint8_t)(DMA1_Channel3_BASE - DMA1_BASE),
  52:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   (uint8_t)(DMA1_Channel4_BASE - DMA1_BASE),
  53:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   (uint8_t)(DMA1_Channel5_BASE - DMA1_BASE),
  54:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   (uint8_t)(DMA1_Channel6_BASE - DMA1_BASE)
  55:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel7)
  56:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   ,
  57:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   (uint8_t)(DMA1_Channel7_BASE - DMA1_BASE)
  58:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel7 */
  59:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel8)
  60:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   ,
  61:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   (uint8_t)(DMA1_Channel8_BASE - DMA1_BASE)
  62:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel8 */
  63:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** };
  64:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
  65:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
  66:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
  67:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
  68:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /* Private constants ---------------------------------------------------------*/
ARM GAS  /tmp/ccZgF6fk.s 			page 4


  69:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Constants DMA Private Constants
  70:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
  71:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
  72:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /* Define used to get CSELR register offset */
  73:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define DMA_CSELR_OFFSET                  (uint32_t)(DMA1_CSELR_BASE - DMA1_BASE)
  74:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
  75:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /* Defines used for the bit position in the register and perform offsets */
  76:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define DMA_POSITION_CSELR_CXS            POSITION_VAL(DMA_CSELR_C1S << ((Channel-1U)*4U))
  77:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
  78:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
  79:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
  80:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
  81:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /* Private macros ------------------------------------------------------------*/
  82:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
  83:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_Private_Macros DMA Private Macros
  84:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
  85:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
  86:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
  87:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
  88:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
  89:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
  90:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
  91:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /* Exported types ------------------------------------------------------------*/
  92:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
  93:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_ES_INIT DMA Exported Init structure
  94:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
  95:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
  96:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** typedef struct
  97:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
  98:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcAddress;  /*!< Specifies the peripheral base address for DMA transfer
  99:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         or as Source base address in case of memory to memory trans
 100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t MemoryOrM2MDstAddress;  /*!< Specifies the memory base address for DMA transfer
 104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         or as Destination base address in case of memory to memory 
 105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t Direction;              /*!< Specifies if the data will be transferred from memory to pe
 109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         from memory to memory or from peripheral to memory.
 110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_DIRECTION
 111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t Mode;                   /*!< Specifies the normal or circular operation mode.
 115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MODE
 116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         @note: The circular buffer mode cannot be used if the memor
 117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                                data transfer direction is configured on the selecte
 118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcIncMode;  /*!< Specifies whether the Peripheral address or Source address 
 122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         is incremented or not.
 123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PERIPH
 124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
ARM GAS  /tmp/ccZgF6fk.s 			page 5


 126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t MemoryOrM2MDstIncMode;  /*!< Specifies whether the Memory address or Destination address
 128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         is incremented or not.
 129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MEMORY
 130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t PeriphOrM2MSrcDataSize; /*!< Specifies the Peripheral data size alignment or Source data
 134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         in case of memory to memory transfer direction.
 135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PDATAALIGN
 136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t MemoryOrM2MDstDataSize; /*!< Specifies the Memory data size alignment or Destination dat
 140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         in case of memory to memory transfer direction.
 141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_MDATAALIGN
 142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t NbData;                 /*!< Specifies the number of data to transfer, in data unit.
 146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         The data unit is equal to the source buffer configuration s
 147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         or MemorySize parameters depending in the transfer directio
 148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This parameter must be a value between Min_Data = 0 and Max
 149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t PeriphRequest;          /*!< Specifies the peripheral request.
 153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMAMUX_LL_EC_REQUEST
 154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t Priority;               /*!< Specifies the channel priority level.
 158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This parameter can be a value of @ref DMA_LL_EC_PRIORITY
 159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                         This feature can be modified afterwards using unitary funct
 161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** } LL_DMA_InitTypeDef;
 163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
 165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
 167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /* Exported constants --------------------------------------------------------*/
 169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Constants DMA Exported Constants
 170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
 171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_CLEAR_FLAG Clear Flags Defines
 173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief    Flags defines which can be used with LL_DMA_WriteReg function
 174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
 175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF1                 DMA_IFCR_CGIF1        /*!< Channel 1 global flag         
 177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF1                DMA_IFCR_CTCIF1       /*!< Channel 1 transfer complete fl
 178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF1                DMA_IFCR_CHTIF1       /*!< Channel 1 half transfer flag  
 179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF1                DMA_IFCR_CTEIF1       /*!< Channel 1 transfer error flag 
 180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF2                 DMA_IFCR_CGIF2        /*!< Channel 2 global flag         
 181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF2                DMA_IFCR_CTCIF2       /*!< Channel 2 transfer complete fl
 182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF2                DMA_IFCR_CHTIF2       /*!< Channel 2 half transfer flag  
ARM GAS  /tmp/ccZgF6fk.s 			page 6


 183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF2                DMA_IFCR_CTEIF2       /*!< Channel 2 transfer error flag 
 184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF3                 DMA_IFCR_CGIF3        /*!< Channel 3 global flag         
 185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF3                DMA_IFCR_CTCIF3       /*!< Channel 3 transfer complete fl
 186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF3                DMA_IFCR_CHTIF3       /*!< Channel 3 half transfer flag  
 187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF3                DMA_IFCR_CTEIF3       /*!< Channel 3 transfer error flag 
 188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF4                 DMA_IFCR_CGIF4        /*!< Channel 4 global flag         
 189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF4                DMA_IFCR_CTCIF4       /*!< Channel 4 transfer complete fl
 190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF4                DMA_IFCR_CHTIF4       /*!< Channel 4 half transfer flag  
 191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF4                DMA_IFCR_CTEIF4       /*!< Channel 4 transfer error flag 
 192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF5                 DMA_IFCR_CGIF5        /*!< Channel 5 global flag         
 193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF5                DMA_IFCR_CTCIF5       /*!< Channel 5 transfer complete fl
 194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF5                DMA_IFCR_CHTIF5       /*!< Channel 5 half transfer flag  
 195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF5                DMA_IFCR_CTEIF5       /*!< Channel 5 transfer error flag 
 196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF6                 DMA_IFCR_CGIF6        /*!< Channel 6 global flag         
 197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF6                DMA_IFCR_CTCIF6       /*!< Channel 6 transfer complete fl
 198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF6                DMA_IFCR_CHTIF6       /*!< Channel 6 half transfer flag  
 199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF6                DMA_IFCR_CTEIF6       /*!< Channel 6 transfer error flag 
 200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel7)
 201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF7                 DMA_IFCR_CGIF7        /*!< Channel 7 global flag         
 202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF7                DMA_IFCR_CTCIF7       /*!< Channel 7 transfer complete fl
 203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF7                DMA_IFCR_CHTIF7       /*!< Channel 7 half transfer flag  
 204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF7                DMA_IFCR_CTEIF7       /*!< Channel 7 transfer error flag 
 205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel7 */
 206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel8)
 207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CGIF8                 DMA_IFCR_CGIF8        /*!< Channel 8 global flag         
 208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CTCIF8                DMA_IFCR_CTCIF8       /*!< Channel 8 transfer complete fl
 209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CHTIF8                DMA_IFCR_CHTIF8       /*!< Channel 8 half transfer flag  
 210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_IFCR_CTEIF8                DMA_IFCR_CTEIF8       /*!< Channel 8 transfer error flag 
 211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel8 */
 212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
 214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_GET_FLAG Get Flags Defines
 217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief    Flags defines which can be used with LL_DMA_ReadReg function
 218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
 219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_GIF1                   DMA_ISR_GIF1          /*!< Channel 1 global flag         
 221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_TCIF1                  DMA_ISR_TCIF1         /*!< Channel 1 transfer complete fl
 222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_HTIF1                  DMA_ISR_HTIF1         /*!< Channel 1 half transfer flag  
 223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_TEIF1                  DMA_ISR_TEIF1         /*!< Channel 1 transfer error flag 
 224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_GIF2                   DMA_ISR_GIF2          /*!< Channel 2 global flag         
 225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_TCIF2                  DMA_ISR_TCIF2         /*!< Channel 2 transfer complete fl
 226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_HTIF2                  DMA_ISR_HTIF2         /*!< Channel 2 half transfer flag  
 227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_TEIF2                  DMA_ISR_TEIF2         /*!< Channel 2 transfer error flag 
 228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_GIF3                   DMA_ISR_GIF3          /*!< Channel 3 global flag         
 229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_TCIF3                  DMA_ISR_TCIF3         /*!< Channel 3 transfer complete fl
 230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_HTIF3                  DMA_ISR_HTIF3         /*!< Channel 3 half transfer flag  
 231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_TEIF3                  DMA_ISR_TEIF3         /*!< Channel 3 transfer error flag 
 232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_GIF4                   DMA_ISR_GIF4          /*!< Channel 4 global flag         
 233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_TCIF4                  DMA_ISR_TCIF4         /*!< Channel 4 transfer complete fl
 234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_HTIF4                  DMA_ISR_HTIF4         /*!< Channel 4 half transfer flag  
 235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_TEIF4                  DMA_ISR_TEIF4         /*!< Channel 4 transfer error flag 
 236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_GIF5                   DMA_ISR_GIF5          /*!< Channel 5 global flag         
 237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_TCIF5                  DMA_ISR_TCIF5         /*!< Channel 5 transfer complete fl
 238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_HTIF5                  DMA_ISR_HTIF5         /*!< Channel 5 half transfer flag  
 239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_TEIF5                  DMA_ISR_TEIF5         /*!< Channel 5 transfer error flag 
ARM GAS  /tmp/ccZgF6fk.s 			page 7


 240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_GIF6                   DMA_ISR_GIF6          /*!< Channel 6 global flag         
 241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_TCIF6                  DMA_ISR_TCIF6         /*!< Channel 6 transfer complete fl
 242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_HTIF6                  DMA_ISR_HTIF6         /*!< Channel 6 half transfer flag  
 243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_TEIF6                  DMA_ISR_TEIF6         /*!< Channel 6 transfer error flag 
 244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel7)
 245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_GIF7                   DMA_ISR_GIF7          /*!< Channel 7 global flag         
 246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_TCIF7                  DMA_ISR_TCIF7         /*!< Channel 7 transfer complete fl
 247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_HTIF7                  DMA_ISR_HTIF7         /*!< Channel 7 half transfer flag  
 248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_TEIF7                  DMA_ISR_TEIF7         /*!< Channel 7 transfer error flag 
 249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel7 */
 250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel8)
 251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_GIF8                   DMA_ISR_GIF8          /*!< Channel 8 global flag         
 252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_TCIF8                  DMA_ISR_TCIF8         /*!< Channel 8 transfer complete fl
 253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_HTIF8                  DMA_ISR_HTIF8         /*!< Channel 8 half transfer flag  
 254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ISR_TEIF8                  DMA_ISR_TEIF8         /*!< Channel 8 transfer error flag 
 255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel8 */
 256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
 258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_IT IT Defines
 261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief    IT defines which can be used with LL_DMA_ReadReg and  LL_DMA_WriteReg functions
 262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
 263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_CCR_TCIE                   DMA_CCR_TCIE          /*!< Transfer complete interrupt */
 265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_CCR_HTIE                   DMA_CCR_HTIE          /*!< Half Transfer interrupt     */
 266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_CCR_TEIE                   DMA_CCR_TEIE          /*!< Transfer error interrupt    */
 267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
 269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_CHANNEL CHANNEL
 272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
 273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_CHANNEL_1                  0x00000000U /*!< DMA Channel 1 */
 275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_CHANNEL_2                  0x00000001U /*!< DMA Channel 2 */
 276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_CHANNEL_3                  0x00000002U /*!< DMA Channel 3 */
 277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_CHANNEL_4                  0x00000003U /*!< DMA Channel 4 */
 278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_CHANNEL_5                  0x00000004U /*!< DMA Channel 5 */
 279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_CHANNEL_6                  0x00000005U /*!< DMA Channel 6 */
 280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel7)
 281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_CHANNEL_7                  0x00000006U /*!< DMA Channel 7 */
 282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel7 */
 283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel8)
 284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_CHANNEL_8                  0x00000007U /*!< DMA Channel 8 */
 285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel8 */
 286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined(USE_FULL_LL_DRIVER)
 287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_CHANNEL_ALL                0xFFFF0000U /*!< DMA Channel all (used only for function 
 288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /*USE_FULL_LL_DRIVER*/
 289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
 291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_DIRECTION Transfer Direction
 294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
 295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_DIRECTION_PERIPH_TO_MEMORY 0x00000000U             /*!< Peripheral to memory directi
ARM GAS  /tmp/ccZgF6fk.s 			page 8


 297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_DIRECTION_MEMORY_TO_PERIPH DMA_CCR_DIR             /*!< Memory to peripheral directi
 298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_DIRECTION_MEMORY_TO_MEMORY DMA_CCR_MEM2MEM         /*!< Memory to memory direction  
 299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
 301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MODE Transfer mode
 304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
 305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_MODE_NORMAL                0x00000000U             /*!< Normal Mode                 
 307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_MODE_CIRCULAR              DMA_CCR_CIRC            /*!< Circular Mode               
 308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
 310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PERIPH Peripheral increment mode
 313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
 314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_PERIPH_INCREMENT           DMA_CCR_PINC            /*!< Peripheral increment mode En
 316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_PERIPH_NOINCREMENT         0x00000000U             /*!< Peripheral increment mode Di
 317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
 319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MEMORY Memory increment mode
 322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
 323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_MEMORY_INCREMENT           DMA_CCR_MINC            /*!< Memory increment mode Enable
 325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_MEMORY_NOINCREMENT         0x00000000U             /*!< Memory increment mode Disabl
 326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
 328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PDATAALIGN Peripheral data alignment
 331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
 332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_BYTE            0x00000000U             /*!< Peripheral data alignment : 
 334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_HALFWORD        DMA_CCR_PSIZE_0         /*!< Peripheral data alignment : 
 335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_PDATAALIGN_WORD            DMA_CCR_PSIZE_1         /*!< Peripheral data alignment : 
 336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
 338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_MDATAALIGN Memory data alignment
 341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
 342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_BYTE            0x00000000U             /*!< Memory data alignment : Byte
 344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_HALFWORD        DMA_CCR_MSIZE_0         /*!< Memory data alignment : Half
 345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_MDATAALIGN_WORD            DMA_CCR_MSIZE_1         /*!< Memory data alignment : Word
 346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
 348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_EC_PRIORITY Transfer Priority level
 351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
 352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_PRIORITY_LOW               0x00000000U             /*!< Priority level : Low       *
ARM GAS  /tmp/ccZgF6fk.s 			page 9


 354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_PRIORITY_MEDIUM            DMA_CCR_PL_0            /*!< Priority level : Medium    *
 355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_PRIORITY_HIGH              DMA_CCR_PL_1            /*!< Priority level : High      *
 356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_PRIORITY_VERYHIGH          DMA_CCR_PL              /*!< Priority level : Very_High *
 357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
 359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
 363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /* Exported macro ------------------------------------------------------------*/
 366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Macros DMA Exported Macros
 367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
 368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_EM_WRITE_READ Common Write and read registers macros
 371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
 372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Write a value in DMA register
 375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  __INSTANCE__ DMA Instance
 376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  __REG__ Register to be written
 377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  __VALUE__ Value to be written in the register
 378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
 379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
 381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Read a value in DMA register
 384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  __INSTANCE__ DMA Instance
 385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  __REG__ Register to be read
 386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval Register value
 387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define LL_DMA_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
 391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_EM_CONVERT_DMAxCHANNELy Convert DMAxChannely
 394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
 395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Convert DMAx_Channely into DMAx
 398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  __CHANNEL_INSTANCE__ DMAx_Channely
 399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval DMAx
 400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel8)
 402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define __LL_DMA_GET_INSTANCE(__CHANNEL_INSTANCE__)   \
 403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   (((uint32_t)(__CHANNEL_INSTANCE__) > ((uint32_t)DMA1_Channel8)) ?  DMA2 : DMA1)
 404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #else
 405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define __LL_DMA_GET_INSTANCE(__CHANNEL_INSTANCE__)   \
 406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   (((uint32_t)(__CHANNEL_INSTANCE__) > ((uint32_t)DMA1_Channel6)) ?  DMA2 : DMA1)
 407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel8 */
 408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Convert DMAx_Channely into LL_DMA_CHANNEL_y
 410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  __CHANNEL_INSTANCE__ DMAx_Channely
ARM GAS  /tmp/ccZgF6fk.s 			page 10


 411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval LL_DMA_CHANNEL_y
 412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel8)
 414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel1)) ? LL_DMA_CHANNEL_1 : \
 417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel2)) ? LL_DMA_CHANNEL_2 : \
 419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel3)) ? LL_DMA_CHANNEL_3 : \
 421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel4)) ? LL_DMA_CHANNEL_4 : \
 423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
 424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel5)) ? LL_DMA_CHANNEL_5 : \
 425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel6)) ? LL_DMA_CHANNEL_6 : \
 426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel6)) ? LL_DMA_CHANNEL_6 : \
 427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel7)) ? LL_DMA_CHANNEL_7 : \
 428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel7)) ? LL_DMA_CHANNEL_7 : \
 429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    LL_DMA_CHANNEL_8)
 430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #else
 431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
 432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
 433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel1)) ? LL_DMA_CHANNEL_1 : \
 434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
 435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel2)) ? LL_DMA_CHANNEL_2 : \
 436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
 437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel3)) ? LL_DMA_CHANNEL_3 : \
 438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
 439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel4)) ? LL_DMA_CHANNEL_4 : \
 440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
 441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel5)) ? LL_DMA_CHANNEL_5 : \
 442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    LL_DMA_CHANNEL_6)
 443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel8 */
 444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Convert DMA Instance DMAx and LL_DMA_CHANNEL_y into DMAx_Channely
 447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  __DMA_INSTANCE__ DMAx
 448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  __CHANNEL__ LL_DMA_CHANNEL_y
 449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval DMAx_Channely
 450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel8)
 452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
ARM GAS  /tmp/ccZgF6fk.s 			page 11


 468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    DMA2_Channel8)
 469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #else
 470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
 471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL
 482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****    DMA2_Channel6)
 483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel8 */
 484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
 487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
 491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /* Exported functions --------------------------------------------------------*/
 494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_Exported_Functions DMA Exported Functions
 495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
 496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_EF_Configuration Configuration
 499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
 500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Enable DMA channel.
 503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_EnableChannel
 504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
 513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
 514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
 515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
 516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, 
 521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Disable DMA channel.
ARM GAS  /tmp/ccZgF6fk.s 			page 12


 525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_DisableChannel
 526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
 535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
 536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
 537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
 538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR
  44              		.loc 2 542 3 view .LVU3
  45 0002 464B     		ldr	r3, .L10+12
  46              	.LBE166:
  47              	.LBE165:
  48              	.LBE164:
  49              	.LBB251:
  50              		.loc 1 61 5 view .LVU4
  51 0004 916C     		ldr	r1, [r2, #72]
  52              	.LBE251:
  55:Src/vesc_uart.c ****     uart_handle.rx_complete = false;
  53              		.loc 1 55 24 view .LVU5
  54 0006 4648     		ldr	r0, .L10+16
  53:Src/vesc_uart.c ****     /* Reset handle structure */
  55              		.loc 1 53 1 view .LVU6
  56 0008 30B4     		push	{r4, r5}
  57              	.LCFI0:
  58              		.cfi_def_cfa_offset 8
  59              		.cfi_offset 4, -8
  60              		.cfi_offset 5, -4
  61              	.LBB252:
  62              		.loc 1 61 5 view .LVU7
  63 000a 41F00101 		orr	r1, r1, #1
  64 000e 9164     		str	r1, [r2, #72]
  65 0010 926C     		ldr	r2, [r2, #72]
  66              	.LBE252:
  67              	.LBB253:
  68              	.LBB169:
  69              	.LBB170:
 543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Check if DMA channel is enabled or disabled.
 547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CCR          EN            LL_DMA_IsEnabledChannel
 548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
ARM GAS  /tmp/ccZgF6fk.s 			page 13


 554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
 557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
 558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
 559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
 560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsEnabledChannel(DMA_TypeDef *DMAx, uint32_t Channel)
 562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]
 565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                     DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Configure all parameters link to DMA transfer.
 570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_ConfigTransfer\n
 571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_ConfigTransfer\n
 572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CCR          CIRC          LL_DMA_ConfigTransfer\n
 573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CCR          PINC          LL_DMA_ConfigTransfer\n
 574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CCR          MINC          LL_DMA_ConfigTransfer\n
 575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CCR          PSIZE         LL_DMA_ConfigTransfer\n
 576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CCR          MSIZE         LL_DMA_ConfigTransfer\n
 577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CCR          PL            LL_DMA_ConfigTransfer
 578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
 587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
 588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
 589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Configuration This parameter must be a combination of all the following values:
 590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY or @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH o
 591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL or @ref LL_DMA_MODE_CIRCULAR
 592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT or @ref LL_DMA_PERIPH_NOINCREMENT
 593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT or @ref LL_DMA_MEMORY_NOINCREMENT
 594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE or @ref LL_DMA_PDATAALIGN_HALFWORD or @ref LL_DMA_PDAT
 595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDAT
 596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HI
 597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
 598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configurat
 600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_P
 604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              Configuration);
 605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Set Data transfer direction (read from peripheral or from memory).
 609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_SetDataTransferDirection\n
 610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_SetDataTransferDirection
ARM GAS  /tmp/ccZgF6fk.s 			page 14


 611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
 620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
 621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
 622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Direction This parameter can be one of the following values:
 623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
 627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t 
 629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
 633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Data transfer direction (read from peripheral or from memory).
 637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CCR          DIR           LL_DMA_GetDataTransferDirection\n
 638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CCR          MEM2MEM       LL_DMA_GetDataTransferDirection
 639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
 648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
 649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
 650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
 652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
 653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
 654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
 656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])
 659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                    DMA_CCR_DIR | DMA_CCR_MEM2MEM));
 660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Set DMA mode circular or normal.
 664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note The circular buffer mode cannot be used if the memory-to-memory
 665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * data transfer is configured on the selected Channel.
 666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CCR          CIRC          LL_DMA_SetMode
 667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
ARM GAS  /tmp/ccZgF6fk.s 			page 15


 668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
 676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
 677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
 678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Mode This parameter can be one of the following values:
 679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL
 680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_CIRCULAR
 681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
 682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
 684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              Mode);
 688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get DMA mode circular or normal.
 692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CCR          CIRC          LL_DMA_GetMode
 693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
 702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
 703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
 704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_NORMAL
 706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MODE_CIRCULAR
 707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Channel)
 709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])
 712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                    DMA_CCR_CIRC));
 713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Set Peripheral increment mode.
 717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CCR          PINC          LL_DMA_SetPeriphIncMode
 718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
ARM GAS  /tmp/ccZgF6fk.s 			page 16


 725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
 727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
 728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
 729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  PeriphOrM2MSrcIncMode This parameter can be one of the following values:
 730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT
 731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
 732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
 733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOr
 735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              PeriphOrM2MSrcIncMode);
 739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Peripheral increment mode.
 743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CCR          PINC          LL_DMA_GetPeriphIncMode
 744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 746:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 747:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 748:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 749:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 750:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 751:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 752:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
 753:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
 754:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
 755:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 756:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_INCREMENT
 757:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
 758:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 759:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
 760:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 761:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 762:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])
 763:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                    DMA_CCR_PINC));
 764:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 765:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 766:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 767:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Set Memory increment mode.
 768:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CCR          MINC          LL_DMA_SetMemoryIncMode
 769:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 770:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 771:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 772:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 773:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 774:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 775:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 776:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 777:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
 778:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
 779:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
 780:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  MemoryOrM2MDstIncMode This parameter can be one of the following values:
 781:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT
ARM GAS  /tmp/ccZgF6fk.s 			page 17


 782:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
 783:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
 784:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 785:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOr
 786:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 787:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 789:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              MemoryOrM2MDstIncMode);
 790:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 791:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 792:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 793:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Memory increment mode.
 794:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CCR          MINC          LL_DMA_GetMemoryIncMode
 795:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 796:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 797:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 798:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 799:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 800:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 801:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 802:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 803:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
 804:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
 805:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
 806:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 807:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_INCREMENT
 808:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
 809:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 810:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
 811:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 812:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 813:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])
 814:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                    DMA_CCR_MINC));
 815:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 816:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 817:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 818:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Set Peripheral size.
 819:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CCR          PSIZE         LL_DMA_SetPeriphSize
 820:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 821:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 822:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 823:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 824:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 825:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 826:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 827:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 828:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
 829:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
 830:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
 831:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  PeriphOrM2MSrcDataSize This parameter can be one of the following values:
 832:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE
 833:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
 834:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_WORD
 835:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
 836:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 837:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2M
 838:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
ARM GAS  /tmp/ccZgF6fk.s 			page 18


 839:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 841:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
 842:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 843:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 844:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 845:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Peripheral size.
 846:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CCR          PSIZE         LL_DMA_GetPeriphSize
 847:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 848:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 849:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 850:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 851:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 852:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 853:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 854:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 855:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
 856:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
 857:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
 858:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 859:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_BYTE
 860:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
 861:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PDATAALIGN_WORD
 862:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 863:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel)
 864:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 865:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 866:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])
 867:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                    DMA_CCR_PSIZE));
 868:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 869:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 870:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 871:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Set Memory size.
 872:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CCR          MSIZE         LL_DMA_SetMemorySize
 873:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 874:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 875:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 876:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 877:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 878:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 879:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 880:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 881:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
 882:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
 883:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
 884:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  MemoryOrM2MDstDataSize This parameter can be one of the following values:
 885:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE
 886:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
 887:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_WORD
 888:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
 889:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 890:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2M
 891:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 892:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 893:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 894:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              MemoryOrM2MDstDataSize);
 895:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
ARM GAS  /tmp/ccZgF6fk.s 			page 19


 896:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 897:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 898:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Memory size.
 899:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CCR          MSIZE         LL_DMA_GetMemorySize
 900:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 901:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 902:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 903:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 904:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 905:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 906:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 907:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 908:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
 909:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
 910:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
 911:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 912:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_BYTE
 913:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
 914:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_MDATAALIGN_WORD
 915:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 916:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel)
 917:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 918:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 919:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])
 920:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                    DMA_CCR_MSIZE));
 921:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 922:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 923:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 924:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Set Channel priority level.
 925:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CCR          PL            LL_DMA_SetChannelPriorityLevel
 926:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 927:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 928:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 929:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 930:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 931:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 932:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 933:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 934:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
 935:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
 936:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
 937:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Priority This parameter can be one of the following values:
 938:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW
 939:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_MEDIUM
 940:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_HIGH
 941:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
 942:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
 943:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 944:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t P
 945:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 946:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 947:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 948:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              Priority);
 949:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 950:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 951:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 952:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel priority level.
ARM GAS  /tmp/ccZgF6fk.s 			page 20


 953:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CCR          PL            LL_DMA_GetChannelPriorityLevel
 954:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 955:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 956:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 957:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 958:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 959:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 960:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 961:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 962:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
 963:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
 964:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
 965:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
 966:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_LOW
 967:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_MEDIUM
 968:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_HIGH
 969:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
 970:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 971:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel)
 972:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 973:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
 974:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])
 975:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                    DMA_CCR_PL));
 976:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 977:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
 978:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
 979:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Set Number of data to transfer.
 980:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note   This action has no effect if
 981:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         channel is enabled.
 982:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CNDTR        NDT           LL_DMA_SetDataLength
 983:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
 984:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
 985:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
 986:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
 987:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
 988:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
 989:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
 990:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
 991:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
 992:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
 993:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
 994:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
 995:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
 996:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
 997:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
 998:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 999:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1000:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CN
1001:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              DMA_CNDTR_NDT, NbData);
1002:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1003:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1004:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1005:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Number of data to transfer.
1006:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note   Once the channel is enabled, the return value indicate the
1007:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         remaining bytes to be transmitted.
1008:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CNDTR        NDT           LL_DMA_GetDataLength
1009:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
ARM GAS  /tmp/ccZgF6fk.s 			page 21


1010:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1011:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1012:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1013:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1014:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1015:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1016:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1017:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
1018:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
1019:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
1020:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1021:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1022:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
1023:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1024:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1025:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])
1026:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                    DMA_CNDTR_NDT));
1027:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1028:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1029:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1030:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Configure the Source and Destination addresses.
1031:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1032:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note   Each IP using DMA provides an API to get directly the register address (LL_PPP_DMA_GetR
1033:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_ConfigAddresses\n
1034:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CMAR         MA            LL_DMA_ConfigAddresses
1035:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1036:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1037:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1038:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1039:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1040:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1041:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1042:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1043:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
1044:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
1045:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
1046:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  SrcAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1047:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DstAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1048:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Direction This parameter can be one of the following values:
1049:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
1050:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
1051:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
1052:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
1053:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1054:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddres
1055:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                                             uint32_t DstAddress, uint32_t Direction)
1056:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1057:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1058:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1059:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   /* Direction Memory to Periph */
1060:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
1061:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   {
1062:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->C
1063:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->C
1064:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   }
1065:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   /* Direction Periph to Memory and Memory to Memory */
1066:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   else
ARM GAS  /tmp/ccZgF6fk.s 			page 22


1067:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   {
1068:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->C
1069:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->C
1070:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   }
1071:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1072:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1073:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1074:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Set the Memory address.
1075:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1076:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1077:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_SetMemoryAddress
1078:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1079:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1080:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1081:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1082:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1083:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1084:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1085:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1086:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
1087:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
1088:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
1089:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1090:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
1091:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1092:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAd
1093:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1094:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1095:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMA
1096:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1097:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1098:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1099:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Set the Peripheral address.
1100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_SetPeriphAddress
1103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
1112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
1113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
1114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
1116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAd
1118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPA
  70              		.loc 2 1120 3 view .LVU8
  71 0012 444D     		ldr	r5, .L10+20
  72              	.LBE170:
ARM GAS  /tmp/ccZgF6fk.s 			page 23


  73              	.LBE169:
  74              	.LBB173:
  75              	.LBB174:
  76 0014 444C     		ldr	r4, .L10+24
  77              	.LBE174:
  78              	.LBE173:
  79              	.LBE253:
  53:Src/vesc_uart.c ****     /* Reset handle structure */
  80              		.loc 1 53 1 view .LVU9
  81 0016 82B0     		sub	sp, sp, #8
  82              	.LCFI1:
  83              		.cfi_def_cfa_offset 16
  84              	.LBB254:
  85              		.loc 1 61 5 view .LVU10
  86 0018 02F00102 		and	r2, r2, #1
  87 001c 0192     		str	r2, [sp, #4]
  88 001e 019A     		ldr	r2, [sp, #4]
  89              	.LBE254:
  90              	.LBB255:
  91              	.LBB177:
  92              	.LBB167:
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
  93              		.loc 2 542 3 view .LVU11
  94 0020 9A68     		ldr	r2, [r3, #8]
  95 0022 22F00102 		bic	r2, r2, #1
  96 0026 9A60     		str	r2, [r3, #8]
  97              	.LBE167:
  98              	.LBE177:
  99              	.LBB178:
 100              	.LBB171:
 101              		.loc 2 1120 3 view .LVU12
 102 0028 1D61     		str	r5, [r3, #16]
 103              	.LBE171:
 104              	.LBE178:
 105              	.LBB179:
 106              	.LBB180:
 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              Mode);
 107              		.loc 2 686 3 view .LVU13
 108 002a 9968     		ldr	r1, [r3, #8]
 109              	.LBE180:
 110              	.LBE179:
 111              	.LBB183:
 112              	.LBB184:
 113              		.file 3 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
   1:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
   2:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ******************************************************************************
   3:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @file    stm32g4xx_ll_usart.h
   4:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @author  MCD Application Team
   5:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief   Header file of USART LL module.
   6:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ******************************************************************************
   7:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @attention
   8:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *
   9:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * Copyright (c) 2019 STMicroelectronics.
  10:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * All rights reserved.
  11:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *
  12:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * in the root directory of this software component.
ARM GAS  /tmp/ccZgF6fk.s 			page 24


  14:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *
  16:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ******************************************************************************
  17:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
  18:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
  19:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #ifndef STM32G4xx_LL_USART_H
  21:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define STM32G4xx_LL_USART_H
  22:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
  23:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #ifdef __cplusplus
  24:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** extern "C" {
  25:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #endif
  26:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
  27:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #include "stm32g4xx.h"
  29:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
  30:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @addtogroup STM32G4xx_LL_Driver
  31:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
  32:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
  33:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
  34:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #if defined(USART1) || defined(USART2) || defined(USART3) || defined(UART4) || defined(UART5)
  35:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
  36:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL USART
  37:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
  38:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
  39:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
  40:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /* Private types -------------------------------------------------------------*/
  41:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /* Private variables ---------------------------------------------------------*/
  42:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_Private_Variables USART Private Variables
  43:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
  44:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
  45:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /* Array used to get the USART prescaler division decimal values versus @ref USART_LL_EC_PRESCALER 
  46:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** static const uint32_t USART_PRESCALER_TAB[] =
  47:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
  48:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   1UL,
  49:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   2UL,
  50:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   4UL,
  51:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   6UL,
  52:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   8UL,
  53:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   10UL,
  54:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   12UL,
  55:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   16UL,
  56:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   32UL,
  57:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   64UL,
  58:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   128UL,
  59:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   256UL
  60:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** };
  61:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
  62:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
  63:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
  64:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
  65:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /* Private constants ---------------------------------------------------------*/
  66:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_Private_Constants USART Private Constants
  67:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
  68:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
  69:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
  70:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
ARM GAS  /tmp/ccZgF6fk.s 			page 25


  71:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
  72:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /* Private macros ------------------------------------------------------------*/
  73:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  74:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_Private_Macros USART Private Macros
  75:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
  76:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
  77:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
  78:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
  79:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
  80:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
  81:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
  82:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /* Exported types ------------------------------------------------------------*/
  83:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  84:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_ES_INIT USART Exported Init structures
  85:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
  86:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
  87:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
  88:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
  89:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief LL USART Init Structure definition
  90:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
  91:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** typedef struct
  92:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
  93:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   uint32_t PrescalerValue;            /*!< Specifies the Prescaler to compute the communication bau
  94:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PRESCA
  95:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
  96:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
  97:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            function @ref LL_USART_SetPrescaler().*/
  98:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
  99:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   uint32_t BaudRate;                  /*!< This field defines expected Usart communication baud rat
 100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            function @ref LL_USART_SetBaudRate().*/
 103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   uint32_t DataWidth;                 /*!< Specifies the number of data bits transmitted or receive
 105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DATAWI
 106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            function @ref LL_USART_SetDataWidth().*/
 109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   uint32_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
 111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_STOPBI
 112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            function @ref LL_USART_SetStopBitsLength().*/
 115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   uint32_t Parity;                    /*!< Specifies the parity mode.
 117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PARITY
 118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            function @ref LL_USART_SetParity().*/
 121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   uint32_t TransferDirection;         /*!< Specifies whether the Receive and/or Transmit mode is en
 123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DIRECT
 124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            function @ref LL_USART_SetTransferDirection().*/
 127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
ARM GAS  /tmp/ccZgF6fk.s 			page 26


 128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   uint32_t HardwareFlowControl;       /*!< Specifies whether the hardware flow control mode is enab
 129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_HWCONT
 130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            function @ref LL_USART_SetHWFlowCtrl().*/
 133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   uint32_t OverSampling;              /*!< Specifies whether USART oversampling mode is 16 or 8.
 135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_OVERSA
 136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary
 138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            function @ref LL_USART_SetOverSampling().*/
 139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** } LL_USART_InitTypeDef;
 141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief LL USART Clock Init Structure definition
 144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** typedef struct
 146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   uint32_t ClockOutput;               /*!< Specifies whether the USART clock is enabled or disabled
 148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_CLOCK.
 149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            @ref LL_USART_EnableSCLKOutput() or @ref LL_USART_Disabl
 152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   uint32_t ClockPolarity;             /*!< Specifies the steady state of the serial clock.
 155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_POLARI
 156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            functions @ref LL_USART_SetClockPolarity().
 159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   uint32_t ClockPhase;                /*!< Specifies the clock transition on which the bit capture 
 162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PHASE.
 163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            functions @ref LL_USART_SetClockPhase().
 166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   uint32_t LastBitClockPulse;         /*!< Specifies whether the clock pulse corresponding to the l
 169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            data bit (MSB) has to be output on the SCLK pin in synch
 170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_LASTCL
 171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            functions @ref LL_USART_SetLastClkPulseOutput().
 174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                            For more details, refer to description of this function.
 175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** } LL_USART_ClockInitTypeDef;
 177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #endif /* USE_FULL_LL_DRIVER */
 182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /* Exported constants --------------------------------------------------------*/
 184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Constants USART Exported Constants
ARM GAS  /tmp/ccZgF6fk.s 			page 27


 185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLEAR_FLAG Clear Flags Defines
 189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_WriteReg function
 190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ICR_PECF                       USART_ICR_PECF                /*!< Parity error cle
 193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ICR_FECF                       USART_ICR_FECF                /*!< Framing error cl
 194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ICR_NECF                       USART_ICR_NECF                /*!< Noise error dete
 195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ICR_ORECF                      USART_ICR_ORECF               /*!< Overrun error cl
 196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ICR_IDLECF                     USART_ICR_IDLECF              /*!< Idle line detect
 197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ICR_TXFECF                     USART_ICR_TXFECF              /*!< TX FIFO Empty cl
 198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ICR_TCCF                       USART_ICR_TCCF                /*!< Transmission com
 199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ICR_TCBGTCF                    USART_ICR_TCBGTCF             /*!< Transmission com
 200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ICR_LBDCF                      USART_ICR_LBDCF               /*!< LIN break detect
 201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ICR_CTSCF                      USART_ICR_CTSCF               /*!< CTS clear flag *
 202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ICR_RTOCF                      USART_ICR_RTOCF               /*!< Receiver timeout
 203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ICR_EOBCF                      USART_ICR_EOBCF               /*!< End of block cle
 204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ICR_UDRCF                      USART_ICR_UDRCF               /*!< SPI Slave Underr
 205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ICR_CMCF                       USART_ICR_CMCF                /*!< Character match 
 206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ICR_WUCF                       USART_ICR_WUCF                /*!< Wakeup from Stop
 207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_GET_FLAG Get Flags Defines
 212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_ReadReg function
 213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_PE                         USART_ISR_PE                  /*!< Parity error fla
 216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_FE                         USART_ISR_FE                  /*!< Framing error fl
 217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_NE                         USART_ISR_NE                  /*!< Noise detected f
 218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_ORE                        USART_ISR_ORE                 /*!< Overrun error fl
 219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_IDLE                       USART_ISR_IDLE                /*!< Idle line detect
 220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_RXNE_RXFNE                 USART_ISR_RXNE_RXFNE          /*!< Read data regist
 221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_TC                         USART_ISR_TC                  /*!< Transmission com
 222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_TXE_TXFNF                  USART_ISR_TXE_TXFNF           /*!< Transmit data re
 223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_LBDF                       USART_ISR_LBDF                /*!< LIN break detect
 224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_CTSIF                      USART_ISR_CTSIF               /*!< CTS interrupt fl
 225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_CTS                        USART_ISR_CTS                 /*!< CTS flag */
 226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_RTOF                       USART_ISR_RTOF                /*!< Receiver timeout
 227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_EOBF                       USART_ISR_EOBF                /*!< End of block fla
 228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_UDR                        USART_ISR_UDR                 /*!< SPI Slave underr
 229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_ABRE                       USART_ISR_ABRE                /*!< Auto baud rate e
 230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_ABRF                       USART_ISR_ABRF                /*!< Auto baud rate f
 231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_BUSY                       USART_ISR_BUSY                /*!< Busy flag */
 232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_CMF                        USART_ISR_CMF                 /*!< Character match 
 233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_SBKF                       USART_ISR_SBKF                /*!< Send break flag 
 234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_RWU                        USART_ISR_RWU                 /*!< Receiver wakeup 
 235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_WUF                        USART_ISR_WUF                 /*!< Wakeup from Stop
 236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_TEACK                      USART_ISR_TEACK               /*!< Transmit enable 
 237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_REACK                      USART_ISR_REACK               /*!< Receive enable a
 238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_TXFE                       USART_ISR_TXFE                /*!< TX FIFO empty fl
 239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_RXFF                       USART_ISR_RXFF                /*!< RX FIFO full fla
 240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_TCBGT                      USART_ISR_TCBGT               /*!< Transmission com
 241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_RXFT                       USART_ISR_RXFT                /*!< RX FIFO threshol
ARM GAS  /tmp/ccZgF6fk.s 			page 28


 242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ISR_TXFT                       USART_ISR_TXFT                /*!< TX FIFO threshol
 243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_IT IT Defines
 248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief    IT defines which can be used with LL_USART_ReadReg and  LL_USART_WriteReg functions
 249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_CR1_IDLEIE                     USART_CR1_IDLEIE              /*!< IDLE interrupt e
 252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_CR1_RXNEIE_RXFNEIE             USART_CR1_RXNEIE_RXFNEIE      /*!< Read data regist
 253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_CR1_TCIE                       USART_CR1_TCIE                /*!< Transmission com
 254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_CR1_TXEIE_TXFNFIE              USART_CR1_TXEIE_TXFNFIE       /*!< Transmit data re
 255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_CR1_PEIE                       USART_CR1_PEIE                /*!< Parity error */
 256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_CR1_CMIE                       USART_CR1_CMIE                /*!< Character match 
 257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_CR1_RTOIE                      USART_CR1_RTOIE               /*!< Receiver timeout
 258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_CR1_EOBIE                      USART_CR1_EOBIE               /*!< End of Block int
 259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_CR1_TXFEIE                     USART_CR1_TXFEIE              /*!< TX FIFO empty in
 260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_CR1_RXFFIE                     USART_CR1_RXFFIE              /*!< RX FIFO full int
 261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_CR2_LBDIE                      USART_CR2_LBDIE               /*!< LIN break detect
 262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_CR3_EIE                        USART_CR3_EIE                 /*!< Error interrupt 
 263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_CR3_CTSIE                      USART_CR3_CTSIE               /*!< CTS interrupt en
 264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_CR3_WUFIE                      USART_CR3_WUFIE               /*!< Wakeup from Stop
 265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_CR3_TXFTIE                     USART_CR3_TXFTIE              /*!< TX FIFO threshol
 266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_CR3_TCBGTIE                    USART_CR3_TCBGTIE             /*!< Transmission com
 267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_CR3_RXFTIE                     USART_CR3_RXFTIE              /*!< RX FIFO threshol
 268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_FIFOTHRESHOLD FIFO Threshold
 273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_1_8              0x00000000U /*!< FIFO reaches 1/8 of its depth */
 276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_1_4              0x00000001U /*!< FIFO reaches 1/4 of its depth */
 277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_1_2              0x00000002U /*!< FIFO reaches 1/2 of its depth */
 278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_3_4              0x00000003U /*!< FIFO reaches 3/4 of its depth */
 279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_7_8              0x00000004U /*!< FIFO reaches 7/8 of its depth */
 280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_FIFOTHRESHOLD_8_8              0x00000005U /*!< FIFO becomes empty for TX and full
 281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DIRECTION Communication Direction
 286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_DIRECTION_NONE                 0x00000000U                        /*!< Transmitter
 289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_DIRECTION_RX                   USART_CR1_RE                       /*!< Transmitter
 290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_DIRECTION_TX                   USART_CR1_TE                       /*!< Transmitter
 291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_DIRECTION_TX_RX                (USART_CR1_TE |USART_CR1_RE)       /*!< Transmitter
 292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_PARITY Parity Control
 297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
ARM GAS  /tmp/ccZgF6fk.s 			page 29


 299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_PARITY_NONE                    0x00000000U                          /*!< Parity co
 300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_PARITY_EVEN                    USART_CR1_PCE                        /*!< Parity co
 301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_PARITY_ODD                     (USART_CR1_PCE | USART_CR1_PS)       /*!< Parity co
 302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP Wakeup
 307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_WAKEUP_IDLELINE                0x00000000U           /*!<  USART wake up from Mute
 310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_WAKEUP_ADDRESSMARK             USART_CR1_WAKE        /*!<  USART wake up from Mute
 311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DATAWIDTH Datawidth
 316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_DATAWIDTH_7B                   USART_CR1_M1            /*!< 7 bits word length : S
 319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   0x00000000U             /*!< 8 bits word length : S
 320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M0            /*!< 9 bits word length : S
 321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_OVERSAMPLING Oversampling
 326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_16                0x00000000U            /*!< Oversampling by 16 */
 329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_8                 USART_CR1_OVER8        /*!< Oversampling by 8 */
 330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
 335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLOCK Clock Signal
 336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_CLOCK_DISABLE                  0x00000000U            /*!< Clock signal not provid
 340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_CLOCK_ENABLE                   USART_CR2_CLKEN        /*!< Clock signal provided *
 341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
 345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_LASTCLKPULSE Last Clock Pulse
 347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_NO_OUTPUT         0x00000000U           /*!< The clock pulse of the l
 350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_OUTPUT            USART_CR2_LBCL        /*!< The clock pulse of the l
 351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_PHASE Clock Phase
ARM GAS  /tmp/ccZgF6fk.s 			page 30


 356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_PHASE_1EDGE                    0x00000000U           /*!< The first clock transiti
 359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_PHASE_2EDGE                    USART_CR2_CPHA        /*!< The second clock transit
 360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_POLARITY Clock Polarity
 365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_POLARITY_LOW                   0x00000000U           /*!< Steady low value on SCLK
 368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_POLARITY_HIGH                  USART_CR2_CPOL        /*!< Steady high value on SCL
 369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_PRESCALER Clock Source Prescaler
 374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV1                 0x00000000U                                        
 377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV2                 (USART_PRESC_PRESCALER_0)                          
 378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV4                 (USART_PRESC_PRESCALER_1)                          
 379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV6                 (USART_PRESC_PRESCALER_1 | USART_PRESC_PRESCALER_0)
 380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV8                 (USART_PRESC_PRESCALER_2)                          
 381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV10                (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_0)
 382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV12                (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_1)
 383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV16                (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_1 
 384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV32                (USART_PRESC_PRESCALER_3)                          
 385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV64                (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_0)
 386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV128               (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_1)
 387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_PRESCALER_DIV256               (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_1 
 388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_STOPBITS Stop Bits
 393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_STOPBITS_0_5                   USART_CR2_STOP_0                           /*!< 0.5
 396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_STOPBITS_1                     0x00000000U                                /*!< 1 s
 397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_STOPBITS_1_5                   (USART_CR2_STOP_0 | USART_CR2_STOP_1)      /*!< 1.5
 398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_STOPBITS_2                     USART_CR2_STOP_1                           /*!< 2 s
 399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_TXRX TX RX Pins Swap
 404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_TXRX_STANDARD                  0x00000000U           /*!< TX/RX pins are used as d
 407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_TXRX_SWAPPED                   (USART_CR2_SWAP)      /*!< TX and RX pins functions
 408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_RXPIN_LEVEL RX Pin Active Level Inversion
ARM GAS  /tmp/ccZgF6fk.s 			page 31


 413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_STANDARD           0x00000000U           /*!< RX pin signal works usin
 416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_RXPIN_LEVEL_INVERTED           (USART_CR2_RXINV)     /*!< RX pin signal values are
 417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_TXPIN_LEVEL TX Pin Active Level Inversion
 422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_STANDARD           0x00000000U           /*!< TX pin signal works usin
 425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_TXPIN_LEVEL_INVERTED           (USART_CR2_TXINV)     /*!< TX pin signal values are
 426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_BINARY_LOGIC Binary Data Inversion
 431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_POSITIVE          0x00000000U           /*!< Logical data from the da
 434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_BINARY_LOGIC_NEGATIVE          USART_CR2_DATAINV     /*!< Logical data from the da
 435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_BITORDER Bit Order
 440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_BITORDER_LSBFIRST              0x00000000U           /*!< data is transmitted/rece
 443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_BITORDER_MSBFIRST              USART_CR2_MSBFIRST    /*!< data is transmitted/rece
 444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_AUTOBAUD_DETECT_ON Autobaud Detection
 449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_STARTBIT    0x00000000U                                 /*!< Me
 452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE USART_CR2_ABRMODE_0                         /*!< Fa
 453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME    USART_CR2_ABRMODE_1                         /*!< 0x
 454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_AUTOBAUD_DETECT_ON_55_FRAME    (USART_CR2_ABRMODE_1 | USART_CR2_ABRMODE_0) /*!< 0x
 455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_ADDRESS_DETECT Address Length Detection
 460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_4B              0x00000000U           /*!< 4-bit address detection 
 463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ADDRESS_DETECT_7B              USART_CR2_ADDM7       /*!< 7-bit address detection 
 464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_HWCONTROL Hardware Control
 469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
ARM GAS  /tmp/ccZgF6fk.s 			page 32


 470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_HWCONTROL_NONE                 0x00000000U                          /*!< CTS and R
 472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS                  USART_CR3_RTSE                       /*!< RTS outpu
 473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_HWCONTROL_CTS                  USART_CR3_CTSE                       /*!< CTS mode 
 474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS_CTS              (USART_CR3_RTSE | USART_CR3_CTSE)    /*!< CTS and R
 475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP_ON Wakeup Activation
 480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_ADDRESS              0x00000000U                             /*!< Wake u
 483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_STARTBIT             USART_CR3_WUS_1                         /*!< Wake u
 484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_WAKEUP_ON_RXNE                 (USART_CR3_WUS_0 | USART_CR3_WUS_1)     /*!< Wake u
 485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_IRDA_POWER IrDA Power
 490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_IRDA_POWER_NORMAL              0x00000000U           /*!< IrDA normal power mode *
 493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_IRDA_POWER_LOW                 USART_CR3_IRLP        /*!< IrDA low power mode */
 494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_LINBREAK_DETECT LIN Break Detection Length
 499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_10B            0x00000000U           /*!< 10-bit break detection m
 502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_11B            USART_CR2_LBDL        /*!< 11-bit break detection m
 503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DE_POLARITY Driver Enable Polarity
 508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_DE_POLARITY_HIGH               0x00000000U           /*!< DE signal is active high
 511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_DE_POLARITY_LOW                USART_CR3_DEP         /*!< DE signal is active low 
 512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EC_DMA_REG_DATA DMA Register Data
 517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_TRANSMIT          0x00000000U          /*!< Get address of data regis
 520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_DMA_REG_DATA_RECEIVE           0x00000001U          /*!< Get address of data regis
 521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
ARM GAS  /tmp/ccZgF6fk.s 			page 33


 527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /* Exported macro ------------------------------------------------------------*/
 530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Macros USART Exported Macros
 531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EM_WRITE_READ Common Write and read registers Macros
 535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Write a value in USART register
 540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  __REG__ Register to be written
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  __VALUE__ Value to be written in the register
 543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
 544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VAL
 546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Read a value in USART register
 549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  __REG__ Register to be read
 551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Register value
 552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EM_Exported_Macros_Helper Exported_Macros_Helper
 559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         expected Baud Rate in 8 bits sampling mode (32 bits value of USARTDIV is returned)
 565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  __PRESCALER__ This parameter can be one of the following values:
 567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
 568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
 569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
 570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
 571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
 572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
 573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
 574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
 575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
 576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
 577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
 578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
 579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_8 case
 581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __PRESCALER__, __BAUDRATE__) \
 583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   (((((__PERIPHCLK__)/(USART_PRESCALER_TAB[(__PRESCALER__)]))*2U)\
ARM GAS  /tmp/ccZgF6fk.s 			page 34


 584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****     + ((__BAUDRATE__)/2U))/(__BAUDRATE__))
 585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         expected Baud Rate in 16 bits sampling mode (32 bits value of USARTDIV is returned)
 589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  __PRESCALER__ This parameter can be one of the following values:
 591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
 592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
 593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
 594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
 595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
 596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
 597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
 598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
 599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
 600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
 601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
 602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
 603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_16 case
 605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __PRESCALER__, __BAUDRATE__) \
 607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ((((__PERIPHCLK__)/(USART_PRESCALER_TAB[(__PRESCALER__)]))\
 608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****     + ((__BAUDRATE__)/2U))/(__BAUDRATE__))
 609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
 616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /* Exported functions --------------------------------------------------------*/
 619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Functions USART Exported Functions
 621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration Configuration functions
 625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
 626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  USART Enable
 630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Enable
 631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
 633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
 635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UE);
 637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  USART Disable (all USART prescalers and outputs are disabled)
ARM GAS  /tmp/ccZgF6fk.s 			page 35


 641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   When USART is disabled, USART prescalers and outputs are stopped immediately,
 642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         and current operations are discarded. The configuration of the USART is kept, but all t
 643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         flags, in the USARTx_ISR are set to their default values.
 644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Disable
 645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
 647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
 649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Indicate if USART is enabled
 655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_IsEnabled
 656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabled(const USART_TypeDef *USARTx)
 660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  FIFO Mode Enable
 666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          FIFOEN        LL_USART_EnableFIFO
 669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
 671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableFIFO(USART_TypeDef *USARTx)
 673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  FIFO Mode Disable
 679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
 682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
 684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Indicate if FIFO Mode is enabled
 692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          FIFOEN        LL_USART_IsEnabledFIFO
 695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
ARM GAS  /tmp/ccZgF6fk.s 			page 36


 698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledFIFO(const USART_TypeDef *USARTx)
 699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_FIFOEN) == (USART_CR1_FIFOEN)) ? 1UL : 0UL);
 701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Configure TX FIFO Threshold
 705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          TXFTCFG       LL_USART_SetTXFIFOThreshold
 708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  Threshold This parameter can be one of the following values:
 710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
 717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return TX FIFO Threshold Configuration
 725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          TXFTCFG       LL_USART_GetTXFIFOThreshold
 728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXFIFOThreshold(const USART_TypeDef *USARTx)
 738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Configure RX FIFO Threshold
 744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 746:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          RXFTCFG       LL_USART_SetRXFIFOThreshold
 747:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 748:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  Threshold This parameter can be one of the following values:
 749:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 750:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 751:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 752:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 753:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 754:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
ARM GAS  /tmp/ccZgF6fk.s 			page 37


 755:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
 756:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 757:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
 758:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 759:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 760:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 761:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 762:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 763:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return RX FIFO Threshold Configuration
 764:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 765:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 766:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          RXFTCFG       LL_USART_GetRXFIFOThreshold
 767:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 768:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 769:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 770:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 771:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 772:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 773:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 774:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 775:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 776:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRXFIFOThreshold(const USART_TypeDef *USARTx)
 777:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 778:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 779:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 780:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 781:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 782:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Configure TX and RX FIFOs Threshold
 783:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
 784:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
 785:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          TXFTCFG       LL_USART_ConfigFIFOsThreshold\n
 786:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          RXFTCFG       LL_USART_ConfigFIFOsThreshold
 787:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  TXThreshold This parameter can be one of the following values:
 789:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 790:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 791:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 792:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 793:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 794:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 795:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  RXThreshold This parameter can be one of the following values:
 796:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_8
 797:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_4
 798:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_1_2
 799:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
 800:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
 801:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
 802:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
 803:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 804:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigFIFOsThreshold(USART_TypeDef *USARTx, uint32_t TXThreshold, uin
 805:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 806:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG | USART_CR3_RXFTCFG, (TXThreshold << USART_CR3_T
 807:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                     (RXThreshold << USART_CR3_RXFTCFG_Pos));
 808:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 809:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 810:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 811:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  USART enabled in STOP Mode.
ARM GAS  /tmp/ccZgF6fk.s 			page 38


 812:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   When this function is enabled, USART is able to wake up the MCU from Stop mode, provide
 813:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         USART clock selection is HSI or LSE in RCC.
 814:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 815:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 816:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_EnableInStopMode
 817:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 818:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
 819:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 820:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableInStopMode(USART_TypeDef *USARTx)
 821:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 822:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_UESM);
 823:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 824:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 825:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 826:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  USART disabled in STOP Mode.
 827:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   When this function is disabled, USART is not able to wake up the MCU from Stop mode
 828:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 829:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 830:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_DisableInStopMode
 831:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 832:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
 833:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 834:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableInStopMode(USART_TypeDef *USARTx)
 835:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 836:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_UESM);
 837:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 838:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 839:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Indicate if USART is enabled in STOP Mode (able to wake up MCU from Stop mode or not)
 841:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
 842:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
 843:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          UESM          LL_USART_IsEnabledInStopMode
 844:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 845:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 846:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 847:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledInStopMode(const USART_TypeDef *USARTx)
 848:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 849:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_UESM) == (USART_CR1_UESM)) ? 1UL : 0UL);
 850:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 851:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 852:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 853:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Receiver Enable (Receiver is enabled and begins searching for a start bit)
 854:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
 855:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 856:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
 857:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 858:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
 859:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 860:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 861:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 862:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 863:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 864:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Receiver Disable
 865:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
 866:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 867:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
 868:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
ARM GAS  /tmp/ccZgF6fk.s 			page 39


 869:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
 870:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 871:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 872:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 873:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 874:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 875:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Transmitter Enable
 876:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
 877:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 878:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
 879:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 880:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
 881:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 882:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 883:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 884:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 885:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 886:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Transmitter Disable
 887:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_DisableDirectionTx
 888:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 889:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
 890:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 891:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionTx(USART_TypeDef *USARTx)
 892:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 893:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TE);
 894:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 895:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 896:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 897:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Configure simultaneously enabled/disabled states
 898:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         of Transmitter and Receiver
 899:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_SetTransferDirection\n
 900:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR1          TE            LL_USART_SetTransferDirection
 901:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 902:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  TransferDirection This parameter can be one of the following values:
 903:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 904:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 905:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 906:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 907:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
 908:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 909:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirectio
 910:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 911:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 912:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 913:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 914:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 915:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return enabled/disabled states of Transmitter and Receiver
 916:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_GetTransferDirection\n
 917:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR1          TE            LL_USART_GetTransferDirection
 918:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 919:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 920:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 921:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 922:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 923:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 924:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 925:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferDirection(const USART_TypeDef *USARTx)
ARM GAS  /tmp/ccZgF6fk.s 			page 40


 926:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 927:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_RE | USART_CR1_TE));
 928:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 929:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 930:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 931:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Configure Parity (enabled/disabled and parity mode if enabled).
 932:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   This function selects if hardware parity control (generation and detection) is enabled 
 933:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         When the parity control is enabled (Odd or Even), computed parity bit is inserted at th
 934:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         (9th or 8th bit depending on data width) and parity is checked on the received data.
 935:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_SetParity\n
 936:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_SetParity
 937:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 938:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 939:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 940:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 941:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 942:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
 943:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 944:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
 945:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 946:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 947:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 948:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 949:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 950:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return Parity configuration (enabled/disabled and parity mode if enabled)
 951:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_GetParity\n
 952:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_GetParity
 953:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 954:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 955:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 956:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 957:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 958:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 959:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetParity(const USART_TypeDef *USARTx)
 960:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 961:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 962:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 963:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 964:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 965:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Set Receiver Wake Up method from Mute mode.
 966:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_SetWakeUpMethod
 967:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 968:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  Method This parameter can be one of the following values:
 969:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 970:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 971:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
 972:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 973:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWakeUpMethod(USART_TypeDef *USARTx, uint32_t Method)
 974:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 975:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_WAKE, Method);
 976:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 977:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 978:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 979:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return Receiver Wake Up method from Mute mode
 980:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_GetWakeUpMethod
 981:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 982:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
ARM GAS  /tmp/ccZgF6fk.s 			page 41


 983:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 984:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 985:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
 986:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWakeUpMethod(const USART_TypeDef *USARTx)
 987:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 988:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_WAKE));
 989:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 990:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
 991:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
 992:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Set Word length (i.e. nb of data bits, excluding start and stop bits)
 993:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_SetDataWidth\n
 994:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR1          M1            LL_USART_SetDataWidth
 995:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
 996:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 997:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
 998:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 999:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
1000:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1001:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1002:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
1003:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1004:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
1005:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1006:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1007:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1008:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return Word length (i.e. nb of data bits, excluding start and stop bits)
1009:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          M0            LL_USART_GetDataWidth\n
1010:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR1          M1            LL_USART_GetDataWidth
1011:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1012:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1013:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
1014:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
1015:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
1016:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1017:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDataWidth(const USART_TypeDef *USARTx)
1018:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1019:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
1020:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1021:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1022:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1023:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Allow switch between Mute Mode and Active mode
1024:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_EnableMuteMode
1025:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1026:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1027:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1028:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableMuteMode(USART_TypeDef *USARTx)
1029:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1030:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_MME);
1031:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1032:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1033:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1034:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Prevent Mute Mode use. Set Receiver in active mode permanently.
1035:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_DisableMuteMode
1036:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1037:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1038:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1039:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableMuteMode(USART_TypeDef *USARTx)
ARM GAS  /tmp/ccZgF6fk.s 			page 42


1040:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1041:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_MME);
1042:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1043:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1044:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1045:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Indicate if switch between Mute Mode and Active mode is allowed
1046:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          MME           LL_USART_IsEnabledMuteMode
1047:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1048:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1049:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1050:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledMuteMode(const USART_TypeDef *USARTx)
1051:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1052:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_MME) == (USART_CR1_MME)) ? 1UL : 0UL);
1053:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1054:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1055:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1056:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Set Oversampling to 8-bit or 16-bit mode
1057:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_SetOverSampling
1058:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1059:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1060:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1061:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1062:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1063:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1064:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
1065:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1066:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
1067:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1068:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1069:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1070:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return Oversampling mode
1071:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_GetOverSampling
1072:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1073:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1074:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1075:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1076:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1077:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetOverSampling(const USART_TypeDef *USARTx)
1078:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1079:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_OVER8));
1080:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1081:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1082:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1083:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Configure if Clock pulse of the last data bit is output to the SCLK pin or not
1084:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1085:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1086:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_SetLastClkPulseOutput
1087:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1088:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  LastBitClockPulse This parameter can be one of the following values:
1089:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
1090:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
1091:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1092:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1093:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLastClkPulseOutput(USART_TypeDef *USARTx, uint32_t LastBitClockPul
1094:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1095:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBCL, LastBitClockPulse);
1096:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
ARM GAS  /tmp/ccZgF6fk.s 			page 43


1097:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1098:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1099:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Retrieve Clock pulse of the last data bit output configuration
1100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         (Last bit Clock pulse output to the SCLK pin or not)
1101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_GetLastClkPulseOutput
1104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
1107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
1108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLastClkPulseOutput(const USART_TypeDef *USARTx)
1110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBCL));
1112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Select the phase of the clock output on the SCLK pin in synchronous mode
1116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_SetClockPhase
1119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  ClockPhase This parameter can be one of the following values:
1121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
1122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPhase(USART_TypeDef *USARTx, uint32_t ClockPhase)
1126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA, ClockPhase);
1128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return phase of the clock output on the SCLK pin in synchronous mode
1132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_GetClockPhase
1135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
1138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPhase(const USART_TypeDef *USARTx)
1141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPHA));
1143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Select the polarity of the clock output on the SCLK pin in synchronous mode
1147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_SetClockPolarity
1150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  ClockPolarity This parameter can be one of the following values:
1152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
1153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
ARM GAS  /tmp/ccZgF6fk.s 			page 44


1154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPolarity(USART_TypeDef *USARTx, uint32_t ClockPolarity)
1157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPOL, ClockPolarity);
1159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return polarity of the clock output on the SCLK pin in synchronous mode
1163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_GetClockPolarity
1166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
1169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
1170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPolarity(const USART_TypeDef *USARTx)
1172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPOL));
1174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Configure Clock signal format (Phase Polarity and choice about output of last bit clock
1178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clock Phase configuration using @ref LL_USART_SetClockPhase() function
1182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clock Polarity configuration using @ref LL_USART_SetClockPolarity() function
1183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Output of Last bit Clock pulse configuration using @ref LL_USART_SetLastClkPulseOutpu
1184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_ConfigClock\n
1185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR2          CPOL          LL_USART_ConfigClock\n
1186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR2          LBCL          LL_USART_ConfigClock
1187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  Phase This parameter can be one of the following values:
1189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
1190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
1192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
1193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
1194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  LBCPOutput This parameter can be one of the following values:
1195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
1196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
1197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigClock(USART_TypeDef *USARTx, uint32_t Phase, uint32_t Polarity,
1200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL, Phase | Polarity | LBCP
1202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Configure Clock source prescaler for baudrate generator and oversampling
1206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
1207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
1208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll PRESC        PRESCALER     LL_USART_SetPrescaler
1209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  PrescalerValue This parameter can be one of the following values:
ARM GAS  /tmp/ccZgF6fk.s 			page 45


1211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
1212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
1213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
1214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
1215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
1216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
1217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
1218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
1219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
1220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
1221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
1222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
1223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
1228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Retrieve the Clock source prescaler for baudrate generator and oversampling
1232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
1233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
1234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll PRESC        PRESCALER     LL_USART_GetPrescaler
1235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
1238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
1239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
1240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
1241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
1242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
1243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
1244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
1245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
1246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
1247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
1248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
1249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetPrescaler(const USART_TypeDef *USARTx)
1251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->PRESC, USART_PRESC_PRESCALER));
1253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable Clock output on SCLK pin
1257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_EnableSCLKOutput
1260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSCLKOutput(USART_TypeDef *USARTx)
1264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
1266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
ARM GAS  /tmp/ccZgF6fk.s 			page 46


1268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable Clock output on SCLK pin
1270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_DisableSCLKOutput
1273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSCLKOutput(USART_TypeDef *USARTx)
1277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
1279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Indicate if Clock output on SCLK pin is enabled
1283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_IsEnabledSCLKOutput
1286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSCLKOutput(const USART_TypeDef *USARTx)
1290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_CLKEN) == (USART_CR2_CLKEN)) ? 1UL : 0UL);
1292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Set the length of the stop bits
1296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_SetStopBitsLength
1297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
1299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
1306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Retrieve the length of the stop bits
1312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_GetStopBitsLength
1313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(const USART_TypeDef *USARTx)
1321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
1323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
ARM GAS  /tmp/ccZgF6fk.s 			page 47


1325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Configure Character frame format (Datawidth, Parity control, Stop Bits)
1327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Data Width configuration using @ref LL_USART_SetDataWidth() function
1329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Parity Control and mode configuration using @ref LL_USART_SetParity() function
1330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Stop bits configuration using @ref LL_USART_SetStopBitsLength() function
1331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_ConfigCharacter\n
1332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR1          PCE           LL_USART_ConfigCharacter\n
1333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR1          M0            LL_USART_ConfigCharacter\n
1334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR1          M1            LL_USART_ConfigCharacter\n
1335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigCharacter
1336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
1338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_7B
1339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
1340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
1341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
1342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
1343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
1344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
1345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
1346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
1347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
1348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
1349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
1350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t P
1353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                               uint32_t StopBits)
1354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
1356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
1357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Configure TX/RX pins swapping setting.
1361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_SetTXRXSwap
1362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  SwapConfig This parameter can be one of the following values:
1364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
1366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXRXSwap(USART_TypeDef *USARTx, uint32_t SwapConfig)
1369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
1371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Retrieve TX/RX pins swapping configuration.
1375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          SWAP          LL_USART_GetTXRXSwap
1376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_STANDARD
1379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXRX_SWAPPED
1380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXRXSwap(const USART_TypeDef *USARTx)
ARM GAS  /tmp/ccZgF6fk.s 			page 48


1382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_SWAP));
1384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Configure RX pin active level logic
1388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_SetRXPinLevel
1389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
1392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
1396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_RXINV, PinInvMethod);
1398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Retrieve RX pin active level logic configuration
1402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          RXINV         LL_USART_GetRXPinLevel
1403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_STANDARD
1406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_RXPIN_LEVEL_INVERTED
1407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRXPinLevel(const USART_TypeDef *USARTx)
1409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_RXINV));
1411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Configure TX pin active level logic
1415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_SetTXPinLevel
1416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  PinInvMethod This parameter can be one of the following values:
1418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
1423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_TXINV, PinInvMethod);
1425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Retrieve TX pin active level logic configuration
1429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          TXINV         LL_USART_GetTXPinLevel
1430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_STANDARD
1433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_TXPIN_LEVEL_INVERTED
1434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTXPinLevel(const USART_TypeDef *USARTx)
1436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_TXINV));
1438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
ARM GAS  /tmp/ccZgF6fk.s 			page 49


1439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Configure Binary data logic.
1442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Allow to define how Logical data from the data register are send/received :
1443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         either in positive/direct logic (1=H, 0=L) or in negative/inverse logic (1=L, 0=H)
1444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_SetBinaryDataLogic
1445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  DataLogic This parameter can be one of the following values:
1447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
1449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBinaryDataLogic(USART_TypeDef *USARTx, uint32_t DataLogic)
1452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_DATAINV, DataLogic);
1454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Retrieve Binary data configuration
1458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          DATAINV       LL_USART_GetBinaryDataLogic
1459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_POSITIVE
1462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_BINARY_LOGIC_NEGATIVE
1463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBinaryDataLogic(const USART_TypeDef *USARTx)
1465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_DATAINV));
1467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Configure transfer bit order (either Less or Most Significant Bit First)
1471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_SetTransferBitOrder
1474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  BitOrder This parameter can be one of the following values:
1476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferBitOrder(USART_TypeDef *USARTx, uint32_t BitOrder)
1481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_MSBFIRST, BitOrder);
1483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return transfer bit order (either Less or Most Significant Bit First)
1487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   MSB First means data is transmitted/received with the MSB first, following the start bi
1488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         LSB First means data is transmitted/received with data bit 0 first, following the start
1489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          MSBFIRST      LL_USART_GetTransferBitOrder
1490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_LSBFIRST
1493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_BITORDER_MSBFIRST
1494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferBitOrder(const USART_TypeDef *USARTx)
ARM GAS  /tmp/ccZgF6fk.s 			page 50


1496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_MSBFIRST));
1498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable Auto Baud-Rate Detection
1502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_EnableAutoBaudRate
1505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableAutoBaudRate(USART_TypeDef *USARTx)
1509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_ABREN);
1511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable Auto Baud-Rate Detection
1515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_DisableAutoBaudRate
1518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableAutoBaudRate(USART_TypeDef *USARTx)
1522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_ABREN);
1524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Indicate if Auto Baud-Rate Detection mechanism is enabled
1528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          ABREN         LL_USART_IsEnabledAutoBaud
1531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledAutoBaud(const USART_TypeDef *USARTx)
1535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_ABREN) == (USART_CR2_ABREN)) ? 1UL : 0UL);
1537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Set Auto Baud-Rate mode bits
1541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_SetAutoBaudRateMode
1544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  AutoBaudRateMode This parameter can be one of the following values:
1546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
1549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
1550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetAutoBaudRateMode(USART_TypeDef *USARTx, uint32_t AutoBaudRateMode)
ARM GAS  /tmp/ccZgF6fk.s 			page 51


1553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ABRMODE, AutoBaudRateMode);
1555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return Auto Baud-Rate mode
1559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
1560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
1561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          ABRMODE       LL_USART_GetAutoBaudRateMode
1562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_STARTBIT
1565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE
1566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME
1567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_AUTOBAUD_DETECT_ON_55_FRAME
1568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetAutoBaudRateMode(const USART_TypeDef *USARTx)
1570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ABRMODE));
1572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable Receiver Timeout
1576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_EnableRxTimeout
1577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRxTimeout(USART_TypeDef *USARTx)
1581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_RTOEN);
1583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable Receiver Timeout
1587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_DisableRxTimeout
1588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRxTimeout(USART_TypeDef *USARTx)
1592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_RTOEN);
1594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Indicate if Receiver Timeout feature is enabled
1598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          RTOEN         LL_USART_IsEnabledRxTimeout
1599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledRxTimeout(const USART_TypeDef *USARTx)
1603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_RTOEN) == (USART_CR2_RTOEN)) ? 1UL : 0UL);
1605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Set Address of the USART node.
1609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   This is used in multiprocessor communication during Mute mode or Stop mode,
ARM GAS  /tmp/ccZgF6fk.s 			page 52


1610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         for wake up with address mark detection.
1611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   4bits address node is used when 4-bit Address Detection is selected in ADDM7.
1612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         (b7-b4 should be set to 0)
1613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         8bits address node is used when 7-bit Address Detection is selected in ADDM7.
1614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         (This is used in multiprocessor communication during Mute mode or Stop mode,
1615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         for wake up with 7-bit address mark detection.
1616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         The MSB of the character sent by the transmitter should be equal to 1.
1617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         It may also be used for character detection during normal reception,
1618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Mute mode inactive (for example, end of block detection in ModBus protocol).
1619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         In this case, the whole received character (8-bit) is compared to the ADD[7:0]
1620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         value and CMF flag is set on match)
1621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_ConfigNodeAddress\n
1622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR2          ADDM7         LL_USART_ConfigNodeAddress
1623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  AddressLen This parameter can be one of the following values:
1625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
1627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  NodeAddress 4 or 7 bit Address of the USART node.
1628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigNodeAddress(USART_TypeDef *USARTx, uint32_t AddressLen, uint32_
1631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ADD | USART_CR2_ADDM7,
1633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****              (uint32_t)(AddressLen | (NodeAddress << USART_CR2_ADD_Pos)));
1634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return 8 bit Address of the USART node as set in ADD field of CR2.
1638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   If 4-bit Address Detection is selected in ADDM7,
1639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         only 4bits (b3-b0) of returned value are relevant (b31-b4 are not relevant)
1640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         If 7-bit Address Detection is selected in ADDM7,
1641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         only 8bits (b7-b0) of returned value are relevant (b31-b8 are not relevant)
1642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_GetNodeAddress
1643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Address of the USART node (Value between Min_Data=0 and Max_Data=255)
1645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddress(const USART_TypeDef *USARTx)
1647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADD) >> USART_CR2_ADD_Pos);
1649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return Length of Node Address used in Address Detection mode (7-bit or 4-bit)
1653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          ADDM7         LL_USART_GetNodeAddressLen
1654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_4B
1657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_ADDRESS_DETECT_7B
1658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddressLen(const USART_TypeDef *USARTx)
1660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADDM7));
1662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable RTS HW Flow Control
1666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/ccZgF6fk.s 			page 53


1667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_EnableRTSHWFlowCtrl
1669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_RTSE);
1675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable RTS HW Flow Control
1679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_DisableRTSHWFlowCtrl
1682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRTSHWFlowCtrl(USART_TypeDef *USARTx)
1686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_RTSE);
1688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable CTS HW Flow Control
1692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_EnableCTSHWFlowCtrl
1695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSE);
1701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable CTS HW Flow Control
1705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_DisableCTSHWFlowCtrl
1708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableCTSHWFlowCtrl(USART_TypeDef *USARTx)
1712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSE);
1714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Configure HW Flow Control mode (both CTS and RTS)
1718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_SetHWFlowCtrl\n
1721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_SetHWFlowCtrl
1722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  HardwareFlowControl This parameter can be one of the following values:
ARM GAS  /tmp/ccZgF6fk.s 			page 54


1724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
1725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
1726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
1731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
1733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return HW Flow Control configuration (both CTS and RTS)
1737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_GetHWFlowCtrl\n
1740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_GetHWFlowCtrl
1741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
1744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
1745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
1746:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
1747:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1748:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(const USART_TypeDef *USARTx)
1749:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1750:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
1751:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1752:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1753:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1754:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable One bit sampling method
1755:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_EnableOneBitSamp
1756:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1757:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1758:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1759:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOneBitSamp(USART_TypeDef *USARTx)
1760:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1761:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1762:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1763:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1764:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1765:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable One bit sampling method
1766:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_DisableOneBitSamp
1767:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1768:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1769:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1770:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOneBitSamp(USART_TypeDef *USARTx)
1771:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1772:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_ONEBIT);
1773:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1774:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1775:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1776:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Indicate if One bit sampling method is enabled
1777:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_IsEnabledOneBitSamp
1778:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1779:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1780:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
ARM GAS  /tmp/ccZgF6fk.s 			page 55


1781:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOneBitSamp(const USART_TypeDef *USARTx)
1782:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1783:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_ONEBIT) == (USART_CR3_ONEBIT)) ? 1UL : 0UL);
1784:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1785:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1786:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1787:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable Overrun detection
1788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_EnableOverrunDetect
1789:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1790:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1791:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1792:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOverrunDetect(USART_TypeDef *USARTx)
1793:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1794:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1795:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1796:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1797:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1798:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable Overrun detection
1799:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_DisableOverrunDetect
1800:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1801:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1802:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1803:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
1804:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1805:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
1806:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1807:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1808:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1809:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Indicate if Overrun detection is enabled
1810:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          OVRDIS        LL_USART_IsEnabledOverrunDetect
1811:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1812:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1813:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1814:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOverrunDetect(const USART_TypeDef *USARTx)
1815:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1816:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_OVRDIS) != USART_CR3_OVRDIS) ? 1UL : 0UL);
1817:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1818:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1819:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1820:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Select event type for Wake UP Interrupt Flag (WUS[1:0] bits)
1821:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
1822:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
1823:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_SetWKUPType
1824:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1825:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  Type This parameter can be one of the following values:
1826:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1827:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1828:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1829:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1830:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1831:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWKUPType(USART_TypeDef *USARTx, uint32_t Type)
1832:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1833:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_WUS, Type);
1834:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1835:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1836:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1837:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return event type for Wake UP Interrupt Flag (WUS[1:0] bits)
ARM GAS  /tmp/ccZgF6fk.s 			page 56


1838:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
1839:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
1840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          WUS           LL_USART_GetWKUPType
1841:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1842:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1843:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_ADDRESS
1844:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_STARTBIT
1845:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ON_RXNE
1846:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1847:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWKUPType(const USART_TypeDef *USARTx)
1848:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1849:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_WUS));
1850:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1851:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1852:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1853:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Configure USART BRR register for achieving expected Baud Rate value.
1854:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
1855:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
1856:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
1857:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         (Baud rate value != 0)
1858:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   In case of oversampling by 16 and 8, BRR content must be greater than or equal to 16d.
1859:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_SetBaudRate
1860:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1861:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1862:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  PrescalerValue This parameter can be one of the following values:
1863:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
1864:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
1865:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
1866:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
1867:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
1868:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
1869:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
1870:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
1871:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
1872:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
1873:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
1874:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
1875:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1876:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1877:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1878:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  BaudRate Baud Rate
1879:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1880:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1881:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Presc
1882:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                           uint32_t OverSampling,
1883:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                           uint32_t BaudRate)
1884:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1885:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   uint32_t usartdiv;
1886:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   uint32_t brrtemp;
1887:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1888:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   if (PrescalerValue > LL_USART_PRESCALER_DIV256)
1889:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   {
1890:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****     /* Do not overstep the size of USART_PRESCALER_TAB */
1891:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   }
1892:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   else if (BaudRate == 0U)
1893:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   {
1894:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****     /* Can Not divide per 0 */
ARM GAS  /tmp/ccZgF6fk.s 			page 57


1895:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   }
1896:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   else if (OverSampling == LL_USART_OVERSAMPLING_8)
1897:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   {
1898:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****     usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
1899:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****     brrtemp = usartdiv & 0xFFF0U;
1900:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****     brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
1901:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****     USARTx->BRR = brrtemp;
1902:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   }
1903:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   else
1904:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   {
1905:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate
1906:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   }
1907:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1908:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1909:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1910:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return current Baud Rate value, according to USARTDIV present in BRR register
1911:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         (full BRR content), and to used Peripheral Clock and Oversampling mode values
1912:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   In case of non-initialized or invalid value stored in BRR register, value 0 will be ret
1913:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   In case of oversampling by 16 and 8, BRR content must be greater than or equal to 16d.
1914:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_GetBaudRate
1915:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1916:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1917:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  PrescalerValue This parameter can be one of the following values:
1918:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV1
1919:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV2
1920:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV4
1921:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV6
1922:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV8
1923:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV10
1924:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV12
1925:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV16
1926:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV32
1927:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV64
1928:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV128
1929:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PRESCALER_DIV256
1930:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1931:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1932:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1933:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Baud Rate
1934:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1935:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(const USART_TypeDef *USARTx, uint32_t PeriphClk, uint
1936:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****                                               uint32_t OverSampling)
1937:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1938:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   uint32_t usartdiv;
1939:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   uint32_t brrresult = 0x0U;
1940:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   uint32_t periphclkpresc = (uint32_t)(PeriphClk / (USART_PRESCALER_TAB[(uint8_t)PrescalerValue]));
1941:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1942:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   usartdiv = USARTx->BRR;
1943:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1944:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   if (usartdiv == 0U)
1945:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   {
1946:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****     /* Do not perform a division by 0 */
1947:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   }
1948:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   else if (OverSampling == LL_USART_OVERSAMPLING_8)
1949:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   {
1950:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****     usartdiv = (uint16_t)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;
1951:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****     if (usartdiv != 0U)
ARM GAS  /tmp/ccZgF6fk.s 			page 58


1952:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****     {
1953:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****       brrresult = (periphclkpresc * 2U) / usartdiv;
1954:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****     }
1955:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   }
1956:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   else
1957:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   {
1958:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****     if ((usartdiv & 0xFFFFU) != 0U)
1959:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****     {
1960:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****       brrresult = periphclkpresc / usartdiv;
1961:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****     }
1962:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   }
1963:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (brrresult);
1964:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1965:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1966:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1967:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Set Receiver Time Out Value (expressed in nb of bits duration)
1968:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_SetRxTimeout
1969:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1970:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  Timeout Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
1971:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1972:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1973:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetRxTimeout(USART_TypeDef *USARTx, uint32_t Timeout)
1974:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1975:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_RTO, Timeout);
1976:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1977:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1978:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1979:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Get Receiver Time Out Value (expressed in nb of bits duration)
1980:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll RTOR         RTO           LL_USART_GetRxTimeout
1981:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1982:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x00FFFFFF
1983:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1984:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetRxTimeout(const USART_TypeDef *USARTx)
1985:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1986:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_RTO));
1987:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
1988:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
1989:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
1990:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Set Block Length value in reception
1991:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_SetBlockLength
1992:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
1993:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  BlockLength Value between Min_Data=0x00 and Max_Data=0xFF
1994:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
1995:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
1996:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBlockLength(USART_TypeDef *USARTx, uint32_t BlockLength)
1997:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
1998:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->RTOR, USART_RTOR_BLEN, BlockLength << USART_RTOR_BLEN_Pos);
1999:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2000:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2001:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2002:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Get Block Length value in reception
2003:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll RTOR         BLEN          LL_USART_GetBlockLength
2004:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2005:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
2006:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2007:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBlockLength(const USART_TypeDef *USARTx)
2008:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
ARM GAS  /tmp/ccZgF6fk.s 			page 59


2009:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->RTOR, USART_RTOR_BLEN) >> USART_RTOR_BLEN_Pos);
2010:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2011:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2012:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2013:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
2014:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2015:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2016:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_IRDA Configuration functions related to Irda feature
2017:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
2018:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2019:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2020:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2021:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable IrDA mode
2022:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2023:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2024:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_EnableIrda
2025:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2026:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2027:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2028:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIrda(USART_TypeDef *USARTx)
2029:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2030:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
2031:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2032:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2033:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2034:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable IrDA mode
2035:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2036:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2037:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_DisableIrda
2038:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2039:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2040:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2041:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIrda(USART_TypeDef *USARTx)
2042:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2043:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_IREN);
2044:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2045:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2046:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2047:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Indicate if IrDA mode is enabled
2048:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2049:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2050:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_IsEnabledIrda
2051:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2052:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2053:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2054:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIrda(const USART_TypeDef *USARTx)
2055:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2056:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_IREN) == (USART_CR3_IREN)) ? 1UL : 0UL);
2057:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2058:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2059:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2060:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Configure IrDA Power Mode (Normal or Low Power)
2061:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2062:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2063:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_SetIrdaPowerMode
2064:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2065:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  PowerMode This parameter can be one of the following values:
ARM GAS  /tmp/ccZgF6fk.s 			page 60


2066:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
2067:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_LOW
2068:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2069:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2070:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPowerMode(USART_TypeDef *USARTx, uint32_t PowerMode)
2071:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2072:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_IRLP, PowerMode);
2073:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2074:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2075:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2076:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Retrieve IrDA Power Mode configuration (Normal or Low Power)
2077:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2078:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2079:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_GetIrdaPowerMode
2080:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2081:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2082:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
2083:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
2084:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2085:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPowerMode(const USART_TypeDef *USARTx)
2086:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2087:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_IRLP));
2088:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2089:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2090:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2091:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Set Irda prescaler value, used for dividing the USART clock source
2092:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
2093:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2094:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2095:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetIrdaPrescaler
2096:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2097:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0x00 and Max_Data=0xFF
2098:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2099:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
2101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, (uint16_t)PrescalerValue);
2103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return Irda prescaler value, used for dividing the USART clock source
2107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
2108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetIrdaPrescaler
2111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Irda prescaler value (Value between Min_Data=0x00 and Max_Data=0xFF)
2113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPrescaler(const USART_TypeDef *USARTx)
2115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
2117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
2121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
ARM GAS  /tmp/ccZgF6fk.s 			page 61


2123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_Smartcard Configuration functions related to Smartcard feat
2124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
2125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable Smartcard NACK transmission
2129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_EnableSmartcardNACK
2132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcardNACK(USART_TypeDef *USARTx)
2136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_NACK);
2138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable Smartcard NACK transmission
2142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_DisableSmartcardNACK
2145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcardNACK(USART_TypeDef *USARTx)
2149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_NACK);
2151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Indicate if Smartcard NACK transmission is enabled
2155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_IsEnabledSmartcardNACK
2158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcardNACK(const USART_TypeDef *USARTx)
2162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_NACK) == (USART_CR3_NACK)) ? 1UL : 0UL);
2164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable Smartcard mode
2168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_EnableSmartcard
2171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcard(USART_TypeDef *USARTx)
2175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
2177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
ARM GAS  /tmp/ccZgF6fk.s 			page 62


2180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable Smartcard mode
2181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_DisableSmartcard
2184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcard(USART_TypeDef *USARTx)
2188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_SCEN);
2190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Indicate if Smartcard mode is enabled
2194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_IsEnabledSmartcard
2197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcard(const USART_TypeDef *USARTx)
2201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_SCEN) == (USART_CR3_SCEN)) ? 1UL : 0UL);
2203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Set Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
2207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   This bit-field specifies the number of retries in transmit and receive, in Smartcard mo
2210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         In transmission mode, it specifies the number of automatic retransmission retries, befo
2211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         generating a transmission error (FE bit set).
2212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         In reception mode, it specifies the number or erroneous reception trials, before genera
2213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         reception error (RXNE and PE bits set)
2214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_SetSmartcardAutoRetryCount
2215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  AutoRetryCount Value between Min_Data=0 and Max_Data=7
2217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardAutoRetryCount(USART_TypeDef *USARTx, uint32_t AutoRetryC
2220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_SCARCNT, AutoRetryCount << USART_CR3_SCARCNT_Pos);
2222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return Smartcard Auto-Retry Count value (SCARCNT[2:0] bits)
2226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          SCARCNT       LL_USART_GetSmartcardAutoRetryCount
2229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Smartcard Auto-Retry Count value (Value between Min_Data=0 and Max_Data=7)
2231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardAutoRetryCount(const USART_TypeDef *USARTx)
2233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_SCARCNT) >> USART_CR3_SCARCNT_Pos);
2235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
ARM GAS  /tmp/ccZgF6fk.s 			page 63


2237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Set Smartcard prescaler value, used for dividing the USART clock
2239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
2240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetSmartcardPrescaler
2243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0 and Max_Data=31
2245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
2248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, (uint16_t)PrescalerValue);
2250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return Smartcard prescaler value, used for dividing the USART clock
2254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
2255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetSmartcardPrescaler
2258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Smartcard prescaler value (Value between Min_Data=0 and Max_Data=31)
2260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardPrescaler(const USART_TypeDef *USARTx)
2262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
2264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Set Smartcard Guard time value, expressed in nb of baud clocks periods
2268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
2269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_SetSmartcardGuardTime
2272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  GuardTime Value between Min_Data=0x00 and Max_Data=0xFF
2274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardGuardTime(USART_TypeDef *USARTx, uint32_t GuardTime)
2277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_GT, (uint16_t)(GuardTime << USART_GTPR_GT_Pos));
2279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return Smartcard Guard time value, expressed in nb of baud clocks periods
2283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
2284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_GetSmartcardGuardTime
2287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Smartcard Guard time value (Value between Min_Data=0x00 and Max_Data=0xFF)
2289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardGuardTime(const USART_TypeDef *USARTx)
2291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_GT) >> USART_GTPR_GT_Pos);
2293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
ARM GAS  /tmp/ccZgF6fk.s 			page 64


2294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
2297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_HalfDuplex Configuration functions related to Half Duplex f
2300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
2301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable Single Wire Half-Duplex mode
2305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_EnableHalfDuplex
2308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
2312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
2314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable Single Wire Half-Duplex mode
2318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_DisableHalfDuplex
2321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableHalfDuplex(USART_TypeDef *USARTx)
2325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
2327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Indicate if Single Wire Half-Duplex mode is enabled
2331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_IsEnabledHalfDuplex
2334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledHalfDuplex(const USART_TypeDef *USARTx)
2338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_HDSEL) == (USART_CR3_HDSEL)) ? 1UL : 0UL);
2340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
2344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_SPI_SLAVE Configuration functions related to SPI Slave feat
2347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
2348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable SPI Synchronous Slave mode
ARM GAS  /tmp/ccZgF6fk.s 			page 65


2351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          SLVEN         LL_USART_EnableSPISlave
2354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSPISlave(USART_TypeDef *USARTx)
2358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_SLVEN);
2360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable SPI Synchronous Slave mode
2364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          SLVEN         LL_USART_DisableSPISlave
2367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSPISlave(USART_TypeDef *USARTx)
2371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_SLVEN);
2373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Indicate if  SPI Synchronous Slave mode is enabled
2377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          SLVEN         LL_USART_IsEnabledSPISlave
2380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSPISlave(const USART_TypeDef *USARTx)
2384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_SLVEN) == (USART_CR2_SLVEN)) ? 1UL : 0UL);
2386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable SPI Slave Selection using NSS input pin
2390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   SPI Slave Selection depends on NSS input pin
2393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         (The slave is selected when NSS is low and deselected when NSS is high).
2394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          DIS_NSS       LL_USART_EnableSPISlaveSelect
2395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSPISlaveSelect(USART_TypeDef *USARTx)
2399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_DIS_NSS);
2401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable SPI Slave Selection using NSS input pin
2405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   SPI Slave will be always selected and NSS input pin will be ignored.
ARM GAS  /tmp/ccZgF6fk.s 			page 66


2408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          DIS_NSS       LL_USART_DisableSPISlaveSelect
2409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSPISlaveSelect(USART_TypeDef *USARTx)
2413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_DIS_NSS);
2415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Indicate if  SPI Slave Selection depends on NSS input pin
2419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
2420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
2421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          DIS_NSS       LL_USART_IsEnabledSPISlaveSelect
2422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSPISlaveSelect(const USART_TypeDef *USARTx)
2426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_DIS_NSS) != (USART_CR2_DIS_NSS)) ? 1UL : 0UL);
2428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
2432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_LIN Configuration functions related to LIN feature
2435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
2436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Set LIN Break Detection Length
2440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_SetLINBrkDetectionLen
2443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  LINBDLength This parameter can be one of the following values:
2445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLINBrkDetectionLen(USART_TypeDef *USARTx, uint32_t LINBDLength)
2450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBDL, LINBDLength);
2452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return LIN Break Detection Length
2456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_GetLINBrkDetectionLen
2459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
2462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
2463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLINBrkDetectionLen(const USART_TypeDef *USARTx)
ARM GAS  /tmp/ccZgF6fk.s 			page 67


2465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBDL));
2467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable LIN mode
2471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_EnableLIN
2474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableLIN(USART_TypeDef *USARTx)
2478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
2480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable LIN mode
2484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_DisableLIN
2487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableLIN(USART_TypeDef *USARTx)
2491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LINEN);
2493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Indicate if LIN mode is enabled
2497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_IsEnabledLIN
2500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledLIN(const USART_TypeDef *USARTx)
2504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_LINEN) == (USART_CR2_LINEN)) ? 1UL : 0UL);
2506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
2510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_DE Configuration functions related to Driver Enable feature
2513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
2514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Set DEDT (Driver Enable De-Assertion Time), Time value expressed on 5 bits ([4:0] bits)
2518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_SetDEDeassertionTime
2521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccZgF6fk.s 			page 68


2522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
2523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEDeassertionTime(USART_TypeDef *USARTx, uint32_t Time)
2526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEDT, Time << USART_CR1_DEDT_Pos);
2528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return DEDT (Driver Enable De-Assertion Time)
2532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          DEDT          LL_USART_GetDEDeassertionTime
2535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEDeassertionTime(const USART_TypeDef *USARTx)
2539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEDT) >> USART_CR1_DEDT_Pos);
2541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Set DEAT (Driver Enable Assertion Time), Time value expressed on 5 bits ([4:0] bits).
2545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_SetDEAssertionTime
2548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  Time Value between Min_Data=0 and Max_Data=31
2550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDEAssertionTime(USART_TypeDef *USARTx, uint32_t Time)
2553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_DEAT, Time << USART_CR1_DEAT_Pos);
2555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return DEAT (Driver Enable Assertion Time)
2559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          DEAT          LL_USART_GetDEAssertionTime
2562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Time value expressed on 5 bits ([4:0] bits) : Value between Min_Data=0 and Max_Data=31
2564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDEAssertionTime(const USART_TypeDef *USARTx)
2566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_DEAT) >> USART_CR1_DEAT_Pos);
2568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable Driver Enable (DE) Mode
2572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_EnableDEMode
2575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDEMode(USART_TypeDef *USARTx)
ARM GAS  /tmp/ccZgF6fk.s 			page 69


2579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_DEM);
2581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable Driver Enable (DE) Mode
2585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_DisableDEMode
2588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDEMode(USART_TypeDef *USARTx)
2592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_DEM);
2594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Indicate if Driver Enable (DE) Mode is enabled
2598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          DEM           LL_USART_IsEnabledDEMode
2601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDEMode(const USART_TypeDef *USARTx)
2605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_DEM) == (USART_CR3_DEM)) ? 1UL : 0UL);
2607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Select Driver Enable Polarity
2611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_SetDESignalPolarity
2614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
2616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDESignalPolarity(USART_TypeDef *USARTx, uint32_t Polarity)
2621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_DEP, Polarity);
2623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Return Driver Enable Polarity
2627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_DRIVER_ENABLE_INSTANCE(USARTx) can be used to check whether or not
2628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Driver Enable feature is supported by the USARTx instance.
2629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          DEP           LL_USART_GetDESignalPolarity
2630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
2632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_HIGH
2633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         @arg @ref LL_USART_DE_POLARITY_LOW
2634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDESignalPolarity(const USART_TypeDef *USARTx)
ARM GAS  /tmp/ccZgF6fk.s 			page 70


2636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_DEP));
2638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
2642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EF_AdvancedConfiguration Advanced Configurations services
2645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
2646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Asynchronous Mode (UART)
2650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   In UART mode, the following bits must be kept cleared:
2651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Asynchronous Mode
2663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         dedicated functions
2665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigAsyncMode\n
2666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigAsyncMode\n
2667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigAsyncMode\n
2668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigAsyncMode\n
2669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigAsyncMode
2670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
2674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   /* In Asynchronous mode, the following bits must be kept cleared:
2676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   - LINEN, CLKEN bits in the USART_CR2 register,
2677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.
2678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
2681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Synchronous Mode
2685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   In Synchronous mode, the following bits must be kept cleared:
2686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         This function also sets the USART in Synchronous mode.
2691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
2692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
ARM GAS  /tmp/ccZgF6fk.s 			page 71


2693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
2699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Synchronous Mode
2700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, Clock Polarity, ...) should be set using
2701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         dedicated functions
2702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSyncMode\n
2703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSyncMode\n
2704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSyncMode\n
2705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigSyncMode\n
2706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSyncMode
2707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSyncMode(USART_TypeDef *USARTx)
2711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   /* In Synchronous mode, the following bits must be kept cleared:
2713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
2714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.
2715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
2717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
2718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   /* set the UART/USART in Synchronous mode */
2719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
2720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in LIN Mode
2724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   In LIN mode, the following bits must be kept cleared:
2725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
2726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         This function also set the UART/USART in LIN mode.
2730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Set LINEN in CR2 using @ref LL_USART_EnableLIN() function
2739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Other remaining configurations items related to LIN Mode
2740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         (as Baud Rate, Word length, LIN Break Detection Length, ...) should be set using
2741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         dedicated functions
2742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_ConfigLINMode\n
2743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigLINMode\n
2744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR2          LINEN         LL_USART_ConfigLINMode\n
2745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigLINMode\n
2746:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigLINMode\n
2747:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigLINMode
2748:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2749:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
ARM GAS  /tmp/ccZgF6fk.s 			page 72


2750:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2751:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigLINMode(USART_TypeDef *USARTx)
2752:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2753:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   /* In LIN mode, the following bits must be kept cleared:
2754:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   - STOP and CLKEN bits in the USART_CR2 register,
2755:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.
2756:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2757:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_CLKEN | USART_CR2_STOP));
2758:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_SCEN | USART_CR3_HDSEL));
2759:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   /* Set the UART/USART in LIN mode */
2760:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
2761:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2762:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2763:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2764:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Half Duplex Mode
2765:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   In Half Duplex mode, the following bits must be kept cleared:
2766:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2767:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2768:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2769:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2770:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         This function also sets the UART/USART in Half Duplex mode.
2771:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
2772:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
2773:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2774:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2775:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2776:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2777:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2778:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Set HDSEL in CR3 using @ref LL_USART_EnableHalfDuplex() function
2779:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Half Duplex Mode
2780:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2781:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         dedicated functions
2782:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigHalfDuplexMode\n
2783:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigHalfDuplexMode\n
2784:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigHalfDuplexMode\n
2785:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigHalfDuplexMode\n
2786:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
2787:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2789:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2790:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
2791:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2792:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   /* In Half Duplex mode, the following bits must be kept cleared:
2793:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
2794:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   - SCEN and IREN bits in the USART_CR3 register.
2795:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2796:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2797:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
2798:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   /* set the UART/USART in Half Duplex mode */
2799:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
2800:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2801:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2802:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2803:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Smartcard Mode
2804:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   In Smartcard mode, the following bits must be kept cleared:
2805:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2806:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
ARM GAS  /tmp/ccZgF6fk.s 			page 73


2807:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2808:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         This function also configures Stop bits to 1.5 bits and
2809:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         sets the USART in Smartcard mode (SCEN bit).
2810:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Clock Output is also enabled (CLKEN).
2811:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
2812:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
2813:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2814:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2815:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2816:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2817:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2818:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
2819:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Set SCEN in CR3 using @ref LL_USART_EnableSmartcard() function
2820:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Smartcard Mode
2821:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
2822:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         dedicated functions
2823:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSmartcardMode\n
2824:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigSmartcardMode\n
2825:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSmartcardMode\n
2826:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSmartcardMode\n
2827:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSmartcardMode
2828:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2829:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2830:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2831:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSmartcardMode(USART_TypeDef *USARTx)
2832:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2833:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   /* In Smartcard mode, the following bits must be kept cleared:
2834:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
2835:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   - IREN and HDSEL bits in the USART_CR3 register.
2836:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2837:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
2838:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
2839:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   /* Configure Stop bits to 1.5 bits */
2840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   /* Synchronous mode is activated by default */
2841:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, (USART_CR2_STOP_0 | USART_CR2_STOP_1 | USART_CR2_CLKEN));
2842:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   /* set the UART/USART in Smartcard mode */
2843:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
2844:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2845:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2846:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2847:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Irda Mode
2848:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   In IRDA mode, the following bits must be kept cleared:
2849:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2850:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
2851:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2852:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2853:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         This function also sets the UART/USART in IRDA mode (IREN bit).
2854:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
2855:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
2856:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2857:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2858:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2859:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2860:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2861:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
2862:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Set IREN in CR3 using @ref LL_USART_EnableIrda() function
2863:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Irda Mode
ARM GAS  /tmp/ccZgF6fk.s 			page 74


2864:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         (as Baud Rate, Word length, Power mode, ...) should be set using
2865:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         dedicated functions
2866:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigIrdaMode\n
2867:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigIrdaMode\n
2868:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigIrdaMode\n
2869:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigIrdaMode\n
2870:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigIrdaMode\n
2871:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigIrdaMode
2872:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2873:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2874:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2875:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigIrdaMode(USART_TypeDef *USARTx)
2876:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2877:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   /* In IRDA mode, the following bits must be kept cleared:
2878:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
2879:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   - SCEN and HDSEL bits in the USART_CR3 register.
2880:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2881:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
2882:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
2883:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   /* set the UART/USART in IRDA mode */
2884:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
2885:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2886:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2887:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2888:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Multi processor Mode
2889:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         (several USARTs connected in a network, one of the USARTs can be the master,
2890:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         its TX output connected to the RX inputs of the other slaves USARTs).
2891:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   In MultiProcessor mode, the following bits must be kept cleared:
2892:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
2893:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
2894:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
2895:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
2896:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
2897:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
2898:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
2899:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
2900:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
2901:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
2902:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
2903:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Other remaining configurations items related to Multi processor Mode
2904:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         (as Baud Rate, Wake Up Method, Node address, ...) should be set using
2905:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         dedicated functions
2906:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigMultiProcessMode\n
2907:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigMultiProcessMode\n
2908:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigMultiProcessMode\n
2909:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigMultiProcessMode\n
2910:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigMultiProcessMode
2911:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2912:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
2913:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2914:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigMultiProcessMode(USART_TypeDef *USARTx)
2915:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2916:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   /* In Multi Processor mode, the following bits must be kept cleared:
2917:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
2918:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.
2919:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2920:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
ARM GAS  /tmp/ccZgF6fk.s 			page 75


2921:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
2922:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2923:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2924:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2925:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
2926:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2927:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2928:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EF_FLAG_Management FLAG_Management
2929:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
2930:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2931:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2932:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2933:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Flag is set or not
2934:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          PE            LL_USART_IsActiveFlag_PE
2935:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2936:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2937:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2938:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(const USART_TypeDef *USARTx)
2939:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2940:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
2941:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2942:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2943:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2944:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Framing Error Flag is set or not
2945:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
2946:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2947:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2948:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2949:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
2950:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2951:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
2952:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2953:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2954:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2955:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Noise error detected Flag is set or not
2956:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          NE            LL_USART_IsActiveFlag_NE
2957:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2958:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2959:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2960:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
2961:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2962:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
2963:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2964:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2965:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2966:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART OverRun Error Flag is set or not
2967:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
2968:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2969:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2970:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2971:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
2972:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2973:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
2974:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2975:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2976:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2977:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART IDLE line detected Flag is set or not
ARM GAS  /tmp/ccZgF6fk.s 			page 76


2978:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
2979:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2980:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2981:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2982:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
2983:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2984:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
2985:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
2986:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2987:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_IsActiveFlag_RXNE  LL_USART_IsActiveFlag_RXNE_RXFNE /* Redefinition for legacy pur
2988:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
2989:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
2990:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Read Data Register or USART RX FIFO Not Empty Flag is set or not
2991:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
2992:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
2993:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
2994:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
2995:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2996:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
2997:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(const USART_TypeDef *USARTx)
2998:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
2999:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
3000:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3001:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3002:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3003:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Flag is set or not
3004:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
3005:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3006:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3007:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3008:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
3009:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3010:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
3011:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3012:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3013:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_IsActiveFlag_TXE  LL_USART_IsActiveFlag_TXE_TXFNF /* Redefinition for legacy purpo
3014:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3015:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3016:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Transmit Data Register Empty or USART TX FIFO Not Full Flag is set o
3017:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3018:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3019:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
3020:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3021:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3022:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3023:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
3024:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3025:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
3026:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3027:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3028:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3029:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Flag is set or not
3030:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3031:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3032:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          LBDF          LL_USART_IsActiveFlag_LBD
3033:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3034:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
ARM GAS  /tmp/ccZgF6fk.s 			page 77


3035:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3036:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_LBD(const USART_TypeDef *USARTx)
3037:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3038:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
3039:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3040:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3041:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3042:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART CTS interrupt Flag is set or not
3043:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3044:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3045:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          CTSIF         LL_USART_IsActiveFlag_nCTS
3046:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3047:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3048:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3049:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_nCTS(const USART_TypeDef *USARTx)
3050:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3051:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_CTSIF) == (USART_ISR_CTSIF)) ? 1UL : 0UL);
3052:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3053:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3054:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3055:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART CTS Flag is set or not
3056:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3057:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3058:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          CTS           LL_USART_IsActiveFlag_CTS
3059:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3060:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3061:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3062:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_CTS(const USART_TypeDef *USARTx)
3063:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3064:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_CTS) == (USART_ISR_CTS)) ? 1UL : 0UL);
3065:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3066:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3067:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3068:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Receiver Time Out Flag is set or not
3069:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          RTOF          LL_USART_IsActiveFlag_RTO
3070:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3071:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3072:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3073:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RTO(const USART_TypeDef *USARTx)
3074:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3075:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RTOF) == (USART_ISR_RTOF)) ? 1UL : 0UL);
3076:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3077:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3078:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3079:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART End Of Block Flag is set or not
3080:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3081:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3082:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          EOBF          LL_USART_IsActiveFlag_EOB
3083:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3084:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3085:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3086:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_EOB(const USART_TypeDef *USARTx)
3087:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3088:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_EOBF) == (USART_ISR_EOBF)) ? 1UL : 0UL);
3089:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3090:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3091:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
ARM GAS  /tmp/ccZgF6fk.s 			page 78


3092:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the SPI Slave Underrun error flag is set or not
3093:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
3094:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
3095:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          UDR           LL_USART_IsActiveFlag_UDR
3096:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3097:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3098:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3099:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_UDR(const USART_TypeDef *USARTx)
3100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_UDR) == (USART_ISR_UDR)) ? 1UL : 0UL);
3102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Auto-Baud Rate Error Flag is set or not
3106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
3107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
3108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          ABRE          LL_USART_IsActiveFlag_ABRE
3109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ABRE(const USART_TypeDef *USARTx)
3113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_ABRE) == (USART_ISR_ABRE)) ? 1UL : 0UL);
3115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Auto-Baud Rate Flag is set or not
3119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(USARTx) can be used to check whether or 
3120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Auto Baud Rate detection feature is supported by the USARTx instance.
3121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          ABRF          LL_USART_IsActiveFlag_ABR
3122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ABR(const USART_TypeDef *USARTx)
3126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_ABRF) == (USART_ISR_ABRF)) ? 1UL : 0UL);
3128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Busy Flag is set or not
3132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          BUSY          LL_USART_IsActiveFlag_BUSY
3133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_BUSY(const USART_TypeDef *USARTx)
3137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_BUSY) == (USART_ISR_BUSY)) ? 1UL : 0UL);
3139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Character Match Flag is set or not
3143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          CMF           LL_USART_IsActiveFlag_CM
3144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_CM(const USART_TypeDef *USARTx)
3148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
ARM GAS  /tmp/ccZgF6fk.s 			page 79


3149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_CMF) == (USART_ISR_CMF)) ? 1UL : 0UL);
3150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Send Break Flag is set or not
3154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          SBKF          LL_USART_IsActiveFlag_SBK
3155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_SBK(const USART_TypeDef *USARTx)
3159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_SBKF) == (USART_ISR_SBKF)) ? 1UL : 0UL);
3161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Receive Wake Up from mute mode Flag is set or not
3165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          RWU           LL_USART_IsActiveFlag_RWU
3166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RWU(const USART_TypeDef *USARTx)
3170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RWU) == (USART_ISR_RWU)) ? 1UL : 0UL);
3172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Wake Up from stop mode Flag is set or not
3176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          WUF           LL_USART_IsActiveFlag_WKUP
3179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_WKUP(const USART_TypeDef *USARTx)
3183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_WUF) == (USART_ISR_WUF)) ? 1UL : 0UL);
3185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Transmit Enable Acknowledge Flag is set or not
3189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
3190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
3194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
3196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Receive Enable Acknowledge Flag is set or not
3200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
3201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
3205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
ARM GAS  /tmp/ccZgF6fk.s 			page 80


3206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
3207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART TX FIFO Empty Flag is set or not
3211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          TXFE          LL_USART_IsActiveFlag_TXFE
3214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXFE(const USART_TypeDef *USARTx)
3218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TXFE) == (USART_ISR_TXFE)) ? 1UL : 0UL);
3220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART RX FIFO Full Flag is set or not
3224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          RXFF          LL_USART_IsActiveFlag_RXFF
3227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXFF(const USART_TypeDef *USARTx)
3231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RXFF) == (USART_ISR_RXFF)) ? 1UL : 0UL);
3233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the Smartcard Transmission Complete Before Guard Time Flag is set or not
3237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          TCBGT         LL_USART_IsActiveFlag_TCBGT
3238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TCBGT(const USART_TypeDef *USARTx)
3242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TCBGT) == (USART_ISR_TCBGT)) ? 1UL : 0UL);
3244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART TX FIFO Threshold Flag is set or not
3248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          TXFT          LL_USART_IsActiveFlag_TXFT
3251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXFT(const USART_TypeDef *USARTx)
3255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_TXFT) == (USART_ISR_TXFT)) ? 1UL : 0UL);
3257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART RX FIFO Threshold Flag is set or not
3261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
ARM GAS  /tmp/ccZgF6fk.s 			page 81


3263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ISR          RXFT          LL_USART_IsActiveFlag_RXFT
3264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXFT(const USART_TypeDef *USARTx)
3268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->ISR, USART_ISR_RXFT) == (USART_ISR_RXFT)) ? 1UL : 0UL);
3270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Clear Parity Error Flag
3274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ICR          PECF          LL_USART_ClearFlag_PE
3275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
3279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_PECF);
3281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Clear Framing Error Flag
3285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
3286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
3290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_FECF);
3292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Clear Noise Error detected Flag
3296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
3297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
3301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_NECF);
3303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Clear OverRun Error Flag
3307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
3308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
3312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
3314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Clear IDLE line detected Flag
3318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
3319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccZgF6fk.s 			page 82


3320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
3323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
3325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Clear TX FIFO Empty Flag
3329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ICR          TXFECF        LL_USART_ClearFlag_TXFE
3332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TXFE(USART_TypeDef *USARTx)
3336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_TXFECF);
3338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Clear Transmission Complete Flag
3342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
3343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
3347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
3349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Clear Smartcard Transmission Complete Before Guard Time Flag
3353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ICR          TCBGTCF       LL_USART_ClearFlag_TCBGT
3354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TCBGT(USART_TypeDef *USARTx)
3358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_TCBGTCF);
3360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Clear LIN Break Detection Flag
3364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ICR          LBDCF         LL_USART_ClearFlag_LBD
3367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
3371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
3373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Clear CTS Interrupt Flag
ARM GAS  /tmp/ccZgF6fk.s 			page 83


3377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ICR          CTSCF         LL_USART_ClearFlag_nCTS
3380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_nCTS(USART_TypeDef *USARTx)
3384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_CTSCF);
3386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Clear Receiver Time Out Flag
3390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ICR          RTOCF         LL_USART_ClearFlag_RTO
3391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_RTO(USART_TypeDef *USARTx)
3395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_RTOCF);
3397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Clear End Of Block Flag
3401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ICR          EOBCF         LL_USART_ClearFlag_EOB
3404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_EOB(USART_TypeDef *USARTx)
3408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_EOBCF);
3410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Clear SPI Slave Underrun Flag
3414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_SPI_SLAVE_INSTANCE(USARTx) can be used to check whether or not
3415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         SPI Slave mode feature is supported by the USARTx instance.
3416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ICR          UDRCF         LL_USART_ClearFlag_UDR
3417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_UDR(USART_TypeDef *USARTx)
3421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_UDRCF);
3423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Clear Character Match Flag
3427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ICR          CMCF          LL_USART_ClearFlag_CM
3428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_CM(USART_TypeDef *USARTx)
3432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_CMCF);
ARM GAS  /tmp/ccZgF6fk.s 			page 84


3434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Clear Wake Up from stop mode Flag
3438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll ICR          WUCF          LL_USART_ClearFlag_WKUP
3441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_WKUP(USART_TypeDef *USARTx)
3445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   WRITE_REG(USARTx->ICR, USART_ICR_WUCF);
3447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
3451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EF_IT_Management IT_Management
3454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
3455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable IDLE Interrupt
3459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
3460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
3464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
3466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_EnableIT_RXNE  LL_USART_EnableIT_RXNE_RXFNE /* Redefinition for legacy purpose */
3469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable RX Not Empty and RX FIFO Not Empty Interrupt
3472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
3475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
3479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
3481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable Transmission Complete Interrupt
3485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
3486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
3490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
ARM GAS  /tmp/ccZgF6fk.s 			page 85


3491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
3492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_EnableIT_TXE  LL_USART_EnableIT_TXE_TXFNF /* Redefinition for legacy purpose */
3495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable TX Empty and TX FIFO Not Full Interrupt
3498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_EnableIT_TXE_TXFNF
3501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
3505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
3507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable Parity Error Interrupt
3511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_EnableIT_PE
3512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
3516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_PEIE);
3518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable Character Match Interrupt
3522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_EnableIT_CM
3523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CM(USART_TypeDef *USARTx)
3527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_CMIE);
3529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable Receiver Timeout Interrupt
3533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_EnableIT_RTO
3534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RTO(USART_TypeDef *USARTx)
3538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RTOIE);
3540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable End Of Block Interrupt
3544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_EnableIT_EOB
3547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccZgF6fk.s 			page 86


3548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_EOB(USART_TypeDef *USARTx)
3551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_EOBIE);
3553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable TX FIFO Empty Interrupt
3557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          TXFEIE        LL_USART_EnableIT_TXFE
3560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXFE(USART_TypeDef *USARTx)
3564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXFEIE);
3566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable RX FIFO Full Interrupt
3570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          RXFFIE        LL_USART_EnableIT_RXFF
3571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXFF(USART_TypeDef *USARTx)
3575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXFFIE);
3577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable LIN Break Detection Interrupt
3581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_EnableIT_LBD
3584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_LBD(USART_TypeDef *USARTx)
3588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
3590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable Error Interrupt
3594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
3595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_ISR register).
3596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           0: Interrupt is inhibited
3597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_ISR register.
3598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
3599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
3603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
ARM GAS  /tmp/ccZgF6fk.s 			page 87


3605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable CTS Interrupt
3609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_EnableIT_CTS
3612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CTS(USART_TypeDef *USARTx)
3616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_CTSIE);
3618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable Wake Up from Stop Mode Interrupt
3622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          WUFIE         LL_USART_EnableIT_WKUP
3625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_WKUP(USART_TypeDef *USARTx)
3629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_WUFIE);
3631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable TX FIFO Threshold Interrupt
3635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          TXFTIE        LL_USART_EnableIT_TXFT
3638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXFT(USART_TypeDef *USARTx)
3642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_TXFTIE);
3644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable Smartcard Transmission Complete Before Guard Time Interrupt
3648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          TCBGTIE       LL_USART_EnableIT_TCBGT
3651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TCBGT(USART_TypeDef *USARTx)
3655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_TCBGTIE);
3657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable RX FIFO Threshold Interrupt
3661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/ccZgF6fk.s 			page 88


3662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          RXFTIE        LL_USART_EnableIT_RXFT
3664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXFT(USART_TypeDef *USARTx)
3668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_RXFTIE);
3670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable IDLE Interrupt
3674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
3675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
3679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
3681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_DisableIT_RXNE  LL_USART_DisableIT_RXNE_RXFNE /* Redefinition for legacy purpose *
3684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable RX Not Empty and RX FIFO Not Empty Interrupt
3687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_DisableIT_RXNE_RXFNE
3690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
3694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
3696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable Transmission Complete Interrupt
3700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
3701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
3705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
3707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_DisableIT_TXE  LL_USART_DisableIT_TXE_TXFNF /* Redefinition for legacy purpose */
3710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable TX Empty and TX FIFO Not Full Interrupt
3713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
3716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
ARM GAS  /tmp/ccZgF6fk.s 			page 89


3719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
3720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
3722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable Parity Error Interrupt
3726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_DisableIT_PE
3727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_PE(USART_TypeDef *USARTx)
3731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
3733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable Character Match Interrupt
3737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_DisableIT_CM
3738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CM(USART_TypeDef *USARTx)
3742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_CMIE);
3744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3746:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3747:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable Receiver Timeout Interrupt
3748:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_DisableIT_RTO
3749:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3750:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3751:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3752:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RTO(USART_TypeDef *USARTx)
3753:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3754:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RTOIE);
3755:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3756:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3757:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3758:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable End Of Block Interrupt
3759:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3760:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3761:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_DisableIT_EOB
3762:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3763:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3764:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3765:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_EOB(USART_TypeDef *USARTx)
3766:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3767:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_EOBIE);
3768:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3769:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3770:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3771:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable TX FIFO Empty Interrupt
3772:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3773:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3774:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          TXFEIE        LL_USART_DisableIT_TXFE
3775:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
ARM GAS  /tmp/ccZgF6fk.s 			page 90


3776:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3777:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3778:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXFE(USART_TypeDef *USARTx)
3779:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3780:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXFEIE);
3781:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3782:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3783:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3784:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable RX FIFO Full Interrupt
3785:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3786:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3787:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          RXFFIE        LL_USART_DisableIT_RXFF
3788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3789:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3790:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3791:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXFF(USART_TypeDef *USARTx)
3792:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3793:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXFFIE);
3794:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3795:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3796:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3797:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable LIN Break Detection Interrupt
3798:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
3799:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
3800:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_DisableIT_LBD
3801:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3802:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3803:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3804:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_LBD(USART_TypeDef *USARTx)
3805:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3806:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
3807:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3808:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3809:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3810:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable Error Interrupt
3811:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
3812:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_ISR register).
3813:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           0: Interrupt is inhibited
3814:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_ISR register.
3815:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
3816:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3817:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3818:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3819:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
3820:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3821:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
3822:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3823:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3824:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3825:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable CTS Interrupt
3826:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
3827:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
3828:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
3829:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3830:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3831:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3832:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
ARM GAS  /tmp/ccZgF6fk.s 			page 91


3833:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3834:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
3835:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3836:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3837:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3838:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable Wake Up from Stop Mode Interrupt
3839:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
3840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
3841:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          WUFIE         LL_USART_DisableIT_WKUP
3842:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3843:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3844:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3845:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_WKUP(USART_TypeDef *USARTx)
3846:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3847:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_WUFIE);
3848:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3849:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3850:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3851:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable TX FIFO Threshold Interrupt
3852:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3853:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3854:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          TXFTIE        LL_USART_DisableIT_TXFT
3855:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3856:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3857:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3858:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXFT(USART_TypeDef *USARTx)
3859:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3860:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_TXFTIE);
3861:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3862:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3863:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3864:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable Smartcard Transmission Complete Before Guard Time Interrupt
3865:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3866:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3867:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          TCBGTIE       LL_USART_DisableIT_TCBGT
3868:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3869:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3870:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3871:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TCBGT(USART_TypeDef *USARTx)
3872:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3873:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_TCBGTIE);
3874:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3875:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3876:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3877:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable RX FIFO Threshold Interrupt
3878:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3879:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3880:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          RXFTIE        LL_USART_DisableIT_RXFT
3881:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3882:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
3883:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3884:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXFT(USART_TypeDef *USARTx)
3885:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3886:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_RXFTIE);
3887:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3888:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3889:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
ARM GAS  /tmp/ccZgF6fk.s 			page 92


3890:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART IDLE Interrupt  source is enabled or disabled.
3891:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
3892:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3893:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3894:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3895:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
3896:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3897:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
3898:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3899:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3900:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_IsEnabledIT_RXNE  LL_USART_IsEnabledIT_RXNE_RXFNE /* Redefinition for legacy purpo
3901:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3902:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3903:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART RX Not Empty and USART RX FIFO Not Empty Interrupt is enabled or dis
3904:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3905:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3906:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
3907:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3908:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3909:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3910:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *USARTx)
3911:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3912:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0
3913:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3914:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3915:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3916:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Interrupt is enabled or disabled.
3917:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
3918:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3919:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3920:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3921:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(const USART_TypeDef *USARTx)
3922:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3923:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
3924:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3925:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3926:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** #define LL_USART_IsEnabledIT_TXE  LL_USART_IsEnabledIT_TXE_TXFNF /* Redefinition for legacy purpose
3927:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3928:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3929:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART TX Empty and USART TX FIFO Not Full Interrupt is enabled or disabled
3930:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3931:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3932:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_IsEnabledIT_TXE_TXFNF
3933:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3934:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3935:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3936:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(const USART_TypeDef *USARTx)
3937:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3938:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL
3939:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3940:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3941:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3942:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Interrupt is enabled or disabled.
3943:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_IsEnabledIT_PE
3944:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3945:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3946:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
ARM GAS  /tmp/ccZgF6fk.s 			page 93


3947:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_PE(const USART_TypeDef *USARTx)
3948:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3949:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE)) ? 1UL : 0UL);
3950:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3951:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3952:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3953:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Character Match Interrupt is enabled or disabled.
3954:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          CMIE          LL_USART_IsEnabledIT_CM
3955:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3956:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3957:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3958:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_CM(const USART_TypeDef *USARTx)
3959:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3960:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_CMIE) == (USART_CR1_CMIE)) ? 1UL : 0UL);
3961:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3962:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3963:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3964:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Receiver Timeout Interrupt is enabled or disabled.
3965:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          RTOIE         LL_USART_IsEnabledIT_RTO
3966:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3967:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3968:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3969:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RTO(const USART_TypeDef *USARTx)
3970:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3971:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_RTOIE) == (USART_CR1_RTOIE)) ? 1UL : 0UL);
3972:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3973:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3974:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3975:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART End Of Block Interrupt is enabled or disabled.
3976:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
3977:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
3978:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          EOBIE         LL_USART_IsEnabledIT_EOB
3979:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3980:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3981:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3982:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_EOB(const USART_TypeDef *USARTx)
3983:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3984:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_EOBIE) == (USART_CR1_EOBIE)) ? 1UL : 0UL);
3985:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3986:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
3987:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
3988:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART TX FIFO Empty Interrupt is enabled or disabled
3989:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
3990:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
3991:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          TXFEIE        LL_USART_IsEnabledIT_TXFE
3992:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
3993:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
3994:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
3995:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXFE(const USART_TypeDef *USARTx)
3996:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
3997:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_TXFEIE) == (USART_CR1_TXFEIE)) ? 1UL : 0UL);
3998:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
3999:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
4000:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
4001:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART RX FIFO Full Interrupt is enabled or disabled
4002:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
4003:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
ARM GAS  /tmp/ccZgF6fk.s 			page 94


4004:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR1          RXFFIE        LL_USART_IsEnabledIT_RXFF
4005:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
4006:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4007:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
4008:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXFF(const USART_TypeDef *USARTx)
4009:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
4010:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR1, USART_CR1_RXFFIE) == (USART_CR1_RXFFIE)) ? 1UL : 0UL);
4011:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
4012:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
4013:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
4014:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Interrupt is enabled or disabled.
4015:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
4016:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
4017:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_IsEnabledIT_LBD
4018:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
4019:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4020:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
4021:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_LBD(const USART_TypeDef *USARTx)
4022:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
4023:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR2, USART_CR2_LBDIE) == (USART_CR2_LBDIE)) ? 1UL : 0UL);
4024:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
4025:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
4026:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
4027:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Error Interrupt is enabled or disabled.
4028:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_IsEnabledIT_ERROR
4029:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
4030:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4031:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
4032:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
4033:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
4034:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
4035:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
4036:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
4037:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
4038:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART CTS Interrupt is enabled or disabled.
4039:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
4040:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
4041:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_IsEnabledIT_CTS
4042:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
4043:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4044:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
4045:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_CTS(const USART_TypeDef *USARTx)
4046:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
4047:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_CTSIE) == (USART_CR3_CTSIE)) ? 1UL : 0UL);
4048:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
4049:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
4050:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
4051:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the USART Wake Up from Stop Mode Interrupt is enabled or disabled.
4052:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_WAKEUP_FROMSTOP_INSTANCE(USARTx) can be used to check whether or not
4053:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Wake-up from Stop mode feature is supported by the USARTx instance.
4054:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          WUFIE         LL_USART_IsEnabledIT_WKUP
4055:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
4056:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4057:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
4058:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_WKUP(const USART_TypeDef *USARTx)
4059:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
4060:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_WUFIE) == (USART_CR3_WUFIE)) ? 1UL : 0UL);
ARM GAS  /tmp/ccZgF6fk.s 			page 95


4061:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
4062:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
4063:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
4064:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if USART TX FIFO Threshold Interrupt is enabled or disabled
4065:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
4066:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
4067:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          TXFTIE        LL_USART_IsEnabledIT_TXFT
4068:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
4069:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4070:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
4071:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXFT(const USART_TypeDef *USARTx)
4072:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
4073:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_TXFTIE) == (USART_CR3_TXFTIE)) ? 1UL : 0UL);
4074:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
4075:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
4076:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
4077:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if the Smartcard Transmission Complete Before Guard Time Interrupt is enabled or 
4078:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
4079:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
4080:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          TCBGTIE       LL_USART_IsEnabledIT_TCBGT
4081:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
4082:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4083:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
4084:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TCBGT(const USART_TypeDef *USARTx)
4085:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
4086:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_TCBGTIE) == (USART_CR3_TCBGTIE)) ? 1UL : 0UL);
4087:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
4088:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
4089:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
4090:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if USART RX FIFO Threshold Interrupt is enabled or disabled
4091:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @note   Macro IS_UART_FIFO_INSTANCE(USARTx) can be used to check whether or not
4092:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   *         FIFO mode feature is supported by the USARTx instance.
4093:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          RXFTIE        LL_USART_IsEnabledIT_RXFT
4094:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
4095:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4096:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
4097:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXFT(const USART_TypeDef *USARTx)
4098:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
4099:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_RXFTIE) == (USART_CR3_RXFTIE)) ? 1UL : 0UL);
4100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
4101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
4102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
4103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @}
4104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
4105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
4106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /** @defgroup USART_LL_EF_DMA_Management DMA_Management
4107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @{
4108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
4109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
4110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
4111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable DMA Mode for reception
4112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
4113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
4114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
4115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
4116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
4117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
ARM GAS  /tmp/ccZgF6fk.s 			page 96


4118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 114              		.loc 3 4118 3 view .LVU14
 115 002c 3F4A     		ldr	r2, .L10+28
 116              	.LBE184:
 117              	.LBE183:
 118              	.LBB190:
 119              	.LBB181:
 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              Mode);
 120              		.loc 2 686 3 view .LVU15
 121 002e 41F02001 		orr	r1, r1, #32
 122 0032 9960     		str	r1, [r3, #8]
 123              	.LBE181:
 124              	.LBE190:
 125              	.LBB191:
 126              	.LBB192:
 737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              PeriphOrM2MSrcIncMode);
 127              		.loc 2 737 3 view .LVU16
 128 0034 9968     		ldr	r1, [r3, #8]
 129 0036 21F04001 		bic	r1, r1, #64
 130 003a 9960     		str	r1, [r3, #8]
 131              	.LBE192:
 132              	.LBE191:
 133              	.LBB194:
 134              	.LBB195:
 788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              MemoryOrM2MDstIncMode);
 135              		.loc 2 788 3 view .LVU17
 136 003c 9968     		ldr	r1, [r3, #8]
 137 003e 41F08001 		orr	r1, r1, #128
 138 0042 9960     		str	r1, [r3, #8]
 139              	.LBE195:
 140              	.LBE194:
 141              	.LBB197:
 142              	.LBB198:
 840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
 143              		.loc 2 840 3 view .LVU18
 144 0044 9968     		ldr	r1, [r3, #8]
 145 0046 21F44071 		bic	r1, r1, #768
 146 004a 9960     		str	r1, [r3, #8]
 147              	.LBE198:
 148              	.LBE197:
 149              	.LBB200:
 150              	.LBB201:
 893:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              MemoryOrM2MDstDataSize);
 151              		.loc 2 893 3 view .LVU19
 152 004c 9968     		ldr	r1, [r3, #8]
 153 004e 21F44061 		bic	r1, r1, #3072
 154 0052 9960     		str	r1, [r3, #8]
 155              	.LBE201:
 156              	.LBE200:
 157              	.LBB203:
 158              	.LBB204:
 947:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              Priority);
 159              		.loc 2 947 3 view .LVU20
 160 0054 9968     		ldr	r1, [r3, #8]
 161 0056 21F44051 		bic	r1, r1, #12288
 162 005a 41F40051 		orr	r1, r1, #8192
 163 005e 9960     		str	r1, [r3, #8]
ARM GAS  /tmp/ccZgF6fk.s 			page 97


 164              	.LBE204:
 165              	.LBE203:
 166              	.LBB206:
 167              	.LBB207:
1121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Memory address.
1125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_GetMemoryAddress
1127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
1136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
1137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
1138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])
1144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Peripheral address.
1148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_PERIPH_TO_MEMORY or LL_DMA_DIRECTION_MEMO
1149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_GetPeriphAddress
1150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
1159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
1160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
1161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])
1167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Set the Memory to Memory Source address.
1171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_SetM2MSrcAddress
ARM GAS  /tmp/ccZgF6fk.s 			page 98


1174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
1183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
1184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
1185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
1187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetM2MSrcAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAd
1189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPA
1192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Set the Memory to Memory Destination address.
1196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note   This API must not be called when the DMA channel is enabled.
1198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_SetM2MDstAddress
1199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
1208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
1209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
1210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
1212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetM2MDstAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAd
1214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMA
1217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get the Memory to Memory Source address.
1221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CPAR         PA            LL_DMA_GetM2MSrcAddress
1223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
ARM GAS  /tmp/ccZgF6fk.s 			page 99


1231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
1232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
1233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
1234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetM2MSrcAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])
1240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get the Memory to Memory Destination address.
1244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note   Interface used for direction LL_DMA_DIRECTION_MEMORY_TO_MEMORY only.
1245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CMAR         MA            LL_DMA_GetM2MDstAddress
1246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
1255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
1256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
1257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
1258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetM2MDstAddress(DMA_TypeDef *DMAx, uint32_t Channel)
1260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
1262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return (READ_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])
1263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Set DMA request for DMA instance on Channel x.
1267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note   Please refer to Reference Manual to get the available mapping of Request value link to 
1268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CSELR        C1S           LL_DMA_SetPeriphRequest\n
1269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CSELR        C2S           LL_DMA_SetPeriphRequest\n
1270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CSELR        C3S           LL_DMA_SetPeriphRequest\n
1271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CSELR        C4S           LL_DMA_SetPeriphRequest\n
1272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CSELR        C5S           LL_DMA_SetPeriphRequest\n
1273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CSELR        C6S           LL_DMA_SetPeriphRequest\n
1274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CSELR        C7S           LL_DMA_SetPeriphRequest
1275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
1284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
1285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
1286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  PeriphRequest This parameter can be one of the following values:
1287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_MEM2MEM
ARM GAS  /tmp/ccZgF6fk.s 			page 100


1288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR0
1289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR1
1290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR2
1291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR3
1292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_ADC1
1293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC1_CH1
1294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC1_CH2
1295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM6_UP
1296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM7_UP
1297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI1_RX
1298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI1_TX
1299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI2_RX
1300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI2_TX
1301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI3_RX
1302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI3_TX
1303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C1_RX
1304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C1_TX
1305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C2_RX
1306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C2_TX
1307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C3_RX
1308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C3_TX (*)
1309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C4_RX (*)
1310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C4_TX
1311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART1_RX
1312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART1_TX
1313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART2_RX
1314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART2_TX
1315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART3_RX
1316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART3_TX
1317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UART4_RX
1318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UART4_TX
1319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UART5_RX (*)
1320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UART5_TX (*)
1321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_LPUART1_RX
1322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_LPUART1_TX
1323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_ADC2
1324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_ADC3 (*)
1325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_ADC4 (*)
1326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_ADC5 (*)
1327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_QSPI (*)
1328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC2_CH1 (*)
1329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH1
1330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH2
1331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH3
1332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH4
1333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_UP
1334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_TRIG
1335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_COM
1336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_CH1
1337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_CH2
1338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_CH3
1339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_CH4
1340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_UP
1341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_TRIG
1342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_COM
1343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH1
1344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH2
ARM GAS  /tmp/ccZgF6fk.s 			page 101


1345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH3
1346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH4
1347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_UP
1348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH1
1349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH2
1350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH3
1351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH4
1352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_UP
1353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_TRIG
1354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_CH1
1355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_CH2
1356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_CH3
1357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_CH4
1358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_UP
1359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_CH1 (*)
1360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_CH2 (*)
1361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_CH3 (*)
1362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_CH4 (*)
1363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_UP (*)
1364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_TRIG (*)
1365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_CH1
1366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_UP
1367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_TRIG
1368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_COM
1369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM16_CH1
1370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM16_UP
1371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM17_CH1
1372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM17_UP
1373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM20_CH1 (*)
1374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM20_CH2 (*)
1375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM20_CH3 (*)
1376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM20_CH4 (*)
1377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM20_UP (*)
1378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_AES_IN
1379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_AES_OUT
1380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM20_TRIG (*)
1381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM20_COM (*)
1382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_HRTIM1_M (*)
1383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_HRTIM1_A (*)
1384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_HRTIM1_B (*)
1385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_HRTIM1_C (*)
1386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_HRTIM1_D (*)
1387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_HRTIM1_E (*)
1388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_HRTIM1_F (*)
1389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC3_CH1
1390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC3_CH2
1391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC4_CH1 (*)
1392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC4_CH2 (*)
1393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI4_RX (*)
1394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI4_TX (*)
1395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SAI1_A
1396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SAI1_B
1397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_FMAC_WRITE
1398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_FMAC_READ
1399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_CORDIC_WRITE
1400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_CORDIC_READ
1401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UCPD1_RX
ARM GAS  /tmp/ccZgF6fk.s 			page 102


1402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
1403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
1404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
1405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRe
1407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
1409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRe
1410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get DMA request for DMA instance on Channel x.
1414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CSELR        C1S           LL_DMA_GetPeriphRequest\n
1415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CSELR        C2S           LL_DMA_GetPeriphRequest\n
1416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CSELR        C3S           LL_DMA_GetPeriphRequest\n
1417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CSELR        C4S           LL_DMA_GetPeriphRequest\n
1418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CSELR        C5S           LL_DMA_GetPeriphRequest\n
1419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CSELR        C6S           LL_DMA_GetPeriphRequest\n
1420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         CSELR        C7S           LL_DMA_GetPeriphRequest
1421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
1423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
1424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
1425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
1426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
1427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
1428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
1429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
1430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
1431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
1432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval Returned value can be one of the following values:
1433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_MEM2MEM
1434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR0
1435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR1
1436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR2
1437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_GENERATOR3
1438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_ADC1
1439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC1_CH1
1440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC1_CH2
1441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM6_UP
1442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM7_UP
1443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI1_RX
1444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI1_TX
1445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI2_RX
1446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI2_TX
1447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI3_RX
1448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI3_TX
1449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C1_RX
1450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C1_TX
1451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C2_RX
1452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C2_TX
1453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C3_RX
1454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C3_TX (*)
1455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C4_RX (*)
1456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_I2C4_TX
1457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART1_RX
1458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART1_TX
ARM GAS  /tmp/ccZgF6fk.s 			page 103


1459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART2_RX
1460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART2_TX
1461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART3_RX
1462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_USART3_TX
1463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UART4_RX
1464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UART4_TX
1465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UART5_RX (*)
1466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UART5_TX (*)
1467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_LPUART1_RX
1468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_LPUART1_TX
1469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_ADC2
1470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_ADC3 (*)
1471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_ADC4 (*)
1472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_ADC5 (*)
1473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_QSPI (*)
1474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC2_CH1 (*)
1475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH1
1476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH2
1477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH3
1478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_CH4
1479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_UP
1480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_TRIG
1481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM1_COM
1482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_CH1
1483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_CH2
1484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_CH3
1485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_CH4
1486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_UP
1487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_TRIG
1488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM8_COM
1489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH1
1490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH2
1491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH3
1492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_CH4
1493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM2_UP
1494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH1
1495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH2
1496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH3
1497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_CH4
1498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_UP
1499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM3_TRIG
1500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_CH1
1501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_CH2
1502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_CH3
1503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_CH4
1504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM4_UP
1505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_CH1 (*)
1506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_CH2 (*)
1507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_CH3 (*)
1508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_CH4 (*)
1509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_UP (*)
1510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM5_TRIG (*)
1511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_CH1
1512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_UP
1513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_TRIG
1514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM15_COM
1515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM16_CH1
ARM GAS  /tmp/ccZgF6fk.s 			page 104


1516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM16_UP
1517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM17_CH1
1518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM17_UP
1519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM20_CH1 (*)
1520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM20_CH2 (*)
1521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM20_CH3 (*)
1522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM20_CH4 (*)
1523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM20_UP (*)
1524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_AES_IN
1525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_AES_OUT
1526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM20_TRIG (*)
1527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_TIM20_COM (*)
1528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_HRTIM1_M (*)
1529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_HRTIM1_A (*)
1530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_HRTIM1_B (*)
1531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_HRTIM1_C (*)
1532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_HRTIM1_D (*)
1533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_HRTIM1_E (*)
1534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_HRTIM1_F (*)
1535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC3_CH1
1536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC3_CH2
1537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC4_CH1 (*)
1538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_DAC4_CH2 (*)
1539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI4_RX (*)
1540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SPI4_TX (*)
1541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SAI1_A
1542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_SAI1_B
1543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_FMAC_WRITE
1544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_FMAC_READ
1545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_CORDIC_WRITE
1546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_CORDIC_READ
1547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UCPD1_RX
1548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
1549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
1550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_GetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel)
1552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
1554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return (READ_BIT((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID));
1555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
1559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_EF_FLAG_Management FLAG_Management
1562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
1563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 1 global interrupt flag.
1567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          GIF1          LL_DMA_IsActiveFlag_GI1
1568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI1(DMA_TypeDef *DMAx)
1572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
ARM GAS  /tmp/ccZgF6fk.s 			page 105


1573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF1) == (DMA_ISR_GIF1)) ? 1UL : 0UL);
1574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 2 global interrupt flag.
1578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          GIF2          LL_DMA_IsActiveFlag_GI2
1579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI2(DMA_TypeDef *DMAx)
1583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF2) == (DMA_ISR_GIF2)) ? 1UL : 0UL);
1585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 3 global interrupt flag.
1589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          GIF3          LL_DMA_IsActiveFlag_GI3
1590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI3(DMA_TypeDef *DMAx)
1594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF3) == (DMA_ISR_GIF3)) ? 1UL : 0UL);
1596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 4 global interrupt flag.
1600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          GIF4          LL_DMA_IsActiveFlag_GI4
1601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI4(DMA_TypeDef *DMAx)
1605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF4) == (DMA_ISR_GIF4)) ? 1UL : 0UL);
1607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 5 global interrupt flag.
1611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          GIF5          LL_DMA_IsActiveFlag_GI5
1612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI5(DMA_TypeDef *DMAx)
1616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF5) == (DMA_ISR_GIF5)) ? 1UL : 0UL);
1618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 6 global interrupt flag.
1622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          GIF6          LL_DMA_IsActiveFlag_GI6
1623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI6(DMA_TypeDef *DMAx)
1627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF6) == (DMA_ISR_GIF6)) ? 1UL : 0UL);
1629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
ARM GAS  /tmp/ccZgF6fk.s 			page 106


1630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel7)
1632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 7 global interrupt flag.
1634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          GIF7          LL_DMA_IsActiveFlag_GI7
1635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI7(DMA_TypeDef *DMAx)
1639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF7) == (DMA_ISR_GIF7)) ? 1UL : 0UL);
1641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel7 */
1643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel8)
1645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 8 global interrupt flag.
1647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          GIF8          LL_DMA_IsActiveFlag_GI8
1648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_GI8(DMA_TypeDef *DMAx)
1652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF8) == (DMA_ISR_GIF8)) ? 1UL : 0UL);
1654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel8 */
1656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 1 transfer complete flag.
1659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
1660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
1664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
1666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 2 transfer complete flag.
1670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          TCIF2         LL_DMA_IsActiveFlag_TC2
1671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
1675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
1677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 3 transfer complete flag.
1681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
1682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
1686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
ARM GAS  /tmp/ccZgF6fk.s 			page 107


1687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
1688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 4 transfer complete flag.
1692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          TCIF4         LL_DMA_IsActiveFlag_TC4
1693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC4(DMA_TypeDef *DMAx)
1697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
1699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 5 transfer complete flag.
1703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          TCIF5         LL_DMA_IsActiveFlag_TC5
1704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
1708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5)) ? 1UL : 0UL);
1710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 6 transfer complete flag.
1714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
1715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
1719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6)) ? 1UL : 0UL);
1721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel7)
1724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 7 transfer complete flag.
1726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
1727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
1731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7)) ? 1UL : 0UL);
1733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel7 */
1735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel8)
1737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 8 transfer complete flag.
1739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          TCIF8         LL_DMA_IsActiveFlag_TC8
1740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC8(DMA_TypeDef *DMAx)
ARM GAS  /tmp/ccZgF6fk.s 			page 108


1744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF8) == (DMA_ISR_TCIF8)) ? 1UL : 0UL);
1746:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1747:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel8 */
1748:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1749:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1750:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 1 half transfer flag.
1751:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          HTIF1         LL_DMA_IsActiveFlag_HT1
1752:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1753:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1754:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1755:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT1(DMA_TypeDef *DMAx)
1756:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1757:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
1758:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1759:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1760:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1761:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 2 half transfer flag.
1762:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          HTIF2         LL_DMA_IsActiveFlag_HT2
1763:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1764:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1765:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1766:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT2(DMA_TypeDef *DMAx)
1767:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1768:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF2) == (DMA_ISR_HTIF2)) ? 1UL : 0UL);
1769:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1770:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1771:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1772:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 3 half transfer flag.
1773:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          HTIF3         LL_DMA_IsActiveFlag_HT3
1774:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1775:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1776:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1777:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT3(DMA_TypeDef *DMAx)
1778:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1779:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF3) == (DMA_ISR_HTIF3)) ? 1UL : 0UL);
1780:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1781:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1782:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1783:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 4 half transfer flag.
1784:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          HTIF4         LL_DMA_IsActiveFlag_HT4
1785:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1786:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1787:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT4(DMA_TypeDef *DMAx)
1789:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1790:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF4) == (DMA_ISR_HTIF4)) ? 1UL : 0UL);
1791:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1792:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1793:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1794:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 5 half transfer flag.
1795:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          HTIF5         LL_DMA_IsActiveFlag_HT5
1796:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1797:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1798:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1799:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT5(DMA_TypeDef *DMAx)
1800:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
ARM GAS  /tmp/ccZgF6fk.s 			page 109


1801:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF5) == (DMA_ISR_HTIF5)) ? 1UL : 0UL);
1802:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1803:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1804:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1805:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 6 half transfer flag.
1806:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
1807:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1808:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1809:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1810:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
1811:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1812:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6)) ? 1UL : 0UL);
1813:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1814:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1815:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel8)
1816:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1817:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 7 half transfer flag.
1818:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          HTIF7         LL_DMA_IsActiveFlag_HT7
1819:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1820:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1821:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1822:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT7(DMA_TypeDef *DMAx)
1823:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1824:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF7) == (DMA_ISR_HTIF7)) ? 1UL : 0UL);
1825:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1826:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel7 */
1827:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1828:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel8)
1829:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1830:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 8 half transfer flag.
1831:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          HTIF8         LL_DMA_IsActiveFlag_HT8
1832:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1833:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1834:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1835:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT8(DMA_TypeDef *DMAx)
1836:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1837:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF8) == (DMA_ISR_HTIF8)) ? 1UL : 0UL);
1838:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1839:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel8 */
1840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1841:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1842:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 1 transfer error flag.
1843:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          TEIF1         LL_DMA_IsActiveFlag_TE1
1844:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1845:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1846:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1847:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
1848:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1849:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
1850:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1851:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1852:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1853:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 2 transfer error flag.
1854:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          TEIF2         LL_DMA_IsActiveFlag_TE2
1855:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1856:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1857:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
ARM GAS  /tmp/ccZgF6fk.s 			page 110


1858:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx)
1859:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1860:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
1861:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1862:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1863:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1864:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 3 transfer error flag.
1865:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          TEIF3         LL_DMA_IsActiveFlag_TE3
1866:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1867:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1868:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1869:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE3(DMA_TypeDef *DMAx)
1870:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1871:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF3) == (DMA_ISR_TEIF3)) ? 1UL : 0UL);
1872:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1873:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1874:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1875:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 4 transfer error flag.
1876:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          TEIF4         LL_DMA_IsActiveFlag_TE4
1877:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1878:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1879:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1880:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE4(DMA_TypeDef *DMAx)
1881:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1882:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF4) == (DMA_ISR_TEIF4)) ? 1UL : 0UL);
1883:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1884:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1885:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1886:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 5 transfer error flag.
1887:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          TEIF5         LL_DMA_IsActiveFlag_TE5
1888:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1889:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1890:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1891:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE5(DMA_TypeDef *DMAx)
1892:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1893:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF5) == (DMA_ISR_TEIF5)) ? 1UL : 0UL);
1894:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1895:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1896:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1897:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 6 transfer error flag.
1898:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          TEIF6         LL_DMA_IsActiveFlag_TE6
1899:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1900:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1901:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1902:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE6(DMA_TypeDef *DMAx)
1903:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1904:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF6) == (DMA_ISR_TEIF6)) ? 1UL : 0UL);
1905:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1906:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1907:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel7)
1908:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1909:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 7 transfer error flag.
1910:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          TEIF7         LL_DMA_IsActiveFlag_TE7
1911:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1912:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1913:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1914:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE7(DMA_TypeDef *DMAx)
ARM GAS  /tmp/ccZgF6fk.s 			page 111


1915:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1916:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF7) == (DMA_ISR_TEIF7)) ? 1UL : 0UL);
1917:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1918:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel7 */
1919:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1920:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel8)
1921:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1922:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Get Channel 8 transfer error flag.
1923:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll ISR          TEIF8         LL_DMA_IsActiveFlag_TE8
1924:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1925:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval State of bit (1 or 0).
1926:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1927:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE8(DMA_TypeDef *DMAx)
1928:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1929:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF8) == (DMA_ISR_TEIF8)) ? 1UL : 0UL);
1930:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1931:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel8 */
1932:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1933:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1934:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 1 global interrupt flag.
1935:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note Do not Clear Channel 1 global interrupt flag when the channel in ON.
1936:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
1937:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC1, LL_DMA_ClearFlag_HT1,
1938:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     LL_DMA_ClearFlag_TE1. bug id 2.3.1 in Product Errata Sheet.
1939:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CGIF1         LL_DMA_ClearFlag_GI1
1940:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1941:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
1942:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1943:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI1(DMA_TypeDef *DMAx)
1944:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1945:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
1946:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1947:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1948:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1949:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 2 global interrupt flag.
1950:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note Do not Clear Channel 2 global interrupt flag when the channel in ON.
1951:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
1952:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC2, LL_DMA_ClearFlag_HT2,
1953:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     LL_DMA_ClearFlag_TE2. bug id 2.3.1 in Product Errata Sheet.
1954:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CGIF2         LL_DMA_ClearFlag_GI2
1955:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1956:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
1957:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1958:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI2(DMA_TypeDef *DMAx)
1959:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1960:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
1961:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1962:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1963:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1964:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 3 global interrupt flag.
1965:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note Do not Clear Channel 3 global interrupt flag when the channel in ON.
1966:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
1967:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC3, LL_DMA_ClearFlag_HT3,
1968:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     LL_DMA_ClearFlag_TE3. bug id 2.3.1 in Product Errata Sheet.
1969:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CGIF3         LL_DMA_ClearFlag_GI3
1970:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1971:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
ARM GAS  /tmp/ccZgF6fk.s 			page 112


1972:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1973:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx)
1974:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1975:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
1976:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1977:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1978:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1979:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 4 global interrupt flag.
1980:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note Do not Clear Channel 4 global interrupt flag when the channel in ON.
1981:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
1982:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC4, LL_DMA_ClearFlag_HT4,
1983:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     LL_DMA_ClearFlag_TE4. bug id 2.3.1 in Product Errata Sheet.
1984:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CGIF4         LL_DMA_ClearFlag_GI4
1985:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
1986:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
1987:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
1988:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI4(DMA_TypeDef *DMAx)
1989:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
1990:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF4);
1991:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
1992:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
1993:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
1994:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 5 global interrupt flag.
1995:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note Do not Clear Channel 5 global interrupt flag when the channel in ON.
1996:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
1997:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC5, LL_DMA_ClearFlag_HT5,
1998:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     LL_DMA_ClearFlag_TE5. bug id 2.3.1 in Product Errata Sheet.
1999:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CGIF5         LL_DMA_ClearFlag_GI5
2000:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2001:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2002:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2003:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI5(DMA_TypeDef *DMAx)
2004:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2005:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF5);
2006:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2007:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2008:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2009:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 6 global interrupt flag.
2010:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note Do not Clear Channel 6 global interrupt flag when the channel in ON.
2011:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
2012:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC6, LL_DMA_ClearFlag_HT6,
2013:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     LL_DMA_ClearFlag_TE6. bug id 2.3.1 in Product Errata Sheet.
2014:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CGIF6         LL_DMA_ClearFlag_GI6
2015:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2016:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2017:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2018:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI6(DMA_TypeDef *DMAx)
2019:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2020:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF6);
2021:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2022:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2023:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel7)
2024:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2025:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 7 global interrupt flag.
2026:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note Do not Clear Channel 7 global interrupt flag when the channel in ON.
2027:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
2028:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC7, LL_DMA_ClearFlag_HT7,
ARM GAS  /tmp/ccZgF6fk.s 			page 113


2029:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     LL_DMA_ClearFlag_TE7. bug id 2.3.1 in Product Errata Sheet.
2030:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CGIF7         LL_DMA_ClearFlag_GI7
2031:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2032:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2033:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2034:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI7(DMA_TypeDef *DMAx)
2035:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2036:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF7);
2037:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2038:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel7 */
2039:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2040:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel8)
2041:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2042:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 8 global interrupt flag.
2043:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @note Do not Clear Channel 8 global interrupt flag when the channel in ON.
2044:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     Instead clear specific flags transfer complete, half transfer & transfer
2045:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     error flag with LL_DMA_ClearFlag_TC8, LL_DMA_ClearFlag_HT8,
2046:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****     LL_DMA_ClearFlag_TE8. bug id 2.3.1 in Product Errata Sheet.
2047:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CGIF8         LL_DMA_ClearFlag_GI8
2048:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2049:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2050:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2051:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_GI8(DMA_TypeDef *DMAx)
2052:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2053:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF8);
2054:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2055:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel8 */
2056:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2057:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2058:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 1  transfer complete flag.
2059:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
2060:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2061:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2062:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2063:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
2064:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2065:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
2066:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2067:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2068:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2069:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 2  transfer complete flag.
2070:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF2        LL_DMA_ClearFlag_TC2
2071:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2072:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2073:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2074:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
2075:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2076:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
2077:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2078:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2079:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2080:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 3  transfer complete flag.
2081:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF3        LL_DMA_ClearFlag_TC3
2082:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2083:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2084:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2085:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC3(DMA_TypeDef *DMAx)
ARM GAS  /tmp/ccZgF6fk.s 			page 114


2086:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2087:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
2088:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2089:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2090:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2091:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 4  transfer complete flag.
2092:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF4        LL_DMA_ClearFlag_TC4
2093:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2094:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2095:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2096:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
2097:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2098:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
2099:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 5  transfer complete flag.
2103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF5        LL_DMA_ClearFlag_TC5
2104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
2108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
2110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 6  transfer complete flag.
2114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
2115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
2119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
2121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel7)
2124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 7  transfer complete flag.
2126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
2127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
2131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
2133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel7 */
2135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel8)
2137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 8  transfer complete flag.
2139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CTCIF8        LL_DMA_ClearFlag_TC8
2140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
ARM GAS  /tmp/ccZgF6fk.s 			page 115


2143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TC8(DMA_TypeDef *DMAx)
2144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF8);
2146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel8 */
2148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 1  half transfer flag.
2151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF1        LL_DMA_ClearFlag_HT1
2152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
2156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
2158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 2  half transfer flag.
2162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF2        LL_DMA_ClearFlag_HT2
2163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT2(DMA_TypeDef *DMAx)
2167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF2);
2169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 3  half transfer flag.
2173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF3        LL_DMA_ClearFlag_HT3
2174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT3(DMA_TypeDef *DMAx)
2178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF3);
2180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 4  half transfer flag.
2184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF4        LL_DMA_ClearFlag_HT4
2185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT4(DMA_TypeDef *DMAx)
2189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF4);
2191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 5  half transfer flag.
2195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF5        LL_DMA_ClearFlag_HT5
2196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT5(DMA_TypeDef *DMAx)
ARM GAS  /tmp/ccZgF6fk.s 			page 116


2200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
2202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 6  half transfer flag.
2206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
2207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
2211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
2213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel7)
2216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 7  half transfer flag.
2218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF7        LL_DMA_ClearFlag_HT7
2219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT7(DMA_TypeDef *DMAx)
2223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF7);
2225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel7 */
2227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel8)
2229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 8  half transfer flag.
2231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CHTIF8        LL_DMA_ClearFlag_HT8
2232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_HT8(DMA_TypeDef *DMAx)
2236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF8);
2238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel8 */
2240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 1 transfer error flag.
2243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CTEIF1        LL_DMA_ClearFlag_TE1
2244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
2248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
2250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 2 transfer error flag.
2254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CTEIF2        LL_DMA_ClearFlag_TE2
2255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
ARM GAS  /tmp/ccZgF6fk.s 			page 117


2257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE2(DMA_TypeDef *DMAx)
2259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
2261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 3 transfer error flag.
2265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CTEIF3        LL_DMA_ClearFlag_TE3
2266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE3(DMA_TypeDef *DMAx)
2270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
2272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 4 transfer error flag.
2276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CTEIF4        LL_DMA_ClearFlag_TE4
2277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE4(DMA_TypeDef *DMAx)
2281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF4);
2283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 5 transfer error flag.
2287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CTEIF5        LL_DMA_ClearFlag_TE5
2288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE5(DMA_TypeDef *DMAx)
2292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF5);
2294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 6 transfer error flag.
2298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CTEIF6        LL_DMA_ClearFlag_TE6
2299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE6(DMA_TypeDef *DMAx)
2303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF6);
2305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel7)
2308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 7 transfer error flag.
2310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CTEIF7        LL_DMA_ClearFlag_TE7
2311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
ARM GAS  /tmp/ccZgF6fk.s 			page 118


2314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE7(DMA_TypeDef *DMAx)
2315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF7);
2317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel7 */
2319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #if defined (DMA1_Channel8)
2321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Clear Channel 8 transfer error flag.
2323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll IFCR         CTEIF8        LL_DMA_ClearFlag_TE8
2324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_ClearFlag_TE8(DMA_TypeDef *DMAx)
2328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF8);
2330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
2331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** #endif /* DMA1_Channel8 */
2332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @}
2335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** 
2337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /** @defgroup DMA_LL_EF_IT_Management IT_Management
2338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @{
2339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** /**
2341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @brief  Enable Transfer complete interrupt.
2342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @rmtoll CCR          TCIE          LL_DMA_EnableIT_TC
2343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  DMAx DMAx Instance
2344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @param  Channel This parameter can be one of the following values:
2345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_1
2346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_2
2347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_3
2348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_4
2349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_5
2350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_6
2351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_7 (*)
2352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         @arg @ref LL_DMA_CHANNEL_8 (*)
2353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   *         (*) Not on all G4 devices
2354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   * @retval None
2355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   */
2356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** __STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
2357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
2358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   uint32_t dma_base_addr = (uint32_t)DMAx;
2359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, 
 168              		.loc 2 2359 3 view .LVU21
 169 0060 9968     		ldr	r1, [r3, #8]
 170 0062 41F00201 		orr	r1, r1, #2
 171 0066 9960     		str	r1, [r3, #8]
 172              	.LBE207:
 173              	.LBE206:
 174              	.LBB209:
 175              	.LBB210:
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 176              		.loc 2 542 3 view .LVU22
 177 0068 D969     		ldr	r1, [r3, #28]
ARM GAS  /tmp/ccZgF6fk.s 			page 119


 178 006a 21F00101 		bic	r1, r1, #1
 179 006e D961     		str	r1, [r3, #28]
 180              	.LBE210:
 181              	.LBE209:
 182              	.LBB212:
 183              	.LBB175:
1120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 184              		.loc 2 1120 3 view .LVU23
 185 0070 5C62     		str	r4, [r3, #36]
 186              	.LBE175:
 187              	.LBE212:
 188              	.LBB213:
 189              	.LBB214:
 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              Mode);
 190              		.loc 2 686 3 view .LVU24
 191 0072 D969     		ldr	r1, [r3, #28]
 192 0074 21F02001 		bic	r1, r1, #32
 193 0078 D961     		str	r1, [r3, #28]
 194              	.LBE214:
 195              	.LBE213:
 196              	.LBB216:
 197              	.LBB217:
 737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              PeriphOrM2MSrcIncMode);
 198              		.loc 2 737 3 view .LVU25
 199 007a D969     		ldr	r1, [r3, #28]
 200              	.LBE217:
 201              	.LBE216:
 202              	.LBE255:
  57:Src/vesc_uart.c ****     uart_handle.last_alive_time = 0;
 203              		.loc 1 57 30 view .LVU26
 204 007c 9FED247B 		vldr.64	d7, .L10	@ int
 205              	.LBB256:
 206              	.LBB220:
 207              	.LBB218:
 737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              PeriphOrM2MSrcIncMode);
 208              		.loc 2 737 3 view .LVU27
 209 0080 21F04001 		bic	r1, r1, #64
 210 0084 D961     		str	r1, [r3, #28]
 211              	.LBE218:
 212              	.LBE220:
 213              	.LBE256:
  55:Src/vesc_uart.c ****     uart_handle.rx_complete = false;
 214              		.loc 1 55 24 view .LVU28
 215 0086 0021     		movs	r1, #0
 216 0088 0164     		str	r1, [r0, #64]
  56:Src/vesc_uart.c ****     uart_handle.last_rx_size = 0;
 217              		.loc 1 56 5 is_stmt 1 view .LVU29
  56:Src/vesc_uart.c ****     uart_handle.last_rx_size = 0;
 218              		.loc 1 56 29 is_stmt 0 view .LVU30
 219 008a 80F84410 		strb	r1, [r0, #68]
  57:Src/vesc_uart.c ****     uart_handle.last_alive_time = 0;
 220              		.loc 1 57 5 is_stmt 1 view .LVU31
  58:Src/vesc_uart.c **** 
 221              		.loc 1 58 5 view .LVU32
  57:Src/vesc_uart.c ****     uart_handle.last_alive_time = 0;
 222              		.loc 1 57 30 is_stmt 0 view .LVU33
 223 008e 80ED127B 		vstr.64	d7, [r0, #72]	@ int
ARM GAS  /tmp/ccZgF6fk.s 			page 120


 224              		.loc 1 61 5 is_stmt 1 view .LVU34
 225              	.LBB257:
 226              		.loc 1 61 5 view .LVU35
 227              		.loc 1 61 5 view .LVU36
 228              		.loc 1 61 5 view .LVU37
 229              		.loc 1 61 5 view .LVU38
 230              	.LBE257:
 231              		.loc 1 61 5 view .LVU39
  62:Src/vesc_uart.c **** 
  63:Src/vesc_uart.c ****     /* Configure and initialize DMA */
  64:Src/vesc_uart.c ****     ConfigureDMA();
 232              		.loc 1 64 5 view .LVU40
 233              	.LBB258:
 234              	.LBI164:
  12:Src/vesc_uart.c **** {
 235              		.loc 1 12 13 view .LVU41
 236              	.LBE258:
  15:Src/vesc_uart.c ****     
 237              		.loc 1 15 5 view .LVU42
 238              	.LVL0:
 239              	.LBB259:
 240              	.LBB221:
 241              	.LBI165:
 539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 242              		.loc 2 539 22 view .LVU43
 243              	.LBB168:
 541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR
 244              		.loc 2 541 3 view .LVU44
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 245              		.loc 2 542 3 view .LVU45
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 246              		.loc 2 542 3 is_stmt 0 view .LVU46
 247              	.LBE168:
 248              	.LBE221:
 249              	.LBE259:
  18:Src/vesc_uart.c ****     LL_DMA_SetMode(VESC_DMA, VESC_DMA_RX_CHANNEL, LL_DMA_MODE_CIRCULAR);
 250              		.loc 1 18 5 is_stmt 1 view .LVU47
 251              	.LBB260:
 252              	.LBB222:
 253              	.LBI169:
1117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 254              		.loc 2 1117 22 view .LVU48
 255              	.LBB172:
1119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPA
 256              		.loc 2 1119 3 view .LVU49
1120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 257              		.loc 2 1120 3 view .LVU50
1120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 258              		.loc 2 1120 3 is_stmt 0 view .LVU51
 259              	.LBE172:
 260              	.LBE222:
 261              	.LBE260:
  19:Src/vesc_uart.c ****     LL_DMA_SetPeriphIncMode(VESC_DMA, VESC_DMA_RX_CHANNEL, LL_DMA_PERIPH_NOINCREMENT);
 262              		.loc 1 19 5 is_stmt 1 view .LVU52
 263              	.LBB261:
 264              	.LBB223:
 265              	.LBI179:
ARM GAS  /tmp/ccZgF6fk.s 			page 121


 683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 266              		.loc 2 683 22 view .LVU53
 267              	.LBB182:
 685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 268              		.loc 2 685 3 view .LVU54
 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              Mode);
 269              		.loc 2 686 3 view .LVU55
 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              Mode);
 270              		.loc 2 686 3 is_stmt 0 view .LVU56
 271              	.LBE182:
 272              	.LBE223:
 273              	.LBE261:
  20:Src/vesc_uart.c ****     LL_DMA_SetMemoryIncMode(VESC_DMA, VESC_DMA_RX_CHANNEL, LL_DMA_MEMORY_INCREMENT);
 274              		.loc 1 20 5 is_stmt 1 view .LVU57
 275              	.LBB262:
 276              	.LBB224:
 277              	.LBI191:
 734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 278              		.loc 2 734 22 view .LVU58
 279              	.LBB193:
 736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 280              		.loc 2 736 3 view .LVU59
 737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              PeriphOrM2MSrcIncMode);
 281              		.loc 2 737 3 view .LVU60
 737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              PeriphOrM2MSrcIncMode);
 282              		.loc 2 737 3 is_stmt 0 view .LVU61
 283              	.LBE193:
 284              	.LBE224:
 285              	.LBE262:
  21:Src/vesc_uart.c ****     LL_DMA_SetPeriphSize(VESC_DMA, VESC_DMA_RX_CHANNEL, LL_DMA_PDATAALIGN_BYTE);
 286              		.loc 1 21 5 is_stmt 1 view .LVU62
 287              	.LBB263:
 288              	.LBB225:
 289              	.LBI194:
 785:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 290              		.loc 2 785 22 view .LVU63
 291              	.LBB196:
 787:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 292              		.loc 2 787 3 view .LVU64
 788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              MemoryOrM2MDstIncMode);
 293              		.loc 2 788 3 view .LVU65
 788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              MemoryOrM2MDstIncMode);
 294              		.loc 2 788 3 is_stmt 0 view .LVU66
 295              	.LBE196:
 296              	.LBE225:
 297              	.LBE263:
  22:Src/vesc_uart.c ****     LL_DMA_SetMemorySize(VESC_DMA, VESC_DMA_RX_CHANNEL, LL_DMA_MDATAALIGN_BYTE);
 298              		.loc 1 22 5 is_stmt 1 view .LVU67
 299              	.LBB264:
 300              	.LBB226:
 301              	.LBI197:
 837:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 302              		.loc 2 837 22 view .LVU68
 303              	.LBB199:
 839:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 304              		.loc 2 839 3 view .LVU69
 840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
ARM GAS  /tmp/ccZgF6fk.s 			page 122


 305              		.loc 2 840 3 view .LVU70
 840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
 306              		.loc 2 840 3 is_stmt 0 view .LVU71
 307              	.LBE199:
 308              	.LBE226:
 309              	.LBE264:
  23:Src/vesc_uart.c ****     LL_DMA_SetChannelPriorityLevel(VESC_DMA, VESC_DMA_RX_CHANNEL, LL_DMA_PRIORITY_HIGH);
 310              		.loc 1 23 5 is_stmt 1 view .LVU72
 311              	.LBB265:
 312              	.LBB227:
 313              	.LBI200:
 890:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 314              		.loc 2 890 22 view .LVU73
 315              	.LBB202:
 892:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 316              		.loc 2 892 3 view .LVU74
 893:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              MemoryOrM2MDstDataSize);
 317              		.loc 2 893 3 view .LVU75
 893:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              MemoryOrM2MDstDataSize);
 318              		.loc 2 893 3 is_stmt 0 view .LVU76
 319              	.LBE202:
 320              	.LBE227:
 321              	.LBE265:
  24:Src/vesc_uart.c ****     LL_DMA_EnableIT_TC(VESC_DMA, VESC_DMA_RX_CHANNEL);
 322              		.loc 1 24 5 is_stmt 1 view .LVU77
 323              	.LBB266:
 324              	.LBB228:
 325              	.LBI203:
 944:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 326              		.loc 2 944 22 view .LVU78
 327              	.LBB205:
 946:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 328              		.loc 2 946 3 view .LVU79
 947:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              Priority);
 329              		.loc 2 947 3 view .LVU80
 947:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              Priority);
 330              		.loc 2 947 3 is_stmt 0 view .LVU81
 331              	.LBE205:
 332              	.LBE228:
 333              	.LBE266:
  25:Src/vesc_uart.c **** 
 334              		.loc 1 25 5 is_stmt 1 view .LVU82
 335              	.LBB267:
 336              	.LBB229:
 337              	.LBI206:
2356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 338              		.loc 2 2356 22 view .LVU83
 339              	.LBB208:
2358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, 
 340              		.loc 2 2358 3 view .LVU84
 341              		.loc 2 2359 3 view .LVU85
 342              		.loc 2 2359 3 is_stmt 0 view .LVU86
 343              	.LBE208:
 344              	.LBE229:
 345              	.LBE267:
  28:Src/vesc_uart.c ****     
 346              		.loc 1 28 5 is_stmt 1 view .LVU87
ARM GAS  /tmp/ccZgF6fk.s 			page 123


 347              	.LBB268:
 348              	.LBB230:
 349              	.LBI209:
 539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 350              		.loc 2 539 22 view .LVU88
 351              	.LBB211:
 541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR
 352              		.loc 2 541 3 view .LVU89
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 353              		.loc 2 542 3 view .LVU90
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 354              		.loc 2 542 3 is_stmt 0 view .LVU91
 355              	.LBE211:
 356              	.LBE230:
 357              	.LBE268:
  31:Src/vesc_uart.c ****     LL_DMA_SetMode(VESC_DMA, VESC_DMA_TX_CHANNEL, LL_DMA_MODE_NORMAL);
 358              		.loc 1 31 5 is_stmt 1 view .LVU92
 359              	.LBB269:
 360              	.LBB231:
 361              	.LBI173:
1117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 362              		.loc 2 1117 22 view .LVU93
 363              	.LBB176:
1119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPA
 364              		.loc 2 1119 3 view .LVU94
1120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 365              		.loc 2 1120 3 view .LVU95
1120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 366              		.loc 2 1120 3 is_stmt 0 view .LVU96
 367              	.LBE176:
 368              	.LBE231:
 369              	.LBE269:
  32:Src/vesc_uart.c ****     LL_DMA_SetPeriphIncMode(VESC_DMA, VESC_DMA_TX_CHANNEL, LL_DMA_PERIPH_NOINCREMENT);
 370              		.loc 1 32 5 is_stmt 1 view .LVU97
 371              	.LBB270:
 372              	.LBB232:
 373              	.LBI213:
 683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 374              		.loc 2 683 22 view .LVU98
 375              	.LBB215:
 685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 376              		.loc 2 685 3 view .LVU99
 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              Mode);
 377              		.loc 2 686 3 view .LVU100
 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              Mode);
 378              		.loc 2 686 3 is_stmt 0 view .LVU101
 379              	.LBE215:
 380              	.LBE232:
 381              	.LBE270:
  33:Src/vesc_uart.c ****     LL_DMA_SetMemoryIncMode(VESC_DMA, VESC_DMA_TX_CHANNEL, LL_DMA_MEMORY_INCREMENT);
 382              		.loc 1 33 5 is_stmt 1 view .LVU102
 383              	.LBB271:
 384              	.LBB233:
 385              	.LBI216:
 734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 386              		.loc 2 734 22 view .LVU103
 387              	.LBB219:
ARM GAS  /tmp/ccZgF6fk.s 			page 124


 736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 388              		.loc 2 736 3 view .LVU104
 737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              PeriphOrM2MSrcIncMode);
 389              		.loc 2 737 3 view .LVU105
 737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              PeriphOrM2MSrcIncMode);
 390              		.loc 2 737 3 is_stmt 0 view .LVU106
 391              	.LBE219:
 392              	.LBE233:
 393              	.LBE271:
  34:Src/vesc_uart.c ****     LL_DMA_SetPeriphSize(VESC_DMA, VESC_DMA_TX_CHANNEL, LL_DMA_PDATAALIGN_BYTE);
 394              		.loc 1 34 5 is_stmt 1 view .LVU107
 395              	.LBB272:
 396              	.LBB234:
 397              	.LBI234:
 785:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 398              		.loc 2 785 22 view .LVU108
 399              	.LBB235:
 787:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 400              		.loc 2 787 3 view .LVU109
 788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              MemoryOrM2MDstIncMode);
 401              		.loc 2 788 3 view .LVU110
 402 0092 D969     		ldr	r1, [r3, #28]
 403 0094 41F08001 		orr	r1, r1, #128
 404 0098 D961     		str	r1, [r3, #28]
 405              	.LVL1:
 788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              MemoryOrM2MDstIncMode);
 406              		.loc 2 788 3 is_stmt 0 view .LVU111
 407              	.LBE235:
 408              	.LBE234:
 409              	.LBE272:
  35:Src/vesc_uart.c ****     LL_DMA_SetMemorySize(VESC_DMA, VESC_DMA_TX_CHANNEL, LL_DMA_MDATAALIGN_BYTE);
 410              		.loc 1 35 5 is_stmt 1 view .LVU112
 411              	.LBB273:
 412              	.LBB236:
 413              	.LBI236:
 837:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 414              		.loc 2 837 22 view .LVU113
 415              	.LBB237:
 839:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 416              		.loc 2 839 3 view .LVU114
 840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
 417              		.loc 2 840 3 view .LVU115
 418 009a D969     		ldr	r1, [r3, #28]
 419 009c 21F44071 		bic	r1, r1, #768
 420 00a0 D961     		str	r1, [r3, #28]
 421              	.LVL2:
 840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              PeriphOrM2MSrcDataSize);
 422              		.loc 2 840 3 is_stmt 0 view .LVU116
 423              	.LBE237:
 424              	.LBE236:
 425              	.LBE273:
  36:Src/vesc_uart.c ****     LL_DMA_SetChannelPriorityLevel(VESC_DMA, VESC_DMA_TX_CHANNEL, LL_DMA_PRIORITY_HIGH);
 426              		.loc 1 36 5 is_stmt 1 view .LVU117
 427              	.LBB274:
 428              	.LBB238:
 429              	.LBI238:
 890:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
ARM GAS  /tmp/ccZgF6fk.s 			page 125


 430              		.loc 2 890 22 view .LVU118
 431              	.LBB239:
 892:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 432              		.loc 2 892 3 view .LVU119
 893:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              MemoryOrM2MDstDataSize);
 433              		.loc 2 893 3 view .LVU120
 434 00a2 D969     		ldr	r1, [r3, #28]
 435 00a4 21F44061 		bic	r1, r1, #3072
 436 00a8 D961     		str	r1, [r3, #28]
 437              	.LVL3:
 893:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              MemoryOrM2MDstDataSize);
 438              		.loc 2 893 3 is_stmt 0 view .LVU121
 439              	.LBE239:
 440              	.LBE238:
 441              	.LBE274:
  37:Src/vesc_uart.c ****     LL_DMA_EnableIT_TC(VESC_DMA, VESC_DMA_TX_CHANNEL);
 442              		.loc 1 37 5 is_stmt 1 view .LVU122
 443              	.LBB275:
 444              	.LBB240:
 445              	.LBI240:
 944:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 446              		.loc 2 944 22 view .LVU123
 447              	.LBB241:
 946:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CC
 448              		.loc 2 946 3 view .LVU124
 947:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              Priority);
 449              		.loc 2 947 3 view .LVU125
 450 00aa D969     		ldr	r1, [r3, #28]
 451 00ac 21F44051 		bic	r1, r1, #12288
 452 00b0 41F40051 		orr	r1, r1, #8192
 453 00b4 D961     		str	r1, [r3, #28]
 454              	.LVL4:
 947:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              Priority);
 455              		.loc 2 947 3 is_stmt 0 view .LVU126
 456              	.LBE241:
 457              	.LBE240:
 458              	.LBE275:
  38:Src/vesc_uart.c **** 
 459              		.loc 1 38 5 is_stmt 1 view .LVU127
 460              	.LBB276:
 461              	.LBB242:
 462              	.LBI242:
2356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 463              		.loc 2 2356 22 view .LVU128
 464              	.LBB243:
2358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, 
 465              		.loc 2 2358 3 view .LVU129
 466              		.loc 2 2359 3 view .LVU130
 467 00b6 D969     		ldr	r1, [r3, #28]
 468 00b8 41F00201 		orr	r1, r1, #2
 469 00bc D961     		str	r1, [r3, #28]
 470              	.LVL5:
 471              	.L2:
 472              		.loc 2 2359 3 is_stmt 0 view .LVU131
 473              	.LBE243:
 474              	.LBE242:
 475              	.LBE276:
ARM GAS  /tmp/ccZgF6fk.s 			page 126


 476              		.loc 3 4118 3 is_stmt 1 view .LVU132
 477              	.LBB277:
 478              	.LBB244:
 479              	.LBB189:
 480              		.loc 3 4118 3 view .LVU133
 481              		.loc 3 4118 3 view .LVU134
 482              		.loc 3 4118 3 view .LVU135
 483              	.LBB185:
 484              	.LBI185:
 485              		.file 4 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
ARM GAS  /tmp/ccZgF6fk.s 			page 127


  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/ccZgF6fk.s 			page 128


 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
ARM GAS  /tmp/ccZgF6fk.s 			page 129


 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
ARM GAS  /tmp/ccZgF6fk.s 			page 130


 219:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 260:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccZgF6fk.s 			page 131


 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccZgF6fk.s 			page 132


 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccZgF6fk.s 			page 133


 390:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 402:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 419:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
ARM GAS  /tmp/ccZgF6fk.s 			page 134


 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
ARM GAS  /tmp/ccZgF6fk.s 			page 135


 504:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 512:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 519:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 523:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 530:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 545:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 546:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 553:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
ARM GAS  /tmp/ccZgF6fk.s 			page 136


 561:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 576:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 578:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 587:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 588:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 589:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 597:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 617:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccZgF6fk.s 			page 137


 618:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 629:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 640:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 642:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 667:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
ARM GAS  /tmp/ccZgF6fk.s 			page 138


 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 686:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 706:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
ARM GAS  /tmp/ccZgF6fk.s 			page 139


 732:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 753:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 754:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 758:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 774:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 779:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 782:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 784:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 788:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccZgF6fk.s 			page 140


 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 802:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 815:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 819:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 821:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 833:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 843:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
ARM GAS  /tmp/ccZgF6fk.s 			page 141


 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 847:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 848:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 854:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 875:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 884:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 885:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 886:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccZgF6fk.s 			page 142


 903:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 905:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 913:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 917:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 933:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 935:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 948:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 959:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccZgF6fk.s 			page 143


 960:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 967:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 969:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 972:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 976:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 977:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 978:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 979:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 980:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 981:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 985:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 986:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 989:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 990:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 992:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 993:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 994:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 995:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 996:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1000:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1001:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1003:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1006:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
1007:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1008:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
1010:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1011:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1012:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1013:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1014:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1015:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
ARM GAS  /tmp/ccZgF6fk.s 			page 144


1017:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
1020:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1021:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1023:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
1025:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1026:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
1027:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1028:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1030:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1031:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1032:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1033:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1039:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1041:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1042:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1043:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1047:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1048:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
1049:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1050:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
1051:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1052:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1056:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1057:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1059:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1062:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
1063:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
1065:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1066:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1068:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
1069:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1070:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1071:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1072:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1073:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
ARM GAS  /tmp/ccZgF6fk.s 			page 145


1074:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1078:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
1079:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1080:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
1086:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
1090:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
1092:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1093:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
1094:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1095:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1096:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1097:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1098:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1099:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
1100:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
1101:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
1103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
1104:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1105:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
1106:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1107:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
1108:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1109:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1110:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1111:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1112:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
1113:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1114:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1115:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1116:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
1117:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1119:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
1120:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1123:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1124:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
1125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
1126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1127:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
1128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
1130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccZgF6fk.s 			page 146


1131:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1132:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1133:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1134:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
1135:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1136:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1137:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1138:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
1139:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1140:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1141:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
1142:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1143:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1145:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
1147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
1148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
1150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 486              		.loc 4 1151 31 view .LVU136
 487              	.LBB186:
1152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1153:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 488              		.loc 4 1153 5 view .LVU137
1154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1155:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 489              		.loc 4 1155 4 view .LVU138
 490              		.syntax unified
 491              	@ 1155 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 492 00be 52E8003F 		ldrex r3, [r2]
 493              	@ 0 "" 2
 494              	.LVL6:
1156:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 495              		.loc 4 1156 4 view .LVU139
 496              		.loc 4 1156 4 is_stmt 0 view .LVU140
 497              		.thumb
 498              		.syntax unified
 499              	.LBE186:
 500              	.LBE185:
 501              		.loc 3 4118 3 view .LVU141
 502 00c2 43F04003 		orr	r3, r3, #64
 503              	.LVL7:
 504              		.loc 3 4118 3 is_stmt 1 view .LVU142
 505              	.LBB187:
 506              	.LBI187:
1157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1160:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1161:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
1162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
1163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1165:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1166:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
ARM GAS  /tmp/ccZgF6fk.s 			page 147


1167:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1168:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
1169:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1170:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1171:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1172:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1173:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
1174:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1177:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
1179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
1180:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1181:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1182:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1184:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1185:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
1186:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1187:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1188:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1189:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1190:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
1191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
1196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
1197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1198:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1199:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1200:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1201:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1202:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 507              		.loc 4 1202 31 view .LVU143
 508              	.LBB188:
1203:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1204:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 509              		.loc 4 1204 4 view .LVU144
1205:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1206:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 510              		.loc 4 1206 4 view .LVU145
 511              		.syntax unified
 512              	@ 1206 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 513 00c6 42E80031 		strex r1, r3, [r2]
 514              	@ 0 "" 2
 515              	.LVL8:
1207:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516              		.loc 4 1207 4 view .LVU146
 517              		.loc 4 1207 4 is_stmt 0 view .LVU147
 518              		.thumb
 519              		.syntax unified
 520              	.LBE188:
 521              	.LBE187:
 522              		.loc 3 4118 3 view .LVU148
ARM GAS  /tmp/ccZgF6fk.s 			page 148


 523 00ca 0029     		cmp	r1, #0
 524 00cc F7D1     		bne	.L2
 525              	.LVL9:
 526              	.L3:
 527              		.loc 3 4118 3 view .LVU149
 528              	.LBE189:
 529              	.LBE244:
 530              	.LBE277:
4119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
4120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
4121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
4122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Disable DMA Mode for reception
4123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_DisableDMAReq_RX
4124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
4125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
4126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
4127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
4128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
4129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
4130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
4131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
4132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
4133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Check if DMA Mode is enabled for reception
4134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_IsEnabledDMAReq_RX
4135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
4136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval State of bit (1 or 0).
4137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
4138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMAReq_RX(const USART_TypeDef *USARTx)
4139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
4140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   return ((READ_BIT(USARTx->CR3, USART_CR3_DMAR) == (USART_CR3_DMAR)) ? 1UL : 0UL);
4141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
4142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** 
4143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** /**
4144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @brief  Enable DMA Mode for transmission
4145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
4146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @param  USARTx USART Instance
4147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   * @retval None
4148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   */
4149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
4150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
4151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 531              		.loc 3 4151 3 is_stmt 1 view .LVU150
 532              	.LBB278:
 533              	.LBB245:
 534              	.LBB246:
 535              		.loc 3 4151 3 view .LVU151
 536              		.loc 3 4151 3 view .LVU152
 537              		.loc 3 4151 3 view .LVU153
 538              	.LBB247:
 539              	.LBI247:
1151:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 540              		.loc 4 1151 31 view .LVU154
 541              	.LBB248:
1153:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 542              		.loc 4 1153 5 view .LVU155
1155:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 543              		.loc 4 1155 4 view .LVU156
ARM GAS  /tmp/ccZgF6fk.s 			page 149


 544              		.syntax unified
 545              	@ 1155 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 546 00ce 52E8003F 		ldrex r3, [r2]
 547              	@ 0 "" 2
 548              	.LVL10:
1156:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549              		.loc 4 1156 4 view .LVU157
1156:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 550              		.loc 4 1156 4 is_stmt 0 view .LVU158
 551              		.thumb
 552              		.syntax unified
 553              	.LBE248:
 554              	.LBE247:
 555              		.loc 3 4151 3 view .LVU159
 556 00d2 43F08003 		orr	r3, r3, #128
 557              	.LVL11:
 558              		.loc 3 4151 3 is_stmt 1 view .LVU160
 559              	.LBB249:
 560              	.LBI249:
1202:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 561              		.loc 4 1202 31 view .LVU161
 562              	.LBB250:
1204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563              		.loc 4 1204 4 view .LVU162
1206:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 564              		.loc 4 1206 4 view .LVU163
 565              		.syntax unified
 566              	@ 1206 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 567 00d6 42E80031 		strex r1, r3, [r2]
 568              	@ 0 "" 2
 569              	.LVL12:
 570              		.loc 4 1207 4 view .LVU164
 571              		.loc 4 1207 4 is_stmt 0 view .LVU165
 572              		.thumb
 573              		.syntax unified
 574              	.LBE250:
 575              	.LBE249:
 576              		.loc 3 4151 3 view .LVU166
 577 00da 0029     		cmp	r1, #0
 578 00dc F7D1     		bne	.L3
 579              	.LBE246:
 580              	.LBE245:
 581              	.LBE278:
 582              		.loc 3 4151 3 is_stmt 1 view .LVU167
 583              	.LVL13:
  65:Src/vesc_uart.c **** 
  66:Src/vesc_uart.c ****     /* Set up DMA reception parameters */
  67:Src/vesc_uart.c ****     LL_DMA_SetMemoryAddress(VESC_DMA, VESC_DMA_RX_CHANNEL, (uint32_t)uart_handle.dma_buffer);
 584              		.loc 1 67 5 view .LVU168
 585              	.LBB279:
 586              	.LBI279:
1092:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 587              		.loc 2 1092 22 view .LVU169
 588              	.LBB280:
1094:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMA
 589              		.loc 2 1094 3 view .LVU170
1095:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
ARM GAS  /tmp/ccZgF6fk.s 			page 150


 590              		.loc 2 1095 3 view .LVU171
 591 00de 0F49     		ldr	r1, .L10+12
 592              	.LBE280:
 593              	.LBE279:
 594              	.LBB282:
 595              	.LBB283:
3465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 596              		.loc 3 3465 3 is_stmt 0 view .LVU172
 597 00e0 134A     		ldr	r2, .L10+32
 598              	.LBE283:
 599              	.LBE282:
 600              	.LBB289:
 601              	.LBB281:
1095:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 602              		.loc 2 1095 3 view .LVU173
 603 00e2 4861     		str	r0, [r1, #20]
 604              	.LVL14:
1095:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 605              		.loc 2 1095 3 view .LVU174
 606              	.LBE281:
 607              	.LBE289:
  68:Src/vesc_uart.c ****     LL_DMA_SetDataLength(VESC_DMA, VESC_DMA_RX_CHANNEL, RX_BUFFER_SIZE);
 608              		.loc 1 68 5 is_stmt 1 view .LVU175
 609              	.LBB290:
 610              	.LBI290:
 997:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 611              		.loc 2 997 22 view .LVU176
 612              	.LBB291:
 999:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CN
 613              		.loc 2 999 3 view .LVU177
1000:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              DMA_CNDTR_NDT, NbData);
 614              		.loc 2 1000 3 view .LVU178
 615 00e4 CB68     		ldr	r3, [r1, #12]
 616 00e6 1B0C     		lsrs	r3, r3, #16
 617 00e8 1B04     		lsls	r3, r3, #16
 618 00ea 43F04003 		orr	r3, r3, #64
 619 00ee CB60     		str	r3, [r1, #12]
 620              	.LVL15:
1000:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              DMA_CNDTR_NDT, NbData);
 621              		.loc 2 1000 3 is_stmt 0 view .LVU179
 622              	.LBE291:
 623              	.LBE290:
  69:Src/vesc_uart.c ****     
  70:Src/vesc_uart.c ****     /* Enable DMA channel */
  71:Src/vesc_uart.c ****     LL_DMA_EnableChannel(VESC_DMA, VESC_DMA_RX_CHANNEL);
 624              		.loc 1 71 5 is_stmt 1 view .LVU180
 625              	.LBB292:
 626              	.LBI292:
 517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 627              		.loc 2 517 22 view .LVU181
 628              	.LBB293:
 519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, 
 629              		.loc 2 519 3 view .LVU182
 520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 630              		.loc 2 520 3 view .LVU183
 631 00f0 8B68     		ldr	r3, [r1, #8]
 632 00f2 43F00103 		orr	r3, r3, #1
ARM GAS  /tmp/ccZgF6fk.s 			page 151


 633 00f6 8B60     		str	r3, [r1, #8]
 634              	.LVL16:
 635              	.L4:
 520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 636              		.loc 2 520 3 is_stmt 0 view .LVU184
 637              	.LBE293:
 638              	.LBE292:
3465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 639              		.loc 3 3465 3 is_stmt 1 view .LVU185
 640              	.LBB294:
 641              	.LBB288:
3465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 642              		.loc 3 3465 3 view .LVU186
3465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 643              		.loc 3 3465 3 view .LVU187
3465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 644              		.loc 3 3465 3 view .LVU188
 645              	.LBB284:
 646              	.LBI284:
1151:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 647              		.loc 4 1151 31 view .LVU189
 648              	.LBB285:
1153:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649              		.loc 4 1153 5 view .LVU190
1155:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 650              		.loc 4 1155 4 view .LVU191
 651              		.syntax unified
 652              	@ 1155 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 653 00f8 52E8003F 		ldrex r3, [r2]
 654              	@ 0 "" 2
 655              	.LVL17:
1156:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 656              		.loc 4 1156 4 view .LVU192
1156:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 657              		.loc 4 1156 4 is_stmt 0 view .LVU193
 658              		.thumb
 659              		.syntax unified
 660              	.LBE285:
 661              	.LBE284:
3465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 662              		.loc 3 3465 3 view .LVU194
 663 00fc 43F01003 		orr	r3, r3, #16
 664              	.LVL18:
3465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 665              		.loc 3 3465 3 is_stmt 1 view .LVU195
 666              	.LBB286:
 667              	.LBI286:
1202:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 668              		.loc 4 1202 31 view .LVU196
 669              	.LBB287:
1204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670              		.loc 4 1204 4 view .LVU197
1206:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 671              		.loc 4 1206 4 view .LVU198
 672              		.syntax unified
 673              	@ 1206 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 674 0100 42E80031 		strex r1, r3, [r2]
ARM GAS  /tmp/ccZgF6fk.s 			page 152


 675              	@ 0 "" 2
 676              	.LVL19:
 677              		.loc 4 1207 4 view .LVU199
 678              		.loc 4 1207 4 is_stmt 0 view .LVU200
 679              		.thumb
 680              		.syntax unified
 681              	.LBE287:
 682              	.LBE286:
3465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 683              		.loc 3 3465 3 view .LVU201
 684 0104 0029     		cmp	r1, #0
 685 0106 F7D1     		bne	.L4
 686              	.LBE288:
 687              	.LBE294:
  72:Src/vesc_uart.c **** 
  73:Src/vesc_uart.c ****     /* Enable UART IDLE interrupt */
  74:Src/vesc_uart.c ****     LL_USART_EnableIT_IDLE(VESC_UART);
  75:Src/vesc_uart.c **** }
 688              		.loc 1 75 1 view .LVU202
 689 0108 02B0     		add	sp, sp, #8
 690              	.LCFI2:
 691              		.cfi_def_cfa_offset 8
 692              		@ sp needed
 693 010a 30BC     		pop	{r4, r5}
 694              	.LCFI3:
 695              		.cfi_restore 5
 696              		.cfi_restore 4
 697              		.cfi_def_cfa_offset 0
 698 010c 7047     		bx	lr
 699              	.L11:
 700 010e 00BF     		.align	3
 701              	.L10:
 702 0110 00000000 		.word	0
 703 0114 00000000 		.word	0
 704 0118 00100240 		.word	1073876992
 705 011c 00000240 		.word	1073872896
 706 0120 00000000 		.word	.LANCHOR0
 707 0124 24380140 		.word	1073821732
 708 0128 28380140 		.word	1073821736
 709 012c 08380140 		.word	1073821704
 710 0130 00380140 		.word	1073821696
 711              		.cfi_endproc
 712              	.LFE1873:
 714              		.section	.text.VESC_UART_IRQHandler,"ax",%progbits
 715              		.align	1
 716              		.p2align 2,,3
 717              		.global	VESC_UART_IRQHandler
 718              		.syntax unified
 719              		.thumb
 720              		.thumb_func
 721              		.fpu fpv4-sp-d16
 723              	VESC_UART_IRQHandler:
 724              	.LFB1874:
  76:Src/vesc_uart.c **** 
  77:Src/vesc_uart.c **** /**
  78:Src/vesc_uart.c ****  * @brief Calculate CRC16
  79:Src/vesc_uart.c ****  */
ARM GAS  /tmp/ccZgF6fk.s 			page 153


  80:Src/vesc_uart.c **** /**
  81:Src/vesc_uart.c ****  * @brief Calculate CRC16 using VESC protocol polynomial (0x1021)
  82:Src/vesc_uart.c ****  */
  83:Src/vesc_uart.c **** 
  84:Src/vesc_uart.c ****         
  85:Src/vesc_uart.c **** 
  86:Src/vesc_uart.c **** /**
  87:Src/vesc_uart.c ****  * @brief Send VESC packet
  88:Src/vesc_uart.c **** 
  89:Src/vesc_uart.c **** void copy_data_to_uart_buffer(const uint8_t *data, size_t length);
  90:Src/vesc_uart.c **** /**
  91:Src/vesc_uart.c ****  * @brief UART IDLE interrupt handler
  92:Src/vesc_uart.c ****  */
  93:Src/vesc_uart.c **** void VESC_UART_IRQHandler(void)
  94:Src/vesc_uart.c **** {
 725              		.loc 1 94 1 is_stmt 1 view -0
 726              		.cfi_startproc
 727              		@ args = 0, pretend = 0, frame = 0
 728              		@ frame_needed = 0, uses_anonymous_args = 0
  95:Src/vesc_uart.c ****     if (LL_USART_IsActiveFlag_IDLE(VESC_UART)) {
 729              		.loc 1 95 5 view .LVU204
 730              	.LVL20:
 731              	.LBB295:
 732              	.LBI295:
2982:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 733              		.loc 3 2982 26 view .LVU205
 734              	.LBB296:
2984:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 735              		.loc 3 2984 3 view .LVU206
2984:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 736              		.loc 3 2984 12 is_stmt 0 view .LVU207
 737 0000 164B     		ldr	r3, .L18
 738 0002 DA69     		ldr	r2, [r3, #28]
2984:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 739              		.loc 3 2984 77 view .LVU208
 740 0004 D206     		lsls	r2, r2, #27
 741              	.LBE296:
 742              	.LBE295:
  94:Src/vesc_uart.c ****     if (LL_USART_IsActiveFlag_IDLE(VESC_UART)) {
 743              		.loc 1 94 1 view .LVU209
 744 0006 70B5     		push	{r4, r5, r6, lr}
 745              	.LCFI4:
 746              		.cfi_def_cfa_offset 16
 747              		.cfi_offset 4, -16
 748              		.cfi_offset 5, -12
 749              		.cfi_offset 6, -8
 750              		.cfi_offset 14, -4
 751              	.LBB298:
 752              	.LBB297:
2984:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 753              		.loc 3 2984 77 view .LVU210
 754 0008 06D5     		bpl	.L14
 755              	.LVL21:
2984:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 756              		.loc 3 2984 77 view .LVU211
 757              	.LBE297:
 758              	.LBE298:
ARM GAS  /tmp/ccZgF6fk.s 			page 154


  96:Src/vesc_uart.c ****         /* Clear IDLE flag */
  97:Src/vesc_uart.c ****         LL_USART_ClearFlag_IDLE(VESC_UART);
 759              		.loc 1 97 9 is_stmt 1 view .LVU212
 760              	.LBB299:
 761              	.LBI299:
3322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 762              		.loc 3 3322 22 view .LVU213
 763              	.LBB300:
3324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 764              		.loc 3 3324 3 view .LVU214
 765              	.LBE300:
 766              	.LBE299:
  98:Src/vesc_uart.c ****         
  99:Src/vesc_uart.c ****         if (!dma_busy) {
 767              		.loc 1 99 13 is_stmt 0 view .LVU215
 768 000a 154C     		ldr	r4, .L18+4
 769              	.LBB302:
 770              	.LBB301:
3324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 771              		.loc 3 3324 3 view .LVU216
 772 000c 1022     		movs	r2, #16
 773 000e 1A62     		str	r2, [r3, #32]
 774              	.LVL22:
3324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 775              		.loc 3 3324 3 view .LVU217
 776              	.LBE301:
 777              	.LBE302:
 778              		.loc 1 99 9 is_stmt 1 view .LVU218
 779              		.loc 1 99 13 is_stmt 0 view .LVU219
 780 0010 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 781              		.loc 1 99 12 view .LVU220
 782 0012 03F0FF06 		and	r6, r3, #255
 783 0016 3BB1     		cbz	r3, .L17
 784              	.L14:
 100:Src/vesc_uart.c ****             dma_busy = true;
 101:Src/vesc_uart.c ****             
 102:Src/vesc_uart.c ****             /* Calculate received data size */
 103:Src/vesc_uart.c ****             size_t dma_pos = RX_BUFFER_SIZE - LL_DMA_GetDataLength(VESC_DMA, VESC_DMA_RX_CHANNEL);
 104:Src/vesc_uart.c **** 
 105:Src/vesc_uart.c ****             copy_data_to_uart_buffer(uart_handle.dma_buffer, dma_pos);
 106:Src/vesc_uart.c ****             
 107:Src/vesc_uart.c ****             /* Reset DMA */
 108:Src/vesc_uart.c ****             LL_DMA_DisableChannel(VESC_DMA, VESC_DMA_RX_CHANNEL);
 109:Src/vesc_uart.c ****             LL_DMA_SetDataLength(VESC_DMA, VESC_DMA_RX_CHANNEL, RX_BUFFER_SIZE);
 110:Src/vesc_uart.c ****             LL_DMA_EnableChannel(VESC_DMA, VESC_DMA_RX_CHANNEL);
 111:Src/vesc_uart.c ****             
 112:Src/vesc_uart.c ****             dma_busy = false;
 113:Src/vesc_uart.c ****         }
 114:Src/vesc_uart.c ****     }
 115:Src/vesc_uart.c ****     LL_USART_ClearFlag_FE(VESC_UART);
 785              		.loc 1 115 5 is_stmt 1 view .LVU221
 786              	.LVL23:
 787              	.LBB303:
 788              	.LBI303:
3289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 789              		.loc 3 3289 22 view .LVU222
 790              	.LBB304:
ARM GAS  /tmp/ccZgF6fk.s 			page 155


3291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 791              		.loc 3 3291 3 view .LVU223
 792 0018 104B     		ldr	r3, .L18
 793 001a 0220     		movs	r0, #2
 794              	.LBE304:
 795              	.LBE303:
 796              	.LBB306:
 797              	.LBB307:
3302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 798              		.loc 3 3302 3 is_stmt 0 view .LVU224
 799 001c 0421     		movs	r1, #4
 800              	.LBE307:
 801              	.LBE306:
 802              	.LBB309:
 803              	.LBB310:
3313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 804              		.loc 3 3313 3 view .LVU225
 805 001e 0822     		movs	r2, #8
 806              	.LBE310:
 807              	.LBE309:
 808              	.LBB312:
 809              	.LBB305:
3291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 810              		.loc 3 3291 3 view .LVU226
 811 0020 1862     		str	r0, [r3, #32]
 812              	.LVL24:
3291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 813              		.loc 3 3291 3 view .LVU227
 814              	.LBE305:
 815              	.LBE312:
 116:Src/vesc_uart.c ****     LL_USART_ClearFlag_NE(VESC_UART);
 816              		.loc 1 116 5 is_stmt 1 view .LVU228
 817              	.LBB313:
 818              	.LBI306:
3300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 819              		.loc 3 3300 22 view .LVU229
 820              	.LBB308:
3302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 821              		.loc 3 3302 3 view .LVU230
 822 0022 1962     		str	r1, [r3, #32]
 823              	.LVL25:
3302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 824              		.loc 3 3302 3 is_stmt 0 view .LVU231
 825              	.LBE308:
 826              	.LBE313:
 117:Src/vesc_uart.c ****     LL_USART_ClearFlag_ORE(VESC_UART);
 827              		.loc 1 117 5 is_stmt 1 view .LVU232
 828              	.LBB314:
 829              	.LBI309:
3311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** {
 830              		.loc 3 3311 22 view .LVU233
 831              	.LBB311:
3313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
 832              		.loc 3 3313 3 view .LVU234
 833 0024 1A62     		str	r2, [r3, #32]
 834              	.LVL26:
3313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h **** }
ARM GAS  /tmp/ccZgF6fk.s 			page 156


 835              		.loc 3 3313 3 is_stmt 0 view .LVU235
 836              	.LBE311:
 837              	.LBE314:
 118:Src/vesc_uart.c **** }
 838              		.loc 1 118 1 view .LVU236
 839 0026 70BD     		pop	{r4, r5, r6, pc}
 840              	.L17:
 841              	.LBB315:
 100:Src/vesc_uart.c ****             
 842              		.loc 1 100 13 is_stmt 1 view .LVU237
 843              	.LBB316:
 844              	.LBB317:
1025:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                    DMA_CNDTR_NDT));
 845              		.loc 2 1025 11 is_stmt 0 view .LVU238
 846 0028 0E4D     		ldr	r5, .L18+8
 847              	.LBE317:
 848              	.LBE316:
 105:Src/vesc_uart.c ****             
 849              		.loc 1 105 13 view .LVU239
 850 002a 0F48     		ldr	r0, .L18+12
 100:Src/vesc_uart.c ****             
 851              		.loc 1 100 22 view .LVU240
 852 002c 0123     		movs	r3, #1
 853 002e 2370     		strb	r3, [r4]
 103:Src/vesc_uart.c **** 
 854              		.loc 1 103 13 is_stmt 1 view .LVU241
 855              	.LVL27:
 856              	.LBB320:
 857              	.LBI316:
1022:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 858              		.loc 2 1022 26 view .LVU242
 859              	.LBB318:
1024:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])
 860              		.loc 2 1024 3 view .LVU243
1025:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                    DMA_CNDTR_NDT));
 861              		.loc 2 1025 3 view .LVU244
1025:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                    DMA_CNDTR_NDT));
 862              		.loc 2 1025 11 is_stmt 0 view .LVU245
 863 0030 E968     		ldr	r1, [r5, #12]
 864              	.LVL28:
1025:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                    DMA_CNDTR_NDT));
 865              		.loc 2 1025 11 view .LVU246
 866              	.LBE318:
 867              	.LBE320:
 105:Src/vesc_uart.c ****             
 868              		.loc 1 105 13 is_stmt 1 view .LVU247
 869              	.LBB321:
 870              	.LBB319:
1025:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                    DMA_CNDTR_NDT));
 871              		.loc 2 1025 11 is_stmt 0 view .LVU248
 872 0032 89B2     		uxth	r1, r1
 873              	.LVL29:
1025:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****                    DMA_CNDTR_NDT));
 874              		.loc 2 1025 11 view .LVU249
 875              	.LBE319:
 876              	.LBE321:
 105:Src/vesc_uart.c ****             
ARM GAS  /tmp/ccZgF6fk.s 			page 157


 877              		.loc 1 105 13 view .LVU250
 878 0034 C1F14001 		rsb	r1, r1, #64
 879 0038 FFF7FEFF 		bl	copy_data_to_uart_buffer
 880              	.LVL30:
 108:Src/vesc_uart.c ****             LL_DMA_SetDataLength(VESC_DMA, VESC_DMA_RX_CHANNEL, RX_BUFFER_SIZE);
 881              		.loc 1 108 13 is_stmt 1 view .LVU251
 882              	.LBB322:
 883              	.LBI322:
 539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 884              		.loc 2 539 22 view .LVU252
 885              	.LBB323:
 541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR
 886              		.loc 2 541 3 view .LVU253
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 887              		.loc 2 542 3 view .LVU254
 888 003c AB68     		ldr	r3, [r5, #8]
 889 003e 23F00103 		bic	r3, r3, #1
 890 0042 AB60     		str	r3, [r5, #8]
 891              	.LVL31:
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 892              		.loc 2 542 3 is_stmt 0 view .LVU255
 893              	.LBE323:
 894              	.LBE322:
 109:Src/vesc_uart.c ****             LL_DMA_EnableChannel(VESC_DMA, VESC_DMA_RX_CHANNEL);
 895              		.loc 1 109 13 is_stmt 1 view .LVU256
 896              	.LBB324:
 897              	.LBI324:
 997:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 898              		.loc 2 997 22 view .LVU257
 899              	.LBB325:
 999:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CN
 900              		.loc 2 999 3 view .LVU258
1000:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              DMA_CNDTR_NDT, NbData);
 901              		.loc 2 1000 3 view .LVU259
 902 0044 EB68     		ldr	r3, [r5, #12]
 903 0046 1B0C     		lsrs	r3, r3, #16
 904 0048 1B04     		lsls	r3, r3, #16
 905 004a 43F04003 		orr	r3, r3, #64
 906 004e EB60     		str	r3, [r5, #12]
 907              	.LVL32:
1000:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****              DMA_CNDTR_NDT, NbData);
 908              		.loc 2 1000 3 is_stmt 0 view .LVU260
 909              	.LBE325:
 910              	.LBE324:
 110:Src/vesc_uart.c ****             
 911              		.loc 1 110 13 is_stmt 1 view .LVU261
 912              	.LBB326:
 913              	.LBI326:
 517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** {
 914              		.loc 2 517 22 view .LVU262
 915              	.LBB327:
 519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h ****   SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, 
 916              		.loc 2 519 3 view .LVU263
 520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 917              		.loc 2 520 3 view .LVU264
 918 0050 AB68     		ldr	r3, [r5, #8]
 919 0052 43F00103 		orr	r3, r3, #1
ARM GAS  /tmp/ccZgF6fk.s 			page 158


 920 0056 AB60     		str	r3, [r5, #8]
 921              	.LVL33:
 520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h **** }
 922              		.loc 2 520 3 is_stmt 0 view .LVU265
 923              	.LBE327:
 924              	.LBE326:
 112:Src/vesc_uart.c ****         }
 925              		.loc 1 112 13 is_stmt 1 view .LVU266
 112:Src/vesc_uart.c ****         }
 926              		.loc 1 112 22 is_stmt 0 view .LVU267
 927 0058 2670     		strb	r6, [r4]
 928 005a DDE7     		b	.L14
 929              	.L19:
 930              		.align	2
 931              	.L18:
 932 005c 00380140 		.word	1073821696
 933 0060 00000000 		.word	.LANCHOR1
 934 0064 00000240 		.word	1073872896
 935 0068 00000000 		.word	.LANCHOR0
 936              	.LBE315:
 937              		.cfi_endproc
 938              	.LFE1874:
 940              		.global	tx_in_progress
 941              		.section	.bss.dma_busy,"aw",%nobits
 942              		.set	.LANCHOR1,. + 0
 945              	dma_busy:
 946 0000 00       		.space	1
 947              		.section	.bss.tx_in_progress,"aw",%nobits
 950              	tx_in_progress:
 951 0000 00       		.space	1
 952              		.section	.bss.uart_handle,"aw",%nobits
 953              		.align	3
 954              		.set	.LANCHOR0,. + 0
 957              	uart_handle:
 958 0000 00000000 		.space	80
 958      00000000 
 958      00000000 
 958      00000000 
 958      00000000 
 959              		.text
 960              	.Letext0:
 961              		.file 5 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_type
 962              		.file 6 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 963              		.file 7 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdint.h"
 964              		.file 8 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 965              		.file 9 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/lib/gcc/arm-none-eabi/10.2.1/include/stddef
 966              		.file 10 "Inc/vesc_uart.h"
 967              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
ARM GAS  /tmp/ccZgF6fk.s 			page 159


DEFINED SYMBOLS
                            *ABS*:0000000000000000 vesc_uart.c
     /tmp/ccZgF6fk.s:18     .text.VESC_UART_Init:0000000000000000 $t
     /tmp/ccZgF6fk.s:27     .text.VESC_UART_Init:0000000000000000 VESC_UART_Init
     /tmp/ccZgF6fk.s:702    .text.VESC_UART_Init:0000000000000110 $d
     /tmp/ccZgF6fk.s:715    .text.VESC_UART_IRQHandler:0000000000000000 $t
     /tmp/ccZgF6fk.s:723    .text.VESC_UART_IRQHandler:0000000000000000 VESC_UART_IRQHandler
     /tmp/ccZgF6fk.s:932    .text.VESC_UART_IRQHandler:000000000000005c $d
     /tmp/ccZgF6fk.s:950    .bss.tx_in_progress:0000000000000000 tx_in_progress
     /tmp/ccZgF6fk.s:945    .bss.dma_busy:0000000000000000 dma_busy
     /tmp/ccZgF6fk.s:946    .bss.dma_busy:0000000000000000 $d
     /tmp/ccZgF6fk.s:951    .bss.tx_in_progress:0000000000000000 $d
     /tmp/ccZgF6fk.s:953    .bss.uart_handle:0000000000000000 $d
     /tmp/ccZgF6fk.s:957    .bss.uart_handle:0000000000000000 uart_handle

UNDEFINED SYMBOLS
copy_data_to_uart_buffer
