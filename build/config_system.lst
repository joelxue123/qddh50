ARM GAS  /tmp/ccevIIwi.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"config_system.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._Z11Flash_WritemPKvm,"ax",%progbits
  18              		.align	1
  19              		.global	_Z11Flash_WritemPKvm
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	_Z11Flash_WritemPKvm:
  27              	.LFB132:
  28              		.file 1 "Src/config_system.cpp"
   1:Src/config_system.cpp **** 
   2:Src/config_system.cpp **** 
   3:Src/config_system.cpp **** #include <string.h>
   4:Src/config_system.cpp **** 
   5:Src/config_system.cpp **** #include "stm32g4xx_hal.h"
   6:Src/config_system.cpp **** #include "config_system.hpp"
   7:Src/config_system.cpp **** 
   8:Src/config_system.cpp **** static void Config_LoadAreaDefaults(ConfigArea_t area);
   9:Src/config_system.cpp **** 
  10:Src/config_system.cpp **** // Update the flash error codes to match HAL definitions
  11:Src/config_system.cpp **** typedef enum {
  12:Src/config_system.cpp ****     FLASH_OK = 0,
  13:Src/config_system.cpp ****     FLASH_ERROR_ALIGN ,  // Alignment error
  14:Src/config_system.cpp ****     FLASH_ERROR_OPT      // Option error
  15:Src/config_system.cpp **** } FlashStatus_t;
  16:Src/config_system.cpp **** 
  17:Src/config_system.cpp **** // Update the Flash_Write function
  18:Src/config_system.cpp **** FlashStatus_t Flash_Write(uint32_t address, const void* data, uint32_t size) 
  19:Src/config_system.cpp **** {
  29              		.loc 1 19 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 40
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 8AB0     		sub	sp, sp, #40
  39              	.LCFI1:
ARM GAS  /tmp/ccevIIwi.s 			page 2


  40              		.cfi_def_cfa_offset 48
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 F860     		str	r0, [r7, #12]
  45 0008 B960     		str	r1, [r7, #8]
  46 000a 7A60     		str	r2, [r7, #4]
  20:Src/config_system.cpp ****     // Check alignment (STM32G4 requires 8-byte alignment)
  21:Src/config_system.cpp ****     if ((address % 8) != 0) {
  47              		.loc 1 21 18
  48 000c FB68     		ldr	r3, [r7, #12]
  49 000e 03F00703 		and	r3, r3, #7
  50              		.loc 1 21 5
  51 0012 002B     		cmp	r3, #0
  52 0014 01D0     		beq	.L2
  22:Src/config_system.cpp ****         return FLASH_ERROR_ALIGN;
  53              		.loc 1 22 16
  54 0016 0123     		movs	r3, #1
  55 0018 4CE0     		b	.L3
  56              	.L2:
  23:Src/config_system.cpp ****     }
  24:Src/config_system.cpp ****     
  25:Src/config_system.cpp ****     HAL_FLASH_Unlock();
  57              		.loc 1 25 21
  58 001a FFF7FEFF 		bl	HAL_FLASH_Unlock
  26:Src/config_system.cpp **** 
  27:Src/config_system.cpp ****     const uint64_t* src = (const uint64_t*)data;
  59              		.loc 1 27 21
  60 001e BB68     		ldr	r3, [r7, #8]
  61 0020 7B62     		str	r3, [r7, #36]
  28:Src/config_system.cpp ****     uint32_t remaining = size;
  62              		.loc 1 28 14
  63 0022 7B68     		ldr	r3, [r7, #4]
  64 0024 3B62     		str	r3, [r7, #32]
  29:Src/config_system.cpp ****     uint32_t dest = address;
  65              		.loc 1 29 14
  66 0026 FB68     		ldr	r3, [r7, #12]
  67 0028 FB61     		str	r3, [r7, #28]
  68              	.L6:
  30:Src/config_system.cpp **** 
  31:Src/config_system.cpp ****     // Write full double words (8 bytes)
  32:Src/config_system.cpp ****     while (remaining >= 8) {
  69              		.loc 1 32 22
  70 002a 3B6A     		ldr	r3, [r7, #32]
  71 002c 072B     		cmp	r3, #7
  72 002e 1CD9     		bls	.L4
  33:Src/config_system.cpp ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, dest, *src) != HAL_OK) {
  73              		.loc 1 33 30
  74 0030 7B6A     		ldr	r3, [r7, #36]
  75 0032 D3E90023 		ldrd	r2, [r3]
  76 0036 F969     		ldr	r1, [r7, #28]
  77 0038 0020     		movs	r0, #0
  78 003a FFF7FEFF 		bl	HAL_FLASH_Program
  79 003e 0346     		mov	r3, r0
  80              		.loc 1 33 73
  81 0040 002B     		cmp	r3, #0
  82 0042 14BF     		ite	ne
ARM GAS  /tmp/ccevIIwi.s 			page 3


  83 0044 0123     		movne	r3, #1
  84 0046 0023     		moveq	r3, #0
  85 0048 DBB2     		uxtb	r3, r3
  86              		.loc 1 33 9
  87 004a 002B     		cmp	r3, #0
  88 004c 03D0     		beq	.L5
  34:Src/config_system.cpp ****             HAL_FLASH_Lock();
  89              		.loc 1 34 27
  90 004e FFF7FEFF 		bl	HAL_FLASH_Lock
  35:Src/config_system.cpp ****             return FLASH_ERROR_OPT;
  91              		.loc 1 35 20
  92 0052 0223     		movs	r3, #2
  93 0054 2EE0     		b	.L3
  94              	.L5:
  36:Src/config_system.cpp ****         }
  37:Src/config_system.cpp ****         src++;
  95              		.loc 1 37 12
  96 0056 7B6A     		ldr	r3, [r7, #36]
  97 0058 0833     		adds	r3, r3, #8
  98 005a 7B62     		str	r3, [r7, #36]
  38:Src/config_system.cpp ****         dest += 8;
  99              		.loc 1 38 14
 100 005c FB69     		ldr	r3, [r7, #28]
 101 005e 0833     		adds	r3, r3, #8
 102 0060 FB61     		str	r3, [r7, #28]
  39:Src/config_system.cpp ****         remaining -= 8;
 103              		.loc 1 39 19
 104 0062 3B6A     		ldr	r3, [r7, #32]
 105 0064 083B     		subs	r3, r3, #8
 106 0066 3B62     		str	r3, [r7, #32]
  32:Src/config_system.cpp ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, dest, *src) != HAL_OK) {
 107              		.loc 1 32 5
 108 0068 DFE7     		b	.L6
 109              	.L4:
 110              	.LBB2:
  40:Src/config_system.cpp ****     }
  41:Src/config_system.cpp ****     // Handle remaining bytes if any
  42:Src/config_system.cpp ****     if (remaining > 0) {
 111              		.loc 1 42 5
 112 006a 3B6A     		ldr	r3, [r7, #32]
 113 006c 002B     		cmp	r3, #0
 114 006e 1ED0     		beq	.L7
 115              	.LBB3:
  43:Src/config_system.cpp ****         uint64_t last_word = 0;
 116              		.loc 1 43 18
 117 0070 4FF00002 		mov	r2, #0
 118 0074 4FF00003 		mov	r3, #0
 119 0078 C7E90423 		strd	r2, [r7, #16]
  44:Src/config_system.cpp ****         memcpy(&last_word, src, remaining);
 120              		.loc 1 44 15
 121 007c 07F11003 		add	r3, r7, #16
 122 0080 3A6A     		ldr	r2, [r7, #32]
 123 0082 796A     		ldr	r1, [r7, #36]
 124 0084 1846     		mov	r0, r3
 125 0086 FFF7FEFF 		bl	memcpy
  45:Src/config_system.cpp ****         if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, dest, last_word) != HAL_OK) {
 126              		.loc 1 45 30
ARM GAS  /tmp/ccevIIwi.s 			page 4


 127 008a D7E90423 		ldrd	r2, [r7, #16]
 128 008e F969     		ldr	r1, [r7, #28]
 129 0090 0020     		movs	r0, #0
 130 0092 FFF7FEFF 		bl	HAL_FLASH_Program
 131 0096 0346     		mov	r3, r0
 132              		.loc 1 45 78
 133 0098 002B     		cmp	r3, #0
 134 009a 14BF     		ite	ne
 135 009c 0123     		movne	r3, #1
 136 009e 0023     		moveq	r3, #0
 137 00a0 DBB2     		uxtb	r3, r3
 138              		.loc 1 45 9
 139 00a2 002B     		cmp	r3, #0
 140 00a4 03D0     		beq	.L7
  46:Src/config_system.cpp ****             HAL_FLASH_Lock();
 141              		.loc 1 46 27
 142 00a6 FFF7FEFF 		bl	HAL_FLASH_Lock
  47:Src/config_system.cpp ****             return FLASH_ERROR_OPT;
 143              		.loc 1 47 20
 144 00aa 0223     		movs	r3, #2
 145 00ac 02E0     		b	.L3
 146              	.L7:
 147              	.LBE3:
 148              	.LBE2:
  48:Src/config_system.cpp ****         }
  49:Src/config_system.cpp ****     }
  50:Src/config_system.cpp **** 
  51:Src/config_system.cpp ****     HAL_FLASH_Lock();
 149              		.loc 1 51 19
 150 00ae FFF7FEFF 		bl	HAL_FLASH_Lock
  52:Src/config_system.cpp ****     return FLASH_OK;
 151              		.loc 1 52 12
 152 00b2 0023     		movs	r3, #0
 153              	.L3:
  53:Src/config_system.cpp **** }
 154              		.loc 1 53 1
 155 00b4 1846     		mov	r0, r3
 156 00b6 2837     		adds	r7, r7, #40
 157              	.LCFI3:
 158              		.cfi_def_cfa_offset 8
 159 00b8 BD46     		mov	sp, r7
 160              	.LCFI4:
 161              		.cfi_def_cfa_register 13
 162              		@ sp needed
 163 00ba 80BD     		pop	{r7, pc}
 164              		.cfi_endproc
 165              	.LFE132:
 167              		.section	.text._Z11Flash_Erasemm,"ax",%progbits
 168              		.align	1
 169              		.global	_Z11Flash_Erasemm
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 173              		.fpu fpv4-sp-d16
 175              	_Z11Flash_Erasemm:
 176              	.LFB133:
  54:Src/config_system.cpp **** 
ARM GAS  /tmp/ccevIIwi.s 			page 5


  55:Src/config_system.cpp **** // Update Flash_Erase function
  56:Src/config_system.cpp **** FlashStatus_t Flash_Erase(uint32_t address, uint32_t size)
  57:Src/config_system.cpp **** {
 177              		.loc 1 57 1
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 40
 180              		@ frame_needed = 1, uses_anonymous_args = 0
 181 0000 80B5     		push	{r7, lr}
 182              	.LCFI5:
 183              		.cfi_def_cfa_offset 8
 184              		.cfi_offset 7, -8
 185              		.cfi_offset 14, -4
 186 0002 8AB0     		sub	sp, sp, #40
 187              	.LCFI6:
 188              		.cfi_def_cfa_offset 48
 189 0004 00AF     		add	r7, sp, #0
 190              	.LCFI7:
 191              		.cfi_def_cfa_register 7
 192 0006 7860     		str	r0, [r7, #4]
 193 0008 3960     		str	r1, [r7]
  58:Src/config_system.cpp ****     uint32_t page = (address - FLASH_BASE) / FLASH_PAGE_SIZE;
 194              		.loc 1 58 30
 195 000a 7B68     		ldr	r3, [r7, #4]
 196 000c 03F17843 		add	r3, r3, #-134217728
 197              		.loc 1 58 14
 198 0010 DB0A     		lsrs	r3, r3, #11
 199 0012 7B62     		str	r3, [r7, #36]
  59:Src/config_system.cpp ****     uint32_t num_pages = (size + FLASH_PAGE_SIZE - 1) / FLASH_PAGE_SIZE;
 200              		.loc 1 59 50
 201 0014 3B68     		ldr	r3, [r7]
 202 0016 03F2FF73 		addw	r3, r3, #2047
 203              		.loc 1 59 14
 204 001a DB0A     		lsrs	r3, r3, #11
 205 001c 3B62     		str	r3, [r7, #32]
  60:Src/config_system.cpp ****     
  61:Src/config_system.cpp ****     HAL_FLASH_Unlock();
 206              		.loc 1 61 21
 207 001e FFF7FEFF 		bl	HAL_FLASH_Unlock
  62:Src/config_system.cpp **** 
  63:Src/config_system.cpp ****     FLASH_EraseInitTypeDef erase_init = {
 208              		.loc 1 63 28
 209 0022 07F10C03 		add	r3, r7, #12
 210 0026 0022     		movs	r2, #0
 211 0028 1A60     		str	r2, [r3]
 212 002a 5A60     		str	r2, [r3, #4]
 213 002c 9A60     		str	r2, [r3, #8]
 214 002e DA60     		str	r2, [r3, #12]
 215 0030 0123     		movs	r3, #1
 216 0032 3B61     		str	r3, [r7, #16]
  64:Src/config_system.cpp ****         .TypeErase = FLASH_TYPEERASE_PAGES,
  65:Src/config_system.cpp ****         .Banks = FLASH_BANK_1,
  66:Src/config_system.cpp ****         .Page = page,
  67:Src/config_system.cpp ****         .NbPages = num_pages
  68:Src/config_system.cpp ****     };
 217              		.loc 1 68 5
 218 0034 7B6A     		ldr	r3, [r7, #36]
 219 0036 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/ccevIIwi.s 			page 6


 220 0038 3B6A     		ldr	r3, [r7, #32]
 221 003a BB61     		str	r3, [r7, #24]
  69:Src/config_system.cpp **** 
  70:Src/config_system.cpp ****     uint32_t page_error;
  71:Src/config_system.cpp ****     HAL_StatusTypeDef status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 222              		.loc 1 71 49
 223 003c 07F10802 		add	r2, r7, #8
 224 0040 07F10C03 		add	r3, r7, #12
 225 0044 1146     		mov	r1, r2
 226 0046 1846     		mov	r0, r3
 227 0048 FFF7FEFF 		bl	HAL_FLASHEx_Erase
 228 004c 0346     		mov	r3, r0
 229 004e FB77     		strb	r3, [r7, #31]
  72:Src/config_system.cpp ****     
  73:Src/config_system.cpp ****     HAL_FLASH_Lock();
 230              		.loc 1 73 19
 231 0050 FFF7FEFF 		bl	HAL_FLASH_Lock
  74:Src/config_system.cpp ****     
  75:Src/config_system.cpp ****     return (status == HAL_OK) ? FLASH_OK : FLASH_ERROR_OPT;
 232              		.loc 1 75 31
 233 0054 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 234 0056 002B     		cmp	r3, #0
 235 0058 01D1     		bne	.L10
 236              		.loc 1 75 31 is_stmt 0 discriminator 1
 237 005a 0023     		movs	r3, #0
 238 005c 00E0     		b	.L11
 239              	.L10:
 240              		.loc 1 75 31 discriminator 2
 241 005e 0223     		movs	r3, #2
 242              	.L11:
  76:Src/config_system.cpp **** }
 243              		.loc 1 76 1 is_stmt 1 discriminator 4
 244 0060 1846     		mov	r0, r3
 245 0062 2837     		adds	r7, r7, #40
 246              	.LCFI8:
 247              		.cfi_def_cfa_offset 8
 248 0064 BD46     		mov	sp, r7
 249              	.LCFI9:
 250              		.cfi_def_cfa_register 13
 251              		@ sp needed
 252 0066 80BD     		pop	{r7, pc}
 253              		.cfi_endproc
 254              	.LFE133:
 256              		.section	.bss._ZL8g_config,"aw",%nobits
 257              		.align	2
 260              	_ZL8g_config:
 261 0000 00000000 		.space	96
 261      00000000 
 261      00000000 
 261      00000000 
 261      00000000 
 262              		.section	.bss._ZL20g_config_initialized,"aw",%nobits
 265              	_ZL20g_config_initialized:
 266 0000 00       		.space	1
 267              		.section	.text._ZL13Calculate_CRCPKvm,"ax",%progbits
 268              		.align	1
 269              		.syntax unified
ARM GAS  /tmp/ccevIIwi.s 			page 7


 270              		.thumb
 271              		.thumb_func
 272              		.fpu fpv4-sp-d16
 274              	_ZL13Calculate_CRCPKvm:
 275              	.LFB134:
  77:Src/config_system.cpp **** 
  78:Src/config_system.cpp **** 
  79:Src/config_system.cpp **** 
  80:Src/config_system.cpp **** /* 全局配置存储 */
  81:Src/config_system.cpp **** static ConfigStorage_t g_config;
  82:Src/config_system.cpp **** static bool g_config_initialized = false;
  83:Src/config_system.cpp **** 
  84:Src/config_system.cpp **** /* CRC计算函数 */
  85:Src/config_system.cpp **** static uint32_t Calculate_CRC(const void* data, uint32_t size)
  86:Src/config_system.cpp **** {
 276              		.loc 1 86 1
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 24
 279              		@ frame_needed = 1, uses_anonymous_args = 0
 280              		@ link register save eliminated.
 281 0000 80B4     		push	{r7}
 282              	.LCFI10:
 283              		.cfi_def_cfa_offset 4
 284              		.cfi_offset 7, -4
 285 0002 87B0     		sub	sp, sp, #28
 286              	.LCFI11:
 287              		.cfi_def_cfa_offset 32
 288 0004 00AF     		add	r7, sp, #0
 289              	.LCFI12:
 290              		.cfi_def_cfa_register 7
 291 0006 7860     		str	r0, [r7, #4]
 292 0008 3960     		str	r1, [r7]
  87:Src/config_system.cpp ****     uint32_t crc = 0;
 293              		.loc 1 87 14
 294 000a 0023     		movs	r3, #0
 295 000c 7B61     		str	r3, [r7, #20]
  88:Src/config_system.cpp ****     const uint8_t* bytes = (const uint8_t*)data;
 296              		.loc 1 88 20
 297 000e 7B68     		ldr	r3, [r7, #4]
 298 0010 BB60     		str	r3, [r7, #8]
 299              	.LBB4:
  89:Src/config_system.cpp ****     
  90:Src/config_system.cpp ****     for(uint32_t i = 0; i < size; i++) {
 300              		.loc 1 90 18
 301 0012 0023     		movs	r3, #0
 302 0014 3B61     		str	r3, [r7, #16]
 303              	.L19:
 304              		.loc 1 90 27 discriminator 1
 305 0016 3A69     		ldr	r2, [r7, #16]
 306 0018 3B68     		ldr	r3, [r7]
 307 001a 9A42     		cmp	r2, r3
 308 001c 24D2     		bcs	.L14
 309              	.LBB5:
  91:Src/config_system.cpp ****         crc = crc ^ bytes[i];
 310              		.loc 1 91 28
 311 001e BA68     		ldr	r2, [r7, #8]
 312 0020 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccevIIwi.s 			page 8


 313 0022 1344     		add	r3, r3, r2
 314 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 315 0026 1A46     		mov	r2, r3
 316              		.loc 1 91 13
 317 0028 7B69     		ldr	r3, [r7, #20]
 318 002a 5340     		eors	r3, r3, r2
 319 002c 7B61     		str	r3, [r7, #20]
 320              	.LBB6:
  92:Src/config_system.cpp ****         for(int j = 0; j < 8; j++) {
 321              		.loc 1 92 17
 322 002e 0023     		movs	r3, #0
 323 0030 FB60     		str	r3, [r7, #12]
 324              	.L18:
 325              		.loc 1 92 26 discriminator 1
 326 0032 FB68     		ldr	r3, [r7, #12]
 327 0034 072B     		cmp	r3, #7
 328 0036 13DC     		bgt	.L15
  93:Src/config_system.cpp ****             if(crc & 1) crc = (crc >> 1) ^ 0xA001;
 329              		.loc 1 93 20
 330 0038 7B69     		ldr	r3, [r7, #20]
 331 003a 03F00103 		and	r3, r3, #1
 332              		.loc 1 93 13
 333 003e 002B     		cmp	r3, #0
 334 0040 07D0     		beq	.L16
 335              		.loc 1 93 36 discriminator 1
 336 0042 7B69     		ldr	r3, [r7, #20]
 337 0044 5B08     		lsrs	r3, r3, #1
 338              		.loc 1 93 29 discriminator 1
 339 0046 83F42043 		eor	r3, r3, #40960
 340 004a 83F00103 		eor	r3, r3, #1
 341 004e 7B61     		str	r3, [r7, #20]
 342 0050 02E0     		b	.L17
 343              	.L16:
  94:Src/config_system.cpp ****             else crc = crc >> 1;
 344              		.loc 1 94 22
 345 0052 7B69     		ldr	r3, [r7, #20]
 346 0054 5B08     		lsrs	r3, r3, #1
 347 0056 7B61     		str	r3, [r7, #20]
 348              	.L17:
  92:Src/config_system.cpp ****         for(int j = 0; j < 8; j++) {
 349              		.loc 1 92 9 discriminator 2
 350 0058 FB68     		ldr	r3, [r7, #12]
 351 005a 0133     		adds	r3, r3, #1
 352 005c FB60     		str	r3, [r7, #12]
 353 005e E8E7     		b	.L18
 354              	.L15:
 355              	.LBE6:
 356              	.LBE5:
  90:Src/config_system.cpp ****         crc = crc ^ bytes[i];
 357              		.loc 1 90 5 discriminator 2
 358 0060 3B69     		ldr	r3, [r7, #16]
 359 0062 0133     		adds	r3, r3, #1
 360 0064 3B61     		str	r3, [r7, #16]
 361 0066 D6E7     		b	.L19
 362              	.L14:
 363              	.LBE4:
  95:Src/config_system.cpp ****         }
ARM GAS  /tmp/ccevIIwi.s 			page 9


  96:Src/config_system.cpp ****     }
  97:Src/config_system.cpp ****     return crc;
 364              		.loc 1 97 12
 365 0068 7B69     		ldr	r3, [r7, #20]
  98:Src/config_system.cpp **** }
 366              		.loc 1 98 1
 367 006a 1846     		mov	r0, r3
 368 006c 1C37     		adds	r7, r7, #28
 369              	.LCFI13:
 370              		.cfi_def_cfa_offset 4
 371 006e BD46     		mov	sp, r7
 372              	.LCFI14:
 373              		.cfi_def_cfa_register 13
 374              		@ sp needed
 375 0070 5DF8047B 		ldr	r7, [sp], #4
 376              	.LCFI15:
 377              		.cfi_restore 7
 378              		.cfi_def_cfa_offset 0
 379 0074 7047     		bx	lr
 380              		.cfi_endproc
 381              	.LFE134:
 383              		.section	.text.Config_GetAreaPtr,"ax",%progbits
 384              		.align	1
 385              		.global	Config_GetAreaPtr
 386              		.syntax unified
 387              		.thumb
 388              		.thumb_func
 389              		.fpu fpv4-sp-d16
 391              	Config_GetAreaPtr:
 392              	.LFB135:
  99:Src/config_system.cpp **** 
 100:Src/config_system.cpp **** /* 获取配置区域指针和大小 */
 101:Src/config_system.cpp **** const void* Config_GetAreaPtr(ConfigArea_t area)
 102:Src/config_system.cpp **** {
 393              		.loc 1 102 1
 394              		.cfi_startproc
 395              		@ args = 0, pretend = 0, frame = 8
 396              		@ frame_needed = 1, uses_anonymous_args = 0
 397              		@ link register save eliminated.
 398 0000 80B4     		push	{r7}
 399              	.LCFI16:
 400              		.cfi_def_cfa_offset 4
 401              		.cfi_offset 7, -4
 402 0002 83B0     		sub	sp, sp, #12
 403              	.LCFI17:
 404              		.cfi_def_cfa_offset 16
 405 0004 00AF     		add	r7, sp, #0
 406              	.LCFI18:
 407              		.cfi_def_cfa_register 7
 408 0006 0346     		mov	r3, r0
 409 0008 FB71     		strb	r3, [r7, #7]
 103:Src/config_system.cpp ****     switch(area) {
 410              		.loc 1 103 12
 411 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 412 000c 052B     		cmp	r3, #5
 413 000e 1BD8     		bhi	.L22
 414 0010 01A2     		adr	r2, .L24
ARM GAS  /tmp/ccevIIwi.s 			page 10


 415 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 416 0016 00BF     		.p2align 2
 417              	.L24:
 418 0018 31000000 		.word	.L29+1
 419 001c 35000000 		.word	.L28+1
 420 0020 39000000 		.word	.L27+1
 421 0024 3D000000 		.word	.L26+1
 422 0028 41000000 		.word	.L25+1
 423 002c 45000000 		.word	.L23+1
 424              		.p2align 1
 425              	.L29:
 104:Src/config_system.cpp ****         case CONFIG_AREA_SYSTEM:
 105:Src/config_system.cpp ****             return &g_config.system_config;
 426              		.loc 1 105 30
 427 0030 094B     		ldr	r3, .L31
 428 0032 0AE0     		b	.L30
 429              	.L28:
 106:Src/config_system.cpp ****         case CONFIG_AREA_MOTOR:
 107:Src/config_system.cpp ****             return &g_config.motor_config;
 430              		.loc 1 107 30
 431 0034 094B     		ldr	r3, .L31+4
 432 0036 08E0     		b	.L30
 433              	.L27:
 108:Src/config_system.cpp ****         case CONFIG_AREA_CAN:
 109:Src/config_system.cpp ****             return &g_config.can_config;
 434              		.loc 1 109 30
 435 0038 094B     		ldr	r3, .L31+8
 436 003a 06E0     		b	.L30
 437              	.L26:
 110:Src/config_system.cpp ****         case CONFIG_AREA_ENCODER:
 111:Src/config_system.cpp ****             return &g_config.encoder_config;
 438              		.loc 1 111 30
 439 003c 094B     		ldr	r3, .L31+12
 440 003e 04E0     		b	.L30
 441              	.L25:
 112:Src/config_system.cpp ****         case CONFIG_AREA_CONTROLLER:
 113:Src/config_system.cpp ****             return &g_config.controller_config;
 442              		.loc 1 113 30
 443 0040 094B     		ldr	r3, .L31+16
 444 0042 02E0     		b	.L30
 445              	.L23:
 114:Src/config_system.cpp ****         case CONFIG_AREA_LIMITS:
 115:Src/config_system.cpp ****             return &g_config.limits_config;
 446              		.loc 1 115 30
 447 0044 094B     		ldr	r3, .L31+20
 448 0046 00E0     		b	.L30
 449              	.L22:
 116:Src/config_system.cpp ****         default:
 117:Src/config_system.cpp ****             return NULL;
 450              		.loc 1 117 20
 451 0048 0023     		movs	r3, #0
 452              	.L30:
 118:Src/config_system.cpp ****     }
 119:Src/config_system.cpp **** }
 453              		.loc 1 119 1
 454 004a 1846     		mov	r0, r3
 455 004c 0C37     		adds	r7, r7, #12
ARM GAS  /tmp/ccevIIwi.s 			page 11


 456              	.LCFI19:
 457              		.cfi_def_cfa_offset 4
 458 004e BD46     		mov	sp, r7
 459              	.LCFI20:
 460              		.cfi_def_cfa_register 13
 461              		@ sp needed
 462 0050 5DF8047B 		ldr	r7, [sp], #4
 463              	.LCFI21:
 464              		.cfi_restore 7
 465              		.cfi_def_cfa_offset 0
 466 0054 7047     		bx	lr
 467              	.L32:
 468 0056 00BF     		.align	2
 469              	.L31:
 470 0058 0C000000 		.word	_ZL8g_config+12
 471 005c 18000000 		.word	_ZL8g_config+24
 472 0060 28000000 		.word	_ZL8g_config+40
 473 0064 30000000 		.word	_ZL8g_config+48
 474 0068 38000000 		.word	_ZL8g_config+56
 475 006c 50000000 		.word	_ZL8g_config+80
 476              		.cfi_endproc
 477              	.LFE135:
 479              		.section	.text.Config_GetAreaSize,"ax",%progbits
 480              		.align	1
 481              		.global	Config_GetAreaSize
 482              		.syntax unified
 483              		.thumb
 484              		.thumb_func
 485              		.fpu fpv4-sp-d16
 487              	Config_GetAreaSize:
 488              	.LFB136:
 120:Src/config_system.cpp **** 
 121:Src/config_system.cpp **** uint32_t Config_GetAreaSize(ConfigArea_t area)
 122:Src/config_system.cpp **** {
 489              		.loc 1 122 1
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 8
 492              		@ frame_needed = 1, uses_anonymous_args = 0
 493              		@ link register save eliminated.
 494 0000 80B4     		push	{r7}
 495              	.LCFI22:
 496              		.cfi_def_cfa_offset 4
 497              		.cfi_offset 7, -4
 498 0002 83B0     		sub	sp, sp, #12
 499              	.LCFI23:
 500              		.cfi_def_cfa_offset 16
 501 0004 00AF     		add	r7, sp, #0
 502              	.LCFI24:
 503              		.cfi_def_cfa_register 7
 504 0006 0346     		mov	r3, r0
 505 0008 FB71     		strb	r3, [r7, #7]
 123:Src/config_system.cpp ****     switch(area) {
 506              		.loc 1 123 12
 507 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 508 000c 052B     		cmp	r3, #5
 509 000e 1BD8     		bhi	.L34
 510 0010 01A2     		adr	r2, .L36
ARM GAS  /tmp/ccevIIwi.s 			page 12


 511 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 512 0016 00BF     		.p2align 2
 513              	.L36:
 514 0018 31000000 		.word	.L41+1
 515 001c 35000000 		.word	.L40+1
 516 0020 39000000 		.word	.L39+1
 517 0024 3D000000 		.word	.L38+1
 518 0028 41000000 		.word	.L37+1
 519 002c 45000000 		.word	.L35+1
 520              		.p2align 1
 521              	.L41:
 124:Src/config_system.cpp ****         case CONFIG_AREA_SYSTEM:
 125:Src/config_system.cpp ****             return sizeof(g_config.system_config);
 522              		.loc 1 125 49
 523 0030 0C23     		movs	r3, #12
 524 0032 0AE0     		b	.L42
 525              	.L40:
 126:Src/config_system.cpp ****         case CONFIG_AREA_MOTOR:
 127:Src/config_system.cpp ****             return sizeof(g_config.motor_config);
 526              		.loc 1 127 48
 527 0034 1023     		movs	r3, #16
 528 0036 08E0     		b	.L42
 529              	.L39:
 128:Src/config_system.cpp ****         case CONFIG_AREA_CAN:
 129:Src/config_system.cpp ****             return sizeof(g_config.can_config);
 530              		.loc 1 129 46
 531 0038 0823     		movs	r3, #8
 532 003a 06E0     		b	.L42
 533              	.L38:
 130:Src/config_system.cpp ****         case CONFIG_AREA_ENCODER:
 131:Src/config_system.cpp ****             return sizeof(g_config.encoder_config);
 534              		.loc 1 131 50
 535 003c 0823     		movs	r3, #8
 536 003e 04E0     		b	.L42
 537              	.L37:
 132:Src/config_system.cpp ****         case CONFIG_AREA_CONTROLLER:
 133:Src/config_system.cpp ****             return sizeof(g_config.controller_config);
 538              		.loc 1 133 53
 539 0040 1823     		movs	r3, #24
 540 0042 02E0     		b	.L42
 541              	.L35:
 134:Src/config_system.cpp ****         case CONFIG_AREA_LIMITS:
 135:Src/config_system.cpp ****             return sizeof(g_config.limits_config);
 542              		.loc 1 135 49
 543 0044 1023     		movs	r3, #16
 544 0046 00E0     		b	.L42
 545              	.L34:
 136:Src/config_system.cpp ****         default:
 137:Src/config_system.cpp ****             return 0;
 546              		.loc 1 137 20
 547 0048 0023     		movs	r3, #0
 548              	.L42:
 138:Src/config_system.cpp ****     }
 139:Src/config_system.cpp **** }
 549              		.loc 1 139 1
 550 004a 1846     		mov	r0, r3
 551 004c 0C37     		adds	r7, r7, #12
ARM GAS  /tmp/ccevIIwi.s 			page 13


 552              	.LCFI25:
 553              		.cfi_def_cfa_offset 4
 554 004e BD46     		mov	sp, r7
 555              	.LCFI26:
 556              		.cfi_def_cfa_register 13
 557              		@ sp needed
 558 0050 5DF8047B 		ldr	r7, [sp], #4
 559              	.LCFI27:
 560              		.cfi_restore 7
 561              		.cfi_def_cfa_offset 0
 562 0054 7047     		bx	lr
 563              		.cfi_endproc
 564              	.LFE136:
 566 0056 00BF     		.section	.text.Config_SaveArea,"ax",%progbits
 567              		.align	1
 568              		.global	Config_SaveArea
 569              		.syntax unified
 570              		.thumb
 571              		.thumb_func
 572              		.fpu fpv4-sp-d16
 574              	Config_SaveArea:
 575              	.LFB137:
 140:Src/config_system.cpp **** 
 141:Src/config_system.cpp **** /* 保存指定配置区域 */
 142:Src/config_system.cpp **** bool Config_SaveArea(ConfigArea_t area)
 143:Src/config_system.cpp **** {
 576              		.loc 1 143 1
 577              		.cfi_startproc
 578              		@ args = 0, pretend = 0, frame = 24
 579              		@ frame_needed = 1, uses_anonymous_args = 0
 580 0000 80B5     		push	{r7, lr}
 581              	.LCFI28:
 582              		.cfi_def_cfa_offset 8
 583              		.cfi_offset 7, -8
 584              		.cfi_offset 14, -4
 585 0002 86B0     		sub	sp, sp, #24
 586              	.LCFI29:
 587              		.cfi_def_cfa_offset 32
 588 0004 00AF     		add	r7, sp, #0
 589              	.LCFI30:
 590              		.cfi_def_cfa_register 7
 591 0006 0346     		mov	r3, r0
 592 0008 FB71     		strb	r3, [r7, #7]
 144:Src/config_system.cpp ****     if(static_cast<int>(area) >= static_cast<int>(CONFIG_AREA_MAX)) return false;
 593              		.loc 1 144 5
 594 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 595 000c 052B     		cmp	r3, #5
 596 000e 01D9     		bls	.L44
 597              		.loc 1 144 76 discriminator 1
 598 0010 0023     		movs	r3, #0
 599 0012 33E0     		b	.L45
 600              	.L44:
 145:Src/config_system.cpp ****     
 146:Src/config_system.cpp ****     const void* data = Config_GetAreaPtr(area);
 601              		.loc 1 146 41
 602 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 603 0016 1846     		mov	r0, r3
ARM GAS  /tmp/ccevIIwi.s 			page 14


 604 0018 FFF7FEFF 		bl	Config_GetAreaPtr
 605 001c F860     		str	r0, [r7, #12]
 147:Src/config_system.cpp ****     uint32_t size = Config_GetAreaSize(area);
 606              		.loc 1 147 39
 607 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 608 0020 1846     		mov	r0, r3
 609 0022 FFF7FEFF 		bl	Config_GetAreaSize
 610 0026 B860     		str	r0, [r7, #8]
 148:Src/config_system.cpp ****     uint32_t offset = 0;
 611              		.loc 1 148 14
 612 0028 0023     		movs	r3, #0
 613 002a 7B61     		str	r3, [r7, #20]
 614              	.LBB7:
 149:Src/config_system.cpp ****     
 150:Src/config_system.cpp ****     // 计算区域在Flash中的偏移
 151:Src/config_system.cpp ****     for(int i = 0; i < static_cast<int>(area); i++) {
 615              		.loc 1 151 13
 616 002c 0023     		movs	r3, #0
 617 002e 3B61     		str	r3, [r7, #16]
 618              	.L47:
 619              		.loc 1 151 24 discriminator 3
 620 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 621              		.loc 1 151 22 discriminator 3
 622 0032 3A69     		ldr	r2, [r7, #16]
 623 0034 9A42     		cmp	r2, r3
 624 0036 0CDA     		bge	.L46
 152:Src/config_system.cpp ****         offset += Config_GetAreaSize(static_cast<ConfigArea_t>(i));
 625              		.loc 1 152 37 discriminator 2
 626 0038 3B69     		ldr	r3, [r7, #16]
 627 003a DBB2     		uxtb	r3, r3
 628 003c 1846     		mov	r0, r3
 629 003e FFF7FEFF 		bl	Config_GetAreaSize
 630 0042 0246     		mov	r2, r0
 631              		.loc 1 152 16 discriminator 2
 632 0044 7B69     		ldr	r3, [r7, #20]
 633 0046 1344     		add	r3, r3, r2
 634 0048 7B61     		str	r3, [r7, #20]
 151:Src/config_system.cpp ****         offset += Config_GetAreaSize(static_cast<ConfigArea_t>(i));
 635              		.loc 1 151 5 discriminator 2
 636 004a 3B69     		ldr	r3, [r7, #16]
 637 004c 0133     		adds	r3, r3, #1
 638 004e 3B61     		str	r3, [r7, #16]
 639 0050 EEE7     		b	.L47
 640              	.L46:
 641              	.LBE7:
 153:Src/config_system.cpp ****     }
 154:Src/config_system.cpp ****     
 155:Src/config_system.cpp ****     // 写入Flash
 156:Src/config_system.cpp ****     if(Flash_Write(CONFIG_FLASH_ADDR + offset, data, size) != FLASH_OK) {
 642              		.loc 1 156 19
 643 0052 7B69     		ldr	r3, [r7, #20]
 644 0054 03F10063 		add	r3, r3, #134217728
 645 0058 03F5F033 		add	r3, r3, #122880
 646 005c BA68     		ldr	r2, [r7, #8]
 647 005e F968     		ldr	r1, [r7, #12]
 648 0060 1846     		mov	r0, r3
 649 0062 FFF7FEFF 		bl	_Z11Flash_WritemPKvm
ARM GAS  /tmp/ccevIIwi.s 			page 15


 650 0066 0346     		mov	r3, r0
 651              		.loc 1 156 60
 652 0068 002B     		cmp	r3, #0
 653 006a 14BF     		ite	ne
 654 006c 0123     		movne	r3, #1
 655 006e 0023     		moveq	r3, #0
 656 0070 DBB2     		uxtb	r3, r3
 657              		.loc 1 156 5
 658 0072 002B     		cmp	r3, #0
 659 0074 01D0     		beq	.L48
 157:Src/config_system.cpp ****         return false;
 660              		.loc 1 157 16
 661 0076 0023     		movs	r3, #0
 662 0078 00E0     		b	.L45
 663              	.L48:
 158:Src/config_system.cpp ****     }
 159:Src/config_system.cpp ****     
 160:Src/config_system.cpp ****     return true;
 664              		.loc 1 160 12
 665 007a 0123     		movs	r3, #1
 666              	.L45:
 161:Src/config_system.cpp **** }
 667              		.loc 1 161 1
 668 007c 1846     		mov	r0, r3
 669 007e 1837     		adds	r7, r7, #24
 670              	.LCFI31:
 671              		.cfi_def_cfa_offset 8
 672 0080 BD46     		mov	sp, r7
 673              	.LCFI32:
 674              		.cfi_def_cfa_register 13
 675              		@ sp needed
 676 0082 80BD     		pop	{r7, pc}
 677              		.cfi_endproc
 678              	.LFE137:
 680              		.section	.text.Config_LoadArea,"ax",%progbits
 681              		.align	1
 682              		.global	Config_LoadArea
 683              		.syntax unified
 684              		.thumb
 685              		.thumb_func
 686              		.fpu fpv4-sp-d16
 688              	Config_LoadArea:
 689              	.LFB138:
 162:Src/config_system.cpp **** 
 163:Src/config_system.cpp **** /* 加载指定配置区域 */
 164:Src/config_system.cpp **** bool Config_LoadArea(ConfigArea_t area)
 165:Src/config_system.cpp **** {
 690              		.loc 1 165 1
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 24
 693              		@ frame_needed = 1, uses_anonymous_args = 0
 694 0000 80B5     		push	{r7, lr}
 695              	.LCFI33:
 696              		.cfi_def_cfa_offset 8
 697              		.cfi_offset 7, -8
 698              		.cfi_offset 14, -4
 699 0002 86B0     		sub	sp, sp, #24
ARM GAS  /tmp/ccevIIwi.s 			page 16


 700              	.LCFI34:
 701              		.cfi_def_cfa_offset 32
 702 0004 00AF     		add	r7, sp, #0
 703              	.LCFI35:
 704              		.cfi_def_cfa_register 7
 705 0006 0346     		mov	r3, r0
 706 0008 FB71     		strb	r3, [r7, #7]
 166:Src/config_system.cpp ****     if(static_cast<int>(area) >= static_cast<int>(CONFIG_AREA_MAX)) return false;
 707              		.loc 1 166 5
 708 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 709 000c 052B     		cmp	r3, #5
 710 000e 01D9     		bls	.L50
 711              		.loc 1 166 76 discriminator 1
 712 0010 0023     		movs	r3, #0
 713 0012 29E0     		b	.L51
 714              	.L50:
 167:Src/config_system.cpp ****     
 168:Src/config_system.cpp ****     void* data = (void*)Config_GetAreaPtr(area);
 715              		.loc 1 168 42
 716 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 717 0016 1846     		mov	r0, r3
 718 0018 FFF7FEFF 		bl	Config_GetAreaPtr
 719 001c F860     		str	r0, [r7, #12]
 169:Src/config_system.cpp ****     uint32_t size = Config_GetAreaSize(area);
 720              		.loc 1 169 39
 721 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 722 0020 1846     		mov	r0, r3
 723 0022 FFF7FEFF 		bl	Config_GetAreaSize
 724 0026 B860     		str	r0, [r7, #8]
 170:Src/config_system.cpp ****     uint32_t offset = 0;
 725              		.loc 1 170 14
 726 0028 0023     		movs	r3, #0
 727 002a 7B61     		str	r3, [r7, #20]
 728              	.LBB8:
 171:Src/config_system.cpp ****     
 172:Src/config_system.cpp ****     // 计算区域在Flash中的偏移
 173:Src/config_system.cpp ****     for(int i = 0; i < static_cast<int>(area); i++) {
 729              		.loc 1 173 13
 730 002c 0023     		movs	r3, #0
 731 002e 3B61     		str	r3, [r7, #16]
 732              	.L53:
 733              		.loc 1 173 24 discriminator 3
 734 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 735              		.loc 1 173 22 discriminator 3
 736 0032 3A69     		ldr	r2, [r7, #16]
 737 0034 9A42     		cmp	r2, r3
 738 0036 0CDA     		bge	.L52
 174:Src/config_system.cpp ****         offset += Config_GetAreaSize(static_cast<ConfigArea_t>(i));
 739              		.loc 1 174 37 discriminator 2
 740 0038 3B69     		ldr	r3, [r7, #16]
 741 003a DBB2     		uxtb	r3, r3
 742 003c 1846     		mov	r0, r3
 743 003e FFF7FEFF 		bl	Config_GetAreaSize
 744 0042 0246     		mov	r2, r0
 745              		.loc 1 174 16 discriminator 2
 746 0044 7B69     		ldr	r3, [r7, #20]
 747 0046 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccevIIwi.s 			page 17


 748 0048 7B61     		str	r3, [r7, #20]
 173:Src/config_system.cpp ****         offset += Config_GetAreaSize(static_cast<ConfigArea_t>(i));
 749              		.loc 1 173 5 discriminator 2
 750 004a 3B69     		ldr	r3, [r7, #16]
 751 004c 0133     		adds	r3, r3, #1
 752 004e 3B61     		str	r3, [r7, #16]
 753 0050 EEE7     		b	.L53
 754              	.L52:
 755              	.LBE8:
 175:Src/config_system.cpp ****     }
 176:Src/config_system.cpp ****     
 177:Src/config_system.cpp ****     // 从Flash读取
 178:Src/config_system.cpp ****     memcpy(data, (void*)(CONFIG_FLASH_ADDR + offset), size);
 756              		.loc 1 178 44
 757 0052 7B69     		ldr	r3, [r7, #20]
 758 0054 03F10063 		add	r3, r3, #134217728
 759 0058 03F5F033 		add	r3, r3, #122880
 760              		.loc 1 178 11
 761 005c BA68     		ldr	r2, [r7, #8]
 762 005e 1946     		mov	r1, r3
 763 0060 F868     		ldr	r0, [r7, #12]
 764 0062 FFF7FEFF 		bl	memcpy
 179:Src/config_system.cpp ****     
 180:Src/config_system.cpp ****     return true;
 765              		.loc 1 180 12
 766 0066 0123     		movs	r3, #1
 767              	.L51:
 181:Src/config_system.cpp **** }
 768              		.loc 1 181 1
 769 0068 1846     		mov	r0, r3
 770 006a 1837     		adds	r7, r7, #24
 771              	.LCFI36:
 772              		.cfi_def_cfa_offset 8
 773 006c BD46     		mov	sp, r7
 774              	.LCFI37:
 775              		.cfi_def_cfa_register 13
 776              		@ sp needed
 777 006e 80BD     		pop	{r7, pc}
 778              		.cfi_endproc
 779              	.LFE138:
 781              		.section	.text.Config_Init,"ax",%progbits
 782              		.align	1
 783              		.global	Config_Init
 784              		.syntax unified
 785              		.thumb
 786              		.thumb_func
 787              		.fpu fpv4-sp-d16
 789              	Config_Init:
 790              	.LFB139:
 182:Src/config_system.cpp **** 
 183:Src/config_system.cpp **** /* 初始化配置系统 */
 184:Src/config_system.cpp **** bool Config_Init(void)
 185:Src/config_system.cpp **** {
 791              		.loc 1 185 1
 792              		.cfi_startproc
 793              		@ args = 0, pretend = 0, frame = 8
 794              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccevIIwi.s 			page 18


 795 0000 80B5     		push	{r7, lr}
 796              	.LCFI38:
 797              		.cfi_def_cfa_offset 8
 798              		.cfi_offset 7, -8
 799              		.cfi_offset 14, -4
 800 0002 82B0     		sub	sp, sp, #8
 801              	.LCFI39:
 802              		.cfi_def_cfa_offset 16
 803 0004 00AF     		add	r7, sp, #0
 804              	.LCFI40:
 805              		.cfi_def_cfa_register 7
 186:Src/config_system.cpp ****     if(g_config_initialized) return true;
 806              		.loc 1 186 5
 807 0006 174B     		ldr	r3, .L58
 808 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 809 000a 002B     		cmp	r3, #0
 810 000c 01D0     		beq	.L55
 811              		.loc 1 186 37 discriminator 1
 812 000e 0123     		movs	r3, #1
 813 0010 24E0     		b	.L56
 814              	.L55:
 187:Src/config_system.cpp ****     
 188:Src/config_system.cpp ****     // 尝试从Flash加载配置
 189:Src/config_system.cpp ****     ConfigStorage_t* flash_config = (ConfigStorage_t*)CONFIG_FLASH_ADDR;
 815              		.loc 1 189 22
 816 0012 154B     		ldr	r3, .L58+4
 817 0014 7B60     		str	r3, [r7, #4]
 818              	.LBB9:
 190:Src/config_system.cpp ****     
 191:Src/config_system.cpp ****     if(flash_config->header.magic == CONFIG_MAGIC &&
 819              		.loc 1 191 29
 820 0016 7B68     		ldr	r3, [r7, #4]
 821 0018 1B68     		ldr	r3, [r3]
 822              		.loc 1 191 5
 823 001a 144A     		ldr	r2, .L58+8
 824 001c 9342     		cmp	r3, r2
 825 001e 19D1     		bne	.L57
 192:Src/config_system.cpp ****        flash_config->header.version == CONFIG_VERSION) {
 826              		.loc 1 192 29 discriminator 1
 827 0020 7B68     		ldr	r3, [r7, #4]
 828 0022 5B68     		ldr	r3, [r3, #4]
 191:Src/config_system.cpp ****        flash_config->header.version == CONFIG_VERSION) {
 829              		.loc 1 191 51 discriminator 1
 830 0024 012B     		cmp	r3, #1
 831 0026 15D1     		bne	.L57
 832              	.LBB10:
 193:Src/config_system.cpp ****         // 验证CRC
 194:Src/config_system.cpp ****         uint32_t crc = Calculate_CRC(&flash_config->system_config,
 833              		.loc 1 194 38
 834 0028 7B68     		ldr	r3, [r7, #4]
 835 002a 0C33     		adds	r3, r3, #12
 836              		.loc 1 194 37
 837 002c 5421     		movs	r1, #84
 838 002e 1846     		mov	r0, r3
 839 0030 FFF7FEFF 		bl	_ZL13Calculate_CRCPKvm
 840 0034 3860     		str	r0, [r7]
 195:Src/config_system.cpp ****                                    sizeof(ConfigStorage_t) - sizeof(flash_config->header));
ARM GAS  /tmp/ccevIIwi.s 			page 19


 196:Src/config_system.cpp ****         
 197:Src/config_system.cpp ****         if(crc == flash_config->header.crc) {
 841              		.loc 1 197 40
 842 0036 7B68     		ldr	r3, [r7, #4]
 843 0038 9B68     		ldr	r3, [r3, #8]
 844              		.loc 1 197 9
 845 003a 3A68     		ldr	r2, [r7]
 846 003c 9A42     		cmp	r2, r3
 847 003e 09D1     		bne	.L57
 198:Src/config_system.cpp ****             // 配置有效,加载
 199:Src/config_system.cpp ****             memcpy(&g_config, flash_config, sizeof(ConfigStorage_t));
 848              		.loc 1 199 19
 849 0040 6022     		movs	r2, #96
 850 0042 7968     		ldr	r1, [r7, #4]
 851 0044 0A48     		ldr	r0, .L58+12
 852 0046 FFF7FEFF 		bl	memcpy
 200:Src/config_system.cpp ****             g_config_initialized = true;
 853              		.loc 1 200 34
 854 004a 064B     		ldr	r3, .L58
 855 004c 0122     		movs	r2, #1
 856 004e 1A70     		strb	r2, [r3]
 201:Src/config_system.cpp ****             return true;
 857              		.loc 1 201 20
 858 0050 0123     		movs	r3, #1
 859 0052 03E0     		b	.L56
 860              	.L57:
 861              	.LBE10:
 862              	.LBE9:
 202:Src/config_system.cpp ****         }
 203:Src/config_system.cpp ****     }
 204:Src/config_system.cpp ****     
 205:Src/config_system.cpp ****     // 配置无效,加载默认值
 206:Src/config_system.cpp ****     return Config_LoadDefault();
 863              		.loc 1 206 30
 864 0054 FFF7FEFF 		bl	Config_LoadDefault
 865 0058 0346     		mov	r3, r0
 866              		.loc 1 206 31
 867 005a 00BF     		nop
 868              	.L56:
 207:Src/config_system.cpp **** }
 869              		.loc 1 207 1
 870 005c 1846     		mov	r0, r3
 871 005e 0837     		adds	r7, r7, #8
 872              	.LCFI41:
 873              		.cfi_def_cfa_offset 8
 874 0060 BD46     		mov	sp, r7
 875              	.LCFI42:
 876              		.cfi_def_cfa_register 13
 877              		@ sp needed
 878 0062 80BD     		pop	{r7, pc}
 879              	.L59:
 880              		.align	2
 881              	.L58:
 882 0064 00000000 		.word	_ZL20g_config_initialized
 883 0068 00E00108 		.word	134340608
 884 006c 3412CDAB 		.word	-1412623820
 885 0070 00000000 		.word	_ZL8g_config
ARM GAS  /tmp/ccevIIwi.s 			page 20


 886              		.cfi_endproc
 887              	.LFE139:
 889              		.section	.text.Config_SaveAll,"ax",%progbits
 890              		.align	1
 891              		.global	Config_SaveAll
 892              		.syntax unified
 893              		.thumb
 894              		.thumb_func
 895              		.fpu fpv4-sp-d16
 897              	Config_SaveAll:
 898              	.LFB140:
 208:Src/config_system.cpp **** 
 209:Src/config_system.cpp **** /* 保存所有配置 */
 210:Src/config_system.cpp **** bool Config_SaveAll(void)
 211:Src/config_system.cpp **** {
 899              		.loc 1 211 1
 900              		.cfi_startproc
 901              		@ args = 0, pretend = 0, frame = 0
 902              		@ frame_needed = 1, uses_anonymous_args = 0
 903 0000 80B5     		push	{r7, lr}
 904              	.LCFI43:
 905              		.cfi_def_cfa_offset 8
 906              		.cfi_offset 7, -8
 907              		.cfi_offset 14, -4
 908 0002 00AF     		add	r7, sp, #0
 909              	.LCFI44:
 910              		.cfi_def_cfa_register 7
 212:Src/config_system.cpp ****     // 更新头部信息
 213:Src/config_system.cpp ****     g_config.header.magic = CONFIG_MAGIC;
 911              		.loc 1 213 27
 912 0004 164B     		ldr	r3, .L64
 913 0006 174A     		ldr	r2, .L64+4
 914 0008 1A60     		str	r2, [r3]
 214:Src/config_system.cpp ****     g_config.header.version = CONFIG_VERSION;
 915              		.loc 1 214 29
 916 000a 154B     		ldr	r3, .L64
 917 000c 0122     		movs	r2, #1
 918 000e 5A60     		str	r2, [r3, #4]
 215:Src/config_system.cpp ****     g_config.header.crc = Calculate_CRC(&g_config.system_config,
 919              		.loc 1 215 40
 920 0010 5421     		movs	r1, #84
 921 0012 1548     		ldr	r0, .L64+8
 922 0014 FFF7FEFF 		bl	_ZL13Calculate_CRCPKvm
 923 0018 0346     		mov	r3, r0
 924              		.loc 1 215 25
 925 001a 114A     		ldr	r2, .L64
 926 001c 9360     		str	r3, [r2, #8]
 216:Src/config_system.cpp ****                                       sizeof(ConfigStorage_t) - sizeof(g_config.header));
 217:Src/config_system.cpp ****     
 218:Src/config_system.cpp ****     // 擦除配置扇区
 219:Src/config_system.cpp ****     if(Flash_Erase(CONFIG_FLASH_ADDR, CONFIG_FLASH_SIZE) != FLASH_OK) {
 927              		.loc 1 219 19
 928 001e 4FF48051 		mov	r1, #4096
 929 0022 1248     		ldr	r0, .L64+12
 930 0024 FFF7FEFF 		bl	_Z11Flash_Erasemm
 931 0028 0346     		mov	r3, r0
 932              		.loc 1 219 58
ARM GAS  /tmp/ccevIIwi.s 			page 21


 933 002a 002B     		cmp	r3, #0
 934 002c 14BF     		ite	ne
 935 002e 0123     		movne	r3, #1
 936 0030 0023     		moveq	r3, #0
 937 0032 DBB2     		uxtb	r3, r3
 938              		.loc 1 219 5
 939 0034 002B     		cmp	r3, #0
 940 0036 01D0     		beq	.L61
 220:Src/config_system.cpp ****         return false;
 941              		.loc 1 220 16
 942 0038 0023     		movs	r3, #0
 943 003a 0FE0     		b	.L62
 944              	.L61:
 221:Src/config_system.cpp ****     }
 222:Src/config_system.cpp ****     
 223:Src/config_system.cpp ****     // 写入整个配置
 224:Src/config_system.cpp ****     if(Flash_Write(CONFIG_FLASH_ADDR, &g_config, sizeof(ConfigStorage_t)) != FLASH_OK) {
 945              		.loc 1 224 19
 946 003c 6022     		movs	r2, #96
 947 003e 0849     		ldr	r1, .L64
 948 0040 0A48     		ldr	r0, .L64+12
 949 0042 FFF7FEFF 		bl	_Z11Flash_WritemPKvm
 950 0046 0346     		mov	r3, r0
 951              		.loc 1 224 75
 952 0048 002B     		cmp	r3, #0
 953 004a 14BF     		ite	ne
 954 004c 0123     		movne	r3, #1
 955 004e 0023     		moveq	r3, #0
 956 0050 DBB2     		uxtb	r3, r3
 957              		.loc 1 224 5
 958 0052 002B     		cmp	r3, #0
 959 0054 01D0     		beq	.L63
 225:Src/config_system.cpp ****         return false;
 960              		.loc 1 225 16
 961 0056 0023     		movs	r3, #0
 962 0058 00E0     		b	.L62
 963              	.L63:
 226:Src/config_system.cpp ****     }
 227:Src/config_system.cpp ****     
 228:Src/config_system.cpp ****     return true;
 964              		.loc 1 228 12
 965 005a 0123     		movs	r3, #1
 966              	.L62:
 229:Src/config_system.cpp **** }
 967              		.loc 1 229 1
 968 005c 1846     		mov	r0, r3
 969 005e 80BD     		pop	{r7, pc}
 970              	.L65:
 971              		.align	2
 972              	.L64:
 973 0060 00000000 		.word	_ZL8g_config
 974 0064 3412CDAB 		.word	-1412623820
 975 0068 0C000000 		.word	_ZL8g_config+12
 976 006c 00E00108 		.word	134340608
 977              		.cfi_endproc
 978              	.LFE140:
 980              		.section	.text.Config_LoadDefault,"ax",%progbits
ARM GAS  /tmp/ccevIIwi.s 			page 22


 981              		.align	1
 982              		.global	Config_LoadDefault
 983              		.syntax unified
 984              		.thumb
 985              		.thumb_func
 986              		.fpu fpv4-sp-d16
 988              	Config_LoadDefault:
 989              	.LFB141:
 230:Src/config_system.cpp **** 
 231:Src/config_system.cpp **** /* 加载默认配置 */
 232:Src/config_system.cpp **** bool Config_LoadDefault(void)
 233:Src/config_system.cpp **** {
 990              		.loc 1 233 1
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 0
 993              		@ frame_needed = 1, uses_anonymous_args = 0
 994 0000 80B5     		push	{r7, lr}
 995              	.LCFI45:
 996              		.cfi_def_cfa_offset 8
 997              		.cfi_offset 7, -8
 998              		.cfi_offset 14, -4
 999 0002 00AF     		add	r7, sp, #0
 1000              	.LCFI46:
 1001              		.cfi_def_cfa_register 7
 234:Src/config_system.cpp ****     memset(&g_config, 0, sizeof(ConfigStorage_t));
 1002              		.loc 1 234 11
 1003 0004 6022     		movs	r2, #96
 1004 0006 0021     		movs	r1, #0
 1005 0008 0F48     		ldr	r0, .L68
 1006 000a FFF7FEFF 		bl	memset
 235:Src/config_system.cpp ****     
 236:Src/config_system.cpp ****     // 设置默认值
 237:Src/config_system.cpp ****     g_config.system_config.can_id = 1;
 1007              		.loc 1 237 35
 1008 000e 0E4B     		ldr	r3, .L68
 1009 0010 0122     		movs	r2, #1
 1010 0012 DA60     		str	r2, [r3, #12]
 238:Src/config_system.cpp ****     g_config.system_config.heartbeat_rate_ms = 1000;
 1011              		.loc 1 238 46
 1012 0014 0C4B     		ldr	r3, .L68
 1013 0016 4FF47A72 		mov	r2, #1000
 1014 001a 1A61     		str	r2, [r3, #16]
 239:Src/config_system.cpp ****     g_config.system_config.debug_level = 1;
 1015              		.loc 1 239 40
 1016 001c 0A4B     		ldr	r3, .L68
 1017 001e 0122     		movs	r2, #1
 1018 0020 1A75     		strb	r2, [r3, #20]
 240:Src/config_system.cpp ****     
 241:Src/config_system.cpp ****     g_config.motor_config.current_limit = 60.0f;
 1019              		.loc 1 241 41
 1020 0022 094B     		ldr	r3, .L68
 1021 0024 094A     		ldr	r2, .L68+4
 1022 0026 9A61     		str	r2, [r3, #24]	@ float
 242:Src/config_system.cpp ****     g_config.motor_config.voltage_limit = 24.0f;
 1023              		.loc 1 242 41
 1024 0028 074B     		ldr	r3, .L68
 1025 002a 094A     		ldr	r2, .L68+8
ARM GAS  /tmp/ccevIIwi.s 			page 23


 1026 002c DA61     		str	r2, [r3, #28]	@ float
 243:Src/config_system.cpp ****     g_config.motor_config.temp_limit = 85.0f;
 1027              		.loc 1 243 38
 1028 002e 064B     		ldr	r3, .L68
 1029 0030 084A     		ldr	r2, .L68+12
 1030 0032 1A62     		str	r2, [r3, #32]	@ float
 244:Src/config_system.cpp ****     g_config.motor_config.pole_pairs = 7;
 1031              		.loc 1 244 38
 1032 0034 044B     		ldr	r3, .L68
 1033 0036 0722     		movs	r2, #7
 1034 0038 9A84     		strh	r2, [r3, #36]	@ movhi
 245:Src/config_system.cpp ****     
 246:Src/config_system.cpp ****     // ... 设置其他默认值 ...
 247:Src/config_system.cpp ****     
 248:Src/config_system.cpp ****     g_config_initialized = true;
 1035              		.loc 1 248 26
 1036 003a 074B     		ldr	r3, .L68+16
 1037 003c 0122     		movs	r2, #1
 1038 003e 1A70     		strb	r2, [r3]
 249:Src/config_system.cpp ****     return true;
 1039              		.loc 1 249 12
 1040 0040 0123     		movs	r3, #1
 250:Src/config_system.cpp **** }
 1041              		.loc 1 250 1
 1042 0042 1846     		mov	r0, r3
 1043 0044 80BD     		pop	{r7, pc}
 1044              	.L69:
 1045 0046 00BF     		.align	2
 1046              	.L68:
 1047 0048 00000000 		.word	_ZL8g_config
 1048 004c 00007042 		.word	1114636288
 1049 0050 0000C041 		.word	1103101952
 1050 0054 0000AA42 		.word	1118437376
 1051 0058 00000000 		.word	_ZL20g_config_initialized
 1052              		.cfi_endproc
 1053              	.LFE141:
 1055              		.section	.text.Config_LoadAllAreas,"ax",%progbits
 1056              		.align	1
 1057              		.global	Config_LoadAllAreas
 1058              		.syntax unified
 1059              		.thumb
 1060              		.thumb_func
 1061              		.fpu fpv4-sp-d16
 1063              	Config_LoadAllAreas:
 1064              	.LFB142:
 251:Src/config_system.cpp **** 
 252:Src/config_system.cpp **** /* 加载所有配置区域 */
 253:Src/config_system.cpp **** bool Config_LoadAllAreas(void)
 254:Src/config_system.cpp **** {
 1065              		.loc 1 254 1
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 40
 1068              		@ frame_needed = 1, uses_anonymous_args = 0
 1069 0000 80B5     		push	{r7, lr}
 1070              	.LCFI47:
 1071              		.cfi_def_cfa_offset 8
 1072              		.cfi_offset 7, -8
ARM GAS  /tmp/ccevIIwi.s 			page 24


 1073              		.cfi_offset 14, -4
 1074 0002 8AB0     		sub	sp, sp, #40
 1075              	.LCFI48:
 1076              		.cfi_def_cfa_offset 48
 1077 0004 00AF     		add	r7, sp, #0
 1078              	.LCFI49:
 1079              		.cfi_def_cfa_register 7
 255:Src/config_system.cpp ****     bool all_success = true;
 1080              		.loc 1 255 10
 1081 0006 0123     		movs	r3, #1
 1082 0008 87F82730 		strb	r3, [r7, #39]
 256:Src/config_system.cpp ****     
 257:Src/config_system.cpp ****     // 检查是否已初始化
 258:Src/config_system.cpp ****     if (!g_config_initialized) {
 1083              		.loc 1 258 9
 1084 000c 384B     		ldr	r3, .L81
 1085 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1086 0010 83F00103 		eor	r3, r3, #1
 1087 0014 DBB2     		uxtb	r3, r3
 1088              		.loc 1 258 5
 1089 0016 002B     		cmp	r3, #0
 1090 0018 09D0     		beq	.L71
 259:Src/config_system.cpp ****         if (!Config_Init()) {
 1091              		.loc 1 259 25
 1092 001a FFF7FEFF 		bl	Config_Init
 1093 001e 0346     		mov	r3, r0
 1094              		.loc 1 259 13
 1095 0020 83F00103 		eor	r3, r3, #1
 1096 0024 DBB2     		uxtb	r3, r3
 1097              		.loc 1 259 9
 1098 0026 002B     		cmp	r3, #0
 1099 0028 01D0     		beq	.L71
 260:Src/config_system.cpp ****             return false;
 1100              		.loc 1 260 20
 1101 002a 0023     		movs	r3, #0
 1102 002c 5BE0     		b	.L72
 1103              	.L71:
 1104              	.LBB11:
 261:Src/config_system.cpp ****         }
 262:Src/config_system.cpp ****     }
 263:Src/config_system.cpp ****     
 264:Src/config_system.cpp ****     // 遍历所有配置区域
 265:Src/config_system.cpp ****     for (int i = static_cast<int>(CONFIG_AREA_SYSTEM); i < static_cast<int>(CONFIG_AREA_MAX); i++) 
 1105              		.loc 1 265 14
 1106 002e 0023     		movs	r3, #0
 1107 0030 3B62     		str	r3, [r7, #32]
 1108              	.L80:
 1109              		.loc 1 265 58 discriminator 1
 1110 0032 3B6A     		ldr	r3, [r7, #32]
 1111 0034 052B     		cmp	r3, #5
 1112 0036 54DC     		bgt	.L73
 1113              	.LBB12:
 266:Src/config_system.cpp ****         ConfigArea_t area = static_cast<ConfigArea_t>(i);
 1114              		.loc 1 266 22
 1115 0038 3B6A     		ldr	r3, [r7, #32]
 1116 003a FB75     		strb	r3, [r7, #23]
 267:Src/config_system.cpp ****         // 获取区域信息
ARM GAS  /tmp/ccevIIwi.s 			page 25


 268:Src/config_system.cpp ****         void* data = (void*)Config_GetAreaPtr(area);
 1117              		.loc 1 268 46
 1118 003c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1119 003e 1846     		mov	r0, r3
 1120 0040 FFF7FEFF 		bl	Config_GetAreaPtr
 1121 0044 3861     		str	r0, [r7, #16]
 269:Src/config_system.cpp ****         uint32_t size = Config_GetAreaSize(area);
 1122              		.loc 1 269 43
 1123 0046 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1124 0048 1846     		mov	r0, r3
 1125 004a FFF7FEFF 		bl	Config_GetAreaSize
 1126 004e F860     		str	r0, [r7, #12]
 270:Src/config_system.cpp ****         uint32_t offset = 0;
 1127              		.loc 1 270 18
 1128 0050 0023     		movs	r3, #0
 1129 0052 FB61     		str	r3, [r7, #28]
 271:Src/config_system.cpp ****         
 272:Src/config_system.cpp ****         if (!data || size == 0) {
 1130              		.loc 1 272 9
 1131 0054 3B69     		ldr	r3, [r7, #16]
 1132 0056 002B     		cmp	r3, #0
 1133 0058 02D0     		beq	.L74
 1134              		.loc 1 272 19 discriminator 2
 1135 005a FB68     		ldr	r3, [r7, #12]
 1136 005c 002B     		cmp	r3, #0
 1137 005e 03D1     		bne	.L75
 1138              	.L74:
 273:Src/config_system.cpp ****             all_success = false;
 1139              		.loc 1 273 25 discriminator 3
 1140 0060 0023     		movs	r3, #0
 1141 0062 87F82730 		strb	r3, [r7, #39]
 274:Src/config_system.cpp ****             continue;
 1142              		.loc 1 274 13 discriminator 3
 1143 0066 38E0     		b	.L76
 1144              	.L75:
 1145              	.LBB13:
 275:Src/config_system.cpp ****         }
 276:Src/config_system.cpp ****         
 277:Src/config_system.cpp ****         // 计算Flash中的偏移量
 278:Src/config_system.cpp ****         for (int j = 0; j < i; j++) {
 1146              		.loc 1 278 18
 1147 0068 0023     		movs	r3, #0
 1148 006a BB61     		str	r3, [r7, #24]
 1149              	.L78:
 1150              		.loc 1 278 27 discriminator 3
 1151 006c BA69     		ldr	r2, [r7, #24]
 1152 006e 3B6A     		ldr	r3, [r7, #32]
 1153 0070 9A42     		cmp	r2, r3
 1154 0072 0CDA     		bge	.L77
 279:Src/config_system.cpp ****             offset += Config_GetAreaSize(static_cast<ConfigArea_t>(j));
 1155              		.loc 1 279 41 discriminator 2
 1156 0074 BB69     		ldr	r3, [r7, #24]
 1157 0076 DBB2     		uxtb	r3, r3
 1158 0078 1846     		mov	r0, r3
 1159 007a FFF7FEFF 		bl	Config_GetAreaSize
 1160 007e 0246     		mov	r2, r0
 1161              		.loc 1 279 20 discriminator 2
ARM GAS  /tmp/ccevIIwi.s 			page 26


 1162 0080 FB69     		ldr	r3, [r7, #28]
 1163 0082 1344     		add	r3, r3, r2
 1164 0084 FB61     		str	r3, [r7, #28]
 278:Src/config_system.cpp ****             offset += Config_GetAreaSize(static_cast<ConfigArea_t>(j));
 1165              		.loc 1 278 9 discriminator 2
 1166 0086 BB69     		ldr	r3, [r7, #24]
 1167 0088 0133     		adds	r3, r3, #1
 1168 008a BB61     		str	r3, [r7, #24]
 1169 008c EEE7     		b	.L78
 1170              	.L77:
 1171              	.LBE13:
 280:Src/config_system.cpp ****         }
 281:Src/config_system.cpp ****         
 282:Src/config_system.cpp ****         // 从Flash读取数据
 283:Src/config_system.cpp ****         const uint8_t* src = (const uint8_t*)(CONFIG_FLASH_ADDR + offset);
 1172              		.loc 1 283 65
 1173 008e FB69     		ldr	r3, [r7, #28]
 1174 0090 03F10063 		add	r3, r3, #134217728
 1175 0094 03F5F033 		add	r3, r3, #122880
 1176              		.loc 1 283 24
 1177 0098 BB60     		str	r3, [r7, #8]
 284:Src/config_system.cpp ****         
 285:Src/config_system.cpp ****         // 验证区域CRC
 286:Src/config_system.cpp ****         uint32_t stored_crc = *(uint32_t*)(src + size - sizeof(uint32_t));
 1178              		.loc 1 286 55
 1179 009a FB68     		ldr	r3, [r7, #12]
 1180 009c 043B     		subs	r3, r3, #4
 1181 009e BA68     		ldr	r2, [r7, #8]
 1182 00a0 1344     		add	r3, r3, r2
 1183              		.loc 1 286 18
 1184 00a2 1B68     		ldr	r3, [r3]
 1185 00a4 7B60     		str	r3, [r7, #4]
 287:Src/config_system.cpp ****         uint32_t calc_crc = Calculate_CRC(src, size - sizeof(uint32_t));
 1186              		.loc 1 287 42
 1187 00a6 FB68     		ldr	r3, [r7, #12]
 1188 00a8 043B     		subs	r3, r3, #4
 1189 00aa 1946     		mov	r1, r3
 1190 00ac B868     		ldr	r0, [r7, #8]
 1191 00ae FFF7FEFF 		bl	_ZL13Calculate_CRCPKvm
 1192 00b2 3860     		str	r0, [r7]
 288:Src/config_system.cpp ****         
 289:Src/config_system.cpp ****         if (calc_crc != stored_crc) {
 1193              		.loc 1 289 9
 1194 00b4 3A68     		ldr	r2, [r7]
 1195 00b6 7B68     		ldr	r3, [r7, #4]
 1196 00b8 9A42     		cmp	r2, r3
 1197 00ba 07D0     		beq	.L79
 290:Src/config_system.cpp ****             // CRC校验失败，加载默认值
 291:Src/config_system.cpp ****             Config_LoadAreaDefaults(area);
 1198              		.loc 1 291 36 discriminator 1
 1199 00bc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1200 00be 1846     		mov	r0, r3
 1201 00c0 FFF7FEFF 		bl	_ZL23Config_LoadAreaDefaults12ConfigArea_t
 292:Src/config_system.cpp ****             all_success = false;
 1202              		.loc 1 292 25 discriminator 1
 1203 00c4 0023     		movs	r3, #0
 1204 00c6 87F82730 		strb	r3, [r7, #39]
ARM GAS  /tmp/ccevIIwi.s 			page 27


 293:Src/config_system.cpp ****             continue;
 1205              		.loc 1 293 13 discriminator 1
 1206 00ca 06E0     		b	.L76
 1207              	.L79:
 294:Src/config_system.cpp ****         }
 295:Src/config_system.cpp ****         
 296:Src/config_system.cpp ****         // 复制数据到RAM
 297:Src/config_system.cpp ****         memcpy(data, src, size - sizeof(uint32_t));
 1208              		.loc 1 297 32
 1209 00cc FB68     		ldr	r3, [r7, #12]
 1210 00ce 043B     		subs	r3, r3, #4
 1211              		.loc 1 297 15
 1212 00d0 1A46     		mov	r2, r3
 1213 00d2 B968     		ldr	r1, [r7, #8]
 1214 00d4 3869     		ldr	r0, [r7, #16]
 1215 00d6 FFF7FEFF 		bl	memcpy
 1216              	.L76:
 1217              	.LBE12:
 265:Src/config_system.cpp ****         ConfigArea_t area = static_cast<ConfigArea_t>(i);
 1218              		.loc 1 265 5 discriminator 2
 1219 00da 3B6A     		ldr	r3, [r7, #32]
 1220 00dc 0133     		adds	r3, r3, #1
 1221 00de 3B62     		str	r3, [r7, #32]
 1222 00e0 A7E7     		b	.L80
 1223              	.L73:
 1224              	.LBE11:
 298:Src/config_system.cpp ****     }
 299:Src/config_system.cpp ****     
 300:Src/config_system.cpp ****     return all_success;
 1225              		.loc 1 300 12
 1226 00e2 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 1227              	.L72:
 301:Src/config_system.cpp **** }
 1228              		.loc 1 301 1
 1229 00e6 1846     		mov	r0, r3
 1230 00e8 2837     		adds	r7, r7, #40
 1231              	.LCFI50:
 1232              		.cfi_def_cfa_offset 8
 1233 00ea BD46     		mov	sp, r7
 1234              	.LCFI51:
 1235              		.cfi_def_cfa_register 13
 1236              		@ sp needed
 1237 00ec 80BD     		pop	{r7, pc}
 1238              	.L82:
 1239 00ee 00BF     		.align	2
 1240              	.L81:
 1241 00f0 00000000 		.word	_ZL20g_config_initialized
 1242              		.cfi_endproc
 1243              	.LFE142:
 1245              		.section	.text._ZL23Config_LoadAreaDefaults12ConfigArea_t,"ax",%progbits
 1246              		.align	1
 1247              		.syntax unified
 1248              		.thumb
 1249              		.thumb_func
 1250              		.fpu fpv4-sp-d16
 1252              	_ZL23Config_LoadAreaDefaults12ConfigArea_t:
 1253              	.LFB143:
ARM GAS  /tmp/ccevIIwi.s 			page 28


 302:Src/config_system.cpp **** 
 303:Src/config_system.cpp **** /* 加载区域默认值 */
 304:Src/config_system.cpp **** static void Config_LoadAreaDefaults(ConfigArea_t area)
 305:Src/config_system.cpp **** {
 1254              		.loc 1 305 1
 1255              		.cfi_startproc
 1256              		@ args = 0, pretend = 0, frame = 8
 1257              		@ frame_needed = 1, uses_anonymous_args = 0
 1258              		@ link register save eliminated.
 1259 0000 80B4     		push	{r7}
 1260              	.LCFI52:
 1261              		.cfi_def_cfa_offset 4
 1262              		.cfi_offset 7, -4
 1263 0002 83B0     		sub	sp, sp, #12
 1264              	.LCFI53:
 1265              		.cfi_def_cfa_offset 16
 1266 0004 00AF     		add	r7, sp, #0
 1267              	.LCFI54:
 1268              		.cfi_def_cfa_register 7
 1269 0006 0346     		mov	r3, r0
 1270 0008 FB71     		strb	r3, [r7, #7]
 306:Src/config_system.cpp ****     switch(area) {
 1271              		.loc 1 306 12
 1272 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1273 000c 052B     		cmp	r3, #5
 1274 000e 65D8     		bhi	.L93
 1275 0010 01A2     		adr	r2, .L86
 1276 0012 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1277 0016 00BF     		.p2align 2
 1278              	.L86:
 1279 0018 31000000 		.word	.L91+1
 1280 001c 47000000 		.word	.L90+1
 1281 0020 61000000 		.word	.L89+1
 1282 0024 71000000 		.word	.L88+1
 1283 0028 93000000 		.word	.L87+1
 1284 002c C1000000 		.word	.L85+1
 1285              		.p2align 1
 1286              	.L91:
 307:Src/config_system.cpp ****         case CONFIG_AREA_SYSTEM:
 308:Src/config_system.cpp ****             g_config.system_config.can_id = 1;
 1287              		.loc 1 308 43
 1288 0030 2E4B     		ldr	r3, .L94
 1289 0032 0122     		movs	r2, #1
 1290 0034 DA60     		str	r2, [r3, #12]
 309:Src/config_system.cpp ****             g_config.system_config.heartbeat_rate_ms = 1000;
 1291              		.loc 1 309 54
 1292 0036 2D4B     		ldr	r3, .L94
 1293 0038 4FF47A72 		mov	r2, #1000
 1294 003c 1A61     		str	r2, [r3, #16]
 310:Src/config_system.cpp ****             g_config.system_config.debug_level = 1;
 1295              		.loc 1 310 48
 1296 003e 2B4B     		ldr	r3, .L94
 1297 0040 0122     		movs	r2, #1
 1298 0042 1A75     		strb	r2, [r3, #20]
 311:Src/config_system.cpp ****             break;
 1299              		.loc 1 311 13
 1300 0044 4BE0     		b	.L92
ARM GAS  /tmp/ccevIIwi.s 			page 29


 1301              	.L90:
 312:Src/config_system.cpp ****             
 313:Src/config_system.cpp ****         case CONFIG_AREA_MOTOR:
 314:Src/config_system.cpp ****             g_config.motor_config.current_limit = 60.0f;
 1302              		.loc 1 314 49
 1303 0046 294B     		ldr	r3, .L94
 1304 0048 294A     		ldr	r2, .L94+4
 1305 004a 9A61     		str	r2, [r3, #24]	@ float
 315:Src/config_system.cpp ****             g_config.motor_config.voltage_limit = 24.0f;
 1306              		.loc 1 315 49
 1307 004c 274B     		ldr	r3, .L94
 1308 004e 294A     		ldr	r2, .L94+8
 1309 0050 DA61     		str	r2, [r3, #28]	@ float
 316:Src/config_system.cpp ****             g_config.motor_config.temp_limit = 85.0f;
 1310              		.loc 1 316 46
 1311 0052 264B     		ldr	r3, .L94
 1312 0054 284A     		ldr	r2, .L94+12
 1313 0056 1A62     		str	r2, [r3, #32]	@ float
 317:Src/config_system.cpp ****             g_config.motor_config.pole_pairs = 7;
 1314              		.loc 1 317 46
 1315 0058 244B     		ldr	r3, .L94
 1316 005a 0722     		movs	r2, #7
 1317 005c 9A84     		strh	r2, [r3, #36]	@ movhi
 318:Src/config_system.cpp ****             break;
 1318              		.loc 1 318 13
 1319 005e 3EE0     		b	.L92
 1320              	.L89:
 319:Src/config_system.cpp ****             
 320:Src/config_system.cpp ****         case CONFIG_AREA_CAN:
 321:Src/config_system.cpp ****             g_config.can_config.baudrate = 1000000;
 1321              		.loc 1 321 42
 1322 0060 224B     		ldr	r3, .L94
 1323 0062 264A     		ldr	r2, .L94+16
 1324 0064 9A62     		str	r2, [r3, #40]
 322:Src/config_system.cpp ****             g_config.can_config.enabled = true;
 1325              		.loc 1 322 41
 1326 0066 214B     		ldr	r3, .L94
 1327 0068 0122     		movs	r2, #1
 1328 006a 83F82C20 		strb	r2, [r3, #44]
 323:Src/config_system.cpp ****             break;
 1329              		.loc 1 323 13
 1330 006e 36E0     		b	.L92
 1331              	.L88:
 324:Src/config_system.cpp ****             
 325:Src/config_system.cpp ****         case CONFIG_AREA_ENCODER:
 326:Src/config_system.cpp ****             g_config.encoder_config.cpr = 4096;
 1332              		.loc 1 326 41
 1333 0070 1E4B     		ldr	r3, .L94
 1334 0072 4FF48052 		mov	r2, #4096
 1335 0076 1A86     		strh	r2, [r3, #48]	@ movhi
 327:Src/config_system.cpp ****             g_config.encoder_config.mode = 0;
 1336              		.loc 1 327 42
 1337 0078 1C4B     		ldr	r3, .L94
 1338 007a 0022     		movs	r2, #0
 1339 007c 83F83220 		strb	r2, [r3, #50]
 328:Src/config_system.cpp ****             g_config.encoder_config.use_index = false;
 1340              		.loc 1 328 47
ARM GAS  /tmp/ccevIIwi.s 			page 30


 1341 0080 1A4B     		ldr	r3, .L94
 1342 0082 0022     		movs	r2, #0
 1343 0084 83F83320 		strb	r2, [r3, #51]
 329:Src/config_system.cpp ****             g_config.encoder_config.index_offset = 0.0f;
 1344              		.loc 1 329 50
 1345 0088 184B     		ldr	r3, .L94
 1346 008a 4FF00002 		mov	r2, #0
 1347 008e 5A63     		str	r2, [r3, #52]	@ float
 330:Src/config_system.cpp ****             break;
 1348              		.loc 1 330 13
 1349 0090 25E0     		b	.L92
 1350              	.L87:
 331:Src/config_system.cpp ****             
 332:Src/config_system.cpp ****         case CONFIG_AREA_CONTROLLER:
 333:Src/config_system.cpp ****             g_config.controller_config.speed_pid_p = 0.1f;
 1351              		.loc 1 333 52
 1352 0092 164B     		ldr	r3, .L94
 1353 0094 1A4A     		ldr	r2, .L94+20
 1354 0096 9A63     		str	r2, [r3, #56]	@ float
 334:Src/config_system.cpp ****             g_config.controller_config.speed_pid_i = 0.01f;
 1355              		.loc 1 334 52
 1356 0098 144B     		ldr	r3, .L94
 1357 009a 1A4A     		ldr	r2, .L94+24
 1358 009c DA63     		str	r2, [r3, #60]	@ float
 335:Src/config_system.cpp ****             g_config.controller_config.speed_pid_d = 0.0f;
 1359              		.loc 1 335 52
 1360 009e 134B     		ldr	r3, .L94
 1361 00a0 4FF00002 		mov	r2, #0
 1362 00a4 1A64     		str	r2, [r3, #64]	@ float
 336:Src/config_system.cpp ****             g_config.controller_config.pos_pid_p = 1.0f;
 1363              		.loc 1 336 50
 1364 00a6 114B     		ldr	r3, .L94
 1365 00a8 4FF07E52 		mov	r2, #1065353216
 1366 00ac 5A64     		str	r2, [r3, #68]	@ float
 337:Src/config_system.cpp ****             g_config.controller_config.pos_pid_i = 0.0f;
 1367              		.loc 1 337 50
 1368 00ae 0F4B     		ldr	r3, .L94
 1369 00b0 4FF00002 		mov	r2, #0
 1370 00b4 9A64     		str	r2, [r3, #72]	@ float
 338:Src/config_system.cpp ****             g_config.controller_config.pos_pid_d = 0.0f;
 1371              		.loc 1 338 50
 1372 00b6 0D4B     		ldr	r3, .L94
 1373 00b8 4FF00002 		mov	r2, #0
 1374 00bc DA64     		str	r2, [r3, #76]	@ float
 339:Src/config_system.cpp ****             break;
 1375              		.loc 1 339 13
 1376 00be 0EE0     		b	.L92
 1377              	.L85:
 340:Src/config_system.cpp ****             
 341:Src/config_system.cpp ****         case CONFIG_AREA_LIMITS:
 342:Src/config_system.cpp ****             g_config.limits_config.max_rpm = 3000;
 1378              		.loc 1 342 44
 1379 00c0 0A4B     		ldr	r3, .L94
 1380 00c2 40F6B832 		movw	r2, #3000
 1381 00c6 1A65     		str	r2, [r3, #80]
 343:Src/config_system.cpp ****             g_config.limits_config.max_current = 60.0f;
 1382              		.loc 1 343 48
ARM GAS  /tmp/ccevIIwi.s 			page 31


 1383 00c8 084B     		ldr	r3, .L94
 1384 00ca 094A     		ldr	r2, .L94+4
 1385 00cc 5A65     		str	r2, [r3, #84]	@ float
 344:Src/config_system.cpp ****             g_config.limits_config.max_duty = 0.95f;
 1386              		.loc 1 344 45
 1387 00ce 074B     		ldr	r3, .L94
 1388 00d0 0D4A     		ldr	r2, .L94+28
 1389 00d2 9A65     		str	r2, [r3, #88]	@ float
 345:Src/config_system.cpp ****             g_config.limits_config.max_temp = 85.0f;
 1390              		.loc 1 345 45
 1391 00d4 054B     		ldr	r3, .L94
 1392 00d6 084A     		ldr	r2, .L94+12
 1393 00d8 DA65     		str	r2, [r3, #92]	@ float
 346:Src/config_system.cpp ****             break;
 1394              		.loc 1 346 13
 1395 00da 00E0     		b	.L92
 1396              	.L93:
 347:Src/config_system.cpp ****             
 348:Src/config_system.cpp ****         default:
 349:Src/config_system.cpp ****             break;
 1397              		.loc 1 349 13
 1398 00dc 00BF     		nop
 1399              	.L92:
 350:Src/config_system.cpp ****     }
 351:Src/config_system.cpp **** }
 1400              		.loc 1 351 1
 1401 00de 00BF     		nop
 1402 00e0 0C37     		adds	r7, r7, #12
 1403              	.LCFI55:
 1404              		.cfi_def_cfa_offset 4
 1405 00e2 BD46     		mov	sp, r7
 1406              	.LCFI56:
 1407              		.cfi_def_cfa_register 13
 1408              		@ sp needed
 1409 00e4 5DF8047B 		ldr	r7, [sp], #4
 1410              	.LCFI57:
 1411              		.cfi_restore 7
 1412              		.cfi_def_cfa_offset 0
 1413 00e8 7047     		bx	lr
 1414              	.L95:
 1415 00ea 00BF     		.align	2
 1416              	.L94:
 1417 00ec 00000000 		.word	_ZL8g_config
 1418 00f0 00007042 		.word	1114636288
 1419 00f4 0000C041 		.word	1103101952
 1420 00f8 0000AA42 		.word	1118437376
 1421 00fc 40420F00 		.word	1000000
 1422 0100 CDCCCC3D 		.word	1036831949
 1423 0104 0AD7233C 		.word	1008981770
 1424 0108 3333733F 		.word	1064514355
 1425              		.cfi_endproc
 1426              	.LFE143:
 1428              		.text
 1429              	.Letext0:
 1430              		.file 2 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_type
 1431              		.file 3 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 1432              		.file 4 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g4xx.h"
ARM GAS  /tmp/ccevIIwi.s 			page 32


 1433              		.file 5 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 1434              		.file 6 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash.h"
 1435              		.file 7 "Inc/config_system.hpp"
ARM GAS  /tmp/ccevIIwi.s 			page 33


DEFINED SYMBOLS
                            *ABS*:0000000000000000 config_system.cpp
     /tmp/ccevIIwi.s:18     .text._Z11Flash_WritemPKvm:0000000000000000 $t
     /tmp/ccevIIwi.s:26     .text._Z11Flash_WritemPKvm:0000000000000000 _Z11Flash_WritemPKvm
     /tmp/ccevIIwi.s:168    .text._Z11Flash_Erasemm:0000000000000000 $t
     /tmp/ccevIIwi.s:175    .text._Z11Flash_Erasemm:0000000000000000 _Z11Flash_Erasemm
     /tmp/ccevIIwi.s:257    .bss._ZL8g_config:0000000000000000 $d
     /tmp/ccevIIwi.s:260    .bss._ZL8g_config:0000000000000000 _ZL8g_config
     /tmp/ccevIIwi.s:265    .bss._ZL20g_config_initialized:0000000000000000 _ZL20g_config_initialized
     /tmp/ccevIIwi.s:266    .bss._ZL20g_config_initialized:0000000000000000 $d
     /tmp/ccevIIwi.s:268    .text._ZL13Calculate_CRCPKvm:0000000000000000 $t
     /tmp/ccevIIwi.s:274    .text._ZL13Calculate_CRCPKvm:0000000000000000 _ZL13Calculate_CRCPKvm
     /tmp/ccevIIwi.s:384    .text.Config_GetAreaPtr:0000000000000000 $t
     /tmp/ccevIIwi.s:391    .text.Config_GetAreaPtr:0000000000000000 Config_GetAreaPtr
     /tmp/ccevIIwi.s:418    .text.Config_GetAreaPtr:0000000000000018 $d
     /tmp/ccevIIwi.s:424    .text.Config_GetAreaPtr:0000000000000030 $t
     /tmp/ccevIIwi.s:470    .text.Config_GetAreaPtr:0000000000000058 $d
     /tmp/ccevIIwi.s:480    .text.Config_GetAreaSize:0000000000000000 $t
     /tmp/ccevIIwi.s:487    .text.Config_GetAreaSize:0000000000000000 Config_GetAreaSize
     /tmp/ccevIIwi.s:514    .text.Config_GetAreaSize:0000000000000018 $d
     /tmp/ccevIIwi.s:520    .text.Config_GetAreaSize:0000000000000030 $t
     /tmp/ccevIIwi.s:567    .text.Config_SaveArea:0000000000000000 $t
     /tmp/ccevIIwi.s:574    .text.Config_SaveArea:0000000000000000 Config_SaveArea
     /tmp/ccevIIwi.s:681    .text.Config_LoadArea:0000000000000000 $t
     /tmp/ccevIIwi.s:688    .text.Config_LoadArea:0000000000000000 Config_LoadArea
     /tmp/ccevIIwi.s:782    .text.Config_Init:0000000000000000 $t
     /tmp/ccevIIwi.s:789    .text.Config_Init:0000000000000000 Config_Init
     /tmp/ccevIIwi.s:988    .text.Config_LoadDefault:0000000000000000 Config_LoadDefault
     /tmp/ccevIIwi.s:882    .text.Config_Init:0000000000000064 $d
     /tmp/ccevIIwi.s:890    .text.Config_SaveAll:0000000000000000 $t
     /tmp/ccevIIwi.s:897    .text.Config_SaveAll:0000000000000000 Config_SaveAll
     /tmp/ccevIIwi.s:973    .text.Config_SaveAll:0000000000000060 $d
     /tmp/ccevIIwi.s:981    .text.Config_LoadDefault:0000000000000000 $t
     /tmp/ccevIIwi.s:1047   .text.Config_LoadDefault:0000000000000048 $d
     /tmp/ccevIIwi.s:1056   .text.Config_LoadAllAreas:0000000000000000 $t
     /tmp/ccevIIwi.s:1063   .text.Config_LoadAllAreas:0000000000000000 Config_LoadAllAreas
     /tmp/ccevIIwi.s:1252   .text._ZL23Config_LoadAreaDefaults12ConfigArea_t:0000000000000000 _ZL23Config_LoadAreaDefaults12ConfigArea_t
     /tmp/ccevIIwi.s:1241   .text.Config_LoadAllAreas:00000000000000f0 $d
     /tmp/ccevIIwi.s:1246   .text._ZL23Config_LoadAreaDefaults12ConfigArea_t:0000000000000000 $t
     /tmp/ccevIIwi.s:1279   .text._ZL23Config_LoadAreaDefaults12ConfigArea_t:0000000000000018 $d
     /tmp/ccevIIwi.s:1285   .text._ZL23Config_LoadAreaDefaults12ConfigArea_t:0000000000000030 $t
     /tmp/ccevIIwi.s:1417   .text._ZL23Config_LoadAreaDefaults12ConfigArea_t:00000000000000ec $d

UNDEFINED SYMBOLS
HAL_FLASH_Unlock
HAL_FLASH_Program
HAL_FLASH_Lock
memcpy
HAL_FLASHEx_Erase
memset
