ARM GAS  /tmp/ccqF3GRw.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"pwm_curr_fdbk.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.OFFSET_TAB_CCMRx,"a"
  18              		.align	2
  21              	OFFSET_TAB_CCMRx:
  22 0000 00000000 		.ascii	"\000\000\000\000\004\004\004\00488"
  22      04040404 
  22      3838
  23              		.section	.rodata.SHIFT_TAB_OCxx,"a"
  24              		.align	2
  27              	SHIFT_TAB_OCxx:
  28 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\010"
  28      00000800 
  28      0008
  29              		.section	.rodata.SHIFT_TAB_ICxx,"a"
  30              		.align	2
  33              	SHIFT_TAB_ICxx:
  34 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\000"
  34      00000800 
  34      0000
  35              		.section	.rodata.SHIFT_TAB_CCxP,"a"
  36              		.align	2
  39              	SHIFT_TAB_CCxP:
  40 0000 00020406 		.ascii	"\000\002\004\006\010\012\014\016\020\024"
  40      080A0C0E 
  40      1014
  41              		.section	.rodata.SHIFT_TAB_OISx,"a"
  42              		.align	2
  45              	SHIFT_TAB_OISx:
  46 0000 00010203 		.ascii	"\000\001\002\003\004\005\006\007\010\012"
  46      04050607 
  46      080A
  47              		.section	.text.LL_GPIO_ResetOutputPin,"ax",%progbits
  48              		.align	1
  49              		.arch armv7e-m
  50              		.syntax unified
  51              		.thumb
  52              		.thumb_func
  53              		.fpu fpv4-sp-d16
  55              	LL_GPIO_ResetOutputPin:
  56              	.LFB871:
  57              		.file 1 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h"
   1:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
ARM GAS  /tmp/ccqF3GRw.s 			page 2


   2:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   ******************************************************************************
   3:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @file    stm32g4xx_ll_gpio.h
   4:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @author  MCD Application Team
   5:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief   Header file of GPIO LL module.
   6:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   ******************************************************************************
   7:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @attention
   8:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *
   9:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * Copyright (c) 2019 STMicroelectronics.
  10:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * All rights reserved.
  11:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *
  12:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * in the root directory of this software component.
  14:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *
  16:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   ******************************************************************************
  17:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  18:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  19:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #ifndef STM32G4xx_LL_GPIO_H
  21:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define STM32G4xx_LL_GPIO_H
  22:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  23:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #ifdef __cplusplus
  24:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** extern "C" {
  25:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #endif
  26:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  27:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #include "stm32g4xx.h"
  29:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  30:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @addtogroup STM32G4xx_LL_Driver
  31:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
  32:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  33:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  34:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #if defined (GPIOA) || defined (GPIOB) || defined (GPIOC) || defined (GPIOD) || defined (GPIOE) || 
  35:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  36:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL GPIO
  37:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
  38:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  39:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** MISRA C:2012 deviation rule has been granted for following rules:
  40:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * Rule-18.1_d - Medium: Array pointer `GPIOx' is accessed with index [..,..]
  41:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * which may be out of array bounds [..,UNKNOWN] in following APIs:
  42:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * LL_GPIO_GetAFPin_0_7
  43:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * LL_GPIO_SetAFPin_0_7
  44:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * LL_GPIO_SetAFPin_8_15
  45:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * LL_GPIO_GetAFPin_8_15
  46:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  47:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  48:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Private types -------------------------------------------------------------*/
  49:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Private variables ---------------------------------------------------------*/
  50:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Private constants ---------------------------------------------------------*/
  51:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Private macros ------------------------------------------------------------*/
  52:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #if defined(USE_FULL_LL_DRIVER)
  53:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Private_Macros GPIO Private Macros
  54:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
  55:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  56:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  57:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
  58:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
ARM GAS  /tmp/ccqF3GRw.s 			page 3


  59:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  60:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #endif /*USE_FULL_LL_DRIVER*/
  61:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  62:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Exported types ------------------------------------------------------------*/
  63:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #if defined(USE_FULL_LL_DRIVER)
  64:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_ES_INIT GPIO Exported Init structures
  65:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
  66:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  67:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  68:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
  69:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief LL GPIO Init Structure definition
  70:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
  71:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** typedef struct
  72:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
  73:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Pin;          /*!< Specifies the GPIO pins to be configured.
  74:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be any value of @ref GPIO_LL_EC_PIN */
  75:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  76:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Mode;         /*!< Specifies the operating mode for the selected pins.
  77:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_MODE.
  78:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  79:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  80:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  81:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Speed;        /*!< Specifies the speed for the selected pins.
  82:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_SPEED.
  83:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  84:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  85:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  86:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t OutputType;   /*!< Specifies the operating output type for the selected pins.
  87:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_OUTPUT.
  88:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  89:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  90:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  91:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Pull;         /*!< Specifies the operating Pull-up/Pull down for the selected pins.
  92:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_PULL.
  93:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  94:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
  95:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  96:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   uint32_t Alternate;    /*!< Specifies the Peripheral to be connected to the selected pins.
  97:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               This parameter can be a value of @ref GPIO_LL_EC_AF.
  98:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
  99:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                               GPIO HW configuration can be modified afterwards using unitary functi
 100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** } LL_GPIO_InitTypeDef;
 101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #endif /* USE_FULL_LL_DRIVER */
 106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Exported constants --------------------------------------------------------*/
 108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Constants GPIO Exported Constants
 109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_PIN PIN
 113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_0                      GPIO_BSRR_BS0 /*!< Select pin 0 */
ARM GAS  /tmp/ccqF3GRw.s 			page 4


 116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_1                      GPIO_BSRR_BS1 /*!< Select pin 1 */
 117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_2                      GPIO_BSRR_BS2 /*!< Select pin 2 */
 118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_3                      GPIO_BSRR_BS3 /*!< Select pin 3 */
 119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_4                      GPIO_BSRR_BS4 /*!< Select pin 4 */
 120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_5                      GPIO_BSRR_BS5 /*!< Select pin 5 */
 121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_6                      GPIO_BSRR_BS6 /*!< Select pin 6 */
 122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_7                      GPIO_BSRR_BS7 /*!< Select pin 7 */
 123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_8                      GPIO_BSRR_BS8 /*!< Select pin 8 */
 124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_9                      GPIO_BSRR_BS9 /*!< Select pin 9 */
 125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_10                     GPIO_BSRR_BS10 /*!< Select pin 10 */
 126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_11                     GPIO_BSRR_BS11 /*!< Select pin 11 */
 127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_12                     GPIO_BSRR_BS12 /*!< Select pin 12 */
 128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_13                     GPIO_BSRR_BS13 /*!< Select pin 13 */
 129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_14                     GPIO_BSRR_BS14 /*!< Select pin 14 */
 130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_15                     GPIO_BSRR_BS15 /*!< Select pin 15 */
 131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PIN_ALL                    (GPIO_BSRR_BS0 | GPIO_BSRR_BS1  | GPIO_BSRR_BS2  | \
 132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS3  | GPIO_BSRR_BS4  | GPIO_BSRR_BS5  | \
 133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS6  | GPIO_BSRR_BS7  | GPIO_BSRR_BS8  | \
 134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS9  | GPIO_BSRR_BS10 | GPIO_BSRR_BS11 | \
 135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS12 | GPIO_BSRR_BS13 | GPIO_BSRR_BS14 | \
 136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                                            GPIO_BSRR_BS15) /*!< Select all pins */
 137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_MODE Mode
 142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_MODE_INPUT                 (0x00000000U) /*!< Select input mode */
 145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_MODE_OUTPUT                GPIO_MODER_MODE0_0  /*!< Select output mode */
 146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_MODE_ALTERNATE             GPIO_MODER_MODE0_1  /*!< Select alternate function mode 
 147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_MODE_ANALOG                GPIO_MODER_MODE0    /*!< Select analog mode */
 148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_OUTPUT Output Type
 153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_OUTPUT_PUSHPULL            (0x00000000U) /*!< Select push-pull as output type */
 156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_OUTPUT_OPENDRAIN           GPIO_OTYPER_OT0 /*!< Select open-drain as output type */
 157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_SPEED Output Speed
 162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_LOW             (0x00000000U) /*!< Select I/O low output speed    */
 165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_MEDIUM          GPIO_OSPEEDR_OSPEED0_0 /*!< Select I/O medium output spe
 166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_HIGH            GPIO_OSPEEDR_OSPEED0_1 /*!< Select I/O fast output speed
 167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FREQ_VERY_HIGH       GPIO_OSPEEDR_OSPEED0   /*!< Select I/O high output speed
 168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_LOW                  LL_GPIO_SPEED_FREQ_LOW
 172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_MEDIUM               LL_GPIO_SPEED_FREQ_MEDIUM
ARM GAS  /tmp/ccqF3GRw.s 			page 5


 173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_FAST                 LL_GPIO_SPEED_FREQ_HIGH
 174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_SPEED_HIGH                 LL_GPIO_SPEED_FREQ_VERY_HIGH
 175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_PULL Pull Up Pull Down
 177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PULL_NO                    (0x00000000U) /*!< Select I/O no pull */
 180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PULL_UP                    GPIO_PUPDR_PUPD0_0 /*!< Select I/O pull up */
 181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_PULL_DOWN                  GPIO_PUPDR_PUPD0_1 /*!< Select I/O pull down */
 182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EC_AF Alternate Function
 187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_0                       (0x0000000U) /*!< Select alternate function 0 */
 190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_1                       (0x0000001U) /*!< Select alternate function 1 */
 191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_2                       (0x0000002U) /*!< Select alternate function 2 */
 192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_3                       (0x0000003U) /*!< Select alternate function 3 */
 193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_4                       (0x0000004U) /*!< Select alternate function 4 */
 194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_5                       (0x0000005U) /*!< Select alternate function 5 */
 195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_6                       (0x0000006U) /*!< Select alternate function 6 */
 196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_7                       (0x0000007U) /*!< Select alternate function 7 */
 197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_8                       (0x0000008U) /*!< Select alternate function 8 */
 198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_9                       (0x0000009U) /*!< Select alternate function 9 */
 199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_10                      (0x000000AU) /*!< Select alternate function 10 */
 200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_11                      (0x000000BU) /*!< Select alternate function 11 */
 201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_12                      (0x000000CU) /*!< Select alternate function 12 */
 202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_13                      (0x000000DU) /*!< Select alternate function 13 */
 203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_14                      (0x000000EU) /*!< Select alternate function 14 */
 204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_AF_15                      (0x000000FU) /*!< Select alternate function 15 */
 205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Exported macro ------------------------------------------------------------*/
 214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Macros GPIO Exported Macros
 215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EM_WRITE_READ Common Write and read registers Macros
 219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Write a value in GPIO register
 224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __INSTANCE__ GPIO Instance
 225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __REG__ Register to be written
 226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __VALUE__ Value to be written in the register
 227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALU
ARM GAS  /tmp/ccqF3GRw.s 			page 6


 230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Read a value in GPIO register
 233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __INSTANCE__ GPIO Instance
 234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  __REG__ Register to be read
 235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Register value
 236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** #define LL_GPIO_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /* Exported functions --------------------------------------------------------*/
 247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_Exported_Functions GPIO Exported Functions
 248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EF_Port_Configuration Port Configuration
 252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio mode for a dedicated pin on dedicated port.
 257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   I/O mode can be Input mode, General purpose output, Alternate function mode or Analog.
 258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll MODER        MODEy         LL_GPIO_SetPinMode
 260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Mode This parameter can be one of the following values:
 279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_INPUT
 280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_OUTPUT
 281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ALTERNATE
 282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ANALOG
 283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
 286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
ARM GAS  /tmp/ccqF3GRw.s 			page 7


 287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(P
 288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio mode for a dedicated pin on dedicated port.
 292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   I/O mode can be Input mode, General purpose output, Alternate function mode or Analog.
 293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll MODER        MODEy         LL_GPIO_GetPinMode
 295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_INPUT
 315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_OUTPUT
 316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ALTERNATE
 317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_MODE_ANALOG
 318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin)
 320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->MODER,
 322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(Pin) 
 323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio output type for several pins on dedicated port.
 327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Output type as to be set when gpio pin is in output or
 328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         alternate modes. Possible type are Push-pull or Open-drain.
 329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll OTYPER       OTy           LL_GPIO_SetPinOutputType
 330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
ARM GAS  /tmp/ccqF3GRw.s 			page 8


 344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  OutputType This parameter can be one of the following values:
 350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
 351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
 352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t Outpu
 355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio output type for several pins on dedicated port.
 361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Output type as to be set when gpio pin is in output or
 362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         alternate modes. Possible type are Push-pull or Open-drain.
 363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll OTYPER       OTy           LL_GPIO_GetPinOutputType
 365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
 386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
 387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin)
 389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->OTYPER, Pin) >> POSITION_VAL(Pin));
 391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio speed for a dedicated pin on dedicated port.
 395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   I/O speed can be Low, Medium, Fast or High speed.
 396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Refer to datasheet for frequency specifications and the power
 398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         supply and load conditions for each speed.
 399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll OSPEEDR      OSPEEDy       LL_GPIO_SetPinSpeed
 400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
ARM GAS  /tmp/ccqF3GRw.s 			page 9


 401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Speed This parameter can be one of the following values:
 419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_LOW
 420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
 421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
 422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
 423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****              (Speed << (POSITION_VAL(Pin) * 2U)));
 429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio speed for a dedicated pin on dedicated port.
 433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   I/O speed can be Low, Medium, Fast or High speed.
 434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Refer to datasheet for frequency specifications and the power
 436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         supply and load conditions for each speed.
 437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll OSPEEDR      OSPEEDy       LL_GPIO_GetPinSpeed
 438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_LOW
ARM GAS  /tmp/ccqF3GRw.s 			page 10


 458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
 459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
 460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
 461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin)
 463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->OSPEEDR,
 465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(P
 466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio pull-up or pull-down for a dedicated pin on a dedicated port.
 470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll PUPDR        PUPDy         LL_GPIO_SetPinPull
 472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pull This parameter can be one of the following values:
 491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_NO
 492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_UP
 493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_DOWN
 494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
 497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(P
 499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio pull-up or pull-down for a dedicated pin on a dedicated port
 503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll PUPDR        PUPDy         LL_GPIO_GetPinPull
 505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
ARM GAS  /tmp/ccqF3GRw.s 			page 11


 515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_NO
 525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_UP
 526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PULL_DOWN
 527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin)
 529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->PUPDR,
 531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U))) >> (POSITION_VAL(Pin) 
 532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio alternate function of a dedicated pin from 0 to 7 for a dedicated port.
 536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF15 depending on target.
 537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll AFRL         AFSELy        LL_GPIO_SetAFPin_0_7
 539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Alternate This parameter can be one of the following values:
 550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
 569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****              (Alternate << (POSITION_VAL(Pin) * 4U)));
ARM GAS  /tmp/ccqF3GRw.s 			page 12


 572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio alternate function of a dedicated pin from 0 to 7 for a dedicated port.
 576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll AFRL         AFSELy        LL_GPIO_GetAFPin_0_7
 577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin)
 606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->AFR[0],
 608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U))) >> (POSITION_VAL(Pin) 
 609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Configure gpio alternate function of a dedicated pin from 8 to 15 for a dedicated port.
 613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF15 depending on target.
 614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Warning: only one pin can be passed as parameter.
 615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll AFRH         AFSELy        LL_GPIO_SetAFPin_8_15
 616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Alternate This parameter can be one of the following values:
 627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
ARM GAS  /tmp/ccqF3GRw.s 			page 13


 629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
 646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****              (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
 649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return gpio alternate function of a dedicated pin from 8 to 15 for a dedicated port.
 653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Possible values are from AF0 to AF15 depending on target.
 654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll AFRH         AFSELy        LL_GPIO_GetAFPin_8_15
 655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  Pin This parameter can be one of the following values:
 657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Returned value can be one of the following values:
 666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_0
 667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_1
 668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_2
 669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_3
 670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_4
 671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_5
 672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_6
 673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_7
 674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_8
 675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_9
 676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_10
 677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_11
 678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_12
 679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_13
 680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_14
 681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_AF_15
 682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_GetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin)
 684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_BIT(GPIOx->AFR[1],
ARM GAS  /tmp/ccqF3GRw.s 			page 14


 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****                              (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U))) >> (POSITION_VAL
 687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Lock configuration of several pins for a dedicated port.
 692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   When the lock sequence has been applied on a port bit, the
 693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         value of this port bit can no longer be modified until the
 694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         next reset.
 695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @note   Each lock bit freezes a specific configuration register
 696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         (control and alternate function registers).
 697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll LCKR         LCKK          LL_GPIO_LockPin
 698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   __IO uint32_t temp;
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, PinMask);
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   /* Read LCKR register. This read is mandatory to complete key lock sequence */
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   temp = READ_REG(GPIOx->LCKR);
 727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   (void) temp;
 728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return 1 if all pins passed as parameter, of a dedicated port, are locked. else Return 
 732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll LCKR         LCKy          LL_GPIO_IsPinLocked
 733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
ARM GAS  /tmp/ccqF3GRw.s 			page 15


 743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 746:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 747:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 748:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 749:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 750:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 751:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 752:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval State of bit (1 or 0).
 753:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 754:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_IsPinLocked(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 755:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 756:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return ((READ_BIT(GPIOx->LCKR, PinMask) == (PinMask)) ? 1UL : 0UL);
 757:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 758:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 759:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 760:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return 1 if one of the pin of a dedicated port is locked. else return 0.
 761:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll LCKR         LCKK          LL_GPIO_IsAnyPinLocked
 762:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 763:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval State of bit (1 or 0).
 764:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 765:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_IsAnyPinLocked(GPIO_TypeDef *GPIOx)
 766:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 767:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return ((READ_BIT(GPIOx->LCKR, GPIO_LCKR_LCKK) == (GPIO_LCKR_LCKK)) ? 1UL : 0UL);
 768:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 769:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 770:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 771:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @}
 772:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 773:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 774:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /** @defgroup GPIO_LL_EF_Data_Access Data Access
 775:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @{
 776:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 777:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 778:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 779:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return full input data register value for a dedicated port.
 780:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll IDR          IDy           LL_GPIO_ReadInputPort
 781:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 782:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Input data register value of port
 783:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 784:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
 785:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 786:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_REG(GPIOx->IDR));
 787:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 789:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 790:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return if input data level for several pins of dedicated port is high or low.
 791:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll IDR          IDy           LL_GPIO_IsInputPinSet
 792:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 793:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 794:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 795:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 796:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 797:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 798:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 799:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
ARM GAS  /tmp/ccqF3GRw.s 			page 16


 800:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 801:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 802:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 803:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 804:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 805:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 806:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 807:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 808:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 809:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 810:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 811:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval State of bit (1 or 0).
 812:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 813:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 814:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 815:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 816:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 817:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 818:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 819:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Write output data register for the port.
 820:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll ODR          ODy           LL_GPIO_WriteOutputPort
 821:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 822:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  PortValue Level value for each pin of the port
 823:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 824:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 825:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_WriteOutputPort(GPIO_TypeDef *GPIOx, uint32_t PortValue)
 826:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 827:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->ODR, PortValue);
 828:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 829:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 830:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 831:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return full output data register value for a dedicated port.
 832:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll ODR          ODy           LL_GPIO_ReadOutputPort
 833:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 834:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval Output data register value of port
 835:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 836:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
 837:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 838:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return (uint32_t)(READ_REG(GPIOx->ODR));
 839:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 841:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 842:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Return if input data level for several pins of dedicated port is high or low.
 843:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll ODR          ODy           LL_GPIO_IsOutputPinSet
 844:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 845:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 846:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 847:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 848:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 849:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 850:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 851:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 852:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 853:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 854:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 855:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 856:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
ARM GAS  /tmp/ccqF3GRw.s 			page 17


 857:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 858:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 859:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 860:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 861:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 862:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 863:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval State of bit (1 or 0).
 864:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 865:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE uint32_t LL_GPIO_IsOutputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 866:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 867:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   return ((READ_BIT(GPIOx->ODR, PinMask) == (PinMask)) ? 1UL : 0UL);
 868:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 869:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 870:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 871:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Set several pins to high level on dedicated gpio port.
 872:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll BSRR         BSy           LL_GPIO_SetOutputPin
 873:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 874:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 875:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 876:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 877:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 878:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 879:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 880:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 881:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 882:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 883:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 884:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
 885:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 886:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 887:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 888:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 889:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 890:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 891:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 892:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 893:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 894:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 895:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
 896:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->BSRR, PinMask);
 897:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
 898:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** 
 899:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** /**
 900:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @brief  Set several pins to low level on dedicated gpio port.
 901:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @rmtoll BRR          BRy           LL_GPIO_ResetOutputPin
 902:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  GPIOx GPIO Port
 903:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @param  PinMask This parameter can be a combination of the following values:
 904:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_0
 905:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_1
 906:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_2
 907:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_3
 908:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_4
 909:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_5
 910:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_6
 911:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_7
 912:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_8
 913:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_9
ARM GAS  /tmp/ccqF3GRw.s 			page 18


 914:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_10
 915:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_11
 916:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_12
 917:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_13
 918:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_14
 919:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_15
 920:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   *         @arg @ref LL_GPIO_PIN_ALL
 921:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   * @retval None
 922:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   */
 923:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** __STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 924:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** {
  58              		.loc 1 924 1
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 8
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63 0000 80B4     		push	{r7}
  64              	.LCFI0:
  65              		.cfi_def_cfa_offset 4
  66              		.cfi_offset 7, -4
  67 0002 83B0     		sub	sp, sp, #12
  68              	.LCFI1:
  69              		.cfi_def_cfa_offset 16
  70 0004 00AF     		add	r7, sp, #0
  71              	.LCFI2:
  72              		.cfi_def_cfa_register 7
  73 0006 7860     		str	r0, [r7, #4]
  74 0008 3960     		str	r1, [r7]
 925:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h ****   WRITE_REG(GPIOx->BRR, PinMask);
  75              		.loc 1 925 3
  76 000a 7B68     		ldr	r3, [r7, #4]
  77 000c 3A68     		ldr	r2, [r7]
  78 000e 9A62     		str	r2, [r3, #40]
 926:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_gpio.h **** }
  79              		.loc 1 926 1
  80 0010 00BF     		nop
  81 0012 0C37     		adds	r7, r7, #12
  82              	.LCFI3:
  83              		.cfi_def_cfa_offset 4
  84 0014 BD46     		mov	sp, r7
  85              	.LCFI4:
  86              		.cfi_def_cfa_register 13
  87              		@ sp needed
  88 0016 5DF8047B 		ldr	r7, [sp], #4
  89              	.LCFI5:
  90              		.cfi_restore 7
  91              		.cfi_def_cfa_offset 0
  92 001a 7047     		bx	lr
  93              		.cfi_endproc
  94              	.LFE871:
  96              		.section	.rodata.USART_PRESCALER_TAB,"a"
  97              		.align	2
 100              	USART_PRESCALER_TAB:
 101 0000 01000000 		.word	1
 102 0004 02000000 		.word	2
 103 0008 04000000 		.word	4
 104 000c 06000000 		.word	6
ARM GAS  /tmp/ccqF3GRw.s 			page 19


 105 0010 08000000 		.word	8
 106 0014 0A000000 		.word	10
 107 0018 0C000000 		.word	12
 108 001c 10000000 		.word	16
 109 0020 20000000 		.word	32
 110 0024 40000000 		.word	64
 111 0028 80000000 		.word	128
 112 002c 00010000 		.word	256
 113              		.section	.rodata.CHANNEL_OFFSET_TAB,"a"
 114              		.align	2
 117              	CHANNEL_OFFSET_TAB:
 118 0000 081C3044 		.ascii	"\010\0340DXl"
 118      586C
 119              		.section	.text.PWMC_Clear,"ax",%progbits
 120              		.align	1
 121              		.global	PWMC_Clear
 122              		.syntax unified
 123              		.thumb
 124              		.thumb_func
 125              		.fpu fpv4-sp-d16
 127              	PWMC_Clear:
 128              	.LFB1440:
 129              		.file 2 "Src/pwm_curr_fdbk.c"
   1:Src/pwm_curr_fdbk.c **** /**
   2:Src/pwm_curr_fdbk.c ****   ******************************************************************************
   3:Src/pwm_curr_fdbk.c ****   * @file    pwm_curr_fdbk.c
   4:Src/pwm_curr_fdbk.c ****   * @author  Motor Control SDK Team, ST Microelectronics
   5:Src/pwm_curr_fdbk.c ****   * @brief   This file provides firmware functions that implement the following features
   6:Src/pwm_curr_fdbk.c ****   *          of the PWM & Current Feedback component of the Motor Control SDK:
   7:Src/pwm_curr_fdbk.c ****   *
   8:Src/pwm_curr_fdbk.c ****   *           * current sensing
   9:Src/pwm_curr_fdbk.c ****   *           * regular ADC conversion execution
  10:Src/pwm_curr_fdbk.c ****   *           * space vector modulation
  11:Src/pwm_curr_fdbk.c ****   *
  12:Src/pwm_curr_fdbk.c ****   ******************************************************************************
  13:Src/pwm_curr_fdbk.c ****   * @attention
  14:Src/pwm_curr_fdbk.c ****   *
  15:Src/pwm_curr_fdbk.c ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  16:Src/pwm_curr_fdbk.c ****   * All rights reserved.</center></h2>
  17:Src/pwm_curr_fdbk.c ****   *
  18:Src/pwm_curr_fdbk.c ****   * This software component is licensed by ST under Ultimate Liberty license
  19:Src/pwm_curr_fdbk.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  20:Src/pwm_curr_fdbk.c ****   * the License. You may obtain a copy of the License at:
  21:Src/pwm_curr_fdbk.c ****   *                             www.st.com/SLA0044
  22:Src/pwm_curr_fdbk.c ****   *
  23:Src/pwm_curr_fdbk.c ****   ******************************************************************************
  24:Src/pwm_curr_fdbk.c ****   * @ingroup pwm_curr_fdbk
  25:Src/pwm_curr_fdbk.c ****   */
  26:Src/pwm_curr_fdbk.c **** 
  27:Src/pwm_curr_fdbk.c **** /* Includes ------------------------------------------------------------------*/
  28:Src/pwm_curr_fdbk.c **** #include "pwm_curr_fdbk.h"
  29:Src/pwm_curr_fdbk.c **** #include "mc_math.h"
  30:Src/pwm_curr_fdbk.c **** #include "mc_type.h"
  31:Src/pwm_curr_fdbk.c **** 
  32:Src/pwm_curr_fdbk.c **** /** @addtogroup MCSDK
  33:Src/pwm_curr_fdbk.c ****   * @{
  34:Src/pwm_curr_fdbk.c ****   */
ARM GAS  /tmp/ccqF3GRw.s 			page 20


  35:Src/pwm_curr_fdbk.c **** 
  36:Src/pwm_curr_fdbk.c **** /** @defgroup pwm_curr_fdbk PWM & Current Feedback
  37:Src/pwm_curr_fdbk.c ****   *
  38:Src/pwm_curr_fdbk.c ****   * @brief PWM & Current Feedback components of the Motor Control SDK.
  39:Src/pwm_curr_fdbk.c ****   *
  40:Src/pwm_curr_fdbk.c ****   * These components fulfill two functions in a Motor Control subsystem:
  41:Src/pwm_curr_fdbk.c ****   *
  42:Src/pwm_curr_fdbk.c ****   * - The generation of the Space Vector Pulse Width Modulation on the motor's phases
  43:Src/pwm_curr_fdbk.c ****   * - The sampling of the actual motor's phases current
  44:Src/pwm_curr_fdbk.c ****   *
  45:Src/pwm_curr_fdbk.c ****   * Both these features are closely related as the instants when the values of the phase currents
  46:Src/pwm_curr_fdbk.c ****   * should be sampled by the ADC channels are basically triggered by the timers used to generate
  47:Src/pwm_curr_fdbk.c ****   * the duty cycles for the PWM.
  48:Src/pwm_curr_fdbk.c ****   *
  49:Src/pwm_curr_fdbk.c ****   * Several implementation of PWM and Current Feedback components are provided by the Motor Control
  50:Src/pwm_curr_fdbk.c ****   * SDK to account for the specificities of the application:
  51:Src/pwm_curr_fdbk.c ****   *
  52:Src/pwm_curr_fdbk.c ****   * - The selected MCU: the number of ADCs available on a given MCU, the presence of internal
  53:Src/pwm_curr_fdbk.c ****   * comparators or OpAmps, for instance, lead to different implementation of this feature
  54:Src/pwm_curr_fdbk.c ****   * - The Current sensing topology also has an impact on the firmware: implementations are provided
  55:Src/pwm_curr_fdbk.c ****   * for Insulated Current Sensors, Single Shunt and Three Shunt resistors current sensing topologie
  56:Src/pwm_curr_fdbk.c ****   *
  57:Src/pwm_curr_fdbk.c ****   * The choice of the implementation mostly depend on these two factors and is performed by the
  58:Src/pwm_curr_fdbk.c ****   * Motor Control Workbench tool.
  59:Src/pwm_curr_fdbk.c ****   *
  60:Src/pwm_curr_fdbk.c ****   * All these implementations are built on a base PWM & Current Feedback component that they extend
  61:Src/pwm_curr_fdbk.c ****   * and that provides the functions and data that are common to all of them. This base component is
  62:Src/pwm_curr_fdbk.c ****   * never used directly as it does not provide a complete implementation of the features. Rather,
  63:Src/pwm_curr_fdbk.c ****   * its handle structure (PWMC_Handle) is reused by all the PWM & Current Feedback specific
  64:Src/pwm_curr_fdbk.c ****   * implementations and the functions it provides form the API of the PWM and Current feedback feat
  65:Src/pwm_curr_fdbk.c ****   * Calling them results in calling functions of the component that actually implement the feature.
  66:Src/pwm_curr_fdbk.c ****   * See PWMC_Handle for more details on this mechanism.
  67:Src/pwm_curr_fdbk.c ****   * @{
  68:Src/pwm_curr_fdbk.c ****   */
  69:Src/pwm_curr_fdbk.c **** 
  70:Src/pwm_curr_fdbk.c **** /**
  71:Src/pwm_curr_fdbk.c ****   * @brief  Used to clear variables in CPWMC.
  72:Src/pwm_curr_fdbk.c ****   *
  73:Src/pwm_curr_fdbk.c ****   * @param pHandle: Handler of the current instance of the PWM component.
  74:Src/pwm_curr_fdbk.c ****   */
  75:Src/pwm_curr_fdbk.c **** void PWMC_Clear(PWMC_Handle_t *pHandle)
  76:Src/pwm_curr_fdbk.c **** {
 130              		.loc 2 76 1
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 8
 133              		@ frame_needed = 1, uses_anonymous_args = 0
 134              		@ link register save eliminated.
 135 0000 80B4     		push	{r7}
 136              	.LCFI6:
 137              		.cfi_def_cfa_offset 4
 138              		.cfi_offset 7, -4
 139 0002 83B0     		sub	sp, sp, #12
 140              	.LCFI7:
 141              		.cfi_def_cfa_offset 16
 142 0004 00AF     		add	r7, sp, #0
 143              	.LCFI8:
 144              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccqF3GRw.s 			page 21


 145 0006 7860     		str	r0, [r7, #4]
  77:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  78:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
  79:Src/pwm_curr_fdbk.c ****   {
  80:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
  81:Src/pwm_curr_fdbk.c ****   }
  82:Src/pwm_curr_fdbk.c ****   else
  83:Src/pwm_curr_fdbk.c ****   {
  84:Src/pwm_curr_fdbk.c **** #endif
  85:Src/pwm_curr_fdbk.c ****     pHandle->IaEst = 0;
 146              		.loc 2 85 20
 147 0008 7B68     		ldr	r3, [r7, #4]
 148 000a 0022     		movs	r2, #0
 149 000c A3F86820 		strh	r2, [r3, #104]	@ movhi
  86:Src/pwm_curr_fdbk.c ****     pHandle->IbEst = 0;
 150              		.loc 2 86 20
 151 0010 7B68     		ldr	r3, [r7, #4]
 152 0012 0022     		movs	r2, #0
 153 0014 A3F86A20 		strh	r2, [r3, #106]	@ movhi
  87:Src/pwm_curr_fdbk.c ****     pHandle->IcEst = 0;
 154              		.loc 2 87 20
 155 0018 7B68     		ldr	r3, [r7, #4]
 156 001a 0022     		movs	r2, #0
 157 001c A3F86C20 		strh	r2, [r3, #108]	@ movhi
  88:Src/pwm_curr_fdbk.c ****     pHandle->LPFIdBuf = 0;
 158              		.loc 2 88 23
 159 0020 7B68     		ldr	r3, [r7, #4]
 160 0022 0022     		movs	r2, #0
 161 0024 9A63     		str	r2, [r3, #56]
  89:Src/pwm_curr_fdbk.c ****     pHandle->LPFIqBuf = 0;
 162              		.loc 2 89 23
 163 0026 7B68     		ldr	r3, [r7, #4]
 164 0028 0022     		movs	r2, #0
 165 002a 5A63     		str	r2, [r3, #52]
  90:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  91:Src/pwm_curr_fdbk.c ****   }
  92:Src/pwm_curr_fdbk.c **** #endif
  93:Src/pwm_curr_fdbk.c **** }
 166              		.loc 2 93 1
 167 002c 00BF     		nop
 168 002e 0C37     		adds	r7, r7, #12
 169              	.LCFI9:
 170              		.cfi_def_cfa_offset 4
 171 0030 BD46     		mov	sp, r7
 172              	.LCFI10:
 173              		.cfi_def_cfa_register 13
 174              		@ sp needed
 175 0032 5DF8047B 		ldr	r7, [sp], #4
 176              	.LCFI11:
 177              		.cfi_restore 7
 178              		.cfi_def_cfa_offset 0
 179 0036 7047     		bx	lr
 180              		.cfi_endproc
 181              	.LFE1440:
 183              		.section	.text.PWMC_SetOffsetCalib,"ax",%progbits
 184              		.align	1
 185              		.weak	PWMC_SetOffsetCalib
ARM GAS  /tmp/ccqF3GRw.s 			page 22


 186              		.syntax unified
 187              		.thumb
 188              		.thumb_func
 189              		.fpu fpv4-sp-d16
 191              	PWMC_SetOffsetCalib:
 192              	.LFB1441:
  94:Src/pwm_curr_fdbk.c **** 
  95:Src/pwm_curr_fdbk.c **** /**
  96:Src/pwm_curr_fdbk.c ****   * @brief  Sets the calibrated @p offsets for each of the phases in the @p pHandle handler. In cas
  97:Src/pwm_curr_fdbk.c ****   *
  98:Src/pwm_curr_fdbk.c ****   */
  99:Src/pwm_curr_fdbk.c **** //cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
 100:Src/pwm_curr_fdbk.c **** __weak void PWMC_SetOffsetCalib(PWMC_Handle_t *pHandle, PolarizationOffsets_t *offsets)
 101:Src/pwm_curr_fdbk.c **** {
 193              		.loc 2 101 1
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 8
 196              		@ frame_needed = 1, uses_anonymous_args = 0
 197 0000 80B5     		push	{r7, lr}
 198              	.LCFI12:
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 7, -8
 201              		.cfi_offset 14, -4
 202 0002 82B0     		sub	sp, sp, #8
 203              	.LCFI13:
 204              		.cfi_def_cfa_offset 16
 205 0004 00AF     		add	r7, sp, #0
 206              	.LCFI14:
 207              		.cfi_def_cfa_register 7
 208 0006 7860     		str	r0, [r7, #4]
 209 0008 3960     		str	r1, [r7]
 102:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
 210              		.loc 2 102 6
 211 000a 7B68     		ldr	r3, [r7, #4]
 212 000c 002B     		cmp	r3, #0
 213 000e 04D0     		beq	.L5
 103:Src/pwm_curr_fdbk.c ****   {
 104:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 105:Src/pwm_curr_fdbk.c ****   }
 106:Src/pwm_curr_fdbk.c ****   else
 107:Src/pwm_curr_fdbk.c ****   {
 108:Src/pwm_curr_fdbk.c ****     pHandle->pFctSetOffsetCalib(pHandle, offsets);
 214              		.loc 2 108 12
 215 0010 7B68     		ldr	r3, [r7, #4]
 216 0012 DB6A     		ldr	r3, [r3, #44]
 217              		.loc 2 108 5
 218 0014 3968     		ldr	r1, [r7]
 219 0016 7868     		ldr	r0, [r7, #4]
 220 0018 9847     		blx	r3
 221              	.LVL0:
 222              	.L5:
 109:Src/pwm_curr_fdbk.c ****   }
 110:Src/pwm_curr_fdbk.c **** }
 223              		.loc 2 110 1
 224 001a 00BF     		nop
 225 001c 0837     		adds	r7, r7, #8
 226              	.LCFI15:
ARM GAS  /tmp/ccqF3GRw.s 			page 23


 227              		.cfi_def_cfa_offset 8
 228 001e BD46     		mov	sp, r7
 229              	.LCFI16:
 230              		.cfi_def_cfa_register 13
 231              		@ sp needed
 232 0020 80BD     		pop	{r7, pc}
 233              		.cfi_endproc
 234              	.LFE1441:
 236              		.section	.text.PWMC_GetOffsetCalib,"ax",%progbits
 237              		.align	1
 238              		.weak	PWMC_GetOffsetCalib
 239              		.syntax unified
 240              		.thumb
 241              		.thumb_func
 242              		.fpu fpv4-sp-d16
 244              	PWMC_GetOffsetCalib:
 245              	.LFB1442:
 111:Src/pwm_curr_fdbk.c **** 
 112:Src/pwm_curr_fdbk.c **** /**
 113:Src/pwm_curr_fdbk.c ****   * @brief  Gets the calibrated @p offsets for each of the phases in the @p pHandle handler. In cas
 114:Src/pwm_curr_fdbk.c ****   *
 115:Src/pwm_curr_fdbk.c ****   */
 116:Src/pwm_curr_fdbk.c **** //cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
 117:Src/pwm_curr_fdbk.c **** __weak void PWMC_GetOffsetCalib(PWMC_Handle_t *pHandle, PolarizationOffsets_t *offsets)
 118:Src/pwm_curr_fdbk.c **** {
 246              		.loc 2 118 1
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 8
 249              		@ frame_needed = 1, uses_anonymous_args = 0
 250 0000 80B5     		push	{r7, lr}
 251              	.LCFI17:
 252              		.cfi_def_cfa_offset 8
 253              		.cfi_offset 7, -8
 254              		.cfi_offset 14, -4
 255 0002 82B0     		sub	sp, sp, #8
 256              	.LCFI18:
 257              		.cfi_def_cfa_offset 16
 258 0004 00AF     		add	r7, sp, #0
 259              	.LCFI19:
 260              		.cfi_def_cfa_register 7
 261 0006 7860     		str	r0, [r7, #4]
 262 0008 3960     		str	r1, [r7]
 119:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
 263              		.loc 2 119 6
 264 000a 7B68     		ldr	r3, [r7, #4]
 265 000c 002B     		cmp	r3, #0
 266 000e 04D0     		beq	.L8
 120:Src/pwm_curr_fdbk.c ****   {
 121:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 122:Src/pwm_curr_fdbk.c ****   }
 123:Src/pwm_curr_fdbk.c ****   else
 124:Src/pwm_curr_fdbk.c ****   {
 125:Src/pwm_curr_fdbk.c ****     pHandle->pFctGetOffsetCalib(pHandle, offsets);
 267              		.loc 2 125 12
 268 0010 7B68     		ldr	r3, [r7, #4]
 269 0012 1B6B     		ldr	r3, [r3, #48]
 270              		.loc 2 125 5
ARM GAS  /tmp/ccqF3GRw.s 			page 24


 271 0014 3968     		ldr	r1, [r7]
 272 0016 7868     		ldr	r0, [r7, #4]
 273 0018 9847     		blx	r3
 274              	.LVL1:
 275              	.L8:
 126:Src/pwm_curr_fdbk.c ****   }
 127:Src/pwm_curr_fdbk.c **** }
 276              		.loc 2 127 1
 277 001a 00BF     		nop
 278 001c 0837     		adds	r7, r7, #8
 279              	.LCFI20:
 280              		.cfi_def_cfa_offset 8
 281 001e BD46     		mov	sp, r7
 282              	.LCFI21:
 283              		.cfi_def_cfa_register 13
 284              		@ sp needed
 285 0020 80BD     		pop	{r7, pc}
 286              		.cfi_endproc
 287              	.LFE1442:
 289              		.section	.text.PWMC_SetPhaseVoltage,"ax",%progbits
 290              		.align	1
 291              		.weak	PWMC_SetPhaseVoltage
 292              		.syntax unified
 293              		.thumb
 294              		.thumb_func
 295              		.fpu fpv4-sp-d16
 297              	PWMC_SetPhaseVoltage:
 298              	.LFB1443:
 128:Src/pwm_curr_fdbk.c **** 
 129:Src/pwm_curr_fdbk.c **** #if defined (CCMRAM)
 130:Src/pwm_curr_fdbk.c **** #if defined (__ICCARM__)
 131:Src/pwm_curr_fdbk.c **** #pragma location = ".ccmram"
 132:Src/pwm_curr_fdbk.c **** #elif defined (__CC_ARM) || defined(__GNUC__)
 133:Src/pwm_curr_fdbk.c **** __attribute__( ( section ( ".ccmram" ) ) )
 134:Src/pwm_curr_fdbk.c **** #endif
 135:Src/pwm_curr_fdbk.c **** #endif
 136:Src/pwm_curr_fdbk.c **** 
 137:Src/pwm_curr_fdbk.c **** /**
 138:Src/pwm_curr_fdbk.c ****   * @brief  Converts input voltages @f$ V_{\alpha} @f$ and @f$ V_{\beta} @f$ into PWM duty cycles
 139:Src/pwm_curr_fdbk.c ****   *         and feed them to the inverter.
 140:Src/pwm_curr_fdbk.c ****   *
 141:Src/pwm_curr_fdbk.c ****   * This function computes the time during which the transistors of each phase are to be switched o
 142:Src/pwm_curr_fdbk.c ****   * a PWM cycle in order to achieve the reference phase voltage set by @p Valfa_beta. The function 
 143:Src/pwm_curr_fdbk.c ****   * programs the resulting duty cycles in the related timer channels. It also sets the phase curren
 144:Src/pwm_curr_fdbk.c ****   * sampling point for the next PWM cycle accordingly.
 145:Src/pwm_curr_fdbk.c ****   *
 146:Src/pwm_curr_fdbk.c ****   * This function is used in the FOC frequency loop and needs to complete itself before the next PW
 147:Src/pwm_curr_fdbk.c ****   * in order for the duty cycles it computes to be taken into account. Failing to do so (for instan
 148:Src/pwm_curr_fdbk.c ****   * the PWM Frequency is too high) results in the function returning #MC_DURATION which entails a
 149:Src/pwm_curr_fdbk.c ****   * Motor Control Fault that stops the motor.
 150:Src/pwm_curr_fdbk.c ****   *
 151:Src/pwm_curr_fdbk.c ****   * @param  pHandle: Handler of the current instance of the PWM component.
 152:Src/pwm_curr_fdbk.c ****   * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
 153:Src/pwm_curr_fdbk.c ****   * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
 154:Src/pwm_curr_fdbk.c ****   *         set too late for being taken into account in the next PWM cycle.
 155:Src/pwm_curr_fdbk.c ****   */
 156:Src/pwm_curr_fdbk.c **** __weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
ARM GAS  /tmp/ccqF3GRw.s 			page 25


 157:Src/pwm_curr_fdbk.c **** {
 299              		.loc 2 157 1
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 48
 302              		@ frame_needed = 1, uses_anonymous_args = 0
 303 0000 80B5     		push	{r7, lr}
 304              	.LCFI22:
 305              		.cfi_def_cfa_offset 8
 306              		.cfi_offset 7, -8
 307              		.cfi_offset 14, -4
 308 0002 8CB0     		sub	sp, sp, #48
 309              	.LCFI23:
 310              		.cfi_def_cfa_offset 56
 311 0004 00AF     		add	r7, sp, #0
 312              	.LCFI24:
 313              		.cfi_def_cfa_register 7
 314 0006 7860     		str	r0, [r7, #4]
 315 0008 3960     		str	r1, [r7]
 158:Src/pwm_curr_fdbk.c ****   uint16_t returnValue;
 159:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 160:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
 161:Src/pwm_curr_fdbk.c ****   {
 162:Src/pwm_curr_fdbk.c ****     returnValue = 0U;
 163:Src/pwm_curr_fdbk.c ****   }
 164:Src/pwm_curr_fdbk.c ****   else
 165:Src/pwm_curr_fdbk.c ****   {
 166:Src/pwm_curr_fdbk.c **** #endif
 167:Src/pwm_curr_fdbk.c ****     int32_t wX;
 168:Src/pwm_curr_fdbk.c ****     int32_t wY;
 169:Src/pwm_curr_fdbk.c ****     int32_t wZ;
 170:Src/pwm_curr_fdbk.c ****     int32_t wUAlpha;
 171:Src/pwm_curr_fdbk.c ****     int32_t wUBeta;
 172:Src/pwm_curr_fdbk.c ****     int32_t wTimePhA;
 173:Src/pwm_curr_fdbk.c ****     int32_t wTimePhB;
 174:Src/pwm_curr_fdbk.c ****     int32_t wTimePhC;
 175:Src/pwm_curr_fdbk.c **** 
 176:Src/pwm_curr_fdbk.c ****     wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 316              		.loc 2 176 25
 317 000a B7F90030 		ldrsh	r3, [r7]
 318 000e 1A46     		mov	r2, r3
 319              		.loc 2 176 50
 320 0010 7B68     		ldr	r3, [r7, #4]
 321 0012 B3F84E30 		ldrh	r3, [r3, #78]
 322              		.loc 2 176 13
 323 0016 02FB03F3 		mul	r3, r2, r3
 324 001a 3B62     		str	r3, [r7, #32]
 177:Src/pwm_curr_fdbk.c ****     wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 325              		.loc 2 177 26
 326 001c B7F90230 		ldrsh	r3, [r7, #2]
 327 0020 1A46     		mov	r2, r3
 328              		.loc 2 177 51
 329 0022 7B68     		ldr	r3, [r7, #4]
 330 0024 B3F87030 		ldrh	r3, [r3, #112]
 331              		.loc 2 177 32
 332 0028 03FB02F2 		mul	r2, r3, r2
 333              		.loc 2 177 12
 334 002c 1346     		mov	r3, r2
ARM GAS  /tmp/ccqF3GRw.s 			page 26


 335 002e DB07     		lsls	r3, r3, #31
 336 0030 9B1A     		subs	r3, r3, r2
 337 0032 5B00     		lsls	r3, r3, #1
 338 0034 FB61     		str	r3, [r7, #28]
 178:Src/pwm_curr_fdbk.c **** 
 179:Src/pwm_curr_fdbk.c ****     wX = wUBeta;
 339              		.loc 2 179 8
 340 0036 FB69     		ldr	r3, [r7, #28]
 341 0038 BB61     		str	r3, [r7, #24]
 180:Src/pwm_curr_fdbk.c ****     wY = (wUBeta + wUAlpha) / 2;
 342              		.loc 2 180 18
 343 003a FA69     		ldr	r2, [r7, #28]
 344 003c 3B6A     		ldr	r3, [r7, #32]
 345 003e 1344     		add	r3, r3, r2
 346              		.loc 2 180 8
 347 0040 DA0F     		lsrs	r2, r3, #31
 348 0042 1344     		add	r3, r3, r2
 349 0044 5B10     		asrs	r3, r3, #1
 350 0046 7B61     		str	r3, [r7, #20]
 181:Src/pwm_curr_fdbk.c ****     wZ = (wUBeta - wUAlpha) / 2;
 351              		.loc 2 181 18
 352 0048 FA69     		ldr	r2, [r7, #28]
 353 004a 3B6A     		ldr	r3, [r7, #32]
 354 004c D31A     		subs	r3, r2, r3
 355              		.loc 2 181 8
 356 004e DA0F     		lsrs	r2, r3, #31
 357 0050 1344     		add	r3, r3, r2
 358 0052 5B10     		asrs	r3, r3, #1
 359 0054 3B61     		str	r3, [r7, #16]
 182:Src/pwm_curr_fdbk.c **** 
 183:Src/pwm_curr_fdbk.c ****     /* Sector calculation from wX, wY, wZ */
 184:Src/pwm_curr_fdbk.c ****     if (wY < 0)
 360              		.loc 2 184 8
 361 0056 7B69     		ldr	r3, [r7, #20]
 362 0058 002B     		cmp	r3, #0
 363 005a 80F2F980 		bge	.L10
 185:Src/pwm_curr_fdbk.c ****     {
 186:Src/pwm_curr_fdbk.c ****       if (wZ < 0)
 364              		.loc 2 186 10
 365 005e 3B69     		ldr	r3, [r7, #16]
 366 0060 002B     		cmp	r3, #0
 367 0062 50DA     		bge	.L11
 187:Src/pwm_curr_fdbk.c ****       {
 188:Src/pwm_curr_fdbk.c ****         pHandle->Sector = SECTOR_5;
 368              		.loc 2 188 25
 369 0064 7B68     		ldr	r3, [r7, #4]
 370 0066 0422     		movs	r2, #4
 371 0068 83F87A20 		strb	r2, [r3, #122]
 189:Src/pwm_curr_fdbk.c ****         wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 372              		.loc 2 189 38
 373 006c 7B68     		ldr	r3, [r7, #4]
 374 006e B3F87030 		ldrh	r3, [r3, #112]
 375              		.loc 2 189 51
 376 0072 9B08     		lsrs	r3, r3, #2
 377 0074 9BB2     		uxth	r3, r3
 378 0076 1946     		mov	r1, r3
 379              		.loc 2 189 63
ARM GAS  /tmp/ccqF3GRw.s 			page 27


 380 0078 7A69     		ldr	r2, [r7, #20]
 381 007a 3B69     		ldr	r3, [r7, #16]
 382 007c D31A     		subs	r3, r2, r3
 383              		.loc 2 189 69
 384 007e 002B     		cmp	r3, #0
 385 0080 03DA     		bge	.L12
 386 0082 03F57F33 		add	r3, r3, #261120
 387 0086 03F2FF33 		addw	r3, r3, #1023
 388              	.L12:
 389 008a 9B14     		asrs	r3, r3, #18
 390              		.loc 2 189 18
 391 008c 0B44     		add	r3, r3, r1
 392 008e FB62     		str	r3, [r7, #44]
 190:Src/pwm_curr_fdbk.c ****         wTimePhB = wTimePhA + (wZ / 131072);
 393              		.loc 2 190 35
 394 0090 3B69     		ldr	r3, [r7, #16]
 395 0092 002B     		cmp	r3, #0
 396 0094 03DA     		bge	.L13
 397 0096 03F5FF33 		add	r3, r3, #130560
 398 009a 03F2FF13 		addw	r3, r3, #511
 399              	.L13:
 400 009e 5B14     		asrs	r3, r3, #17
 401 00a0 1A46     		mov	r2, r3
 402              		.loc 2 190 18
 403 00a2 FB6A     		ldr	r3, [r7, #44]
 404 00a4 1344     		add	r3, r3, r2
 405 00a6 BB62     		str	r3, [r7, #40]
 191:Src/pwm_curr_fdbk.c ****         wTimePhC = wTimePhA - (wY / 131072) ;
 406              		.loc 2 191 35
 407 00a8 7B69     		ldr	r3, [r7, #20]
 408 00aa 002B     		cmp	r3, #0
 409 00ac 03DA     		bge	.L14
 410 00ae 03F5FF33 		add	r3, r3, #130560
 411 00b2 03F2FF13 		addw	r3, r3, #511
 412              	.L14:
 413 00b6 5B14     		asrs	r3, r3, #17
 414 00b8 5B42     		rsbs	r3, r3, #0
 415 00ba 1A46     		mov	r2, r3
 416              		.loc 2 191 18
 417 00bc FB6A     		ldr	r3, [r7, #44]
 418 00be 1344     		add	r3, r3, r2
 419 00c0 7B62     		str	r3, [r7, #36]
 192:Src/pwm_curr_fdbk.c **** 
 193:Src/pwm_curr_fdbk.c ****         if(true == pHandle->SingleShuntTopology)
 420              		.loc 2 193 27
 421 00c2 7B68     		ldr	r3, [r7, #4]
 422 00c4 93F88530 		ldrb	r3, [r3, #133]	@ zero_extendqisi2
 423              		.loc 2 193 11
 424 00c8 002B     		cmp	r3, #0
 425 00ca 0CD0     		beq	.L15
 194:Src/pwm_curr_fdbk.c ****         {
 195:Src/pwm_curr_fdbk.c ****           pHandle->lowDuty = 1U;
 426              		.loc 2 195 28
 427 00cc 7B68     		ldr	r3, [r7, #4]
 428 00ce 0122     		movs	r2, #1
 429 00d0 A3F85820 		strh	r2, [r3, #88]	@ movhi
 196:Src/pwm_curr_fdbk.c ****           pHandle->midDuty = 0U;
ARM GAS  /tmp/ccqF3GRw.s 			page 28


 430              		.loc 2 196 28
 431 00d4 7B68     		ldr	r3, [r7, #4]
 432 00d6 0022     		movs	r2, #0
 433 00d8 A3F85A20 		strh	r2, [r3, #90]	@ movhi
 197:Src/pwm_curr_fdbk.c ****           pHandle->highDuty = 2U;
 434              		.loc 2 197 29
 435 00dc 7B68     		ldr	r3, [r7, #4]
 436 00de 0222     		movs	r2, #2
 437 00e0 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 438 00e4 B1E1     		b	.L16
 439              	.L15:
 198:Src/pwm_curr_fdbk.c ****         }
 199:Src/pwm_curr_fdbk.c ****         else
 200:Src/pwm_curr_fdbk.c ****         {
 201:Src/pwm_curr_fdbk.c ****           pHandle->lowDuty = (uint16_t)wTimePhC;
 440              		.loc 2 201 30
 441 00e6 7B6A     		ldr	r3, [r7, #36]
 442 00e8 9AB2     		uxth	r2, r3
 443              		.loc 2 201 28
 444 00ea 7B68     		ldr	r3, [r7, #4]
 445 00ec A3F85820 		strh	r2, [r3, #88]	@ movhi
 202:Src/pwm_curr_fdbk.c ****           pHandle->midDuty = (uint16_t)wTimePhA;
 446              		.loc 2 202 30
 447 00f0 FB6A     		ldr	r3, [r7, #44]
 448 00f2 9AB2     		uxth	r2, r3
 449              		.loc 2 202 28
 450 00f4 7B68     		ldr	r3, [r7, #4]
 451 00f6 A3F85A20 		strh	r2, [r3, #90]	@ movhi
 203:Src/pwm_curr_fdbk.c ****           pHandle->highDuty = (uint16_t)wTimePhB;
 452              		.loc 2 203 31
 453 00fa BB6A     		ldr	r3, [r7, #40]
 454 00fc 9AB2     		uxth	r2, r3
 455              		.loc 2 203 29
 456 00fe 7B68     		ldr	r3, [r7, #4]
 457 0100 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 458 0104 A1E1     		b	.L16
 459              	.L11:
 204:Src/pwm_curr_fdbk.c ****         }
 205:Src/pwm_curr_fdbk.c ****       }
 206:Src/pwm_curr_fdbk.c ****       else /* wZ >= 0 */
 207:Src/pwm_curr_fdbk.c ****         if (wX <= 0)
 460              		.loc 2 207 12
 461 0106 BB69     		ldr	r3, [r7, #24]
 462 0108 002B     		cmp	r3, #0
 463 010a 50DC     		bgt	.L17
 208:Src/pwm_curr_fdbk.c ****         {
 209:Src/pwm_curr_fdbk.c ****           pHandle->Sector = SECTOR_4;
 464              		.loc 2 209 27
 465 010c 7B68     		ldr	r3, [r7, #4]
 466 010e 0322     		movs	r2, #3
 467 0110 83F87A20 		strb	r2, [r3, #122]
 210:Src/pwm_curr_fdbk.c ****           wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 468              		.loc 2 210 40
 469 0114 7B68     		ldr	r3, [r7, #4]
 470 0116 B3F87030 		ldrh	r3, [r3, #112]
 471              		.loc 2 210 53
 472 011a 9B08     		lsrs	r3, r3, #2
ARM GAS  /tmp/ccqF3GRw.s 			page 29


 473 011c 9BB2     		uxth	r3, r3
 474 011e 1946     		mov	r1, r3
 475              		.loc 2 210 65
 476 0120 BA69     		ldr	r2, [r7, #24]
 477 0122 3B69     		ldr	r3, [r7, #16]
 478 0124 D31A     		subs	r3, r2, r3
 479              		.loc 2 210 71
 480 0126 002B     		cmp	r3, #0
 481 0128 03DA     		bge	.L18
 482 012a 03F57F33 		add	r3, r3, #261120
 483 012e 03F2FF33 		addw	r3, r3, #1023
 484              	.L18:
 485 0132 9B14     		asrs	r3, r3, #18
 486              		.loc 2 210 20
 487 0134 0B44     		add	r3, r3, r1
 488 0136 FB62     		str	r3, [r7, #44]
 211:Src/pwm_curr_fdbk.c ****           wTimePhB = wTimePhA + (wZ / 131072);
 489              		.loc 2 211 37
 490 0138 3B69     		ldr	r3, [r7, #16]
 491 013a 002B     		cmp	r3, #0
 492 013c 03DA     		bge	.L19
 493 013e 03F5FF33 		add	r3, r3, #130560
 494 0142 03F2FF13 		addw	r3, r3, #511
 495              	.L19:
 496 0146 5B14     		asrs	r3, r3, #17
 497 0148 1A46     		mov	r2, r3
 498              		.loc 2 211 20
 499 014a FB6A     		ldr	r3, [r7, #44]
 500 014c 1344     		add	r3, r3, r2
 501 014e BB62     		str	r3, [r7, #40]
 212:Src/pwm_curr_fdbk.c ****           wTimePhC = wTimePhB - (wX / 131072);
 502              		.loc 2 212 37
 503 0150 BB69     		ldr	r3, [r7, #24]
 504 0152 002B     		cmp	r3, #0
 505 0154 03DA     		bge	.L20
 506 0156 03F5FF33 		add	r3, r3, #130560
 507 015a 03F2FF13 		addw	r3, r3, #511
 508              	.L20:
 509 015e 5B14     		asrs	r3, r3, #17
 510 0160 5B42     		rsbs	r3, r3, #0
 511 0162 1A46     		mov	r2, r3
 512              		.loc 2 212 20
 513 0164 BB6A     		ldr	r3, [r7, #40]
 514 0166 1344     		add	r3, r3, r2
 515 0168 7B62     		str	r3, [r7, #36]
 213:Src/pwm_curr_fdbk.c **** 
 214:Src/pwm_curr_fdbk.c ****           if(true == pHandle->SingleShuntTopology)
 516              		.loc 2 214 29
 517 016a 7B68     		ldr	r3, [r7, #4]
 518 016c 93F88530 		ldrb	r3, [r3, #133]	@ zero_extendqisi2
 519              		.loc 2 214 13
 520 0170 002B     		cmp	r3, #0
 521 0172 0CD0     		beq	.L21
 215:Src/pwm_curr_fdbk.c ****           {
 216:Src/pwm_curr_fdbk.c ****             pHandle->lowDuty = 0U;
 522              		.loc 2 216 30
 523 0174 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccqF3GRw.s 			page 30


 524 0176 0022     		movs	r2, #0
 525 0178 A3F85820 		strh	r2, [r3, #88]	@ movhi
 217:Src/pwm_curr_fdbk.c ****             pHandle->midDuty = 1U;
 526              		.loc 2 217 30
 527 017c 7B68     		ldr	r3, [r7, #4]
 528 017e 0122     		movs	r2, #1
 529 0180 A3F85A20 		strh	r2, [r3, #90]	@ movhi
 218:Src/pwm_curr_fdbk.c ****             pHandle->highDuty = 2U;
 530              		.loc 2 218 31
 531 0184 7B68     		ldr	r3, [r7, #4]
 532 0186 0222     		movs	r2, #2
 533 0188 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 534 018c 5DE1     		b	.L16
 535              	.L21:
 219:Src/pwm_curr_fdbk.c ****           }
 220:Src/pwm_curr_fdbk.c ****           else
 221:Src/pwm_curr_fdbk.c ****           {
 222:Src/pwm_curr_fdbk.c ****           pHandle->lowDuty = (uint16_t)wTimePhC;
 536              		.loc 2 222 30
 537 018e 7B6A     		ldr	r3, [r7, #36]
 538 0190 9AB2     		uxth	r2, r3
 539              		.loc 2 222 28
 540 0192 7B68     		ldr	r3, [r7, #4]
 541 0194 A3F85820 		strh	r2, [r3, #88]	@ movhi
 223:Src/pwm_curr_fdbk.c ****           pHandle->midDuty = (uint16_t)wTimePhB;
 542              		.loc 2 223 30
 543 0198 BB6A     		ldr	r3, [r7, #40]
 544 019a 9AB2     		uxth	r2, r3
 545              		.loc 2 223 28
 546 019c 7B68     		ldr	r3, [r7, #4]
 547 019e A3F85A20 		strh	r2, [r3, #90]	@ movhi
 224:Src/pwm_curr_fdbk.c ****           pHandle->highDuty = (uint16_t)wTimePhA;
 548              		.loc 2 224 31
 549 01a2 FB6A     		ldr	r3, [r7, #44]
 550 01a4 9AB2     		uxth	r2, r3
 551              		.loc 2 224 29
 552 01a6 7B68     		ldr	r3, [r7, #4]
 553 01a8 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 554 01ac 4DE1     		b	.L16
 555              	.L17:
 225:Src/pwm_curr_fdbk.c ****         }
 226:Src/pwm_curr_fdbk.c ****         }
 227:Src/pwm_curr_fdbk.c ****         else /* wX > 0 */
 228:Src/pwm_curr_fdbk.c ****         {
 229:Src/pwm_curr_fdbk.c ****           pHandle->Sector = SECTOR_3;
 556              		.loc 2 229 27
 557 01ae 7B68     		ldr	r3, [r7, #4]
 558 01b0 0222     		movs	r2, #2
 559 01b2 83F87A20 		strb	r2, [r3, #122]
 230:Src/pwm_curr_fdbk.c ****           wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 560              		.loc 2 230 41
 561 01b6 7B68     		ldr	r3, [r7, #4]
 562 01b8 B3F87030 		ldrh	r3, [r3, #112]
 563              		.loc 2 230 54
 564 01bc 9B08     		lsrs	r3, r3, #2
 565 01be 9BB2     		uxth	r3, r3
 566 01c0 1946     		mov	r1, r3
ARM GAS  /tmp/ccqF3GRw.s 			page 31


 567              		.loc 2 230 65
 568 01c2 7A69     		ldr	r2, [r7, #20]
 569 01c4 BB69     		ldr	r3, [r7, #24]
 570 01c6 D31A     		subs	r3, r2, r3
 571              		.loc 2 230 71
 572 01c8 002B     		cmp	r3, #0
 573 01ca 03DA     		bge	.L22
 574 01cc 03F57F33 		add	r3, r3, #261120
 575 01d0 03F2FF33 		addw	r3, r3, #1023
 576              	.L22:
 577 01d4 9B14     		asrs	r3, r3, #18
 578              		.loc 2 230 20
 579 01d6 0B44     		add	r3, r3, r1
 580 01d8 FB62     		str	r3, [r7, #44]
 231:Src/pwm_curr_fdbk.c ****           wTimePhC = wTimePhA - (wY / 131072);
 581              		.loc 2 231 37
 582 01da 7B69     		ldr	r3, [r7, #20]
 583 01dc 002B     		cmp	r3, #0
 584 01de 03DA     		bge	.L23
 585 01e0 03F5FF33 		add	r3, r3, #130560
 586 01e4 03F2FF13 		addw	r3, r3, #511
 587              	.L23:
 588 01e8 5B14     		asrs	r3, r3, #17
 589 01ea 5B42     		rsbs	r3, r3, #0
 590 01ec 1A46     		mov	r2, r3
 591              		.loc 2 231 20
 592 01ee FB6A     		ldr	r3, [r7, #44]
 593 01f0 1344     		add	r3, r3, r2
 594 01f2 7B62     		str	r3, [r7, #36]
 232:Src/pwm_curr_fdbk.c ****           wTimePhB = wTimePhC + (wX / 131072);
 595              		.loc 2 232 37
 596 01f4 BB69     		ldr	r3, [r7, #24]
 597 01f6 002B     		cmp	r3, #0
 598 01f8 03DA     		bge	.L24
 599 01fa 03F5FF33 		add	r3, r3, #130560
 600 01fe 03F2FF13 		addw	r3, r3, #511
 601              	.L24:
 602 0202 5B14     		asrs	r3, r3, #17
 603 0204 1A46     		mov	r2, r3
 604              		.loc 2 232 20
 605 0206 7B6A     		ldr	r3, [r7, #36]
 606 0208 1344     		add	r3, r3, r2
 607 020a BB62     		str	r3, [r7, #40]
 233:Src/pwm_curr_fdbk.c **** 
 234:Src/pwm_curr_fdbk.c ****           if(true == pHandle->SingleShuntTopology)
 608              		.loc 2 234 29
 609 020c 7B68     		ldr	r3, [r7, #4]
 610 020e 93F88530 		ldrb	r3, [r3, #133]	@ zero_extendqisi2
 611              		.loc 2 234 13
 612 0212 002B     		cmp	r3, #0
 613 0214 0CD0     		beq	.L25
 235:Src/pwm_curr_fdbk.c ****           {
 236:Src/pwm_curr_fdbk.c ****             pHandle->lowDuty = 0U;
 614              		.loc 2 236 30
 615 0216 7B68     		ldr	r3, [r7, #4]
 616 0218 0022     		movs	r2, #0
 617 021a A3F85820 		strh	r2, [r3, #88]	@ movhi
ARM GAS  /tmp/ccqF3GRw.s 			page 32


 237:Src/pwm_curr_fdbk.c ****             pHandle->midDuty = 2U;
 618              		.loc 2 237 30
 619 021e 7B68     		ldr	r3, [r7, #4]
 620 0220 0222     		movs	r2, #2
 621 0222 A3F85A20 		strh	r2, [r3, #90]	@ movhi
 238:Src/pwm_curr_fdbk.c ****             pHandle->highDuty = 1U;
 622              		.loc 2 238 31
 623 0226 7B68     		ldr	r3, [r7, #4]
 624 0228 0122     		movs	r2, #1
 625 022a A3F85C20 		strh	r2, [r3, #92]	@ movhi
 626 022e 0CE1     		b	.L16
 627              	.L25:
 239:Src/pwm_curr_fdbk.c ****           }
 240:Src/pwm_curr_fdbk.c ****           else
 241:Src/pwm_curr_fdbk.c ****           {
 242:Src/pwm_curr_fdbk.c ****           pHandle->lowDuty = (uint16_t)wTimePhB;
 628              		.loc 2 242 30
 629 0230 BB6A     		ldr	r3, [r7, #40]
 630 0232 9AB2     		uxth	r2, r3
 631              		.loc 2 242 28
 632 0234 7B68     		ldr	r3, [r7, #4]
 633 0236 A3F85820 		strh	r2, [r3, #88]	@ movhi
 243:Src/pwm_curr_fdbk.c ****           pHandle->midDuty = (uint16_t)wTimePhC;
 634              		.loc 2 243 30
 635 023a 7B6A     		ldr	r3, [r7, #36]
 636 023c 9AB2     		uxth	r2, r3
 637              		.loc 2 243 28
 638 023e 7B68     		ldr	r3, [r7, #4]
 639 0240 A3F85A20 		strh	r2, [r3, #90]	@ movhi
 244:Src/pwm_curr_fdbk.c ****           pHandle->highDuty = (uint16_t)wTimePhA;
 640              		.loc 2 244 31
 641 0244 FB6A     		ldr	r3, [r7, #44]
 642 0246 9AB2     		uxth	r2, r3
 643              		.loc 2 244 29
 644 0248 7B68     		ldr	r3, [r7, #4]
 645 024a A3F85C20 		strh	r2, [r3, #92]	@ movhi
 646 024e FCE0     		b	.L16
 647              	.L10:
 245:Src/pwm_curr_fdbk.c ****         }
 246:Src/pwm_curr_fdbk.c ****         }
 247:Src/pwm_curr_fdbk.c ****     }
 248:Src/pwm_curr_fdbk.c ****     else /* wY > 0 */
 249:Src/pwm_curr_fdbk.c ****     {
 250:Src/pwm_curr_fdbk.c ****       if (wZ >= 0)
 648              		.loc 2 250 10
 649 0250 3B69     		ldr	r3, [r7, #16]
 650 0252 002B     		cmp	r3, #0
 651 0254 50DB     		blt	.L26
 251:Src/pwm_curr_fdbk.c ****       {
 252:Src/pwm_curr_fdbk.c ****         pHandle->Sector = SECTOR_2;
 652              		.loc 2 252 25
 653 0256 7B68     		ldr	r3, [r7, #4]
 654 0258 0122     		movs	r2, #1
 655 025a 83F87A20 		strb	r2, [r3, #122]
 253:Src/pwm_curr_fdbk.c ****         wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 656              		.loc 2 253 38
 657 025e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccqF3GRw.s 			page 33


 658 0260 B3F87030 		ldrh	r3, [r3, #112]
 659              		.loc 2 253 51
 660 0264 9B08     		lsrs	r3, r3, #2
 661 0266 9BB2     		uxth	r3, r3
 662 0268 1946     		mov	r1, r3
 663              		.loc 2 253 63
 664 026a 7A69     		ldr	r2, [r7, #20]
 665 026c 3B69     		ldr	r3, [r7, #16]
 666 026e D31A     		subs	r3, r2, r3
 667              		.loc 2 253 69
 668 0270 002B     		cmp	r3, #0
 669 0272 03DA     		bge	.L27
 670 0274 03F57F33 		add	r3, r3, #261120
 671 0278 03F2FF33 		addw	r3, r3, #1023
 672              	.L27:
 673 027c 9B14     		asrs	r3, r3, #18
 674              		.loc 2 253 18
 675 027e 0B44     		add	r3, r3, r1
 676 0280 FB62     		str	r3, [r7, #44]
 254:Src/pwm_curr_fdbk.c ****         wTimePhB = wTimePhA + (wZ / 131072);
 677              		.loc 2 254 35
 678 0282 3B69     		ldr	r3, [r7, #16]
 679 0284 002B     		cmp	r3, #0
 680 0286 03DA     		bge	.L28
 681 0288 03F5FF33 		add	r3, r3, #130560
 682 028c 03F2FF13 		addw	r3, r3, #511
 683              	.L28:
 684 0290 5B14     		asrs	r3, r3, #17
 685 0292 1A46     		mov	r2, r3
 686              		.loc 2 254 18
 687 0294 FB6A     		ldr	r3, [r7, #44]
 688 0296 1344     		add	r3, r3, r2
 689 0298 BB62     		str	r3, [r7, #40]
 255:Src/pwm_curr_fdbk.c ****         wTimePhC = wTimePhA - (wY / 131072);
 690              		.loc 2 255 35
 691 029a 7B69     		ldr	r3, [r7, #20]
 692 029c 002B     		cmp	r3, #0
 693 029e 03DA     		bge	.L29
 694 02a0 03F5FF33 		add	r3, r3, #130560
 695 02a4 03F2FF13 		addw	r3, r3, #511
 696              	.L29:
 697 02a8 5B14     		asrs	r3, r3, #17
 698 02aa 5B42     		rsbs	r3, r3, #0
 699 02ac 1A46     		mov	r2, r3
 700              		.loc 2 255 18
 701 02ae FB6A     		ldr	r3, [r7, #44]
 702 02b0 1344     		add	r3, r3, r2
 703 02b2 7B62     		str	r3, [r7, #36]
 256:Src/pwm_curr_fdbk.c **** 
 257:Src/pwm_curr_fdbk.c ****         if(true == pHandle->SingleShuntTopology)
 704              		.loc 2 257 27
 705 02b4 7B68     		ldr	r3, [r7, #4]
 706 02b6 93F88530 		ldrb	r3, [r3, #133]	@ zero_extendqisi2
 707              		.loc 2 257 11
 708 02ba 002B     		cmp	r3, #0
 709 02bc 0CD0     		beq	.L30
 258:Src/pwm_curr_fdbk.c ****         {
ARM GAS  /tmp/ccqF3GRw.s 			page 34


 259:Src/pwm_curr_fdbk.c ****           pHandle->lowDuty = 2U;
 710              		.loc 2 259 28
 711 02be 7B68     		ldr	r3, [r7, #4]
 712 02c0 0222     		movs	r2, #2
 713 02c2 A3F85820 		strh	r2, [r3, #88]	@ movhi
 260:Src/pwm_curr_fdbk.c ****           pHandle->midDuty = 0U;
 714              		.loc 2 260 28
 715 02c6 7B68     		ldr	r3, [r7, #4]
 716 02c8 0022     		movs	r2, #0
 717 02ca A3F85A20 		strh	r2, [r3, #90]	@ movhi
 261:Src/pwm_curr_fdbk.c ****           pHandle->highDuty = 1U;
 718              		.loc 2 261 29
 719 02ce 7B68     		ldr	r3, [r7, #4]
 720 02d0 0122     		movs	r2, #1
 721 02d2 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 722 02d6 B8E0     		b	.L16
 723              	.L30:
 262:Src/pwm_curr_fdbk.c ****         }
 263:Src/pwm_curr_fdbk.c ****         else
 264:Src/pwm_curr_fdbk.c ****         {
 265:Src/pwm_curr_fdbk.c ****         pHandle->lowDuty = (uint16_t)wTimePhB;
 724              		.loc 2 265 28
 725 02d8 BB6A     		ldr	r3, [r7, #40]
 726 02da 9AB2     		uxth	r2, r3
 727              		.loc 2 265 26
 728 02dc 7B68     		ldr	r3, [r7, #4]
 729 02de A3F85820 		strh	r2, [r3, #88]	@ movhi
 266:Src/pwm_curr_fdbk.c ****         pHandle->midDuty = (uint16_t)wTimePhA;
 730              		.loc 2 266 28
 731 02e2 FB6A     		ldr	r3, [r7, #44]
 732 02e4 9AB2     		uxth	r2, r3
 733              		.loc 2 266 26
 734 02e6 7B68     		ldr	r3, [r7, #4]
 735 02e8 A3F85A20 		strh	r2, [r3, #90]	@ movhi
 267:Src/pwm_curr_fdbk.c ****         pHandle->highDuty = (uint16_t)wTimePhC;
 736              		.loc 2 267 29
 737 02ec 7B6A     		ldr	r3, [r7, #36]
 738 02ee 9AB2     		uxth	r2, r3
 739              		.loc 2 267 27
 740 02f0 7B68     		ldr	r3, [r7, #4]
 741 02f2 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 742 02f6 A8E0     		b	.L16
 743              	.L26:
 268:Src/pwm_curr_fdbk.c ****         }
 269:Src/pwm_curr_fdbk.c ****       }
 270:Src/pwm_curr_fdbk.c ****       else /* wZ < 0 */
 271:Src/pwm_curr_fdbk.c ****         if ( wX <= 0 )
 744              		.loc 2 271 12
 745 02f8 BB69     		ldr	r3, [r7, #24]
 746 02fa 002B     		cmp	r3, #0
 747 02fc 50DC     		bgt	.L31
 272:Src/pwm_curr_fdbk.c ****         {
 273:Src/pwm_curr_fdbk.c ****           pHandle->Sector = SECTOR_6;
 748              		.loc 2 273 27
 749 02fe 7B68     		ldr	r3, [r7, #4]
 750 0300 0522     		movs	r2, #5
 751 0302 83F87A20 		strb	r2, [r3, #122]
ARM GAS  /tmp/ccqF3GRw.s 			page 35


 274:Src/pwm_curr_fdbk.c ****           wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 752              		.loc 2 274 41
 753 0306 7B68     		ldr	r3, [r7, #4]
 754 0308 B3F87030 		ldrh	r3, [r3, #112]
 755              		.loc 2 274 54
 756 030c 9B08     		lsrs	r3, r3, #2
 757 030e 9BB2     		uxth	r3, r3
 758 0310 1946     		mov	r1, r3
 759              		.loc 2 274 66
 760 0312 7A69     		ldr	r2, [r7, #20]
 761 0314 BB69     		ldr	r3, [r7, #24]
 762 0316 D31A     		subs	r3, r2, r3
 763              		.loc 2 274 72
 764 0318 002B     		cmp	r3, #0
 765 031a 03DA     		bge	.L32
 766 031c 03F57F33 		add	r3, r3, #261120
 767 0320 03F2FF33 		addw	r3, r3, #1023
 768              	.L32:
 769 0324 9B14     		asrs	r3, r3, #18
 770              		.loc 2 274 20
 771 0326 0B44     		add	r3, r3, r1
 772 0328 FB62     		str	r3, [r7, #44]
 275:Src/pwm_curr_fdbk.c ****           wTimePhC = wTimePhA - (wY / 131072);
 773              		.loc 2 275 37
 774 032a 7B69     		ldr	r3, [r7, #20]
 775 032c 002B     		cmp	r3, #0
 776 032e 03DA     		bge	.L33
 777 0330 03F5FF33 		add	r3, r3, #130560
 778 0334 03F2FF13 		addw	r3, r3, #511
 779              	.L33:
 780 0338 5B14     		asrs	r3, r3, #17
 781 033a 5B42     		rsbs	r3, r3, #0
 782 033c 1A46     		mov	r2, r3
 783              		.loc 2 275 20
 784 033e FB6A     		ldr	r3, [r7, #44]
 785 0340 1344     		add	r3, r3, r2
 786 0342 7B62     		str	r3, [r7, #36]
 276:Src/pwm_curr_fdbk.c ****           wTimePhB = wTimePhC + (wX / 131072);
 787              		.loc 2 276 37
 788 0344 BB69     		ldr	r3, [r7, #24]
 789 0346 002B     		cmp	r3, #0
 790 0348 03DA     		bge	.L34
 791 034a 03F5FF33 		add	r3, r3, #130560
 792 034e 03F2FF13 		addw	r3, r3, #511
 793              	.L34:
 794 0352 5B14     		asrs	r3, r3, #17
 795 0354 1A46     		mov	r2, r3
 796              		.loc 2 276 20
 797 0356 7B6A     		ldr	r3, [r7, #36]
 798 0358 1344     		add	r3, r3, r2
 799 035a BB62     		str	r3, [r7, #40]
 277:Src/pwm_curr_fdbk.c **** 
 278:Src/pwm_curr_fdbk.c ****           if(true == pHandle->SingleShuntTopology)
 800              		.loc 2 278 29
 801 035c 7B68     		ldr	r3, [r7, #4]
 802 035e 93F88530 		ldrb	r3, [r3, #133]	@ zero_extendqisi2
 803              		.loc 2 278 13
ARM GAS  /tmp/ccqF3GRw.s 			page 36


 804 0362 002B     		cmp	r3, #0
 805 0364 0CD0     		beq	.L35
 279:Src/pwm_curr_fdbk.c ****           {
 280:Src/pwm_curr_fdbk.c ****             pHandle->lowDuty = 1U;
 806              		.loc 2 280 30
 807 0366 7B68     		ldr	r3, [r7, #4]
 808 0368 0122     		movs	r2, #1
 809 036a A3F85820 		strh	r2, [r3, #88]	@ movhi
 281:Src/pwm_curr_fdbk.c ****             pHandle->midDuty = 2U;
 810              		.loc 2 281 30
 811 036e 7B68     		ldr	r3, [r7, #4]
 812 0370 0222     		movs	r2, #2
 813 0372 A3F85A20 		strh	r2, [r3, #90]	@ movhi
 282:Src/pwm_curr_fdbk.c ****             pHandle->highDuty = 0U;
 814              		.loc 2 282 31
 815 0376 7B68     		ldr	r3, [r7, #4]
 816 0378 0022     		movs	r2, #0
 817 037a A3F85C20 		strh	r2, [r3, #92]	@ movhi
 818 037e 64E0     		b	.L16
 819              	.L35:
 283:Src/pwm_curr_fdbk.c ****           }
 284:Src/pwm_curr_fdbk.c ****           else
 285:Src/pwm_curr_fdbk.c ****           {
 286:Src/pwm_curr_fdbk.c ****             pHandle->lowDuty = (uint16_t)wTimePhA;
 820              		.loc 2 286 32
 821 0380 FB6A     		ldr	r3, [r7, #44]
 822 0382 9AB2     		uxth	r2, r3
 823              		.loc 2 286 30
 824 0384 7B68     		ldr	r3, [r7, #4]
 825 0386 A3F85820 		strh	r2, [r3, #88]	@ movhi
 287:Src/pwm_curr_fdbk.c ****             pHandle->midDuty = (uint16_t)wTimePhC;
 826              		.loc 2 287 32
 827 038a 7B6A     		ldr	r3, [r7, #36]
 828 038c 9AB2     		uxth	r2, r3
 829              		.loc 2 287 30
 830 038e 7B68     		ldr	r3, [r7, #4]
 831 0390 A3F85A20 		strh	r2, [r3, #90]	@ movhi
 288:Src/pwm_curr_fdbk.c ****             pHandle->highDuty = (uint16_t)wTimePhB;
 832              		.loc 2 288 33
 833 0394 BB6A     		ldr	r3, [r7, #40]
 834 0396 9AB2     		uxth	r2, r3
 835              		.loc 2 288 31
 836 0398 7B68     		ldr	r3, [r7, #4]
 837 039a A3F85C20 		strh	r2, [r3, #92]	@ movhi
 838 039e 54E0     		b	.L16
 839              	.L31:
 289:Src/pwm_curr_fdbk.c ****         }
 290:Src/pwm_curr_fdbk.c ****         }
 291:Src/pwm_curr_fdbk.c ****         else /* wX > 0 */
 292:Src/pwm_curr_fdbk.c ****         {
 293:Src/pwm_curr_fdbk.c ****           pHandle->Sector = SECTOR_1;
 840              		.loc 2 293 27
 841 03a0 7B68     		ldr	r3, [r7, #4]
 842 03a2 0022     		movs	r2, #0
 843 03a4 83F87A20 		strb	r2, [r3, #122]
 294:Src/pwm_curr_fdbk.c ****           wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 844              		.loc 2 294 40
ARM GAS  /tmp/ccqF3GRw.s 			page 37


 845 03a8 7B68     		ldr	r3, [r7, #4]
 846 03aa B3F87030 		ldrh	r3, [r3, #112]
 847              		.loc 2 294 53
 848 03ae 9B08     		lsrs	r3, r3, #2
 849 03b0 9BB2     		uxth	r3, r3
 850 03b2 1946     		mov	r1, r3
 851              		.loc 2 294 64
 852 03b4 BA69     		ldr	r2, [r7, #24]
 853 03b6 3B69     		ldr	r3, [r7, #16]
 854 03b8 D31A     		subs	r3, r2, r3
 855              		.loc 2 294 70
 856 03ba 002B     		cmp	r3, #0
 857 03bc 03DA     		bge	.L36
 858 03be 03F57F33 		add	r3, r3, #261120
 859 03c2 03F2FF33 		addw	r3, r3, #1023
 860              	.L36:
 861 03c6 9B14     		asrs	r3, r3, #18
 862              		.loc 2 294 20
 863 03c8 0B44     		add	r3, r3, r1
 864 03ca FB62     		str	r3, [r7, #44]
 295:Src/pwm_curr_fdbk.c ****           wTimePhB = wTimePhA + (wZ / 131072);
 865              		.loc 2 295 37
 866 03cc 3B69     		ldr	r3, [r7, #16]
 867 03ce 002B     		cmp	r3, #0
 868 03d0 03DA     		bge	.L37
 869 03d2 03F5FF33 		add	r3, r3, #130560
 870 03d6 03F2FF13 		addw	r3, r3, #511
 871              	.L37:
 872 03da 5B14     		asrs	r3, r3, #17
 873 03dc 1A46     		mov	r2, r3
 874              		.loc 2 295 20
 875 03de FB6A     		ldr	r3, [r7, #44]
 876 03e0 1344     		add	r3, r3, r2
 877 03e2 BB62     		str	r3, [r7, #40]
 296:Src/pwm_curr_fdbk.c ****           wTimePhC = wTimePhB - (wX / 131072);
 878              		.loc 2 296 37
 879 03e4 BB69     		ldr	r3, [r7, #24]
 880 03e6 002B     		cmp	r3, #0
 881 03e8 03DA     		bge	.L38
 882 03ea 03F5FF33 		add	r3, r3, #130560
 883 03ee 03F2FF13 		addw	r3, r3, #511
 884              	.L38:
 885 03f2 5B14     		asrs	r3, r3, #17
 886 03f4 5B42     		rsbs	r3, r3, #0
 887 03f6 1A46     		mov	r2, r3
 888              		.loc 2 296 20
 889 03f8 BB6A     		ldr	r3, [r7, #40]
 890 03fa 1344     		add	r3, r3, r2
 891 03fc 7B62     		str	r3, [r7, #36]
 297:Src/pwm_curr_fdbk.c **** 
 298:Src/pwm_curr_fdbk.c ****           if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 892              		.loc 2 298 22
 893 03fe 7B68     		ldr	r3, [r7, #4]
 894 0400 93F87D30 		ldrb	r3, [r3, #125]	@ zero_extendqisi2
 895              		.loc 2 298 13
 896 0404 002B     		cmp	r3, #0
 897 0406 04D1     		bne	.L39
ARM GAS  /tmp/ccqF3GRw.s 			page 38


 898              		.loc 2 298 54 discriminator 1
 899 0408 7B68     		ldr	r3, [r7, #4]
 900 040a 93F88530 		ldrb	r3, [r3, #133]	@ zero_extendqisi2
 901              		.loc 2 298 43 discriminator 1
 902 040e 002B     		cmp	r3, #0
 903 0410 0CD0     		beq	.L40
 904              	.L39:
 299:Src/pwm_curr_fdbk.c ****           {
 300:Src/pwm_curr_fdbk.c ****             pHandle->lowDuty = 2U;
 905              		.loc 2 300 30
 906 0412 7B68     		ldr	r3, [r7, #4]
 907 0414 0222     		movs	r2, #2
 908 0416 A3F85820 		strh	r2, [r3, #88]	@ movhi
 301:Src/pwm_curr_fdbk.c ****             pHandle->midDuty = 1U;
 909              		.loc 2 301 30
 910 041a 7B68     		ldr	r3, [r7, #4]
 911 041c 0122     		movs	r2, #1
 912 041e A3F85A20 		strh	r2, [r3, #90]	@ movhi
 302:Src/pwm_curr_fdbk.c ****             pHandle->highDuty = 0U;
 913              		.loc 2 302 31
 914 0422 7B68     		ldr	r3, [r7, #4]
 915 0424 0022     		movs	r2, #0
 916 0426 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 917 042a 0EE0     		b	.L16
 918              	.L40:
 303:Src/pwm_curr_fdbk.c ****           }
 304:Src/pwm_curr_fdbk.c ****           else
 305:Src/pwm_curr_fdbk.c ****           {
 306:Src/pwm_curr_fdbk.c ****             pHandle->lowDuty = (uint16_t)wTimePhA;
 919              		.loc 2 306 32
 920 042c FB6A     		ldr	r3, [r7, #44]
 921 042e 9AB2     		uxth	r2, r3
 922              		.loc 2 306 30
 923 0430 7B68     		ldr	r3, [r7, #4]
 924 0432 A3F85820 		strh	r2, [r3, #88]	@ movhi
 307:Src/pwm_curr_fdbk.c ****             pHandle->midDuty = (uint16_t)wTimePhB;
 925              		.loc 2 307 32
 926 0436 BB6A     		ldr	r3, [r7, #40]
 927 0438 9AB2     		uxth	r2, r3
 928              		.loc 2 307 30
 929 043a 7B68     		ldr	r3, [r7, #4]
 930 043c A3F85A20 		strh	r2, [r3, #90]	@ movhi
 308:Src/pwm_curr_fdbk.c ****             pHandle->highDuty = (uint16_t)wTimePhC;
 931              		.loc 2 308 33
 932 0440 7B6A     		ldr	r3, [r7, #36]
 933 0442 9AB2     		uxth	r2, r3
 934              		.loc 2 308 31
 935 0444 7B68     		ldr	r3, [r7, #4]
 936 0446 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 937              	.L16:
 309:Src/pwm_curr_fdbk.c ****         }
 310:Src/pwm_curr_fdbk.c ****         }
 311:Src/pwm_curr_fdbk.c ****     }
 312:Src/pwm_curr_fdbk.c **** 
 313:Src/pwm_curr_fdbk.c ****     pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 938              		.loc 2 313 23
 939 044a FB6A     		ldr	r3, [r7, #44]
ARM GAS  /tmp/ccqF3GRw.s 			page 39


 940 044c 002B     		cmp	r3, #0
 941 044e 02DD     		ble	.L41
 942              		.loc 2 313 23 is_stmt 0 discriminator 1
 943 0450 FB6A     		ldr	r3, [r7, #44]
 944 0452 9AB2     		uxth	r2, r3
 945 0454 00E0     		b	.L42
 946              	.L41:
 947              		.loc 2 313 23 discriminator 2
 948 0456 0022     		movs	r2, #0
 949              	.L42:
 950              		.loc 2 313 21 is_stmt 1 discriminator 4
 951 0458 7B68     		ldr	r3, [r7, #4]
 952 045a A3F85020 		strh	r2, [r3, #80]	@ movhi
 314:Src/pwm_curr_fdbk.c ****     pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 953              		.loc 2 314 23 discriminator 4
 954 045e BB6A     		ldr	r3, [r7, #40]
 955 0460 002B     		cmp	r3, #0
 956 0462 02DD     		ble	.L43
 957              		.loc 2 314 23 is_stmt 0 discriminator 1
 958 0464 BB6A     		ldr	r3, [r7, #40]
 959 0466 9AB2     		uxth	r2, r3
 960 0468 00E0     		b	.L44
 961              	.L43:
 962              		.loc 2 314 23 discriminator 2
 963 046a 0022     		movs	r2, #0
 964              	.L44:
 965              		.loc 2 314 21 is_stmt 1 discriminator 4
 966 046c 7B68     		ldr	r3, [r7, #4]
 967 046e A3F85220 		strh	r2, [r3, #82]	@ movhi
 315:Src/pwm_curr_fdbk.c ****     pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 968              		.loc 2 315 23 discriminator 4
 969 0472 7B6A     		ldr	r3, [r7, #36]
 970 0474 002B     		cmp	r3, #0
 971 0476 02DD     		ble	.L45
 972              		.loc 2 315 23 is_stmt 0 discriminator 1
 973 0478 7B6A     		ldr	r3, [r7, #36]
 974 047a 9AB2     		uxth	r2, r3
 975 047c 00E0     		b	.L46
 976              	.L45:
 977              		.loc 2 315 23 discriminator 2
 978 047e 0022     		movs	r2, #0
 979              	.L46:
 980              		.loc 2 315 21 is_stmt 1 discriminator 4
 981 0480 7B68     		ldr	r3, [r7, #4]
 982 0482 A3F85420 		strh	r2, [r3, #84]	@ movhi
 316:Src/pwm_curr_fdbk.c **** 
 317:Src/pwm_curr_fdbk.c ****     returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 983              		.loc 2 317 26 discriminator 4
 984 0486 7B68     		ldr	r3, [r7, #4]
 985 0488 5B69     		ldr	r3, [r3, #20]
 986              		.loc 2 317 19 discriminator 4
 987 048a 7868     		ldr	r0, [r7, #4]
 988 048c 9847     		blx	r3
 989              	.LVL2:
 990 048e 0346     		mov	r3, r0
 991 0490 FB81     		strh	r3, [r7, #14]	@ movhi
 318:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
ARM GAS  /tmp/ccqF3GRw.s 			page 40


 319:Src/pwm_curr_fdbk.c ****   }
 320:Src/pwm_curr_fdbk.c **** #endif
 321:Src/pwm_curr_fdbk.c ****   return (returnValue);
 992              		.loc 2 321 10 discriminator 4
 993 0492 FB89     		ldrh	r3, [r7, #14]
 322:Src/pwm_curr_fdbk.c **** }
 994              		.loc 2 322 1 discriminator 4
 995 0494 1846     		mov	r0, r3
 996 0496 3037     		adds	r7, r7, #48
 997              	.LCFI25:
 998              		.cfi_def_cfa_offset 8
 999 0498 BD46     		mov	sp, r7
 1000              	.LCFI26:
 1001              		.cfi_def_cfa_register 13
 1002              		@ sp needed
 1003 049a 80BD     		pop	{r7, pc}
 1004              		.cfi_endproc
 1005              	.LFE1443:
 1007              		.section	.text.PWMC_SwitchOffPWM,"ax",%progbits
 1008              		.align	1
 1009              		.weak	PWMC_SwitchOffPWM
 1010              		.syntax unified
 1011              		.thumb
 1012              		.thumb_func
 1013              		.fpu fpv4-sp-d16
 1015              	PWMC_SwitchOffPWM:
 1016              	.LFB1444:
 323:Src/pwm_curr_fdbk.c **** 
 324:Src/pwm_curr_fdbk.c **** /**
 325:Src/pwm_curr_fdbk.c ****   * @brief  Switches PWM generation off, inactivating the outputs.
 326:Src/pwm_curr_fdbk.c ****   *
 327:Src/pwm_curr_fdbk.c ****   * @param  pHandle: Handler of the current instance of the PWM component.
 328:Src/pwm_curr_fdbk.c ****   */
 329:Src/pwm_curr_fdbk.c **** //cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
 330:Src/pwm_curr_fdbk.c **** __weak void PWMC_SwitchOffPWM(PWMC_Handle_t *pHandle)
 331:Src/pwm_curr_fdbk.c **** {
 1017              		.loc 2 331 1
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 8
 1020              		@ frame_needed = 1, uses_anonymous_args = 0
 1021 0000 80B5     		push	{r7, lr}
 1022              	.LCFI27:
 1023              		.cfi_def_cfa_offset 8
 1024              		.cfi_offset 7, -8
 1025              		.cfi_offset 14, -4
 1026 0002 82B0     		sub	sp, sp, #8
 1027              	.LCFI28:
 1028              		.cfi_def_cfa_offset 16
 1029 0004 00AF     		add	r7, sp, #0
 1030              	.LCFI29:
 1031              		.cfi_def_cfa_register 7
 1032 0006 7860     		str	r0, [r7, #4]
 332:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 333:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
 334:Src/pwm_curr_fdbk.c ****   {
 335:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 336:Src/pwm_curr_fdbk.c ****   }
ARM GAS  /tmp/ccqF3GRw.s 			page 41


 337:Src/pwm_curr_fdbk.c ****   else
 338:Src/pwm_curr_fdbk.c ****   {
 339:Src/pwm_curr_fdbk.c **** #endif
 340:Src/pwm_curr_fdbk.c ****     pHandle->pFctSwitchOffPwm(pHandle);
 1033              		.loc 2 340 12
 1034 0008 7B68     		ldr	r3, [r7, #4]
 1035 000a 5B68     		ldr	r3, [r3, #4]
 1036              		.loc 2 340 5
 1037 000c 7868     		ldr	r0, [r7, #4]
 1038 000e 9847     		blx	r3
 1039              	.LVL3:
 341:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 342:Src/pwm_curr_fdbk.c ****   }
 343:Src/pwm_curr_fdbk.c **** #endif
 344:Src/pwm_curr_fdbk.c **** }
 1040              		.loc 2 344 1
 1041 0010 00BF     		nop
 1042 0012 0837     		adds	r7, r7, #8
 1043              	.LCFI30:
 1044              		.cfi_def_cfa_offset 8
 1045 0014 BD46     		mov	sp, r7
 1046              	.LCFI31:
 1047              		.cfi_def_cfa_register 13
 1048              		@ sp needed
 1049 0016 80BD     		pop	{r7, pc}
 1050              		.cfi_endproc
 1051              	.LFE1444:
 1053              		.section	.text.PWMC_SwitchOnPWM,"ax",%progbits
 1054              		.align	1
 1055              		.weak	PWMC_SwitchOnPWM
 1056              		.syntax unified
 1057              		.thumb
 1058              		.thumb_func
 1059              		.fpu fpv4-sp-d16
 1061              	PWMC_SwitchOnPWM:
 1062              	.LFB1445:
 345:Src/pwm_curr_fdbk.c **** 
 346:Src/pwm_curr_fdbk.c **** /**
 347:Src/pwm_curr_fdbk.c ****   * @brief  Enables PWM generation on the proper Timer peripheral.
 348:Src/pwm_curr_fdbk.c ****   *
 349:Src/pwm_curr_fdbk.c ****   * @param  pHandle: Handler of the current instance of the PWM component.
 350:Src/pwm_curr_fdbk.c ****   */
 351:Src/pwm_curr_fdbk.c **** //cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
 352:Src/pwm_curr_fdbk.c **** __weak void PWMC_SwitchOnPWM(PWMC_Handle_t *pHandle)
 353:Src/pwm_curr_fdbk.c **** {
 1063              		.loc 2 353 1
 1064              		.cfi_startproc
 1065              		@ args = 0, pretend = 0, frame = 8
 1066              		@ frame_needed = 1, uses_anonymous_args = 0
 1067 0000 80B5     		push	{r7, lr}
 1068              	.LCFI32:
 1069              		.cfi_def_cfa_offset 8
 1070              		.cfi_offset 7, -8
 1071              		.cfi_offset 14, -4
 1072 0002 82B0     		sub	sp, sp, #8
 1073              	.LCFI33:
 1074              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccqF3GRw.s 			page 42


 1075 0004 00AF     		add	r7, sp, #0
 1076              	.LCFI34:
 1077              		.cfi_def_cfa_register 7
 1078 0006 7860     		str	r0, [r7, #4]
 354:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 355:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
 356:Src/pwm_curr_fdbk.c ****   {
 357:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 358:Src/pwm_curr_fdbk.c ****   }
 359:Src/pwm_curr_fdbk.c ****   else
 360:Src/pwm_curr_fdbk.c ****   {
 361:Src/pwm_curr_fdbk.c **** #endif
 362:Src/pwm_curr_fdbk.c ****     pHandle->pFctSwitchOnPwm(pHandle);
 1079              		.loc 2 362 12
 1080 0008 7B68     		ldr	r3, [r7, #4]
 1081 000a 9B68     		ldr	r3, [r3, #8]
 1082              		.loc 2 362 5
 1083 000c 7868     		ldr	r0, [r7, #4]
 1084 000e 9847     		blx	r3
 1085              	.LVL4:
 363:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 364:Src/pwm_curr_fdbk.c ****   }
 365:Src/pwm_curr_fdbk.c **** #endif
 366:Src/pwm_curr_fdbk.c **** }
 1086              		.loc 2 366 1
 1087 0010 00BF     		nop
 1088 0012 0837     		adds	r7, r7, #8
 1089              	.LCFI35:
 1090              		.cfi_def_cfa_offset 8
 1091 0014 BD46     		mov	sp, r7
 1092              	.LCFI36:
 1093              		.cfi_def_cfa_register 13
 1094              		@ sp needed
 1095 0016 80BD     		pop	{r7, pc}
 1096              		.cfi_endproc
 1097              	.LFE1445:
 1099              		.section	.text.PWMC_CurrentReadingCalibr,"ax",%progbits
 1100              		.align	1
 1101              		.weak	PWMC_CurrentReadingCalibr
 1102              		.syntax unified
 1103              		.thumb
 1104              		.thumb_func
 1105              		.fpu fpv4-sp-d16
 1107              	PWMC_CurrentReadingCalibr:
 1108              	.LFB1446:
 367:Src/pwm_curr_fdbk.c **** 
 368:Src/pwm_curr_fdbk.c **** /**
 369:Src/pwm_curr_fdbk.c ****   * @brief  Calibrates ADC current conversions by reading the offset voltage
 370:Src/pwm_curr_fdbk.c ****   *         present on ADC pins when no motor current is flowing in.
 371:Src/pwm_curr_fdbk.c ****   *
 372:Src/pwm_curr_fdbk.c ****   * This function should be called before each motor start-up.
 373:Src/pwm_curr_fdbk.c ****   *
 374:Src/pwm_curr_fdbk.c ****   * @param  pHandle: Handler of the current instance of the PWM component.
 375:Src/pwm_curr_fdbk.c ****   * @param  action: Can be #CRC_START to initialize the offset calibration or
 376:Src/pwm_curr_fdbk.c ****   *         #CRC_EXEC to execute the offset calibration.
 377:Src/pwm_curr_fdbk.c ****   * @retval true if the current calibration has been completed, **false** if it is
 378:Src/pwm_curr_fdbk.c ****   *         still ongoing.
ARM GAS  /tmp/ccqF3GRw.s 			page 43


 379:Src/pwm_curr_fdbk.c ****   */
 380:Src/pwm_curr_fdbk.c **** __weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
 381:Src/pwm_curr_fdbk.c **** {
 1109              		.loc 2 381 1
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 16
 1112              		@ frame_needed = 1, uses_anonymous_args = 0
 1113 0000 80B5     		push	{r7, lr}
 1114              	.LCFI37:
 1115              		.cfi_def_cfa_offset 8
 1116              		.cfi_offset 7, -8
 1117              		.cfi_offset 14, -4
 1118 0002 84B0     		sub	sp, sp, #16
 1119              	.LCFI38:
 1120              		.cfi_def_cfa_offset 24
 1121 0004 00AF     		add	r7, sp, #0
 1122              	.LCFI39:
 1123              		.cfi_def_cfa_register 7
 1124 0006 7860     		str	r0, [r7, #4]
 1125 0008 0B46     		mov	r3, r1
 1126 000a FB70     		strb	r3, [r7, #3]
 382:Src/pwm_curr_fdbk.c ****   bool retVal = false;
 1127              		.loc 2 382 8
 1128 000c 0023     		movs	r3, #0
 1129 000e FB73     		strb	r3, [r7, #15]
 383:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 384:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
 385:Src/pwm_curr_fdbk.c ****   {
 386:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 387:Src/pwm_curr_fdbk.c ****   }
 388:Src/pwm_curr_fdbk.c ****   else
 389:Src/pwm_curr_fdbk.c ****   {
 390:Src/pwm_curr_fdbk.c **** #endif
 391:Src/pwm_curr_fdbk.c ****     if (CRC_START == action)
 1130              		.loc 2 391 8
 1131 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1132 0012 002B     		cmp	r3, #0
 1133 0014 09D1     		bne	.L51
 392:Src/pwm_curr_fdbk.c ****     {
 393:Src/pwm_curr_fdbk.c ****       PWMC_SwitchOffPWM(pHandle);
 1134              		.loc 2 393 7
 1135 0016 7868     		ldr	r0, [r7, #4]
 1136 0018 FFF7FEFF 		bl	PWMC_SwitchOffPWM
 394:Src/pwm_curr_fdbk.c ****       pHandle->pFctCurrReadingCalib(pHandle);
 1137              		.loc 2 394 14
 1138 001c 7B68     		ldr	r3, [r7, #4]
 1139 001e DB68     		ldr	r3, [r3, #12]
 1140              		.loc 2 394 7
 1141 0020 7868     		ldr	r0, [r7, #4]
 1142 0022 9847     		blx	r3
 1143              	.LVL5:
 395:Src/pwm_curr_fdbk.c ****       retVal = true;
 1144              		.loc 2 395 14
 1145 0024 0123     		movs	r3, #1
 1146 0026 FB73     		strb	r3, [r7, #15]
 1147 0028 1DE0     		b	.L52
 1148              	.L51:
ARM GAS  /tmp/ccqF3GRw.s 			page 44


 396:Src/pwm_curr_fdbk.c ****     }
 397:Src/pwm_curr_fdbk.c ****     else if (CRC_EXEC == action)
 1149              		.loc 2 397 13
 1150 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1151 002c 012B     		cmp	r3, #1
 1152 002e 1AD1     		bne	.L52
 398:Src/pwm_curr_fdbk.c ****     {
 399:Src/pwm_curr_fdbk.c ****       if (pHandle->OffCalibrWaitTimeCounter > 0u)
 1153              		.loc 2 399 18
 1154 0030 7B68     		ldr	r3, [r7, #4]
 1155 0032 B3F86030 		ldrh	r3, [r3, #96]
 1156              		.loc 2 399 10
 1157 0036 002B     		cmp	r3, #0
 1158 0038 13D0     		beq	.L53
 400:Src/pwm_curr_fdbk.c ****       {
 401:Src/pwm_curr_fdbk.c ****         pHandle->OffCalibrWaitTimeCounter--;
 1159              		.loc 2 401 16
 1160 003a 7B68     		ldr	r3, [r7, #4]
 1161 003c B3F86030 		ldrh	r3, [r3, #96]
 1162              		.loc 2 401 42
 1163 0040 013B     		subs	r3, r3, #1
 1164 0042 9AB2     		uxth	r2, r3
 1165 0044 7B68     		ldr	r3, [r7, #4]
 1166 0046 A3F86020 		strh	r2, [r3, #96]	@ movhi
 402:Src/pwm_curr_fdbk.c ****         if (0U == pHandle->OffCalibrWaitTimeCounter)
 1167              		.loc 2 402 26
 1168 004a 7B68     		ldr	r3, [r7, #4]
 1169 004c B3F86030 		ldrh	r3, [r3, #96]
 1170              		.loc 2 402 12
 1171 0050 002B     		cmp	r3, #0
 1172 0052 08D1     		bne	.L52
 403:Src/pwm_curr_fdbk.c ****         {
 404:Src/pwm_curr_fdbk.c ****           pHandle->pFctCurrReadingCalib(pHandle);
 1173              		.loc 2 404 18
 1174 0054 7B68     		ldr	r3, [r7, #4]
 1175 0056 DB68     		ldr	r3, [r3, #12]
 1176              		.loc 2 404 11
 1177 0058 7868     		ldr	r0, [r7, #4]
 1178 005a 9847     		blx	r3
 1179              	.LVL6:
 405:Src/pwm_curr_fdbk.c ****           retVal = true;
 1180              		.loc 2 405 18
 1181 005c 0123     		movs	r3, #1
 1182 005e FB73     		strb	r3, [r7, #15]
 1183 0060 01E0     		b	.L52
 1184              	.L53:
 406:Src/pwm_curr_fdbk.c ****         }
 407:Src/pwm_curr_fdbk.c ****       }
 408:Src/pwm_curr_fdbk.c ****       else
 409:Src/pwm_curr_fdbk.c ****       {
 410:Src/pwm_curr_fdbk.c ****         retVal = true;
 1185              		.loc 2 410 16
 1186 0062 0123     		movs	r3, #1
 1187 0064 FB73     		strb	r3, [r7, #15]
 1188              	.L52:
 411:Src/pwm_curr_fdbk.c ****       }
 412:Src/pwm_curr_fdbk.c ****     }
ARM GAS  /tmp/ccqF3GRw.s 			page 45


 413:Src/pwm_curr_fdbk.c ****     else
 414:Src/pwm_curr_fdbk.c ****     {
 415:Src/pwm_curr_fdbk.c ****       /* Nothing to do */
 416:Src/pwm_curr_fdbk.c ****     }
 417:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 418:Src/pwm_curr_fdbk.c ****   }
 419:Src/pwm_curr_fdbk.c **** #endif
 420:Src/pwm_curr_fdbk.c ****   return (retVal);
 1189              		.loc 2 420 10
 1190 0066 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 421:Src/pwm_curr_fdbk.c **** }
 1191              		.loc 2 421 1
 1192 0068 1846     		mov	r0, r3
 1193 006a 1037     		adds	r7, r7, #16
 1194              	.LCFI40:
 1195              		.cfi_def_cfa_offset 8
 1196 006c BD46     		mov	sp, r7
 1197              	.LCFI41:
 1198              		.cfi_def_cfa_register 13
 1199              		@ sp needed
 1200 006e 80BD     		pop	{r7, pc}
 1201              		.cfi_endproc
 1202              	.LFE1446:
 1204              		.section	.text.PWMC_LowPassFilter,"ax",%progbits
 1205              		.align	1
 1206              		.syntax unified
 1207              		.thumb
 1208              		.thumb_func
 1209              		.fpu fpv4-sp-d16
 1211              	PWMC_LowPassFilter:
 1212              	.LFB1447:
 422:Src/pwm_curr_fdbk.c **** 
 423:Src/pwm_curr_fdbk.c **** #if defined (CCMRAM)
 424:Src/pwm_curr_fdbk.c **** #if defined (__ICCARM__)
 425:Src/pwm_curr_fdbk.c **** #pragma location = ".ccmram"
 426:Src/pwm_curr_fdbk.c **** #elif defined (__CC_ARM) || defined(__GNUC__)
 427:Src/pwm_curr_fdbk.c **** __attribute__( ( section ( ".ccmram" ) ) )
 428:Src/pwm_curr_fdbk.c **** #endif
 429:Src/pwm_curr_fdbk.c **** #endif
 430:Src/pwm_curr_fdbk.c **** /**
 431:Src/pwm_curr_fdbk.c ****   * @brief  Sets a low pass filter.
 432:Src/pwm_curr_fdbk.c ****   *
 433:Src/pwm_curr_fdbk.c ****   * This function is called for setting low pass filter on Iq and Id, before getting
 434:Src/pwm_curr_fdbk.c ****   * transformed in Ia and Ib by the Reverse Park function.
 435:Src/pwm_curr_fdbk.c ****   *
 436:Src/pwm_curr_fdbk.c ****   * @param in: Value needing to be passed through the filter (Iq and Id).
 437:Src/pwm_curr_fdbk.c ****   * @param out_buf: LPF buffer.
 438:Src/pwm_curr_fdbk.c ****   * @param t: Low pass filter constant.
 439:Src/pwm_curr_fdbk.c ****   * @retval New value after the low pass filter.
 440:Src/pwm_curr_fdbk.c ****   */
 441:Src/pwm_curr_fdbk.c **** static inline int32_t PWMC_LowPassFilter(int32_t in, int32_t *out_buf, int32_t t)
 442:Src/pwm_curr_fdbk.c **** {
 1213              		.loc 2 442 1
 1214              		.cfi_startproc
 1215              		@ args = 0, pretend = 0, frame = 24
 1216              		@ frame_needed = 1, uses_anonymous_args = 0
 1217              		@ link register save eliminated.
ARM GAS  /tmp/ccqF3GRw.s 			page 46


 1218 0000 80B4     		push	{r7}
 1219              	.LCFI42:
 1220              		.cfi_def_cfa_offset 4
 1221              		.cfi_offset 7, -4
 1222 0002 87B0     		sub	sp, sp, #28
 1223              	.LCFI43:
 1224              		.cfi_def_cfa_offset 32
 1225 0004 00AF     		add	r7, sp, #0
 1226              	.LCFI44:
 1227              		.cfi_def_cfa_register 7
 1228 0006 F860     		str	r0, [r7, #12]
 1229 0008 B960     		str	r1, [r7, #8]
 1230 000a 7A60     		str	r2, [r7, #4]
 443:Src/pwm_curr_fdbk.c ****   int32_t x;
 444:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 445:Src/pwm_curr_fdbk.c ****   if (MC_NULL == out_buf)
 446:Src/pwm_curr_fdbk.c ****   {
 447:Src/pwm_curr_fdbk.c ****     x = 0;
 448:Src/pwm_curr_fdbk.c ****   }
 449:Src/pwm_curr_fdbk.c ****   else
 450:Src/pwm_curr_fdbk.c ****   {
 451:Src/pwm_curr_fdbk.c **** #endif
 452:Src/pwm_curr_fdbk.c **** #ifndef FULL_MISRA_C_COMPLIANCY_PWM_CURR
 453:Src/pwm_curr_fdbk.c ****     //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 454:Src/pwm_curr_fdbk.c ****     *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 1231              		.loc 2 454 17
 1232 000c BB68     		ldr	r3, [r7, #8]
 1233 000e 1A68     		ldr	r2, [r3]
 1234              		.loc 2 454 38
 1235 0010 BB68     		ldr	r3, [r7, #8]
 1236 0012 1B68     		ldr	r3, [r3]
 1237              		.loc 2 454 48
 1238 0014 DB13     		asrs	r3, r3, #15
 1239              		.loc 2 454 34
 1240 0016 F968     		ldr	r1, [r7, #12]
 1241 0018 CB1A     		subs	r3, r1, r3
 1242              		.loc 2 454 56
 1243 001a 7968     		ldr	r1, [r7, #4]
 1244 001c 01FB03F3 		mul	r3, r1, r3
 1245              		.loc 2 454 27
 1246 0020 1A44     		add	r2, r2, r3
 1247              		.loc 2 454 14
 1248 0022 BB68     		ldr	r3, [r7, #8]
 1249 0024 1A60     		str	r2, [r3]
 455:Src/pwm_curr_fdbk.c ****     x = (*out_buf) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 1250              		.loc 2 455 10
 1251 0026 BB68     		ldr	r3, [r7, #8]
 1252 0028 1B68     		ldr	r3, [r3]
 1253              		.loc 2 455 7
 1254 002a DB13     		asrs	r3, r3, #15
 1255 002c 7B61     		str	r3, [r7, #20]
 456:Src/pwm_curr_fdbk.c **** #else
 457:Src/pwm_curr_fdbk.c ****     *out_buf = (*out_buf) + ((in - ((*out_buf) / 32768)) * t);
 458:Src/pwm_curr_fdbk.c ****     x = (*out_buf) / 32768;
 459:Src/pwm_curr_fdbk.c **** 
 460:Src/pwm_curr_fdbk.c **** #endif
 461:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
ARM GAS  /tmp/ccqF3GRw.s 			page 47


 462:Src/pwm_curr_fdbk.c ****   }
 463:Src/pwm_curr_fdbk.c **** #endif
 464:Src/pwm_curr_fdbk.c ****   return (x);
 1256              		.loc 2 464 10
 1257 002e 7B69     		ldr	r3, [r7, #20]
 465:Src/pwm_curr_fdbk.c **** }
 1258              		.loc 2 465 1
 1259 0030 1846     		mov	r0, r3
 1260 0032 1C37     		adds	r7, r7, #28
 1261              	.LCFI45:
 1262              		.cfi_def_cfa_offset 4
 1263 0034 BD46     		mov	sp, r7
 1264              	.LCFI46:
 1265              		.cfi_def_cfa_register 13
 1266              		@ sp needed
 1267 0036 5DF8047B 		ldr	r7, [sp], #4
 1268              	.LCFI47:
 1269              		.cfi_restore 7
 1270              		.cfi_def_cfa_offset 0
 1271 003a 7047     		bx	lr
 1272              		.cfi_endproc
 1273              	.LFE1447:
 1275              		.section	.text.PWMC_CalcPhaseCurrentsEst,"ax",%progbits
 1276              		.align	1
 1277              		.global	PWMC_CalcPhaseCurrentsEst
 1278              		.syntax unified
 1279              		.thumb
 1280              		.thumb_func
 1281              		.fpu fpv4-sp-d16
 1283              	PWMC_CalcPhaseCurrentsEst:
 1284              	.LFB1448:
 466:Src/pwm_curr_fdbk.c **** 
 467:Src/pwm_curr_fdbk.c **** #if defined (CCMRAM)
 468:Src/pwm_curr_fdbk.c **** #if defined (__ICCARM__)
 469:Src/pwm_curr_fdbk.c **** #pragma location = ".ccmram"
 470:Src/pwm_curr_fdbk.c **** #elif defined (__CC_ARM) || defined(__GNUC__)
 471:Src/pwm_curr_fdbk.c **** __attribute__( ( section ( ".ccmram" ) ) )
 472:Src/pwm_curr_fdbk.c **** #endif
 473:Src/pwm_curr_fdbk.c **** #endif
 474:Src/pwm_curr_fdbk.c **** /**
 475:Src/pwm_curr_fdbk.c ****   * @brief  Converts input currents components Iqd into estimated
 476:Src/pwm_curr_fdbk.c ****   *         currents Ia, Ib and Ic.
 477:Src/pwm_curr_fdbk.c ****   *
 478:Src/pwm_curr_fdbk.c ****   * @param  pHandle: Handler of the current instance of the PWM component.
 479:Src/pwm_curr_fdbk.c ****   * @param  Iqd: Structure that will receive Iq and Id currents.
 480:Src/pwm_curr_fdbk.c ****   * @param  hElAngledpp: Electrical angle.
 481:Src/pwm_curr_fdbk.c ****   */
 482:Src/pwm_curr_fdbk.c **** void PWMC_CalcPhaseCurrentsEst(PWMC_Handle_t *pHandle, qd_t Iqd, int16_t hElAngledpp)
 483:Src/pwm_curr_fdbk.c **** {
 1285              		.loc 2 483 1
 1286              		.cfi_startproc
 1287              		@ args = 0, pretend = 0, frame = 32
 1288              		@ frame_needed = 1, uses_anonymous_args = 0
 1289 0000 80B5     		push	{r7, lr}
 1290              	.LCFI48:
 1291              		.cfi_def_cfa_offset 8
 1292              		.cfi_offset 7, -8
ARM GAS  /tmp/ccqF3GRw.s 			page 48


 1293              		.cfi_offset 14, -4
 1294 0002 88B0     		sub	sp, sp, #32
 1295              	.LCFI49:
 1296              		.cfi_def_cfa_offset 40
 1297 0004 00AF     		add	r7, sp, #0
 1298              	.LCFI50:
 1299              		.cfi_def_cfa_register 7
 1300 0006 F860     		str	r0, [r7, #12]
 1301 0008 B960     		str	r1, [r7, #8]
 1302 000a 1346     		mov	r3, r2
 1303 000c FB80     		strh	r3, [r7, #6]	@ movhi
 484:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 485:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
 486:Src/pwm_curr_fdbk.c ****   {
 487:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 488:Src/pwm_curr_fdbk.c ****   }
 489:Src/pwm_curr_fdbk.c ****   else
 490:Src/pwm_curr_fdbk.c ****   {
 491:Src/pwm_curr_fdbk.c **** #endif
 492:Src/pwm_curr_fdbk.c ****     qd_t idq_ave;
 493:Src/pwm_curr_fdbk.c ****     alphabeta_t ialpha_beta;
 494:Src/pwm_curr_fdbk.c ****     int32_t temp1, temp2;
 495:Src/pwm_curr_fdbk.c **** 
 496:Src/pwm_curr_fdbk.c ****     idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 1304              		.loc 2 496 48
 1305 000e B7F90830 		ldrsh	r3, [r7, #8]
 1306              		.loc 2 496 26
 1307 0012 1846     		mov	r0, r3
 1308 0014 FB68     		ldr	r3, [r7, #12]
 1309 0016 03F13401 		add	r1, r3, #52
 1310              		.loc 2 496 81
 1311 001a FB68     		ldr	r3, [r7, #12]
 1312 001c B3F96E30 		ldrsh	r3, [r3, #110]
 1313              		.loc 2 496 26
 1314 0020 1A46     		mov	r2, r3
 1315 0022 FFF7FEFF 		bl	PWMC_LowPassFilter
 1316 0026 0346     		mov	r3, r0
 1317              		.loc 2 496 17
 1318 0028 1BB2     		sxth	r3, r3
 1319              		.loc 2 496 15
 1320 002a BB82     		strh	r3, [r7, #20]	@ movhi
 497:Src/pwm_curr_fdbk.c ****     idq_ave.d = (int16_t)PWMC_LowPassFilter(Iqd.d, &(pHandle->LPFIdBuf), pHandle->LPFIqd_const);
 1321              		.loc 2 497 48
 1322 002c B7F90A30 		ldrsh	r3, [r7, #10]
 1323              		.loc 2 497 26
 1324 0030 1846     		mov	r0, r3
 1325 0032 FB68     		ldr	r3, [r7, #12]
 1326 0034 03F13801 		add	r1, r3, #56
 1327              		.loc 2 497 81
 1328 0038 FB68     		ldr	r3, [r7, #12]
 1329 003a B3F96E30 		ldrsh	r3, [r3, #110]
 1330              		.loc 2 497 26
 1331 003e 1A46     		mov	r2, r3
 1332 0040 FFF7FEFF 		bl	PWMC_LowPassFilter
 1333 0044 0346     		mov	r3, r0
 1334              		.loc 2 497 17
 1335 0046 1BB2     		sxth	r3, r3
ARM GAS  /tmp/ccqF3GRw.s 			page 49


 1336              		.loc 2 497 15
 1337 0048 FB82     		strh	r3, [r7, #22]	@ movhi
 498:Src/pwm_curr_fdbk.c **** 
 499:Src/pwm_curr_fdbk.c ****     ialpha_beta = MCM_Rev_Park(idq_ave, hElAngledpp);
 1338              		.loc 2 499 19
 1339 004a B7F90630 		ldrsh	r3, [r7, #6]
 1340 004e 1946     		mov	r1, r3
 1341 0050 7869     		ldr	r0, [r7, #20]
 1342 0052 FFF7FEFF 		bl	MCM_Rev_Park
 1343 0056 0346     		mov	r3, r0
 1344 0058 3B61     		str	r3, [r7, #16]
 500:Src/pwm_curr_fdbk.c **** 
 501:Src/pwm_curr_fdbk.c ****     /* Reverse Clarke */
 502:Src/pwm_curr_fdbk.c **** 
 503:Src/pwm_curr_fdbk.c ****     /*Ia*/
 504:Src/pwm_curr_fdbk.c ****     pHandle->IaEst = ialpha_beta.alpha;
 1345              		.loc 2 504 33
 1346 005a B7F91020 		ldrsh	r2, [r7, #16]
 1347              		.loc 2 504 20
 1348 005e FB68     		ldr	r3, [r7, #12]
 1349 0060 A3F86820 		strh	r2, [r3, #104]	@ movhi
 505:Src/pwm_curr_fdbk.c **** 
 506:Src/pwm_curr_fdbk.c ****     temp1 = - ialpha_beta.alpha;
 1350              		.loc 2 506 26
 1351 0064 B7F91030 		ldrsh	r3, [r7, #16]
 1352              		.loc 2 506 11
 1353 0068 5B42     		rsbs	r3, r3, #0
 1354 006a FB61     		str	r3, [r7, #28]
 507:Src/pwm_curr_fdbk.c **** #ifndef FULL_MISRA_C_COMPLIANCY_PWM_CURR
 508:Src/pwm_curr_fdbk.c ****     //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 509:Src/pwm_curr_fdbk.c ****     temp2 = (int32_t)(ialpha_beta.beta) * ((int32_t)SQRT3FACTOR >> 15);
 1355              		.loc 2 509 34
 1356 006c B7F91230 		ldrsh	r3, [r7, #18]
 1357              		.loc 2 509 11
 1358 0070 BB61     		str	r3, [r7, #24]
 510:Src/pwm_curr_fdbk.c **** #else
 511:Src/pwm_curr_fdbk.c ****     temp2 = (int32_t)(ialpha_beta.beta) * (int32_t)SQRT3FACTOR / 32768;
 512:Src/pwm_curr_fdbk.c **** #endif
 513:Src/pwm_curr_fdbk.c **** 
 514:Src/pwm_curr_fdbk.c ****     /* Ib */
 515:Src/pwm_curr_fdbk.c ****     pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 1359              		.loc 2 515 38
 1360 0072 FB69     		ldr	r3, [r7, #28]
 1361 0074 9AB2     		uxth	r2, r3
 1362 0076 BB69     		ldr	r3, [r7, #24]
 1363 0078 9BB2     		uxth	r3, r3
 1364 007a D31A     		subs	r3, r2, r3
 1365 007c 9BB2     		uxth	r3, r3
 1366              		.loc 2 515 22
 1367 007e 1BB2     		sxth	r3, r3
 1368              		.loc 2 515 20
 1369 0080 DA0F     		lsrs	r2, r3, #31
 1370 0082 1344     		add	r3, r3, r2
 1371 0084 5B10     		asrs	r3, r3, #1
 1372 0086 1AB2     		sxth	r2, r3
 1373 0088 FB68     		ldr	r3, [r7, #12]
 1374 008a A3F86A20 		strh	r2, [r3, #106]	@ movhi
ARM GAS  /tmp/ccqF3GRw.s 			page 50


 516:Src/pwm_curr_fdbk.c **** 
 517:Src/pwm_curr_fdbk.c ****     /* Ic */
 518:Src/pwm_curr_fdbk.c ****     pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 1375              		.loc 2 518 38
 1376 008e FB69     		ldr	r3, [r7, #28]
 1377 0090 9AB2     		uxth	r2, r3
 1378 0092 BB69     		ldr	r3, [r7, #24]
 1379 0094 9BB2     		uxth	r3, r3
 1380 0096 1344     		add	r3, r3, r2
 1381 0098 9BB2     		uxth	r3, r3
 1382              		.loc 2 518 22
 1383 009a 1BB2     		sxth	r3, r3
 1384              		.loc 2 518 20
 1385 009c DA0F     		lsrs	r2, r3, #31
 1386 009e 1344     		add	r3, r3, r2
 1387 00a0 5B10     		asrs	r3, r3, #1
 1388 00a2 1AB2     		sxth	r2, r3
 1389 00a4 FB68     		ldr	r3, [r7, #12]
 1390 00a6 A3F86C20 		strh	r2, [r3, #108]	@ movhi
 519:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 520:Src/pwm_curr_fdbk.c ****   }
 521:Src/pwm_curr_fdbk.c **** #endif
 522:Src/pwm_curr_fdbk.c **** }
 1391              		.loc 2 522 1
 1392 00aa 00BF     		nop
 1393 00ac 2037     		adds	r7, r7, #32
 1394              	.LCFI51:
 1395              		.cfi_def_cfa_offset 8
 1396 00ae BD46     		mov	sp, r7
 1397              	.LCFI52:
 1398              		.cfi_def_cfa_register 13
 1399              		@ sp needed
 1400 00b0 80BD     		pop	{r7, pc}
 1401              		.cfi_endproc
 1402              	.LFE1448:
 1404              		.section	.text.PWMC_TurnOnLowSides,"ax",%progbits
 1405              		.align	1
 1406              		.weak	PWMC_TurnOnLowSides
 1407              		.syntax unified
 1408              		.thumb
 1409              		.thumb_func
 1410              		.fpu fpv4-sp-d16
 1412              	PWMC_TurnOnLowSides:
 1413              	.LFB1449:
 523:Src/pwm_curr_fdbk.c **** 
 524:Src/pwm_curr_fdbk.c **** /**
 525:Src/pwm_curr_fdbk.c ****   * @brief  Switches power stage Low Sides transistors on.
 526:Src/pwm_curr_fdbk.c ****   *
 527:Src/pwm_curr_fdbk.c ****   * This function is meant for charging boot capacitors of the driving
 528:Src/pwm_curr_fdbk.c ****   * section. It has to be called on each motor start-up when using high
 529:Src/pwm_curr_fdbk.c ****   * voltage drivers.
 530:Src/pwm_curr_fdbk.c ****   *
 531:Src/pwm_curr_fdbk.c ****   * @param  pHandle: Handler of the current instance of the PWM component.
 532:Src/pwm_curr_fdbk.c ****   * @param  ticks: Timer ticks value to be applied.
 533:Src/pwm_curr_fdbk.c ****   *                Min value: 0 (low sides ON)
 534:Src/pwm_curr_fdbk.c ****   *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
 535:Src/pwm_curr_fdbk.c ****   */
ARM GAS  /tmp/ccqF3GRw.s 			page 51


 536:Src/pwm_curr_fdbk.c **** //cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
 537:Src/pwm_curr_fdbk.c **** __weak void PWMC_TurnOnLowSides(PWMC_Handle_t *pHandle, uint32_t ticks)
 538:Src/pwm_curr_fdbk.c **** {
 1414              		.loc 2 538 1
 1415              		.cfi_startproc
 1416              		@ args = 0, pretend = 0, frame = 8
 1417              		@ frame_needed = 1, uses_anonymous_args = 0
 1418 0000 80B5     		push	{r7, lr}
 1419              	.LCFI53:
 1420              		.cfi_def_cfa_offset 8
 1421              		.cfi_offset 7, -8
 1422              		.cfi_offset 14, -4
 1423 0002 82B0     		sub	sp, sp, #8
 1424              	.LCFI54:
 1425              		.cfi_def_cfa_offset 16
 1426 0004 00AF     		add	r7, sp, #0
 1427              	.LCFI55:
 1428              		.cfi_def_cfa_register 7
 1429 0006 7860     		str	r0, [r7, #4]
 1430 0008 3960     		str	r1, [r7]
 539:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 540:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
 541:Src/pwm_curr_fdbk.c ****   {
 542:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 543:Src/pwm_curr_fdbk.c ****   }
 544:Src/pwm_curr_fdbk.c ****   else
 545:Src/pwm_curr_fdbk.c ****   {
 546:Src/pwm_curr_fdbk.c **** #endif
 547:Src/pwm_curr_fdbk.c ****     pHandle->pFctTurnOnLowSides(pHandle, ticks);
 1431              		.loc 2 547 12
 1432 000a 7B68     		ldr	r3, [r7, #4]
 1433 000c 1B69     		ldr	r3, [r3, #16]
 1434              		.loc 2 547 5
 1435 000e 3968     		ldr	r1, [r7]
 1436 0010 7868     		ldr	r0, [r7, #4]
 1437 0012 9847     		blx	r3
 1438              	.LVL7:
 548:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 549:Src/pwm_curr_fdbk.c ****   }
 550:Src/pwm_curr_fdbk.c **** #endif
 551:Src/pwm_curr_fdbk.c **** }
 1439              		.loc 2 551 1
 1440 0014 00BF     		nop
 1441 0016 0837     		adds	r7, r7, #8
 1442              	.LCFI56:
 1443              		.cfi_def_cfa_offset 8
 1444 0018 BD46     		mov	sp, r7
 1445              	.LCFI57:
 1446              		.cfi_def_cfa_register 13
 1447              		@ sp needed
 1448 001a 80BD     		pop	{r7, pc}
 1449              		.cfi_endproc
 1450              	.LFE1449:
 1452              		.section	.text.PWMC_OCP_Handler,"ax",%progbits
 1453              		.align	1
 1454              		.weak	PWMC_OCP_Handler
 1455              		.syntax unified
ARM GAS  /tmp/ccqF3GRw.s 			page 52


 1456              		.thumb
 1457              		.thumb_func
 1458              		.fpu fpv4-sp-d16
 1460              	PWMC_OCP_Handler:
 1461              	.LFB1450:
 552:Src/pwm_curr_fdbk.c **** 
 553:Src/pwm_curr_fdbk.c **** #if defined (CCMRAM)
 554:Src/pwm_curr_fdbk.c **** #if defined (__ICCARM__)
 555:Src/pwm_curr_fdbk.c **** #pragma location = ".ccmram"
 556:Src/pwm_curr_fdbk.c **** #elif defined (__CC_ARM) || defined(__GNUC__)
 557:Src/pwm_curr_fdbk.c **** __attribute__((section(".ccmram")))
 558:Src/pwm_curr_fdbk.c **** #endif
 559:Src/pwm_curr_fdbk.c **** #endif
 560:Src/pwm_curr_fdbk.c **** /*
 561:Src/pwm_curr_fdbk.c ****   * @brief  Manages HW overcurrent protection.
 562:Src/pwm_curr_fdbk.c ****   *
 563:Src/pwm_curr_fdbk.c ****   * @param  pHandle: Handler of the current instance of the PWM component.
 564:Src/pwm_curr_fdbk.c ****   */
 565:Src/pwm_curr_fdbk.c **** __weak void *PWMC_OCP_Handler(PWMC_Handle_t *pHandle)
 566:Src/pwm_curr_fdbk.c **** {
 1462              		.loc 2 566 1
 1463              		.cfi_startproc
 1464              		@ args = 0, pretend = 0, frame = 16
 1465              		@ frame_needed = 1, uses_anonymous_args = 0
 1466 0000 80B5     		push	{r7, lr}
 1467              	.LCFI58:
 1468              		.cfi_def_cfa_offset 8
 1469              		.cfi_offset 7, -8
 1470              		.cfi_offset 14, -4
 1471 0002 84B0     		sub	sp, sp, #16
 1472              	.LCFI59:
 1473              		.cfi_def_cfa_offset 24
 1474 0004 00AF     		add	r7, sp, #0
 1475              	.LCFI60:
 1476              		.cfi_def_cfa_register 7
 1477 0006 7860     		str	r0, [r7, #4]
 567:Src/pwm_curr_fdbk.c ****   void *tempPointer; //cstat !MISRAC2012-Rule-8.13
 568:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 569:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
 570:Src/pwm_curr_fdbk.c ****   {
 571:Src/pwm_curr_fdbk.c ****     tempPointer = MC_NULL;
 572:Src/pwm_curr_fdbk.c ****   }
 573:Src/pwm_curr_fdbk.c ****   else
 574:Src/pwm_curr_fdbk.c ****   {
 575:Src/pwm_curr_fdbk.c **** #endif
 576:Src/pwm_curr_fdbk.c ****     if (false == pHandle->BrakeActionLock)
 1478              		.loc 2 576 25
 1479 0008 7B68     		ldr	r3, [r7, #4]
 1480 000a 93F88330 		ldrb	r3, [r3, #131]	@ zero_extendqisi2
 1481              		.loc 2 576 15
 1482 000e 83F00103 		eor	r3, r3, #1
 1483 0012 DBB2     		uxtb	r3, r3
 1484              		.loc 2 576 8
 1485 0014 002B     		cmp	r3, #0
 1486 0016 1FD0     		beq	.L60
 577:Src/pwm_curr_fdbk.c ****     {
 578:Src/pwm_curr_fdbk.c ****       if (ES_GPIO == pHandle->LowSideOutputs)
ARM GAS  /tmp/ccqF3GRw.s 			page 53


 1487              		.loc 2 578 29
 1488 0018 7B68     		ldr	r3, [r7, #4]
 1489 001a 93F87B30 		ldrb	r3, [r3, #123]	@ zero_extendqisi2
 1490              		.loc 2 578 10
 1491 001e 022B     		cmp	r3, #2
 1492 0020 1AD1     		bne	.L60
 579:Src/pwm_curr_fdbk.c ****       {
 580:Src/pwm_curr_fdbk.c ****         LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 1493              		.loc 2 580 9
 1494 0022 7B68     		ldr	r3, [r7, #4]
 1495 0024 DA6B     		ldr	r2, [r3, #60]
 1496              		.loc 2 580 63
 1497 0026 7B68     		ldr	r3, [r7, #4]
 1498 0028 B3F84830 		ldrh	r3, [r3, #72]
 1499              		.loc 2 580 9
 1500 002c 1946     		mov	r1, r3
 1501 002e 1046     		mov	r0, r2
 1502 0030 FFF7FEFF 		bl	LL_GPIO_ResetOutputPin
 581:Src/pwm_curr_fdbk.c ****         LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 1503              		.loc 2 581 9
 1504 0034 7B68     		ldr	r3, [r7, #4]
 1505 0036 1A6C     		ldr	r2, [r3, #64]
 1506              		.loc 2 581 63
 1507 0038 7B68     		ldr	r3, [r7, #4]
 1508 003a B3F84A30 		ldrh	r3, [r3, #74]
 1509              		.loc 2 581 9
 1510 003e 1946     		mov	r1, r3
 1511 0040 1046     		mov	r0, r2
 1512 0042 FFF7FEFF 		bl	LL_GPIO_ResetOutputPin
 582:Src/pwm_curr_fdbk.c ****         LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 1513              		.loc 2 582 9
 1514 0046 7B68     		ldr	r3, [r7, #4]
 1515 0048 5A6C     		ldr	r2, [r3, #68]
 1516              		.loc 2 582 63
 1517 004a 7B68     		ldr	r3, [r7, #4]
 1518 004c B3F84C30 		ldrh	r3, [r3, #76]
 1519              		.loc 2 582 9
 1520 0050 1946     		mov	r1, r3
 1521 0052 1046     		mov	r0, r2
 1522 0054 FFF7FEFF 		bl	LL_GPIO_ResetOutputPin
 1523              	.L60:
 583:Src/pwm_curr_fdbk.c ****       }
 584:Src/pwm_curr_fdbk.c ****       else
 585:Src/pwm_curr_fdbk.c ****       {
 586:Src/pwm_curr_fdbk.c ****         /* Nothing to do */
 587:Src/pwm_curr_fdbk.c ****       }
 588:Src/pwm_curr_fdbk.c ****     }
 589:Src/pwm_curr_fdbk.c ****     else
 590:Src/pwm_curr_fdbk.c ****     {
 591:Src/pwm_curr_fdbk.c ****       /* Nothing to do */
 592:Src/pwm_curr_fdbk.c ****     }
 593:Src/pwm_curr_fdbk.c ****     pHandle->OverCurrentFlag = true;
 1524              		.loc 2 593 30
 1525 0058 7B68     		ldr	r3, [r7, #4]
 1526 005a 0122     		movs	r2, #1
 1527 005c 83F88020 		strb	r2, [r3, #128]
 594:Src/pwm_curr_fdbk.c ****     tempPointer = &(pHandle->Motor);
ARM GAS  /tmp/ccqF3GRw.s 			page 54


 1528              		.loc 2 594 17
 1529 0060 7B68     		ldr	r3, [r7, #4]
 1530 0062 7833     		adds	r3, r3, #120
 1531 0064 FB60     		str	r3, [r7, #12]
 595:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 596:Src/pwm_curr_fdbk.c ****   }
 597:Src/pwm_curr_fdbk.c **** #endif
 598:Src/pwm_curr_fdbk.c ****   return (tempPointer);
 1532              		.loc 2 598 10
 1533 0066 FB68     		ldr	r3, [r7, #12]
 599:Src/pwm_curr_fdbk.c **** }
 1534              		.loc 2 599 1
 1535 0068 1846     		mov	r0, r3
 1536 006a 1037     		adds	r7, r7, #16
 1537              	.LCFI61:
 1538              		.cfi_def_cfa_offset 8
 1539 006c BD46     		mov	sp, r7
 1540              	.LCFI62:
 1541              		.cfi_def_cfa_register 13
 1542              		@ sp needed
 1543 006e 80BD     		pop	{r7, pc}
 1544              		.cfi_endproc
 1545              	.LFE1450:
 1547              		.section	.text.PWMC_DP_Handler,"ax",%progbits
 1548              		.align	1
 1549              		.weak	PWMC_DP_Handler
 1550              		.syntax unified
 1551              		.thumb
 1552              		.thumb_func
 1553              		.fpu fpv4-sp-d16
 1555              	PWMC_DP_Handler:
 1556              	.LFB1451:
 600:Src/pwm_curr_fdbk.c **** 
 601:Src/pwm_curr_fdbk.c **** #if defined (CCMRAM)
 602:Src/pwm_curr_fdbk.c **** #if defined (__ICCARM__)
 603:Src/pwm_curr_fdbk.c **** #pragma location = ".ccmram"
 604:Src/pwm_curr_fdbk.c **** #elif defined (__CC_ARM) || defined(__GNUC__)
 605:Src/pwm_curr_fdbk.c **** __attribute__((section(".ccmram")))
 606:Src/pwm_curr_fdbk.c **** #endif
 607:Src/pwm_curr_fdbk.c **** #endif
 608:Src/pwm_curr_fdbk.c **** /*
 609:Src/pwm_curr_fdbk.c ****   * @brief  manages driver protection.
 610:Src/pwm_curr_fdbk.c ****   *
 611:Src/pwm_curr_fdbk.c ****   * @param  pHandle: Handler of the current instance of the PWM component.
 612:Src/pwm_curr_fdbk.c ****   */
 613:Src/pwm_curr_fdbk.c **** __weak void *PWMC_DP_Handler(PWMC_Handle_t *pHandle)
 614:Src/pwm_curr_fdbk.c **** {
 1557              		.loc 2 614 1
 1558              		.cfi_startproc
 1559              		@ args = 0, pretend = 0, frame = 16
 1560              		@ frame_needed = 1, uses_anonymous_args = 0
 1561 0000 80B5     		push	{r7, lr}
 1562              	.LCFI63:
 1563              		.cfi_def_cfa_offset 8
 1564              		.cfi_offset 7, -8
 1565              		.cfi_offset 14, -4
 1566 0002 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/ccqF3GRw.s 			page 55


 1567              	.LCFI64:
 1568              		.cfi_def_cfa_offset 24
 1569 0004 00AF     		add	r7, sp, #0
 1570              	.LCFI65:
 1571              		.cfi_def_cfa_register 7
 1572 0006 7860     		str	r0, [r7, #4]
 615:Src/pwm_curr_fdbk.c ****   void *tempPointer; //cstat !MISRAC2012-Rule-8.13
 616:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 617:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
 618:Src/pwm_curr_fdbk.c ****   {
 619:Src/pwm_curr_fdbk.c ****     tempPointer = MC_NULL;
 620:Src/pwm_curr_fdbk.c ****   }
 621:Src/pwm_curr_fdbk.c ****   else
 622:Src/pwm_curr_fdbk.c ****   {
 623:Src/pwm_curr_fdbk.c **** #endif
 624:Src/pwm_curr_fdbk.c ****     if (false == pHandle->BrakeActionLock)
 1573              		.loc 2 624 25
 1574 0008 7B68     		ldr	r3, [r7, #4]
 1575 000a 93F88330 		ldrb	r3, [r3, #131]	@ zero_extendqisi2
 1576              		.loc 2 624 15
 1577 000e 83F00103 		eor	r3, r3, #1
 1578 0012 DBB2     		uxtb	r3, r3
 1579              		.loc 2 624 8
 1580 0014 002B     		cmp	r3, #0
 1581 0016 1FD0     		beq	.L63
 625:Src/pwm_curr_fdbk.c ****     {
 626:Src/pwm_curr_fdbk.c ****       if (ES_GPIO == pHandle->LowSideOutputs)
 1582              		.loc 2 626 29
 1583 0018 7B68     		ldr	r3, [r7, #4]
 1584 001a 93F87B30 		ldrb	r3, [r3, #123]	@ zero_extendqisi2
 1585              		.loc 2 626 10
 1586 001e 022B     		cmp	r3, #2
 1587 0020 1AD1     		bne	.L63
 627:Src/pwm_curr_fdbk.c ****       {
 628:Src/pwm_curr_fdbk.c ****         LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 1588              		.loc 2 628 9
 1589 0022 7B68     		ldr	r3, [r7, #4]
 1590 0024 DA6B     		ldr	r2, [r3, #60]
 1591              		.loc 2 628 63
 1592 0026 7B68     		ldr	r3, [r7, #4]
 1593 0028 B3F84830 		ldrh	r3, [r3, #72]
 1594              		.loc 2 628 9
 1595 002c 1946     		mov	r1, r3
 1596 002e 1046     		mov	r0, r2
 1597 0030 FFF7FEFF 		bl	LL_GPIO_ResetOutputPin
 629:Src/pwm_curr_fdbk.c ****         LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 1598              		.loc 2 629 9
 1599 0034 7B68     		ldr	r3, [r7, #4]
 1600 0036 1A6C     		ldr	r2, [r3, #64]
 1601              		.loc 2 629 63
 1602 0038 7B68     		ldr	r3, [r7, #4]
 1603 003a B3F84A30 		ldrh	r3, [r3, #74]
 1604              		.loc 2 629 9
 1605 003e 1946     		mov	r1, r3
 1606 0040 1046     		mov	r0, r2
 1607 0042 FFF7FEFF 		bl	LL_GPIO_ResetOutputPin
 630:Src/pwm_curr_fdbk.c ****         LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
ARM GAS  /tmp/ccqF3GRw.s 			page 56


 1608              		.loc 2 630 9
 1609 0046 7B68     		ldr	r3, [r7, #4]
 1610 0048 5A6C     		ldr	r2, [r3, #68]
 1611              		.loc 2 630 63
 1612 004a 7B68     		ldr	r3, [r7, #4]
 1613 004c B3F84C30 		ldrh	r3, [r3, #76]
 1614              		.loc 2 630 9
 1615 0050 1946     		mov	r1, r3
 1616 0052 1046     		mov	r0, r2
 1617 0054 FFF7FEFF 		bl	LL_GPIO_ResetOutputPin
 1618              	.L63:
 631:Src/pwm_curr_fdbk.c ****       }
 632:Src/pwm_curr_fdbk.c ****       else
 633:Src/pwm_curr_fdbk.c ****       {
 634:Src/pwm_curr_fdbk.c ****         /* Nothing to do */
 635:Src/pwm_curr_fdbk.c ****       }
 636:Src/pwm_curr_fdbk.c ****     }
 637:Src/pwm_curr_fdbk.c ****     else
 638:Src/pwm_curr_fdbk.c ****     {
 639:Src/pwm_curr_fdbk.c ****       /* Nothing to do */
 640:Src/pwm_curr_fdbk.c ****     }
 641:Src/pwm_curr_fdbk.c ****     pHandle->driverProtectionFlag = true;
 1619              		.loc 2 641 35
 1620 0058 7B68     		ldr	r3, [r7, #4]
 1621 005a 0122     		movs	r2, #1
 1622 005c 83F88220 		strb	r2, [r3, #130]
 642:Src/pwm_curr_fdbk.c ****     tempPointer = &(pHandle->Motor);
 1623              		.loc 2 642 17
 1624 0060 7B68     		ldr	r3, [r7, #4]
 1625 0062 7833     		adds	r3, r3, #120
 1626 0064 FB60     		str	r3, [r7, #12]
 643:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 644:Src/pwm_curr_fdbk.c ****   }
 645:Src/pwm_curr_fdbk.c **** #endif
 646:Src/pwm_curr_fdbk.c ****   return (tempPointer);
 1627              		.loc 2 646 10
 1628 0066 FB68     		ldr	r3, [r7, #12]
 647:Src/pwm_curr_fdbk.c **** }
 1629              		.loc 2 647 1
 1630 0068 1846     		mov	r0, r3
 1631 006a 1037     		adds	r7, r7, #16
 1632              	.LCFI66:
 1633              		.cfi_def_cfa_offset 8
 1634 006c BD46     		mov	sp, r7
 1635              	.LCFI67:
 1636              		.cfi_def_cfa_register 13
 1637              		@ sp needed
 1638 006e 80BD     		pop	{r7, pc}
 1639              		.cfi_endproc
 1640              	.LFE1451:
 1642              		.section	.text.PWMC_OVP_Handler,"ax",%progbits
 1643              		.align	1
 1644              		.weak	PWMC_OVP_Handler
 1645              		.syntax unified
 1646              		.thumb
 1647              		.thumb_func
 1648              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccqF3GRw.s 			page 57


 1650              	PWMC_OVP_Handler:
 1651              	.LFB1452:
 648:Src/pwm_curr_fdbk.c **** 
 649:Src/pwm_curr_fdbk.c **** #if defined (CCMRAM)
 650:Src/pwm_curr_fdbk.c **** #if defined (__ICCARM__)
 651:Src/pwm_curr_fdbk.c **** #pragma location = ".ccmram"
 652:Src/pwm_curr_fdbk.c **** #elif defined (__CC_ARM) || defined(__GNUC__)
 653:Src/pwm_curr_fdbk.c **** __attribute__((section(".ccmram")))
 654:Src/pwm_curr_fdbk.c **** #endif
 655:Src/pwm_curr_fdbk.c **** #endif
 656:Src/pwm_curr_fdbk.c **** /*
 657:Src/pwm_curr_fdbk.c ****   * @brief  Manages HW overvoltage protection.
 658:Src/pwm_curr_fdbk.c ****   *
 659:Src/pwm_curr_fdbk.c ****   * @param  pHandle: Handler of the current instance of the PWM component.
 660:Src/pwm_curr_fdbk.c ****   *         TIMx: timer used for PWM generation
 661:Src/pwm_curr_fdbk.c ****   */
 662:Src/pwm_curr_fdbk.c **** __weak void *PWMC_OVP_Handler(PWMC_Handle_t *pHandle, TIM_TypeDef *TIMx)
 663:Src/pwm_curr_fdbk.c **** {
 1652              		.loc 2 663 1
 1653              		.cfi_startproc
 1654              		@ args = 0, pretend = 0, frame = 16
 1655              		@ frame_needed = 1, uses_anonymous_args = 0
 1656              		@ link register save eliminated.
 1657 0000 80B4     		push	{r7}
 1658              	.LCFI68:
 1659              		.cfi_def_cfa_offset 4
 1660              		.cfi_offset 7, -4
 1661 0002 85B0     		sub	sp, sp, #20
 1662              	.LCFI69:
 1663              		.cfi_def_cfa_offset 24
 1664 0004 00AF     		add	r7, sp, #0
 1665              	.LCFI70:
 1666              		.cfi_def_cfa_register 7
 1667 0006 7860     		str	r0, [r7, #4]
 1668 0008 3960     		str	r1, [r7]
 664:Src/pwm_curr_fdbk.c ****   void *tempPointer; //cstat !MISRAC2012-Rule-8.13
 665:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 666:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
 667:Src/pwm_curr_fdbk.c ****   {
 668:Src/pwm_curr_fdbk.c ****     tempPointer = MC_NULL;
 669:Src/pwm_curr_fdbk.c ****   }
 670:Src/pwm_curr_fdbk.c ****   else
 671:Src/pwm_curr_fdbk.c ****   {
 672:Src/pwm_curr_fdbk.c **** #endif
 673:Src/pwm_curr_fdbk.c ****     TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 1669              		.loc 2 673 16
 1670 000a 3B68     		ldr	r3, [r7]
 1671 000c 5B6C     		ldr	r3, [r3, #68]
 1672 000e 43F48062 		orr	r2, r3, #1024
 1673 0012 3B68     		ldr	r3, [r7]
 1674 0014 5A64     		str	r2, [r3, #68]
 674:Src/pwm_curr_fdbk.c ****     pHandle->OverVoltageFlag = true;
 1675              		.loc 2 674 30
 1676 0016 7B68     		ldr	r3, [r7, #4]
 1677 0018 0122     		movs	r2, #1
 1678 001a 83F88120 		strb	r2, [r3, #129]
 675:Src/pwm_curr_fdbk.c ****     pHandle->BrakeActionLock = true;
ARM GAS  /tmp/ccqF3GRw.s 			page 58


 1679              		.loc 2 675 30
 1680 001e 7B68     		ldr	r3, [r7, #4]
 1681 0020 0122     		movs	r2, #1
 1682 0022 83F88320 		strb	r2, [r3, #131]
 676:Src/pwm_curr_fdbk.c ****     tempPointer = &(pHandle->Motor);
 1683              		.loc 2 676 17
 1684 0026 7B68     		ldr	r3, [r7, #4]
 1685 0028 7833     		adds	r3, r3, #120
 1686 002a FB60     		str	r3, [r7, #12]
 677:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 678:Src/pwm_curr_fdbk.c ****   }
 679:Src/pwm_curr_fdbk.c **** #endif
 680:Src/pwm_curr_fdbk.c ****   return (tempPointer);
 1687              		.loc 2 680 10
 1688 002c FB68     		ldr	r3, [r7, #12]
 681:Src/pwm_curr_fdbk.c **** }
 1689              		.loc 2 681 1
 1690 002e 1846     		mov	r0, r3
 1691 0030 1437     		adds	r7, r7, #20
 1692              	.LCFI71:
 1693              		.cfi_def_cfa_offset 4
 1694 0032 BD46     		mov	sp, r7
 1695              	.LCFI72:
 1696              		.cfi_def_cfa_register 13
 1697              		@ sp needed
 1698 0034 5DF8047B 		ldr	r7, [sp], #4
 1699              	.LCFI73:
 1700              		.cfi_restore 7
 1701              		.cfi_def_cfa_offset 0
 1702 0038 7047     		bx	lr
 1703              		.cfi_endproc
 1704              	.LFE1452:
 1706              		.section	.text.PWMC_IsFaultOccurred,"ax",%progbits
 1707              		.align	1
 1708              		.weak	PWMC_IsFaultOccurred
 1709              		.syntax unified
 1710              		.thumb
 1711              		.thumb_func
 1712              		.fpu fpv4-sp-d16
 1714              	PWMC_IsFaultOccurred:
 1715              	.LFB1453:
 682:Src/pwm_curr_fdbk.c **** 
 683:Src/pwm_curr_fdbk.c **** /*
 684:Src/pwm_curr_fdbk.c ****   * @brief  Checks if an overcurrent occurred since last call.
 685:Src/pwm_curr_fdbk.c ****   *
 686:Src/pwm_curr_fdbk.c ****   * @param  pHdl: Handler of the current instance of the PWM component.
 687:Src/pwm_curr_fdbk.c ****   * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
 688:Src/pwm_curr_fdbk.c ****   *                  detected since last method call, #MC_NO_FAULTS otherwise.
 689:Src/pwm_curr_fdbk.c ****   */
 690:Src/pwm_curr_fdbk.c **** __weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
 691:Src/pwm_curr_fdbk.c **** {
 1716              		.loc 2 691 1
 1717              		.cfi_startproc
 1718              		@ args = 0, pretend = 0, frame = 16
 1719              		@ frame_needed = 1, uses_anonymous_args = 0
 1720              		@ link register save eliminated.
 1721 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccqF3GRw.s 			page 59


 1722              	.LCFI74:
 1723              		.cfi_def_cfa_offset 4
 1724              		.cfi_offset 7, -4
 1725 0002 85B0     		sub	sp, sp, #20
 1726              	.LCFI75:
 1727              		.cfi_def_cfa_offset 24
 1728 0004 00AF     		add	r7, sp, #0
 1729              	.LCFI76:
 1730              		.cfi_def_cfa_register 7
 1731 0006 7860     		str	r0, [r7, #4]
 692:Src/pwm_curr_fdbk.c ****   uint16_t retVal = MC_NO_FAULTS;
 1732              		.loc 2 692 12
 1733 0008 0023     		movs	r3, #0
 1734 000a FB81     		strh	r3, [r7, #14]	@ movhi
 693:Src/pwm_curr_fdbk.c **** 
 694:Src/pwm_curr_fdbk.c ****   if (true == pHandle->OverVoltageFlag)
 1735              		.loc 2 694 22
 1736 000c 7B68     		ldr	r3, [r7, #4]
 1737 000e 93F88130 		ldrb	r3, [r3, #129]	@ zero_extendqisi2
 1738              		.loc 2 694 6
 1739 0012 002B     		cmp	r3, #0
 1740 0014 05D0     		beq	.L68
 695:Src/pwm_curr_fdbk.c ****   {
 696:Src/pwm_curr_fdbk.c ****     retVal = MC_OVER_VOLT;
 1741              		.loc 2 696 12
 1742 0016 0223     		movs	r3, #2
 1743 0018 FB81     		strh	r3, [r7, #14]	@ movhi
 697:Src/pwm_curr_fdbk.c ****     pHandle->OverVoltageFlag = false;
 1744              		.loc 2 697 30
 1745 001a 7B68     		ldr	r3, [r7, #4]
 1746 001c 0022     		movs	r2, #0
 1747 001e 83F88120 		strb	r2, [r3, #129]
 1748              	.L68:
 698:Src/pwm_curr_fdbk.c ****   }
 699:Src/pwm_curr_fdbk.c ****   else
 700:Src/pwm_curr_fdbk.c ****   {
 701:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 702:Src/pwm_curr_fdbk.c ****   }
 703:Src/pwm_curr_fdbk.c **** 
 704:Src/pwm_curr_fdbk.c ****   if (true == pHandle->OverCurrentFlag)
 1749              		.loc 2 704 22
 1750 0022 7B68     		ldr	r3, [r7, #4]
 1751 0024 93F88030 		ldrb	r3, [r3, #128]	@ zero_extendqisi2
 1752              		.loc 2 704 6
 1753 0028 002B     		cmp	r3, #0
 1754 002a 07D0     		beq	.L69
 705:Src/pwm_curr_fdbk.c ****   {
 706:Src/pwm_curr_fdbk.c ****     retVal |= MC_OVER_CURR;
 1755              		.loc 2 706 12
 1756 002c FB89     		ldrh	r3, [r7, #14]	@ movhi
 1757 002e 43F04003 		orr	r3, r3, #64
 1758 0032 FB81     		strh	r3, [r7, #14]	@ movhi
 707:Src/pwm_curr_fdbk.c ****     pHandle->OverCurrentFlag = false;
 1759              		.loc 2 707 30
 1760 0034 7B68     		ldr	r3, [r7, #4]
 1761 0036 0022     		movs	r2, #0
 1762 0038 83F88020 		strb	r2, [r3, #128]
ARM GAS  /tmp/ccqF3GRw.s 			page 60


 1763              	.L69:
 708:Src/pwm_curr_fdbk.c ****   }
 709:Src/pwm_curr_fdbk.c ****   else
 710:Src/pwm_curr_fdbk.c ****   {
 711:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 712:Src/pwm_curr_fdbk.c ****   }
 713:Src/pwm_curr_fdbk.c **** 
 714:Src/pwm_curr_fdbk.c ****   if (true == pHandle->driverProtectionFlag)
 1764              		.loc 2 714 22
 1765 003c 7B68     		ldr	r3, [r7, #4]
 1766 003e 93F88230 		ldrb	r3, [r3, #130]	@ zero_extendqisi2
 1767              		.loc 2 714 6
 1768 0042 002B     		cmp	r3, #0
 1769 0044 07D0     		beq	.L70
 715:Src/pwm_curr_fdbk.c ****   {
 716:Src/pwm_curr_fdbk.c ****     retVal |= MC_DP_FAULT;
 1770              		.loc 2 716 12
 1771 0046 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1772 0048 43F48063 		orr	r3, r3, #1024
 1773 004c FB81     		strh	r3, [r7, #14]	@ movhi
 717:Src/pwm_curr_fdbk.c ****     pHandle->driverProtectionFlag = false;
 1774              		.loc 2 717 35
 1775 004e 7B68     		ldr	r3, [r7, #4]
 1776 0050 0022     		movs	r2, #0
 1777 0052 83F88220 		strb	r2, [r3, #130]
 1778              	.L70:
 718:Src/pwm_curr_fdbk.c ****   }
 719:Src/pwm_curr_fdbk.c ****   else
 720:Src/pwm_curr_fdbk.c ****   {
 721:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 722:Src/pwm_curr_fdbk.c ****   }
 723:Src/pwm_curr_fdbk.c **** 
 724:Src/pwm_curr_fdbk.c ****   return (retVal);
 1779              		.loc 2 724 10
 1780 0056 FB89     		ldrh	r3, [r7, #14]
 725:Src/pwm_curr_fdbk.c **** }
 1781              		.loc 2 725 1
 1782 0058 1846     		mov	r0, r3
 1783 005a 1437     		adds	r7, r7, #20
 1784              	.LCFI77:
 1785              		.cfi_def_cfa_offset 4
 1786 005c BD46     		mov	sp, r7
 1787              	.LCFI78:
 1788              		.cfi_def_cfa_register 13
 1789              		@ sp needed
 1790 005e 5DF8047B 		ldr	r7, [sp], #4
 1791              	.LCFI79:
 1792              		.cfi_restore 7
 1793              		.cfi_def_cfa_offset 0
 1794 0062 7047     		bx	lr
 1795              		.cfi_endproc
 1796              	.LFE1453:
 1798              		.section	.text.PWMC_OCPSetReferenceVoltage,"ax",%progbits
 1799              		.align	1
 1800              		.weak	PWMC_OCPSetReferenceVoltage
 1801              		.syntax unified
 1802              		.thumb
ARM GAS  /tmp/ccqF3GRw.s 			page 61


 1803              		.thumb_func
 1804              		.fpu fpv4-sp-d16
 1806              	PWMC_OCPSetReferenceVoltage:
 1807              	.LFB1454:
 726:Src/pwm_curr_fdbk.c **** 
 727:Src/pwm_curr_fdbk.c **** /**
 728:Src/pwm_curr_fdbk.c ****   * @brief  Sets the over current threshold through the DAC reference voltage.
 729:Src/pwm_curr_fdbk.c ****   *
 730:Src/pwm_curr_fdbk.c ****   * @param  pHandle:  Handler of the current instance of the PWM component.
 731:Src/pwm_curr_fdbk.c ****   * @param  hDACVref: Value of DAC reference voltage to be applied expressed as a 16bit unsigned in
 732:Src/pwm_curr_fdbk.c ****   *					  Min value: 0 (0 V)
 733:Src/pwm_curr_fdbk.c ****   *                	  Max value: 65536 (VDD_DAC)
 734:Src/pwm_curr_fdbk.c ****   */
 735:Src/pwm_curr_fdbk.c **** //cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
 736:Src/pwm_curr_fdbk.c **** __weak void PWMC_OCPSetReferenceVoltage(PWMC_Handle_t *pHandle, uint16_t hDACVref)
 737:Src/pwm_curr_fdbk.c **** {
 1808              		.loc 2 737 1
 1809              		.cfi_startproc
 1810              		@ args = 0, pretend = 0, frame = 8
 1811              		@ frame_needed = 1, uses_anonymous_args = 0
 1812 0000 80B5     		push	{r7, lr}
 1813              	.LCFI80:
 1814              		.cfi_def_cfa_offset 8
 1815              		.cfi_offset 7, -8
 1816              		.cfi_offset 14, -4
 1817 0002 82B0     		sub	sp, sp, #8
 1818              	.LCFI81:
 1819              		.cfi_def_cfa_offset 16
 1820 0004 00AF     		add	r7, sp, #0
 1821              	.LCFI82:
 1822              		.cfi_def_cfa_register 7
 1823 0006 7860     		str	r0, [r7, #4]
 1824 0008 0B46     		mov	r3, r1
 1825 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 738:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 739:Src/pwm_curr_fdbk.c ****   if ((MC_NULL == pHandle) || (MC_NULL == pHandle->pFctOCPSetReferenceVoltage))
 740:Src/pwm_curr_fdbk.c ****   {
 741:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 742:Src/pwm_curr_fdbk.c ****   }
 743:Src/pwm_curr_fdbk.c ****   else
 744:Src/pwm_curr_fdbk.c ****   {
 745:Src/pwm_curr_fdbk.c **** #endif
 746:Src/pwm_curr_fdbk.c ****     pHandle->pFctOCPSetReferenceVoltage(pHandle, hDACVref);
 1826              		.loc 2 746 12
 1827 000c 7B68     		ldr	r3, [r7, #4]
 1828 000e 9B69     		ldr	r3, [r3, #24]
 1829              		.loc 2 746 5
 1830 0010 7A88     		ldrh	r2, [r7, #2]
 1831 0012 1146     		mov	r1, r2
 1832 0014 7868     		ldr	r0, [r7, #4]
 1833 0016 9847     		blx	r3
 1834              	.LVL8:
 747:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 748:Src/pwm_curr_fdbk.c ****   }
 749:Src/pwm_curr_fdbk.c **** #endif
 750:Src/pwm_curr_fdbk.c **** }
 1835              		.loc 2 750 1
ARM GAS  /tmp/ccqF3GRw.s 			page 62


 1836 0018 00BF     		nop
 1837 001a 0837     		adds	r7, r7, #8
 1838              	.LCFI83:
 1839              		.cfi_def_cfa_offset 8
 1840 001c BD46     		mov	sp, r7
 1841              	.LCFI84:
 1842              		.cfi_def_cfa_register 13
 1843              		@ sp needed
 1844 001e 80BD     		pop	{r7, pc}
 1845              		.cfi_endproc
 1846              	.LFE1454:
 1848              		.section	.text.PWMC_DPWM_ModeEnable,"ax",%progbits
 1849              		.align	1
 1850              		.weak	PWMC_DPWM_ModeEnable
 1851              		.syntax unified
 1852              		.thumb
 1853              		.thumb_func
 1854              		.fpu fpv4-sp-d16
 1856              	PWMC_DPWM_ModeEnable:
 1857              	.LFB1455:
 751:Src/pwm_curr_fdbk.c **** 
 752:Src/pwm_curr_fdbk.c **** /** @brief Enables Discontinuous PWM mode using the @p pHandle PWMC component.
 753:Src/pwm_curr_fdbk.c ****   *
 754:Src/pwm_curr_fdbk.c ****   */
 755:Src/pwm_curr_fdbk.c **** __weak void PWMC_DPWM_ModeEnable(PWMC_Handle_t *pHandle)
 756:Src/pwm_curr_fdbk.c **** {
 1858              		.loc 2 756 1
 1859              		.cfi_startproc
 1860              		@ args = 0, pretend = 0, frame = 8
 1861              		@ frame_needed = 1, uses_anonymous_args = 0
 1862              		@ link register save eliminated.
 1863 0000 80B4     		push	{r7}
 1864              	.LCFI85:
 1865              		.cfi_def_cfa_offset 4
 1866              		.cfi_offset 7, -4
 1867 0002 83B0     		sub	sp, sp, #12
 1868              	.LCFI86:
 1869              		.cfi_def_cfa_offset 16
 1870 0004 00AF     		add	r7, sp, #0
 1871              	.LCFI87:
 1872              		.cfi_def_cfa_register 7
 1873 0006 7860     		str	r0, [r7, #4]
 757:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 758:Src/pwm_curr_fdbk.c ****   if (MC_NULL ==  pHandle)
 759:Src/pwm_curr_fdbk.c ****   {
 760:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 761:Src/pwm_curr_fdbk.c ****   }
 762:Src/pwm_curr_fdbk.c ****   else
 763:Src/pwm_curr_fdbk.c ****   {
 764:Src/pwm_curr_fdbk.c **** #endif
 765:Src/pwm_curr_fdbk.c ****     pHandle->DPWM_Mode = true;
 1874              		.loc 2 765 24
 1875 0008 7B68     		ldr	r3, [r7, #4]
 1876 000a 0122     		movs	r2, #1
 1877 000c 83F87D20 		strb	r2, [r3, #125]
 766:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 767:Src/pwm_curr_fdbk.c ****   }
ARM GAS  /tmp/ccqF3GRw.s 			page 63


 768:Src/pwm_curr_fdbk.c **** #endif
 769:Src/pwm_curr_fdbk.c **** }
 1878              		.loc 2 769 1
 1879 0010 00BF     		nop
 1880 0012 0C37     		adds	r7, r7, #12
 1881              	.LCFI88:
 1882              		.cfi_def_cfa_offset 4
 1883 0014 BD46     		mov	sp, r7
 1884              	.LCFI89:
 1885              		.cfi_def_cfa_register 13
 1886              		@ sp needed
 1887 0016 5DF8047B 		ldr	r7, [sp], #4
 1888              	.LCFI90:
 1889              		.cfi_restore 7
 1890              		.cfi_def_cfa_offset 0
 1891 001a 7047     		bx	lr
 1892              		.cfi_endproc
 1893              	.LFE1455:
 1895              		.section	.text.PWMC_DPWM_ModeDisable,"ax",%progbits
 1896              		.align	1
 1897              		.weak	PWMC_DPWM_ModeDisable
 1898              		.syntax unified
 1899              		.thumb
 1900              		.thumb_func
 1901              		.fpu fpv4-sp-d16
 1903              	PWMC_DPWM_ModeDisable:
 1904              	.LFB1456:
 770:Src/pwm_curr_fdbk.c **** 
 771:Src/pwm_curr_fdbk.c **** /** @brief Disables Discontinuous PWM mode using the @p pHandle PWMC component.
 772:Src/pwm_curr_fdbk.c ****   *
 773:Src/pwm_curr_fdbk.c ****   */
 774:Src/pwm_curr_fdbk.c **** __weak void PWMC_DPWM_ModeDisable(PWMC_Handle_t *pHandle)
 775:Src/pwm_curr_fdbk.c **** {
 1905              		.loc 2 775 1
 1906              		.cfi_startproc
 1907              		@ args = 0, pretend = 0, frame = 8
 1908              		@ frame_needed = 1, uses_anonymous_args = 0
 1909              		@ link register save eliminated.
 1910 0000 80B4     		push	{r7}
 1911              	.LCFI91:
 1912              		.cfi_def_cfa_offset 4
 1913              		.cfi_offset 7, -4
 1914 0002 83B0     		sub	sp, sp, #12
 1915              	.LCFI92:
 1916              		.cfi_def_cfa_offset 16
 1917 0004 00AF     		add	r7, sp, #0
 1918              	.LCFI93:
 1919              		.cfi_def_cfa_register 7
 1920 0006 7860     		str	r0, [r7, #4]
 776:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 777:Src/pwm_curr_fdbk.c ****   if (MC_NULL ==  pHandle)
 778:Src/pwm_curr_fdbk.c ****   {
 779:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 780:Src/pwm_curr_fdbk.c ****   }
 781:Src/pwm_curr_fdbk.c ****   else
 782:Src/pwm_curr_fdbk.c ****   {
 783:Src/pwm_curr_fdbk.c **** #endif
ARM GAS  /tmp/ccqF3GRw.s 			page 64


 784:Src/pwm_curr_fdbk.c ****     pHandle->DPWM_Mode = false;
 1921              		.loc 2 784 24
 1922 0008 7B68     		ldr	r3, [r7, #4]
 1923 000a 0022     		movs	r2, #0
 1924 000c 83F87D20 		strb	r2, [r3, #125]
 785:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 786:Src/pwm_curr_fdbk.c ****   }
 787:Src/pwm_curr_fdbk.c **** #endif
 788:Src/pwm_curr_fdbk.c **** }
 1925              		.loc 2 788 1
 1926 0010 00BF     		nop
 1927 0012 0C37     		adds	r7, r7, #12
 1928              	.LCFI94:
 1929              		.cfi_def_cfa_offset 4
 1930 0014 BD46     		mov	sp, r7
 1931              	.LCFI95:
 1932              		.cfi_def_cfa_register 13
 1933              		@ sp needed
 1934 0016 5DF8047B 		ldr	r7, [sp], #4
 1935              	.LCFI96:
 1936              		.cfi_restore 7
 1937              		.cfi_def_cfa_offset 0
 1938 001a 7047     		bx	lr
 1939              		.cfi_endproc
 1940              	.LFE1456:
 1942              		.section	.text.PWMC_GetDPWM_Mode,"ax",%progbits
 1943              		.align	1
 1944              		.weak	PWMC_GetDPWM_Mode
 1945              		.syntax unified
 1946              		.thumb
 1947              		.thumb_func
 1948              		.fpu fpv4-sp-d16
 1950              	PWMC_GetDPWM_Mode:
 1951              	.LFB1457:
 789:Src/pwm_curr_fdbk.c **** 
 790:Src/pwm_curr_fdbk.c **** /** @brief  Returns the status of the Discontinuous PWM Mode stored in the @p pHandle PWMC componen
 791:Src/pwm_curr_fdbk.c ****   *
 792:Src/pwm_curr_fdbk.c ****   * @retval true if DPWM Mode is enabled, **false** otherwise.
 793:Src/pwm_curr_fdbk.c ****   */
 794:Src/pwm_curr_fdbk.c **** //cstat !MISRAC2012-Rule-8.13
 795:Src/pwm_curr_fdbk.c **** __weak bool PWMC_GetDPWM_Mode(PWMC_Handle_t *pHandle)
 796:Src/pwm_curr_fdbk.c **** {
 1952              		.loc 2 796 1
 1953              		.cfi_startproc
 1954              		@ args = 0, pretend = 0, frame = 8
 1955              		@ frame_needed = 1, uses_anonymous_args = 0
 1956              		@ link register save eliminated.
 1957 0000 80B4     		push	{r7}
 1958              	.LCFI97:
 1959              		.cfi_def_cfa_offset 4
 1960              		.cfi_offset 7, -4
 1961 0002 83B0     		sub	sp, sp, #12
 1962              	.LCFI98:
 1963              		.cfi_def_cfa_offset 16
 1964 0004 00AF     		add	r7, sp, #0
 1965              	.LCFI99:
 1966              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccqF3GRw.s 			page 65


 1967 0006 7860     		str	r0, [r7, #4]
 797:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 798:Src/pwm_curr_fdbk.c ****   return ((MC_NULL == pHandle) ? false : pHandle->DPWM_Mode);
 799:Src/pwm_curr_fdbk.c **** #else
 800:Src/pwm_curr_fdbk.c ****   return (pHandle->DPWM_Mode);
 1968              		.loc 2 800 18
 1969 0008 7B68     		ldr	r3, [r7, #4]
 1970 000a 93F87D30 		ldrb	r3, [r3, #125]	@ zero_extendqisi2
 801:Src/pwm_curr_fdbk.c **** #endif
 802:Src/pwm_curr_fdbk.c **** }
 1971              		.loc 2 802 1
 1972 000e 1846     		mov	r0, r3
 1973 0010 0C37     		adds	r7, r7, #12
 1974              	.LCFI100:
 1975              		.cfi_def_cfa_offset 4
 1976 0012 BD46     		mov	sp, r7
 1977              	.LCFI101:
 1978              		.cfi_def_cfa_register 13
 1979              		@ sp needed
 1980 0014 5DF8047B 		ldr	r7, [sp], #4
 1981              	.LCFI102:
 1982              		.cfi_restore 7
 1983              		.cfi_def_cfa_offset 0
 1984 0018 7047     		bx	lr
 1985              		.cfi_endproc
 1986              	.LFE1457:
 1988              		.section	.text.PWMC_RLDetectionModeEnable,"ax",%progbits
 1989              		.align	1
 1990              		.weak	PWMC_RLDetectionModeEnable
 1991              		.syntax unified
 1992              		.thumb
 1993              		.thumb_func
 1994              		.fpu fpv4-sp-d16
 1996              	PWMC_RLDetectionModeEnable:
 1997              	.LFB1458:
 803:Src/pwm_curr_fdbk.c **** 
 804:Src/pwm_curr_fdbk.c **** /** @brief  Enables the RL detection mode by calling the function in @p pHandle PWMC component.
 805:Src/pwm_curr_fdbk.c ****   *
 806:Src/pwm_curr_fdbk.c ****   */
 807:Src/pwm_curr_fdbk.c **** //cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
 808:Src/pwm_curr_fdbk.c **** __weak void PWMC_RLDetectionModeEnable(PWMC_Handle_t *pHandle)
 809:Src/pwm_curr_fdbk.c **** {
 1998              		.loc 2 809 1
 1999              		.cfi_startproc
 2000              		@ args = 0, pretend = 0, frame = 8
 2001              		@ frame_needed = 1, uses_anonymous_args = 0
 2002 0000 80B5     		push	{r7, lr}
 2003              	.LCFI103:
 2004              		.cfi_def_cfa_offset 8
 2005              		.cfi_offset 7, -8
 2006              		.cfi_offset 14, -4
 2007 0002 82B0     		sub	sp, sp, #8
 2008              	.LCFI104:
 2009              		.cfi_def_cfa_offset 16
 2010 0004 00AF     		add	r7, sp, #0
 2011              	.LCFI105:
 2012              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccqF3GRw.s 			page 66


 2013 0006 7860     		str	r0, [r7, #4]
 810:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 811:Src/pwm_curr_fdbk.c ****   if ((MC_NULL == pHandle) || ( MC_NULL == pHandle->pFctRLDetectionModeEnable))
 812:Src/pwm_curr_fdbk.c ****   {
 813:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 814:Src/pwm_curr_fdbk.c ****   }
 815:Src/pwm_curr_fdbk.c ****   else
 816:Src/pwm_curr_fdbk.c ****   {
 817:Src/pwm_curr_fdbk.c **** #endif
 818:Src/pwm_curr_fdbk.c ****     pHandle->pFctRLDetectionModeEnable(pHandle);
 2014              		.loc 2 818 12
 2015 0008 7B68     		ldr	r3, [r7, #4]
 2016 000a DB69     		ldr	r3, [r3, #28]
 2017              		.loc 2 818 5
 2018 000c 7868     		ldr	r0, [r7, #4]
 2019 000e 9847     		blx	r3
 2020              	.LVL9:
 819:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 820:Src/pwm_curr_fdbk.c ****   }
 821:Src/pwm_curr_fdbk.c **** #endif
 822:Src/pwm_curr_fdbk.c **** }
 2021              		.loc 2 822 1
 2022 0010 00BF     		nop
 2023 0012 0837     		adds	r7, r7, #8
 2024              	.LCFI106:
 2025              		.cfi_def_cfa_offset 8
 2026 0014 BD46     		mov	sp, r7
 2027              	.LCFI107:
 2028              		.cfi_def_cfa_register 13
 2029              		@ sp needed
 2030 0016 80BD     		pop	{r7, pc}
 2031              		.cfi_endproc
 2032              	.LFE1458:
 2034              		.section	.text.PWMC_RLDetectionModeDisable,"ax",%progbits
 2035              		.align	1
 2036              		.weak	PWMC_RLDetectionModeDisable
 2037              		.syntax unified
 2038              		.thumb
 2039              		.thumb_func
 2040              		.fpu fpv4-sp-d16
 2042              	PWMC_RLDetectionModeDisable:
 2043              	.LFB1459:
 823:Src/pwm_curr_fdbk.c **** 
 824:Src/pwm_curr_fdbk.c **** /** @brief  Disables the RL detection mode by calling the function in @p pHandle PWMC component.
 825:Src/pwm_curr_fdbk.c ****   *
 826:Src/pwm_curr_fdbk.c ****   */
 827:Src/pwm_curr_fdbk.c **** //cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
 828:Src/pwm_curr_fdbk.c **** __weak void PWMC_RLDetectionModeDisable(PWMC_Handle_t *pHandle)
 829:Src/pwm_curr_fdbk.c **** {
 2044              		.loc 2 829 1
 2045              		.cfi_startproc
 2046              		@ args = 0, pretend = 0, frame = 8
 2047              		@ frame_needed = 1, uses_anonymous_args = 0
 2048 0000 80B5     		push	{r7, lr}
 2049              	.LCFI108:
 2050              		.cfi_def_cfa_offset 8
 2051              		.cfi_offset 7, -8
ARM GAS  /tmp/ccqF3GRw.s 			page 67


 2052              		.cfi_offset 14, -4
 2053 0002 82B0     		sub	sp, sp, #8
 2054              	.LCFI109:
 2055              		.cfi_def_cfa_offset 16
 2056 0004 00AF     		add	r7, sp, #0
 2057              	.LCFI110:
 2058              		.cfi_def_cfa_register 7
 2059 0006 7860     		str	r0, [r7, #4]
 830:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 831:Src/pwm_curr_fdbk.c ****   if ((MC_NULL == pHandle) || ( MC_NULL == pHandle->pFctRLDetectionModeDisable))
 832:Src/pwm_curr_fdbk.c ****   {
 833:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 834:Src/pwm_curr_fdbk.c ****   }
 835:Src/pwm_curr_fdbk.c ****   else
 836:Src/pwm_curr_fdbk.c ****   {
 837:Src/pwm_curr_fdbk.c **** #endif
 838:Src/pwm_curr_fdbk.c ****     pHandle->pFctRLDetectionModeDisable(pHandle);
 2060              		.loc 2 838 12
 2061 0008 7B68     		ldr	r3, [r7, #4]
 2062 000a 1B6A     		ldr	r3, [r3, #32]
 2063              		.loc 2 838 5
 2064 000c 7868     		ldr	r0, [r7, #4]
 2065 000e 9847     		blx	r3
 2066              	.LVL10:
 839:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 840:Src/pwm_curr_fdbk.c ****   }
 841:Src/pwm_curr_fdbk.c **** #endif
 842:Src/pwm_curr_fdbk.c **** }
 2067              		.loc 2 842 1
 2068 0010 00BF     		nop
 2069 0012 0837     		adds	r7, r7, #8
 2070              	.LCFI111:
 2071              		.cfi_def_cfa_offset 8
 2072 0014 BD46     		mov	sp, r7
 2073              	.LCFI112:
 2074              		.cfi_def_cfa_register 13
 2075              		@ sp needed
 2076 0016 80BD     		pop	{r7, pc}
 2077              		.cfi_endproc
 2078              	.LFE1459:
 2080              		.section	.text.PWMC_RLDetectionModeSetDuty,"ax",%progbits
 2081              		.align	1
 2082              		.weak	PWMC_RLDetectionModeSetDuty
 2083              		.syntax unified
 2084              		.thumb
 2085              		.thumb_func
 2086              		.fpu fpv4-sp-d16
 2088              	PWMC_RLDetectionModeSetDuty:
 2089              	.LFB1460:
 843:Src/pwm_curr_fdbk.c **** 
 844:Src/pwm_curr_fdbk.c **** /**
 845:Src/pwm_curr_fdbk.c ****   * @brief  Sets the PWM duty cycle to apply in the RL Detection mode.
 846:Src/pwm_curr_fdbk.c ****   *
 847:Src/pwm_curr_fdbk.c ****   * @param  pHandle: Handler of the current instance of the PWMC component.
 848:Src/pwm_curr_fdbk.c ****   * @param  hDuty: Duty cycle to apply, written in uint16_t.
 849:Src/pwm_curr_fdbk.c ****   * @retval #MC_NO_ERROR if the Duty Cycle could be applied on time for the next PWM period.
 850:Src/pwm_curr_fdbk.c ****   * 		Returns #MC_DURATION otherwise.
ARM GAS  /tmp/ccqF3GRw.s 			page 68


 851:Src/pwm_curr_fdbk.c ****   */
 852:Src/pwm_curr_fdbk.c **** __weak uint16_t PWMC_RLDetectionModeSetDuty(PWMC_Handle_t *pHandle, uint16_t hDuty) //cstat !MISRAC
 853:Src/pwm_curr_fdbk.c **** {
 2090              		.loc 2 853 1
 2091              		.cfi_startproc
 2092              		@ args = 0, pretend = 0, frame = 8
 2093              		@ frame_needed = 1, uses_anonymous_args = 0
 2094 0000 80B5     		push	{r7, lr}
 2095              	.LCFI113:
 2096              		.cfi_def_cfa_offset 8
 2097              		.cfi_offset 7, -8
 2098              		.cfi_offset 14, -4
 2099 0002 82B0     		sub	sp, sp, #8
 2100              	.LCFI114:
 2101              		.cfi_def_cfa_offset 16
 2102 0004 00AF     		add	r7, sp, #0
 2103              	.LCFI115:
 2104              		.cfi_def_cfa_register 7
 2105 0006 7860     		str	r0, [r7, #4]
 2106 0008 0B46     		mov	r3, r1
 2107 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 854:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 855:Src/pwm_curr_fdbk.c ****  uint16_t retVal = MC_DURATION;
 856:Src/pwm_curr_fdbk.c **** 
 857:Src/pwm_curr_fdbk.c ****  if ((MC_NULL == pHandle) || ( MC_NULL == pHandle->pFctRLDetectionModeSetDuty))
 858:Src/pwm_curr_fdbk.c ****  {
 859:Src/pwm_curr_fdbk.c ****    /* Nothing to do */
 860:Src/pwm_curr_fdbk.c ****  }
 861:Src/pwm_curr_fdbk.c ****  else
 862:Src/pwm_curr_fdbk.c ****  {
 863:Src/pwm_curr_fdbk.c ****    retVal = pHandle->pFctRLDetectionModeSetDuty(pHandle, hDuty);
 864:Src/pwm_curr_fdbk.c ****  }
 865:Src/pwm_curr_fdbk.c ****  return (retVal);
 866:Src/pwm_curr_fdbk.c **** #else
 867:Src/pwm_curr_fdbk.c ****   return (pHandle->pFctRLDetectionModeSetDuty(pHandle, hDuty));
 2108              		.loc 2 867 18
 2109 000c 7B68     		ldr	r3, [r7, #4]
 2110 000e 5B6A     		ldr	r3, [r3, #36]
 2111              		.loc 2 867 11
 2112 0010 7A88     		ldrh	r2, [r7, #2]
 2113 0012 1146     		mov	r1, r2
 2114 0014 7868     		ldr	r0, [r7, #4]
 2115 0016 9847     		blx	r3
 2116              	.LVL11:
 2117 0018 0346     		mov	r3, r0
 868:Src/pwm_curr_fdbk.c **** #endif
 869:Src/pwm_curr_fdbk.c **** }
 2118              		.loc 2 869 1
 2119 001a 1846     		mov	r0, r3
 2120 001c 0837     		adds	r7, r7, #8
 2121              	.LCFI116:
 2122              		.cfi_def_cfa_offset 8
 2123 001e BD46     		mov	sp, r7
 2124              	.LCFI117:
 2125              		.cfi_def_cfa_register 13
 2126              		@ sp needed
 2127 0020 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccqF3GRw.s 			page 69


 2128              		.cfi_endproc
 2129              	.LFE1460:
 2131              		.section	.text.PWMC_RLTurnOnLowSidesAndStart,"ax",%progbits
 2132              		.align	1
 2133              		.weak	PWMC_RLTurnOnLowSidesAndStart
 2134              		.syntax unified
 2135              		.thumb
 2136              		.thumb_func
 2137              		.fpu fpv4-sp-d16
 2139              	PWMC_RLTurnOnLowSidesAndStart:
 2140              	.LFB1461:
 870:Src/pwm_curr_fdbk.c **** 
 871:Src/pwm_curr_fdbk.c **** /** @brief  Turns on low sides switches and starts ADC triggerin.
 872:Src/pwm_curr_fdbk.c ****   *
 873:Src/pwm_curr_fdbk.c ****   */
 874:Src/pwm_curr_fdbk.c **** //cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
 875:Src/pwm_curr_fdbk.c **** __weak void PWMC_RLTurnOnLowSidesAndStart(PWMC_Handle_t *pHandle)
 876:Src/pwm_curr_fdbk.c **** {
 2141              		.loc 2 876 1
 2142              		.cfi_startproc
 2143              		@ args = 0, pretend = 0, frame = 8
 2144              		@ frame_needed = 1, uses_anonymous_args = 0
 2145 0000 80B5     		push	{r7, lr}
 2146              	.LCFI118:
 2147              		.cfi_def_cfa_offset 8
 2148              		.cfi_offset 7, -8
 2149              		.cfi_offset 14, -4
 2150 0002 82B0     		sub	sp, sp, #8
 2151              	.LCFI119:
 2152              		.cfi_def_cfa_offset 16
 2153 0004 00AF     		add	r7, sp, #0
 2154              	.LCFI120:
 2155              		.cfi_def_cfa_register 7
 2156 0006 7860     		str	r0, [r7, #4]
 877:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 878:Src/pwm_curr_fdbk.c ****   if ((MC_NULL == pHandle) || ( MC_NULL == pHandle->pFctRLTurnOnLowSidesAndStart))
 879:Src/pwm_curr_fdbk.c ****   {
 880:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 881:Src/pwm_curr_fdbk.c ****   }
 882:Src/pwm_curr_fdbk.c ****   else
 883:Src/pwm_curr_fdbk.c ****   {
 884:Src/pwm_curr_fdbk.c **** #endif
 885:Src/pwm_curr_fdbk.c ****     pHandle->pFctRLTurnOnLowSidesAndStart(pHandle);
 2157              		.loc 2 885 12
 2158 0008 7B68     		ldr	r3, [r7, #4]
 2159 000a 9B6A     		ldr	r3, [r3, #40]
 2160              		.loc 2 885 5
 2161 000c 7868     		ldr	r0, [r7, #4]
 2162 000e 9847     		blx	r3
 2163              	.LVL12:
 886:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 887:Src/pwm_curr_fdbk.c ****   }
 888:Src/pwm_curr_fdbk.c **** #endif
 889:Src/pwm_curr_fdbk.c **** }
 2164              		.loc 2 889 1
 2165 0010 00BF     		nop
 2166 0012 0837     		adds	r7, r7, #8
ARM GAS  /tmp/ccqF3GRw.s 			page 70


 2167              	.LCFI121:
 2168              		.cfi_def_cfa_offset 8
 2169 0014 BD46     		mov	sp, r7
 2170              	.LCFI122:
 2171              		.cfi_def_cfa_register 13
 2172              		@ sp needed
 2173 0016 80BD     		pop	{r7, pc}
 2174              		.cfi_endproc
 2175              	.LFE1461:
 2177              		.section	.text.PWMC_RegisterGetPhaseCurrentsCallBack,"ax",%progbits
 2178              		.align	1
 2179              		.weak	PWMC_RegisterGetPhaseCurrentsCallBack
 2180              		.syntax unified
 2181              		.thumb
 2182              		.thumb_func
 2183              		.fpu fpv4-sp-d16
 2185              	PWMC_RegisterGetPhaseCurrentsCallBack:
 2186              	.LFB1462:
 890:Src/pwm_curr_fdbk.c **** 
 891:Src/pwm_curr_fdbk.c **** /**
 892:Src/pwm_curr_fdbk.c ****  * @brief Sets the Callback that the PWMC component shall invoke to get phases current.
 893:Src/pwm_curr_fdbk.c ****  *
 894:Src/pwm_curr_fdbk.c ****  * @param pCallBack: Pointer on the callback to get the phase current.
 895:Src/pwm_curr_fdbk.c ****  * @param pHandle: Handler of the current instance of the PWMC component.
 896:Src/pwm_curr_fdbk.c ****  */
 897:Src/pwm_curr_fdbk.c **** __weak void PWMC_RegisterGetPhaseCurrentsCallBack(PWMC_GetPhaseCurr_Cb_t pCallBack, PWMC_Handle_t *
 898:Src/pwm_curr_fdbk.c **** {
 2187              		.loc 2 898 1
 2188              		.cfi_startproc
 2189              		@ args = 0, pretend = 0, frame = 8
 2190              		@ frame_needed = 1, uses_anonymous_args = 0
 2191              		@ link register save eliminated.
 2192 0000 80B4     		push	{r7}
 2193              	.LCFI123:
 2194              		.cfi_def_cfa_offset 4
 2195              		.cfi_offset 7, -4
 2196 0002 83B0     		sub	sp, sp, #12
 2197              	.LCFI124:
 2198              		.cfi_def_cfa_offset 16
 2199 0004 00AF     		add	r7, sp, #0
 2200              	.LCFI125:
 2201              		.cfi_def_cfa_register 7
 2202 0006 7860     		str	r0, [r7, #4]
 2203 0008 3960     		str	r1, [r7]
 899:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 900:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
 901:Src/pwm_curr_fdbk.c ****   {
 902:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 903:Src/pwm_curr_fdbk.c ****   }
 904:Src/pwm_curr_fdbk.c ****   else
 905:Src/pwm_curr_fdbk.c ****   {
 906:Src/pwm_curr_fdbk.c **** #endif
 907:Src/pwm_curr_fdbk.c ****     pHandle->pFctGetPhaseCurrents = pCallBack;
 2204              		.loc 2 907 35
 2205 000a 3B68     		ldr	r3, [r7]
 2206 000c 7A68     		ldr	r2, [r7, #4]
 2207 000e 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccqF3GRw.s 			page 71


 908:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 909:Src/pwm_curr_fdbk.c ****   }
 910:Src/pwm_curr_fdbk.c **** #endif
 911:Src/pwm_curr_fdbk.c **** }
 2208              		.loc 2 911 1
 2209 0010 00BF     		nop
 2210 0012 0C37     		adds	r7, r7, #12
 2211              	.LCFI126:
 2212              		.cfi_def_cfa_offset 4
 2213 0014 BD46     		mov	sp, r7
 2214              	.LCFI127:
 2215              		.cfi_def_cfa_register 13
 2216              		@ sp needed
 2217 0016 5DF8047B 		ldr	r7, [sp], #4
 2218              	.LCFI128:
 2219              		.cfi_restore 7
 2220              		.cfi_def_cfa_offset 0
 2221 001a 7047     		bx	lr
 2222              		.cfi_endproc
 2223              	.LFE1462:
 2225              		.section	.text.PWMC_RegisterSwitchOffPwmCallBack,"ax",%progbits
 2226              		.align	1
 2227              		.weak	PWMC_RegisterSwitchOffPwmCallBack
 2228              		.syntax unified
 2229              		.thumb
 2230              		.thumb_func
 2231              		.fpu fpv4-sp-d16
 2233              	PWMC_RegisterSwitchOffPwmCallBack:
 2234              	.LFB1463:
 912:Src/pwm_curr_fdbk.c **** 
 913:Src/pwm_curr_fdbk.c **** /**
 914:Src/pwm_curr_fdbk.c ****  * @brief Sets the Callback that the PWMC component shall invoke to switch PWM
 915:Src/pwm_curr_fdbk.c ****  *        generation off.
 916:Src/pwm_curr_fdbk.c ****  *
 917:Src/pwm_curr_fdbk.c ****  * @param pCallBack: Pointer on the generic callback.
 918:Src/pwm_curr_fdbk.c ****  * @param pHandle: Handler of the current instance of the PWMC component.
 919:Src/pwm_curr_fdbk.c ****  */
 920:Src/pwm_curr_fdbk.c **** __weak void PWMC_RegisterSwitchOffPwmCallBack(PWMC_Generic_Cb_t pCallBack, PWMC_Handle_t *pHandle)
 921:Src/pwm_curr_fdbk.c **** {
 2235              		.loc 2 921 1
 2236              		.cfi_startproc
 2237              		@ args = 0, pretend = 0, frame = 8
 2238              		@ frame_needed = 1, uses_anonymous_args = 0
 2239              		@ link register save eliminated.
 2240 0000 80B4     		push	{r7}
 2241              	.LCFI129:
 2242              		.cfi_def_cfa_offset 4
 2243              		.cfi_offset 7, -4
 2244 0002 83B0     		sub	sp, sp, #12
 2245              	.LCFI130:
 2246              		.cfi_def_cfa_offset 16
 2247 0004 00AF     		add	r7, sp, #0
 2248              	.LCFI131:
 2249              		.cfi_def_cfa_register 7
 2250 0006 7860     		str	r0, [r7, #4]
 2251 0008 3960     		str	r1, [r7]
 922:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
ARM GAS  /tmp/ccqF3GRw.s 			page 72


 923:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
 924:Src/pwm_curr_fdbk.c ****   {
 925:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 926:Src/pwm_curr_fdbk.c ****   }
 927:Src/pwm_curr_fdbk.c ****   else
 928:Src/pwm_curr_fdbk.c ****   {
 929:Src/pwm_curr_fdbk.c **** #endif
 930:Src/pwm_curr_fdbk.c ****     pHandle->pFctSwitchOffPwm = pCallBack;
 2252              		.loc 2 930 31
 2253 000a 3B68     		ldr	r3, [r7]
 2254 000c 7A68     		ldr	r2, [r7, #4]
 2255 000e 5A60     		str	r2, [r3, #4]
 931:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 932:Src/pwm_curr_fdbk.c ****   }
 933:Src/pwm_curr_fdbk.c **** #endif
 934:Src/pwm_curr_fdbk.c **** }
 2256              		.loc 2 934 1
 2257 0010 00BF     		nop
 2258 0012 0C37     		adds	r7, r7, #12
 2259              	.LCFI132:
 2260              		.cfi_def_cfa_offset 4
 2261 0014 BD46     		mov	sp, r7
 2262              	.LCFI133:
 2263              		.cfi_def_cfa_register 13
 2264              		@ sp needed
 2265 0016 5DF8047B 		ldr	r7, [sp], #4
 2266              	.LCFI134:
 2267              		.cfi_restore 7
 2268              		.cfi_def_cfa_offset 0
 2269 001a 7047     		bx	lr
 2270              		.cfi_endproc
 2271              	.LFE1463:
 2273              		.section	.text.PWMC_RegisterSwitchonPwmCallBack,"ax",%progbits
 2274              		.align	1
 2275              		.weak	PWMC_RegisterSwitchonPwmCallBack
 2276              		.syntax unified
 2277              		.thumb
 2278              		.thumb_func
 2279              		.fpu fpv4-sp-d16
 2281              	PWMC_RegisterSwitchonPwmCallBack:
 2282              	.LFB1464:
 935:Src/pwm_curr_fdbk.c **** 
 936:Src/pwm_curr_fdbk.c **** /**
 937:Src/pwm_curr_fdbk.c ****  * @brief Sets the Callback that the PWMC component shall invoke to switch PWM
 938:Src/pwm_curr_fdbk.c ****  *        generation on.
 939:Src/pwm_curr_fdbk.c ****  *
 940:Src/pwm_curr_fdbk.c ****  * @param pCallBack: Pointer on the generic callback.
 941:Src/pwm_curr_fdbk.c ****  * @param pHandle: Handler of the current instance of the PWMC component.
 942:Src/pwm_curr_fdbk.c ****  */
 943:Src/pwm_curr_fdbk.c **** __weak void PWMC_RegisterSwitchonPwmCallBack(PWMC_Generic_Cb_t pCallBack, PWMC_Handle_t *pHandle)
 944:Src/pwm_curr_fdbk.c **** {
 2283              		.loc 2 944 1
 2284              		.cfi_startproc
 2285              		@ args = 0, pretend = 0, frame = 8
 2286              		@ frame_needed = 1, uses_anonymous_args = 0
 2287              		@ link register save eliminated.
 2288 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccqF3GRw.s 			page 73


 2289              	.LCFI135:
 2290              		.cfi_def_cfa_offset 4
 2291              		.cfi_offset 7, -4
 2292 0002 83B0     		sub	sp, sp, #12
 2293              	.LCFI136:
 2294              		.cfi_def_cfa_offset 16
 2295 0004 00AF     		add	r7, sp, #0
 2296              	.LCFI137:
 2297              		.cfi_def_cfa_register 7
 2298 0006 7860     		str	r0, [r7, #4]
 2299 0008 3960     		str	r1, [r7]
 945:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 946:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
 947:Src/pwm_curr_fdbk.c ****   {
 948:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 949:Src/pwm_curr_fdbk.c ****   }
 950:Src/pwm_curr_fdbk.c ****   else
 951:Src/pwm_curr_fdbk.c ****   {
 952:Src/pwm_curr_fdbk.c **** #endif
 953:Src/pwm_curr_fdbk.c ****     pHandle->pFctSwitchOnPwm = pCallBack;
 2300              		.loc 2 953 30
 2301 000a 3B68     		ldr	r3, [r7]
 2302 000c 7A68     		ldr	r2, [r7, #4]
 2303 000e 9A60     		str	r2, [r3, #8]
 954:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 955:Src/pwm_curr_fdbk.c ****   }
 956:Src/pwm_curr_fdbk.c **** #endif
 957:Src/pwm_curr_fdbk.c **** }
 2304              		.loc 2 957 1
 2305 0010 00BF     		nop
 2306 0012 0C37     		adds	r7, r7, #12
 2307              	.LCFI138:
 2308              		.cfi_def_cfa_offset 4
 2309 0014 BD46     		mov	sp, r7
 2310              	.LCFI139:
 2311              		.cfi_def_cfa_register 13
 2312              		@ sp needed
 2313 0016 5DF8047B 		ldr	r7, [sp], #4
 2314              	.LCFI140:
 2315              		.cfi_restore 7
 2316              		.cfi_def_cfa_offset 0
 2317 001a 7047     		bx	lr
 2318              		.cfi_endproc
 2319              	.LFE1464:
 2321              		.section	.text.PWMC_RegisterReadingCalibrationCallBack,"ax",%progbits
 2322              		.align	1
 2323              		.weak	PWMC_RegisterReadingCalibrationCallBack
 2324              		.syntax unified
 2325              		.thumb
 2326              		.thumb_func
 2327              		.fpu fpv4-sp-d16
 2329              	PWMC_RegisterReadingCalibrationCallBack:
 2330              	.LFB1465:
 958:Src/pwm_curr_fdbk.c **** 
 959:Src/pwm_curr_fdbk.c **** /**
 960:Src/pwm_curr_fdbk.c ****  * @brief Sets the Callback that the PWMC component shall invoke to execute a calibration
 961:Src/pwm_curr_fdbk.c ****  *        of the current sensing system.
ARM GAS  /tmp/ccqF3GRw.s 			page 74


 962:Src/pwm_curr_fdbk.c ****  *
 963:Src/pwm_curr_fdbk.c ****  * @param pCallBack: Pointer on the generic callback.
 964:Src/pwm_curr_fdbk.c ****  * @param pHandle: Handler of the current instance of the PWMC component.
 965:Src/pwm_curr_fdbk.c ****  */
 966:Src/pwm_curr_fdbk.c **** __weak void PWMC_RegisterReadingCalibrationCallBack(PWMC_Generic_Cb_t pCallBack, PWMC_Handle_t *pHa
 967:Src/pwm_curr_fdbk.c **** {
 2331              		.loc 2 967 1
 2332              		.cfi_startproc
 2333              		@ args = 0, pretend = 0, frame = 8
 2334              		@ frame_needed = 1, uses_anonymous_args = 0
 2335              		@ link register save eliminated.
 2336 0000 80B4     		push	{r7}
 2337              	.LCFI141:
 2338              		.cfi_def_cfa_offset 4
 2339              		.cfi_offset 7, -4
 2340 0002 83B0     		sub	sp, sp, #12
 2341              	.LCFI142:
 2342              		.cfi_def_cfa_offset 16
 2343 0004 00AF     		add	r7, sp, #0
 2344              	.LCFI143:
 2345              		.cfi_def_cfa_register 7
 2346 0006 7860     		str	r0, [r7, #4]
 2347 0008 3960     		str	r1, [r7]
 968:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 969:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
 970:Src/pwm_curr_fdbk.c ****   {
 971:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 972:Src/pwm_curr_fdbk.c ****   }
 973:Src/pwm_curr_fdbk.c ****   else
 974:Src/pwm_curr_fdbk.c ****   {
 975:Src/pwm_curr_fdbk.c **** #endif
 976:Src/pwm_curr_fdbk.c ****     pHandle->pFctCurrReadingCalib = pCallBack;
 2348              		.loc 2 976 35
 2349 000a 3B68     		ldr	r3, [r7]
 2350 000c 7A68     		ldr	r2, [r7, #4]
 2351 000e DA60     		str	r2, [r3, #12]
 977:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 978:Src/pwm_curr_fdbk.c ****   }
 979:Src/pwm_curr_fdbk.c **** #endif
 980:Src/pwm_curr_fdbk.c **** }
 2352              		.loc 2 980 1
 2353 0010 00BF     		nop
 2354 0012 0C37     		adds	r7, r7, #12
 2355              	.LCFI144:
 2356              		.cfi_def_cfa_offset 4
 2357 0014 BD46     		mov	sp, r7
 2358              	.LCFI145:
 2359              		.cfi_def_cfa_register 13
 2360              		@ sp needed
 2361 0016 5DF8047B 		ldr	r7, [sp], #4
 2362              	.LCFI146:
 2363              		.cfi_restore 7
 2364              		.cfi_def_cfa_offset 0
 2365 001a 7047     		bx	lr
 2366              		.cfi_endproc
 2367              	.LFE1465:
 2369              		.section	.text.PWMC_RegisterTurnOnLowSidesCallBack,"ax",%progbits
ARM GAS  /tmp/ccqF3GRw.s 			page 75


 2370              		.align	1
 2371              		.weak	PWMC_RegisterTurnOnLowSidesCallBack
 2372              		.syntax unified
 2373              		.thumb
 2374              		.thumb_func
 2375              		.fpu fpv4-sp-d16
 2377              	PWMC_RegisterTurnOnLowSidesCallBack:
 2378              	.LFB1466:
 981:Src/pwm_curr_fdbk.c **** 
 982:Src/pwm_curr_fdbk.c **** /**
 983:Src/pwm_curr_fdbk.c ****  * @brief Sets the Callback that the PWMC component shall invoke to turn low sides on.
 984:Src/pwm_curr_fdbk.c ****  *
 985:Src/pwm_curr_fdbk.c ****  * @param pCallBack: Pointer on the callback which turns low sides on.
 986:Src/pwm_curr_fdbk.c ****  * @param pHandle: Handler of the current instance of the PWMC component.
 987:Src/pwm_curr_fdbk.c ****  */
 988:Src/pwm_curr_fdbk.c **** __weak void PWMC_RegisterTurnOnLowSidesCallBack(PWMC_TurnOnLowSides_Cb_t pCallBack, PWMC_Handle_t *
 989:Src/pwm_curr_fdbk.c **** {
 2379              		.loc 2 989 1
 2380              		.cfi_startproc
 2381              		@ args = 0, pretend = 0, frame = 8
 2382              		@ frame_needed = 1, uses_anonymous_args = 0
 2383              		@ link register save eliminated.
 2384 0000 80B4     		push	{r7}
 2385              	.LCFI147:
 2386              		.cfi_def_cfa_offset 4
 2387              		.cfi_offset 7, -4
 2388 0002 83B0     		sub	sp, sp, #12
 2389              	.LCFI148:
 2390              		.cfi_def_cfa_offset 16
 2391 0004 00AF     		add	r7, sp, #0
 2392              	.LCFI149:
 2393              		.cfi_def_cfa_register 7
 2394 0006 7860     		str	r0, [r7, #4]
 2395 0008 3960     		str	r1, [r7]
 990:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 991:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
 992:Src/pwm_curr_fdbk.c ****   {
 993:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
 994:Src/pwm_curr_fdbk.c ****   }
 995:Src/pwm_curr_fdbk.c ****   else
 996:Src/pwm_curr_fdbk.c ****   {
 997:Src/pwm_curr_fdbk.c **** #endif
 998:Src/pwm_curr_fdbk.c ****     pHandle->pFctTurnOnLowSides = pCallBack;
 2396              		.loc 2 998 33
 2397 000a 3B68     		ldr	r3, [r7]
 2398 000c 7A68     		ldr	r2, [r7, #4]
 2399 000e 1A61     		str	r2, [r3, #16]
 999:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
1000:Src/pwm_curr_fdbk.c ****   }
1001:Src/pwm_curr_fdbk.c **** #endif
1002:Src/pwm_curr_fdbk.c **** }
 2400              		.loc 2 1002 1
 2401 0010 00BF     		nop
 2402 0012 0C37     		adds	r7, r7, #12
 2403              	.LCFI150:
 2404              		.cfi_def_cfa_offset 4
 2405 0014 BD46     		mov	sp, r7
ARM GAS  /tmp/ccqF3GRw.s 			page 76


 2406              	.LCFI151:
 2407              		.cfi_def_cfa_register 13
 2408              		@ sp needed
 2409 0016 5DF8047B 		ldr	r7, [sp], #4
 2410              	.LCFI152:
 2411              		.cfi_restore 7
 2412              		.cfi_def_cfa_offset 0
 2413 001a 7047     		bx	lr
 2414              		.cfi_endproc
 2415              	.LFE1466:
 2417              		.section	.text.PWMC_RegisterSampPointSectXCallBack,"ax",%progbits
 2418              		.align	1
 2419              		.weak	PWMC_RegisterSampPointSectXCallBack
 2420              		.syntax unified
 2421              		.thumb
 2422              		.thumb_func
 2423              		.fpu fpv4-sp-d16
 2425              	PWMC_RegisterSampPointSectXCallBack:
 2426              	.LFB1467:
1003:Src/pwm_curr_fdbk.c **** 
1004:Src/pwm_curr_fdbk.c **** /**
1005:Src/pwm_curr_fdbk.c ****  * @brief Sets the Callback that the PWMC component shall invoke to compute ADC sampling point.
1006:Src/pwm_curr_fdbk.c ****  *
1007:Src/pwm_curr_fdbk.c ****  * @param pCallBack: Pointer on the callback which sets the sampling point depending on the sector.
1008:Src/pwm_curr_fdbk.c ****  * @param pHandle: Handler of the current instance of the PWMC component.
1009:Src/pwm_curr_fdbk.c ****  */
1010:Src/pwm_curr_fdbk.c **** __weak void PWMC_RegisterSampPointSectXCallBack(PWMC_SetSampPointSectX_Cb_t pCallBack, PWMC_Handle_
1011:Src/pwm_curr_fdbk.c **** {
 2427              		.loc 2 1011 1
 2428              		.cfi_startproc
 2429              		@ args = 0, pretend = 0, frame = 8
 2430              		@ frame_needed = 1, uses_anonymous_args = 0
 2431              		@ link register save eliminated.
 2432 0000 80B4     		push	{r7}
 2433              	.LCFI153:
 2434              		.cfi_def_cfa_offset 4
 2435              		.cfi_offset 7, -4
 2436 0002 83B0     		sub	sp, sp, #12
 2437              	.LCFI154:
 2438              		.cfi_def_cfa_offset 16
 2439 0004 00AF     		add	r7, sp, #0
 2440              	.LCFI155:
 2441              		.cfi_def_cfa_register 7
 2442 0006 7860     		str	r0, [r7, #4]
 2443 0008 3960     		str	r1, [r7]
1012:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
1013:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
1014:Src/pwm_curr_fdbk.c ****   {
1015:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
1016:Src/pwm_curr_fdbk.c ****   }
1017:Src/pwm_curr_fdbk.c ****   else
1018:Src/pwm_curr_fdbk.c ****   {
1019:Src/pwm_curr_fdbk.c **** #endif
1020:Src/pwm_curr_fdbk.c ****     pHandle->pFctSetADCSampPointSectX = pCallBack;
 2444              		.loc 2 1020 39
 2445 000a 3B68     		ldr	r3, [r7]
 2446 000c 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/ccqF3GRw.s 			page 77


 2447 000e 5A61     		str	r2, [r3, #20]
1021:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
1022:Src/pwm_curr_fdbk.c ****   }
1023:Src/pwm_curr_fdbk.c **** #endif
1024:Src/pwm_curr_fdbk.c **** }
 2448              		.loc 2 1024 1
 2449 0010 00BF     		nop
 2450 0012 0C37     		adds	r7, r7, #12
 2451              	.LCFI156:
 2452              		.cfi_def_cfa_offset 4
 2453 0014 BD46     		mov	sp, r7
 2454              	.LCFI157:
 2455              		.cfi_def_cfa_register 13
 2456              		@ sp needed
 2457 0016 5DF8047B 		ldr	r7, [sp], #4
 2458              	.LCFI158:
 2459              		.cfi_restore 7
 2460              		.cfi_def_cfa_offset 0
 2461 001a 7047     		bx	lr
 2462              		.cfi_endproc
 2463              	.LFE1467:
 2465              		.section	.text.PWMC_RegisterOCPSetRefVoltageCallBack,"ax",%progbits
 2466              		.align	1
 2467              		.weak	PWMC_RegisterOCPSetRefVoltageCallBack
 2468              		.syntax unified
 2469              		.thumb
 2470              		.thumb_func
 2471              		.fpu fpv4-sp-d16
 2473              	PWMC_RegisterOCPSetRefVoltageCallBack:
 2474              	.LFB1468:
1025:Src/pwm_curr_fdbk.c **** 
1026:Src/pwm_curr_fdbk.c **** /**
1027:Src/pwm_curr_fdbk.c ****  * @brief Sets the Callback that the PWMC component shall invoke to set the reference
1028:Src/pwm_curr_fdbk.c ****  *        voltage for the overcurrent protection.
1029:Src/pwm_curr_fdbk.c ****  *
1030:Src/pwm_curr_fdbk.c ****  * @param pCallBack: Pointer on the callback which sets the reference voltage.
1031:Src/pwm_curr_fdbk.c ****  * @param pHandle: Handler of the current instance of the PWMC component.
1032:Src/pwm_curr_fdbk.c ****  */
1033:Src/pwm_curr_fdbk.c **** __weak void PWMC_RegisterOCPSetRefVoltageCallBack(PWMC_SetOcpRefVolt_Cb_t pCallBack, PWMC_Handle_t 
1034:Src/pwm_curr_fdbk.c **** {
 2475              		.loc 2 1034 1
 2476              		.cfi_startproc
 2477              		@ args = 0, pretend = 0, frame = 8
 2478              		@ frame_needed = 1, uses_anonymous_args = 0
 2479              		@ link register save eliminated.
 2480 0000 80B4     		push	{r7}
 2481              	.LCFI159:
 2482              		.cfi_def_cfa_offset 4
 2483              		.cfi_offset 7, -4
 2484 0002 83B0     		sub	sp, sp, #12
 2485              	.LCFI160:
 2486              		.cfi_def_cfa_offset 16
 2487 0004 00AF     		add	r7, sp, #0
 2488              	.LCFI161:
 2489              		.cfi_def_cfa_register 7
 2490 0006 7860     		str	r0, [r7, #4]
 2491 0008 3960     		str	r1, [r7]
ARM GAS  /tmp/ccqF3GRw.s 			page 78


1035:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
1036:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
1037:Src/pwm_curr_fdbk.c ****   {
1038:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
1039:Src/pwm_curr_fdbk.c ****   }
1040:Src/pwm_curr_fdbk.c ****   else
1041:Src/pwm_curr_fdbk.c ****   {
1042:Src/pwm_curr_fdbk.c **** #endif
1043:Src/pwm_curr_fdbk.c ****     pHandle->pFctOCPSetReferenceVoltage = pCallBack;
 2492              		.loc 2 1043 41
 2493 000a 3B68     		ldr	r3, [r7]
 2494 000c 7A68     		ldr	r2, [r7, #4]
 2495 000e 9A61     		str	r2, [r3, #24]
1044:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
1045:Src/pwm_curr_fdbk.c ****   }
1046:Src/pwm_curr_fdbk.c **** #endif
1047:Src/pwm_curr_fdbk.c **** }
 2496              		.loc 2 1047 1
 2497 0010 00BF     		nop
 2498 0012 0C37     		adds	r7, r7, #12
 2499              	.LCFI162:
 2500              		.cfi_def_cfa_offset 4
 2501 0014 BD46     		mov	sp, r7
 2502              	.LCFI163:
 2503              		.cfi_def_cfa_register 13
 2504              		@ sp needed
 2505 0016 5DF8047B 		ldr	r7, [sp], #4
 2506              	.LCFI164:
 2507              		.cfi_restore 7
 2508              		.cfi_def_cfa_offset 0
 2509 001a 7047     		bx	lr
 2510              		.cfi_endproc
 2511              	.LFE1468:
 2513              		.section	.text.PWMC_RegisterRLDetectionModeEnableCallBack,"ax",%progbits
 2514              		.align	1
 2515              		.weak	PWMC_RegisterRLDetectionModeEnableCallBack
 2516              		.syntax unified
 2517              		.thumb
 2518              		.thumb_func
 2519              		.fpu fpv4-sp-d16
 2521              	PWMC_RegisterRLDetectionModeEnableCallBack:
 2522              	.LFB1469:
1048:Src/pwm_curr_fdbk.c **** 
1049:Src/pwm_curr_fdbk.c **** /**
1050:Src/pwm_curr_fdbk.c ****  * @brief Sets the Callback that the PWMC component shall invoke to enable the R/L detection mode.
1051:Src/pwm_curr_fdbk.c ****  *
1052:Src/pwm_curr_fdbk.c ****  * @param pCallBack: Pointer on the generic callback.
1053:Src/pwm_curr_fdbk.c ****  * @param pHandle: Handler of the current instance of the PWMC component.
1054:Src/pwm_curr_fdbk.c ****  */
1055:Src/pwm_curr_fdbk.c **** __weak void PWMC_RegisterRLDetectionModeEnableCallBack(PWMC_Generic_Cb_t pCallBack, PWMC_Handle_t *
1056:Src/pwm_curr_fdbk.c **** {
 2523              		.loc 2 1056 1
 2524              		.cfi_startproc
 2525              		@ args = 0, pretend = 0, frame = 8
 2526              		@ frame_needed = 1, uses_anonymous_args = 0
 2527              		@ link register save eliminated.
 2528 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccqF3GRw.s 			page 79


 2529              	.LCFI165:
 2530              		.cfi_def_cfa_offset 4
 2531              		.cfi_offset 7, -4
 2532 0002 83B0     		sub	sp, sp, #12
 2533              	.LCFI166:
 2534              		.cfi_def_cfa_offset 16
 2535 0004 00AF     		add	r7, sp, #0
 2536              	.LCFI167:
 2537              		.cfi_def_cfa_register 7
 2538 0006 7860     		str	r0, [r7, #4]
 2539 0008 3960     		str	r1, [r7]
1057:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
1058:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
1059:Src/pwm_curr_fdbk.c ****   {
1060:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
1061:Src/pwm_curr_fdbk.c ****   }
1062:Src/pwm_curr_fdbk.c ****   else
1063:Src/pwm_curr_fdbk.c ****   {
1064:Src/pwm_curr_fdbk.c **** #endif
1065:Src/pwm_curr_fdbk.c ****     pHandle->pFctRLDetectionModeEnable = pCallBack;
 2540              		.loc 2 1065 40
 2541 000a 3B68     		ldr	r3, [r7]
 2542 000c 7A68     		ldr	r2, [r7, #4]
 2543 000e DA61     		str	r2, [r3, #28]
1066:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
1067:Src/pwm_curr_fdbk.c ****   }
1068:Src/pwm_curr_fdbk.c **** #endif
1069:Src/pwm_curr_fdbk.c **** }
 2544              		.loc 2 1069 1
 2545 0010 00BF     		nop
 2546 0012 0C37     		adds	r7, r7, #12
 2547              	.LCFI168:
 2548              		.cfi_def_cfa_offset 4
 2549 0014 BD46     		mov	sp, r7
 2550              	.LCFI169:
 2551              		.cfi_def_cfa_register 13
 2552              		@ sp needed
 2553 0016 5DF8047B 		ldr	r7, [sp], #4
 2554              	.LCFI170:
 2555              		.cfi_restore 7
 2556              		.cfi_def_cfa_offset 0
 2557 001a 7047     		bx	lr
 2558              		.cfi_endproc
 2559              	.LFE1469:
 2561              		.section	.text.PWMC_RegisterRLDetectionModeDisableCallBack,"ax",%progbits
 2562              		.align	1
 2563              		.weak	PWMC_RegisterRLDetectionModeDisableCallBack
 2564              		.syntax unified
 2565              		.thumb
 2566              		.thumb_func
 2567              		.fpu fpv4-sp-d16
 2569              	PWMC_RegisterRLDetectionModeDisableCallBack:
 2570              	.LFB1470:
1070:Src/pwm_curr_fdbk.c **** 
1071:Src/pwm_curr_fdbk.c **** /**
1072:Src/pwm_curr_fdbk.c ****  * @brief Sets the Callback that the PWMC component shall invoke to disable the R/L detection mode.
1073:Src/pwm_curr_fdbk.c ****  *
ARM GAS  /tmp/ccqF3GRw.s 			page 80


1074:Src/pwm_curr_fdbk.c ****  * @param pCallBack: Pointer on the generic callback.
1075:Src/pwm_curr_fdbk.c ****  * @param pHandle: Handler of the current instance of the PWMC component.
1076:Src/pwm_curr_fdbk.c ****  */
1077:Src/pwm_curr_fdbk.c **** __weak void PWMC_RegisterRLDetectionModeDisableCallBack(PWMC_Generic_Cb_t pCallBack, PWMC_Handle_t 
1078:Src/pwm_curr_fdbk.c **** {
 2571              		.loc 2 1078 1
 2572              		.cfi_startproc
 2573              		@ args = 0, pretend = 0, frame = 8
 2574              		@ frame_needed = 1, uses_anonymous_args = 0
 2575              		@ link register save eliminated.
 2576 0000 80B4     		push	{r7}
 2577              	.LCFI171:
 2578              		.cfi_def_cfa_offset 4
 2579              		.cfi_offset 7, -4
 2580 0002 83B0     		sub	sp, sp, #12
 2581              	.LCFI172:
 2582              		.cfi_def_cfa_offset 16
 2583 0004 00AF     		add	r7, sp, #0
 2584              	.LCFI173:
 2585              		.cfi_def_cfa_register 7
 2586 0006 7860     		str	r0, [r7, #4]
 2587 0008 3960     		str	r1, [r7]
1079:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
1080:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
1081:Src/pwm_curr_fdbk.c ****   {
1082:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
1083:Src/pwm_curr_fdbk.c ****   }
1084:Src/pwm_curr_fdbk.c ****   else
1085:Src/pwm_curr_fdbk.c ****   {
1086:Src/pwm_curr_fdbk.c **** #endif
1087:Src/pwm_curr_fdbk.c ****     pHandle->pFctRLDetectionModeDisable = pCallBack;
 2588              		.loc 2 1087 41
 2589 000a 3B68     		ldr	r3, [r7]
 2590 000c 7A68     		ldr	r2, [r7, #4]
 2591 000e 1A62     		str	r2, [r3, #32]
1088:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
1089:Src/pwm_curr_fdbk.c ****   }
1090:Src/pwm_curr_fdbk.c **** #endif
1091:Src/pwm_curr_fdbk.c **** }
 2592              		.loc 2 1091 1
 2593 0010 00BF     		nop
 2594 0012 0C37     		adds	r7, r7, #12
 2595              	.LCFI174:
 2596              		.cfi_def_cfa_offset 4
 2597 0014 BD46     		mov	sp, r7
 2598              	.LCFI175:
 2599              		.cfi_def_cfa_register 13
 2600              		@ sp needed
 2601 0016 5DF8047B 		ldr	r7, [sp], #4
 2602              	.LCFI176:
 2603              		.cfi_restore 7
 2604              		.cfi_def_cfa_offset 0
 2605 001a 7047     		bx	lr
 2606              		.cfi_endproc
 2607              	.LFE1470:
 2609              		.section	.text.PWMC_RegisterRLDetectionModeSetDutyCallBack,"ax",%progbits
 2610              		.align	1
ARM GAS  /tmp/ccqF3GRw.s 			page 81


 2611              		.weak	PWMC_RegisterRLDetectionModeSetDutyCallBack
 2612              		.syntax unified
 2613              		.thumb
 2614              		.thumb_func
 2615              		.fpu fpv4-sp-d16
 2617              	PWMC_RegisterRLDetectionModeSetDutyCallBack:
 2618              	.LFB1471:
1092:Src/pwm_curr_fdbk.c **** 
1093:Src/pwm_curr_fdbk.c **** /**
1094:Src/pwm_curr_fdbk.c ****  * @brief Sets the Callback that the PWMC component shall invoke to set the duty cycle
1095:Src/pwm_curr_fdbk.c ****  *        for the R/L detection mode.
1096:Src/pwm_curr_fdbk.c ****  *
1097:Src/pwm_curr_fdbk.c ****  * @param pCallBack: Pointer on the callback which sets the duty cycle.
1098:Src/pwm_curr_fdbk.c ****  * @param pHandle: Handler of the current instance of the PWMC component.
1099:Src/pwm_curr_fdbk.c ****  */
1100:Src/pwm_curr_fdbk.c **** __weak void PWMC_RegisterRLDetectionModeSetDutyCallBack(PWMC_RLDetectSetDuty_Cb_t pCallBack, PWMC_H
1101:Src/pwm_curr_fdbk.c **** {
 2619              		.loc 2 1101 1
 2620              		.cfi_startproc
 2621              		@ args = 0, pretend = 0, frame = 8
 2622              		@ frame_needed = 1, uses_anonymous_args = 0
 2623              		@ link register save eliminated.
 2624 0000 80B4     		push	{r7}
 2625              	.LCFI177:
 2626              		.cfi_def_cfa_offset 4
 2627              		.cfi_offset 7, -4
 2628 0002 83B0     		sub	sp, sp, #12
 2629              	.LCFI178:
 2630              		.cfi_def_cfa_offset 16
 2631 0004 00AF     		add	r7, sp, #0
 2632              	.LCFI179:
 2633              		.cfi_def_cfa_register 7
 2634 0006 7860     		str	r0, [r7, #4]
 2635 0008 3960     		str	r1, [r7]
1102:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
1103:Src/pwm_curr_fdbk.c ****   if (MC_NULL == pHandle)
1104:Src/pwm_curr_fdbk.c ****   {
1105:Src/pwm_curr_fdbk.c ****     /* Nothing to do */
1106:Src/pwm_curr_fdbk.c ****   }
1107:Src/pwm_curr_fdbk.c ****   else
1108:Src/pwm_curr_fdbk.c ****   {
1109:Src/pwm_curr_fdbk.c **** #endif
1110:Src/pwm_curr_fdbk.c ****     pHandle->pFctRLDetectionModeSetDuty = pCallBack;
 2636              		.loc 2 1110 41
 2637 000a 3B68     		ldr	r3, [r7]
 2638 000c 7A68     		ldr	r2, [r7, #4]
 2639 000e 5A62     		str	r2, [r3, #36]
1111:Src/pwm_curr_fdbk.c **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
1112:Src/pwm_curr_fdbk.c ****   }
1113:Src/pwm_curr_fdbk.c **** #endif
1114:Src/pwm_curr_fdbk.c **** }
 2640              		.loc 2 1114 1
 2641 0010 00BF     		nop
 2642 0012 0C37     		adds	r7, r7, #12
 2643              	.LCFI180:
 2644              		.cfi_def_cfa_offset 4
 2645 0014 BD46     		mov	sp, r7
ARM GAS  /tmp/ccqF3GRw.s 			page 82


 2646              	.LCFI181:
 2647              		.cfi_def_cfa_register 13
 2648              		@ sp needed
 2649 0016 5DF8047B 		ldr	r7, [sp], #4
 2650              	.LCFI182:
 2651              		.cfi_restore 7
 2652              		.cfi_def_cfa_offset 0
 2653 001a 7047     		bx	lr
 2654              		.cfi_endproc
 2655              	.LFE1471:
 2657              		.text
 2658              	.Letext0:
 2659              		.file 3 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_type
 2660              		.file 4 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 2661              		.file 5 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 2662              		.file 6 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 2663              		.file 7 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 2664              		.file 8 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 2665              		.file 9 "Inc/mc_type.h"
 2666              		.file 10 "Inc/pwm_curr_fdbk.h"
ARM GAS  /tmp/ccqF3GRw.s 			page 83


DEFINED SYMBOLS
                            *ABS*:0000000000000000 pwm_curr_fdbk.c
     /tmp/ccqF3GRw.s:18     .rodata.OFFSET_TAB_CCMRx:0000000000000000 $d
     /tmp/ccqF3GRw.s:21     .rodata.OFFSET_TAB_CCMRx:0000000000000000 OFFSET_TAB_CCMRx
     /tmp/ccqF3GRw.s:24     .rodata.SHIFT_TAB_OCxx:0000000000000000 $d
     /tmp/ccqF3GRw.s:27     .rodata.SHIFT_TAB_OCxx:0000000000000000 SHIFT_TAB_OCxx
     /tmp/ccqF3GRw.s:30     .rodata.SHIFT_TAB_ICxx:0000000000000000 $d
     /tmp/ccqF3GRw.s:33     .rodata.SHIFT_TAB_ICxx:0000000000000000 SHIFT_TAB_ICxx
     /tmp/ccqF3GRw.s:36     .rodata.SHIFT_TAB_CCxP:0000000000000000 $d
     /tmp/ccqF3GRw.s:39     .rodata.SHIFT_TAB_CCxP:0000000000000000 SHIFT_TAB_CCxP
     /tmp/ccqF3GRw.s:42     .rodata.SHIFT_TAB_OISx:0000000000000000 $d
     /tmp/ccqF3GRw.s:45     .rodata.SHIFT_TAB_OISx:0000000000000000 SHIFT_TAB_OISx
     /tmp/ccqF3GRw.s:48     .text.LL_GPIO_ResetOutputPin:0000000000000000 $t
     /tmp/ccqF3GRw.s:55     .text.LL_GPIO_ResetOutputPin:0000000000000000 LL_GPIO_ResetOutputPin
     /tmp/ccqF3GRw.s:97     .rodata.USART_PRESCALER_TAB:0000000000000000 $d
     /tmp/ccqF3GRw.s:100    .rodata.USART_PRESCALER_TAB:0000000000000000 USART_PRESCALER_TAB
     /tmp/ccqF3GRw.s:114    .rodata.CHANNEL_OFFSET_TAB:0000000000000000 $d
     /tmp/ccqF3GRw.s:117    .rodata.CHANNEL_OFFSET_TAB:0000000000000000 CHANNEL_OFFSET_TAB
     /tmp/ccqF3GRw.s:120    .text.PWMC_Clear:0000000000000000 $t
     /tmp/ccqF3GRw.s:127    .text.PWMC_Clear:0000000000000000 PWMC_Clear
     /tmp/ccqF3GRw.s:184    .text.PWMC_SetOffsetCalib:0000000000000000 $t
     /tmp/ccqF3GRw.s:191    .text.PWMC_SetOffsetCalib:0000000000000000 PWMC_SetOffsetCalib
     /tmp/ccqF3GRw.s:237    .text.PWMC_GetOffsetCalib:0000000000000000 $t
     /tmp/ccqF3GRw.s:244    .text.PWMC_GetOffsetCalib:0000000000000000 PWMC_GetOffsetCalib
     /tmp/ccqF3GRw.s:290    .text.PWMC_SetPhaseVoltage:0000000000000000 $t
     /tmp/ccqF3GRw.s:297    .text.PWMC_SetPhaseVoltage:0000000000000000 PWMC_SetPhaseVoltage
     /tmp/ccqF3GRw.s:1008   .text.PWMC_SwitchOffPWM:0000000000000000 $t
     /tmp/ccqF3GRw.s:1015   .text.PWMC_SwitchOffPWM:0000000000000000 PWMC_SwitchOffPWM
     /tmp/ccqF3GRw.s:1054   .text.PWMC_SwitchOnPWM:0000000000000000 $t
     /tmp/ccqF3GRw.s:1061   .text.PWMC_SwitchOnPWM:0000000000000000 PWMC_SwitchOnPWM
     /tmp/ccqF3GRw.s:1100   .text.PWMC_CurrentReadingCalibr:0000000000000000 $t
     /tmp/ccqF3GRw.s:1107   .text.PWMC_CurrentReadingCalibr:0000000000000000 PWMC_CurrentReadingCalibr
     /tmp/ccqF3GRw.s:1205   .text.PWMC_LowPassFilter:0000000000000000 $t
     /tmp/ccqF3GRw.s:1211   .text.PWMC_LowPassFilter:0000000000000000 PWMC_LowPassFilter
     /tmp/ccqF3GRw.s:1276   .text.PWMC_CalcPhaseCurrentsEst:0000000000000000 $t
     /tmp/ccqF3GRw.s:1283   .text.PWMC_CalcPhaseCurrentsEst:0000000000000000 PWMC_CalcPhaseCurrentsEst
     /tmp/ccqF3GRw.s:1405   .text.PWMC_TurnOnLowSides:0000000000000000 $t
     /tmp/ccqF3GRw.s:1412   .text.PWMC_TurnOnLowSides:0000000000000000 PWMC_TurnOnLowSides
     /tmp/ccqF3GRw.s:1453   .text.PWMC_OCP_Handler:0000000000000000 $t
     /tmp/ccqF3GRw.s:1460   .text.PWMC_OCP_Handler:0000000000000000 PWMC_OCP_Handler
     /tmp/ccqF3GRw.s:1548   .text.PWMC_DP_Handler:0000000000000000 $t
     /tmp/ccqF3GRw.s:1555   .text.PWMC_DP_Handler:0000000000000000 PWMC_DP_Handler
     /tmp/ccqF3GRw.s:1643   .text.PWMC_OVP_Handler:0000000000000000 $t
     /tmp/ccqF3GRw.s:1650   .text.PWMC_OVP_Handler:0000000000000000 PWMC_OVP_Handler
     /tmp/ccqF3GRw.s:1707   .text.PWMC_IsFaultOccurred:0000000000000000 $t
     /tmp/ccqF3GRw.s:1714   .text.PWMC_IsFaultOccurred:0000000000000000 PWMC_IsFaultOccurred
     /tmp/ccqF3GRw.s:1799   .text.PWMC_OCPSetReferenceVoltage:0000000000000000 $t
     /tmp/ccqF3GRw.s:1806   .text.PWMC_OCPSetReferenceVoltage:0000000000000000 PWMC_OCPSetReferenceVoltage
     /tmp/ccqF3GRw.s:1849   .text.PWMC_DPWM_ModeEnable:0000000000000000 $t
     /tmp/ccqF3GRw.s:1856   .text.PWMC_DPWM_ModeEnable:0000000000000000 PWMC_DPWM_ModeEnable
     /tmp/ccqF3GRw.s:1896   .text.PWMC_DPWM_ModeDisable:0000000000000000 $t
     /tmp/ccqF3GRw.s:1903   .text.PWMC_DPWM_ModeDisable:0000000000000000 PWMC_DPWM_ModeDisable
     /tmp/ccqF3GRw.s:1943   .text.PWMC_GetDPWM_Mode:0000000000000000 $t
     /tmp/ccqF3GRw.s:1950   .text.PWMC_GetDPWM_Mode:0000000000000000 PWMC_GetDPWM_Mode
     /tmp/ccqF3GRw.s:1989   .text.PWMC_RLDetectionModeEnable:0000000000000000 $t
     /tmp/ccqF3GRw.s:1996   .text.PWMC_RLDetectionModeEnable:0000000000000000 PWMC_RLDetectionModeEnable
     /tmp/ccqF3GRw.s:2035   .text.PWMC_RLDetectionModeDisable:0000000000000000 $t
ARM GAS  /tmp/ccqF3GRw.s 			page 84


     /tmp/ccqF3GRw.s:2042   .text.PWMC_RLDetectionModeDisable:0000000000000000 PWMC_RLDetectionModeDisable
     /tmp/ccqF3GRw.s:2081   .text.PWMC_RLDetectionModeSetDuty:0000000000000000 $t
     /tmp/ccqF3GRw.s:2088   .text.PWMC_RLDetectionModeSetDuty:0000000000000000 PWMC_RLDetectionModeSetDuty
     /tmp/ccqF3GRw.s:2132   .text.PWMC_RLTurnOnLowSidesAndStart:0000000000000000 $t
     /tmp/ccqF3GRw.s:2139   .text.PWMC_RLTurnOnLowSidesAndStart:0000000000000000 PWMC_RLTurnOnLowSidesAndStart
     /tmp/ccqF3GRw.s:2178   .text.PWMC_RegisterGetPhaseCurrentsCallBack:0000000000000000 $t
     /tmp/ccqF3GRw.s:2185   .text.PWMC_RegisterGetPhaseCurrentsCallBack:0000000000000000 PWMC_RegisterGetPhaseCurrentsCallBack
     /tmp/ccqF3GRw.s:2226   .text.PWMC_RegisterSwitchOffPwmCallBack:0000000000000000 $t
     /tmp/ccqF3GRw.s:2233   .text.PWMC_RegisterSwitchOffPwmCallBack:0000000000000000 PWMC_RegisterSwitchOffPwmCallBack
     /tmp/ccqF3GRw.s:2274   .text.PWMC_RegisterSwitchonPwmCallBack:0000000000000000 $t
     /tmp/ccqF3GRw.s:2281   .text.PWMC_RegisterSwitchonPwmCallBack:0000000000000000 PWMC_RegisterSwitchonPwmCallBack
     /tmp/ccqF3GRw.s:2322   .text.PWMC_RegisterReadingCalibrationCallBack:0000000000000000 $t
     /tmp/ccqF3GRw.s:2329   .text.PWMC_RegisterReadingCalibrationCallBack:0000000000000000 PWMC_RegisterReadingCalibrationCallBack
     /tmp/ccqF3GRw.s:2370   .text.PWMC_RegisterTurnOnLowSidesCallBack:0000000000000000 $t
     /tmp/ccqF3GRw.s:2377   .text.PWMC_RegisterTurnOnLowSidesCallBack:0000000000000000 PWMC_RegisterTurnOnLowSidesCallBack
     /tmp/ccqF3GRw.s:2418   .text.PWMC_RegisterSampPointSectXCallBack:0000000000000000 $t
     /tmp/ccqF3GRw.s:2425   .text.PWMC_RegisterSampPointSectXCallBack:0000000000000000 PWMC_RegisterSampPointSectXCallBack
     /tmp/ccqF3GRw.s:2466   .text.PWMC_RegisterOCPSetRefVoltageCallBack:0000000000000000 $t
     /tmp/ccqF3GRw.s:2473   .text.PWMC_RegisterOCPSetRefVoltageCallBack:0000000000000000 PWMC_RegisterOCPSetRefVoltageCallBack
     /tmp/ccqF3GRw.s:2514   .text.PWMC_RegisterRLDetectionModeEnableCallBack:0000000000000000 $t
     /tmp/ccqF3GRw.s:2521   .text.PWMC_RegisterRLDetectionModeEnableCallBack:0000000000000000 PWMC_RegisterRLDetectionModeEnableCallBack
     /tmp/ccqF3GRw.s:2562   .text.PWMC_RegisterRLDetectionModeDisableCallBack:0000000000000000 $t
     /tmp/ccqF3GRw.s:2569   .text.PWMC_RegisterRLDetectionModeDisableCallBack:0000000000000000 PWMC_RegisterRLDetectionModeDisableCallBack
     /tmp/ccqF3GRw.s:2610   .text.PWMC_RegisterRLDetectionModeSetDutyCallBack:0000000000000000 $t
     /tmp/ccqF3GRw.s:2617   .text.PWMC_RegisterRLDetectionModeSetDutyCallBack:0000000000000000 PWMC_RegisterRLDetectionModeSetDutyCallBack

UNDEFINED SYMBOLS
MCM_Rev_Park
