ARM GAS  /tmp/ccOeJW39.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"mc_perf.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.OFFSET_TAB_CCMRx,"a"
  18              		.align	2
  21              	OFFSET_TAB_CCMRx:
  22 0000 00000000 		.ascii	"\000\000\000\000\004\004\004\00488"
  22      04040404 
  22      3838
  23              		.section	.rodata.SHIFT_TAB_OCxx,"a"
  24              		.align	2
  27              	SHIFT_TAB_OCxx:
  28 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\010"
  28      00000800 
  28      0008
  29              		.section	.rodata.SHIFT_TAB_ICxx,"a"
  30              		.align	2
  33              	SHIFT_TAB_ICxx:
  34 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\000"
  34      00000800 
  34      0000
  35              		.section	.rodata.SHIFT_TAB_CCxP,"a"
  36              		.align	2
  39              	SHIFT_TAB_CCxP:
  40 0000 00020406 		.ascii	"\000\002\004\006\010\012\014\016\020\024"
  40      080A0C0E 
  40      1014
  41              		.section	.rodata.SHIFT_TAB_OISx,"a"
  42              		.align	2
  45              	SHIFT_TAB_OISx:
  46 0000 00010203 		.ascii	"\000\001\002\003\004\005\006\007\010\012"
  46      04050607 
  46      080A
  47              		.section	.rodata.USART_PRESCALER_TAB,"a"
  48              		.align	2
  51              	USART_PRESCALER_TAB:
  52 0000 01000000 		.word	1
  53 0004 02000000 		.word	2
  54 0008 04000000 		.word	4
  55 000c 06000000 		.word	6
  56 0010 08000000 		.word	8
  57 0014 0A000000 		.word	10
  58 0018 0C000000 		.word	12
  59 001c 10000000 		.word	16
ARM GAS  /tmp/ccOeJW39.s 			page 2


  60 0020 20000000 		.word	32
  61 0024 40000000 		.word	64
  62 0028 80000000 		.word	128
  63 002c 00010000 		.word	256
  64              		.section	.rodata.CHANNEL_OFFSET_TAB,"a"
  65              		.align	2
  68              	CHANNEL_OFFSET_TAB:
  69 0000 081C3044 		.ascii	"\010\0340DXl"
  69      586C
  70              		.section	.text.MC_Perf_Measure_Init,"ax",%progbits
  71              		.align	1
  72              		.global	MC_Perf_Measure_Init
  73              		.arch armv7e-m
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  77              		.fpu fpv4-sp-d16
  79              	MC_Perf_Measure_Init:
  80              	.LFB1438:
  81              		.file 1 "Src/mc_perf.c"
   1:Src/mc_perf.c **** /**
   2:Src/mc_perf.c ****   ******************************************************************************
   3:Src/mc_perf.c ****   * @file    mc_perf.c
   4:Src/mc_perf.c ****   * @author  Motor Control SDK Team, ST Microelectronics
   5:Src/mc_perf.c ****   * @brief   Execution time measurement
   6:Src/mc_perf.c ****   ******************************************************************************
   7:Src/mc_perf.c ****   * @attention
   8:Src/mc_perf.c ****   *
   9:Src/mc_perf.c ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  10:Src/mc_perf.c ****   * All rights reserved.</center></h2>
  11:Src/mc_perf.c ****   *
  12:Src/mc_perf.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/mc_perf.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/mc_perf.c ****   * the License. You may obtain a copy of the License at:
  15:Src/mc_perf.c ****   *                             www.st.com/SLA0044
  16:Src/mc_perf.c ****   *
  17:Src/mc_perf.c ****   ******************************************************************************
  18:Src/mc_perf.c ****   */
  19:Src/mc_perf.c **** 
  20:Src/mc_perf.c **** #include "parameters_conversion.h"
  21:Src/mc_perf.c **** #include "mc_perf.h"
  22:Src/mc_perf.c **** 
  23:Src/mc_perf.c **** void MC_Perf_Measure_Init(MC_Perf_Handle_t *pHandle)
  24:Src/mc_perf.c **** {
  82              		.loc 1 24 1
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 16
  85              		@ frame_needed = 1, uses_anonymous_args = 0
  86              		@ link register save eliminated.
  87 0000 80B4     		push	{r7}
  88              	.LCFI0:
  89              		.cfi_def_cfa_offset 4
  90              		.cfi_offset 7, -4
  91 0002 85B0     		sub	sp, sp, #20
  92              	.LCFI1:
  93              		.cfi_def_cfa_offset 24
  94 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccOeJW39.s 			page 3


  95              	.LCFI2:
  96              		.cfi_def_cfa_register 7
  97 0006 7860     		str	r0, [r7, #4]
  25:Src/mc_perf.c **** #ifdef NULL_PTR_CHECK_MC_PERF
  26:Src/mc_perf.c ****   if (MC_NULL == pHandle)
  27:Src/mc_perf.c ****   {
  28:Src/mc_perf.c ****     /* Nothing to do */
  29:Src/mc_perf.c ****   }
  30:Src/mc_perf.c ****   else
  31:Src/mc_perf.c ****   {
  32:Src/mc_perf.c **** #endif
  33:Src/mc_perf.c ****   uint8_t  i;
  34:Src/mc_perf.c ****   Perf_Handle_t  *pHdl;
  35:Src/mc_perf.c **** 
  36:Src/mc_perf.c ****   /* Set Debug mod for DWT IP Enabling */
  37:Src/mc_perf.c ****   CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  98              		.loc 1 37 20
  99 0008 1D4B     		ldr	r3, .L5
 100 000a DB68     		ldr	r3, [r3, #12]
 101 000c 1C4A     		ldr	r2, .L5
 102 000e 43F08073 		orr	r3, r3, #16777216
 103 0012 D360     		str	r3, [r2, #12]
  38:Src/mc_perf.c **** 
  39:Src/mc_perf.c ****   if (DWT->CTRL != 0U)
 104              		.loc 1 39 10
 105 0014 1B4B     		ldr	r3, .L5+4
 106 0016 1B68     		ldr	r3, [r3]
 107              		.loc 1 39 6
 108 0018 002B     		cmp	r3, #0
 109 001a 08D0     		beq	.L2
  40:Src/mc_perf.c ****   {                                        /* Check if DWT is present. */
  41:Src/mc_perf.c ****     DWT->CYCCNT  = 0;
 110              		.loc 1 41 8
 111 001c 194B     		ldr	r3, .L5+4
 112              		.loc 1 41 18
 113 001e 0022     		movs	r2, #0
 114 0020 5A60     		str	r2, [r3, #4]
  42:Src/mc_perf.c ****     DWT->CTRL   |= DWT_CTRL_CYCCNTENA_Msk; /* Enable Cycle Counter. */
 115              		.loc 1 42 17
 116 0022 184B     		ldr	r3, .L5+4
 117 0024 1B68     		ldr	r3, [r3]
 118 0026 174A     		ldr	r2, .L5+4
 119 0028 43F00103 		orr	r3, r3, #1
 120 002c 1360     		str	r3, [r2]
 121              	.L2:
  43:Src/mc_perf.c ****   }
  44:Src/mc_perf.c ****   else
  45:Src/mc_perf.c ****   {
  46:Src/mc_perf.c ****     /* Nothing to do */
  47:Src/mc_perf.c ****   }
  48:Src/mc_perf.c **** 
  49:Src/mc_perf.c ****     for (i = 0U; i < MC_PERF_NB_TRACES; i++)
 122              		.loc 1 49 12
 123 002e 0023     		movs	r3, #0
 124 0030 FB73     		strb	r3, [r7, #15]
 125              		.loc 1 49 5
 126 0032 15E0     		b	.L3
ARM GAS  /tmp/ccOeJW39.s 			page 4


 127              	.L4:
  50:Src/mc_perf.c ****     {
  51:Src/mc_perf.c ****       pHdl = &pHandle->MC_Perf_TraceLog[i];
 128              		.loc 1 51 40 discriminator 3
 129 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 130              		.loc 1 51 12 discriminator 3
 131 0036 1B01     		lsls	r3, r3, #4
 132 0038 0833     		adds	r3, r3, #8
 133 003a 7A68     		ldr	r2, [r7, #4]
 134 003c 1344     		add	r3, r3, r2
 135 003e BB60     		str	r3, [r7, #8]
  52:Src/mc_perf.c ****       pHdl->StartMeasure = 0;
 136              		.loc 1 52 26 discriminator 3
 137 0040 BB68     		ldr	r3, [r7, #8]
 138 0042 0022     		movs	r2, #0
 139 0044 1A60     		str	r2, [r3]
  53:Src/mc_perf.c ****       pHdl->DeltaTimeInCycle = 0;
 140              		.loc 1 53 30 discriminator 3
 141 0046 BB68     		ldr	r3, [r7, #8]
 142 0048 0022     		movs	r2, #0
 143 004a 5A60     		str	r2, [r3, #4]
  54:Src/mc_perf.c ****       pHdl->min = UINT32_MAX;
 144              		.loc 1 54 17 discriminator 3
 145 004c BB68     		ldr	r3, [r7, #8]
 146 004e 4FF0FF32 		mov	r2, #-1
 147 0052 9A60     		str	r2, [r3, #8]
  55:Src/mc_perf.c ****       pHdl->max = 0;
 148              		.loc 1 55 17 discriminator 3
 149 0054 BB68     		ldr	r3, [r7, #8]
 150 0056 0022     		movs	r2, #0
 151 0058 DA60     		str	r2, [r3, #12]
  49:Src/mc_perf.c ****     {
 152              		.loc 1 49 42 discriminator 3
 153 005a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 154 005c 0133     		adds	r3, r3, #1
 155 005e FB73     		strb	r3, [r7, #15]
 156              	.L3:
  49:Src/mc_perf.c ****     {
 157              		.loc 1 49 5 discriminator 1
 158 0060 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 159 0062 012B     		cmp	r3, #1
 160 0064 E6D9     		bls	.L4
  56:Src/mc_perf.c ****     }
  57:Src/mc_perf.c ****     pHandle->BG_Task_OnGoing = false;
 161              		.loc 1 57 30
 162 0066 7B68     		ldr	r3, [r7, #4]
 163 0068 0022     		movs	r2, #0
 164 006a 1A70     		strb	r2, [r3]
  58:Src/mc_perf.c ****     pHandle->AccHighFreqTasksCnt = 0;
 165              		.loc 1 58 34
 166 006c 7B68     		ldr	r3, [r7, #4]
 167 006e 0022     		movs	r2, #0
 168 0070 5A60     		str	r2, [r3, #4]
  59:Src/mc_perf.c **** #ifdef NULL_PTR_CHECK_MC_PERF
  60:Src/mc_perf.c ****   }
  61:Src/mc_perf.c **** #endif
  62:Src/mc_perf.c **** }
ARM GAS  /tmp/ccOeJW39.s 			page 5


 169              		.loc 1 62 1
 170 0072 00BF     		nop
 171 0074 1437     		adds	r7, r7, #20
 172              	.LCFI3:
 173              		.cfi_def_cfa_offset 4
 174 0076 BD46     		mov	sp, r7
 175              	.LCFI4:
 176              		.cfi_def_cfa_register 13
 177              		@ sp needed
 178 0078 5DF8047B 		ldr	r7, [sp], #4
 179              	.LCFI5:
 180              		.cfi_restore 7
 181              		.cfi_def_cfa_offset 0
 182 007c 7047     		bx	lr
 183              	.L6:
 184 007e 00BF     		.align	2
 185              	.L5:
 186 0080 F0ED00E0 		.word	-536810000
 187 0084 001000E0 		.word	-536866816
 188              		.cfi_endproc
 189              	.LFE1438:
 191              		.section	.text.MC_Perf_Clear,"ax",%progbits
 192              		.align	1
 193              		.global	MC_Perf_Clear
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 197              		.fpu fpv4-sp-d16
 199              	MC_Perf_Clear:
 200              	.LFB1439:
  63:Src/mc_perf.c **** 
  64:Src/mc_perf.c **** void MC_Perf_Clear(MC_Perf_Handle_t *pHandle,uint8_t bMotor)
  65:Src/mc_perf.c **** {
 201              		.loc 1 65 1
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 16
 204              		@ frame_needed = 1, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 206 0000 80B4     		push	{r7}
 207              	.LCFI6:
 208              		.cfi_def_cfa_offset 4
 209              		.cfi_offset 7, -4
 210 0002 85B0     		sub	sp, sp, #20
 211              	.LCFI7:
 212              		.cfi_def_cfa_offset 24
 213 0004 00AF     		add	r7, sp, #0
 214              	.LCFI8:
 215              		.cfi_def_cfa_register 7
 216 0006 7860     		str	r0, [r7, #4]
 217 0008 0B46     		mov	r3, r1
 218 000a FB70     		strb	r3, [r7, #3]
  66:Src/mc_perf.c **** #ifdef NULL_PTR_CHECK_MC_PERF
  67:Src/mc_perf.c ****   if (MC_NULL == pHandle)
  68:Src/mc_perf.c ****   {
  69:Src/mc_perf.c ****     /* Nothing to do */
  70:Src/mc_perf.c ****   }
  71:Src/mc_perf.c ****   else
ARM GAS  /tmp/ccOeJW39.s 			page 6


  72:Src/mc_perf.c ****   {
  73:Src/mc_perf.c **** #endif
  74:Src/mc_perf.c ****     uint8_t  i;
  75:Src/mc_perf.c ****     Perf_Handle_t  *pHdl;
  76:Src/mc_perf.c **** 
  77:Src/mc_perf.c ****     for (i = 0U; i < 2; i++)
 219              		.loc 1 77 12
 220 000c 0023     		movs	r3, #0
 221 000e FB73     		strb	r3, [r7, #15]
 222              		.loc 1 77 5
 223 0010 15E0     		b	.L8
 224              	.L9:
  78:Src/mc_perf.c ****     {
  79:Src/mc_perf.c ****       pHdl = &pHandle->MC_Perf_TraceLog[2*bMotor+i];
 225              		.loc 1 79 42 discriminator 3
 226 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 227 0014 5A00     		lsls	r2, r3, #1
 228              		.loc 1 79 49 discriminator 3
 229 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 230 0018 1344     		add	r3, r3, r2
 231              		.loc 1 79 12 discriminator 3
 232 001a 1B01     		lsls	r3, r3, #4
 233 001c 0833     		adds	r3, r3, #8
 234 001e 7A68     		ldr	r2, [r7, #4]
 235 0020 1344     		add	r3, r3, r2
 236 0022 BB60     		str	r3, [r7, #8]
  80:Src/mc_perf.c ****       pHdl->DeltaTimeInCycle = 0;
 237              		.loc 1 80 30 discriminator 3
 238 0024 BB68     		ldr	r3, [r7, #8]
 239 0026 0022     		movs	r2, #0
 240 0028 5A60     		str	r2, [r3, #4]
  81:Src/mc_perf.c ****       pHdl->min = UINT32_MAX;
 241              		.loc 1 81 17 discriminator 3
 242 002a BB68     		ldr	r3, [r7, #8]
 243 002c 4FF0FF32 		mov	r2, #-1
 244 0030 9A60     		str	r2, [r3, #8]
  82:Src/mc_perf.c ****       pHdl->max = 0;
 245              		.loc 1 82 17 discriminator 3
 246 0032 BB68     		ldr	r3, [r7, #8]
 247 0034 0022     		movs	r2, #0
 248 0036 DA60     		str	r2, [r3, #12]
  77:Src/mc_perf.c ****     {
 249              		.loc 1 77 26 discriminator 3
 250 0038 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 251 003a 0133     		adds	r3, r3, #1
 252 003c FB73     		strb	r3, [r7, #15]
 253              	.L8:
  77:Src/mc_perf.c ****     {
 254              		.loc 1 77 5 discriminator 1
 255 003e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 256 0040 012B     		cmp	r3, #1
 257 0042 E6D9     		bls	.L9
  83:Src/mc_perf.c ****     }
  84:Src/mc_perf.c **** #ifdef NULL_PTR_CHECK_MC_PERF
  85:Src/mc_perf.c ****   }
  86:Src/mc_perf.c **** #endif
  87:Src/mc_perf.c **** }
ARM GAS  /tmp/ccOeJW39.s 			page 7


 258              		.loc 1 87 1
 259 0044 00BF     		nop
 260 0046 00BF     		nop
 261 0048 1437     		adds	r7, r7, #20
 262              	.LCFI9:
 263              		.cfi_def_cfa_offset 4
 264 004a BD46     		mov	sp, r7
 265              	.LCFI10:
 266              		.cfi_def_cfa_register 13
 267              		@ sp needed
 268 004c 5DF8047B 		ldr	r7, [sp], #4
 269              	.LCFI11:
 270              		.cfi_restore 7
 271              		.cfi_def_cfa_offset 0
 272 0050 7047     		bx	lr
 273              		.cfi_endproc
 274              	.LFE1439:
 276              		.section	.text.MC_BG_Perf_Measure_Start,"ax",%progbits
 277              		.align	1
 278              		.global	MC_BG_Perf_Measure_Start
 279              		.syntax unified
 280              		.thumb
 281              		.thumb_func
 282              		.fpu fpv4-sp-d16
 284              	MC_BG_Perf_Measure_Start:
 285              	.LFB1440:
  88:Src/mc_perf.c **** 
  89:Src/mc_perf.c **** /**
  90:Src/mc_perf.c ****  * @brief  Start the measure of a code section called in background.
  91:Src/mc_perf.c ****  * @param  pHandle: handler of the performance measurement component.
  92:Src/mc_perf.c ****  * @param  CodeSection: code section to measure.
  93:Src/mc_perf.c ****  */
  94:Src/mc_perf.c **** void MC_BG_Perf_Measure_Start(MC_Perf_Handle_t *pHandle, uint8_t  CodeSection)
  95:Src/mc_perf.c **** {
 286              		.loc 1 95 1
 287              		.cfi_startproc
 288              		@ args = 0, pretend = 0, frame = 16
 289              		@ frame_needed = 1, uses_anonymous_args = 0
 290              		@ link register save eliminated.
 291 0000 80B4     		push	{r7}
 292              	.LCFI12:
 293              		.cfi_def_cfa_offset 4
 294              		.cfi_offset 7, -4
 295 0002 85B0     		sub	sp, sp, #20
 296              	.LCFI13:
 297              		.cfi_def_cfa_offset 24
 298 0004 00AF     		add	r7, sp, #0
 299              	.LCFI14:
 300              		.cfi_def_cfa_register 7
 301 0006 7860     		str	r0, [r7, #4]
 302 0008 0B46     		mov	r3, r1
 303 000a FB70     		strb	r3, [r7, #3]
  96:Src/mc_perf.c **** #ifdef NULL_PTR_CHECK_MC_PERF
  97:Src/mc_perf.c ****   if (MC_NULL == pHandle)
  98:Src/mc_perf.c ****   {
  99:Src/mc_perf.c ****     /* Nothing to do */
 100:Src/mc_perf.c ****   }
ARM GAS  /tmp/ccOeJW39.s 			page 8


 101:Src/mc_perf.c ****   else
 102:Src/mc_perf.c ****   {
 103:Src/mc_perf.c **** #endif
 104:Src/mc_perf.c ****     pHandle->BG_Task_OnGoing = true;
 304              		.loc 1 104 30
 305 000c 7B68     		ldr	r3, [r7, #4]
 306 000e 0122     		movs	r2, #1
 307 0010 1A70     		strb	r2, [r3]
 105:Src/mc_perf.c ****     pHandle->AccHighFreqTasksCnt = 0;
 308              		.loc 1 105 34
 309 0012 7B68     		ldr	r3, [r7, #4]
 310 0014 0022     		movs	r2, #0
 311 0016 5A60     		str	r2, [r3, #4]
 106:Src/mc_perf.c ****     uint32_t StartMeasure = DWT->CYCCNT;
 312              		.loc 1 106 32
 313 0018 074B     		ldr	r3, .L11
 314              		.loc 1 106 14
 315 001a 5B68     		ldr	r3, [r3, #4]
 316 001c FB60     		str	r3, [r7, #12]
 107:Src/mc_perf.c ****     pHandle->MC_Perf_TraceLog[CodeSection].StartMeasure = StartMeasure;
 317              		.loc 1 107 43
 318 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 319              		.loc 1 107 57
 320 0020 7A68     		ldr	r2, [r7, #4]
 321 0022 1B01     		lsls	r3, r3, #4
 322 0024 1344     		add	r3, r3, r2
 323 0026 0833     		adds	r3, r3, #8
 324 0028 FA68     		ldr	r2, [r7, #12]
 325 002a 1A60     		str	r2, [r3]
 108:Src/mc_perf.c **** #ifdef NULL_PTR_CHECK_MC_PERF
 109:Src/mc_perf.c ****   }
 110:Src/mc_perf.c **** #endif
 111:Src/mc_perf.c **** }
 326              		.loc 1 111 1
 327 002c 00BF     		nop
 328 002e 1437     		adds	r7, r7, #20
 329              	.LCFI15:
 330              		.cfi_def_cfa_offset 4
 331 0030 BD46     		mov	sp, r7
 332              	.LCFI16:
 333              		.cfi_def_cfa_register 13
 334              		@ sp needed
 335 0032 5DF8047B 		ldr	r7, [sp], #4
 336              	.LCFI17:
 337              		.cfi_restore 7
 338              		.cfi_def_cfa_offset 0
 339 0036 7047     		bx	lr
 340              	.L12:
 341              		.align	2
 342              	.L11:
 343 0038 001000E0 		.word	-536866816
 344              		.cfi_endproc
 345              	.LFE1440:
 347              		.section	.text.MC_Perf_Measure_Stop,"ax",%progbits
 348              		.align	1
 349              		.global	MC_Perf_Measure_Stop
 350              		.syntax unified
ARM GAS  /tmp/ccOeJW39.s 			page 9


 351              		.thumb
 352              		.thumb_func
 353              		.fpu fpv4-sp-d16
 355              	MC_Perf_Measure_Stop:
 356              	.LFB1441:
 112:Src/mc_perf.c **** 
 113:Src/mc_perf.c **** /**
 114:Src/mc_perf.c ****  * @brief  Stop the measurement of a code section and compute elapse time.
 115:Src/mc_perf.c ****  * @param  pHandle: handler of the performance measurement component.
 116:Src/mc_perf.c ****  * @param  CodeSection: code section to measure.
 117:Src/mc_perf.c ****  */
 118:Src/mc_perf.c **** void MC_Perf_Measure_Stop(MC_Perf_Handle_t *pHandle, uint8_t  CodeSection)
 119:Src/mc_perf.c **** {
 357              		.loc 1 119 1
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 16
 360              		@ frame_needed = 1, uses_anonymous_args = 0
 361              		@ link register save eliminated.
 362 0000 80B4     		push	{r7}
 363              	.LCFI18:
 364              		.cfi_def_cfa_offset 4
 365              		.cfi_offset 7, -4
 366 0002 85B0     		sub	sp, sp, #20
 367              	.LCFI19:
 368              		.cfi_def_cfa_offset 24
 369 0004 00AF     		add	r7, sp, #0
 370              	.LCFI20:
 371              		.cfi_def_cfa_register 7
 372 0006 7860     		str	r0, [r7, #4]
 373 0008 0B46     		mov	r3, r1
 374 000a FB70     		strb	r3, [r7, #3]
 120:Src/mc_perf.c **** #ifdef NULL_PTR_CHECK_MC_PERF
 121:Src/mc_perf.c ****   if (MC_NULL == pHandle)
 122:Src/mc_perf.c ****   {
 123:Src/mc_perf.c ****     /* Nothing to do */
 124:Src/mc_perf.c ****   }
 125:Src/mc_perf.c ****   else
 126:Src/mc_perf.c ****   {
 127:Src/mc_perf.c **** #endif
 128:Src/mc_perf.c ****     uint32_t StopMeasure;
 129:Src/mc_perf.c ****     Perf_Handle_t *pHdl;
 130:Src/mc_perf.c **** 
 131:Src/mc_perf.c ****     StopMeasure = DWT->CYCCNT;
 375              		.loc 1 131 22
 376 000c 204B     		ldr	r3, .L20
 377              		.loc 1 131 17
 378 000e 5B68     		ldr	r3, [r3, #4]
 379 0010 FB60     		str	r3, [r7, #12]
 132:Src/mc_perf.c ****     pHdl = &pHandle->MC_Perf_TraceLog[CodeSection];
 380              		.loc 1 132 38
 381 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 382              		.loc 1 132 10
 383 0014 1B01     		lsls	r3, r3, #4
 384 0016 0833     		adds	r3, r3, #8
 385 0018 7A68     		ldr	r2, [r7, #4]
 386 001a 1344     		add	r3, r3, r2
 387 001c BB60     		str	r3, [r7, #8]
ARM GAS  /tmp/ccOeJW39.s 			page 10


 133:Src/mc_perf.c **** 
 134:Src/mc_perf.c ****     /* Check Overflow cases */
 135:Src/mc_perf.c ****     if (StopMeasure < pHdl->StartMeasure)
 388              		.loc 1 135 27
 389 001e BB68     		ldr	r3, [r7, #8]
 390 0020 1B68     		ldr	r3, [r3]
 391              		.loc 1 135 8
 392 0022 FA68     		ldr	r2, [r7, #12]
 393 0024 9A42     		cmp	r2, r3
 394 0026 07D2     		bcs	.L14
 136:Src/mc_perf.c ****     {
 137:Src/mc_perf.c ****       pHdl->DeltaTimeInCycle = (UINT32_MAX - pHdl->StartMeasure) + StopMeasure;
 395              		.loc 1 137 50
 396 0028 BB68     		ldr	r3, [r7, #8]
 397 002a 1B68     		ldr	r3, [r3]
 398              		.loc 1 137 66
 399 002c FA68     		ldr	r2, [r7, #12]
 400 002e D31A     		subs	r3, r2, r3
 401 0030 5A1E     		subs	r2, r3, #1
 402              		.loc 1 137 30
 403 0032 BB68     		ldr	r3, [r7, #8]
 404 0034 5A60     		str	r2, [r3, #4]
 405 0036 05E0     		b	.L15
 406              	.L14:
 138:Src/mc_perf.c ****     }
 139:Src/mc_perf.c ****     else
 140:Src/mc_perf.c ****     {
 141:Src/mc_perf.c ****       pHdl->DeltaTimeInCycle = StopMeasure - pHdl->StartMeasure;
 407              		.loc 1 141 50
 408 0038 BB68     		ldr	r3, [r7, #8]
 409 003a 1B68     		ldr	r3, [r3]
 410              		.loc 1 141 44
 411 003c FA68     		ldr	r2, [r7, #12]
 412 003e D21A     		subs	r2, r2, r3
 413              		.loc 1 141 30
 414 0040 BB68     		ldr	r3, [r7, #8]
 415 0042 5A60     		str	r2, [r3, #4]
 416              	.L15:
 142:Src/mc_perf.c ****     }
 143:Src/mc_perf.c **** 
 144:Src/mc_perf.c ****     if(pHandle->BG_Task_OnGoing)
 417              		.loc 1 144 15
 418 0044 7B68     		ldr	r3, [r7, #4]
 419 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 420              		.loc 1 144 7
 421 0048 002B     		cmp	r3, #0
 422 004a 06D0     		beq	.L16
 145:Src/mc_perf.c ****     {
 146:Src/mc_perf.c ****       pHandle->AccHighFreqTasksCnt += pHdl->DeltaTimeInCycle;
 423              		.loc 1 146 36
 424 004c 7B68     		ldr	r3, [r7, #4]
 425 004e 5A68     		ldr	r2, [r3, #4]
 426              		.loc 1 146 43
 427 0050 BB68     		ldr	r3, [r7, #8]
 428 0052 5B68     		ldr	r3, [r3, #4]
 429              		.loc 1 146 36
 430 0054 1A44     		add	r2, r2, r3
ARM GAS  /tmp/ccOeJW39.s 			page 11


 431 0056 7B68     		ldr	r3, [r7, #4]
 432 0058 5A60     		str	r2, [r3, #4]
 433              	.L16:
 147:Src/mc_perf.c ****     }
 148:Src/mc_perf.c ****     else
 149:Src/mc_perf.c ****     {
 150:Src/mc_perf.c ****       /* Nothing to do */
 151:Src/mc_perf.c ****     }
 152:Src/mc_perf.c **** 
 153:Src/mc_perf.c ****     if (pHdl->max < pHdl->DeltaTimeInCycle)
 434              		.loc 1 153 13
 435 005a BB68     		ldr	r3, [r7, #8]
 436 005c DA68     		ldr	r2, [r3, #12]
 437              		.loc 1 153 25
 438 005e BB68     		ldr	r3, [r7, #8]
 439 0060 5B68     		ldr	r3, [r3, #4]
 440              		.loc 1 153 8
 441 0062 9A42     		cmp	r2, r3
 442 0064 03D2     		bcs	.L17
 154:Src/mc_perf.c ****     {
 155:Src/mc_perf.c ****       pHdl->max = pHdl->DeltaTimeInCycle;
 443              		.loc 1 155 23
 444 0066 BB68     		ldr	r3, [r7, #8]
 445 0068 5A68     		ldr	r2, [r3, #4]
 446              		.loc 1 155 17
 447 006a BB68     		ldr	r3, [r7, #8]
 448 006c DA60     		str	r2, [r3, #12]
 449              	.L17:
 156:Src/mc_perf.c ****     }
 157:Src/mc_perf.c ****     else
 158:Src/mc_perf.c ****     {
 159:Src/mc_perf.c ****       /* Nothing to do */
 160:Src/mc_perf.c ****     }
 161:Src/mc_perf.c **** 
 162:Src/mc_perf.c ****     if (pHdl->min > pHdl->DeltaTimeInCycle)
 450              		.loc 1 162 13
 451 006e BB68     		ldr	r3, [r7, #8]
 452 0070 9A68     		ldr	r2, [r3, #8]
 453              		.loc 1 162 25
 454 0072 BB68     		ldr	r3, [r7, #8]
 455 0074 5B68     		ldr	r3, [r3, #4]
 456              		.loc 1 162 8
 457 0076 9A42     		cmp	r2, r3
 458 0078 03D9     		bls	.L19
 163:Src/mc_perf.c ****     {
 164:Src/mc_perf.c ****       pHdl->min = pHdl->DeltaTimeInCycle;
 459              		.loc 1 164 23
 460 007a BB68     		ldr	r3, [r7, #8]
 461 007c 5A68     		ldr	r2, [r3, #4]
 462              		.loc 1 164 17
 463 007e BB68     		ldr	r3, [r7, #8]
 464 0080 9A60     		str	r2, [r3, #8]
 465              	.L19:
 165:Src/mc_perf.c ****     }
 166:Src/mc_perf.c ****     else
 167:Src/mc_perf.c ****     {
 168:Src/mc_perf.c ****       /* Nothing to do */
ARM GAS  /tmp/ccOeJW39.s 			page 12


 169:Src/mc_perf.c ****     }
 170:Src/mc_perf.c **** #ifdef NULL_PTR_CHECK_MC_PERF
 171:Src/mc_perf.c ****   }
 172:Src/mc_perf.c **** #endif
 173:Src/mc_perf.c **** }
 466              		.loc 1 173 1
 467 0082 00BF     		nop
 468 0084 1437     		adds	r7, r7, #20
 469              	.LCFI21:
 470              		.cfi_def_cfa_offset 4
 471 0086 BD46     		mov	sp, r7
 472              	.LCFI22:
 473              		.cfi_def_cfa_register 13
 474              		@ sp needed
 475 0088 5DF8047B 		ldr	r7, [sp], #4
 476              	.LCFI23:
 477              		.cfi_restore 7
 478              		.cfi_def_cfa_offset 0
 479 008c 7047     		bx	lr
 480              	.L21:
 481 008e 00BF     		.align	2
 482              	.L20:
 483 0090 001000E0 		.word	-536866816
 484              		.cfi_endproc
 485              	.LFE1441:
 487              		.section	.text.MC_BG_Perf_Measure_Stop,"ax",%progbits
 488              		.align	1
 489              		.global	MC_BG_Perf_Measure_Stop
 490              		.syntax unified
 491              		.thumb
 492              		.thumb_func
 493              		.fpu fpv4-sp-d16
 495              	MC_BG_Perf_Measure_Stop:
 496              	.LFB1442:
 174:Src/mc_perf.c **** 
 175:Src/mc_perf.c **** /**
 176:Src/mc_perf.c ****  * @brief  Stop the measurement of a code section in BG and compute elapse time.
 177:Src/mc_perf.c ****  * @param  pHandle: handler of the performance measurement component.
 178:Src/mc_perf.c ****  * @param  CodeSection: code section to measure.
 179:Src/mc_perf.c ****  */
 180:Src/mc_perf.c **** void MC_BG_Perf_Measure_Stop(MC_Perf_Handle_t *pHandle, uint8_t CodeSection)
 181:Src/mc_perf.c **** {
 497              		.loc 1 181 1
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 16
 500              		@ frame_needed = 1, uses_anonymous_args = 0
 501              		@ link register save eliminated.
 502 0000 80B4     		push	{r7}
 503              	.LCFI24:
 504              		.cfi_def_cfa_offset 4
 505              		.cfi_offset 7, -4
 506 0002 85B0     		sub	sp, sp, #20
 507              	.LCFI25:
 508              		.cfi_def_cfa_offset 24
 509 0004 00AF     		add	r7, sp, #0
 510              	.LCFI26:
 511              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccOeJW39.s 			page 13


 512 0006 7860     		str	r0, [r7, #4]
 513 0008 0B46     		mov	r3, r1
 514 000a FB70     		strb	r3, [r7, #3]
 182:Src/mc_perf.c **** #ifdef NULL_PTR_CHECK_MC_PERF
 183:Src/mc_perf.c ****   if (MC_NULL == pHandle)
 184:Src/mc_perf.c ****   {
 185:Src/mc_perf.c ****     /* Nothing to do */
 186:Src/mc_perf.c ****   }
 187:Src/mc_perf.c ****   else
 188:Src/mc_perf.c ****   {
 189:Src/mc_perf.c **** #endif
 190:Src/mc_perf.c ****     Perf_Handle_t *pHdl;
 191:Src/mc_perf.c ****     uint32_t StopMeasure = DWT->CYCCNT;
 515              		.loc 1 191 31
 516 000c 224B     		ldr	r3, .L29
 517              		.loc 1 191 14
 518 000e 5B68     		ldr	r3, [r3, #4]
 519 0010 FB60     		str	r3, [r7, #12]
 192:Src/mc_perf.c ****     pHandle->BG_Task_OnGoing = false;
 520              		.loc 1 192 30
 521 0012 7B68     		ldr	r3, [r7, #4]
 522 0014 0022     		movs	r2, #0
 523 0016 1A70     		strb	r2, [r3]
 193:Src/mc_perf.c **** 
 194:Src/mc_perf.c ****     pHdl  = &pHandle->MC_Perf_TraceLog[CodeSection];
 524              		.loc 1 194 39
 525 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 526              		.loc 1 194 11
 527 001a 1B01     		lsls	r3, r3, #4
 528 001c 0833     		adds	r3, r3, #8
 529 001e 7A68     		ldr	r2, [r7, #4]
 530 0020 1344     		add	r3, r3, r2
 531 0022 BB60     		str	r3, [r7, #8]
 195:Src/mc_perf.c **** 
 196:Src/mc_perf.c ****     /* Check Overflow cases */
 197:Src/mc_perf.c ****     if (StopMeasure < pHdl->StartMeasure)
 532              		.loc 1 197 27
 533 0024 BB68     		ldr	r3, [r7, #8]
 534 0026 1B68     		ldr	r3, [r3]
 535              		.loc 1 197 8
 536 0028 FA68     		ldr	r2, [r7, #12]
 537 002a 9A42     		cmp	r2, r3
 538 002c 07D2     		bcs	.L23
 198:Src/mc_perf.c ****     {
 199:Src/mc_perf.c ****       pHdl->DeltaTimeInCycle = (UINT32_MAX - pHdl->StartMeasure) + StopMeasure;
 539              		.loc 1 199 50
 540 002e BB68     		ldr	r3, [r7, #8]
 541 0030 1B68     		ldr	r3, [r3]
 542              		.loc 1 199 66
 543 0032 FA68     		ldr	r2, [r7, #12]
 544 0034 D31A     		subs	r3, r2, r3
 545 0036 5A1E     		subs	r2, r3, #1
 546              		.loc 1 199 30
 547 0038 BB68     		ldr	r3, [r7, #8]
 548 003a 5A60     		str	r2, [r3, #4]
 549 003c 05E0     		b	.L24
 550              	.L23:
ARM GAS  /tmp/ccOeJW39.s 			page 14


 200:Src/mc_perf.c ****     }
 201:Src/mc_perf.c ****     else
 202:Src/mc_perf.c ****     {
 203:Src/mc_perf.c ****       pHdl->DeltaTimeInCycle = StopMeasure - pHdl->StartMeasure;
 551              		.loc 1 203 50
 552 003e BB68     		ldr	r3, [r7, #8]
 553 0040 1B68     		ldr	r3, [r3]
 554              		.loc 1 203 44
 555 0042 FA68     		ldr	r2, [r7, #12]
 556 0044 D21A     		subs	r2, r2, r3
 557              		.loc 1 203 30
 558 0046 BB68     		ldr	r3, [r7, #8]
 559 0048 5A60     		str	r2, [r3, #4]
 560              	.L24:
 204:Src/mc_perf.c ****     }
 205:Src/mc_perf.c **** 
 206:Src/mc_perf.c ****     if (pHdl->DeltaTimeInCycle > pHandle->AccHighFreqTasksCnt)
 561              		.loc 1 206 13
 562 004a BB68     		ldr	r3, [r7, #8]
 563 004c 5A68     		ldr	r2, [r3, #4]
 564              		.loc 1 206 41
 565 004e 7B68     		ldr	r3, [r7, #4]
 566 0050 5B68     		ldr	r3, [r3, #4]
 567              		.loc 1 206 8
 568 0052 9A42     		cmp	r2, r3
 569 0054 06D9     		bls	.L25
 207:Src/mc_perf.c ****     {
 208:Src/mc_perf.c ****       pHdl->DeltaTimeInCycle -= pHandle->AccHighFreqTasksCnt;
 570              		.loc 1 208 30
 571 0056 BB68     		ldr	r3, [r7, #8]
 572 0058 5A68     		ldr	r2, [r3, #4]
 573              		.loc 1 208 40
 574 005a 7B68     		ldr	r3, [r7, #4]
 575 005c 5B68     		ldr	r3, [r3, #4]
 576              		.loc 1 208 30
 577 005e D21A     		subs	r2, r2, r3
 578 0060 BB68     		ldr	r3, [r7, #8]
 579 0062 5A60     		str	r2, [r3, #4]
 580              	.L25:
 209:Src/mc_perf.c ****     }
 210:Src/mc_perf.c ****     else
 211:Src/mc_perf.c ****     {
 212:Src/mc_perf.c ****       /* Nothing to do */
 213:Src/mc_perf.c ****     }
 214:Src/mc_perf.c ****     if (pHdl->max < pHdl->DeltaTimeInCycle)
 581              		.loc 1 214 13
 582 0064 BB68     		ldr	r3, [r7, #8]
 583 0066 DA68     		ldr	r2, [r3, #12]
 584              		.loc 1 214 25
 585 0068 BB68     		ldr	r3, [r7, #8]
 586 006a 5B68     		ldr	r3, [r3, #4]
 587              		.loc 1 214 8
 588 006c 9A42     		cmp	r2, r3
 589 006e 03D2     		bcs	.L26
 215:Src/mc_perf.c ****     {
 216:Src/mc_perf.c ****       pHdl->max = pHdl->DeltaTimeInCycle;
 590              		.loc 1 216 23
ARM GAS  /tmp/ccOeJW39.s 			page 15


 591 0070 BB68     		ldr	r3, [r7, #8]
 592 0072 5A68     		ldr	r2, [r3, #4]
 593              		.loc 1 216 17
 594 0074 BB68     		ldr	r3, [r7, #8]
 595 0076 DA60     		str	r2, [r3, #12]
 596              	.L26:
 217:Src/mc_perf.c ****     }
 218:Src/mc_perf.c ****     else
 219:Src/mc_perf.c ****     {
 220:Src/mc_perf.c ****       /* Nothing to do */
 221:Src/mc_perf.c ****     }
 222:Src/mc_perf.c **** 
 223:Src/mc_perf.c ****     if (pHdl->min > pHdl->DeltaTimeInCycle)
 597              		.loc 1 223 13
 598 0078 BB68     		ldr	r3, [r7, #8]
 599 007a 9A68     		ldr	r2, [r3, #8]
 600              		.loc 1 223 25
 601 007c BB68     		ldr	r3, [r7, #8]
 602 007e 5B68     		ldr	r3, [r3, #4]
 603              		.loc 1 223 8
 604 0080 9A42     		cmp	r2, r3
 605 0082 03D9     		bls	.L28
 224:Src/mc_perf.c ****     {
 225:Src/mc_perf.c ****       pHdl->min = pHdl->DeltaTimeInCycle;
 606              		.loc 1 225 23
 607 0084 BB68     		ldr	r3, [r7, #8]
 608 0086 5A68     		ldr	r2, [r3, #4]
 609              		.loc 1 225 17
 610 0088 BB68     		ldr	r3, [r7, #8]
 611 008a 9A60     		str	r2, [r3, #8]
 612              	.L28:
 226:Src/mc_perf.c ****     }
 227:Src/mc_perf.c ****     else
 228:Src/mc_perf.c ****     {
 229:Src/mc_perf.c ****       /* Nothing to do */
 230:Src/mc_perf.c ****     }
 231:Src/mc_perf.c **** #ifdef NULL_PTR_CHECK_MC_PERF
 232:Src/mc_perf.c ****   }
 233:Src/mc_perf.c **** #endif
 234:Src/mc_perf.c **** }
 613              		.loc 1 234 1
 614 008c 00BF     		nop
 615 008e 1437     		adds	r7, r7, #20
 616              	.LCFI27:
 617              		.cfi_def_cfa_offset 4
 618 0090 BD46     		mov	sp, r7
 619              	.LCFI28:
 620              		.cfi_def_cfa_register 13
 621              		@ sp needed
 622 0092 5DF8047B 		ldr	r7, [sp], #4
 623              	.LCFI29:
 624              		.cfi_restore 7
 625              		.cfi_def_cfa_offset 0
 626 0096 7047     		bx	lr
 627              	.L30:
 628              		.align	2
 629              	.L29:
ARM GAS  /tmp/ccOeJW39.s 			page 16


 630 0098 001000E0 		.word	-536866816
 631              		.cfi_endproc
 632              	.LFE1442:
 634              		.section	.text.MC_Perf_GetCPU_Load,"ax",%progbits
 635              		.align	1
 636              		.global	MC_Perf_GetCPU_Load
 637              		.syntax unified
 638              		.thumb
 639              		.thumb_func
 640              		.fpu fpv4-sp-d16
 642              	MC_Perf_GetCPU_Load:
 643              	.LFB1443:
 235:Src/mc_perf.c **** 
 236:Src/mc_perf.c **** /**
 237:Src/mc_perf.c ****  * @brief  It returns the current CPU load of both High and Medium frequency tasks.
 238:Src/mc_perf.c ****  * @param  pHandle: handler of the performance measurement component.
 239:Src/mc_perf.c ****  * @retval CPU load.
 240:Src/mc_perf.c ****  */
 241:Src/mc_perf.c **** float_t MC_Perf_GetCPU_Load(const MC_Perf_Handle_t *pHandle)
 242:Src/mc_perf.c **** {
 644              		.loc 1 242 1
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 24
 647              		@ frame_needed = 1, uses_anonymous_args = 0
 648              		@ link register save eliminated.
 649 0000 80B4     		push	{r7}
 650              	.LCFI30:
 651              		.cfi_def_cfa_offset 4
 652              		.cfi_offset 7, -4
 653 0002 87B0     		sub	sp, sp, #28
 654              	.LCFI31:
 655              		.cfi_def_cfa_offset 32
 656 0004 00AF     		add	r7, sp, #0
 657              	.LCFI32:
 658              		.cfi_def_cfa_register 7
 659 0006 7860     		str	r0, [r7, #4]
 243:Src/mc_perf.c ****   float_t cpuLoad = 0.0f;
 660              		.loc 1 243 11
 661 0008 4FF00003 		mov	r3, #0
 662 000c 7B61     		str	r3, [r7, #20]	@ float
 244:Src/mc_perf.c **** #ifdef NULL_PTR_CHECK_MC_PERF
 245:Src/mc_perf.c ****   if (MC_NULL == pHandle)
 246:Src/mc_perf.c ****   {
 247:Src/mc_perf.c ****     /* Nothing to do */
 248:Src/mc_perf.c ****   }
 249:Src/mc_perf.c ****   else
 250:Src/mc_perf.c ****   {
 251:Src/mc_perf.c **** #endif
 252:Src/mc_perf.c ****     float_t MFT_cpu_loadM1;
 253:Src/mc_perf.c ****     float_t HFT_cpu_loadM1;
 254:Src/mc_perf.c **** 
 255:Src/mc_perf.c ****     MFT_cpu_loadM1 = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].DeltaT
 663              		.loc 1 255 93
 664 000e 7B68     		ldr	r3, [r7, #4]
 665 0010 DB69     		ldr	r3, [r3, #28]
 666              		.loc 1 255 24
 667 0012 07EE903A 		vmov	s15, r3	@ int
ARM GAS  /tmp/ccOeJW39.s 			page 17


 668 0016 B8EE677A 		vcvt.f32.u32	s14, s15
 256:Src/mc_perf.c ****                    / (float_t)SYSCLK_FREQ ) * (float_t)MEDIUM_FREQUENCY_TASK_RATE);
 669              		.loc 1 256 20
 670 001a DFED216A 		vldr.32	s13, .L38
 671 001e C7EE267A 		vdiv.f32	s15, s14, s13
 255:Src/mc_perf.c ****                    / (float_t)SYSCLK_FREQ ) * (float_t)MEDIUM_FREQUENCY_TASK_RATE);
 672              		.loc 1 255 20
 673 0022 9FED207A 		vldr.32	s14, .L38+4
 674 0026 67EE877A 		vmul.f32	s15, s15, s14
 675 002a C7ED047A 		vstr.32	s15, [r7, #16]
 257:Src/mc_perf.c ****     HFT_cpu_loadM1 = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].DeltaTim
 676              		.loc 1 257 91
 677 002e 7B68     		ldr	r3, [r7, #4]
 678 0030 DB68     		ldr	r3, [r3, #12]
 679              		.loc 1 257 24
 680 0032 07EE903A 		vmov	s15, r3	@ int
 681 0036 B8EE677A 		vcvt.f32.u32	s14, s15
 258:Src/mc_perf.c ****                    / (float_t)SYSCLK_FREQ ) * (float_t)(PWM_FREQUENCY/REGULATION_EXECUTION_RATE));
 682              		.loc 1 258 20
 683 003a DFED196A 		vldr.32	s13, .L38
 684 003e C7EE267A 		vdiv.f32	s15, s14, s13
 257:Src/mc_perf.c ****     HFT_cpu_loadM1 = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].DeltaTim
 685              		.loc 1 257 20
 686 0042 9FED197A 		vldr.32	s14, .L38+8
 687 0046 67EE877A 		vmul.f32	s15, s15, s14
 688 004a C7ED037A 		vstr.32	s15, [r7, #12]
 259:Src/mc_perf.c **** 
 260:Src/mc_perf.c ****     cpuLoad = MFT_cpu_loadM1 + HFT_cpu_loadM1;
 689              		.loc 1 260 13
 690 004e 97ED047A 		vldr.32	s14, [r7, #16]
 691 0052 D7ED037A 		vldr.32	s15, [r7, #12]
 692 0056 77EE277A 		vadd.f32	s15, s14, s15
 693 005a C7ED057A 		vstr.32	s15, [r7, #20]
 261:Src/mc_perf.c **** 
 262:Src/mc_perf.c ****     cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
 694              		.loc 1 262 39
 695 005e D7ED057A 		vldr.32	s15, [r7, #20]
 696 0062 B7EE007A 		vmov.f32	s14, #1.0e+0
 697 0066 F4EEC77A 		vcmpe.f32	s15, s14
 698 006a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 699 006e 02DD     		ble	.L37
 700              		.loc 1 262 39 is_stmt 0 discriminator 1
 701 0070 4FF07E53 		mov	r3, #1065353216
 702 0074 00E0     		b	.L34
 703              	.L37:
 704              		.loc 1 262 39 discriminator 2
 705 0076 7B69     		ldr	r3, [r7, #20]	@ float
 706              	.L34:
 707              		.loc 1 262 13 is_stmt 1 discriminator 4
 708 0078 7B61     		str	r3, [r7, #20]	@ float
 263:Src/mc_perf.c ****     cpuLoad *= 100.0f;
 709              		.loc 1 263 13 discriminator 4
 710 007a D7ED057A 		vldr.32	s15, [r7, #20]
 711 007e 9FED0B7A 		vldr.32	s14, .L38+12
 712 0082 67EE877A 		vmul.f32	s15, s15, s14
 713 0086 C7ED057A 		vstr.32	s15, [r7, #20]
 264:Src/mc_perf.c **** #ifdef NULL_PTR_CHECK_MC_PERF
ARM GAS  /tmp/ccOeJW39.s 			page 18


 265:Src/mc_perf.c ****   }
 266:Src/mc_perf.c **** #endif
 267:Src/mc_perf.c ****   return (cpuLoad);
 714              		.loc 1 267 10 discriminator 4
 715 008a 7B69     		ldr	r3, [r7, #20]	@ float
 716 008c 07EE903A 		vmov	s15, r3
 268:Src/mc_perf.c **** }
 717              		.loc 1 268 1 discriminator 4
 718 0090 B0EE670A 		vmov.f32	s0, s15
 719 0094 1C37     		adds	r7, r7, #28
 720              	.LCFI33:
 721              		.cfi_def_cfa_offset 4
 722 0096 BD46     		mov	sp, r7
 723              	.LCFI34:
 724              		.cfi_def_cfa_register 13
 725              		@ sp needed
 726 0098 5DF8047B 		ldr	r7, [sp], #4
 727              	.LCFI35:
 728              		.cfi_restore 7
 729              		.cfi_def_cfa_offset 0
 730 009c 7047     		bx	lr
 731              	.L39:
 732 009e 00BF     		.align	2
 733              	.L38:
 734 00a0 E81F224D 		.word	1294082024
 735 00a4 00007A44 		.word	1148846080
 736 00a8 00409C46 		.word	1184645120
 737 00ac 0000C842 		.word	1120403456
 738              		.cfi_endproc
 739              	.LFE1443:
 741              		.section	.text.MC_Perf_GetMaxCPU_Load,"ax",%progbits
 742              		.align	1
 743              		.global	MC_Perf_GetMaxCPU_Load
 744              		.syntax unified
 745              		.thumb
 746              		.thumb_func
 747              		.fpu fpv4-sp-d16
 749              	MC_Perf_GetMaxCPU_Load:
 750              	.LFB1444:
 269:Src/mc_perf.c **** 
 270:Src/mc_perf.c **** /**
 271:Src/mc_perf.c ****  * @brief  It returns the maximum CPU load of both High and Medium frequency tasks.
 272:Src/mc_perf.c ****  * @param  pHandle: handler of the performance measurement component.
 273:Src/mc_perf.c ****  * @retval Max CPU load measured.
 274:Src/mc_perf.c ****  */
 275:Src/mc_perf.c **** float_t MC_Perf_GetMaxCPU_Load(const MC_Perf_Handle_t *pHandle)
 276:Src/mc_perf.c **** {
 751              		.loc 1 276 1
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 16
 754              		@ frame_needed = 1, uses_anonymous_args = 0
 755              		@ link register save eliminated.
 756 0000 80B4     		push	{r7}
 757              	.LCFI36:
 758              		.cfi_def_cfa_offset 4
 759              		.cfi_offset 7, -4
 760 0002 85B0     		sub	sp, sp, #20
ARM GAS  /tmp/ccOeJW39.s 			page 19


 761              	.LCFI37:
 762              		.cfi_def_cfa_offset 24
 763 0004 00AF     		add	r7, sp, #0
 764              	.LCFI38:
 765              		.cfi_def_cfa_register 7
 766 0006 7860     		str	r0, [r7, #4]
 277:Src/mc_perf.c ****   float_t cpuLoad = 0.0f;
 767              		.loc 1 277 11
 768 0008 4FF00003 		mov	r3, #0
 769 000c FB60     		str	r3, [r7, #12]	@ float
 278:Src/mc_perf.c **** #ifdef NULL_PTR_CHECK_MC_PERF
 279:Src/mc_perf.c ****   if (MC_NULL == pHandle)
 280:Src/mc_perf.c ****   {
 281:Src/mc_perf.c ****     /* Nothing to do */
 282:Src/mc_perf.c ****   }
 283:Src/mc_perf.c ****   else
 284:Src/mc_perf.c ****   {
 285:Src/mc_perf.c **** #endif
 286:Src/mc_perf.c ****     cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].max / (float
 770              		.loc 1 286 87
 771 000e 7B68     		ldr	r3, [r7, #4]
 772 0010 5B6A     		ldr	r3, [r3, #36]
 773              		.loc 1 286 18
 774 0012 07EE903A 		vmov	s15, r3	@ int
 775 0016 B8EE677A 		vcvt.f32.u32	s14, s15
 776              		.loc 1 286 92
 777 001a DFED216A 		vldr.32	s13, .L47
 778 001e C7EE267A 		vdiv.f32	s15, s14, s13
 287:Src/mc_perf.c ****                    * (float_t)MEDIUM_FREQUENCY_TASK_RATE);
 779              		.loc 1 287 20
 780 0022 9FED207A 		vldr.32	s14, .L47+4
 781 0026 67EE877A 		vmul.f32	s15, s15, s14
 286:Src/mc_perf.c ****                    * (float_t)MEDIUM_FREQUENCY_TASK_RATE);
 782              		.loc 1 286 13
 783 002a 97ED037A 		vldr.32	s14, [r7, #12]
 784 002e 77EE277A 		vadd.f32	s15, s14, s15
 785 0032 C7ED037A 		vstr.32	s15, [r7, #12]
 288:Src/mc_perf.c ****     cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].max / (float_t
 786              		.loc 1 288 85
 787 0036 7B68     		ldr	r3, [r7, #4]
 788 0038 5B69     		ldr	r3, [r3, #20]
 789              		.loc 1 288 18
 790 003a 07EE903A 		vmov	s15, r3	@ int
 791 003e B8EE677A 		vcvt.f32.u32	s14, s15
 792              		.loc 1 288 90
 793 0042 DFED176A 		vldr.32	s13, .L47
 794 0046 C7EE267A 		vdiv.f32	s15, s14, s13
 289:Src/mc_perf.c ****                    * (float_t)(PWM_FREQUENCY/REGULATION_EXECUTION_RATE));
 795              		.loc 1 289 20
 796 004a 9FED177A 		vldr.32	s14, .L47+8
 797 004e 67EE877A 		vmul.f32	s15, s15, s14
 288:Src/mc_perf.c ****     cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].max / (float_t
 798              		.loc 1 288 13
 799 0052 97ED037A 		vldr.32	s14, [r7, #12]
 800 0056 77EE277A 		vadd.f32	s15, s14, s15
 801 005a C7ED037A 		vstr.32	s15, [r7, #12]
 290:Src/mc_perf.c **** 
ARM GAS  /tmp/ccOeJW39.s 			page 20


 291:Src/mc_perf.c ****     cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
 802              		.loc 1 291 39
 803 005e D7ED037A 		vldr.32	s15, [r7, #12]
 804 0062 B7EE007A 		vmov.f32	s14, #1.0e+0
 805 0066 F4EEC77A 		vcmpe.f32	s15, s14
 806 006a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 807 006e 02DD     		ble	.L46
 808              		.loc 1 291 39 is_stmt 0 discriminator 1
 809 0070 4FF07E53 		mov	r3, #1065353216
 810 0074 00E0     		b	.L43
 811              	.L46:
 812              		.loc 1 291 39 discriminator 2
 813 0076 FB68     		ldr	r3, [r7, #12]	@ float
 814              	.L43:
 815              		.loc 1 291 13 is_stmt 1 discriminator 4
 816 0078 FB60     		str	r3, [r7, #12]	@ float
 292:Src/mc_perf.c ****     cpuLoad *= 100.0f;
 817              		.loc 1 292 13 discriminator 4
 818 007a D7ED037A 		vldr.32	s15, [r7, #12]
 819 007e 9FED0B7A 		vldr.32	s14, .L47+12
 820 0082 67EE877A 		vmul.f32	s15, s15, s14
 821 0086 C7ED037A 		vstr.32	s15, [r7, #12]
 293:Src/mc_perf.c **** #ifdef NULL_PTR_CHECK_MC_PERF
 294:Src/mc_perf.c ****   }
 295:Src/mc_perf.c **** #endif
 296:Src/mc_perf.c ****   return (cpuLoad);
 822              		.loc 1 296 10 discriminator 4
 823 008a FB68     		ldr	r3, [r7, #12]	@ float
 824 008c 07EE903A 		vmov	s15, r3
 297:Src/mc_perf.c **** }
 825              		.loc 1 297 1 discriminator 4
 826 0090 B0EE670A 		vmov.f32	s0, s15
 827 0094 1437     		adds	r7, r7, #20
 828              	.LCFI39:
 829              		.cfi_def_cfa_offset 4
 830 0096 BD46     		mov	sp, r7
 831              	.LCFI40:
 832              		.cfi_def_cfa_register 13
 833              		@ sp needed
 834 0098 5DF8047B 		ldr	r7, [sp], #4
 835              	.LCFI41:
 836              		.cfi_restore 7
 837              		.cfi_def_cfa_offset 0
 838 009c 7047     		bx	lr
 839              	.L48:
 840 009e 00BF     		.align	2
 841              	.L47:
 842 00a0 E81F224D 		.word	1294082024
 843 00a4 00007A44 		.word	1148846080
 844 00a8 00409C46 		.word	1184645120
 845 00ac 0000C842 		.word	1120403456
 846              		.cfi_endproc
 847              	.LFE1444:
 849              		.section	.text.MC_Perf_GetMinCPU_Load,"ax",%progbits
 850              		.align	1
 851              		.global	MC_Perf_GetMinCPU_Load
 852              		.syntax unified
ARM GAS  /tmp/ccOeJW39.s 			page 21


 853              		.thumb
 854              		.thumb_func
 855              		.fpu fpv4-sp-d16
 857              	MC_Perf_GetMinCPU_Load:
 858              	.LFB1445:
 298:Src/mc_perf.c **** 
 299:Src/mc_perf.c **** /**
 300:Src/mc_perf.c ****  * @brief  It returns the minimum CPU load of both High and Medium frequency tasks.
 301:Src/mc_perf.c ****  * @param  pHandle: handler of the performance measurement component.
 302:Src/mc_perf.c ****  * @retval Min CPU load measured.
 303:Src/mc_perf.c ****  */
 304:Src/mc_perf.c **** float_t MC_Perf_GetMinCPU_Load(const MC_Perf_Handle_t *pHandle)
 305:Src/mc_perf.c **** {
 859              		.loc 1 305 1
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 16
 862              		@ frame_needed = 1, uses_anonymous_args = 0
 863              		@ link register save eliminated.
 864 0000 80B4     		push	{r7}
 865              	.LCFI42:
 866              		.cfi_def_cfa_offset 4
 867              		.cfi_offset 7, -4
 868 0002 85B0     		sub	sp, sp, #20
 869              	.LCFI43:
 870              		.cfi_def_cfa_offset 24
 871 0004 00AF     		add	r7, sp, #0
 872              	.LCFI44:
 873              		.cfi_def_cfa_register 7
 874 0006 7860     		str	r0, [r7, #4]
 306:Src/mc_perf.c ****   float_t cpu_load_acc = 0.0f;
 875              		.loc 1 306 11
 876 0008 4FF00003 		mov	r3, #0
 877 000c FB60     		str	r3, [r7, #12]	@ float
 307:Src/mc_perf.c **** #ifdef NULL_PTR_CHECK_MC_PERF
 308:Src/mc_perf.c ****   if (MC_NULL == pHandle)
 309:Src/mc_perf.c ****   {
 310:Src/mc_perf.c ****     /* Nothing to do */
 311:Src/mc_perf.c ****   }
 312:Src/mc_perf.c ****   else
 313:Src/mc_perf.c ****   {
 314:Src/mc_perf.c **** #endif
 315:Src/mc_perf.c ****     if (pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].min != UINT32_MAX)
 878              		.loc 1 315 69
 879 000e 7B68     		ldr	r3, [r7, #4]
 880 0010 1B6A     		ldr	r3, [r3, #32]
 881              		.loc 1 315 8
 882 0012 B3F1FF3F 		cmp	r3, #-1
 883 0016 13D0     		beq	.L50
 316:Src/mc_perf.c ****     {
 317:Src/mc_perf.c ****       cpu_load_acc += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].min /
 884              		.loc 1 317 94
 885 0018 7B68     		ldr	r3, [r7, #4]
 886 001a 1B6A     		ldr	r3, [r3, #32]
 887              		.loc 1 317 25
 888 001c 07EE903A 		vmov	s15, r3	@ int
 889 0020 B8EE677A 		vcvt.f32.u32	s14, s15
 890              		.loc 1 317 99
ARM GAS  /tmp/ccOeJW39.s 			page 22


 891 0024 DFED236A 		vldr.32	s13, .L58
 892 0028 C7EE267A 		vdiv.f32	s15, s14, s13
 318:Src/mc_perf.c ****                      * (float_t)MEDIUM_FREQUENCY_TASK_RATE);
 893              		.loc 1 318 22
 894 002c 9FED227A 		vldr.32	s14, .L58+4
 895 0030 67EE877A 		vmul.f32	s15, s15, s14
 317:Src/mc_perf.c ****                      * (float_t)MEDIUM_FREQUENCY_TASK_RATE);
 896              		.loc 1 317 20
 897 0034 97ED037A 		vldr.32	s14, [r7, #12]
 898 0038 77EE277A 		vadd.f32	s15, s14, s15
 899 003c C7ED037A 		vstr.32	s15, [r7, #12]
 900              	.L50:
 319:Src/mc_perf.c ****     }
 320:Src/mc_perf.c ****     if (pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].min != UINT32_MAX)
 901              		.loc 1 320 67
 902 0040 7B68     		ldr	r3, [r7, #4]
 903 0042 1B69     		ldr	r3, [r3, #16]
 904              		.loc 1 320 8
 905 0044 B3F1FF3F 		cmp	r3, #-1
 906 0048 13D0     		beq	.L51
 321:Src/mc_perf.c ****     {
 322:Src/mc_perf.c ****       cpu_load_acc += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].min / (
 907              		.loc 1 322 92
 908 004a 7B68     		ldr	r3, [r7, #4]
 909 004c 1B69     		ldr	r3, [r3, #16]
 910              		.loc 1 322 25
 911 004e 07EE903A 		vmov	s15, r3	@ int
 912 0052 B8EE677A 		vcvt.f32.u32	s14, s15
 913              		.loc 1 322 97
 914 0056 DFED176A 		vldr.32	s13, .L58
 915 005a C7EE267A 		vdiv.f32	s15, s14, s13
 323:Src/mc_perf.c ****                    * (float_t)(PWM_FREQUENCY/REGULATION_EXECUTION_RATE));
 916              		.loc 1 323 20
 917 005e 9FED177A 		vldr.32	s14, .L58+8
 918 0062 67EE877A 		vmul.f32	s15, s15, s14
 322:Src/mc_perf.c ****                    * (float_t)(PWM_FREQUENCY/REGULATION_EXECUTION_RATE));
 919              		.loc 1 322 20
 920 0066 97ED037A 		vldr.32	s14, [r7, #12]
 921 006a 77EE277A 		vadd.f32	s15, s14, s15
 922 006e C7ED037A 		vstr.32	s15, [r7, #12]
 923              	.L51:
 324:Src/mc_perf.c ****     }
 325:Src/mc_perf.c ****     cpu_load_acc = (cpu_load_acc > 1.0f) ? 1.0f : cpu_load_acc;
 924              		.loc 1 325 49
 925 0072 D7ED037A 		vldr.32	s15, [r7, #12]
 926 0076 B7EE007A 		vmov.f32	s14, #1.0e+0
 927 007a F4EEC77A 		vcmpe.f32	s15, s14
 928 007e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 929 0082 02DD     		ble	.L57
 930              		.loc 1 325 49 is_stmt 0 discriminator 1
 931 0084 4FF07E53 		mov	r3, #1065353216
 932 0088 00E0     		b	.L54
 933              	.L57:
 934              		.loc 1 325 49 discriminator 2
 935 008a FB68     		ldr	r3, [r7, #12]	@ float
 936              	.L54:
 937              		.loc 1 325 18 is_stmt 1 discriminator 4
ARM GAS  /tmp/ccOeJW39.s 			page 23


 938 008c FB60     		str	r3, [r7, #12]	@ float
 326:Src/mc_perf.c ****     cpu_load_acc *= 100.0f;
 939              		.loc 1 326 18 discriminator 4
 940 008e D7ED037A 		vldr.32	s15, [r7, #12]
 941 0092 9FED0B7A 		vldr.32	s14, .L58+12
 942 0096 67EE877A 		vmul.f32	s15, s15, s14
 943 009a C7ED037A 		vstr.32	s15, [r7, #12]
 327:Src/mc_perf.c **** #ifdef NULL_PTR_CHECK_MC_PERF
 328:Src/mc_perf.c ****   }
 329:Src/mc_perf.c **** #endif
 330:Src/mc_perf.c ****   return (cpu_load_acc);
 944              		.loc 1 330 10 discriminator 4
 945 009e FB68     		ldr	r3, [r7, #12]	@ float
 946 00a0 07EE903A 		vmov	s15, r3
 331:Src/mc_perf.c **** }
 947              		.loc 1 331 1 discriminator 4
 948 00a4 B0EE670A 		vmov.f32	s0, s15
 949 00a8 1437     		adds	r7, r7, #20
 950              	.LCFI45:
 951              		.cfi_def_cfa_offset 4
 952 00aa BD46     		mov	sp, r7
 953              	.LCFI46:
 954              		.cfi_def_cfa_register 13
 955              		@ sp needed
 956 00ac 5DF8047B 		ldr	r7, [sp], #4
 957              	.LCFI47:
 958              		.cfi_restore 7
 959              		.cfi_def_cfa_offset 0
 960 00b0 7047     		bx	lr
 961              	.L59:
 962 00b2 00BF     		.align	2
 963              	.L58:
 964 00b4 E81F224D 		.word	1294082024
 965 00b8 00007A44 		.word	1148846080
 966 00bc 00409C46 		.word	1184645120
 967 00c0 0000C842 		.word	1120403456
 968              		.cfi_endproc
 969              	.LFE1445:
 971              		.text
 972              	.Letext0:
 973              		.file 2 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_type
 974              		.file 3 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 975              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 976              		.file 5 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 977              		.file 6 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 978              		.file 7 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 979              		.file 8 "Inc/mc_type.h"
 980              		.file 9 "Inc/mc_perf.h"
ARM GAS  /tmp/ccOeJW39.s 			page 24


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mc_perf.c
     /tmp/ccOeJW39.s:18     .rodata.OFFSET_TAB_CCMRx:0000000000000000 $d
     /tmp/ccOeJW39.s:21     .rodata.OFFSET_TAB_CCMRx:0000000000000000 OFFSET_TAB_CCMRx
     /tmp/ccOeJW39.s:24     .rodata.SHIFT_TAB_OCxx:0000000000000000 $d
     /tmp/ccOeJW39.s:27     .rodata.SHIFT_TAB_OCxx:0000000000000000 SHIFT_TAB_OCxx
     /tmp/ccOeJW39.s:30     .rodata.SHIFT_TAB_ICxx:0000000000000000 $d
     /tmp/ccOeJW39.s:33     .rodata.SHIFT_TAB_ICxx:0000000000000000 SHIFT_TAB_ICxx
     /tmp/ccOeJW39.s:36     .rodata.SHIFT_TAB_CCxP:0000000000000000 $d
     /tmp/ccOeJW39.s:39     .rodata.SHIFT_TAB_CCxP:0000000000000000 SHIFT_TAB_CCxP
     /tmp/ccOeJW39.s:42     .rodata.SHIFT_TAB_OISx:0000000000000000 $d
     /tmp/ccOeJW39.s:45     .rodata.SHIFT_TAB_OISx:0000000000000000 SHIFT_TAB_OISx
     /tmp/ccOeJW39.s:48     .rodata.USART_PRESCALER_TAB:0000000000000000 $d
     /tmp/ccOeJW39.s:51     .rodata.USART_PRESCALER_TAB:0000000000000000 USART_PRESCALER_TAB
     /tmp/ccOeJW39.s:65     .rodata.CHANNEL_OFFSET_TAB:0000000000000000 $d
     /tmp/ccOeJW39.s:68     .rodata.CHANNEL_OFFSET_TAB:0000000000000000 CHANNEL_OFFSET_TAB
     /tmp/ccOeJW39.s:71     .text.MC_Perf_Measure_Init:0000000000000000 $t
     /tmp/ccOeJW39.s:79     .text.MC_Perf_Measure_Init:0000000000000000 MC_Perf_Measure_Init
     /tmp/ccOeJW39.s:186    .text.MC_Perf_Measure_Init:0000000000000080 $d
     /tmp/ccOeJW39.s:192    .text.MC_Perf_Clear:0000000000000000 $t
     /tmp/ccOeJW39.s:199    .text.MC_Perf_Clear:0000000000000000 MC_Perf_Clear
     /tmp/ccOeJW39.s:277    .text.MC_BG_Perf_Measure_Start:0000000000000000 $t
     /tmp/ccOeJW39.s:284    .text.MC_BG_Perf_Measure_Start:0000000000000000 MC_BG_Perf_Measure_Start
     /tmp/ccOeJW39.s:343    .text.MC_BG_Perf_Measure_Start:0000000000000038 $d
     /tmp/ccOeJW39.s:348    .text.MC_Perf_Measure_Stop:0000000000000000 $t
     /tmp/ccOeJW39.s:355    .text.MC_Perf_Measure_Stop:0000000000000000 MC_Perf_Measure_Stop
     /tmp/ccOeJW39.s:483    .text.MC_Perf_Measure_Stop:0000000000000090 $d
     /tmp/ccOeJW39.s:488    .text.MC_BG_Perf_Measure_Stop:0000000000000000 $t
     /tmp/ccOeJW39.s:495    .text.MC_BG_Perf_Measure_Stop:0000000000000000 MC_BG_Perf_Measure_Stop
     /tmp/ccOeJW39.s:630    .text.MC_BG_Perf_Measure_Stop:0000000000000098 $d
     /tmp/ccOeJW39.s:635    .text.MC_Perf_GetCPU_Load:0000000000000000 $t
     /tmp/ccOeJW39.s:642    .text.MC_Perf_GetCPU_Load:0000000000000000 MC_Perf_GetCPU_Load
     /tmp/ccOeJW39.s:734    .text.MC_Perf_GetCPU_Load:00000000000000a0 $d
     /tmp/ccOeJW39.s:742    .text.MC_Perf_GetMaxCPU_Load:0000000000000000 $t
     /tmp/ccOeJW39.s:749    .text.MC_Perf_GetMaxCPU_Load:0000000000000000 MC_Perf_GetMaxCPU_Load
     /tmp/ccOeJW39.s:842    .text.MC_Perf_GetMaxCPU_Load:00000000000000a0 $d
     /tmp/ccOeJW39.s:850    .text.MC_Perf_GetMinCPU_Load:0000000000000000 $t
     /tmp/ccOeJW39.s:857    .text.MC_Perf_GetMinCPU_Load:0000000000000000 MC_Perf_GetMinCPU_Load
     /tmp/ccOeJW39.s:964    .text.MC_Perf_GetMinCPU_Load:00000000000000b4 $d

NO UNDEFINED SYMBOLS
