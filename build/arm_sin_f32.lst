ARM GAS  /tmp/ccJg5ltZ.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"arm_sin_f32.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.our_arm_sin_f32,"ax",%progbits
  18              		.align	1
  19              		.global	our_arm_sin_f32
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	our_arm_sin_f32:
  27              	.LVL0:
  28              	.LFB173:
  29              		.file 1 "Src/arm_sin_f32.c"
   1:Src/arm_sin_f32.c **** /* ----------------------------------------------------------------------
   2:Src/arm_sin_f32.c ****  * Project:      CMSIS DSP Library
   3:Src/arm_sin_f32.c ****  * Title:        arm_sin_f32.c
   4:Src/arm_sin_f32.c ****  * Description:  Fast sine calculation for floating-point values
   5:Src/arm_sin_f32.c ****  *
   6:Src/arm_sin_f32.c ****  * $Date:        27. January 2017
   7:Src/arm_sin_f32.c ****  * $Revision:    V.1.5.1
   8:Src/arm_sin_f32.c ****  *
   9:Src/arm_sin_f32.c ****  * Target Processor: Cortex-M cores
  10:Src/arm_sin_f32.c ****  * -------------------------------------------------------------------- */
  11:Src/arm_sin_f32.c **** /*
  12:Src/arm_sin_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Src/arm_sin_f32.c ****  *
  14:Src/arm_sin_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Src/arm_sin_f32.c ****  *
  16:Src/arm_sin_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Src/arm_sin_f32.c ****  * not use this file except in compliance with the License.
  18:Src/arm_sin_f32.c ****  * You may obtain a copy of the License at
  19:Src/arm_sin_f32.c ****  *
  20:Src/arm_sin_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Src/arm_sin_f32.c ****  *
  22:Src/arm_sin_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Src/arm_sin_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Src/arm_sin_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Src/arm_sin_f32.c ****  * See the License for the specific language governing permissions and
  26:Src/arm_sin_f32.c ****  * limitations under the License.
  27:Src/arm_sin_f32.c ****  */
  28:Src/arm_sin_f32.c **** 
  29:Src/arm_sin_f32.c **** #include <stm32g4xx_hal.h>  // Sets up the correct chip specifc defines required by arm_math
ARM GAS  /tmp/ccJg5ltZ.s 			page 2


  30:Src/arm_sin_f32.c **** #define ARM_MATH_CM4 // TODO: might change in future board versions
  31:Src/arm_sin_f32.c **** #include "arm_math.h"
  32:Src/arm_sin_f32.c **** #include "arm_common_tables.h"
  33:Src/arm_sin_f32.c **** 
  34:Src/arm_sin_f32.c **** /**
  35:Src/arm_sin_f32.c ****  * @ingroup groupFastMath
  36:Src/arm_sin_f32.c ****  */
  37:Src/arm_sin_f32.c **** 
  38:Src/arm_sin_f32.c **** /**
  39:Src/arm_sin_f32.c ****  * @defgroup sin Sine
  40:Src/arm_sin_f32.c ****  *
  41:Src/arm_sin_f32.c ****  * Computes the trigonometric sine function using a combination of table lookup
  42:Src/arm_sin_f32.c ****  * and linear interpolation.  There are separate functions for
  43:Src/arm_sin_f32.c ****  * Q15, Q31, and floating-point data types.
  44:Src/arm_sin_f32.c ****  * The input to the floating-point version is in radians and in the range [0 2*pi) while the
  45:Src/arm_sin_f32.c ****  * fixed-point Q15 and Q31 have a scaled input with the range
  46:Src/arm_sin_f32.c ****  * [0 +0.9999] mapping to [0 2*pi).  The fixed-point range is chosen so that a
  47:Src/arm_sin_f32.c ****  * value of 2*pi wraps around to 0.
  48:Src/arm_sin_f32.c ****  *
  49:Src/arm_sin_f32.c ****  * The implementation is based on table lookup using 256 values together with linear interpolation.
  50:Src/arm_sin_f32.c ****  * The steps used are:
  51:Src/arm_sin_f32.c ****  *  -# Calculation of the nearest integer table index
  52:Src/arm_sin_f32.c ****  *  -# Compute the fractional portion (fract) of the table index.
  53:Src/arm_sin_f32.c ****  *  -# The final result equals <code>(1.0f-fract)*a + fract*b;</code>
  54:Src/arm_sin_f32.c ****  *
  55:Src/arm_sin_f32.c ****  * where
  56:Src/arm_sin_f32.c ****  * <pre>
  57:Src/arm_sin_f32.c ****  *    b=Table[index+0];
  58:Src/arm_sin_f32.c ****  *    c=Table[index+1];
  59:Src/arm_sin_f32.c ****  * </pre>
  60:Src/arm_sin_f32.c ****  */
  61:Src/arm_sin_f32.c **** 
  62:Src/arm_sin_f32.c **** /**
  63:Src/arm_sin_f32.c ****  * @addtogroup sin
  64:Src/arm_sin_f32.c ****  * @{
  65:Src/arm_sin_f32.c ****  */
  66:Src/arm_sin_f32.c **** 
  67:Src/arm_sin_f32.c **** /**
  68:Src/arm_sin_f32.c ****  * @brief  Fast approximation to the trigonometric sine function for floating-point data.
  69:Src/arm_sin_f32.c ****  * @param[in] x input value in radians.
  70:Src/arm_sin_f32.c ****  * @return  sin(x).
  71:Src/arm_sin_f32.c ****  */
  72:Src/arm_sin_f32.c **** 
  73:Src/arm_sin_f32.c **** float32_t our_arm_sin_f32(
  74:Src/arm_sin_f32.c ****   float32_t x)
  75:Src/arm_sin_f32.c **** {
  30              		.loc 1 75 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  76:Src/arm_sin_f32.c ****   float32_t sinVal, fract, in;                           /* Temporary variables for input, output *
  35              		.loc 1 76 3 view .LVU1
  77:Src/arm_sin_f32.c ****   uint16_t index;                                        /* Index variable */
  36              		.loc 1 77 3 view .LVU2
  78:Src/arm_sin_f32.c ****   float32_t a, b;                                        /* Two nearest output values */
  37              		.loc 1 78 3 view .LVU3
ARM GAS  /tmp/ccJg5ltZ.s 			page 3


  79:Src/arm_sin_f32.c ****   int32_t n;
  38              		.loc 1 79 3 view .LVU4
  80:Src/arm_sin_f32.c ****   float32_t findex;
  39              		.loc 1 80 3 view .LVU5
  81:Src/arm_sin_f32.c **** 
  82:Src/arm_sin_f32.c ****   /* input x is in radians */
  83:Src/arm_sin_f32.c ****   /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  84:Src/arm_sin_f32.c ****   in = x * 0.159154943092f;
  40              		.loc 1 84 3 view .LVU6
  41              		.loc 1 84 6 is_stmt 0 view .LVU7
  42 0000 DFED1E7A 		vldr.32	s15, .L7
  43 0004 60EE277A 		vmul.f32	s15, s0, s15
  44              	.LVL1:
  85:Src/arm_sin_f32.c **** 
  86:Src/arm_sin_f32.c ****   /* Calculation of floor value of input */
  87:Src/arm_sin_f32.c ****   n = (int32_t) in;
  45              		.loc 1 87 3 is_stmt 1 view .LVU8
  46              		.loc 1 87 5 is_stmt 0 view .LVU9
  47 0008 BDEEE77A 		vcvt.s32.f32	s14, s15
  48              	.LVL2:
  88:Src/arm_sin_f32.c **** 
  89:Src/arm_sin_f32.c ****   /* Make negative values towards -infinity */
  90:Src/arm_sin_f32.c ****   if (x < 0.0f)
  49              		.loc 1 90 3 is_stmt 1 view .LVU10
  50              		.loc 1 90 6 is_stmt 0 view .LVU11
  51 000c B5EEC00A 		vcmpe.f32	s0, #0
  52 0010 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  53 0014 2CD4     		bmi	.L6
  54              	.L2:
  91:Src/arm_sin_f32.c ****   {
  92:Src/arm_sin_f32.c ****     n--;
  93:Src/arm_sin_f32.c ****   }
  94:Src/arm_sin_f32.c **** 
  95:Src/arm_sin_f32.c ****   /* Map input value to [0 1] */
  96:Src/arm_sin_f32.c ****   in = in - (float32_t) n;
  55              		.loc 1 96 3 is_stmt 1 view .LVU12
  56              	.LVL3:
  97:Src/arm_sin_f32.c **** 
  98:Src/arm_sin_f32.c ****   /* Calculation of index of the table */
  99:Src/arm_sin_f32.c ****   findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
  57              		.loc 1 99 3 view .LVU13
  96:Src/arm_sin_f32.c **** 
  58              		.loc 1 96 13 is_stmt 0 view .LVU14
  59 0016 B8EEC70A 		vcvt.f32.s32	s0, s14
  60              	.LVL4:
  96:Src/arm_sin_f32.c **** 
  61              		.loc 1 96 6 view .LVU15
  62 001a 37EEC00A 		vsub.f32	s0, s15, s0
  63              	.LVL5:
  64              		.loc 1 99 10 view .LVU16
  65 001e DFED187A 		vldr.32	s15, .L7+4
  66 0022 20EE270A 		vmul.f32	s0, s0, s15
  67              	.LVL6:
 100:Src/arm_sin_f32.c ****   index = (uint16_t)findex;
  68              		.loc 1 100 3 is_stmt 1 view .LVU17
  69              		.loc 1 100 9 is_stmt 0 view .LVU18
  70 0026 FCEEC07A 		vcvt.u32.f32	s15, s0
ARM GAS  /tmp/ccJg5ltZ.s 			page 4


  71 002a 17EE903A 		vmov	r3, s15	@ int
  72 002e 9BB2     		uxth	r3, r3
  73              	.LVL7:
 101:Src/arm_sin_f32.c **** 
 102:Src/arm_sin_f32.c ****   /* when "in" is exactly 1, we need to rotate the index down to 0 */
 103:Src/arm_sin_f32.c ****   if (index >= FAST_MATH_TABLE_SIZE) {
  74              		.loc 1 103 3 is_stmt 1 view .LVU19
  75              		.loc 1 103 6 is_stmt 0 view .LVU20
  76 0030 B3F5007F 		cmp	r3, #512
  77 0034 04D3     		bcc	.L4
 104:Src/arm_sin_f32.c ****     index = 0;
  78              		.loc 1 104 5 is_stmt 1 view .LVU21
  79              	.LVL8:
 105:Src/arm_sin_f32.c ****     findex -= (float32_t)FAST_MATH_TABLE_SIZE;
  80              		.loc 1 105 5 view .LVU22
  81              		.loc 1 105 12 is_stmt 0 view .LVU23
  82 0036 DFED127A 		vldr.32	s15, .L7+4
  83 003a 30EE670A 		vsub.f32	s0, s0, s15
  84              	.LVL9:
 104:Src/arm_sin_f32.c ****     index = 0;
  85              		.loc 1 104 11 view .LVU24
  86 003e 0023     		movs	r3, #0
  87              	.LVL10:
  88              	.L4:
 106:Src/arm_sin_f32.c ****   }
 107:Src/arm_sin_f32.c **** 
 108:Src/arm_sin_f32.c ****   /* fractional value calculation */
 109:Src/arm_sin_f32.c ****   fract = findex - (float32_t) index;
  89              		.loc 1 109 3 is_stmt 1 view .LVU25
  90              		.loc 1 109 20 is_stmt 0 view .LVU26
  91 0040 07EE903A 		vmov	s15, r3	@ int
  92 0044 F8EE677A 		vcvt.f32.u32	s15, s15
  93              		.loc 1 109 9 view .LVU27
  94 0048 30EE670A 		vsub.f32	s0, s0, s15
  95              	.LVL11:
 110:Src/arm_sin_f32.c **** 
 111:Src/arm_sin_f32.c ****   /* Read two nearest values of input value from the sin table */
 112:Src/arm_sin_f32.c ****   a = sinTable_f32[index];
  96              		.loc 1 112 3 is_stmt 1 view .LVU28
 113:Src/arm_sin_f32.c ****   b = sinTable_f32[index+1];
  97              		.loc 1 113 3 view .LVU29
 114:Src/arm_sin_f32.c **** 
 115:Src/arm_sin_f32.c ****   /* Linear interpolation process */
 116:Src/arm_sin_f32.c ****   sinVal = (1.0f-fract)*a + fract*b;
  98              		.loc 1 116 3 view .LVU30
 117:Src/arm_sin_f32.c **** 
 118:Src/arm_sin_f32.c ****   /* Return the output value */
 119:Src/arm_sin_f32.c ****   return (sinVal);
  99              		.loc 1 119 3 view .LVU31
 116:Src/arm_sin_f32.c **** 
 100              		.loc 1 116 17 is_stmt 0 view .LVU32
 101 004c F7EE007A 		vmov.f32	s15, #1.0e+0
 102 0050 77EEC07A 		vsub.f32	s15, s15, s0
 112:Src/arm_sin_f32.c ****   b = sinTable_f32[index+1];
 103              		.loc 1 112 5 view .LVU33
 104 0054 0B4A     		ldr	r2, .L7+8
 105 0056 02EB8301 		add	r1, r2, r3, lsl #2
ARM GAS  /tmp/ccJg5ltZ.s 			page 5


 106              	.LVL12:
 116:Src/arm_sin_f32.c **** 
 107              		.loc 1 116 24 view .LVU34
 108 005a 91ED007A 		vldr.32	s14, [r1]
 109              	.LVL13:
 116:Src/arm_sin_f32.c **** 
 110              		.loc 1 116 24 view .LVU35
 111 005e 67EE877A 		vmul.f32	s15, s15, s14
 116:Src/arm_sin_f32.c **** 
 112              		.loc 1 116 34 view .LVU36
 113 0062 91ED017A 		vldr.32	s14, [r1, #4]
 114 0066 20EE070A 		vmul.f32	s0, s0, s14
 115              	.LVL14:
 120:Src/arm_sin_f32.c **** }
 116              		.loc 1 120 1 view .LVU37
 117 006a 37EE800A 		vadd.f32	s0, s15, s0
 118 006e 7047     		bx	lr
 119              	.LVL15:
 120              	.L6:
  92:Src/arm_sin_f32.c ****   }
 121              		.loc 1 92 5 is_stmt 1 view .LVU38
  92:Src/arm_sin_f32.c ****   }
 122              		.loc 1 92 6 is_stmt 0 view .LVU39
 123 0070 17EE103A 		vmov	r3, s14	@ int
 124 0074 013B     		subs	r3, r3, #1
 125 0076 07EE103A 		vmov	s14, r3	@ int
 126              	.LVL16:
  92:Src/arm_sin_f32.c ****   }
 127              		.loc 1 92 6 view .LVU40
 128 007a CCE7     		b	.L2
 129              	.L8:
 130              		.align	2
 131              	.L7:
 132 007c 83F9223E 		.word	1042479491
 133 0080 00000044 		.word	1140850688
 134 0084 00000000 		.word	sinTable_f32
 135              		.cfi_endproc
 136              	.LFE173:
 138              		.text
 139              	.Letext0:
 140              		.file 2 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_type
 141              		.file 3 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 142              		.file 4 "Drivers/CMSIS/DSP/Include/arm_math.h"
 143              		.file 5 "Drivers/CMSIS/DSP/Include/arm_common_tables.h"
ARM GAS  /tmp/ccJg5ltZ.s 			page 6


DEFINED SYMBOLS
                            *ABS*:0000000000000000 arm_sin_f32.c
     /tmp/ccJg5ltZ.s:18     .text.our_arm_sin_f32:0000000000000000 $t
     /tmp/ccJg5ltZ.s:26     .text.our_arm_sin_f32:0000000000000000 our_arm_sin_f32
     /tmp/ccJg5ltZ.s:132    .text.our_arm_sin_f32:000000000000007c $d

UNDEFINED SYMBOLS
sinTable_f32
