ARM GAS  /tmp/ccPF8NO0.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"mc_interface.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MCI_ExecSpeedRamp,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.weak	MCI_ExecSpeedRamp
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	MCI_ExecSpeedRamp:
  28              	.LVL0:
  29              	.LFB1713:
  30              		.file 1 "Src/mc_interface.c"
   1:Src/mc_interface.c **** 
   2:Src/mc_interface.c **** /**
   3:Src/mc_interface.c ****   ******************************************************************************
   4:Src/mc_interface.c ****   * @file    mc_interface.c
   5:Src/mc_interface.c ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/mc_interface.c ****   * @brief   This file provides firmware functions that implement the features
   7:Src/mc_interface.c ****   *          of the MC Interface component of the Motor Control SDK:
   8:Src/mc_interface.c ****   *
   9:Src/mc_interface.c ****   ******************************************************************************
  10:Src/mc_interface.c ****   * @attention
  11:Src/mc_interface.c ****   *
  12:Src/mc_interface.c ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  13:Src/mc_interface.c ****   * All rights reserved.</center></h2>
  14:Src/mc_interface.c ****   *
  15:Src/mc_interface.c ****   * This software component is licensed by ST under Ultimate Liberty license
  16:Src/mc_interface.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  17:Src/mc_interface.c ****   * the License. You may obtain a copy of the License at:
  18:Src/mc_interface.c ****   *                             www.st.com/SLA0044
  19:Src/mc_interface.c ****   *
  20:Src/mc_interface.c ****   ******************************************************************************
  21:Src/mc_interface.c ****   * @ingroup MCInterface
  22:Src/mc_interface.c ****   */
  23:Src/mc_interface.c **** 
  24:Src/mc_interface.c **** /* Includes ------------------------------------------------------------------*/
  25:Src/mc_interface.c **** #include "mc_math.h"
  26:Src/mc_interface.c **** #include "speed_torq_ctrl.h"
  27:Src/mc_interface.c **** #include "mc_interface.h"
  28:Src/mc_interface.c **** #include "motorcontrol.h"
ARM GAS  /tmp/ccPF8NO0.s 			page 2


  29:Src/mc_interface.c **** 
  30:Src/mc_interface.c **** #define ROUNDING_OFF
  31:Src/mc_interface.c **** 
  32:Src/mc_interface.c **** /** @addtogroup MCSDK
  33:Src/mc_interface.c ****   * @{
  34:Src/mc_interface.c ****   */
  35:Src/mc_interface.c **** 
  36:Src/mc_interface.c **** /** @addtogroup CAI
  37:Src/mc_interface.c ****   * @{
  38:Src/mc_interface.c ****   */
  39:Src/mc_interface.c **** 
  40:Src/mc_interface.c **** /** @defgroup MCInterface Motor Control Interface
  41:Src/mc_interface.c ****   * @brief MC Interface component of the Motor Control SDK
  42:Src/mc_interface.c ****   *
  43:Src/mc_interface.c ****   *  This interface allows for performing basic operations on the motor driven by a
  44:Src/mc_interface.c ****   *  Motor Control SDK based application. With it, motors can be started and stopped, speed or
  45:Src/mc_interface.c ****   *  torque ramps can be programmed and executed and information on the state of the motor can
  46:Src/mc_interface.c ****   *  be retrieved, among others.
  47:Src/mc_interface.c ****   *
  48:Src/mc_interface.c ****   *  These functions aims at being the main interface used by an application to control the motor.
  49:Src/mc_interface.c ****   *
  50:Src/mc_interface.c ****   * @{
  51:Src/mc_interface.c ****   */
  52:Src/mc_interface.c **** /* Private macros ------------------------------------------------------------*/
  53:Src/mc_interface.c **** 
  54:Src/mc_interface.c **** #define round(x) ((x)>=0?(int32_t)((x)+0.5):(int32_t)((x)-0.5))
  55:Src/mc_interface.c **** 
  56:Src/mc_interface.c **** /* Functions -----------------------------------------------*/
  57:Src/mc_interface.c **** 
  58:Src/mc_interface.c **** /**
  59:Src/mc_interface.c ****   * @brief  Programs a motor speed ramp
  60:Src/mc_interface.c ****   *
  61:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to operate on.
  62:Src/mc_interface.c ****   * @param  hFinalSpeed The value of mechanical rotor speed reference at the
  63:Src/mc_interface.c ****   *         end of the ramp expressed in the unit defined by #SPEED_UNIT.
  64:Src/mc_interface.c ****   * @param  hDurationms The duration of the ramp expressed in milliseconds. It
  65:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
  66:Src/mc_interface.c ****   *         value.
  67:Src/mc_interface.c ****   *
  68:Src/mc_interface.c ****   *  This command is executed immediately if the target motor's state machine is in
  69:Src/mc_interface.c ****   * the #RUN state. Otherwise, it is buffered and its execution is delayed until This
  70:Src/mc_interface.c ****   * state is reached.
  71:Src/mc_interface.c ****   *
  72:Src/mc_interface.c ****   * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
  73:Src/mc_interface.c ****   * function.
  74:Src/mc_interface.c ****   *
  75:Src/mc_interface.c ****   * @sa MCI_ExecSpeedRamp
  76:Src/mc_interface.c ****   */
  77:Src/mc_interface.c **** __weak void MCI_ExecSpeedRamp(MCI_Handle_t *pHandle, int16_t hFinalSpeed, uint16_t hDurationms)
  78:Src/mc_interface.c **** {
  31              		.loc 1 78 1 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  79:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
  80:Src/mc_interface.c ****   if (MC_NULL == pHandle)
ARM GAS  /tmp/ccPF8NO0.s 			page 3


  81:Src/mc_interface.c ****   {
  82:Src/mc_interface.c ****     /* Nothing to do */
  83:Src/mc_interface.c ****   }
  84:Src/mc_interface.c ****   else
  85:Src/mc_interface.c ****   {
  86:Src/mc_interface.c **** #endif
  87:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
  36              		.loc 1 87 5 view .LVU1
  37              		.loc 1 87 26 is_stmt 0 view .LVU2
  38 0000 4FF0010C 		mov	ip, #1
  88:Src/mc_interface.c ****     pHandle->hFinalSpeed = hFinalSpeed;
  89:Src/mc_interface.c ****     pHandle->hDurationms = hDurationms;
  90:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
  39              		.loc 1 90 27 view .LVU3
  40 0004 40F20133 		movw	r3, #769
  87:Src/mc_interface.c ****     pHandle->hFinalSpeed = hFinalSpeed;
  41              		.loc 1 87 26 view .LVU4
  42 0008 80F80CC0 		strb	ip, [r0, #12]
  88:Src/mc_interface.c ****     pHandle->hFinalSpeed = hFinalSpeed;
  43              		.loc 1 88 5 is_stmt 1 view .LVU5
  88:Src/mc_interface.c ****     pHandle->hFinalSpeed = hFinalSpeed;
  44              		.loc 1 88 26 is_stmt 0 view .LVU6
  45 000c C181     		strh	r1, [r0, #14]	@ movhi
  89:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
  46              		.loc 1 89 5 is_stmt 1 view .LVU7
  89:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
  47              		.loc 1 89 26 is_stmt 0 view .LVU8
  48 000e 8283     		strh	r2, [r0, #28]	@ movhi
  49              		.loc 1 90 5 is_stmt 1 view .LVU9
  91:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
  50              		.loc 1 91 5 view .LVU10
  90:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
  51              		.loc 1 90 27 is_stmt 0 view .LVU11
  52 0010 8384     		strh	r3, [r0, #36]	@ movhi
  92:Src/mc_interface.c **** 
  93:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
  94:Src/mc_interface.c ****   }
  95:Src/mc_interface.c **** #endif
  96:Src/mc_interface.c **** }
  53              		.loc 1 96 1 view .LVU12
  54 0012 7047     		bx	lr
  55              		.cfi_endproc
  56              	.LFE1713:
  58              		.section	.text.MCI_ExecSpeedRamp_F,"ax",%progbits
  59              		.align	1
  60              		.p2align 2,,3
  61              		.weak	MCI_ExecSpeedRamp_F
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  65              		.fpu fpv4-sp-d16
  67              	MCI_ExecSpeedRamp_F:
  68              	.LVL1:
  69              	.LFB1714:
  97:Src/mc_interface.c **** 
  98:Src/mc_interface.c **** /**
  99:Src/mc_interface.c ****   * @brief  Programs a motor speed ramp
ARM GAS  /tmp/ccPF8NO0.s 			page 4


 100:Src/mc_interface.c ****   *
 101:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to operate on.
 102:Src/mc_interface.c ****   * @param  FinalSpeed is the value of mechanical rotor speed reference at the
 103:Src/mc_interface.c ****   *         end of the ramp expressed in RPM.
 104:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 105:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 106:Src/mc_interface.c ****   *         value.
 107:Src/mc_interface.c ****   *
 108:Src/mc_interface.c ****   *  This command is executed immediately if the target motor's state machine is in
 109:Src/mc_interface.c ****   * the #RUN state. Otherwise, it is buffered and its execution is delayed until This
 110:Src/mc_interface.c ****   * state is reached.
 111:Src/mc_interface.c ****   *
 112:Src/mc_interface.c ****   * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
 113:Src/mc_interface.c ****   * function.
 114:Src/mc_interface.c ****   *
 115:Src/mc_interface.c ****   * @sa MCI_ExecSpeedRamp_F
 116:Src/mc_interface.c ****   */
 117:Src/mc_interface.c **** __weak void MCI_ExecSpeedRamp_F(MCI_Handle_t *pHandle, const float_t FinalSpeed, uint16_t hDuration
 118:Src/mc_interface.c **** {
  70              		.loc 1 118 1 is_stmt 1 view -0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
 119:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 120:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 121:Src/mc_interface.c ****   {
 122:Src/mc_interface.c ****     /* Nothing to do */
 123:Src/mc_interface.c ****   }
 124:Src/mc_interface.c ****   else
 125:Src/mc_interface.c ****   {
 126:Src/mc_interface.c **** #endif
 127:Src/mc_interface.c ****     float_t hFinalSpeed = ((FinalSpeed * (float_t)SPEED_UNIT) / (float_t)U_RPM);
  74              		.loc 1 127 5 view .LVU14
 128:Src/mc_interface.c ****     MCI_ExecSpeedRamp(pHandle, (int16_t)hFinalSpeed, hDurationms);
  75              		.loc 1 128 5 view .LVU15
 127:Src/mc_interface.c ****     MCI_ExecSpeedRamp(pHandle, (int16_t)hFinalSpeed, hDurationms);
  76              		.loc 1 127 40 is_stmt 0 view .LVU16
  77 0000 F2EE047A 		vmov.f32	s15, #1.0e+1
  78 0004 20EE270A 		vmul.f32	s0, s0, s15
  79              	.LVL2:
 127:Src/mc_interface.c ****     MCI_ExecSpeedRamp(pHandle, (int16_t)hFinalSpeed, hDurationms);
  80              		.loc 1 127 13 view .LVU17
  81 0008 9FED067A 		vldr.32	s14, .L5
  82 000c C0EE077A 		vdiv.f32	s15, s0, s14
  83              	.LVL3:
 118:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
  84              		.loc 1 118 1 view .LVU18
  85 0010 08B5     		push	{r3, lr}
  86              	.LCFI0:
  87              		.cfi_def_cfa_offset 8
  88              		.cfi_offset 3, -8
  89              		.cfi_offset 14, -4
 118:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
  90              		.loc 1 118 1 view .LVU19
  91 0012 0A46     		mov	r2, r1
  92              		.loc 1 128 5 view .LVU20
  93 0014 FDEEE77A 		vcvt.s32.f32	s15, s15
ARM GAS  /tmp/ccPF8NO0.s 			page 5


  94              	.LVL4:
  95              		.loc 1 128 5 view .LVU21
  96 0018 17EE903A 		vmov	r3, s15	@ int
  97 001c 19B2     		sxth	r1, r3
  98              	.LVL5:
  99              		.loc 1 128 5 view .LVU22
 100 001e FFF7FEFF 		bl	MCI_ExecSpeedRamp
 101              	.LVL6:
 129:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 130:Src/mc_interface.c ****   }
 131:Src/mc_interface.c **** #endif
 132:Src/mc_interface.c **** }
 102              		.loc 1 132 1 view .LVU23
 103 0022 08BD     		pop	{r3, pc}
 104              	.L6:
 105              		.align	2
 106              	.L5:
 107 0024 00007042 		.word	1114636288
 108              		.cfi_endproc
 109              	.LFE1714:
 111              		.section	.text.MCI_ExecTorqueRamp,"ax",%progbits
 112              		.align	1
 113              		.p2align 2,,3
 114              		.weak	MCI_ExecTorqueRamp
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 118              		.fpu fpv4-sp-d16
 120              	MCI_ExecTorqueRamp:
 121              	.LVL7:
 122              	.LFB1715:
 133:Src/mc_interface.c **** 
 134:Src/mc_interface.c **** /**
 135:Src/mc_interface.c ****   * @brief  Programs a motor torque ramp
 136:Src/mc_interface.c ****   *
 137:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 138:Src/mc_interface.c ****   * @param  hFinalTorque is the value of motor torque reference at the end of
 139:Src/mc_interface.c ****   *         the ramp. This value represents actually the $I_q$ current expressed in
 140:Src/mc_interface.c ****   *         digit.
 141:Src/mc_interface.c ****   *         To convert current expressed in Amps to current expressed in digit
 142:Src/mc_interface.c ****   *         is possible to use the formula:
 143:Src/mc_interface.c ****   *         Current (digit) = [Current(Amp) * 65536 * Rshunt * Aop] / Vdd micro.
 144:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 145:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 146:Src/mc_interface.c ****   *         value.
 147:Src/mc_interface.c ****   *
 148:Src/mc_interface.c ****   *  This command is executed immediately if the target motor's state machine is in
 149:Src/mc_interface.c ****   * the #RUN state. Otherwise, it is buffered and its execution is delayed until This
 150:Src/mc_interface.c ****   * state is reached.
 151:Src/mc_interface.c ****   *
 152:Src/mc_interface.c ****   * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
 153:Src/mc_interface.c ****   * function.
 154:Src/mc_interface.c ****   *
 155:Src/mc_interface.c ****   * @sa MCI_ExecTorqueRamp
 156:Src/mc_interface.c ****   */
 157:Src/mc_interface.c **** __weak void MCI_ExecTorqueRamp(MCI_Handle_t *pHandle, int16_t hFinalTorque, uint16_t hDurationms)
 158:Src/mc_interface.c **** {
ARM GAS  /tmp/ccPF8NO0.s 			page 6


 123              		.loc 1 158 1 is_stmt 1 view -0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
 127              		@ link register save eliminated.
 159:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 160:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 161:Src/mc_interface.c ****   {
 162:Src/mc_interface.c ****     /* Nothing to do */
 163:Src/mc_interface.c ****   }
 164:Src/mc_interface.c ****   else
 165:Src/mc_interface.c ****   {
 166:Src/mc_interface.c **** #endif
 167:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 128              		.loc 1 167 5 view .LVU25
 129              		.loc 1 167 26 is_stmt 0 view .LVU26
 130 0000 4FF0020C 		mov	ip, #2
 168:Src/mc_interface.c ****     pHandle->hFinalTorque = hFinalTorque;
 169:Src/mc_interface.c ****     pHandle->hDurationms = hDurationms;
 170:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 131              		.loc 1 170 27 view .LVU27
 132 0004 40F20143 		movw	r3, #1025
 167:Src/mc_interface.c ****     pHandle->hFinalTorque = hFinalTorque;
 133              		.loc 1 167 26 view .LVU28
 134 0008 80F80CC0 		strb	ip, [r0, #12]
 168:Src/mc_interface.c ****     pHandle->hFinalTorque = hFinalTorque;
 135              		.loc 1 168 5 is_stmt 1 view .LVU29
 168:Src/mc_interface.c ****     pHandle->hFinalTorque = hFinalTorque;
 136              		.loc 1 168 27 is_stmt 0 view .LVU30
 137 000c 0182     		strh	r1, [r0, #16]	@ movhi
 169:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 138              		.loc 1 169 5 is_stmt 1 view .LVU31
 169:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 139              		.loc 1 169 26 is_stmt 0 view .LVU32
 140 000e 8283     		strh	r2, [r0, #28]	@ movhi
 141              		.loc 1 170 5 is_stmt 1 view .LVU33
 171:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 142              		.loc 1 171 5 view .LVU34
 170:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 143              		.loc 1 170 27 is_stmt 0 view .LVU35
 144 0010 8384     		strh	r3, [r0, #36]	@ movhi
 172:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 173:Src/mc_interface.c ****   }
 174:Src/mc_interface.c **** #endif
 175:Src/mc_interface.c **** }
 145              		.loc 1 175 1 view .LVU36
 146 0012 7047     		bx	lr
 147              		.cfi_endproc
 148              	.LFE1715:
 150              		.section	.text.MCI_ExecTorqueRamp_F,"ax",%progbits
 151              		.align	1
 152              		.p2align 2,,3
 153              		.weak	MCI_ExecTorqueRamp_F
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 157              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccPF8NO0.s 			page 7


 159              	MCI_ExecTorqueRamp_F:
 160              	.LVL8:
 161              	.LFB1716:
 176:Src/mc_interface.c **** 
 177:Src/mc_interface.c **** /**
 178:Src/mc_interface.c ****   * @brief  Programs a motor torque ramp
 179:Src/mc_interface.c ****   *
 180:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 181:Src/mc_interface.c ****   * @param  FinalTorque is the value of motor torque reference at the end of
 182:Src/mc_interface.c ****   *         the ramp. This value represents actually the $I_q$ current expressed in
 183:Src/mc_interface.c ****   *         Ampere.
 184:Src/mc_interface.c ****   *         Here the formula for conversion from current in Ampere to digit:
 185:Src/mc_interface.c ****   *           I(s16) = [i(Amp) * 65536 * Rshunt * Aop] / Vdd_micro.
 186:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 187:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 188:Src/mc_interface.c ****   *         value.
 189:Src/mc_interface.c ****   *
 190:Src/mc_interface.c ****   *  This command is executed immediately if the target motor's state machine is in
 191:Src/mc_interface.c ****   * the #RUN state. Otherwise, it is buffered and its execution is delayed until This
 192:Src/mc_interface.c ****   * state is reached.
 193:Src/mc_interface.c ****   *
 194:Src/mc_interface.c ****   * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
 195:Src/mc_interface.c ****   * function.
 196:Src/mc_interface.c ****   *
 197:Src/mc_interface.c ****   * @sa MCI_ExecTorqueRamp_F
 198:Src/mc_interface.c ****   */
 199:Src/mc_interface.c **** __weak void MCI_ExecTorqueRamp_F(MCI_Handle_t *pHandle, const float_t FinalTorque, uint16_t hDurati
 200:Src/mc_interface.c **** {
 162              		.loc 1 200 1 is_stmt 1 view -0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 0
 165              		@ frame_needed = 0, uses_anonymous_args = 0
 201:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 202:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 203:Src/mc_interface.c ****   {
 204:Src/mc_interface.c ****     /* Nothing to do */
 205:Src/mc_interface.c ****   }
 206:Src/mc_interface.c ****   else
 207:Src/mc_interface.c ****   {
 208:Src/mc_interface.c **** #endif
 209:Src/mc_interface.c ****     float_t hFinalTorque = (FinalTorque * (float_t)CURRENT_CONV_FACTOR);
 166              		.loc 1 209 5 view .LVU38
 210:Src/mc_interface.c ****     MCI_ExecTorqueRamp(pHandle, (int16_t)hFinalTorque, hDurationms);
 167              		.loc 1 210 5 view .LVU39
 209:Src/mc_interface.c ****     MCI_ExecTorqueRamp(pHandle, (int16_t)hFinalTorque, hDurationms);
 168              		.loc 1 209 13 is_stmt 0 view .LVU40
 169 0000 DFED067A 		vldr.32	s15, .L10
 170 0004 20EE270A 		vmul.f32	s0, s0, s15
 171              	.LVL9:
 200:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 172              		.loc 1 200 1 view .LVU41
 173 0008 08B5     		push	{r3, lr}
 174              	.LCFI1:
 175              		.cfi_def_cfa_offset 8
 176              		.cfi_offset 3, -8
 177              		.cfi_offset 14, -4
 178              		.loc 1 210 5 view .LVU42
ARM GAS  /tmp/ccPF8NO0.s 			page 8


 179 000a BDEEC00A 		vcvt.s32.f32	s0, s0
 180              	.LVL10:
 200:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 181              		.loc 1 200 1 view .LVU43
 182 000e 0A46     		mov	r2, r1
 183              		.loc 1 210 5 view .LVU44
 184 0010 10EE103A 		vmov	r3, s0	@ int
 185 0014 19B2     		sxth	r1, r3
 186              	.LVL11:
 187              		.loc 1 210 5 view .LVU45
 188 0016 FFF7FEFF 		bl	MCI_ExecTorqueRamp
 189              	.LVL12:
 211:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 212:Src/mc_interface.c ****   }
 213:Src/mc_interface.c **** #endif
 214:Src/mc_interface.c **** }
 190              		.loc 1 214 1 view .LVU46
 191 001a 08BD     		pop	{r3, pc}
 192              	.L11:
 193              		.align	2
 194              	.L10:
 195 001c 00C02D44 		.word	1143848960
 196              		.cfi_endproc
 197              	.LFE1716:
 199              		.section	.text.MCI_SetCurrentReferences,"ax",%progbits
 200              		.align	1
 201              		.p2align 2,,3
 202              		.weak	MCI_SetCurrentReferences
 203              		.syntax unified
 204              		.thumb
 205              		.thumb_func
 206              		.fpu fpv4-sp-d16
 208              	MCI_SetCurrentReferences:
 209              	.LVL13:
 210              	.LFB1717:
 215:Src/mc_interface.c **** 
 216:Src/mc_interface.c **** /**
 217:Src/mc_interface.c ****   * @brief  Sets the motor current references $I_q$ and $I_d$ directly.
 218:Src/mc_interface.c ****   *
 219:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 220:Src/mc_interface.c ****   * @param  Iqdref current references on qd reference frame in qd_t format.
 221:Src/mc_interface.c ****   *
 222:Src/mc_interface.c ****   *  This command is executed immediately if the target motor's state machine is in
 223:Src/mc_interface.c ****   * the #RUN state. Otherwise, it is buffered and its execution is delayed until This
 224:Src/mc_interface.c ****   * state is reached.
 225:Src/mc_interface.c ****   *
 226:Src/mc_interface.c ****   * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
 227:Src/mc_interface.c ****   * function.
 228:Src/mc_interface.c **** 
 229:Src/mc_interface.c ****   @sa MCI_SetCurrentReferences_F
 230:Src/mc_interface.c ****   */
 231:Src/mc_interface.c **** __weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
 232:Src/mc_interface.c **** {
 211              		.loc 1 232 1 is_stmt 1 view -0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 8
 214              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccPF8NO0.s 			page 9


 215              		@ link register save eliminated.
 233:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 234:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 235:Src/mc_interface.c ****   {
 236:Src/mc_interface.c ****     /* Nothing to do */
 237:Src/mc_interface.c ****   }
 238:Src/mc_interface.c ****   else
 239:Src/mc_interface.c ****   {
 240:Src/mc_interface.c **** #endif
 241:Src/mc_interface.c **** 
 242:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 216              		.loc 1 242 5 view .LVU48
 232:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 217              		.loc 1 232 1 is_stmt 0 view .LVU49
 218 0000 82B0     		sub	sp, sp, #8
 219              	.LCFI2:
 220              		.cfi_def_cfa_offset 8
 221              		.loc 1 242 26 view .LVU50
 222 0002 0322     		movs	r2, #3
 243:Src/mc_interface.c ****     pHandle->Iqdref.q = Iqdref.q;
 244:Src/mc_interface.c ****     pHandle->Iqdref.d = Iqdref.d;
 245:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 223              		.loc 1 245 27 view .LVU51
 224 0004 40F20143 		movw	r3, #1025
 242:Src/mc_interface.c ****     pHandle->Iqdref.q = Iqdref.q;
 225              		.loc 1 242 26 view .LVU52
 226 0008 0273     		strb	r2, [r0, #12]
 243:Src/mc_interface.c ****     pHandle->Iqdref.q = Iqdref.q;
 227              		.loc 1 243 5 is_stmt 1 view .LVU53
 244:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 228              		.loc 1 244 5 view .LVU54
 243:Src/mc_interface.c ****     pHandle->Iqdref.q = Iqdref.q;
 229              		.loc 1 243 23 is_stmt 0 view .LVU55
 230 000a C0F81210 		str	r1, [r0, #18]	@ unaligned
 231              		.loc 1 245 5 is_stmt 1 view .LVU56
 246:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 232              		.loc 1 246 5 view .LVU57
 245:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 233              		.loc 1 245 27 is_stmt 0 view .LVU58
 234 000e 8384     		strh	r3, [r0, #36]	@ movhi
 247:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 248:Src/mc_interface.c ****   }
 249:Src/mc_interface.c **** #endif
 250:Src/mc_interface.c **** }
 235              		.loc 1 250 1 view .LVU59
 236 0010 02B0     		add	sp, sp, #8
 237              	.LCFI3:
 238              		.cfi_def_cfa_offset 0
 239              		@ sp needed
 240 0012 7047     		bx	lr
 241              		.cfi_endproc
 242              	.LFE1717:
 244              		.section	.text.MCI_SetCurrentReferences_F,"ax",%progbits
 245              		.align	1
 246              		.p2align 2,,3
 247              		.weak	MCI_SetCurrentReferences_F
 248              		.syntax unified
ARM GAS  /tmp/ccPF8NO0.s 			page 10


 249              		.thumb
 250              		.thumb_func
 251              		.fpu fpv4-sp-d16
 253              	MCI_SetCurrentReferences_F:
 254              	.LVL14:
 255              	.LFB1718:
 251:Src/mc_interface.c **** 
 252:Src/mc_interface.c **** /**
 253:Src/mc_interface.c ****   * @brief  Sets the motor current references $I_q$ and $I_d$ directly.
 254:Src/mc_interface.c ****   *
 255:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 256:Src/mc_interface.c ****   * @param  IqdRef current (A) references on qd reference frame in qd_f_t format.
 257:Src/mc_interface.c ****   *
 258:Src/mc_interface.c ****   *  This command is executed immediately if the target motor's state machine is in
 259:Src/mc_interface.c ****   * the #RUN state. Otherwise, it is buffered and its execution is delayed until This
 260:Src/mc_interface.c ****   * state is reached.
 261:Src/mc_interface.c ****   *
 262:Src/mc_interface.c ****   * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
 263:Src/mc_interface.c ****   * function.
 264:Src/mc_interface.c **** 
 265:Src/mc_interface.c ****   @sa MCI_SetCurrentReferences
 266:Src/mc_interface.c ****   */
 267:Src/mc_interface.c **** __weak void MCI_SetCurrentReferences_F(MCI_Handle_t *pHandle, qd_f_t IqdRef)
 268:Src/mc_interface.c **** {
 256              		.loc 1 268 1 is_stmt 1 view -0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 16
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 269:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 270:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 271:Src/mc_interface.c ****   {
 272:Src/mc_interface.c ****     /* Nothing to do */
 273:Src/mc_interface.c ****   }
 274:Src/mc_interface.c ****   else
 275:Src/mc_interface.c ****   {
 276:Src/mc_interface.c **** #endif
 277:Src/mc_interface.c ****     qd_t iqDrefTemp;
 260              		.loc 1 277 5 view .LVU61
 278:Src/mc_interface.c ****     qd_f_t iqDrefTempf;
 261              		.loc 1 278 5 view .LVU62
 279:Src/mc_interface.c ****     iqDrefTempf.d = (IqdRef.d * (float_t)CURRENT_CONV_FACTOR);
 262              		.loc 1 279 5 view .LVU63
 280:Src/mc_interface.c ****     iqDrefTempf.q = (IqdRef.q * (float_t)CURRENT_CONV_FACTOR);
 263              		.loc 1 280 31 is_stmt 0 view .LVU64
 264 0000 DFED0C7A 		vldr.32	s15, .L16
 268:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 265              		.loc 1 268 1 view .LVU65
 266 0004 00B5     		push	{lr}
 267              	.LCFI4:
 268              		.cfi_def_cfa_offset 4
 269              		.cfi_offset 14, -4
 270              		.loc 1 280 31 view .LVU66
 271 0006 20EE270A 		vmul.f32	s0, s0, s15
 279:Src/mc_interface.c ****     iqDrefTempf.d = (IqdRef.d * (float_t)CURRENT_CONV_FACTOR);
 272              		.loc 1 279 31 view .LVU67
 273 000a 60EEA70A 		vmul.f32	s1, s1, s15
 281:Src/mc_interface.c ****     iqDrefTemp.d = (int16_t)(iqDrefTempf.d);
ARM GAS  /tmp/ccPF8NO0.s 			page 11


 282:Src/mc_interface.c ****     iqDrefTemp.q = (int16_t)(iqDrefTempf.q);
 274              		.loc 1 282 20 view .LVU68
 275 000e BDEEC00A 		vcvt.s32.f32	s0, s0
 268:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 276              		.loc 1 268 1 view .LVU69
 277 0012 85B0     		sub	sp, sp, #20
 278              	.LCFI5:
 279              		.cfi_def_cfa_offset 24
 280              	.LVL15:
 280:Src/mc_interface.c ****     iqDrefTemp.d = (int16_t)(iqDrefTempf.d);
 281              		.loc 1 280 5 is_stmt 1 view .LVU70
 281:Src/mc_interface.c ****     iqDrefTemp.d = (int16_t)(iqDrefTempf.d);
 282              		.loc 1 281 5 view .LVU71
 283              		.loc 1 282 20 is_stmt 0 view .LVU72
 284 0014 10EE103A 		vmov	r3, s0	@ int
 281:Src/mc_interface.c ****     iqDrefTemp.d = (int16_t)(iqDrefTempf.d);
 285              		.loc 1 281 20 view .LVU73
 286 0018 FDEEE00A 		vcvt.s32.f32	s1, s1
 287              		.loc 1 282 20 view .LVU74
 288 001c ADF80C30 		strh	r3, [sp, #12]	@ movhi
 281:Src/mc_interface.c ****     iqDrefTemp.d = (int16_t)(iqDrefTempf.d);
 289              		.loc 1 281 20 view .LVU75
 290 0020 10EE903A 		vmov	r3, s1	@ int
 291 0024 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 292              		.loc 1 282 5 is_stmt 1 view .LVU76
 283:Src/mc_interface.c ****     MCI_SetCurrentReferences(pHandle, iqDrefTemp);
 293              		.loc 1 283 5 view .LVU77
 294 0028 0399     		ldr	r1, [sp, #12]
 295 002a FFF7FEFF 		bl	MCI_SetCurrentReferences
 296              	.LVL16:
 284:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 285:Src/mc_interface.c ****   }
 286:Src/mc_interface.c **** #endif
 287:Src/mc_interface.c **** }
 297              		.loc 1 287 1 is_stmt 0 view .LVU78
 298 002e 05B0     		add	sp, sp, #20
 299              	.LCFI6:
 300              		.cfi_def_cfa_offset 4
 301              		@ sp needed
 302 0030 5DF804FB 		ldr	pc, [sp], #4
 303              	.LVL17:
 304              	.L17:
 305              		.loc 1 287 1 view .LVU79
 306              		.align	2
 307              	.L16:
 308 0034 00C02D44 		.word	1143848960
 309              		.cfi_endproc
 310              	.LFE1718:
 312              		.section	.text.MCI_GetCalibratedOffsetsMotor,"ax",%progbits
 313              		.align	1
 314              		.p2align 2,,3
 315              		.weak	MCI_GetCalibratedOffsetsMotor
 316              		.syntax unified
 317              		.thumb
 318              		.thumb_func
 319              		.fpu fpv4-sp-d16
 321              	MCI_GetCalibratedOffsetsMotor:
ARM GAS  /tmp/ccPF8NO0.s 			page 12


 322              	.LVL18:
 323              	.LFB1722:
 288:Src/mc_interface.c **** 
 289:Src/mc_interface.c **** /**
 290:Src/mc_interface.c ****   * @brief  Initiates a motor startup procedure
 291:Src/mc_interface.c ****   *
 292:Src/mc_interface.c ****   * @param  pHandle Handle on the target motor interface structure
 293:Src/mc_interface.c ****   * @retval Returns true if the command is successfully executed;
 294:Src/mc_interface.c ****   *         returns false otherwise
 295:Src/mc_interface.c ****   *
 296:Src/mc_interface.c ****   *  If the state machine of target the motor is in #IDLE state the command is
 297:Src/mc_interface.c ****   * executed instantaneously otherwise it is discarded. Users can check
 298:Src/mc_interface.c ****   * the return value of the function to get its status. The state of the motor
 299:Src/mc_interface.c ****   * can be queried with the MCI_GetSTMState() function.
 300:Src/mc_interface.c ****   *
 301:Src/mc_interface.c ****   * Before calling MCI_StartMotor() it is mandatory to execute one of the
 302:Src/mc_interface.c ****   * following commands, in order to set a torque or a speed reference
 303:Src/mc_interface.c ****   * otherwise the behavior of the motor when it reaches the #RUN state will
 304:Src/mc_interface.c ****   * be unpredictable:
 305:Src/mc_interface.c ****   *  - MCI_ExecSpeedRamp
 306:Src/mc_interface.c ****   *  - MCI_ExecTorqueRamp
 307:Src/mc_interface.c ****   *  - MCI_SetCurrentReferences
 308:Src/mc_interface.c ****   *
 309:Src/mc_interface.c ****   * If the offsets of the current measurement circuitry offsets are not known yet,
 310:Src/mc_interface.c ****   * an offset calibration procedure is executed to measure them prior to acutally
 311:Src/mc_interface.c ****   * starting up the motor.
 312:Src/mc_interface.c ****   *
 313:Src/mc_interface.c ****   * @note The MCI_StartMotor command only triggers the execution of the start-up
 314:Src/mc_interface.c ****   * procedure (or eventually the offset calibration procedure) and returns
 315:Src/mc_interface.c ****   * immediately after. It is not blocking the execution of the application until
 316:Src/mc_interface.c ****   * the motor is indeed running in steady state. If the application needs to wait
 317:Src/mc_interface.c ****   * for the motor to be running in steady state, the application has to check the
 318:Src/mc_interface.c ****   * state machine of the motor and verify that the #RUN state has been reached.
 319:Src/mc_interface.c ****   * Note also that if the startup sequence fails the #RUN state may never be reached.
 320:Src/mc_interface.c ****   */
 321:Src/mc_interface.c **** __weak bool MCI_StartMotor(MCI_Handle_t *pHandle)
 322:Src/mc_interface.c **** {
 323:Src/mc_interface.c ****   bool retVal = false;
 324:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 325:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 326:Src/mc_interface.c ****   {
 327:Src/mc_interface.c ****     /* Nothing to do */
 328:Src/mc_interface.c ****   }
 329:Src/mc_interface.c ****   else
 330:Src/mc_interface.c ****   {
 331:Src/mc_interface.c **** #endif
 332:Src/mc_interface.c ****     if ((IDLE == MCI_GetSTMState(pHandle)) &&
 333:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 334:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 335:Src/mc_interface.c ****     {
 336:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_START;
 337:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 338:Src/mc_interface.c ****       retVal = true;
 339:Src/mc_interface.c ****     }
 340:Src/mc_interface.c ****     else
 341:Src/mc_interface.c ****     {
 342:Src/mc_interface.c ****       /* Reject the command as the condition are not met */
ARM GAS  /tmp/ccPF8NO0.s 			page 13


 343:Src/mc_interface.c ****     }
 344:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 345:Src/mc_interface.c ****   }
 346:Src/mc_interface.c **** #endif
 347:Src/mc_interface.c ****   return (retVal);
 348:Src/mc_interface.c **** }
 349:Src/mc_interface.c **** 
 350:Src/mc_interface.c **** /**
 351:Src/mc_interface.c ****   * @brief  Initiates a motor startup procedure preceded by an offset
 352:Src/mc_interface.c ****   *         calibration procedure
 353:Src/mc_interface.c ****   *
 354:Src/mc_interface.c ****   * @param  pHandle Handle on the target motor interface structure
 355:Src/mc_interface.c ****   * @retval Returns true if the command is successfully executed;
 356:Src/mc_interface.c ****   *         returns false otherwise
 357:Src/mc_interface.c ****   *
 358:Src/mc_interface.c ****   *  If the state machine of target the motor is in #IDLE state the command is
 359:Src/mc_interface.c ****   * executed instantaneously otherwise it is discarded. Users can check
 360:Src/mc_interface.c ****   * the return value of the function to get its status. The state of the motor
 361:Src/mc_interface.c ****   * can be queried with the MCI_GetSTMState() function.
 362:Src/mc_interface.c ****   *
 363:Src/mc_interface.c ****   * Before calling MCI_StartMotor() it is mandatory to execute one of the
 364:Src/mc_interface.c ****   * following commands, in order to set a torque or a speed reference
 365:Src/mc_interface.c ****   * otherwise the behavior of the motor when it reaches the #RUN state will
 366:Src/mc_interface.c ****   * be unpredictable:
 367:Src/mc_interface.c ****   *  - MCI_ExecSpeedRamp
 368:Src/mc_interface.c ****   *  - MCI_ExecTorqueRamp
 369:Src/mc_interface.c ****   *  - MCI_SetCurrentReferences
 370:Src/mc_interface.c ****   *
 371:Src/mc_interface.c ****   * Whether the current measurement circuitry offsets are known or not, an
 372:Src/mc_interface.c ****   * offset calibration procedure is executed to (re)measure them. Once it has
 373:Src/mc_interface.c ****   * completed, the start up procedure of the motor is executed.
 374:Src/mc_interface.c ****   *
 375:Src/mc_interface.c ****   * @note The MCI_StartMotor command only triggers the execution of the start-up
 376:Src/mc_interface.c ****   * procedure (or eventually the offset calibration procedure) and returns
 377:Src/mc_interface.c ****   * immediately after. It is not blocking the execution of the application until
 378:Src/mc_interface.c ****   * the motor is indeed running in steady state. If the application needs to wait
 379:Src/mc_interface.c ****   * for the motor to be running in steady state, the application has to check the
 380:Src/mc_interface.c ****   * state machine of the motor and verify that the #RUN state has been reached.
 381:Src/mc_interface.c ****   * Note also that if the startup sequence fails the #RUN state may never be reached.
 382:Src/mc_interface.c ****   */
 383:Src/mc_interface.c **** __weak bool MCI_StartWithPolarizationMotor(MCI_Handle_t* pHandle)
 384:Src/mc_interface.c **** {
 385:Src/mc_interface.c ****   bool retVal = false;
 386:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 387:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 388:Src/mc_interface.c ****   {
 389:Src/mc_interface.c ****     /* Nothing to do */
 390:Src/mc_interface.c ****   }
 391:Src/mc_interface.c ****   else
 392:Src/mc_interface.c ****   {
 393:Src/mc_interface.c **** #endif
 394:Src/mc_interface.c ****     if ((IDLE == MCI_GetSTMState(pHandle)) &&
 395:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 396:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 397:Src/mc_interface.c ****     {
 398:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_START;
 399:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
ARM GAS  /tmp/ccPF8NO0.s 			page 14


 400:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = false;
 401:Src/mc_interface.c ****       retVal = true;
 402:Src/mc_interface.c ****   }
 403:Src/mc_interface.c ****   else
 404:Src/mc_interface.c ****   {
 405:Src/mc_interface.c ****     /* Reject the command as the condition are not met */
 406:Src/mc_interface.c ****   }
 407:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 408:Src/mc_interface.c ****   }
 409:Src/mc_interface.c **** #endif
 410:Src/mc_interface.c ****   return (retVal);
 411:Src/mc_interface.c **** }
 412:Src/mc_interface.c **** 
 413:Src/mc_interface.c **** /**
 414:Src/mc_interface.c ****   * @brief  This is a user command used to begin the phase offset calibration
 415:Src/mc_interface.c ****   *         procedure. If the state machine is in IDLE state the command is executed
 416:Src/mc_interface.c ****   *         instantaneously otherwise the command is discarded. User must take
 417:Src/mc_interface.c ****   *         care of this possibility by checking the return value.\n
 418:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_StartOffsetMeasurments command is used to begin phase
 419:Src/mc_interface.c ****   *         offset calibration procedure moving the state machine from IDLE state to
 420:Src/mc_interface.c ****   *         OFFSET_CALIB. The command MCI_StartOffsetMeasurments is not blocking
 421:Src/mc_interface.c ****   *         the execution of project until the measurments are done; to do this, the user
 422:Src/mc_interface.c ****   *         have to check the state machine and verify that the IDLE state (or
 423:Src/mc_interface.c ****   *         any other state) has been reached.
 424:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 425:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 426:Src/mc_interface.c ****   *         otherwise it return false.
 427:Src/mc_interface.c ****   */
 428:Src/mc_interface.c **** __weak bool MCI_StartOffsetMeasurments(MCI_Handle_t *pHandle)
 429:Src/mc_interface.c **** {
 430:Src/mc_interface.c ****   bool retVal = false;
 431:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 432:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 433:Src/mc_interface.c ****   {
 434:Src/mc_interface.c ****     /* Nothing to do */
 435:Src/mc_interface.c ****   }
 436:Src/mc_interface.c ****   else
 437:Src/mc_interface.c ****   {
 438:Src/mc_interface.c **** #endif
 439:Src/mc_interface.c ****     if ((IDLE == MCI_GetSTMState(pHandle)) &&
 440:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 441:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 442:Src/mc_interface.c ****     {
 443:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_MEASURE_OFFSETS;
 444:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = false;
 445:Src/mc_interface.c ****       retVal = true;
 446:Src/mc_interface.c ****     }
 447:Src/mc_interface.c ****     else
 448:Src/mc_interface.c ****     {
 449:Src/mc_interface.c ****       /* Reject the command as the condition are not met */
 450:Src/mc_interface.c ****     }
 451:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 452:Src/mc_interface.c ****   }
 453:Src/mc_interface.c **** #endif
 454:Src/mc_interface.c ****   return (retVal);
 455:Src/mc_interface.c **** }
 456:Src/mc_interface.c **** 
ARM GAS  /tmp/ccPF8NO0.s 			page 15


 457:Src/mc_interface.c **** /**
 458:Src/mc_interface.c ****   * @brief  Gets the phase current measurement offset values
 459:Src/mc_interface.c ****   *
 460:Src/mc_interface.c ****   * The offset values are written in the PolarizationOffsets structure provided that they
 461:Src/mc_interface.c ****   * have been previously provided for the Motor Control subsystem or measured by it.
 462:Src/mc_interface.c ****   *
 463:Src/mc_interface.c ****   * If the offset have not previously been provided to the Motor Control subsystem or
 464:Src/mc_interface.c ****   * if it has not measured them the function returns false and nothing is written in the
 465:Src/mc_interface.c ****   * PolarizationOffsets structure.
 466:Src/mc_interface.c ****   *
 467:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 468:Src/mc_interface.c ****   * @param  PolarizationOffsets Pointer on ploarization offset structure in which offsets will be w
 469:Src/mc_interface.c ****   * @retval returns true if the command is successfully executed; returns false otherwise.
 470:Src/mc_interface.c ****   */
 471:Src/mc_interface.c **** __weak bool MCI_GetCalibratedOffsetsMotor(MCI_Handle_t *pHandle, PolarizationOffsets_t *Polarizatio
 472:Src/mc_interface.c **** {
 324              		.loc 1 472 1 is_stmt 1 view -0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 473:Src/mc_interface.c ****   bool retVal = false;
 328              		.loc 1 473 3 view .LVU81
 474:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 475:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 476:Src/mc_interface.c ****   {
 477:Src/mc_interface.c ****     /* Nothing to do */
 478:Src/mc_interface.c ****   }
 479:Src/mc_interface.c ****   else
 480:Src/mc_interface.c ****   {
 481:Src/mc_interface.c **** #endif
 482:Src/mc_interface.c ****     if (pHandle->pPWM->offsetCalibStatus == true)
 329              		.loc 1 482 5 view .LVU82
 330              		.loc 1 482 16 is_stmt 0 view .LVU83
 331 0000 8068     		ldr	r0, [r0, #8]
 332              	.LVL19:
 472:Src/mc_interface.c ****   bool retVal = false;
 333              		.loc 1 472 1 view .LVU84
 334 0002 10B5     		push	{r4, lr}
 335              	.LCFI7:
 336              		.cfi_def_cfa_offset 8
 337              		.cfi_offset 4, -8
 338              		.cfi_offset 14, -4
 339              		.loc 1 482 22 view .LVU85
 340 0004 90F87F40 		ldrb	r4, [r0, #127]	@ zero_extendqisi2
 341              		.loc 1 482 8 view .LVU86
 342 0008 0CB9     		cbnz	r4, .L24
 343              	.LVL20:
 483:Src/mc_interface.c ****     {
 484:Src/mc_interface.c ****       PWMC_GetOffsetCalib(pHandle->pPWM, PolarizationOffsets);
 485:Src/mc_interface.c ****       retVal = true;
 486:Src/mc_interface.c ****     }
 487:Src/mc_interface.c ****     else
 488:Src/mc_interface.c ****     {
 489:Src/mc_interface.c ****       /* Reject the command as the condition are not met */
 490:Src/mc_interface.c ****     }
 344              		.loc 1 490 5 is_stmt 1 view .LVU87
 491:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
ARM GAS  /tmp/ccPF8NO0.s 			page 16


 492:Src/mc_interface.c ****   }
 493:Src/mc_interface.c **** #endif
 494:Src/mc_interface.c **** 
 495:Src/mc_interface.c ****   return(retVal);
 345              		.loc 1 495 3 view .LVU88
 496:Src/mc_interface.c **** }
 346              		.loc 1 496 1 is_stmt 0 view .LVU89
 347 000a 2046     		mov	r0, r4
 348 000c 10BD     		pop	{r4, pc}
 349              	.LVL21:
 350              	.L24:
 484:Src/mc_interface.c ****       retVal = true;
 351              		.loc 1 484 7 is_stmt 1 view .LVU90
 352 000e FFF7FEFF 		bl	PWMC_GetOffsetCalib
 353              	.LVL22:
 485:Src/mc_interface.c ****     }
 354              		.loc 1 485 7 view .LVU91
 490:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 355              		.loc 1 490 5 view .LVU92
 495:Src/mc_interface.c **** }
 356              		.loc 1 495 3 view .LVU93
 357              		.loc 1 496 1 is_stmt 0 view .LVU94
 358 0012 2046     		mov	r0, r4
 359 0014 10BD     		pop	{r4, pc}
 360              		.loc 1 496 1 view .LVU95
 361              		.cfi_endproc
 362              	.LFE1722:
 364 0016 00BF     		.section	.text.MCI_FaultProcessing,"ax",%progbits
 365              		.align	1
 366              		.p2align 2,,3
 367              		.weak	MCI_FaultProcessing
 368              		.syntax unified
 369              		.thumb
 370              		.thumb_func
 371              		.fpu fpv4-sp-d16
 373              	MCI_FaultProcessing:
 374              	.LVL23:
 375              	.LFB1726:
 497:Src/mc_interface.c **** 
 498:Src/mc_interface.c **** /**
 499:Src/mc_interface.c ****   * @brief  Sets the phase current measurement offset values
 500:Src/mc_interface.c ****   *
 501:Src/mc_interface.c ****   * If the state machine is in IDLE state the command is executed
 502:Src/mc_interface.c ****   * instantaneously otherwise the command is discarded. User must take
 503:Src/mc_interface.c ****   * care of this possibility by checking the return value.
 504:Src/mc_interface.c ****   *
 505:Src/mc_interface.c ****   * @note The MCI_SetCalibratedOffsetsMotor command is used to set the phase
 506:Src/mc_interface.c ****   *  offset values . The command MCI_SetCalibratedOffsetsMotor is not blocking
 507:Src/mc_interface.c ****   * the execution of project until the measurments are done; to do this, the user
 508:Src/mc_interface.c ****   * have to check the state machine and verify that the IDLE state (or
 509:Src/mc_interface.c ****   * any other state) has been reached.
 510:Src/mc_interface.c ****   *
 511:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 512:Src/mc_interface.c ****   * @param  PolarizationOffsets Pointer on ploarization offset structure that contains phase A,
 513:Src/mc_interface.c ****   *         and C values.
 514:Src/mc_interface.c ****   * @retval Returns true if the command is successfully executed
 515:Src/mc_interface.c ****   *         otherwise it return false.
ARM GAS  /tmp/ccPF8NO0.s 			page 17


 516:Src/mc_interface.c ****   */
 517:Src/mc_interface.c **** __weak bool MCI_SetCalibratedOffsetsMotor(MCI_Handle_t *pHandle, PolarizationOffsets_t *Polarizatio
 518:Src/mc_interface.c **** {
 519:Src/mc_interface.c ****   bool retVal = false;
 520:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 521:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 522:Src/mc_interface.c ****   {
 523:Src/mc_interface.c ****     /* Nothing to do */
 524:Src/mc_interface.c ****   }
 525:Src/mc_interface.c ****   else
 526:Src/mc_interface.c ****   {
 527:Src/mc_interface.c **** #endif
 528:Src/mc_interface.c ****     if ((IDLE == MCI_GetSTMState(pHandle)) &&
 529:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 530:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 531:Src/mc_interface.c ****     {
 532:Src/mc_interface.c ****       PWMC_SetOffsetCalib(pHandle->pPWM, PolarizationOffsets);
 533:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = true;
 534:Src/mc_interface.c ****       retVal = true;
 535:Src/mc_interface.c ****     }
 536:Src/mc_interface.c ****     else
 537:Src/mc_interface.c ****     {
 538:Src/mc_interface.c ****       /* Reject the command as the condition are not met */
 539:Src/mc_interface.c ****     }
 540:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 541:Src/mc_interface.c ****   }
 542:Src/mc_interface.c **** #endif
 543:Src/mc_interface.c ****     return(retVal);
 544:Src/mc_interface.c **** }
 545:Src/mc_interface.c **** 
 546:Src/mc_interface.c **** /**
 547:Src/mc_interface.c ****   * @brief Initiates the stop procedure for a motor
 548:Src/mc_interface.c ****   *
 549:Src/mc_interface.c ****   *  If the state machine is in any state but the #ICLWAIT, #IDLE, #FAULT_NOW and
 550:Src/mc_interface.c ****   * #FAULT_OVER states, the command is immediately executed. Otherwise, it is
 551:Src/mc_interface.c ****   * discarded. The Application can check the return value to know whether the
 552:Src/mc_interface.c ****   * command was executed or discarded.
 553:Src/mc_interface.c ****   *
 554:Src/mc_interface.c ****   * @note The MCI_StopMotor() command only triggers the stop motor procedure
 555:Src/mc_interface.c ****   * and then returns. It is not blocking the application until the motor is indeed
 556:Src/mc_interface.c ****   * stopped. To know if it has stopped, the application can query the motor's state
 557:Src/mc_interface.c ****   * machine and check if the #IDLE state has been reached.
 558:Src/mc_interface.c ****   *
 559:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 560:Src/mc_interface.c ****   * @retval returns true if the command is successfully executed, false otherwise.
 561:Src/mc_interface.c ****   */
 562:Src/mc_interface.c **** __weak bool MCI_StopMotor(MCI_Handle_t *pHandle)
 563:Src/mc_interface.c **** {
 564:Src/mc_interface.c ****   bool retVal = false;
 565:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 566:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 567:Src/mc_interface.c ****   {
 568:Src/mc_interface.c ****     /* Nothing to do */
 569:Src/mc_interface.c ****   }
 570:Src/mc_interface.c ****   else
 571:Src/mc_interface.c ****   {
 572:Src/mc_interface.c **** #endif
ARM GAS  /tmp/ccPF8NO0.s 			page 18


 573:Src/mc_interface.c ****     bool status;
 574:Src/mc_interface.c ****     MCI_State_t State;
 575:Src/mc_interface.c **** 
 576:Src/mc_interface.c ****     State = MCI_GetSTMState(pHandle);
 577:Src/mc_interface.c ****     if ((IDLE == State) || (ICLWAIT == State))
 578:Src/mc_interface.c ****     {
 579:Src/mc_interface.c ****       status = false;
 580:Src/mc_interface.c ****     }
 581:Src/mc_interface.c ****     else
 582:Src/mc_interface.c ****     {
 583:Src/mc_interface.c ****       status = true;
 584:Src/mc_interface.c ****     }
 585:Src/mc_interface.c **** 
 586:Src/mc_interface.c ****     if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 587:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 588:Src/mc_interface.c ****         (status == true))
 589:Src/mc_interface.c ****     {
 590:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_STOP;
 591:Src/mc_interface.c ****       retVal = true;
 592:Src/mc_interface.c ****     }
 593:Src/mc_interface.c ****     else
 594:Src/mc_interface.c ****     {
 595:Src/mc_interface.c ****       /* Reject the command as the condition are not met */
 596:Src/mc_interface.c ****     }
 597:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 598:Src/mc_interface.c ****   }
 599:Src/mc_interface.c **** #endif
 600:Src/mc_interface.c ****   return (retVal);
 601:Src/mc_interface.c **** }
 602:Src/mc_interface.c **** 
 603:Src/mc_interface.c **** /**
 604:Src/mc_interface.c ****  * @brief Acknowledges Motor Control faults that occurred on the target motor 1.
 605:Src/mc_interface.c ****  *
 606:Src/mc_interface.c ****  *  This function must be called before the motor can be started again when a fault
 607:Src/mc_interface.c ****  * condition has occured. It clears the faults status and resets the state machine
 608:Src/mc_interface.c ****  * of the target motor to the #IDLE state provided that there is no active fault
 609:Src/mc_interface.c ****  * condition anymore.
 610:Src/mc_interface.c ****  *
 611:Src/mc_interface.c ****  *  If the state machine of the target motor is in the #FAULT_OVER state, the function
 612:Src/mc_interface.c ****  * clears the list of past faults, transitions to the #IDLE state and returns true.
 613:Src/mc_interface.c ****  * Otherwise, it oes nothing and returns false.
 614:Src/mc_interface.c ****  *
 615:Src/mc_interface.c ****  * @param  pHandle Pointer on the target motor drive structure.
 616:Src/mc_interface.c ****  */
 617:Src/mc_interface.c **** __weak bool MCI_FaultAcknowledged(MCI_Handle_t *pHandle)
 618:Src/mc_interface.c **** {
 619:Src/mc_interface.c ****   bool reVal = false;
 620:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 621:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 622:Src/mc_interface.c ****   {
 623:Src/mc_interface.c ****     /* Nothing to do */
 624:Src/mc_interface.c ****   }
 625:Src/mc_interface.c ****   else
 626:Src/mc_interface.c ****   {
 627:Src/mc_interface.c **** #endif
 628:Src/mc_interface.c ****     if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle))
 629:Src/mc_interface.c ****     {
ARM GAS  /tmp/ccPF8NO0.s 			page 19


 630:Src/mc_interface.c ****       pHandle->PastFaults = MC_NO_FAULTS;
 631:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_ACK_FAULTS;
 632:Src/mc_interface.c ****       reVal = true;
 633:Src/mc_interface.c ****     }
 634:Src/mc_interface.c ****     else
 635:Src/mc_interface.c ****     {
 636:Src/mc_interface.c ****       /* Reject the command as the conditions are not met */
 637:Src/mc_interface.c ****     }
 638:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 639:Src/mc_interface.c ****   }
 640:Src/mc_interface.c **** #endif
 641:Src/mc_interface.c ****   return (reVal);
 642:Src/mc_interface.c **** }
 643:Src/mc_interface.c **** 
 644:Src/mc_interface.c **** /**
 645:Src/mc_interface.c ****  * @brief It clocks both HW and SW faults processing and update the state
 646:Src/mc_interface.c ****  *        machine accordingly with hSetErrors, hResetErrors and present state.
 647:Src/mc_interface.c ****  *        Refer to State_t description for more information about fault states.
 648:Src/mc_interface.c ****  * @param pHandle pointer of type  STM_Handle_t
 649:Src/mc_interface.c ****  * @param hSetErrors Bit field reporting faults currently present
 650:Src/mc_interface.c ****  * @param hResetErrors Bit field reporting faults to be cleared
 651:Src/mc_interface.c ****  */
 652:Src/mc_interface.c **** __weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
 653:Src/mc_interface.c **** {
 376              		.loc 1 653 1 is_stmt 1 view -0
 377              		.cfi_startproc
 378              		@ args = 0, pretend = 0, frame = 0
 379              		@ frame_needed = 0, uses_anonymous_args = 0
 380              		@ link register save eliminated.
 654:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 655:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 656:Src/mc_interface.c ****   {
 657:Src/mc_interface.c ****     /* Nothing to do */
 658:Src/mc_interface.c ****   }
 659:Src/mc_interface.c ****   else
 660:Src/mc_interface.c ****   {
 661:Src/mc_interface.c **** #endif
 662:Src/mc_interface.c ****     /* Set current errors */
 663:Src/mc_interface.c ****     pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 381              		.loc 1 663 5 view .LVU97
 382              		.loc 1 663 69 is_stmt 0 view .LVU98
 383 0000 038C     		ldrh	r3, [r0, #32]
 664:Src/mc_interface.c ****     pHandle->PastFaults |= hSetErrors;
 384              		.loc 1 664 25 view .LVU99
 385 0002 B0F822C0 		ldrh	ip, [r0, #34]
 663:Src/mc_interface.c ****     pHandle->PastFaults |= hSetErrors;
 386              		.loc 1 663 69 view .LVU100
 387 0006 0B43     		orrs	r3, r3, r1
 388 0008 23EA0203 		bic	r3, r3, r2
 389              		.loc 1 664 25 view .LVU101
 390 000c 41EA0C01 		orr	r1, r1, ip
 391              	.LVL24:
 663:Src/mc_interface.c ****     pHandle->PastFaults |= hSetErrors;
 392              		.loc 1 663 28 view .LVU102
 393 0010 0384     		strh	r3, [r0, #32]	@ movhi
 394              		.loc 1 664 5 is_stmt 1 view .LVU103
 395              		.loc 1 664 25 is_stmt 0 view .LVU104
ARM GAS  /tmp/ccPF8NO0.s 			page 20


 396 0012 4184     		strh	r1, [r0, #34]	@ movhi
 665:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 666:Src/mc_interface.c ****   }
 667:Src/mc_interface.c **** #endif
 668:Src/mc_interface.c **** }
 397              		.loc 1 668 1 view .LVU105
 398 0014 7047     		bx	lr
 399              		.cfi_endproc
 400              	.LFE1726:
 402 0016 00BF     		.section	.text.MCI_ExecBufferedCommands,"ax",%progbits
 403              		.align	1
 404              		.p2align 2,,3
 405              		.weak	MCI_ExecBufferedCommands
 406              		.syntax unified
 407              		.thumb
 408              		.thumb_func
 409              		.fpu fpv4-sp-d16
 411              	MCI_ExecBufferedCommands:
 412              	.LVL25:
 413              	.LFB1727:
 669:Src/mc_interface.c **** 
 670:Src/mc_interface.c **** /**
 671:Src/mc_interface.c ****   * @brief  This is usually a method managed by task. It must be called
 672:Src/mc_interface.c ****   *         periodically in order to check the status of the related pSTM object
 673:Src/mc_interface.c ****   *         and eventually to execute the buffered command if the condition
 674:Src/mc_interface.c ****   *         occurs.
 675:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 676:Src/mc_interface.c ****   */
 677:Src/mc_interface.c **** __weak void MCI_ExecBufferedCommands(MCI_Handle_t *pHandle)
 678:Src/mc_interface.c **** {
 414              		.loc 1 678 1 is_stmt 1 view -0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 0
 417              		@ frame_needed = 0, uses_anonymous_args = 0
 679:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 680:Src/mc_interface.c ****   if (NULL == pHandle)
 681:Src/mc_interface.c ****   {
 682:Src/mc_interface.c ****     /* Nothing to do */
 683:Src/mc_interface.c ****   }
 684:Src/mc_interface.c ****   else
 685:Src/mc_interface.c ****   {
 686:Src/mc_interface.c **** #endif
 687:Src/mc_interface.c ****     if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 418              		.loc 1 687 5 view .LVU107
 419              		.loc 1 687 8 is_stmt 0 view .LVU108
 420 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 421 0004 012B     		cmp	r3, #1
 422 0006 00D0     		beq	.L40
 423 0008 7047     		bx	lr
 424              	.L40:
 678:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 425              		.loc 1 678 1 view .LVU109
 426 000a 10B5     		push	{r4, lr}
 427              	.LCFI8:
 428              		.cfi_def_cfa_offset 8
 429              		.cfi_offset 4, -8
 430              		.cfi_offset 14, -4
ARM GAS  /tmp/ccPF8NO0.s 			page 21


 431              	.LBB40:
 688:Src/mc_interface.c ****     {
 689:Src/mc_interface.c ****       bool commandHasBeenExecuted = false;
 690:Src/mc_interface.c ****       switch (pHandle->lastCommand)
 432              		.loc 1 690 22 view .LVU110
 433 000c 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 434              		.loc 1 690 7 view .LVU111
 435 000e 022A     		cmp	r2, #2
 436 0010 0446     		mov	r4, r0
 689:Src/mc_interface.c ****       switch (pHandle->lastCommand)
 437              		.loc 1 689 7 is_stmt 1 view .LVU112
 438              	.LVL26:
 439              		.loc 1 690 7 view .LVU113
 440 0012 07D0     		beq	.L28
 441              		.loc 1 690 7 is_stmt 0 view .LVU114
 442 0014 032A     		cmp	r2, #3
 443 0016 28D0     		beq	.L29
 444 0018 012A     		cmp	r2, #1
 445 001a 17D0     		beq	.L41
 446              	.LVL27:
 447              	.L30:
 691:Src/mc_interface.c ****       {
 692:Src/mc_interface.c ****         case MCI_CMD_EXECSPEEDRAMP:
 693:Src/mc_interface.c ****         {
 694:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = INTERNAL;
 695:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 696:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDura
 697:Src/mc_interface.c ****           break;
 698:Src/mc_interface.c ****         }
 699:Src/mc_interface.c **** 
 700:Src/mc_interface.c ****         case MCI_CMD_EXECTORQUERAMP:
 701:Src/mc_interface.c ****         {
 702:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = INTERNAL;
 703:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 704:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDur
 705:Src/mc_interface.c ****           break;
 706:Src/mc_interface.c ****         }
 707:Src/mc_interface.c **** 
 708:Src/mc_interface.c ****         case MCI_CMD_SETCURRENTREFERENCES:
 709:Src/mc_interface.c ****         {
 710:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = EXTERNAL;
 711:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 712:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 713:Src/mc_interface.c ****           break;
 714:Src/mc_interface.c ****         }
 715:Src/mc_interface.c **** 
 716:Src/mc_interface.c ****         default:
 717:Src/mc_interface.c ****           break;
 718:Src/mc_interface.c ****       }
 719:Src/mc_interface.c **** 
 720:Src/mc_interface.c ****       if (commandHasBeenExecuted)
 721:Src/mc_interface.c ****       {
 722:Src/mc_interface.c ****         pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 723:Src/mc_interface.c ****       }
 724:Src/mc_interface.c ****       else
 725:Src/mc_interface.c ****       {
 726:Src/mc_interface.c ****         pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
ARM GAS  /tmp/ccPF8NO0.s 			page 22


 448              		.loc 1 726 9 is_stmt 1 view .LVU115
 449              		.loc 1 726 31 is_stmt 0 view .LVU116
 450 001c 0323     		movs	r3, #3
 451 001e 84F82430 		strb	r3, [r4, #36]
 452              	.LBE40:
 727:Src/mc_interface.c ****       }
 728:Src/mc_interface.c ****     }
 729:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 730:Src/mc_interface.c ****   }
 731:Src/mc_interface.c **** #endif
 732:Src/mc_interface.c **** }
 453              		.loc 1 732 1 view .LVU117
 454 0022 10BD     		pop	{r4, pc}
 455              	.LVL28:
 456              	.L28:
 457              	.LBB41:
 702:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 458              		.loc 1 702 11 is_stmt 1 view .LVU118
 702:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 459              		.loc 1 702 42 is_stmt 0 view .LVU119
 460 0024 4368     		ldr	r3, [r0, #4]
 461 0026 0022     		movs	r2, #0
 462 0028 83F82420 		strb	r2, [r3, #36]
 703:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDur
 463              		.loc 1 703 11 is_stmt 1 view .LVU120
 464 002c 0068     		ldr	r0, [r0]
 465              	.LVL29:
 703:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDur
 466              		.loc 1 703 11 is_stmt 0 view .LVU121
 467 002e 0421     		movs	r1, #4
 468 0030 FFF7FEFF 		bl	STC_SetControlMode
 469              	.LVL30:
 704:Src/mc_interface.c ****           break;
 470              		.loc 1 704 11 is_stmt 1 view .LVU122
 704:Src/mc_interface.c ****           break;
 471              		.loc 1 704 36 is_stmt 0 view .LVU123
 472 0034 A28B     		ldrh	r2, [r4, #28]
 473 0036 B4F91010 		ldrsh	r1, [r4, #16]
 474 003a 2068     		ldr	r0, [r4]
 475 003c FFF7FEFF 		bl	STC_ExecRamp
 476              	.LVL31:
 705:Src/mc_interface.c ****         }
 477              		.loc 1 705 11 is_stmt 1 view .LVU124
 478              	.L31:
 720:Src/mc_interface.c ****       {
 479              		.loc 1 720 7 view .LVU125
 720:Src/mc_interface.c ****       {
 480              		.loc 1 720 10 is_stmt 0 view .LVU126
 481 0040 0028     		cmp	r0, #0
 482 0042 EBD0     		beq	.L30
 483              	.LVL32:
 484              	.L32:
 722:Src/mc_interface.c ****       }
 485              		.loc 1 722 9 is_stmt 1 view .LVU127
 722:Src/mc_interface.c ****       }
 486              		.loc 1 722 31 is_stmt 0 view .LVU128
 487 0044 0223     		movs	r3, #2
ARM GAS  /tmp/ccPF8NO0.s 			page 23


 488 0046 84F82430 		strb	r3, [r4, #36]
 489              	.LBE41:
 490              		.loc 1 732 1 view .LVU129
 491 004a 10BD     		pop	{r4, pc}
 492              	.LVL33:
 493              	.L41:
 494              	.LBB42:
 694:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 495              		.loc 1 694 11 is_stmt 1 view .LVU130
 694:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 496              		.loc 1 694 42 is_stmt 0 view .LVU131
 497 004c 4368     		ldr	r3, [r0, #4]
 498 004e 0022     		movs	r2, #0
 499 0050 83F82420 		strb	r2, [r3, #36]
 695:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDura
 500              		.loc 1 695 11 is_stmt 1 view .LVU132
 501 0054 0068     		ldr	r0, [r0]
 502              	.LVL34:
 695:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDura
 503              		.loc 1 695 11 is_stmt 0 view .LVU133
 504 0056 0321     		movs	r1, #3
 505 0058 FFF7FEFF 		bl	STC_SetControlMode
 506              	.LVL35:
 696:Src/mc_interface.c ****           break;
 507              		.loc 1 696 11 is_stmt 1 view .LVU134
 696:Src/mc_interface.c ****           break;
 508              		.loc 1 696 36 is_stmt 0 view .LVU135
 509 005c A28B     		ldrh	r2, [r4, #28]
 510 005e B4F90E10 		ldrsh	r1, [r4, #14]
 511 0062 2068     		ldr	r0, [r4]
 512 0064 FFF7FEFF 		bl	STC_ExecRamp
 513              	.LVL36:
 697:Src/mc_interface.c ****         }
 514              		.loc 1 697 11 is_stmt 1 view .LVU136
 515 0068 EAE7     		b	.L31
 516              	.LVL37:
 517              	.L29:
 710:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 518              		.loc 1 710 11 view .LVU137
 710:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 519              		.loc 1 710 18 is_stmt 0 view .LVU138
 520 006a 4268     		ldr	r2, [r0, #4]
 710:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 521              		.loc 1 710 42 view .LVU139
 522 006c 82F82430 		strb	r3, [r2, #36]
 711:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 523              		.loc 1 711 11 is_stmt 1 view .LVU140
 711:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 524              		.loc 1 711 37 is_stmt 0 view .LVU141
 525 0070 D0F81230 		ldr	r3, [r0, #18]	@ unaligned
 526 0074 1361     		str	r3, [r2, #16]	@ unaligned
 712:Src/mc_interface.c ****           break;
 527              		.loc 1 712 11 is_stmt 1 view .LVU142
 528              	.LVL38:
 713:Src/mc_interface.c ****         }
 529              		.loc 1 713 11 view .LVU143
 720:Src/mc_interface.c ****       {
ARM GAS  /tmp/ccPF8NO0.s 			page 24


 530              		.loc 1 720 7 view .LVU144
 531 0076 E5E7     		b	.L32
 532              	.LBE42:
 533              		.cfi_endproc
 534              	.LFE1727:
 536              		.section	.text.MCI_IsCommandAcknowledged,"ax",%progbits
 537              		.align	1
 538              		.p2align 2,,3
 539              		.weak	MCI_IsCommandAcknowledged
 540              		.syntax unified
 541              		.thumb
 542              		.thumb_func
 543              		.fpu fpv4-sp-d16
 545              	MCI_IsCommandAcknowledged:
 546              	.LVL39:
 547              	.LFB1728:
 733:Src/mc_interface.c **** 
 734:Src/mc_interface.c **** /**
 735:Src/mc_interface.c ****   * @brief  Returns information about the state of the last buffered command.
 736:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 737:Src/mc_interface.c ****   * @retval The state of the last buffered command
 738:Src/mc_interface.c ****   *
 739:Src/mc_interface.c ****   * The state returned by this function can be one of the following codes:
 740:Src/mc_interface.c ****   * - #MCI_BUFFER_EMPTY if no buffered command has been called.
 741:Src/mc_interface.c ****   * - #MCI_COMMAND_NOT_ALREADY_EXECUTED if the buffered command
 742:Src/mc_interface.c ****   * condition has not already occurred.
 743:Src/mc_interface.c ****   * - #MCI_COMMAND_EXECUTED_SUCCESSFULLY if the buffered command has
 744:Src/mc_interface.c ****   * been executed successfully. In this case calling this function resets
 745:Src/mc_interface.c ****   * the command state to #MCI_BUFFER_EMPTY.
 746:Src/mc_interface.c ****   * - #MCI_COMMAND_EXECUTED_UNSUCCESSFULLY if the buffered command has
 747:Src/mc_interface.c ****   * been executed unsuccessfully. In this case calling this function
 748:Src/mc_interface.c ****   * resets the command state to #MCI_BUFFER_EMPTY.
 749:Src/mc_interface.c ****   */
 750:Src/mc_interface.c **** __weak MCI_CommandState_t MCI_IsCommandAcknowledged(MCI_Handle_t *pHandle)
 751:Src/mc_interface.c **** {
 548              		.loc 1 751 1 view -0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 552              		@ link register save eliminated.
 752:Src/mc_interface.c ****   MCI_CommandState_t retVal;
 553              		.loc 1 752 3 view .LVU146
 753:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 754:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 755:Src/mc_interface.c ****   {
 756:Src/mc_interface.c ****     retVal = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 757:Src/mc_interface.c ****   }
 758:Src/mc_interface.c ****   else
 759:Src/mc_interface.c ****   {
 760:Src/mc_interface.c **** #endif
 761:Src/mc_interface.c ****     retVal = pHandle->CommandState;
 554              		.loc 1 761 5 view .LVU147
 555              		.loc 1 761 12 is_stmt 0 view .LVU148
 556 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 557              	.LVL40:
 762:Src/mc_interface.c **** 
 763:Src/mc_interface.c ****     if ((MCI_COMMAND_EXECUTED_SUCCESSFULLY == retVal) || (MCI_COMMAND_EXECUTED_UNSUCCESSFULLY == re
ARM GAS  /tmp/ccPF8NO0.s 			page 25


 558              		.loc 1 763 5 is_stmt 1 view .LVU149
 559              		.loc 1 763 8 is_stmt 0 view .LVU150
 560 0004 9A1E     		subs	r2, r3, #2
 561 0006 012A     		cmp	r2, #1
 764:Src/mc_interface.c ****     {
 765:Src/mc_interface.c ****       pHandle->CommandState = MCI_BUFFER_EMPTY;
 562              		.loc 1 765 7 is_stmt 1 view .LVU151
 563              		.loc 1 765 29 is_stmt 0 view .LVU152
 564 0008 9CBF     		itt	ls
 565 000a 0022     		movls	r2, #0
 566 000c 80F82420 		strbls	r2, [r0, #36]
 766:Src/mc_interface.c ****     }
 767:Src/mc_interface.c ****     else
 768:Src/mc_interface.c ****     {
 769:Src/mc_interface.c ****       /* Nothing to do */
 770:Src/mc_interface.c ****     }
 567              		.loc 1 770 5 is_stmt 1 view .LVU153
 771:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 772:Src/mc_interface.c ****   }
 773:Src/mc_interface.c **** #endif
 774:Src/mc_interface.c ****   return (retVal);
 568              		.loc 1 774 3 view .LVU154
 775:Src/mc_interface.c **** }
 569              		.loc 1 775 1 is_stmt 0 view .LVU155
 570 0010 1846     		mov	r0, r3
 571              	.LVL41:
 572              		.loc 1 775 1 view .LVU156
 573 0012 7047     		bx	lr
 574              		.cfi_endproc
 575              	.LFE1728:
 577              		.section	.text.MCI_GetSTMState,"ax",%progbits
 578              		.align	1
 579              		.p2align 2,,3
 580              		.weak	MCI_GetSTMState
 581              		.syntax unified
 582              		.thumb
 583              		.thumb_func
 584              		.fpu fpv4-sp-d16
 586              	MCI_GetSTMState:
 587              	.LVL42:
 588              	.LFB1729:
 776:Src/mc_interface.c **** 
 777:Src/mc_interface.c **** /**
 778:Src/mc_interface.c ****   * @brief  It returns information about the state of the related pSTM object.
 779:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 780:Src/mc_interface.c ****   * @retval State_t It returns the current state of the related pSTM object.
 781:Src/mc_interface.c ****   */
 782:Src/mc_interface.c **** __weak MCI_State_t MCI_GetSTMState(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 783:Src/mc_interface.c **** {
 589              		.loc 1 783 1 is_stmt 1 view -0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 0
 592              		@ frame_needed = 0, uses_anonymous_args = 0
 593              		@ link register save eliminated.
 784:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 785:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
 786:Src/mc_interface.c **** #else
ARM GAS  /tmp/ccPF8NO0.s 			page 26


 787:Src/mc_interface.c ****   return (pHandle->State);
 594              		.loc 1 787 3 view .LVU158
 788:Src/mc_interface.c **** #endif
 789:Src/mc_interface.c **** }
 595              		.loc 1 789 1 is_stmt 0 view .LVU159
 596 0000 C07F     		ldrb	r0, [r0, #31]	@ zero_extendqisi2
 597              	.LVL43:
 598              		.loc 1 789 1 view .LVU160
 599 0002 7047     		bx	lr
 600              		.cfi_endproc
 601              	.LFE1729:
 603              		.section	.text.MCI_GetOccurredFaults,"ax",%progbits
 604              		.align	1
 605              		.p2align 2,,3
 606              		.weak	MCI_GetOccurredFaults
 607              		.syntax unified
 608              		.thumb
 609              		.thumb_func
 610              		.fpu fpv4-sp-d16
 612              	MCI_GetOccurredFaults:
 613              	.LVL44:
 614              	.LFB1730:
 790:Src/mc_interface.c **** 
 791:Src/mc_interface.c **** /**
 792:Src/mc_interface.c ****   * @brief Returns the list of non-acknowledged faults that occured on the target motor
 793:Src/mc_interface.c ****   *
 794:Src/mc_interface.c ****   * This function returns a bitfield indicating the faults that occured since the state machine
 795:Src/mc_interface.c ****   * of the target motor has been moved into the #FAULT_NOW state.
 796:Src/mc_interface.c ****   *
 797:Src/mc_interface.c ****   * Possible error codes are listed in the @ref fault_codes "Fault codes" section.
 798:Src/mc_interface.c ****   *
 799:Src/mc_interface.c ****   * @param  pHandle Pointer on the target motor drive structure.
 800:Src/mc_interface.c ****   * @retval uint16_t  16 bit fields with information about the faults
 801:Src/mc_interface.c ****   *         historically occurred since the state machine has been moved into
 802:Src/mc_interface.c ****   */
 803:Src/mc_interface.c **** __weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 804:Src/mc_interface.c **** {
 615              		.loc 1 804 1 is_stmt 1 view -0
 616              		.cfi_startproc
 617              		@ args = 0, pretend = 0, frame = 0
 618              		@ frame_needed = 0, uses_anonymous_args = 0
 619              		@ link register save eliminated.
 805:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 806:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
 807:Src/mc_interface.c **** #else
 808:Src/mc_interface.c ****   return ((uint16_t)pHandle->PastFaults);
 620              		.loc 1 808 3 view .LVU162
 809:Src/mc_interface.c **** #endif
 810:Src/mc_interface.c **** }
 621              		.loc 1 810 1 is_stmt 0 view .LVU163
 622 0000 408C     		ldrh	r0, [r0, #34]
 623              	.LVL45:
 624              		.loc 1 810 1 view .LVU164
 625 0002 7047     		bx	lr
 626              		.cfi_endproc
 627              	.LFE1730:
 629              		.section	.text.MCI_GetCurrentFaults,"ax",%progbits
ARM GAS  /tmp/ccPF8NO0.s 			page 27


 630              		.align	1
 631              		.p2align 2,,3
 632              		.weak	MCI_GetCurrentFaults
 633              		.syntax unified
 634              		.thumb
 635              		.thumb_func
 636              		.fpu fpv4-sp-d16
 638              	MCI_GetCurrentFaults:
 639              	.LVL46:
 640              	.LFB1731:
 811:Src/mc_interface.c **** 
 812:Src/mc_interface.c **** /**
 813:Src/mc_interface.c ****   * @brief Returns the list of faults that are currently active on the target motor
 814:Src/mc_interface.c ****   *
 815:Src/mc_interface.c ****   * This function returns a bitfield that indicates faults that occured on the Motor
 816:Src/mc_interface.c ****   * Control subsystem for the target motor and that are still active (the conditions
 817:Src/mc_interface.c ****   * that triggered the faults returned are still true).
 818:Src/mc_interface.c ****   *
 819:Src/mc_interface.c ****   * Possible error codes are listed in the @ref fault_codes "Fault codes" section.
 820:Src/mc_interface.c ****   *
 821:Src/mc_interface.c ****   * @param  pHandle Pointer on the target motor drive structure.
 822:Src/mc_interface.c ****   */
 823:Src/mc_interface.c **** __weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 824:Src/mc_interface.c **** {
 641              		.loc 1 824 1 is_stmt 1 view -0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645              		@ link register save eliminated.
 825:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 826:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
 827:Src/mc_interface.c **** #else
 828:Src/mc_interface.c ****   return ((uint16_t)pHandle->CurrentFaults);
 646              		.loc 1 828 3 view .LVU166
 829:Src/mc_interface.c **** #endif
 830:Src/mc_interface.c **** }
 647              		.loc 1 830 1 is_stmt 0 view .LVU167
 648 0000 008C     		ldrh	r0, [r0, #32]
 649              	.LVL47:
 650              		.loc 1 830 1 view .LVU168
 651 0002 7047     		bx	lr
 652              		.cfi_endproc
 653              	.LFE1731:
 655              		.section	.text.MCI_StartMotor,"ax",%progbits
 656              		.align	1
 657              		.p2align 2,,3
 658              		.weak	MCI_StartMotor
 659              		.syntax unified
 660              		.thumb
 661              		.thumb_func
 662              		.fpu fpv4-sp-d16
 664              	MCI_StartMotor:
 665              	.LVL48:
 666              	.LFB1719:
 322:Src/mc_interface.c ****   bool retVal = false;
 667              		.loc 1 322 1 is_stmt 1 view -0
 668              		.cfi_startproc
ARM GAS  /tmp/ccPF8NO0.s 			page 28


 669              		@ args = 0, pretend = 0, frame = 0
 670              		@ frame_needed = 0, uses_anonymous_args = 0
 323:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 671              		.loc 1 323 3 view .LVU170
 332:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 672              		.loc 1 332 5 view .LVU171
 322:Src/mc_interface.c ****   bool retVal = false;
 673              		.loc 1 322 1 is_stmt 0 view .LVU172
 674 0000 10B5     		push	{r4, lr}
 675              	.LCFI9:
 676              		.cfi_def_cfa_offset 8
 677              		.cfi_offset 4, -8
 678              		.cfi_offset 14, -4
 322:Src/mc_interface.c ****   bool retVal = false;
 679              		.loc 1 322 1 view .LVU173
 680 0002 0446     		mov	r4, r0
 332:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 681              		.loc 1 332 18 view .LVU174
 682 0004 FFF7FEFF 		bl	MCI_GetSTMState
 683              	.LVL49:
 332:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 684              		.loc 1 332 8 view .LVU175
 685 0008 08B1     		cbz	r0, .L48
 686              	.L50:
 323:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 687              		.loc 1 323 8 view .LVU176
 688 000a 0020     		movs	r0, #0
 689              	.LVL50:
 343:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 690              		.loc 1 343 5 is_stmt 1 view .LVU177
 347:Src/mc_interface.c **** }
 691              		.loc 1 347 3 view .LVU178
 348:Src/mc_interface.c **** 
 692              		.loc 1 348 1 is_stmt 0 view .LVU179
 693 000c 10BD     		pop	{r4, pc}
 694              	.LVL51:
 695              	.L48:
 333:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 696              		.loc 1 333 26 discriminator 1 view .LVU180
 697 000e 2046     		mov	r0, r4
 698 0010 FFF7FEFF 		bl	MCI_GetOccurredFaults
 699              	.LVL52:
 332:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 700              		.loc 1 332 44 discriminator 1 view .LVU181
 701 0014 0028     		cmp	r0, #0
 702 0016 F8D1     		bne	.L50
 334:Src/mc_interface.c ****     {
 703              		.loc 1 334 26 view .LVU182
 704 0018 2046     		mov	r0, r4
 705 001a FFF7FEFF 		bl	MCI_GetCurrentFaults
 706              	.LVL53:
 333:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 707              		.loc 1 333 58 view .LVU183
 708 001e 0028     		cmp	r0, #0
 709 0020 F3D1     		bne	.L50
 336:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 710              		.loc 1 336 7 is_stmt 1 view .LVU184
ARM GAS  /tmp/ccPF8NO0.s 			page 29


 336:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 711              		.loc 1 336 30 is_stmt 0 view .LVU185
 712 0022 0120     		movs	r0, #1
 713 0024 A077     		strb	r0, [r4, #30]
 337:Src/mc_interface.c ****       retVal = true;
 714              		.loc 1 337 7 is_stmt 1 view .LVU186
 337:Src/mc_interface.c ****       retVal = true;
 715              		.loc 1 337 29 is_stmt 0 view .LVU187
 716 0026 84F82400 		strb	r0, [r4, #36]
 338:Src/mc_interface.c ****     }
 717              		.loc 1 338 7 is_stmt 1 view .LVU188
 718              	.LVL54:
 343:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 719              		.loc 1 343 5 view .LVU189
 347:Src/mc_interface.c **** }
 720              		.loc 1 347 3 view .LVU190
 348:Src/mc_interface.c **** 
 721              		.loc 1 348 1 is_stmt 0 view .LVU191
 722 002a 10BD     		pop	{r4, pc}
 348:Src/mc_interface.c **** 
 723              		.loc 1 348 1 view .LVU192
 724              		.cfi_endproc
 725              	.LFE1719:
 727              		.section	.text.MCI_StartWithPolarizationMotor,"ax",%progbits
 728              		.align	1
 729              		.p2align 2,,3
 730              		.weak	MCI_StartWithPolarizationMotor
 731              		.syntax unified
 732              		.thumb
 733              		.thumb_func
 734              		.fpu fpv4-sp-d16
 736              	MCI_StartWithPolarizationMotor:
 737              	.LVL55:
 738              	.LFB1720:
 384:Src/mc_interface.c ****   bool retVal = false;
 739              		.loc 1 384 1 is_stmt 1 view -0
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
 385:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 743              		.loc 1 385 3 view .LVU194
 394:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 744              		.loc 1 394 5 view .LVU195
 384:Src/mc_interface.c ****   bool retVal = false;
 745              		.loc 1 384 1 is_stmt 0 view .LVU196
 746 0000 10B5     		push	{r4, lr}
 747              	.LCFI10:
 748              		.cfi_def_cfa_offset 8
 749              		.cfi_offset 4, -8
 750              		.cfi_offset 14, -4
 384:Src/mc_interface.c ****   bool retVal = false;
 751              		.loc 1 384 1 view .LVU197
 752 0002 0446     		mov	r4, r0
 394:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 753              		.loc 1 394 18 view .LVU198
 754 0004 FFF7FEFF 		bl	MCI_GetSTMState
 755              	.LVL56:
ARM GAS  /tmp/ccPF8NO0.s 			page 30


 394:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 756              		.loc 1 394 8 view .LVU199
 757 0008 08B1     		cbz	r0, .L53
 758              	.L55:
 385:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 759              		.loc 1 385 8 view .LVU200
 760 000a 0020     		movs	r0, #0
 761              	.LVL57:
 406:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 762              		.loc 1 406 3 is_stmt 1 view .LVU201
 410:Src/mc_interface.c **** }
 763              		.loc 1 410 3 view .LVU202
 411:Src/mc_interface.c **** 
 764              		.loc 1 411 1 is_stmt 0 view .LVU203
 765 000c 10BD     		pop	{r4, pc}
 766              	.LVL58:
 767              	.L53:
 395:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 768              		.loc 1 395 26 discriminator 1 view .LVU204
 769 000e 2046     		mov	r0, r4
 770 0010 FFF7FEFF 		bl	MCI_GetOccurredFaults
 771              	.LVL59:
 394:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 772              		.loc 1 394 44 discriminator 1 view .LVU205
 773 0014 0028     		cmp	r0, #0
 774 0016 F8D1     		bne	.L55
 396:Src/mc_interface.c ****     {
 775              		.loc 1 396 26 view .LVU206
 776 0018 2046     		mov	r0, r4
 777 001a FFF7FEFF 		bl	MCI_GetCurrentFaults
 778              	.LVL60:
 395:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 779              		.loc 1 395 58 view .LVU207
 780 001e 0246     		mov	r2, r0
 781 0020 0028     		cmp	r0, #0
 782 0022 F2D1     		bne	.L55
 398:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 783              		.loc 1 398 7 is_stmt 1 view .LVU208
 398:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 784              		.loc 1 398 30 is_stmt 0 view .LVU209
 785 0024 0123     		movs	r3, #1
 400:Src/mc_interface.c ****       retVal = true;
 786              		.loc 1 400 40 view .LVU210
 787 0026 A168     		ldr	r1, [r4, #8]
 398:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 788              		.loc 1 398 30 view .LVU211
 789 0028 A377     		strb	r3, [r4, #30]
 399:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = false;
 790              		.loc 1 399 7 is_stmt 1 view .LVU212
 399:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = false;
 791              		.loc 1 399 29 is_stmt 0 view .LVU213
 792 002a 84F82430 		strb	r3, [r4, #36]
 400:Src/mc_interface.c ****       retVal = true;
 793              		.loc 1 400 7 is_stmt 1 view .LVU214
 401:Src/mc_interface.c ****   }
 794              		.loc 1 401 14 is_stmt 0 view .LVU215
 795 002e 1846     		mov	r0, r3
ARM GAS  /tmp/ccPF8NO0.s 			page 31


 400:Src/mc_interface.c ****       retVal = true;
 796              		.loc 1 400 40 view .LVU216
 797 0030 81F87F20 		strb	r2, [r1, #127]
 401:Src/mc_interface.c ****   }
 798              		.loc 1 401 7 is_stmt 1 view .LVU217
 799              	.LVL61:
 406:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 800              		.loc 1 406 3 view .LVU218
 410:Src/mc_interface.c **** }
 801              		.loc 1 410 3 view .LVU219
 411:Src/mc_interface.c **** 
 802              		.loc 1 411 1 is_stmt 0 view .LVU220
 803 0034 10BD     		pop	{r4, pc}
 411:Src/mc_interface.c **** 
 804              		.loc 1 411 1 view .LVU221
 805              		.cfi_endproc
 806              	.LFE1720:
 808 0036 00BF     		.section	.text.MCI_StartOffsetMeasurments,"ax",%progbits
 809              		.align	1
 810              		.p2align 2,,3
 811              		.weak	MCI_StartOffsetMeasurments
 812              		.syntax unified
 813              		.thumb
 814              		.thumb_func
 815              		.fpu fpv4-sp-d16
 817              	MCI_StartOffsetMeasurments:
 818              	.LVL62:
 819              	.LFB1721:
 429:Src/mc_interface.c ****   bool retVal = false;
 820              		.loc 1 429 1 is_stmt 1 view -0
 821              		.cfi_startproc
 822              		@ args = 0, pretend = 0, frame = 0
 823              		@ frame_needed = 0, uses_anonymous_args = 0
 430:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 824              		.loc 1 430 3 view .LVU223
 439:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 825              		.loc 1 439 5 view .LVU224
 429:Src/mc_interface.c ****   bool retVal = false;
 826              		.loc 1 429 1 is_stmt 0 view .LVU225
 827 0000 10B5     		push	{r4, lr}
 828              	.LCFI11:
 829              		.cfi_def_cfa_offset 8
 830              		.cfi_offset 4, -8
 831              		.cfi_offset 14, -4
 429:Src/mc_interface.c ****   bool retVal = false;
 832              		.loc 1 429 1 view .LVU226
 833 0002 0446     		mov	r4, r0
 439:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 834              		.loc 1 439 18 view .LVU227
 835 0004 FFF7FEFF 		bl	MCI_GetSTMState
 836              	.LVL63:
 439:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 837              		.loc 1 439 8 view .LVU228
 838 0008 08B1     		cbz	r0, .L58
 839              	.L60:
 430:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 840              		.loc 1 430 8 view .LVU229
ARM GAS  /tmp/ccPF8NO0.s 			page 32


 841 000a 0020     		movs	r0, #0
 842              	.LVL64:
 450:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 843              		.loc 1 450 5 is_stmt 1 view .LVU230
 454:Src/mc_interface.c **** }
 844              		.loc 1 454 3 view .LVU231
 455:Src/mc_interface.c **** 
 845              		.loc 1 455 1 is_stmt 0 view .LVU232
 846 000c 10BD     		pop	{r4, pc}
 847              	.LVL65:
 848              	.L58:
 440:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 849              		.loc 1 440 26 discriminator 1 view .LVU233
 850 000e 2046     		mov	r0, r4
 851 0010 FFF7FEFF 		bl	MCI_GetOccurredFaults
 852              	.LVL66:
 439:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 853              		.loc 1 439 44 discriminator 1 view .LVU234
 854 0014 0028     		cmp	r0, #0
 855 0016 F8D1     		bne	.L60
 441:Src/mc_interface.c ****     {
 856              		.loc 1 441 26 view .LVU235
 857 0018 2046     		mov	r0, r4
 858 001a FFF7FEFF 		bl	MCI_GetCurrentFaults
 859              	.LVL67:
 440:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 860              		.loc 1 440 58 view .LVU236
 861 001e 0346     		mov	r3, r0
 862 0020 0028     		cmp	r0, #0
 863 0022 F2D1     		bne	.L60
 443:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = false;
 864              		.loc 1 443 7 is_stmt 1 view .LVU237
 444:Src/mc_interface.c ****       retVal = true;
 865              		.loc 1 444 40 is_stmt 0 view .LVU238
 866 0024 A268     		ldr	r2, [r4, #8]
 443:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = false;
 867              		.loc 1 443 30 view .LVU239
 868 0026 0321     		movs	r1, #3
 869 0028 A177     		strb	r1, [r4, #30]
 444:Src/mc_interface.c ****       retVal = true;
 870              		.loc 1 444 7 is_stmt 1 view .LVU240
 445:Src/mc_interface.c ****     }
 871              		.loc 1 445 14 is_stmt 0 view .LVU241
 872 002a 0120     		movs	r0, #1
 444:Src/mc_interface.c ****       retVal = true;
 873              		.loc 1 444 40 view .LVU242
 874 002c 82F87F30 		strb	r3, [r2, #127]
 445:Src/mc_interface.c ****     }
 875              		.loc 1 445 7 is_stmt 1 view .LVU243
 876              	.LVL68:
 450:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 877              		.loc 1 450 5 view .LVU244
 454:Src/mc_interface.c **** }
 878              		.loc 1 454 3 view .LVU245
 455:Src/mc_interface.c **** 
 879              		.loc 1 455 1 is_stmt 0 view .LVU246
 880 0030 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccPF8NO0.s 			page 33


 455:Src/mc_interface.c **** 
 881              		.loc 1 455 1 view .LVU247
 882              		.cfi_endproc
 883              	.LFE1721:
 885 0032 00BF     		.section	.text.MCI_SetCalibratedOffsetsMotor,"ax",%progbits
 886              		.align	1
 887              		.p2align 2,,3
 888              		.weak	MCI_SetCalibratedOffsetsMotor
 889              		.syntax unified
 890              		.thumb
 891              		.thumb_func
 892              		.fpu fpv4-sp-d16
 894              	MCI_SetCalibratedOffsetsMotor:
 895              	.LVL69:
 896              	.LFB1723:
 518:Src/mc_interface.c ****   bool retVal = false;
 897              		.loc 1 518 1 is_stmt 1 view -0
 898              		.cfi_startproc
 899              		@ args = 0, pretend = 0, frame = 0
 900              		@ frame_needed = 0, uses_anonymous_args = 0
 519:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 901              		.loc 1 519 3 view .LVU249
 528:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 902              		.loc 1 528 5 view .LVU250
 518:Src/mc_interface.c ****   bool retVal = false;
 903              		.loc 1 518 1 is_stmt 0 view .LVU251
 904 0000 38B5     		push	{r3, r4, r5, lr}
 905              	.LCFI12:
 906              		.cfi_def_cfa_offset 16
 907              		.cfi_offset 3, -16
 908              		.cfi_offset 4, -12
 909              		.cfi_offset 5, -8
 910              		.cfi_offset 14, -4
 518:Src/mc_interface.c ****   bool retVal = false;
 911              		.loc 1 518 1 view .LVU252
 912 0002 0446     		mov	r4, r0
 913 0004 0D46     		mov	r5, r1
 528:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 914              		.loc 1 528 18 view .LVU253
 915 0006 FFF7FEFF 		bl	MCI_GetSTMState
 916              	.LVL70:
 528:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 917              		.loc 1 528 8 view .LVU254
 918 000a 08B1     		cbz	r0, .L63
 919              	.L65:
 519:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 920              		.loc 1 519 8 view .LVU255
 921 000c 0020     		movs	r0, #0
 922              	.LVL71:
 539:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 923              		.loc 1 539 5 is_stmt 1 view .LVU256
 543:Src/mc_interface.c **** }
 924              		.loc 1 543 5 view .LVU257
 544:Src/mc_interface.c **** 
 925              		.loc 1 544 1 is_stmt 0 view .LVU258
 926 000e 38BD     		pop	{r3, r4, r5, pc}
 927              	.LVL72:
ARM GAS  /tmp/ccPF8NO0.s 			page 34


 928              	.L63:
 529:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 929              		.loc 1 529 26 discriminator 1 view .LVU259
 930 0010 2046     		mov	r0, r4
 931 0012 FFF7FEFF 		bl	MCI_GetOccurredFaults
 932              	.LVL73:
 528:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 933              		.loc 1 528 44 discriminator 1 view .LVU260
 934 0016 0028     		cmp	r0, #0
 935 0018 F8D1     		bne	.L65
 530:Src/mc_interface.c ****     {
 936              		.loc 1 530 26 view .LVU261
 937 001a 2046     		mov	r0, r4
 938 001c FFF7FEFF 		bl	MCI_GetCurrentFaults
 939              	.LVL74:
 529:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 940              		.loc 1 529 58 view .LVU262
 941 0020 0028     		cmp	r0, #0
 942 0022 F3D1     		bne	.L65
 532:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = true;
 943              		.loc 1 532 7 is_stmt 1 view .LVU263
 944 0024 A068     		ldr	r0, [r4, #8]
 945 0026 2946     		mov	r1, r5
 946 0028 FFF7FEFF 		bl	PWMC_SetOffsetCalib
 947              	.LVL75:
 533:Src/mc_interface.c ****       retVal = true;
 948              		.loc 1 533 7 view .LVU264
 533:Src/mc_interface.c ****       retVal = true;
 949              		.loc 1 533 40 is_stmt 0 view .LVU265
 950 002c A368     		ldr	r3, [r4, #8]
 951 002e 0120     		movs	r0, #1
 952 0030 83F87F00 		strb	r0, [r3, #127]
 534:Src/mc_interface.c ****     }
 953              		.loc 1 534 7 is_stmt 1 view .LVU266
 954              	.LVL76:
 539:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 955              		.loc 1 539 5 view .LVU267
 543:Src/mc_interface.c **** }
 956              		.loc 1 543 5 view .LVU268
 544:Src/mc_interface.c **** 
 957              		.loc 1 544 1 is_stmt 0 view .LVU269
 958 0034 38BD     		pop	{r3, r4, r5, pc}
 544:Src/mc_interface.c **** 
 959              		.loc 1 544 1 view .LVU270
 960              		.cfi_endproc
 961              	.LFE1723:
 963 0036 00BF     		.section	.text.MCI_StopMotor,"ax",%progbits
 964              		.align	1
 965              		.p2align 2,,3
 966              		.weak	MCI_StopMotor
 967              		.syntax unified
 968              		.thumb
 969              		.thumb_func
 970              		.fpu fpv4-sp-d16
 972              	MCI_StopMotor:
 973              	.LVL77:
 974              	.LFB1724:
ARM GAS  /tmp/ccPF8NO0.s 			page 35


 563:Src/mc_interface.c ****   bool retVal = false;
 975              		.loc 1 563 1 is_stmt 1 view -0
 976              		.cfi_startproc
 977              		@ args = 0, pretend = 0, frame = 0
 978              		@ frame_needed = 0, uses_anonymous_args = 0
 564:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 979              		.loc 1 564 3 view .LVU272
 573:Src/mc_interface.c ****     MCI_State_t State;
 980              		.loc 1 573 5 view .LVU273
 574:Src/mc_interface.c **** 
 981              		.loc 1 574 5 view .LVU274
 576:Src/mc_interface.c ****     if ((IDLE == State) || (ICLWAIT == State))
 982              		.loc 1 576 5 view .LVU275
 563:Src/mc_interface.c ****   bool retVal = false;
 983              		.loc 1 563 1 is_stmt 0 view .LVU276
 984 0000 38B5     		push	{r3, r4, r5, lr}
 985              	.LCFI13:
 986              		.cfi_def_cfa_offset 16
 987              		.cfi_offset 3, -16
 988              		.cfi_offset 4, -12
 989              		.cfi_offset 5, -8
 990              		.cfi_offset 14, -4
 563:Src/mc_interface.c ****   bool retVal = false;
 991              		.loc 1 563 1 view .LVU277
 992 0002 0546     		mov	r5, r0
 576:Src/mc_interface.c ****     if ((IDLE == State) || (ICLWAIT == State))
 993              		.loc 1 576 13 view .LVU278
 994 0004 FFF7FEFF 		bl	MCI_GetSTMState
 995              	.LVL78:
 577:Src/mc_interface.c ****     {
 996              		.loc 1 577 5 is_stmt 1 view .LVU279
 577:Src/mc_interface.c ****     {
 997              		.loc 1 577 8 is_stmt 0 view .LVU280
 998 0008 50B1     		cbz	r0, .L72
 577:Src/mc_interface.c ****     {
 999              		.loc 1 577 25 discriminator 1 view .LVU281
 1000 000a B0F10C04 		subs	r4, r0, #12
 586:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1001              		.loc 1 586 26 discriminator 1 view .LVU282
 1002 000e 2846     		mov	r0, r5
 1003              	.LVL79:
 577:Src/mc_interface.c ****     {
 1004              		.loc 1 577 25 discriminator 1 view .LVU283
 1005 0010 18BF     		it	ne
 1006 0012 0124     		movne	r4, #1
 1007              	.LVL80:
 586:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1008              		.loc 1 586 5 is_stmt 1 discriminator 1 view .LVU284
 586:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1009              		.loc 1 586 26 is_stmt 0 discriminator 1 view .LVU285
 1010 0014 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1011              	.LVL81:
 586:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1012              		.loc 1 586 8 discriminator 1 view .LVU286
 1013 0018 40B1     		cbz	r0, .L69
 1014              	.L71:
 564:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
ARM GAS  /tmp/ccPF8NO0.s 			page 36


 1015              		.loc 1 564 8 view .LVU287
 1016 001a 0024     		movs	r4, #0
 1017              	.LVL82:
 1018              	.L70:
 596:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1019              		.loc 1 596 5 is_stmt 1 view .LVU288
 600:Src/mc_interface.c **** }
 1020              		.loc 1 600 3 view .LVU289
 601:Src/mc_interface.c **** 
 1021              		.loc 1 601 1 is_stmt 0 view .LVU290
 1022 001c 2046     		mov	r0, r4
 1023 001e 38BD     		pop	{r3, r4, r5, pc}
 1024              	.LVL83:
 1025              	.L72:
 579:Src/mc_interface.c ****     }
 1026              		.loc 1 579 14 view .LVU291
 1027 0020 0446     		mov	r4, r0
 1028              	.LVL84:
 586:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1029              		.loc 1 586 5 is_stmt 1 view .LVU292
 586:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1030              		.loc 1 586 26 is_stmt 0 view .LVU293
 1031 0022 2846     		mov	r0, r5
 1032              	.LVL85:
 586:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1033              		.loc 1 586 26 view .LVU294
 1034 0024 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1035              	.LVL86:
 586:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1036              		.loc 1 586 8 view .LVU295
 1037 0028 0028     		cmp	r0, #0
 1038 002a F6D1     		bne	.L71
 1039              	.L69:
 587:Src/mc_interface.c ****         (status == true))
 1040              		.loc 1 587 26 discriminator 1 view .LVU296
 1041 002c 2846     		mov	r0, r5
 1042 002e FFF7FEFF 		bl	MCI_GetCurrentFaults
 1043              	.LVL87:
 586:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1044              		.loc 1 586 58 discriminator 1 view .LVU297
 1045 0032 0028     		cmp	r0, #0
 1046 0034 F1D1     		bne	.L71
 587:Src/mc_interface.c ****         (status == true))
 1047              		.loc 1 587 57 view .LVU298
 1048 0036 002C     		cmp	r4, #0
 1049 0038 EFD0     		beq	.L71
 590:Src/mc_interface.c ****       retVal = true;
 1050              		.loc 1 590 7 is_stmt 1 view .LVU299
 590:Src/mc_interface.c ****       retVal = true;
 1051              		.loc 1 590 30 is_stmt 0 view .LVU300
 1052 003a 0523     		movs	r3, #5
 1053 003c AB77     		strb	r3, [r5, #30]
 591:Src/mc_interface.c ****     }
 1054              		.loc 1 591 7 is_stmt 1 view .LVU301
 1055              	.LVL88:
 591:Src/mc_interface.c ****     }
 1056              		.loc 1 591 7 is_stmt 0 view .LVU302
ARM GAS  /tmp/ccPF8NO0.s 			page 37


 1057 003e EDE7     		b	.L70
 1058              		.cfi_endproc
 1059              	.LFE1724:
 1061              		.section	.text.MCI_FaultAcknowledged,"ax",%progbits
 1062              		.align	1
 1063              		.p2align 2,,3
 1064              		.weak	MCI_FaultAcknowledged
 1065              		.syntax unified
 1066              		.thumb
 1067              		.thumb_func
 1068              		.fpu fpv4-sp-d16
 1070              	MCI_FaultAcknowledged:
 1071              	.LVL89:
 1072              	.LFB1725:
 618:Src/mc_interface.c ****   bool reVal = false;
 1073              		.loc 1 618 1 is_stmt 1 view -0
 1074              		.cfi_startproc
 1075              		@ args = 0, pretend = 0, frame = 0
 1076              		@ frame_needed = 0, uses_anonymous_args = 0
 619:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1077              		.loc 1 619 3 view .LVU304
 628:Src/mc_interface.c ****     {
 1078              		.loc 1 628 5 view .LVU305
 618:Src/mc_interface.c ****   bool reVal = false;
 1079              		.loc 1 618 1 is_stmt 0 view .LVU306
 1080 0000 10B5     		push	{r4, lr}
 1081              	.LCFI14:
 1082              		.cfi_def_cfa_offset 8
 1083              		.cfi_offset 4, -8
 1084              		.cfi_offset 14, -4
 618:Src/mc_interface.c ****   bool reVal = false;
 1085              		.loc 1 618 1 view .LVU307
 1086 0002 0446     		mov	r4, r0
 628:Src/mc_interface.c ****     {
 1087              		.loc 1 628 24 view .LVU308
 1088 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1089              	.LVL90:
 628:Src/mc_interface.c ****     {
 1090              		.loc 1 628 8 view .LVU309
 1091 0008 0B28     		cmp	r0, #11
 1092 000a 01D0     		beq	.L78
 1093              	.L80:
 619:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1094              		.loc 1 619 8 view .LVU310
 1095 000c 0020     		movs	r0, #0
 1096              	.LVL91:
 637:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1097              		.loc 1 637 5 is_stmt 1 view .LVU311
 641:Src/mc_interface.c **** }
 1098              		.loc 1 641 3 view .LVU312
 642:Src/mc_interface.c **** 
 1099              		.loc 1 642 1 is_stmt 0 view .LVU313
 1100 000e 10BD     		pop	{r4, pc}
 1101              	.LVL92:
 1102              	.L78:
 628:Src/mc_interface.c ****     {
 1103              		.loc 1 628 70 discriminator 1 view .LVU314
ARM GAS  /tmp/ccPF8NO0.s 			page 38


 1104 0010 2046     		mov	r0, r4
 1105 0012 FFF7FEFF 		bl	MCI_GetCurrentFaults
 1106              	.LVL93:
 628:Src/mc_interface.c ****     {
 1107              		.loc 1 628 50 discriminator 1 view .LVU315
 1108 0016 0028     		cmp	r0, #0
 1109 0018 F8D1     		bne	.L80
 630:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_ACK_FAULTS;
 1110              		.loc 1 630 7 is_stmt 1 view .LVU316
 631:Src/mc_interface.c ****       reVal = true;
 1111              		.loc 1 631 30 is_stmt 0 view .LVU317
 1112 001a 0223     		movs	r3, #2
 1113 001c A377     		strb	r3, [r4, #30]
 630:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_ACK_FAULTS;
 1114              		.loc 1 630 27 view .LVU318
 1115 001e 6084     		strh	r0, [r4, #34]	@ movhi
 631:Src/mc_interface.c ****       reVal = true;
 1116              		.loc 1 631 7 is_stmt 1 view .LVU319
 632:Src/mc_interface.c ****     }
 1117              		.loc 1 632 7 view .LVU320
 1118              	.LVL94:
 632:Src/mc_interface.c ****     }
 1119              		.loc 1 632 13 is_stmt 0 view .LVU321
 1120 0020 0120     		movs	r0, #1
 1121              	.LVL95:
 637:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1122              		.loc 1 637 5 is_stmt 1 view .LVU322
 641:Src/mc_interface.c **** }
 1123              		.loc 1 641 3 view .LVU323
 642:Src/mc_interface.c **** 
 1124              		.loc 1 642 1 is_stmt 0 view .LVU324
 1125 0022 10BD     		pop	{r4, pc}
 642:Src/mc_interface.c **** 
 1126              		.loc 1 642 1 view .LVU325
 1127              		.cfi_endproc
 1128              	.LFE1725:
 1130              		.section	.text.MCI_GetFaultState,"ax",%progbits
 1131              		.align	1
 1132              		.p2align 2,,3
 1133              		.weak	MCI_GetFaultState
 1134              		.syntax unified
 1135              		.thumb
 1136              		.thumb_func
 1137              		.fpu fpv4-sp-d16
 1139              	MCI_GetFaultState:
 1140              	.LVL96:
 1141              	.LFB1732:
 831:Src/mc_interface.c **** 
 832:Src/mc_interface.c **** /**
 833:Src/mc_interface.c ****   * @brief Returns the lists of current and past faults that occurred on the target motor
 834:Src/mc_interface.c ****   *
 835:Src/mc_interface.c ****   *  This function returns two bitfields containing information about the faults currently
 836:Src/mc_interface.c ****   * present and the faults occurred since the state machine has been moved into the #FAULT_NOW
 837:Src/mc_interface.c ****   * state.
 838:Src/mc_interface.c ****   *
 839:Src/mc_interface.c ****   * These two bitfields are 16 bits wide each and are concatenated into the 32-bit data. The
 840:Src/mc_interface.c ****   * 16 most significant bits contains the status of the current faults while that of the
ARM GAS  /tmp/ccPF8NO0.s 			page 39


 841:Src/mc_interface.c ****   * past faults is in the 16 least significant bits.
 842:Src/mc_interface.c ****   *
 843:Src/mc_interface.c ****   * @sa MCI_GetOccurredFaults, MCI_GetCurrentFaults
 844:Src/mc_interface.c ****   *
 845:Src/mc_interface.c ****   * @param  pHandle Pointer on the target motor drive structure.
 846:Src/mc_interface.c ****   */
 847:Src/mc_interface.c **** __weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 848:Src/mc_interface.c **** {
 1142              		.loc 1 848 1 is_stmt 1 view -0
 1143              		.cfi_startproc
 1144              		@ args = 0, pretend = 0, frame = 0
 1145              		@ frame_needed = 0, uses_anonymous_args = 0
 1146              		@ link register save eliminated.
 849:Src/mc_interface.c ****   uint32_t LocalFaultState;
 1147              		.loc 1 849 3 view .LVU327
 850:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 851:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 852:Src/mc_interface.c ****   {
 853:Src/mc_interface.c ****     LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
 854:Src/mc_interface.c ****   }
 855:Src/mc_interface.c ****   else
 856:Src/mc_interface.c ****   {
 857:Src/mc_interface.c **** #endif
 858:Src/mc_interface.c ****     LocalFaultState = (uint32_t)(pHandle->PastFaults);
 1148              		.loc 1 858 5 view .LVU328
 1149              		.loc 1 858 21 is_stmt 0 view .LVU329
 1150 0000 438C     		ldrh	r3, [r0, #34]
 1151              	.LVL97:
 859:Src/mc_interface.c ****     LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 1152              		.loc 1 859 5 is_stmt 1 view .LVU330
 860:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 861:Src/mc_interface.c ****   }
 862:Src/mc_interface.c **** #endif
 863:Src/mc_interface.c ****   return (LocalFaultState);
 1153              		.loc 1 863 3 view .LVU331
 859:Src/mc_interface.c ****     LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 1154              		.loc 1 859 24 is_stmt 0 view .LVU332
 1155 0002 008C     		ldrh	r0, [r0, #32]
 1156              	.LVL98:
 864:Src/mc_interface.c **** }
 1157              		.loc 1 864 1 view .LVU333
 1158 0004 43EA0040 		orr	r0, r3, r0, lsl #16
 1159 0008 7047     		bx	lr
 1160              		.cfi_endproc
 1161              	.LFE1732:
 1163 000a 00BF     		.section	.text.MCI_GetControlMode,"ax",%progbits
 1164              		.align	1
 1165              		.p2align 2,,3
 1166              		.weak	MCI_GetControlMode
 1167              		.syntax unified
 1168              		.thumb
 1169              		.thumb_func
 1170              		.fpu fpv4-sp-d16
 1172              	MCI_GetControlMode:
 1173              	.LVL99:
 1174              	.LFB1733:
 865:Src/mc_interface.c **** 
ARM GAS  /tmp/ccPF8NO0.s 			page 40


 866:Src/mc_interface.c **** /**
 867:Src/mc_interface.c ****   * @brief  It returns the modality of the speed and torque controller.
 868:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 869:Src/mc_interface.c ****   * @retval MC_ControlMode_t It returns the modality of STC. It can be one of
 870:Src/mc_interface.c ****   *         these two values: MCM_TORQUE_MODE or MCM_SPEED_MODE.
 871:Src/mc_interface.c ****   */
 872:Src/mc_interface.c **** __weak MC_ControlMode_t MCI_GetControlMode(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 873:Src/mc_interface.c **** {
 1175              		.loc 1 873 1 is_stmt 1 view -0
 1176              		.cfi_startproc
 1177              		@ args = 0, pretend = 0, frame = 0
 1178              		@ frame_needed = 0, uses_anonymous_args = 0
 1179              		@ link register save eliminated.
 874:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 875:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
 876:Src/mc_interface.c **** #else
 877:Src/mc_interface.c ****   return (pHandle->LastModalitySetByUser);
 1180              		.loc 1 877 3 view .LVU335
 878:Src/mc_interface.c **** #endif
 879:Src/mc_interface.c **** }
 1181              		.loc 1 879 1 is_stmt 0 view .LVU336
 1182 0000 90F82500 		ldrb	r0, [r0, #37]	@ zero_extendqisi2
 1183              	.LVL100:
 1184              		.loc 1 879 1 view .LVU337
 1185 0004 7047     		bx	lr
 1186              		.cfi_endproc
 1187              	.LFE1733:
 1189 0006 00BF     		.section	.text.MCI_GetImposedMotorDirection,"ax",%progbits
 1190              		.align	1
 1191              		.p2align 2,,3
 1192              		.weak	MCI_GetImposedMotorDirection
 1193              		.syntax unified
 1194              		.thumb
 1195              		.thumb_func
 1196              		.fpu fpv4-sp-d16
 1198              	MCI_GetImposedMotorDirection:
 1199              	.LVL101:
 1200              	.LFB1734:
 880:Src/mc_interface.c **** 
 881:Src/mc_interface.c **** /**
 882:Src/mc_interface.c ****   * @brief  It returns the motor direction imposed by the last command
 883:Src/mc_interface.c ****   *         (MCI_ExecSpeedRamp, MCI_ExecTorqueRamp or MCI_SetCurrentReferences).
 884:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 885:Src/mc_interface.c ****   * @retval int16_t It returns 1 or -1 according the sign of hFinalSpeed,
 886:Src/mc_interface.c ****   *         hFinalTorque or Iqdref.q of the last command.
 887:Src/mc_interface.c ****   */
 888:Src/mc_interface.c **** __weak int16_t MCI_GetImposedMotorDirection(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 889:Src/mc_interface.c **** {
 1201              		.loc 1 889 1 is_stmt 1 view -0
 1202              		.cfi_startproc
 1203              		@ args = 0, pretend = 0, frame = 0
 1204              		@ frame_needed = 0, uses_anonymous_args = 0
 1205              		@ link register save eliminated.
 890:Src/mc_interface.c ****   int16_t retVal = 1;
 1206              		.loc 1 890 3 view .LVU339
 891:Src/mc_interface.c **** 
 892:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
ARM GAS  /tmp/ccPF8NO0.s 			page 41


 893:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 894:Src/mc_interface.c ****   {
 895:Src/mc_interface.c ****     /* Nothing to do */
 896:Src/mc_interface.c ****   }
 897:Src/mc_interface.c ****   else
 898:Src/mc_interface.c ****   {
 899:Src/mc_interface.c **** #endif
 900:Src/mc_interface.c ****     switch (pHandle->lastCommand)
 1207              		.loc 1 900 5 view .LVU340
 1208              		.loc 1 900 20 is_stmt 0 view .LVU341
 1209 0000 037B     		ldrb	r3, [r0, #12]	@ zero_extendqisi2
 1210              		.loc 1 900 5 view .LVU342
 1211 0002 022B     		cmp	r3, #2
 1212 0004 05D0     		beq	.L85
 1213 0006 032B     		cmp	r3, #3
 1214 0008 13D0     		beq	.L86
 1215 000a 012B     		cmp	r3, #1
 1216 000c 09D0     		beq	.L92
 1217 000e 0120     		movs	r0, #1
 1218              	.LVL102:
 901:Src/mc_interface.c ****     {
 902:Src/mc_interface.c ****       case MCI_CMD_EXECSPEEDRAMP:
 903:Src/mc_interface.c ****       {
 904:Src/mc_interface.c ****         if (pHandle->hFinalSpeed < 0)
 905:Src/mc_interface.c ****         {
 906:Src/mc_interface.c ****           retVal = -1;
 907:Src/mc_interface.c ****         }
 908:Src/mc_interface.c ****         else
 909:Src/mc_interface.c ****         {
 910:Src/mc_interface.c ****           /* Nothing to do */
 911:Src/mc_interface.c ****         }
 912:Src/mc_interface.c ****         break;
 913:Src/mc_interface.c ****       }
 914:Src/mc_interface.c **** 
 915:Src/mc_interface.c ****       case MCI_CMD_EXECTORQUERAMP:
 916:Src/mc_interface.c ****       {
 917:Src/mc_interface.c ****         if (pHandle->hFinalTorque < 0)
 918:Src/mc_interface.c ****         {
 919:Src/mc_interface.c ****           retVal = -1;
 920:Src/mc_interface.c ****         }
 921:Src/mc_interface.c ****         else
 922:Src/mc_interface.c ****         {
 923:Src/mc_interface.c ****           /* Nothing to do */
 924:Src/mc_interface.c ****         }
 925:Src/mc_interface.c ****         break;
 926:Src/mc_interface.c ****       }
 927:Src/mc_interface.c **** 
 928:Src/mc_interface.c ****       case MCI_CMD_SETCURRENTREFERENCES:
 929:Src/mc_interface.c ****       {
 930:Src/mc_interface.c ****         if (pHandle->Iqdref.q < 0)
 931:Src/mc_interface.c ****         {
 932:Src/mc_interface.c ****           retVal = -1;
 933:Src/mc_interface.c ****         }
 934:Src/mc_interface.c ****         else
 935:Src/mc_interface.c ****         {
 936:Src/mc_interface.c ****           /* Nothing to do */
 937:Src/mc_interface.c ****         }
ARM GAS  /tmp/ccPF8NO0.s 			page 42


 938:Src/mc_interface.c ****         break;
 939:Src/mc_interface.c ****        }
 940:Src/mc_interface.c ****       default:
 941:Src/mc_interface.c ****         break;
 942:Src/mc_interface.c ****     }
 943:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 944:Src/mc_interface.c ****   }
 945:Src/mc_interface.c **** #endif
 946:Src/mc_interface.c ****   return (retVal);
 1219              		.loc 1 946 3 is_stmt 1 view .LVU343
 947:Src/mc_interface.c **** }
 1220              		.loc 1 947 1 is_stmt 0 view .LVU344
 1221 0010 7047     		bx	lr
 1222              	.LVL103:
 1223              	.L85:
 917:Src/mc_interface.c ****         {
 1224              		.loc 1 917 9 is_stmt 1 view .LVU345
 917:Src/mc_interface.c ****         {
 1225              		.loc 1 917 12 is_stmt 0 view .LVU346
 1226 0012 B0F91030 		ldrsh	r3, [r0, #16]
 906:Src/mc_interface.c ****         }
 1227              		.loc 1 906 18 view .LVU347
 1228 0016 002B     		cmp	r3, #0
 1229 0018 ACBF     		ite	ge
 1230 001a 0120     		movge	r0, #1
 1231              	.LVL104:
 906:Src/mc_interface.c ****         }
 1232              		.loc 1 906 18 view .LVU348
 1233 001c 4FF0FF30 		movlt	r0, #-1
 1234 0020 7047     		bx	lr
 1235              	.LVL105:
 1236              	.L92:
 904:Src/mc_interface.c ****         {
 1237              		.loc 1 904 9 is_stmt 1 view .LVU349
 904:Src/mc_interface.c ****         {
 1238              		.loc 1 904 12 is_stmt 0 view .LVU350
 1239 0022 B0F90E30 		ldrsh	r3, [r0, #14]
 906:Src/mc_interface.c ****         }
 1240              		.loc 1 906 18 view .LVU351
 1241 0026 002B     		cmp	r3, #0
 1242 0028 ACBF     		ite	ge
 1243 002a 0120     		movge	r0, #1
 1244              	.LVL106:
 906:Src/mc_interface.c ****         }
 1245              		.loc 1 906 18 view .LVU352
 1246 002c 4FF0FF30 		movlt	r0, #-1
 1247 0030 7047     		bx	lr
 1248              	.LVL107:
 1249              	.L86:
 930:Src/mc_interface.c ****         {
 1250              		.loc 1 930 9 is_stmt 1 view .LVU353
 930:Src/mc_interface.c ****         {
 1251              		.loc 1 930 12 is_stmt 0 view .LVU354
 1252 0032 B0F91230 		ldrsh	r3, [r0, #18]
 906:Src/mc_interface.c ****         }
 1253              		.loc 1 906 18 view .LVU355
 1254 0036 002B     		cmp	r3, #0
ARM GAS  /tmp/ccPF8NO0.s 			page 43


 1255 0038 ACBF     		ite	ge
 1256 003a 0120     		movge	r0, #1
 1257              	.LVL108:
 906:Src/mc_interface.c ****         }
 1258              		.loc 1 906 18 view .LVU356
 1259 003c 4FF0FF30 		movlt	r0, #-1
 1260 0040 7047     		bx	lr
 1261              		.cfi_endproc
 1262              	.LFE1734:
 1264 0042 00BF     		.section	.text.MCI_GetLastRampFinalSpeed,"ax",%progbits
 1265              		.align	1
 1266              		.p2align 2,,3
 1267              		.weak	MCI_GetLastRampFinalSpeed
 1268              		.syntax unified
 1269              		.thumb
 1270              		.thumb_func
 1271              		.fpu fpv4-sp-d16
 1273              	MCI_GetLastRampFinalSpeed:
 1274              	.LVL109:
 1275              	.LFB1735:
 948:Src/mc_interface.c **** 
 949:Src/mc_interface.c **** /**
 950:Src/mc_interface.c ****   * @brief  It returns information about the last ramp final speed sent by the
 951:Src/mc_interface.c ****   *         user expressed in the unit defined by #SPEED_UNIT.
 952:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 953:Src/mc_interface.c ****   * @retval int16_t last ramp final speed sent by the user expressed in
 954:Src/mc_interface.c ****   *         the unit defined by #SPEED_UNIT.
 955:Src/mc_interface.c ****   */
 956:Src/mc_interface.c **** __weak int16_t MCI_GetLastRampFinalSpeed(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 957:Src/mc_interface.c **** {
 1276              		.loc 1 957 1 is_stmt 1 view -0
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 0
 1279              		@ frame_needed = 0, uses_anonymous_args = 0
 1280              		@ link register save eliminated.
 958:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 959:Src/mc_interface.c ****   int16_t retVal = 0;
 960:Src/mc_interface.c **** 
 961:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 962:Src/mc_interface.c ****   {
 963:Src/mc_interface.c ****     /* Nothing to do */
 964:Src/mc_interface.c ****   }
 965:Src/mc_interface.c ****   else
 966:Src/mc_interface.c ****   {
 967:Src/mc_interface.c ****     retVal = pHandle->hFinalSpeed;
 968:Src/mc_interface.c ****   }
 969:Src/mc_interface.c ****   return (retVal);
 970:Src/mc_interface.c **** #else
 971:Src/mc_interface.c ****   return (pHandle->hFinalSpeed);
 1281              		.loc 1 971 3 view .LVU358
 972:Src/mc_interface.c **** #endif
 973:Src/mc_interface.c **** }
 1282              		.loc 1 973 1 is_stmt 0 view .LVU359
 1283 0000 B0F90E00 		ldrsh	r0, [r0, #14]
 1284              	.LVL110:
 1285              		.loc 1 973 1 view .LVU360
 1286 0004 7047     		bx	lr
ARM GAS  /tmp/ccPF8NO0.s 			page 44


 1287              		.cfi_endproc
 1288              	.LFE1735:
 1290 0006 00BF     		.section	.text.MCI_GetLastRampFinalTorque,"ax",%progbits
 1291              		.align	1
 1292              		.p2align 2,,3
 1293              		.weak	MCI_GetLastRampFinalTorque
 1294              		.syntax unified
 1295              		.thumb
 1296              		.thumb_func
 1297              		.fpu fpv4-sp-d16
 1299              	MCI_GetLastRampFinalTorque:
 1300              	.LVL111:
 1301              	.LFB1736:
 974:Src/mc_interface.c **** 
 975:Src/mc_interface.c **** /**
 976:Src/mc_interface.c ****   * @brief  It returns information about the last ramp final torque sent by the
 977:Src/mc_interface.c ****   *         user .This value represents actually the Iq current expressed in
 978:Src/mc_interface.c ****   *         digit.
 979:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 980:Src/mc_interface.c ****   * @retval int16_t last ramp final torque sent by the user expressed in digit
 981:Src/mc_interface.c ****   */
 982:Src/mc_interface.c **** __weak int16_t MCI_GetLastRampFinalTorque(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 983:Src/mc_interface.c **** {
 1302              		.loc 1 983 1 is_stmt 1 view -0
 1303              		.cfi_startproc
 1304              		@ args = 0, pretend = 0, frame = 0
 1305              		@ frame_needed = 0, uses_anonymous_args = 0
 1306              		@ link register save eliminated.
 984:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 985:Src/mc_interface.c ****   int16_t retVal = 0;
 986:Src/mc_interface.c **** 
 987:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 988:Src/mc_interface.c ****   {
 989:Src/mc_interface.c ****     /* Nothing to do */
 990:Src/mc_interface.c ****   }
 991:Src/mc_interface.c ****   else
 992:Src/mc_interface.c ****   {
 993:Src/mc_interface.c ****     retVal = pHandle->hFinalTorque;
 994:Src/mc_interface.c ****   }
 995:Src/mc_interface.c ****   return (retVal);
 996:Src/mc_interface.c **** #else
 997:Src/mc_interface.c ****   return (pHandle->hFinalTorque);
 1307              		.loc 1 997 3 view .LVU362
 998:Src/mc_interface.c **** #endif
 999:Src/mc_interface.c **** }
 1308              		.loc 1 999 1 is_stmt 0 view .LVU363
 1309 0000 B0F91000 		ldrsh	r0, [r0, #16]
 1310              	.LVL112:
 1311              		.loc 1 999 1 view .LVU364
 1312 0004 7047     		bx	lr
 1313              		.cfi_endproc
 1314              	.LFE1736:
 1316 0006 00BF     		.section	.text.MCI_GetLastRampFinalTorque_F,"ax",%progbits
 1317              		.align	1
 1318              		.p2align 2,,3
 1319              		.weak	MCI_GetLastRampFinalTorque_F
 1320              		.syntax unified
ARM GAS  /tmp/ccPF8NO0.s 			page 45


 1321              		.thumb
 1322              		.thumb_func
 1323              		.fpu fpv4-sp-d16
 1325              	MCI_GetLastRampFinalTorque_F:
 1326              	.LVL113:
 1327              	.LFB1737:
1000:Src/mc_interface.c **** 
1001:Src/mc_interface.c **** /**
1002:Src/mc_interface.c ****   * @brief  It returns information about the last ramp final torque sent by the
1003:Src/mc_interface.c ****   *         user .This value represents actually the Iq current expressed in
1004:Src/mc_interface.c ****   *         Ampere.
1005:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1006:Src/mc_interface.c ****   * @retval float_t last ramp final torque sent by the user expressed in digit
1007:Src/mc_interface.c ****   */
1008:Src/mc_interface.c **** __weak float_t MCI_GetLastRampFinalTorque_F(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1009:Src/mc_interface.c **** {
 1328              		.loc 1 1009 1 is_stmt 1 view -0
 1329              		.cfi_startproc
 1330              		@ args = 0, pretend = 0, frame = 0
 1331              		@ frame_needed = 0, uses_anonymous_args = 0
 1332              		@ link register save eliminated.
1010:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1011:Src/mc_interface.c ****   float_t retVal = 0;
1012:Src/mc_interface.c **** 
1013:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1014:Src/mc_interface.c ****   {
1015:Src/mc_interface.c ****     /* Nothing to do */
1016:Src/mc_interface.c ****   }
1017:Src/mc_interface.c ****   else
1018:Src/mc_interface.c ****   {
1019:Src/mc_interface.c ****     retVal = ((float_t)pHandle->hFinalTorque * (float_t)pHandle->pScale->current);
1020:Src/mc_interface.c ****   }
1021:Src/mc_interface.c ****   return (retVal);
1022:Src/mc_interface.c **** #else
1023:Src/mc_interface.c ****   return ((float_t)pHandle->hFinalTorque * (float_t)pHandle->pScale->current);
 1333              		.loc 1 1023 3 view .LVU366
 1334              		.loc 1 1023 11 is_stmt 0 view .LVU367
 1335 0000 B0F91030 		ldrsh	r3, [r0, #16]
 1336 0004 07EE903A 		vmov	s15, r3	@ int
 1337              		.loc 1 1023 68 view .LVU368
 1338 0008 8369     		ldr	r3, [r0, #24]
 1339 000a 5B68     		ldr	r3, [r3, #4]	@ unaligned
 1340              		.loc 1 1023 11 view .LVU369
 1341 000c F8EEE77A 		vcvt.f32.s32	s15, s15
 1342              		.loc 1 1023 68 view .LVU370
 1343 0010 00EE103A 		vmov	s0, r3	@ int
1024:Src/mc_interface.c **** #endif
1025:Src/mc_interface.c **** }
 1344              		.loc 1 1025 1 view .LVU371
 1345 0014 27EE800A 		vmul.f32	s0, s15, s0
 1346 0018 7047     		bx	lr
 1347              		.cfi_endproc
 1348              	.LFE1737:
 1350 001a 00BF     		.section	.text.MCI_GetLastRampFinalDuration,"ax",%progbits
 1351              		.align	1
 1352              		.p2align 2,,3
 1353              		.weak	MCI_GetLastRampFinalDuration
ARM GAS  /tmp/ccPF8NO0.s 			page 46


 1354              		.syntax unified
 1355              		.thumb
 1356              		.thumb_func
 1357              		.fpu fpv4-sp-d16
 1359              	MCI_GetLastRampFinalDuration:
 1360              	.LVL114:
 1361              	.LFB1738:
1026:Src/mc_interface.c **** 
1027:Src/mc_interface.c **** /**
1028:Src/mc_interface.c ****   * @brief  It returns information about the last ramp Duration sent by the
1029:Src/mc_interface.c ****   *         user .
1030:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1031:Src/mc_interface.c ****   * @retval uint16_t last ramp final torque sent by the user expressed in digit
1032:Src/mc_interface.c ****   */
1033:Src/mc_interface.c **** __weak uint16_t MCI_GetLastRampFinalDuration(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1034:Src/mc_interface.c **** {
 1362              		.loc 1 1034 1 is_stmt 1 view -0
 1363              		.cfi_startproc
 1364              		@ args = 0, pretend = 0, frame = 0
 1365              		@ frame_needed = 0, uses_anonymous_args = 0
 1366              		@ link register save eliminated.
1035:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1036:Src/mc_interface.c ****   uint16_t retVal = 0;
1037:Src/mc_interface.c **** 
1038:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1039:Src/mc_interface.c ****   {
1040:Src/mc_interface.c ****     /* Nothing to do */
1041:Src/mc_interface.c ****   }
1042:Src/mc_interface.c ****   else
1043:Src/mc_interface.c ****   {
1044:Src/mc_interface.c ****     retVal = pHandle->hDurationms;
1045:Src/mc_interface.c ****   }
1046:Src/mc_interface.c ****   return (retVal);
1047:Src/mc_interface.c **** #else
1048:Src/mc_interface.c ****   return (pHandle->hDurationms);
 1367              		.loc 1 1048 3 view .LVU373
1049:Src/mc_interface.c **** #endif
1050:Src/mc_interface.c **** }
 1368              		.loc 1 1050 1 is_stmt 0 view .LVU374
 1369 0000 808B     		ldrh	r0, [r0, #28]
 1370              	.LVL115:
 1371              		.loc 1 1050 1 view .LVU375
 1372 0002 7047     		bx	lr
 1373              		.cfi_endproc
 1374              	.LFE1738:
 1376              		.section	.text.MCI_GetLastRampFinalSpeed_F,"ax",%progbits
 1377              		.align	1
 1378              		.p2align 2,,3
 1379              		.weak	MCI_GetLastRampFinalSpeed_F
 1380              		.syntax unified
 1381              		.thumb
 1382              		.thumb_func
 1383              		.fpu fpv4-sp-d16
 1385              	MCI_GetLastRampFinalSpeed_F:
 1386              	.LVL116:
 1387              	.LFB1739:
1051:Src/mc_interface.c **** 
ARM GAS  /tmp/ccPF8NO0.s 			page 47


1052:Src/mc_interface.c **** /**
1053:Src/mc_interface.c ****   * @brief  It returns last ramp final speed expressed in rpm.
1054:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1055:Src/mc_interface.c ****   * @retval float_t last ramp final speed sent by the user expressed in rpm.
1056:Src/mc_interface.c ****   */
1057:Src/mc_interface.c **** __weak float_t MCI_GetLastRampFinalSpeed_F(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1058:Src/mc_interface.c **** {
 1388              		.loc 1 1058 1 is_stmt 1 view -0
 1389              		.cfi_startproc
 1390              		@ args = 0, pretend = 0, frame = 0
 1391              		@ frame_needed = 0, uses_anonymous_args = 0
 1392              		@ link register save eliminated.
1059:Src/mc_interface.c ****   float_t reVal = 0.0f;
 1393              		.loc 1 1059 3 view .LVU377
1060:Src/mc_interface.c **** 
1061:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 1394              		.loc 1 1061 3 view .LVU378
 1395              		.loc 1 1061 6 is_stmt 0 view .LVU379
 1396 0000 70B1     		cbz	r0, .L99
1062:Src/mc_interface.c ****   {
1063:Src/mc_interface.c ****     /* Nothing to do */
1064:Src/mc_interface.c ****   }
1065:Src/mc_interface.c ****   else
1066:Src/mc_interface.c ****   {
1067:Src/mc_interface.c ****     reVal = (((float_t)pHandle->hFinalSpeed * (float_t)U_RPM) / (float_t)SPEED_UNIT);
 1397              		.loc 1 1067 5 is_stmt 1 view .LVU380
 1398              		.loc 1 1067 15 is_stmt 0 view .LVU381
 1399 0002 B0F90E30 		ldrsh	r3, [r0, #14]
 1400              		.loc 1 1067 45 view .LVU382
 1401 0006 DFED086A 		vldr.32	s13, .L100
 1402              		.loc 1 1067 15 view .LVU383
 1403 000a 07EE903A 		vmov	s15, r3	@ int
 1404 000e F8EEE77A 		vcvt.f32.s32	s15, s15
 1405              		.loc 1 1067 11 view .LVU384
 1406 0012 B2EE047A 		vmov.f32	s14, #1.0e+1
 1407              		.loc 1 1067 45 view .LVU385
 1408 0016 67EEA67A 		vmul.f32	s15, s15, s13
 1409              		.loc 1 1067 11 view .LVU386
 1410 001a 87EE870A 		vdiv.f32	s0, s15, s14
 1411              	.LVL117:
 1412              		.loc 1 1067 11 view .LVU387
 1413 001e 7047     		bx	lr
 1414              	.LVL118:
 1415              	.L99:
1059:Src/mc_interface.c **** 
 1416              		.loc 1 1059 11 view .LVU388
 1417 0020 9FED020A 		vldr.32	s0, .L100+4
1068:Src/mc_interface.c ****   }
1069:Src/mc_interface.c ****   return (reVal);
 1418              		.loc 1 1069 3 is_stmt 1 view .LVU389
1070:Src/mc_interface.c **** }
 1419              		.loc 1 1070 1 is_stmt 0 view .LVU390
 1420 0024 7047     		bx	lr
 1421              	.L101:
 1422 0026 00BF     		.align	2
 1423              	.L100:
 1424 0028 00007042 		.word	1114636288
ARM GAS  /tmp/ccPF8NO0.s 			page 48


 1425 002c 00000000 		.word	0
 1426              		.cfi_endproc
 1427              	.LFE1739:
 1429              		.section	.text.MCI_RampCompleted,"ax",%progbits
 1430              		.align	1
 1431              		.p2align 2,,3
 1432              		.weak	MCI_RampCompleted
 1433              		.syntax unified
 1434              		.thumb
 1435              		.thumb_func
 1436              		.fpu fpv4-sp-d16
 1438              	MCI_RampCompleted:
 1439              	.LVL119:
 1440              	.LFB1740:
1071:Src/mc_interface.c **** 
1072:Src/mc_interface.c **** /**
1073:Src/mc_interface.c ****   * @brief  Check if the settled speed or torque ramp has been completed.
1074:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1075:Src/mc_interface.c ****   * @retval bool It returns true if the ramp is completed, false otherwise.
1076:Src/mc_interface.c ****   */
1077:Src/mc_interface.c **** __weak bool MCI_RampCompleted(MCI_Handle_t *pHandle)
1078:Src/mc_interface.c **** {
 1441              		.loc 1 1078 1 is_stmt 1 view -0
 1442              		.cfi_startproc
 1443              		@ args = 0, pretend = 0, frame = 0
 1444              		@ frame_needed = 0, uses_anonymous_args = 0
1079:Src/mc_interface.c ****   bool retVal = false;
 1445              		.loc 1 1079 3 view .LVU392
1080:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1081:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1082:Src/mc_interface.c ****   {
1083:Src/mc_interface.c ****     /* Nothing to do */
1084:Src/mc_interface.c ****   }
1085:Src/mc_interface.c ****   else
1086:Src/mc_interface.c ****   {
1087:Src/mc_interface.c **** #endif
1088:Src/mc_interface.c ****     if (RUN == MCI_GetSTMState(pHandle))
 1446              		.loc 1 1088 5 view .LVU393
1078:Src/mc_interface.c ****   bool retVal = false;
 1447              		.loc 1 1078 1 is_stmt 0 view .LVU394
 1448 0000 10B5     		push	{r4, lr}
 1449              	.LCFI15:
 1450              		.cfi_def_cfa_offset 8
 1451              		.cfi_offset 4, -8
 1452              		.cfi_offset 14, -4
1078:Src/mc_interface.c ****   bool retVal = false;
 1453              		.loc 1 1078 1 view .LVU395
 1454 0002 0446     		mov	r4, r0
 1455              		.loc 1 1088 16 view .LVU396
 1456 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1457              	.LVL120:
 1458              		.loc 1 1088 8 view .LVU397
 1459 0008 0628     		cmp	r0, #6
 1460 000a 01D0     		beq	.L106
1079:Src/mc_interface.c ****   bool retVal = false;
 1461              		.loc 1 1079 8 view .LVU398
 1462 000c 0020     		movs	r0, #0
ARM GAS  /tmp/ccPF8NO0.s 			page 49


 1463              	.LVL121:
1089:Src/mc_interface.c ****     {
1090:Src/mc_interface.c ****       retVal = STC_RampCompleted(pHandle->pSTC);
1091:Src/mc_interface.c ****     }
1092:Src/mc_interface.c ****     else
1093:Src/mc_interface.c ****     {
1094:Src/mc_interface.c ****       /* Nothing to do */
1095:Src/mc_interface.c ****     }
 1464              		.loc 1 1095 5 is_stmt 1 view .LVU399
1096:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1097:Src/mc_interface.c ****   }
1098:Src/mc_interface.c **** #endif
1099:Src/mc_interface.c ****   return (retVal);
 1465              		.loc 1 1099 3 view .LVU400
1100:Src/mc_interface.c **** }
 1466              		.loc 1 1100 1 is_stmt 0 view .LVU401
 1467 000e 10BD     		pop	{r4, pc}
 1468              	.LVL122:
 1469              	.L106:
1090:Src/mc_interface.c ****     }
 1470              		.loc 1 1090 7 is_stmt 1 view .LVU402
 1471              	.LBB43:
 1472              	.LBI43:
 1473              		.file 2 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h"
   1:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /**
   2:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   ******************************************************************************
   3:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @file    speed_torq_ctrl.h
   4:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @author  Motor Control SDK Team, ST Microelectronics
   5:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @brief   This file contains all definitions and functions prototypes for the
   6:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *          Speed & Torque Control component of the Motor Control SDK.
   7:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   ******************************************************************************
   8:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @attention
   9:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *
  10:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  11:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * All rights reserved.</center></h2>
  12:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *
  13:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * This software component is licensed by ST under Ultimate Liberty license
  14:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * SLA0044, the "License"; You may not use this file except in compliance with
  15:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * the License. You may obtain a copy of the License at:
  16:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *                             www.st.com/SLA0044
  17:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *
  18:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   ******************************************************************************
  19:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @ingroup SpeednTorqCtrlClassic
  20:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
  21:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  22:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  23:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifndef SPEEDNTORQCTRLCLASS_H
  24:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #define SPEEDNTORQCTRLCLASS_H
  25:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  26:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef __cplusplus
  27:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** extern "C" {
  28:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #endif /* __cplusplus */
  29:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  30:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Includes ------------------------------------------------------------------*/
  31:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #include "mc_type.h"
  32:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #include "pid_regulator.h"
  33:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #include "speed_pos_fdbk.h"
ARM GAS  /tmp/ccPF8NO0.s 			page 50


  34:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  35:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /** @addtogroup MCSDK
  36:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @{
  37:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
  38:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  39:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /** @addtogroup SpeednTorqCtrl
  40:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @{
  41:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
  42:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  43:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /** @addtogroup SpeednTorqCtrlClassic
  44:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @{
  45:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
  46:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  47:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Exported types ------------------------------------------------------------*/
  48:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  49:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /**
  50:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @brief  Speed & Torque Control parameters definition
  51:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
  52:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** typedef struct
  53:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** {
  54:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   MC_ControlMode_t Mode;               /*!< Modality of STC. It can be one of these two settings:
  55:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                            MCM_TORQUE_MODE to enable the Torque mode or
  56:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                            MCM_SPEED_MODE to enable the Speed mode. */
  57:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int16_t TargetFinal;                 /*!< Backup of #hTargetFinal to be applied in the last step.
  58:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int32_t SpeedRefUnitExt;             /*!< Current mechanical rotor speed reference expressed in
  59:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             [SPEED_UNIT](measurement_units.md) multiplied by 65536.
  60:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int32_t TorqueRef;                   /*!< Current motor torque reference. This value represents a
  61:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             the Iq current expressed in digit multiplied by 65536. 
  62:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   uint32_t RampRemainingStep;          /*!< Number of steps remaining to complete the ramp. */
  63:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   PID_Handle_t *PISpeed;               /*!< The regulator used to perform the speed control loop. *
  64:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   SpeednPosFdbk_Handle_t *SPD;         /*!< The speed sensor used to perform the speed regulation. 
  65:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int32_t IncDecAmount;                /*!< Increment/decrement amount to be applied to the referen
  66:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             #CalcTorqueReference. */
  67:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   uint16_t STCFrequencyHz;             /*!< Frequency on which the user updates the torque referenc
  68:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             #STC_CalcTorqueReference method expressed in Hz */
  69:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   uint16_t MaxAppPositiveMecSpeedUnit; /*!< Application maximum positive value of the rotor mechani
  70:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             Expressed in the unit defined by [SPEED_UNIT](measureme
  71:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   uint16_t MinAppPositiveMecSpeedUnit; /*!< Application minimum positive value of the rotor mechani
  72:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             Expressed in the unit defined by [SPEED_UNIT](measureme
  73:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int16_t MaxAppNegativeMecSpeedUnit;  /*!< Application maximum negative value of the rotor mechani
  74:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             Expressed in the unit defined by [SPEED_UNIT](measureme
  75:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int16_t MinAppNegativeMecSpeedUnit;  /*!< Application minimum negative value of the rotor mechani
  76:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             Expressed in the unit defined by [SPEED_UNIT](measureme
  77:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   uint16_t MaxPositiveTorque;          /*!< Maximum positive value of motor torque. This value repr
  78:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             the maximum Iq current expressed in digit. */
  79:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int16_t MinNegativeTorque;           /*!< Minimum negative value of motor torque. This value repr
  80:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             the maximum Iq current expressed in digit. */
  81:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   MC_ControlMode_t ModeDefault;        /*!< Default STC modality. */
  82:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int16_t MecSpeedRefUnitDefault;      /*!< Default mechanical rotor speed reference expressed in t
  83:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             [SPEED_UNIT](measurement_units.md). */
  84:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int16_t TorqueRefDefault;            /*!< Default motor torque reference. This value represents a
  85:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             current reference expressed in digit. */
  86:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int16_t IdrefDefault;                /*!< Default Id current reference expressed in digit. */
  87:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** } SpeednTorqCtrl_Handle_t;
  88:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  89:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  90:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
ARM GAS  /tmp/ccPF8NO0.s 			page 51


  91:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Initializes all the object variables */
  92:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** void STC_Init(SpeednTorqCtrl_Handle_t *pHandle, PID_Handle_t *pPI, SpeednPosFdbk_Handle_t *SPD_Hand
  93:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  94:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Resets the integral term of speed regulator */
  95:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** void STC_Clear(SpeednTorqCtrl_Handle_t *pHandle);
  96:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  97:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Gets the current mechanical rotor speed reference */
  98:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** int16_t STC_GetMecSpeedRefUnit(SpeednTorqCtrl_Handle_t *pHandle);
  99:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 100:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Sets the mode of the speed and torque controller (Torque mode or Speed mode) */
 101:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** void STC_SetControlMode(SpeednTorqCtrl_Handle_t *pHandle, MC_ControlMode_t bMode);
 102:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 103:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Starts the execution of a ramp using new target and duration */
 104:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms);
 105:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 106:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Computes the new value of motor torque reference */
 107:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle);
 108:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 109:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Gets the Default mechanical rotor speed reference */
 110:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** int16_t STC_GetMecSpeedRefUnitDefault(SpeednTorqCtrl_Handle_t *pHandle);
 111:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 112:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Returns the Application maximum positive rotor mechanical speed */
 113:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** uint16_t STC_GetMaxAppPositiveMecSpeedUnit(SpeednTorqCtrl_Handle_t *pHandle);
 114:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 115:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Returns the Application minimum negative rotor mechanical speed */
 116:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** int16_t STC_GetMinAppNegativeMecSpeedUnit(SpeednTorqCtrl_Handle_t *pHandle);
 117:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 118:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Stops the execution of speed ramp */
 119:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** bool STC_StopSpeedRamp(SpeednTorqCtrl_Handle_t *pHandle);
 120:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 121:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Sets in real time the speed sensor utilized by the FOC */
 122:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** void STC_SetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle, SpeednPosFdbk_Handle_t *SPD_Handle);
 123:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 124:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* It returns the default values of Iqdref */
 125:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** qd_t STC_GetDefaultIqdref(SpeednTorqCtrl_Handle_t *pHandle);
 126:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 127:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Forces the speed reference to the current speed */
 128:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle);
 129:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 130:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /**
 131:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @brief  Gets the modality of the speed and torque controller
 132:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *           @ref SpeednTorqCtrl_Handle_t::Mode "Mode".
 133:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component.
 134:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @retval MC_ControlMode_t  modality of STC. It can be one of
 135:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *         these two values: MCM_TORQUE_MODE or MCM_SPEED_MODE.
 136:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *
 137:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * - Called by @ref SpeedRegulatorPotentiometer Speed potentiometer component to manage new speed 
 138:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
 139:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** static inline MC_ControlMode_t STC_GetControlMode(SpeednTorqCtrl_Handle_t *pHandle)
 140:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** {
 141:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
 142:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->Mode);
 143:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #else
 144:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   return (pHandle->Mode);
 145:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #endif
 146:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** }
 147:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
ARM GAS  /tmp/ccPF8NO0.s 			page 52


 148:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /**
 149:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @brief  Interrupts the execution of any previous ramp command in particular by clearing
 150:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *         the number of steps remaining to complete the ramp
 151:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *         @ref SpeednTorqCtrl_Handle_t::RampRemainingStep "RampRemainingStep".
 152:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component.
 153:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @retval none
 154:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *
 155:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * - If STC has been set in Torque mode the last value of Iq is maintained.\n
 156:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * - If STC has been set in Speed mode the last value of mechanical
 157:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * rotor speed reference is maintained.
 158:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * - Called by MCI_StopSpeedRamp execution command.
 159:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
 160:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** static inline void STC_StopRamp(SpeednTorqCtrl_Handle_t *pHandle)
 161:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** {
 162:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
 163:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   if (MC_NULL == pHandle)
 164:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   {
 165:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     /* Nothing to do */
 166:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   }
 167:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   else
 168:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   {
 169:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #endif
 170:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     pHandle->RampRemainingStep = 0U;
 171:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     pHandle->IncDecAmount = 0;
 172:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
 173:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   }
 174:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #endif
 175:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** }
 176:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 177:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /**
 178:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @brief  Checks if the settled speed or torque ramp has been completed by checking zero value of
 179:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *           @ref SpeednTorqCtrl_Handle_t::RampRemainingStep "RampRemainingStep".
 180:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component.
 181:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @retval bool returning true if the ramp is completed, false otherwise.
 182:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *
 183:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * - Called during motor profiler tuning of HALL sensor.
 184:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
 185:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** static inline bool STC_RampCompleted(SpeednTorqCtrl_Handle_t *pHandle)
 1474              		.loc 2 185 20 view .LVU403
 1475              	.LBB44:
 186:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** {
 187:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   bool retVal = false;
 1476              		.loc 2 187 3 view .LVU404
 188:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
 189:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   if (MC_NULL == pHandle)
 190:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   {
 191:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     /* Nothing to do */
 192:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   }
 193:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   else
 194:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   {
 195:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #endif
 196:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     if (0U == pHandle->RampRemainingStep)
 1477              		.loc 2 196 5 view .LVU405
 1478              		.loc 2 196 22 is_stmt 0 view .LVU406
 1479 0010 2368     		ldr	r3, [r4]
 1480              		.loc 2 196 8 view .LVU407
 1481 0012 D868     		ldr	r0, [r3, #12]
ARM GAS  /tmp/ccPF8NO0.s 			page 53


 1482 0014 B0FA80F0 		clz	r0, r0
 1483 0018 4009     		lsrs	r0, r0, #5
 1484              	.LVL123:
 1485              		.loc 2 196 8 view .LVU408
 1486              	.LBE44:
 1487              	.LBE43:
1095:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1488              		.loc 1 1095 5 is_stmt 1 view .LVU409
1099:Src/mc_interface.c **** }
 1489              		.loc 1 1099 3 view .LVU410
 1490              		.loc 1 1100 1 is_stmt 0 view .LVU411
 1491 001a 10BD     		pop	{r4, pc}
 1492              		.loc 1 1100 1 view .LVU412
 1493              		.cfi_endproc
 1494              	.LFE1740:
 1496              		.section	.text.MCI_StopSpeedRamp,"ax",%progbits
 1497              		.align	1
 1498              		.p2align 2,,3
 1499              		.weak	MCI_StopSpeedRamp
 1500              		.syntax unified
 1501              		.thumb
 1502              		.thumb_func
 1503              		.fpu fpv4-sp-d16
 1505              	MCI_StopSpeedRamp:
 1506              	.LVL124:
 1507              	.LFB1741:
1101:Src/mc_interface.c **** 
1102:Src/mc_interface.c **** /**
1103:Src/mc_interface.c ****   * @brief  Stop the execution of speed ramp.
1104:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1105:Src/mc_interface.c ****   * @retval bool It returns true if the command is executed, false otherwise.
1106:Src/mc_interface.c ****   *
1107:Src/mc_interface.c ****   * @deprecated This function is deprecated and should not be used anymore. It will be
1108:Src/mc_interface.c ****   *             removed in a future version of the MCSDK. Use MCI_StopRamp() instead.
1109:Src/mc_interface.c ****   */
1110:Src/mc_interface.c **** __weak bool MCI_StopSpeedRamp(MCI_Handle_t *pHandle)
1111:Src/mc_interface.c **** {
 1508              		.loc 1 1111 1 is_stmt 1 view -0
 1509              		.cfi_startproc
 1510              		@ args = 0, pretend = 0, frame = 0
 1511              		@ frame_needed = 0, uses_anonymous_args = 0
 1512              		@ link register save eliminated.
1112:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1113:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? false : STC_StopSpeedRamp(pHandle->pSTC));
1114:Src/mc_interface.c **** #else
1115:Src/mc_interface.c ****   return (STC_StopSpeedRamp(pHandle->pSTC));
 1513              		.loc 1 1115 3 view .LVU414
 1514              		.loc 1 1115 11 is_stmt 0 view .LVU415
 1515 0000 0068     		ldr	r0, [r0]
 1516              	.LVL125:
 1517              		.loc 1 1115 11 view .LVU416
 1518 0002 FFF7FEBF 		b	STC_StopSpeedRamp
 1519              	.LVL126:
 1520              		.cfi_endproc
 1521              	.LFE1741:
 1523 0006 00BF     		.section	.text.MCI_StopRamp,"ax",%progbits
 1524              		.align	1
ARM GAS  /tmp/ccPF8NO0.s 			page 54


 1525              		.p2align 2,,3
 1526              		.weak	MCI_StopRamp
 1527              		.syntax unified
 1528              		.thumb
 1529              		.thumb_func
 1530              		.fpu fpv4-sp-d16
 1532              	MCI_StopRamp:
 1533              	.LVL127:
 1534              	.LFB1742:
1116:Src/mc_interface.c **** #endif
1117:Src/mc_interface.c **** }
1118:Src/mc_interface.c **** 
1119:Src/mc_interface.c **** /**
1120:Src/mc_interface.c ****   * @brief  Stop the execution of ongoing ramp.
1121:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1122:Src/mc_interface.c ****   */
1123:Src/mc_interface.c **** __weak void MCI_StopRamp(MCI_Handle_t *pHandle)
1124:Src/mc_interface.c **** {
 1535              		.loc 1 1124 1 is_stmt 1 view -0
 1536              		.cfi_startproc
 1537              		@ args = 0, pretend = 0, frame = 0
 1538              		@ frame_needed = 0, uses_anonymous_args = 0
 1539              		@ link register save eliminated.
1125:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1126:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1127:Src/mc_interface.c ****   {
1128:Src/mc_interface.c ****     /* Nothing to do */
1129:Src/mc_interface.c ****   }
1130:Src/mc_interface.c ****   else
1131:Src/mc_interface.c ****   {
1132:Src/mc_interface.c **** #endif
1133:Src/mc_interface.c ****     STC_StopRamp(pHandle->pSTC);
 1540              		.loc 1 1133 5 view .LVU418
 1541 0000 0368     		ldr	r3, [r0]
 1542              	.LVL128:
 1543              	.LBB45:
 1544              	.LBI45:
 160:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** {
 1545              		.loc 2 160 20 view .LVU419
 1546              	.LBB46:
 170:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     pHandle->IncDecAmount = 0;
 1547              		.loc 2 170 5 view .LVU420
 170:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     pHandle->IncDecAmount = 0;
 1548              		.loc 2 170 32 is_stmt 0 view .LVU421
 1549 0002 0022     		movs	r2, #0
 1550 0004 DA60     		str	r2, [r3, #12]
 171:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
 1551              		.loc 2 171 5 is_stmt 1 view .LVU422
 171:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
 1552              		.loc 2 171 27 is_stmt 0 view .LVU423
 1553 0006 9A61     		str	r2, [r3, #24]
 1554              	.LVL129:
 171:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
 1555              		.loc 2 171 27 view .LVU424
 1556              	.LBE46:
 1557              	.LBE45:
1134:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
ARM GAS  /tmp/ccPF8NO0.s 			page 55


1135:Src/mc_interface.c ****   }
1136:Src/mc_interface.c **** #endif
1137:Src/mc_interface.c **** }
 1558              		.loc 1 1137 1 view .LVU425
 1559 0008 7047     		bx	lr
 1560              		.cfi_endproc
 1561              	.LFE1742:
 1563 000a 00BF     		.section	.text.MCI_GetSpdSensorReliability,"ax",%progbits
 1564              		.align	1
 1565              		.p2align 2,,3
 1566              		.weak	MCI_GetSpdSensorReliability
 1567              		.syntax unified
 1568              		.thumb
 1569              		.thumb_func
 1570              		.fpu fpv4-sp-d16
 1572              	MCI_GetSpdSensorReliability:
 1573              	.LVL130:
 1574              	.LFB1743:
1138:Src/mc_interface.c **** 
1139:Src/mc_interface.c **** /**
1140:Src/mc_interface.c ****   * @brief  It returns speed sensor reliability with reference to the sensor
1141:Src/mc_interface.c ****   *         actually used for reference frame transformation
1142:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1143:Src/mc_interface.c ****   * @retval bool It returns true if the speed sensor utilized for reference
1144:Src/mc_interface.c ****   *         frame transformation and (in speed control mode) for speed
1145:Src/mc_interface.c ****   *         regulation is reliable, false otherwise
1146:Src/mc_interface.c ****   */
1147:Src/mc_interface.c **** __weak bool MCI_GetSpdSensorReliability(MCI_Handle_t *pHandle)
1148:Src/mc_interface.c **** {
 1575              		.loc 1 1148 1 is_stmt 1 view -0
 1576              		.cfi_startproc
 1577              		@ args = 0, pretend = 0, frame = 0
 1578              		@ frame_needed = 0, uses_anonymous_args = 0
 1579              		@ link register save eliminated.
1149:Src/mc_interface.c ****   bool status;
 1580              		.loc 1 1149 3 view .LVU427
1150:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1151:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1152:Src/mc_interface.c ****   {
1153:Src/mc_interface.c ****     status = false;
1154:Src/mc_interface.c ****   }
1155:Src/mc_interface.c ****   else
1156:Src/mc_interface.c ****   {
1157:Src/mc_interface.c **** #endif
1158:Src/mc_interface.c ****     SpeednPosFdbk_Handle_t *SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 1581              		.loc 1 1158 5 view .LVU428
 1582              	.LBB47:
 1583              	.LBI47:
 197:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     {
 198:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****       retVal = true;
 199:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     }
 200:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
 201:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   }
 202:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #endif
 203:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   return (retVal);
 204:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** }
 205:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
ARM GAS  /tmp/ccPF8NO0.s 			page 56


 206:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /**
 207:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @brief  Changes the nominal current by setting new values of
 208:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *         @ref SpeednTorqCtrl_Handle_t::MaxPositiveTorque "MaxPositiveTorque" and
 209:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *         @ref SpeednTorqCtrl_Handle_t::MinNegativeTorque "MinNegativeTorque".
 210:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component.
 211:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @param  hNominalCurrent: represents actually the maximum Iq current expressed in digit.
 212:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @retval none
 213:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *
 214:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * - Not used into current implementation.
 215:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
 216:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** static inline void STC_SetNominalCurrent(SpeednTorqCtrl_Handle_t *pHandle, uint16_t hNominalCurrent
 217:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** {
 218:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
 219:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   if (MC_NULL == pHandle)
 220:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   {
 221:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     /* Nothing to do */
 222:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   }
 223:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   else
 224:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   {
 225:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #endif
 226:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     pHandle->MaxPositiveTorque = hNominalCurrent;
 227:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     pHandle->MinNegativeTorque = -(int16_t)hNominalCurrent;
 228:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
 229:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   }
 230:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #endif
 231:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** }
 232:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 233:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /**
 234:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @brief Returns the speed sensor utilized by the FOC.
 235:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @param pHandle: handler of the current instance of the SpeednTorqCtrl component.
 236:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
 237:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *
 238:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * - Called as soon as component parameters are required by MC FW.
 239:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
 240:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** static inline SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
 1584              		.loc 2 240 39 view .LVU429
 1585              	.LBB48:
 241:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** {
 242:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
 243:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
 244:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #else
 245:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   return (pHandle->SPD);
 1586              		.loc 2 245 3 view .LVU430
 1587              		.loc 2 245 18 is_stmt 0 view .LVU431
 1588 0000 0368     		ldr	r3, [r0]
 1589 0002 5B69     		ldr	r3, [r3, #20]
 1590              	.LVL131:
 1591              		.loc 2 245 18 view .LVU432
 1592              	.LBE48:
 1593              	.LBE47:
1159:Src/mc_interface.c ****     status = SPD_Check(SpeedSensor);
 1594              		.loc 1 1159 5 is_stmt 1 view .LVU433
 1595              	.LBB49:
 1596              	.LBI49:
 1597              		.file 3 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
   1:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /**
   2:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   ******************************************************************************
ARM GAS  /tmp/ccPF8NO0.s 			page 57


   3:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @file    speed_pos_fdbk.h
   4:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @author  Motor Control SDK Team, ST Microelectronics
   5:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @brief   This file provides all definitions and functions prototypes
   6:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *          of the Speed & Position Feedback component of the Motor Control SDK.
   7:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *
   8:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   ******************************************************************************
   9:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @attention
  10:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *
  11:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  12:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * All rights reserved.</center></h2>
  13:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *
  14:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * This software component is licensed by ST under Ultimate Liberty license
  15:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * SLA0044, the "License"; You may not use this file except in compliance with
  16:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * the License. You may obtain a copy of the License at:
  17:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *                             www.st.com/SLA0044
  18:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *
  19:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   ******************************************************************************
  20:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @ingroup SpeednPosFdbk
  21:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   */
  22:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  23:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  24:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #ifndef SPEEDNPOSFDBK_H
  25:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #define SPEEDNPOSFDBK_H
  26:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  27:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #ifdef __cplusplus
  28:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** extern "C" {
  29:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #endif /* __cplusplus */
  30:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  31:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /* Includes ------------------------------------------------------------------*/
  32:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /* Already into mc_type.h */
  33:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /* #include "stdint.h" */
  34:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #include "mc_type.h"
  35:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  36:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /** @addtogroup MCSDK
  37:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @{
  38:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   */
  39:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  40:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /** @addtogroup SpeednPosFdbk
  41:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @{
  42:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   */
  43:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  44:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /* Exported types ------------------------------------------------------------*/
  45:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /**
  46:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @brief  SpeednPosFdbk  handles definitions of mechanical and electrical speed, mechanical accel
  47:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *                        and electrical angle and all constants and scale values for a reliable m
  48:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *                        computation in appropriated unit.
  49:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   */
  50:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** typedef struct
  51:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** {
  52:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  53:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint8_t bSpeedErrorNumber;          /*!< Number of time the average mechanical speed is not valid
  54:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint8_t bElToMecRatio;              /*!< Coefficient used to transform electrical to mechanical q
  55:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            viceversa. It usually coincides with motor pole pairs nu
  56:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint8_t SpeedUnit;                  /*!< The speed unit value is defined into mc_stm_types.h by
  57:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            [SPEED_UNIT](measurement_units.md) in tenth of Hertz.*/
  58:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint8_t bMaximumSpeedErrorsNumber;  /*!< Maximum value of not valid speed measurements before an 
  59:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   int16_t hElAngle;                   /*!< Estimated electrical angle reported by the implemented s
ARM GAS  /tmp/ccPF8NO0.s 			page 58


  60:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            method. */
  61:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   int16_t hMecAngle;                  /*!< Instantaneous measure of rotor mechanical angle. */
  62:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   int32_t wMecAngle;                  /*!< Mechanical angle frame based on coefficient #bElToMecRat
  63:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   int16_t hAvrMecSpeedUnit;           /*!< Average mechanical speed expressed in the unit defined b
  64:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            [SPEED_UNIT](measurement_units.md). */
  65:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   int16_t hElSpeedDpp;                /*!< Instantaneous electrical speed expressed in Digit Per co
  66:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            ([dpp](measurement_units.md)),
  67:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            expresses the angular speed as the variation of the elec
  68:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   int16_t InstantaneousElSpeedDpp;    /*!< Instantaneous computed electrical speed, expressed in
  69:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            [dpp](measurement_units.md). */
  70:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   int16_t hMecAccelUnitP;             /*!< Average mechanical acceleration expressed in the unit de
  71:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            only reported with encoder implementation */
  72:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint16_t hMaxReliableMecSpeedUnit;  /*!< Maximum value of measured mechanical speed that is consi
  73:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            Expressed in the unit defined by [SPEED_UNIT](measuremen
  74:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint16_t hMinReliableMecSpeedUnit;  /*!< Minimum value of measured mechanical speed that is consi
  75:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            Expressed in the unit defined by [SPEED_UNIT](measuremen
  76:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint16_t hMaxReliableMecAccelUnitP; /*!< Maximum value of measured acceleration that is considere
  77:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            Constant value equal to 65535, expressed in the unit def
  78:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            [SPEED_UNIT](measurement_units.md). */
  79:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint16_t hMeasurementFrequency;     /*!< Frequency at which the user will request a measurement o
  80:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            electrical angle. Expressed in PWM_FREQ_SCALING * Hz. */
  81:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint32_t DPPConvFactor;             /*!< Conversion factor (65536/#PWM_FREQ_SCALING) used to conv
  82:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            from the unit defined by [SPEED_UNIT](measurement_units.
  83:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            [dpp](measurement_units.md). */
  84:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  85:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  86:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** } SpeednPosFdbk_Handle_t;
  87:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  88:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /**
  89:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @brief input structure type definition for SPD_CalcAngle
  90:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   */
  91:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** typedef struct
  92:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** {
  93:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   alphabeta_t  Valfa_beta;            /*!< Voltage Components in alfa beta reference frame */
  94:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   alphabeta_t  Ialfa_beta;            /*!< Current Components in alfa beta reference frame */
  95:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint16_t     Vbus;                  /*!< Virtual Bus Voltage information */
  96:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** } Observer_Inputs_t;
  97:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  98:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  99:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** int32_t SPD_GetMecAngle(const SpeednPosFdbk_Handle_t *pHandle);
 100:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
 101:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** int16_t SPD_GetAvrgMecSpeedUnit(const SpeednPosFdbk_Handle_t *pHandle);
 102:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
 103:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** int16_t SPD_GetElSpeedDpp(const SpeednPosFdbk_Handle_t *pHandle);
 104:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
 105:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** bool SPD_IsMecSpeedReliable(SpeednPosFdbk_Handle_t *pHandle, const int16_t *pMecSpeedUnit);
 106:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
 107:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** int16_t SPD_GetS16Speed(const SpeednPosFdbk_Handle_t *pHandle);
 108:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
 109:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** uint8_t SPD_GetElToMecRatio(const SpeednPosFdbk_Handle_t *pHandle);
 110:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
 111:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** void SPD_SetElToMecRatio(SpeednPosFdbk_Handle_t *pHandle, uint8_t bPP);
 112:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
 113:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /**
 114:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @brief  Returns the last computed rotor electrical angle, expressed in [s16degrees](measurement
 115:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @param  pHandle: handler of the current instance of the SpeednPosFdbk component.
 116:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @retval int16_t rotor electrical angle.
ARM GAS  /tmp/ccPF8NO0.s 			page 59


 117:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   */
 118:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** static inline int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
 119:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** {
 120:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #ifdef NULL_PTR_CHECK_SPD_POS_FBK
 121:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
 122:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #else
 123:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   return (pHandle->hElAngle);
 124:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #endif
 125:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** }
 126:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
 127:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /**
 128:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @brief  Returns the last instantaneous computed electrical speed, expressed in [dpp](measuremen
 129:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @param  pHandle: handler of the current instance of the SpeednPosFdbk component.
 130:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @retval int16_t rotor instantaneous electrical speed ([dpp](measurement_units.md)).
 131:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *
 132:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * - The control period is the period on which the rotor electrical angle is computed thanks to HA
 133:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *   functions.
 134:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * - Called during FOC drive control for Iqd currents regulation.
 135:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   */
 136:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** static inline int16_t SPD_GetInstElSpeedDpp(const SpeednPosFdbk_Handle_t *pHandle)
 137:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** {
 138:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #ifdef NULL_PTR_CHECK_SPD_POS_FBK
 139:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
 140:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #else
 141:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   return (pHandle->InstantaneousElSpeedDpp);
 142:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #endif
 143:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** }
 144:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
 145:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /**
 146:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @brief  Returns the result of the last reliability check performed.
 147:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @param  pHandle: handler of the current instance of the SpeednPosFdbk component.
 148:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @retval bool sensor reliability state.
 149:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *
 150:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * - Reliability is measured with reference to parameters
 151:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @ref SpeednPosFdbk_Handle_t::hMaxReliableMecSpeedUnit "hMaxReliableMecSpeedUnit",
 152:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @ref SpeednPosFdbk_Handle_t::hMinReliableMecSpeedUnit "hMaxReliableMecSpeedUnit",
 153:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @ref SpeednPosFdbk_Handle_t::bMaximumSpeedErrorsNumber "bMaximumSpeedErrorsNumber".
 154:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * - If the number of time the average mechanical speed is not valid matches the
 155:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *  maximum value of not valid speed measurements, sensor information is not reliable.
 156:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * - Embedded into construction of the MC_GetSpeedSensorReliabilityMotor API.
 157:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * - The return value is a boolean that expresses:\n
 158:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * -- true  = sensor information is reliable.\n
 159:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * -- false = sensor information is not reliable.
 160:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   */
 161:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** static inline bool SPD_Check(const SpeednPosFdbk_Handle_t *pHandle)
 1598              		.loc 3 161 20 view .LVU434
 1599              	.LBB50:
 162:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** {
 163:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   bool SpeedSensorReliability = true;
 1600              		.loc 3 163 3 view .LVU435
 164:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #ifdef NULL_PTR_CHECK_SPD_POS_FBK
 165:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   if ((MC_NULL == pHandle) || (pHandle->bSpeedErrorNumber == pHandle->bMaximumSpeedErrorsNumber))
 166:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #else
 167:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   if (pHandle->bSpeedErrorNumber == pHandle->bMaximumSpeedErrorsNumber)
 1601              		.loc 3 167 3 view .LVU436
 168:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #endif
 169:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   {
ARM GAS  /tmp/ccPF8NO0.s 			page 60


 170:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****     SpeedSensorReliability = false;
 171:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   }
 172:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   else
 173:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   {
 174:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****     /* Nothing to do */
 175:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   }
 1602              		.loc 3 175 3 view .LVU437
 176:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   return (SpeedSensorReliability);
 1603              		.loc 3 176 3 view .LVU438
 1604              		.loc 3 176 3 is_stmt 0 view .LVU439
 1605              	.LBE50:
 1606              	.LBE49:
1160:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1161:Src/mc_interface.c ****   }
1162:Src/mc_interface.c **** #endif
1163:Src/mc_interface.c **** 
1164:Src/mc_interface.c ****   return (status);
 1607              		.loc 1 1164 3 is_stmt 1 view .LVU440
 1608              	.LBB52:
 1609              	.LBB51:
 167:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #endif
 1610              		.loc 3 167 6 is_stmt 0 view .LVU441
 1611 0004 D878     		ldrb	r0, [r3, #3]	@ zero_extendqisi2
 1612              	.LVL132:
 167:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #endif
 1613              		.loc 3 167 6 view .LVU442
 1614 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1615              	.LVL133:
 167:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #endif
 1616              		.loc 3 167 6 view .LVU443
 1617              	.LBE51:
 1618              	.LBE52:
1165:Src/mc_interface.c **** }
 1619              		.loc 1 1165 1 view .LVU444
 1620 0008 C01A     		subs	r0, r0, r3
 1621              	.LVL134:
 1622              		.loc 1 1165 1 view .LVU445
 1623 000a 18BF     		it	ne
 1624 000c 0120     		movne	r0, #1
 1625 000e 7047     		bx	lr
 1626              		.cfi_endproc
 1627              	.LFE1743:
 1629              		.section	.text.MCI_GetAvrgMecSpeedUnit,"ax",%progbits
 1630              		.align	1
 1631              		.p2align 2,,3
 1632              		.weak	MCI_GetAvrgMecSpeedUnit
 1633              		.syntax unified
 1634              		.thumb
 1635              		.thumb_func
 1636              		.fpu fpv4-sp-d16
 1638              	MCI_GetAvrgMecSpeedUnit:
 1639              	.LVL135:
 1640              	.LFB1744:
1166:Src/mc_interface.c **** 
1167:Src/mc_interface.c **** /**
1168:Src/mc_interface.c ****   * @brief  Returns the last computed average mechanical speed, expressed in
1169:Src/mc_interface.c ****   *         the unit defined by #SPEED_UNIT and related to the sensor actually
ARM GAS  /tmp/ccPF8NO0.s 			page 61


1170:Src/mc_interface.c ****   *         used by FOC algorithm
1171:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1172:Src/mc_interface.c ****   */
1173:Src/mc_interface.c **** __weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
1174:Src/mc_interface.c **** {
 1641              		.loc 1 1174 1 is_stmt 1 view -0
 1642              		.cfi_startproc
 1643              		@ args = 0, pretend = 0, frame = 0
 1644              		@ frame_needed = 0, uses_anonymous_args = 0
 1645              		@ link register save eliminated.
1175:Src/mc_interface.c ****   int16_t temp_speed;
 1646              		.loc 1 1175 3 view .LVU447
1176:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1177:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1178:Src/mc_interface.c ****   {
1179:Src/mc_interface.c ****     temp_speed = 0;
1180:Src/mc_interface.c ****   }
1181:Src/mc_interface.c ****   else
1182:Src/mc_interface.c ****   {
1183:Src/mc_interface.c **** #endif
1184:Src/mc_interface.c ****     SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 1647              		.loc 1 1184 5 view .LVU448
 1648              	.LBB53:
 1649              	.LBI53:
 240:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** {
 1650              		.loc 2 240 39 view .LVU449
 1651              	.LBB54:
 1652              		.loc 2 245 3 view .LVU450
 1653              		.loc 2 245 3 is_stmt 0 view .LVU451
 1654              	.LBE54:
 1655              	.LBE53:
1185:Src/mc_interface.c ****     temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 1656              		.loc 1 1185 5 is_stmt 1 view .LVU452
 1657              	.LBB56:
 1658              	.LBB55:
 1659              		.loc 2 245 18 is_stmt 0 view .LVU453
 1660 0000 0368     		ldr	r3, [r0]
 1661              	.LBE55:
 1662              	.LBE56:
 1663              		.loc 1 1185 18 view .LVU454
 1664 0002 5869     		ldr	r0, [r3, #20]
 1665              	.LVL136:
 1666              		.loc 1 1185 18 view .LVU455
 1667 0004 FFF7FEBF 		b	SPD_GetAvrgMecSpeedUnit
 1668              	.LVL137:
 1669              		.loc 1 1185 18 view .LVU456
 1670              		.cfi_endproc
 1671              	.LFE1744:
 1673              		.section	.text.MCI_GetAvrgMecSpeed_F,"ax",%progbits
 1674              		.align	1
 1675              		.p2align 2,,3
 1676              		.weak	MCI_GetAvrgMecSpeed_F
 1677              		.syntax unified
 1678              		.thumb
 1679              		.thumb_func
 1680              		.fpu fpv4-sp-d16
 1682              	MCI_GetAvrgMecSpeed_F:
ARM GAS  /tmp/ccPF8NO0.s 			page 62


 1683              	.LVL138:
 1684              	.LFB1745:
1186:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1187:Src/mc_interface.c ****   }
1188:Src/mc_interface.c **** #endif
1189:Src/mc_interface.c ****   return (temp_speed);
1190:Src/mc_interface.c **** }
1191:Src/mc_interface.c **** 
1192:Src/mc_interface.c **** /**
1193:Src/mc_interface.c ****   * @brief  Returns the last computed average mechanical speed, expressed in rpm
1194:Src/mc_interface.c ****   *         and related to the sensor actually used by FOC algorithm.
1195:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1196:Src/mc_interface.c ****   */
1197:Src/mc_interface.c **** __weak float_t MCI_GetAvrgMecSpeed_F(MCI_Handle_t *pHandle)
1198:Src/mc_interface.c **** {
 1685              		.loc 1 1198 1 is_stmt 1 view -0
 1686              		.cfi_startproc
 1687              		@ args = 0, pretend = 0, frame = 0
 1688              		@ frame_needed = 0, uses_anonymous_args = 0
1199:Src/mc_interface.c ****   float_t returnAvrgSpeed;
 1689              		.loc 1 1199 3 view .LVU458
1200:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1201:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1202:Src/mc_interface.c ****   {
1203:Src/mc_interface.c ****     returnAvrgSpeed = 0.0f;
1204:Src/mc_interface.c ****   }
1205:Src/mc_interface.c ****   else
1206:Src/mc_interface.c ****   {
1207:Src/mc_interface.c **** #endif
1208:Src/mc_interface.c ****     SpeednPosFdbk_Handle_t *SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 1690              		.loc 1 1208 5 view .LVU459
 1691              	.LBB57:
 1692              	.LBI57:
 240:MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** {
 1693              		.loc 2 240 39 view .LVU460
 1694              	.LBB58:
 1695              		.loc 2 245 3 view .LVU461
 1696              		.loc 2 245 3 is_stmt 0 view .LVU462
 1697              	.LBE58:
 1698              	.LBE57:
1209:Src/mc_interface.c ****     returnAvrgSpeed = (((float_t)SPD_GetAvrgMecSpeedUnit(SpeedSensor) * (float_t)U_RPM) / (float_t)
 1699              		.loc 1 1209 5 is_stmt 1 view .LVU463
1198:Src/mc_interface.c ****   float_t returnAvrgSpeed;
 1700              		.loc 1 1198 1 is_stmt 0 view .LVU464
 1701 0000 08B5     		push	{r3, lr}
 1702              	.LCFI16:
 1703              		.cfi_def_cfa_offset 8
 1704              		.cfi_offset 3, -8
 1705              		.cfi_offset 14, -4
 1706              	.LBB60:
 1707              	.LBB59:
 1708              		.loc 2 245 18 view .LVU465
 1709 0002 0368     		ldr	r3, [r0]
 1710              	.LBE59:
 1711              	.LBE60:
 1712              		.loc 1 1209 34 view .LVU466
 1713 0004 5869     		ldr	r0, [r3, #20]
ARM GAS  /tmp/ccPF8NO0.s 			page 63


 1714              	.LVL139:
 1715              		.loc 1 1209 34 view .LVU467
 1716 0006 FFF7FEFF 		bl	SPD_GetAvrgMecSpeedUnit
 1717              	.LVL140:
1210:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1211:Src/mc_interface.c ****   }
1212:Src/mc_interface.c **** #endif
1213:Src/mc_interface.c ****   return (returnAvrgSpeed);
 1718              		.loc 1 1213 3 is_stmt 1 view .LVU468
1209:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1719              		.loc 1 1209 25 is_stmt 0 view .LVU469
 1720 000a 07EE900A 		vmov	s15, r0	@ int
1209:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1721              		.loc 1 1209 71 view .LVU470
 1722 000e 9FED057A 		vldr.32	s14, .L113
1209:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1723              		.loc 1 1209 25 view .LVU471
 1724 0012 F8EEE77A 		vcvt.f32.s32	s15, s15
1209:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1725              		.loc 1 1209 21 view .LVU472
 1726 0016 B2EE040A 		vmov.f32	s0, #1.0e+1
1209:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1727              		.loc 1 1209 71 view .LVU473
 1728 001a 67EE877A 		vmul.f32	s15, s15, s14
1214:Src/mc_interface.c **** }
 1729              		.loc 1 1214 1 view .LVU474
 1730 001e 87EE800A 		vdiv.f32	s0, s15, s0
 1731 0022 08BD     		pop	{r3, pc}
 1732              	.L114:
 1733              		.align	2
 1734              	.L113:
 1735 0024 00007042 		.word	1114636288
 1736              		.cfi_endproc
 1737              	.LFE1745:
 1739              		.section	.text.MCI_GetMecSpeedRefUnit,"ax",%progbits
 1740              		.align	1
 1741              		.p2align 2,,3
 1742              		.weak	MCI_GetMecSpeedRefUnit
 1743              		.syntax unified
 1744              		.thumb
 1745              		.thumb_func
 1746              		.fpu fpv4-sp-d16
 1748              	MCI_GetMecSpeedRefUnit:
 1749              	.LVL141:
 1750              	.LFB1746:
1215:Src/mc_interface.c **** 
1216:Src/mc_interface.c **** /**
1217:Src/mc_interface.c ****   * @brief  Returns the current mechanical rotor speed reference expressed in the unit defined by #
1218:Src/mc_interface.c ****   *
1219:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1220:Src/mc_interface.c ****   *
1221:Src/mc_interface.c ****   */
1222:Src/mc_interface.c **** __weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
1223:Src/mc_interface.c **** {
 1751              		.loc 1 1223 1 is_stmt 1 view -0
 1752              		.cfi_startproc
 1753              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccPF8NO0.s 			page 64


 1754              		@ frame_needed = 0, uses_anonymous_args = 0
 1755              		@ link register save eliminated.
1224:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1225:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
1226:Src/mc_interface.c **** #else
1227:Src/mc_interface.c ****   return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 1756              		.loc 1 1227 3 view .LVU476
 1757              		.loc 1 1227 11 is_stmt 0 view .LVU477
 1758 0000 0068     		ldr	r0, [r0]
 1759              	.LVL142:
 1760              		.loc 1 1227 11 view .LVU478
 1761 0002 FFF7FEBF 		b	STC_GetMecSpeedRefUnit
 1762              	.LVL143:
 1763              		.cfi_endproc
 1764              	.LFE1746:
 1766 0006 00BF     		.section	.text.MCI_GetMecSpeedRef_F,"ax",%progbits
 1767              		.align	1
 1768              		.p2align 2,,3
 1769              		.weak	MCI_GetMecSpeedRef_F
 1770              		.syntax unified
 1771              		.thumb
 1772              		.thumb_func
 1773              		.fpu fpv4-sp-d16
 1775              	MCI_GetMecSpeedRef_F:
 1776              	.LVL144:
 1777              	.LFB1747:
1228:Src/mc_interface.c **** #endif
1229:Src/mc_interface.c **** }
1230:Src/mc_interface.c **** 
1231:Src/mc_interface.c **** /**
1232:Src/mc_interface.c ****   * @brief  Returns the current mechanical rotor speed reference expressed in rpm.
1233:Src/mc_interface.c ****   *
1234:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1235:Src/mc_interface.c ****   *
1236:Src/mc_interface.c ****   */
1237:Src/mc_interface.c **** __weak float_t MCI_GetMecSpeedRef_F(MCI_Handle_t *pHandle)
1238:Src/mc_interface.c **** {
 1778              		.loc 1 1238 1 is_stmt 1 view -0
 1779              		.cfi_startproc
 1780              		@ args = 0, pretend = 0, frame = 0
 1781              		@ frame_needed = 0, uses_anonymous_args = 0
1239:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1240:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0.0f :
1241:Src/mc_interface.c ****           (((float_t)STC_GetMecSpeedRefUnit(pHandle->pSTC) * (float_t)U_RPM) / (float_t)SPEED_UNIT)
1242:Src/mc_interface.c **** #else
1243:Src/mc_interface.c ****   return ((((float_t)STC_GetMecSpeedRefUnit(pHandle->pSTC) * (float_t)U_RPM) / (float_t)SPEED_UNIT)
 1782              		.loc 1 1243 3 view .LVU480
1238:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1783              		.loc 1 1238 1 is_stmt 0 view .LVU481
 1784 0000 08B5     		push	{r3, lr}
 1785              	.LCFI17:
 1786              		.cfi_def_cfa_offset 8
 1787              		.cfi_offset 3, -8
 1788              		.cfi_offset 14, -4
 1789              		.loc 1 1243 22 view .LVU482
 1790 0002 0068     		ldr	r0, [r0]
 1791              	.LVL145:
ARM GAS  /tmp/ccPF8NO0.s 			page 65


 1792              		.loc 1 1243 22 view .LVU483
 1793 0004 FFF7FEFF 		bl	STC_GetMecSpeedRefUnit
 1794              	.LVL146:
 1795              		.loc 1 1243 13 view .LVU484
 1796 0008 07EE900A 		vmov	s15, r0	@ int
 1797              		.loc 1 1243 60 view .LVU485
 1798 000c 9FED057A 		vldr.32	s14, .L118
 1799              		.loc 1 1243 13 view .LVU486
 1800 0010 F8EEE77A 		vcvt.f32.s32	s15, s15
 1801              		.loc 1 1243 78 view .LVU487
 1802 0014 B2EE040A 		vmov.f32	s0, #1.0e+1
 1803              		.loc 1 1243 60 view .LVU488
 1804 0018 67EE877A 		vmul.f32	s15, s15, s14
1244:Src/mc_interface.c **** #endif
1245:Src/mc_interface.c **** }
 1805              		.loc 1 1245 1 view .LVU489
 1806 001c 87EE800A 		vdiv.f32	s0, s15, s0
 1807 0020 08BD     		pop	{r3, pc}
 1808              	.L119:
 1809 0022 00BF     		.align	2
 1810              	.L118:
 1811 0024 00007042 		.word	1114636288
 1812              		.cfi_endproc
 1813              	.LFE1747:
 1815              		.section	.text.MCI_GetIab,"ax",%progbits
 1816              		.align	1
 1817              		.p2align 2,,3
 1818              		.weak	MCI_GetIab
 1819              		.syntax unified
 1820              		.thumb
 1821              		.thumb_func
 1822              		.fpu fpv4-sp-d16
 1824              	MCI_GetIab:
 1825              	.LVL147:
 1826              	.LFB1748:
1246:Src/mc_interface.c **** 
1247:Src/mc_interface.c **** /**
1248:Src/mc_interface.c ****   * @brief  It returns stator current Iab in ab_t format
1249:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1250:Src/mc_interface.c ****   * @retval ab_t Stator current Iab
1251:Src/mc_interface.c ****   */
1252:Src/mc_interface.c **** __weak ab_t MCI_GetIab(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1253:Src/mc_interface.c **** {
 1827              		.loc 1 1253 1 is_stmt 1 view -0
 1828              		.cfi_startproc
 1829              		@ args = 0, pretend = 0, frame = 8
 1830              		@ frame_needed = 0, uses_anonymous_args = 0
 1831              		@ link register save eliminated.
1254:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1255:Src/mc_interface.c ****   ab_t tempVal;
1256:Src/mc_interface.c **** 
1257:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1258:Src/mc_interface.c ****   {
1259:Src/mc_interface.c ****     tempVal.a = 0;
1260:Src/mc_interface.c ****     tempVal.b = 0;
1261:Src/mc_interface.c ****   }
1262:Src/mc_interface.c ****   else
ARM GAS  /tmp/ccPF8NO0.s 			page 66


1263:Src/mc_interface.c ****   {
1264:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Iab;
1265:Src/mc_interface.c ****   }
1266:Src/mc_interface.c ****   return (tempVal);
1267:Src/mc_interface.c **** #else
1268:Src/mc_interface.c ****   return (pHandle->pFOCVars->Iab);
 1832              		.loc 1 1268 3 view .LVU491
 1833              		.loc 1 1268 28 is_stmt 0 view .LVU492
 1834 0000 4268     		ldr	r2, [r0, #4]
 1835 0002 1068     		ldr	r0, [r2]	@ unaligned
 1836              	.LVL148:
 1837              		.loc 1 1268 28 view .LVU493
 1838 0004 0023     		movs	r3, #0
 1839 0006 82B2     		uxth	r2, r0
 1840 0008 62F30F03 		bfi	r3, r2, #0, #16
 1841 000c 000C     		lsrs	r0, r0, #16
 1842 000e 60F31F43 		bfi	r3, r0, #16, #16
1253:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1843              		.loc 1 1253 1 view .LVU494
 1844 0012 82B0     		sub	sp, sp, #8
 1845              	.LCFI18:
 1846              		.cfi_def_cfa_offset 8
1269:Src/mc_interface.c **** #endif
1270:Src/mc_interface.c **** }
 1847              		.loc 1 1270 1 view .LVU495
 1848 0014 1846     		mov	r0, r3
 1849 0016 02B0     		add	sp, sp, #8
 1850              	.LCFI19:
 1851              		.cfi_def_cfa_offset 0
 1852              		@ sp needed
 1853 0018 7047     		bx	lr
 1854              		.cfi_endproc
 1855              	.LFE1748:
 1857 001a 00BF     		.section	.text.MCI_GetIab_F,"ax",%progbits
 1858              		.align	1
 1859              		.p2align 2,,3
 1860              		.weak	MCI_GetIab_F
 1861              		.syntax unified
 1862              		.thumb
 1863              		.thumb_func
 1864              		.fpu fpv4-sp-d16
 1866              	MCI_GetIab_F:
 1867              	.LVL149:
 1868              	.LFB1749:
1271:Src/mc_interface.c **** 
1272:Src/mc_interface.c **** __weak ab_f_t MCI_GetIab_F(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1273:Src/mc_interface.c **** {
 1869              		.loc 1 1273 1 is_stmt 1 view -0
 1870              		.cfi_startproc
 1871              		@ args = 0, pretend = 0, frame = 16
 1872              		@ frame_needed = 0, uses_anonymous_args = 0
 1873              		@ link register save eliminated.
1274:Src/mc_interface.c **** 
1275:Src/mc_interface.c ****   ab_f_t iab;
 1874              		.loc 1 1275 3 view .LVU497
1276:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1277:Src/mc_interface.c ****   if (MC_NULL == pHandle)
ARM GAS  /tmp/ccPF8NO0.s 			page 67


1278:Src/mc_interface.c ****   {
1279:Src/mc_interface.c ****     iab.a = 0.0f;
1280:Src/mc_interface.c ****     iab.b = 0.0f;
1281:Src/mc_interface.c ****   }
1282:Src/mc_interface.c ****   else
1283:Src/mc_interface.c ****   {
1284:Src/mc_interface.c **** #endif
1285:Src/mc_interface.c ****     iab.a = (float_t)((float_t)pHandle->pFOCVars->Iab.a * pHandle->pScale->current);
 1875              		.loc 1 1285 5 view .LVU498
 1876              		.loc 1 1285 39 is_stmt 0 view .LVU499
 1877 0000 4368     		ldr	r3, [r0, #4]
 1878              		.loc 1 1285 74 view .LVU500
 1879 0002 8269     		ldr	r2, [r0, #24]
1286:Src/mc_interface.c ****     iab.b = (float_t)((float_t)pHandle->pFOCVars->Iab.b * pHandle->pScale->current);
 1880              		.loc 1 1286 23 view .LVU501
 1881 0004 B3F90210 		ldrsh	r1, [r3, #2]
1285:Src/mc_interface.c ****     iab.b = (float_t)((float_t)pHandle->pFOCVars->Iab.b * pHandle->pScale->current);
 1882              		.loc 1 1285 23 view .LVU502
 1883 0008 B3F90030 		ldrsh	r3, [r3]
 1884              		.loc 1 1286 23 view .LVU503
 1885 000c 00EE901A 		vmov	s1, r1	@ int
1285:Src/mc_interface.c ****     iab.b = (float_t)((float_t)pHandle->pFOCVars->Iab.b * pHandle->pScale->current);
 1886              		.loc 1 1285 23 view .LVU504
 1887 0010 07EE903A 		vmov	s15, r3	@ int
1285:Src/mc_interface.c ****     iab.b = (float_t)((float_t)pHandle->pFOCVars->Iab.b * pHandle->pScale->current);
 1888              		.loc 1 1285 74 view .LVU505
 1889 0014 5368     		ldr	r3, [r2, #4]	@ unaligned
1285:Src/mc_interface.c ****     iab.b = (float_t)((float_t)pHandle->pFOCVars->Iab.b * pHandle->pScale->current);
 1890              		.loc 1 1285 23 view .LVU506
 1891 0016 F8EEE77A 		vcvt.f32.s32	s15, s15
1285:Src/mc_interface.c ****     iab.b = (float_t)((float_t)pHandle->pFOCVars->Iab.b * pHandle->pScale->current);
 1892              		.loc 1 1285 74 view .LVU507
 1893 001a 00EE103A 		vmov	s0, r3	@ int
 1894              	.LVL150:
 1895              		.loc 1 1286 5 is_stmt 1 view .LVU508
 1896              		.loc 1 1286 23 is_stmt 0 view .LVU509
 1897 001e F8EEE00A 		vcvt.f32.s32	s1, s1
 1898              	.LVL151:
1287:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1288:Src/mc_interface.c ****   }
1289:Src/mc_interface.c **** #endif
1290:Src/mc_interface.c ****   return (iab);
 1899              		.loc 1 1290 3 is_stmt 1 view .LVU510
1273:Src/mc_interface.c **** 
 1900              		.loc 1 1273 1 is_stmt 0 view .LVU511
 1901 0022 84B0     		sub	sp, sp, #16
 1902              	.LCFI20:
 1903              		.cfi_def_cfa_offset 16
1291:Src/mc_interface.c **** 
1292:Src/mc_interface.c **** }
 1904              		.loc 1 1292 1 view .LVU512
 1905 0024 60EE800A 		vmul.f32	s1, s1, s0
 1906 0028 27EE800A 		vmul.f32	s0, s15, s0
 1907 002c 04B0     		add	sp, sp, #16
 1908              	.LCFI21:
 1909              		.cfi_def_cfa_offset 0
 1910              		@ sp needed
ARM GAS  /tmp/ccPF8NO0.s 			page 68


 1911 002e 7047     		bx	lr
 1912              		.cfi_endproc
 1913              	.LFE1749:
 1915              		.section	.text.MCI_GetIalphabeta,"ax",%progbits
 1916              		.align	1
 1917              		.p2align 2,,3
 1918              		.weak	MCI_GetIalphabeta
 1919              		.syntax unified
 1920              		.thumb
 1921              		.thumb_func
 1922              		.fpu fpv4-sp-d16
 1924              	MCI_GetIalphabeta:
 1925              	.LVL152:
 1926              	.LFB1750:
1293:Src/mc_interface.c **** 
1294:Src/mc_interface.c **** /**
1295:Src/mc_interface.c ****   * @brief  It returns stator current Ialphabeta in alphabeta_t format
1296:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1297:Src/mc_interface.c ****   * @retval alphabeta_t Stator current Ialphabeta
1298:Src/mc_interface.c ****   */
1299:Src/mc_interface.c **** __weak alphabeta_t MCI_GetIalphabeta(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1300:Src/mc_interface.c **** {
 1927              		.loc 1 1300 1 is_stmt 1 view -0
 1928              		.cfi_startproc
 1929              		@ args = 0, pretend = 0, frame = 8
 1930              		@ frame_needed = 0, uses_anonymous_args = 0
 1931              		@ link register save eliminated.
1301:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1302:Src/mc_interface.c ****   alphabeta_t tempVal;
1303:Src/mc_interface.c **** 
1304:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1305:Src/mc_interface.c ****   {
1306:Src/mc_interface.c ****     tempVal.alpha = 0;
1307:Src/mc_interface.c ****     tempVal.beta = 0;
1308:Src/mc_interface.c ****   }
1309:Src/mc_interface.c ****   else
1310:Src/mc_interface.c ****   {
1311:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Ialphabeta;
1312:Src/mc_interface.c ****   }
1313:Src/mc_interface.c ****   return (tempVal);
1314:Src/mc_interface.c **** #else
1315:Src/mc_interface.c ****   return (pHandle->pFOCVars->Ialphabeta);
 1932              		.loc 1 1315 3 view .LVU514
 1933              		.loc 1 1315 28 is_stmt 0 view .LVU515
 1934 0000 4268     		ldr	r2, [r0, #4]
 1935 0002 5068     		ldr	r0, [r2, #4]	@ unaligned
 1936              	.LVL153:
 1937              		.loc 1 1315 28 view .LVU516
 1938 0004 0023     		movs	r3, #0
 1939 0006 82B2     		uxth	r2, r0
 1940 0008 62F30F03 		bfi	r3, r2, #0, #16
 1941 000c 000C     		lsrs	r0, r0, #16
 1942 000e 60F31F43 		bfi	r3, r0, #16, #16
1300:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1943              		.loc 1 1300 1 view .LVU517
 1944 0012 82B0     		sub	sp, sp, #8
 1945              	.LCFI22:
ARM GAS  /tmp/ccPF8NO0.s 			page 69


 1946              		.cfi_def_cfa_offset 8
1316:Src/mc_interface.c **** #endif
1317:Src/mc_interface.c **** }
 1947              		.loc 1 1317 1 view .LVU518
 1948 0014 1846     		mov	r0, r3
 1949 0016 02B0     		add	sp, sp, #8
 1950              	.LCFI23:
 1951              		.cfi_def_cfa_offset 0
 1952              		@ sp needed
 1953 0018 7047     		bx	lr
 1954              		.cfi_endproc
 1955              	.LFE1750:
 1957 001a 00BF     		.section	.text.MCI_GetIqd,"ax",%progbits
 1958              		.align	1
 1959              		.p2align 2,,3
 1960              		.weak	MCI_GetIqd
 1961              		.syntax unified
 1962              		.thumb
 1963              		.thumb_func
 1964              		.fpu fpv4-sp-d16
 1966              	MCI_GetIqd:
 1967              	.LVL154:
 1968              	.LFB1751:
1318:Src/mc_interface.c **** 
1319:Src/mc_interface.c **** /**
1320:Src/mc_interface.c ****   * @brief  It returns stator current Iqd in qd_t format
1321:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1322:Src/mc_interface.c ****   * @retval qd_t Stator current Iqd
1323:Src/mc_interface.c ****   */
1324:Src/mc_interface.c **** __weak qd_t MCI_GetIqd(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1325:Src/mc_interface.c **** {
 1969              		.loc 1 1325 1 is_stmt 1 view -0
 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 8
 1972              		@ frame_needed = 0, uses_anonymous_args = 0
 1973              		@ link register save eliminated.
1326:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1327:Src/mc_interface.c ****   qd_t tempVal;
1328:Src/mc_interface.c **** 
1329:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1330:Src/mc_interface.c ****   {
1331:Src/mc_interface.c ****     tempVal.q = 0;
1332:Src/mc_interface.c ****     tempVal.d = 0;
1333:Src/mc_interface.c ****   }
1334:Src/mc_interface.c ****   else
1335:Src/mc_interface.c ****   {
1336:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Iqd;
1337:Src/mc_interface.c ****   }
1338:Src/mc_interface.c ****   return (tempVal);
1339:Src/mc_interface.c **** #else
1340:Src/mc_interface.c ****   return (pHandle->pFOCVars->Iqd);
 1974              		.loc 1 1340 3 view .LVU520
 1975              		.loc 1 1340 28 is_stmt 0 view .LVU521
 1976 0000 4268     		ldr	r2, [r0, #4]
 1977 0002 D068     		ldr	r0, [r2, #12]	@ unaligned
 1978              	.LVL155:
 1979              		.loc 1 1340 28 view .LVU522
ARM GAS  /tmp/ccPF8NO0.s 			page 70


 1980 0004 0023     		movs	r3, #0
 1981 0006 82B2     		uxth	r2, r0
 1982 0008 62F30F03 		bfi	r3, r2, #0, #16
 1983 000c 000C     		lsrs	r0, r0, #16
 1984 000e 60F31F43 		bfi	r3, r0, #16, #16
1325:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1985              		.loc 1 1325 1 view .LVU523
 1986 0012 82B0     		sub	sp, sp, #8
 1987              	.LCFI24:
 1988              		.cfi_def_cfa_offset 8
1341:Src/mc_interface.c **** #endif
1342:Src/mc_interface.c **** }
 1989              		.loc 1 1342 1 view .LVU524
 1990 0014 1846     		mov	r0, r3
 1991 0016 02B0     		add	sp, sp, #8
 1992              	.LCFI25:
 1993              		.cfi_def_cfa_offset 0
 1994              		@ sp needed
 1995 0018 7047     		bx	lr
 1996              		.cfi_endproc
 1997              	.LFE1751:
 1999 001a 00BF     		.section	.text.MCI_GetIqd_F,"ax",%progbits
 2000              		.align	1
 2001              		.p2align 2,,3
 2002              		.weak	MCI_GetIqd_F
 2003              		.syntax unified
 2004              		.thumb
 2005              		.thumb_func
 2006              		.fpu fpv4-sp-d16
 2008              	MCI_GetIqd_F:
 2009              	.LVL156:
 2010              	.LFB1752:
1343:Src/mc_interface.c **** 
1344:Src/mc_interface.c **** /**
1345:Src/mc_interface.c ****   * @brief  It returns stator current Iqd in float_t format
1346:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1347:Src/mc_interface.c ****   * @retval qd_f_t Stator current Iqd (in Ampere)
1348:Src/mc_interface.c ****   */
1349:Src/mc_interface.c **** __weak qd_f_t MCI_GetIqd_F(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1350:Src/mc_interface.c **** {
 2011              		.loc 1 1350 1 is_stmt 1 view -0
 2012              		.cfi_startproc
 2013              		@ args = 0, pretend = 0, frame = 16
 2014              		@ frame_needed = 0, uses_anonymous_args = 0
 2015              		@ link register save eliminated.
1351:Src/mc_interface.c ****   qd_f_t iqd;
 2016              		.loc 1 1351 3 view .LVU526
1352:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1353:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1354:Src/mc_interface.c ****   {
1355:Src/mc_interface.c ****     iqd.d = 0.0f;
1356:Src/mc_interface.c ****     iqd.q = 0.0f;
1357:Src/mc_interface.c ****   }
1358:Src/mc_interface.c ****   else
1359:Src/mc_interface.c ****   {
1360:Src/mc_interface.c **** #endif
1361:Src/mc_interface.c ****   iqd.d = (float_t)((float_t)pHandle->pFOCVars->Iqd.d * pHandle->pScale->current);
ARM GAS  /tmp/ccPF8NO0.s 			page 71


 2017              		.loc 1 1361 3 view .LVU527
 2018              		.loc 1 1361 37 is_stmt 0 view .LVU528
 2019 0000 4368     		ldr	r3, [r0, #4]
 2020              		.loc 1 1361 72 view .LVU529
 2021 0002 8269     		ldr	r2, [r0, #24]
 2022              		.loc 1 1361 21 view .LVU530
 2023 0004 B3F90E10 		ldrsh	r1, [r3, #14]
1362:Src/mc_interface.c ****   iqd.q = (float_t)((float_t)pHandle->pFOCVars->Iqd.q * pHandle->pScale->current);
 2024              		.loc 1 1362 21 view .LVU531
 2025 0008 B3F90C30 		ldrsh	r3, [r3, #12]
1361:Src/mc_interface.c ****   iqd.q = (float_t)((float_t)pHandle->pFOCVars->Iqd.q * pHandle->pScale->current);
 2026              		.loc 1 1361 21 view .LVU532
 2027 000c 00EE901A 		vmov	s1, r1	@ int
 2028              		.loc 1 1362 21 view .LVU533
 2029 0010 07EE903A 		vmov	s15, r3	@ int
1361:Src/mc_interface.c ****   iqd.q = (float_t)((float_t)pHandle->pFOCVars->Iqd.q * pHandle->pScale->current);
 2030              		.loc 1 1361 72 view .LVU534
 2031 0014 5368     		ldr	r3, [r2, #4]	@ unaligned
 2032              		.loc 1 1362 21 view .LVU535
 2033 0016 F8EEE77A 		vcvt.f32.s32	s15, s15
1361:Src/mc_interface.c ****   iqd.q = (float_t)((float_t)pHandle->pFOCVars->Iqd.q * pHandle->pScale->current);
 2034              		.loc 1 1361 72 view .LVU536
 2035 001a 00EE103A 		vmov	s0, r3	@ int
1361:Src/mc_interface.c ****   iqd.q = (float_t)((float_t)pHandle->pFOCVars->Iqd.q * pHandle->pScale->current);
 2036              		.loc 1 1361 21 view .LVU537
 2037 001e F8EEE00A 		vcvt.f32.s32	s1, s1
 2038              	.LVL157:
 2039              		.loc 1 1362 3 is_stmt 1 view .LVU538
1363:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1364:Src/mc_interface.c ****   }
1365:Src/mc_interface.c **** #endif
1366:Src/mc_interface.c ****   return (iqd);
 2040              		.loc 1 1366 3 view .LVU539
1350:Src/mc_interface.c ****   qd_f_t iqd;
 2041              		.loc 1 1350 1 is_stmt 0 view .LVU540
 2042 0022 84B0     		sub	sp, sp, #16
 2043              	.LCFI26:
 2044              		.cfi_def_cfa_offset 16
1367:Src/mc_interface.c **** }
 2045              		.loc 1 1367 1 view .LVU541
 2046 0024 60EE800A 		vmul.f32	s1, s1, s0
 2047 0028 27EE800A 		vmul.f32	s0, s15, s0
 2048 002c 04B0     		add	sp, sp, #16
 2049              	.LCFI27:
 2050              		.cfi_def_cfa_offset 0
 2051              		@ sp needed
 2052 002e 7047     		bx	lr
 2053              		.cfi_endproc
 2054              	.LFE1752:
 2056              		.section	.text.MCI_GetIqdHF,"ax",%progbits
 2057              		.align	1
 2058              		.p2align 2,,3
 2059              		.weak	MCI_GetIqdHF
 2060              		.syntax unified
 2061              		.thumb
 2062              		.thumb_func
 2063              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccPF8NO0.s 			page 72


 2065              	MCI_GetIqdHF:
 2066              	.LVL158:
 2067              	.LFB1753:
1368:Src/mc_interface.c **** 
1369:Src/mc_interface.c **** /**
1370:Src/mc_interface.c ****   * @brief  It returns stator current IqdHF in qd_t format
1371:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1372:Src/mc_interface.c ****   * @retval qd_t Stator current IqdHF if HFI is selected as main
1373:Src/mc_interface.c ****   *         sensor. Otherwise it returns { 0, 0}.
1374:Src/mc_interface.c ****   */
1375:Src/mc_interface.c **** __weak qd_t MCI_GetIqdHF(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1376:Src/mc_interface.c **** {
 2068              		.loc 1 1376 1 is_stmt 1 view -0
 2069              		.cfi_startproc
 2070              		@ args = 0, pretend = 0, frame = 8
 2071              		@ frame_needed = 0, uses_anonymous_args = 0
 2072              		@ link register save eliminated.
1377:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1378:Src/mc_interface.c ****   qd_t tempVal;
1379:Src/mc_interface.c **** 
1380:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1381:Src/mc_interface.c ****   {
1382:Src/mc_interface.c ****     tempVal.q = 0;
1383:Src/mc_interface.c ****     tempVal.d = 0;
1384:Src/mc_interface.c ****   }
1385:Src/mc_interface.c ****   else
1386:Src/mc_interface.c ****   {
1387:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->IqdHF;
1388:Src/mc_interface.c ****   }
1389:Src/mc_interface.c ****   return (tempVal);
1390:Src/mc_interface.c **** #else
1391:Src/mc_interface.c ****   return (pHandle->pFOCVars->IqdHF);
 2073              		.loc 1 1391 3 view .LVU543
 2074              		.loc 1 1391 28 is_stmt 0 view .LVU544
 2075 0000 4268     		ldr	r2, [r0, #4]
 2076 0002 9068     		ldr	r0, [r2, #8]	@ unaligned
 2077              	.LVL159:
 2078              		.loc 1 1391 28 view .LVU545
 2079 0004 0023     		movs	r3, #0
 2080 0006 82B2     		uxth	r2, r0
 2081 0008 62F30F03 		bfi	r3, r2, #0, #16
 2082 000c 000C     		lsrs	r0, r0, #16
 2083 000e 60F31F43 		bfi	r3, r0, #16, #16
1376:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2084              		.loc 1 1376 1 view .LVU546
 2085 0012 82B0     		sub	sp, sp, #8
 2086              	.LCFI28:
 2087              		.cfi_def_cfa_offset 8
1392:Src/mc_interface.c **** #endif
1393:Src/mc_interface.c **** }
 2088              		.loc 1 1393 1 view .LVU547
 2089 0014 1846     		mov	r0, r3
 2090 0016 02B0     		add	sp, sp, #8
 2091              	.LCFI29:
 2092              		.cfi_def_cfa_offset 0
 2093              		@ sp needed
 2094 0018 7047     		bx	lr
ARM GAS  /tmp/ccPF8NO0.s 			page 73


 2095              		.cfi_endproc
 2096              	.LFE1753:
 2098 001a 00BF     		.section	.text.MCI_GetIqdref,"ax",%progbits
 2099              		.align	1
 2100              		.p2align 2,,3
 2101              		.weak	MCI_GetIqdref
 2102              		.syntax unified
 2103              		.thumb
 2104              		.thumb_func
 2105              		.fpu fpv4-sp-d16
 2107              	MCI_GetIqdref:
 2108              	.LVL160:
 2109              	.LFB1754:
1394:Src/mc_interface.c **** 
1395:Src/mc_interface.c **** /**
1396:Src/mc_interface.c ****   * @brief  It returns stator current Iqdref in qd_t format
1397:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1398:Src/mc_interface.c ****   * @retval qd_t Stator current Iqdref
1399:Src/mc_interface.c ****   */
1400:Src/mc_interface.c **** __weak qd_t MCI_GetIqdref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1401:Src/mc_interface.c **** {
 2110              		.loc 1 1401 1 is_stmt 1 view -0
 2111              		.cfi_startproc
 2112              		@ args = 0, pretend = 0, frame = 8
 2113              		@ frame_needed = 0, uses_anonymous_args = 0
 2114              		@ link register save eliminated.
1402:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1403:Src/mc_interface.c ****   qd_t tempVal;
1404:Src/mc_interface.c **** 
1405:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1406:Src/mc_interface.c ****   {
1407:Src/mc_interface.c ****     tempVal.q = 0;
1408:Src/mc_interface.c ****     tempVal.d = 0;
1409:Src/mc_interface.c ****   }
1410:Src/mc_interface.c ****   else
1411:Src/mc_interface.c ****   {
1412:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Iqdref;
1413:Src/mc_interface.c ****   }
1414:Src/mc_interface.c ****   return (tempVal);
1415:Src/mc_interface.c **** #else
1416:Src/mc_interface.c ****   return (pHandle->pFOCVars->Iqdref);
 2115              		.loc 1 1416 3 view .LVU549
 2116              		.loc 1 1416 28 is_stmt 0 view .LVU550
 2117 0000 4268     		ldr	r2, [r0, #4]
 2118 0002 1069     		ldr	r0, [r2, #16]	@ unaligned
 2119              	.LVL161:
 2120              		.loc 1 1416 28 view .LVU551
 2121 0004 0023     		movs	r3, #0
 2122 0006 82B2     		uxth	r2, r0
 2123 0008 62F30F03 		bfi	r3, r2, #0, #16
 2124 000c 000C     		lsrs	r0, r0, #16
 2125 000e 60F31F43 		bfi	r3, r0, #16, #16
1401:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2126              		.loc 1 1401 1 view .LVU552
 2127 0012 82B0     		sub	sp, sp, #8
 2128              	.LCFI30:
 2129              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccPF8NO0.s 			page 74


1417:Src/mc_interface.c **** #endif
1418:Src/mc_interface.c **** }
 2130              		.loc 1 1418 1 view .LVU553
 2131 0014 1846     		mov	r0, r3
 2132 0016 02B0     		add	sp, sp, #8
 2133              	.LCFI31:
 2134              		.cfi_def_cfa_offset 0
 2135              		@ sp needed
 2136 0018 7047     		bx	lr
 2137              		.cfi_endproc
 2138              	.LFE1754:
 2140 001a 00BF     		.section	.text.MCI_GetIqdref_F,"ax",%progbits
 2141              		.align	1
 2142              		.p2align 2,,3
 2143              		.weak	MCI_GetIqdref_F
 2144              		.syntax unified
 2145              		.thumb
 2146              		.thumb_func
 2147              		.fpu fpv4-sp-d16
 2149              	MCI_GetIqdref_F:
 2150              	.LVL162:
 2151              	.LFB1755:
1419:Src/mc_interface.c **** 
1420:Src/mc_interface.c **** /**
1421:Src/mc_interface.c ****   * @brief  It returns stator current Iqdref in float_t format
1422:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1423:Src/mc_interface.c ****   * @retval qd_f_t Stator current Iqdref (in Ampere)
1424:Src/mc_interface.c ****   */
1425:Src/mc_interface.c **** __weak qd_f_t MCI_GetIqdref_F(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1426:Src/mc_interface.c **** {
 2152              		.loc 1 1426 1 is_stmt 1 view -0
 2153              		.cfi_startproc
 2154              		@ args = 0, pretend = 0, frame = 16
 2155              		@ frame_needed = 0, uses_anonymous_args = 0
 2156              		@ link register save eliminated.
1427:Src/mc_interface.c ****   qd_f_t iqdref;
 2157              		.loc 1 1427 3 view .LVU555
1428:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1429:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1430:Src/mc_interface.c ****   {
1431:Src/mc_interface.c ****     iqdref.d = 0.0f;
1432:Src/mc_interface.c ****     iqdref.q = 0.0f;
1433:Src/mc_interface.c ****   }
1434:Src/mc_interface.c ****   else
1435:Src/mc_interface.c ****   {
1436:Src/mc_interface.c **** #endif
1437:Src/mc_interface.c ****     iqdref.d = (float_t)((float_t)pHandle->pFOCVars->Iqdref.d * pHandle->pScale->current);
 2158              		.loc 1 1437 5 view .LVU556
 2159              		.loc 1 1437 42 is_stmt 0 view .LVU557
 2160 0000 4368     		ldr	r3, [r0, #4]
 2161              		.loc 1 1437 80 view .LVU558
 2162 0002 8269     		ldr	r2, [r0, #24]
 2163              		.loc 1 1437 26 view .LVU559
 2164 0004 B3F91210 		ldrsh	r1, [r3, #18]
1438:Src/mc_interface.c ****     iqdref.q = (float_t)((float_t)pHandle->pFOCVars->Iqdref.q * pHandle->pScale->current);
 2165              		.loc 1 1438 26 view .LVU560
 2166 0008 B3F91030 		ldrsh	r3, [r3, #16]
ARM GAS  /tmp/ccPF8NO0.s 			page 75


1437:Src/mc_interface.c ****     iqdref.q = (float_t)((float_t)pHandle->pFOCVars->Iqdref.q * pHandle->pScale->current);
 2167              		.loc 1 1437 26 view .LVU561
 2168 000c 00EE901A 		vmov	s1, r1	@ int
 2169              		.loc 1 1438 26 view .LVU562
 2170 0010 07EE903A 		vmov	s15, r3	@ int
1437:Src/mc_interface.c ****     iqdref.q = (float_t)((float_t)pHandle->pFOCVars->Iqdref.q * pHandle->pScale->current);
 2171              		.loc 1 1437 80 view .LVU563
 2172 0014 5368     		ldr	r3, [r2, #4]	@ unaligned
 2173              		.loc 1 1438 26 view .LVU564
 2174 0016 F8EEE77A 		vcvt.f32.s32	s15, s15
1437:Src/mc_interface.c ****     iqdref.q = (float_t)((float_t)pHandle->pFOCVars->Iqdref.q * pHandle->pScale->current);
 2175              		.loc 1 1437 80 view .LVU565
 2176 001a 00EE103A 		vmov	s0, r3	@ int
1437:Src/mc_interface.c ****     iqdref.q = (float_t)((float_t)pHandle->pFOCVars->Iqdref.q * pHandle->pScale->current);
 2177              		.loc 1 1437 26 view .LVU566
 2178 001e F8EEE00A 		vcvt.f32.s32	s1, s1
 2179              	.LVL163:
 2180              		.loc 1 1438 5 is_stmt 1 view .LVU567
1439:Src/mc_interface.c ****  #ifdef NULL_PTR_CHECK_MC_INT
1440:Src/mc_interface.c ****   }
1441:Src/mc_interface.c **** #endif
1442:Src/mc_interface.c ****   return (iqdref);
 2181              		.loc 1 1442 3 view .LVU568
1426:Src/mc_interface.c ****   qd_f_t iqdref;
 2182              		.loc 1 1426 1 is_stmt 0 view .LVU569
 2183 0022 84B0     		sub	sp, sp, #16
 2184              	.LCFI32:
 2185              		.cfi_def_cfa_offset 16
1443:Src/mc_interface.c **** }
 2186              		.loc 1 1443 1 view .LVU570
 2187 0024 60EE800A 		vmul.f32	s1, s1, s0
 2188 0028 27EE800A 		vmul.f32	s0, s15, s0
 2189 002c 04B0     		add	sp, sp, #16
 2190              	.LCFI33:
 2191              		.cfi_def_cfa_offset 0
 2192              		@ sp needed
 2193 002e 7047     		bx	lr
 2194              		.cfi_endproc
 2195              	.LFE1755:
 2197              		.section	.text.MCI_GetVqd,"ax",%progbits
 2198              		.align	1
 2199              		.p2align 2,,3
 2200              		.weak	MCI_GetVqd
 2201              		.syntax unified
 2202              		.thumb
 2203              		.thumb_func
 2204              		.fpu fpv4-sp-d16
 2206              	MCI_GetVqd:
 2207              	.LVL164:
 2208              	.LFB1756:
1444:Src/mc_interface.c **** 
1445:Src/mc_interface.c **** /**
1446:Src/mc_interface.c ****   * @brief  It returns stator current Vqd in qd_t format
1447:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1448:Src/mc_interface.c ****   * @retval qd_t Stator current Vqd
1449:Src/mc_interface.c ****   */
1450:Src/mc_interface.c **** __weak qd_t MCI_GetVqd(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
ARM GAS  /tmp/ccPF8NO0.s 			page 76


1451:Src/mc_interface.c **** {
 2209              		.loc 1 1451 1 is_stmt 1 view -0
 2210              		.cfi_startproc
 2211              		@ args = 0, pretend = 0, frame = 8
 2212              		@ frame_needed = 0, uses_anonymous_args = 0
 2213              		@ link register save eliminated.
1452:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1453:Src/mc_interface.c ****   qd_t tempVal;
1454:Src/mc_interface.c **** 
1455:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1456:Src/mc_interface.c ****   {
1457:Src/mc_interface.c ****     tempVal.q = 0;
1458:Src/mc_interface.c ****     tempVal.d = 0;
1459:Src/mc_interface.c ****   }
1460:Src/mc_interface.c ****   else
1461:Src/mc_interface.c ****   {
1462:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Vqd;
1463:Src/mc_interface.c ****   }
1464:Src/mc_interface.c ****   return (tempVal);
1465:Src/mc_interface.c **** #else
1466:Src/mc_interface.c ****   return (pHandle->pFOCVars->Vqd);
 2214              		.loc 1 1466 3 view .LVU572
 2215              		.loc 1 1466 28 is_stmt 0 view .LVU573
 2216 0000 4268     		ldr	r2, [r0, #4]
 2217 0002 D2F81600 		ldr	r0, [r2, #22]	@ unaligned
 2218              	.LVL165:
 2219              		.loc 1 1466 28 view .LVU574
 2220 0006 0023     		movs	r3, #0
 2221 0008 82B2     		uxth	r2, r0
 2222 000a 62F30F03 		bfi	r3, r2, #0, #16
 2223 000e 000C     		lsrs	r0, r0, #16
 2224 0010 60F31F43 		bfi	r3, r0, #16, #16
1451:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2225              		.loc 1 1451 1 view .LVU575
 2226 0014 82B0     		sub	sp, sp, #8
 2227              	.LCFI34:
 2228              		.cfi_def_cfa_offset 8
1467:Src/mc_interface.c **** #endif
1468:Src/mc_interface.c **** }
 2229              		.loc 1 1468 1 view .LVU576
 2230 0016 1846     		mov	r0, r3
 2231 0018 02B0     		add	sp, sp, #8
 2232              	.LCFI35:
 2233              		.cfi_def_cfa_offset 0
 2234              		@ sp needed
 2235 001a 7047     		bx	lr
 2236              		.cfi_endproc
 2237              	.LFE1756:
 2239              		.section	.text.MCI_GetValphabeta,"ax",%progbits
 2240              		.align	1
 2241              		.p2align 2,,3
 2242              		.weak	MCI_GetValphabeta
 2243              		.syntax unified
 2244              		.thumb
 2245              		.thumb_func
 2246              		.fpu fpv4-sp-d16
 2248              	MCI_GetValphabeta:
ARM GAS  /tmp/ccPF8NO0.s 			page 77


 2249              	.LVL166:
 2250              	.LFB1757:
1469:Src/mc_interface.c **** 
1470:Src/mc_interface.c **** /**
1471:Src/mc_interface.c ****   * @brief  It returns stator current Valphabeta in alphabeta_t format
1472:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1473:Src/mc_interface.c ****   * @retval alphabeta_t Stator current Valphabeta
1474:Src/mc_interface.c ****   */
1475:Src/mc_interface.c **** __weak alphabeta_t MCI_GetValphabeta(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1476:Src/mc_interface.c **** {
 2251              		.loc 1 1476 1 is_stmt 1 view -0
 2252              		.cfi_startproc
 2253              		@ args = 0, pretend = 0, frame = 8
 2254              		@ frame_needed = 0, uses_anonymous_args = 0
 2255              		@ link register save eliminated.
1477:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1478:Src/mc_interface.c ****   alphabeta_t tempVal;
1479:Src/mc_interface.c **** 
1480:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1481:Src/mc_interface.c ****   {
1482:Src/mc_interface.c ****     tempVal.alpha = 0;
1483:Src/mc_interface.c ****     tempVal.beta = 0;
1484:Src/mc_interface.c ****   }
1485:Src/mc_interface.c ****   else
1486:Src/mc_interface.c ****   {
1487:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Valphabeta;
1488:Src/mc_interface.c ****   }
1489:Src/mc_interface.c ****   return (tempVal);
1490:Src/mc_interface.c **** #else
1491:Src/mc_interface.c ****   return (pHandle->pFOCVars->Valphabeta);
 2256              		.loc 1 1491 3 view .LVU578
 2257              		.loc 1 1491 28 is_stmt 0 view .LVU579
 2258 0000 4268     		ldr	r2, [r0, #4]
 2259 0002 D2F81A00 		ldr	r0, [r2, #26]	@ unaligned
 2260              	.LVL167:
 2261              		.loc 1 1491 28 view .LVU580
 2262 0006 0023     		movs	r3, #0
 2263 0008 82B2     		uxth	r2, r0
 2264 000a 62F30F03 		bfi	r3, r2, #0, #16
 2265 000e 000C     		lsrs	r0, r0, #16
 2266 0010 60F31F43 		bfi	r3, r0, #16, #16
1476:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2267              		.loc 1 1476 1 view .LVU581
 2268 0014 82B0     		sub	sp, sp, #8
 2269              	.LCFI36:
 2270              		.cfi_def_cfa_offset 8
1492:Src/mc_interface.c **** #endif
1493:Src/mc_interface.c **** }
 2271              		.loc 1 1493 1 view .LVU582
 2272 0016 1846     		mov	r0, r3
 2273 0018 02B0     		add	sp, sp, #8
 2274              	.LCFI37:
 2275              		.cfi_def_cfa_offset 0
 2276              		@ sp needed
 2277 001a 7047     		bx	lr
 2278              		.cfi_endproc
 2279              	.LFE1757:
ARM GAS  /tmp/ccPF8NO0.s 			page 78


 2281              		.section	.text.MCI_GetElAngledpp,"ax",%progbits
 2282              		.align	1
 2283              		.p2align 2,,3
 2284              		.weak	MCI_GetElAngledpp
 2285              		.syntax unified
 2286              		.thumb
 2287              		.thumb_func
 2288              		.fpu fpv4-sp-d16
 2290              	MCI_GetElAngledpp:
 2291              	.LVL168:
 2292              	.LFB1758:
1494:Src/mc_interface.c **** 
1495:Src/mc_interface.c **** /**
1496:Src/mc_interface.c ****   * @brief  It returns the rotor electrical angle actually used for reference
1497:Src/mc_interface.c ****   *         frame transformation
1498:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1499:Src/mc_interface.c ****   * @retval int16_t Rotor electrical angle in dpp format
1500:Src/mc_interface.c ****   */
1501:Src/mc_interface.c **** __weak int16_t MCI_GetElAngledpp(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1502:Src/mc_interface.c **** {
 2293              		.loc 1 1502 1 is_stmt 1 view -0
 2294              		.cfi_startproc
 2295              		@ args = 0, pretend = 0, frame = 0
 2296              		@ frame_needed = 0, uses_anonymous_args = 0
 2297              		@ link register save eliminated.
1503:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1504:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hElAngle);
1505:Src/mc_interface.c **** #else
1506:Src/mc_interface.c ****   return (pHandle->pFOCVars->hElAngle);
 2298              		.loc 1 1506 3 view .LVU584
 2299              		.loc 1 1506 28 is_stmt 0 view .LVU585
 2300 0000 4368     		ldr	r3, [r0, #4]
1507:Src/mc_interface.c **** #endif
1508:Src/mc_interface.c **** }
 2301              		.loc 1 1508 1 view .LVU586
 2302 0002 B3F92000 		ldrsh	r0, [r3, #32]
 2303              	.LVL169:
 2304              		.loc 1 1508 1 view .LVU587
 2305 0006 7047     		bx	lr
 2306              		.cfi_endproc
 2307              	.LFE1758:
 2309              		.section	.text.MCI_GetTeref,"ax",%progbits
 2310              		.align	1
 2311              		.p2align 2,,3
 2312              		.weak	MCI_GetTeref
 2313              		.syntax unified
 2314              		.thumb
 2315              		.thumb_func
 2316              		.fpu fpv4-sp-d16
 2318              	MCI_GetTeref:
 2319              	.LVL170:
 2320              	.LFB1759:
1509:Src/mc_interface.c **** 
1510:Src/mc_interface.c **** /**
1511:Src/mc_interface.c ****   * @brief  It returns the reference electrical torque, fed to derived class for
1512:Src/mc_interface.c ****   *         Iqref and Idref computation
1513:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
ARM GAS  /tmp/ccPF8NO0.s 			page 79


1514:Src/mc_interface.c ****   * @retval int16_t Teref
1515:Src/mc_interface.c ****   */
1516:Src/mc_interface.c **** __weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1517:Src/mc_interface.c **** {
 2321              		.loc 1 1517 1 is_stmt 1 view -0
 2322              		.cfi_startproc
 2323              		@ args = 0, pretend = 0, frame = 0
 2324              		@ frame_needed = 0, uses_anonymous_args = 0
 2325              		@ link register save eliminated.
1518:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1519:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
1520:Src/mc_interface.c **** #else
1521:Src/mc_interface.c ****   return (pHandle->pFOCVars->hTeref);
 2326              		.loc 1 1521 3 view .LVU589
 2327              		.loc 1 1521 28 is_stmt 0 view .LVU590
 2328 0000 4368     		ldr	r3, [r0, #4]
1522:Src/mc_interface.c **** #endif
1523:Src/mc_interface.c **** }
 2329              		.loc 1 1523 1 view .LVU591
 2330 0002 B3F91E00 		ldrsh	r0, [r3, #30]
 2331              	.LVL171:
 2332              		.loc 1 1523 1 view .LVU592
 2333 0006 7047     		bx	lr
 2334              		.cfi_endproc
 2335              	.LFE1759:
 2337              		.section	.text.MCI_GetTeref_F,"ax",%progbits
 2338              		.align	1
 2339              		.p2align 2,,3
 2340              		.weak	MCI_GetTeref_F
 2341              		.syntax unified
 2342              		.thumb
 2343              		.thumb_func
 2344              		.fpu fpv4-sp-d16
 2346              	MCI_GetTeref_F:
 2347              	.LVL172:
 2348              	.LFB1760:
1524:Src/mc_interface.c **** 
1525:Src/mc_interface.c **** /**
1526:Src/mc_interface.c ****   * @brief  It returns the reference electrical torque.
1527:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1528:Src/mc_interface.c ****   * @retval float_t Teref
1529:Src/mc_interface.c ****   */
1530:Src/mc_interface.c **** __weak float_t MCI_GetTeref_F(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1531:Src/mc_interface.c **** {
 2349              		.loc 1 1531 1 is_stmt 1 view -0
 2350              		.cfi_startproc
 2351              		@ args = 0, pretend = 0, frame = 0
 2352              		@ frame_needed = 0, uses_anonymous_args = 0
 2353              		@ link register save eliminated.
1532:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1533:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0.0f : ((float_t)pHandle->pFOCVars->hTeref * (float_t)pHandle->pSc
1534:Src/mc_interface.c **** #else
1535:Src/mc_interface.c ****   return ((float_t)pHandle->pFOCVars->hTeref * (float_t)pHandle->pScale->current);
 2354              		.loc 1 1535 3 view .LVU594
 2355              		.loc 1 1535 37 is_stmt 0 view .LVU595
 2356 0000 4268     		ldr	r2, [r0, #4]
 2357              		.loc 1 1535 72 view .LVU596
ARM GAS  /tmp/ccPF8NO0.s 			page 80


 2358 0002 8369     		ldr	r3, [r0, #24]
 2359              		.loc 1 1535 11 view .LVU597
 2360 0004 B2F91E20 		ldrsh	r2, [r2, #30]
 2361              		.loc 1 1535 72 view .LVU598
 2362 0008 5B68     		ldr	r3, [r3, #4]	@ unaligned
 2363              		.loc 1 1535 11 view .LVU599
 2364 000a 07EE902A 		vmov	s15, r2	@ int
 2365              		.loc 1 1535 72 view .LVU600
 2366 000e 00EE103A 		vmov	s0, r3	@ int
 2367              		.loc 1 1535 11 view .LVU601
 2368 0012 F8EEE77A 		vcvt.f32.s32	s15, s15
1536:Src/mc_interface.c **** #endif
1537:Src/mc_interface.c **** }
 2369              		.loc 1 1537 1 view .LVU602
 2370 0016 27EE800A 		vmul.f32	s0, s15, s0
 2371 001a 7047     		bx	lr
 2372              		.cfi_endproc
 2373              	.LFE1760:
 2375              		.section	.text.MCI_GetPhaseCurrentAmplitude,"ax",%progbits
 2376              		.align	1
 2377              		.p2align 2,,3
 2378              		.weak	MCI_GetPhaseCurrentAmplitude
 2379              		.syntax unified
 2380              		.thumb
 2381              		.thumb_func
 2382              		.fpu fpv4-sp-d16
 2384              	MCI_GetPhaseCurrentAmplitude:
 2385              	.LVL173:
 2386              	.LFB1761:
1538:Src/mc_interface.c **** 
1539:Src/mc_interface.c **** /**
1540:Src/mc_interface.c ****   * @brief  It returns the motor phase current amplitude (0-to-peak) in s16A
1541:Src/mc_interface.c ****   *         To convert s16A into Ampere following formula must be used:
1542:Src/mc_interface.c ****   *         Current(Amp) = [Current(s16A) * Vdd micro] / [65536 * Rshunt * Aop]
1543:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1544:Src/mc_interface.c ****   * @retval int16_t Motor phase current (0-to-peak) in s16A
1545:Src/mc_interface.c ****   */
1546:Src/mc_interface.c **** __weak int16_t MCI_GetPhaseCurrentAmplitude(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1547:Src/mc_interface.c **** {
 2387              		.loc 1 1547 1 is_stmt 1 view -0
 2388              		.cfi_startproc
 2389              		@ args = 0, pretend = 0, frame = 0
 2390              		@ frame_needed = 0, uses_anonymous_args = 0
 2391              		@ link register save eliminated.
1548:Src/mc_interface.c ****   alphabeta_t Local_Curr;
 2392              		.loc 1 1548 3 view .LVU604
1549:Src/mc_interface.c ****   int16_t wAux;
 2393              		.loc 1 1549 3 view .LVU605
1550:Src/mc_interface.c **** 
1551:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1552:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1553:Src/mc_interface.c ****   {
1554:Src/mc_interface.c ****     wAux = 0;
1555:Src/mc_interface.c ****   }
1556:Src/mc_interface.c ****   else
1557:Src/mc_interface.c ****   {
1558:Src/mc_interface.c **** #endif
ARM GAS  /tmp/ccPF8NO0.s 			page 81


1559:Src/mc_interface.c ****   Local_Curr = pHandle->pFOCVars->Ialphabeta;
 2394              		.loc 1 1559 3 view .LVU606
 2395              	.LBB61:
 2396              	.LBB62:
 2397              		.file 4 "Inc/mc_math.h"
   1:Inc/mc_math.h **** 
   2:Inc/mc_math.h **** /**
   3:Inc/mc_math.h ****   ******************************************************************************
   4:Inc/mc_math.h ****   * @file    mc_math.h
   5:Inc/mc_math.h ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Inc/mc_math.h ****   * @brief   This file provides mathematics functions useful for and specific to
   7:Inc/mc_math.h ****   *          Motor Control.
   8:Inc/mc_math.h ****   *
   9:Inc/mc_math.h ****   ******************************************************************************
  10:Inc/mc_math.h ****   * @attention
  11:Inc/mc_math.h ****   *
  12:Inc/mc_math.h ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  13:Inc/mc_math.h ****   * All rights reserved.</center></h2>
  14:Inc/mc_math.h ****   *
  15:Inc/mc_math.h ****   * This software component is licensed by ST under Ultimate Liberty license
  16:Inc/mc_math.h ****   * SLA0044, the "License"; You may not use this file except in compliance with
  17:Inc/mc_math.h ****   * the License. You may obtain a copy of the License at:
  18:Inc/mc_math.h ****   *                             www.st.com/SLA0044
  19:Inc/mc_math.h ****   *
  20:Inc/mc_math.h ****   ******************************************************************************
  21:Inc/mc_math.h ****   * @ingroup MC_Math
  22:Inc/mc_math.h ****   */
  23:Inc/mc_math.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  24:Inc/mc_math.h **** #ifndef MC_MATH_H
  25:Inc/mc_math.h **** #define MC_MATH_H
  26:Inc/mc_math.h **** 
  27:Inc/mc_math.h **** /* Includes ------------------------------------------------------------------*/
  28:Inc/mc_math.h **** #include "mc_type.h"
  29:Inc/mc_math.h **** 
  30:Inc/mc_math.h **** /** @addtogroup MCSDK
  31:Inc/mc_math.h ****   * @{
  32:Inc/mc_math.h ****   */
  33:Inc/mc_math.h **** 
  34:Inc/mc_math.h **** /** @addtogroup MC_Math
  35:Inc/mc_math.h ****   * @{
  36:Inc/mc_math.h ****   */
  37:Inc/mc_math.h **** #define SQRT_2  1.4142
  38:Inc/mc_math.h **** #define SQRT_3  1.732
  39:Inc/mc_math.h **** 
  40:Inc/mc_math.h **** /* CORDIC coprocessor configuration register settings */
  41:Inc/mc_math.h **** 
  42:Inc/mc_math.h **** /* CORDIC FUNCTION: PHASE q1.31 (Electrical Angle computation) */
  43:Inc/mc_math.h **** #define CORDIC_CONFIG_PHASE     (LL_CORDIC_FUNCTION_PHASE | LL_CORDIC_PRECISION_6CYCLES | LL_CORDIC
  44:Inc/mc_math.h ****          LL_CORDIC_NBWRITE_2 | LL_CORDIC_NBREAD_1 |\
  45:Inc/mc_math.h ****          LL_CORDIC_INSIZE_32BITS | LL_CORDIC_OUTSIZE_32BITS)
  46:Inc/mc_math.h **** 
  47:Inc/mc_math.h **** /* CORDIC FUNCTION: SQUAREROOT q1.31 */
  48:Inc/mc_math.h **** #define CORDIC_CONFIG_SQRT      (LL_CORDIC_FUNCTION_SQUAREROOT | LL_CORDIC_PRECISION_6CYCLES | LL_C
  49:Inc/mc_math.h ****          LL_CORDIC_NBWRITE_1 | LL_CORDIC_NBREAD_1 |\
  50:Inc/mc_math.h ****          LL_CORDIC_INSIZE_32BITS | LL_CORDIC_OUTSIZE_32BITS)
  51:Inc/mc_math.h **** 
  52:Inc/mc_math.h **** /* CORDIC FUNCTION: COSINE q1.15 */
ARM GAS  /tmp/ccPF8NO0.s 			page 82


  53:Inc/mc_math.h **** #define CORDIC_CONFIG_COSINE    (LL_CORDIC_FUNCTION_COSINE | LL_CORDIC_PRECISION_6CYCLES | LL_CORDI
  54:Inc/mc_math.h ****          LL_CORDIC_NBWRITE_1 | LL_CORDIC_NBREAD_1 |\
  55:Inc/mc_math.h ****          LL_CORDIC_INSIZE_16BITS | LL_CORDIC_OUTSIZE_16BITS)
  56:Inc/mc_math.h **** 
  57:Inc/mc_math.h **** /* CORDIC FUNCTION: MODULUS q1.15 */
  58:Inc/mc_math.h **** #define CORDIC_CONFIG_MODULUS   (LL_CORDIC_FUNCTION_MODULUS | LL_CORDIC_PRECISION_6CYCLES | LL_CORD
  59:Inc/mc_math.h ****          LL_CORDIC_NBWRITE_1 | LL_CORDIC_NBREAD_1 |\
  60:Inc/mc_math.h ****          LL_CORDIC_INSIZE_16BITS | LL_CORDIC_OUTSIZE_16BITS)
  61:Inc/mc_math.h **** 
  62:Inc/mc_math.h **** /**
  63:Inc/mc_math.h ****   * @brief  Macro to compute logarithm of two
  64:Inc/mc_math.h ****   */
  65:Inc/mc_math.h **** #define LOG2(x) \
  66:Inc/mc_math.h ****   (((x) == 65535 ) ? 16 : \
  67:Inc/mc_math.h ****    (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 15 : \
  68:Inc/mc_math.h ****     (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 14 : \
  69:Inc/mc_math.h ****      (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 13 : \
  70:Inc/mc_math.h ****       (((x) == (2*2*2*2*2*2*2*2*2*2*2*2)) ? 12 : \
  71:Inc/mc_math.h ****        (((x) == (2*2*2*2*2*2*2*2*2*2*2)) ? 11 : \
  72:Inc/mc_math.h ****         (((x) == (2*2*2*2*2*2*2*2*2*2)) ? 10 : \
  73:Inc/mc_math.h ****          (((x) == (2*2*2*2*2*2*2*2*2)) ? 9 : \
  74:Inc/mc_math.h ****           (((x) == (2*2*2*2*2*2*2*2)) ? 8 : \
  75:Inc/mc_math.h ****            (((x) == (2*2*2*2*2*2*2)) ? 7 : \
  76:Inc/mc_math.h ****             (((x) == (2*2*2*2*2*2)) ? 6 : \
  77:Inc/mc_math.h ****              (((x) == (2*2*2*2*2)) ? 5 : \
  78:Inc/mc_math.h ****               (((x) == (2*2*2*2)) ? 4 : \
  79:Inc/mc_math.h ****                (((x) == (2*2*2)) ? 3 : \
  80:Inc/mc_math.h ****                 (((x) == (2*2)) ? 2 : \
  81:Inc/mc_math.h ****                  (((x) == 2) ? 1 : \
  82:Inc/mc_math.h ****                   (((x) == 1) ? 0 : -1)))))))))))))))))
  83:Inc/mc_math.h **** 
  84:Inc/mc_math.h **** /**
  85:Inc/mc_math.h ****   * @brief  Trigonometrical functions type definition
  86:Inc/mc_math.h ****   */
  87:Inc/mc_math.h **** typedef struct
  88:Inc/mc_math.h **** {
  89:Inc/mc_math.h ****   int16_t hCos;
  90:Inc/mc_math.h ****   int16_t hSin;
  91:Inc/mc_math.h **** } Trig_Components;
  92:Inc/mc_math.h **** 
  93:Inc/mc_math.h **** /**
  94:Inc/mc_math.h ****   * @brief  This function transforms stator currents Ia and qIb (which are
  95:Inc/mc_math.h ****   *         directed along axes each displaced by 120 degrees) into currents
  96:Inc/mc_math.h ****   *         Ialpha and Ibeta in a stationary qd reference frame.
  97:Inc/mc_math.h ****   *                               Ialpha = Ia
  98:Inc/mc_math.h ****   *                       Ibeta = -(2*Ib+Ia)/sqrt(3)
  99:Inc/mc_math.h ****   * @param  Curr_Input: stator current Ia and Ib in ab_t format.
 100:Inc/mc_math.h ****   * @retval Stator current Ialpha and Ibeta in alphabeta_t format.
 101:Inc/mc_math.h ****   */
 102:Inc/mc_math.h **** alphabeta_t MCM_Clarke(ab_t Input);
 103:Inc/mc_math.h **** 
 104:Inc/mc_math.h **** /**
 105:Inc/mc_math.h ****   * @brief  This function transforms stator values alpha and beta, which
 106:Inc/mc_math.h ****   *         belong to a stationary qd reference frame, to a rotor flux
 107:Inc/mc_math.h ****   *         synchronous reference frame (properly oriented), so as Iq and Id.
 108:Inc/mc_math.h ****   *                   Id= Ialpha *sin(theta)+qIbeta *cos(Theta)
 109:Inc/mc_math.h ****   *                   Iq=qIalpha *cos(Theta)-qIbeta *sin(Theta)
ARM GAS  /tmp/ccPF8NO0.s 			page 83


 110:Inc/mc_math.h ****   * @param  Curr_Input: stator values alpha and beta in alphabeta_t format.
 111:Inc/mc_math.h ****   * @param  Theta: rotating frame angular position in q1.15 format.
 112:Inc/mc_math.h ****   * @retval Stator current q and d in qd_t format.
 113:Inc/mc_math.h ****   */
 114:Inc/mc_math.h **** qd_t MCM_Park(alphabeta_t Input, int16_t Theta);
 115:Inc/mc_math.h **** 
 116:Inc/mc_math.h **** /**
 117:Inc/mc_math.h ****   * @brief  This function transforms stator voltage qVq and qVd, that belong to
 118:Inc/mc_math.h ****   *         a rotor flux synchronous rotating frame, to a stationary reference
 119:Inc/mc_math.h ****   *         frame, so as to obtain qValpha and qVbeta:
 120:Inc/mc_math.h ****   *                  Valfa= Vq*Cos(theta)+ Vd*Sin(theta)
 121:Inc/mc_math.h ****   *                  Vbeta=-Vq*Sin(theta)+ Vd*Cos(theta)
 122:Inc/mc_math.h ****   * @param  Curr_Input: stator voltage Vq and Vd in qd_t format.
 123:Inc/mc_math.h ****   * @param  Theta: rotating frame angular position in q1.15 format.
 124:Inc/mc_math.h ****   * @retval Stator values alpha and beta in alphabeta_t format.
 125:Inc/mc_math.h ****   */
 126:Inc/mc_math.h **** alphabeta_t MCM_Rev_Park(qd_t Input, int16_t Theta);
 127:Inc/mc_math.h **** 
 128:Inc/mc_math.h **** /**
 129:Inc/mc_math.h ****   * @brief  This function returns cosine and sine functions of the angle fed in input.
 130:Inc/mc_math.h ****   * @param  hAngle: angle in q1.15 format.
 131:Inc/mc_math.h ****   * @retval Trig_Components Cos(angle) and Sin(angle) in Trig_Components format.
 132:Inc/mc_math.h ****   */
 133:Inc/mc_math.h **** Trig_Components MCM_Trig_Functions(int16_t hAngle);
 134:Inc/mc_math.h **** 
 135:Inc/mc_math.h **** /**
 136:Inc/mc_math.h ****   * @brief  It calculates the square root of a non-negative s32. It returns 0 for negative s32.
 137:Inc/mc_math.h ****   * @param  Input int32_t number.
 138:Inc/mc_math.h ****   * @retval int32_t Square root of Input (0 if Input<0).
 139:Inc/mc_math.h ****   */
 140:Inc/mc_math.h **** int32_t MCM_Sqrt(int32_t wInput);
 141:Inc/mc_math.h **** 
 142:Inc/mc_math.h **** /**
 143:Inc/mc_math.h ****   * @brief  Sqrt table used by Circle Limitation function
 144:Inc/mc_math.h ****   *         used for STM32F0/STM32G0 series only
 145:Inc/mc_math.h ****   */
 146:Inc/mc_math.h **** #define SQRT_CIRCLE_LIMITATION {\
 147:Inc/mc_math.h ****      0 , 1023 , 1448 , 1773 , 2047 , 2289 , 2508 , 2709,\
 148:Inc/mc_math.h ****      2896 , 3071 , 3238 , 3396 , 3547 , 3691 , 3831 , 3965,\
 149:Inc/mc_math.h ****      4095 , 4221 , 4344 , 4463 , 4579 , 4692 , 4802 , 4910,\
 150:Inc/mc_math.h ****      5016 , 5119 , 5221 , 5320 , 5418 , 5514 , 5608 , 5701,\
 151:Inc/mc_math.h ****      5792 , 5882 , 5970 , 6057 , 6143 , 6228 , 6312 , 6394,\
 152:Inc/mc_math.h ****      6476 , 6556 , 6636 , 6714 , 6792 , 6868 , 6944 , 7019,\
 153:Inc/mc_math.h ****      7094 , 7167 , 7240 , 7312 , 7383 , 7454 , 7524 , 7593,\
 154:Inc/mc_math.h ****      7662 , 7730 , 7798 , 7865 , 7931 , 7997 , 8062 , 8127,\
 155:Inc/mc_math.h ****      8191 , 8255 , 8318 , 8381 , 8443 , 8505 , 8567 , 8628,\
 156:Inc/mc_math.h ****      8688 , 8748 , 8808 , 8867 , 8926 , 8985 , 9043 , 9101,\
 157:Inc/mc_math.h ****      9158 , 9215 , 9272 , 9328 , 9384 , 9440 , 9495 , 9550,\
 158:Inc/mc_math.h ****      9605 , 9660 , 9714 , 9768 , 9821 , 9874 , 9927 , 9980,\
 159:Inc/mc_math.h ****      10032 , 10084 , 10136 , 10188 , 10239 , 10290 , 10341 , 10392,\
 160:Inc/mc_math.h ****      10442 , 10492 , 10542 , 10592 , 10641 , 10690 , 10739 , 10788,\
 161:Inc/mc_math.h ****      10836 , 10884 , 10932 , 10980 , 11028 , 11075 , 11123 , 11170,\
 162:Inc/mc_math.h ****      11217 , 11263 , 11310 , 11356 , 11402 , 11448 , 11494 , 11539,\
 163:Inc/mc_math.h ****      11584 , 11630 , 11675 , 11719 , 11764 , 11808 , 11853 , 11897,\
 164:Inc/mc_math.h ****      11941 , 11985 , 12028 , 12072 , 12115 , 12158 , 12201 , 12244,\
 165:Inc/mc_math.h ****      12287 , 12330 , 12372 , 12414 , 12457 , 12499 , 12541 , 12582,\
 166:Inc/mc_math.h ****      12624 , 12665 , 12707 , 12748 , 12789 , 12830 , 12871 , 12911,\
ARM GAS  /tmp/ccPF8NO0.s 			page 84


 167:Inc/mc_math.h ****      12952 , 12992 , 13032 , 13073 , 13113 , 13153 , 13192 , 13232,\
 168:Inc/mc_math.h ****      13272 , 13311 , 13350 , 13390 , 13429 , 13468 , 13507 , 13545,\
 169:Inc/mc_math.h ****      13584 , 13623 , 13661 , 13699 , 13737 , 13776 , 13814 , 13851,\
 170:Inc/mc_math.h ****      13889 , 13927 , 13965 , 14002 , 14039 , 14077 , 14114 , 14151,\
 171:Inc/mc_math.h ****      14188 , 14225 , 14262 , 14298 , 14335 , 14372 , 14408 , 14444,\
 172:Inc/mc_math.h ****      14481 , 14517 , 14553 , 14589 , 14625 , 14661 , 14696 , 14732,\
 173:Inc/mc_math.h ****      14767 , 14803 , 14838 , 14874 , 14909 , 14944 , 14979 , 15014,\
 174:Inc/mc_math.h ****      15049 , 15084 , 15118 , 15153 , 15187 , 15222 , 15256 , 15291,\
 175:Inc/mc_math.h ****      15325 , 15359 , 15393 , 15427 , 15461 , 15495 , 15529 , 15562,\
 176:Inc/mc_math.h ****      15596 , 15630 , 15663 , 15697 , 15730 , 15763 , 15797 , 15830,\
 177:Inc/mc_math.h ****      15863 , 15896 , 15929 , 15962 , 15994 , 16027 , 16060 , 16092,\
 178:Inc/mc_math.h ****      16125 , 16157 , 16190 , 16222 , 16254 , 16287 , 16319 , 16351,\
 179:Inc/mc_math.h ****      16383 , 16415 , 16447 , 16479 , 16510 , 16542 , 16574 , 16605,\
 180:Inc/mc_math.h ****      16637 , 16669 , 16700 , 16731 , 16763 , 16794 , 16825 , 16856,\
 181:Inc/mc_math.h ****      16887 , 16918 , 16949 , 16980 , 17011 , 17042 , 17072 , 17103,\
 182:Inc/mc_math.h ****      17134 , 17164 , 17195 , 17225 , 17256 , 17286 , 17316 , 17347,\
 183:Inc/mc_math.h ****      17377 , 17407 , 17437 , 17467 , 17497 , 17527 , 17557 , 17587,\
 184:Inc/mc_math.h ****      17617 , 17646 , 17676 , 17706 , 17735 , 17765 , 17794 , 17824,\
 185:Inc/mc_math.h ****      17853 , 17882 , 17912 , 17941 , 17970 , 17999 , 18028 , 18057,\
 186:Inc/mc_math.h ****      18086 , 18115 , 18144 , 18173 , 18202 , 18231 , 18259 , 18288,\
 187:Inc/mc_math.h ****      18317 , 18345 , 18374 , 18402 , 18431 , 18459 , 18488 , 18516,\
 188:Inc/mc_math.h ****      18544 , 18573 , 18601 , 18629 , 18657 , 18685 , 18713 , 18741,\
 189:Inc/mc_math.h ****      18769 , 18797 , 18825 , 18853 , 18881 , 18908 , 18936 , 18964,\
 190:Inc/mc_math.h ****      18991 , 19019 , 19046 , 19074 , 19101 , 19129 , 19156 , 19184,\
 191:Inc/mc_math.h ****      19211 , 19238 , 19265 , 19293 , 19320 , 19347 , 19374 , 19401,\
 192:Inc/mc_math.h ****      19428 , 19455 , 19482 , 19509 , 19536 , 19562 , 19589 , 19616,\
 193:Inc/mc_math.h ****      19643 , 19669 , 19696 , 19723 , 19749 , 19776 , 19802 , 19829,\
 194:Inc/mc_math.h ****      19855 , 19881 , 19908 , 19934 , 19960 , 19987 , 20013 , 20039,\
 195:Inc/mc_math.h ****      20065 , 20091 , 20117 , 20143 , 20169 , 20235 , 20231 , 20247,\
 196:Inc/mc_math.h ****      20273 , 20299 , 20325 , 20350 , 20376 , 20402 , 20428 , 20453,\
 197:Inc/mc_math.h ****      20479 , 20504 , 20530 , 20556 , 20581 , 20606 , 20632 , 20657,\
 198:Inc/mc_math.h ****      20683 , 20708 , 20733 , 20759 , 20784 , 20809 , 20834 , 20859,\
 199:Inc/mc_math.h ****      20884 , 20910 , 20935 , 20960 , 20985 , 21010 , 21035 , 21059,\
 200:Inc/mc_math.h ****      21084 , 21109 , 21134 , 21159 , 21184 , 21208 , 21233 , 21258,\
 201:Inc/mc_math.h ****      21282 , 21307 , 21331 , 21356 , 21381 , 21405 , 21430 , 21454,\
 202:Inc/mc_math.h ****      21478 , 21503 , 21527 , 21552 , 21576 , 21600 , 21624 , 21649,\
 203:Inc/mc_math.h ****      21673 , 21697 , 21721 , 21745 , 21769 , 21793 , 21817 , 21841,\
 204:Inc/mc_math.h ****      21865 , 21889 , 21913 , 21937 , 21961 , 21985 , 22009 , 22033,\
 205:Inc/mc_math.h ****      22056 , 22080 , 22104 , 22128 , 22151 , 22175 , 22199 , 22222,\
 206:Inc/mc_math.h ****      22246 , 22269 , 22293 , 22316 , 22340 , 22363 , 22387 , 22410,\
 207:Inc/mc_math.h ****      22434 , 22457 , 22480 , 22504 , 22527 , 22550 , 22573 , 22597,\
 208:Inc/mc_math.h ****      22620 , 22643 , 22666 , 22689 , 22712 , 22735 , 22758 , 22781,\
 209:Inc/mc_math.h ****      22804 , 22827 , 22850 , 22873 , 22896 , 22919 , 22942 , 22965,\
 210:Inc/mc_math.h ****      22988 , 23010 , 23033 , 23056 , 23079 , 23101 , 23124 , 23147,\
 211:Inc/mc_math.h ****      23169 , 23192 , 23214 , 23237 , 23260 , 23282 , 23305 , 23327,\
 212:Inc/mc_math.h ****      23350 , 23372 , 23394 , 23417 , 23439 , 23462 , 23484 , 23506,\
 213:Inc/mc_math.h ****      23529 , 23551 , 23573 , 23595 , 23617 , 23640 , 23662 , 23684,\
 214:Inc/mc_math.h ****      23706 , 23728 , 23750 , 23772 , 23794 , 23816 , 23838 , 23860,\
 215:Inc/mc_math.h ****      23882 , 23904 , 23926 , 23948 , 23970 , 23992 , 24014 , 24036,\
 216:Inc/mc_math.h ****      24057 , 24079 , 24101 , 24123 , 24144 , 24166 , 24188 , 24209,\
 217:Inc/mc_math.h ****      24231 , 24253 , 24274 , 24296 , 24317 , 24339 , 24360 , 24382,\
 218:Inc/mc_math.h ****      24403 , 24425 , 24446 , 24468 , 24489 , 24511 , 24532 , 24553,\
 219:Inc/mc_math.h ****      24575 , 24596 , 24617 , 24639 , 24660 , 24681 , 24702 , 24724,\
 220:Inc/mc_math.h ****      24745 , 24766 , 24787 , 24808 , 24829 , 24851 , 24872 , 24893,\
 221:Inc/mc_math.h ****      24914 , 24935 , 24956 , 24977 , 24998 , 25019 , 25040 , 25061,\
 222:Inc/mc_math.h ****      25082 , 25102 , 25123 , 25144 , 25165 , 25186 , 25207 , 25227,\
 223:Inc/mc_math.h ****      25248 , 25269 , 25290 , 25310 , 25331 , 25352 , 25372 , 25393,\
ARM GAS  /tmp/ccPF8NO0.s 			page 85


 224:Inc/mc_math.h ****      25414 , 25434 , 25455 , 25476 , 25496 , 25517 , 25537 , 25558,\
 225:Inc/mc_math.h ****      25578 , 25599 , 25619 , 25640 , 25660 , 25681 , 25701 , 25721,\
 226:Inc/mc_math.h ****      25742 , 25762 , 25782 , 25803 , 25823 , 25843 , 25864 , 25884,\
 227:Inc/mc_math.h ****      25904 , 25924 , 25945 , 25965 , 25985 , 26005 , 26025 , 26045,\
 228:Inc/mc_math.h ****      26065 , 26086 , 26106 , 26126 , 26146 , 26166 , 26186 , 26206,\
 229:Inc/mc_math.h ****      26226 , 26246 , 26266 , 26286 , 26306 , 26326 , 26346 , 26365,\
 230:Inc/mc_math.h ****      26385 , 26405 , 26425 , 26445 , 26465 , 26484 , 26504 , 26524,\
 231:Inc/mc_math.h ****      26544 , 26564 , 26583 , 26603 , 26623 , 26642 , 26662 , 26682,\
 232:Inc/mc_math.h ****      26701 , 26721 , 26741 , 26760 , 26780 , 26799 , 26819 , 26838,\
 233:Inc/mc_math.h ****      26858 , 26877 , 26897 , 26916 , 26936 , 26955 , 26975 , 26994,\
 234:Inc/mc_math.h ****      27014 , 27033 , 27052 , 27072 , 27091 , 27111 , 27130 , 27149,\
 235:Inc/mc_math.h ****      27168 , 27188 , 27207 , 27226 , 27246 , 27265 , 27284 , 27303,\
 236:Inc/mc_math.h ****      27322 , 27342 , 27361 , 27380 , 27399 , 27418 , 27437 , 27456,\
 237:Inc/mc_math.h ****      27475 , 27495 , 27514 , 27533 , 27552 , 27571 , 27590 , 27609,\
 238:Inc/mc_math.h ****      27628 , 27647 , 27666 , 27685 , 27703 , 27722 , 27741 , 27760,\
 239:Inc/mc_math.h ****      27779 , 27798 , 27817 , 27836 , 27854 , 27873 , 27892 , 27911,\
 240:Inc/mc_math.h ****      27930 , 27948 , 27967 , 27986 , 28005 , 28023 , 28042 , 28061,\
 241:Inc/mc_math.h ****      28079 , 28098 , 28117 , 28135 , 28154 , 28173 , 28191 , 28210,\
 242:Inc/mc_math.h ****      28228 , 28247 , 28265 , 28284 , 28303 , 28321 , 28340 , 28358,\
 243:Inc/mc_math.h ****      28377 , 28395 , 28413 , 28432 , 28450 , 28469 , 28487 , 28506,\
 244:Inc/mc_math.h ****      28524 , 28542 , 28561 , 28579 , 28597 , 28616 , 28634 , 28652,\
 245:Inc/mc_math.h ****      28671 , 28689 , 28707 , 28725 , 28744 , 28762 , 28780 , 28798,\
 246:Inc/mc_math.h ****      28817 , 28835 , 28853 , 28871 , 28889 , 28907 , 28925 , 28944,\
 247:Inc/mc_math.h ****      28962 , 28980 , 28998 , 29016 , 29034 , 29052 , 29070 , 29088,\
 248:Inc/mc_math.h ****      29106 , 29124 , 29142 , 29160 , 29178 , 29196 , 29214 , 29232,\
 249:Inc/mc_math.h ****      29250 , 29268 , 29286 , 29304 , 29322 , 29339 , 29357 , 29375,\
 250:Inc/mc_math.h ****      29393 , 29411 , 29429 , 29446 , 29464 , 29482 , 29500 , 29518,\
 251:Inc/mc_math.h ****      29535 , 29553 , 29571 , 29588 , 29606 , 29624 , 29642 , 29659,\
 252:Inc/mc_math.h ****      29677 , 29695 , 29712 , 29730 , 29748 , 29765 , 29783 , 29800,\
 253:Inc/mc_math.h ****      29818 , 29835 , 29853 , 29871 , 29888 , 29906 , 29923 , 29941,\
 254:Inc/mc_math.h ****      29958 , 29976 , 29993 , 30011 , 30028 , 30046 , 30063 , 30080,\
 255:Inc/mc_math.h ****      30098 , 30115 , 30133 , 30150 , 30168 , 30185 , 30202 , 30220,\
 256:Inc/mc_math.h ****      30237 , 30254 , 30272 , 30289 , 30306 , 30324 , 30341 , 30358,\
 257:Inc/mc_math.h ****      30375 , 30393 , 30410 , 30427 , 30444 , 30461 , 30479 , 30496,\
 258:Inc/mc_math.h ****      30513 , 30530 , 30547 , 30565 , 30582 , 30599 , 30616 , 30633,\
 259:Inc/mc_math.h ****      30650 , 30667 , 30684 , 30701 , 30719 , 30736 , 30753 , 30770,\
 260:Inc/mc_math.h ****      30787 , 30804 , 30821 , 30838 , 30855 , 30872 , 30889 , 30906,\
 261:Inc/mc_math.h ****      30923 , 30940 , 30957 , 30973 , 30990 , 31007 , 31024 , 31041,\
 262:Inc/mc_math.h ****      31058 , 31075 , 31092 , 31109 , 31125 , 31142 , 31159 , 31176,\
 263:Inc/mc_math.h ****      31193 , 31210 , 31226 , 31243 , 31260 , 31277 , 31293 , 31310,\
 264:Inc/mc_math.h ****      31327 , 31344 , 31360 , 31377 , 31394 , 31410 , 31427 , 31444,\
 265:Inc/mc_math.h ****      31461 , 31477 , 31494 , 31510 , 31527 , 31544 , 31560 , 31577,\
 266:Inc/mc_math.h ****      31594 , 31610 , 31627 , 31643 , 31660 , 31676 , 31693 , 31709,\
 267:Inc/mc_math.h ****      31726 , 31743 , 31759 , 31776 , 31792 , 31809 , 31825 , 31841,\
 268:Inc/mc_math.h ****      31858 , 31874 , 31891 , 31907 , 31924 , 31940 , 31957 , 31973,\
 269:Inc/mc_math.h ****      31989 , 32006 , 32023 , 32038 , 32055 , 32071 , 32087 , 32104,\
 270:Inc/mc_math.h ****      32120 , 32136 , 32153 , 32169 , 32185 , 32202 , 32218 , 32234,\
 271:Inc/mc_math.h ****      32250 , 32267 , 32283 , 32299 , 32315 , 32332 , 32348 , 32364,\
 272:Inc/mc_math.h ****      32380 , 32396 , 32413 , 32429 , 32445 , 32461 , 32477 , 32493,\
 273:Inc/mc_math.h ****      32509 , 32526 , 32542 , 32558 , 32574 , 32590 , 32606 , 32622,\
 274:Inc/mc_math.h ****      32638 , 32654 , 32670 , 32686 , 32702 , 32718 , 32734 , 32750,\
 275:Inc/mc_math.h ****      32767 }
 276:Inc/mc_math.h **** 
 277:Inc/mc_math.h **** #define ATAN1DIV1     (int16_t)8192
 278:Inc/mc_math.h **** #define ATAN1DIV2     (int16_t)4836
 279:Inc/mc_math.h **** #define ATAN1DIV4     (int16_t)2555
 280:Inc/mc_math.h **** #define ATAN1DIV8     (int16_t)1297
ARM GAS  /tmp/ccPF8NO0.s 			page 86


 281:Inc/mc_math.h **** #define ATAN1DIV16    (int16_t)651
 282:Inc/mc_math.h **** #define ATAN1DIV32    (int16_t)326
 283:Inc/mc_math.h **** #define ATAN1DIV64    (int16_t)163
 284:Inc/mc_math.h **** #define ATAN1DIV128   (int16_t)81
 285:Inc/mc_math.h **** #define ATAN1DIV256   (int16_t)41
 286:Inc/mc_math.h **** #define ATAN1DIV512   (int16_t)20
 287:Inc/mc_math.h **** #define ATAN1DIV1024  (int16_t)10
 288:Inc/mc_math.h **** #define ATAN1DIV2048  (int16_t)5
 289:Inc/mc_math.h **** #define ATAN1DIV4096  (int16_t)3
 290:Inc/mc_math.h **** #define ATAN1DIV8192  (int16_t)1
 291:Inc/mc_math.h **** 
 292:Inc/mc_math.h **** /**
 293:Inc/mc_math.h ****   * @brief  It executes Modulus algorithm.
 294:Inc/mc_math.h ****   * @param  alpha component,
 295:Inc/mc_math.h ****   *         beta component.
 296:Inc/mc_math.h ****   * @retval int16_t Modulus.
 297:Inc/mc_math.h ****   */
 298:Inc/mc_math.h **** static inline int16_t MCM_Modulus(int16_t alpha, int16_t beta)
 299:Inc/mc_math.h **** {
 300:Inc/mc_math.h ****   uint32_t temp_val;
 301:Inc/mc_math.h ****   __disable_irq();
 302:Inc/mc_math.h ****   /* Configure and call to CORDIC- */
 303:Inc/mc_math.h ****   WRITE_REG(CORDIC->CSR,CORDIC_CONFIG_MODULUS);
 304:Inc/mc_math.h ****   LL_CORDIC_WriteData(CORDIC, (((uint32_t)beta << 16U) | (((uint32_t)alpha) & 0x0000FFFFU)));
 2398              		.loc 4 304 3 is_stmt 0 view .LVU607
 2399 0000 4368     		ldr	r3, [r0, #4]
 2400 0002 5A68     		ldr	r2, [r3, #4]	@ unaligned
 2401              	.LVL174:
 2402              		.loc 4 304 3 view .LVU608
 2403              	.LBE62:
 2404              	.LBE61:
1560:Src/mc_interface.c ****   wAux = MCM_Modulus(Local_Curr.alpha, Local_Curr.beta);
 2405              		.loc 1 1560 3 is_stmt 1 view .LVU609
 2406              	.LBB74:
 2407              	.LBI61:
 298:Inc/mc_math.h **** {
 2408              		.loc 4 298 23 view .LVU610
 2409              	.LBB73:
 300:Inc/mc_math.h ****   __disable_irq();
 2410              		.loc 4 300 3 view .LVU611
 301:Inc/mc_math.h ****   /* Configure and call to CORDIC- */
 2411              		.loc 4 301 3 view .LVU612
 2412              	.LBB63:
 2413              	.LBI63:
 2414              		.file 5 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
ARM GAS  /tmp/ccPF8NO0.s 			page 87


  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccPF8NO0.s 			page 88


  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
ARM GAS  /tmp/ccPF8NO0.s 			page 89


 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccPF8NO0.s 			page 90


 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 2415              		.loc 5 207 27 view .LVU613
 2416              	.LBB64:
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 2417              		.loc 5 209 3 view .LVU614
 2418              		.syntax unified
 2419              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2420 0004 72B6     		cpsid i
 2421              	@ 0 "" 2
 2422              		.thumb
 2423              		.syntax unified
 2424              	.LBE64:
 2425              	.LBE63:
 303:Inc/mc_math.h ****   LL_CORDIC_WriteData(CORDIC, (((uint32_t)beta << 16U) | (((uint32_t)alpha) & 0x0000FFFFU)));
 2426              		.loc 4 303 3 view .LVU615
 2427 0006 054B     		ldr	r3, .L146
 2428 0008 0549     		ldr	r1, .L146+4
 2429 000a 1960     		str	r1, [r3]
 2430              		.loc 4 304 3 view .LVU616
 2431              	.LVL175:
 2432              	.LBB65:
 2433              	.LBI65:
 2434              		.file 6 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h"
   1:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
   2:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   ******************************************************************************
   3:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @file    stm32g4xx_ll_cordic.h
   4:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @author  MCD Application Team
   5:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief   Header file of CORDIC LL module.
   6:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   ******************************************************************************
   7:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @attention
   8:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *
   9:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * Copyright (c) 2019 STMicroelectronics.
  10:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * All rights reserved.
ARM GAS  /tmp/ccPF8NO0.s 			page 91


  11:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *
  12:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * in the root directory of this software component.
  14:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *
  16:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   ******************************************************************************
  17:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  18:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  19:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #ifndef STM32G4xx_LL_CORDIC_H
  21:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define STM32G4xx_LL_CORDIC_H
  22:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  23:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #ifdef __cplusplus
  24:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** extern "C" {
  25:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #endif
  26:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  27:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #include "stm32g4xx.h"
  29:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  30:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @addtogroup STM32G4xx_LL_Driver
  31:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  32:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  33:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  34:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #if defined(CORDIC)
  35:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  36:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL CORDIC
  37:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  38:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  39:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  40:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Private variables ---------------------------------------------------------*/
  41:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  42:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Private constants ---------------------------------------------------------*/
  43:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  44:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Private macros ------------------------------------------------------------*/
  45:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  46:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported types ------------------------------------------------------------*/
  47:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  48:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported constants --------------------------------------------------------*/
  49:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_Exported_Constants CORDIC Exported Constants
  50:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  51:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  52:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  53:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_GET_FLAG Get Flags Defines
  54:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief    Flags defines which can be used with LL_CORDIC_ReadReg function.
  55:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  56:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  57:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FLAG_RRDY                CORDIC_CSR_RRDY
  58:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
  59:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
  60:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  61:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  62:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_IT IT Defines
  63:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief    IT defines which can be used with LL_CORDIC_ReadReg and LL_CORDIC_WriteReg functions.
  64:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  65:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  66:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_IT_IEN                   CORDIC_CSR_IEN            /*!< Result Ready interrupt en
  67:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
ARM GAS  /tmp/ccPF8NO0.s 			page 92


  68:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
  69:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  70:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  71:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_FUNCTION FUNCTION
  72:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  73:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  74:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_COSINE          (0x00000000U)                                           
  75:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_SINE            ((uint32_t)(CORDIC_CSR_FUNC_0))                         
  76:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_PHASE           ((uint32_t)(CORDIC_CSR_FUNC_1))                         
  77:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_MODULUS         ((uint32_t)(CORDIC_CSR_FUNC_1 | CORDIC_CSR_FUNC_0))     
  78:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_ARCTANGENT      ((uint32_t)(CORDIC_CSR_FUNC_2))                         
  79:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_HCOSINE         ((uint32_t)(CORDIC_CSR_FUNC_2 | CORDIC_CSR_FUNC_0))     
  80:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_HSINE           ((uint32_t)(CORDIC_CSR_FUNC_2 | CORDIC_CSR_FUNC_1))     
  81:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_HARCTANGENT     ((uint32_t)(CORDIC_CSR_FUNC_2 | CORDIC_CSR_FUNC_1 | CORD
  82:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_NATURALLOG      ((uint32_t)(CORDIC_CSR_FUNC_3))                         
  83:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_SQUAREROOT      ((uint32_t)(CORDIC_CSR_FUNC_3 | CORDIC_CSR_FUNC_0))     
  84:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
  85:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
  86:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  87:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  88:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_PRECISION PRECISION
  89:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  90:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  91:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_1CYCLE         ((uint32_t)(CORDIC_CSR_PRECISION_0))
  92:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_2CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_1))
  93:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_3CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_1 | CORDIC_CSR_PRECISIO
  94:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_4CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2))
  95:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_5CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECISIO
  96:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_6CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECISIO
  97:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_7CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2\
  98:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_1 | CORDIC_CSR_PRECIS
  99:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_8CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_3))
 100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_9CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_3 | CORDIC_CSR_PRECISIO
 101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_10CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3 | CORDIC_CSR_PRECISIO
 102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_11CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_1 | CORDIC_CSR_PRECIS
 104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_12CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3 | CORDIC_CSR_PRECISIO
 105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_13CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECIS
 107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_14CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECIS
 109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_15CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECIS
 111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_0))
 112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_SCALE SCALE
 117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_0                  (0x00000000U)
 120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_1                  ((uint32_t)(CORDIC_CSR_SCALE_0))
 121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_2                  ((uint32_t)(CORDIC_CSR_SCALE_1))
 122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_3                  ((uint32_t)(CORDIC_CSR_SCALE_1 | CORDIC_CSR_SCALE_0))
 123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_4                  ((uint32_t)(CORDIC_CSR_SCALE_2))
 124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_5                  ((uint32_t)(CORDIC_CSR_SCALE_2 | CORDIC_CSR_SCALE_0))
ARM GAS  /tmp/ccPF8NO0.s 			page 93


 125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_6                  ((uint32_t)(CORDIC_CSR_SCALE_2 | CORDIC_CSR_SCALE_1))
 126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_7                  ((uint32_t)(CORDIC_CSR_SCALE_2 | CORDIC_CSR_SCALE_1 | CO
 127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_NBWRITE NBWRITE
 132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBWRITE_1                (0x00000000U)             /*!< One 32-bits write contain
 135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           32-bit data input (Q1.31 
 136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           16-bit data input (Q1.15 
 137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           in one 32 bits Data */
 138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBWRITE_2                CORDIC_CSR_NARGS          /*!< Two 32-bit write containi
 139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           (Q1.31 format) */
 140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_NBREAD NBREAD
 145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBREAD_1                 (0x00000000U)             /*!< One 32-bits read containi
 148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           32-bit data output (Q1.31
 149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           16-bit data output (Q1.15
 150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           in one 32 bits Data */
 151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBREAD_2                 CORDIC_CSR_NRES           /*!< Two 32-bit Data containin
 152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           (Q1.31 format) */
 153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_INSIZE INSIZE
 158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_INSIZE_32BITS            (0x00000000U)             /*!< 32 bits input data size (
 161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_INSIZE_16BITS            CORDIC_CSR_ARGSIZE        /*!< 16 bits input data size (
 162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_OUTSIZE OUTSIZE
 167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_OUTSIZE_32BITS           (0x00000000U)             /*!< 32 bits output data size 
 170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_OUTSIZE_16BITS           CORDIC_CSR_RESSIZE        /*!< 16 bits output data size 
 171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_DMA_REG_DATA DMA register data
 176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_DMA_REG_DATA_IN          (0x00000000U)             /*!< Get address of input data
 179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_DMA_REG_DATA_OUT         (0x00000001U)             /*!< Get address of output dat
 180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
ARM GAS  /tmp/ccPF8NO0.s 			page 94


 182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported macro ------------------------------------------------------------*/
 189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_Exported_Macros CORDIC Exported Macros
 190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EM_WRITE_READ Common Write and read registers Macros
 194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Write a value in CORDIC register.
 199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __INSTANCE__ CORDIC Instance
 200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __REG__ Register to be written
 201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __VALUE__ Value to be written in the register
 202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VA
 205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Read a value in CORDIC register.
 208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __INSTANCE__ CORDIC Instance
 209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __REG__ Register to be read
 210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Register value
 211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported functions --------------------------------------------------------*/
 223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_Exported_Functions CORDIC Exported Functions
 225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_Configuration CORDIC Configuration functions
 229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure the CORDIC processing.
 234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @note   This function set all parameters of CORDIC processing.
 235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         These parameters can also be set individually using
 236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         dedicated functions:
 237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetFunction()
 238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetPrecision()
ARM GAS  /tmp/ccPF8NO0.s 			page 95


 239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetScale()
 240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetNbWrite()
 241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetNbRead()
 242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetInSize()
 243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetOutSize()
 244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          FUNC          LL_CORDIC_Config\n
 245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          PRECISION     LL_CORDIC_Config\n
 246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          SCALE         LL_CORDIC_Config\n
 247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          NARGS         LL_CORDIC_Config\n
 248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          NRES          LL_CORDIC_Config\n
 249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          ARGSIZE       LL_CORDIC_Config\n
 250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          RESIZE        LL_CORDIC_Config
 251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC instance
 252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Function parameter can be one of the following values:
 253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_COSINE
 254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SINE
 255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_PHASE
 256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_MODULUS
 257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_ARCTANGENT
 258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HCOSINE
 259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HSINE
 260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HARCTANGENT
 261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_NATURALLOG
 262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SQUAREROOT
 263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Precision parameter can be one of the following values:
 264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_1CYCLE
 265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_2CYCLES
 266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_3CYCLES
 267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_4CYCLES
 268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_5CYCLES
 269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_6CYCLES
 270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_7CYCLES
 271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_8CYCLES
 272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_9CYCLES
 273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_10CYCLES
 274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_11CYCLES
 275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_12CYCLES
 276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_13CYCLES
 277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_14CYCLES
 278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_15CYCLES
 279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Scale parameter can be one of the following values:
 280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_0
 281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_1
 282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_2
 283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_3
 284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_4
 285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_5
 286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_6
 287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_7
 288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbWrite parameter can be one of the following values:
 289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_1
 290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_2
 291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbRead parameter can be one of the following values:
 292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_1
 293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_2
 294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  InSize parameter can be one of the following values:
 295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_32BITS
ARM GAS  /tmp/ccPF8NO0.s 			page 96


 296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_16BITS
 297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  OutSize parameter can be one of the following values:
 298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_32BITS
 299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
 300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_Config(CORDIC_TypeDef *CORDICx, uint32_t Function, uint32_t Precisio
 303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                       uint32_t NbWrite, uint32_t NbRead, uint32_t InSize, uint32_t 
 304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR,
 306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              CORDIC_CSR_FUNC | CORDIC_CSR_PRECISION | CORDIC_CSR_SCALE |
 307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              CORDIC_CSR_NARGS | CORDIC_CSR_NRES | CORDIC_CSR_ARGSIZE | CORDIC_CSR_RESSIZE,
 308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              Function | Precision | Scale |
 309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              NbWrite | NbRead | InSize | OutSize);
 310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure function.
 314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          FUNC          LL_CORDIC_SetFunction
 315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Function parameter can be one of the following values:
 317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_COSINE
 318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SINE
 319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_PHASE
 320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_MODULUS
 321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_ARCTANGENT
 322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HCOSINE
 323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HSINE
 324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HARCTANGENT
 325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_NATURALLOG
 326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SQUAREROOT
 327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetFunction(CORDIC_TypeDef *CORDICx, uint32_t Function)
 330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_FUNC, Function);
 332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return function.
 336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          FUNC          LL_CORDIC_GetFunction
 337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_COSINE
 340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SINE
 341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_PHASE
 342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_MODULUS
 343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_ARCTANGENT
 344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HCOSINE
 345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HSINE
 346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HARCTANGENT
 347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_NATURALLOG
 348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SQUAREROOT
 349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetFunction(const CORDIC_TypeDef *CORDICx)
 351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_FUNC));
ARM GAS  /tmp/ccPF8NO0.s 			page 97


 353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure precision in cycles number.
 357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          PRECISION     LL_CORDIC_SetPrecision
 358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Precision parameter can be one of the following values:
 360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_1CYCLE
 361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_2CYCLES
 362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_3CYCLES
 363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_4CYCLES
 364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_5CYCLES
 365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_6CYCLES
 366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_7CYCLES
 367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_8CYCLES
 368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_9CYCLES
 369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_10CYCLES
 370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_11CYCLES
 371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_12CYCLES
 372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_13CYCLES
 373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_14CYCLES
 374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_15CYCLES
 375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetPrecision(CORDIC_TypeDef *CORDICx, uint32_t Precision)
 378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_PRECISION, Precision);
 380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return precision in cycles number.
 384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          PRECISION     LL_CORDIC_GetPrecision
 385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_1CYCLE
 388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_2CYCLES
 389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_3CYCLES
 390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_4CYCLES
 391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_5CYCLES
 392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_6CYCLES
 393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_7CYCLES
 394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_8CYCLES
 395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_9CYCLES
 396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_10CYCLES
 397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_11CYCLES
 398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_12CYCLES
 399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_13CYCLES
 400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_14CYCLES
 401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_15CYCLES
 402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetPrecision(const CORDIC_TypeDef *CORDICx)
 404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_PRECISION));
 406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure scaling factor.
ARM GAS  /tmp/ccPF8NO0.s 			page 98


 410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          SCALE         LL_CORDIC_SetScale
 411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Scale parameter can be one of the following values:
 413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_0
 414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_1
 415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_2
 416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_3
 417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_4
 418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_5
 419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_6
 420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_7
 421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetScale(CORDIC_TypeDef *CORDICx, uint32_t Scale)
 424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_SCALE, Scale);
 426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return scaling factor.
 430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          SCALE         LL_CORDIC_GetScale
 431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_0
 434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_1
 435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_2
 436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_3
 437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_4
 438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_5
 439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_6
 440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_7
 441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetScale(const CORDIC_TypeDef *CORDICx)
 443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_SCALE));
 445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure number of 32-bit write expected for one calculation.
 449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NARGS         LL_CORDIC_SetNbWrite
 450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbWrite parameter can be one of the following values:
 452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_1
 453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_2
 454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetNbWrite(CORDIC_TypeDef *CORDICx, uint32_t NbWrite)
 457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_NARGS, NbWrite);
 459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return number of 32-bit write expected for one calculation.
 463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NARGS         LL_CORDIC_GetNbWrite
 464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_1
ARM GAS  /tmp/ccPF8NO0.s 			page 99


 467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_2
 468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetNbWrite(const CORDIC_TypeDef *CORDICx)
 470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_NARGS));
 472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure number of 32-bit read expected after one calculation.
 476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NRES          LL_CORDIC_SetNbRead
 477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbRead parameter can be one of the following values:
 479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_1
 480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_2
 481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetNbRead(CORDIC_TypeDef *CORDICx, uint32_t NbRead)
 484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_NRES, NbRead);
 486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return number of 32-bit read expected after one calculation.
 490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NRES          LL_CORDIC_GetNbRead
 491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_1
 494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_2
 495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetNbRead(const CORDIC_TypeDef *CORDICx)
 497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_NRES));
 499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure width of input data.
 503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          ARGSIZE       LL_CORDIC_SetInSize
 504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  InSize parameter can be one of the following values:
 506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_32BITS
 507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_16BITS
 508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetInSize(CORDIC_TypeDef *CORDICx, uint32_t InSize)
 511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_ARGSIZE, InSize);
 513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return width of input data.
 517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          ARGSIZE       LL_CORDIC_GetInSize
 518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_32BITS
 521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_16BITS
 522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetInSize(const CORDIC_TypeDef *CORDICx)
ARM GAS  /tmp/ccPF8NO0.s 			page 100


 524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_ARGSIZE));
 526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure width of output data.
 530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          RESIZE       LL_CORDIC_SetOutSize
 531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  OutSize parameter can be one of the following values:
 533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_32BITS
 534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
 535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetOutSize(CORDIC_TypeDef *CORDICx, uint32_t OutSize)
 538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_RESSIZE, OutSize);
 540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return width of output data.
 544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          RESIZE       LL_CORDIC_GetOutSize
 545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_32BITS
 548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
 549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetOutSize(const CORDIC_TypeDef *CORDICx)
 551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_RESSIZE));
 553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_IT_Management IT_Management
 560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Enable CORDIC result ready interrupt
 565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          IEN           LL_CORDIC_EnableIT
 566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_EnableIT(CORDIC_TypeDef *CORDICx)
 570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   SET_BIT(CORDICx->CSR, CORDIC_CSR_IEN);
 572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Disable CORDIC result ready interrupt
 576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          IEN           LL_CORDIC_DisableIT
 577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_DisableIT(CORDIC_TypeDef *CORDICx)
ARM GAS  /tmp/ccPF8NO0.s 			page 101


 581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   CLEAR_BIT(CORDICx->CSR, CORDIC_CSR_IEN);
 583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC result ready interrupt state.
 587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          IEN           LL_CORDIC_IsEnabledIT
 588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsEnabledIT(const CORDIC_TypeDef *CORDICx)
 592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_IEN) == (CORDIC_CSR_IEN)) ? 1U : 0U);
 594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_DMA_Management DMA_Management
 601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Enable CORDIC DMA read channel request.
 606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAREN        LL_CORDIC_EnableDMAReq_RD
 607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_EnableDMAReq_RD(CORDIC_TypeDef *CORDICx)
 611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   SET_BIT(CORDICx->CSR, CORDIC_CSR_DMAREN);
 613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Disable CORDIC DMA read channel request.
 617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAREN        LL_CORDIC_DisableDMAReq_RD
 618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_DisableDMAReq_RD(CORDIC_TypeDef *CORDICx)
 622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   CLEAR_BIT(CORDICx->CSR, CORDIC_CSR_DMAREN);
 624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC DMA read channel request state.
 628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAREN        LL_CORDIC_IsEnabledDMAReq_RD
 629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsEnabledDMAReq_RD(const CORDIC_TypeDef *CORDICx)
 633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_DMAREN) == (CORDIC_CSR_DMAREN)) ? 1U : 0U);
 635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
ARM GAS  /tmp/ccPF8NO0.s 			page 102


 638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Enable CORDIC DMA write channel request.
 639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAWEN        LL_CORDIC_EnableDMAReq_WR
 640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_EnableDMAReq_WR(CORDIC_TypeDef *CORDICx)
 644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   SET_BIT(CORDICx->CSR, CORDIC_CSR_DMAWEN);
 646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Disable CORDIC DMA write channel request.
 650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAWEN        LL_CORDIC_DisableDMAReq_WR
 651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_DisableDMAReq_WR(CORDIC_TypeDef *CORDICx)
 655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   CLEAR_BIT(CORDICx->CSR, CORDIC_CSR_DMAWEN);
 657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC DMA write channel request state.
 661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAWEN        LL_CORDIC_IsEnabledDMAReq_WR
 662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsEnabledDMAReq_WR(const CORDIC_TypeDef *CORDICx)
 666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_DMAWEN) == (CORDIC_CSR_DMAWEN)) ? 1U : 0U);
 668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Get the CORDIC data register address used for DMA transfer.
 672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll RDATA        RES           LL_CORDIC_DMA_GetRegAddr\n
 673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll WDATA        ARG           LL_CORDIC_DMA_GetRegAddr
 674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Direction parameter can be one of the following values:
 676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_DMA_REG_DATA_IN
 677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_DMA_REG_DATA_OUT
 678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Address of data register
 679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_DMA_GetRegAddr(const CORDIC_TypeDef *CORDICx, uint32_t Direction
 681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   uint32_t data_reg_addr;
 683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   if (Direction == LL_CORDIC_DMA_REG_DATA_OUT)
 685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   {
 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     /* return address of RDATA register */
 687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     data_reg_addr = (uint32_t) &(CORDICx->RDATA);
 688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   }
 689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   else
 690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   {
 691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     /* return address of WDATA register */
 692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     data_reg_addr = (uint32_t) &(CORDICx->WDATA);
 693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   }
 694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
ARM GAS  /tmp/ccPF8NO0.s 			page 103


 695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return data_reg_addr;
 696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_FLAG_Management FLAG_Management
 703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC result ready flag state.
 708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          RRDY          LL_CORDIC_IsActiveFlag_RRDY
 709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsActiveFlag_RRDY(const CORDIC_TypeDef *CORDICx)
 713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_RRDY) == (CORDIC_CSR_RRDY)) ? 1U : 0U);
 715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_Data_Management Data_Management
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Write 32-bit input data for the CORDIC processing.
 727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll WDATA        ARG           LL_CORDIC_WriteData
 728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processin
 730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
 2435              		.loc 6 732 22 view .LVU617
 2436              	.LBB66:
 733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   WRITE_REG(CORDICx->WDATA, InData);
 2437              		.loc 6 734 3 view .LVU618
 2438 000c 5A60     		str	r2, [r3, #4]
 2439              	.LVL176:
 2440              	.L144:
 2441              		.loc 6 734 3 is_stmt 0 view .LVU619
 2442              	.LBE66:
 2443              	.LBE65:
 305:Inc/mc_math.h ****   /* Wait for result */
 306:Inc/mc_math.h ****   while(LL_CORDIC_IsActiveFlag_RRDY(CORDIC) == 0U)
 307:Inc/mc_math.h ****   {
 308:Inc/mc_math.h ****     /* Nothing to do */
 309:Inc/mc_math.h ****   }
 2444              		.loc 4 309 3 is_stmt 1 view .LVU620
 306:Inc/mc_math.h ****   {
 2445              		.loc 4 306 8 view .LVU621
ARM GAS  /tmp/ccPF8NO0.s 			page 104


 2446              	.LBB67:
 2447              	.LBI67:
 712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 2448              		.loc 6 712 26 view .LVU622
 2449              	.LBB68:
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 2450              		.loc 6 714 3 view .LVU623
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 2451              		.loc 6 714 12 is_stmt 0 view .LVU624
 2452 000e 1A68     		ldr	r2, [r3]
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 2453              		.loc 6 714 79 view .LVU625
 2454 0010 002A     		cmp	r2, #0
 2455 0012 FCDA     		bge	.L144
 2456              	.LVL177:
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 2457              		.loc 6 714 79 view .LVU626
 2458              	.LBE68:
 2459              	.LBE67:
 310:Inc/mc_math.h ****   /* Read computed modulus */
 311:Inc/mc_math.h ****   temp_val = ((LL_CORDIC_ReadData(CORDIC) << 16U) >> 16U); /* Avoid Over/underflow when cast to int
 2460              		.loc 4 311 3 is_stmt 1 view .LVU627
 2461              	.LBB69:
 2462              	.LBI69:
 735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return 32-bit output data of CORDIC processing.
 739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll RDATA        RES           LL_CORDIC_ReadData
 740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval 32-bit output data of CORDIC processing.
 742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
 2463              		.loc 6 743 26 view .LVU628
 2464              	.LBB70:
 744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_REG(CORDICx->RDATA));
 2465              		.loc 6 745 3 view .LVU629
 2466              		.loc 6 745 10 is_stmt 0 view .LVU630
 2467 0014 9868     		ldr	r0, [r3, #8]
 2468              	.LVL178:
 2469              		.loc 6 745 10 view .LVU631
 2470              	.LBE70:
 2471              	.LBE69:
 312:Inc/mc_math.h ****   __enable_irq();
 2472              		.loc 4 312 3 is_stmt 1 view .LVU632
 2473              	.LBB71:
 2474              	.LBI71:
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2475              		.loc 5 196 27 view .LVU633
 2476              	.LBB72:
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2477              		.loc 5 198 3 view .LVU634
 2478              		.syntax unified
 2479              	@ 198 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2480 0016 62B6     		cpsie i
 2481              	@ 0 "" 2
ARM GAS  /tmp/ccPF8NO0.s 			page 105


 2482              		.thumb
 2483              		.syntax unified
 2484              	.LBE72:
 2485              	.LBE71:
 313:Inc/mc_math.h ****   return ((int16_t)temp_val);
 2486              		.loc 4 313 3 view .LVU635
 2487              	.LVL179:
 2488              		.loc 4 313 3 is_stmt 0 view .LVU636
 2489              	.LBE73:
 2490              	.LBE74:
1561:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1562:Src/mc_interface.c ****   }
1563:Src/mc_interface.c **** #endif
1564:Src/mc_interface.c **** 
1565:Src/mc_interface.c ****   return (wAux);
 2491              		.loc 1 1565 3 is_stmt 1 view .LVU637
1566:Src/mc_interface.c **** }
 2492              		.loc 1 1566 1 is_stmt 0 view .LVU638
 2493 0018 00B2     		sxth	r0, r0
 2494              	.LVL180:
 2495              		.loc 1 1566 1 view .LVU639
 2496 001a 7047     		bx	lr
 2497              	.L147:
 2498              		.align	2
 2499              	.L146:
 2500 001c 000C0240 		.word	1073875968
 2501 0020 63006000 		.word	6291555
 2502              		.cfi_endproc
 2503              	.LFE1761:
 2505              		.section	.text.MCI_GetPhaseVoltageAmplitude,"ax",%progbits
 2506              		.align	1
 2507              		.p2align 2,,3
 2508              		.weak	MCI_GetPhaseVoltageAmplitude
 2509              		.syntax unified
 2510              		.thumb
 2511              		.thumb_func
 2512              		.fpu fpv4-sp-d16
 2514              	MCI_GetPhaseVoltageAmplitude:
 2515              	.LVL181:
 2516              	.LFB1762:
1567:Src/mc_interface.c **** 
1568:Src/mc_interface.c **** /**
1569:Src/mc_interface.c ****   * @brief  It returns the applied motor phase voltage amplitude (0-to-peak) in
1570:Src/mc_interface.c ****   *         s16V. To convert s16V into Volts following formula must be used:
1571:Src/mc_interface.c ****   *         PhaseVoltage(V) = [PhaseVoltage(s16A) * Vbus(V)] /[sqrt(3) *32767]
1572:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1573:Src/mc_interface.c ****   * @retval int16_t Motor phase voltage (0-to-peak) in s16V
1574:Src/mc_interface.c ****   */
1575:Src/mc_interface.c **** __weak int16_t MCI_GetPhaseVoltageAmplitude(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1576:Src/mc_interface.c **** {
 2517              		.loc 1 1576 1 is_stmt 1 view -0
 2518              		.cfi_startproc
 2519              		@ args = 0, pretend = 0, frame = 0
 2520              		@ frame_needed = 0, uses_anonymous_args = 0
1577:Src/mc_interface.c ****   int16_t temp_wAux;
 2521              		.loc 1 1577 3 view .LVU641
1578:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
ARM GAS  /tmp/ccPF8NO0.s 			page 106


1579:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1580:Src/mc_interface.c ****   {
1581:Src/mc_interface.c ****     temp_wAux = 0;
1582:Src/mc_interface.c ****   }
1583:Src/mc_interface.c ****   else
1584:Src/mc_interface.c ****   {
1585:Src/mc_interface.c **** #endif
1586:Src/mc_interface.c ****     alphabeta_t Local_Voltage;
 2522              		.loc 1 1586 5 view .LVU642
1587:Src/mc_interface.c ****     int32_t wAux1;
 2523              		.loc 1 1587 5 view .LVU643
1588:Src/mc_interface.c ****     int32_t wAux2;
 2524              		.loc 1 1588 5 view .LVU644
1589:Src/mc_interface.c **** 
1590:Src/mc_interface.c ****     Local_Voltage = pHandle->pFOCVars->Valphabeta;
 2525              		.loc 1 1590 5 view .LVU645
 2526              		.loc 1 1590 28 is_stmt 0 view .LVU646
 2527 0000 4268     		ldr	r2, [r0, #4]
1576:Src/mc_interface.c ****   int16_t temp_wAux;
 2528              		.loc 1 1576 1 view .LVU647
 2529 0002 08B5     		push	{r3, lr}
 2530              	.LCFI38:
 2531              		.cfi_def_cfa_offset 8
 2532              		.cfi_offset 3, -8
 2533              		.cfi_offset 14, -4
 2534              		.loc 1 1590 19 view .LVU648
 2535 0004 B2F91C30 		ldrsh	r3, [r2, #28]
 2536 0008 B2F91A00 		ldrsh	r0, [r2, #26]
 2537              	.LVL182:
1591:Src/mc_interface.c ****     wAux1 = (int32_t)(Local_Voltage.alpha) * Local_Voltage.alpha;
 2538              		.loc 1 1591 5 is_stmt 1 view .LVU649
1592:Src/mc_interface.c ****     wAux2 = (int32_t)(Local_Voltage.beta) * Local_Voltage.beta;
 2539              		.loc 1 1592 5 view .LVU650
1593:Src/mc_interface.c **** 
1594:Src/mc_interface.c ****     wAux1 += wAux2;
 2540              		.loc 1 1594 5 view .LVU651
1592:Src/mc_interface.c ****     wAux2 = (int32_t)(Local_Voltage.beta) * Local_Voltage.beta;
 2541              		.loc 1 1592 11 is_stmt 0 view .LVU652
 2542 000c 03FB03F3 		mul	r3, r3, r3
 2543              	.LVL183:
1595:Src/mc_interface.c ****     wAux1 = MCM_Sqrt(wAux1);
 2544              		.loc 1 1595 5 is_stmt 1 view .LVU653
 2545              		.loc 1 1595 13 is_stmt 0 view .LVU654
 2546 0010 00FB0030 		mla	r0, r0, r0, r3
 2547              	.LVL184:
 2548              		.loc 1 1595 13 view .LVU655
 2549 0014 FFF7FEFF 		bl	MCM_Sqrt
 2550              	.LVL185:
1596:Src/mc_interface.c **** 
1597:Src/mc_interface.c ****     if (wAux1 > INT16_MAX)
 2551              		.loc 1 1597 5 is_stmt 1 view .LVU656
1598:Src/mc_interface.c ****     {
1599:Src/mc_interface.c ****       wAux1 = (int32_t)INT16_MAX;
1600:Src/mc_interface.c ****     }
1601:Src/mc_interface.c ****     temp_wAux = (int16_t)wAux1;
 2552              		.loc 1 1601 5 view .LVU657
1602:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
ARM GAS  /tmp/ccPF8NO0.s 			page 107


1603:Src/mc_interface.c ****   }
1604:Src/mc_interface.c **** #endif
1605:Src/mc_interface.c ****   return (temp_wAux);
 2553              		.loc 1 1605 3 view .LVU658
1601:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2554              		.loc 1 1601 15 is_stmt 0 view .LVU659
 2555 0018 47F6FF73 		movw	r3, #32767
 2556 001c 9842     		cmp	r0, r3
 2557 001e A8BF     		it	ge
 2558 0020 1846     		movge	r0, r3
 2559              	.LVL186:
1606:Src/mc_interface.c **** }
 2560              		.loc 1 1606 1 view .LVU660
 2561 0022 00B2     		sxth	r0, r0
 2562 0024 08BD     		pop	{r3, pc}
 2563              		.cfi_endproc
 2564              	.LFE1762:
 2566 0026 00BF     		.section	.text.MCI_Clear_Iqdref,"ax",%progbits
 2567              		.align	1
 2568              		.p2align 2,,3
 2569              		.weak	MCI_Clear_Iqdref
 2570              		.syntax unified
 2571              		.thumb
 2572              		.thumb_func
 2573              		.fpu fpv4-sp-d16
 2575              	MCI_Clear_Iqdref:
 2576              	.LVL187:
 2577              	.LFB1763:
1607:Src/mc_interface.c **** 
1608:Src/mc_interface.c **** /**
1609:Src/mc_interface.c ****   * @brief  It re-initializes Iqdref variables with their default values.
1610:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1611:Src/mc_interface.c ****   */
1612:Src/mc_interface.c **** __weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
1613:Src/mc_interface.c **** {
 2578              		.loc 1 1613 1 is_stmt 1 view -0
 2579              		.cfi_startproc
 2580              		@ args = 0, pretend = 0, frame = 0
 2581              		@ frame_needed = 0, uses_anonymous_args = 0
1614:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1615:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1616:Src/mc_interface.c ****   {
1617:Src/mc_interface.c ****     /* Nothing to do */
1618:Src/mc_interface.c ****   }
1619:Src/mc_interface.c ****   else
1620:Src/mc_interface.c ****   {
1621:Src/mc_interface.c **** #endif
1622:Src/mc_interface.c ****     pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 2582              		.loc 1 1622 5 view .LVU662
1613:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2583              		.loc 1 1613 1 is_stmt 0 view .LVU663
 2584 0000 10B5     		push	{r4, lr}
 2585              	.LCFI39:
 2586              		.cfi_def_cfa_offset 8
 2587              		.cfi_offset 4, -8
 2588              		.cfi_offset 14, -4
 2589              		.loc 1 1622 12 view .LVU664
ARM GAS  /tmp/ccPF8NO0.s 			page 108


 2590 0002 D0E90004 		ldrd	r0, r4, [r0]
 2591              	.LVL188:
 2592              		.loc 1 1622 33 view .LVU665
 2593 0006 FFF7FEFF 		bl	STC_GetDefaultIqdref
 2594              	.LVL189:
 2595 000a C0F30F43 		ubfx	r3, r0, #16, #16
 2596 000e 2082     		strh	r0, [r4, #16]	@ movhi
 2597 0010 6382     		strh	r3, [r4, #18]	@ movhi
1623:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1624:Src/mc_interface.c ****   }
1625:Src/mc_interface.c **** #endif
1626:Src/mc_interface.c **** }
 2598              		.loc 1 1626 1 view .LVU666
 2599 0012 10BD     		pop	{r4, pc}
 2600              		.cfi_endproc
 2601              	.LFE1763:
 2603              		.section	.text.MCI_Clear_PerfMeasure,"ax",%progbits
 2604              		.align	1
 2605              		.p2align 2,,3
 2606              		.weak	MCI_Clear_PerfMeasure
 2607              		.syntax unified
 2608              		.thumb
 2609              		.thumb_func
 2610              		.fpu fpv4-sp-d16
 2612              	MCI_Clear_PerfMeasure:
 2613              	.LVL190:
 2614              	.LFB1764:
1627:Src/mc_interface.c **** __weak void MCI_Clear_PerfMeasure(MCI_Handle_t *pHandle, uint8_t bMotor)
1628:Src/mc_interface.c **** {
 2615              		.loc 1 1628 1 is_stmt 1 view -0
 2616              		.cfi_startproc
 2617              		@ args = 0, pretend = 0, frame = 0
 2618              		@ frame_needed = 0, uses_anonymous_args = 0
 2619              		@ link register save eliminated.
1629:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1630:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1631:Src/mc_interface.c ****   {
1632:Src/mc_interface.c ****     /* Nothing to do */
1633:Src/mc_interface.c ****   }
1634:Src/mc_interface.c ****   else
1635:Src/mc_interface.c ****   {
1636:Src/mc_interface.c **** #endif
1637:Src/mc_interface.c ****     MC_Perf_Clear(pHandle->pPerfMeasure,bMotor);
 2620              		.loc 1 1637 5 view .LVU668
 2621 0000 806A     		ldr	r0, [r0, #40]
 2622              	.LVL191:
 2623              		.loc 1 1637 5 is_stmt 0 view .LVU669
 2624 0002 FFF7FEBF 		b	MC_Perf_Clear
 2625              	.LVL192:
 2626              		.loc 1 1637 5 view .LVU670
 2627              		.cfi_endproc
 2628              	.LFE1764:
 2630 0006 00BF     		.text
 2631              	.Letext0:
 2632              		.file 7 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_type
 2633              		.file 8 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 2634              		.file 9 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
ARM GAS  /tmp/ccPF8NO0.s 			page 109


 2635              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 2636              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 2637              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 2638              		.file 13 "Inc/mc_type.h"
 2639              		.file 14 "MCSDK_v6.3.2-Full/MotorControl/MCSDK/MCLib/Any/Inc/pid_regulator.h"
 2640              		.file 15 "Inc/pwm_curr_fdbk.h"
 2641              		.file 16 "Inc/mc_perf.h"
 2642              		.file 17 "Inc/mc_interface.h"
ARM GAS  /tmp/ccPF8NO0.s 			page 110


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mc_interface.c
     /tmp/ccPF8NO0.s:18     .text.MCI_ExecSpeedRamp:0000000000000000 $t
     /tmp/ccPF8NO0.s:27     .text.MCI_ExecSpeedRamp:0000000000000000 MCI_ExecSpeedRamp
     /tmp/ccPF8NO0.s:59     .text.MCI_ExecSpeedRamp_F:0000000000000000 $t
     /tmp/ccPF8NO0.s:67     .text.MCI_ExecSpeedRamp_F:0000000000000000 MCI_ExecSpeedRamp_F
     /tmp/ccPF8NO0.s:107    .text.MCI_ExecSpeedRamp_F:0000000000000024 $d
     /tmp/ccPF8NO0.s:112    .text.MCI_ExecTorqueRamp:0000000000000000 $t
     /tmp/ccPF8NO0.s:120    .text.MCI_ExecTorqueRamp:0000000000000000 MCI_ExecTorqueRamp
     /tmp/ccPF8NO0.s:151    .text.MCI_ExecTorqueRamp_F:0000000000000000 $t
     /tmp/ccPF8NO0.s:159    .text.MCI_ExecTorqueRamp_F:0000000000000000 MCI_ExecTorqueRamp_F
     /tmp/ccPF8NO0.s:195    .text.MCI_ExecTorqueRamp_F:000000000000001c $d
     /tmp/ccPF8NO0.s:200    .text.MCI_SetCurrentReferences:0000000000000000 $t
     /tmp/ccPF8NO0.s:208    .text.MCI_SetCurrentReferences:0000000000000000 MCI_SetCurrentReferences
     /tmp/ccPF8NO0.s:245    .text.MCI_SetCurrentReferences_F:0000000000000000 $t
     /tmp/ccPF8NO0.s:253    .text.MCI_SetCurrentReferences_F:0000000000000000 MCI_SetCurrentReferences_F
     /tmp/ccPF8NO0.s:308    .text.MCI_SetCurrentReferences_F:0000000000000034 $d
     /tmp/ccPF8NO0.s:313    .text.MCI_GetCalibratedOffsetsMotor:0000000000000000 $t
     /tmp/ccPF8NO0.s:321    .text.MCI_GetCalibratedOffsetsMotor:0000000000000000 MCI_GetCalibratedOffsetsMotor
     /tmp/ccPF8NO0.s:365    .text.MCI_FaultProcessing:0000000000000000 $t
     /tmp/ccPF8NO0.s:373    .text.MCI_FaultProcessing:0000000000000000 MCI_FaultProcessing
     /tmp/ccPF8NO0.s:403    .text.MCI_ExecBufferedCommands:0000000000000000 $t
     /tmp/ccPF8NO0.s:411    .text.MCI_ExecBufferedCommands:0000000000000000 MCI_ExecBufferedCommands
     /tmp/ccPF8NO0.s:537    .text.MCI_IsCommandAcknowledged:0000000000000000 $t
     /tmp/ccPF8NO0.s:545    .text.MCI_IsCommandAcknowledged:0000000000000000 MCI_IsCommandAcknowledged
     /tmp/ccPF8NO0.s:578    .text.MCI_GetSTMState:0000000000000000 $t
     /tmp/ccPF8NO0.s:586    .text.MCI_GetSTMState:0000000000000000 MCI_GetSTMState
     /tmp/ccPF8NO0.s:604    .text.MCI_GetOccurredFaults:0000000000000000 $t
     /tmp/ccPF8NO0.s:612    .text.MCI_GetOccurredFaults:0000000000000000 MCI_GetOccurredFaults
     /tmp/ccPF8NO0.s:630    .text.MCI_GetCurrentFaults:0000000000000000 $t
     /tmp/ccPF8NO0.s:638    .text.MCI_GetCurrentFaults:0000000000000000 MCI_GetCurrentFaults
     /tmp/ccPF8NO0.s:656    .text.MCI_StartMotor:0000000000000000 $t
     /tmp/ccPF8NO0.s:664    .text.MCI_StartMotor:0000000000000000 MCI_StartMotor
     /tmp/ccPF8NO0.s:728    .text.MCI_StartWithPolarizationMotor:0000000000000000 $t
     /tmp/ccPF8NO0.s:736    .text.MCI_StartWithPolarizationMotor:0000000000000000 MCI_StartWithPolarizationMotor
     /tmp/ccPF8NO0.s:809    .text.MCI_StartOffsetMeasurments:0000000000000000 $t
     /tmp/ccPF8NO0.s:817    .text.MCI_StartOffsetMeasurments:0000000000000000 MCI_StartOffsetMeasurments
     /tmp/ccPF8NO0.s:886    .text.MCI_SetCalibratedOffsetsMotor:0000000000000000 $t
     /tmp/ccPF8NO0.s:894    .text.MCI_SetCalibratedOffsetsMotor:0000000000000000 MCI_SetCalibratedOffsetsMotor
     /tmp/ccPF8NO0.s:964    .text.MCI_StopMotor:0000000000000000 $t
     /tmp/ccPF8NO0.s:972    .text.MCI_StopMotor:0000000000000000 MCI_StopMotor
     /tmp/ccPF8NO0.s:1062   .text.MCI_FaultAcknowledged:0000000000000000 $t
     /tmp/ccPF8NO0.s:1070   .text.MCI_FaultAcknowledged:0000000000000000 MCI_FaultAcknowledged
     /tmp/ccPF8NO0.s:1131   .text.MCI_GetFaultState:0000000000000000 $t
     /tmp/ccPF8NO0.s:1139   .text.MCI_GetFaultState:0000000000000000 MCI_GetFaultState
     /tmp/ccPF8NO0.s:1164   .text.MCI_GetControlMode:0000000000000000 $t
     /tmp/ccPF8NO0.s:1172   .text.MCI_GetControlMode:0000000000000000 MCI_GetControlMode
     /tmp/ccPF8NO0.s:1190   .text.MCI_GetImposedMotorDirection:0000000000000000 $t
     /tmp/ccPF8NO0.s:1198   .text.MCI_GetImposedMotorDirection:0000000000000000 MCI_GetImposedMotorDirection
     /tmp/ccPF8NO0.s:1265   .text.MCI_GetLastRampFinalSpeed:0000000000000000 $t
     /tmp/ccPF8NO0.s:1273   .text.MCI_GetLastRampFinalSpeed:0000000000000000 MCI_GetLastRampFinalSpeed
     /tmp/ccPF8NO0.s:1291   .text.MCI_GetLastRampFinalTorque:0000000000000000 $t
     /tmp/ccPF8NO0.s:1299   .text.MCI_GetLastRampFinalTorque:0000000000000000 MCI_GetLastRampFinalTorque
     /tmp/ccPF8NO0.s:1317   .text.MCI_GetLastRampFinalTorque_F:0000000000000000 $t
     /tmp/ccPF8NO0.s:1325   .text.MCI_GetLastRampFinalTorque_F:0000000000000000 MCI_GetLastRampFinalTorque_F
     /tmp/ccPF8NO0.s:1351   .text.MCI_GetLastRampFinalDuration:0000000000000000 $t
     /tmp/ccPF8NO0.s:1359   .text.MCI_GetLastRampFinalDuration:0000000000000000 MCI_GetLastRampFinalDuration
ARM GAS  /tmp/ccPF8NO0.s 			page 111


     /tmp/ccPF8NO0.s:1377   .text.MCI_GetLastRampFinalSpeed_F:0000000000000000 $t
     /tmp/ccPF8NO0.s:1385   .text.MCI_GetLastRampFinalSpeed_F:0000000000000000 MCI_GetLastRampFinalSpeed_F
     /tmp/ccPF8NO0.s:1424   .text.MCI_GetLastRampFinalSpeed_F:0000000000000028 $d
     /tmp/ccPF8NO0.s:1430   .text.MCI_RampCompleted:0000000000000000 $t
     /tmp/ccPF8NO0.s:1438   .text.MCI_RampCompleted:0000000000000000 MCI_RampCompleted
     /tmp/ccPF8NO0.s:1497   .text.MCI_StopSpeedRamp:0000000000000000 $t
     /tmp/ccPF8NO0.s:1505   .text.MCI_StopSpeedRamp:0000000000000000 MCI_StopSpeedRamp
     /tmp/ccPF8NO0.s:1524   .text.MCI_StopRamp:0000000000000000 $t
     /tmp/ccPF8NO0.s:1532   .text.MCI_StopRamp:0000000000000000 MCI_StopRamp
     /tmp/ccPF8NO0.s:1564   .text.MCI_GetSpdSensorReliability:0000000000000000 $t
     /tmp/ccPF8NO0.s:1572   .text.MCI_GetSpdSensorReliability:0000000000000000 MCI_GetSpdSensorReliability
     /tmp/ccPF8NO0.s:1630   .text.MCI_GetAvrgMecSpeedUnit:0000000000000000 $t
     /tmp/ccPF8NO0.s:1638   .text.MCI_GetAvrgMecSpeedUnit:0000000000000000 MCI_GetAvrgMecSpeedUnit
     /tmp/ccPF8NO0.s:1674   .text.MCI_GetAvrgMecSpeed_F:0000000000000000 $t
     /tmp/ccPF8NO0.s:1682   .text.MCI_GetAvrgMecSpeed_F:0000000000000000 MCI_GetAvrgMecSpeed_F
     /tmp/ccPF8NO0.s:1735   .text.MCI_GetAvrgMecSpeed_F:0000000000000024 $d
     /tmp/ccPF8NO0.s:1740   .text.MCI_GetMecSpeedRefUnit:0000000000000000 $t
     /tmp/ccPF8NO0.s:1748   .text.MCI_GetMecSpeedRefUnit:0000000000000000 MCI_GetMecSpeedRefUnit
     /tmp/ccPF8NO0.s:1767   .text.MCI_GetMecSpeedRef_F:0000000000000000 $t
     /tmp/ccPF8NO0.s:1775   .text.MCI_GetMecSpeedRef_F:0000000000000000 MCI_GetMecSpeedRef_F
     /tmp/ccPF8NO0.s:1811   .text.MCI_GetMecSpeedRef_F:0000000000000024 $d
     /tmp/ccPF8NO0.s:1816   .text.MCI_GetIab:0000000000000000 $t
     /tmp/ccPF8NO0.s:1824   .text.MCI_GetIab:0000000000000000 MCI_GetIab
     /tmp/ccPF8NO0.s:1858   .text.MCI_GetIab_F:0000000000000000 $t
     /tmp/ccPF8NO0.s:1866   .text.MCI_GetIab_F:0000000000000000 MCI_GetIab_F
     /tmp/ccPF8NO0.s:1916   .text.MCI_GetIalphabeta:0000000000000000 $t
     /tmp/ccPF8NO0.s:1924   .text.MCI_GetIalphabeta:0000000000000000 MCI_GetIalphabeta
     /tmp/ccPF8NO0.s:1958   .text.MCI_GetIqd:0000000000000000 $t
     /tmp/ccPF8NO0.s:1966   .text.MCI_GetIqd:0000000000000000 MCI_GetIqd
     /tmp/ccPF8NO0.s:2000   .text.MCI_GetIqd_F:0000000000000000 $t
     /tmp/ccPF8NO0.s:2008   .text.MCI_GetIqd_F:0000000000000000 MCI_GetIqd_F
     /tmp/ccPF8NO0.s:2057   .text.MCI_GetIqdHF:0000000000000000 $t
     /tmp/ccPF8NO0.s:2065   .text.MCI_GetIqdHF:0000000000000000 MCI_GetIqdHF
     /tmp/ccPF8NO0.s:2099   .text.MCI_GetIqdref:0000000000000000 $t
     /tmp/ccPF8NO0.s:2107   .text.MCI_GetIqdref:0000000000000000 MCI_GetIqdref
     /tmp/ccPF8NO0.s:2141   .text.MCI_GetIqdref_F:0000000000000000 $t
     /tmp/ccPF8NO0.s:2149   .text.MCI_GetIqdref_F:0000000000000000 MCI_GetIqdref_F
     /tmp/ccPF8NO0.s:2198   .text.MCI_GetVqd:0000000000000000 $t
     /tmp/ccPF8NO0.s:2206   .text.MCI_GetVqd:0000000000000000 MCI_GetVqd
     /tmp/ccPF8NO0.s:2240   .text.MCI_GetValphabeta:0000000000000000 $t
     /tmp/ccPF8NO0.s:2248   .text.MCI_GetValphabeta:0000000000000000 MCI_GetValphabeta
     /tmp/ccPF8NO0.s:2282   .text.MCI_GetElAngledpp:0000000000000000 $t
     /tmp/ccPF8NO0.s:2290   .text.MCI_GetElAngledpp:0000000000000000 MCI_GetElAngledpp
     /tmp/ccPF8NO0.s:2310   .text.MCI_GetTeref:0000000000000000 $t
     /tmp/ccPF8NO0.s:2318   .text.MCI_GetTeref:0000000000000000 MCI_GetTeref
     /tmp/ccPF8NO0.s:2338   .text.MCI_GetTeref_F:0000000000000000 $t
     /tmp/ccPF8NO0.s:2346   .text.MCI_GetTeref_F:0000000000000000 MCI_GetTeref_F
     /tmp/ccPF8NO0.s:2376   .text.MCI_GetPhaseCurrentAmplitude:0000000000000000 $t
     /tmp/ccPF8NO0.s:2384   .text.MCI_GetPhaseCurrentAmplitude:0000000000000000 MCI_GetPhaseCurrentAmplitude
     /tmp/ccPF8NO0.s:2500   .text.MCI_GetPhaseCurrentAmplitude:000000000000001c $d
     /tmp/ccPF8NO0.s:2506   .text.MCI_GetPhaseVoltageAmplitude:0000000000000000 $t
     /tmp/ccPF8NO0.s:2514   .text.MCI_GetPhaseVoltageAmplitude:0000000000000000 MCI_GetPhaseVoltageAmplitude
     /tmp/ccPF8NO0.s:2567   .text.MCI_Clear_Iqdref:0000000000000000 $t
     /tmp/ccPF8NO0.s:2575   .text.MCI_Clear_Iqdref:0000000000000000 MCI_Clear_Iqdref
     /tmp/ccPF8NO0.s:2604   .text.MCI_Clear_PerfMeasure:0000000000000000 $t
     /tmp/ccPF8NO0.s:2612   .text.MCI_Clear_PerfMeasure:0000000000000000 MCI_Clear_PerfMeasure

ARM GAS  /tmp/ccPF8NO0.s 			page 112


UNDEFINED SYMBOLS
PWMC_GetOffsetCalib
STC_SetControlMode
STC_ExecRamp
PWMC_SetOffsetCalib
STC_StopSpeedRamp
SPD_GetAvrgMecSpeedUnit
STC_GetMecSpeedRefUnit
MCM_Sqrt
STC_GetDefaultIqdref
MC_Perf_Clear
