ARM GAS  /tmp/ccKQCraR.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"utils.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.LL_CORDIC_Config,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	LL_CORDIC_Config:
  26              	.LFB1030:
  27              		.file 1 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h"
   1:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
   2:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   ******************************************************************************
   3:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @file    stm32g4xx_ll_cordic.h
   4:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @author  MCD Application Team
   5:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief   Header file of CORDIC LL module.
   6:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   ******************************************************************************
   7:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @attention
   8:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *
   9:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * Copyright (c) 2019 STMicroelectronics.
  10:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * All rights reserved.
  11:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *
  12:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * in the root directory of this software component.
  14:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *
  16:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   ******************************************************************************
  17:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  18:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  19:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #ifndef STM32G4xx_LL_CORDIC_H
  21:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define STM32G4xx_LL_CORDIC_H
  22:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  23:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #ifdef __cplusplus
  24:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** extern "C" {
  25:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #endif
  26:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  27:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #include "stm32g4xx.h"
  29:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  30:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @addtogroup STM32G4xx_LL_Driver
  31:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
ARM GAS  /tmp/ccKQCraR.s 			page 2


  32:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  33:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  34:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #if defined(CORDIC)
  35:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  36:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL CORDIC
  37:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  38:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  39:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  40:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Private variables ---------------------------------------------------------*/
  41:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  42:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Private constants ---------------------------------------------------------*/
  43:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  44:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Private macros ------------------------------------------------------------*/
  45:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  46:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported types ------------------------------------------------------------*/
  47:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  48:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported constants --------------------------------------------------------*/
  49:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_Exported_Constants CORDIC Exported Constants
  50:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  51:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  52:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  53:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_GET_FLAG Get Flags Defines
  54:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief    Flags defines which can be used with LL_CORDIC_ReadReg function.
  55:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  56:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  57:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FLAG_RRDY                CORDIC_CSR_RRDY
  58:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
  59:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
  60:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  61:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  62:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_IT IT Defines
  63:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief    IT defines which can be used with LL_CORDIC_ReadReg and LL_CORDIC_WriteReg functions.
  64:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  65:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  66:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_IT_IEN                   CORDIC_CSR_IEN            /*!< Result Ready interrupt en
  67:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
  68:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
  69:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  70:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  71:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_FUNCTION FUNCTION
  72:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  73:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  74:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_COSINE          (0x00000000U)                                           
  75:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_SINE            ((uint32_t)(CORDIC_CSR_FUNC_0))                         
  76:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_PHASE           ((uint32_t)(CORDIC_CSR_FUNC_1))                         
  77:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_MODULUS         ((uint32_t)(CORDIC_CSR_FUNC_1 | CORDIC_CSR_FUNC_0))     
  78:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_ARCTANGENT      ((uint32_t)(CORDIC_CSR_FUNC_2))                         
  79:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_HCOSINE         ((uint32_t)(CORDIC_CSR_FUNC_2 | CORDIC_CSR_FUNC_0))     
  80:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_HSINE           ((uint32_t)(CORDIC_CSR_FUNC_2 | CORDIC_CSR_FUNC_1))     
  81:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_HARCTANGENT     ((uint32_t)(CORDIC_CSR_FUNC_2 | CORDIC_CSR_FUNC_1 | CORD
  82:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_NATURALLOG      ((uint32_t)(CORDIC_CSR_FUNC_3))                         
  83:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_FUNCTION_SQUAREROOT      ((uint32_t)(CORDIC_CSR_FUNC_3 | CORDIC_CSR_FUNC_0))     
  84:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
  85:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
  86:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  87:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
  88:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_PRECISION PRECISION
ARM GAS  /tmp/ccKQCraR.s 			page 3


  89:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
  90:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
  91:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_1CYCLE         ((uint32_t)(CORDIC_CSR_PRECISION_0))
  92:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_2CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_1))
  93:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_3CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_1 | CORDIC_CSR_PRECISIO
  94:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_4CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2))
  95:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_5CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECISIO
  96:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_6CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECISIO
  97:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_7CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_2\
  98:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_1 | CORDIC_CSR_PRECIS
  99:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_8CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_3))
 100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_9CYCLES        ((uint32_t)(CORDIC_CSR_PRECISION_3 | CORDIC_CSR_PRECISIO
 101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_10CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3 | CORDIC_CSR_PRECISIO
 102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_11CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_1 | CORDIC_CSR_PRECIS
 104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_12CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3 | CORDIC_CSR_PRECISIO
 105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_13CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECIS
 107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_14CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECIS
 109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_PRECISION_15CYCLES       ((uint32_t)(CORDIC_CSR_PRECISION_3\
 110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_2 | CORDIC_CSR_PRECIS
 111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                        | CORDIC_CSR_PRECISION_0))
 112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_SCALE SCALE
 117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_0                  (0x00000000U)
 120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_1                  ((uint32_t)(CORDIC_CSR_SCALE_0))
 121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_2                  ((uint32_t)(CORDIC_CSR_SCALE_1))
 122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_3                  ((uint32_t)(CORDIC_CSR_SCALE_1 | CORDIC_CSR_SCALE_0))
 123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_4                  ((uint32_t)(CORDIC_CSR_SCALE_2))
 124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_5                  ((uint32_t)(CORDIC_CSR_SCALE_2 | CORDIC_CSR_SCALE_0))
 125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_6                  ((uint32_t)(CORDIC_CSR_SCALE_2 | CORDIC_CSR_SCALE_1))
 126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_SCALE_7                  ((uint32_t)(CORDIC_CSR_SCALE_2 | CORDIC_CSR_SCALE_1 | CO
 127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_NBWRITE NBWRITE
 132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBWRITE_1                (0x00000000U)             /*!< One 32-bits write contain
 135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           32-bit data input (Q1.31 
 136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           16-bit data input (Q1.15 
 137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           in one 32 bits Data */
 138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBWRITE_2                CORDIC_CSR_NARGS          /*!< Two 32-bit write containi
 139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           (Q1.31 format) */
 140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_NBREAD NBREAD
 145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
ARM GAS  /tmp/ccKQCraR.s 			page 4


 146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBREAD_1                 (0x00000000U)             /*!< One 32-bits read containi
 148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           32-bit data output (Q1.31
 149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           16-bit data output (Q1.15
 150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           in one 32 bits Data */
 151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_NBREAD_2                 CORDIC_CSR_NRES           /*!< Two 32-bit Data containin
 152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                                                           (Q1.31 format) */
 153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_INSIZE INSIZE
 158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_INSIZE_32BITS            (0x00000000U)             /*!< 32 bits input data size (
 161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_INSIZE_16BITS            CORDIC_CSR_ARGSIZE        /*!< 16 bits input data size (
 162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_OUTSIZE OUTSIZE
 167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_OUTSIZE_32BITS           (0x00000000U)             /*!< 32 bits output data size 
 170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_OUTSIZE_16BITS           CORDIC_CSR_RESSIZE        /*!< 16 bits output data size 
 171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EC_DMA_REG_DATA DMA register data
 176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_DMA_REG_DATA_IN          (0x00000000U)             /*!< Get address of input data
 179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_DMA_REG_DATA_OUT         (0x00000001U)             /*!< Get address of output dat
 180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported macro ------------------------------------------------------------*/
 189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_Exported_Macros CORDIC Exported Macros
 190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EM_WRITE_READ Common Write and read registers Macros
 194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Write a value in CORDIC register.
 199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __INSTANCE__ CORDIC Instance
 200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __REG__ Register to be written
 201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __VALUE__ Value to be written in the register
 202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
ARM GAS  /tmp/ccKQCraR.s 			page 5


 203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VA
 205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Read a value in CORDIC register.
 208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __INSTANCE__ CORDIC Instance
 209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  __REG__ Register to be read
 210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Register value
 211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** #define LL_CORDIC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /* Exported functions --------------------------------------------------------*/
 223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_Exported_Functions CORDIC Exported Functions
 225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_Configuration CORDIC Configuration functions
 229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure the CORDIC processing.
 234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @note   This function set all parameters of CORDIC processing.
 235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         These parameters can also be set individually using
 236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         dedicated functions:
 237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetFunction()
 238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetPrecision()
 239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetScale()
 240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetNbWrite()
 241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetNbRead()
 242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetInSize()
 243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         - @ref LL_CORDIC_SetOutSize()
 244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          FUNC          LL_CORDIC_Config\n
 245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          PRECISION     LL_CORDIC_Config\n
 246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          SCALE         LL_CORDIC_Config\n
 247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          NARGS         LL_CORDIC_Config\n
 248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          NRES          LL_CORDIC_Config\n
 249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          ARGSIZE       LL_CORDIC_Config\n
 250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         CSR          RESIZE        LL_CORDIC_Config
 251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC instance
 252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Function parameter can be one of the following values:
 253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_COSINE
 254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SINE
 255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_PHASE
 256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_MODULUS
 257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_ARCTANGENT
 258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HCOSINE
 259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HSINE
ARM GAS  /tmp/ccKQCraR.s 			page 6


 260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HARCTANGENT
 261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_NATURALLOG
 262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SQUAREROOT
 263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Precision parameter can be one of the following values:
 264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_1CYCLE
 265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_2CYCLES
 266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_3CYCLES
 267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_4CYCLES
 268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_5CYCLES
 269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_6CYCLES
 270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_7CYCLES
 271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_8CYCLES
 272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_9CYCLES
 273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_10CYCLES
 274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_11CYCLES
 275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_12CYCLES
 276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_13CYCLES
 277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_14CYCLES
 278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_15CYCLES
 279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Scale parameter can be one of the following values:
 280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_0
 281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_1
 282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_2
 283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_3
 284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_4
 285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_5
 286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_6
 287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_7
 288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbWrite parameter can be one of the following values:
 289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_1
 290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_2
 291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbRead parameter can be one of the following values:
 292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_1
 293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_2
 294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  InSize parameter can be one of the following values:
 295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_32BITS
 296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_16BITS
 297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  OutSize parameter can be one of the following values:
 298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_32BITS
 299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
 300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_Config(CORDIC_TypeDef *CORDICx, uint32_t Function, uint32_t Precisio
 303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****                                       uint32_t NbWrite, uint32_t NbRead, uint32_t InSize, uint32_t 
 304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
  28              		.loc 1 304 1
  29              		.cfi_startproc
  30              		@ args = 16, pretend = 0, frame = 16
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 85B0     		sub	sp, sp, #20
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccKQCraR.s 			page 7


  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 F860     		str	r0, [r7, #12]
  44 0008 B960     		str	r1, [r7, #8]
  45 000a 7A60     		str	r2, [r7, #4]
  46 000c 3B60     		str	r3, [r7]
 305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR,
  47              		.loc 1 305 3
  48 000e FB68     		ldr	r3, [r7, #12]
  49 0010 1A68     		ldr	r2, [r3]
  50 0012 0C4B     		ldr	r3, .L2
  51 0014 1340     		ands	r3, r3, r2
  52 0016 B968     		ldr	r1, [r7, #8]
  53 0018 7A68     		ldr	r2, [r7, #4]
  54 001a 1143     		orrs	r1, r1, r2
  55 001c 3A68     		ldr	r2, [r7]
  56 001e 1143     		orrs	r1, r1, r2
  57 0020 BA69     		ldr	r2, [r7, #24]
  58 0022 1143     		orrs	r1, r1, r2
  59 0024 FA69     		ldr	r2, [r7, #28]
  60 0026 1143     		orrs	r1, r1, r2
  61 0028 3A6A     		ldr	r2, [r7, #32]
  62 002a 1143     		orrs	r1, r1, r2
  63 002c 7A6A     		ldr	r2, [r7, #36]
  64 002e 0A43     		orrs	r2, r2, r1
  65 0030 1A43     		orrs	r2, r2, r3
  66 0032 FB68     		ldr	r3, [r7, #12]
  67 0034 1A60     		str	r2, [r3]
 306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              CORDIC_CSR_FUNC | CORDIC_CSR_PRECISION | CORDIC_CSR_SCALE |
 307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              CORDIC_CSR_NARGS | CORDIC_CSR_NRES | CORDIC_CSR_ARGSIZE | CORDIC_CSR_RESSIZE,
 308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              Function | Precision | Scale |
 309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****              NbWrite | NbRead | InSize | OutSize);
 310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
  68              		.loc 1 310 1
  69 0036 00BF     		nop
  70 0038 1437     		adds	r7, r7, #20
  71              	.LCFI3:
  72              		.cfi_def_cfa_offset 4
  73 003a BD46     		mov	sp, r7
  74              	.LCFI4:
  75              		.cfi_def_cfa_register 13
  76              		@ sp needed
  77 003c 5DF8047B 		ldr	r7, [sp], #4
  78              	.LCFI5:
  79              		.cfi_restore 7
  80              		.cfi_def_cfa_offset 0
  81 0040 7047     		bx	lr
  82              	.L3:
  83 0042 00BF     		.align	2
  84              	.L2:
  85 0044 00F887FF 		.word	-7866368
  86              		.cfi_endproc
  87              	.LFE1030:
  89              		.section	.text.LL_CORDIC_WriteData,"ax",%progbits
  90              		.align	1
  91              		.syntax unified
ARM GAS  /tmp/ccKQCraR.s 			page 8


  92              		.thumb
  93              		.thumb_func
  94              		.fpu fpv4-sp-d16
  96              	LL_CORDIC_WriteData:
  97              	.LFB1056:
 311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure function.
 314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          FUNC          LL_CORDIC_SetFunction
 315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Function parameter can be one of the following values:
 317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_COSINE
 318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SINE
 319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_PHASE
 320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_MODULUS
 321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_ARCTANGENT
 322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HCOSINE
 323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HSINE
 324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HARCTANGENT
 325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_NATURALLOG
 326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SQUAREROOT
 327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetFunction(CORDIC_TypeDef *CORDICx, uint32_t Function)
 330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_FUNC, Function);
 332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return function.
 336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          FUNC          LL_CORDIC_GetFunction
 337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_COSINE
 340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SINE
 341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_PHASE
 342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_MODULUS
 343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_ARCTANGENT
 344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HCOSINE
 345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HSINE
 346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_HARCTANGENT
 347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_NATURALLOG
 348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_FUNCTION_SQUAREROOT
 349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetFunction(const CORDIC_TypeDef *CORDICx)
 351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_FUNC));
 353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure precision in cycles number.
 357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          PRECISION     LL_CORDIC_SetPrecision
 358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Precision parameter can be one of the following values:
 360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_1CYCLE
 361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_2CYCLES
 362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_3CYCLES
ARM GAS  /tmp/ccKQCraR.s 			page 9


 363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_4CYCLES
 364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_5CYCLES
 365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_6CYCLES
 366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_7CYCLES
 367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_8CYCLES
 368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_9CYCLES
 369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_10CYCLES
 370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_11CYCLES
 371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_12CYCLES
 372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_13CYCLES
 373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_14CYCLES
 374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_15CYCLES
 375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetPrecision(CORDIC_TypeDef *CORDICx, uint32_t Precision)
 378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_PRECISION, Precision);
 380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return precision in cycles number.
 384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          PRECISION     LL_CORDIC_GetPrecision
 385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_1CYCLE
 388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_2CYCLES
 389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_3CYCLES
 390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_4CYCLES
 391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_5CYCLES
 392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_6CYCLES
 393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_7CYCLES
 394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_8CYCLES
 395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_9CYCLES
 396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_10CYCLES
 397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_11CYCLES
 398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_12CYCLES
 399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_13CYCLES
 400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_14CYCLES
 401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_PRECISION_15CYCLES
 402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetPrecision(const CORDIC_TypeDef *CORDICx)
 404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_PRECISION));
 406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure scaling factor.
 410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          SCALE         LL_CORDIC_SetScale
 411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Scale parameter can be one of the following values:
 413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_0
 414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_1
 415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_2
 416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_3
 417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_4
 418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_5
 419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_6
ARM GAS  /tmp/ccKQCraR.s 			page 10


 420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_7
 421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetScale(CORDIC_TypeDef *CORDICx, uint32_t Scale)
 424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_SCALE, Scale);
 426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return scaling factor.
 430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          SCALE         LL_CORDIC_GetScale
 431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_0
 434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_1
 435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_2
 436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_3
 437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_4
 438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_5
 439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_6
 440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_SCALE_7
 441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetScale(const CORDIC_TypeDef *CORDICx)
 443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_SCALE));
 445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure number of 32-bit write expected for one calculation.
 449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NARGS         LL_CORDIC_SetNbWrite
 450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbWrite parameter can be one of the following values:
 452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_1
 453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_2
 454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetNbWrite(CORDIC_TypeDef *CORDICx, uint32_t NbWrite)
 457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_NARGS, NbWrite);
 459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return number of 32-bit write expected for one calculation.
 463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NARGS         LL_CORDIC_GetNbWrite
 464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_1
 467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBWRITE_2
 468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetNbWrite(const CORDIC_TypeDef *CORDICx)
 470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_NARGS));
 472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure number of 32-bit read expected after one calculation.
 476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NRES          LL_CORDIC_SetNbRead
ARM GAS  /tmp/ccKQCraR.s 			page 11


 477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  NbRead parameter can be one of the following values:
 479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_1
 480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_2
 481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetNbRead(CORDIC_TypeDef *CORDICx, uint32_t NbRead)
 484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_NRES, NbRead);
 486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return number of 32-bit read expected after one calculation.
 490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          NRES          LL_CORDIC_GetNbRead
 491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_1
 494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_NBREAD_2
 495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetNbRead(const CORDIC_TypeDef *CORDICx)
 497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_NRES));
 499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure width of input data.
 503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          ARGSIZE       LL_CORDIC_SetInSize
 504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  InSize parameter can be one of the following values:
 506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_32BITS
 507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_16BITS
 508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetInSize(CORDIC_TypeDef *CORDICx, uint32_t InSize)
 511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_ARGSIZE, InSize);
 513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return width of input data.
 517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          ARGSIZE       LL_CORDIC_GetInSize
 518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_32BITS
 521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_INSIZE_16BITS
 522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetInSize(const CORDIC_TypeDef *CORDICx)
 524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_ARGSIZE));
 526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Configure width of output data.
 530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          RESIZE       LL_CORDIC_SetOutSize
 531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  OutSize parameter can be one of the following values:
 533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_32BITS
ARM GAS  /tmp/ccKQCraR.s 			page 12


 534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
 535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_SetOutSize(CORDIC_TypeDef *CORDICx, uint32_t OutSize)
 538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   MODIFY_REG(CORDICx->CSR, CORDIC_CSR_RESSIZE, OutSize);
 540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return width of output data.
 544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          RESIZE       LL_CORDIC_GetOutSize
 545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Returned value can be one of the following values:
 547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_32BITS
 548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_OUTSIZE_16BITS
 549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_GetOutSize(const CORDIC_TypeDef *CORDICx)
 551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_BIT(CORDICx->CSR, CORDIC_CSR_RESSIZE));
 553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_IT_Management IT_Management
 560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Enable CORDIC result ready interrupt
 565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          IEN           LL_CORDIC_EnableIT
 566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_EnableIT(CORDIC_TypeDef *CORDICx)
 570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   SET_BIT(CORDICx->CSR, CORDIC_CSR_IEN);
 572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Disable CORDIC result ready interrupt
 576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          IEN           LL_CORDIC_DisableIT
 577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_DisableIT(CORDIC_TypeDef *CORDICx)
 581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   CLEAR_BIT(CORDICx->CSR, CORDIC_CSR_IEN);
 583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC result ready interrupt state.
 587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          IEN           LL_CORDIC_IsEnabledIT
 588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
ARM GAS  /tmp/ccKQCraR.s 			page 13


 591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsEnabledIT(const CORDIC_TypeDef *CORDICx)
 592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_IEN) == (CORDIC_CSR_IEN)) ? 1U : 0U);
 594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_DMA_Management DMA_Management
 601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Enable CORDIC DMA read channel request.
 606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAREN        LL_CORDIC_EnableDMAReq_RD
 607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_EnableDMAReq_RD(CORDIC_TypeDef *CORDICx)
 611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   SET_BIT(CORDICx->CSR, CORDIC_CSR_DMAREN);
 613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Disable CORDIC DMA read channel request.
 617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAREN        LL_CORDIC_DisableDMAReq_RD
 618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_DisableDMAReq_RD(CORDIC_TypeDef *CORDICx)
 622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   CLEAR_BIT(CORDICx->CSR, CORDIC_CSR_DMAREN);
 624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC DMA read channel request state.
 628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAREN        LL_CORDIC_IsEnabledDMAReq_RD
 629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsEnabledDMAReq_RD(const CORDIC_TypeDef *CORDICx)
 633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_DMAREN) == (CORDIC_CSR_DMAREN)) ? 1U : 0U);
 635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Enable CORDIC DMA write channel request.
 639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAWEN        LL_CORDIC_EnableDMAReq_WR
 640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_EnableDMAReq_WR(CORDIC_TypeDef *CORDICx)
 644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   SET_BIT(CORDICx->CSR, CORDIC_CSR_DMAWEN);
 646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
ARM GAS  /tmp/ccKQCraR.s 			page 14


 648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Disable CORDIC DMA write channel request.
 650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAWEN        LL_CORDIC_DisableDMAReq_WR
 651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_DisableDMAReq_WR(CORDIC_TypeDef *CORDICx)
 655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   CLEAR_BIT(CORDICx->CSR, CORDIC_CSR_DMAWEN);
 657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC DMA write channel request state.
 661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          DMAWEN        LL_CORDIC_IsEnabledDMAReq_WR
 662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsEnabledDMAReq_WR(const CORDIC_TypeDef *CORDICx)
 666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_DMAWEN) == (CORDIC_CSR_DMAWEN)) ? 1U : 0U);
 668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Get the CORDIC data register address used for DMA transfer.
 672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll RDATA        RES           LL_CORDIC_DMA_GetRegAddr\n
 673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll WDATA        ARG           LL_CORDIC_DMA_GetRegAddr
 674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  Direction parameter can be one of the following values:
 676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_DMA_REG_DATA_IN
 677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   *         @arg @ref LL_CORDIC_DMA_REG_DATA_OUT
 678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval Address of data register
 679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_DMA_GetRegAddr(const CORDIC_TypeDef *CORDICx, uint32_t Direction
 681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   uint32_t data_reg_addr;
 683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   if (Direction == LL_CORDIC_DMA_REG_DATA_OUT)
 685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   {
 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     /* return address of RDATA register */
 687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     data_reg_addr = (uint32_t) &(CORDICx->RDATA);
 688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   }
 689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   else
 690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   {
 691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     /* return address of WDATA register */
 692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****     data_reg_addr = (uint32_t) &(CORDICx->WDATA);
 693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   }
 694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return data_reg_addr;
 696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_FLAG_Management FLAG_Management
 703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
ARM GAS  /tmp/ccKQCraR.s 			page 15


 705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Check CORDIC result ready flag state.
 708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll CSR          RRDY          LL_CORDIC_IsActiveFlag_RRDY
 709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval State of bit (1 or 0).
 711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_IsActiveFlag_RRDY(const CORDIC_TypeDef *CORDICx)
 713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_RRDY) == (CORDIC_CSR_RRDY)) ? 1U : 0U);
 715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @}
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /** @defgroup CORDIC_LL_EF_Data_Management Data_Management
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @{
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Write 32-bit input data for the CORDIC processing.
 727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll WDATA        ARG           LL_CORDIC_WriteData
 728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processin
 730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval None
 731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
 733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
  98              		.loc 1 733 1
  99              		.cfi_startproc
 100              		@ args = 0, pretend = 0, frame = 8
 101              		@ frame_needed = 1, uses_anonymous_args = 0
 102              		@ link register save eliminated.
 103 0000 80B4     		push	{r7}
 104              	.LCFI6:
 105              		.cfi_def_cfa_offset 4
 106              		.cfi_offset 7, -4
 107 0002 83B0     		sub	sp, sp, #12
 108              	.LCFI7:
 109              		.cfi_def_cfa_offset 16
 110 0004 00AF     		add	r7, sp, #0
 111              	.LCFI8:
 112              		.cfi_def_cfa_register 7
 113 0006 7860     		str	r0, [r7, #4]
 114 0008 3960     		str	r1, [r7]
 734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   WRITE_REG(CORDICx->WDATA, InData);
 115              		.loc 1 734 3
 116 000a 7B68     		ldr	r3, [r7, #4]
 117 000c 3A68     		ldr	r2, [r7]
 118 000e 5A60     		str	r2, [r3, #4]
 735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 119              		.loc 1 735 1
 120 0010 00BF     		nop
 121 0012 0C37     		adds	r7, r7, #12
 122              	.LCFI9:
 123              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccKQCraR.s 			page 16


 124 0014 BD46     		mov	sp, r7
 125              	.LCFI10:
 126              		.cfi_def_cfa_register 13
 127              		@ sp needed
 128 0016 5DF8047B 		ldr	r7, [sp], #4
 129              	.LCFI11:
 130              		.cfi_restore 7
 131              		.cfi_def_cfa_offset 0
 132 001a 7047     		bx	lr
 133              		.cfi_endproc
 134              	.LFE1056:
 136              		.section	.text.LL_CORDIC_ReadData,"ax",%progbits
 137              		.align	1
 138              		.syntax unified
 139              		.thumb
 140              		.thumb_func
 141              		.fpu fpv4-sp-d16
 143              	LL_CORDIC_ReadData:
 144              	.LFB1057:
 736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** 
 737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** /**
 738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @brief  Return 32-bit output data of CORDIC processing.
 739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @rmtoll RDATA        RES           LL_CORDIC_ReadData
 740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @param  CORDICx CORDIC Instance
 741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   * @retval 32-bit output data of CORDIC processing.
 742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   */
 743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** __STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
 744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** {
 145              		.loc 1 744 1
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 8
 148              		@ frame_needed = 1, uses_anonymous_args = 0
 149              		@ link register save eliminated.
 150 0000 80B4     		push	{r7}
 151              	.LCFI12:
 152              		.cfi_def_cfa_offset 4
 153              		.cfi_offset 7, -4
 154 0002 83B0     		sub	sp, sp, #12
 155              	.LCFI13:
 156              		.cfi_def_cfa_offset 16
 157 0004 00AF     		add	r7, sp, #0
 158              	.LCFI14:
 159              		.cfi_def_cfa_register 7
 160 0006 7860     		str	r0, [r7, #4]
 745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h ****   return (uint32_t)(READ_REG(CORDICx->RDATA));
 161              		.loc 1 745 45
 162 0008 7B68     		ldr	r3, [r7, #4]
 163 000a 9B68     		ldr	r3, [r3, #8]
 746:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_cordic.h **** }
 164              		.loc 1 746 1
 165 000c 1846     		mov	r0, r3
 166 000e 0C37     		adds	r7, r7, #12
 167              	.LCFI15:
 168              		.cfi_def_cfa_offset 4
 169 0010 BD46     		mov	sp, r7
 170              	.LCFI16:
 171              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccKQCraR.s 			page 17


 172              		@ sp needed
 173 0012 5DF8047B 		ldr	r7, [sp], #4
 174              	.LCFI17:
 175              		.cfi_restore 7
 176              		.cfi_def_cfa_offset 0
 177 0016 7047     		bx	lr
 178              		.cfi_endproc
 179              	.LFE1057:
 181              		.section	.rodata._ZL12one_by_sqrt3,"a"
 182              		.align	2
 185              	_ZL12one_by_sqrt3:
 186 0000 3ACD133F 		.word	1058262330
 187              		.section	.rodata._ZL12two_by_sqrt3,"a"
 188              		.align	2
 191              	_ZL12two_by_sqrt3:
 192 0000 3ACD933F 		.word	1066650938
 193              		.section	.rodata._ZL10sqrt3_by_2,"a"
 194              		.align	2
 197              	_ZL10sqrt3_by_2:
 198 0000 D7B35D3F 		.word	1063105495
 199              		.section	.text.fmodf_pos,"ax",%progbits
 200              		.align	1
 201              		.syntax unified
 202              		.thumb
 203              		.thumb_func
 204              		.fpu fpv4-sp-d16
 206              	fmodf_pos:
 207              	.LFB1162:
 208              		.file 2 "Inc/utils.hpp"
   1:Inc/utils.hpp **** 
   2:Inc/utils.hpp **** #ifndef __UTILS_H
   3:Inc/utils.hpp **** #define __UTILS_H
   4:Inc/utils.hpp **** 
   5:Inc/utils.hpp **** #include <stdint.h>
   6:Inc/utils.hpp **** #include <math.h>
   7:Inc/utils.hpp **** 
   8:Inc/utils.hpp **** /**
   9:Inc/utils.hpp ****  * @brief Flash size register address
  10:Inc/utils.hpp ****  */
  11:Inc/utils.hpp **** #define ID_FLASH_ADDRESS (0x1FFF7A22)
  12:Inc/utils.hpp **** 
  13:Inc/utils.hpp **** /**
  14:Inc/utils.hpp ****  * @brief Device ID register address
  15:Inc/utils.hpp ****  */
  16:Inc/utils.hpp **** #define ID_DBGMCU_IDCODE (0xE0042000)
  17:Inc/utils.hpp **** 
  18:Inc/utils.hpp **** /**
  19:Inc/utils.hpp ****  * "Returns" the device signature
  20:Inc/utils.hpp ****  *
  21:Inc/utils.hpp ****  * Possible returns:
  22:Inc/utils.hpp ****  *    - 0x0413: STM32F405xx/07xx and STM32F415xx/17xx)
  23:Inc/utils.hpp ****  *    - 0x0419: STM32F42xxx and STM32F43xxx
  24:Inc/utils.hpp ****  *    - 0x0423: STM32F401xB/C
  25:Inc/utils.hpp ****  *    - 0x0433: STM32F401xD/E
  26:Inc/utils.hpp ****  *    - 0x0431: STM32F411xC/E
  27:Inc/utils.hpp ****  *
  28:Inc/utils.hpp ****  * Returned data is in 16-bit mode, but only bits 11:0 are valid, bits 15:12 are always 0.
ARM GAS  /tmp/ccKQCraR.s 			page 18


  29:Inc/utils.hpp ****  * Defined as macro
  30:Inc/utils.hpp ****  */
  31:Inc/utils.hpp **** #define STM_ID_GetSignature() ((*(uint16_t *)(ID_DBGMCU_IDCODE)) & 0x0FFF)
  32:Inc/utils.hpp **** 
  33:Inc/utils.hpp **** /**
  34:Inc/utils.hpp ****  * "Returns" the device revision
  35:Inc/utils.hpp ****  *
  36:Inc/utils.hpp ****  * Revisions possible:
  37:Inc/utils.hpp ****  *    - 0x1000: Revision A
  38:Inc/utils.hpp ****  *    - 0x1001: Revision Z
  39:Inc/utils.hpp ****  *    - 0x1003: Revision Y
  40:Inc/utils.hpp ****  *    - 0x1007: Revision 1
  41:Inc/utils.hpp ****  *    - 0x2001: Revision 3
  42:Inc/utils.hpp ****  *
  43:Inc/utils.hpp ****  * Returned data is in 16-bit mode.
  44:Inc/utils.hpp ****  */
  45:Inc/utils.hpp **** #define STM_ID_GetRevision() (*(uint16_t *)(ID_DBGMCU_IDCODE + 2))
  46:Inc/utils.hpp **** 
  47:Inc/utils.hpp **** /**
  48:Inc/utils.hpp **** * "Returns" the Flash size
  49:Inc/utils.hpp **** *
  50:Inc/utils.hpp **** * Returned data is in 16-bit mode, returned value is flash size in kB (kilo bytes).
  51:Inc/utils.hpp **** */
  52:Inc/utils.hpp **** #define STM_ID_GetFlashSize() (*(uint16_t *)(ID_FLASH_ADDRESS))
  53:Inc/utils.hpp **** 
  54:Inc/utils.hpp **** #ifdef M_PI
  55:Inc/utils.hpp **** #undef M_PI
  56:Inc/utils.hpp **** #endif
  57:Inc/utils.hpp **** #define M_PI (3.14159265358979323846f)
  58:Inc/utils.hpp **** 
  59:Inc/utils.hpp **** #define MACRO_MAX(x, y) (((x) > (y)) ? (x) : (y))
  60:Inc/utils.hpp **** #define MACRO_MIN(x, y) (((x) < (y)) ? (x) : (y))
  61:Inc/utils.hpp **** 
  62:Inc/utils.hpp **** #define SQ(x) ((x) * (x))
  63:Inc/utils.hpp **** 
  64:Inc/utils.hpp **** #ifdef __cplusplus
  65:Inc/utils.hpp **** 
  66:Inc/utils.hpp **** #include <array>
  67:Inc/utils.hpp **** 
  68:Inc/utils.hpp **** /**
  69:Inc/utils.hpp ****  * @brief Small helper to make array with known size
  70:Inc/utils.hpp ****  * in contrast to initializer lists the number of arguments
  71:Inc/utils.hpp ****  * has to match exactly. Whereas initializer lists allow
  72:Inc/utils.hpp ****  * less arguments.
  73:Inc/utils.hpp ****  */
  74:Inc/utils.hpp **** template<class T, class... Tail>
  75:Inc/utils.hpp **** std::array<T, 1 + sizeof...(Tail)> make_array(T head, Tail... tail)
  76:Inc/utils.hpp **** {
  77:Inc/utils.hpp ****     return std::array<T, 1 + sizeof...(Tail)>({ head, tail ... });
  78:Inc/utils.hpp **** }
  79:Inc/utils.hpp **** 
  80:Inc/utils.hpp **** extern "C" {
  81:Inc/utils.hpp **** #endif
  82:Inc/utils.hpp **** 
  83:Inc/utils.hpp **** static const float one_by_sqrt3 = 0.57735026919f;
  84:Inc/utils.hpp **** static const float two_by_sqrt3 = 1.15470053838f;
  85:Inc/utils.hpp **** static const float sqrt3_by_2 = 0.86602540378f;
ARM GAS  /tmp/ccKQCraR.s 			page 19


  86:Inc/utils.hpp **** 
  87:Inc/utils.hpp **** // like fmodf, but always positive
  88:Inc/utils.hpp **** static inline float fmodf_pos(float x, float y) {
 209              		.loc 2 88 49
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 16
 212              		@ frame_needed = 1, uses_anonymous_args = 0
 213 0000 80B5     		push	{r7, lr}
 214              	.LCFI18:
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 7, -8
 217              		.cfi_offset 14, -4
 218 0002 84B0     		sub	sp, sp, #16
 219              	.LCFI19:
 220              		.cfi_def_cfa_offset 24
 221 0004 00AF     		add	r7, sp, #0
 222              	.LCFI20:
 223              		.cfi_def_cfa_register 7
 224 0006 87ED010A 		vstr.32	s0, [r7, #4]
 225 000a C7ED000A 		vstr.32	s1, [r7]
  89:Inc/utils.hpp ****     float out = fmodf(x, y);
 226              		.loc 2 89 22
 227 000e D7ED000A 		vldr.32	s1, [r7]
 228 0012 97ED010A 		vldr.32	s0, [r7, #4]
 229 0016 FFF7FEFF 		bl	fmodf
 230 001a 87ED030A 		vstr.32	s0, [r7, #12]
  90:Inc/utils.hpp ****     if (out < 0.0f)
 231              		.loc 2 90 5
 232 001e D7ED037A 		vldr.32	s15, [r7, #12]
 233 0022 F5EEC07A 		vcmpe.f32	s15, #0
 234 0026 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 235 002a 07D5     		bpl	.L8
  91:Inc/utils.hpp ****         out += y;
 236              		.loc 2 91 13
 237 002c 97ED037A 		vldr.32	s14, [r7, #12]
 238 0030 D7ED007A 		vldr.32	s15, [r7]
 239 0034 77EE277A 		vadd.f32	s15, s14, s15
 240 0038 C7ED037A 		vstr.32	s15, [r7, #12]
 241              	.L8:
  92:Inc/utils.hpp ****     return out;
 242              		.loc 2 92 12
 243 003c FB68     		ldr	r3, [r7, #12]	@ float
 244 003e 07EE903A 		vmov	s15, r3
  93:Inc/utils.hpp **** }
 245              		.loc 2 93 1
 246 0042 B0EE670A 		vmov.f32	s0, s15
 247 0046 1037     		adds	r7, r7, #16
 248              	.LCFI21:
 249              		.cfi_def_cfa_offset 8
 250 0048 BD46     		mov	sp, r7
 251              	.LCFI22:
 252              		.cfi_def_cfa_register 13
 253              		@ sp needed
 254 004a 80BD     		pop	{r7, pc}
 255              		.cfi_endproc
 256              	.LFE1162:
 258              		.section	.text.wrap_pm,"ax",%progbits
ARM GAS  /tmp/ccKQCraR.s 			page 20


 259              		.align	1
 260              		.syntax unified
 261              		.thumb
 262              		.thumb_func
 263              		.fpu fpv4-sp-d16
 265              	wrap_pm:
 266              	.LFB1163:
  94:Inc/utils.hpp **** 
  95:Inc/utils.hpp **** /**
  96:Inc/utils.hpp ****  * @brief Similar to modulo operator, except that the output range is centered
  97:Inc/utils.hpp ****  * around zero.
  98:Inc/utils.hpp ****  * The returned value is always in the range [-pm_range, pm_range).
  99:Inc/utils.hpp ****  */
 100:Inc/utils.hpp **** static inline float wrap_pm(float x, float pm_range) {
 267              		.loc 2 100 54
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 8
 270              		@ frame_needed = 1, uses_anonymous_args = 0
 271 0000 80B5     		push	{r7, lr}
 272              	.LCFI23:
 273              		.cfi_def_cfa_offset 8
 274              		.cfi_offset 7, -8
 275              		.cfi_offset 14, -4
 276 0002 82B0     		sub	sp, sp, #8
 277              	.LCFI24:
 278              		.cfi_def_cfa_offset 16
 279 0004 00AF     		add	r7, sp, #0
 280              	.LCFI25:
 281              		.cfi_def_cfa_register 7
 282 0006 87ED010A 		vstr.32	s0, [r7, #4]
 283 000a C7ED000A 		vstr.32	s1, [r7]
 101:Inc/utils.hpp ****     return fmodf_pos(x + pm_range, 2.0f * pm_range) - pm_range;
 284              		.loc 2 101 21
 285 000e 97ED017A 		vldr.32	s14, [r7, #4]
 286 0012 D7ED007A 		vldr.32	s15, [r7]
 287 0016 37EE277A 		vadd.f32	s14, s14, s15
 288 001a D7ED007A 		vldr.32	s15, [r7]
 289 001e 77EEA77A 		vadd.f32	s15, s15, s15
 290 0022 F0EE670A 		vmov.f32	s1, s15
 291 0026 B0EE470A 		vmov.f32	s0, s14
 292 002a FFF7FEFF 		bl	fmodf_pos
 293 002e B0EE407A 		vmov.f32	s14, s0
 294              		.loc 2 101 55
 295 0032 D7ED007A 		vldr.32	s15, [r7]
 296 0036 77EE677A 		vsub.f32	s15, s14, s15
 102:Inc/utils.hpp **** }
 297              		.loc 2 102 1
 298 003a B0EE670A 		vmov.f32	s0, s15
 299 003e 0837     		adds	r7, r7, #8
 300              	.LCFI26:
 301              		.cfi_def_cfa_offset 8
 302 0040 BD46     		mov	sp, r7
 303              	.LCFI27:
 304              		.cfi_def_cfa_register 13
 305              		@ sp needed
 306 0042 80BD     		pop	{r7, pc}
 307              		.cfi_endproc
ARM GAS  /tmp/ccKQCraR.s 			page 21


 308              	.LFE1163:
 310              		.section	.text.wrap_pm_pi,"ax",%progbits
 311              		.align	1
 312              		.syntax unified
 313              		.thumb
 314              		.thumb_func
 315              		.fpu fpv4-sp-d16
 317              	wrap_pm_pi:
 318              	.LFB1164:
 103:Inc/utils.hpp **** 
 104:Inc/utils.hpp **** static inline float wrap_pm_pi(float theta) {
 319              		.loc 2 104 45
 320              		.cfi_startproc
 321              		@ args = 0, pretend = 0, frame = 8
 322              		@ frame_needed = 1, uses_anonymous_args = 0
 323 0000 80B5     		push	{r7, lr}
 324              	.LCFI28:
 325              		.cfi_def_cfa_offset 8
 326              		.cfi_offset 7, -8
 327              		.cfi_offset 14, -4
 328 0002 82B0     		sub	sp, sp, #8
 329              	.LCFI29:
 330              		.cfi_def_cfa_offset 16
 331 0004 00AF     		add	r7, sp, #0
 332              	.LCFI30:
 333              		.cfi_def_cfa_register 7
 334 0006 87ED010A 		vstr.32	s0, [r7, #4]
 105:Inc/utils.hpp ****     return wrap_pm(theta, M_PI);
 335              		.loc 2 105 19
 336 000a DFED060A 		vldr.32	s1, .L16
 337 000e 97ED010A 		vldr.32	s0, [r7, #4]
 338 0012 FFF7FEFF 		bl	wrap_pm
 339 0016 F0EE407A 		vmov.f32	s15, s0
 106:Inc/utils.hpp **** }
 340              		.loc 2 106 1
 341 001a B0EE670A 		vmov.f32	s0, s15
 342 001e 0837     		adds	r7, r7, #8
 343              	.LCFI31:
 344              		.cfi_def_cfa_offset 8
 345 0020 BD46     		mov	sp, r7
 346              	.LCFI32:
 347              		.cfi_def_cfa_register 13
 348              		@ sp needed
 349 0022 80BD     		pop	{r7, pc}
 350              	.L17:
 351              		.align	2
 352              	.L16:
 353 0024 DB0F4940 		.word	1078530011
 354              		.cfi_endproc
 355              	.LFE1164:
 357              		.section	.rodata._ZL16OFFSET_TAB_CCMRx,"a"
 358              		.align	2
 361              	_ZL16OFFSET_TAB_CCMRx:
 362 0000 00000000 		.ascii	"\000\000\000\000\004\004\004\00488"
 362      04040404 
 362      3838
 363              		.section	.rodata._ZL14SHIFT_TAB_OCxx,"a"
ARM GAS  /tmp/ccKQCraR.s 			page 22


 364              		.align	2
 367              	_ZL14SHIFT_TAB_OCxx:
 368 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\010"
 368      00000800 
 368      0008
 369              		.section	.rodata._ZL14SHIFT_TAB_ICxx,"a"
 370              		.align	2
 373              	_ZL14SHIFT_TAB_ICxx:
 374 0000 00000800 		.ascii	"\000\000\010\000\000\000\010\000\000\000"
 374      00000800 
 374      0000
 375              		.section	.rodata._ZL14SHIFT_TAB_CCxP,"a"
 376              		.align	2
 379              	_ZL14SHIFT_TAB_CCxP:
 380 0000 00020406 		.ascii	"\000\002\004\006\010\012\014\016\020\024"
 380      080A0C0E 
 380      1014
 381              		.section	.rodata._ZL14SHIFT_TAB_OISx,"a"
 382              		.align	2
 385              	_ZL14SHIFT_TAB_OISx:
 386 0000 00010203 		.ascii	"\000\001\002\003\004\005\006\007\010\012"
 386      04050607 
 386      080A
 387              		.section	.rodata._ZL19USART_PRESCALER_TAB,"a"
 388              		.align	2
 391              	_ZL19USART_PRESCALER_TAB:
 392 0000 01000000 		.word	1
 393 0004 02000000 		.word	2
 394 0008 04000000 		.word	4
 395 000c 06000000 		.word	6
 396 0010 08000000 		.word	8
 397 0014 0A000000 		.word	10
 398 0018 0C000000 		.word	12
 399 001c 10000000 		.word	16
 400 0020 20000000 		.word	32
 401 0024 40000000 		.word	64
 402 0028 80000000 		.word	128
 403 002c 00010000 		.word	256
 404              		.section	.rodata._ZL18CHANNEL_OFFSET_TAB,"a"
 405              		.align	2
 408              	_ZL18CHANNEL_OFFSET_TAB:
 409 0000 081C3044 		.ascii	"\010\0340DXl"
 409      586C
 410              		.section	.rodata._ZL8crcTable,"a"
 411              		.align	2
 414              	_ZL8crcTable:
 415 0000 0097B92E 		.ascii	"\000\227\271.\345r\\\313]\312\344s\270/\001\226\272"
 415      E5725CCB 
 415      5DCAE473 
 415      B82F0196 
 415      BA
 416 0011 2D03945F 		.ascii	"-\003\224_\310\346q\347p^\311\002\225\273,\343tZ\315"
 416      C8E671E7 
 416      705EC902 
 416      95BB2CE3 
 416      745ACD
 417 0024 0691BF28 		.ascii	"\006\221\277(\276)\007\220[\314\342uY\316\340w\274+"
ARM GAS  /tmp/ccKQCraR.s 			page 23


 417      BE290790 
 417      5BCCE275 
 417      59CEE077 
 417      BC2B
 418 0036 05920493 		.ascii	"\005\222\004\223\275*\341vX\317Q\306\350\177\264#\015"
 418      BD2AE176 
 418      58CF51C6 
 418      E87FB423 
 418      0D
 419 0047 9A0C9BB5 		.ascii	"\232\014\233\265\"\351~P\307\353|R\305\016\231\267 "
 419      22E97E50 
 419      C7EB7C52 
 419      C50E99B7 
 419      20
 420 0058 B6210F98 		.ascii	"\266!\017\230S\304\352}\262%\013\234W\300\356y\357x"
 420      53C4EA7D 
 420      B2250B9C 
 420      57C0EE79 
 420      EF78
 421 006a 56C10A9D 		.ascii	"V\301\012\235\263$\010\237\261&\355zT\303U\302\354{"
 421      B324089F 
 421      B126ED7A 
 421      54C355C2 
 421      EC7B
 422 007c B027099E 		.ascii	"\260'\011\236\2425\033\214G\320\376i\377hF\321\032\215"
 422      A2351B8C 
 422      47D0FE69 
 422      FF6846D1 
 422      1A8D
 423 008e A334188F 		.ascii	"\2434\030\217\2416\375jD\323E\322\374k\2407\031\216"
 423      A136FD6A 
 423      44D345D2 
 423      FC6BA037 
 423      198E
 424 00a0 41D6F86F 		.ascii	"A\326\370o\2443\035\212\034\213\2452\371n@\327\373l"
 424      A4331D8A 
 424      1C8BA532 
 424      F96E40D7 
 424      FB6C
 425 00b2 42D51E89 		.ascii	"B\325\036\211\2470\2461\037\210C\324\372m\363dJ\335"
 425      A730A631 
 425      1F8843D4 
 425      FA6DF364 
 425      4ADD
 426 00c4 1681AF38 		.ascii	"\026\201\2578\2569\027\200K\334\362eI\336\360g\254;"
 426      AE391780 
 426      4BDCF265 
 426      49DEF067 
 426      AC3B
 427 00d6 15821483 		.ascii	"\025\202\024\203\255:\361fH\337\020\207\251>\365bL\333"
 427      AD3AF166 
 427      48DF1087 
 427      A93EF562 
 427      4CDB
 428 00e8 4DDAF463 		.ascii	"M\332\364c\250?\021\206\252=\023\204O\330\366a\367`"
 428      A83F1186 
 428      AA3D1384 
ARM GAS  /tmp/ccKQCraR.s 			page 24


 428      4FD8F661 
 428      F760
 429 00fa 4ED91285 		.ascii	"N\331\022\205\253<"
 429      AB3C
 430              		.section	.text.calcCRC,"ax",%progbits
 431              		.align	1
 432              		.global	calcCRC
 433              		.syntax unified
 434              		.thumb
 435              		.thumb_func
 436              		.fpu fpv4-sp-d16
 438              	calcCRC:
 439              	.LFB2994:
 440              		.file 3 "Src/utils.cpp"
   1:Src/utils.cpp **** 
   2:Src/utils.cpp **** #include <cmsis_os.h>
   3:Src/utils.cpp **** #include <float.h>
   4:Src/utils.cpp **** #include <math.h>
   5:Src/utils.cpp **** #include "stm32g4xx_hal.h"
   6:Src/utils.cpp **** #include "stm32g4xx_ll_cordic.h"
   7:Src/utils.cpp **** #include <utils.hpp>
   8:Src/utils.cpp **** #include "main.h"
   9:Src/utils.cpp **** // poly = x
  10:Src/utils.cpp **** const uint8_t crcTable[256] = {
  11:Src/utils.cpp ****     0x00, 0x97, 0xB9, 0x2E, 0xE5, 0x72, 0x5C, 0xCB, 0x5D, 0xCA, 0xE4, 0x73, 0xB8, 0x2F, 0x01, 0x96,
  12:Src/utils.cpp ****     0x5F, 0xC8, 0xE6, 0x71, 0xE7, 0x70, 0x5E, 0xC9, 0x02, 0x95, 0xBB, 0x2C, 0xE3, 0x74, 0x5A, 0xCD,
  13:Src/utils.cpp ****     0x29, 0x07, 0x90, 0x5B, 0xCC, 0xE2, 0x75, 0x59, 0xCE, 0xE0, 0x77, 0xBC, 0x2B, 0x05, 0x92, 0x04,
  14:Src/utils.cpp ****     0x58, 0xCF, 0x51, 0xC6, 0xE8, 0x7F, 0xB4, 0x23, 0x0D, 0x9A, 0x0C, 0x9B, 0xB5, 0x22, 0xE9, 0x7E,
  15:Src/utils.cpp ****     0xC5, 0x0E, 0x99, 0xB7, 0x20, 0xB6, 0x21, 0x0F, 0x98, 0x53, 0xC4, 0xEA, 0x7D, 0xB2, 0x25, 0x0B,
  16:Src/utils.cpp ****     0xEF, 0x78, 0x56, 0xC1, 0x0A, 0x9D, 0xB3, 0x24, 0x08, 0x9F, 0xB1, 0x26, 0xED, 0x7A, 0x54, 0xC3,
  17:Src/utils.cpp ****     0x27, 0x09, 0x9E, 0xA2, 0x35, 0x1B, 0x8C, 0x47, 0xD0, 0xFE, 0x69, 0xFF, 0x68, 0x46, 0xD1, 0x1A,
  18:Src/utils.cpp ****     0xA1, 0x36, 0xFD, 0x6A, 0x44, 0xD3, 0x45, 0xD2, 0xFC, 0x6B, 0xA0, 0x37, 0x19, 0x8E, 0x41, 0xD6,
  19:Src/utils.cpp ****     0x8A, 0x1C, 0x8B, 0xA5, 0x32, 0xF9, 0x6E, 0x40, 0xD7, 0xFB, 0x6C, 0x42, 0xD5, 0x1E, 0x89, 0xA7,
  20:Src/utils.cpp ****     0x43, 0xD4, 0xFA, 0x6D, 0xF3, 0x64, 0x4A, 0xDD, 0x16, 0x81, 0xAF, 0x38, 0xAE, 0x39, 0x17, 0x80,
  21:Src/utils.cpp ****     0xDE, 0xF0, 0x67, 0xAC, 0x3B, 0x15, 0x82, 0x14, 0x83, 0xAD, 0x3A, 0xF1, 0x66, 0x48, 0xDF, 0x10,
  22:Src/utils.cpp ****     0x4C, 0xDB, 0x4D, 0xDA, 0xF4, 0x63, 0xA8, 0x3F, 0x11, 0x86, 0xAA, 0x3D, 0x13, 0x84, 0x4F, 0xD8,
  23:Src/utils.cpp ****     0xD9, 0x12, 0x85, 0xAB, 0x3C};
  24:Src/utils.cpp **** 
  25:Src/utils.cpp **** uint8_t calcCRC(uint8_t* buffer, uint8_t length) {
 441              		.loc 3 25 50
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 16
 444              		@ frame_needed = 1, uses_anonymous_args = 0
 445              		@ link register save eliminated.
 446 0000 80B4     		push	{r7}
 447              	.LCFI33:
 448              		.cfi_def_cfa_offset 4
 449              		.cfi_offset 7, -4
 450 0002 85B0     		sub	sp, sp, #20
 451              	.LCFI34:
 452              		.cfi_def_cfa_offset 24
 453 0004 00AF     		add	r7, sp, #0
 454              	.LCFI35:
 455              		.cfi_def_cfa_register 7
 456 0006 7860     		str	r0, [r7, #4]
 457 0008 0B46     		mov	r3, r1
 458 000a FB70     		strb	r3, [r7, #3]
ARM GAS  /tmp/ccKQCraR.s 			page 25


  26:Src/utils.cpp ****     uint8_t temp = *buffer++;
 459              		.loc 3 26 27
 460 000c 7B68     		ldr	r3, [r7, #4]
 461 000e 5A1C     		adds	r2, r3, #1
 462 0010 7A60     		str	r2, [r7, #4]
 463 0012 1B78     		ldrb	r3, [r3]
 464 0014 FB73     		strb	r3, [r7, #15]
 465              	.L20:
  27:Src/utils.cpp ****     while (--length) {
 466              		.loc 3 27 12
 467 0016 FB78     		ldrb	r3, [r7, #3]
 468 0018 013B     		subs	r3, r3, #1
 469 001a FB70     		strb	r3, [r7, #3]
 470 001c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 471 001e 002B     		cmp	r3, #0
 472 0020 14BF     		ite	ne
 473 0022 0123     		movne	r3, #1
 474 0024 0023     		moveq	r3, #0
 475 0026 DBB2     		uxtb	r3, r3
 476 0028 002B     		cmp	r3, #0
 477 002a 09D0     		beq	.L19
  28:Src/utils.cpp ****         temp = *buffer++ ^ crcTable[temp];
 478              		.loc 3 28 23
 479 002c 7B68     		ldr	r3, [r7, #4]
 480 002e 5A1C     		adds	r2, r3, #1
 481 0030 7A60     		str	r2, [r7, #4]
 482              		.loc 3 28 16
 483 0032 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 484              		.loc 3 28 37
 485 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 486              		.loc 3 28 41
 487 0036 0749     		ldr	r1, .L22
 488 0038 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 489              		.loc 3 28 14
 490 003a 5340     		eors	r3, r3, r2
 491 003c FB73     		strb	r3, [r7, #15]
  27:Src/utils.cpp ****     while (--length) {
 492              		.loc 3 27 5
 493 003e EAE7     		b	.L20
 494              	.L19:
  29:Src/utils.cpp ****     }
  30:Src/utils.cpp **** 
  31:Src/utils.cpp ****     return crcTable[temp];
 495              		.loc 3 31 21
 496 0040 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 497              		.loc 3 31 25
 498 0042 044A     		ldr	r2, .L22
 499 0044 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
  32:Src/utils.cpp **** }
 500              		.loc 3 32 1
 501 0046 1846     		mov	r0, r3
 502 0048 1437     		adds	r7, r7, #20
 503              	.LCFI36:
 504              		.cfi_def_cfa_offset 4
 505 004a BD46     		mov	sp, r7
 506              	.LCFI37:
 507              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccKQCraR.s 			page 26


 508              		@ sp needed
 509 004c 5DF8047B 		ldr	r7, [sp], #4
 510              	.LCFI38:
 511              		.cfi_restore 7
 512              		.cfi_def_cfa_offset 0
 513 0050 7047     		bx	lr
 514              	.L23:
 515 0052 00BF     		.align	2
 516              	.L22:
 517 0054 00000000 		.word	_ZL8crcTable
 518              		.cfi_endproc
 519              	.LFE2994:
 521              		.section	.text.SVM,"ax",%progbits
 522              		.align	1
 523              		.global	SVM
 524              		.syntax unified
 525              		.thumb
 526              		.thumb_func
 527              		.fpu fpv4-sp-d16
 529              	SVM:
 530              	.LFB2995:
  33:Src/utils.cpp **** 
  34:Src/utils.cpp **** int SVM(float alpha, float beta, float* tA, float* tB, float* tC) {
 531              		.loc 3 34 67
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 80
 534              		@ frame_needed = 1, uses_anonymous_args = 0
 535              		@ link register save eliminated.
 536 0000 80B4     		push	{r7}
 537              	.LCFI39:
 538              		.cfi_def_cfa_offset 4
 539              		.cfi_offset 7, -4
 540 0002 95B0     		sub	sp, sp, #84
 541              	.LCFI40:
 542              		.cfi_def_cfa_offset 88
 543 0004 00AF     		add	r7, sp, #0
 544              	.LCFI41:
 545              		.cfi_def_cfa_register 7
 546 0006 87ED050A 		vstr.32	s0, [r7, #20]
 547 000a C7ED040A 		vstr.32	s1, [r7, #16]
 548 000e F860     		str	r0, [r7, #12]
 549 0010 B960     		str	r1, [r7, #8]
 550 0012 7A60     		str	r2, [r7, #4]
  35:Src/utils.cpp ****     int Sextant;
  36:Src/utils.cpp **** 
  37:Src/utils.cpp ****     if (beta >= 0.0f) {
 551              		.loc 3 37 5
 552 0014 D7ED047A 		vldr.32	s15, [r7, #16]
 553 0018 F5EEC07A 		vcmpe.f32	s15, #0
 554 001c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 555 0020 2CDB     		blt	.L72
  38:Src/utils.cpp ****         if (alpha >= 0.0f) {
 556              		.loc 3 38 9
 557 0022 D7ED057A 		vldr.32	s15, [r7, #20]
 558 0026 F5EEC07A 		vcmpe.f32	s15, #0
 559 002a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 560 002e 12DB     		blt	.L73
ARM GAS  /tmp/ccKQCraR.s 			page 27


  39:Src/utils.cpp ****             // quadrant I
  40:Src/utils.cpp ****             if (one_by_sqrt3 * beta > alpha)
 561              		.loc 3 40 30
 562 0030 D7ED047A 		vldr.32	s15, [r7, #16]
 563 0034 9FEDCB7A 		vldr.32	s14, .L79+12
 564 0038 67EE877A 		vmul.f32	s15, s15, s14
 565              		.loc 3 40 13
 566 003c 97ED057A 		vldr.32	s14, [r7, #20]
 567 0040 B4EEE77A 		vcmpe.f32	s14, s15
 568 0044 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 569 0048 02D5     		bpl	.L74
  41:Src/utils.cpp ****                 Sextant = 2;  // sextant v2-v3
 570              		.loc 3 41 25
 571 004a 0223     		movs	r3, #2
 572 004c FB64     		str	r3, [r7, #76]
 573 004e 41E0     		b	.L31
 574              	.L74:
  42:Src/utils.cpp ****             else
  43:Src/utils.cpp ****                 Sextant = 1;  // sextant v1-v2
 575              		.loc 3 43 25
 576 0050 0123     		movs	r3, #1
 577 0052 FB64     		str	r3, [r7, #76]
 578 0054 3EE0     		b	.L31
 579              	.L73:
  44:Src/utils.cpp **** 
  45:Src/utils.cpp ****         } else {
  46:Src/utils.cpp ****             // quadrant II
  47:Src/utils.cpp ****             if (-one_by_sqrt3 * beta > alpha)
 580              		.loc 3 47 31
 581 0056 D7ED047A 		vldr.32	s15, [r7, #16]
 582 005a 9FEDBF7A 		vldr.32	s14, .L79
 583 005e 67EE877A 		vmul.f32	s15, s15, s14
 584              		.loc 3 47 13
 585 0062 97ED057A 		vldr.32	s14, [r7, #20]
 586 0066 B4EEE77A 		vcmpe.f32	s14, s15
 587 006a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 588 006e 02D5     		bpl	.L75
  48:Src/utils.cpp ****                 Sextant = 3;  // sextant v3-v4
 589              		.loc 3 48 25
 590 0070 0323     		movs	r3, #3
 591 0072 FB64     		str	r3, [r7, #76]
 592 0074 2EE0     		b	.L31
 593              	.L75:
  49:Src/utils.cpp ****             else
  50:Src/utils.cpp ****                 Sextant = 2;  // sextant v2-v3
 594              		.loc 3 50 25
 595 0076 0223     		movs	r3, #2
 596 0078 FB64     		str	r3, [r7, #76]
 597 007a 2BE0     		b	.L31
 598              	.L72:
  51:Src/utils.cpp ****         }
  52:Src/utils.cpp ****     } else {
  53:Src/utils.cpp ****         if (alpha >= 0.0f) {
 599              		.loc 3 53 9
 600 007c D7ED057A 		vldr.32	s15, [r7, #20]
 601 0080 F5EEC07A 		vcmpe.f32	s15, #0
 602 0084 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
ARM GAS  /tmp/ccKQCraR.s 			page 28


 603 0088 12DB     		blt	.L76
  54:Src/utils.cpp ****             // quadrant IV
  55:Src/utils.cpp ****             if (-one_by_sqrt3 * beta > alpha)
 604              		.loc 3 55 31
 605 008a D7ED047A 		vldr.32	s15, [r7, #16]
 606 008e 9FEDB27A 		vldr.32	s14, .L79
 607 0092 67EE877A 		vmul.f32	s15, s15, s14
 608              		.loc 3 55 13
 609 0096 97ED057A 		vldr.32	s14, [r7, #20]
 610 009a B4EEE77A 		vcmpe.f32	s14, s15
 611 009e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 612 00a2 02D5     		bpl	.L77
  56:Src/utils.cpp ****                 Sextant = 5;  // sextant v5-v6
 613              		.loc 3 56 25
 614 00a4 0523     		movs	r3, #5
 615 00a6 FB64     		str	r3, [r7, #76]
 616 00a8 14E0     		b	.L31
 617              	.L77:
  57:Src/utils.cpp ****             else
  58:Src/utils.cpp ****                 Sextant = 6;  // sextant v6-v1
 618              		.loc 3 58 25
 619 00aa 0623     		movs	r3, #6
 620 00ac FB64     		str	r3, [r7, #76]
 621 00ae 11E0     		b	.L31
 622              	.L76:
  59:Src/utils.cpp ****         } else {
  60:Src/utils.cpp ****             // quadrant III
  61:Src/utils.cpp ****             if (one_by_sqrt3 * beta > alpha)
 623              		.loc 3 61 30
 624 00b0 D7ED047A 		vldr.32	s15, [r7, #16]
 625 00b4 9FEDAB7A 		vldr.32	s14, .L79+12
 626 00b8 67EE877A 		vmul.f32	s15, s15, s14
 627              		.loc 3 61 13
 628 00bc 97ED057A 		vldr.32	s14, [r7, #20]
 629 00c0 B4EEE77A 		vcmpe.f32	s14, s15
 630 00c4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 631 00c8 02D5     		bpl	.L78
  62:Src/utils.cpp ****                 Sextant = 4;  // sextant v4-v5
 632              		.loc 3 62 25
 633 00ca 0423     		movs	r3, #4
 634 00cc FB64     		str	r3, [r7, #76]
 635 00ce 01E0     		b	.L31
 636              	.L78:
  63:Src/utils.cpp ****             else
  64:Src/utils.cpp ****                 Sextant = 5;  // sextant v5-v6
 637              		.loc 3 64 25
 638 00d0 0523     		movs	r3, #5
 639 00d2 FB64     		str	r3, [r7, #76]
 640              	.L31:
 641 00d4 FB6C     		ldr	r3, [r7, #76]
 642 00d6 013B     		subs	r3, r3, #1
 643 00d8 052B     		cmp	r3, #5
 644 00da 00F27F81 		bhi	.L40
 645 00de 01A2     		adr	r2, .L42
 646 00e0 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 647              		.p2align 2
 648              	.L42:
ARM GAS  /tmp/ccKQCraR.s 			page 29


 649 00e4 FD000000 		.word	.L47+1
 650 00e8 71010000 		.word	.L46+1
 651 00ec ED010000 		.word	.L45+1
 652 00f0 65020000 		.word	.L44+1
 653 00f4 D9020000 		.word	.L43+1
 654 00f8 69030000 		.word	.L41+1
 655              		.p2align 1
 656              	.L47:
 657              	.LBB2:
 658              	.LBB3:
 659              	.LBB4:
  65:Src/utils.cpp ****         }
  66:Src/utils.cpp ****     }
  67:Src/utils.cpp **** 
  68:Src/utils.cpp ****     switch (Sextant) {
  69:Src/utils.cpp ****         // sextant v1-v2
  70:Src/utils.cpp ****         case 1: {
  71:Src/utils.cpp ****             // Vector on-times
  72:Src/utils.cpp ****             float t1 = alpha - one_by_sqrt3 * beta;
 660              		.loc 3 72 45
 661 00fc D7ED047A 		vldr.32	s15, [r7, #16]
 662 0100 9FED987A 		vldr.32	s14, .L79+12
 663 0104 67EE877A 		vmul.f32	s15, s15, s14
 664              		.loc 3 72 19
 665 0108 97ED057A 		vldr.32	s14, [r7, #20]
 666 010c 77EE677A 		vsub.f32	s15, s14, s15
 667 0110 C7ED087A 		vstr.32	s15, [r7, #32]
  73:Src/utils.cpp ****             float t2 = two_by_sqrt3 * beta;
 668              		.loc 3 73 19
 669 0114 D7ED047A 		vldr.32	s15, [r7, #16]
 670 0118 9FED907A 		vldr.32	s14, .L79+4
 671 011c 67EE877A 		vmul.f32	s15, s15, s14
 672 0120 C7ED077A 		vstr.32	s15, [r7, #28]
  74:Src/utils.cpp **** 
  75:Src/utils.cpp ****             // PWM timings
  76:Src/utils.cpp ****             *tC = (1.0f - t1 - t2) * 0.5f;
 673              		.loc 3 76 25
 674 0124 B7EE007A 		vmov.f32	s14, #1.0e+0
 675 0128 D7ED087A 		vldr.32	s15, [r7, #32]
 676 012c 37EE677A 		vsub.f32	s14, s14, s15
 677              		.loc 3 76 30
 678 0130 D7ED077A 		vldr.32	s15, [r7, #28]
 679 0134 77EE677A 		vsub.f32	s15, s14, s15
 680              		.loc 3 76 36
 681 0138 B6EE007A 		vmov.f32	s14, #5.0e-1
 682 013c 67EE877A 		vmul.f32	s15, s15, s14
 683              		.loc 3 76 17
 684 0140 7B68     		ldr	r3, [r7, #4]
 685 0142 C3ED007A 		vstr.32	s15, [r3]
  77:Src/utils.cpp ****             *tB = *tC + t2;
 686              		.loc 3 77 19
 687 0146 7B68     		ldr	r3, [r7, #4]
 688 0148 93ED007A 		vldr.32	s14, [r3]
 689              		.loc 3 77 23
 690 014c D7ED077A 		vldr.32	s15, [r7, #28]
 691 0150 77EE277A 		vadd.f32	s15, s14, s15
 692              		.loc 3 77 17
ARM GAS  /tmp/ccKQCraR.s 			page 30


 693 0154 BB68     		ldr	r3, [r7, #8]
 694 0156 C3ED007A 		vstr.32	s15, [r3]
  78:Src/utils.cpp ****             *tA = *tB + t1;
 695              		.loc 3 78 19
 696 015a BB68     		ldr	r3, [r7, #8]
 697 015c 93ED007A 		vldr.32	s14, [r3]
 698              		.loc 3 78 23
 699 0160 D7ED087A 		vldr.32	s15, [r7, #32]
 700 0164 77EE277A 		vadd.f32	s15, s14, s15
 701              		.loc 3 78 17
 702 0168 FB68     		ldr	r3, [r7, #12]
 703 016a C3ED007A 		vstr.32	s15, [r3]
 704              	.LBE4:
  79:Src/utils.cpp ****         } break;
 705              		.loc 3 79 11
 706 016e 35E1     		b	.L40
 707              	.L46:
 708              	.LBB5:
  80:Src/utils.cpp **** 
  81:Src/utils.cpp ****         // sextant v2-v3
  82:Src/utils.cpp ****         case 2: {
  83:Src/utils.cpp ****             // Vector on-times
  84:Src/utils.cpp ****             float t2 = alpha + one_by_sqrt3 * beta;
 709              		.loc 3 84 45
 710 0170 D7ED047A 		vldr.32	s15, [r7, #16]
 711 0174 9FED7B7A 		vldr.32	s14, .L79+12
 712 0178 67EE877A 		vmul.f32	s15, s15, s14
 713              		.loc 3 84 19
 714 017c 97ED057A 		vldr.32	s14, [r7, #20]
 715 0180 77EE277A 		vadd.f32	s15, s14, s15
 716 0184 C7ED0A7A 		vstr.32	s15, [r7, #40]
  85:Src/utils.cpp ****             float t3 = -alpha + one_by_sqrt3 * beta;
 717              		.loc 3 85 46
 718 0188 D7ED047A 		vldr.32	s15, [r7, #16]
 719 018c 9FED757A 		vldr.32	s14, .L79+12
 720 0190 27EE877A 		vmul.f32	s14, s15, s14
 721              		.loc 3 85 19
 722 0194 D7ED057A 		vldr.32	s15, [r7, #20]
 723 0198 77EE677A 		vsub.f32	s15, s14, s15
 724 019c C7ED097A 		vstr.32	s15, [r7, #36]
  86:Src/utils.cpp **** 
  87:Src/utils.cpp ****             // PWM timings
  88:Src/utils.cpp ****             *tC = (1.0f - t2 - t3) * 0.5f;
 725              		.loc 3 88 25
 726 01a0 B7EE007A 		vmov.f32	s14, #1.0e+0
 727 01a4 D7ED0A7A 		vldr.32	s15, [r7, #40]
 728 01a8 37EE677A 		vsub.f32	s14, s14, s15
 729              		.loc 3 88 30
 730 01ac D7ED097A 		vldr.32	s15, [r7, #36]
 731 01b0 77EE677A 		vsub.f32	s15, s14, s15
 732              		.loc 3 88 36
 733 01b4 B6EE007A 		vmov.f32	s14, #5.0e-1
 734 01b8 67EE877A 		vmul.f32	s15, s15, s14
 735              		.loc 3 88 17
 736 01bc 7B68     		ldr	r3, [r7, #4]
 737 01be C3ED007A 		vstr.32	s15, [r3]
  89:Src/utils.cpp ****             *tA = *tC + t2;
ARM GAS  /tmp/ccKQCraR.s 			page 31


 738              		.loc 3 89 19
 739 01c2 7B68     		ldr	r3, [r7, #4]
 740 01c4 93ED007A 		vldr.32	s14, [r3]
 741              		.loc 3 89 23
 742 01c8 D7ED0A7A 		vldr.32	s15, [r7, #40]
 743 01cc 77EE277A 		vadd.f32	s15, s14, s15
 744              		.loc 3 89 17
 745 01d0 FB68     		ldr	r3, [r7, #12]
 746 01d2 C3ED007A 		vstr.32	s15, [r3]
  90:Src/utils.cpp ****             *tB = *tA + t3;
 747              		.loc 3 90 19
 748 01d6 FB68     		ldr	r3, [r7, #12]
 749 01d8 93ED007A 		vldr.32	s14, [r3]
 750              		.loc 3 90 23
 751 01dc D7ED097A 		vldr.32	s15, [r7, #36]
 752 01e0 77EE277A 		vadd.f32	s15, s14, s15
 753              		.loc 3 90 17
 754 01e4 BB68     		ldr	r3, [r7, #8]
 755 01e6 C3ED007A 		vstr.32	s15, [r3]
 756              	.LBE5:
  91:Src/utils.cpp ****         } break;
 757              		.loc 3 91 11
 758 01ea F7E0     		b	.L40
 759              	.L45:
 760              	.LBB6:
  92:Src/utils.cpp **** 
  93:Src/utils.cpp ****         // sextant v3-v4
  94:Src/utils.cpp ****         case 3: {
  95:Src/utils.cpp ****             // Vector on-times
  96:Src/utils.cpp ****             float t3 = two_by_sqrt3 * beta;
 761              		.loc 3 96 19
 762 01ec D7ED047A 		vldr.32	s15, [r7, #16]
 763 01f0 9FED5A7A 		vldr.32	s14, .L79+4
 764 01f4 67EE877A 		vmul.f32	s15, s15, s14
 765 01f8 C7ED0C7A 		vstr.32	s15, [r7, #48]
  97:Src/utils.cpp ****             float t4 = -alpha - one_by_sqrt3 * beta;
 766              		.loc 3 97 24
 767 01fc D7ED057A 		vldr.32	s15, [r7, #20]
 768 0200 B1EE677A 		vneg.f32	s14, s15
 769              		.loc 3 97 46
 770 0204 D7ED047A 		vldr.32	s15, [r7, #16]
 771 0208 DFED566A 		vldr.32	s13, .L79+12
 772 020c 67EEA67A 		vmul.f32	s15, s15, s13
 773              		.loc 3 97 19
 774 0210 77EE677A 		vsub.f32	s15, s14, s15
 775 0214 C7ED0B7A 		vstr.32	s15, [r7, #44]
  98:Src/utils.cpp **** 
  99:Src/utils.cpp ****             // PWM timings
 100:Src/utils.cpp ****             *tA = (1.0f - t3 - t4) * 0.5f;
 776              		.loc 3 100 25
 777 0218 B7EE007A 		vmov.f32	s14, #1.0e+0
 778 021c D7ED0C7A 		vldr.32	s15, [r7, #48]
 779 0220 37EE677A 		vsub.f32	s14, s14, s15
 780              		.loc 3 100 30
 781 0224 D7ED0B7A 		vldr.32	s15, [r7, #44]
 782 0228 77EE677A 		vsub.f32	s15, s14, s15
 783              		.loc 3 100 36
ARM GAS  /tmp/ccKQCraR.s 			page 32


 784 022c B6EE007A 		vmov.f32	s14, #5.0e-1
 785 0230 67EE877A 		vmul.f32	s15, s15, s14
 786              		.loc 3 100 17
 787 0234 FB68     		ldr	r3, [r7, #12]
 788 0236 C3ED007A 		vstr.32	s15, [r3]
 101:Src/utils.cpp ****             *tC = *tA + t4;
 789              		.loc 3 101 19
 790 023a FB68     		ldr	r3, [r7, #12]
 791 023c 93ED007A 		vldr.32	s14, [r3]
 792              		.loc 3 101 23
 793 0240 D7ED0B7A 		vldr.32	s15, [r7, #44]
 794 0244 77EE277A 		vadd.f32	s15, s14, s15
 795              		.loc 3 101 17
 796 0248 7B68     		ldr	r3, [r7, #4]
 797 024a C3ED007A 		vstr.32	s15, [r3]
 102:Src/utils.cpp ****             *tB = *tC + t3;
 798              		.loc 3 102 19
 799 024e 7B68     		ldr	r3, [r7, #4]
 800 0250 93ED007A 		vldr.32	s14, [r3]
 801              		.loc 3 102 23
 802 0254 D7ED0C7A 		vldr.32	s15, [r7, #48]
 803 0258 77EE277A 		vadd.f32	s15, s14, s15
 804              		.loc 3 102 17
 805 025c BB68     		ldr	r3, [r7, #8]
 806 025e C3ED007A 		vstr.32	s15, [r3]
 807              	.LBE6:
 103:Src/utils.cpp ****         } break;
 808              		.loc 3 103 11
 809 0262 BBE0     		b	.L40
 810              	.L44:
 811              	.LBB7:
 104:Src/utils.cpp **** 
 105:Src/utils.cpp ****         // sextant v4-v5
 106:Src/utils.cpp ****         case 4: {
 107:Src/utils.cpp ****             // Vector on-times
 108:Src/utils.cpp ****             float t4 = -alpha + one_by_sqrt3 * beta;
 812              		.loc 3 108 46
 813 0264 D7ED047A 		vldr.32	s15, [r7, #16]
 814 0268 9FED3E7A 		vldr.32	s14, .L79+12
 815 026c 27EE877A 		vmul.f32	s14, s15, s14
 816              		.loc 3 108 19
 817 0270 D7ED057A 		vldr.32	s15, [r7, #20]
 818 0274 77EE677A 		vsub.f32	s15, s14, s15
 819 0278 C7ED0E7A 		vstr.32	s15, [r7, #56]
 109:Src/utils.cpp ****             float t5 = -two_by_sqrt3 * beta;
 820              		.loc 3 109 19
 821 027c D7ED047A 		vldr.32	s15, [r7, #16]
 822 0280 9FED377A 		vldr.32	s14, .L79+8
 823 0284 67EE877A 		vmul.f32	s15, s15, s14
 824 0288 C7ED0D7A 		vstr.32	s15, [r7, #52]
 110:Src/utils.cpp **** 
 111:Src/utils.cpp ****             // PWM timings
 112:Src/utils.cpp ****             *tA = (1.0f - t4 - t5) * 0.5f;
 825              		.loc 3 112 25
 826 028c B7EE007A 		vmov.f32	s14, #1.0e+0
 827 0290 D7ED0E7A 		vldr.32	s15, [r7, #56]
 828 0294 37EE677A 		vsub.f32	s14, s14, s15
ARM GAS  /tmp/ccKQCraR.s 			page 33


 829              		.loc 3 112 30
 830 0298 D7ED0D7A 		vldr.32	s15, [r7, #52]
 831 029c 77EE677A 		vsub.f32	s15, s14, s15
 832              		.loc 3 112 36
 833 02a0 B6EE007A 		vmov.f32	s14, #5.0e-1
 834 02a4 67EE877A 		vmul.f32	s15, s15, s14
 835              		.loc 3 112 17
 836 02a8 FB68     		ldr	r3, [r7, #12]
 837 02aa C3ED007A 		vstr.32	s15, [r3]
 113:Src/utils.cpp ****             *tB = *tA + t4;
 838              		.loc 3 113 19
 839 02ae FB68     		ldr	r3, [r7, #12]
 840 02b0 93ED007A 		vldr.32	s14, [r3]
 841              		.loc 3 113 23
 842 02b4 D7ED0E7A 		vldr.32	s15, [r7, #56]
 843 02b8 77EE277A 		vadd.f32	s15, s14, s15
 844              		.loc 3 113 17
 845 02bc BB68     		ldr	r3, [r7, #8]
 846 02be C3ED007A 		vstr.32	s15, [r3]
 114:Src/utils.cpp ****             *tC = *tB + t5;
 847              		.loc 3 114 19
 848 02c2 BB68     		ldr	r3, [r7, #8]
 849 02c4 93ED007A 		vldr.32	s14, [r3]
 850              		.loc 3 114 23
 851 02c8 D7ED0D7A 		vldr.32	s15, [r7, #52]
 852 02cc 77EE277A 		vadd.f32	s15, s14, s15
 853              		.loc 3 114 17
 854 02d0 7B68     		ldr	r3, [r7, #4]
 855 02d2 C3ED007A 		vstr.32	s15, [r3]
 856              	.LBE7:
 115:Src/utils.cpp ****         } break;
 857              		.loc 3 115 11
 858 02d6 81E0     		b	.L40
 859              	.L43:
 860              	.LBB8:
 116:Src/utils.cpp **** 
 117:Src/utils.cpp ****         // sextant v5-v6
 118:Src/utils.cpp ****         case 5: {
 119:Src/utils.cpp ****             // Vector on-times
 120:Src/utils.cpp ****             float t5 = -alpha - one_by_sqrt3 * beta;
 861              		.loc 3 120 24
 862 02d8 D7ED057A 		vldr.32	s15, [r7, #20]
 863 02dc B1EE677A 		vneg.f32	s14, s15
 864              		.loc 3 120 46
 865 02e0 D7ED047A 		vldr.32	s15, [r7, #16]
 866 02e4 DFED1F6A 		vldr.32	s13, .L79+12
 867 02e8 67EEA67A 		vmul.f32	s15, s15, s13
 868              		.loc 3 120 19
 869 02ec 77EE677A 		vsub.f32	s15, s14, s15
 870 02f0 C7ED107A 		vstr.32	s15, [r7, #64]
 121:Src/utils.cpp ****             float t6 = alpha - one_by_sqrt3 * beta;
 871              		.loc 3 121 45
 872 02f4 D7ED047A 		vldr.32	s15, [r7, #16]
 873 02f8 9FED1A7A 		vldr.32	s14, .L79+12
 874 02fc 67EE877A 		vmul.f32	s15, s15, s14
 875              		.loc 3 121 19
 876 0300 97ED057A 		vldr.32	s14, [r7, #20]
ARM GAS  /tmp/ccKQCraR.s 			page 34


 877 0304 77EE677A 		vsub.f32	s15, s14, s15
 878 0308 C7ED0F7A 		vstr.32	s15, [r7, #60]
 122:Src/utils.cpp **** 
 123:Src/utils.cpp ****             // PWM timings
 124:Src/utils.cpp ****             *tB = (1.0f - t5 - t6) * 0.5f;
 879              		.loc 3 124 25
 880 030c B7EE007A 		vmov.f32	s14, #1.0e+0
 881 0310 D7ED107A 		vldr.32	s15, [r7, #64]
 882 0314 37EE677A 		vsub.f32	s14, s14, s15
 883              		.loc 3 124 30
 884 0318 D7ED0F7A 		vldr.32	s15, [r7, #60]
 885 031c 77EE677A 		vsub.f32	s15, s14, s15
 886              		.loc 3 124 36
 887 0320 B6EE007A 		vmov.f32	s14, #5.0e-1
 888 0324 67EE877A 		vmul.f32	s15, s15, s14
 889              		.loc 3 124 17
 890 0328 BB68     		ldr	r3, [r7, #8]
 891 032a C3ED007A 		vstr.32	s15, [r3]
 125:Src/utils.cpp ****             *tA = *tB + t6;
 892              		.loc 3 125 19
 893 032e BB68     		ldr	r3, [r7, #8]
 894 0330 93ED007A 		vldr.32	s14, [r3]
 895              		.loc 3 125 23
 896 0334 D7ED0F7A 		vldr.32	s15, [r7, #60]
 897 0338 77EE277A 		vadd.f32	s15, s14, s15
 898              		.loc 3 125 17
 899 033c FB68     		ldr	r3, [r7, #12]
 900 033e C3ED007A 		vstr.32	s15, [r3]
 126:Src/utils.cpp ****             *tC = *tA + t5;
 901              		.loc 3 126 19
 902 0342 FB68     		ldr	r3, [r7, #12]
 903 0344 93ED007A 		vldr.32	s14, [r3]
 904              		.loc 3 126 23
 905 0348 D7ED107A 		vldr.32	s15, [r7, #64]
 906 034c 77EE277A 		vadd.f32	s15, s14, s15
 907              		.loc 3 126 17
 908 0350 7B68     		ldr	r3, [r7, #4]
 909 0352 C3ED007A 		vstr.32	s15, [r3]
 910              	.LBE8:
 127:Src/utils.cpp ****         } break;
 911              		.loc 3 127 11
 912 0356 41E0     		b	.L40
 913              	.L80:
 914              		.align	2
 915              	.L79:
 916 0358 3ACD13BF 		.word	-1089221318
 917 035c 3ACD933F 		.word	1066650938
 918 0360 3ACD93BF 		.word	-1080832710
 919 0364 3ACD133F 		.word	1058262330
 920              	.L41:
 921              	.LBB9:
 128:Src/utils.cpp **** 
 129:Src/utils.cpp ****         // sextant v6-v1
 130:Src/utils.cpp ****         case 6: {
 131:Src/utils.cpp ****             // Vector on-times
 132:Src/utils.cpp ****             float t6 = -two_by_sqrt3 * beta;
 922              		.loc 3 132 19
ARM GAS  /tmp/ccKQCraR.s 			page 35


 923 0368 D7ED047A 		vldr.32	s15, [r7, #16]
 924 036c 1FED047A 		vldr.32	s14, .L79+8
 925 0370 67EE877A 		vmul.f32	s15, s15, s14
 926 0374 C7ED127A 		vstr.32	s15, [r7, #72]
 133:Src/utils.cpp ****             float t1 = alpha + one_by_sqrt3 * beta;
 927              		.loc 3 133 45
 928 0378 D7ED047A 		vldr.32	s15, [r7, #16]
 929 037c 1FED077A 		vldr.32	s14, .L79+12
 930 0380 67EE877A 		vmul.f32	s15, s15, s14
 931              		.loc 3 133 19
 932 0384 97ED057A 		vldr.32	s14, [r7, #20]
 933 0388 77EE277A 		vadd.f32	s15, s14, s15
 934 038c C7ED117A 		vstr.32	s15, [r7, #68]
 134:Src/utils.cpp **** 
 135:Src/utils.cpp ****             // PWM timings
 136:Src/utils.cpp ****             *tB = (1.0f - t6 - t1) * 0.5f;
 935              		.loc 3 136 25
 936 0390 B7EE007A 		vmov.f32	s14, #1.0e+0
 937 0394 D7ED127A 		vldr.32	s15, [r7, #72]
 938 0398 37EE677A 		vsub.f32	s14, s14, s15
 939              		.loc 3 136 30
 940 039c D7ED117A 		vldr.32	s15, [r7, #68]
 941 03a0 77EE677A 		vsub.f32	s15, s14, s15
 942              		.loc 3 136 36
 943 03a4 B6EE007A 		vmov.f32	s14, #5.0e-1
 944 03a8 67EE877A 		vmul.f32	s15, s15, s14
 945              		.loc 3 136 17
 946 03ac BB68     		ldr	r3, [r7, #8]
 947 03ae C3ED007A 		vstr.32	s15, [r3]
 137:Src/utils.cpp ****             *tC = *tB + t6;
 948              		.loc 3 137 19
 949 03b2 BB68     		ldr	r3, [r7, #8]
 950 03b4 93ED007A 		vldr.32	s14, [r3]
 951              		.loc 3 137 23
 952 03b8 D7ED127A 		vldr.32	s15, [r7, #72]
 953 03bc 77EE277A 		vadd.f32	s15, s14, s15
 954              		.loc 3 137 17
 955 03c0 7B68     		ldr	r3, [r7, #4]
 956 03c2 C3ED007A 		vstr.32	s15, [r3]
 138:Src/utils.cpp ****             *tA = *tC + t1;
 957              		.loc 3 138 19
 958 03c6 7B68     		ldr	r3, [r7, #4]
 959 03c8 93ED007A 		vldr.32	s14, [r3]
 960              		.loc 3 138 23
 961 03cc D7ED117A 		vldr.32	s15, [r7, #68]
 962 03d0 77EE277A 		vadd.f32	s15, s14, s15
 963              		.loc 3 138 17
 964 03d4 FB68     		ldr	r3, [r7, #12]
 965 03d6 C3ED007A 		vstr.32	s15, [r3]
 966              	.LBE9:
 139:Src/utils.cpp ****         } break;
 967              		.loc 3 139 11
 968 03da 00BF     		nop
 969              	.L40:
 970              	.LBE3:
 971              	.LBE2:
 140:Src/utils.cpp ****     }
ARM GAS  /tmp/ccKQCraR.s 			page 36


 141:Src/utils.cpp **** 
 142:Src/utils.cpp ****     // if any of the results becomes NaN, result_valid will evaluate to false
 143:Src/utils.cpp ****     int result_valid =
 144:Src/utils.cpp ****         *tA >= 0.0f && *tA <= 1.0f && *tB >= 0.0f && *tB <= 1.0f && *tC >= 0.0f && *tC <= 1.0f;
 972              		.loc 3 144 9
 973 03dc FB68     		ldr	r3, [r7, #12]
 974 03de D3ED007A 		vldr.32	s15, [r3]
 975              		.loc 3 144 81
 976 03e2 F5EEC07A 		vcmpe.f32	s15, #0
 977 03e6 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 978 03ea 2FDB     		blt	.L48
 979              		.loc 3 144 24 discriminator 1
 980 03ec FB68     		ldr	r3, [r7, #12]
 981 03ee D3ED007A 		vldr.32	s15, [r3]
 982              		.loc 3 144 21 discriminator 1
 983 03f2 B7EE007A 		vmov.f32	s14, #1.0e+0
 984 03f6 F4EEC77A 		vcmpe.f32	s15, s14
 985 03fa F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 986 03fe 25D8     		bhi	.L48
 987              		.loc 3 144 39 discriminator 3
 988 0400 BB68     		ldr	r3, [r7, #8]
 989 0402 D3ED007A 		vldr.32	s15, [r3]
 990              		.loc 3 144 36 discriminator 3
 991 0406 F5EEC07A 		vcmpe.f32	s15, #0
 992 040a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 993 040e 1DDB     		blt	.L48
 994              		.loc 3 144 54 discriminator 5
 995 0410 BB68     		ldr	r3, [r7, #8]
 996 0412 D3ED007A 		vldr.32	s15, [r3]
 997              		.loc 3 144 51 discriminator 5
 998 0416 B7EE007A 		vmov.f32	s14, #1.0e+0
 999 041a F4EEC77A 		vcmpe.f32	s15, s14
 1000 041e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1001 0422 13D8     		bhi	.L48
 1002              		.loc 3 144 69 discriminator 7
 1003 0424 7B68     		ldr	r3, [r7, #4]
 1004 0426 D3ED007A 		vldr.32	s15, [r3]
 1005              		.loc 3 144 66 discriminator 7
 1006 042a F5EEC07A 		vcmpe.f32	s15, #0
 1007 042e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1008 0432 0BDB     		blt	.L48
 1009              		.loc 3 144 84 discriminator 9
 1010 0434 7B68     		ldr	r3, [r7, #4]
 1011 0436 D3ED007A 		vldr.32	s15, [r3]
 1012              		.loc 3 144 81 discriminator 9
 1013 043a B7EE007A 		vmov.f32	s14, #1.0e+0
 1014 043e F4EEC77A 		vcmpe.f32	s15, s14
 1015 0442 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1016 0446 01D8     		bhi	.L48
 1017              		.loc 3 144 81 is_stmt 0 discriminator 11
 1018 0448 0123     		movs	r3, #1
 1019 044a 00E0     		b	.L55
 1020              	.L48:
 1021              		.loc 3 144 81 discriminator 12
 1022 044c 0023     		movs	r3, #0
 1023              	.L55:
 143:Src/utils.cpp ****         *tA >= 0.0f && *tA <= 1.0f && *tB >= 0.0f && *tB <= 1.0f && *tC >= 0.0f && *tC <= 1.0f;
ARM GAS  /tmp/ccKQCraR.s 			page 37


 1024              		.loc 3 143 9 is_stmt 1
 1025 044e BB61     		str	r3, [r7, #24]
 145:Src/utils.cpp ****     return result_valid ? 0 : -1;
 1026              		.loc 3 145 25
 1027 0450 BB69     		ldr	r3, [r7, #24]
 1028 0452 002B     		cmp	r3, #0
 1029 0454 01D0     		beq	.L56
 1030              		.loc 3 145 25 is_stmt 0 discriminator 1
 1031 0456 0023     		movs	r3, #0
 1032              		.loc 3 145 32 is_stmt 1 discriminator 1
 1033 0458 01E0     		b	.L58
 1034              	.L56:
 1035              		.loc 3 145 25 discriminator 2
 1036 045a 4FF0FF33 		mov	r3, #-1
 1037              	.L58:
 146:Src/utils.cpp **** }
 1038              		.loc 3 146 1 discriminator 5
 1039 045e 1846     		mov	r0, r3
 1040 0460 5437     		adds	r7, r7, #84
 1041              	.LCFI42:
 1042              		.cfi_def_cfa_offset 4
 1043 0462 BD46     		mov	sp, r7
 1044              	.LCFI43:
 1045              		.cfi_def_cfa_register 13
 1046              		@ sp needed
 1047 0464 5DF8047B 		ldr	r7, [sp], #4
 1048              	.LCFI44:
 1049              		.cfi_restore 7
 1050              		.cfi_def_cfa_offset 0
 1051 0468 7047     		bx	lr
 1052              		.cfi_endproc
 1053              	.LFE2995:
 1055 046a 00BF     		.section	.text.fast_atan2,"ax",%progbits
 1056              		.align	1
 1057              		.global	fast_atan2
 1058              		.syntax unified
 1059              		.thumb
 1060              		.thumb_func
 1061              		.fpu fpv4-sp-d16
 1063              	fast_atan2:
 1064              	.LFB2996:
 147:Src/utils.cpp **** 
 148:Src/utils.cpp **** 
 149:Src/utils.cpp **** // based on https://math.stackexchange.com/a/1105038/81278
 150:Src/utils.cpp **** float fast_atan2(float y, float x) {
 1065              		.loc 3 150 36
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 32
 1068              		@ frame_needed = 1, uses_anonymous_args = 0
 1069              		@ link register save eliminated.
 1070 0000 80B4     		push	{r7}
 1071              	.LCFI45:
 1072              		.cfi_def_cfa_offset 4
 1073              		.cfi_offset 7, -4
 1074 0002 89B0     		sub	sp, sp, #36
 1075              	.LCFI46:
 1076              		.cfi_def_cfa_offset 40
ARM GAS  /tmp/ccKQCraR.s 			page 38


 1077 0004 00AF     		add	r7, sp, #0
 1078              	.LCFI47:
 1079              		.cfi_def_cfa_register 7
 1080 0006 87ED010A 		vstr.32	s0, [r7, #4]
 1081 000a C7ED000A 		vstr.32	s1, [r7]
 151:Src/utils.cpp ****     // a := min (|x|, |y|) / max (|x|, |y|)
 152:Src/utils.cpp ****     float abs_y = fabsf(y);
 1082              		.loc 3 152 11
 1083 000e D7ED017A 		vldr.32	s15, [r7, #4]
 1084 0012 F0EEE77A 		vabs.f32	s15, s15
 1085 0016 C7ED067A 		vstr.32	s15, [r7, #24]
 153:Src/utils.cpp ****     float abs_x = fabsf(x);
 1086              		.loc 3 153 11
 1087 001a D7ED007A 		vldr.32	s15, [r7]
 1088 001e F0EEE77A 		vabs.f32	s15, s15
 1089 0022 C7ED057A 		vstr.32	s15, [r7, #20]
 154:Src/utils.cpp ****     // inject FLT_MIN in denominator to avoid division by zero
 155:Src/utils.cpp ****     float a = MACRO_MIN(abs_x, abs_y) / (MACRO_MAX(abs_x, abs_y) + FLT_MIN);
 1090              		.loc 3 155 15
 1091 0026 97ED057A 		vldr.32	s14, [r7, #20]
 1092 002a D7ED067A 		vldr.32	s15, [r7, #24]
 1093 002e B4EEE77A 		vcmpe.f32	s14, s15
 1094 0032 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1095 0036 02D5     		bpl	.L100
 1096              		.loc 3 155 15 is_stmt 0 discriminator 1
 1097 0038 D7ED057A 		vldr.32	s15, [r7, #20]
 1098 003c 01E0     		b	.L84
 1099              	.L100:
 1100              		.loc 3 155 15 discriminator 2
 1101 003e D7ED067A 		vldr.32	s15, [r7, #24]
 1102              	.L84:
 1103              		.loc 3 155 42 is_stmt 1 discriminator 4
 1104 0042 D7ED056A 		vldr.32	s13, [r7, #20]
 1105 0046 97ED067A 		vldr.32	s14, [r7, #24]
 1106 004a F4EEC76A 		vcmpe.f32	s13, s14
 1107 004e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1108 0052 02DD     		ble	.L101
 1109              		.loc 3 155 42 is_stmt 0 discriminator 5
 1110 0054 97ED057A 		vldr.32	s14, [r7, #20]
 1111 0058 01E0     		b	.L87
 1112              	.L101:
 1113              		.loc 3 155 42 discriminator 6
 1114 005a 97ED067A 		vldr.32	s14, [r7, #24]
 1115              	.L87:
 1116              		.loc 3 155 66 is_stmt 1 discriminator 8
 1117 005e DFED326A 		vldr.32	s13, .L102
 1118 0062 77EE266A 		vadd.f32	s13, s14, s13
 1119              		.loc 3 155 11 discriminator 8
 1120 0066 87EEA67A 		vdiv.f32	s14, s15, s13
 1121 006a 87ED047A 		vstr.32	s14, [r7, #16]
 156:Src/utils.cpp ****     // s := a * a
 157:Src/utils.cpp ****     float s = a * a;
 1122              		.loc 3 157 11 discriminator 8
 1123 006e D7ED047A 		vldr.32	s15, [r7, #16]
 1124 0072 67EEA77A 		vmul.f32	s15, s15, s15
 1125 0076 C7ED037A 		vstr.32	s15, [r7, #12]
 158:Src/utils.cpp ****     // r := ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + a
ARM GAS  /tmp/ccKQCraR.s 			page 39


 159:Src/utils.cpp ****     float r = ((-0.0464964749f * s + 0.15931422f) * s - 0.327622764f) * s * a + a;
 1126              		.loc 3 159 32 discriminator 8
 1127 007a D7ED037A 		vldr.32	s15, [r7, #12]
 1128 007e 9FED2B7A 		vldr.32	s14, .L102+4
 1129 0082 67EE877A 		vmul.f32	s15, s15, s14
 1130              		.loc 3 159 36 discriminator 8
 1131 0086 9FED2A7A 		vldr.32	s14, .L102+8
 1132 008a 37EE877A 		vadd.f32	s14, s15, s14
 1133              		.loc 3 159 51 discriminator 8
 1134 008e D7ED037A 		vldr.32	s15, [r7, #12]
 1135 0092 67EE277A 		vmul.f32	s15, s14, s15
 1136              		.loc 3 159 55 discriminator 8
 1137 0096 9FED277A 		vldr.32	s14, .L102+12
 1138 009a 37EEC77A 		vsub.f32	s14, s15, s14
 1139              		.loc 3 159 71 discriminator 8
 1140 009e D7ED037A 		vldr.32	s15, [r7, #12]
 1141 00a2 27EE277A 		vmul.f32	s14, s14, s15
 1142              		.loc 3 159 75 discriminator 8
 1143 00a6 D7ED047A 		vldr.32	s15, [r7, #16]
 1144 00aa 67EE277A 		vmul.f32	s15, s14, s15
 1145              		.loc 3 159 11 discriminator 8
 1146 00ae 97ED047A 		vldr.32	s14, [r7, #16]
 1147 00b2 77EE277A 		vadd.f32	s15, s14, s15
 1148 00b6 C7ED077A 		vstr.32	s15, [r7, #28]
 160:Src/utils.cpp ****     // if |y| > |x| then r := 1.57079637 - r
 161:Src/utils.cpp ****     if (abs_y > abs_x)
 1149              		.loc 3 161 5 discriminator 8
 1150 00ba 97ED067A 		vldr.32	s14, [r7, #24]
 1151 00be D7ED057A 		vldr.32	s15, [r7, #20]
 1152 00c2 B4EEE77A 		vcmpe.f32	s14, s15
 1153 00c6 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1154 00ca 07DD     		ble	.L88
 162:Src/utils.cpp ****         r = 1.57079637f - r;
 1155              		.loc 3 162 11
 1156 00cc 9FED1A7A 		vldr.32	s14, .L102+16
 1157 00d0 D7ED077A 		vldr.32	s15, [r7, #28]
 1158 00d4 77EE677A 		vsub.f32	s15, s14, s15
 1159 00d8 C7ED077A 		vstr.32	s15, [r7, #28]
 1160              	.L88:
 163:Src/utils.cpp ****     // if x < 0 then r := 3.14159274 - r
 164:Src/utils.cpp ****     if (x < 0.0f)
 1161              		.loc 3 164 5
 1162 00dc D7ED007A 		vldr.32	s15, [r7]
 1163 00e0 F5EEC07A 		vcmpe.f32	s15, #0
 1164 00e4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1165 00e8 07D5     		bpl	.L90
 165:Src/utils.cpp ****         r = 3.14159274f - r;
 1166              		.loc 3 165 11
 1167 00ea 9FED147A 		vldr.32	s14, .L102+20
 1168 00ee D7ED077A 		vldr.32	s15, [r7, #28]
 1169 00f2 77EE677A 		vsub.f32	s15, s14, s15
 1170 00f6 C7ED077A 		vstr.32	s15, [r7, #28]
 1171              	.L90:
 166:Src/utils.cpp ****     // if y < 0 then r := -r
 167:Src/utils.cpp ****     if (y < 0.0f)
 1172              		.loc 3 167 5
 1173 00fa D7ED017A 		vldr.32	s15, [r7, #4]
ARM GAS  /tmp/ccKQCraR.s 			page 40


 1174 00fe F5EEC07A 		vcmpe.f32	s15, #0
 1175 0102 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1176 0106 05D5     		bpl	.L92
 168:Src/utils.cpp ****         r = -r;
 1177              		.loc 3 168 11
 1178 0108 D7ED077A 		vldr.32	s15, [r7, #28]
 1179 010c F1EE677A 		vneg.f32	s15, s15
 1180 0110 C7ED077A 		vstr.32	s15, [r7, #28]
 1181              	.L92:
 169:Src/utils.cpp **** 
 170:Src/utils.cpp ****     return r;
 1182              		.loc 3 170 12
 1183 0114 FB69     		ldr	r3, [r7, #28]	@ float
 1184 0116 07EE903A 		vmov	s15, r3
 171:Src/utils.cpp **** }
 1185              		.loc 3 171 1
 1186 011a B0EE670A 		vmov.f32	s0, s15
 1187 011e 2437     		adds	r7, r7, #36
 1188              	.LCFI48:
 1189              		.cfi_def_cfa_offset 4
 1190 0120 BD46     		mov	sp, r7
 1191              	.LCFI49:
 1192              		.cfi_def_cfa_register 13
 1193              		@ sp needed
 1194 0122 5DF8047B 		ldr	r7, [sp], #4
 1195              	.LCFI50:
 1196              		.cfi_restore 7
 1197              		.cfi_def_cfa_offset 0
 1198 0126 7047     		bx	lr
 1199              	.L103:
 1200              		.align	2
 1201              	.L102:
 1202 0128 00008000 		.word	8388608
 1203 012c 16733EBD 		.word	-1119980778
 1204 0130 4423233E 		.word	1042490180
 1205 0134 2CBEA73E 		.word	1051180588
 1206 0138 DB0FC93F 		.word	1070141403
 1207 013c DB0F4940 		.word	1078530011
 1208              		.cfi_endproc
 1209              	.LFE2996:
 1211              		.section	.text.horner_fma,"ax",%progbits
 1212              		.align	1
 1213              		.global	horner_fma
 1214              		.syntax unified
 1215              		.thumb
 1216              		.thumb_func
 1217              		.fpu fpv4-sp-d16
 1219              	horner_fma:
 1220              	.LFB2997:
 172:Src/utils.cpp **** 
 173:Src/utils.cpp **** // Evaluate polynomials using Fused Multiply Add intrisic instruction.
 174:Src/utils.cpp **** // coeffs[0] is highest order, as per numpy.polyfit
 175:Src/utils.cpp **** // p(x) = coeffs[0] * x^deg + ... + coeffs[deg], for some degree "deg"
 176:Src/utils.cpp **** float horner_fma(float x, const float* coeffs, size_t count) {
 1221              		.loc 3 176 62
 1222              		.cfi_startproc
 1223              		@ args = 0, pretend = 0, frame = 24
ARM GAS  /tmp/ccKQCraR.s 			page 41


 1224              		@ frame_needed = 1, uses_anonymous_args = 0
 1225 0000 80B5     		push	{r7, lr}
 1226              	.LCFI51:
 1227              		.cfi_def_cfa_offset 8
 1228              		.cfi_offset 7, -8
 1229              		.cfi_offset 14, -4
 1230 0002 86B0     		sub	sp, sp, #24
 1231              	.LCFI52:
 1232              		.cfi_def_cfa_offset 32
 1233 0004 00AF     		add	r7, sp, #0
 1234              	.LCFI53:
 1235              		.cfi_def_cfa_register 7
 1236 0006 87ED030A 		vstr.32	s0, [r7, #12]
 1237 000a B860     		str	r0, [r7, #8]
 1238 000c 7960     		str	r1, [r7, #4]
 177:Src/utils.cpp ****     float result = 0.0f;
 1239              		.loc 3 177 11
 1240 000e 4FF00003 		mov	r3, #0
 1241 0012 7B61     		str	r3, [r7, #20]	@ float
 1242              	.LBB10:
 178:Src/utils.cpp ****     for (size_t idx = 0; idx < count; ++idx)
 1243              		.loc 3 178 17
 1244 0014 0023     		movs	r3, #0
 1245 0016 3B61     		str	r3, [r7, #16]
 1246              	.L106:
 1247              		.loc 3 178 30 discriminator 3
 1248 0018 3A69     		ldr	r2, [r7, #16]
 1249 001a 7B68     		ldr	r3, [r7, #4]
 1250 001c 9A42     		cmp	r2, r3
 1251 001e 13D2     		bcs	.L105
 179:Src/utils.cpp ****         result = fmaf(result, x, coeffs[idx]);
 1252              		.loc 3 179 44 discriminator 2
 1253 0020 3B69     		ldr	r3, [r7, #16]
 1254 0022 9B00     		lsls	r3, r3, #2
 1255 0024 BA68     		ldr	r2, [r7, #8]
 1256 0026 1344     		add	r3, r3, r2
 1257              		.loc 3 179 22 discriminator 2
 1258 0028 D3ED007A 		vldr.32	s15, [r3]
 1259 002c B0EE671A 		vmov.f32	s2, s15
 1260 0030 D7ED030A 		vldr.32	s1, [r7, #12]
 1261 0034 97ED050A 		vldr.32	s0, [r7, #20]
 1262 0038 FFF7FEFF 		bl	fmaf
 1263 003c 87ED050A 		vstr.32	s0, [r7, #20]
 178:Src/utils.cpp ****     for (size_t idx = 0; idx < count; ++idx)
 1264              		.loc 3 178 5 discriminator 2
 1265 0040 3B69     		ldr	r3, [r7, #16]
 1266 0042 0133     		adds	r3, r3, #1
 1267 0044 3B61     		str	r3, [r7, #16]
 1268 0046 E7E7     		b	.L106
 1269              	.L105:
 1270              	.LBE10:
 180:Src/utils.cpp ****     return result;
 1271              		.loc 3 180 12
 1272 0048 7B69     		ldr	r3, [r7, #20]	@ float
 1273 004a 07EE903A 		vmov	s15, r3
 181:Src/utils.cpp **** }
 1274              		.loc 3 181 1
ARM GAS  /tmp/ccKQCraR.s 			page 42


 1275 004e B0EE670A 		vmov.f32	s0, s15
 1276 0052 1837     		adds	r7, r7, #24
 1277              	.LCFI54:
 1278              		.cfi_def_cfa_offset 8
 1279 0054 BD46     		mov	sp, r7
 1280              	.LCFI55:
 1281              		.cfi_def_cfa_register 13
 1282              		@ sp needed
 1283 0056 80BD     		pop	{r7, pc}
 1284              		.cfi_endproc
 1285              	.LFE2997:
 1287              		.section	.text.mod,"ax",%progbits
 1288              		.align	1
 1289              		.global	mod
 1290              		.syntax unified
 1291              		.thumb
 1292              		.thumb_func
 1293              		.fpu fpv4-sp-d16
 1295              	mod:
 1296              	.LFB2998:
 182:Src/utils.cpp **** 
 183:Src/utils.cpp **** // Modulo (as opposed to remainder), per https://stackoverflow.com/a/19288271
 184:Src/utils.cpp **** int mod(int dividend, int divisor) {
 1297              		.loc 3 184 36
 1298              		.cfi_startproc
 1299              		@ args = 0, pretend = 0, frame = 16
 1300              		@ frame_needed = 1, uses_anonymous_args = 0
 1301              		@ link register save eliminated.
 1302 0000 80B4     		push	{r7}
 1303              	.LCFI56:
 1304              		.cfi_def_cfa_offset 4
 1305              		.cfi_offset 7, -4
 1306 0002 85B0     		sub	sp, sp, #20
 1307              	.LCFI57:
 1308              		.cfi_def_cfa_offset 24
 1309 0004 00AF     		add	r7, sp, #0
 1310              	.LCFI58:
 1311              		.cfi_def_cfa_register 7
 1312 0006 7860     		str	r0, [r7, #4]
 1313 0008 3960     		str	r1, [r7]
 185:Src/utils.cpp ****     int r = dividend % divisor;
 1314              		.loc 3 185 9
 1315 000a 7B68     		ldr	r3, [r7, #4]
 1316 000c 3A68     		ldr	r2, [r7]
 1317 000e 93FBF2F2 		sdiv	r2, r3, r2
 1318 0012 3968     		ldr	r1, [r7]
 1319 0014 01FB02F2 		mul	r2, r1, r2
 1320 0018 9B1A     		subs	r3, r3, r2
 1321 001a FB60     		str	r3, [r7, #12]
 186:Src/utils.cpp ****     return (r < 0) ? (r + divisor) : r;
 1322              		.loc 3 186 20
 1323 001c FB68     		ldr	r3, [r7, #12]
 1324 001e 002B     		cmp	r3, #0
 1325 0020 03DA     		bge	.L109
 1326              		.loc 3 186 20 is_stmt 0 discriminator 1
 1327 0022 FA68     		ldr	r2, [r7, #12]
 1328 0024 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccKQCraR.s 			page 43


 1329 0026 1344     		add	r3, r3, r2
 1330              		.loc 3 186 38 is_stmt 1 discriminator 1
 1331 0028 00E0     		b	.L111
 1332              	.L109:
 1333              		.loc 3 186 20 discriminator 2
 1334 002a FB68     		ldr	r3, [r7, #12]
 1335              	.L111:
 187:Src/utils.cpp **** }
 1336              		.loc 3 187 1 discriminator 5
 1337 002c 1846     		mov	r0, r3
 1338 002e 1437     		adds	r7, r7, #20
 1339              	.LCFI59:
 1340              		.cfi_def_cfa_offset 4
 1341 0030 BD46     		mov	sp, r7
 1342              	.LCFI60:
 1343              		.cfi_def_cfa_register 13
 1344              		@ sp needed
 1345 0032 5DF8047B 		ldr	r7, [sp], #4
 1346              	.LCFI61:
 1347              		.cfi_restore 7
 1348              		.cfi_def_cfa_offset 0
 1349 0036 7047     		bx	lr
 1350              		.cfi_endproc
 1351              	.LFE2998:
 1353              		.global	__aeabi_uldivmod
 1354              		.section	.text.deadline_to_timeout,"ax",%progbits
 1355              		.align	1
 1356              		.global	deadline_to_timeout
 1357              		.syntax unified
 1358              		.thumb
 1359              		.thumb_func
 1360              		.fpu fpv4-sp-d16
 1362              	deadline_to_timeout:
 1363              	.LFB2999:
 188:Src/utils.cpp **** 
 189:Src/utils.cpp **** // @brief: Returns how much time is left until the deadline is reached.
 190:Src/utils.cpp **** // If the deadline has already passed, the return value is 0 (except if
 191:Src/utils.cpp **** // the deadline is very far in the past)
 192:Src/utils.cpp **** uint32_t deadline_to_timeout(uint32_t deadline_ms) {
 1364              		.loc 3 192 52
 1365              		.cfi_startproc
 1366              		@ args = 0, pretend = 0, frame = 16
 1367              		@ frame_needed = 1, uses_anonymous_args = 0
 1368 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, r10, fp, lr}
 1369              	.LCFI62:
 1370              		.cfi_def_cfa_offset 32
 1371              		.cfi_offset 4, -32
 1372              		.cfi_offset 5, -28
 1373              		.cfi_offset 7, -24
 1374              		.cfi_offset 8, -20
 1375              		.cfi_offset 9, -16
 1376              		.cfi_offset 10, -12
 1377              		.cfi_offset 11, -8
 1378              		.cfi_offset 14, -4
 1379 0004 84B0     		sub	sp, sp, #16
 1380              	.LCFI63:
 1381              		.cfi_def_cfa_offset 48
ARM GAS  /tmp/ccKQCraR.s 			page 44


 1382 0006 00AF     		add	r7, sp, #0
 1383              	.LCFI64:
 1384              		.cfi_def_cfa_register 7
 1385 0008 7860     		str	r0, [r7, #4]
 193:Src/utils.cpp ****     uint32_t now_ms = (uint32_t)((1000ull * (uint64_t)osKernelSysTick()) / osKernelSysTickFrequency
 1386              		.loc 3 193 70
 1387 000a FFF7FEFF 		bl	osKernelSysTick
 1388 000e 0346     		mov	r3, r0
 1389              		.loc 3 193 45
 1390 0010 0022     		movs	r2, #0
 1391 0012 9846     		mov	r8, r3
 1392 0014 9146     		mov	r9, r2
 1393              		.loc 3 193 43
 1394 0016 4246     		mov	r2, r8
 1395 0018 4B46     		mov	r3, r9
 1396 001a 4FF00000 		mov	r0, #0
 1397 001e 4FF00001 		mov	r1, #0
 1398 0022 5901     		lsls	r1, r3, #5
 1399 0024 41EAD261 		orr	r1, r1, r2, lsr #27
 1400 0028 5001     		lsls	r0, r2, #5
 1401 002a 0246     		mov	r2, r0
 1402 002c 0B46     		mov	r3, r1
 1403 002e B2EB0804 		subs	r4, r2, r8
 1404 0032 63EB0905 		sbc	r5, r3, r9
 1405 0036 4FF00002 		mov	r2, #0
 1406 003a 4FF00003 		mov	r3, #0
 1407 003e AB00     		lsls	r3, r5, #2
 1408 0040 43EA9473 		orr	r3, r3, r4, lsr #30
 1409 0044 A200     		lsls	r2, r4, #2
 1410 0046 1446     		mov	r4, r2
 1411 0048 1D46     		mov	r5, r3
 1412 004a 14EB080A 		adds	r10, r4, r8
 1413 004e 45EB090B 		adc	fp, r5, r9
 1414 0052 4FF00002 		mov	r2, #0
 1415 0056 4FF00003 		mov	r3, #0
 1416 005a 4FEACB03 		lsl	r3, fp, #3
 1417 005e 43EA5A73 		orr	r3, r3, r10, lsr #29
 1418 0062 4FEACA02 		lsl	r2, r10, #3
 1419 0066 9246     		mov	r10, r2
 1420 0068 9B46     		mov	fp, r3
 1421 006a 5046     		mov	r0, r10
 1422 006c 5946     		mov	r1, fp
 1423              		.loc 3 193 74
 1424 006e 4FF47A72 		mov	r2, #1000
 1425 0072 4FF00003 		mov	r3, #0
 1426 0076 FFF7FEFF 		bl	__aeabi_uldivmod
 1427 007a 0246     		mov	r2, r0
 1428 007c 0B46     		mov	r3, r1
 1429              		.loc 3 193 100
 1430 007e 1346     		mov	r3, r2
 1431 0080 FB60     		str	r3, [r7, #12]
 194:Src/utils.cpp ****     uint32_t timeout_ms = deadline_ms - now_ms;
 1432              		.loc 3 194 14
 1433 0082 7A68     		ldr	r2, [r7, #4]
 1434 0084 FB68     		ldr	r3, [r7, #12]
 1435 0086 D31A     		subs	r3, r2, r3
 1436 0088 BB60     		str	r3, [r7, #8]
ARM GAS  /tmp/ccKQCraR.s 			page 45


 195:Src/utils.cpp ****     return (timeout_ms & 0x80000000) ? 0 : timeout_ms;
 1437              		.loc 3 195 24
 1438 008a BB68     		ldr	r3, [r7, #8]
 1439              		.loc 3 195 38
 1440 008c 23EAE373 		bic	r3, r3, r3, asr #31
 196:Src/utils.cpp **** }
 1441              		.loc 3 196 1
 1442 0090 1846     		mov	r0, r3
 1443 0092 1037     		adds	r7, r7, #16
 1444              	.LCFI65:
 1445              		.cfi_def_cfa_offset 32
 1446 0094 BD46     		mov	sp, r7
 1447              	.LCFI66:
 1448              		.cfi_def_cfa_register 13
 1449              		@ sp needed
 1450 0096 BDE8B08F 		pop	{r4, r5, r7, r8, r9, r10, fp, pc}
 1451              		.cfi_endproc
 1452              	.LFE2999:
 1454              		.section	.text.timeout_to_deadline,"ax",%progbits
 1455              		.align	1
 1456              		.global	timeout_to_deadline
 1457              		.syntax unified
 1458              		.thumb
 1459              		.thumb_func
 1460              		.fpu fpv4-sp-d16
 1462              	timeout_to_deadline:
 1463              	.LFB3000:
 197:Src/utils.cpp **** 
 198:Src/utils.cpp **** // @brief: Converts a timeout to a deadline based on the current time.
 199:Src/utils.cpp **** uint32_t timeout_to_deadline(uint32_t timeout_ms) {
 1464              		.loc 3 199 51
 1465              		.cfi_startproc
 1466              		@ args = 0, pretend = 0, frame = 16
 1467              		@ frame_needed = 1, uses_anonymous_args = 0
 1468 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, r10, fp, lr}
 1469              	.LCFI67:
 1470              		.cfi_def_cfa_offset 32
 1471              		.cfi_offset 4, -32
 1472              		.cfi_offset 5, -28
 1473              		.cfi_offset 7, -24
 1474              		.cfi_offset 8, -20
 1475              		.cfi_offset 9, -16
 1476              		.cfi_offset 10, -12
 1477              		.cfi_offset 11, -8
 1478              		.cfi_offset 14, -4
 1479 0004 84B0     		sub	sp, sp, #16
 1480              	.LCFI68:
 1481              		.cfi_def_cfa_offset 48
 1482 0006 00AF     		add	r7, sp, #0
 1483              	.LCFI69:
 1484              		.cfi_def_cfa_register 7
 1485 0008 7860     		str	r0, [r7, #4]
 200:Src/utils.cpp ****     uint32_t now_ms = (uint32_t)((1000ull * (uint64_t)osKernelSysTick()) / osKernelSysTickFrequency
 1486              		.loc 3 200 70
 1487 000a FFF7FEFF 		bl	osKernelSysTick
 1488 000e 0346     		mov	r3, r0
 1489              		.loc 3 200 45
ARM GAS  /tmp/ccKQCraR.s 			page 46


 1490 0010 0022     		movs	r2, #0
 1491 0012 9846     		mov	r8, r3
 1492 0014 9146     		mov	r9, r2
 1493              		.loc 3 200 43
 1494 0016 4246     		mov	r2, r8
 1495 0018 4B46     		mov	r3, r9
 1496 001a 4FF00000 		mov	r0, #0
 1497 001e 4FF00001 		mov	r1, #0
 1498 0022 5901     		lsls	r1, r3, #5
 1499 0024 41EAD261 		orr	r1, r1, r2, lsr #27
 1500 0028 5001     		lsls	r0, r2, #5
 1501 002a 0246     		mov	r2, r0
 1502 002c 0B46     		mov	r3, r1
 1503 002e B2EB0804 		subs	r4, r2, r8
 1504 0032 63EB0905 		sbc	r5, r3, r9
 1505 0036 4FF00002 		mov	r2, #0
 1506 003a 4FF00003 		mov	r3, #0
 1507 003e AB00     		lsls	r3, r5, #2
 1508 0040 43EA9473 		orr	r3, r3, r4, lsr #30
 1509 0044 A200     		lsls	r2, r4, #2
 1510 0046 1446     		mov	r4, r2
 1511 0048 1D46     		mov	r5, r3
 1512 004a 14EB080A 		adds	r10, r4, r8
 1513 004e 45EB090B 		adc	fp, r5, r9
 1514 0052 4FF00002 		mov	r2, #0
 1515 0056 4FF00003 		mov	r3, #0
 1516 005a 4FEACB03 		lsl	r3, fp, #3
 1517 005e 43EA5A73 		orr	r3, r3, r10, lsr #29
 1518 0062 4FEACA02 		lsl	r2, r10, #3
 1519 0066 9246     		mov	r10, r2
 1520 0068 9B46     		mov	fp, r3
 1521 006a 5046     		mov	r0, r10
 1522 006c 5946     		mov	r1, fp
 1523              		.loc 3 200 74
 1524 006e 4FF47A72 		mov	r2, #1000
 1525 0072 4FF00003 		mov	r3, #0
 1526 0076 FFF7FEFF 		bl	__aeabi_uldivmod
 1527 007a 0246     		mov	r2, r0
 1528 007c 0B46     		mov	r3, r1
 1529              		.loc 3 200 100
 1530 007e 1346     		mov	r3, r2
 1531 0080 FB60     		str	r3, [r7, #12]
 201:Src/utils.cpp ****     return now_ms + timeout_ms;
 1532              		.loc 3 201 21
 1533 0082 FA68     		ldr	r2, [r7, #12]
 1534 0084 7B68     		ldr	r3, [r7, #4]
 1535 0086 1344     		add	r3, r3, r2
 202:Src/utils.cpp **** }
 1536              		.loc 3 202 1
 1537 0088 1846     		mov	r0, r3
 1538 008a 1037     		adds	r7, r7, #16
 1539              	.LCFI70:
 1540              		.cfi_def_cfa_offset 32
 1541 008c BD46     		mov	sp, r7
 1542              	.LCFI71:
 1543              		.cfi_def_cfa_register 13
 1544              		@ sp needed
ARM GAS  /tmp/ccKQCraR.s 			page 47


 1545 008e BDE8B08F 		pop	{r4, r5, r7, r8, r9, r10, fp, pc}
 1546              		.cfi_endproc
 1547              	.LFE3000:
 1549              		.section	.text.is_in_the_future,"ax",%progbits
 1550              		.align	1
 1551              		.global	is_in_the_future
 1552              		.syntax unified
 1553              		.thumb
 1554              		.thumb_func
 1555              		.fpu fpv4-sp-d16
 1557              	is_in_the_future:
 1558              	.LFB3001:
 203:Src/utils.cpp **** 
 204:Src/utils.cpp **** // @brief: Returns a non-zero value if the specified system time (in ms)
 205:Src/utils.cpp **** // is in the future or 0 otherwise.
 206:Src/utils.cpp **** // If the time lies far in the past this may falsely return a non-zero value.
 207:Src/utils.cpp **** int is_in_the_future(uint32_t time_ms) {
 1559              		.loc 3 207 40
 1560              		.cfi_startproc
 1561              		@ args = 0, pretend = 0, frame = 8
 1562              		@ frame_needed = 1, uses_anonymous_args = 0
 1563 0000 80B5     		push	{r7, lr}
 1564              	.LCFI72:
 1565              		.cfi_def_cfa_offset 8
 1566              		.cfi_offset 7, -8
 1567              		.cfi_offset 14, -4
 1568 0002 82B0     		sub	sp, sp, #8
 1569              	.LCFI73:
 1570              		.cfi_def_cfa_offset 16
 1571 0004 00AF     		add	r7, sp, #0
 1572              	.LCFI74:
 1573              		.cfi_def_cfa_register 7
 1574 0006 7860     		str	r0, [r7, #4]
 208:Src/utils.cpp ****     return deadline_to_timeout(time_ms);
 1575              		.loc 3 208 31
 1576 0008 7868     		ldr	r0, [r7, #4]
 1577 000a FFF7FEFF 		bl	deadline_to_timeout
 1578 000e 0346     		mov	r3, r0
 209:Src/utils.cpp **** }
 1579              		.loc 3 209 1
 1580 0010 1846     		mov	r0, r3
 1581 0012 0837     		adds	r7, r7, #8
 1582              	.LCFI75:
 1583              		.cfi_def_cfa_offset 8
 1584 0014 BD46     		mov	sp, r7
 1585              	.LCFI76:
 1586              		.cfi_def_cfa_register 13
 1587              		@ sp needed
 1588 0016 80BD     		pop	{r7, pc}
 1589              		.cfi_endproc
 1590              	.LFE3001:
 1592              		.section	.text.micros,"ax",%progbits
 1593              		.align	1
 1594              		.global	micros
 1595              		.syntax unified
 1596              		.thumb
 1597              		.thumb_func
ARM GAS  /tmp/ccKQCraR.s 			page 48


 1598              		.fpu fpv4-sp-d16
 1600              	micros:
 1601              	.LFB3002:
 210:Src/utils.cpp **** 
 211:Src/utils.cpp **** // @brief: Returns number of microseconds since system startup
 212:Src/utils.cpp **** uint32_t micros(void) {
 1602              		.loc 3 212 23
 1603              		.cfi_startproc
 1604              		@ args = 0, pretend = 0, frame = 0
 1605              		@ frame_needed = 1, uses_anonymous_args = 0
 1606 0000 B0B5     		push	{r4, r5, r7, lr}
 1607              	.LCFI77:
 1608              		.cfi_def_cfa_offset 16
 1609              		.cfi_offset 4, -16
 1610              		.cfi_offset 5, -12
 1611              		.cfi_offset 7, -8
 1612              		.cfi_offset 14, -4
 1613 0002 00AF     		add	r7, sp, #0
 1614              	.LCFI78:
 1615              		.cfi_def_cfa_register 7
 1616              	.L120:
 213:Src/utils.cpp ****     register uint32_t ms, cycle_cnt;
 214:Src/utils.cpp ****     do {
 215:Src/utils.cpp ****         ms = HAL_GetTick();
 1617              		.loc 3 215 25
 1618 0004 FFF7FEFF 		bl	HAL_GetTick
 1619 0008 0446     		mov	r4, r0
 216:Src/utils.cpp ****         cycle_cnt = TIM_TIME_BASE->CNT;
 1620              		.loc 3 216 36
 1621 000a 0A4B     		ldr	r3, .L122
 1622              		.loc 3 216 19
 1623 000c 5D6A     		ldr	r5, [r3, #36]
 217:Src/utils.cpp ****     } while (ms != HAL_GetTick());
 1624              		.loc 3 217 31
 1625 000e FFF7FEFF 		bl	HAL_GetTick
 1626 0012 0346     		mov	r3, r0
 1627              		.loc 3 217 17
 1628 0014 9C42     		cmp	r4, r3
 1629 0016 14BF     		ite	ne
 1630 0018 0123     		movne	r3, #1
 1631 001a 0023     		moveq	r3, #0
 1632 001c DBB2     		uxtb	r3, r3
 1633 001e 002B     		cmp	r3, #0
 1634 0020 00D0     		beq	.L119
 214:Src/utils.cpp ****         ms = HAL_GetTick();
 1635              		.loc 3 214 5
 1636 0022 EFE7     		b	.L120
 1637              	.L119:
 218:Src/utils.cpp **** 
 219:Src/utils.cpp ****     return (ms * 1000) + cycle_cnt;
 1638              		.loc 3 219 16
 1639 0024 4FF47A73 		mov	r3, #1000
 1640 0028 04FB03F3 		mul	r3, r4, r3
 1641              		.loc 3 219 26
 1642 002c 2B44     		add	r3, r3, r5
 220:Src/utils.cpp **** }
 1643              		.loc 3 220 1
ARM GAS  /tmp/ccKQCraR.s 			page 49


 1644 002e 1846     		mov	r0, r3
 1645 0030 B0BD     		pop	{r4, r5, r7, pc}
 1646              	.L123:
 1647 0032 00BF     		.align	2
 1648              	.L122:
 1649 0034 00440140 		.word	1073824768
 1650              		.cfi_endproc
 1651              	.LFE3002:
 1653              		.section	.text.delay_us,"ax",%progbits
 1654              		.align	1
 1655              		.global	delay_us
 1656              		.syntax unified
 1657              		.thumb
 1658              		.thumb_func
 1659              		.fpu fpv4-sp-d16
 1661              	delay_us:
 1662              	.LFB3003:
 221:Src/utils.cpp **** 
 222:Src/utils.cpp **** // @brief: Busy wait delay for given amount of microseconds (us)
 223:Src/utils.cpp **** void delay_us(uint32_t us) {
 1663              		.loc 3 223 28
 1664              		.cfi_startproc
 1665              		@ args = 0, pretend = 0, frame = 16
 1666              		@ frame_needed = 1, uses_anonymous_args = 0
 1667 0000 80B5     		push	{r7, lr}
 1668              	.LCFI79:
 1669              		.cfi_def_cfa_offset 8
 1670              		.cfi_offset 7, -8
 1671              		.cfi_offset 14, -4
 1672 0002 84B0     		sub	sp, sp, #16
 1673              	.LCFI80:
 1674              		.cfi_def_cfa_offset 24
 1675 0004 00AF     		add	r7, sp, #0
 1676              	.LCFI81:
 1677              		.cfi_def_cfa_register 7
 1678 0006 7860     		str	r0, [r7, #4]
 224:Src/utils.cpp ****     uint32_t start = micros();
 1679              		.loc 3 224 28
 1680 0008 FFF7FEFF 		bl	micros
 1681 000c F860     		str	r0, [r7, #12]
 1682              	.L126:
 225:Src/utils.cpp ****     while (micros() - start < (uint32_t)us) {
 1683              		.loc 3 225 18
 1684 000e FFF7FEFF 		bl	micros
 1685 0012 0246     		mov	r2, r0
 1686              		.loc 3 225 21
 1687 0014 FB68     		ldr	r3, [r7, #12]
 1688 0016 D31A     		subs	r3, r2, r3
 1689              		.loc 3 225 29
 1690 0018 7A68     		ldr	r2, [r7, #4]
 1691 001a 9A42     		cmp	r2, r3
 1692 001c 8CBF     		ite	hi
 1693 001e 0123     		movhi	r3, #1
 1694 0020 0023     		movls	r3, #0
 1695 0022 DBB2     		uxtb	r3, r3
 1696 0024 002B     		cmp	r3, #0
 1697 0026 01D0     		beq	.L127
ARM GAS  /tmp/ccKQCraR.s 			page 50


 226:Src/utils.cpp ****         __ASM("nop");
 1698              		.loc 3 226 9
 1699              		.syntax unified
 1700              	@ 226 "Src/utils.cpp" 1
 1701 0028 00BF     		nop
 1702              	@ 0 "" 2
 225:Src/utils.cpp ****     while (micros() - start < (uint32_t)us) {
 1703              		.loc 3 225 5
 1704              		.thumb
 1705              		.syntax unified
 1706 002a F0E7     		b	.L126
 1707              	.L127:
 227:Src/utils.cpp ****     }
 228:Src/utils.cpp **** }
 1708              		.loc 3 228 1
 1709 002c 00BF     		nop
 1710 002e 1037     		adds	r7, r7, #16
 1711              	.LCFI82:
 1712              		.cfi_def_cfa_offset 8
 1713 0030 BD46     		mov	sp, r7
 1714              	.LCFI83:
 1715              		.cfi_def_cfa_register 13
 1716              		@ sp needed
 1717 0032 80BD     		pop	{r7, pc}
 1718              		.cfi_endproc
 1719              	.LFE3003:
 1721              		.section	.text.fsgn,"ax",%progbits
 1722              		.align	1
 1723              		.global	fsgn
 1724              		.syntax unified
 1725              		.thumb
 1726              		.thumb_func
 1727              		.fpu fpv4-sp-d16
 1729              	fsgn:
 1730              	.LFB3004:
 229:Src/utils.cpp **** 
 230:Src/utils.cpp **** int32_t fsgn(float num) {
 1731              		.loc 3 230 25
 1732              		.cfi_startproc
 1733              		@ args = 0, pretend = 0, frame = 8
 1734              		@ frame_needed = 1, uses_anonymous_args = 0
 1735              		@ link register save eliminated.
 1736 0000 80B4     		push	{r7}
 1737              	.LCFI84:
 1738              		.cfi_def_cfa_offset 4
 1739              		.cfi_offset 7, -4
 1740 0002 83B0     		sub	sp, sp, #12
 1741              	.LCFI85:
 1742              		.cfi_def_cfa_offset 16
 1743 0004 00AF     		add	r7, sp, #0
 1744              	.LCFI86:
 1745              		.cfi_def_cfa_register 7
 1746 0006 87ED010A 		vstr.32	s0, [r7, #4]
 231:Src/utils.cpp ****     if (num > 0.0f) {
 1747              		.loc 3 231 5
 1748 000a D7ED017A 		vldr.32	s15, [r7, #4]
 1749 000e F5EEC07A 		vcmpe.f32	s15, #0
ARM GAS  /tmp/ccKQCraR.s 			page 51


 1750 0012 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1751 0016 01DD     		ble	.L136
 232:Src/utils.cpp ****         return 1;
 1752              		.loc 3 232 16
 1753 0018 0123     		movs	r3, #1
 1754 001a 0AE0     		b	.L131
 1755              	.L136:
 233:Src/utils.cpp ****     } else if (num < 0.0f) {
 1756              		.loc 3 233 12
 1757 001c D7ED017A 		vldr.32	s15, [r7, #4]
 1758 0020 F5EEC07A 		vcmpe.f32	s15, #0
 1759 0024 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1760 0028 02D5     		bpl	.L137
 234:Src/utils.cpp ****         return -1;
 1761              		.loc 3 234 17
 1762 002a 4FF0FF33 		mov	r3, #-1
 1763 002e 00E0     		b	.L131
 1764              	.L137:
 235:Src/utils.cpp ****     } else {
 236:Src/utils.cpp ****         return 0;
 1765              		.loc 3 236 16
 1766 0030 0023     		movs	r3, #0
 1767              	.L131:
 237:Src/utils.cpp ****     }
 238:Src/utils.cpp **** }
 1768              		.loc 3 238 1
 1769 0032 1846     		mov	r0, r3
 1770 0034 0C37     		adds	r7, r7, #12
 1771              	.LCFI87:
 1772              		.cfi_def_cfa_offset 4
 1773 0036 BD46     		mov	sp, r7
 1774              	.LCFI88:
 1775              		.cfi_def_cfa_register 13
 1776              		@ sp needed
 1777 0038 5DF8047B 		ldr	r7, [sp], #4
 1778              	.LCFI89:
 1779              		.cfi_restore 7
 1780              		.cfi_def_cfa_offset 0
 1781 003c 7047     		bx	lr
 1782              		.cfi_endproc
 1783              	.LFE3004:
 1785              		.section	.text.saturation,"ax",%progbits
 1786              		.align	1
 1787              		.global	saturation
 1788              		.syntax unified
 1789              		.thumb
 1790              		.thumb_func
 1791              		.fpu fpv4-sp-d16
 1793              	saturation:
 1794              	.LFB3005:
 239:Src/utils.cpp **** 
 240:Src/utils.cpp **** int32_t saturation(int32_t num, int32_t min, int32_t max) 
 241:Src/utils.cpp **** {
 1795              		.loc 3 241 1
 1796              		.cfi_startproc
 1797              		@ args = 0, pretend = 0, frame = 16
 1798              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccKQCraR.s 			page 52


 1799              		@ link register save eliminated.
 1800 0000 80B4     		push	{r7}
 1801              	.LCFI90:
 1802              		.cfi_def_cfa_offset 4
 1803              		.cfi_offset 7, -4
 1804 0002 85B0     		sub	sp, sp, #20
 1805              	.LCFI91:
 1806              		.cfi_def_cfa_offset 24
 1807 0004 00AF     		add	r7, sp, #0
 1808              	.LCFI92:
 1809              		.cfi_def_cfa_register 7
 1810 0006 F860     		str	r0, [r7, #12]
 1811 0008 B960     		str	r1, [r7, #8]
 1812 000a 7A60     		str	r2, [r7, #4]
 242:Src/utils.cpp ****     if (num > max) {
 1813              		.loc 3 242 5
 1814 000c FA68     		ldr	r2, [r7, #12]
 1815 000e 7B68     		ldr	r3, [r7, #4]
 1816 0010 9A42     		cmp	r2, r3
 1817 0012 01DD     		ble	.L139
 243:Src/utils.cpp ****         return max;
 1818              		.loc 3 243 16
 1819 0014 7B68     		ldr	r3, [r7, #4]
 1820 0016 06E0     		b	.L140
 1821              	.L139:
 244:Src/utils.cpp ****     } else if (num < min) {
 1822              		.loc 3 244 12
 1823 0018 FA68     		ldr	r2, [r7, #12]
 1824 001a BB68     		ldr	r3, [r7, #8]
 1825 001c 9A42     		cmp	r2, r3
 1826 001e 01DA     		bge	.L141
 245:Src/utils.cpp ****         return min;
 1827              		.loc 3 245 16
 1828 0020 BB68     		ldr	r3, [r7, #8]
 1829 0022 00E0     		b	.L140
 1830              	.L141:
 246:Src/utils.cpp ****     } else {
 247:Src/utils.cpp ****         return num;
 1831              		.loc 3 247 16
 1832 0024 FB68     		ldr	r3, [r7, #12]
 1833              	.L140:
 248:Src/utils.cpp ****     }
 249:Src/utils.cpp **** }
 1834              		.loc 3 249 1
 1835 0026 1846     		mov	r0, r3
 1836 0028 1437     		adds	r7, r7, #20
 1837              	.LCFI93:
 1838              		.cfi_def_cfa_offset 4
 1839 002a BD46     		mov	sp, r7
 1840              	.LCFI94:
 1841              		.cfi_def_cfa_register 13
 1842              		@ sp needed
 1843 002c 5DF8047B 		ldr	r7, [sp], #4
 1844              	.LCFI95:
 1845              		.cfi_restore 7
 1846              		.cfi_def_cfa_offset 0
 1847 0030 7047     		bx	lr
ARM GAS  /tmp/ccKQCraR.s 			page 53


 1848              		.cfi_endproc
 1849              	.LFE3005:
 1851              		.section	.text.initNotchFilter,"ax",%progbits
 1852              		.align	1
 1853              		.global	initNotchFilter
 1854              		.syntax unified
 1855              		.thumb
 1856              		.thumb_func
 1857              		.fpu fpv4-sp-d16
 1859              	initNotchFilter:
 1860              	.LFB3006:
 250:Src/utils.cpp **** 
 251:Src/utils.cpp **** 
 252:Src/utils.cpp **** void initNotchFilter(NotchFilter* filter, float frequency, float sampleRate, float bandwidth) {
 1861              		.loc 3 252 95
 1862              		.cfi_startproc
 1863              		@ args = 0, pretend = 0, frame = 24
 1864              		@ frame_needed = 1, uses_anonymous_args = 0
 1865 0000 80B5     		push	{r7, lr}
 1866              	.LCFI96:
 1867              		.cfi_def_cfa_offset 8
 1868              		.cfi_offset 7, -8
 1869              		.cfi_offset 14, -4
 1870 0002 86B0     		sub	sp, sp, #24
 1871              	.LCFI97:
 1872              		.cfi_def_cfa_offset 32
 1873 0004 00AF     		add	r7, sp, #0
 1874              	.LCFI98:
 1875              		.cfi_def_cfa_register 7
 1876 0006 F860     		str	r0, [r7, #12]
 1877 0008 87ED020A 		vstr.32	s0, [r7, #8]
 1878 000c C7ED010A 		vstr.32	s1, [r7, #4]
 1879 0010 87ED001A 		vstr.32	s2, [r7]
 253:Src/utils.cpp ****     float w0 = 2 * M_PI * frequency / sampleRate;
 1880              		.loc 3 253 25
 1881 0014 D7ED027A 		vldr.32	s15, [r7, #8]
 1882 0018 9FED277A 		vldr.32	s14, .L143
 1883 001c 67EE876A 		vmul.f32	s13, s15, s14
 1884              		.loc 3 253 11
 1885 0020 97ED017A 		vldr.32	s14, [r7, #4]
 1886 0024 C6EE877A 		vdiv.f32	s15, s13, s14
 1887 0028 C7ED057A 		vstr.32	s15, [r7, #20]
 254:Src/utils.cpp ****     filter->w0 = w0;
 1888              		.loc 3 254 16
 1889 002c FB68     		ldr	r3, [r7, #12]
 1890 002e 7A69     		ldr	r2, [r7, #20]	@ float
 1891 0030 1A60     		str	r2, [r3]	@ float
 255:Src/utils.cpp ****     filter->r = 1 - bandwidth / 2;
 1892              		.loc 3 255 31
 1893 0032 97ED007A 		vldr.32	s14, [r7]
 1894 0036 F0EE006A 		vmov.f32	s13, #2.0e+0
 1895 003a C7EE267A 		vdiv.f32	s15, s14, s13
 1896              		.loc 3 255 19
 1897 003e B7EE007A 		vmov.f32	s14, #1.0e+0
 1898 0042 77EE677A 		vsub.f32	s15, s14, s15
 1899              		.loc 3 255 15
 1900 0046 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccKQCraR.s 			page 54


 1901 0048 C3ED017A 		vstr.32	s15, [r3, #4]
 256:Src/utils.cpp ****     filter->r = our_arm_sin_f32(w0) / (2*bandwidth);
 1902              		.loc 3 256 32
 1903 004c 97ED050A 		vldr.32	s0, [r7, #20]
 1904 0050 FFF7FEFF 		bl	our_arm_sin_f32
 1905 0054 F0EE406A 		vmov.f32	s13, s0
 1906              		.loc 3 256 41
 1907 0058 D7ED007A 		vldr.32	s15, [r7]
 1908 005c 37EEA77A 		vadd.f32	s14, s15, s15
 1909              		.loc 3 256 37
 1910 0060 C6EE877A 		vdiv.f32	s15, s13, s14
 1911              		.loc 3 256 15
 1912 0064 FB68     		ldr	r3, [r7, #12]
 1913 0066 C3ED017A 		vstr.32	s15, [r3, #4]
 257:Src/utils.cpp ****     float cosw0 = our_arm_cos_f32(w0);
 1914              		.loc 3 257 34
 1915 006a 97ED050A 		vldr.32	s0, [r7, #20]
 1916 006e FFF7FEFF 		bl	our_arm_cos_f32
 1917 0072 87ED040A 		vstr.32	s0, [r7, #16]
 258:Src/utils.cpp **** 
 259:Src/utils.cpp ****     (void)cosw0;
 260:Src/utils.cpp ****     // filter->b1 = -2 * cosw0;
 261:Src/utils.cpp ****     // filter->b2 = 1;
 262:Src/utils.cpp ****     // filter->a1 = -2 * filter->r * cosw0;
 263:Src/utils.cpp ****     // filter->a2 = filter->r * filter->r;
 264:Src/utils.cpp ****     // filter->a2 = 1.0f - 2*filter->r ;
 265:Src/utils.cpp ****     filter->b1 = -1.9996150f;//-1.99975573206256f;
 1918              		.loc 3 265 16
 1919 0076 FB68     		ldr	r3, [r7, #12]
 1920 0078 104A     		ldr	r2, .L143+4
 1921 007a 1A61     		str	r2, [r3, #16]	@ float
 266:Src/utils.cpp ****     filter->b2 = 1.0f;
 1922              		.loc 3 266 16
 1923 007c FB68     		ldr	r3, [r7, #12]
 1924 007e 4FF07E52 		mov	r2, #1065353216
 1925 0082 5A61     		str	r2, [r3, #20]	@ float
 267:Src/utils.cpp ****     filter->a1 = -1.9686884f;
 1926              		.loc 3 267 16
 1927 0084 FB68     		ldr	r3, [r7, #12]
 1928 0086 0E4A     		ldr	r2, .L143+8
 1929 0088 9A60     		str	r2, [r3, #8]	@ float
 268:Src/utils.cpp ****     filter->a2 = 0.9690674f;
 1930              		.loc 3 268 16
 1931 008a FB68     		ldr	r3, [r7, #12]
 1932 008c 0D4A     		ldr	r2, .L143+12
 1933 008e DA60     		str	r2, [r3, #12]	@ float
 269:Src/utils.cpp **** 
 270:Src/utils.cpp ****     filter->x1 = filter->x2 = filter->y1 = filter->y2 = 0;
 1934              		.loc 3 270 55
 1935 0090 FB68     		ldr	r3, [r7, #12]
 1936 0092 4FF00002 		mov	r2, #0
 1937 0096 5A62     		str	r2, [r3, #36]	@ float
 1938              		.loc 3 270 52
 1939 0098 FB68     		ldr	r3, [r7, #12]
 1940 009a 5A6A     		ldr	r2, [r3, #36]	@ float
 1941              		.loc 3 270 42
 1942 009c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccKQCraR.s 			page 55


 1943 009e 1A62     		str	r2, [r3, #32]	@ float
 1944              		.loc 3 270 39
 1945 00a0 FB68     		ldr	r3, [r7, #12]
 1946 00a2 1A6A     		ldr	r2, [r3, #32]	@ float
 1947              		.loc 3 270 29
 1948 00a4 FB68     		ldr	r3, [r7, #12]
 1949 00a6 DA61     		str	r2, [r3, #28]	@ float
 1950              		.loc 3 270 26
 1951 00a8 FB68     		ldr	r3, [r7, #12]
 1952 00aa DA69     		ldr	r2, [r3, #28]	@ float
 1953              		.loc 3 270 16
 1954 00ac FB68     		ldr	r3, [r7, #12]
 1955 00ae 9A61     		str	r2, [r3, #24]	@ float
 271:Src/utils.cpp **** }
 1956              		.loc 3 271 1
 1957 00b0 00BF     		nop
 1958 00b2 1837     		adds	r7, r7, #24
 1959              	.LCFI99:
 1960              		.cfi_def_cfa_offset 8
 1961 00b4 BD46     		mov	sp, r7
 1962              	.LCFI100:
 1963              		.cfi_def_cfa_register 13
 1964              		@ sp needed
 1965 00b6 80BD     		pop	{r7, pc}
 1966              	.L144:
 1967              		.align	2
 1968              	.L143:
 1969 00b8 DB0FC940 		.word	1086918619
 1970 00bc 62F3FFBF 		.word	-1073745054
 1971 00c0 FBFDFBBF 		.word	-1074004485
 1972 00c4 CD14783F 		.word	1064834253
 1973              		.cfi_endproc
 1974              	.LFE3006:
 1976              		.section	.text.applyNotchFilter,"ax",%progbits
 1977              		.align	1
 1978              		.global	applyNotchFilter
 1979              		.syntax unified
 1980              		.thumb
 1981              		.thumb_func
 1982              		.fpu fpv4-sp-d16
 1984              	applyNotchFilter:
 1985              	.LFB3007:
 272:Src/utils.cpp **** 
 273:Src/utils.cpp **** float applyNotchFilter(NotchFilter* filter, float input) {
 1986              		.loc 3 273 58
 1987              		.cfi_startproc
 1988              		@ args = 0, pretend = 0, frame = 16
 1989              		@ frame_needed = 1, uses_anonymous_args = 0
 1990              		@ link register save eliminated.
 1991 0000 80B4     		push	{r7}
 1992              	.LCFI101:
 1993              		.cfi_def_cfa_offset 4
 1994              		.cfi_offset 7, -4
 1995 0002 85B0     		sub	sp, sp, #20
 1996              	.LCFI102:
 1997              		.cfi_def_cfa_offset 24
 1998 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccKQCraR.s 			page 56


 1999              	.LCFI103:
 2000              		.cfi_def_cfa_register 7
 2001 0006 7860     		str	r0, [r7, #4]
 2002 0008 87ED000A 		vstr.32	s0, [r7]
 274:Src/utils.cpp ****     float output = input + filter->b1 * filter->x1 + filter->b2 * filter->x2
 2003              		.loc 3 274 36
 2004 000c 7B68     		ldr	r3, [r7, #4]
 2005 000e 93ED047A 		vldr.32	s14, [r3, #16]
 2006              		.loc 3 274 49
 2007 0012 7B68     		ldr	r3, [r7, #4]
 2008 0014 D3ED067A 		vldr.32	s15, [r3, #24]
 2009              		.loc 3 274 39
 2010 0018 27EE277A 		vmul.f32	s14, s14, s15
 2011              		.loc 3 274 26
 2012 001c D7ED007A 		vldr.32	s15, [r7]
 2013 0020 37EE277A 		vadd.f32	s14, s14, s15
 2014              		.loc 3 274 62
 2015 0024 7B68     		ldr	r3, [r7, #4]
 2016 0026 D3ED056A 		vldr.32	s13, [r3, #20]
 2017              		.loc 3 274 75
 2018 002a 7B68     		ldr	r3, [r7, #4]
 2019 002c D3ED077A 		vldr.32	s15, [r3, #28]
 2020              		.loc 3 274 65
 2021 0030 66EEA77A 		vmul.f32	s15, s13, s15
 2022              		.loc 3 274 52
 2023 0034 37EE277A 		vadd.f32	s14, s14, s15
 275:Src/utils.cpp ****                    - filter->a1 * filter->y1 - filter->a2 * filter->y2;
 2024              		.loc 3 275 30
 2025 0038 7B68     		ldr	r3, [r7, #4]
 2026 003a D3ED026A 		vldr.32	s13, [r3, #8]
 2027              		.loc 3 275 43
 2028 003e 7B68     		ldr	r3, [r7, #4]
 2029 0040 D3ED087A 		vldr.32	s15, [r3, #32]
 2030              		.loc 3 275 33
 2031 0044 66EEA77A 		vmul.f32	s15, s13, s15
 2032              		.loc 3 275 20
 2033 0048 37EE677A 		vsub.f32	s14, s14, s15
 2034              		.loc 3 275 56
 2035 004c 7B68     		ldr	r3, [r7, #4]
 2036 004e D3ED036A 		vldr.32	s13, [r3, #12]
 2037              		.loc 3 275 69
 2038 0052 7B68     		ldr	r3, [r7, #4]
 2039 0054 D3ED097A 		vldr.32	s15, [r3, #36]
 2040              		.loc 3 275 59
 2041 0058 66EEA77A 		vmul.f32	s15, s13, s15
 274:Src/utils.cpp ****     float output = input + filter->b1 * filter->x1 + filter->b2 * filter->x2
 2042              		.loc 3 274 11
 2043 005c 77EE677A 		vsub.f32	s15, s14, s15
 2044 0060 C7ED037A 		vstr.32	s15, [r7, #12]
 276:Src/utils.cpp ****     
 277:Src/utils.cpp ****     filter->x2 = filter->x1;
 2045              		.loc 3 277 26
 2046 0064 7B68     		ldr	r3, [r7, #4]
 2047 0066 9A69     		ldr	r2, [r3, #24]	@ float
 2048              		.loc 3 277 16
 2049 0068 7B68     		ldr	r3, [r7, #4]
 2050 006a DA61     		str	r2, [r3, #28]	@ float
ARM GAS  /tmp/ccKQCraR.s 			page 57


 278:Src/utils.cpp ****     filter->x1 = input;
 2051              		.loc 3 278 16
 2052 006c 7B68     		ldr	r3, [r7, #4]
 2053 006e 3A68     		ldr	r2, [r7]	@ float
 2054 0070 9A61     		str	r2, [r3, #24]	@ float
 279:Src/utils.cpp ****     filter->y2 = filter->y1;
 2055              		.loc 3 279 26
 2056 0072 7B68     		ldr	r3, [r7, #4]
 2057 0074 1A6A     		ldr	r2, [r3, #32]	@ float
 2058              		.loc 3 279 16
 2059 0076 7B68     		ldr	r3, [r7, #4]
 2060 0078 5A62     		str	r2, [r3, #36]	@ float
 280:Src/utils.cpp ****     filter->y1 = output;
 2061              		.loc 3 280 16
 2062 007a 7B68     		ldr	r3, [r7, #4]
 2063 007c FA68     		ldr	r2, [r7, #12]	@ float
 2064 007e 1A62     		str	r2, [r3, #32]	@ float
 281:Src/utils.cpp ****     
 282:Src/utils.cpp ****     return output;
 2065              		.loc 3 282 12
 2066 0080 FB68     		ldr	r3, [r7, #12]	@ float
 2067 0082 07EE903A 		vmov	s15, r3
 283:Src/utils.cpp **** }
 2068              		.loc 3 283 1
 2069 0086 B0EE670A 		vmov.f32	s0, s15
 2070 008a 1437     		adds	r7, r7, #20
 2071              	.LCFI104:
 2072              		.cfi_def_cfa_offset 4
 2073 008c BD46     		mov	sp, r7
 2074              	.LCFI105:
 2075              		.cfi_def_cfa_register 13
 2076              		@ sp needed
 2077 008e 5DF8047B 		ldr	r7, [sp], #4
 2078              	.LCFI106:
 2079              		.cfi_restore 7
 2080              		.cfi_def_cfa_offset 0
 2081 0092 7047     		bx	lr
 2082              		.cfi_endproc
 2083              	.LFE3007:
 2085              		.section	.rodata._ZL12INV_2_POW_31,"a"
 2086              		.align	2
 2089              	_ZL12INV_2_POW_31:
 2090 0000 00000030 		.word	805306368
 2091              		.section	.text.test_svm,"ax",%progbits
 2092              		.align	1
 2093              		.global	test_svm
 2094              		.syntax unified
 2095              		.thumb
 2096              		.thumb_func
 2097              		.fpu fpv4-sp-d16
 2099              	test_svm:
 2100              	.LFB3008:
 284:Src/utils.cpp **** 
 285:Src/utils.cpp **** constexpr float INV_2_POW_31 = 1.0f / 2147483648.0f;  // 1/2^31
 286:Src/utils.cpp **** 
 287:Src/utils.cpp **** 
 288:Src/utils.cpp **** void test_svm(float mod_q, float mod_d, float* theta, float *ta, float *tb, float *tc) 
ARM GAS  /tmp/ccKQCraR.s 			page 58


 289:Src/utils.cpp **** {
 2101              		.loc 3 289 1
 2102              		.cfi_startproc
 2103              		@ args = 0, pretend = 0, frame = 56
 2104              		@ frame_needed = 1, uses_anonymous_args = 0
 2105 0000 80B5     		push	{r7, lr}
 2106              	.LCFI107:
 2107              		.cfi_def_cfa_offset 8
 2108              		.cfi_offset 7, -8
 2109              		.cfi_offset 14, -4
 2110 0002 92B0     		sub	sp, sp, #72
 2111              	.LCFI108:
 2112              		.cfi_def_cfa_offset 80
 2113 0004 04AF     		add	r7, sp, #16
 2114              	.LCFI109:
 2115              		.cfi_def_cfa 7, 64
 2116 0006 87ED050A 		vstr.32	s0, [r7, #20]
 2117 000a C7ED040A 		vstr.32	s1, [r7, #16]
 2118 000e F860     		str	r0, [r7, #12]
 2119 0010 B960     		str	r1, [r7, #8]
 2120 0012 7A60     		str	r2, [r7, #4]
 2121 0014 3B60     		str	r3, [r7]
 290:Src/utils.cpp ****     // Convert theta to Q1.31 format
 291:Src/utils.cpp ****     int32_t angle = (int32_t)(*theta * 2147483648.0f / M_PI);
 2122              		.loc 3 291 31
 2123 0016 FB68     		ldr	r3, [r7, #12]
 2124 0018 D3ED007A 		vldr.32	s15, [r3]
 2125              		.loc 3 291 38
 2126 001c 9FED3C7A 		vldr.32	s14, .L148
 2127 0020 27EE877A 		vmul.f32	s14, s15, s14
 2128              		.loc 3 291 54
 2129 0024 DFED3B6A 		vldr.32	s13, .L148+4
 2130 0028 C7EE267A 		vdiv.f32	s15, s14, s13
 2131              		.loc 3 291 13
 2132 002c FDEEE77A 		vcvt.s32.f32	s15, s15
 2133 0030 17EE903A 		vmov	r3, s15	@ int
 2134 0034 7B63     		str	r3, [r7, #52]
 292:Src/utils.cpp ****     
 293:Src/utils.cpp ****     // Configure CORDIC for sine/cosine calculation
 294:Src/utils.cpp ****     LL_CORDIC_Config(CORDIC, 
 2135              		.loc 3 294 21
 2136 0036 0023     		movs	r3, #0
 2137 0038 0393     		str	r3, [sp, #12]
 2138 003a 0023     		movs	r3, #0
 2139 003c 0293     		str	r3, [sp, #8]
 2140 003e 4FF40023 		mov	r3, #524288
 2141 0042 0193     		str	r3, [sp, #4]
 2142 0044 0023     		movs	r3, #0
 2143 0046 0093     		str	r3, [sp]
 2144 0048 0023     		movs	r3, #0
 2145 004a 6022     		movs	r2, #96
 2146 004c 0021     		movs	r1, #0
 2147 004e 3248     		ldr	r0, .L148+8
 2148 0050 FFF7FEFF 		bl	LL_CORDIC_Config
 295:Src/utils.cpp ****                      LL_CORDIC_FUNCTION_COSINE,
 296:Src/utils.cpp ****                      LL_CORDIC_PRECISION_6CYCLES,
 297:Src/utils.cpp ****                      LL_CORDIC_SCALE_0,
ARM GAS  /tmp/ccKQCraR.s 			page 59


 298:Src/utils.cpp ****                      LL_CORDIC_NBWRITE_1,
 299:Src/utils.cpp ****                      LL_CORDIC_NBREAD_2,
 300:Src/utils.cpp ****                      LL_CORDIC_INSIZE_32BITS,
 301:Src/utils.cpp ****                      LL_CORDIC_OUTSIZE_32BITS);
 302:Src/utils.cpp ****     
 303:Src/utils.cpp ****     // Write input data
 304:Src/utils.cpp ****     LL_CORDIC_WriteData(CORDIC, angle);
 2149              		.loc 3 304 24
 2150 0054 7B6B     		ldr	r3, [r7, #52]
 2151 0056 1946     		mov	r1, r3
 2152 0058 2F48     		ldr	r0, .L148+8
 2153 005a FFF7FEFF 		bl	LL_CORDIC_WriteData
 305:Src/utils.cpp ****     
 306:Src/utils.cpp ****     // Read results in Q1.31 format
 307:Src/utils.cpp ****     int32_t cos_theta = LL_CORDIC_ReadData(CORDIC);  // cosine
 2154              		.loc 3 307 43
 2155 005e 2E48     		ldr	r0, .L148+8
 2156 0060 FFF7FEFF 		bl	LL_CORDIC_ReadData
 2157 0064 0346     		mov	r3, r0
 2158              		.loc 3 307 50
 2159 0066 3B63     		str	r3, [r7, #48]
 308:Src/utils.cpp ****     int32_t sin_theta = LL_CORDIC_ReadData(CORDIC);  // sine
 2160              		.loc 3 308 43
 2161 0068 2B48     		ldr	r0, .L148+8
 2162 006a FFF7FEFF 		bl	LL_CORDIC_ReadData
 2163 006e 0346     		mov	r3, r0
 2164              		.loc 3 308 50
 2165 0070 FB62     		str	r3, [r7, #44]
 309:Src/utils.cpp ****     
 310:Src/utils.cpp ****     // Convert Q1.31 to float
 311:Src/utils.cpp ****     float c_p = (float)cos_theta * INV_2_POW_31;
 2166              		.loc 3 311 17
 2167 0072 3B6B     		ldr	r3, [r7, #48]
 2168 0074 07EE903A 		vmov	s15, r3	@ int
 2169 0078 F8EEE77A 		vcvt.f32.s32	s15, s15
 2170              		.loc 3 311 11
 2171 007c 9FED277A 		vldr.32	s14, .L148+12
 2172 0080 67EE877A 		vmul.f32	s15, s15, s14
 2173 0084 C7ED0A7A 		vstr.32	s15, [r7, #40]
 312:Src/utils.cpp ****     float s_p = (float)sin_theta * INV_2_POW_31;
 2174              		.loc 3 312 17
 2175 0088 FB6A     		ldr	r3, [r7, #44]
 2176 008a 07EE903A 		vmov	s15, r3	@ int
 2177 008e F8EEE77A 		vcvt.f32.s32	s15, s15
 2178              		.loc 3 312 11
 2179 0092 9FED227A 		vldr.32	s14, .L148+12
 2180 0096 67EE877A 		vmul.f32	s15, s15, s14
 2181 009a C7ED097A 		vstr.32	s15, [r7, #36]
 313:Src/utils.cpp ****     
 314:Src/utils.cpp ****     // Inverse Park transform
 315:Src/utils.cpp ****     float mod_alpha = c_p * mod_d - s_p * mod_q;    // α = d*cos(θ) - q*sin(θ)
 2182              		.loc 3 315 27
 2183 009e 97ED0A7A 		vldr.32	s14, [r7, #40]
 2184 00a2 D7ED047A 		vldr.32	s15, [r7, #16]
 2185 00a6 27EE277A 		vmul.f32	s14, s14, s15
 2186              		.loc 3 315 41
 2187 00aa D7ED096A 		vldr.32	s13, [r7, #36]
ARM GAS  /tmp/ccKQCraR.s 			page 60


 2188 00ae D7ED057A 		vldr.32	s15, [r7, #20]
 2189 00b2 66EEA77A 		vmul.f32	s15, s13, s15
 2190              		.loc 3 315 11
 2191 00b6 77EE677A 		vsub.f32	s15, s14, s15
 2192 00ba C7ED087A 		vstr.32	s15, [r7, #32]
 316:Src/utils.cpp ****     float mod_beta  = c_p * mod_q + s_p * mod_d;    // β = q*cos(θ) + d*sin(θ)
 2193              		.loc 3 316 27
 2194 00be 97ED0A7A 		vldr.32	s14, [r7, #40]
 2195 00c2 D7ED057A 		vldr.32	s15, [r7, #20]
 2196 00c6 27EE277A 		vmul.f32	s14, s14, s15
 2197              		.loc 3 316 41
 2198 00ca D7ED096A 		vldr.32	s13, [r7, #36]
 2199 00ce D7ED047A 		vldr.32	s15, [r7, #16]
 2200 00d2 66EEA77A 		vmul.f32	s15, s13, s15
 2201              		.loc 3 316 11
 2202 00d6 77EE277A 		vadd.f32	s15, s14, s15
 2203 00da C7ED077A 		vstr.32	s15, [r7, #28]
 317:Src/utils.cpp ****     
 318:Src/utils.cpp ****     // Calculate PWM duty cycles
 319:Src/utils.cpp ****     SVM(mod_alpha, mod_beta, ta, tb, tc);
 2204              		.loc 3 319 8
 2205 00de 3A68     		ldr	r2, [r7]
 2206 00e0 7968     		ldr	r1, [r7, #4]
 2207 00e2 B868     		ldr	r0, [r7, #8]
 2208 00e4 D7ED070A 		vldr.32	s1, [r7, #28]
 2209 00e8 97ED080A 		vldr.32	s0, [r7, #32]
 2210 00ec FFF7FEFF 		bl	SVM
 320:Src/utils.cpp ****     
 321:Src/utils.cpp ****     // Wrap angle to [-π, π]
 322:Src/utils.cpp ****     *theta = wrap_pm_pi(*theta);
 2211              		.loc 3 322 24
 2212 00f0 FB68     		ldr	r3, [r7, #12]
 2213 00f2 D3ED007A 		vldr.32	s15, [r3]
 2214 00f6 B0EE670A 		vmov.f32	s0, s15
 2215 00fa FFF7FEFF 		bl	wrap_pm_pi
 2216 00fe F0EE407A 		vmov.f32	s15, s0
 2217              		.loc 3 322 12
 2218 0102 FB68     		ldr	r3, [r7, #12]
 2219 0104 C3ED007A 		vstr.32	s15, [r3]
 323:Src/utils.cpp **** }
 2220              		.loc 3 323 1
 2221 0108 00BF     		nop
 2222 010a 3837     		adds	r7, r7, #56
 2223              	.LCFI110:
 2224              		.cfi_def_cfa_offset 8
 2225 010c BD46     		mov	sp, r7
 2226              	.LCFI111:
 2227              		.cfi_def_cfa_register 13
 2228              		@ sp needed
 2229 010e 80BD     		pop	{r7, pc}
 2230              	.L149:
 2231              		.align	2
 2232              	.L148:
 2233 0110 0000004F 		.word	1325400064
 2234 0114 DB0F4940 		.word	1078530011
 2235 0118 000C0240 		.word	1073875968
 2236 011c 00000030 		.word	805306368
ARM GAS  /tmp/ccKQCraR.s 			page 61


 2237              		.cfi_endproc
 2238              	.LFE3008:
 2240              		.section	.text.clark_park,"ax",%progbits
 2241              		.align	1
 2242              		.global	clark_park
 2243              		.syntax unified
 2244              		.thumb
 2245              		.thumb_func
 2246              		.fpu fpv4-sp-d16
 2248              	clark_park:
 2249              	.LFB3009:
 324:Src/utils.cpp **** 
 325:Src/utils.cpp **** #include "stm32g4xx_ll_cordic.h"
 326:Src/utils.cpp **** 
 327:Src/utils.cpp **** void clark_park(float *iq, float *id, float theta, float ia, float ib)
 328:Src/utils.cpp **** {
 2250              		.loc 3 328 1
 2251              		.cfi_startproc
 2252              		@ args = 0, pretend = 0, frame = 56
 2253              		@ frame_needed = 1, uses_anonymous_args = 0
 2254 0000 80B5     		push	{r7, lr}
 2255              	.LCFI112:
 2256              		.cfi_def_cfa_offset 8
 2257              		.cfi_offset 7, -8
 2258              		.cfi_offset 14, -4
 2259 0002 92B0     		sub	sp, sp, #72
 2260              	.LCFI113:
 2261              		.cfi_def_cfa_offset 80
 2262 0004 04AF     		add	r7, sp, #16
 2263              	.LCFI114:
 2264              		.cfi_def_cfa 7, 64
 2265 0006 7861     		str	r0, [r7, #20]
 2266 0008 3961     		str	r1, [r7, #16]
 2267 000a 87ED030A 		vstr.32	s0, [r7, #12]
 2268 000e C7ED020A 		vstr.32	s1, [r7, #8]
 2269 0012 87ED011A 		vstr.32	s2, [r7, #4]
 329:Src/utils.cpp ****     // Convert theta to Q1.31 format
 330:Src/utils.cpp ****     int32_t angle = (int32_t)(theta * 2147483648.0f / M_PI);  // 2^31 = 2147483648
 2270              		.loc 3 330 37
 2271 0016 D7ED037A 		vldr.32	s15, [r7, #12]
 2272 001a 9FED3C7A 		vldr.32	s14, .L151
 2273 001e 27EE877A 		vmul.f32	s14, s15, s14
 2274              		.loc 3 330 53
 2275 0022 DFED3B6A 		vldr.32	s13, .L151+4
 2276 0026 C7EE267A 		vdiv.f32	s15, s14, s13
 2277              		.loc 3 330 13
 2278 002a FDEEE77A 		vcvt.s32.f32	s15, s15
 2279 002e 17EE903A 		vmov	r3, s15	@ int
 2280 0032 7B63     		str	r3, [r7, #52]
 331:Src/utils.cpp ****     
 332:Src/utils.cpp ****     // Configure CORDIC for sine/cosine calculation
 333:Src/utils.cpp ****     LL_CORDIC_Config(CORDIC, 
 2281              		.loc 3 333 21
 2282 0034 0023     		movs	r3, #0
 2283 0036 0393     		str	r3, [sp, #12]
 2284 0038 0023     		movs	r3, #0
 2285 003a 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccKQCraR.s 			page 62


 2286 003c 4FF40023 		mov	r3, #524288
 2287 0040 0193     		str	r3, [sp, #4]
 2288 0042 0023     		movs	r3, #0
 2289 0044 0093     		str	r3, [sp]
 2290 0046 0023     		movs	r3, #0
 2291 0048 6022     		movs	r2, #96
 2292 004a 0021     		movs	r1, #0
 2293 004c 3148     		ldr	r0, .L151+8
 2294 004e FFF7FEFF 		bl	LL_CORDIC_Config
 334:Src/utils.cpp ****                      LL_CORDIC_FUNCTION_COSINE,        // Function
 335:Src/utils.cpp ****                      LL_CORDIC_PRECISION_6CYCLES,      // Precision
 336:Src/utils.cpp ****                      LL_CORDIC_SCALE_0,               // Scale
 337:Src/utils.cpp ****                      LL_CORDIC_NBWRITE_1,             // Input size
 338:Src/utils.cpp ****                      LL_CORDIC_NBREAD_2,              // Output size
 339:Src/utils.cpp ****                      LL_CORDIC_INSIZE_32BITS,         // Input width
 340:Src/utils.cpp ****                      LL_CORDIC_OUTSIZE_32BITS);       // Output width
 341:Src/utils.cpp ****     
 342:Src/utils.cpp ****     // Write input data
 343:Src/utils.cpp ****     LL_CORDIC_WriteData(CORDIC, angle);
 2295              		.loc 3 343 24
 2296 0052 7B6B     		ldr	r3, [r7, #52]
 2297 0054 1946     		mov	r1, r3
 2298 0056 2F48     		ldr	r0, .L151+8
 2299 0058 FFF7FEFF 		bl	LL_CORDIC_WriteData
 344:Src/utils.cpp ****     
 345:Src/utils.cpp ****     // Read results in Q1.31 format
 346:Src/utils.cpp ****     int32_t cos_theta = LL_CORDIC_ReadData(CORDIC);  // cosine
 2300              		.loc 3 346 43
 2301 005c 2D48     		ldr	r0, .L151+8
 2302 005e FFF7FEFF 		bl	LL_CORDIC_ReadData
 2303 0062 0346     		mov	r3, r0
 2304              		.loc 3 346 50
 2305 0064 3B63     		str	r3, [r7, #48]
 347:Src/utils.cpp ****     int32_t sin_theta = LL_CORDIC_ReadData(CORDIC);  // sine
 2306              		.loc 3 347 43
 2307 0066 2B48     		ldr	r0, .L151+8
 2308 0068 FFF7FEFF 		bl	LL_CORDIC_ReadData
 2309 006c 0346     		mov	r3, r0
 2310              		.loc 3 347 50
 2311 006e FB62     		str	r3, [r7, #44]
 348:Src/utils.cpp ****     
 349:Src/utils.cpp ****     // Convert Q1.31 to float
 350:Src/utils.cpp ****     float c_p = (float)cos_theta * INV_2_POW_31;
 2312              		.loc 3 350 17
 2313 0070 3B6B     		ldr	r3, [r7, #48]
 2314 0072 07EE903A 		vmov	s15, r3	@ int
 2315 0076 F8EEE77A 		vcvt.f32.s32	s15, s15
 2316              		.loc 3 350 11
 2317 007a 9FED277A 		vldr.32	s14, .L151+12
 2318 007e 67EE877A 		vmul.f32	s15, s15, s14
 2319 0082 C7ED0A7A 		vstr.32	s15, [r7, #40]
 351:Src/utils.cpp ****     float s_p = (float)sin_theta * INV_2_POW_31;
 2320              		.loc 3 351 17
 2321 0086 FB6A     		ldr	r3, [r7, #44]
 2322 0088 07EE903A 		vmov	s15, r3	@ int
 2323 008c F8EEE77A 		vcvt.f32.s32	s15, s15
 2324              		.loc 3 351 11
ARM GAS  /tmp/ccKQCraR.s 			page 63


 2325 0090 9FED217A 		vldr.32	s14, .L151+12
 2326 0094 67EE877A 		vmul.f32	s15, s15, s14
 2327 0098 C7ED097A 		vstr.32	s15, [r7, #36]
 352:Src/utils.cpp ****     
 353:Src/utils.cpp ****     // Clarke transform (abc -> αβ)
 354:Src/utils.cpp ****     float i_alpha = ia;
 2328              		.loc 3 354 11
 2329 009c BB68     		ldr	r3, [r7, #8]	@ float
 2330 009e 3B62     		str	r3, [r7, #32]	@ float
 355:Src/utils.cpp ****     float i_beta = (ia + 2.0f * ib) * one_by_sqrt3;
 2331              		.loc 3 355 31
 2332 00a0 D7ED017A 		vldr.32	s15, [r7, #4]
 2333 00a4 37EEA77A 		vadd.f32	s14, s15, s15
 2334              		.loc 3 355 24
 2335 00a8 D7ED027A 		vldr.32	s15, [r7, #8]
 2336 00ac 77EE277A 		vadd.f32	s15, s14, s15
 2337              		.loc 3 355 11
 2338 00b0 9FED1A7A 		vldr.32	s14, .L151+16
 2339 00b4 67EE877A 		vmul.f32	s15, s15, s14
 2340 00b8 C7ED077A 		vstr.32	s15, [r7, #28]
 356:Src/utils.cpp ****     
 357:Src/utils.cpp ****     // Park transform (αβ -> dq)
 358:Src/utils.cpp ****     *id = i_alpha * c_p + i_beta * s_p;
 2341              		.loc 3 358 19
 2342 00bc 97ED087A 		vldr.32	s14, [r7, #32]
 2343 00c0 D7ED0A7A 		vldr.32	s15, [r7, #40]
 2344 00c4 27EE277A 		vmul.f32	s14, s14, s15
 2345              		.loc 3 358 34
 2346 00c8 D7ED076A 		vldr.32	s13, [r7, #28]
 2347 00cc D7ED097A 		vldr.32	s15, [r7, #36]
 2348 00d0 66EEA77A 		vmul.f32	s15, s13, s15
 2349              		.loc 3 358 25
 2350 00d4 77EE277A 		vadd.f32	s15, s14, s15
 2351              		.loc 3 358 9
 2352 00d8 3B69     		ldr	r3, [r7, #16]
 2353 00da C3ED007A 		vstr.32	s15, [r3]
 359:Src/utils.cpp ****     *iq = -i_alpha * s_p + i_beta * c_p;
 2354              		.loc 3 359 11
 2355 00de D7ED087A 		vldr.32	s15, [r7, #32]
 2356 00e2 B1EE677A 		vneg.f32	s14, s15
 2357              		.loc 3 359 20
 2358 00e6 D7ED097A 		vldr.32	s15, [r7, #36]
 2359 00ea 27EE277A 		vmul.f32	s14, s14, s15
 2360              		.loc 3 359 35
 2361 00ee D7ED076A 		vldr.32	s13, [r7, #28]
 2362 00f2 D7ED0A7A 		vldr.32	s15, [r7, #40]
 2363 00f6 66EEA77A 		vmul.f32	s15, s13, s15
 2364              		.loc 3 359 26
 2365 00fa 77EE277A 		vadd.f32	s15, s14, s15
 2366              		.loc 3 359 9
 2367 00fe 7B69     		ldr	r3, [r7, #20]
 2368 0100 C3ED007A 		vstr.32	s15, [r3]
 360:Src/utils.cpp **** }...
 2369              		.loc 3 360 1
 2370 0104 00BF     		nop
 2371 0106 3837     		adds	r7, r7, #56
 2372              	.LCFI115:
ARM GAS  /tmp/ccKQCraR.s 			page 64


 2373              		.cfi_def_cfa_offset 8
 2374 0108 BD46     		mov	sp, r7
 2375              	.LCFI116:
 2376              		.cfi_def_cfa_register 13
 2377              		@ sp needed
 2378 010a 80BD     		pop	{r7, pc}
 2379              	.L152:
 2380              		.align	2
 2381              	.L151:
 2382 010c 0000004F 		.word	1325400064
 2383 0110 DB0F4940 		.word	1078530011
 2384 0114 000C0240 		.word	1073875968
 2385 0118 00000030 		.word	805306368
 2386 011c 3ACD133F 		.word	1058262330
 2387              		.cfi_endproc
 2388              	.LFE3009:
 2390              		.text
 2391              	.Letext0:
 2392              		.file 4 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/lib/gcc/arm-none-eabi/10.2.1/include/stddef
 2393              		.file 5 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_default_type
 2394              		.file 6 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 2395              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 2396              		.file 8 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmath"
 2397              		.file 9 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/type_trait
 2398              		.file 10 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/debug/deb
 2399              		.file 11 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/std_
 2400              		.file 12 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/tr1/speci
 2401              		.file 13 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-none-
 2402              		.file 14 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/pred
 2403              		.file 15 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/math.h"
 2404              		.file 16 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/math.h"
 2405              		.file 17 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 2406              		.file 18 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 2407              		.file 19 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 2408              		.file 20 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 2409              		.file 21 "<built-in>"
 2410              		.file 22 "/usr/share/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/cpp_
ARM GAS  /tmp/ccKQCraR.s 			page 65


DEFINED SYMBOLS
                            *ABS*:0000000000000000 utils.cpp
     /tmp/ccKQCraR.s:18     .text.LL_CORDIC_Config:0000000000000000 $t
     /tmp/ccKQCraR.s:25     .text.LL_CORDIC_Config:0000000000000000 LL_CORDIC_Config
     /tmp/ccKQCraR.s:85     .text.LL_CORDIC_Config:0000000000000044 $d
     /tmp/ccKQCraR.s:90     .text.LL_CORDIC_WriteData:0000000000000000 $t
     /tmp/ccKQCraR.s:96     .text.LL_CORDIC_WriteData:0000000000000000 LL_CORDIC_WriteData
     /tmp/ccKQCraR.s:137    .text.LL_CORDIC_ReadData:0000000000000000 $t
     /tmp/ccKQCraR.s:143    .text.LL_CORDIC_ReadData:0000000000000000 LL_CORDIC_ReadData
     /tmp/ccKQCraR.s:182    .rodata._ZL12one_by_sqrt3:0000000000000000 $d
     /tmp/ccKQCraR.s:185    .rodata._ZL12one_by_sqrt3:0000000000000000 _ZL12one_by_sqrt3
     /tmp/ccKQCraR.s:188    .rodata._ZL12two_by_sqrt3:0000000000000000 $d
     /tmp/ccKQCraR.s:191    .rodata._ZL12two_by_sqrt3:0000000000000000 _ZL12two_by_sqrt3
     /tmp/ccKQCraR.s:194    .rodata._ZL10sqrt3_by_2:0000000000000000 $d
     /tmp/ccKQCraR.s:197    .rodata._ZL10sqrt3_by_2:0000000000000000 _ZL10sqrt3_by_2
     /tmp/ccKQCraR.s:200    .text.fmodf_pos:0000000000000000 $t
     /tmp/ccKQCraR.s:206    .text.fmodf_pos:0000000000000000 fmodf_pos
     /tmp/ccKQCraR.s:259    .text.wrap_pm:0000000000000000 $t
     /tmp/ccKQCraR.s:265    .text.wrap_pm:0000000000000000 wrap_pm
     /tmp/ccKQCraR.s:311    .text.wrap_pm_pi:0000000000000000 $t
     /tmp/ccKQCraR.s:317    .text.wrap_pm_pi:0000000000000000 wrap_pm_pi
     /tmp/ccKQCraR.s:353    .text.wrap_pm_pi:0000000000000024 $d
     /tmp/ccKQCraR.s:358    .rodata._ZL16OFFSET_TAB_CCMRx:0000000000000000 $d
     /tmp/ccKQCraR.s:361    .rodata._ZL16OFFSET_TAB_CCMRx:0000000000000000 _ZL16OFFSET_TAB_CCMRx
     /tmp/ccKQCraR.s:364    .rodata._ZL14SHIFT_TAB_OCxx:0000000000000000 $d
     /tmp/ccKQCraR.s:367    .rodata._ZL14SHIFT_TAB_OCxx:0000000000000000 _ZL14SHIFT_TAB_OCxx
     /tmp/ccKQCraR.s:370    .rodata._ZL14SHIFT_TAB_ICxx:0000000000000000 $d
     /tmp/ccKQCraR.s:373    .rodata._ZL14SHIFT_TAB_ICxx:0000000000000000 _ZL14SHIFT_TAB_ICxx
     /tmp/ccKQCraR.s:376    .rodata._ZL14SHIFT_TAB_CCxP:0000000000000000 $d
     /tmp/ccKQCraR.s:379    .rodata._ZL14SHIFT_TAB_CCxP:0000000000000000 _ZL14SHIFT_TAB_CCxP
     /tmp/ccKQCraR.s:382    .rodata._ZL14SHIFT_TAB_OISx:0000000000000000 $d
     /tmp/ccKQCraR.s:385    .rodata._ZL14SHIFT_TAB_OISx:0000000000000000 _ZL14SHIFT_TAB_OISx
     /tmp/ccKQCraR.s:388    .rodata._ZL19USART_PRESCALER_TAB:0000000000000000 $d
     /tmp/ccKQCraR.s:391    .rodata._ZL19USART_PRESCALER_TAB:0000000000000000 _ZL19USART_PRESCALER_TAB
     /tmp/ccKQCraR.s:405    .rodata._ZL18CHANNEL_OFFSET_TAB:0000000000000000 $d
     /tmp/ccKQCraR.s:408    .rodata._ZL18CHANNEL_OFFSET_TAB:0000000000000000 _ZL18CHANNEL_OFFSET_TAB
     /tmp/ccKQCraR.s:411    .rodata._ZL8crcTable:0000000000000000 $d
     /tmp/ccKQCraR.s:414    .rodata._ZL8crcTable:0000000000000000 _ZL8crcTable
     /tmp/ccKQCraR.s:431    .text.calcCRC:0000000000000000 $t
     /tmp/ccKQCraR.s:438    .text.calcCRC:0000000000000000 calcCRC
     /tmp/ccKQCraR.s:517    .text.calcCRC:0000000000000054 $d
     /tmp/ccKQCraR.s:522    .text.SVM:0000000000000000 $t
     /tmp/ccKQCraR.s:529    .text.SVM:0000000000000000 SVM
     /tmp/ccKQCraR.s:649    .text.SVM:00000000000000e4 $d
     /tmp/ccKQCraR.s:655    .text.SVM:00000000000000fc $t
     /tmp/ccKQCraR.s:916    .text.SVM:0000000000000358 $d
     /tmp/ccKQCraR.s:923    .text.SVM:0000000000000368 $t
     /tmp/ccKQCraR.s:1056   .text.fast_atan2:0000000000000000 $t
     /tmp/ccKQCraR.s:1063   .text.fast_atan2:0000000000000000 fast_atan2
     /tmp/ccKQCraR.s:1202   .text.fast_atan2:0000000000000128 $d
     /tmp/ccKQCraR.s:1212   .text.horner_fma:0000000000000000 $t
     /tmp/ccKQCraR.s:1219   .text.horner_fma:0000000000000000 horner_fma
     /tmp/ccKQCraR.s:1288   .text.mod:0000000000000000 $t
     /tmp/ccKQCraR.s:1295   .text.mod:0000000000000000 mod
     /tmp/ccKQCraR.s:1355   .text.deadline_to_timeout:0000000000000000 $t
     /tmp/ccKQCraR.s:1362   .text.deadline_to_timeout:0000000000000000 deadline_to_timeout
     /tmp/ccKQCraR.s:1455   .text.timeout_to_deadline:0000000000000000 $t
ARM GAS  /tmp/ccKQCraR.s 			page 66


     /tmp/ccKQCraR.s:1462   .text.timeout_to_deadline:0000000000000000 timeout_to_deadline
     /tmp/ccKQCraR.s:1550   .text.is_in_the_future:0000000000000000 $t
     /tmp/ccKQCraR.s:1557   .text.is_in_the_future:0000000000000000 is_in_the_future
     /tmp/ccKQCraR.s:1593   .text.micros:0000000000000000 $t
     /tmp/ccKQCraR.s:1600   .text.micros:0000000000000000 micros
     /tmp/ccKQCraR.s:1649   .text.micros:0000000000000034 $d
     /tmp/ccKQCraR.s:1654   .text.delay_us:0000000000000000 $t
     /tmp/ccKQCraR.s:1661   .text.delay_us:0000000000000000 delay_us
     /tmp/ccKQCraR.s:1722   .text.fsgn:0000000000000000 $t
     /tmp/ccKQCraR.s:1729   .text.fsgn:0000000000000000 fsgn
     /tmp/ccKQCraR.s:1786   .text.saturation:0000000000000000 $t
     /tmp/ccKQCraR.s:1793   .text.saturation:0000000000000000 saturation
     /tmp/ccKQCraR.s:1852   .text.initNotchFilter:0000000000000000 $t
     /tmp/ccKQCraR.s:1859   .text.initNotchFilter:0000000000000000 initNotchFilter
     /tmp/ccKQCraR.s:1969   .text.initNotchFilter:00000000000000b8 $d
     /tmp/ccKQCraR.s:1977   .text.applyNotchFilter:0000000000000000 $t
     /tmp/ccKQCraR.s:1984   .text.applyNotchFilter:0000000000000000 applyNotchFilter
     /tmp/ccKQCraR.s:2086   .rodata._ZL12INV_2_POW_31:0000000000000000 $d
     /tmp/ccKQCraR.s:2089   .rodata._ZL12INV_2_POW_31:0000000000000000 _ZL12INV_2_POW_31
     /tmp/ccKQCraR.s:2092   .text.test_svm:0000000000000000 $t
     /tmp/ccKQCraR.s:2099   .text.test_svm:0000000000000000 test_svm
     /tmp/ccKQCraR.s:2233   .text.test_svm:0000000000000110 $d
     /tmp/ccKQCraR.s:2241   .text.clark_park:0000000000000000 $t
     /tmp/ccKQCraR.s:2248   .text.clark_park:0000000000000000 clark_park
     /tmp/ccKQCraR.s:2382   .text.clark_park:000000000000010c $d

UNDEFINED SYMBOLS
fmodf
fmaf
__aeabi_uldivmod
osKernelSysTick
HAL_GetTick
our_arm_sin_f32
our_arm_cos_f32
